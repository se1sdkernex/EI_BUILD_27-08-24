
EI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026de0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000060dc  08026fe0  08026fe0  00036fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d0bc  0802d0bc  000404e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802d0bc  0802d0bc  0003d0bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d0c4  0802d0c4  000404e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d0c4  0802d0c4  0003d0c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d0c8  0802d0c8  0003d0c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0802d0cc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200003a4  0802d470  000403a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000444  0802d510  00040444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015cf4  200004e4  0802d5b0  000404e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200161d8  0802d5b0  000461d8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a437  00000000  00000000  00040512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008864  00000000  00000000  0007a949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002560  00000000  00000000  000831b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002270  00000000  00000000  00085710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044171  00000000  00000000  00087980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004af0b  00000000  00000000  000cbaf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013d4f4  00000000  00000000  001169fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00253ef0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a370  00000000  00000000  00253f40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004e4 	.word	0x200004e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08026fc8 	.word	0x08026fc8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004e8 	.word	0x200004e8
 800023c:	08026fc8 	.word	0x08026fc8

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000fc4 	.word	0x20000fc4
 8000a70:	08026fe0 	.word	0x08026fe0
 8000a74:	08026fec 	.word	0x08026fec
 8000a78:	08026ffc 	.word	0x08026ffc
 8000a7c:	0802700c 	.word	0x0802700c
 8000a80:	08027020 	.word	0x08027020
 8000a84:	08027034 	.word	0x08027034
 8000a88:	08027048 	.word	0x08027048
 8000a8c:	08027054 	.word	0x08027054
 8000a90:	200013ac 	.word	0x200013ac

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01d fd97 	bl	801e5d8 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f025 f8c3 	bl	8025c40 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000db78 	.word	0x2000db78
 8000ac8:	20000340 	.word	0x20000340

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01a fc6b 	bl	801b3b8 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01a fc5b 	bl	801b3b8 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01a fc4a 	bl	801b3b8 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000fbc 	.word	0x20000fbc
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f024 fe86 	bl	802588c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f fa1b 	bl	800ffc0 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f017 fd23 	bl	80185e0 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f017 fcd2 	bl	8018560 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f024 ff3c 	bl	8025a5c <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f024 ffb0 	bl	8025b94 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f024 ff06 	bl	8025a5c <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f024 ff81 	bl	8025b94 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f024 fed4 	bl	8025a5c <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f024 ff6d 	bl	8025b94 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f024 feb7 	bl	8025a5c <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f024 fea9 	bl	8025a5c <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f024 ff42 	bl	8025b94 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f024 fe89 	bl	8025a5c <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f024 fe7b 	bl	8025a5c <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f024 ff14 	bl	8025b94 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f024 fe56 	bl	8025a5c <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f024 fe34 	bl	8025a5c <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f024 fe1b 	bl	8025a5c <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f024 fe0d 	bl	8025a5c <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f024 fdff 	bl	8025a5c <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f024 fe97 	bl	8025b94 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00f fe1f 	bl	8010ab8 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000bf34 	.word	0x2000bf34
 8000e88:	0802705c 	.word	0x0802705c
 8000e8c:	20000bba 	.word	0x20000bba
 8000e90:	08027074 	.word	0x08027074
 8000e94:	20000ff6 	.word	0x20000ff6
 8000e98:	080270b4 	.word	0x080270b4
 8000e9c:	20000bbb 	.word	0x20000bbb
 8000ea0:	080270c8 	.word	0x080270c8
 8000ea4:	20001028 	.word	0x20001028
 8000ea8:	080270e4 	.word	0x080270e4
 8000eac:	08027100 	.word	0x08027100
 8000eb0:	2000308c 	.word	0x2000308c
 8000eb4:	08027110 	.word	0x08027110
 8000eb8:	2000105a 	.word	0x2000105a
 8000ebc:	08027124 	.word	0x08027124
 8000ec0:	2000108c 	.word	0x2000108c
 8000ec4:	08027134 	.word	0x08027134
 8000ec8:	200010be 	.word	0x200010be
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	20001122 	.word	0x20001122
 8000ed4:	08027150 	.word	0x08027150
 8000ed8:	20001154 	.word	0x20001154
 8000edc:	08027160 	.word	0x08027160
 8000ee0:	20001186 	.word	0x20001186

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f024 fc7e 	bl	802581c <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000fc4 	.word	0x20000fc4
 8000f48:	200013ac 	.word	0x200013ac

08000f4c <CheckEIPC_DAT_CRC>:
		printf("%s\n",Commands_List[Traverser]);
	}
}

void CheckEIPC_DAT_CRC(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	static uint32_t CheckClk = 0;

	if(HAL_Elaps_Ticks(CheckClk) > FOUR_SEC)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f f833 	bl	800ffc0 <HAL_Elaps_Ticks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f60:	d921      	bls.n	8000fa6 <CheckEIPC_DAT_CRC+0x5a>
	{
		if((DatCrcXchangeSelf_st.App_CRC != DatCrcXchangeOther_st.App_CRC) && (DatCrcXchangeOther_st.App_CRC != 0))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
		{
			printf("\nEIPC's are not in Sync.....!!!!!\n");
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <CheckEIPC_DAT_CRC+0x6c>)
 8000f78:	f024 fe0c 	bl	8025b94 <puts>
			printf("Self CRC:%04X\n",DatCrcXchangeSelf_st.App_CRC);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <CheckEIPC_DAT_CRC+0x70>)
 8000f84:	f024 fd6a 	bl	8025a5c <iprintf>
			printf("Other CRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <CheckEIPC_DAT_CRC+0x74>)
 8000f90:	f024 fd64 	bl	8025a5c <iprintf>

#ifdef EI_1
		TransmitCanPkt(DAT_CRC_EXCHANGE_1);
#endif
#ifdef EI_2
		TransmitCanPkt(DAT_CRC_EXCHANGE_2);
 8000f94:	f240 200a 	movw	r0, #522	; 0x20a
 8000f98:	f00f fd8e 	bl	8010ab8 <TransmitCanPkt>
#endif

		CheckClk = HAL_GetTick();
 8000f9c:	f017 fe48 	bl	8018c30 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000fa4:	6013      	str	r3, [r2, #0]

	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200013b0 	.word	0x200013b0
 8000fb0:	20000bb4 	.word	0x20000bb4
 8000fb4:	20000bb8 	.word	0x20000bb8
 8000fb8:	0802719c 	.word	0x0802719c
 8000fbc:	080271c0 	.word	0x080271c0
 8000fc0:	080271d0 	.word	0x080271d0

08000fc4 <Check_OnlineDiag_OFC_Modem>:
		0x40
};


void Check_OnlineDiag_OFC_Modem(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	static unsigned int ui_Online_DigChkTics;
	if(HAL_Elaps_Ticks(ui_Online_DigChkTics) > (SEVEN*ONE_SEC))           // wait for 30 Sec
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00e fff7 	bl	800ffc0 <HAL_Elaps_Ticks>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d906      	bls.n	8000fea <Check_OnlineDiag_OFC_Modem+0x26>
	{
		Check_Online_Dignostic_RIU();                                //Checking the online dignostic status of network of OFC modem
 8000fdc:	f000 f80a 	bl	8000ff4 <Check_Online_Dignostic_RIU>
		ui_Online_DigChkTics = HAL_GetTick();
 8000fe0:	f017 fe26 	bl	8018c30 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fe8:	6013      	str	r3, [r2, #0]
	}
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002370 	.word	0x20002370

08000ff4 <Check_Online_Dignostic_RIU>:

void Check_Online_Dignostic_RIU(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	//static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Failure_check_flag,Flag = 4,suc_Hold_Flag =1;
	static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Flag = 4,suc_Hold_Flag =1;
	unsigned char index,insert_index = 0,check_index = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	2300      	movs	r3, #0
 8001000:	717b      	strb	r3, [r7, #5]
	for(index = 0;index< 31; index++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e069      	b.n	80010dc <Check_Online_Dignostic_RIU+0xe8>
	{
		if(Online_diag_flag[index] == 0)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <Check_Online_Dignostic_RIU+0x30>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],0);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b298      	uxth	r0, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	4a6c      	ldr	r2, [pc, #432]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800101a:	441a      	add	r2, r3
 800101c:	2300      	movs	r3, #0
 800101e:	2102      	movs	r1, #2
 8001020:	f7ff fb84 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <Check_Online_Dignostic_RIU+0x4c>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],1);
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	b298      	uxth	r0, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001036:	441a      	add	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	2102      	movs	r1, #2
 800103c:	f7ff fb76 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 2)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a61      	ldr	r2, [pc, #388]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d108      	bne.n	800105c <Check_Online_Dignostic_RIU+0x68>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],2);
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b298      	uxth	r0, r3
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001052:	441a      	add	r2, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2102      	movs	r1, #2
 8001058:	f7ff fb68 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 3)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <Check_Online_Dignostic_RIU+0x84>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b298      	uxth	r0, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800106e:	441a      	add	r2, r3
 8001070:	2303      	movs	r3, #3
 8001072:	2102      	movs	r1, #2
 8001074:	f7ff fb5a 	bl	800072c <InsertBits>

		}
		if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (FIFTEEN*ONE_SEC))
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f00e ff9f 	bl	800ffc0 <HAL_Elaps_Ticks>
 8001082:	4603      	mov	r3, r0
 8001084:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001088:	4293      	cmp	r3, r2
 800108a:	d913      	bls.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
		{
			if(Online_diag_flag[index] > 0)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
			{
				InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	b298      	uxth	r0, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800109e:	441a      	add	r2, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	2102      	movs	r1, #2
 80010a4:	f7ff fb42 	bl	800072c <InsertBits>
				ofc_flag1 = 1;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
				//	ofc_flag1 = 1;
				printf("##############################################Both fiber link failure ocuired$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
 80010ae:	484a      	ldr	r0, [pc, #296]	; (80011d8 <Check_Online_Dignostic_RIU+0x1e4>)
 80010b0:	f024 fcd4 	bl	8025a5c <iprintf>

			}
		}
		insert_index =	insert_index + 2;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	3302      	adds	r3, #2
 80010b8:	71bb      	strb	r3, [r7, #6]
		if(insert_index == 8)
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d104      	bne.n	80010ca <Check_Online_Dignostic_RIU+0xd6>
		{
			insert_index = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
			check_index++;
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	3301      	adds	r3, #1
 80010c8:	717b      	strb	r3, [r7, #5]
		}
		if((check_index == 7)&&(insert_index == 6))
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d102      	bne.n	80010d6 <Check_Online_Dignostic_RIU+0xe2>
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d006      	beq.n	80010e4 <Check_Online_Dignostic_RIU+0xf0>
	for(index = 0;index< 31; index++)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3301      	adds	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d992      	bls.n	8001008 <Check_Online_Dignostic_RIU+0x14>
 80010e2:	e000      	b.n	80010e6 <Check_Online_Dignostic_RIU+0xf2>
		{
			break;
 80010e4:	bf00      	nop
		}
	}
	for(index = 0;index< 31; index++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e010      	b.n	800110e <Check_Online_Dignostic_RIU+0x11a>
	{
		if((Online_diag_flag[index] > 0)&&(Online_diag_flag[index] < 4))
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <Check_Online_Dignostic_RIU+0x114>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d803      	bhi.n	8001108 <Check_Online_Dignostic_RIU+0x114>
		{
			temp1 = index;
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	7013      	strb	r3, [r2, #0]
			break;
 8001106:	e005      	b.n	8001114 <Check_Online_Dignostic_RIU+0x120>
	for(index = 0;index< 31; index++)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3301      	adds	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b1e      	cmp	r3, #30
 8001112:	d9eb      	bls.n	80010ec <Check_Online_Dignostic_RIU+0xf8>
		}
	}
	temp2 = temp1;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 800111a:	701a      	strb	r2, [r3, #0]
	temp3 = index;
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]

	if(temp2 != temp3)
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d019      	beq.n	8001162 <Check_Online_Dignostic_RIU+0x16e>
	{
		printf("\n***********************FIBER LINK OK******************************\n");
 800112e:	482e      	ldr	r0, [pc, #184]	; (80011e8 <Check_Online_Dignostic_RIU+0x1f4>)
 8001130:	f024 fd30 	bl	8025b94 <puts>

		//	ofc_flag2 =0;
		suc_Hold_Flag = 1;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		Failure_check_flag++;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001144:	701a      	strb	r2, [r3, #0]
		if(ofc_flag1 > 4)
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d90c      	bls.n	8001168 <Check_Online_Dignostic_RIU+0x174>
		{
			ofc_flag1 =0;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
			Failure_check_flag =4;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
			printf("\n****************************ASSIGNED***********************\n");
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Check_Online_Dignostic_RIU+0x200>)
 800115c:	f024 fd1a 	bl	8025b94 <puts>
 8001160:	e002      	b.n	8001168 <Check_Online_Dignostic_RIU+0x174>
			 */
		}

	}
	else
		Failure_check_flag = 0;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	if(Failure_check_flag == 250)
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2bfa      	cmp	r3, #250	; 0xfa
 800116e:	d102      	bne.n	8001176 <Check_Online_Dignostic_RIU+0x182>
	{
		Failure_check_flag = 6;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001172:	2206      	movs	r2, #6
 8001174:	701a      	strb	r2, [r3, #0]
	}

	if(temp2 == temp3)
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d142      	bne.n	8001208 <Check_Online_Dignostic_RIU+0x214>
	{
		CAN_Trans_flag++;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 800118c:	701a      	strb	r2, [r3, #0]
		printf("\n************************FIBER LINK FAIL*****************************\n");
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <Check_Online_Dignostic_RIU+0x208>)
 8001190:	f024 fd00 	bl	8025b94 <puts>
		//		Online_diag_flag[index] = 3; //raviteja

		if((4 == Flag)&&(1 == suc_Hold_Flag))
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <Check_Online_Dignostic_RIU+0x20c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d138      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d134      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
		{
			if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (12*ONE_SEC))
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00e ff09 	bl	800ffc0 <HAL_Elaps_Ticks>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d92a      	bls.n	800120e <Check_Online_Dignostic_RIU+0x21a>
			{
				suc_Hold_Flag = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				printf("\n Sending the packet to MIE 1 and MIE 2");
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <Check_Online_Dignostic_RIU+0x210>)
 80011c0:	f024 fc4c 	bl	8025a5c <iprintf>
 80011c4:	e023      	b.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 80011c6:	bf00      	nop
 80011c8:	20002368 	.word	0x20002368
 80011cc:	200013b4 	.word	0x200013b4
 80011d0:	20002360 	.word	0x20002360
 80011d4:	20002364 	.word	0x20002364
 80011d8:	080271e0 	.word	0x080271e0
 80011dc:	20002374 	.word	0x20002374
 80011e0:	20002375 	.word	0x20002375
 80011e4:	20002376 	.word	0x20002376
 80011e8:	08027254 	.word	0x08027254
 80011ec:	20000308 	.word	0x20000308
 80011f0:	2000235c 	.word	0x2000235c
 80011f4:	08027298 	.word	0x08027298
 80011f8:	20002377 	.word	0x20002377
 80011fc:	080272d8 	.word	0x080272d8
 8001200:	20000309 	.word	0x20000309
 8001204:	08027320 	.word	0x08027320

			}
		}
	}
	else
		CAN_Trans_flag = 0;
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	if(CAN_Trans_flag == 250)
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2bfa      	cmp	r3, #250	; 0xfa
 8001214:	d102      	bne.n	800121c <Check_Online_Dignostic_RIU+0x228>
	{
		CAN_Trans_flag = 6;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001218:	2206      	movs	r2, #6
 800121a:	701a      	strb	r2, [r3, #0]
	}
	if((CAN_Trans_flag > 3) && (CAN_Trans_flag < 6) && (Flag == 2))
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d915      	bls.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d811      	bhi.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d10d      	bne.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
		//			{
		//
		//			printf("\n222222Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
		//			}

		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN FAILURE\n");
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <Check_Online_Dignostic_RIU+0x2d8>)
 8001236:	f024 fcad 	bl	8025b94 <puts>
		default:
			printf("ERROR                  \t");
		}
		 */

		Failure_check_flag = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		Flag = 4;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001242:	2204      	movs	r2, #4
 8001244:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001246:	2206      	movs	r2, #6
 8001248:	2100      	movs	r1, #0
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800124c:	f024 fb1e 	bl	802588c <memset>
		//printf("\n111******************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	if(((Failure_check_flag > 3) && (Failure_check_flag < 6)&&(Flag == 4))
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d907      	bls.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d803      	bhi.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d003      	beq.n	8001270 <Check_Online_Dignostic_RIU+0x27c>
			||(ofc_flag1 > 1))
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d916      	bls.n	800129e <Check_Online_Dignostic_RIU+0x2aa>
	{
		if(ofc_flag1 >1)
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d904      	bls.n	8001282 <Check_Online_Dignostic_RIU+0x28e>
		{
			ofc_flag1++;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001280:	6013      	str	r3, [r2, #0]
			//			{
			//
			//			printf("\n3333333Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
			//			}
		}
		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN OK\n");
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <Check_Online_Dignostic_RIU+0x2e8>)
 8001284:	f024 fc86 	bl	8025b94 <puts>
			break;
		default:
			printf("ERROR                  \t");
		}
		 */
		CAN_Trans_flag = 0;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		Flag = 2;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001294:	2206      	movs	r2, #6
 8001296:	2100      	movs	r1, #0
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800129a:	f024 faf7 	bl	802588c <memset>
		//	printf("\n************************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	memset(suc_ReceivedMessage,'\0',sizeof(suc_ReceivedMessage));
 800129e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Check_Online_Dignostic_RIU+0x2ec>)
 80012a6:	f024 faf1 	bl	802588c <memset>
	temp2 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <Check_Online_Dignostic_RIU+0x2f0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	temp3 = 0;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <Check_Online_Dignostic_RIU+0x2f4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	temp1 = 0;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <Check_Online_Dignostic_RIU+0x2f8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20002377 	.word	0x20002377
 80012c8:	20000309 	.word	0x20000309
 80012cc:	08027348 	.word	0x08027348
 80012d0:	2000235c 	.word	0x2000235c
 80012d4:	20002368 	.word	0x20002368
 80012d8:	20002364 	.word	0x20002364
 80012dc:	0802737c 	.word	0x0802737c
 80012e0:	200013bc 	.word	0x200013bc
 80012e4:	20002375 	.word	0x20002375
 80012e8:	20002376 	.word	0x20002376
 80012ec:	20002374 	.word	0x20002374

080012f0 <process_to_comReceived>:

void process_to_comReceived(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0


	unsigned int NoofBuffBytes = 0,Dat_Check;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	//	static unsigned int ui_riucmdTxTics;
	static unsigned char EI_Buffer[300];
	NoofBuffBytes= CommReadAndFormMessage_Cmd(TWO_PORT,EI_Buffer,sizeof(EI_Buffer));
 80012fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <process_to_comReceived+0xcc>)
 8001300:	2002      	movs	r0, #2
 8001302:	f000 f86b 	bl	80013dc <CommReadAndFormMessage_Cmd>
 8001306:	4603      	mov	r3, r0
 8001308:	607b      	str	r3, [r7, #4]

	if(NoofBuffBytes >0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d051      	beq.n	80013b4 <process_to_comReceived+0xc4>
	{
		if((EI_Buffer[0]>=0x01) &&(EI_Buffer[0] <=0x1F))
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <process_to_comReceived+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d048      	beq.n	80013aa <process_to_comReceived+0xba>
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <process_to_comReceived+0xcc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b1f      	cmp	r3, #31
 800131e:	d844      	bhi.n	80013aa <process_to_comReceived+0xba>
		{
			Dat_Check = (int)(EI_Buffer[0]);
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <process_to_comReceived+0xcc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
			if(EI_Buffer[22] == 0xFF)
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <process_to_comReceived+0xcc>)
 8001328:	7d9b      	ldrb	r3, [r3, #22]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d108      	bne.n	8001340 <process_to_comReceived+0x50>
			{
				Online_diag_flag[Dat_Check] =0;
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <process_to_comReceived+0xd0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				printf("\n*******************************SLAVE_%d OK*****************************\n",Dat_Check);
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <process_to_comReceived+0xd4>)
 800133c:	f024 fb8e 	bl	8025a5c <iprintf>
				//ofc_flag1 =0;
			}
			if(EI_Buffer[22] == 0xBF)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <process_to_comReceived+0xcc>)
 8001342:	7d9b      	ldrb	r3, [r3, #22]
 8001344:	2bbf      	cmp	r3, #191	; 0xbf
 8001346:	d10f      	bne.n	8001368 <process_to_comReceived+0x78>
			{
				Online_diag_flag[Dat_Check] = 1;
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <process_to_comReceived+0xd0>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				printf("\n***************************SLAVE_%d FB1_LINK_FAIL*********************\n",Dat_Check);
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <process_to_comReceived+0xd8>)
 8001356:	f024 fb81 	bl	8025a5c <iprintf>
				//	ofc_flag2 =1;
				if(1 == ofc_flag1)
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <process_to_comReceived+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <process_to_comReceived+0x78>
				{
					ofc_flag1 = 2;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <process_to_comReceived+0xdc>)
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x7F)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <process_to_comReceived+0xcc>)
 800136a:	7d9b      	ldrb	r3, [r3, #22]
 800136c:	2b7f      	cmp	r3, #127	; 0x7f
 800136e:	d10f      	bne.n	8001390 <process_to_comReceived+0xa0>
			{
				Online_diag_flag[Dat_Check] = 2;
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <process_to_comReceived+0xd0>)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
				printf("\n********************************SLAVE_%d FB2_LINK_FAIL*******************\n",Dat_Check);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <process_to_comReceived+0xe0>)
 800137e:	f024 fb6d 	bl	8025a5c <iprintf>
				//ofc_flag2 =1;
				if(1 == ofc_flag1)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <process_to_comReceived+0xdc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <process_to_comReceived+0xa0>
				{
					ofc_flag1 = 2;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <process_to_comReceived+0xdc>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x3F)
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <process_to_comReceived+0xcc>)
 8001392:	7d9b      	ldrb	r3, [r3, #22]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d108      	bne.n	80013aa <process_to_comReceived+0xba>
			{
				Online_diag_flag[Dat_Check] = 3;
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <process_to_comReceived+0xd0>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
				printf("\n*****************************SLAVE_%d FB1_&FB2_LINK_FAIL****************\n",Dat_Check);
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <process_to_comReceived+0xe4>)
 80013a6:	f024 fb59 	bl	8025a5c <iprintf>
			}
		}
		sui_failure_determine_clock = HAL_GetTick();
 80013aa:	f017 fc41 	bl	8018c30 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <process_to_comReceived+0xe8>)
 80013b2:	6013      	str	r3, [r2, #0]
	}
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20002378 	.word	0x20002378
 80013c0:	20002368 	.word	0x20002368
 80013c4:	080273a8 	.word	0x080273a8
 80013c8:	080273f4 	.word	0x080273f4
 80013cc:	20002364 	.word	0x20002364
 80013d0:	08027440 	.word	0x08027440
 80013d4:	0802748c 	.word	0x0802748c
 80013d8:	20002360 	.word	0x20002360

080013dc <CommReadAndFormMessage_Cmd>:

unsigned short int CommReadAndFormMessage_Cmd(unsigned short int us_Port,
		unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
	static  char sign1 = 0,sign2 = 0,sign3 = 0,case_check=0;
	static unsigned long int store_index ;
	unsigned char suc_RByte = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
	static unsigned char suc_RcvStatus = 11;
	while(Com_DataReady(us_Port))
 80013f0:	e0a6      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
	{
		suc_RByte = Com_Get_Byte(us_Port);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f017 f8f2 	bl	80185e0 <Com_Get_Byte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
			printf("|%02X|",suc_RByte);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	4619      	mov	r1, r3
 8001404:	4855      	ldr	r0, [pc, #340]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001406:	f024 fb29 	bl	8025a5c <iprintf>

		switch(suc_RcvStatus)
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b0b      	subs	r3, #11
 8001410:	2b03      	cmp	r3, #3
 8001412:	f200 8091 	bhi.w	8001538 <CommReadAndFormMessage_Cmd+0x15c>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <CommReadAndFormMessage_Cmd+0x40>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800145b 	.word	0x0800145b
 8001424:	08001479 	.word	0x08001479
 8001428:	080014ab 	.word	0x080014ab
		{
		case 11:
			if((suc_RByte >= 0x01) && (suc_RByte <= 0x1F) && (suc_RByte != 0x0E))
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8086 	beq.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	f200 8082 	bhi.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b0e      	cmp	r3, #14
 8001440:	d07e      	beq.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign1 = suc_RByte;
 8001442:	4a48      	ldr	r2, [pc, #288]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	7013      	strb	r3, [r2, #0]
				//	printf("sign11 = %X\n",sign1);
				store_index++;
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001450:	6013      	str	r3, [r2, #0]
				suc_RcvStatus = 12;
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001454:	220c      	movs	r2, #12
 8001456:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001458:	e072      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 12:
			if (suc_RByte == FUN_CODE)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d16f      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign2 = suc_RByte;
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800146e:	6013      	str	r3, [r2, #0]
				//	printf("sign12= %X\n ",sign2);
				suc_RcvStatus = 13;
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001472:	220d      	movs	r2, #13
 8001474:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001476:	e063      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 13:
			if(suc_RByte == DBYT_CNT)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b1c      	cmp	r3, #28
 800147c:	d10e      	bne.n	800149c <CommReadAndFormMessage_Cmd+0xc0>
			{

				sign3 = suc_RByte;
 800147e:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800148c:	6013      	str	r3, [r2, #0]
				//	printf("sign13= %X\n ",sign3);
				suc_RcvStatus = 14;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001490:	220e      	movs	r2, #14
 8001492:	701a      	strb	r2, [r3, #0]
				case_check =1;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e051      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			}
			else
			{
				store_index = 0;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
				suc_RcvStatus = 11;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 80014a4:	220b      	movs	r2, #11
 80014a6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014a8:	e04a      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
		case 14:
			puc_ReadMsg[0] = sign1;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
			// printf("BUFF = %X\n", puc_ReadMsg[0]);
			puc_ReadMsg[1] = sign2;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a2d      	ldr	r2, [pc, #180]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[2] = sign3;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[store_index] = suc_RByte;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
			if(store_index < 33)
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d804      	bhi.n	80014e4 <CommReadAndFormMessage_Cmd+0x108>
			{
				store_index++;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e2:	6013      	str	r3, [r2, #0]
			}
			if(store_index == 33)
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b21      	cmp	r3, #33	; 0x21
 80014ea:	d129      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{

				if(Cal_Crc_fun(puc_ReadMsg,(store_index-2)))
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b02      	subs	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f000 f841 	bl	8001580 <Cal_Crc_fun>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00e      	beq.n	8001522 <CommReadAndFormMessage_Cmd+0x146>
				{
					//	printf("CRC OK\n");
					case_check = store_index;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800150c:	701a      	strb	r2, [r3, #0]
					suc_RcvStatus = 11;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001510:	220b      	movs	r2, #11
 8001512:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
					return case_check;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	e018      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
				}
				else
				{
					printf("OFC_CRC NOK\n");
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <CommReadAndFormMessage_Cmd+0x19c>)
 8001524:	f024 fb36 	bl	8025b94 <puts>
					suc_RcvStatus = 11;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800152a:	220b      	movs	r2, #11
 800152c:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e00d      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
			}

			break;
		default:

			printf("In default");
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <CommReadAndFormMessage_Cmd+0x1a0>)
 800153a:	f024 fa8f 	bl	8025a5c <iprintf>
			break;
 800153e:	bf00      	nop
	while(Com_DataReady(us_Port))
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f017 f80b 	bl	8018560 <Com_DataReady>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f af50 	bne.w	80013f2 <CommReadAndFormMessage_Cmd+0x16>


		}
	}
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	080274d8 	.word	0x080274d8
 8001560:	2000030a 	.word	0x2000030a
 8001564:	200024a4 	.word	0x200024a4
 8001568:	200024a8 	.word	0x200024a8
 800156c:	200024ac 	.word	0x200024ac
 8001570:	200024ad 	.word	0x200024ad
 8001574:	200024ae 	.word	0x200024ae
 8001578:	080274e0 	.word	0x080274e0
 800157c:	080274ec 	.word	0x080274ec

08001580 <Cal_Crc_fun>:

unsigned char Cal_Crc_fun(unsigned char * Buffer, unsigned short Length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
	unsigned short Rec_Crc,Cal_Crc;
	//	for(i=0;i<Length;i++)
	//	printf("RECV = %X ",Buffer[i]);
	Cal_Crc = ModBus_CRC16(Buffer,(Length));
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f81f 	bl	80015d4 <ModBus_CRC16>
 8001596:	4603      	mov	r3, r0
 8001598:	81fb      	strh	r3, [r7, #14]
	Rec_Crc = (unsigned short int ) (Buffer[Length+1] & 0xff);
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	3301      	adds	r3, #1
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	81bb      	strh	r3, [r7, #12]
	Rec_Crc = (unsigned short int ) (Rec_Crc<<8);
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	81bb      	strh	r3, [r7, #12]
	Rec_Crc |= Buffer[Length] & 0xff;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	81bb      	strh	r3, [r7, #12]
	//	printf("Cal_Crc = %X Rec_Crc = %X\n",Cal_Crc,Rec_Crc);
	if(Cal_Crc	== Rec_Crc)
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d101      	bne.n	80015c8 <Cal_Crc_fun+0x48>
	{
		return 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <Cal_Crc_fun+0x4a>
	}
	else
	{
		return 0;
 80015c8:	2300      	movs	r3, #0
	}
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <ModBus_CRC16>:

unsigned short ModBus_CRC16( unsigned char * Buffer, unsigned short Length )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
	unsigned char CRCHi = 0xFF;
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	73fb      	strb	r3, [r7, #15]
	unsigned char CRCLo = 0xFF;
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	73bb      	strb	r3, [r7, #14]
	int Index;
	unsigned short ret;
	//	printf("Length=%d",Length);
	//for(Index = 0;Index<Length;Index++)
	//printf("CAL = %X ",Buffer[Index]);
	while( Length--)
 80015e8:	e013      	b.n	8001612 <ModBus_CRC16+0x3e>
	{
		Index = CRCLo ^ *Buffer++ ;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	4053      	eors	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	60bb      	str	r3, [r7, #8]
		CRCLo = CRCHi ^ CRC_Table_Hi[Index];
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <ModBus_CRC16+0x68>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4053      	eors	r3, r2
 8001606:	73bb      	strb	r3, [r7, #14]
		CRCHi = CRC_Table_Lo[Index];
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <ModBus_CRC16+0x6c>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	while( Length--)
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	807a      	strh	r2, [r7, #2]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <ModBus_CRC16+0x16>
	}
	//	CRCHi = CRCHi + 0x17;
	//	printf("LOW Byte = %X HIGHER BYTE = %X\n",CRCLo,CRCHi);
	ret=((unsigned short)CRCHi << 8);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b29b      	uxth	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	81bb      	strh	r3, [r7, #12]
	ret|= (unsigned short)CRCLo;
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b29a      	uxth	r2, r3
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	81bb      	strh	r3, [r7, #12]
	return ret;
 800162e:	89bb      	ldrh	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000108 	.word	0x20000108
 8001640:	20000208 	.word	0x20000208

08001644 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a2      	sub	sp, #136	; 0x88
 8001648:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	227c      	movs	r2, #124	; 0x7c
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f024 f915 	bl	802588c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800166e:	e03a      	b.n	80016e6 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8001670:	f00f f868 	bl	8010744 <Get_Eth_Byte>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 800167a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800167e:	2bf4      	cmp	r3, #244	; 0xf4
 8001680:	d002      	beq.n	8001688 <Process_Hitachi_Packets_Eth+0x44>
 8001682:	2bf6      	cmp	r3, #246	; 0xf6
 8001684:	d00c      	beq.n	80016a0 <Process_Hitachi_Packets_Eth+0x5c>
 8001686:	e01b      	b.n	80016c0 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001688:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001692:	3388      	adds	r3, #136	; 0x88
 8001694:	443b      	add	r3, r7
 8001696:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800169a:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800169e:	e01e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80016a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016aa:	3388      	adds	r3, #136	; 0x88
 80016ac:	443b      	add	r3, r7
 80016ae:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016b2:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80016b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ba:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80016be:	e00e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80016c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00a      	beq.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80016c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016d2:	3388      	adds	r3, #136	; 0x88
 80016d4:	443b      	add	r3, r7
 80016d6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016da:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80016de:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80016e6:	f00f f819 	bl	801071c <Is_There_EI_Data>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1bf      	bne.n	8001670 <Process_Hitachi_Packets_Eth+0x2c>
 80016f0:	e000      	b.n	80016f4 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80016f2:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80016f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80016fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d906      	bls.n	8001712 <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001704:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8ab 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001718:	bf00      	nop
 800171a:	3788      	adds	r7, #136	; 0x88
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0a2      	sub	sp, #136	; 0x88
 8001724:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	227c      	movs	r2, #124	; 0x7c
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f024 f8a7 	bl	802588c <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <Process_Hitachi_Packets_Com+0x138>)
 800174c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07a      	beq.n	800184a <Process_Hitachi_Packets_Com+0x12a>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <Process_Hitachi_Packets_Com+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f00e fc31 	bl	800ffc0 <HAL_Elaps_Ticks>
 800175e:	4603      	mov	r3, r0
 8001760:	2b13      	cmp	r3, #19
 8001762:	d974      	bls.n	800184e <Process_Hitachi_Packets_Com+0x12e>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001764:	e050      	b.n	8001808 <Process_Hitachi_Packets_Com+0xe8>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001766:	2003      	movs	r0, #3
 8001768:	f016 ff3a 	bl	80185e0 <Com_Get_Byte>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		printf("*%02X*",Data);
 8001772:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001776:	4619      	mov	r1, r3
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <Process_Hitachi_Packets_Com+0x140>)
 800177a:	f024 f96f 	bl	8025a5c <iprintf>
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800177e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001782:	2b7e      	cmp	r3, #126	; 0x7e
 8001784:	d90a      	bls.n	800179c <Process_Hitachi_Packets_Com+0x7c>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001786:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	4619      	mov	r1, r3
 800178e:	4835      	ldr	r0, [pc, #212]	; (8001864 <Process_Hitachi_Packets_Com+0x144>)
 8001790:	f024 f964 	bl	8025a5c <iprintf>
			Traverser = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800179a:	e03d      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		}
		//printf("%02X ",Data);
		switch(Data)
 800179c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80017a0:	2bf4      	cmp	r3, #244	; 0xf4
 80017a2:	d002      	beq.n	80017aa <Process_Hitachi_Packets_Com+0x8a>
 80017a4:	2bf6      	cmp	r3, #246	; 0xf6
 80017a6:	d00c      	beq.n	80017c2 <Process_Hitachi_Packets_Com+0xa2>
 80017a8:	e01b      	b.n	80017e2 <Process_Hitachi_Packets_Com+0xc2>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80017aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017b4:	3388      	adds	r3, #136	; 0x88
 80017b6:	443b      	add	r3, r7
 80017b8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017bc:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80017c0:	e01e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80017c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017cc:	3388      	adds	r3, #136	; 0x88
 80017ce:	443b      	add	r3, r7
 80017d0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017d4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80017d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80017e0:	e00e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		default:
			if(Traverser >0)
 80017e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
			{
				Temp_array[Traverser++] = Data;
 80017ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017f4:	3388      	adds	r3, #136	; 0x88
 80017f6:	443b      	add	r3, r7
 80017f8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017fc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8001800:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <Process_Hitachi_Packets_Com+0xf6>
	while(Com_DataReady(THREE_PORT))
 8001808:	2003      	movs	r0, #3
 800180a:	f016 fea9 	bl	8018560 <Com_DataReady>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1a8      	bne.n	8001766 <Process_Hitachi_Packets_Com+0x46>
 8001814:	e000      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		{
			break;
 8001816:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001818:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <Process_Hitachi_Packets_Com+0x130>
	{
		if(Traverser>15)
 8001820:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d906      	bls.n	8001836 <Process_Hitachi_Packets_Com+0x116>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001828:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f819 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f024 f822 	bl	802588c <memset>
 8001848:	e002      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184e:	bf00      	nop
	}
}
 8001850:	3788      	adds	r7, #136	; 0x88
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000504 	.word	0x20000504
 800185c:	2000bf30 	.word	0x2000bf30
 8001860:	080274f8 	.word	0x080274f8
 8001864:	08027500 	.word	0x08027500

08001868 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	; 0x90
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	227c      	movs	r2, #124	; 0x7c
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f024 f803 	bl	802588c <memset>
	uint16_t des_index=0,src_index=0;
 8001886:	2300      	movs	r3, #0
 8001888:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800188c:	2300      	movs	r3, #0
 800188e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 8001892:	2300      	movs	r3, #0
 8001894:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001898:	2300      	movs	r3, #0
 800189a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800189e:	e034      	b.n	800190a <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 80018a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2bf0      	cmp	r3, #240	; 0xf0
 80018ac:	d118      	bne.n	80018e0 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80018ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	7819      	ldrb	r1, [r3, #0]
 80018b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018bc:	3301      	adds	r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	3390      	adds	r3, #144	; 0x90
 80018ce:	443b      	add	r3, r7
 80018d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80018d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018d8:	3301      	adds	r3, #1
 80018da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018de:	e00a      	b.n	80018f6 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80018e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	441a      	add	r2, r3
 80018e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	3390      	adds	r3, #144	; 0x90
 80018f0:	443b      	add	r3, r7
 80018f2:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80018f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001900:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001904:	3301      	adds	r3, #1
 8001906:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	b29b      	uxth	r3, r3
 800190e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8001912:	429a      	cmp	r2, r3
 8001914:	d3c4      	bcc.n	80018a0 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 8001916:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f805 	bl	8001930 <EI_Data_Analyzer>
}
 8001926:	bf00      	nop
 8001928:	3790      	adds	r7, #144	; 0x90
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	2300      	movs	r3, #0
 8001946:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001950:	f017 f96e 	bl	8018c30 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001956:	4ba7      	ldr	r3, [pc, #668]	; (8001bf4 <EI_Data_Analyzer+0x2c4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d111      	bne.n	8001982 <EI_Data_Analyzer+0x52>
 800195e:	f017 f967 	bl	8018c30 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	f242 720f 	movw	r2, #9999	; 0x270f
 8001968:	4293      	cmp	r3, r2
 800196a:	d90a      	bls.n	8001982 <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 800196c:	48a2      	ldr	r0, [pc, #648]	; (8001bf8 <EI_Data_Analyzer+0x2c8>)
 800196e:	f024 f911 	bl	8025b94 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001972:	49a2      	ldr	r1, [pc, #648]	; (8001bfc <EI_Data_Analyzer+0x2cc>)
 8001974:	48a2      	ldr	r0, [pc, #648]	; (8001c00 <EI_Data_Analyzer+0x2d0>)
 8001976:	f7fe fc63 	bl	8000240 <strcmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 81a1 	bne.w	8001cc4 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3303      	adds	r3, #3
 8001986:	461a      	mov	r2, r3
 8001988:	2110      	movs	r1, #16
 800198a:	2000      	movs	r0, #0
 800198c:	f7fe fe42 	bl	8000614 <ExtractBits>
 8001990:	4603      	mov	r3, r0
 8001992:	b29b      	uxth	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001996:	e00b      	b.n	80019b0 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 800199c:	3366      	adds	r3, #102	; 0x66
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d009      	beq.n	80019be <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	3301      	adds	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	7ffa      	ldrb	r2, [r7, #31]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3ed      	bcc.n	8001998 <EI_Data_Analyzer+0x68>
 80019bc:	e000      	b.n	80019c0 <EI_Data_Analyzer+0x90>
		{
			break;
 80019be:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	7ffa      	ldrb	r2, [r7, #31]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d309      	bcc.n	80019e0 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8179 	bne.w	8001cc8 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	488c      	ldr	r0, [pc, #560]	; (8001c0c <EI_Data_Analyzer+0x2dc>)
 80019da:	f024 f83f 	bl	8025a5c <iprintf>
		}
		return;
 80019de:	e173      	b.n	8001cc8 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	461a      	mov	r2, r3
 80019e6:	2110      	movs	r1, #16
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7fe fe13 	bl	8000614 <ExtractBits>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	4a83      	ldr	r2, [pc, #524]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019f8:	3370      	adds	r3, #112	; 0x70
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d012      	beq.n	8001a2c <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 8001a06:	4882      	ldr	r0, [pc, #520]	; (8001c10 <EI_Data_Analyzer+0x2e0>)
 8001a08:	f024 f8c4 	bl	8025b94 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <EI_Data_Analyzer+0x2e4>)
 8001a10:	f024 f824 	bl	8025a5c <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a18:	3370      	adds	r3, #112	; 0x70
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6939      	ldr	r1, [r7, #16]
 8001a24:	487c      	ldr	r0, [pc, #496]	; (8001c18 <EI_Data_Analyzer+0x2e8>)
 8001a26:	f024 f819 	bl	8025a5c <iprintf>
		return;
 8001a2a:	e14e      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001a30:	4b7a      	ldr	r3, [pc, #488]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001a3e:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	7fba      	ldrb	r2, [r7, #30]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d111      	bne.n	8001a6c <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001a48:	4875      	ldr	r0, [pc, #468]	; (8001c20 <EI_Data_Analyzer+0x2f0>)
 8001a4a:	f024 f8a3 	bl	8025b94 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	4874      	ldr	r0, [pc, #464]	; (8001c24 <EI_Data_Analyzer+0x2f4>)
 8001a52:	f024 f803 	bl	8025a5c <iprintf>
			Destin_Address = 333;
 8001a56:	f240 134d 	movw	r3, #333	; 0x14d
 8001a5a:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	4870      	ldr	r0, [pc, #448]	; (8001c28 <EI_Data_Analyzer+0x2f8>)
 8001a68:	f023 fff8 	bl	8025a5c <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001a6c:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a72:	7fba      	ldrb	r2, [r7, #30]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d307      	bcc.n	8001a88 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001a78:	486c      	ldr	r0, [pc, #432]	; (8001c2c <EI_Data_Analyzer+0x2fc>)
 8001a7a:	f024 f88b 	bl	8025b94 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	486b      	ldr	r0, [pc, #428]	; (8001c30 <EI_Data_Analyzer+0x300>)
 8001a82:	f023 ffeb 	bl	8025a5c <iprintf>
		return;
 8001a86:	e120      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d121      	bne.n	8001ad4 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	4a68      	ldr	r2, [pc, #416]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d002      	beq.n	8001aa0 <EI_Data_Analyzer+0x170>
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d004      	beq.n	8001aa8 <EI_Data_Analyzer+0x178>
 8001a9e:	e007      	b.n	8001ab0 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001aa0:	4865      	ldr	r0, [pc, #404]	; (8001c38 <EI_Data_Analyzer+0x308>)
 8001aa2:	f024 f877 	bl	8025b94 <puts>
			break;
 8001aa6:	e015      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001aa8:	4864      	ldr	r0, [pc, #400]	; (8001c3c <EI_Data_Analyzer+0x30c>)
 8001aaa:	f024 f873 	bl	8025b94 <puts>
			break;
 8001aae:	e011      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 8001abe:	4860      	ldr	r0, [pc, #384]	; (8001c40 <EI_Data_Analyzer+0x310>)
 8001ac0:	f024 f868 	bl	8025b94 <puts>
 8001ac4:	e006      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	485d      	ldr	r0, [pc, #372]	; (8001c44 <EI_Data_Analyzer+0x314>)
 8001ad0:	f023 ffc4 	bl	8025a5c <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	7ffa      	ldrb	r2, [r7, #31]
 8001ade:	4955      	ldr	r1, [pc, #340]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d014      	beq.n	8001b10 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	4958      	ldr	r1, [pc, #352]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	4957      	ldr	r1, [pc, #348]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001afe:	5cd2      	ldrb	r2, [r2, r3]
 8001b00:	7ffb      	ldrb	r3, [r7, #31]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001b0a:	4852      	ldr	r0, [pc, #328]	; (8001c54 <EI_Data_Analyzer+0x324>)
 8001b0c:	f024 f842 	bl	8025b94 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001b10:	7ffa      	ldrb	r2, [r7, #31]
 8001b12:	7ffb      	ldrb	r3, [r7, #31]
 8001b14:	4947      	ldr	r1, [pc, #284]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001b16:	5c89      	ldrb	r1, [r1, r2]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <EI_Data_Analyzer+0x328>)
 8001b1a:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00e fa4b 	bl	800ffc0 <HAL_Elaps_Ticks>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	4935      	ldr	r1, [pc, #212]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b30:	338a      	adds	r3, #138	; 0x8a
 8001b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d318      	bcc.n	8001b6c <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	4947      	ldr	r1, [pc, #284]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	4941      	ldr	r1, [pc, #260]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	493f      	ldr	r1, [pc, #252]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b5c:	3366      	adds	r3, #102	; 0x66
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <EI_Data_Analyzer+0x330>)
 8001b68:	f023 ff78 	bl	8025a5c <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	493b      	ldr	r1, [pc, #236]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001b76:	2281      	movs	r2, #129	; 0x81
 8001b78:	2100      	movs	r1, #0
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b7c:	f023 fe86 	bl	802588c <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4837      	ldr	r0, [pc, #220]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b88:	f023 fe58 	bl	802583c <memcpy>
	Rx_Print_st.Size = Size;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001ba8:	7ffa      	ldrb	r2, [r7, #31]
 8001baa:	492f      	ldr	r1, [pc, #188]	; (8001c68 <EI_Data_Analyzer+0x338>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	492b      	ldr	r1, [pc, #172]	; (8001c6c <EI_Data_Analyzer+0x33c>)
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fd9b 	bl	8008704 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d870      	bhi.n	8001cb8 <EI_Data_Analyzer+0x388>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <EI_Data_Analyzer+0x2ac>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c71 	.word	0x08001c71
 8001be0:	08001c81 	.word	0x08001c81
 8001be4:	08001c91 	.word	0x08001c91
 8001be8:	08001c99 	.word	0x08001c99
 8001bec:	08001cb9 	.word	0x08001cb9
 8001bf0:	08001ca9 	.word	0x08001ca9
 8001bf4:	2000030b 	.word	0x2000030b
 8001bf8:	0802752c 	.word	0x0802752c
 8001bfc:	0802756c 	.word	0x0802756c
 8001c00:	20000505 	.word	0x20000505
 8001c04:	20000504 	.word	0x20000504
 8001c08:	20000bbb 	.word	0x20000bbb
 8001c0c:	08027578 	.word	0x08027578
 8001c10:	080275b4 	.word	0x080275b4
 8001c14:	080275d0 	.word	0x080275d0
 8001c18:	080275f4 	.word	0x080275f4
 8001c1c:	2000308c 	.word	0x2000308c
 8001c20:	0802762c 	.word	0x0802762c
 8001c24:	08027650 	.word	0x08027650
 8001c28:	08027660 	.word	0x08027660
 8001c2c:	08027670 	.word	0x08027670
 8001c30:	080276a4 	.word	0x080276a4
 8001c34:	2000270c 	.word	0x2000270c
 8001c38:	080276c4 	.word	0x080276c4
 8001c3c:	080276d4 	.word	0x080276d4
 8001c40:	080276e4 	.word	0x080276e4
 8001c44:	080276fc 	.word	0x080276fc
 8001c48:	20002608 	.word	0x20002608
 8001c4c:	20002630 	.word	0x20002630
 8001c50:	20002658 	.word	0x20002658
 8001c54:	08027720 	.word	0x08027720
 8001c58:	200026b0 	.word	0x200026b0
 8001c5c:	200026bc 	.word	0x200026bc
 8001c60:	08027738 	.word	0x08027738
 8001c64:	20003328 	.word	0x20003328
 8001c68:	20002da4 	.word	0x20002da4
 8001c6c:	200024e8 	.word	0x200024e8
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	7fbb      	ldrb	r3, [r7, #30]
 8001c76:	7ffa      	ldrb	r2, [r7, #31]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f82d 	bl	8001cd8 <Init_Msg_extr>
		break;
 8001c7e:	e024      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	b2d9      	uxtb	r1, r3
 8001c84:	7fbb      	ldrb	r3, [r7, #30]
 8001c86:	7ffa      	ldrb	r2, [r7, #31]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f001 fbc3 	bl	8003414 <Vital_Msg_extr>
		break;
 8001c8e:	e01c      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <EI_Data_Analyzer+0x3a0>)
 8001c92:	f023 ff7f 	bl	8025b94 <puts>
		break;
 8001c96:	e018      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	7fbb      	ldrb	r3, [r7, #30]
 8001c9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 ff1f 	bl	8005ae4 <Status_Msg_Extr>
		break;
 8001ca6:	e010      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	7fbb      	ldrb	r3, [r7, #30]
 8001cae:	7ffa      	ldrb	r2, [r7, #31]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f98f 	bl	8006fd4 <Service_Msg_Extr>
		break;
 8001cb6:	e008      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <EI_Data_Analyzer+0x3a4>)
 8001cbe:	f023 fecd 	bl	8025a5c <iprintf>
		break;
 8001cc2:	e002      	b.n	8001cca <EI_Data_Analyzer+0x39a>
			return;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <EI_Data_Analyzer+0x39a>
		return;
 8001cc8:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08027754 	.word	0x08027754
 8001cd4:	08027778 	.word	0x08027778

08001cd8 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70bb      	strb	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001d02:	f016 ff95 	bl	8018c30 <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	83fb      	strh	r3, [r7, #30]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b05      	subs	r3, #5
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f013 fa5a 	bl	80151d4 <CalculateDirectReverseCrc>
 8001d20:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	3b05      	subs	r3, #5
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	441a      	add	r2, r3
 8001d2a:	8bbb      	ldrh	r3, [r7, #28]
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc70 	bl	8000614 <ExtractBits>
 8001d34:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d013      	beq.n	8001d66 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d42:	3366      	adds	r3, #102	; 0x66
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4827      	ldr	r0, [pc, #156]	; (8001dec <Init_Msg_extr+0x114>)
 8001d4e:	f023 fe85 	bl	8025a5c <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	4826      	ldr	r0, [pc, #152]	; (8001df0 <Init_Msg_extr+0x118>)
 8001d56:	f023 fe81 	bl	8025a5c <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <Init_Msg_extr+0x11c>)
 8001d5e:	f023 fe7d 	bl	8025a5c <iprintf>
		return;
 8001d62:	f000 be32 	b.w	80029ca <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <Init_Msg_extr+0x120>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <Init_Msg_extr+0x124>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 021d 	add.w	r2, r3, #29
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc47 	bl	8000614 <ExtractBits>
 8001d86:	4603      	mov	r3, r0
 8001d88:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d8e:	33fe      	adds	r3, #254	; 0xfe
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	8b7a      	ldrh	r2, [r7, #26]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d03d      	beq.n	8001e18 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <Init_Msg_extr+0x128>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <Init_Msg_extr+0x110>)
 8001da8:	3366      	adds	r3, #102	; 0x66
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <Init_Msg_extr+0x12c>)
 8001db4:	f023 fe52 	bl	8025a5c <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001db8:	8b7b      	ldrh	r3, [r7, #26]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <Init_Msg_extr+0x130>)
 8001dbe:	f023 fe4d 	bl	8025a5c <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <Init_Msg_extr+0x110>)
 8001dc6:	33fe      	adds	r3, #254	; 0xfe
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <Init_Msg_extr+0x134>)
 8001dd2:	f023 fe43 	bl	8025a5c <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001dd6:	490e      	ldr	r1, [pc, #56]	; (8001e10 <Init_Msg_extr+0x138>)
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <Init_Msg_extr+0x13c>)
 8001dda:	f7fe fa31 	bl	8000240 <strcmp>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01d      	beq.n	8001e20 <Init_Msg_extr+0x148>
		{
			return;
 8001de4:	f000 bdf1 	b.w	80029ca <Init_Msg_extr+0xcf2>
 8001de8:	20000504 	.word	0x20000504
 8001dec:	08027794 	.word	0x08027794
 8001df0:	080277b0 	.word	0x080277b0
 8001df4:	080277c0 	.word	0x080277c0
 8001df8:	20002680 	.word	0x20002680
 8001dfc:	20002698 	.word	0x20002698
 8001e00:	2000268c 	.word	0x2000268c
 8001e04:	080277d0 	.word	0x080277d0
 8001e08:	08027808 	.word	0x08027808
 8001e0c:	0802782c 	.word	0x0802782c
 8001e10:	0802756c 	.word	0x0802756c
 8001e14:	20000505 	.word	0x20000505
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	4aab      	ldr	r2, [pc, #684]	; (80020c8 <Init_Msg_extr+0x3f0>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fbf2 	bl	8000614 <ExtractBits>
 8001e30:	4603      	mov	r3, r0
 8001e32:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	4aa5      	ldr	r2, [pc, #660]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e38:	4413      	add	r3, r2
 8001e3a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e3e:	7e7a      	ldrb	r2, [r7, #25]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d01f      	beq.n	8001e84 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	4aa1      	ldr	r2, [pc, #644]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e48:	3366      	adds	r3, #102	; 0x66
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4619      	mov	r1, r3
 8001e52:	489f      	ldr	r0, [pc, #636]	; (80020d0 <Init_Msg_extr+0x3f8>)
 8001e54:	f023 fe02 	bl	8025a5c <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001e58:	78bb      	ldrb	r3, [r7, #2]
 8001e5a:	4a9c      	ldr	r2, [pc, #624]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e62:	4619      	mov	r1, r3
 8001e64:	489b      	ldr	r0, [pc, #620]	; (80020d4 <Init_Msg_extr+0x3fc>)
 8001e66:	f023 fdf9 	bl	8025a5c <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001e6a:	7e7b      	ldrb	r3, [r7, #25]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	489a      	ldr	r0, [pc, #616]	; (80020d8 <Init_Msg_extr+0x400>)
 8001e70:	f023 fdf4 	bl	8025a5c <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001e74:	4999      	ldr	r1, [pc, #612]	; (80020dc <Init_Msg_extr+0x404>)
 8001e76:	489a      	ldr	r0, [pc, #616]	; (80020e0 <Init_Msg_extr+0x408>)
 8001e78:	f7fe f9e2 	bl	8000240 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 85a2 	bne.w	80029c8 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	4997      	ldr	r1, [pc, #604]	; (80020e4 <Init_Msg_extr+0x40c>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001e8e:	78bb      	ldrb	r3, [r7, #2]
 8001e90:	4a95      	ldr	r2, [pc, #596]	; (80020e8 <Init_Msg_extr+0x410>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	4a94      	ldr	r2, [pc, #592]	; (80020ec <Init_Msg_extr+0x414>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	4993      	ldr	r1, [pc, #588]	; (80020f0 <Init_Msg_extr+0x418>)
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001ea8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eac:	3308      	adds	r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da00      	bge.n	8001eb4 <Init_Msg_extr+0x1dc>
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	10db      	asrs	r3, r3, #3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	4413      	add	r3, r2
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	8bbb      	ldrh	r3, [r7, #28]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	425a      	negs	r2, r3
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	bf58      	it	pl
 8001ed2:	4253      	negpl	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ed8:	8bfb      	ldrh	r3, [r7, #30]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	441a      	add	r2, r3
 8001ede:	8bbb      	ldrh	r3, [r7, #28]
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb96 	bl	8000614 <ExtractBits>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	b291      	uxth	r1, r2
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	3310      	adds	r3, #16
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	487b      	ldr	r0, [pc, #492]	; (80020f8 <Init_Msg_extr+0x420>)
 8001f0a:	f023 fda7 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 8001f0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f12:	3310      	adds	r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da00      	bge.n	8001f1a <Init_Msg_extr+0x242>
 8001f18:	3307      	adds	r3, #7
 8001f1a:	10db      	asrs	r3, r3, #3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	4413      	add	r3, r2
 8001f22:	83fb      	strh	r3, [r7, #30]
 8001f24:	8bbb      	ldrh	r3, [r7, #28]
 8001f26:	3310      	adds	r3, #16
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	425a      	negs	r2, r3
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	f002 0207 	and.w	r2, r2, #7
 8001f36:	bf58      	it	pl
 8001f38:	4253      	negpl	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	441a      	add	r2, r3
 8001f44:	8bbb      	ldrh	r3, [r7, #28]
 8001f46:	2110      	movs	r1, #16
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb63 	bl	8000614 <ExtractBits>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	b291      	uxth	r1, r2
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	330e      	adds	r3, #14
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001f60:	78bb      	ldrb	r3, [r7, #2]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	330e      	adds	r3, #14
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4863      	ldr	r0, [pc, #396]	; (80020fc <Init_Msg_extr+0x424>)
 8001f70:	f023 fd74 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 8001f74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f78:	3310      	adds	r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da00      	bge.n	8001f80 <Init_Msg_extr+0x2a8>
 8001f7e:	3307      	adds	r3, #7
 8001f80:	10db      	asrs	r3, r3, #3
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	8bfb      	ldrh	r3, [r7, #30]
 8001f86:	4413      	add	r3, r2
 8001f88:	83fb      	strh	r3, [r7, #30]
 8001f8a:	8bbb      	ldrh	r3, [r7, #28]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	425a      	negs	r2, r3
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	f002 0207 	and.w	r2, r2, #7
 8001f9c:	bf58      	it	pl
 8001f9e:	4253      	negpl	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fa4:	8bfb      	ldrh	r3, [r7, #30]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	441a      	add	r2, r3
 8001faa:	8bbb      	ldrh	r3, [r7, #28]
 8001fac:	2108      	movs	r1, #8
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fb30 	bl	8000614 <ExtractBits>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	b2d1      	uxtb	r1, r2
 8001fba:	4a4e      	ldr	r2, [pc, #312]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	4413      	add	r3, r2
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8001fc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da00      	bge.n	8001fd0 <Init_Msg_extr+0x2f8>
 8001fce:	3307      	adds	r3, #7
 8001fd0:	10db      	asrs	r3, r3, #3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	425a      	negs	r2, r3
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	f002 0207 	and.w	r2, r2, #7
 8001fec:	bf58      	it	pl
 8001fee:	4253      	negpl	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	2108      	movs	r1, #8
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fb08 	bl	8000614 <ExtractBits>
 8002004:	4602      	mov	r2, r0
 8002006:	78bb      	ldrb	r3, [r7, #2]
 8002008:	b2d1      	uxtb	r1, r2
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <Init_Msg_extr+0x41c>)
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	4413      	add	r3, r2
 8002010:	3301      	adds	r3, #1
 8002012:	460a      	mov	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8002016:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800201a:	3308      	adds	r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	da00      	bge.n	8002022 <Init_Msg_extr+0x34a>
 8002020:	3307      	adds	r3, #7
 8002022:	10db      	asrs	r3, r3, #3
 8002024:	b29a      	uxth	r2, r3
 8002026:	8bfb      	ldrh	r3, [r7, #30]
 8002028:	4413      	add	r3, r2
 800202a:	83fb      	strh	r3, [r7, #30]
 800202c:	8bbb      	ldrh	r3, [r7, #28]
 800202e:	3308      	adds	r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21b      	sxth	r3, r3
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	f002 0207 	and.w	r2, r2, #7
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	8bbb      	ldrh	r3, [r7, #28]
 800204e:	2108      	movs	r1, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fadf 	bl	8000614 <ExtractBits>
 8002056:	4602      	mov	r2, r0
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	b2d1      	uxtb	r1, r2
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <Init_Msg_extr+0x41c>)
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4413      	add	r3, r2
 8002062:	3302      	adds	r3, #2
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8002068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800206c:	3308      	adds	r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	da00      	bge.n	8002074 <Init_Msg_extr+0x39c>
 8002072:	3307      	adds	r3, #7
 8002074:	10db      	asrs	r3, r3, #3
 8002076:	b29a      	uxth	r2, r3
 8002078:	8bfb      	ldrh	r3, [r7, #30]
 800207a:	4413      	add	r3, r2
 800207c:	83fb      	strh	r3, [r7, #30]
 800207e:	8bbb      	ldrh	r3, [r7, #28]
 8002080:	3308      	adds	r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b21b      	sxth	r3, r3
 8002086:	425a      	negs	r2, r3
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	f002 0207 	and.w	r2, r2, #7
 8002090:	bf58      	it	pl
 8002092:	4253      	negpl	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002098:	8bfb      	ldrh	r3, [r7, #30]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	441a      	add	r2, r3
 800209e:	8bbb      	ldrh	r3, [r7, #28]
 80020a0:	2110      	movs	r1, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fab6 	bl	8000614 <ExtractBits>
 80020a8:	4602      	mov	r2, r0
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	b291      	uxth	r1, r2
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <Init_Msg_extr+0x428>)
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	460a      	mov	r2, r1
 80020b8:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80020ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020be:	3310      	adds	r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da1f      	bge.n	8002104 <Init_Msg_extr+0x42c>
 80020c4:	3307      	adds	r3, #7
 80020c6:	e01d      	b.n	8002104 <Init_Msg_extr+0x42c>
 80020c8:	2000268c 	.word	0x2000268c
 80020cc:	20000504 	.word	0x20000504
 80020d0:	08027850 	.word	0x08027850
 80020d4:	08027878 	.word	0x08027878
 80020d8:	0802788c 	.word	0x0802788c
 80020dc:	0802756c 	.word	0x0802756c
 80020e0:	20000505 	.word	0x20000505
 80020e4:	20002630 	.word	0x20002630
 80020e8:	20002698 	.word	0x20002698
 80020ec:	20002718 	.word	0x20002718
 80020f0:	20002724 	.word	0x20002724
 80020f4:	20002994 	.word	0x20002994
 80020f8:	080278a0 	.word	0x080278a0
 80020fc:	080278a8 	.word	0x080278a8
 8002100:	200028f4 	.word	0x200028f4
 8002104:	10db      	asrs	r3, r3, #3
 8002106:	b29a      	uxth	r2, r3
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	4413      	add	r3, r2
 800210c:	83fb      	strh	r3, [r7, #30]
 800210e:	8bbb      	ldrh	r3, [r7, #28]
 8002110:	3310      	adds	r3, #16
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	425a      	negs	r2, r3
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	f002 0207 	and.w	r2, r2, #7
 8002120:	bf58      	it	pl
 8002122:	4253      	negpl	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	4a8e      	ldr	r2, [pc, #568]	; (8002364 <Init_Msg_extr+0x68c>)
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 811d 	beq.w	8002378 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800213e:	8bfb      	ldrh	r3, [r7, #30]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	441a      	add	r2, r3
 8002144:	8bbb      	ldrh	r3, [r7, #28]
 8002146:	2108      	movs	r1, #8
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa63 	bl	8000614 <ExtractBits>
 800214e:	4603      	mov	r3, r0
 8002150:	78ba      	ldrb	r2, [r7, #2]
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4984      	ldr	r1, [pc, #528]	; (8002368 <Init_Msg_extr+0x690>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	3305      	adds	r3, #5
 8002162:	4602      	mov	r2, r0
 8002164:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8002166:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800216a:	3308      	adds	r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <Init_Msg_extr+0x49a>
 8002170:	3307      	adds	r3, #7
 8002172:	10db      	asrs	r3, r3, #3
 8002174:	b29a      	uxth	r2, r3
 8002176:	8bfb      	ldrh	r3, [r7, #30]
 8002178:	4413      	add	r3, r2
 800217a:	83fb      	strh	r3, [r7, #30]
 800217c:	8bbb      	ldrh	r3, [r7, #28]
 800217e:	3308      	adds	r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21b      	sxth	r3, r3
 8002184:	425a      	negs	r2, r3
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	f002 0207 	and.w	r2, r2, #7
 800218e:	bf58      	it	pl
 8002190:	4253      	negpl	r3, r2
 8002192:	b21b      	sxth	r3, r3
 8002194:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002196:	8bfb      	ldrh	r3, [r7, #30]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	441a      	add	r2, r3
 800219c:	8bbb      	ldrh	r3, [r7, #28]
 800219e:	2108      	movs	r1, #8
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fa37 	bl	8000614 <ExtractBits>
 80021a6:	4603      	mov	r3, r0
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	b2d8      	uxtb	r0, r3
 80021ac:	496e      	ldr	r1, [pc, #440]	; (8002368 <Init_Msg_extr+0x690>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	3304      	adds	r3, #4
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80021be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c2:	3308      	adds	r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da00      	bge.n	80021ca <Init_Msg_extr+0x4f2>
 80021c8:	3307      	adds	r3, #7
 80021ca:	10db      	asrs	r3, r3, #3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	8bfb      	ldrh	r3, [r7, #30]
 80021d0:	4413      	add	r3, r2
 80021d2:	83fb      	strh	r3, [r7, #30]
 80021d4:	8bbb      	ldrh	r3, [r7, #28]
 80021d6:	3308      	adds	r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b21b      	sxth	r3, r3
 80021dc:	425a      	negs	r2, r3
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	f002 0207 	and.w	r2, r2, #7
 80021e6:	bf58      	it	pl
 80021e8:	4253      	negpl	r3, r2
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	441a      	add	r2, r3
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	2108      	movs	r1, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fa0b 	bl	8000614 <ExtractBits>
 80021fe:	4603      	mov	r3, r0
 8002200:	78ba      	ldrb	r2, [r7, #2]
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	4958      	ldr	r1, [pc, #352]	; (8002368 <Init_Msg_extr+0x690>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	3303      	adds	r3, #3
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8002216:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800221a:	3308      	adds	r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <Init_Msg_extr+0x54a>
 8002220:	3307      	adds	r3, #7
 8002222:	10db      	asrs	r3, r3, #3
 8002224:	b29a      	uxth	r2, r3
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	4413      	add	r3, r2
 800222a:	83fb      	strh	r3, [r7, #30]
 800222c:	8bbb      	ldrh	r3, [r7, #28]
 800222e:	3308      	adds	r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b21b      	sxth	r3, r3
 8002234:	425a      	negs	r2, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	f002 0207 	and.w	r2, r2, #7
 800223e:	bf58      	it	pl
 8002240:	4253      	negpl	r3, r2
 8002242:	b21b      	sxth	r3, r3
 8002244:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	441a      	add	r2, r3
 800224c:	8bbb      	ldrh	r3, [r7, #28]
 800224e:	2108      	movs	r1, #8
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f9df 	bl	8000614 <ExtractBits>
 8002256:	4603      	mov	r3, r0
 8002258:	78ba      	ldrb	r2, [r7, #2]
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	4942      	ldr	r1, [pc, #264]	; (8002368 <Init_Msg_extr+0x690>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	4602      	mov	r2, r0
 800226a:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 800226c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002270:	3308      	adds	r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	da00      	bge.n	8002278 <Init_Msg_extr+0x5a0>
 8002276:	3307      	adds	r3, #7
 8002278:	10db      	asrs	r3, r3, #3
 800227a:	b29a      	uxth	r2, r3
 800227c:	8bfb      	ldrh	r3, [r7, #30]
 800227e:	4413      	add	r3, r2
 8002280:	83fb      	strh	r3, [r7, #30]
 8002282:	8bbb      	ldrh	r3, [r7, #28]
 8002284:	3308      	adds	r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b21b      	sxth	r3, r3
 800228a:	425a      	negs	r2, r3
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	f002 0207 	and.w	r2, r2, #7
 8002294:	bf58      	it	pl
 8002296:	4253      	negpl	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800229c:	8bfb      	ldrh	r3, [r7, #30]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	441a      	add	r2, r3
 80022a2:	8bbb      	ldrh	r3, [r7, #28]
 80022a4:	2108      	movs	r1, #8
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f9b4 	bl	8000614 <ExtractBits>
 80022ac:	4603      	mov	r3, r0
 80022ae:	78ba      	ldrb	r2, [r7, #2]
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <Init_Msg_extr+0x690>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	3301      	adds	r3, #1
 80022c0:	4602      	mov	r2, r0
 80022c2:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80022c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022c8:	3308      	adds	r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da00      	bge.n	80022d0 <Init_Msg_extr+0x5f8>
 80022ce:	3307      	adds	r3, #7
 80022d0:	10db      	asrs	r3, r3, #3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8bfb      	ldrh	r3, [r7, #30]
 80022d6:	4413      	add	r3, r2
 80022d8:	83fb      	strh	r3, [r7, #30]
 80022da:	8bbb      	ldrh	r3, [r7, #28]
 80022dc:	3308      	adds	r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	425a      	negs	r2, r3
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	f002 0207 	and.w	r2, r2, #7
 80022ec:	bf58      	it	pl
 80022ee:	4253      	negpl	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	441a      	add	r2, r3
 80022fa:	8bbb      	ldrh	r3, [r7, #28]
 80022fc:	2108      	movs	r1, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f988 	bl	8000614 <ExtractBits>
 8002304:	4603      	mov	r3, r0
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	4917      	ldr	r1, [pc, #92]	; (8002368 <Init_Msg_extr+0x690>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	3302      	adds	r3, #2
 8002318:	4602      	mov	r2, r0
 800231a:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 800231c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Init_Msg_extr+0x650>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	8bfb      	ldrh	r3, [r7, #30]
 800232e:	4413      	add	r3, r2
 8002330:	83fb      	strh	r3, [r7, #30]
 8002332:	8bbb      	ldrh	r3, [r7, #28]
 8002334:	3308      	adds	r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b21b      	sxth	r3, r3
 800233a:	425a      	negs	r2, r3
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	f002 0207 	and.w	r2, r2, #7
 8002344:	bf58      	it	pl
 8002346:	4253      	negpl	r3, r2
 8002348:	b21b      	sxth	r3, r3
 800234a:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800234c:	78bb      	ldrb	r3, [r7, #2]
 800234e:	4618      	mov	r0, r3
 8002350:	f007 f900 	bl	8009554 <IS_MLK_EIPC_TIME_MATCHING>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <Init_Msg_extr+0x698>
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <Init_Msg_extr+0x694>)
 800235e:	2100      	movs	r1, #0
 8002360:	54d1      	strb	r1, [r2, r3]
 8002362:	e009      	b.n	8002378 <Init_Msg_extr+0x6a0>
 8002364:	200028f4 	.word	0x200028f4
 8002368:	200028b8 	.word	0x200028b8
 800236c:	20002764 	.word	0x20002764
 8002370:	78bb      	ldrb	r3, [r7, #2]
 8002372:	4aa4      	ldr	r2, [pc, #656]	; (8002604 <Init_Msg_extr+0x92c>)
 8002374:	2101      	movs	r1, #1
 8002376:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	441a      	add	r2, r3
 800237e:	8bbb      	ldrh	r3, [r7, #28]
 8002380:	2108      	movs	r1, #8
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f946 	bl	8000614 <ExtractBits>
 8002388:	4602      	mov	r2, r0
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a9e      	ldr	r2, [pc, #632]	; (8002608 <Init_Msg_extr+0x930>)
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	4413      	add	r3, r2
 8002394:	3303      	adds	r3, #3
 8002396:	460a      	mov	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 800239a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800239e:	3308      	adds	r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da00      	bge.n	80023a6 <Init_Msg_extr+0x6ce>
 80023a4:	3307      	adds	r3, #7
 80023a6:	10db      	asrs	r3, r3, #3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	8bfb      	ldrh	r3, [r7, #30]
 80023ac:	4413      	add	r3, r2
 80023ae:	83fb      	strh	r3, [r7, #30]
 80023b0:	8bbb      	ldrh	r3, [r7, #28]
 80023b2:	3308      	adds	r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	425a      	negs	r2, r3
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	f002 0207 	and.w	r2, r2, #7
 80023c2:	bf58      	it	pl
 80023c4:	4253      	negpl	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	441a      	add	r2, r3
 80023d0:	8bbb      	ldrh	r3, [r7, #28]
 80023d2:	2110      	movs	r1, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f91d 	bl	8000614 <ExtractBits>
 80023da:	4602      	mov	r2, r0
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	b291      	uxth	r1, r2
 80023e0:	4a89      	ldr	r2, [pc, #548]	; (8002608 <Init_Msg_extr+0x930>)
 80023e2:	015b      	lsls	r3, r3, #5
 80023e4:	4413      	add	r3, r2
 80023e6:	3312      	adds	r3, #18
 80023e8:	460a      	mov	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 80023ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023f0:	3310      	adds	r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da00      	bge.n	80023f8 <Init_Msg_extr+0x720>
 80023f6:	3307      	adds	r3, #7
 80023f8:	10db      	asrs	r3, r3, #3
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	4413      	add	r3, r2
 8002400:	83fb      	strh	r3, [r7, #30]
 8002402:	8bbb      	ldrh	r3, [r7, #28]
 8002404:	3310      	adds	r3, #16
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21b      	sxth	r3, r3
 800240a:	425a      	negs	r2, r3
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	f002 0207 	and.w	r2, r2, #7
 8002414:	bf58      	it	pl
 8002416:	4253      	negpl	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 800241c:	78bb      	ldrb	r3, [r7, #2]
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <Init_Msg_extr+0x930>)
 8002422:	4413      	add	r3, r2
 8002424:	1d18      	adds	r0, r3, #4
 8002426:	8bfb      	ldrh	r3, [r7, #30]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	2206      	movs	r2, #6
 800242e:	4619      	mov	r1, r3
 8002430:	f023 fa04 	bl	802583c <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8002434:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002438:	3310      	adds	r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	da00      	bge.n	8002440 <Init_Msg_extr+0x768>
 800243e:	3307      	adds	r3, #7
 8002440:	10db      	asrs	r3, r3, #3
 8002442:	b29a      	uxth	r2, r3
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4413      	add	r3, r2
 8002448:	83fb      	strh	r3, [r7, #30]
 800244a:	8bbb      	ldrh	r3, [r7, #28]
 800244c:	3310      	adds	r3, #16
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21b      	sxth	r3, r3
 8002452:	425a      	negs	r2, r3
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	f002 0207 	and.w	r2, r2, #7
 800245c:	bf58      	it	pl
 800245e:	4253      	negpl	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002464:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002468:	3310      	adds	r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	da00      	bge.n	8002470 <Init_Msg_extr+0x798>
 800246e:	3307      	adds	r3, #7
 8002470:	10db      	asrs	r3, r3, #3
 8002472:	b29a      	uxth	r2, r3
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	4413      	add	r3, r2
 8002478:	83fb      	strh	r3, [r7, #30]
 800247a:	8bbb      	ldrh	r3, [r7, #28]
 800247c:	3310      	adds	r3, #16
 800247e:	b29b      	uxth	r3, r3
 8002480:	b21b      	sxth	r3, r3
 8002482:	425a      	negs	r2, r3
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	f002 0207 	and.w	r2, r2, #7
 800248c:	bf58      	it	pl
 800248e:	4253      	negpl	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002494:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002498:	3310      	adds	r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	da00      	bge.n	80024a0 <Init_Msg_extr+0x7c8>
 800249e:	3307      	adds	r3, #7
 80024a0:	10db      	asrs	r3, r3, #3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	4413      	add	r3, r2
 80024a8:	83fb      	strh	r3, [r7, #30]
 80024aa:	8bbb      	ldrh	r3, [r7, #28]
 80024ac:	3310      	adds	r3, #16
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	425a      	negs	r2, r3
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	f002 0207 	and.w	r2, r2, #7
 80024bc:	bf58      	it	pl
 80024be:	4253      	negpl	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	441a      	add	r2, r3
 80024ca:	8bbb      	ldrh	r3, [r7, #28]
 80024cc:	2110      	movs	r1, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f8a0 	bl	8000614 <ExtractBits>
 80024d4:	4602      	mov	r2, r0
 80024d6:	78bb      	ldrb	r3, [r7, #2]
 80024d8:	b291      	uxth	r1, r2
 80024da:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <Init_Msg_extr+0x930>)
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	4413      	add	r3, r2
 80024e0:	3314      	adds	r3, #20
 80024e2:	460a      	mov	r2, r1
 80024e4:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 80024e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ea:	3310      	adds	r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <Init_Msg_extr+0x81a>
 80024f0:	3307      	adds	r3, #7
 80024f2:	10db      	asrs	r3, r3, #3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	8bfb      	ldrh	r3, [r7, #30]
 80024f8:	4413      	add	r3, r2
 80024fa:	83fb      	strh	r3, [r7, #30]
 80024fc:	8bbb      	ldrh	r3, [r7, #28]
 80024fe:	3310      	adds	r3, #16
 8002500:	b29b      	uxth	r3, r3
 8002502:	b21b      	sxth	r3, r3
 8002504:	425a      	negs	r2, r3
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	f002 0207 	and.w	r2, r2, #7
 800250e:	bf58      	it	pl
 8002510:	4253      	negpl	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	441a      	add	r2, r3
 800251c:	8bbb      	ldrh	r3, [r7, #28]
 800251e:	2110      	movs	r1, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f877 	bl	8000614 <ExtractBits>
 8002526:	4602      	mov	r2, r0
 8002528:	78bb      	ldrb	r3, [r7, #2]
 800252a:	b291      	uxth	r1, r2
 800252c:	4a36      	ldr	r2, [pc, #216]	; (8002608 <Init_Msg_extr+0x930>)
 800252e:	015b      	lsls	r3, r3, #5
 8002530:	4413      	add	r3, r2
 8002532:	3316      	adds	r3, #22
 8002534:	460a      	mov	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8002538:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800253c:	3310      	adds	r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <Init_Msg_extr+0x86c>
 8002542:	3307      	adds	r3, #7
 8002544:	10db      	asrs	r3, r3, #3
 8002546:	b29a      	uxth	r2, r3
 8002548:	8bfb      	ldrh	r3, [r7, #30]
 800254a:	4413      	add	r3, r2
 800254c:	83fb      	strh	r3, [r7, #30]
 800254e:	8bbb      	ldrh	r3, [r7, #28]
 8002550:	3310      	adds	r3, #16
 8002552:	b29b      	uxth	r3, r3
 8002554:	b21b      	sxth	r3, r3
 8002556:	425a      	negs	r2, r3
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	f002 0207 	and.w	r2, r2, #7
 8002560:	bf58      	it	pl
 8002562:	4253      	negpl	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	441a      	add	r2, r3
 800256e:	8bbb      	ldrh	r3, [r7, #28]
 8002570:	2110      	movs	r1, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f84e 	bl	8000614 <ExtractBits>
 8002578:	4602      	mov	r2, r0
 800257a:	78bb      	ldrb	r3, [r7, #2]
 800257c:	b291      	uxth	r1, r2
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <Init_Msg_extr+0x930>)
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	4413      	add	r3, r2
 8002584:	3318      	adds	r3, #24
 8002586:	460a      	mov	r2, r1
 8002588:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 800258a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800258e:	3310      	adds	r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	da00      	bge.n	8002596 <Init_Msg_extr+0x8be>
 8002594:	3307      	adds	r3, #7
 8002596:	10db      	asrs	r3, r3, #3
 8002598:	b29a      	uxth	r2, r3
 800259a:	8bfb      	ldrh	r3, [r7, #30]
 800259c:	4413      	add	r3, r2
 800259e:	83fb      	strh	r3, [r7, #30]
 80025a0:	8bbb      	ldrh	r3, [r7, #28]
 80025a2:	3310      	adds	r3, #16
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	425a      	negs	r2, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	f002 0207 	and.w	r2, r2, #7
 80025b2:	bf58      	it	pl
 80025b4:	4253      	negpl	r3, r2
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 80025ba:	8bfb      	ldrh	r3, [r7, #30]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	441a      	add	r2, r3
 80025c0:	78bc      	ldrb	r4, [r7, #2]
 80025c2:	8bbb      	ldrh	r3, [r7, #28]
 80025c4:	2118      	movs	r1, #24
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe f824 	bl	8000614 <ExtractBits>
 80025cc:	4602      	mov	r2, r0
 80025ce:	490f      	ldr	r1, [pc, #60]	; (800260c <Init_Msg_extr+0x934>)
 80025d0:	0123      	lsls	r3, r4, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	3308      	adds	r3, #8
 80025d6:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80025d8:	78bb      	ldrb	r3, [r7, #2]
 80025da:	78ba      	ldrb	r2, [r7, #2]
 80025dc:	490b      	ldr	r1, [pc, #44]	; (800260c <Init_Msg_extr+0x934>)
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	3308      	adds	r3, #8
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <Init_Msg_extr+0x938>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4403      	add	r3, r0
 80025f2:	3308      	adds	r3, #8
 80025f4:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 80025f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025fa:	3318      	adds	r3, #24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da09      	bge.n	8002614 <Init_Msg_extr+0x93c>
 8002600:	3307      	adds	r3, #7
 8002602:	e007      	b.n	8002614 <Init_Msg_extr+0x93c>
 8002604:	20002764 	.word	0x20002764
 8002608:	20002994 	.word	0x20002994
 800260c:	200028f4 	.word	0x200028f4
 8002610:	20002da4 	.word	0x20002da4
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	b29a      	uxth	r2, r3
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	4413      	add	r3, r2
 800261c:	83fb      	strh	r3, [r7, #30]
 800261e:	8bbb      	ldrh	r3, [r7, #28]
 8002620:	3318      	adds	r3, #24
 8002622:	b29b      	uxth	r3, r3
 8002624:	b21b      	sxth	r3, r3
 8002626:	425a      	negs	r2, r3
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	f002 0207 	and.w	r2, r2, #7
 8002630:	bf58      	it	pl
 8002632:	4253      	negpl	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	441a      	add	r2, r3
 800263e:	8bbb      	ldrh	r3, [r7, #28]
 8002640:	2108      	movs	r1, #8
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffe6 	bl	8000614 <ExtractBits>
 8002648:	4602      	mov	r2, r0
 800264a:	78bb      	ldrb	r3, [r7, #2]
 800264c:	b2d1      	uxtb	r1, r2
 800264e:	4ab1      	ldr	r2, [pc, #708]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002658:	78ba      	ldrb	r2, [r7, #2]
 800265a:	78bb      	ldrb	r3, [r7, #2]
 800265c:	49ad      	ldr	r1, [pc, #692]	; (8002914 <Init_Msg_extr+0xc3c>)
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	440a      	add	r2, r1
 8002662:	7811      	ldrb	r1, [r2, #0]
 8002664:	4aab      	ldr	r2, [pc, #684]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	3302      	adds	r3, #2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8002670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002674:	3308      	adds	r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <Init_Msg_extr+0x9a4>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	b29a      	uxth	r2, r3
 8002680:	8bfb      	ldrh	r3, [r7, #30]
 8002682:	4413      	add	r3, r2
 8002684:	83fb      	strh	r3, [r7, #30]
 8002686:	8bbb      	ldrh	r3, [r7, #28]
 8002688:	3308      	adds	r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	425a      	negs	r2, r3
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	f002 0207 	and.w	r2, r2, #7
 8002698:	bf58      	it	pl
 800269a:	4253      	negpl	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	441a      	add	r2, r3
 80026a6:	8bbb      	ldrh	r3, [r7, #28]
 80026a8:	2108      	movs	r1, #8
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ffb2 	bl	8000614 <ExtractBits>
 80026b0:	4602      	mov	r2, r0
 80026b2:	78bb      	ldrb	r3, [r7, #2]
 80026b4:	b2d1      	uxtb	r1, r2
 80026b6:	4a98      	ldr	r2, [pc, #608]	; (8002918 <Init_Msg_extr+0xc40>)
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	330a      	adds	r3, #10
 80026be:	460a      	mov	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 80026c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026c6:	3308      	adds	r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da00      	bge.n	80026ce <Init_Msg_extr+0x9f6>
 80026cc:	3307      	adds	r3, #7
 80026ce:	10db      	asrs	r3, r3, #3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	4413      	add	r3, r2
 80026d6:	83fb      	strh	r3, [r7, #30]
 80026d8:	8bbb      	ldrh	r3, [r7, #28]
 80026da:	3308      	adds	r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21b      	sxth	r3, r3
 80026e0:	425a      	negs	r2, r3
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	f002 0207 	and.w	r2, r2, #7
 80026ea:	bf58      	it	pl
 80026ec:	4253      	negpl	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	441a      	add	r2, r3
 80026f8:	8bbb      	ldrh	r3, [r7, #28]
 80026fa:	2108      	movs	r1, #8
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff89 	bl	8000614 <ExtractBits>
 8002702:	4602      	mov	r2, r0
 8002704:	78bb      	ldrb	r3, [r7, #2]
 8002706:	b2d1      	uxtb	r1, r2
 8002708:	4a82      	ldr	r2, [pc, #520]	; (8002914 <Init_Msg_extr+0xc3c>)
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	3303      	adds	r3, #3
 8002710:	460a      	mov	r2, r1
 8002712:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 8002714:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002718:	3308      	adds	r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	da00      	bge.n	8002720 <Init_Msg_extr+0xa48>
 800271e:	3307      	adds	r3, #7
 8002720:	10db      	asrs	r3, r3, #3
 8002722:	b29a      	uxth	r2, r3
 8002724:	8bfb      	ldrh	r3, [r7, #30]
 8002726:	4413      	add	r3, r2
 8002728:	83fb      	strh	r3, [r7, #30]
 800272a:	8bbb      	ldrh	r3, [r7, #28]
 800272c:	3308      	adds	r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21b      	sxth	r3, r3
 8002732:	425a      	negs	r2, r3
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	f002 0207 	and.w	r2, r2, #7
 800273c:	bf58      	it	pl
 800273e:	4253      	negpl	r3, r2
 8002740:	b21b      	sxth	r3, r3
 8002742:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3303      	adds	r3, #3
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	78bb      	ldrb	r3, [r7, #2]
 8002752:	4972      	ldr	r1, [pc, #456]	; (800291c <Init_Msg_extr+0xc44>)
 8002754:	440b      	add	r3, r1
 8002756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800275a:	429a      	cmp	r2, r3
 800275c:	d015      	beq.n	800278a <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800275e:	4870      	ldr	r0, [pc, #448]	; (8002920 <Init_Msg_extr+0xc48>)
 8002760:	f023 fa18 	bl	8025b94 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002764:	78bb      	ldrb	r3, [r7, #2]
 8002766:	4a6d      	ldr	r2, [pc, #436]	; (800291c <Init_Msg_extr+0xc44>)
 8002768:	4413      	add	r3, r2
 800276a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800276e:	4619      	mov	r1, r3
 8002770:	486c      	ldr	r0, [pc, #432]	; (8002924 <Init_Msg_extr+0xc4c>)
 8002772:	f023 f973 	bl	8025a5c <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002776:	78bb      	ldrb	r3, [r7, #2]
 8002778:	4a66      	ldr	r2, [pc, #408]	; (8002914 <Init_Msg_extr+0xc3c>)
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	3303      	adds	r3, #3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4868      	ldr	r0, [pc, #416]	; (8002928 <Init_Msg_extr+0xc50>)
 8002786:	f023 f969 	bl	8025a5c <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800278a:	8bfb      	ldrh	r3, [r7, #30]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	441a      	add	r2, r3
 8002790:	8bbb      	ldrh	r3, [r7, #28]
 8002792:	2108      	movs	r1, #8
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd ff3d 	bl	8000614 <ExtractBits>
 800279a:	4602      	mov	r2, r0
 800279c:	78bb      	ldrb	r3, [r7, #2]
 800279e:	b2d1      	uxtb	r1, r2
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <Init_Msg_extr+0xc40>)
 80027a2:	015b      	lsls	r3, r3, #5
 80027a4:	4413      	add	r3, r2
 80027a6:	330b      	adds	r3, #11
 80027a8:	460a      	mov	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80027ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027b0:	3308      	adds	r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <Init_Msg_extr+0xae0>
 80027b6:	3307      	adds	r3, #7
 80027b8:	10db      	asrs	r3, r3, #3
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	8bfb      	ldrh	r3, [r7, #30]
 80027be:	4413      	add	r3, r2
 80027c0:	83fb      	strh	r3, [r7, #30]
 80027c2:	8bbb      	ldrh	r3, [r7, #28]
 80027c4:	3308      	adds	r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	425a      	negs	r2, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	f002 0207 	and.w	r2, r2, #7
 80027d4:	bf58      	it	pl
 80027d6:	4253      	negpl	r3, r2
 80027d8:	b21b      	sxth	r3, r3
 80027da:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	441a      	add	r2, r3
 80027e2:	8bbb      	ldrh	r3, [r7, #28]
 80027e4:	2108      	movs	r1, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd ff14 	bl	8000614 <ExtractBits>
 80027ec:	4602      	mov	r2, r0
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	b2d1      	uxtb	r1, r2
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <Init_Msg_extr+0xc40>)
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4413      	add	r3, r2
 80027f8:	330c      	adds	r3, #12
 80027fa:	460a      	mov	r2, r1
 80027fc:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80027fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002802:	3308      	adds	r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	da00      	bge.n	800280a <Init_Msg_extr+0xb32>
 8002808:	3307      	adds	r3, #7
 800280a:	10db      	asrs	r3, r3, #3
 800280c:	b29a      	uxth	r2, r3
 800280e:	8bfb      	ldrh	r3, [r7, #30]
 8002810:	4413      	add	r3, r2
 8002812:	83fb      	strh	r3, [r7, #30]
 8002814:	8bbb      	ldrh	r3, [r7, #28]
 8002816:	3308      	adds	r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21b      	sxth	r3, r3
 800281c:	425a      	negs	r2, r3
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	f002 0207 	and.w	r2, r2, #7
 8002826:	bf58      	it	pl
 8002828:	4253      	negpl	r3, r2
 800282a:	b21b      	sxth	r3, r3
 800282c:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800282e:	78bb      	ldrb	r3, [r7, #2]
 8002830:	4a39      	ldr	r2, [pc, #228]	; (8002918 <Init_Msg_extr+0xc40>)
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	4413      	add	r3, r2
 8002836:	330c      	adds	r3, #12
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00c      	beq.n	8002858 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800283e:	78bb      	ldrb	r3, [r7, #2]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <Init_Msg_extr+0xc40>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	330c      	adds	r3, #12
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <Init_Msg_extr+0xc54>)
 800284e:	f023 f905 	bl	8025a5c <iprintf>
		printf("This Value has to be \"1\"\n");
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <Init_Msg_extr+0xc58>)
 8002854:	f023 f99e 	bl	8025b94 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002858:	8bfb      	ldrh	r3, [r7, #30]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	441a      	add	r2, r3
 800285e:	8bbb      	ldrh	r3, [r7, #28]
 8002860:	2108      	movs	r1, #8
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fed6 	bl	8000614 <ExtractBits>
 8002868:	4602      	mov	r2, r0
 800286a:	78bb      	ldrb	r3, [r7, #2]
 800286c:	b2d1      	uxtb	r1, r2
 800286e:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <Init_Msg_extr+0xc40>)
 8002870:	015b      	lsls	r3, r3, #5
 8002872:	4413      	add	r3, r2
 8002874:	330d      	adds	r3, #13
 8002876:	460a      	mov	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 800287a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800287e:	3308      	adds	r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	da00      	bge.n	8002886 <Init_Msg_extr+0xbae>
 8002884:	3307      	adds	r3, #7
 8002886:	10db      	asrs	r3, r3, #3
 8002888:	b29a      	uxth	r2, r3
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	4413      	add	r3, r2
 800288e:	83fb      	strh	r3, [r7, #30]
 8002890:	8bbb      	ldrh	r3, [r7, #28]
 8002892:	3308      	adds	r3, #8
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21b      	sxth	r3, r3
 8002898:	425a      	negs	r2, r3
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	f002 0207 	and.w	r2, r2, #7
 80028a2:	bf58      	it	pl
 80028a4:	4253      	negpl	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80028aa:	8bfb      	ldrh	r3, [r7, #30]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	441a      	add	r2, r3
 80028b0:	78bc      	ldrb	r4, [r7, #2]
 80028b2:	8bbb      	ldrh	r3, [r7, #28]
 80028b4:	2120      	movs	r1, #32
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd feac 	bl	8000614 <ExtractBits>
 80028bc:	4602      	mov	r2, r0
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <Init_Msg_extr+0xc40>)
 80028c0:	0163      	lsls	r3, r4, #5
 80028c2:	440b      	add	r3, r1
 80028c4:	331c      	adds	r3, #28
 80028c6:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80028c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028cc:	3320      	adds	r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da00      	bge.n	80028d4 <Init_Msg_extr+0xbfc>
 80028d2:	3307      	adds	r3, #7
 80028d4:	10db      	asrs	r3, r3, #3
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	4413      	add	r3, r2
 80028dc:	83fb      	strh	r3, [r7, #30]
 80028de:	8bbb      	ldrh	r3, [r7, #28]
 80028e0:	3320      	adds	r3, #32
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	425a      	negs	r2, r3
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	f002 0207 	and.w	r2, r2, #7
 80028f0:	bf58      	it	pl
 80028f2:	4253      	negpl	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80028f8:	787a      	ldrb	r2, [r7, #1]
 80028fa:	78bb      	ldrb	r3, [r7, #2]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f86c 	bl	80029dc <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8002904:	78ba      	ldrb	r2, [r7, #2]
 8002906:	490b      	ldr	r1, [pc, #44]	; (8002934 <Init_Msg_extr+0xc5c>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	e012      	b.n	8002938 <Init_Msg_extr+0xc60>
 8002912:	bf00      	nop
 8002914:	200028f4 	.word	0x200028f4
 8002918:	20002994 	.word	0x20002994
 800291c:	20000504 	.word	0x20000504
 8002920:	080278b0 	.word	0x080278b0
 8002924:	08027878 	.word	0x08027878
 8002928:	0802788c 	.word	0x0802788c
 800292c:	080278cc 	.word	0x080278cc
 8002930:	080278f8 	.word	0x080278f8
 8002934:	20002da4 	.word	0x20002da4
 8002938:	440b      	add	r3, r1
 800293a:	3314      	adds	r3, #20
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002940:	78ba      	ldrb	r2, [r7, #2]
 8002942:	4923      	ldr	r1, [pc, #140]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3305      	adds	r3, #5
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002954:	78ba      	ldrb	r2, [r7, #2]
 8002956:	491e      	ldr	r1, [pc, #120]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002966:	78ba      	ldrb	r2, [r7, #2]
 8002968:	4919      	ldr	r1, [pc, #100]	; (80029d0 <Init_Msg_extr+0xcf8>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3301      	adds	r3, #1
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800297a:	2218      	movs	r2, #24
 800297c:	2100      	movs	r1, #0
 800297e:	4815      	ldr	r0, [pc, #84]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002980:	f022 ff84 	bl	802588c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002984:	78ba      	ldrb	r2, [r7, #2]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002990:	4413      	add	r3, r2
 8002992:	2218      	movs	r2, #24
 8002994:	4619      	mov	r1, r3
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002998:	f022 ff50 	bl	802583c <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 800299c:	f240 2002 	movw	r0, #514	; 0x202
 80029a0:	f00e f88a 	bl	8010ab8 <TransmitCanPkt>
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80029a4:	78ba      	ldrb	r2, [r7, #2]
 80029a6:	490a      	ldr	r1, [pc, #40]	; (80029d0 <Init_Msg_extr+0xcf8>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3301      	adds	r3, #1
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80029b8:	78bc      	ldrb	r4, [r7, #2]
 80029ba:	f016 f939 	bl	8018c30 <HAL_GetTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <Init_Msg_extr+0xd00>)
 80029c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80029c6:	e000      	b.n	80029ca <Init_Msg_extr+0xcf2>
			return;
 80029c8:	bf00      	nop
}
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	20002da4 	.word	0x20002da4
 80029d4:	20002f84 	.word	0x20002f84
 80029d8:	200024b8 	.word	0x200024b8

080029dc <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b097      	sub	sp, #92	; 0x5c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2238      	movs	r2, #56	; 0x38
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f022 ff47 	bl	802588c <memset>
	uint32_t Calc_CRC = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	441a      	add	r2, r3
 8002a18:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a1c:	23f4      	movs	r3, #244	; 0xf4
 8002a1e:	2108      	movs	r1, #8
 8002a20:	f7fd fe84 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da00      	bge.n	8002a30 <Send_Init_Msg+0x54>
 8002a2e:	3307      	adds	r3, #7
 8002a30:	10db      	asrs	r3, r3, #3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a42:	3308      	adds	r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	425a      	negs	r2, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	f002 0207 	and.w	r2, r2, #7
 8002a52:	bf58      	it	pl
 8002a54:	4253      	negpl	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	441a      	add	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4977      	ldr	r1, [pc, #476]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002a6a:	3366      	adds	r3, #102	; 0x66
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a76:	2110      	movs	r1, #16
 8002a78:	f7fd fe58 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002a7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a80:	3310      	adds	r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da00      	bge.n	8002a88 <Send_Init_Msg+0xac>
 8002a86:	3307      	adds	r3, #7
 8002a88:	10db      	asrs	r3, r3, #3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	4413      	add	r3, r2
 8002a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	425a      	negs	r2, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	f002 0207 	and.w	r2, r2, #7
 8002aaa:	bf58      	it	pl
 8002aac:	4253      	negpl	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab8:	f107 020c 	add.w	r2, r7, #12
 8002abc:	441a      	add	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4961      	ldr	r1, [pc, #388]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002ac2:	3370      	adds	r3, #112	; 0x70
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ace:	2110      	movs	r1, #16
 8002ad0:	f7fd fe2c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ad4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ad8:	3310      	adds	r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da00      	bge.n	8002ae0 <Send_Init_Msg+0x104>
 8002ade:	3307      	adds	r3, #7
 8002ae0:	10db      	asrs	r3, r3, #3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae8:	4413      	add	r3, r2
 8002aea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002af2:	3310      	adds	r3, #16
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	425a      	negs	r2, r3
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f002 0207 	and.w	r2, r2, #7
 8002b02:	bf58      	it	pl
 8002b04:	4253      	negpl	r3, r2
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d031      	beq.n	8002b7e <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d137      	bne.n	8002b94 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002b2a:	4849      	ldr	r0, [pc, #292]	; (8002c50 <Send_Init_Msg+0x274>)
 8002b2c:	f01a fc3e 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <Send_Init_Msg+0x278>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	21c8      	movs	r1, #200	; 0xc8
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002b4a:	4843      	ldr	r0, [pc, #268]	; (8002c58 <Send_Init_Msg+0x27c>)
 8002b4c:	f023 f822 	bl	8025b94 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4842      	ldr	r0, [pc, #264]	; (8002c5c <Send_Init_Msg+0x280>)
 8002b54:	f022 ff82 	bl	8025a5c <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002b58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4840      	ldr	r0, [pc, #256]	; (8002c60 <Send_Init_Msg+0x284>)
 8002b60:	f022 ff7c 	bl	8025a5c <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b68:	f107 020c 	add.w	r2, r7, #12
 8002b6c:	441a      	add	r2, r3
 8002b6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b76:	2108      	movs	r1, #8
 8002b78:	f7fd fdd8 	bl	800072c <InsertBits>
 8002b7c:	e00a      	b.n	8002b94 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	441a      	add	r2, r3
 8002b88:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2108      	movs	r1, #8
 8002b90:	f7fd fdcc 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002b94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b98:	3308      	adds	r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da00      	bge.n	8002ba0 <Send_Init_Msg+0x1c4>
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	10db      	asrs	r3, r3, #3
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba8:	4413      	add	r3, r2
 8002baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	425a      	negs	r2, r3
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f002 0207 	and.w	r2, r2, #7
 8002bc2:	bf58      	it	pl
 8002bc4:	4253      	negpl	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04c      	beq.n	8002c74 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d165      	bne.n	8002cb0 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8002bea:	4819      	ldr	r0, [pc, #100]	; (8002c50 <Send_Init_Msg+0x274>)
 8002bec:	f01a fbde 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <Send_Init_Msg+0x278>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	21c8      	movs	r1, #200	; 0xc8
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002c06:	4817      	ldr	r0, [pc, #92]	; (8002c64 <Send_Init_Msg+0x288>)
 8002c08:	f022 ffc4 	bl	8025b94 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <Send_Init_Msg+0x28c>)
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	3302      	adds	r3, #2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <Send_Init_Msg+0x290>)
 8002c1c:	f022 ff1e 	bl	8025a5c <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002c20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c24:	4619      	mov	r1, r3
 8002c26:	4812      	ldr	r0, [pc, #72]	; (8002c70 <Send_Init_Msg+0x294>)
 8002c28:	f022 ff18 	bl	8025a5c <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c30:	f107 020c 	add.w	r2, r7, #12
 8002c34:	441a      	add	r2, r3
 8002c36:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c3a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c3e:	2108      	movs	r1, #8
 8002c40:	f7fd fd74 	bl	800072c <InsertBits>
 8002c44:	e034      	b.n	8002cb0 <Send_Init_Msg+0x2d4>
 8002c46:	bf00      	nop
 8002c48:	20000504 	.word	0x20000504
 8002c4c:	2000308c 	.word	0x2000308c
 8002c50:	2000bbac 	.word	0x2000bbac
 8002c54:	51eb851f 	.word	0x51eb851f
 8002c58:	08027914 	.word	0x08027914
 8002c5c:	08027938 	.word	0x08027938
 8002c60:	08027958 	.word	0x08027958
 8002c64:	08027978 	.word	0x08027978
 8002c68:	200028f4 	.word	0x200028f4
 8002c6c:	0802799c 	.word	0x0802799c
 8002c70:	080279bc 	.word	0x080279bc

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	18d1      	adds	r1, r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	48c4      	ldr	r0, [pc, #784]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c82:	011a      	lsls	r2, r3, #4
 8002c84:	4402      	add	r2, r0
 8002c86:	3202      	adds	r2, #2
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	b2d4      	uxtb	r4, r2
 8002c8e:	48c1      	ldr	r0, [pc, #772]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	4402      	add	r2, r0
 8002c94:	3202      	adds	r2, #2
 8002c96:	4620      	mov	r0, r4
 8002c98:	7010      	strb	r0, [r2, #0]
 8002c9a:	4abe      	ldr	r2, [pc, #760]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ca8:	460a      	mov	r2, r1
 8002caa:	2108      	movs	r1, #8
 8002cac:	f7fd fd3e 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002cb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da00      	bge.n	8002cbc <Send_Init_Msg+0x2e0>
 8002cba:	3307      	adds	r3, #7
 8002cbc:	10db      	asrs	r3, r3, #3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cce:	3308      	adds	r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	425a      	negs	r2, r3
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	f002 0207 	and.w	r2, r2, #7
 8002cde:	bf58      	it	pl
 8002ce0:	4253      	negpl	r3, r2
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 8002ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	f7fd fd17 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002cfe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d02:	3308      	adds	r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da00      	bge.n	8002d0a <Send_Init_Msg+0x32e>
 8002d08:	3307      	adds	r3, #7
 8002d0a:	10db      	asrs	r3, r3, #3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d12:	4413      	add	r3, r2
 8002d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	425a      	negs	r2, r3
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	f002 0207 	and.w	r2, r2, #7
 8002d2c:	bf58      	it	pl
 8002d2e:	4253      	negpl	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a96      	ldr	r2, [pc, #600]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3306      	adds	r3, #6
 8002d40:	2205      	movs	r2, #5
 8002d42:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	441a      	add	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4990      	ldr	r1, [pc, #576]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	440b      	add	r3, r1
 8002d56:	3306      	adds	r3, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d5e:	2110      	movs	r1, #16
 8002d60:	f7fd fce4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002d64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d68:	3310      	adds	r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da00      	bge.n	8002d70 <Send_Init_Msg+0x394>
 8002d6e:	3307      	adds	r3, #7
 8002d70:	10db      	asrs	r3, r3, #3
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d82:	3310      	adds	r3, #16
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	f002 0207 	and.w	r2, r2, #7
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	441a      	add	r2, r3
 8002da6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002daa:	2317      	movs	r3, #23
 8002dac:	2108      	movs	r1, #8
 8002dae:	f7fd fcbd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002db2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002db6:	3308      	adds	r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da00      	bge.n	8002dbe <Send_Init_Msg+0x3e2>
 8002dbc:	3307      	adds	r3, #7
 8002dbe:	10db      	asrs	r3, r3, #3
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	425a      	negs	r2, r3
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	f002 0207 	and.w	r2, r2, #7
 8002de0:	bf58      	it	pl
 8002de2:	4253      	negpl	r3, r2
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	f7fd fc96 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e04:	3310      	adds	r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da00      	bge.n	8002e0c <Send_Init_Msg+0x430>
 8002e0a:	3307      	adds	r3, #7
 8002e0c:	10db      	asrs	r3, r3, #3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e14:	4413      	add	r3, r2
 8002e16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e1e:	3310      	adds	r3, #16
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	425a      	negs	r2, r3
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	f002 0207 	and.w	r2, r2, #7
 8002e2e:	bf58      	it	pl
 8002e30:	4253      	negpl	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e3c:	f107 020c 	add.w	r2, r7, #12
 8002e40:	441a      	add	r2, r3
 8002e42:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <Send_Init_Msg+0x5bc>)
 8002e48:	2120      	movs	r1, #32
 8002e4a:	f7fd fc6f 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002e4e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e52:	3320      	adds	r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da00      	bge.n	8002e5a <Send_Init_Msg+0x47e>
 8002e58:	3307      	adds	r3, #7
 8002e5a:	10db      	asrs	r3, r3, #3
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e62:	4413      	add	r3, r2
 8002e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	425a      	negs	r2, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	f002 0207 	and.w	r2, r2, #7
 8002e7c:	bf58      	it	pl
 8002e7e:	4253      	negpl	r3, r2
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	441a      	add	r2, r3
 8002e90:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e94:	2300      	movs	r3, #0
 8002e96:	2110      	movs	r1, #16
 8002e98:	f7fd fc48 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da00      	bge.n	8002ea8 <Send_Init_Msg+0x4cc>
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	10db      	asrs	r3, r3, #3
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	425a      	negs	r2, r3
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	f002 0207 	and.w	r2, r2, #7
 8002eca:	bf58      	it	pl
 8002ecc:	4253      	negpl	r3, r2
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed8:	f107 020c 	add.w	r2, r7, #12
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	f7fd fc21 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002eea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002eee:	3310      	adds	r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da00      	bge.n	8002ef6 <Send_Init_Msg+0x51a>
 8002ef4:	3307      	adds	r3, #7
 8002ef6:	10db      	asrs	r3, r3, #3
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002efe:	4413      	add	r3, r2
 8002f00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f08:	3310      	adds	r3, #16
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	425a      	negs	r2, r3
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	f002 0207 	and.w	r2, r2, #7
 8002f18:	bf58      	it	pl
 8002f1a:	4253      	negpl	r3, r2
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 8002f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f26:	f107 020c 	add.w	r2, r7, #12
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f30:	2300      	movs	r3, #0
 8002f32:	2110      	movs	r1, #16
 8002f34:	f7fd fbfa 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da00      	bge.n	8002f44 <Send_Init_Msg+0x568>
 8002f42:	3307      	adds	r3, #7
 8002f44:	10db      	asrs	r3, r3, #3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f56:	3310      	adds	r3, #16
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	f002 0207 	and.w	r2, r2, #7
 8002f66:	bf58      	it	pl
 8002f68:	4253      	negpl	r3, r2
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	441a      	add	r2, r3
 8002f7a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2110      	movs	r1, #16
 8002f82:	f7fd fbd3 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f86:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da05      	bge.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f90:	3307      	adds	r3, #7
 8002f92:	e003      	b.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f94:	200028f4 	.word	0x200028f4
 8002f98:	33e232af 	.word	0x33e232af
 8002f9c:	10db      	asrs	r3, r3, #3
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002faa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fae:	3310      	adds	r3, #16
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	425a      	negs	r2, r3
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	f002 0207 	and.w	r2, r2, #7
 8002fbe:	bf58      	it	pl
 8002fc0:	4253      	negpl	r3, r2
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	4ab2      	ldr	r2, [pc, #712]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4ab0      	ldr	r2, [pc, #704]	; (8003298 <Send_Init_Msg+0x8bc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d90d      	bls.n	8002ff6 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4aad      	ldr	r2, [pc, #692]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	49aa      	ldr	r1, [pc, #680]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00c      	b.n	8003010 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4aa6      	ldr	r2, [pc, #664]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3201      	adds	r2, #1
 8003006:	49a3      	ldr	r1, [pc, #652]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	440b      	add	r3, r1
 800300c:	330c      	adds	r3, #12
 800300e:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	441a      	add	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	499d      	ldr	r1, [pc, #628]	; (8003294 <Send_Init_Msg+0x8b8>)
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	330c      	adds	r3, #12
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800302a:	2118      	movs	r1, #24
 800302c:	f7fd fb7e 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4997      	ldr	r1, [pc, #604]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	330c      	adds	r3, #12
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	4897      	ldr	r0, [pc, #604]	; (800329c <Send_Init_Msg+0x8c0>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4403      	add	r3, r0
 800304a:	330c      	adds	r3, #12
 800304c:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 800304e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003052:	3318      	adds	r3, #24
 8003054:	2b00      	cmp	r3, #0
 8003056:	da00      	bge.n	800305a <Send_Init_Msg+0x67e>
 8003058:	3307      	adds	r3, #7
 800305a:	10db      	asrs	r3, r3, #3
 800305c:	b29a      	uxth	r2, r3
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003062:	4413      	add	r3, r2
 8003064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800306c:	3318      	adds	r3, #24
 800306e:	b29b      	uxth	r3, r3
 8003070:	b21b      	sxth	r3, r3
 8003072:	425a      	negs	r2, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	f002 0207 	and.w	r2, r2, #7
 800307c:	bf58      	it	pl
 800307e:	4253      	negpl	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <Send_Init_Msg+0x8c4>)
 800308a:	5cd2      	ldrb	r2, [r2, r3]
 800308c:	3201      	adds	r2, #1
 800308e:	b2d1      	uxtb	r1, r2
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003092:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4a82      	ldr	r2, [pc, #520]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	2bb3      	cmp	r3, #179	; 0xb3
 800309c:	d804      	bhi.n	80030a8 <Send_Init_Msg+0x6cc>
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030ac:	210a      	movs	r1, #10
 80030ae:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80030b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b4:	f107 020c 	add.w	r2, r7, #12
 80030b8:	441a      	add	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4978      	ldr	r1, [pc, #480]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030c4:	2108      	movs	r1, #8
 80030c6:	f7fd fb31 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030ce:	3308      	adds	r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da00      	bge.n	80030d6 <Send_Init_Msg+0x6fa>
 80030d4:	3307      	adds	r3, #7
 80030d6:	10db      	asrs	r3, r3, #3
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	4413      	add	r3, r2
 80030e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030e8:	3308      	adds	r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	425a      	negs	r2, r3
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	f002 0207 	and.w	r2, r2, #7
 80030f8:	bf58      	it	pl
 80030fa:	4253      	negpl	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8003102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003106:	f107 020c 	add.w	r2, r7, #12
 800310a:	441a      	add	r2, r3
 800310c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003110:	2301      	movs	r3, #1
 8003112:	2108      	movs	r1, #8
 8003114:	f7fd fb0a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003118:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800311c:	3308      	adds	r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	da00      	bge.n	8003124 <Send_Init_Msg+0x748>
 8003122:	3307      	adds	r3, #7
 8003124:	10db      	asrs	r3, r3, #3
 8003126:	b29a      	uxth	r2, r3
 8003128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800312c:	4413      	add	r3, r2
 800312e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003132:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003136:	3308      	adds	r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b21b      	sxth	r3, r3
 800313c:	425a      	negs	r2, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	f002 0207 	and.w	r2, r2, #7
 8003146:	bf58      	it	pl
 8003148:	4253      	negpl	r3, r2
 800314a:	b21b      	sxth	r3, r3
 800314c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8003150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003154:	f107 020c 	add.w	r2, r7, #12
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800315e:	2301      	movs	r3, #1
 8003160:	2108      	movs	r1, #8
 8003162:	f7fd fae3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003166:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800316a:	3308      	adds	r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	da00      	bge.n	8003172 <Send_Init_Msg+0x796>
 8003170:	3307      	adds	r3, #7
 8003172:	10db      	asrs	r3, r3, #3
 8003174:	b29a      	uxth	r2, r3
 8003176:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317a:	4413      	add	r3, r2
 800317c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003180:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003184:	3308      	adds	r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	b21b      	sxth	r3, r3
 800318a:	425a      	negs	r2, r3
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	f002 0207 	and.w	r2, r2, #7
 8003194:	bf58      	it	pl
 8003196:	4253      	negpl	r3, r2
 8003198:	b21b      	sxth	r3, r3
 800319a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 800319e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a2:	f107 020c 	add.w	r2, r7, #12
 80031a6:	441a      	add	r2, r3
 80031a8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	2108      	movs	r1, #8
 80031b0:	f7fd fabc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80031b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da00      	bge.n	80031c0 <Send_Init_Msg+0x7e4>
 80031be:	3307      	adds	r3, #7
 80031c0:	10db      	asrs	r3, r3, #3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c8:	4413      	add	r3, r2
 80031ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031d2:	3308      	adds	r3, #8
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	f002 0207 	and.w	r2, r2, #7
 80031e2:	bf58      	it	pl
 80031e4:	4253      	negpl	r3, r2
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d060      	beq.n	80032bc <Send_Init_Msg+0x8e0>
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d15b      	bne.n	80032bc <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8003204:	230c      	movs	r3, #12
 8003206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <Send_Init_Msg+0x8cc>)
 800320c:	f01a f8ce 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8003210:	4601      	mov	r1, r0
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <Send_Init_Msg+0x8d0>)
 8003214:	fba3 2301 	umull	r2, r3, r3, r1
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	4613      	mov	r3, r2
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	1aca      	subs	r2, r1, r3
 8003226:	b2d3      	uxtb	r3, r2
 8003228:	3301      	adds	r3, #1
 800322a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 800322e:	4820      	ldr	r0, [pc, #128]	; (80032b0 <Send_Init_Msg+0x8d4>)
 8003230:	f022 fcb0 	bl	8025b94 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	3303      	adds	r3, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	481c      	ldr	r0, [pc, #112]	; (80032b4 <Send_Init_Msg+0x8d8>)
 8003244:	f022 fc0a 	bl	8025a5c <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <Send_Init_Msg+0x8b8>)
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	3303      	adds	r3, #3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003258:	429a      	cmp	r2, r3
 800325a:	d108      	bne.n	800326e <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	3303      	adds	r3, #3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b02      	subs	r3, #2
 800326a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 800326e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003272:	4619      	mov	r1, r3
 8003274:	4810      	ldr	r0, [pc, #64]	; (80032b8 <Send_Init_Msg+0x8dc>)
 8003276:	f022 fbf1 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800327a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800327e:	f107 020c 	add.w	r2, r7, #12
 8003282:	441a      	add	r2, r3
 8003284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003288:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800328c:	2108      	movs	r1, #8
 800328e:	f7fd fa4d 	bl	800072c <InsertBits>
	{
 8003292:	e022      	b.n	80032da <Send_Init_Msg+0x8fe>
 8003294:	200028f4 	.word	0x200028f4
 8003298:	00ffffef 	.word	0x00ffffef
 800329c:	20002da4 	.word	0x20002da4
 80032a0:	2000030c 	.word	0x2000030c
 80032a4:	2000308c 	.word	0x2000308c
 80032a8:	2000bbac 	.word	0x2000bbac
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	080279dc 	.word	0x080279dc
 80032b4:	08027a0c 	.word	0x08027a0c
 80032b8:	08027a28 	.word	0x08027a28
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 80032bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	441a      	add	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	494e      	ldr	r1, [pc, #312]	; (8003404 <Send_Init_Msg+0xa28>)
 80032ca:	440b      	add	r3, r1
 80032cc:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80032d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032d4:	2108      	movs	r1, #8
 80032d6:	f7fd fa29 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80032da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80032de:	3308      	adds	r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da00      	bge.n	80032e6 <Send_Init_Msg+0x90a>
 80032e4:	3307      	adds	r3, #7
 80032e6:	10db      	asrs	r3, r3, #3
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ee:	4413      	add	r3, r2
 80032f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f8:	3308      	adds	r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	425a      	negs	r2, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	f002 0207 	and.w	r2, r2, #7
 8003308:	bf58      	it	pl
 800330a:	4253      	negpl	r3, r2
 800330c:	b21b      	sxth	r3, r3
 800330e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8003312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003316:	f107 020c 	add.w	r2, r7, #12
 800331a:	441a      	add	r2, r3
 800331c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003320:	2300      	movs	r3, #0
 8003322:	2108      	movs	r1, #8
 8003324:	f7fd fa02 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003328:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800332c:	3308      	adds	r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	da00      	bge.n	8003334 <Send_Init_Msg+0x958>
 8003332:	3307      	adds	r3, #7
 8003334:	10db      	asrs	r3, r3, #3
 8003336:	b29a      	uxth	r2, r3
 8003338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333c:	4413      	add	r3, r2
 800333e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003342:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003346:	3308      	adds	r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21b      	sxth	r3, r3
 800334c:	425a      	negs	r2, r3
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	f002 0207 	and.w	r2, r2, #7
 8003356:	bf58      	it	pl
 8003358:	4253      	negpl	r3, r2
 800335a:	b21b      	sxth	r3, r3
 800335c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8003360:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f011 ff32 	bl	80151d4 <CalculateDirectReverseCrc>
 8003370:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8003372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003376:	f107 020c 	add.w	r2, r7, #12
 800337a:	441a      	add	r2, r3
 800337c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	2120      	movs	r1, #32
 8003384:	f7fd f9d2 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8003388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800338c:	3320      	adds	r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	da00      	bge.n	8003394 <Send_Init_Msg+0x9b8>
 8003392:	3307      	adds	r3, #7
 8003394:	10db      	asrs	r3, r3, #3
 8003396:	b29a      	uxth	r2, r3
 8003398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800339c:	4413      	add	r3, r2
 800339e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033a6:	3320      	adds	r3, #32
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	425a      	negs	r2, r3
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	f002 0207 	and.w	r2, r2, #7
 80033b6:	bf58      	it	pl
 80033b8:	4253      	negpl	r3, r2
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <Send_Init_Msg+0xa0a>
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033d0:	791b      	ldrb	r3, [r3, #4]
 80033d2:	79fa      	ldrb	r2, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <Send_Init_Msg+0xa30>)
 80033da:	f022 fbdb 	bl	8025b94 <puts>
		printf("Not Sending Reply");
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <Send_Init_Msg+0xa34>)
 80033e0:	f022 fb3c 	bl	8025a5c <iprintf>
 80033e4:	e009      	b.n	80033fa <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ea:	b2d9      	uxtb	r1, r3
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fe02 	bl	8007ffc <Process_Sending_Reply>
	}
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	375c      	adds	r7, #92	; 0x5c
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	20000504 	.word	0x20000504
 8003408:	2000308c 	.word	0x2000308c
 800340c:	08027a44 	.word	0x08027a44
 8003410:	08027a5c 	.word	0x08027a5c

08003414 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b0ab      	sub	sp, #172	; 0xac
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8003440:	f015 fbf6 	bl	8018c30 <HAL_GetTick>
 8003444:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800344e:	2300      	movs	r3, #0
 8003450:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	227c      	movs	r2, #124	; 0x7c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f022 fa10 	bl	802588c <memset>
	BITSTUFFINIT(0, 0);
 800346c:	2300      	movs	r3, #0
 800346e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003472:	2300      	movs	r3, #0
 8003474:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003478:	49a9      	ldr	r1, [pc, #676]	; (8003720 <Vital_Msg_extr+0x30c>)
 800347a:	48aa      	ldr	r0, [pc, #680]	; (8003724 <Vital_Msg_extr+0x310>)
 800347c:	f7fc fee0 	bl	8000240 <strcmp>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8149 	beq.w	800371a <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003488:	4ba7      	ldr	r3, [pc, #668]	; (8003728 <Vital_Msg_extr+0x314>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <Vital_Msg_extr+0xe4>
 8003494:	4ba4      	ldr	r3, [pc, #656]	; (8003728 <Vital_Msg_extr+0x314>)
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	78ba      	ldrb	r2, [r7, #2]
 800349a:	429a      	cmp	r2, r3
 800349c:	d12c      	bne.n	80034f8 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 800349e:	2316      	movs	r3, #22
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80034a4:	48a1      	ldr	r0, [pc, #644]	; (800372c <Vital_Msg_extr+0x318>)
 80034a6:	f019 ff81 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <Vital_Msg_extr+0x31c>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	0dd9      	lsrs	r1, r3, #23
 80034b4:	460b      	mov	r3, r1
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	1a5b      	subs	r3, r3, r1
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 80034c2:	489c      	ldr	r0, [pc, #624]	; (8003734 <Vital_Msg_extr+0x320>)
 80034c4:	f022 fb66 	bl	8025b94 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034c8:	78bb      	ldrb	r3, [r7, #2]
 80034ca:	4a9b      	ldr	r2, [pc, #620]	; (8003738 <Vital_Msg_extr+0x324>)
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4413      	add	r3, r2
 80034d0:	3308      	adds	r3, #8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4899      	ldr	r0, [pc, #612]	; (800373c <Vital_Msg_extr+0x328>)
 80034d8:	f022 fac0 	bl	8025a5c <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80034dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80034e0:	4897      	ldr	r0, [pc, #604]	; (8003740 <Vital_Msg_extr+0x32c>)
 80034e2:	f022 fabb 	bl	8025a5c <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 80034e6:	f107 020c 	add.w	r2, r7, #12
 80034ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ee:	2118      	movs	r1, #24
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fd f91b 	bl	800072c <InsertBits>
	{
 80034f6:	e00b      	b.n	8003510 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034f8:	78bb      	ldrb	r3, [r7, #2]
 80034fa:	4a8f      	ldr	r2, [pc, #572]	; (8003738 <Vital_Msg_extr+0x324>)
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	3308      	adds	r3, #8
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f107 020c 	add.w	r2, r7, #12
 8003508:	2118      	movs	r1, #24
 800350a:	2000      	movs	r0, #0
 800350c:	f7fd f90e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003510:	2300      	movs	r3, #0
 8003512:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003516:	e010      	b.n	800353a <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8003518:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	441a      	add	r2, r3
 8003520:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003524:	3303      	adds	r3, #3
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	33a8      	adds	r3, #168	; 0xa8
 800352a:	443b      	add	r3, r7
 800352c:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003530:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003534:	3301      	adds	r3, #1
 8003536:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800353a:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	3b05      	subs	r3, #5
 8003542:	429a      	cmp	r2, r3
 8003544:	dbe8      	blt.n	8003518 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003546:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3303      	adds	r3, #3
 800354e:	b29a      	uxth	r2, r3
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f011 fe3c 	bl	80151d4 <CalculateDirectReverseCrc>
 800355c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	3b05      	subs	r3, #5
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	441a      	add	r2, r3
 8003568:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800356c:	2120      	movs	r1, #32
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f850 	bl	8000614 <ExtractBits>
 8003574:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8003578:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800357c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003580:	429a      	cmp	r2, r3
 8003582:	f000 80f5 	beq.w	8003770 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3305      	adds	r3, #5
 800358a:	461a      	mov	r2, r3
 800358c:	2108      	movs	r1, #8
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f840 	bl	8000614 <ExtractBits>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <Vital_Msg_extr+0x19c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3305      	adds	r3, #5
 800359e:	461a      	mov	r2, r3
 80035a0:	2108      	movs	r1, #8
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7fd f836 	bl	8000614 <ExtractBits>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 809f 	bne.w	80036ee <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 80035b0:	4864      	ldr	r0, [pc, #400]	; (8003744 <Vital_Msg_extr+0x330>)
 80035b2:	f022 faef 	bl	8025b94 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f022 f964 	bl	802588c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80035c4:	78bb      	ldrb	r3, [r7, #2]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <Vital_Msg_extr+0x324>)
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	3308      	adds	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	f107 020c 	add.w	r2, r7, #12
 80035d6:	2118      	movs	r1, #24
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd f8a7 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035e4:	e010      	b.n	8003608 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80035e6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	441a      	add	r2, r3
 80035ee:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035f2:	3303      	adds	r3, #3
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	33a8      	adds	r3, #168	; 0xa8
 80035f8:	443b      	add	r3, r7
 80035fa:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035fe:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003602:	3301      	adds	r3, #1
 8003604:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003608:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	3b05      	subs	r3, #5
 8003610:	429a      	cmp	r2, r3
 8003612:	dbe8      	blt.n	80035e6 <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003614:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3303      	adds	r3, #3
 800361c:	b29a      	uxth	r2, r3
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f011 fdd5 	bl	80151d4 <CalculateDirectReverseCrc>
 800362a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	3b05      	subs	r3, #5
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	441a      	add	r2, r3
 8003636:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800363a:	2120      	movs	r1, #32
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ffe9 	bl	8000614 <ExtractBits>
 8003642:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8003646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800364e:	429a      	cmp	r2, r3
 8003650:	d137      	bne.n	80036c2 <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003652:	483d      	ldr	r0, [pc, #244]	; (8003748 <Vital_Msg_extr+0x334>)
 8003654:	f022 fa9e 	bl	8025b94 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003658:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800365c:	483b      	ldr	r0, [pc, #236]	; (800374c <Vital_Msg_extr+0x338>)
 800365e:	f022 f9fd 	bl	8025a5c <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <Vital_Msg_extr+0x324>)
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	4837      	ldr	r0, [pc, #220]	; (8003750 <Vital_Msg_extr+0x33c>)
 8003672:	f022 f9f3 	bl	8025a5c <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	492f      	ldr	r1, [pc, #188]	; (8003738 <Vital_Msg_extr+0x324>)
 800367a:	011a      	lsls	r2, r3, #4
 800367c:	440a      	add	r2, r1
 800367e:	3208      	adds	r2, #8
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	3201      	adds	r2, #1
 8003684:	492c      	ldr	r1, [pc, #176]	; (8003738 <Vital_Msg_extr+0x324>)
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	3308      	adds	r3, #8
 800368c:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <Vital_Msg_extr+0x324>)
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	3308      	adds	r3, #8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	482d      	ldr	r0, [pc, #180]	; (8003754 <Vital_Msg_extr+0x340>)
 800369e:	f022 f9dd 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	78ba      	ldrb	r2, [r7, #2]
 80036a6:	4924      	ldr	r1, [pc, #144]	; (8003738 <Vital_Msg_extr+0x324>)
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4829      	ldr	r0, [pc, #164]	; (8003758 <Vital_Msg_extr+0x344>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4403      	add	r3, r0
 80036bc:	3308      	adds	r3, #8
 80036be:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 80036c0:	e057      	b.n	8003772 <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036c2:	78bb      	ldrb	r3, [r7, #2]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <Vital_Msg_extr+0x348>)
 80036c6:	3366      	adds	r3, #102	; 0x66
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4823      	ldr	r0, [pc, #140]	; (8003760 <Vital_Msg_extr+0x34c>)
 80036d2:	f022 f9c3 	bl	8025a5c <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036da:	4822      	ldr	r0, [pc, #136]	; (8003764 <Vital_Msg_extr+0x350>)
 80036dc:	f022 f9be 	bl	8025a5c <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036e4:	4820      	ldr	r0, [pc, #128]	; (8003768 <Vital_Msg_extr+0x354>)
 80036e6:	f022 f9b9 	bl	8025a5c <iprintf>
				return;
 80036ea:	f000 bf51 	b.w	8004590 <Vital_Msg_extr+0x117c>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036ee:	78bb      	ldrb	r3, [r7, #2]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <Vital_Msg_extr+0x348>)
 80036f2:	3366      	adds	r3, #102	; 0x66
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4619      	mov	r1, r3
 80036fc:	481b      	ldr	r0, [pc, #108]	; (800376c <Vital_Msg_extr+0x358>)
 80036fe:	f022 f9ad 	bl	8025a5c <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8003702:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003706:	4817      	ldr	r0, [pc, #92]	; (8003764 <Vital_Msg_extr+0x350>)
 8003708:	f022 f9a8 	bl	8025a5c <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 800370c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003710:	4815      	ldr	r0, [pc, #84]	; (8003768 <Vital_Msg_extr+0x354>)
 8003712:	f022 f9a3 	bl	8025a5c <iprintf>
			return;
 8003716:	f000 bf3b 	b.w	8004590 <Vital_Msg_extr+0x117c>
		goto ROLLOVER_VITAL;
 800371a:	bf00      	nop
 800371c:	e029      	b.n	8003772 <Vital_Msg_extr+0x35e>
 800371e:	bf00      	nop
 8003720:	0802756c 	.word	0x0802756c
 8003724:	20000505 	.word	0x20000505
 8003728:	2000308c 	.word	0x2000308c
 800372c:	2000bbac 	.word	0x2000bbac
 8003730:	80008001 	.word	0x80008001
 8003734:	08027a70 	.word	0x08027a70
 8003738:	200028f4 	.word	0x200028f4
 800373c:	08027a90 	.word	0x08027a90
 8003740:	08027ab8 	.word	0x08027ab8
 8003744:	08027ae0 	.word	0x08027ae0
 8003748:	08027afc 	.word	0x08027afc
 800374c:	08027b14 	.word	0x08027b14
 8003750:	08027b34 	.word	0x08027b34
 8003754:	08027b54 	.word	0x08027b54
 8003758:	20002da4 	.word	0x20002da4
 800375c:	20000504 	.word	0x20000504
 8003760:	08027b80 	.word	0x08027b80
 8003764:	080277b0 	.word	0x080277b0
 8003768:	080277c0 	.word	0x080277c0
 800376c:	08027ba0 	.word	0x08027ba0
		}
	}

	ROLLOVER_VITAL:
 8003770:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003772:	78bb      	ldrb	r3, [r7, #2]
 8003774:	49c4      	ldr	r1, [pc, #784]	; (8003a88 <Vital_Msg_extr+0x674>)
 8003776:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800377e:	78bb      	ldrb	r3, [r7, #2]
 8003780:	49c2      	ldr	r1, [pc, #776]	; (8003a8c <Vital_Msg_extr+0x678>)
 8003782:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800378a:	78bb      	ldrb	r3, [r7, #2]
 800378c:	4ac0      	ldr	r2, [pc, #768]	; (8003a90 <Vital_Msg_extr+0x67c>)
 800378e:	2101      	movs	r1, #1
 8003790:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4abd      	ldr	r2, [pc, #756]	; (8003a94 <Vital_Msg_extr+0x680>)
 800379e:	4413      	add	r3, r2
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f022 f871 	bl	802588c <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 80037aa:	78ba      	ldrb	r2, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4ab7      	ldr	r2, [pc, #732]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037b6:	4413      	add	r3, r2
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4618      	mov	r0, r3
 80037be:	f022 f83d 	bl	802583c <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80037c2:	78ba      	ldrb	r2, [r7, #2]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	b298      	uxth	r0, r3
 80037c8:	49b2      	ldr	r1, [pc, #712]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	015b      	lsls	r3, r3, #5
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	4602      	mov	r2, r0
 80037d8:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80037da:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037de:	3308      	adds	r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da00      	bge.n	80037e6 <Vital_Msg_extr+0x3d2>
 80037e4:	3307      	adds	r3, #7
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037ee:	4413      	add	r3, r2
 80037f0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037f8:	3308      	adds	r3, #8
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	425a      	negs	r2, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	f002 0207 	and.w	r2, r2, #7
 8003808:	bf58      	it	pl
 800380a:	4253      	negpl	r3, r2
 800380c:	b21b      	sxth	r3, r3
 800380e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003812:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	441a      	add	r2, r3
 800381a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800381e:	2110      	movs	r1, #16
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fef7 	bl	8000614 <ExtractBits>
 8003826:	4603      	mov	r3, r0
 8003828:	78ba      	ldrb	r2, [r7, #2]
 800382a:	b298      	uxth	r0, r3
 800382c:	499a      	ldr	r1, [pc, #616]	; (8003a98 <Vital_Msg_extr+0x684>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3328      	adds	r3, #40	; 0x28
 800383a:	4602      	mov	r2, r0
 800383c:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800383e:	78ba      	ldrb	r2, [r7, #2]
 8003840:	4995      	ldr	r1, [pc, #596]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	440b      	add	r3, r1
 800384c:	3328      	adds	r3, #40	; 0x28
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4892      	ldr	r0, [pc, #584]	; (8003a9c <Vital_Msg_extr+0x688>)
 8003854:	f022 f902 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 8003858:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800385c:	3310      	adds	r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	da00      	bge.n	8003864 <Vital_Msg_extr+0x450>
 8003862:	3307      	adds	r3, #7
 8003864:	10db      	asrs	r3, r3, #3
 8003866:	b29a      	uxth	r2, r3
 8003868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800386c:	4413      	add	r3, r2
 800386e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003872:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003876:	3310      	adds	r3, #16
 8003878:	b29b      	uxth	r3, r3
 800387a:	b21b      	sxth	r3, r3
 800387c:	425a      	negs	r2, r3
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	f002 0207 	and.w	r2, r2, #7
 8003886:	bf58      	it	pl
 8003888:	4253      	negpl	r3, r2
 800388a:	b21b      	sxth	r3, r3
 800388c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003890:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	441a      	add	r2, r3
 8003898:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800389c:	2110      	movs	r1, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc feb8 	bl	8000614 <ExtractBits>
 80038a4:	4603      	mov	r3, r0
 80038a6:	78ba      	ldrb	r2, [r7, #2]
 80038a8:	b298      	uxth	r0, r3
 80038aa:	497b      	ldr	r1, [pc, #492]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	; 0x26
 80038b8:	4602      	mov	r2, r0
 80038ba:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80038bc:	78ba      	ldrb	r2, [r7, #2]
 80038be:	4976      	ldr	r1, [pc, #472]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	3326      	adds	r3, #38	; 0x26
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4873      	ldr	r0, [pc, #460]	; (8003aa0 <Vital_Msg_extr+0x68c>)
 80038d2:	f022 f8c3 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 80038d6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038da:	3310      	adds	r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da00      	bge.n	80038e2 <Vital_Msg_extr+0x4ce>
 80038e0:	3307      	adds	r3, #7
 80038e2:	10db      	asrs	r3, r3, #3
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038ea:	4413      	add	r3, r2
 80038ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038f4:	3310      	adds	r3, #16
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	425a      	negs	r2, r3
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	f002 0207 	and.w	r2, r2, #7
 8003904:	bf58      	it	pl
 8003906:	4253      	negpl	r3, r2
 8003908:	b21b      	sxth	r3, r3
 800390a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800390e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	441a      	add	r2, r3
 8003916:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800391a:	2108      	movs	r1, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe79 	bl	8000614 <ExtractBits>
 8003922:	4602      	mov	r2, r0
 8003924:	78bb      	ldrb	r3, [r7, #2]
 8003926:	b2d1      	uxtb	r1, r2
 8003928:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <Vital_Msg_extr+0x690>)
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4413      	add	r3, r2
 800392e:	3302      	adds	r3, #2
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003934:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003938:	3308      	adds	r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	da00      	bge.n	8003940 <Vital_Msg_extr+0x52c>
 800393e:	3307      	adds	r3, #7
 8003940:	10db      	asrs	r3, r3, #3
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003948:	4413      	add	r3, r2
 800394a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800394e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003952:	3308      	adds	r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b21b      	sxth	r3, r3
 8003958:	425a      	negs	r2, r3
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	f002 0207 	and.w	r2, r2, #7
 8003962:	bf58      	it	pl
 8003964:	4253      	negpl	r3, r2
 8003966:	b21b      	sxth	r3, r3
 8003968:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800396c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	441a      	add	r2, r3
 8003974:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003978:	2108      	movs	r1, #8
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fe4a 	bl	8000614 <ExtractBits>
 8003980:	4602      	mov	r2, r0
 8003982:	78bb      	ldrb	r3, [r7, #2]
 8003984:	b2d1      	uxtb	r1, r2
 8003986:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	3301      	adds	r3, #1
 800398e:	460a      	mov	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003992:	78bb      	ldrb	r3, [r7, #2]
 8003994:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	3301      	adds	r3, #1
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d138      	bne.n	8003a14 <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80039a2:	78bb      	ldrb	r3, [r7, #2]
 80039a4:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <Vital_Msg_extr+0x694>)
 80039a6:	3366      	adds	r3, #102	; 0x66
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	483e      	ldr	r0, [pc, #248]	; (8003aac <Vital_Msg_extr+0x698>)
 80039b2:	f022 f853 	bl	8025a5c <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	4413      	add	r3, r2
 80039be:	330c      	adds	r3, #12
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	483a      	ldr	r0, [pc, #232]	; (8003ab0 <Vital_Msg_extr+0x69c>)
 80039c6:	f022 f849 	bl	8025a5c <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039ca:	78bb      	ldrb	r3, [r7, #2]
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ce:	011a      	lsls	r2, r3, #4
 80039d0:	440a      	add	r2, r1
 80039d2:	320c      	adds	r2, #12
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	3201      	adds	r2, #1
 80039d8:	4932      	ldr	r1, [pc, #200]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	4413      	add	r3, r2
 80039ea:	330c      	adds	r3, #12
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	4830      	ldr	r0, [pc, #192]	; (8003ab4 <Vital_Msg_extr+0x6a0>)
 80039f2:	f022 f833 	bl	8025a5c <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039f6:	78bb      	ldrb	r3, [r7, #2]
 80039f8:	78ba      	ldrb	r2, [r7, #2]
 80039fa:	492a      	ldr	r1, [pc, #168]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	440b      	add	r3, r1
 8003a00:	330c      	adds	r3, #12
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	482c      	ldr	r0, [pc, #176]	; (8003ab8 <Vital_Msg_extr+0x6a4>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4403      	add	r3, r0
 8003a10:	330c      	adds	r3, #12
 8003a12:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8003a14:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da00      	bge.n	8003a20 <Vital_Msg_extr+0x60c>
 8003a1e:	3307      	adds	r3, #7
 8003a20:	10db      	asrs	r3, r3, #3
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a28:	4413      	add	r3, r2
 8003a2a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003a2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a32:	3308      	adds	r3, #8
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	425a      	negs	r2, r3
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	f002 0207 	and.w	r2, r2, #7
 8003a42:	bf58      	it	pl
 8003a44:	4253      	negpl	r3, r2
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003a4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	441a      	add	r2, r3
 8003a54:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a58:	2108      	movs	r1, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fdda 	bl	8000614 <ExtractBits>
 8003a60:	4603      	mov	r3, r0
 8003a62:	78ba      	ldrb	r2, [r7, #2]
 8003a64:	b2d8      	uxtb	r0, r3
 8003a66:	490c      	ldr	r1, [pc, #48]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	440b      	add	r3, r1
 8003a72:	3302      	adds	r3, #2
 8003a74:	4602      	mov	r2, r0
 8003a76:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003a78:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da1c      	bge.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a82:	3307      	adds	r3, #7
 8003a84:	e01a      	b.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a86:	bf00      	nop
 8003a88:	20002630 	.word	0x20002630
 8003a8c:	20002658 	.word	0x20002658
 8003a90:	200026a4 	.word	0x200026a4
 8003a94:	20003094 	.word	0x20003094
 8003a98:	20002ad4 	.word	0x20002ad4
 8003a9c:	080278a0 	.word	0x080278a0
 8003aa0:	080278a8 	.word	0x080278a8
 8003aa4:	200028f4 	.word	0x200028f4
 8003aa8:	20000504 	.word	0x20000504
 8003aac:	08027bb4 	.word	0x08027bb4
 8003ab0:	08027bf8 	.word	0x08027bf8
 8003ab4:	08027c08 	.word	0x08027c08
 8003ab8:	20002da4 	.word	0x20002da4
 8003abc:	10db      	asrs	r3, r3, #3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003aca:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ace:	3308      	adds	r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	f002 0207 	and.w	r2, r2, #7
 8003ade:	bf58      	it	pl
 8003ae0:	4253      	negpl	r3, r2
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003ae8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003af4:	2110      	movs	r1, #16
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd8c 	bl	8000614 <ExtractBits>
 8003afc:	4602      	mov	r2, r0
 8003afe:	78bb      	ldrb	r3, [r7, #2]
 8003b00:	b291      	uxth	r1, r2
 8003b02:	4abd      	ldr	r2, [pc, #756]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003b0e:	49bb      	ldr	r1, [pc, #748]	; (8003dfc <Vital_Msg_extr+0x9e8>)
 8003b10:	48bb      	ldr	r0, [pc, #748]	; (8003e00 <Vital_Msg_extr+0x9ec>)
 8003b12:	f7fc fb95 	bl	8000240 <strcmp>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003b1c:	78bb      	ldrb	r3, [r7, #2]
 8003b1e:	4ab6      	ldr	r2, [pc, #728]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	b291      	uxth	r1, r2
 8003b30:	4ab1      	ldr	r2, [pc, #708]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	460a      	mov	r2, r1
 8003b3a:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003b3c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b40:	3310      	adds	r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da00      	bge.n	8003b48 <Vital_Msg_extr+0x734>
 8003b46:	3307      	adds	r3, #7
 8003b48:	10db      	asrs	r3, r3, #3
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b50:	4413      	add	r3, r2
 8003b52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003b56:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	425a      	negs	r2, r3
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	f002 0207 	and.w	r2, r2, #7
 8003b6a:	bf58      	it	pl
 8003b6c:	4253      	negpl	r3, r2
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003b74:	78bb      	ldrb	r3, [r7, #2]
 8003b76:	4aa0      	ldr	r2, [pc, #640]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8145 	beq.w	8003e14 <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003b8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	441a      	add	r2, r3
 8003b92:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b96:	2108      	movs	r1, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fd3b 	bl	8000614 <ExtractBits>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	78ba      	ldrb	r2, [r7, #2]
 8003ba2:	b2d8      	uxtb	r0, r3
 8003ba4:	4997      	ldr	r1, [pc, #604]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	3305      	adds	r3, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003bb6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da00      	bge.n	8003bc2 <Vital_Msg_extr+0x7ae>
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	10db      	asrs	r3, r3, #3
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bca:	4413      	add	r3, r2
 8003bcc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003bd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	425a      	negs	r2, r3
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	f002 0207 	and.w	r2, r2, #7
 8003be4:	bf58      	it	pl
 8003be6:	4253      	negpl	r3, r2
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003bee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	441a      	add	r2, r3
 8003bf6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bfa:	2108      	movs	r1, #8
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fd09 	bl	8000614 <ExtractBits>
 8003c02:	4603      	mov	r3, r0
 8003c04:	78ba      	ldrb	r2, [r7, #2]
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	497e      	ldr	r1, [pc, #504]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	3304      	adds	r3, #4
 8003c16:	4602      	mov	r2, r0
 8003c18:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003c1a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da00      	bge.n	8003c26 <Vital_Msg_extr+0x812>
 8003c24:	3307      	adds	r3, #7
 8003c26:	10db      	asrs	r3, r3, #3
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c38:	3308      	adds	r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	425a      	negs	r2, r3
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	f002 0207 	and.w	r2, r2, #7
 8003c48:	bf58      	it	pl
 8003c4a:	4253      	negpl	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	441a      	add	r2, r3
 8003c5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c5e:	2108      	movs	r1, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fcd7 	bl	8000614 <ExtractBits>
 8003c66:	4603      	mov	r3, r0
 8003c68:	78ba      	ldrb	r2, [r7, #2]
 8003c6a:	b2d8      	uxtb	r0, r3
 8003c6c:	4965      	ldr	r1, [pc, #404]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	3303      	adds	r3, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003c7e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c82:	3308      	adds	r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da00      	bge.n	8003c8a <Vital_Msg_extr+0x876>
 8003c88:	3307      	adds	r3, #7
 8003c8a:	10db      	asrs	r3, r3, #3
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c92:	4413      	add	r3, r2
 8003c94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c98:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	f002 0207 	and.w	r2, r2, #7
 8003cac:	bf58      	it	pl
 8003cae:	4253      	negpl	r3, r2
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003cb6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fca5 	bl	8000614 <ExtractBits>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	b2d8      	uxtb	r0, r3
 8003cd0:	494c      	ldr	r1, [pc, #304]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	440b      	add	r3, r1
 8003cdc:	4602      	mov	r2, r0
 8003cde:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003ce0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da00      	bge.n	8003cec <Vital_Msg_extr+0x8d8>
 8003cea:	3307      	adds	r3, #7
 8003cec:	10db      	asrs	r3, r3, #3
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003cfa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cfe:	3308      	adds	r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	425a      	negs	r2, r3
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	f002 0207 	and.w	r2, r2, #7
 8003d0e:	bf58      	it	pl
 8003d10:	4253      	negpl	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	441a      	add	r2, r3
 8003d20:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d24:	2108      	movs	r1, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc74 	bl	8000614 <ExtractBits>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	78ba      	ldrb	r2, [r7, #2]
 8003d30:	b2d8      	uxtb	r0, r3
 8003d32:	4934      	ldr	r1, [pc, #208]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4602      	mov	r2, r0
 8003d42:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003d44:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da00      	bge.n	8003d50 <Vital_Msg_extr+0x93c>
 8003d4e:	3307      	adds	r3, #7
 8003d50:	10db      	asrs	r3, r3, #3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d58:	4413      	add	r3, r2
 8003d5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d5e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d62:	3308      	adds	r3, #8
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	425a      	negs	r2, r3
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f002 0207 	and.w	r2, r2, #7
 8003d72:	bf58      	it	pl
 8003d74:	4253      	negpl	r3, r2
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	441a      	add	r2, r3
 8003d84:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d88:	2108      	movs	r1, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fc42 	bl	8000614 <ExtractBits>
 8003d90:	4603      	mov	r3, r0
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	b2d8      	uxtb	r0, r3
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	3302      	adds	r3, #2
 8003da4:	4602      	mov	r2, r0
 8003da6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003da8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003dac:	3308      	adds	r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da00      	bge.n	8003db4 <Vital_Msg_extr+0x9a0>
 8003db2:	3307      	adds	r3, #7
 8003db4:	10db      	asrs	r3, r3, #3
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003dc2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	425a      	negs	r2, r3
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	f002 0207 	and.w	r2, r2, #7
 8003dd6:	bf58      	it	pl
 8003dd8:	4253      	negpl	r3, r2
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003de0:	78bb      	ldrb	r3, [r7, #2]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fbb6 	bl	8009554 <IS_MLK_EIPC_TIME_MATCHING>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <Vital_Msg_extr+0x9f8>
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <Vital_Msg_extr+0x9f4>)
 8003df2:	2100      	movs	r1, #0
 8003df4:	54d1      	strb	r1, [r2, r3]
 8003df6:	e00d      	b.n	8003e14 <Vital_Msg_extr+0xa00>
 8003df8:	200028f4 	.word	0x200028f4
 8003dfc:	0802756c 	.word	0x0802756c
 8003e00:	20000505 	.word	0x20000505
 8003e04:	200028b8 	.word	0x200028b8
 8003e08:	20002764 	.word	0x20002764
 8003e0c:	78bb      	ldrb	r3, [r7, #2]
 8003e0e:	4a91      	ldr	r2, [pc, #580]	; (8004054 <Vital_Msg_extr+0xc40>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8003e14:	78bb      	ldrb	r3, [r7, #2]
 8003e16:	4a90      	ldr	r2, [pc, #576]	; (8004058 <Vital_Msg_extr+0xc44>)
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	441a      	add	r2, r3
 8003e36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc fbe9 	bl	8000614 <ExtractBits>
 8003e42:	4603      	mov	r3, r0
 8003e44:	78ba      	ldrb	r2, [r7, #2]
 8003e46:	b2d8      	uxtb	r0, r3
 8003e48:	4984      	ldr	r1, [pc, #528]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	440b      	add	r3, r1
 8003e54:	3303      	adds	r3, #3
 8003e56:	4602      	mov	r2, r0
 8003e58:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003e5a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	da00      	bge.n	8003e66 <Vital_Msg_extr+0xa52>
 8003e64:	3307      	adds	r3, #7
 8003e66:	10db      	asrs	r3, r3, #3
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e6e:	4413      	add	r3, r2
 8003e70:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003e74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e78:	3308      	adds	r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	425a      	negs	r2, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	f002 0207 	and.w	r2, r2, #7
 8003e88:	bf58      	it	pl
 8003e8a:	4253      	negpl	r3, r2
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003e92:	78ba      	ldrb	r2, [r7, #2]
 8003e94:	4971      	ldr	r1, [pc, #452]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	486e      	ldr	r0, [pc, #440]	; (8004060 <Vital_Msg_extr+0xc4c>)
 8003ea8:	f021 fdd8 	bl	8025a5c <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003eac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003eb8:	2108      	movs	r1, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fbaa 	bl	8000614 <ExtractBits>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	78ba      	ldrb	r2, [r7, #2]
 8003ec4:	b2d8      	uxtb	r0, r3
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <Vital_Msg_extr+0xc48>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003ed8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003edc:	3308      	adds	r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da00      	bge.n	8003ee4 <Vital_Msg_extr+0xad0>
 8003ee2:	3307      	adds	r3, #7
 8003ee4:	10db      	asrs	r3, r3, #3
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eec:	4413      	add	r3, r2
 8003eee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003ef2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	425a      	negs	r2, r3
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	f002 0207 	and.w	r2, r2, #7
 8003f06:	bf58      	it	pl
 8003f08:	4253      	negpl	r3, r2
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	4952      	ldr	r1, [pc, #328]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3303      	adds	r3, #3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003f2a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003f32:	78ba      	ldrb	r2, [r7, #2]
 8003f34:	4949      	ldr	r1, [pc, #292]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	440b      	add	r3, r1
 8003f40:	3303      	adds	r3, #3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f4e:	e00b      	b.n	8003f68 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003f50:	78ba      	ldrb	r2, [r7, #2]
 8003f52:	4942      	ldr	r1, [pc, #264]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3303      	adds	r3, #3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003f6e:	e04c      	b.n	800400a <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003f70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	441a      	add	r2, r3
 8003f78:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fb48 	bl	8000614 <ExtractBits>
 8003f84:	4603      	mov	r3, r0
 8003f86:	78ba      	ldrb	r2, [r7, #2]
 8003f88:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f8c:	b2dc      	uxtb	r4, r3
 8003f8e:	4833      	ldr	r0, [pc, #204]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4403      	add	r3, r0
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003fa2:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003fa6:	78ba      	ldrb	r2, [r7, #2]
 8003fa8:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003fac:	4c2b      	ldr	r4, [pc, #172]	; (800405c <Vital_Msg_extr+0xc48>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4423      	add	r3, r4
 8003fb8:	440b      	add	r3, r1
 8003fba:	3305      	adds	r3, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4828      	ldr	r0, [pc, #160]	; (8004064 <Vital_Msg_extr+0xc50>)
 8003fc4:	f021 fd4a 	bl	8025a5c <iprintf>
		BITSTUFFINC(8);
 8003fc8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da00      	bge.n	8003fd4 <Vital_Msg_extr+0xbc0>
 8003fd2:	3307      	adds	r3, #7
 8003fd4:	10db      	asrs	r3, r3, #3
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003fe2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	425a      	negs	r2, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	f002 0207 	and.w	r2, r2, #7
 8003ff6:	bf58      	it	pl
 8003ff8:	4253      	negpl	r3, r2
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004000:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004004:	3301      	adds	r3, #1
 8004006:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800400a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800400e:	b29b      	uxth	r3, r3
 8004010:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004014:	429a      	cmp	r2, r3
 8004016:	d3ab      	bcc.n	8003f70 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8004018:	200a      	movs	r0, #10
 800401a:	f021 fd37 	bl	8025a8c <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800401e:	78bb      	ldrb	r3, [r7, #2]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <Vital_Msg_extr+0xc54>)
 8004022:	4413      	add	r3, r2
 8004024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004028:	2b02      	cmp	r3, #2
 800402a:	d10e      	bne.n	800404a <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800402c:	78ba      	ldrb	r2, [r7, #2]
 800402e:	490b      	ldr	r1, [pc, #44]	; (800405c <Vital_Msg_extr+0xc48>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	440b      	add	r3, r1
 800403a:	3305      	adds	r3, #5
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	4619      	mov	r1, r3
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <Vital_Msg_extr+0xc58>)
 8004046:	f021 fd09 	bl	8025a5c <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 800404a:	2300      	movs	r3, #0
 800404c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004050:	e048      	b.n	80040e4 <Vital_Msg_extr+0xcd0>
 8004052:	bf00      	nop
 8004054:	20002764 	.word	0x20002764
 8004058:	200028f4 	.word	0x200028f4
 800405c:	20002ad4 	.word	0x20002ad4
 8004060:	08027c18 	.word	0x08027c18
 8004064:	08027c20 	.word	0x08027c20
 8004068:	20000504 	.word	0x20000504
 800406c:	08027c30 	.word	0x08027c30
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004070:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	441a      	add	r2, r3
 8004078:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800407c:	2108      	movs	r1, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fac8 	bl	8000614 <ExtractBits>
 8004084:	4603      	mov	r3, r0
 8004086:	78ba      	ldrb	r2, [r7, #2]
 8004088:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 800408c:	b2dc      	uxtb	r4, r3
 800408e:	486b      	ldr	r0, [pc, #428]	; (800423c <Vital_Msg_extr+0xe28>)
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4403      	add	r3, r0
 800409a:	440b      	add	r3, r1
 800409c:	3315      	adds	r3, #21
 800409e:	4622      	mov	r2, r4
 80040a0:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80040a2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80040a6:	3308      	adds	r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da00      	bge.n	80040ae <Vital_Msg_extr+0xc9a>
 80040ac:	3307      	adds	r3, #7
 80040ae:	10db      	asrs	r3, r3, #3
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80040b6:	4413      	add	r3, r2
 80040b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80040bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80040c0:	3308      	adds	r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	425a      	negs	r2, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	f002 0207 	and.w	r2, r2, #7
 80040d0:	bf58      	it	pl
 80040d2:	4253      	negpl	r3, r2
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80040da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80040de:	3301      	adds	r3, #1
 80040e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80040e4:	78ba      	ldrb	r2, [r7, #2]
 80040e6:	4955      	ldr	r1, [pc, #340]	; (800423c <Vital_Msg_extr+0xe28>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	440b      	add	r3, r1
 80040f2:	3304      	adds	r3, #4
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3b7      	bcc.n	8004070 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8004100:	787a      	ldrb	r2, [r7, #1]
 8004102:	78bb      	ldrb	r3, [r7, #2]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fbd8 	bl	80078bc <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	4a4c      	ldr	r2, [pc, #304]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004110:	2101      	movs	r1, #1
 8004112:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8004114:	78bb      	ldrb	r3, [r7, #2]
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004118:	3302      	adds	r3, #2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004122:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8004124:	78ba      	ldrb	r2, [r7, #2]
 8004126:	4947      	ldr	r1, [pc, #284]	; (8004244 <Vital_Msg_extr+0xe30>)
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	3304      	adds	r3, #4
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d116      	bne.n	8004168 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800413a:	2246      	movs	r2, #70	; 0x46
 800413c:	2100      	movs	r1, #0
 800413e:	4842      	ldr	r0, [pc, #264]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004140:	f021 fba4 	bl	802588c <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8004144:	78bb      	ldrb	r3, [r7, #2]
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <Vital_Msg_extr+0xe34>)
 800414a:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004152:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	461a      	mov	r2, r3
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	483c      	ldr	r0, [pc, #240]	; (800424c <Vital_Msg_extr+0xe38>)
 800415c:	f021 fb6e 	bl	802583c <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
#endif
#ifdef EI_2
		TransmitCanPkt(SEND_VITAL_MSG_2);
 8004160:	f44f 7001 	mov.w	r0, #516	; 0x204
 8004164:	f00c fca8 	bl	8010ab8 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8004168:	78bb      	ldrb	r3, [r7, #2]
 800416a:	4a39      	ldr	r2, [pc, #228]	; (8004250 <Vital_Msg_extr+0xe3c>)
 800416c:	4413      	add	r3, r2
 800416e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004172:	2b02      	cmp	r3, #2
 8004174:	d128      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
 8004176:	78ba      	ldrb	r2, [r7, #2]
 8004178:	4930      	ldr	r1, [pc, #192]	; (800423c <Vital_Msg_extr+0xe28>)
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	440b      	add	r3, r1
 8004184:	3305      	adds	r3, #5
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11b      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8004190:	4830      	ldr	r0, [pc, #192]	; (8004254 <Vital_Msg_extr+0xe40>)
 8004192:	f021 fcff 	bl	8025b94 <puts>
		LinkEstablishFlag = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 800419c:	78bb      	ldrb	r3, [r7, #2]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041a0:	2101      	movs	r1, #1
 80041a2:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <Vital_Msg_extr+0xe48>)
 80041a8:	2100      	movs	r1, #0
 80041aa:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 80041ac:	78ba      	ldrb	r2, [r7, #2]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <Vital_Msg_extr+0xe28>)
 80041b8:	4413      	add	r3, r2
 80041ba:	3305      	adds	r3, #5
 80041bc:	2210      	movs	r2, #16
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f021 fb63 	bl	802588c <memset>
 80041c6:	e05d      	b.n	8004284 <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 80041c8:	78bb      	ldrb	r3, [r7, #2]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <Vital_Msg_extr+0xe3c>)
 80041cc:	4413      	add	r3, r2
 80041ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d156      	bne.n	8004284 <Vital_Msg_extr+0xe70>
 80041d6:	78ba      	ldrb	r2, [r7, #2]
 80041d8:	4918      	ldr	r1, [pc, #96]	; (800423c <Vital_Msg_extr+0xe28>)
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	440b      	add	r3, r1
 80041e4:	3305      	adds	r3, #5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d049      	beq.n	8004284 <Vital_Msg_extr+0xe70>
 80041f0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d145      	bne.n	8004284 <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 80041f8:	78bb      	ldrb	r3, [r7, #2]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d140      	bne.n	8004284 <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 8004202:	78bb      	ldrb	r3, [r7, #2]
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <Vital_Msg_extr+0xe48>)
 8004206:	5cd2      	ldrb	r2, [r2, r3]
 8004208:	3201      	adds	r2, #1
 800420a:	b2d1      	uxtb	r1, r2
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <Vital_Msg_extr+0xe48>)
 800420e:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 8004210:	78bb      	ldrb	r3, [r7, #2]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <Vital_Msg_extr+0xe48>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	4619      	mov	r1, r3
 8004218:	4811      	ldr	r0, [pc, #68]	; (8004260 <Vital_Msg_extr+0xe4c>)
 800421a:	f021 fc1f 	bl	8025a5c <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 800421e:	78bb      	ldrb	r3, [r7, #2]
 8004220:	4a0e      	ldr	r2, [pc, #56]	; (800425c <Vital_Msg_extr+0xe48>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d91d      	bls.n	8004264 <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8004228:	78bb      	ldrb	r3, [r7, #2]
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <Vital_Msg_extr+0xe44>)
 800422c:	2100      	movs	r1, #0
 800422e:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8004230:	78bb      	ldrb	r3, [r7, #2]
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <Vital_Msg_extr+0xe48>)
 8004234:	2104      	movs	r1, #4
 8004236:	54d1      	strb	r1, [r2, r3]
 8004238:	e024      	b.n	8004284 <Vital_Msg_extr+0xe70>
 800423a:	bf00      	nop
 800423c:	20002ad4 	.word	0x20002ad4
 8004240:	200033ac 	.word	0x200033ac
 8004244:	20002da4 	.word	0x20002da4
 8004248:	20002fb4 	.word	0x20002fb4
 800424c:	20002fba 	.word	0x20002fba
 8004250:	20000504 	.word	0x20000504
 8004254:	08027c48 	.word	0x08027c48
 8004258:	20002538 	.word	0x20002538
 800425c:	20002544 	.word	0x20002544
 8004260:	08027c58 	.word	0x08027c58
			}
			else
			{
				LinkEstablishFlag = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4ac8      	ldr	r2, [pc, #800]	; (8004598 <Vital_Msg_extr+0x1184>)
 8004276:	4413      	add	r3, r2
 8004278:	3305      	adds	r3, #5
 800427a:	2210      	movs	r2, #16
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f021 fb04 	bl	802588c <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8004284:	78ba      	ldrb	r2, [r7, #2]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4ac3      	ldr	r2, [pc, #780]	; (800459c <Vital_Msg_extr+0x1188>)
 8004290:	4413      	add	r3, r2
 8004292:	3301      	adds	r3, #1
 8004294:	2210      	movs	r2, #16
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f021 faf7 	bl	802588c <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 800429e:	78ba      	ldrb	r2, [r7, #2]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4abc      	ldr	r2, [pc, #752]	; (800459c <Vital_Msg_extr+0x1188>)
 80042aa:	4413      	add	r3, r2
 80042ac:	1c58      	adds	r0, r3, #1
 80042ae:	78ba      	ldrb	r2, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4ab7      	ldr	r2, [pc, #732]	; (8004598 <Vital_Msg_extr+0x1184>)
 80042ba:	4413      	add	r3, r2
 80042bc:	3305      	adds	r3, #5
 80042be:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042c2:	4619      	mov	r1, r3
 80042c4:	f021 faba 	bl	802583c <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 80042c8:	78ba      	ldrb	r2, [r7, #2]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4ab2      	ldr	r2, [pc, #712]	; (800459c <Vital_Msg_extr+0x1188>)
 80042d4:	4413      	add	r3, r2
 80042d6:	3301      	adds	r3, #1
 80042d8:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042dc:	b212      	sxth	r2, r2
 80042de:	78bc      	ldrb	r4, [r7, #2]
 80042e0:	4619      	mov	r1, r3
 80042e2:	2000      	movs	r0, #0
 80042e4:	f010 febc 	bl	8015060 <GetCRC16>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4aab      	ldr	r2, [pc, #684]	; (800459c <Vital_Msg_extr+0x1188>)
 80042ee:	4623      	mov	r3, r4
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4423      	add	r3, r4
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	3312      	adds	r3, #18
 80042fa:	460a      	mov	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 80042fe:	78ba      	ldrb	r2, [r7, #2]
 8004300:	49a6      	ldr	r1, [pc, #664]	; (800459c <Vital_Msg_extr+0x1188>)
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3311      	adds	r3, #17
 800430e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8004312:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8004314:	78ba      	ldrb	r2, [r7, #2]
 8004316:	49a1      	ldr	r1, [pc, #644]	; (800459c <Vital_Msg_extr+0x1188>)
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	78ba      	ldrb	r2, [r7, #2]
 8004324:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8004326:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800432a:	2b01      	cmp	r3, #1
 800432c:	d16c      	bne.n	8004408 <Vital_Msg_extr+0xff4>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800432e:	78ba      	ldrb	r2, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a99      	ldr	r2, [pc, #612]	; (80045a0 <Vital_Msg_extr+0x118c>)
 800433a:	4413      	add	r3, r2
 800433c:	3301      	adds	r3, #1
 800433e:	2210      	movs	r2, #16
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f021 faa2 	bl	802588c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8004348:	78ba      	ldrb	r2, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4a93      	ldr	r2, [pc, #588]	; (80045a0 <Vital_Msg_extr+0x118c>)
 8004354:	1898      	adds	r0, r3, r2
 8004356:	78ba      	ldrb	r2, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4a8e      	ldr	r2, [pc, #568]	; (800459c <Vital_Msg_extr+0x1188>)
 8004362:	4413      	add	r3, r2
 8004364:	2214      	movs	r2, #20
 8004366:	4619      	mov	r1, r3
 8004368:	f021 fa68 	bl	802583c <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 800436c:	78bb      	ldrb	r3, [r7, #2]
 800436e:	498d      	ldr	r1, [pc, #564]	; (80045a4 <Vital_Msg_extr+0x1190>)
 8004370:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	4a8b      	ldr	r2, [pc, #556]	; (80045a8 <Vital_Msg_extr+0x1194>)
 800437c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004380:	78ba      	ldrb	r2, [r7, #2]
 8004382:	4887      	ldr	r0, [pc, #540]	; (80045a0 <Vital_Msg_extr+0x118c>)
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	3312      	adds	r3, #18
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	4299      	cmp	r1, r3
 8004394:	d038      	beq.n	8004408 <Vital_Msg_extr+0xff4>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004396:	78ba      	ldrb	r2, [r7, #2]
 8004398:	78b9      	ldrb	r1, [r7, #2]
 800439a:	4881      	ldr	r0, [pc, #516]	; (80045a0 <Vital_Msg_extr+0x118c>)
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	3312      	adds	r3, #18
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	4b7f      	ldr	r3, [pc, #508]	; (80045a8 <Vital_Msg_extr+0x1194>)
 80043ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80043b0:	2214      	movs	r2, #20
 80043b2:	2100      	movs	r1, #0
 80043b4:	487d      	ldr	r0, [pc, #500]	; (80045ac <Vital_Msg_extr+0x1198>)
 80043b6:	f021 fa69 	bl	802588c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80043ba:	78ba      	ldrb	r2, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a76      	ldr	r2, [pc, #472]	; (80045a0 <Vital_Msg_extr+0x118c>)
 80043c6:	4413      	add	r3, r2
 80043c8:	2214      	movs	r2, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	4877      	ldr	r0, [pc, #476]	; (80045ac <Vital_Msg_extr+0x1198>)
 80043ce:	f021 fa35 	bl	802583c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80043d2:	f44f 7002 	mov.w	r0, #520	; 0x208
 80043d6:	f00c fb6f 	bl	8010ab8 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	4a74      	ldr	r2, [pc, #464]	; (80045b0 <Vital_Msg_extr+0x119c>)
 80043de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d110      	bne.n	8004408 <Vital_Msg_extr+0xff4>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80043e6:	78bb      	ldrb	r3, [r7, #2]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4a72      	ldr	r2, [pc, #456]	; (80045b4 <Vital_Msg_extr+0x11a0>)
 80043ec:	4413      	add	r3, r2
 80043ee:	1c98      	adds	r0, r3, #2
 80043f0:	78ba      	ldrb	r2, [r7, #2]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a69      	ldr	r2, [pc, #420]	; (80045a0 <Vital_Msg_extr+0x118c>)
 80043fc:	4413      	add	r3, r2
 80043fe:	3301      	adds	r3, #1
 8004400:	2210      	movs	r2, #16
 8004402:	4619      	mov	r1, r3
 8004404:	f021 fa1a 	bl	802583c <memcpy>
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004408:	78b9      	ldrb	r1, [r7, #2]
 800440a:	78ba      	ldrb	r2, [r7, #2]
 800440c:	4864      	ldr	r0, [pc, #400]	; (80045a0 <Vital_Msg_extr+0x118c>)
 800440e:	460b      	mov	r3, r1
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	440b      	add	r3, r1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	4403      	add	r3, r0
 8004418:	3312      	adds	r3, #18
 800441a:	8818      	ldrh	r0, [r3, #0]
 800441c:	4966      	ldr	r1, [pc, #408]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 800441e:	4613      	mov	r3, r2
 8004420:	005b      	lsls	r3, r3, #1
 8004422:	4413      	add	r3, r2
 8004424:	00db      	lsls	r3, r3, #3
 8004426:	440b      	add	r3, r1
 8004428:	3306      	adds	r3, #6
 800442a:	4602      	mov	r2, r0
 800442c:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800442e:	78ba      	ldrb	r2, [r7, #2]
 8004430:	4961      	ldr	r1, [pc, #388]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	3314      	adds	r3, #20
 800443e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004442:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8004444:	78ba      	ldrb	r2, [r7, #2]
 8004446:	495c      	ldr	r1, [pc, #368]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 8004448:	4613      	mov	r3, r2
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	4413      	add	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	440b      	add	r3, r1
 8004452:	3305      	adds	r3, #5
 8004454:	2202      	movs	r2, #2
 8004456:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8004458:	78ba      	ldrb	r2, [r7, #2]
 800445a:	4957      	ldr	r1, [pc, #348]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	78ba      	ldrb	r2, [r7, #2]
 8004468:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800446a:	78ba      	ldrb	r2, [r7, #2]
 800446c:	4952      	ldr	r1, [pc, #328]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 800446e:	4613      	mov	r3, r2
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	3301      	adds	r3, #1
 800447a:	2201      	movs	r2, #1
 800447c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 800447e:	78ba      	ldrb	r2, [r7, #2]
 8004480:	494d      	ldr	r1, [pc, #308]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	3302      	adds	r3, #2
 800448e:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8004492:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8004494:	2218      	movs	r2, #24
 8004496:	2100      	movs	r1, #0
 8004498:	4848      	ldr	r0, [pc, #288]	; (80045bc <Vital_Msg_extr+0x11a8>)
 800449a:	f021 f9f7 	bl	802588c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800449e:	78ba      	ldrb	r2, [r7, #2]
 80044a0:	4613      	mov	r3, r2
 80044a2:	005b      	lsls	r3, r3, #1
 80044a4:	4413      	add	r3, r2
 80044a6:	00db      	lsls	r3, r3, #3
 80044a8:	4a43      	ldr	r2, [pc, #268]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 80044aa:	4413      	add	r3, r2
 80044ac:	2218      	movs	r2, #24
 80044ae:	4619      	mov	r1, r3
 80044b0:	4842      	ldr	r0, [pc, #264]	; (80045bc <Vital_Msg_extr+0x11a8>)
 80044b2:	f021 f9c3 	bl	802583c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80044b6:	f240 2002 	movw	r0, #514	; 0x202
 80044ba:	f00c fafd 	bl	8010ab8 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80044be:	78ba      	ldrb	r2, [r7, #2]
 80044c0:	493d      	ldr	r1, [pc, #244]	; (80045b8 <Vital_Msg_extr+0x11a4>)
 80044c2:	4613      	mov	r3, r2
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	4413      	add	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	440b      	add	r3, r1
 80044cc:	3301      	adds	r3, #1
 80044ce:	2200      	movs	r2, #0
 80044d0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80044d2:	78bb      	ldrb	r3, [r7, #2]
 80044d4:	493a      	ldr	r1, [pc, #232]	; (80045c0 <Vital_Msg_extr+0x11ac>)
 80044d6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80044de:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d11f      	bne.n	8004526 <Vital_Msg_extr+0x1112>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80044e6:	78bb      	ldrb	r3, [r7, #2]
 80044e8:	4936      	ldr	r1, [pc, #216]	; (80045c4 <Vital_Msg_extr+0x11b0>)
 80044ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80044f2:	78ba      	ldrb	r2, [r7, #2]
 80044f4:	4934      	ldr	r1, [pc, #208]	; (80045c8 <Vital_Msg_extr+0x11b4>)
 80044f6:	4613      	mov	r3, r2
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	3304      	adds	r3, #4
 8004502:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004506:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8004508:	78ba      	ldrb	r2, [r7, #2]
 800450a:	492f      	ldr	r1, [pc, #188]	; (80045c8 <Vital_Msg_extr+0x11b4>)
 800450c:	4613      	mov	r3, r2
 800450e:	005b      	lsls	r3, r3, #1
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	3301      	adds	r3, #1
 8004518:	2201      	movs	r2, #1
 800451a:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 800451c:	78bb      	ldrb	r3, [r7, #2]
 800451e:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <Vital_Msg_extr+0x11b8>)
 8004520:	2101      	movs	r1, #1
 8004522:	54d1      	strb	r1, [r2, r3]
 8004524:	e02f      	b.n	8004586 <Vital_Msg_extr+0x1172>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8004526:	78bb      	ldrb	r3, [r7, #2]
 8004528:	4a28      	ldr	r2, [pc, #160]	; (80045cc <Vital_Msg_extr+0x11b8>)
 800452a:	2100      	movs	r1, #0
 800452c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 800452e:	78ba      	ldrb	r2, [r7, #2]
 8004530:	4925      	ldr	r1, [pc, #148]	; (80045c8 <Vital_Msg_extr+0x11b4>)
 8004532:	4613      	mov	r3, r2
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	4413      	add	r3, r2
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	440b      	add	r3, r1
 800453c:	3308      	adds	r3, #8
 800453e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004542:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8004544:	78ba      	ldrb	r2, [r7, #2]
 8004546:	4920      	ldr	r1, [pc, #128]	; (80045c8 <Vital_Msg_extr+0x11b4>)
 8004548:	4613      	mov	r3, r2
 800454a:	005b      	lsls	r3, r3, #1
 800454c:	4413      	add	r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	3301      	adds	r3, #1
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8004558:	78ba      	ldrb	r2, [r7, #2]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	4a0f      	ldr	r2, [pc, #60]	; (80045a0 <Vital_Msg_extr+0x118c>)
 8004564:	4413      	add	r3, r2
 8004566:	3301      	adds	r3, #1
 8004568:	2210      	movs	r2, #16
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f021 f98d 	bl	802588c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8004572:	78ba      	ldrb	r2, [r7, #2]
 8004574:	490a      	ldr	r1, [pc, #40]	; (80045a0 <Vital_Msg_extr+0x118c>)
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	440b      	add	r3, r1
 8004580:	3312      	adds	r3, #18
 8004582:	2200      	movs	r2, #0
 8004584:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8004586:	f44f 7180 	mov.w	r1, #256	; 0x100
 800458a:	4811      	ldr	r0, [pc, #68]	; (80045d0 <Vital_Msg_extr+0x11bc>)
 800458c:	f016 ff45 	bl	801b41a <HAL_GPIO_TogglePin>

}
 8004590:	37ac      	adds	r7, #172	; 0xac
 8004592:	46bd      	mov	sp, r7
 8004594:	bd90      	pop	{r4, r7, pc}
 8004596:	bf00      	nop
 8004598:	20002ad4 	.word	0x20002ad4
 800459c:	200034d0 	.word	0x200034d0
 80045a0:	20003598 	.word	0x20003598
 80045a4:	20002564 	.word	0x20002564
 80045a8:	2000258c 	.word	0x2000258c
 80045ac:	20003728 	.word	0x20003728
 80045b0:	20002550 	.word	0x20002550
 80045b4:	20002770 	.word	0x20002770
 80045b8:	20002da4 	.word	0x20002da4
 80045bc:	20002f84 	.word	0x20002f84
 80045c0:	200024b8 	.word	0x200024b8
 80045c4:	200025a0 	.word	0x200025a0
 80045c8:	200033e0 	.word	0x200033e0
 80045cc:	200025f0 	.word	0x200025f0
 80045d0:	40021c00 	.word	0x40021c00

080045d4 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80045d4:	b590      	push	{r4, r7, lr}
 80045d6:	b0a5      	sub	sp, #148	; 0x94
 80045d8:	af00      	add	r7, sp, #0
 80045da:	4603      	mov	r3, r0
 80045dc:	460a      	mov	r2, r1
 80045de:	71fb      	strb	r3, [r7, #7]
 80045e0:	4613      	mov	r3, r2
 80045e2:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80045e4:	2300      	movs	r3, #0
 80045e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80045ec:	2238      	movs	r2, #56	; 0x38
 80045ee:	2100      	movs	r1, #0
 80045f0:	4618      	mov	r0, r3
 80045f2:	f021 f94b 	bl	802588c <memset>
	uint8_t Temp_Buff[60] = {0,};
 80045f6:	2300      	movs	r3, #0
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	f107 0310 	add.w	r3, r7, #16
 80045fe:	2238      	movs	r2, #56	; 0x38
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f021 f942 	bl	802588c <memset>
	uint8_t uc_index = 0;
 8004608:	2300      	movs	r3, #0
 800460a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 800460e:	2300      	movs	r3, #0
 8004610:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004614:	2300      	movs	r3, #0
 8004616:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 800461a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800461e:	223c      	movs	r2, #60	; 0x3c
 8004620:	2100      	movs	r1, #0
 8004622:	4618      	mov	r0, r3
 8004624:	f021 f932 	bl	802588c <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8004628:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800462c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004630:	441a      	add	r2, r3
 8004632:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004636:	23f4      	movs	r3, #244	; 0xf4
 8004638:	2108      	movs	r1, #8
 800463a:	f7fc f877 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800463e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004642:	3308      	adds	r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	da00      	bge.n	800464a <Send_Vital_Data_Message+0x76>
 8004648:	3307      	adds	r3, #7
 800464a:	10db      	asrs	r3, r3, #3
 800464c:	b29a      	uxth	r2, r3
 800464e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004652:	4413      	add	r3, r2
 8004654:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004658:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800465c:	3308      	adds	r3, #8
 800465e:	b29b      	uxth	r3, r3
 8004660:	b21b      	sxth	r3, r3
 8004662:	425a      	negs	r2, r3
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	f002 0207 	and.w	r2, r2, #7
 800466c:	bf58      	it	pl
 800466e:	4253      	negpl	r3, r2
 8004670:	b21b      	sxth	r3, r3
 8004672:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004676:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800467a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800467e:	441a      	add	r2, r3
 8004680:	79fb      	ldrb	r3, [r7, #7]
 8004682:	49c6      	ldr	r1, [pc, #792]	; (800499c <Send_Vital_Data_Message+0x3c8>)
 8004684:	3366      	adds	r3, #102	; 0x66
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004690:	2110      	movs	r1, #16
 8004692:	f7fc f84b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8004696:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800469a:	3310      	adds	r3, #16
 800469c:	2b00      	cmp	r3, #0
 800469e:	da00      	bge.n	80046a2 <Send_Vital_Data_Message+0xce>
 80046a0:	3307      	adds	r3, #7
 80046a2:	10db      	asrs	r3, r3, #3
 80046a4:	b29a      	uxth	r2, r3
 80046a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046aa:	4413      	add	r3, r2
 80046ac:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80046b0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046b4:	3310      	adds	r3, #16
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	b21b      	sxth	r3, r3
 80046ba:	425a      	negs	r2, r3
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	f002 0207 	and.w	r2, r2, #7
 80046c4:	bf58      	it	pl
 80046c6:	4253      	negpl	r3, r2
 80046c8:	b21b      	sxth	r3, r3
 80046ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80046ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046d2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046d6:	441a      	add	r2, r3
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	49b0      	ldr	r1, [pc, #704]	; (800499c <Send_Vital_Data_Message+0x3c8>)
 80046dc:	3370      	adds	r3, #112	; 0x70
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80046e8:	2110      	movs	r1, #16
 80046ea:	f7fc f81f 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80046ee:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046f2:	3310      	adds	r3, #16
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	da00      	bge.n	80046fa <Send_Vital_Data_Message+0x126>
 80046f8:	3307      	adds	r3, #7
 80046fa:	10db      	asrs	r3, r3, #3
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004702:	4413      	add	r3, r2
 8004704:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004708:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800470c:	3310      	adds	r3, #16
 800470e:	b29b      	uxth	r3, r3
 8004710:	b21b      	sxth	r3, r3
 8004712:	425a      	negs	r2, r3
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	f002 0207 	and.w	r2, r2, #7
 800471c:	bf58      	it	pl
 800471e:	4253      	negpl	r3, r2
 8004720:	b21b      	sxth	r3, r3
 8004722:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004726:	4b9e      	ldr	r3, [pc, #632]	; (80049a0 <Send_Vital_Data_Message+0x3cc>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d035      	beq.n	80047a0 <Send_Vital_Data_Message+0x1cc>
 8004734:	4b9a      	ldr	r3, [pc, #616]	; (80049a0 <Send_Vital_Data_Message+0x3cc>)
 8004736:	791b      	ldrb	r3, [r3, #4]
 8004738:	79fa      	ldrb	r2, [r7, #7]
 800473a:	429a      	cmp	r2, r3
 800473c:	d130      	bne.n	80047a0 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8004744:	4897      	ldr	r0, [pc, #604]	; (80049a4 <Send_Vital_Data_Message+0x3d0>)
 8004746:	f018 fe31 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800474a:	4602      	mov	r2, r0
 800474c:	4b96      	ldr	r3, [pc, #600]	; (80049a8 <Send_Vital_Data_Message+0x3d4>)
 800474e:	fba3 1302 	umull	r1, r3, r3, r2
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	21c8      	movs	r1, #200	; 0xc8
 8004756:	fb01 f303 	mul.w	r3, r1, r3
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8004760:	4892      	ldr	r0, [pc, #584]	; (80049ac <Send_Vital_Data_Message+0x3d8>)
 8004762:	f021 fa17 	bl	8025b94 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8004766:	79fb      	ldrb	r3, [r7, #7]
 8004768:	4a91      	ldr	r2, [pc, #580]	; (80049b0 <Send_Vital_Data_Message+0x3dc>)
 800476a:	011b      	lsls	r3, r3, #4
 800476c:	4413      	add	r3, r2
 800476e:	3301      	adds	r3, #1
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	4619      	mov	r1, r3
 8004774:	488f      	ldr	r0, [pc, #572]	; (80049b4 <Send_Vital_Data_Message+0x3e0>)
 8004776:	f021 f971 	bl	8025a5c <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 800477a:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 800477e:	4619      	mov	r1, r3
 8004780:	488d      	ldr	r0, [pc, #564]	; (80049b8 <Send_Vital_Data_Message+0x3e4>)
 8004782:	f021 f96b 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8004786:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800478a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800478e:	441a      	add	r2, r3
 8004790:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8004794:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004798:	2108      	movs	r1, #8
 800479a:	f7fb ffc7 	bl	800072c <InsertBits>
	{
 800479e:	e00f      	b.n	80047c0 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80047a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047a8:	441a      	add	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	4980      	ldr	r1, [pc, #512]	; (80049b0 <Send_Vital_Data_Message+0x3dc>)
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	440b      	add	r3, r1
 80047b2:	3301      	adds	r3, #1
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047ba:	2108      	movs	r1, #8
 80047bc:	f7fb ffb6 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80047c0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80047c4:	3308      	adds	r3, #8
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	da00      	bge.n	80047cc <Send_Vital_Data_Message+0x1f8>
 80047ca:	3307      	adds	r3, #7
 80047cc:	10db      	asrs	r3, r3, #3
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047d4:	4413      	add	r3, r2
 80047d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80047da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80047de:	3308      	adds	r3, #8
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	b21b      	sxth	r3, r3
 80047e4:	425a      	negs	r2, r3
 80047e6:	f003 0307 	and.w	r3, r3, #7
 80047ea:	f002 0207 	and.w	r2, r2, #7
 80047ee:	bf58      	it	pl
 80047f0:	4253      	negpl	r3, r2
 80047f2:	b21b      	sxth	r3, r3
 80047f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80047f8:	4b69      	ldr	r3, [pc, #420]	; (80049a0 <Send_Vital_Data_Message+0x3cc>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	08db      	lsrs	r3, r3, #3
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d035      	beq.n	8004872 <Send_Vital_Data_Message+0x29e>
 8004806:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <Send_Vital_Data_Message+0x3cc>)
 8004808:	791b      	ldrb	r3, [r3, #4]
 800480a:	79fa      	ldrb	r2, [r7, #7]
 800480c:	429a      	cmp	r2, r3
 800480e:	d130      	bne.n	8004872 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8004816:	4863      	ldr	r0, [pc, #396]	; (80049a4 <Send_Vital_Data_Message+0x3d0>)
 8004818:	f018 fdc8 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800481c:	4602      	mov	r2, r0
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <Send_Vital_Data_Message+0x3d4>)
 8004820:	fba3 1302 	umull	r1, r3, r3, r2
 8004824:	099b      	lsrs	r3, r3, #6
 8004826:	21c8      	movs	r1, #200	; 0xc8
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8004832:	4862      	ldr	r0, [pc, #392]	; (80049bc <Send_Vital_Data_Message+0x3e8>)
 8004834:	f021 f9ae 	bl	8025b94 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8004838:	79fb      	ldrb	r3, [r7, #7]
 800483a:	4a5d      	ldr	r2, [pc, #372]	; (80049b0 <Send_Vital_Data_Message+0x3dc>)
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	4413      	add	r3, r2
 8004840:	3302      	adds	r3, #2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	4619      	mov	r1, r3
 8004846:	485e      	ldr	r0, [pc, #376]	; (80049c0 <Send_Vital_Data_Message+0x3ec>)
 8004848:	f021 f908 	bl	8025a5c <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 800484c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004850:	4619      	mov	r1, r3
 8004852:	485c      	ldr	r0, [pc, #368]	; (80049c4 <Send_Vital_Data_Message+0x3f0>)
 8004854:	f021 f902 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8004858:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800485c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004860:	441a      	add	r2, r3
 8004862:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004866:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800486a:	2108      	movs	r1, #8
 800486c:	f7fb ff5e 	bl	800072c <InsertBits>
	{
 8004870:	e00f      	b.n	8004892 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8004872:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004876:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800487a:	441a      	add	r2, r3
 800487c:	79fb      	ldrb	r3, [r7, #7]
 800487e:	494c      	ldr	r1, [pc, #304]	; (80049b0 <Send_Vital_Data_Message+0x3dc>)
 8004880:	011b      	lsls	r3, r3, #4
 8004882:	440b      	add	r3, r1
 8004884:	3302      	adds	r3, #2
 8004886:	781b      	ldrb	r3, [r3, #0]
 8004888:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800488c:	2108      	movs	r1, #8
 800488e:	f7fb ff4d 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8004892:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004896:	3308      	adds	r3, #8
 8004898:	2b00      	cmp	r3, #0
 800489a:	da00      	bge.n	800489e <Send_Vital_Data_Message+0x2ca>
 800489c:	3307      	adds	r3, #7
 800489e:	10db      	asrs	r3, r3, #3
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048a6:	4413      	add	r3, r2
 80048a8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048b0:	3308      	adds	r3, #8
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	b21b      	sxth	r3, r3
 80048b6:	425a      	negs	r2, r3
 80048b8:	f003 0307 	and.w	r3, r3, #7
 80048bc:	f002 0207 	and.w	r2, r2, #7
 80048c0:	bf58      	it	pl
 80048c2:	4253      	negpl	r3, r2
 80048c4:	b21b      	sxth	r3, r3
 80048c6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80048ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048d2:	441a      	add	r2, r3
 80048d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048d8:	2302      	movs	r3, #2
 80048da:	2108      	movs	r1, #8
 80048dc:	f7fb ff26 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80048e0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80048e4:	3308      	adds	r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	da00      	bge.n	80048ec <Send_Vital_Data_Message+0x318>
 80048ea:	3307      	adds	r3, #7
 80048ec:	10db      	asrs	r3, r3, #3
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048f4:	4413      	add	r3, r2
 80048f6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048fa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048fe:	3308      	adds	r3, #8
 8004900:	b29b      	uxth	r3, r3
 8004902:	b21b      	sxth	r3, r3
 8004904:	425a      	negs	r2, r3
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	f002 0207 	and.w	r2, r2, #7
 800490e:	bf58      	it	pl
 8004910:	4253      	negpl	r3, r2
 8004912:	b21b      	sxth	r3, r3
 8004914:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	4a2b      	ldr	r2, [pc, #172]	; (80049c8 <Send_Vital_Data_Message+0x3f4>)
 800491c:	5cd3      	ldrb	r3, [r2, r3]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d15a      	bne.n	80049d8 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004922:	f007 ff01 	bl	800c728 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004926:	79fa      	ldrb	r2, [r7, #7]
 8004928:	4613      	mov	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	4413      	add	r3, r2
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	4a26      	ldr	r2, [pc, #152]	; (80049cc <Send_Vital_Data_Message+0x3f8>)
 8004932:	4413      	add	r3, r2
 8004934:	4a26      	ldr	r2, [pc, #152]	; (80049d0 <Send_Vital_Data_Message+0x3fc>)
 8004936:	6811      	ldr	r1, [r2, #0]
 8004938:	6019      	str	r1, [r3, #0]
 800493a:	8892      	ldrh	r2, [r2, #4]
 800493c:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800493e:	4825      	ldr	r0, [pc, #148]	; (80049d4 <Send_Vital_Data_Message+0x400>)
 8004940:	f021 f928 	bl	8025b94 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004944:	79fb      	ldrb	r3, [r7, #7]
 8004946:	4a20      	ldr	r2, [pc, #128]	; (80049c8 <Send_Vital_Data_Message+0x3f4>)
 8004948:	2100      	movs	r1, #0
 800494a:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 800494c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004950:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004954:	441a      	add	r2, r3
 8004956:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800495a:	2368      	movs	r3, #104	; 0x68
 800495c:	2110      	movs	r1, #16
 800495e:	f7fb fee5 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004962:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004966:	3310      	adds	r3, #16
 8004968:	2b00      	cmp	r3, #0
 800496a:	da00      	bge.n	800496e <Send_Vital_Data_Message+0x39a>
 800496c:	3307      	adds	r3, #7
 800496e:	10db      	asrs	r3, r3, #3
 8004970:	b29a      	uxth	r2, r3
 8004972:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004976:	4413      	add	r3, r2
 8004978:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800497c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004980:	3310      	adds	r3, #16
 8004982:	b29b      	uxth	r3, r3
 8004984:	b21b      	sxth	r3, r3
 8004986:	425a      	negs	r2, r3
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	f002 0207 	and.w	r2, r2, #7
 8004990:	bf58      	it	pl
 8004992:	4253      	negpl	r3, r2
 8004994:	b21b      	sxth	r3, r3
 8004996:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800499a:	e044      	b.n	8004a26 <Send_Vital_Data_Message+0x452>
 800499c:	20000504 	.word	0x20000504
 80049a0:	2000308c 	.word	0x2000308c
 80049a4:	2000bbac 	.word	0x2000bbac
 80049a8:	51eb851f 	.word	0x51eb851f
 80049ac:	08027c6c 	.word	0x08027c6c
 80049b0:	200028f4 	.word	0x200028f4
 80049b4:	08027c90 	.word	0x08027c90
 80049b8:	08027cb0 	.word	0x08027cb0
 80049bc:	08027978 	.word	0x08027978
 80049c0:	0802799c 	.word	0x0802799c
 80049c4:	080279bc 	.word	0x080279bc
 80049c8:	20002764 	.word	0x20002764
 80049cc:	200028b8 	.word	0x200028b8
 80049d0:	20003f28 	.word	0x20003f28
 80049d4:	08027cd0 	.word	0x08027cd0
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80049d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80049dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80049e0:	441a      	add	r2, r3
 80049e2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80049e6:	2328      	movs	r3, #40	; 0x28
 80049e8:	2110      	movs	r1, #16
 80049ea:	f7fb fe9f 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80049ee:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80049f2:	3310      	adds	r3, #16
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	da00      	bge.n	80049fa <Send_Vital_Data_Message+0x426>
 80049f8:	3307      	adds	r3, #7
 80049fa:	10db      	asrs	r3, r3, #3
 80049fc:	b29a      	uxth	r2, r3
 80049fe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a02:	4413      	add	r3, r2
 8004a04:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a0c:	3310      	adds	r3, #16
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	b21b      	sxth	r3, r3
 8004a12:	425a      	negs	r2, r3
 8004a14:	f003 0307 	and.w	r3, r3, #7
 8004a18:	f002 0207 	and.w	r2, r2, #7
 8004a1c:	bf58      	it	pl
 8004a1e:	4253      	negpl	r3, r2
 8004a20:	b21b      	sxth	r3, r3
 8004a22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004a26:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a2e:	18d1      	adds	r1, r2, r3
 8004a30:	79fa      	ldrb	r2, [r7, #7]
 8004a32:	48cd      	ldr	r0, [pc, #820]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	4413      	add	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4403      	add	r3, r0
 8004a3e:	3305      	adds	r3, #5
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a46:	460a      	mov	r2, r1
 8004a48:	2108      	movs	r1, #8
 8004a4a:	f7fb fe6f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a4e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a52:	3308      	adds	r3, #8
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	da00      	bge.n	8004a5a <Send_Vital_Data_Message+0x486>
 8004a58:	3307      	adds	r3, #7
 8004a5a:	10db      	asrs	r3, r3, #3
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a62:	4413      	add	r3, r2
 8004a64:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a68:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a6c:	3308      	adds	r3, #8
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	b21b      	sxth	r3, r3
 8004a72:	425a      	negs	r2, r3
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	f002 0207 	and.w	r2, r2, #7
 8004a7c:	bf58      	it	pl
 8004a7e:	4253      	negpl	r3, r2
 8004a80:	b21b      	sxth	r3, r3
 8004a82:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004a86:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a8a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a8e:	18d1      	adds	r1, r2, r3
 8004a90:	79fa      	ldrb	r2, [r7, #7]
 8004a92:	48b5      	ldr	r0, [pc, #724]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004a94:	4613      	mov	r3, r2
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	4413      	add	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4403      	add	r3, r0
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004aa6:	460a      	mov	r2, r1
 8004aa8:	2108      	movs	r1, #8
 8004aaa:	f7fb fe3f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004aae:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ab2:	3308      	adds	r3, #8
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	da00      	bge.n	8004aba <Send_Vital_Data_Message+0x4e6>
 8004ab8:	3307      	adds	r3, #7
 8004aba:	10db      	asrs	r3, r3, #3
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004ac8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004acc:	3308      	adds	r3, #8
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	b21b      	sxth	r3, r3
 8004ad2:	425a      	negs	r2, r3
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	f002 0207 	and.w	r2, r2, #7
 8004adc:	bf58      	it	pl
 8004ade:	4253      	negpl	r3, r2
 8004ae0:	b21b      	sxth	r3, r3
 8004ae2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004ae6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004aea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004aee:	18d1      	adds	r1, r2, r3
 8004af0:	79fa      	ldrb	r2, [r7, #7]
 8004af2:	489d      	ldr	r0, [pc, #628]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004af4:	4613      	mov	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4413      	add	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4403      	add	r3, r0
 8004afe:	3303      	adds	r3, #3
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b06:	460a      	mov	r2, r1
 8004b08:	2108      	movs	r1, #8
 8004b0a:	f7fb fe0f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b0e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b12:	3308      	adds	r3, #8
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	da00      	bge.n	8004b1a <Send_Vital_Data_Message+0x546>
 8004b18:	3307      	adds	r3, #7
 8004b1a:	10db      	asrs	r3, r3, #3
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b22:	4413      	add	r3, r2
 8004b24:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b2c:	3308      	adds	r3, #8
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	b21b      	sxth	r3, r3
 8004b32:	425a      	negs	r2, r3
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	f002 0207 	and.w	r2, r2, #7
 8004b3c:	bf58      	it	pl
 8004b3e:	4253      	negpl	r3, r2
 8004b40:	b21b      	sxth	r3, r3
 8004b42:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004b46:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b4a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b4e:	18d1      	adds	r1, r2, r3
 8004b50:	79fa      	ldrb	r2, [r7, #7]
 8004b52:	4885      	ldr	r0, [pc, #532]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	005b      	lsls	r3, r3, #1
 8004b5c:	4403      	add	r3, r0
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b64:	460a      	mov	r2, r1
 8004b66:	2108      	movs	r1, #8
 8004b68:	f7fb fde0 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b6c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b70:	3308      	adds	r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	da00      	bge.n	8004b78 <Send_Vital_Data_Message+0x5a4>
 8004b76:	3307      	adds	r3, #7
 8004b78:	10db      	asrs	r3, r3, #3
 8004b7a:	b29a      	uxth	r2, r3
 8004b7c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b80:	4413      	add	r3, r2
 8004b82:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b86:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b8a:	3308      	adds	r3, #8
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	b21b      	sxth	r3, r3
 8004b90:	425a      	negs	r2, r3
 8004b92:	f003 0307 	and.w	r3, r3, #7
 8004b96:	f002 0207 	and.w	r2, r2, #7
 8004b9a:	bf58      	it	pl
 8004b9c:	4253      	negpl	r3, r2
 8004b9e:	b21b      	sxth	r3, r3
 8004ba0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004ba4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ba8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bac:	18d1      	adds	r1, r2, r3
 8004bae:	79fa      	ldrb	r2, [r7, #7]
 8004bb0:	486d      	ldr	r0, [pc, #436]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004bb2:	4613      	mov	r3, r2
 8004bb4:	005b      	lsls	r3, r3, #1
 8004bb6:	4413      	add	r3, r2
 8004bb8:	005b      	lsls	r3, r3, #1
 8004bba:	4403      	add	r3, r0
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004bc4:	460a      	mov	r2, r1
 8004bc6:	2108      	movs	r1, #8
 8004bc8:	f7fb fdb0 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004bcc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	da00      	bge.n	8004bd8 <Send_Vital_Data_Message+0x604>
 8004bd6:	3307      	adds	r3, #7
 8004bd8:	10db      	asrs	r3, r3, #3
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004be0:	4413      	add	r3, r2
 8004be2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004be6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bea:	3308      	adds	r3, #8
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	b21b      	sxth	r3, r3
 8004bf0:	425a      	negs	r2, r3
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	f002 0207 	and.w	r2, r2, #7
 8004bfa:	bf58      	it	pl
 8004bfc:	4253      	negpl	r3, r2
 8004bfe:	b21b      	sxth	r3, r3
 8004c00:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004c04:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c0c:	18d1      	adds	r1, r2, r3
 8004c0e:	79fa      	ldrb	r2, [r7, #7]
 8004c10:	4855      	ldr	r0, [pc, #340]	; (8004d68 <Send_Vital_Data_Message+0x794>)
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	4403      	add	r3, r0
 8004c1c:	3302      	adds	r3, #2
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c24:	460a      	mov	r2, r1
 8004c26:	2108      	movs	r1, #8
 8004c28:	f7fb fd80 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c2c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c30:	3308      	adds	r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	da00      	bge.n	8004c38 <Send_Vital_Data_Message+0x664>
 8004c36:	3307      	adds	r3, #7
 8004c38:	10db      	asrs	r3, r3, #3
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c40:	4413      	add	r3, r2
 8004c42:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c46:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	b21b      	sxth	r3, r3
 8004c50:	425a      	negs	r2, r3
 8004c52:	f003 0307 	and.w	r3, r3, #7
 8004c56:	f002 0207 	and.w	r2, r2, #7
 8004c5a:	bf58      	it	pl
 8004c5c:	4253      	negpl	r3, r2
 8004c5e:	b21b      	sxth	r3, r3
 8004c60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004c64:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c6c:	441a      	add	r2, r3
 8004c6e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c72:	2301      	movs	r3, #1
 8004c74:	2108      	movs	r1, #8
 8004c76:	f7fb fd59 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c7a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c7e:	3308      	adds	r3, #8
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	da00      	bge.n	8004c86 <Send_Vital_Data_Message+0x6b2>
 8004c84:	3307      	adds	r3, #7
 8004c86:	10db      	asrs	r3, r3, #3
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c8e:	4413      	add	r3, r2
 8004c90:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c98:	3308      	adds	r3, #8
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	b21b      	sxth	r3, r3
 8004c9e:	425a      	negs	r2, r3
 8004ca0:	f003 0307 	and.w	r3, r3, #7
 8004ca4:	f002 0207 	and.w	r2, r2, #7
 8004ca8:	bf58      	it	pl
 8004caa:	4253      	negpl	r3, r2
 8004cac:	b21b      	sxth	r3, r3
 8004cae:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004cb2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cb6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cba:	441a      	add	r2, r3
 8004cbc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	2108      	movs	r1, #8
 8004cc4:	f7fb fd32 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004cc8:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ccc:	3308      	adds	r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	da00      	bge.n	8004cd4 <Send_Vital_Data_Message+0x700>
 8004cd2:	3307      	adds	r3, #7
 8004cd4:	10db      	asrs	r3, r3, #3
 8004cd6:	b29a      	uxth	r2, r3
 8004cd8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cdc:	4413      	add	r3, r2
 8004cde:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004ce2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ce6:	3308      	adds	r3, #8
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	b21b      	sxth	r3, r3
 8004cec:	425a      	negs	r2, r3
 8004cee:	f003 0307 	and.w	r3, r3, #7
 8004cf2:	f002 0207 	and.w	r2, r2, #7
 8004cf6:	bf58      	it	pl
 8004cf8:	4253      	negpl	r3, r2
 8004cfa:	b21b      	sxth	r3, r3
 8004cfc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004d00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d04:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d08:	441a      	add	r2, r3
 8004d0a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004d0e:	2301      	movs	r3, #1
 8004d10:	2108      	movs	r1, #8
 8004d12:	f7fb fd0b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004d16:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da00      	bge.n	8004d22 <Send_Vital_Data_Message+0x74e>
 8004d20:	3307      	adds	r3, #7
 8004d22:	10db      	asrs	r3, r3, #3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d30:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d34:	3308      	adds	r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	425a      	negs	r2, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	f002 0207 	and.w	r2, r2, #7
 8004d44:	bf58      	it	pl
 8004d46:	4253      	negpl	r3, r2
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004d4e:	4b07      	ldr	r3, [pc, #28]	; (8004d6c <Send_Vital_Data_Message+0x798>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	085b      	lsrs	r3, r3, #1
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02c      	beq.n	8004db6 <Send_Vital_Data_Message+0x7e2>
 8004d5c:	4b03      	ldr	r3, [pc, #12]	; (8004d6c <Send_Vital_Data_Message+0x798>)
 8004d5e:	791b      	ldrb	r3, [r3, #4]
 8004d60:	79fa      	ldrb	r2, [r7, #7]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d127      	bne.n	8004db6 <Send_Vital_Data_Message+0x7e2>
 8004d66:	e003      	b.n	8004d70 <Send_Vital_Data_Message+0x79c>
 8004d68:	200028b8 	.word	0x200028b8
 8004d6c:	2000308c 	.word	0x2000308c
	{
		uint32_t Rand_Number = 0;
 8004d70:	2300      	movs	r3, #0
 8004d72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004d76:	484e      	ldr	r0, [pc, #312]	; (8004eb0 <Send_Vital_Data_Message+0x8dc>)
 8004d78:	f018 fb18 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8004d7c:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004d80:	484c      	ldr	r0, [pc, #304]	; (8004eb4 <Send_Vital_Data_Message+0x8e0>)
 8004d82:	f020 ff07 	bl	8025b94 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004d86:	79fb      	ldrb	r3, [r7, #7]
 8004d88:	4a4b      	ldr	r2, [pc, #300]	; (8004eb8 <Send_Vital_Data_Message+0x8e4>)
 8004d8a:	011b      	lsls	r3, r3, #4
 8004d8c:	4413      	add	r3, r2
 8004d8e:	330c      	adds	r3, #12
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4849      	ldr	r0, [pc, #292]	; (8004ebc <Send_Vital_Data_Message+0x8e8>)
 8004d96:	f020 fe61 	bl	8025a5c <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004d9a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004d9e:	4848      	ldr	r0, [pc, #288]	; (8004ec0 <Send_Vital_Data_Message+0x8ec>)
 8004da0:	f020 fe5c 	bl	8025a5c <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004da4:	f107 020c 	add.w	r2, r7, #12
 8004da8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dac:	2118      	movs	r1, #24
 8004dae:	2000      	movs	r0, #0
 8004db0:	f7fb fcbc 	bl	800072c <InsertBits>
	{
 8004db4:	e00b      	b.n	8004dce <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004db6:	79fb      	ldrb	r3, [r7, #7]
 8004db8:	4a3f      	ldr	r2, [pc, #252]	; (8004eb8 <Send_Vital_Data_Message+0x8e4>)
 8004dba:	011b      	lsls	r3, r3, #4
 8004dbc:	4413      	add	r3, r2
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f107 020c 	add.w	r2, r7, #12
 8004dc6:	2118      	movs	r1, #24
 8004dc8:	2000      	movs	r0, #0
 8004dca:	f7fb fcaf 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004dd4:	e011      	b.n	8004dfa <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004dd6:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004dda:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dde:	3303      	adds	r3, #3
 8004de0:	3290      	adds	r2, #144	; 0x90
 8004de2:	443a      	add	r2, r7
 8004de4:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004de8:	3390      	adds	r3, #144	; 0x90
 8004dea:	443b      	add	r3, r7
 8004dec:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004df0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004df4:	3301      	adds	r3, #1
 8004df6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004dfa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d8e6      	bhi.n	8004dd6 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004e08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e10:	18d4      	adds	r4, r2, r3
 8004e12:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	3303      	adds	r3, #3
 8004e1a:	b29a      	uxth	r2, r3
 8004e1c:	f107 030c 	add.w	r3, r7, #12
 8004e20:	4611      	mov	r1, r2
 8004e22:	4618      	mov	r0, r3
 8004e24:	f010 f9d6 	bl	80151d4 <CalculateDirectReverseCrc>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004e2e:	4622      	mov	r2, r4
 8004e30:	2120      	movs	r1, #32
 8004e32:	f7fb fc7b 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004e36:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004e3a:	3320      	adds	r3, #32
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	da00      	bge.n	8004e42 <Send_Vital_Data_Message+0x86e>
 8004e40:	3307      	adds	r3, #7
 8004e42:	10db      	asrs	r3, r3, #3
 8004e44:	b29a      	uxth	r2, r3
 8004e46:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004e50:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e54:	3320      	adds	r3, #32
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	b21b      	sxth	r3, r3
 8004e5a:	425a      	negs	r2, r3
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	f002 0207 	and.w	r2, r2, #7
 8004e64:	bf58      	it	pl
 8004e66:	4253      	negpl	r3, r2
 8004e68:	b21b      	sxth	r3, r3
 8004e6a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004e6e:	4b15      	ldr	r3, [pc, #84]	; (8004ec4 <Send_Vital_Data_Message+0x8f0>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	0a5b      	lsrs	r3, r3, #9
 8004e74:	f003 0301 	and.w	r3, r3, #1
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d00b      	beq.n	8004e94 <Send_Vital_Data_Message+0x8c0>
 8004e7c:	4b11      	ldr	r3, [pc, #68]	; (8004ec4 <Send_Vital_Data_Message+0x8f0>)
 8004e7e:	791b      	ldrb	r3, [r3, #4]
 8004e80:	79fa      	ldrb	r2, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d106      	bne.n	8004e94 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004e86:	4810      	ldr	r0, [pc, #64]	; (8004ec8 <Send_Vital_Data_Message+0x8f4>)
 8004e88:	f020 fe84 	bl	8025b94 <puts>
		printf("Not Sending Reply");
 8004e8c:	480f      	ldr	r0, [pc, #60]	; (8004ecc <Send_Vital_Data_Message+0x8f8>)
 8004e8e:	f020 fde5 	bl	8025a5c <iprintf>
 8004e92:	e009      	b.n	8004ea8 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004e94:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e98:	b2d9      	uxtb	r1, r3
 8004e9a:	79fa      	ldrb	r2, [r7, #7]
 8004e9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f003 f8ab 	bl	8007ffc <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	3794      	adds	r7, #148	; 0x94
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd90      	pop	{r4, r7, pc}
 8004eb0:	2000bbac 	.word	0x2000bbac
 8004eb4:	08027ce8 	.word	0x08027ce8
 8004eb8:	200028f4 	.word	0x200028f4
 8004ebc:	08027d0c 	.word	0x08027d0c
 8004ec0:	08027d30 	.word	0x08027d30
 8004ec4:	2000308c 	.word	0x2000308c
 8004ec8:	08027a44 	.word	0x08027a44
 8004ecc:	08027a5c 	.word	0x08027a5c

08004ed0 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b0c0      	sub	sp, #256	; 0x100
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
 8004ed8:	4608      	mov	r0, r1
 8004eda:	4611      	mov	r1, r2
 8004edc:	461a      	mov	r2, r3
 8004ede:	4603      	mov	r3, r0
 8004ee0:	70fb      	strb	r3, [r7, #3]
 8004ee2:	460b      	mov	r3, r1
 8004ee4:	70bb      	strb	r3, [r7, #2]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004efc:	f013 fe98 	bl	8018c30 <HAL_GetTick>
 8004f00:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004f16:	2300      	movs	r3, #0
 8004f18:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f1e:	227c      	movs	r2, #124	; 0x7c
 8004f20:	2100      	movs	r1, #0
 8004f22:	4618      	mov	r0, r3
 8004f24:	f020 fcb2 	bl	802588c <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004f34:	78fb      	ldrb	r3, [r7, #3]
 8004f36:	b299      	uxth	r1, r3
 8004f38:	78ba      	ldrb	r2, [r7, #2]
 8004f3a:	48c3      	ldr	r0, [pc, #780]	; (8005248 <Vital_Msg_extr_from_CAN+0x378>)
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	015b      	lsls	r3, r3, #5
 8004f40:	4413      	add	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4403      	add	r3, r0
 8004f46:	3340      	adds	r3, #64	; 0x40
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	4299      	cmp	r1, r3
 8004f4c:	d11a      	bne.n	8004f84 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004f4e:	78ba      	ldrb	r2, [r7, #2]
 8004f50:	4613      	mov	r3, r2
 8004f52:	015b      	lsls	r3, r3, #5
 8004f54:	4413      	add	r3, r2
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	4abb      	ldr	r2, [pc, #748]	; (8005248 <Vital_Msg_extr_from_CAN+0x378>)
 8004f5a:	4413      	add	r3, r2
 8004f5c:	78fa      	ldrb	r2, [r7, #3]
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f020 fc5b 	bl	802581c <memcmp>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004f6c:	78bb      	ldrb	r3, [r7, #2]
 8004f6e:	4ab7      	ldr	r2, [pc, #732]	; (800524c <Vital_Msg_extr_from_CAN+0x37c>)
 8004f70:	3366      	adds	r3, #102	; 0x66
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	4619      	mov	r1, r3
 8004f7a:	48b5      	ldr	r0, [pc, #724]	; (8005250 <Vital_Msg_extr_from_CAN+0x380>)
 8004f7c:	f020 fd6e 	bl	8025a5c <iprintf>
			return;
 8004f80:	f000 bd98 	b.w	8005ab4 <Vital_Msg_extr_from_CAN+0xbe4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	3b05      	subs	r3, #5
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	441a      	add	r2, r3
 8004f8c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f90:	2120      	movs	r1, #32
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fb fb3e 	bl	8000614 <ExtractBits>
 8004f98:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004f9c:	4bad      	ldr	r3, [pc, #692]	; (8005254 <Vital_Msg_extr_from_CAN+0x384>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d034      	beq.n	8005012 <Vital_Msg_extr_from_CAN+0x142>
 8004fa8:	4baa      	ldr	r3, [pc, #680]	; (8005254 <Vital_Msg_extr_from_CAN+0x384>)
 8004faa:	791b      	ldrb	r3, [r3, #4]
 8004fac:	78ba      	ldrb	r2, [r7, #2]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d12f      	bne.n	8005012 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004fb2:	2316      	movs	r3, #22
 8004fb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004fb8:	48a7      	ldr	r0, [pc, #668]	; (8005258 <Vital_Msg_extr_from_CAN+0x388>)
 8004fba:	f018 f9f7 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	4ba6      	ldr	r3, [pc, #664]	; (800525c <Vital_Msg_extr_from_CAN+0x38c>)
 8004fc2:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc6:	0dd9      	lsrs	r1, r3, #23
 8004fc8:	460b      	mov	r3, r1
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	1a5b      	subs	r3, r3, r1
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004fd6:	48a2      	ldr	r0, [pc, #648]	; (8005260 <Vital_Msg_extr_from_CAN+0x390>)
 8004fd8:	f020 fddc 	bl	8025b94 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004fdc:	78ba      	ldrb	r2, [r7, #2]
 8004fde:	49a1      	ldr	r1, [pc, #644]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	005b      	lsls	r3, r3, #1
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	440b      	add	r3, r1
 8004fea:	3308      	adds	r3, #8
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4619      	mov	r1, r3
 8004ff0:	489d      	ldr	r0, [pc, #628]	; (8005268 <Vital_Msg_extr_from_CAN+0x398>)
 8004ff2:	f020 fd33 	bl	8025a5c <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004ff6:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004ffa:	489c      	ldr	r0, [pc, #624]	; (800526c <Vital_Msg_extr_from_CAN+0x39c>)
 8004ffc:	f020 fd2e 	bl	8025a5c <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8005000:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005008:	2118      	movs	r1, #24
 800500a:	2000      	movs	r0, #0
 800500c:	f7fb fb8e 	bl	800072c <InsertBits>
	{
 8005010:	e00e      	b.n	8005030 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005012:	78ba      	ldrb	r2, [r7, #2]
 8005014:	4993      	ldr	r1, [pc, #588]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 8005016:	4613      	mov	r3, r2
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	4413      	add	r3, r2
 800501c:	00db      	lsls	r3, r3, #3
 800501e:	440b      	add	r3, r1
 8005020:	3308      	adds	r3, #8
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005028:	2118      	movs	r1, #24
 800502a:	2000      	movs	r0, #0
 800502c:	f7fb fb7e 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005030:	2300      	movs	r3, #0
 8005032:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005036:	e011      	b.n	800505c <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8005038:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800503c:	687a      	ldr	r2, [r7, #4]
 800503e:	441a      	add	r2, r3
 8005040:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005044:	3303      	adds	r3, #3
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800504c:	443b      	add	r3, r7
 800504e:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005052:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005056:	3301      	adds	r3, #1
 8005058:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800505c:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8005060:	78fb      	ldrb	r3, [r7, #3]
 8005062:	3b05      	subs	r3, #5
 8005064:	429a      	cmp	r2, r3
 8005066:	dbe7      	blt.n	8005038 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005068:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800506c:	b29b      	uxth	r3, r3
 800506e:	3303      	adds	r3, #3
 8005070:	b29a      	uxth	r2, r3
 8005072:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005076:	4611      	mov	r1, r2
 8005078:	4618      	mov	r0, r3
 800507a:	f010 f8ab 	bl	80151d4 <CalculateDirectReverseCrc>
 800507e:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 8005082:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005086:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800508a:	429a      	cmp	r2, r3
 800508c:	f000 8104 	beq.w	8005298 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3305      	adds	r3, #5
 8005094:	461a      	mov	r2, r3
 8005096:	2108      	movs	r1, #8
 8005098:	2000      	movs	r0, #0
 800509a:	f7fb fabb 	bl	8000614 <ExtractBits>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 80ba 	bne.w	800521a <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80050a6:	4872      	ldr	r0, [pc, #456]	; (8005270 <Vital_Msg_extr_from_CAN+0x3a0>)
 80050a8:	f020 fd74 	bl	8025b94 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80050ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050b0:	2280      	movs	r2, #128	; 0x80
 80050b2:	2100      	movs	r1, #0
 80050b4:	4618      	mov	r0, r3
 80050b6:	f020 fbe9 	bl	802588c <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80050ba:	78ba      	ldrb	r2, [r7, #2]
 80050bc:	4969      	ldr	r1, [pc, #420]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 80050be:	4613      	mov	r3, r2
 80050c0:	005b      	lsls	r3, r3, #1
 80050c2:	4413      	add	r3, r2
 80050c4:	00db      	lsls	r3, r3, #3
 80050c6:	440b      	add	r3, r1
 80050c8:	3308      	adds	r3, #8
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	3301      	adds	r3, #1
 80050ce:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80050d2:	2118      	movs	r1, #24
 80050d4:	2000      	movs	r0, #0
 80050d6:	f7fb fb29 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050da:	2300      	movs	r3, #0
 80050dc:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80050e0:	e011      	b.n	8005106 <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80050e2:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	441a      	add	r2, r3
 80050ea:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80050ee:	3303      	adds	r3, #3
 80050f0:	7812      	ldrb	r2, [r2, #0]
 80050f2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80050f6:	443b      	add	r3, r7
 80050f8:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050fc:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005100:	3301      	adds	r3, #1
 8005102:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005106:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	3b05      	subs	r3, #5
 800510e:	429a      	cmp	r2, r3
 8005110:	dbe7      	blt.n	80050e2 <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005112:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005116:	b29b      	uxth	r3, r3
 8005118:	3303      	adds	r3, #3
 800511a:	b29a      	uxth	r2, r3
 800511c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005120:	4611      	mov	r1, r2
 8005122:	4618      	mov	r0, r3
 8005124:	f010 f856 	bl	80151d4 <CalculateDirectReverseCrc>
 8005128:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	3b05      	subs	r3, #5
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	441a      	add	r2, r3
 8005134:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005138:	2120      	movs	r1, #32
 800513a:	4618      	mov	r0, r3
 800513c:	f7fb fa6a 	bl	8000614 <ExtractBits>
 8005140:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8005144:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8005148:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800514c:	429a      	cmp	r2, r3
 800514e:	d14e      	bne.n	80051ee <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8005150:	4848      	ldr	r0, [pc, #288]	; (8005274 <Vital_Msg_extr_from_CAN+0x3a4>)
 8005152:	f020 fd1f 	bl	8025b94 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8005156:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800515a:	4847      	ldr	r0, [pc, #284]	; (8005278 <Vital_Msg_extr_from_CAN+0x3a8>)
 800515c:	f020 fc7e 	bl	8025a5c <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005160:	78ba      	ldrb	r2, [r7, #2]
 8005162:	4940      	ldr	r1, [pc, #256]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 8005164:	4613      	mov	r3, r2
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4413      	add	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	440b      	add	r3, r1
 800516e:	3308      	adds	r3, #8
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4619      	mov	r1, r3
 8005174:	4841      	ldr	r0, [pc, #260]	; (800527c <Vital_Msg_extr_from_CAN+0x3ac>)
 8005176:	f020 fc71 	bl	8025a5c <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 800517a:	78ba      	ldrb	r2, [r7, #2]
 800517c:	4939      	ldr	r1, [pc, #228]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 800517e:	4613      	mov	r3, r2
 8005180:	005b      	lsls	r3, r3, #1
 8005182:	4413      	add	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	440b      	add	r3, r1
 8005188:	3308      	adds	r3, #8
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	1c59      	adds	r1, r3, #1
 800518e:	4835      	ldr	r0, [pc, #212]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 8005190:	4613      	mov	r3, r2
 8005192:	005b      	lsls	r3, r3, #1
 8005194:	4413      	add	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4403      	add	r3, r0
 800519a:	3308      	adds	r3, #8
 800519c:	6019      	str	r1, [r3, #0]
 800519e:	78b9      	ldrb	r1, [r7, #2]
 80051a0:	4830      	ldr	r0, [pc, #192]	; (8005264 <Vital_Msg_extr_from_CAN+0x394>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4403      	add	r3, r0
 80051ac:	3308      	adds	r3, #8
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	4833      	ldr	r0, [pc, #204]	; (8005280 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051b2:	010b      	lsls	r3, r1, #4
 80051b4:	4403      	add	r3, r0
 80051b6:	3308      	adds	r3, #8
 80051b8:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80051ba:	78bb      	ldrb	r3, [r7, #2]
 80051bc:	4a30      	ldr	r2, [pc, #192]	; (8005280 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	4413      	add	r3, r2
 80051c2:	3308      	adds	r3, #8
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4619      	mov	r1, r3
 80051c8:	482e      	ldr	r0, [pc, #184]	; (8005284 <Vital_Msg_extr_from_CAN+0x3b4>)
 80051ca:	f020 fc47 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80051ce:	78bb      	ldrb	r3, [r7, #2]
 80051d0:	78ba      	ldrb	r2, [r7, #2]
 80051d2:	492b      	ldr	r1, [pc, #172]	; (8005280 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	440b      	add	r3, r1
 80051d8:	3308      	adds	r3, #8
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	482a      	ldr	r0, [pc, #168]	; (8005288 <Vital_Msg_extr_from_CAN+0x3b8>)
 80051de:	4613      	mov	r3, r2
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	4413      	add	r3, r2
 80051e4:	00db      	lsls	r3, r3, #3
 80051e6:	4403      	add	r3, r0
 80051e8:	3308      	adds	r3, #8
 80051ea:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 80051ec:	e055      	b.n	800529a <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80051ee:	78bb      	ldrb	r3, [r7, #2]
 80051f0:	4a16      	ldr	r2, [pc, #88]	; (800524c <Vital_Msg_extr_from_CAN+0x37c>)
 80051f2:	3366      	adds	r3, #102	; 0x66
 80051f4:	009b      	lsls	r3, r3, #2
 80051f6:	4413      	add	r3, r2
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	4619      	mov	r1, r3
 80051fc:	4823      	ldr	r0, [pc, #140]	; (800528c <Vital_Msg_extr_from_CAN+0x3bc>)
 80051fe:	f020 fc2d 	bl	8025a5c <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005202:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005206:	4822      	ldr	r0, [pc, #136]	; (8005290 <Vital_Msg_extr_from_CAN+0x3c0>)
 8005208:	f020 fc28 	bl	8025a5c <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 800520c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005210:	4820      	ldr	r0, [pc, #128]	; (8005294 <Vital_Msg_extr_from_CAN+0x3c4>)
 8005212:	f020 fc23 	bl	8025a5c <iprintf>
				return;
 8005216:	f000 bc4d 	b.w	8005ab4 <Vital_Msg_extr_from_CAN+0xbe4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800521a:	78bb      	ldrb	r3, [r7, #2]
 800521c:	4a0b      	ldr	r2, [pc, #44]	; (800524c <Vital_Msg_extr_from_CAN+0x37c>)
 800521e:	3366      	adds	r3, #102	; 0x66
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4619      	mov	r1, r3
 8005228:	4818      	ldr	r0, [pc, #96]	; (800528c <Vital_Msg_extr_from_CAN+0x3bc>)
 800522a:	f020 fc17 	bl	8025a5c <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 800522e:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005232:	4817      	ldr	r0, [pc, #92]	; (8005290 <Vital_Msg_extr_from_CAN+0x3c0>)
 8005234:	f020 fc12 	bl	8025a5c <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005238:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800523c:	4815      	ldr	r0, [pc, #84]	; (8005294 <Vital_Msg_extr_from_CAN+0x3c4>)
 800523e:	f020 fc0d 	bl	8025a5c <iprintf>
			return;
 8005242:	f000 bc37 	b.w	8005ab4 <Vital_Msg_extr_from_CAN+0xbe4>
 8005246:	bf00      	nop
 8005248:	20003094 	.word	0x20003094
 800524c:	20000504 	.word	0x20000504
 8005250:	08027d54 	.word	0x08027d54
 8005254:	2000308c 	.word	0x2000308c
 8005258:	2000bbac 	.word	0x2000bbac
 800525c:	80008001 	.word	0x80008001
 8005260:	08027a70 	.word	0x08027a70
 8005264:	20002e94 	.word	0x20002e94
 8005268:	08027a90 	.word	0x08027a90
 800526c:	08027ab8 	.word	0x08027ab8
 8005270:	08027ae0 	.word	0x08027ae0
 8005274:	08027d98 	.word	0x08027d98
 8005278:	08027b14 	.word	0x08027b14
 800527c:	08027dbc 	.word	0x08027dbc
 8005280:	200028f4 	.word	0x200028f4
 8005284:	08027b54 	.word	0x08027b54
 8005288:	20002da4 	.word	0x20002da4
 800528c:	08027dd8 	.word	0x08027dd8
 8005290:	080277b0 	.word	0x080277b0
 8005294:	080277c0 	.word	0x080277c0
		}
	}
	ROLLOVER_VITAL_CAN:
 8005298:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 800529a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800529e:	3308      	adds	r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	da00      	bge.n	80052a6 <Vital_Msg_extr_from_CAN+0x3d6>
 80052a4:	3307      	adds	r3, #7
 80052a6:	10db      	asrs	r3, r3, #3
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052ae:	4413      	add	r3, r2
 80052b0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80052b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052b8:	3308      	adds	r3, #8
 80052ba:	b29b      	uxth	r3, r3
 80052bc:	b21b      	sxth	r3, r3
 80052be:	425a      	negs	r2, r3
 80052c0:	f003 0307 	and.w	r3, r3, #7
 80052c4:	f002 0207 	and.w	r2, r2, #7
 80052c8:	bf58      	it	pl
 80052ca:	4253      	negpl	r3, r2
 80052cc:	b21b      	sxth	r3, r3
 80052ce:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80052d2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	441a      	add	r2, r3
 80052da:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052de:	2110      	movs	r1, #16
 80052e0:	4618      	mov	r0, r3
 80052e2:	f7fb f997 	bl	8000614 <ExtractBits>
 80052e6:	4603      	mov	r3, r0
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 80052ee:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80052f2:	4619      	mov	r1, r3
 80052f4:	48c6      	ldr	r0, [pc, #792]	; (8005610 <Vital_Msg_extr_from_CAN+0x740>)
 80052f6:	f020 fbb1 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 80052fa:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80052fe:	3310      	adds	r3, #16
 8005300:	2b00      	cmp	r3, #0
 8005302:	da00      	bge.n	8005306 <Vital_Msg_extr_from_CAN+0x436>
 8005304:	3307      	adds	r3, #7
 8005306:	10db      	asrs	r3, r3, #3
 8005308:	b29a      	uxth	r2, r3
 800530a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800530e:	4413      	add	r3, r2
 8005310:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005314:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005318:	3310      	adds	r3, #16
 800531a:	b29b      	uxth	r3, r3
 800531c:	b21b      	sxth	r3, r3
 800531e:	425a      	negs	r2, r3
 8005320:	f003 0307 	and.w	r3, r3, #7
 8005324:	f002 0207 	and.w	r2, r2, #7
 8005328:	bf58      	it	pl
 800532a:	4253      	negpl	r3, r2
 800532c:	b21b      	sxth	r3, r3
 800532e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005332:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	441a      	add	r2, r3
 800533a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800533e:	2110      	movs	r1, #16
 8005340:	4618      	mov	r0, r3
 8005342:	f7fb f967 	bl	8000614 <ExtractBits>
 8005346:	4603      	mov	r3, r0
 8005348:	b29b      	uxth	r3, r3
 800534a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 800534e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005352:	4619      	mov	r1, r3
 8005354:	48af      	ldr	r0, [pc, #700]	; (8005614 <Vital_Msg_extr_from_CAN+0x744>)
 8005356:	f020 fb81 	bl	8025a5c <iprintf>
	BITSTUFFINC(16);
 800535a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800535e:	3310      	adds	r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	da00      	bge.n	8005366 <Vital_Msg_extr_from_CAN+0x496>
 8005364:	3307      	adds	r3, #7
 8005366:	10db      	asrs	r3, r3, #3
 8005368:	b29a      	uxth	r2, r3
 800536a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800536e:	4413      	add	r3, r2
 8005370:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005374:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005378:	3310      	adds	r3, #16
 800537a:	b29b      	uxth	r3, r3
 800537c:	b21b      	sxth	r3, r3
 800537e:	425a      	negs	r2, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	f002 0207 	and.w	r2, r2, #7
 8005388:	bf58      	it	pl
 800538a:	4253      	negpl	r3, r2
 800538c:	b21b      	sxth	r3, r3
 800538e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005392:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	441a      	add	r2, r3
 800539a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800539e:	2108      	movs	r1, #8
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fb f937 	bl	8000614 <ExtractBits>
 80053a6:	4603      	mov	r3, r0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 80053ae:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80053b2:	3308      	adds	r3, #8
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	da00      	bge.n	80053ba <Vital_Msg_extr_from_CAN+0x4ea>
 80053b8:	3307      	adds	r3, #7
 80053ba:	10db      	asrs	r3, r3, #3
 80053bc:	b29a      	uxth	r2, r3
 80053be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053c2:	4413      	add	r3, r2
 80053c4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053c8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053cc:	3308      	adds	r3, #8
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	425a      	negs	r2, r3
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	f002 0207 	and.w	r2, r2, #7
 80053dc:	bf58      	it	pl
 80053de:	4253      	negpl	r3, r2
 80053e0:	b21b      	sxth	r3, r3
 80053e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80053e6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053ea:	687a      	ldr	r2, [r7, #4]
 80053ec:	441a      	add	r2, r3
 80053ee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053f2:	2108      	movs	r1, #8
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fb f90d 	bl	8000614 <ExtractBits>
 80053fa:	4603      	mov	r3, r0
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8005402:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005406:	3308      	adds	r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	da00      	bge.n	800540e <Vital_Msg_extr_from_CAN+0x53e>
 800540c:	3307      	adds	r3, #7
 800540e:	10db      	asrs	r3, r3, #3
 8005410:	b29a      	uxth	r2, r3
 8005412:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005416:	4413      	add	r3, r2
 8005418:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800541c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005420:	3308      	adds	r3, #8
 8005422:	b29b      	uxth	r3, r3
 8005424:	b21b      	sxth	r3, r3
 8005426:	425a      	negs	r2, r3
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	f002 0207 	and.w	r2, r2, #7
 8005430:	bf58      	it	pl
 8005432:	4253      	negpl	r3, r2
 8005434:	b21b      	sxth	r3, r3
 8005436:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800543a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	441a      	add	r2, r3
 8005442:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005446:	2108      	movs	r1, #8
 8005448:	4618      	mov	r0, r3
 800544a:	f7fb f8e3 	bl	8000614 <ExtractBits>
 800544e:	4603      	mov	r3, r0
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8005456:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800545a:	3308      	adds	r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	da00      	bge.n	8005462 <Vital_Msg_extr_from_CAN+0x592>
 8005460:	3307      	adds	r3, #7
 8005462:	10db      	asrs	r3, r3, #3
 8005464:	b29a      	uxth	r2, r3
 8005466:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800546a:	4413      	add	r3, r2
 800546c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005470:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005474:	3308      	adds	r3, #8
 8005476:	b29b      	uxth	r3, r3
 8005478:	b21b      	sxth	r3, r3
 800547a:	425a      	negs	r2, r3
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	f002 0207 	and.w	r2, r2, #7
 8005484:	bf58      	it	pl
 8005486:	4253      	negpl	r3, r2
 8005488:	b21b      	sxth	r3, r3
 800548a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800548e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	441a      	add	r2, r3
 8005496:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800549a:	2110      	movs	r1, #16
 800549c:	4618      	mov	r0, r3
 800549e:	f7fb f8b9 	bl	8000614 <ExtractBits>
 80054a2:	4603      	mov	r3, r0
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 80054a8:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80054ac:	3310      	adds	r3, #16
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	da00      	bge.n	80054b4 <Vital_Msg_extr_from_CAN+0x5e4>
 80054b2:	3307      	adds	r3, #7
 80054b4:	10db      	asrs	r3, r3, #3
 80054b6:	b29a      	uxth	r2, r3
 80054b8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054bc:	4413      	add	r3, r2
 80054be:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80054c2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054c6:	3310      	adds	r3, #16
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	b21b      	sxth	r3, r3
 80054cc:	425a      	negs	r2, r3
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	f002 0207 	and.w	r2, r2, #7
 80054d6:	bf58      	it	pl
 80054d8:	4253      	negpl	r3, r2
 80054da:	b21b      	sxth	r3, r3
 80054dc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 80054e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80054e2:	f003 0320 	and.w	r3, r3, #32
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	f000 80fe 	beq.w	80056e8 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80054ec:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	441a      	add	r2, r3
 80054f4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054f8:	2108      	movs	r1, #8
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fb f88a 	bl	8000614 <ExtractBits>
 8005500:	4603      	mov	r3, r0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8005508:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800550c:	3308      	adds	r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	da00      	bge.n	8005514 <Vital_Msg_extr_from_CAN+0x644>
 8005512:	3307      	adds	r3, #7
 8005514:	10db      	asrs	r3, r3, #3
 8005516:	b29a      	uxth	r2, r3
 8005518:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800551c:	4413      	add	r3, r2
 800551e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005522:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005526:	3308      	adds	r3, #8
 8005528:	b29b      	uxth	r3, r3
 800552a:	b21b      	sxth	r3, r3
 800552c:	425a      	negs	r2, r3
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	f002 0207 	and.w	r2, r2, #7
 8005536:	bf58      	it	pl
 8005538:	4253      	negpl	r3, r2
 800553a:	b21b      	sxth	r3, r3
 800553c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005540:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	441a      	add	r2, r3
 8005548:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800554c:	2108      	movs	r1, #8
 800554e:	4618      	mov	r0, r3
 8005550:	f7fb f860 	bl	8000614 <ExtractBits>
 8005554:	4603      	mov	r3, r0
 8005556:	b2db      	uxtb	r3, r3
 8005558:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 800555c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005560:	3308      	adds	r3, #8
 8005562:	2b00      	cmp	r3, #0
 8005564:	da00      	bge.n	8005568 <Vital_Msg_extr_from_CAN+0x698>
 8005566:	3307      	adds	r3, #7
 8005568:	10db      	asrs	r3, r3, #3
 800556a:	b29a      	uxth	r2, r3
 800556c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005570:	4413      	add	r3, r2
 8005572:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005576:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800557a:	3308      	adds	r3, #8
 800557c:	b29b      	uxth	r3, r3
 800557e:	b21b      	sxth	r3, r3
 8005580:	425a      	negs	r2, r3
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	f002 0207 	and.w	r2, r2, #7
 800558a:	bf58      	it	pl
 800558c:	4253      	negpl	r3, r2
 800558e:	b21b      	sxth	r3, r3
 8005590:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005594:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	441a      	add	r2, r3
 800559c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055a0:	2108      	movs	r1, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f7fb f836 	bl	8000614 <ExtractBits>
 80055a8:	4603      	mov	r3, r0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 80055ae:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80055b2:	3308      	adds	r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da00      	bge.n	80055ba <Vital_Msg_extr_from_CAN+0x6ea>
 80055b8:	3307      	adds	r3, #7
 80055ba:	10db      	asrs	r3, r3, #3
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055c2:	4413      	add	r3, r2
 80055c4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80055c8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055cc:	3308      	adds	r3, #8
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	b21b      	sxth	r3, r3
 80055d2:	425a      	negs	r2, r3
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	f002 0207 	and.w	r2, r2, #7
 80055dc:	bf58      	it	pl
 80055de:	4253      	negpl	r3, r2
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80055e6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	441a      	add	r2, r3
 80055ee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055f2:	2108      	movs	r1, #8
 80055f4:	4618      	mov	r0, r3
 80055f6:	f7fb f80d 	bl	8000614 <ExtractBits>
 80055fa:	4603      	mov	r3, r0
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8005600:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005604:	3308      	adds	r3, #8
 8005606:	2b00      	cmp	r3, #0
 8005608:	da06      	bge.n	8005618 <Vital_Msg_extr_from_CAN+0x748>
 800560a:	3307      	adds	r3, #7
 800560c:	e004      	b.n	8005618 <Vital_Msg_extr_from_CAN+0x748>
 800560e:	bf00      	nop
 8005610:	080278a0 	.word	0x080278a0
 8005614:	080278a8 	.word	0x080278a8
 8005618:	10db      	asrs	r3, r3, #3
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005620:	4413      	add	r3, r2
 8005622:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005626:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800562a:	3308      	adds	r3, #8
 800562c:	b29b      	uxth	r3, r3
 800562e:	b21b      	sxth	r3, r3
 8005630:	425a      	negs	r2, r3
 8005632:	f003 0307 	and.w	r3, r3, #7
 8005636:	f002 0207 	and.w	r2, r2, #7
 800563a:	bf58      	it	pl
 800563c:	4253      	negpl	r3, r2
 800563e:	b21b      	sxth	r3, r3
 8005640:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005644:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005648:	687a      	ldr	r2, [r7, #4]
 800564a:	441a      	add	r2, r3
 800564c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005650:	2108      	movs	r1, #8
 8005652:	4618      	mov	r0, r3
 8005654:	f7fa ffde 	bl	8000614 <ExtractBits>
 8005658:	4603      	mov	r3, r0
 800565a:	b2db      	uxtb	r3, r3
 800565c:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 800565e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005662:	3308      	adds	r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	da00      	bge.n	800566a <Vital_Msg_extr_from_CAN+0x79a>
 8005668:	3307      	adds	r3, #7
 800566a:	10db      	asrs	r3, r3, #3
 800566c:	b29a      	uxth	r2, r3
 800566e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005672:	4413      	add	r3, r2
 8005674:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005678:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800567c:	3308      	adds	r3, #8
 800567e:	b29b      	uxth	r3, r3
 8005680:	b21b      	sxth	r3, r3
 8005682:	425a      	negs	r2, r3
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	f002 0207 	and.w	r2, r2, #7
 800568c:	bf58      	it	pl
 800568e:	4253      	negpl	r3, r2
 8005690:	b21b      	sxth	r3, r3
 8005692:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005696:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	441a      	add	r2, r3
 800569e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056a2:	2108      	movs	r1, #8
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fa ffb5 	bl	8000614 <ExtractBits>
 80056aa:	4603      	mov	r3, r0
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 80056b0:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80056b4:	3308      	adds	r3, #8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	da00      	bge.n	80056bc <Vital_Msg_extr_from_CAN+0x7ec>
 80056ba:	3307      	adds	r3, #7
 80056bc:	10db      	asrs	r3, r3, #3
 80056be:	b29a      	uxth	r2, r3
 80056c0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056c4:	4413      	add	r3, r2
 80056c6:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80056ca:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056ce:	3308      	adds	r3, #8
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	b21b      	sxth	r3, r3
 80056d4:	425a      	negs	r2, r3
 80056d6:	f003 0307 	and.w	r3, r3, #7
 80056da:	f002 0207 	and.w	r2, r2, #7
 80056de:	bf58      	it	pl
 80056e0:	4253      	negpl	r3, r2
 80056e2:	b21b      	sxth	r3, r3
 80056e4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 80056e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d002      	beq.n	80056f8 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 80056f2:	2301      	movs	r3, #1
 80056f4:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056f8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	441a      	add	r2, r3
 8005700:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005704:	2108      	movs	r1, #8
 8005706:	4618      	mov	r0, r3
 8005708:	f7fa ff84 	bl	8000614 <ExtractBits>
 800570c:	4603      	mov	r3, r0
 800570e:	b2db      	uxtb	r3, r3
 8005710:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8005714:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005718:	3308      	adds	r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	da00      	bge.n	8005720 <Vital_Msg_extr_from_CAN+0x850>
 800571e:	3307      	adds	r3, #7
 8005720:	10db      	asrs	r3, r3, #3
 8005722:	b29a      	uxth	r2, r3
 8005724:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005728:	4413      	add	r3, r2
 800572a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800572e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005732:	3308      	adds	r3, #8
 8005734:	b29b      	uxth	r3, r3
 8005736:	b21b      	sxth	r3, r3
 8005738:	425a      	negs	r2, r3
 800573a:	f003 0307 	and.w	r3, r3, #7
 800573e:	f002 0207 	and.w	r2, r2, #7
 8005742:	bf58      	it	pl
 8005744:	4253      	negpl	r3, r2
 8005746:	b21b      	sxth	r3, r3
 8005748:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 800574c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005750:	4619      	mov	r1, r3
 8005752:	484b      	ldr	r0, [pc, #300]	; (8005880 <Vital_Msg_extr_from_CAN+0x9b0>)
 8005754:	f020 f982 	bl	8025a5c <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005758:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800575c:	687a      	ldr	r2, [r7, #4]
 800575e:	441a      	add	r2, r3
 8005760:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005764:	2108      	movs	r1, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f7fa ff54 	bl	8000614 <ExtractBits>
 800576c:	4603      	mov	r3, r0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8005774:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005778:	3308      	adds	r3, #8
 800577a:	2b00      	cmp	r3, #0
 800577c:	da00      	bge.n	8005780 <Vital_Msg_extr_from_CAN+0x8b0>
 800577e:	3307      	adds	r3, #7
 8005780:	10db      	asrs	r3, r3, #3
 8005782:	b29a      	uxth	r2, r3
 8005784:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005788:	4413      	add	r3, r2
 800578a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800578e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005792:	3308      	adds	r3, #8
 8005794:	b29b      	uxth	r3, r3
 8005796:	b21b      	sxth	r3, r3
 8005798:	425a      	negs	r2, r3
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	f002 0207 	and.w	r2, r2, #7
 80057a2:	bf58      	it	pl
 80057a4:	4253      	negpl	r3, r2
 80057a6:	b21b      	sxth	r3, r3
 80057a8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80057ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80057b8:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d007      	beq.n	80057d0 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80057c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057c4:	08db      	lsrs	r3, r3, #3
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	3301      	adds	r3, #1
 80057ca:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80057ce:	e004      	b.n	80057da <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80057d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057d4:	08db      	lsrs	r3, r3, #3
 80057d6:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80057da:	2300      	movs	r3, #0
 80057dc:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80057e0:	e040      	b.n	8005864 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80057e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	441a      	add	r2, r3
 80057ea:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80057ee:	2108      	movs	r1, #8
 80057f0:	4618      	mov	r0, r3
 80057f2:	f7fa ff0f 	bl	8000614 <ExtractBits>
 80057f6:	4602      	mov	r2, r0
 80057f8:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80057fc:	b2d2      	uxtb	r2, r2
 80057fe:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005802:	443b      	add	r3, r7
 8005804:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8005808:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 800580c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005810:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005814:	443b      	add	r3, r7
 8005816:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 800581a:	461a      	mov	r2, r3
 800581c:	4819      	ldr	r0, [pc, #100]	; (8005884 <Vital_Msg_extr_from_CAN+0x9b4>)
 800581e:	f020 f91d 	bl	8025a5c <iprintf>
		BITSTUFFINC(8);
 8005822:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005826:	3308      	adds	r3, #8
 8005828:	2b00      	cmp	r3, #0
 800582a:	da00      	bge.n	800582e <Vital_Msg_extr_from_CAN+0x95e>
 800582c:	3307      	adds	r3, #7
 800582e:	10db      	asrs	r3, r3, #3
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005836:	4413      	add	r3, r2
 8005838:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800583c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005840:	3308      	adds	r3, #8
 8005842:	b29b      	uxth	r3, r3
 8005844:	b21b      	sxth	r3, r3
 8005846:	425a      	negs	r2, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	f002 0207 	and.w	r2, r2, #7
 8005850:	bf58      	it	pl
 8005852:	4253      	negpl	r3, r2
 8005854:	b21b      	sxth	r3, r3
 8005856:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 800585a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800585e:	3301      	adds	r3, #1
 8005860:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005864:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005868:	b29b      	uxth	r3, r3
 800586a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800586e:	429a      	cmp	r2, r3
 8005870:	d3b7      	bcc.n	80057e2 <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8005872:	200a      	movs	r0, #10
 8005874:	f020 f90a 	bl	8025a8c <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005878:	2300      	movs	r3, #0
 800587a:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 800587e:	e037      	b.n	80058f0 <Vital_Msg_extr_from_CAN+0xa20>
 8005880:	08027df4 	.word	0x08027df4
 8005884:	08027dfc 	.word	0x08027dfc
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005888:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	441a      	add	r2, r3
 8005890:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005894:	2108      	movs	r1, #8
 8005896:	4618      	mov	r0, r3
 8005898:	f7fa febc 	bl	8000614 <ExtractBits>
 800589c:	4602      	mov	r2, r0
 800589e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058a2:	b2d2      	uxtb	r2, r2
 80058a4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80058a8:	443b      	add	r3, r7
 80058aa:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80058ae:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80058b2:	3308      	adds	r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	da00      	bge.n	80058ba <Vital_Msg_extr_from_CAN+0x9ea>
 80058b8:	3307      	adds	r3, #7
 80058ba:	10db      	asrs	r3, r3, #3
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058c2:	4413      	add	r3, r2
 80058c4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80058c8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058cc:	3308      	adds	r3, #8
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	b21b      	sxth	r3, r3
 80058d2:	425a      	negs	r2, r3
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	f002 0207 	and.w	r2, r2, #7
 80058dc:	bf58      	it	pl
 80058de:	4253      	negpl	r3, r2
 80058e0:	b21b      	sxth	r3, r3
 80058e2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 80058e6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058ea:	3301      	adds	r3, #1
 80058ec:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80058f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3c4      	bcc.n	8005888 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 80058fe:	f107 0308 	add.w	r3, r7, #8
 8005902:	3301      	adds	r3, #1
 8005904:	2210      	movs	r2, #16
 8005906:	2100      	movs	r1, #0
 8005908:	4618      	mov	r0, r3
 800590a:	f01f ffbf 	bl	802588c <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800590e:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005912:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005916:	1d59      	adds	r1, r3, #5
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	3301      	adds	r3, #1
 800591e:	4618      	mov	r0, r3
 8005920:	f01f ff8c 	bl	802583c <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005924:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005928:	b21a      	sxth	r2, r3
 800592a:	f107 0308 	add.w	r3, r7, #8
 800592e:	3301      	adds	r3, #1
 8005930:	4619      	mov	r1, r3
 8005932:	2000      	movs	r0, #0
 8005934:	f00f fb94 	bl	8015060 <GetCRC16>
 8005938:	4603      	mov	r3, r0
 800593a:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 800593c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005940:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005942:	78bb      	ldrb	r3, [r7, #2]
 8005944:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005946:	78bb      	ldrb	r3, [r7, #2]
 8005948:	4a5c      	ldr	r2, [pc, #368]	; (8005abc <Vital_Msg_extr_from_CAN+0xbec>)
 800594a:	4413      	add	r3, r2
 800594c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005950:	2b01      	cmp	r3, #1
 8005952:	d177      	bne.n	8005a44 <Vital_Msg_extr_from_CAN+0xb74>
 8005954:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 8005958:	2b01      	cmp	r3, #1
 800595a:	d173      	bne.n	8005a44 <Vital_Msg_extr_from_CAN+0xb74>
 800595c:	8b79      	ldrh	r1, [r7, #26]
 800595e:	78ba      	ldrb	r2, [r7, #2]
 8005960:	4857      	ldr	r0, [pc, #348]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005962:	4613      	mov	r3, r2
 8005964:	009b      	lsls	r3, r3, #2
 8005966:	4413      	add	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4403      	add	r3, r0
 800596c:	3312      	adds	r3, #18
 800596e:	881b      	ldrh	r3, [r3, #0]
 8005970:	4299      	cmp	r1, r3
 8005972:	d067      	beq.n	8005a44 <Vital_Msg_extr_from_CAN+0xb74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005974:	78ba      	ldrb	r2, [r7, #2]
 8005976:	4613      	mov	r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	4413      	add	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4a50      	ldr	r2, [pc, #320]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005980:	4413      	add	r3, r2
 8005982:	3301      	adds	r3, #1
 8005984:	2210      	movs	r2, #16
 8005986:	2100      	movs	r1, #0
 8005988:	4618      	mov	r0, r3
 800598a:	f01f ff7f 	bl	802588c <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 800598e:	78ba      	ldrb	r2, [r7, #2]
 8005990:	4613      	mov	r3, r2
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	4413      	add	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4a49      	ldr	r2, [pc, #292]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 800599a:	4413      	add	r3, r2
 800599c:	f107 0108 	add.w	r1, r7, #8
 80059a0:	2214      	movs	r2, #20
 80059a2:	4618      	mov	r0, r3
 80059a4:	f01f ff4a 	bl	802583c <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80059a8:	78bb      	ldrb	r3, [r7, #2]
 80059aa:	4946      	ldr	r1, [pc, #280]	; (8005ac4 <Vital_Msg_extr_from_CAN+0xbf4>)
 80059ac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80059b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80059b4:	78bb      	ldrb	r3, [r7, #2]
 80059b6:	4a44      	ldr	r2, [pc, #272]	; (8005ac8 <Vital_Msg_extr_from_CAN+0xbf8>)
 80059b8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80059bc:	78ba      	ldrb	r2, [r7, #2]
 80059be:	4840      	ldr	r0, [pc, #256]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 80059c0:	4613      	mov	r3, r2
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	4413      	add	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4403      	add	r3, r0
 80059ca:	3312      	adds	r3, #18
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	4299      	cmp	r1, r3
 80059d0:	d038      	beq.n	8005a44 <Vital_Msg_extr_from_CAN+0xb74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80059d2:	78ba      	ldrb	r2, [r7, #2]
 80059d4:	78b9      	ldrb	r1, [r7, #2]
 80059d6:	483a      	ldr	r0, [pc, #232]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4403      	add	r3, r0
 80059e2:	3312      	adds	r3, #18
 80059e4:	881a      	ldrh	r2, [r3, #0]
 80059e6:	4b38      	ldr	r3, [pc, #224]	; (8005ac8 <Vital_Msg_extr_from_CAN+0xbf8>)
 80059e8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80059ec:	2214      	movs	r2, #20
 80059ee:	2100      	movs	r1, #0
 80059f0:	4836      	ldr	r0, [pc, #216]	; (8005acc <Vital_Msg_extr_from_CAN+0xbfc>)
 80059f2:	f01f ff4b 	bl	802588c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80059f6:	78ba      	ldrb	r2, [r7, #2]
 80059f8:	4613      	mov	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	4a2f      	ldr	r2, [pc, #188]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005a02:	4413      	add	r3, r2
 8005a04:	2214      	movs	r2, #20
 8005a06:	4619      	mov	r1, r3
 8005a08:	4830      	ldr	r0, [pc, #192]	; (8005acc <Vital_Msg_extr_from_CAN+0xbfc>)
 8005a0a:	f01f ff17 	bl	802583c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8005a0e:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005a12:	f00b f851 	bl	8010ab8 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8005a16:	78bb      	ldrb	r3, [r7, #2]
 8005a18:	4a2d      	ldr	r2, [pc, #180]	; (8005ad0 <Vital_Msg_extr_from_CAN+0xc00>)
 8005a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d110      	bne.n	8005a44 <Vital_Msg_extr_from_CAN+0xb74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005a22:	78bb      	ldrb	r3, [r7, #2]
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	4a2b      	ldr	r2, [pc, #172]	; (8005ad4 <Vital_Msg_extr_from_CAN+0xc04>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	1c98      	adds	r0, r3, #2
 8005a2c:	78ba      	ldrb	r2, [r7, #2]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4413      	add	r3, r2
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4a22      	ldr	r2, [pc, #136]	; (8005ac0 <Vital_Msg_extr_from_CAN+0xbf0>)
 8005a38:	4413      	add	r3, r2
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	2210      	movs	r2, #16
 8005a3e:	4619      	mov	r1, r3
 8005a40:	f01f fefc 	bl	802583c <memcpy>





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005a44:	78ba      	ldrb	r2, [r7, #2]
 8005a46:	4924      	ldr	r1, [pc, #144]	; (8005ad8 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a48:	4613      	mov	r3, r2
 8005a4a:	005b      	lsls	r3, r3, #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	00db      	lsls	r3, r3, #3
 8005a50:	440b      	add	r3, r1
 8005a52:	78ba      	ldrb	r2, [r7, #2]
 8005a54:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005a56:	78ba      	ldrb	r2, [r7, #2]
 8005a58:	491f      	ldr	r1, [pc, #124]	; (8005ad8 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	4413      	add	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	440b      	add	r3, r1
 8005a64:	3301      	adds	r3, #1
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005a6a:	2218      	movs	r2, #24
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	481b      	ldr	r0, [pc, #108]	; (8005adc <Vital_Msg_extr_from_CAN+0xc0c>)
 8005a70:	f01f ff0c 	bl	802588c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005a74:	78ba      	ldrb	r2, [r7, #2]
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	4a16      	ldr	r2, [pc, #88]	; (8005ad8 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a80:	4413      	add	r3, r2
 8005a82:	2218      	movs	r2, #24
 8005a84:	4619      	mov	r1, r3
 8005a86:	4815      	ldr	r0, [pc, #84]	; (8005adc <Vital_Msg_extr_from_CAN+0xc0c>)
 8005a88:	f01f fed8 	bl	802583c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8005a8c:	f240 2002 	movw	r0, #514	; 0x202
 8005a90:	f00b f812 	bl	8010ab8 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005a94:	78ba      	ldrb	r2, [r7, #2]
 8005a96:	4910      	ldr	r1, [pc, #64]	; (8005ad8 <Vital_Msg_extr_from_CAN+0xc08>)
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	440b      	add	r3, r1
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005aa8:	78bb      	ldrb	r3, [r7, #2]
 8005aaa:	490d      	ldr	r1, [pc, #52]	; (8005ae0 <Vital_Msg_extr_from_CAN+0xc10>)
 8005aac:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005ab4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000504 	.word	0x20000504
 8005ac0:	20003598 	.word	0x20003598
 8005ac4:	20002564 	.word	0x20002564
 8005ac8:	2000258c 	.word	0x2000258c
 8005acc:	20003728 	.word	0x20003728
 8005ad0:	20002550 	.word	0x20002550
 8005ad4:	20002770 	.word	0x20002770
 8005ad8:	20002da4 	.word	0x20002da4
 8005adc:	20002f84 	.word	0x20002f84
 8005ae0:	200024b8 	.word	0x200024b8

08005ae4 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005ae4:	b590      	push	{r4, r7, lr}
 8005ae6:	b095      	sub	sp, #84	; 0x54
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	4608      	mov	r0, r1
 8005aee:	4611      	mov	r1, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	4603      	mov	r3, r0
 8005af4:	70fb      	strb	r3, [r7, #3]
 8005af6:	460b      	mov	r3, r1
 8005af8:	70bb      	strb	r3, [r7, #2]
 8005afa:	4613      	mov	r3, r2
 8005afc:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005afe:	2300      	movs	r3, #0
 8005b00:	60bb      	str	r3, [r7, #8]
 8005b02:	f107 030c 	add.w	r3, r7, #12
 8005b06:	2224      	movs	r2, #36	; 0x24
 8005b08:	2100      	movs	r1, #0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f01f febe 	bl	802588c <memset>
	uint8_t uc_index = 0;
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005b24:	f013 f884 	bl	8018c30 <HAL_GetTick>
 8005b28:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005b30:	2300      	movs	r3, #0
 8005b32:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b34:	2300      	movs	r3, #0
 8005b36:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005b38:	499a      	ldr	r1, [pc, #616]	; (8005da4 <Status_Msg_Extr+0x2c0>)
 8005b3a:	489b      	ldr	r0, [pc, #620]	; (8005da8 <Status_Msg_Extr+0x2c4>)
 8005b3c:	f7fa fb80 	bl	8000240 <strcmp>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 812c 	beq.w	8005da0 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005b48:	4b98      	ldr	r3, [pc, #608]	; (8005dac <Status_Msg_Extr+0x2c8>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02c      	beq.n	8005bae <Status_Msg_Extr+0xca>
 8005b54:	4b95      	ldr	r3, [pc, #596]	; (8005dac <Status_Msg_Extr+0x2c8>)
 8005b56:	791b      	ldrb	r3, [r3, #4]
 8005b58:	78ba      	ldrb	r2, [r7, #2]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d127      	bne.n	8005bae <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005b62:	4893      	ldr	r0, [pc, #588]	; (8005db0 <Status_Msg_Extr+0x2cc>)
 8005b64:	f017 fc22 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	4b92      	ldr	r3, [pc, #584]	; (8005db4 <Status_Msg_Extr+0x2d0>)
 8005b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8005b70:	0bd9      	lsrs	r1, r3, #15
 8005b72:	460b      	mov	r3, r1
 8005b74:	041b      	lsls	r3, r3, #16
 8005b76:	1a5b      	subs	r3, r3, r1
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 8005b7c:	488e      	ldr	r0, [pc, #568]	; (8005db8 <Status_Msg_Extr+0x2d4>)
 8005b7e:	f020 f809 	bl	8025b94 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005b82:	78bb      	ldrb	r3, [r7, #2]
 8005b84:	4a8d      	ldr	r2, [pc, #564]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005b86:	011b      	lsls	r3, r3, #4
 8005b88:	4413      	add	r3, r2
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4619      	mov	r1, r3
 8005b90:	488b      	ldr	r0, [pc, #556]	; (8005dc0 <Status_Msg_Extr+0x2dc>)
 8005b92:	f01f ff63 	bl	8025a5c <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b98:	488a      	ldr	r0, [pc, #552]	; (8005dc4 <Status_Msg_Extr+0x2e0>)
 8005b9a:	f01f ff5f 	bl	8025a5c <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 8005b9e:	f107 0208 	add.w	r2, r7, #8
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba4:	2118      	movs	r1, #24
 8005ba6:	2000      	movs	r0, #0
 8005ba8:	f7fa fdc0 	bl	800072c <InsertBits>
	{
 8005bac:	e00b      	b.n	8005bc6 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bae:	78bb      	ldrb	r3, [r7, #2]
 8005bb0:	4a82      	ldr	r2, [pc, #520]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005bb2:	011b      	lsls	r3, r3, #4
 8005bb4:	4413      	add	r3, r2
 8005bb6:	3308      	adds	r3, #8
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f107 0208 	add.w	r2, r7, #8
 8005bbe:	2118      	movs	r1, #24
 8005bc0:	2000      	movs	r0, #0
 8005bc2:	f7fa fdb3 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005bcc:	e010      	b.n	8005bf0 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005bce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	441a      	add	r2, r3
 8005bd6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bda:	3303      	adds	r3, #3
 8005bdc:	7812      	ldrb	r2, [r2, #0]
 8005bde:	3350      	adds	r3, #80	; 0x50
 8005be0:	443b      	add	r3, r7
 8005be2:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005be6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005bea:	3301      	adds	r3, #1
 8005bec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005bf0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005bf4:	78fb      	ldrb	r3, [r7, #3]
 8005bf6:	3b05      	subs	r3, #5
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	dbe8      	blt.n	8005bce <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005bfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3303      	adds	r3, #3
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	f107 0308 	add.w	r3, r7, #8
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f00f fae1 	bl	80151d4 <CalculateDirectReverseCrc>
 8005c12:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005c14:	78fb      	ldrb	r3, [r7, #3]
 8005c16:	3b05      	subs	r3, #5
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	441a      	add	r2, r3
 8005c1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c1e:	2120      	movs	r1, #32
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7fa fcf7 	bl	8000614 <ExtractBits>
 8005c26:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005c28:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	f000 80df 	beq.w	8005df0 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3305      	adds	r3, #5
 8005c36:	461a      	mov	r2, r3
 8005c38:	2108      	movs	r1, #8
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	f7fa fcea 	bl	8000614 <ExtractBits>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005c46:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d004      	beq.n	8005c58 <Status_Msg_Extr+0x174>
 8005c4e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	f040 8090 	bne.w	8005d78 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005c58:	78bb      	ldrb	r3, [r7, #2]
 8005c5a:	4a5b      	ldr	r2, [pc, #364]	; (8005dc8 <Status_Msg_Extr+0x2e4>)
 8005c5c:	3366      	adds	r3, #102	; 0x66
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	4619      	mov	r1, r3
 8005c66:	4859      	ldr	r0, [pc, #356]	; (8005dcc <Status_Msg_Extr+0x2e8>)
 8005c68:	f01f fef8 	bl	8025a5c <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005c6c:	f107 0308 	add.w	r3, r7, #8
 8005c70:	2228      	movs	r2, #40	; 0x28
 8005c72:	2100      	movs	r1, #0
 8005c74:	4618      	mov	r0, r3
 8005c76:	f01f fe09 	bl	802588c <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8005c7a:	78bb      	ldrb	r3, [r7, #2]
 8005c7c:	4a4f      	ldr	r2, [pc, #316]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005c7e:	011b      	lsls	r3, r3, #4
 8005c80:	4413      	add	r3, r2
 8005c82:	3308      	adds	r3, #8
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3301      	adds	r3, #1
 8005c88:	f107 0208 	add.w	r2, r7, #8
 8005c8c:	2118      	movs	r1, #24
 8005c8e:	2000      	movs	r0, #0
 8005c90:	f7fa fd4c 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c9a:	e010      	b.n	8005cbe <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005c9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	441a      	add	r2, r3
 8005ca4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ca8:	3303      	adds	r3, #3
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	3350      	adds	r3, #80	; 0x50
 8005cae:	443b      	add	r3, r7
 8005cb0:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cb4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cb8:	3301      	adds	r3, #1
 8005cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cbe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005cc2:	78fb      	ldrb	r3, [r7, #3]
 8005cc4:	3b05      	subs	r3, #5
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	dbe8      	blt.n	8005c9c <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005cca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	3303      	adds	r3, #3
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	f107 0308 	add.w	r3, r7, #8
 8005cd8:	4611      	mov	r1, r2
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f00f fa7a 	bl	80151d4 <CalculateDirectReverseCrc>
 8005ce0:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005ce2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ce4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d132      	bne.n	8005d50 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005cea:	4839      	ldr	r0, [pc, #228]	; (8005dd0 <Status_Msg_Extr+0x2ec>)
 8005cec:	f01f ff52 	bl	8025b94 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005cf0:	78bb      	ldrb	r3, [r7, #2]
 8005cf2:	4a32      	ldr	r2, [pc, #200]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	4413      	add	r3, r2
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4619      	mov	r1, r3
 8005cfe:	4835      	ldr	r0, [pc, #212]	; (8005dd4 <Status_Msg_Extr+0x2f0>)
 8005d00:	f01f feac 	bl	8025a5c <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d04:	78bb      	ldrb	r3, [r7, #2]
 8005d06:	492d      	ldr	r1, [pc, #180]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005d08:	011a      	lsls	r2, r3, #4
 8005d0a:	440a      	add	r2, r1
 8005d0c:	3208      	adds	r2, #8
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	3201      	adds	r2, #1
 8005d12:	492a      	ldr	r1, [pc, #168]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005d14:	011b      	lsls	r3, r3, #4
 8005d16:	440b      	add	r3, r1
 8005d18:	3308      	adds	r3, #8
 8005d1a:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d1c:	78bb      	ldrb	r3, [r7, #2]
 8005d1e:	4a27      	ldr	r2, [pc, #156]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005d20:	011b      	lsls	r3, r3, #4
 8005d22:	4413      	add	r3, r2
 8005d24:	3308      	adds	r3, #8
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4619      	mov	r1, r3
 8005d2a:	482b      	ldr	r0, [pc, #172]	; (8005dd8 <Status_Msg_Extr+0x2f4>)
 8005d2c:	f01f fe96 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d30:	78bb      	ldrb	r3, [r7, #2]
 8005d32:	78ba      	ldrb	r2, [r7, #2]
 8005d34:	4921      	ldr	r1, [pc, #132]	; (8005dbc <Status_Msg_Extr+0x2d8>)
 8005d36:	011b      	lsls	r3, r3, #4
 8005d38:	440b      	add	r3, r1
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	6819      	ldr	r1, [r3, #0]
 8005d3e:	4827      	ldr	r0, [pc, #156]	; (8005ddc <Status_Msg_Extr+0x2f8>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	00db      	lsls	r3, r3, #3
 8005d48:	4403      	add	r3, r0
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005d4e:	e050      	b.n	8005df2 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d50:	78bb      	ldrb	r3, [r7, #2]
 8005d52:	4a1d      	ldr	r2, [pc, #116]	; (8005dc8 <Status_Msg_Extr+0x2e4>)
 8005d54:	3366      	adds	r3, #102	; 0x66
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	4820      	ldr	r0, [pc, #128]	; (8005de0 <Status_Msg_Extr+0x2fc>)
 8005d60:	f01f fe7c 	bl	8025a5c <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005d64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d66:	481f      	ldr	r0, [pc, #124]	; (8005de4 <Status_Msg_Extr+0x300>)
 8005d68:	f01f fe78 	bl	8025a5c <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005d6c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d6e:	481e      	ldr	r0, [pc, #120]	; (8005de8 <Status_Msg_Extr+0x304>)
 8005d70:	f01f fe74 	bl	8025a5c <iprintf>
				return;
 8005d74:	f000 bc9e 	b.w	80066b4 <Status_Msg_Extr+0xbd0>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d78:	78bb      	ldrb	r3, [r7, #2]
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <Status_Msg_Extr+0x2e4>)
 8005d7c:	3366      	adds	r3, #102	; 0x66
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4619      	mov	r1, r3
 8005d86:	4819      	ldr	r0, [pc, #100]	; (8005dec <Status_Msg_Extr+0x308>)
 8005d88:	f01f fe68 	bl	8025a5c <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005d8c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005d8e:	4815      	ldr	r0, [pc, #84]	; (8005de4 <Status_Msg_Extr+0x300>)
 8005d90:	f01f fe64 	bl	8025a5c <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005d94:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d96:	4814      	ldr	r0, [pc, #80]	; (8005de8 <Status_Msg_Extr+0x304>)
 8005d98:	f01f fe60 	bl	8025a5c <iprintf>
			return;
 8005d9c:	f000 bc8a 	b.w	80066b4 <Status_Msg_Extr+0xbd0>
		goto ROLLOVER_STATUS;
 8005da0:	bf00      	nop
 8005da2:	e026      	b.n	8005df2 <Status_Msg_Extr+0x30e>
 8005da4:	0802756c 	.word	0x0802756c
 8005da8:	20000505 	.word	0x20000505
 8005dac:	2000308c 	.word	0x2000308c
 8005db0:	2000bbac 	.word	0x2000bbac
 8005db4:	80008001 	.word	0x80008001
 8005db8:	08027e0c 	.word	0x08027e0c
 8005dbc:	200028f4 	.word	0x200028f4
 8005dc0:	08027e2c 	.word	0x08027e2c
 8005dc4:	08027ab8 	.word	0x08027ab8
 8005dc8:	20000504 	.word	0x20000504
 8005dcc:	08027e50 	.word	0x08027e50
 8005dd0:	08027afc 	.word	0x08027afc
 8005dd4:	08027e74 	.word	0x08027e74
 8005dd8:	08027e8c 	.word	0x08027e8c
 8005ddc:	20002da4 	.word	0x20002da4
 8005de0:	08027ea4 	.word	0x08027ea4
 8005de4:	080277b0 	.word	0x080277b0
 8005de8:	080277c0 	.word	0x080277c0
 8005dec:	08027ec4 	.word	0x08027ec4
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005df0:	bf00      	nop

	BITSTUFFINC(8);
 8005df2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005df6:	3308      	adds	r3, #8
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	da00      	bge.n	8005dfe <Status_Msg_Extr+0x31a>
 8005dfc:	3307      	adds	r3, #7
 8005dfe:	10db      	asrs	r3, r3, #3
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e04:	4413      	add	r3, r2
 8005e06:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e08:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e0a:	3308      	adds	r3, #8
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	b21b      	sxth	r3, r3
 8005e10:	425a      	negs	r2, r3
 8005e12:	f003 0307 	and.w	r3, r3, #7
 8005e16:	f002 0207 	and.w	r2, r2, #7
 8005e1a:	bf58      	it	pl
 8005e1c:	4253      	negpl	r3, r2
 8005e1e:	b21b      	sxth	r3, r3
 8005e20:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	441a      	add	r2, r3
 8005e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e2a:	2110      	movs	r1, #16
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7fa fbf1 	bl	8000614 <ExtractBits>
 8005e32:	4603      	mov	r3, r0
 8005e34:	78ba      	ldrb	r2, [r7, #2]
 8005e36:	b298      	uxth	r0, r3
 8005e38:	49ab      	ldr	r1, [pc, #684]	; (80060e8 <Status_Msg_Extr+0x604>)
 8005e3a:	4613      	mov	r3, r2
 8005e3c:	005b      	lsls	r3, r3, #1
 8005e3e:	4413      	add	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	440b      	add	r3, r1
 8005e44:	3306      	adds	r3, #6
 8005e46:	4602      	mov	r2, r0
 8005e48:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005e4a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e4e:	3310      	adds	r3, #16
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	da00      	bge.n	8005e56 <Status_Msg_Extr+0x372>
 8005e54:	3307      	adds	r3, #7
 8005e56:	10db      	asrs	r3, r3, #3
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e5c:	4413      	add	r3, r2
 8005e5e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e60:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e62:	3310      	adds	r3, #16
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	b21b      	sxth	r3, r3
 8005e68:	425a      	negs	r2, r3
 8005e6a:	f003 0307 	and.w	r3, r3, #7
 8005e6e:	f002 0207 	and.w	r2, r2, #7
 8005e72:	bf58      	it	pl
 8005e74:	4253      	negpl	r3, r2
 8005e76:	b21b      	sxth	r3, r3
 8005e78:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	441a      	add	r2, r3
 8005e80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e82:	2110      	movs	r1, #16
 8005e84:	4618      	mov	r0, r3
 8005e86:	f7fa fbc5 	bl	8000614 <ExtractBits>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	78ba      	ldrb	r2, [r7, #2]
 8005e8e:	b298      	uxth	r0, r3
 8005e90:	4995      	ldr	r1, [pc, #596]	; (80060e8 <Status_Msg_Extr+0x604>)
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	009b      	lsls	r3, r3, #2
 8005e9a:	440b      	add	r3, r1
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005ea2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ea6:	3310      	adds	r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	da00      	bge.n	8005eae <Status_Msg_Extr+0x3ca>
 8005eac:	3307      	adds	r3, #7
 8005eae:	10db      	asrs	r3, r3, #3
 8005eb0:	b29a      	uxth	r2, r3
 8005eb2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005eb4:	4413      	add	r3, r2
 8005eb6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005eb8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eba:	3310      	adds	r3, #16
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	b21b      	sxth	r3, r3
 8005ec0:	425a      	negs	r2, r3
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	f002 0207 	and.w	r2, r2, #7
 8005eca:	bf58      	it	pl
 8005ecc:	4253      	negpl	r3, r2
 8005ece:	b21b      	sxth	r3, r3
 8005ed0:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005ed2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005eda:	2108      	movs	r1, #8
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa fb99 	bl	8000614 <ExtractBits>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	78bb      	ldrb	r3, [r7, #2]
 8005ee6:	b2d1      	uxtb	r1, r2
 8005ee8:	4a80      	ldr	r2, [pc, #512]	; (80060ec <Status_Msg_Extr+0x608>)
 8005eea:	011b      	lsls	r3, r3, #4
 8005eec:	4413      	add	r3, r2
 8005eee:	3302      	adds	r3, #2
 8005ef0:	460a      	mov	r2, r1
 8005ef2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005ef4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	da00      	bge.n	8005f00 <Status_Msg_Extr+0x41c>
 8005efe:	3307      	adds	r3, #7
 8005f00:	10db      	asrs	r3, r3, #3
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f06:	4413      	add	r3, r2
 8005f08:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f0c:	3308      	adds	r3, #8
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	b21b      	sxth	r3, r3
 8005f12:	425a      	negs	r2, r3
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	f002 0207 	and.w	r2, r2, #7
 8005f1c:	bf58      	it	pl
 8005f1e:	4253      	negpl	r3, r2
 8005f20:	b21b      	sxth	r3, r3
 8005f22:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f24:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	441a      	add	r2, r3
 8005f2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f2c:	2108      	movs	r1, #8
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fa fb70 	bl	8000614 <ExtractBits>
 8005f34:	4602      	mov	r2, r0
 8005f36:	78bb      	ldrb	r3, [r7, #2]
 8005f38:	b2d1      	uxtb	r1, r2
 8005f3a:	4a6c      	ldr	r2, [pc, #432]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	4413      	add	r3, r2
 8005f40:	3301      	adds	r3, #1
 8005f42:	460a      	mov	r2, r1
 8005f44:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005f46:	78bb      	ldrb	r3, [r7, #2]
 8005f48:	4a68      	ldr	r2, [pc, #416]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3301      	adds	r3, #1
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d138      	bne.n	8005fc8 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f56:	78bb      	ldrb	r3, [r7, #2]
 8005f58:	4a65      	ldr	r2, [pc, #404]	; (80060f0 <Status_Msg_Extr+0x60c>)
 8005f5a:	3366      	adds	r3, #102	; 0x66
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	4619      	mov	r1, r3
 8005f64:	4863      	ldr	r0, [pc, #396]	; (80060f4 <Status_Msg_Extr+0x610>)
 8005f66:	f01f fd79 	bl	8025a5c <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005f6a:	78bb      	ldrb	r3, [r7, #2]
 8005f6c:	4a5f      	ldr	r2, [pc, #380]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	4413      	add	r3, r2
 8005f72:	330c      	adds	r3, #12
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4619      	mov	r1, r3
 8005f78:	485f      	ldr	r0, [pc, #380]	; (80060f8 <Status_Msg_Extr+0x614>)
 8005f7a:	f01f fd6f 	bl	8025a5c <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005f7e:	78bb      	ldrb	r3, [r7, #2]
 8005f80:	495a      	ldr	r1, [pc, #360]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f82:	011a      	lsls	r2, r3, #4
 8005f84:	440a      	add	r2, r1
 8005f86:	320c      	adds	r2, #12
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	3201      	adds	r2, #1
 8005f8c:	4957      	ldr	r1, [pc, #348]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	440b      	add	r3, r1
 8005f92:	330c      	adds	r3, #12
 8005f94:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005f96:	78bb      	ldrb	r3, [r7, #2]
 8005f98:	4a54      	ldr	r2, [pc, #336]	; (80060ec <Status_Msg_Extr+0x608>)
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	330c      	adds	r3, #12
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4855      	ldr	r0, [pc, #340]	; (80060fc <Status_Msg_Extr+0x618>)
 8005fa6:	f01f fd59 	bl	8025a5c <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005faa:	78bb      	ldrb	r3, [r7, #2]
 8005fac:	78ba      	ldrb	r2, [r7, #2]
 8005fae:	494f      	ldr	r1, [pc, #316]	; (80060ec <Status_Msg_Extr+0x608>)
 8005fb0:	011b      	lsls	r3, r3, #4
 8005fb2:	440b      	add	r3, r1
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	6819      	ldr	r1, [r3, #0]
 8005fb8:	4851      	ldr	r0, [pc, #324]	; (8006100 <Status_Msg_Extr+0x61c>)
 8005fba:	4613      	mov	r3, r2
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	4413      	add	r3, r2
 8005fc0:	00db      	lsls	r3, r3, #3
 8005fc2:	4403      	add	r3, r0
 8005fc4:	330c      	adds	r3, #12
 8005fc6:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005fc8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005fcc:	3308      	adds	r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	da00      	bge.n	8005fd4 <Status_Msg_Extr+0x4f0>
 8005fd2:	3307      	adds	r3, #7
 8005fd4:	10db      	asrs	r3, r3, #3
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005fda:	4413      	add	r3, r2
 8005fdc:	873b      	strh	r3, [r7, #56]	; 0x38
 8005fde:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fe0:	3308      	adds	r3, #8
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	b21b      	sxth	r3, r3
 8005fe6:	425a      	negs	r2, r3
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	f002 0207 	and.w	r2, r2, #7
 8005ff0:	bf58      	it	pl
 8005ff2:	4253      	negpl	r3, r2
 8005ff4:	b21b      	sxth	r3, r3
 8005ff6:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005ff8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	441a      	add	r2, r3
 8005ffe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006000:	2108      	movs	r1, #8
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa fb06 	bl	8000614 <ExtractBits>
 8006008:	4603      	mov	r3, r0
 800600a:	78ba      	ldrb	r2, [r7, #2]
 800600c:	b2d8      	uxtb	r0, r3
 800600e:	4936      	ldr	r1, [pc, #216]	; (80060e8 <Status_Msg_Extr+0x604>)
 8006010:	4613      	mov	r3, r2
 8006012:	005b      	lsls	r3, r3, #1
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3302      	adds	r3, #2
 800601c:	4602      	mov	r2, r0
 800601e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006020:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006024:	3308      	adds	r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	da00      	bge.n	800602c <Status_Msg_Extr+0x548>
 800602a:	3307      	adds	r3, #7
 800602c:	10db      	asrs	r3, r3, #3
 800602e:	b29a      	uxth	r2, r3
 8006030:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006032:	4413      	add	r3, r2
 8006034:	873b      	strh	r3, [r7, #56]	; 0x38
 8006036:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006038:	3308      	adds	r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	b21b      	sxth	r3, r3
 800603e:	425a      	negs	r2, r3
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	f002 0207 	and.w	r2, r2, #7
 8006048:	bf58      	it	pl
 800604a:	4253      	negpl	r3, r2
 800604c:	b21b      	sxth	r3, r3
 800604e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006050:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006052:	687a      	ldr	r2, [r7, #4]
 8006054:	441a      	add	r2, r3
 8006056:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006058:	2110      	movs	r1, #16
 800605a:	4618      	mov	r0, r3
 800605c:	f7fa fada 	bl	8000614 <ExtractBits>
 8006060:	4602      	mov	r2, r0
 8006062:	78bb      	ldrb	r3, [r7, #2]
 8006064:	b291      	uxth	r1, r2
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <Status_Msg_Extr+0x608>)
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	4413      	add	r3, r2
 800606c:	3304      	adds	r3, #4
 800606e:	460a      	mov	r2, r1
 8006070:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8006072:	4924      	ldr	r1, [pc, #144]	; (8006104 <Status_Msg_Extr+0x620>)
 8006074:	4824      	ldr	r0, [pc, #144]	; (8006108 <Status_Msg_Extr+0x624>)
 8006076:	f7fa f8e3 	bl	8000240 <strcmp>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10f      	bne.n	80060a0 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006080:	78bb      	ldrb	r3, [r7, #2]
 8006082:	4a1a      	ldr	r2, [pc, #104]	; (80060ec <Status_Msg_Extr+0x608>)
 8006084:	011b      	lsls	r3, r3, #4
 8006086:	4413      	add	r3, r2
 8006088:	3304      	adds	r3, #4
 800608a:	881a      	ldrh	r2, [r3, #0]
 800608c:	78bb      	ldrb	r3, [r7, #2]
 800608e:	f042 0208 	orr.w	r2, r2, #8
 8006092:	b291      	uxth	r1, r2
 8006094:	4a15      	ldr	r2, [pc, #84]	; (80060ec <Status_Msg_Extr+0x608>)
 8006096:	011b      	lsls	r3, r3, #4
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	460a      	mov	r2, r1
 800609e:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80060a0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80060a4:	3310      	adds	r3, #16
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	da00      	bge.n	80060ac <Status_Msg_Extr+0x5c8>
 80060aa:	3307      	adds	r3, #7
 80060ac:	10db      	asrs	r3, r3, #3
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060b2:	4413      	add	r3, r2
 80060b4:	873b      	strh	r3, [r7, #56]	; 0x38
 80060b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060b8:	3310      	adds	r3, #16
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	b21b      	sxth	r3, r3
 80060be:	425a      	negs	r2, r3
 80060c0:	f003 0307 	and.w	r3, r3, #7
 80060c4:	f002 0207 	and.w	r2, r2, #7
 80060c8:	bf58      	it	pl
 80060ca:	4253      	negpl	r3, r2
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 80060d0:	78bb      	ldrb	r3, [r7, #2]
 80060d2:	4a06      	ldr	r2, [pc, #24]	; (80060ec <Status_Msg_Extr+0x608>)
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	4413      	add	r3, r2
 80060d8:	3304      	adds	r3, #4
 80060da:	881b      	ldrh	r3, [r3, #0]
 80060dc:	f003 0320 	and.w	r3, r3, #32
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 812a 	beq.w	800633a <Status_Msg_Extr+0x856>
 80060e6:	e011      	b.n	800610c <Status_Msg_Extr+0x628>
 80060e8:	20002d2c 	.word	0x20002d2c
 80060ec:	200028f4 	.word	0x200028f4
 80060f0:	20000504 	.word	0x20000504
 80060f4:	08027bb4 	.word	0x08027bb4
 80060f8:	08027edc 	.word	0x08027edc
 80060fc:	08027ee8 	.word	0x08027ee8
 8006100:	20002da4 	.word	0x20002da4
 8006104:	0802756c 	.word	0x0802756c
 8006108:	20000505 	.word	0x20000505
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800610c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	441a      	add	r2, r3
 8006112:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006114:	2108      	movs	r1, #8
 8006116:	4618      	mov	r0, r3
 8006118:	f7fa fa7c 	bl	8000614 <ExtractBits>
 800611c:	4603      	mov	r3, r0
 800611e:	78ba      	ldrb	r2, [r7, #2]
 8006120:	b2d8      	uxtb	r0, r3
 8006122:	49b0      	ldr	r1, [pc, #704]	; (80063e4 <Status_Msg_Extr+0x900>)
 8006124:	4613      	mov	r3, r2
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	4413      	add	r3, r2
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	440b      	add	r3, r1
 800612e:	3305      	adds	r3, #5
 8006130:	4602      	mov	r2, r0
 8006132:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006134:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006138:	3308      	adds	r3, #8
 800613a:	2b00      	cmp	r3, #0
 800613c:	da00      	bge.n	8006140 <Status_Msg_Extr+0x65c>
 800613e:	3307      	adds	r3, #7
 8006140:	10db      	asrs	r3, r3, #3
 8006142:	b29a      	uxth	r2, r3
 8006144:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006146:	4413      	add	r3, r2
 8006148:	873b      	strh	r3, [r7, #56]	; 0x38
 800614a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800614c:	3308      	adds	r3, #8
 800614e:	b29b      	uxth	r3, r3
 8006150:	b21b      	sxth	r3, r3
 8006152:	425a      	negs	r2, r3
 8006154:	f003 0307 	and.w	r3, r3, #7
 8006158:	f002 0207 	and.w	r2, r2, #7
 800615c:	bf58      	it	pl
 800615e:	4253      	negpl	r3, r2
 8006160:	b21b      	sxth	r3, r3
 8006162:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006164:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	441a      	add	r2, r3
 800616a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800616c:	2108      	movs	r1, #8
 800616e:	4618      	mov	r0, r3
 8006170:	f7fa fa50 	bl	8000614 <ExtractBits>
 8006174:	4603      	mov	r3, r0
 8006176:	78ba      	ldrb	r2, [r7, #2]
 8006178:	b2d8      	uxtb	r0, r3
 800617a:	499a      	ldr	r1, [pc, #616]	; (80063e4 <Status_Msg_Extr+0x900>)
 800617c:	4613      	mov	r3, r2
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	4413      	add	r3, r2
 8006182:	005b      	lsls	r3, r3, #1
 8006184:	440b      	add	r3, r1
 8006186:	3304      	adds	r3, #4
 8006188:	4602      	mov	r2, r0
 800618a:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800618c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006190:	3308      	adds	r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	da00      	bge.n	8006198 <Status_Msg_Extr+0x6b4>
 8006196:	3307      	adds	r3, #7
 8006198:	10db      	asrs	r3, r3, #3
 800619a:	b29a      	uxth	r2, r3
 800619c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800619e:	4413      	add	r3, r2
 80061a0:	873b      	strh	r3, [r7, #56]	; 0x38
 80061a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061a4:	3308      	adds	r3, #8
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	425a      	negs	r2, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	f002 0207 	and.w	r2, r2, #7
 80061b4:	bf58      	it	pl
 80061b6:	4253      	negpl	r3, r2
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	441a      	add	r2, r3
 80061c2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061c4:	2108      	movs	r1, #8
 80061c6:	4618      	mov	r0, r3
 80061c8:	f7fa fa24 	bl	8000614 <ExtractBits>
 80061cc:	4603      	mov	r3, r0
 80061ce:	78ba      	ldrb	r2, [r7, #2]
 80061d0:	b2d8      	uxtb	r0, r3
 80061d2:	4984      	ldr	r1, [pc, #528]	; (80063e4 <Status_Msg_Extr+0x900>)
 80061d4:	4613      	mov	r3, r2
 80061d6:	005b      	lsls	r3, r3, #1
 80061d8:	4413      	add	r3, r2
 80061da:	005b      	lsls	r3, r3, #1
 80061dc:	440b      	add	r3, r1
 80061de:	3303      	adds	r3, #3
 80061e0:	4602      	mov	r2, r0
 80061e2:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80061e4:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061e8:	3308      	adds	r3, #8
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	da00      	bge.n	80061f0 <Status_Msg_Extr+0x70c>
 80061ee:	3307      	adds	r3, #7
 80061f0:	10db      	asrs	r3, r3, #3
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061f6:	4413      	add	r3, r2
 80061f8:	873b      	strh	r3, [r7, #56]	; 0x38
 80061fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061fc:	3308      	adds	r3, #8
 80061fe:	b29b      	uxth	r3, r3
 8006200:	b21b      	sxth	r3, r3
 8006202:	425a      	negs	r2, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	f002 0207 	and.w	r2, r2, #7
 800620c:	bf58      	it	pl
 800620e:	4253      	negpl	r3, r2
 8006210:	b21b      	sxth	r3, r3
 8006212:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006214:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	441a      	add	r2, r3
 800621a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800621c:	2108      	movs	r1, #8
 800621e:	4618      	mov	r0, r3
 8006220:	f7fa f9f8 	bl	8000614 <ExtractBits>
 8006224:	4603      	mov	r3, r0
 8006226:	78ba      	ldrb	r2, [r7, #2]
 8006228:	b2d8      	uxtb	r0, r3
 800622a:	496e      	ldr	r1, [pc, #440]	; (80063e4 <Status_Msg_Extr+0x900>)
 800622c:	4613      	mov	r3, r2
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4413      	add	r3, r2
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	440b      	add	r3, r1
 8006236:	4602      	mov	r2, r0
 8006238:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800623a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800623e:	3308      	adds	r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	da00      	bge.n	8006246 <Status_Msg_Extr+0x762>
 8006244:	3307      	adds	r3, #7
 8006246:	10db      	asrs	r3, r3, #3
 8006248:	b29a      	uxth	r2, r3
 800624a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800624c:	4413      	add	r3, r2
 800624e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006250:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006252:	3308      	adds	r3, #8
 8006254:	b29b      	uxth	r3, r3
 8006256:	b21b      	sxth	r3, r3
 8006258:	425a      	negs	r2, r3
 800625a:	f003 0307 	and.w	r3, r3, #7
 800625e:	f002 0207 	and.w	r2, r2, #7
 8006262:	bf58      	it	pl
 8006264:	4253      	negpl	r3, r2
 8006266:	b21b      	sxth	r3, r3
 8006268:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800626a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	441a      	add	r2, r3
 8006270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006272:	2108      	movs	r1, #8
 8006274:	4618      	mov	r0, r3
 8006276:	f7fa f9cd 	bl	8000614 <ExtractBits>
 800627a:	4603      	mov	r3, r0
 800627c:	78ba      	ldrb	r2, [r7, #2]
 800627e:	b2d8      	uxtb	r0, r3
 8006280:	4958      	ldr	r1, [pc, #352]	; (80063e4 <Status_Msg_Extr+0x900>)
 8006282:	4613      	mov	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	4413      	add	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	440b      	add	r3, r1
 800628c:	3301      	adds	r3, #1
 800628e:	4602      	mov	r2, r0
 8006290:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006292:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006296:	3308      	adds	r3, #8
 8006298:	2b00      	cmp	r3, #0
 800629a:	da00      	bge.n	800629e <Status_Msg_Extr+0x7ba>
 800629c:	3307      	adds	r3, #7
 800629e:	10db      	asrs	r3, r3, #3
 80062a0:	b29a      	uxth	r2, r3
 80062a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062a4:	4413      	add	r3, r2
 80062a6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062aa:	3308      	adds	r3, #8
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	b21b      	sxth	r3, r3
 80062b0:	425a      	negs	r2, r3
 80062b2:	f003 0307 	and.w	r3, r3, #7
 80062b6:	f002 0207 	and.w	r2, r2, #7
 80062ba:	bf58      	it	pl
 80062bc:	4253      	negpl	r3, r2
 80062be:	b21b      	sxth	r3, r3
 80062c0:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80062c2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	441a      	add	r2, r3
 80062c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ca:	2108      	movs	r1, #8
 80062cc:	4618      	mov	r0, r3
 80062ce:	f7fa f9a1 	bl	8000614 <ExtractBits>
 80062d2:	4603      	mov	r3, r0
 80062d4:	78ba      	ldrb	r2, [r7, #2]
 80062d6:	b2d8      	uxtb	r0, r3
 80062d8:	4942      	ldr	r1, [pc, #264]	; (80063e4 <Status_Msg_Extr+0x900>)
 80062da:	4613      	mov	r3, r2
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	4413      	add	r3, r2
 80062e0:	005b      	lsls	r3, r3, #1
 80062e2:	440b      	add	r3, r1
 80062e4:	3302      	adds	r3, #2
 80062e6:	4602      	mov	r2, r0
 80062e8:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80062ea:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80062ee:	3308      	adds	r3, #8
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	da00      	bge.n	80062f6 <Status_Msg_Extr+0x812>
 80062f4:	3307      	adds	r3, #7
 80062f6:	10db      	asrs	r3, r3, #3
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062fc:	4413      	add	r3, r2
 80062fe:	873b      	strh	r3, [r7, #56]	; 0x38
 8006300:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006302:	3308      	adds	r3, #8
 8006304:	b29b      	uxth	r3, r3
 8006306:	b21b      	sxth	r3, r3
 8006308:	425a      	negs	r2, r3
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	f002 0207 	and.w	r2, r2, #7
 8006312:	bf58      	it	pl
 8006314:	4253      	negpl	r3, r2
 8006316:	b21b      	sxth	r3, r3
 8006318:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800631a:	78bb      	ldrb	r3, [r7, #2]
 800631c:	4618      	mov	r0, r3
 800631e:	f003 f919 	bl	8009554 <IS_MLK_EIPC_TIME_MATCHING>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d004      	beq.n	8006332 <Status_Msg_Extr+0x84e>
 8006328:	78bb      	ldrb	r3, [r7, #2]
 800632a:	4a2f      	ldr	r2, [pc, #188]	; (80063e8 <Status_Msg_Extr+0x904>)
 800632c:	2100      	movs	r1, #0
 800632e:	54d1      	strb	r1, [r2, r3]
 8006330:	e003      	b.n	800633a <Status_Msg_Extr+0x856>
 8006332:	78bb      	ldrb	r3, [r7, #2]
 8006334:	4a2c      	ldr	r2, [pc, #176]	; (80063e8 <Status_Msg_Extr+0x904>)
 8006336:	2101      	movs	r1, #1
 8006338:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800633a:	78bb      	ldrb	r3, [r7, #2]
 800633c:	4a2b      	ldr	r2, [pc, #172]	; (80063ec <Status_Msg_Extr+0x908>)
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	4413      	add	r3, r2
 8006342:	3304      	adds	r3, #4
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8006354:	787a      	ldrb	r2, [r7, #1]
 8006356:	78bb      	ldrb	r3, [r7, #2]
 8006358:	4611      	mov	r1, r2
 800635a:	4618      	mov	r0, r3
 800635c:	f000 f9d6 	bl	800670c <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8006360:	78bb      	ldrb	r3, [r7, #2]
 8006362:	4923      	ldr	r1, [pc, #140]	; (80063f0 <Status_Msg_Extr+0x90c>)
 8006364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800636a:	78bb      	ldrb	r3, [r7, #2]
 800636c:	4921      	ldr	r1, [pc, #132]	; (80063f4 <Status_Msg_Extr+0x910>)
 800636e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8006374:	78ba      	ldrb	r2, [r7, #2]
 8006376:	4920      	ldr	r1, [pc, #128]	; (80063f8 <Status_Msg_Extr+0x914>)
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	440b      	add	r3, r1
 8006382:	3310      	adds	r3, #16
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	78bc      	ldrb	r4, [r7, #2]
 8006388:	4618      	mov	r0, r3
 800638a:	f009 fe19 	bl	800ffc0 <HAL_Elaps_Ticks>
 800638e:	4602      	mov	r2, r0
 8006390:	4919      	ldr	r1, [pc, #100]	; (80063f8 <Status_Msg_Extr+0x914>)
 8006392:	4623      	mov	r3, r4
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	4423      	add	r3, r4
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	440b      	add	r3, r1
 800639c:	3310      	adds	r3, #16
 800639e:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80063a0:	78bb      	ldrb	r3, [r7, #2]
 80063a2:	4a16      	ldr	r2, [pc, #88]	; (80063fc <Status_Msg_Extr+0x918>)
 80063a4:	4413      	add	r3, r2
 80063a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063aa:	2b02      	cmp	r3, #2
 80063ac:	d12e      	bne.n	800640c <Status_Msg_Extr+0x928>
 80063ae:	78bb      	ldrb	r3, [r7, #2]
 80063b0:	4a13      	ldr	r2, [pc, #76]	; (8006400 <Status_Msg_Extr+0x91c>)
 80063b2:	5cd3      	ldrb	r3, [r2, r3]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d829      	bhi.n	800640c <Status_Msg_Extr+0x928>
 80063b8:	78ba      	ldrb	r2, [r7, #2]
 80063ba:	4912      	ldr	r1, [pc, #72]	; (8006404 <Status_Msg_Extr+0x920>)
 80063bc:	4613      	mov	r3, r2
 80063be:	005b      	lsls	r3, r3, #1
 80063c0:	4413      	add	r3, r2
 80063c2:	011b      	lsls	r3, r3, #4
 80063c4:	440b      	add	r3, r1
 80063c6:	3305      	adds	r3, #5
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 0301 	and.w	r3, r3, #1
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11c      	bne.n	800640c <Status_Msg_Extr+0x928>
 80063d2:	78bb      	ldrb	r3, [r7, #2]
 80063d4:	4a0c      	ldr	r2, [pc, #48]	; (8006408 <Status_Msg_Extr+0x924>)
 80063d6:	5cd3      	ldrb	r3, [r2, r3]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d117      	bne.n	800640c <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 80063dc:	2300      	movs	r3, #0
 80063de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80063e2:	e03d      	b.n	8006460 <Status_Msg_Extr+0x97c>
 80063e4:	200028b8 	.word	0x200028b8
 80063e8:	20002764 	.word	0x20002764
 80063ec:	200028f4 	.word	0x200028f4
 80063f0:	20002630 	.word	0x20002630
 80063f4:	20002658 	.word	0x20002658
 80063f8:	20002da4 	.word	0x20002da4
 80063fc:	20000504 	.word	0x20000504
 8006400:	20002544 	.word	0x20002544
 8006404:	20002ad4 	.word	0x20002ad4
 8006408:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800640c:	78bb      	ldrb	r3, [r7, #2]
 800640e:	4aab      	ldr	r2, [pc, #684]	; (80066bc <Status_Msg_Extr+0xbd8>)
 8006410:	4413      	add	r3, r2
 8006412:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006416:	2b02      	cmp	r3, #2
 8006418:	d122      	bne.n	8006460 <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 800641a:	78bb      	ldrb	r3, [r7, #2]
 800641c:	4aa7      	ldr	r2, [pc, #668]	; (80066bc <Status_Msg_Extr+0xbd8>)
 800641e:	3366      	adds	r3, #102	; 0x66
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	6859      	ldr	r1, [r3, #4]
 8006426:	78bb      	ldrb	r3, [r7, #2]
 8006428:	4aa5      	ldr	r2, [pc, #660]	; (80066c0 <Status_Msg_Extr+0xbdc>)
 800642a:	5cd3      	ldrb	r3, [r2, r3]
 800642c:	461a      	mov	r2, r3
 800642e:	48a5      	ldr	r0, [pc, #660]	; (80066c4 <Status_Msg_Extr+0xbe0>)
 8006430:	f01f fb14 	bl	8025a5c <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006434:	78bb      	ldrb	r3, [r7, #2]
 8006436:	4aa4      	ldr	r2, [pc, #656]	; (80066c8 <Status_Msg_Extr+0xbe4>)
 8006438:	5cd3      	ldrb	r3, [r2, r3]
 800643a:	4619      	mov	r1, r3
 800643c:	48a3      	ldr	r0, [pc, #652]	; (80066cc <Status_Msg_Extr+0xbe8>)
 800643e:	f01f fb0d 	bl	8025a5c <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006442:	78ba      	ldrb	r2, [r7, #2]
 8006444:	49a2      	ldr	r1, [pc, #648]	; (80066d0 <Status_Msg_Extr+0xbec>)
 8006446:	4613      	mov	r3, r2
 8006448:	005b      	lsls	r3, r3, #1
 800644a:	4413      	add	r3, r2
 800644c:	011b      	lsls	r3, r3, #4
 800644e:	440b      	add	r3, r1
 8006450:	3305      	adds	r3, #5
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	f003 0301 	and.w	r3, r3, #1
 8006458:	4619      	mov	r1, r3
 800645a:	489e      	ldr	r0, [pc, #632]	; (80066d4 <Status_Msg_Extr+0xbf0>)
 800645c:	f01f fafe 	bl	8025a5c <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8006460:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006464:	2b01      	cmp	r3, #1
 8006466:	d166      	bne.n	8006536 <Status_Msg_Extr+0xa52>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006468:	78ba      	ldrb	r2, [r7, #2]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4a99      	ldr	r2, [pc, #612]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 8006474:	4413      	add	r3, r2
 8006476:	3301      	adds	r3, #1
 8006478:	2210      	movs	r2, #16
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f01f fa05 	bl	802588c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	4a92      	ldr	r2, [pc, #584]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 800648e:	1898      	adds	r0, r3, r2
 8006490:	78ba      	ldrb	r2, [r7, #2]
 8006492:	4613      	mov	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	4a90      	ldr	r2, [pc, #576]	; (80066dc <Status_Msg_Extr+0xbf8>)
 800649c:	4413      	add	r3, r2
 800649e:	2214      	movs	r2, #20
 80064a0:	4619      	mov	r1, r3
 80064a2:	f01f f9cb 	bl	802583c <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80064a6:	78bb      	ldrb	r3, [r7, #2]
 80064a8:	4a8d      	ldr	r2, [pc, #564]	; (80066e0 <Status_Msg_Extr+0xbfc>)
 80064aa:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80064ae:	78ba      	ldrb	r2, [r7, #2]
 80064b0:	4889      	ldr	r0, [pc, #548]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 80064b2:	4613      	mov	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	4413      	add	r3, r2
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4403      	add	r3, r0
 80064bc:	3312      	adds	r3, #18
 80064be:	881b      	ldrh	r3, [r3, #0]
 80064c0:	4299      	cmp	r1, r3
 80064c2:	d038      	beq.n	8006536 <Status_Msg_Extr+0xa52>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80064c4:	78ba      	ldrb	r2, [r7, #2]
 80064c6:	78b9      	ldrb	r1, [r7, #2]
 80064c8:	4883      	ldr	r0, [pc, #524]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4403      	add	r3, r0
 80064d4:	3312      	adds	r3, #18
 80064d6:	881a      	ldrh	r2, [r3, #0]
 80064d8:	4b81      	ldr	r3, [pc, #516]	; (80066e0 <Status_Msg_Extr+0xbfc>)
 80064da:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80064de:	2214      	movs	r2, #20
 80064e0:	2100      	movs	r1, #0
 80064e2:	4880      	ldr	r0, [pc, #512]	; (80066e4 <Status_Msg_Extr+0xc00>)
 80064e4:	f01f f9d2 	bl	802588c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80064e8:	78ba      	ldrb	r2, [r7, #2]
 80064ea:	4613      	mov	r3, r2
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4a79      	ldr	r2, [pc, #484]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 80064f4:	4413      	add	r3, r2
 80064f6:	2214      	movs	r2, #20
 80064f8:	4619      	mov	r1, r3
 80064fa:	487a      	ldr	r0, [pc, #488]	; (80066e4 <Status_Msg_Extr+0xc00>)
 80064fc:	f01f f99e 	bl	802583c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8006500:	f44f 7002 	mov.w	r0, #520	; 0x208
 8006504:	f00a fad8 	bl	8010ab8 <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8006508:	78bb      	ldrb	r3, [r7, #2]
 800650a:	4a77      	ldr	r2, [pc, #476]	; (80066e8 <Status_Msg_Extr+0xc04>)
 800650c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d110      	bne.n	8006536 <Status_Msg_Extr+0xa52>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006514:	78bb      	ldrb	r3, [r7, #2]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	4a74      	ldr	r2, [pc, #464]	; (80066ec <Status_Msg_Extr+0xc08>)
 800651a:	4413      	add	r3, r2
 800651c:	1c98      	adds	r0, r3, #2
 800651e:	78ba      	ldrb	r2, [r7, #2]
 8006520:	4613      	mov	r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4a6b      	ldr	r2, [pc, #428]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 800652a:	4413      	add	r3, r2
 800652c:	3301      	adds	r3, #1
 800652e:	2210      	movs	r2, #16
 8006530:	4619      	mov	r1, r3
 8006532:	f01f f983 	bl	802583c <memcpy>
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006536:	78b9      	ldrb	r1, [r7, #2]
 8006538:	78ba      	ldrb	r2, [r7, #2]
 800653a:	4867      	ldr	r0, [pc, #412]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 800653c:	460b      	mov	r3, r1
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	440b      	add	r3, r1
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4403      	add	r3, r0
 8006546:	3312      	adds	r3, #18
 8006548:	8818      	ldrh	r0, [r3, #0]
 800654a:	4969      	ldr	r1, [pc, #420]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 800654c:	4613      	mov	r3, r2
 800654e:	005b      	lsls	r3, r3, #1
 8006550:	4413      	add	r3, r2
 8006552:	00db      	lsls	r3, r3, #3
 8006554:	440b      	add	r3, r1
 8006556:	3306      	adds	r3, #6
 8006558:	4602      	mov	r2, r0
 800655a:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800655c:	78ba      	ldrb	r2, [r7, #2]
 800655e:	4964      	ldr	r1, [pc, #400]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	440b      	add	r3, r1
 800656a:	3314      	adds	r3, #20
 800656c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800656e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8006570:	78ba      	ldrb	r2, [r7, #2]
 8006572:	495f      	ldr	r1, [pc, #380]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 8006574:	4613      	mov	r3, r2
 8006576:	005b      	lsls	r3, r3, #1
 8006578:	4413      	add	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	440b      	add	r3, r1
 800657e:	3305      	adds	r3, #5
 8006580:	2204      	movs	r2, #4
 8006582:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006584:	78ba      	ldrb	r2, [r7, #2]
 8006586:	495a      	ldr	r1, [pc, #360]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 8006588:	4613      	mov	r3, r2
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	440b      	add	r3, r1
 8006592:	78ba      	ldrb	r2, [r7, #2]
 8006594:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006596:	78ba      	ldrb	r2, [r7, #2]
 8006598:	4955      	ldr	r1, [pc, #340]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 800659a:	4613      	mov	r3, r2
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	4413      	add	r3, r2
 80065a0:	00db      	lsls	r3, r3, #3
 80065a2:	440b      	add	r3, r1
 80065a4:	3301      	adds	r3, #1
 80065a6:	2201      	movs	r2, #1
 80065a8:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80065aa:	78ba      	ldrb	r2, [r7, #2]
 80065ac:	4950      	ldr	r1, [pc, #320]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 80065ae:	4613      	mov	r3, r2
 80065b0:	005b      	lsls	r3, r3, #1
 80065b2:	4413      	add	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	440b      	add	r3, r1
 80065b8:	3302      	adds	r3, #2
 80065ba:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80065be:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80065c0:	2218      	movs	r2, #24
 80065c2:	2100      	movs	r1, #0
 80065c4:	484b      	ldr	r0, [pc, #300]	; (80066f4 <Status_Msg_Extr+0xc10>)
 80065c6:	f01f f961 	bl	802588c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80065ca:	78ba      	ldrb	r2, [r7, #2]
 80065cc:	4613      	mov	r3, r2
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	4413      	add	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4a46      	ldr	r2, [pc, #280]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 80065d6:	4413      	add	r3, r2
 80065d8:	2218      	movs	r2, #24
 80065da:	4619      	mov	r1, r3
 80065dc:	4845      	ldr	r0, [pc, #276]	; (80066f4 <Status_Msg_Extr+0xc10>)
 80065de:	f01f f92d 	bl	802583c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80065e2:	f240 2002 	movw	r0, #514	; 0x202
 80065e6:	f00a fa67 	bl	8010ab8 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80065ea:	78ba      	ldrb	r2, [r7, #2]
 80065ec:	4940      	ldr	r1, [pc, #256]	; (80066f0 <Status_Msg_Extr+0xc0c>)
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	00db      	lsls	r3, r3, #3
 80065f6:	440b      	add	r3, r1
 80065f8:	3301      	adds	r3, #1
 80065fa:	2200      	movs	r2, #0
 80065fc:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80065fe:	78bb      	ldrb	r3, [r7, #2]
 8006600:	493d      	ldr	r1, [pc, #244]	; (80066f8 <Status_Msg_Extr+0xc14>)
 8006602:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8006608:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800660c:	2b01      	cmp	r3, #1
 800660e:	d11d      	bne.n	800664c <Status_Msg_Extr+0xb68>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006610:	78bb      	ldrb	r3, [r7, #2]
 8006612:	493a      	ldr	r1, [pc, #232]	; (80066fc <Status_Msg_Extr+0xc18>)
 8006614:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 800661a:	78ba      	ldrb	r2, [r7, #2]
 800661c:	4938      	ldr	r1, [pc, #224]	; (8006700 <Status_Msg_Extr+0xc1c>)
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	3304      	adds	r3, #4
 800662a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800662c:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800662e:	78ba      	ldrb	r2, [r7, #2]
 8006630:	4933      	ldr	r1, [pc, #204]	; (8006700 <Status_Msg_Extr+0xc1c>)
 8006632:	4613      	mov	r3, r2
 8006634:	005b      	lsls	r3, r3, #1
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	440b      	add	r3, r1
 800663c:	3301      	adds	r3, #1
 800663e:	2201      	movs	r2, #1
 8006640:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8006642:	78bb      	ldrb	r3, [r7, #2]
 8006644:	4a2f      	ldr	r2, [pc, #188]	; (8006704 <Status_Msg_Extr+0xc20>)
 8006646:	2101      	movs	r1, #1
 8006648:	54d1      	strb	r1, [r2, r3]
 800664a:	e02e      	b.n	80066aa <Status_Msg_Extr+0xbc6>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800664c:	78bb      	ldrb	r3, [r7, #2]
 800664e:	4a2d      	ldr	r2, [pc, #180]	; (8006704 <Status_Msg_Extr+0xc20>)
 8006650:	2100      	movs	r1, #0
 8006652:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006654:	78ba      	ldrb	r2, [r7, #2]
 8006656:	492a      	ldr	r1, [pc, #168]	; (8006700 <Status_Msg_Extr+0xc1c>)
 8006658:	4613      	mov	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	3308      	adds	r3, #8
 8006664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006666:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8006668:	78ba      	ldrb	r2, [r7, #2]
 800666a:	4925      	ldr	r1, [pc, #148]	; (8006700 <Status_Msg_Extr+0xc1c>)
 800666c:	4613      	mov	r3, r2
 800666e:	005b      	lsls	r3, r3, #1
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	3301      	adds	r3, #1
 8006678:	2200      	movs	r2, #0
 800667a:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800667c:	78ba      	ldrb	r2, [r7, #2]
 800667e:	4613      	mov	r3, r2
 8006680:	009b      	lsls	r3, r3, #2
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 8006688:	4413      	add	r3, r2
 800668a:	3301      	adds	r3, #1
 800668c:	2210      	movs	r2, #16
 800668e:	2100      	movs	r1, #0
 8006690:	4618      	mov	r0, r3
 8006692:	f01f f8fb 	bl	802588c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8006696:	78ba      	ldrb	r2, [r7, #2]
 8006698:	490f      	ldr	r1, [pc, #60]	; (80066d8 <Status_Msg_Extr+0xbf4>)
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3312      	adds	r3, #18
 80066a6:	2200      	movs	r2, #0
 80066a8:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80066aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80066ae:	4816      	ldr	r0, [pc, #88]	; (8006708 <Status_Msg_Extr+0xc24>)
 80066b0:	f014 feb3 	bl	801b41a <HAL_GPIO_TogglePin>

}
 80066b4:	3754      	adds	r7, #84	; 0x54
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}
 80066ba:	bf00      	nop
 80066bc:	20000504 	.word	0x20000504
 80066c0:	20002544 	.word	0x20002544
 80066c4:	08027ef4 	.word	0x08027ef4
 80066c8:	20002538 	.word	0x20002538
 80066cc:	08027f04 	.word	0x08027f04
 80066d0:	20002ad4 	.word	0x20002ad4
 80066d4:	08027f1c 	.word	0x08027f1c
 80066d8:	20003598 	.word	0x20003598
 80066dc:	200034d0 	.word	0x200034d0
 80066e0:	2000258c 	.word	0x2000258c
 80066e4:	20003728 	.word	0x20003728
 80066e8:	20002550 	.word	0x20002550
 80066ec:	20002770 	.word	0x20002770
 80066f0:	20002da4 	.word	0x20002da4
 80066f4:	20002f84 	.word	0x20002f84
 80066f8:	200024b8 	.word	0x200024b8
 80066fc:	200025a0 	.word	0x200025a0
 8006700:	200033e0 	.word	0x200033e0
 8006704:	200025f0 	.word	0x200025f0
 8006708:	40021c00 	.word	0x40021c00

0800670c <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 800670c:	b590      	push	{r4, r7, lr}
 800670e:	b0a5      	sub	sp, #148	; 0x94
 8006710:	af00      	add	r7, sp, #0
 8006712:	4603      	mov	r3, r0
 8006714:	460a      	mov	r2, r1
 8006716:	71fb      	strb	r3, [r7, #7]
 8006718:	4613      	mov	r3, r2
 800671a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 800671c:	2300      	movs	r3, #0
 800671e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006720:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006724:	2238      	movs	r2, #56	; 0x38
 8006726:	2100      	movs	r1, #0
 8006728:	4618      	mov	r0, r3
 800672a:	f01f f8af 	bl	802588c <memset>
	uint8_t Temp_Buff[60] = {0,};
 800672e:	2300      	movs	r3, #0
 8006730:	60fb      	str	r3, [r7, #12]
 8006732:	f107 0310 	add.w	r3, r7, #16
 8006736:	2238      	movs	r2, #56	; 0x38
 8006738:	2100      	movs	r1, #0
 800673a:	4618      	mov	r0, r3
 800673c:	f01f f8a6 	bl	802588c <memset>
	uint8_t uc_index = 0;
 8006740:	2300      	movs	r3, #0
 8006742:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8006746:	2300      	movs	r3, #0
 8006748:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800674c:	2300      	movs	r3, #0
 800674e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8006752:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006756:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800675a:	441a      	add	r2, r3
 800675c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006760:	23f4      	movs	r3, #244	; 0xf4
 8006762:	2108      	movs	r1, #8
 8006764:	f7f9 ffe2 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006768:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800676c:	3308      	adds	r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	da00      	bge.n	8006774 <Send_Status_Message+0x68>
 8006772:	3307      	adds	r3, #7
 8006774:	10db      	asrs	r3, r3, #3
 8006776:	b29a      	uxth	r2, r3
 8006778:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800677c:	4413      	add	r3, r2
 800677e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006782:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006786:	3308      	adds	r3, #8
 8006788:	b29b      	uxth	r3, r3
 800678a:	b21b      	sxth	r3, r3
 800678c:	425a      	negs	r2, r3
 800678e:	f003 0307 	and.w	r3, r3, #7
 8006792:	f002 0207 	and.w	r2, r2, #7
 8006796:	bf58      	it	pl
 8006798:	4253      	negpl	r3, r2
 800679a:	b21b      	sxth	r3, r3
 800679c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80067a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067a4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067a8:	441a      	add	r2, r3
 80067aa:	79fb      	ldrb	r3, [r7, #7]
 80067ac:	49bc      	ldr	r1, [pc, #752]	; (8006aa0 <Send_Status_Message+0x394>)
 80067ae:	3366      	adds	r3, #102	; 0x66
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	440b      	add	r3, r1
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80067ba:	2110      	movs	r1, #16
 80067bc:	f7f9 ffb6 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80067c0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067c4:	3310      	adds	r3, #16
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da00      	bge.n	80067cc <Send_Status_Message+0xc0>
 80067ca:	3307      	adds	r3, #7
 80067cc:	10db      	asrs	r3, r3, #3
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067d4:	4413      	add	r3, r2
 80067d6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067da:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067de:	3310      	adds	r3, #16
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	b21b      	sxth	r3, r3
 80067e4:	425a      	negs	r2, r3
 80067e6:	f003 0307 	and.w	r3, r3, #7
 80067ea:	f002 0207 	and.w	r2, r2, #7
 80067ee:	bf58      	it	pl
 80067f0:	4253      	negpl	r3, r2
 80067f2:	b21b      	sxth	r3, r3
 80067f4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80067f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006800:	441a      	add	r2, r3
 8006802:	79fb      	ldrb	r3, [r7, #7]
 8006804:	49a6      	ldr	r1, [pc, #664]	; (8006aa0 <Send_Status_Message+0x394>)
 8006806:	3370      	adds	r3, #112	; 0x70
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006812:	2110      	movs	r1, #16
 8006814:	f7f9 ff8a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006818:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800681c:	3310      	adds	r3, #16
 800681e:	2b00      	cmp	r3, #0
 8006820:	da00      	bge.n	8006824 <Send_Status_Message+0x118>
 8006822:	3307      	adds	r3, #7
 8006824:	10db      	asrs	r3, r3, #3
 8006826:	b29a      	uxth	r2, r3
 8006828:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800682c:	4413      	add	r3, r2
 800682e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006832:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006836:	3310      	adds	r3, #16
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21b      	sxth	r3, r3
 800683c:	425a      	negs	r2, r3
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	f002 0207 	and.w	r2, r2, #7
 8006846:	bf58      	it	pl
 8006848:	4253      	negpl	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006850:	4b94      	ldr	r3, [pc, #592]	; (8006aa4 <Send_Status_Message+0x398>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	089b      	lsrs	r3, r3, #2
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b00      	cmp	r3, #0
 800685c:	d035      	beq.n	80068ca <Send_Status_Message+0x1be>
 800685e:	4b91      	ldr	r3, [pc, #580]	; (8006aa4 <Send_Status_Message+0x398>)
 8006860:	791b      	ldrb	r3, [r3, #4]
 8006862:	79fa      	ldrb	r2, [r7, #7]
 8006864:	429a      	cmp	r2, r3
 8006866:	d130      	bne.n	80068ca <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 800686e:	488e      	ldr	r0, [pc, #568]	; (8006aa8 <Send_Status_Message+0x39c>)
 8006870:	f016 fd9c 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8006874:	4602      	mov	r2, r0
 8006876:	4b8d      	ldr	r3, [pc, #564]	; (8006aac <Send_Status_Message+0x3a0>)
 8006878:	fba3 1302 	umull	r1, r3, r3, r2
 800687c:	099b      	lsrs	r3, r3, #6
 800687e:	21c8      	movs	r1, #200	; 0xc8
 8006880:	fb01 f303 	mul.w	r3, r1, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 800688a:	4889      	ldr	r0, [pc, #548]	; (8006ab0 <Send_Status_Message+0x3a4>)
 800688c:	f01f f982 	bl	8025b94 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006890:	79fb      	ldrb	r3, [r7, #7]
 8006892:	4a88      	ldr	r2, [pc, #544]	; (8006ab4 <Send_Status_Message+0x3a8>)
 8006894:	011b      	lsls	r3, r3, #4
 8006896:	4413      	add	r3, r2
 8006898:	3301      	adds	r3, #1
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	4619      	mov	r1, r3
 800689e:	4886      	ldr	r0, [pc, #536]	; (8006ab8 <Send_Status_Message+0x3ac>)
 80068a0:	f01f f8dc 	bl	8025a5c <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80068a4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068a8:	4619      	mov	r1, r3
 80068aa:	4884      	ldr	r0, [pc, #528]	; (8006abc <Send_Status_Message+0x3b0>)
 80068ac:	f01f f8d6 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 80068b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068b4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068b8:	441a      	add	r2, r3
 80068ba:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80068c2:	2108      	movs	r1, #8
 80068c4:	f7f9 ff32 	bl	800072c <InsertBits>
	{
 80068c8:	e00f      	b.n	80068ea <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80068ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80068d2:	441a      	add	r2, r3
 80068d4:	79fb      	ldrb	r3, [r7, #7]
 80068d6:	4977      	ldr	r1, [pc, #476]	; (8006ab4 <Send_Status_Message+0x3a8>)
 80068d8:	011b      	lsls	r3, r3, #4
 80068da:	440b      	add	r3, r1
 80068dc:	3301      	adds	r3, #1
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80068e4:	2108      	movs	r1, #8
 80068e6:	f7f9 ff21 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 80068ea:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80068ee:	3308      	adds	r3, #8
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	da00      	bge.n	80068f6 <Send_Status_Message+0x1ea>
 80068f4:	3307      	adds	r3, #7
 80068f6:	10db      	asrs	r3, r3, #3
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80068fe:	4413      	add	r3, r2
 8006900:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006904:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006908:	3308      	adds	r3, #8
 800690a:	b29b      	uxth	r3, r3
 800690c:	b21b      	sxth	r3, r3
 800690e:	425a      	negs	r2, r3
 8006910:	f003 0307 	and.w	r3, r3, #7
 8006914:	f002 0207 	and.w	r2, r2, #7
 8006918:	bf58      	it	pl
 800691a:	4253      	negpl	r3, r2
 800691c:	b21b      	sxth	r3, r3
 800691e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006922:	4b60      	ldr	r3, [pc, #384]	; (8006aa4 <Send_Status_Message+0x398>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	08db      	lsrs	r3, r3, #3
 8006928:	f003 0301 	and.w	r3, r3, #1
 800692c:	2b00      	cmp	r3, #0
 800692e:	d038      	beq.n	80069a2 <Send_Status_Message+0x296>
 8006930:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <Send_Status_Message+0x398>)
 8006932:	791b      	ldrb	r3, [r3, #4]
 8006934:	79fa      	ldrb	r2, [r7, #7]
 8006936:	429a      	cmp	r2, r3
 8006938:	d133      	bne.n	80069a2 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006940:	4859      	ldr	r0, [pc, #356]	; (8006aa8 <Send_Status_Message+0x39c>)
 8006942:	f016 fd33 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8006946:	4602      	mov	r2, r0
 8006948:	4b58      	ldr	r3, [pc, #352]	; (8006aac <Send_Status_Message+0x3a0>)
 800694a:	fba3 1302 	umull	r1, r3, r3, r2
 800694e:	099b      	lsrs	r3, r3, #6
 8006950:	21c8      	movs	r1, #200	; 0xc8
 8006952:	fb01 f303 	mul.w	r3, r1, r3
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 800695c:	4858      	ldr	r0, [pc, #352]	; (8006ac0 <Send_Status_Message+0x3b4>)
 800695e:	f01f f919 	bl	8025b94 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	4a53      	ldr	r2, [pc, #332]	; (8006ab4 <Send_Status_Message+0x3a8>)
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	4413      	add	r3, r2
 800696a:	3302      	adds	r3, #2
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	4619      	mov	r1, r3
 8006970:	4854      	ldr	r0, [pc, #336]	; (8006ac4 <Send_Status_Message+0x3b8>)
 8006972:	f01f f873 	bl	8025a5c <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006976:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800697a:	4619      	mov	r1, r3
 800697c:	4852      	ldr	r0, [pc, #328]	; (8006ac8 <Send_Status_Message+0x3bc>)
 800697e:	f01f f86d 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8006982:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006986:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800698a:	441a      	add	r2, r3
 800698c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006990:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006994:	2108      	movs	r1, #8
 8006996:	f7f9 fec9 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 800699a:	4b4c      	ldr	r3, [pc, #304]	; (8006acc <Send_Status_Message+0x3c0>)
 800699c:	2201      	movs	r2, #1
 800699e:	701a      	strb	r2, [r3, #0]
	{
 80069a0:	e020      	b.n	80069e4 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80069a2:	4b4a      	ldr	r3, [pc, #296]	; (8006acc <Send_Status_Message+0x3c0>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80069a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069b0:	18d1      	adds	r1, r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	483f      	ldr	r0, [pc, #252]	; (8006ab4 <Send_Status_Message+0x3a8>)
 80069b6:	011a      	lsls	r2, r3, #4
 80069b8:	4402      	add	r2, r0
 80069ba:	3202      	adds	r2, #2
 80069bc:	7812      	ldrb	r2, [r2, #0]
 80069be:	3201      	adds	r2, #1
 80069c0:	b2d4      	uxtb	r4, r2
 80069c2:	483c      	ldr	r0, [pc, #240]	; (8006ab4 <Send_Status_Message+0x3a8>)
 80069c4:	011a      	lsls	r2, r3, #4
 80069c6:	4402      	add	r2, r0
 80069c8:	3202      	adds	r2, #2
 80069ca:	4620      	mov	r0, r4
 80069cc:	7010      	strb	r0, [r2, #0]
 80069ce:	4a39      	ldr	r2, [pc, #228]	; (8006ab4 <Send_Status_Message+0x3a8>)
 80069d0:	011b      	lsls	r3, r3, #4
 80069d2:	4413      	add	r3, r2
 80069d4:	3302      	adds	r3, #2
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80069dc:	460a      	mov	r2, r1
 80069de:	2108      	movs	r1, #8
 80069e0:	f7f9 fea4 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 80069e4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80069e8:	3308      	adds	r3, #8
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	da00      	bge.n	80069f0 <Send_Status_Message+0x2e4>
 80069ee:	3307      	adds	r3, #7
 80069f0:	10db      	asrs	r3, r3, #3
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069f8:	4413      	add	r3, r2
 80069fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80069fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a02:	3308      	adds	r3, #8
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	b21b      	sxth	r3, r3
 8006a08:	425a      	negs	r2, r3
 8006a0a:	f003 0307 	and.w	r3, r3, #7
 8006a0e:	f002 0207 	and.w	r2, r2, #7
 8006a12:	bf58      	it	pl
 8006a14:	4253      	negpl	r3, r2
 8006a16:	b21b      	sxth	r3, r3
 8006a18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006a1c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a20:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a24:	441a      	add	r2, r3
 8006a26:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a2a:	2304      	movs	r3, #4
 8006a2c:	2108      	movs	r1, #8
 8006a2e:	f7f9 fe7d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006a32:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a36:	3308      	adds	r3, #8
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	da00      	bge.n	8006a3e <Send_Status_Message+0x332>
 8006a3c:	3307      	adds	r3, #7
 8006a3e:	10db      	asrs	r3, r3, #3
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a46:	4413      	add	r3, r2
 8006a48:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a50:	3308      	adds	r3, #8
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	b21b      	sxth	r3, r3
 8006a56:	425a      	negs	r2, r3
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	f002 0207 	and.w	r2, r2, #7
 8006a60:	bf58      	it	pl
 8006a62:	4253      	negpl	r3, r2
 8006a64:	b21b      	sxth	r3, r3
 8006a66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006a6a:	79fb      	ldrb	r3, [r7, #7]
 8006a6c:	4a11      	ldr	r2, [pc, #68]	; (8006ab4 <Send_Status_Message+0x3a8>)
 8006a6e:	011b      	lsls	r3, r3, #4
 8006a70:	4413      	add	r3, r2
 8006a72:	3304      	adds	r3, #4
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	f003 0308 	and.w	r3, r3, #8
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d052      	beq.n	8006b24 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006a7e:	79fb      	ldrb	r3, [r7, #7]
 8006a80:	4a13      	ldr	r2, [pc, #76]	; (8006ad0 <Send_Status_Message+0x3c4>)
 8006a82:	5cd3      	ldrb	r3, [r2, r3]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d125      	bne.n	8006ad4 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006a88:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a90:	441a      	add	r2, r3
 8006a92:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a96:	2368      	movs	r3, #104	; 0x68
 8006a98:	2110      	movs	r1, #16
 8006a9a:	f7f9 fe47 	bl	800072c <InsertBits>
 8006a9e:	e024      	b.n	8006aea <Send_Status_Message+0x3de>
 8006aa0:	20000504 	.word	0x20000504
 8006aa4:	2000308c 	.word	0x2000308c
 8006aa8:	2000bbac 	.word	0x2000bbac
 8006aac:	51eb851f 	.word	0x51eb851f
 8006ab0:	08027914 	.word	0x08027914
 8006ab4:	200028f4 	.word	0x200028f4
 8006ab8:	08027f2c 	.word	0x08027f2c
 8006abc:	08027f4c 	.word	0x08027f4c
 8006ac0:	08027978 	.word	0x08027978
 8006ac4:	08027f6c 	.word	0x08027f6c
 8006ac8:	08027f8c 	.word	0x08027f8c
 8006acc:	200024af 	.word	0x200024af
 8006ad0:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006ad4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ad8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006adc:	441a      	add	r2, r3
 8006ade:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006ae2:	2328      	movs	r3, #40	; 0x28
 8006ae4:	2110      	movs	r1, #16
 8006ae6:	f7f9 fe21 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006aea:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006aee:	3310      	adds	r3, #16
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	da00      	bge.n	8006af6 <Send_Status_Message+0x3ea>
 8006af4:	3307      	adds	r3, #7
 8006af6:	10db      	asrs	r3, r3, #3
 8006af8:	b29a      	uxth	r2, r3
 8006afa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006afe:	4413      	add	r3, r2
 8006b00:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b08:	3310      	adds	r3, #16
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	b21b      	sxth	r3, r3
 8006b0e:	425a      	negs	r2, r3
 8006b10:	f003 0307 	and.w	r3, r3, #7
 8006b14:	f002 0207 	and.w	r2, r2, #7
 8006b18:	bf58      	it	pl
 8006b1a:	4253      	negpl	r3, r2
 8006b1c:	b21b      	sxth	r3, r3
 8006b1e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b22:	e03a      	b.n	8006b9a <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <Send_Status_Message+0x43c>)
 8006b28:	5cd3      	ldrb	r3, [r2, r3]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d10e      	bne.n	8006b4c <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006b2e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b36:	441a      	add	r2, r3
 8006b38:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b3c:	2364      	movs	r3, #100	; 0x64
 8006b3e:	2110      	movs	r1, #16
 8006b40:	f7f9 fdf4 	bl	800072c <InsertBits>
 8006b44:	e00d      	b.n	8006b62 <Send_Status_Message+0x456>
 8006b46:	bf00      	nop
 8006b48:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006b4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b54:	441a      	add	r2, r3
 8006b56:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b5a:	2324      	movs	r3, #36	; 0x24
 8006b5c:	2110      	movs	r1, #16
 8006b5e:	f7f9 fde5 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b62:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b66:	3310      	adds	r3, #16
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	da00      	bge.n	8006b6e <Send_Status_Message+0x462>
 8006b6c:	3307      	adds	r3, #7
 8006b6e:	10db      	asrs	r3, r3, #3
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b76:	4413      	add	r3, r2
 8006b78:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b7c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b80:	3310      	adds	r3, #16
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	b21b      	sxth	r3, r3
 8006b86:	425a      	negs	r2, r3
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	f002 0207 	and.w	r2, r2, #7
 8006b90:	bf58      	it	pl
 8006b92:	4253      	negpl	r3, r2
 8006b94:	b21b      	sxth	r3, r3
 8006b96:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006b9a:	79fb      	ldrb	r3, [r7, #7]
 8006b9c:	4ac6      	ldr	r2, [pc, #792]	; (8006eb8 <Send_Status_Message+0x7ac>)
 8006b9e:	011b      	lsls	r3, r3, #4
 8006ba0:	4413      	add	r3, r2
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	881b      	ldrh	r3, [r3, #0]
 8006ba6:	095b      	lsrs	r3, r3, #5
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	f003 0301 	and.w	r3, r3, #1
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f000 8139 	beq.w	8006e26 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006bb4:	79fb      	ldrb	r3, [r7, #7]
 8006bb6:	4ac1      	ldr	r2, [pc, #772]	; (8006ebc <Send_Status_Message+0x7b0>)
 8006bb8:	5cd3      	ldrb	r3, [r2, r3]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d114      	bne.n	8006be8 <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006bbe:	f005 fdb3 	bl	800c728 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006bc2:	79fa      	ldrb	r2, [r7, #7]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	4413      	add	r3, r2
 8006bca:	005b      	lsls	r3, r3, #1
 8006bcc:	4abc      	ldr	r2, [pc, #752]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006bce:	4413      	add	r3, r2
 8006bd0:	4abc      	ldr	r2, [pc, #752]	; (8006ec4 <Send_Status_Message+0x7b8>)
 8006bd2:	6811      	ldr	r1, [r2, #0]
 8006bd4:	6019      	str	r1, [r3, #0]
 8006bd6:	8892      	ldrh	r2, [r2, #4]
 8006bd8:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006bda:	48bb      	ldr	r0, [pc, #748]	; (8006ec8 <Send_Status_Message+0x7bc>)
 8006bdc:	f01e ffda 	bl	8025b94 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006be0:	79fb      	ldrb	r3, [r7, #7]
 8006be2:	4ab6      	ldr	r2, [pc, #728]	; (8006ebc <Send_Status_Message+0x7b0>)
 8006be4:	2100      	movs	r1, #0
 8006be6:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006be8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006bec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006bf0:	18d1      	adds	r1, r2, r3
 8006bf2:	79fa      	ldrb	r2, [r7, #7]
 8006bf4:	48b2      	ldr	r0, [pc, #712]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4413      	add	r3, r2
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	4403      	add	r3, r0
 8006c00:	3305      	adds	r3, #5
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c08:	460a      	mov	r2, r1
 8006c0a:	2108      	movs	r1, #8
 8006c0c:	f7f9 fd8e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c10:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c14:	3308      	adds	r3, #8
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	da00      	bge.n	8006c1c <Send_Status_Message+0x510>
 8006c1a:	3307      	adds	r3, #7
 8006c1c:	10db      	asrs	r3, r3, #3
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c24:	4413      	add	r3, r2
 8006c26:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c2e:	3308      	adds	r3, #8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	b21b      	sxth	r3, r3
 8006c34:	425a      	negs	r2, r3
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	f002 0207 	and.w	r2, r2, #7
 8006c3e:	bf58      	it	pl
 8006c40:	4253      	negpl	r3, r2
 8006c42:	b21b      	sxth	r3, r3
 8006c44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006c48:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c50:	18d1      	adds	r1, r2, r3
 8006c52:	79fa      	ldrb	r2, [r7, #7]
 8006c54:	489a      	ldr	r0, [pc, #616]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006c56:	4613      	mov	r3, r2
 8006c58:	005b      	lsls	r3, r3, #1
 8006c5a:	4413      	add	r3, r2
 8006c5c:	005b      	lsls	r3, r3, #1
 8006c5e:	4403      	add	r3, r0
 8006c60:	3304      	adds	r3, #4
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c68:	460a      	mov	r2, r1
 8006c6a:	2108      	movs	r1, #8
 8006c6c:	f7f9 fd5e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c70:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c74:	3308      	adds	r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	da00      	bge.n	8006c7c <Send_Status_Message+0x570>
 8006c7a:	3307      	adds	r3, #7
 8006c7c:	10db      	asrs	r3, r3, #3
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c84:	4413      	add	r3, r2
 8006c86:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c8a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c8e:	3308      	adds	r3, #8
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	b21b      	sxth	r3, r3
 8006c94:	425a      	negs	r2, r3
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	f002 0207 	and.w	r2, r2, #7
 8006c9e:	bf58      	it	pl
 8006ca0:	4253      	negpl	r3, r2
 8006ca2:	b21b      	sxth	r3, r3
 8006ca4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006ca8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006cac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006cb0:	18d1      	adds	r1, r2, r3
 8006cb2:	79fa      	ldrb	r2, [r7, #7]
 8006cb4:	4882      	ldr	r0, [pc, #520]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	005b      	lsls	r3, r3, #1
 8006cba:	4413      	add	r3, r2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4403      	add	r3, r0
 8006cc0:	3303      	adds	r3, #3
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006cc8:	460a      	mov	r2, r1
 8006cca:	2108      	movs	r1, #8
 8006ccc:	f7f9 fd2e 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006cd0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da00      	bge.n	8006cdc <Send_Status_Message+0x5d0>
 8006cda:	3307      	adds	r3, #7
 8006cdc:	10db      	asrs	r3, r3, #3
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006cea:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006cee:	3308      	adds	r3, #8
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	b21b      	sxth	r3, r3
 8006cf4:	425a      	negs	r2, r3
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	f002 0207 	and.w	r2, r2, #7
 8006cfe:	bf58      	it	pl
 8006d00:	4253      	negpl	r3, r2
 8006d02:	b21b      	sxth	r3, r3
 8006d04:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006d08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d10:	18d1      	adds	r1, r2, r3
 8006d12:	79fa      	ldrb	r2, [r7, #7]
 8006d14:	486a      	ldr	r0, [pc, #424]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	005b      	lsls	r3, r3, #1
 8006d1e:	4403      	add	r3, r0
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d26:	460a      	mov	r2, r1
 8006d28:	2108      	movs	r1, #8
 8006d2a:	f7f9 fcff 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d2e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d32:	3308      	adds	r3, #8
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	da00      	bge.n	8006d3a <Send_Status_Message+0x62e>
 8006d38:	3307      	adds	r3, #7
 8006d3a:	10db      	asrs	r3, r3, #3
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d42:	4413      	add	r3, r2
 8006d44:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	b21b      	sxth	r3, r3
 8006d52:	425a      	negs	r2, r3
 8006d54:	f003 0307 	and.w	r3, r3, #7
 8006d58:	f002 0207 	and.w	r2, r2, #7
 8006d5c:	bf58      	it	pl
 8006d5e:	4253      	negpl	r3, r2
 8006d60:	b21b      	sxth	r3, r3
 8006d62:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006d66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d6e:	18d1      	adds	r1, r2, r3
 8006d70:	79fa      	ldrb	r2, [r7, #7]
 8006d72:	4853      	ldr	r0, [pc, #332]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006d74:	4613      	mov	r3, r2
 8006d76:	005b      	lsls	r3, r3, #1
 8006d78:	4413      	add	r3, r2
 8006d7a:	005b      	lsls	r3, r3, #1
 8006d7c:	4403      	add	r3, r0
 8006d7e:	3301      	adds	r3, #1
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d86:	460a      	mov	r2, r1
 8006d88:	2108      	movs	r1, #8
 8006d8a:	f7f9 fccf 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d8e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d92:	3308      	adds	r3, #8
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	da00      	bge.n	8006d9a <Send_Status_Message+0x68e>
 8006d98:	3307      	adds	r3, #7
 8006d9a:	10db      	asrs	r3, r3, #3
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006da2:	4413      	add	r3, r2
 8006da4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006da8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006dac:	3308      	adds	r3, #8
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	425a      	negs	r2, r3
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	f002 0207 	and.w	r2, r2, #7
 8006dbc:	bf58      	it	pl
 8006dbe:	4253      	negpl	r3, r2
 8006dc0:	b21b      	sxth	r3, r3
 8006dc2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006dc6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006dca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006dce:	18d1      	adds	r1, r2, r3
 8006dd0:	79fa      	ldrb	r2, [r7, #7]
 8006dd2:	483b      	ldr	r0, [pc, #236]	; (8006ec0 <Send_Status_Message+0x7b4>)
 8006dd4:	4613      	mov	r3, r2
 8006dd6:	005b      	lsls	r3, r3, #1
 8006dd8:	4413      	add	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4403      	add	r3, r0
 8006dde:	3302      	adds	r3, #2
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006de6:	460a      	mov	r2, r1
 8006de8:	2108      	movs	r1, #8
 8006dea:	f7f9 fc9f 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006dee:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006df2:	3308      	adds	r3, #8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	da00      	bge.n	8006dfa <Send_Status_Message+0x6ee>
 8006df8:	3307      	adds	r3, #7
 8006dfa:	10db      	asrs	r3, r3, #3
 8006dfc:	b29a      	uxth	r2, r3
 8006dfe:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e02:	4413      	add	r3, r2
 8006e04:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006e08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	b21b      	sxth	r3, r3
 8006e12:	425a      	negs	r2, r3
 8006e14:	f003 0307 	and.w	r3, r3, #7
 8006e18:	f002 0207 	and.w	r2, r2, #7
 8006e1c:	bf58      	it	pl
 8006e1e:	4253      	negpl	r3, r2
 8006e20:	b21b      	sxth	r3, r3
 8006e22:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006e26:	4b29      	ldr	r3, [pc, #164]	; (8006ecc <Send_Status_Message+0x7c0>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	085b      	lsrs	r3, r3, #1
 8006e2c:	f003 0301 	and.w	r3, r3, #1
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d031      	beq.n	8006e98 <Send_Status_Message+0x78c>
 8006e34:	4b25      	ldr	r3, [pc, #148]	; (8006ecc <Send_Status_Message+0x7c0>)
 8006e36:	791b      	ldrb	r3, [r3, #4]
 8006e38:	79fa      	ldrb	r2, [r7, #7]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d12c      	bne.n	8006e98 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006e44:	4822      	ldr	r0, [pc, #136]	; (8006ed0 <Send_Status_Message+0x7c4>)
 8006e46:	f016 fab1 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	4b21      	ldr	r3, [pc, #132]	; (8006ed4 <Send_Status_Message+0x7c8>)
 8006e4e:	fba3 1302 	umull	r1, r3, r3, r2
 8006e52:	0dd9      	lsrs	r1, r3, #23
 8006e54:	460b      	mov	r3, r1
 8006e56:	041b      	lsls	r3, r3, #16
 8006e58:	1a5b      	subs	r3, r3, r1
 8006e5a:	021b      	lsls	r3, r3, #8
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006e62:	481d      	ldr	r0, [pc, #116]	; (8006ed8 <Send_Status_Message+0x7cc>)
 8006e64:	f01e fe96 	bl	8025b94 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006e68:	79fb      	ldrb	r3, [r7, #7]
 8006e6a:	4a13      	ldr	r2, [pc, #76]	; (8006eb8 <Send_Status_Message+0x7ac>)
 8006e6c:	011b      	lsls	r3, r3, #4
 8006e6e:	4413      	add	r3, r2
 8006e70:	330c      	adds	r3, #12
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4619      	mov	r1, r3
 8006e76:	4819      	ldr	r0, [pc, #100]	; (8006edc <Send_Status_Message+0x7d0>)
 8006e78:	f01e fdf0 	bl	8025a5c <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006e7c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006e80:	4817      	ldr	r0, [pc, #92]	; (8006ee0 <Send_Status_Message+0x7d4>)
 8006e82:	f01e fdeb 	bl	8025a5c <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006e86:	f107 020c 	add.w	r2, r7, #12
 8006e8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006e8e:	2118      	movs	r1, #24
 8006e90:	2000      	movs	r0, #0
 8006e92:	f7f9 fc4b 	bl	800072c <InsertBits>
	{
 8006e96:	e00b      	b.n	8006eb0 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006e98:	79fb      	ldrb	r3, [r7, #7]
 8006e9a:	4a07      	ldr	r2, [pc, #28]	; (8006eb8 <Send_Status_Message+0x7ac>)
 8006e9c:	011b      	lsls	r3, r3, #4
 8006e9e:	4413      	add	r3, r2
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f107 020c 	add.w	r2, r7, #12
 8006ea8:	2118      	movs	r1, #24
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f7f9 fc3e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006eb6:	e027      	b.n	8006f08 <Send_Status_Message+0x7fc>
 8006eb8:	200028f4 	.word	0x200028f4
 8006ebc:	20002764 	.word	0x20002764
 8006ec0:	200028b8 	.word	0x200028b8
 8006ec4:	20003f28 	.word	0x20003f28
 8006ec8:	08027cd0 	.word	0x08027cd0
 8006ecc:	2000308c 	.word	0x2000308c
 8006ed0:	2000bbac 	.word	0x2000bbac
 8006ed4:	80008001 	.word	0x80008001
 8006ed8:	08027ce8 	.word	0x08027ce8
 8006edc:	08027d0c 	.word	0x08027d0c
 8006ee0:	08027d30 	.word	0x08027d30
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006ee4:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006ee8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006eec:	3303      	adds	r3, #3
 8006eee:	3290      	adds	r2, #144	; 0x90
 8006ef0:	443a      	add	r2, r7
 8006ef2:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006ef6:	3390      	adds	r3, #144	; 0x90
 8006ef8:	443b      	add	r3, r7
 8006efa:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006efe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f02:	3301      	adds	r3, #1
 8006f04:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f08:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d8e6      	bhi.n	8006ee4 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006f16:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f1a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006f1e:	18d4      	adds	r4, r2, r3
 8006f20:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	3303      	adds	r3, #3
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	f107 030c 	add.w	r3, r7, #12
 8006f2e:	4611      	mov	r1, r2
 8006f30:	4618      	mov	r0, r3
 8006f32:	f00e f94f 	bl	80151d4 <CalculateDirectReverseCrc>
 8006f36:	4603      	mov	r3, r0
 8006f38:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006f3c:	4622      	mov	r2, r4
 8006f3e:	2120      	movs	r1, #32
 8006f40:	f7f9 fbf4 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006f44:	4b1f      	ldr	r3, [pc, #124]	; (8006fc4 <Send_Status_Message+0x8b8>)
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006f4a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006f4e:	3320      	adds	r3, #32
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	da00      	bge.n	8006f56 <Send_Status_Message+0x84a>
 8006f54:	3307      	adds	r3, #7
 8006f56:	10db      	asrs	r3, r3, #3
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f5e:	4413      	add	r3, r2
 8006f60:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006f64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006f68:	3320      	adds	r3, #32
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	b21b      	sxth	r3, r3
 8006f6e:	425a      	negs	r2, r3
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	f002 0207 	and.w	r2, r2, #7
 8006f78:	bf58      	it	pl
 8006f7a:	4253      	negpl	r3, r2
 8006f7c:	b21b      	sxth	r3, r3
 8006f7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <Send_Status_Message+0x8bc>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	0a5b      	lsrs	r3, r3, #9
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00b      	beq.n	8006fa8 <Send_Status_Message+0x89c>
 8006f90:	4b0d      	ldr	r3, [pc, #52]	; (8006fc8 <Send_Status_Message+0x8bc>)
 8006f92:	791b      	ldrb	r3, [r3, #4]
 8006f94:	79fa      	ldrb	r2, [r7, #7]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d106      	bne.n	8006fa8 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006f9a:	480c      	ldr	r0, [pc, #48]	; (8006fcc <Send_Status_Message+0x8c0>)
 8006f9c:	f01e fdfa 	bl	8025b94 <puts>
		printf("Not Sending Reply");
 8006fa0:	480b      	ldr	r0, [pc, #44]	; (8006fd0 <Send_Status_Message+0x8c4>)
 8006fa2:	f01e fd5b 	bl	8025a5c <iprintf>
 8006fa6:	e009      	b.n	8006fbc <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fac:	b2d9      	uxtb	r1, r3
 8006fae:	79fa      	ldrb	r2, [r7, #7]
 8006fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f001 f821 	bl	8007ffc <Process_Sending_Reply>
	}
}
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3794      	adds	r7, #148	; 0x94
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd90      	pop	{r4, r7, pc}
 8006fc4:	200024af 	.word	0x200024af
 8006fc8:	2000308c 	.word	0x2000308c
 8006fcc:	08027a44 	.word	0x08027a44
 8006fd0:	08027a5c 	.word	0x08027a5c

08006fd4 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b088      	sub	sp, #32
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	4608      	mov	r0, r1
 8006fde:	4611      	mov	r1, r2
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	70fb      	strb	r3, [r7, #3]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	70bb      	strb	r3, [r7, #2]
 8006fea:	4613      	mov	r3, r2
 8006fec:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006ffa:	f011 fe19 	bl	8018c30 <HAL_GetTick>
 8006ffe:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8007000:	2300      	movs	r3, #0
 8007002:	81fb      	strh	r3, [r7, #14]
 8007004:	2300      	movs	r3, #0
 8007006:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	b29b      	uxth	r3, r3
 800700c:	3b05      	subs	r3, #5
 800700e:	b29b      	uxth	r3, r3
 8007010:	4619      	mov	r1, r3
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f00e f8de 	bl	80151d4 <CalculateDirectReverseCrc>
 8007018:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800701a:	78fb      	ldrb	r3, [r7, #3]
 800701c:	3b05      	subs	r3, #5
 800701e:	687a      	ldr	r2, [r7, #4]
 8007020:	441a      	add	r2, r3
 8007022:	89bb      	ldrh	r3, [r7, #12]
 8007024:	2120      	movs	r1, #32
 8007026:	4618      	mov	r0, r3
 8007028:	f7f9 faf4 	bl	8000614 <ExtractBits>
 800702c:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800702e:	697a      	ldr	r2, [r7, #20]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	429a      	cmp	r2, r3
 8007034:	d01c      	beq.n	8007070 <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007036:	78bb      	ldrb	r3, [r7, #2]
 8007038:	4a09      	ldr	r2, [pc, #36]	; (8007060 <Service_Msg_Extr+0x8c>)
 800703a:	3366      	adds	r3, #102	; 0x66
 800703c:	009b      	lsls	r3, r3, #2
 800703e:	4413      	add	r3, r2
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4619      	mov	r1, r3
 8007044:	4807      	ldr	r0, [pc, #28]	; (8007064 <Service_Msg_Extr+0x90>)
 8007046:	f01e fd09 	bl	8025a5c <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800704a:	6979      	ldr	r1, [r7, #20]
 800704c:	4806      	ldr	r0, [pc, #24]	; (8007068 <Service_Msg_Extr+0x94>)
 800704e:	f01e fd05 	bl	8025a5c <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8007052:	69b9      	ldr	r1, [r7, #24]
 8007054:	4805      	ldr	r0, [pc, #20]	; (800706c <Service_Msg_Extr+0x98>)
 8007056:	f01e fd01 	bl	8025a5c <iprintf>
		return;
 800705a:	f000 bc04 	b.w	8007866 <Service_Msg_Extr+0x892>
 800705e:	bf00      	nop
 8007060:	20000504 	.word	0x20000504
 8007064:	08027fb0 	.word	0x08027fb0
 8007068:	080277b0 	.word	0x080277b0
 800706c:	080277c0 	.word	0x080277c0
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 8007070:	78bb      	ldrb	r3, [r7, #2]
 8007072:	49ae      	ldr	r1, [pc, #696]	; (800732c <Service_Msg_Extr+0x358>)
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800707a:	78bb      	ldrb	r3, [r7, #2]
 800707c:	49ac      	ldr	r1, [pc, #688]	; (8007330 <Service_Msg_Extr+0x35c>)
 800707e:	693a      	ldr	r2, [r7, #16]
 8007080:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 8007084:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007088:	3308      	adds	r3, #8
 800708a:	2b00      	cmp	r3, #0
 800708c:	da00      	bge.n	8007090 <Service_Msg_Extr+0xbc>
 800708e:	3307      	adds	r3, #7
 8007090:	10db      	asrs	r3, r3, #3
 8007092:	b29a      	uxth	r2, r3
 8007094:	89fb      	ldrh	r3, [r7, #14]
 8007096:	4413      	add	r3, r2
 8007098:	81fb      	strh	r3, [r7, #14]
 800709a:	89bb      	ldrh	r3, [r7, #12]
 800709c:	3308      	adds	r3, #8
 800709e:	b29b      	uxth	r3, r3
 80070a0:	b21b      	sxth	r3, r3
 80070a2:	425a      	negs	r2, r3
 80070a4:	f003 0307 	and.w	r3, r3, #7
 80070a8:	f002 0207 	and.w	r2, r2, #7
 80070ac:	bf58      	it	pl
 80070ae:	4253      	negpl	r3, r2
 80070b0:	b21b      	sxth	r3, r3
 80070b2:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80070b4:	89fb      	ldrh	r3, [r7, #14]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	441a      	add	r2, r3
 80070ba:	89bb      	ldrh	r3, [r7, #12]
 80070bc:	2110      	movs	r1, #16
 80070be:	4618      	mov	r0, r3
 80070c0:	f7f9 faa8 	bl	8000614 <ExtractBits>
 80070c4:	4603      	mov	r3, r0
 80070c6:	78ba      	ldrb	r2, [r7, #2]
 80070c8:	b298      	uxth	r0, r3
 80070ca:	499a      	ldr	r1, [pc, #616]	; (8007334 <Service_Msg_Extr+0x360>)
 80070cc:	4613      	mov	r3, r2
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	440b      	add	r3, r1
 80070d6:	3306      	adds	r3, #6
 80070d8:	4602      	mov	r2, r0
 80070da:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80070dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070e0:	3310      	adds	r3, #16
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	da00      	bge.n	80070e8 <Service_Msg_Extr+0x114>
 80070e6:	3307      	adds	r3, #7
 80070e8:	10db      	asrs	r3, r3, #3
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	89fb      	ldrh	r3, [r7, #14]
 80070ee:	4413      	add	r3, r2
 80070f0:	81fb      	strh	r3, [r7, #14]
 80070f2:	89bb      	ldrh	r3, [r7, #12]
 80070f4:	3310      	adds	r3, #16
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	425a      	negs	r2, r3
 80070fc:	f003 0307 	and.w	r3, r3, #7
 8007100:	f002 0207 	and.w	r2, r2, #7
 8007104:	bf58      	it	pl
 8007106:	4253      	negpl	r3, r2
 8007108:	b21b      	sxth	r3, r3
 800710a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800710c:	89fb      	ldrh	r3, [r7, #14]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	441a      	add	r2, r3
 8007112:	89bb      	ldrh	r3, [r7, #12]
 8007114:	2110      	movs	r1, #16
 8007116:	4618      	mov	r0, r3
 8007118:	f7f9 fa7c 	bl	8000614 <ExtractBits>
 800711c:	4603      	mov	r3, r0
 800711e:	78ba      	ldrb	r2, [r7, #2]
 8007120:	b298      	uxth	r0, r3
 8007122:	4984      	ldr	r1, [pc, #528]	; (8007334 <Service_Msg_Extr+0x360>)
 8007124:	4613      	mov	r3, r2
 8007126:	005b      	lsls	r3, r3, #1
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	3304      	adds	r3, #4
 8007130:	4602      	mov	r2, r0
 8007132:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8007134:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007138:	3310      	adds	r3, #16
 800713a:	2b00      	cmp	r3, #0
 800713c:	da00      	bge.n	8007140 <Service_Msg_Extr+0x16c>
 800713e:	3307      	adds	r3, #7
 8007140:	10db      	asrs	r3, r3, #3
 8007142:	b29a      	uxth	r2, r3
 8007144:	89fb      	ldrh	r3, [r7, #14]
 8007146:	4413      	add	r3, r2
 8007148:	81fb      	strh	r3, [r7, #14]
 800714a:	89bb      	ldrh	r3, [r7, #12]
 800714c:	3310      	adds	r3, #16
 800714e:	b29b      	uxth	r3, r3
 8007150:	b21b      	sxth	r3, r3
 8007152:	425a      	negs	r2, r3
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	f002 0207 	and.w	r2, r2, #7
 800715c:	bf58      	it	pl
 800715e:	4253      	negpl	r3, r2
 8007160:	b21b      	sxth	r3, r3
 8007162:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007164:	89fb      	ldrh	r3, [r7, #14]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	441a      	add	r2, r3
 800716a:	89bb      	ldrh	r3, [r7, #12]
 800716c:	2108      	movs	r1, #8
 800716e:	4618      	mov	r0, r3
 8007170:	f7f9 fa50 	bl	8000614 <ExtractBits>
 8007174:	4602      	mov	r2, r0
 8007176:	78bb      	ldrb	r3, [r7, #2]
 8007178:	b2d1      	uxtb	r1, r2
 800717a:	4a6f      	ldr	r2, [pc, #444]	; (8007338 <Service_Msg_Extr+0x364>)
 800717c:	011b      	lsls	r3, r3, #4
 800717e:	4413      	add	r3, r2
 8007180:	3302      	adds	r3, #2
 8007182:	460a      	mov	r2, r1
 8007184:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8007186:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800718a:	3308      	adds	r3, #8
 800718c:	2b00      	cmp	r3, #0
 800718e:	da00      	bge.n	8007192 <Service_Msg_Extr+0x1be>
 8007190:	3307      	adds	r3, #7
 8007192:	10db      	asrs	r3, r3, #3
 8007194:	b29a      	uxth	r2, r3
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	4413      	add	r3, r2
 800719a:	81fb      	strh	r3, [r7, #14]
 800719c:	89bb      	ldrh	r3, [r7, #12]
 800719e:	3308      	adds	r3, #8
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	b21b      	sxth	r3, r3
 80071a4:	425a      	negs	r2, r3
 80071a6:	f003 0307 	and.w	r3, r3, #7
 80071aa:	f002 0207 	and.w	r2, r2, #7
 80071ae:	bf58      	it	pl
 80071b0:	4253      	negpl	r3, r2
 80071b2:	b21b      	sxth	r3, r3
 80071b4:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80071b6:	89fb      	ldrh	r3, [r7, #14]
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	441a      	add	r2, r3
 80071bc:	89bb      	ldrh	r3, [r7, #12]
 80071be:	2108      	movs	r1, #8
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7f9 fa27 	bl	8000614 <ExtractBits>
 80071c6:	4602      	mov	r2, r0
 80071c8:	78bb      	ldrb	r3, [r7, #2]
 80071ca:	b2d1      	uxtb	r1, r2
 80071cc:	4a5a      	ldr	r2, [pc, #360]	; (8007338 <Service_Msg_Extr+0x364>)
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	4413      	add	r3, r2
 80071d2:	3301      	adds	r3, #1
 80071d4:	460a      	mov	r2, r1
 80071d6:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80071d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071dc:	3308      	adds	r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	da00      	bge.n	80071e4 <Service_Msg_Extr+0x210>
 80071e2:	3307      	adds	r3, #7
 80071e4:	10db      	asrs	r3, r3, #3
 80071e6:	b29a      	uxth	r2, r3
 80071e8:	89fb      	ldrh	r3, [r7, #14]
 80071ea:	4413      	add	r3, r2
 80071ec:	81fb      	strh	r3, [r7, #14]
 80071ee:	89bb      	ldrh	r3, [r7, #12]
 80071f0:	3308      	adds	r3, #8
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	b21b      	sxth	r3, r3
 80071f6:	425a      	negs	r2, r3
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	f002 0207 	and.w	r2, r2, #7
 8007200:	bf58      	it	pl
 8007202:	4253      	negpl	r3, r2
 8007204:	b21b      	sxth	r3, r3
 8007206:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	441a      	add	r2, r3
 800720e:	89bb      	ldrh	r3, [r7, #12]
 8007210:	2108      	movs	r1, #8
 8007212:	4618      	mov	r0, r3
 8007214:	f7f9 f9fe 	bl	8000614 <ExtractBits>
 8007218:	4603      	mov	r3, r0
 800721a:	78ba      	ldrb	r2, [r7, #2]
 800721c:	b2d8      	uxtb	r0, r3
 800721e:	4945      	ldr	r1, [pc, #276]	; (8007334 <Service_Msg_Extr+0x360>)
 8007220:	4613      	mov	r3, r2
 8007222:	005b      	lsls	r3, r3, #1
 8007224:	4413      	add	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	440b      	add	r3, r1
 800722a:	3302      	adds	r3, #2
 800722c:	4602      	mov	r2, r0
 800722e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8007230:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007234:	3308      	adds	r3, #8
 8007236:	2b00      	cmp	r3, #0
 8007238:	da00      	bge.n	800723c <Service_Msg_Extr+0x268>
 800723a:	3307      	adds	r3, #7
 800723c:	10db      	asrs	r3, r3, #3
 800723e:	b29a      	uxth	r2, r3
 8007240:	89fb      	ldrh	r3, [r7, #14]
 8007242:	4413      	add	r3, r2
 8007244:	81fb      	strh	r3, [r7, #14]
 8007246:	89bb      	ldrh	r3, [r7, #12]
 8007248:	3308      	adds	r3, #8
 800724a:	b29b      	uxth	r3, r3
 800724c:	b21b      	sxth	r3, r3
 800724e:	425a      	negs	r2, r3
 8007250:	f003 0307 	and.w	r3, r3, #7
 8007254:	f002 0207 	and.w	r2, r2, #7
 8007258:	bf58      	it	pl
 800725a:	4253      	negpl	r3, r2
 800725c:	b21b      	sxth	r3, r3
 800725e:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007260:	89fb      	ldrh	r3, [r7, #14]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	441a      	add	r2, r3
 8007266:	89bb      	ldrh	r3, [r7, #12]
 8007268:	2110      	movs	r1, #16
 800726a:	4618      	mov	r0, r3
 800726c:	f7f9 f9d2 	bl	8000614 <ExtractBits>
 8007270:	4602      	mov	r2, r0
 8007272:	78bb      	ldrb	r3, [r7, #2]
 8007274:	b291      	uxth	r1, r2
 8007276:	4a30      	ldr	r2, [pc, #192]	; (8007338 <Service_Msg_Extr+0x364>)
 8007278:	011b      	lsls	r3, r3, #4
 800727a:	4413      	add	r3, r2
 800727c:	3304      	adds	r3, #4
 800727e:	460a      	mov	r2, r1
 8007280:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007282:	492e      	ldr	r1, [pc, #184]	; (800733c <Service_Msg_Extr+0x368>)
 8007284:	482e      	ldr	r0, [pc, #184]	; (8007340 <Service_Msg_Extr+0x36c>)
 8007286:	f7f8 ffdb 	bl	8000240 <strcmp>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d10f      	bne.n	80072b0 <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8007290:	78bb      	ldrb	r3, [r7, #2]
 8007292:	4a29      	ldr	r2, [pc, #164]	; (8007338 <Service_Msg_Extr+0x364>)
 8007294:	011b      	lsls	r3, r3, #4
 8007296:	4413      	add	r3, r2
 8007298:	3304      	adds	r3, #4
 800729a:	881a      	ldrh	r2, [r3, #0]
 800729c:	78bb      	ldrb	r3, [r7, #2]
 800729e:	f042 0208 	orr.w	r2, r2, #8
 80072a2:	b291      	uxth	r1, r2
 80072a4:	4a24      	ldr	r2, [pc, #144]	; (8007338 <Service_Msg_Extr+0x364>)
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	4413      	add	r3, r2
 80072aa:	3304      	adds	r3, #4
 80072ac:	460a      	mov	r2, r1
 80072ae:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 80072b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80072b4:	3310      	adds	r3, #16
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	da00      	bge.n	80072bc <Service_Msg_Extr+0x2e8>
 80072ba:	3307      	adds	r3, #7
 80072bc:	10db      	asrs	r3, r3, #3
 80072be:	b29a      	uxth	r2, r3
 80072c0:	89fb      	ldrh	r3, [r7, #14]
 80072c2:	4413      	add	r3, r2
 80072c4:	81fb      	strh	r3, [r7, #14]
 80072c6:	89bb      	ldrh	r3, [r7, #12]
 80072c8:	3310      	adds	r3, #16
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	b21b      	sxth	r3, r3
 80072ce:	425a      	negs	r2, r3
 80072d0:	f003 0307 	and.w	r3, r3, #7
 80072d4:	f002 0207 	and.w	r2, r2, #7
 80072d8:	bf58      	it	pl
 80072da:	4253      	negpl	r3, r2
 80072dc:	b21b      	sxth	r3, r3
 80072de:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 80072e0:	78bb      	ldrb	r3, [r7, #2]
 80072e2:	4a15      	ldr	r2, [pc, #84]	; (8007338 <Service_Msg_Extr+0x364>)
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	4413      	add	r3, r2
 80072e8:	3304      	adds	r3, #4
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	f003 0320 	and.w	r3, r3, #32
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	f000 8126 	beq.w	8007542 <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80072f6:	89fb      	ldrh	r3, [r7, #14]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	441a      	add	r2, r3
 80072fc:	89bb      	ldrh	r3, [r7, #12]
 80072fe:	2108      	movs	r1, #8
 8007300:	4618      	mov	r0, r3
 8007302:	f7f9 f987 	bl	8000614 <ExtractBits>
 8007306:	4603      	mov	r3, r0
 8007308:	78ba      	ldrb	r2, [r7, #2]
 800730a:	b2d8      	uxtb	r0, r3
 800730c:	490d      	ldr	r1, [pc, #52]	; (8007344 <Service_Msg_Extr+0x370>)
 800730e:	4613      	mov	r3, r2
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	005b      	lsls	r3, r3, #1
 8007316:	440b      	add	r3, r1
 8007318:	3305      	adds	r3, #5
 800731a:	4602      	mov	r2, r0
 800731c:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 800731e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007322:	3308      	adds	r3, #8
 8007324:	2b00      	cmp	r3, #0
 8007326:	da0f      	bge.n	8007348 <Service_Msg_Extr+0x374>
 8007328:	3307      	adds	r3, #7
 800732a:	e00d      	b.n	8007348 <Service_Msg_Extr+0x374>
 800732c:	20002630 	.word	0x20002630
 8007330:	20002658 	.word	0x20002658
 8007334:	20002cb4 	.word	0x20002cb4
 8007338:	200028f4 	.word	0x200028f4
 800733c:	0802756c 	.word	0x0802756c
 8007340:	20000505 	.word	0x20000505
 8007344:	200028b8 	.word	0x200028b8
 8007348:	10db      	asrs	r3, r3, #3
 800734a:	b29a      	uxth	r2, r3
 800734c:	89fb      	ldrh	r3, [r7, #14]
 800734e:	4413      	add	r3, r2
 8007350:	81fb      	strh	r3, [r7, #14]
 8007352:	89bb      	ldrh	r3, [r7, #12]
 8007354:	3308      	adds	r3, #8
 8007356:	b29b      	uxth	r3, r3
 8007358:	b21b      	sxth	r3, r3
 800735a:	425a      	negs	r2, r3
 800735c:	f003 0307 	and.w	r3, r3, #7
 8007360:	f002 0207 	and.w	r2, r2, #7
 8007364:	bf58      	it	pl
 8007366:	4253      	negpl	r3, r2
 8007368:	b21b      	sxth	r3, r3
 800736a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800736c:	89fb      	ldrh	r3, [r7, #14]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	441a      	add	r2, r3
 8007372:	89bb      	ldrh	r3, [r7, #12]
 8007374:	2108      	movs	r1, #8
 8007376:	4618      	mov	r0, r3
 8007378:	f7f9 f94c 	bl	8000614 <ExtractBits>
 800737c:	4603      	mov	r3, r0
 800737e:	78ba      	ldrb	r2, [r7, #2]
 8007380:	b2d8      	uxtb	r0, r3
 8007382:	4989      	ldr	r1, [pc, #548]	; (80075a8 <Service_Msg_Extr+0x5d4>)
 8007384:	4613      	mov	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	440b      	add	r3, r1
 800738e:	3304      	adds	r3, #4
 8007390:	4602      	mov	r2, r0
 8007392:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8007394:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007398:	3308      	adds	r3, #8
 800739a:	2b00      	cmp	r3, #0
 800739c:	da00      	bge.n	80073a0 <Service_Msg_Extr+0x3cc>
 800739e:	3307      	adds	r3, #7
 80073a0:	10db      	asrs	r3, r3, #3
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	89fb      	ldrh	r3, [r7, #14]
 80073a6:	4413      	add	r3, r2
 80073a8:	81fb      	strh	r3, [r7, #14]
 80073aa:	89bb      	ldrh	r3, [r7, #12]
 80073ac:	3308      	adds	r3, #8
 80073ae:	b29b      	uxth	r3, r3
 80073b0:	b21b      	sxth	r3, r3
 80073b2:	425a      	negs	r2, r3
 80073b4:	f003 0307 	and.w	r3, r3, #7
 80073b8:	f002 0207 	and.w	r2, r2, #7
 80073bc:	bf58      	it	pl
 80073be:	4253      	negpl	r3, r2
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073c4:	89fb      	ldrh	r3, [r7, #14]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	441a      	add	r2, r3
 80073ca:	89bb      	ldrh	r3, [r7, #12]
 80073cc:	2108      	movs	r1, #8
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7f9 f920 	bl	8000614 <ExtractBits>
 80073d4:	4603      	mov	r3, r0
 80073d6:	78ba      	ldrb	r2, [r7, #2]
 80073d8:	b2d8      	uxtb	r0, r3
 80073da:	4973      	ldr	r1, [pc, #460]	; (80075a8 <Service_Msg_Extr+0x5d4>)
 80073dc:	4613      	mov	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	440b      	add	r3, r1
 80073e6:	3303      	adds	r3, #3
 80073e8:	4602      	mov	r2, r0
 80073ea:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 80073ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073f0:	3308      	adds	r3, #8
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	da00      	bge.n	80073f8 <Service_Msg_Extr+0x424>
 80073f6:	3307      	adds	r3, #7
 80073f8:	10db      	asrs	r3, r3, #3
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	89fb      	ldrh	r3, [r7, #14]
 80073fe:	4413      	add	r3, r2
 8007400:	81fb      	strh	r3, [r7, #14]
 8007402:	89bb      	ldrh	r3, [r7, #12]
 8007404:	3308      	adds	r3, #8
 8007406:	b29b      	uxth	r3, r3
 8007408:	b21b      	sxth	r3, r3
 800740a:	425a      	negs	r2, r3
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	f002 0207 	and.w	r2, r2, #7
 8007414:	bf58      	it	pl
 8007416:	4253      	negpl	r3, r2
 8007418:	b21b      	sxth	r3, r3
 800741a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800741c:	89fb      	ldrh	r3, [r7, #14]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	441a      	add	r2, r3
 8007422:	89bb      	ldrh	r3, [r7, #12]
 8007424:	2108      	movs	r1, #8
 8007426:	4618      	mov	r0, r3
 8007428:	f7f9 f8f4 	bl	8000614 <ExtractBits>
 800742c:	4603      	mov	r3, r0
 800742e:	78ba      	ldrb	r2, [r7, #2]
 8007430:	b2d8      	uxtb	r0, r3
 8007432:	495d      	ldr	r1, [pc, #372]	; (80075a8 <Service_Msg_Extr+0x5d4>)
 8007434:	4613      	mov	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	4413      	add	r3, r2
 800743a:	005b      	lsls	r3, r3, #1
 800743c:	440b      	add	r3, r1
 800743e:	4602      	mov	r2, r0
 8007440:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8007442:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007446:	3308      	adds	r3, #8
 8007448:	2b00      	cmp	r3, #0
 800744a:	da00      	bge.n	800744e <Service_Msg_Extr+0x47a>
 800744c:	3307      	adds	r3, #7
 800744e:	10db      	asrs	r3, r3, #3
 8007450:	b29a      	uxth	r2, r3
 8007452:	89fb      	ldrh	r3, [r7, #14]
 8007454:	4413      	add	r3, r2
 8007456:	81fb      	strh	r3, [r7, #14]
 8007458:	89bb      	ldrh	r3, [r7, #12]
 800745a:	3308      	adds	r3, #8
 800745c:	b29b      	uxth	r3, r3
 800745e:	b21b      	sxth	r3, r3
 8007460:	425a      	negs	r2, r3
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	f002 0207 	and.w	r2, r2, #7
 800746a:	bf58      	it	pl
 800746c:	4253      	negpl	r3, r2
 800746e:	b21b      	sxth	r3, r3
 8007470:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007472:	89fb      	ldrh	r3, [r7, #14]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	441a      	add	r2, r3
 8007478:	89bb      	ldrh	r3, [r7, #12]
 800747a:	2108      	movs	r1, #8
 800747c:	4618      	mov	r0, r3
 800747e:	f7f9 f8c9 	bl	8000614 <ExtractBits>
 8007482:	4603      	mov	r3, r0
 8007484:	78ba      	ldrb	r2, [r7, #2]
 8007486:	b2d8      	uxtb	r0, r3
 8007488:	4947      	ldr	r1, [pc, #284]	; (80075a8 <Service_Msg_Extr+0x5d4>)
 800748a:	4613      	mov	r3, r2
 800748c:	005b      	lsls	r3, r3, #1
 800748e:	4413      	add	r3, r2
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	440b      	add	r3, r1
 8007494:	3301      	adds	r3, #1
 8007496:	4602      	mov	r2, r0
 8007498:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 800749a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800749e:	3308      	adds	r3, #8
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	da00      	bge.n	80074a6 <Service_Msg_Extr+0x4d2>
 80074a4:	3307      	adds	r3, #7
 80074a6:	10db      	asrs	r3, r3, #3
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	89fb      	ldrh	r3, [r7, #14]
 80074ac:	4413      	add	r3, r2
 80074ae:	81fb      	strh	r3, [r7, #14]
 80074b0:	89bb      	ldrh	r3, [r7, #12]
 80074b2:	3308      	adds	r3, #8
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	b21b      	sxth	r3, r3
 80074b8:	425a      	negs	r2, r3
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	f002 0207 	and.w	r2, r2, #7
 80074c2:	bf58      	it	pl
 80074c4:	4253      	negpl	r3, r2
 80074c6:	b21b      	sxth	r3, r3
 80074c8:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80074ca:	89fb      	ldrh	r3, [r7, #14]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	441a      	add	r2, r3
 80074d0:	89bb      	ldrh	r3, [r7, #12]
 80074d2:	2108      	movs	r1, #8
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7f9 f89d 	bl	8000614 <ExtractBits>
 80074da:	4603      	mov	r3, r0
 80074dc:	78ba      	ldrb	r2, [r7, #2]
 80074de:	b2d8      	uxtb	r0, r3
 80074e0:	4931      	ldr	r1, [pc, #196]	; (80075a8 <Service_Msg_Extr+0x5d4>)
 80074e2:	4613      	mov	r3, r2
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	4413      	add	r3, r2
 80074e8:	005b      	lsls	r3, r3, #1
 80074ea:	440b      	add	r3, r1
 80074ec:	3302      	adds	r3, #2
 80074ee:	4602      	mov	r2, r0
 80074f0:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 80074f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074f6:	3308      	adds	r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da00      	bge.n	80074fe <Service_Msg_Extr+0x52a>
 80074fc:	3307      	adds	r3, #7
 80074fe:	10db      	asrs	r3, r3, #3
 8007500:	b29a      	uxth	r2, r3
 8007502:	89fb      	ldrh	r3, [r7, #14]
 8007504:	4413      	add	r3, r2
 8007506:	81fb      	strh	r3, [r7, #14]
 8007508:	89bb      	ldrh	r3, [r7, #12]
 800750a:	3308      	adds	r3, #8
 800750c:	b29b      	uxth	r3, r3
 800750e:	b21b      	sxth	r3, r3
 8007510:	425a      	negs	r2, r3
 8007512:	f003 0307 	and.w	r3, r3, #7
 8007516:	f002 0207 	and.w	r2, r2, #7
 800751a:	bf58      	it	pl
 800751c:	4253      	negpl	r3, r2
 800751e:	b21b      	sxth	r3, r3
 8007520:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8007522:	78bb      	ldrb	r3, [r7, #2]
 8007524:	4618      	mov	r0, r3
 8007526:	f002 f815 	bl	8009554 <IS_MLK_EIPC_TIME_MATCHING>
 800752a:	4603      	mov	r3, r0
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <Service_Msg_Extr+0x566>
 8007530:	78bb      	ldrb	r3, [r7, #2]
 8007532:	4a1e      	ldr	r2, [pc, #120]	; (80075ac <Service_Msg_Extr+0x5d8>)
 8007534:	2100      	movs	r1, #0
 8007536:	54d1      	strb	r1, [r2, r3]
 8007538:	e003      	b.n	8007542 <Service_Msg_Extr+0x56e>
 800753a:	78bb      	ldrb	r3, [r7, #2]
 800753c:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <Service_Msg_Extr+0x5d8>)
 800753e:	2101      	movs	r1, #1
 8007540:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8007542:	78bb      	ldrb	r3, [r7, #2]
 8007544:	4a1a      	ldr	r2, [pc, #104]	; (80075b0 <Service_Msg_Extr+0x5dc>)
 8007546:	011b      	lsls	r3, r3, #4
 8007548:	4413      	add	r3, r2
 800754a:	3304      	adds	r3, #4
 800754c:	881b      	ldrh	r3, [r3, #0]
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b00      	cmp	r3, #0
 8007554:	d001      	beq.n	800755a <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 8007556:	2301      	movs	r3, #1
 8007558:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 800755a:	787a      	ldrb	r2, [r7, #1]
 800755c:	78bb      	ldrb	r3, [r7, #2]
 800755e:	4611      	mov	r1, r2
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff f8d3 	bl	800670c <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 8007566:	78bb      	ldrb	r3, [r7, #2]
 8007568:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <Service_Msg_Extr+0x5e0>)
 800756a:	4413      	add	r3, r2
 800756c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007570:	2b02      	cmp	r3, #2
 8007572:	d127      	bne.n	80075c4 <Service_Msg_Extr+0x5f0>
 8007574:	78bb      	ldrb	r3, [r7, #2]
 8007576:	4a10      	ldr	r2, [pc, #64]	; (80075b8 <Service_Msg_Extr+0x5e4>)
 8007578:	5cd3      	ldrb	r3, [r2, r3]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d822      	bhi.n	80075c4 <Service_Msg_Extr+0x5f0>
 800757e:	78ba      	ldrb	r2, [r7, #2]
 8007580:	490e      	ldr	r1, [pc, #56]	; (80075bc <Service_Msg_Extr+0x5e8>)
 8007582:	4613      	mov	r3, r2
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	4413      	add	r3, r2
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	440b      	add	r3, r1
 800758c:	3305      	adds	r3, #5
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	f003 0301 	and.w	r3, r3, #1
 8007594:	2b00      	cmp	r3, #0
 8007596:	d115      	bne.n	80075c4 <Service_Msg_Extr+0x5f0>
 8007598:	78bb      	ldrb	r3, [r7, #2]
 800759a:	4a09      	ldr	r2, [pc, #36]	; (80075c0 <Service_Msg_Extr+0x5ec>)
 800759c:	5cd3      	ldrb	r3, [r2, r3]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d110      	bne.n	80075c4 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 80075a2:	2300      	movs	r3, #0
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e037      	b.n	8007618 <Service_Msg_Extr+0x644>
 80075a8:	200028b8 	.word	0x200028b8
 80075ac:	20002764 	.word	0x20002764
 80075b0:	200028f4 	.word	0x200028f4
 80075b4:	20000504 	.word	0x20000504
 80075b8:	20002544 	.word	0x20002544
 80075bc:	20002ad4 	.word	0x20002ad4
 80075c0:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80075c4:	78bb      	ldrb	r3, [r7, #2]
 80075c6:	4aa9      	ldr	r2, [pc, #676]	; (800786c <Service_Msg_Extr+0x898>)
 80075c8:	4413      	add	r3, r2
 80075ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d122      	bne.n	8007618 <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 80075d2:	78bb      	ldrb	r3, [r7, #2]
 80075d4:	4aa5      	ldr	r2, [pc, #660]	; (800786c <Service_Msg_Extr+0x898>)
 80075d6:	3366      	adds	r3, #102	; 0x66
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	4413      	add	r3, r2
 80075dc:	6859      	ldr	r1, [r3, #4]
 80075de:	78bb      	ldrb	r3, [r7, #2]
 80075e0:	4aa3      	ldr	r2, [pc, #652]	; (8007870 <Service_Msg_Extr+0x89c>)
 80075e2:	5cd3      	ldrb	r3, [r2, r3]
 80075e4:	461a      	mov	r2, r3
 80075e6:	48a3      	ldr	r0, [pc, #652]	; (8007874 <Service_Msg_Extr+0x8a0>)
 80075e8:	f01e fa38 	bl	8025a5c <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 80075ec:	78bb      	ldrb	r3, [r7, #2]
 80075ee:	4aa2      	ldr	r2, [pc, #648]	; (8007878 <Service_Msg_Extr+0x8a4>)
 80075f0:	5cd3      	ldrb	r3, [r2, r3]
 80075f2:	4619      	mov	r1, r3
 80075f4:	48a1      	ldr	r0, [pc, #644]	; (800787c <Service_Msg_Extr+0x8a8>)
 80075f6:	f01e fa31 	bl	8025a5c <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 80075fa:	78ba      	ldrb	r2, [r7, #2]
 80075fc:	49a0      	ldr	r1, [pc, #640]	; (8007880 <Service_Msg_Extr+0x8ac>)
 80075fe:	4613      	mov	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	440b      	add	r3, r1
 8007608:	3305      	adds	r3, #5
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	f003 0301 	and.w	r3, r3, #1
 8007610:	4619      	mov	r1, r3
 8007612:	489c      	ldr	r0, [pc, #624]	; (8007884 <Service_Msg_Extr+0x8b0>)
 8007614:	f01e fa22 	bl	8025a5c <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8007618:	7ffb      	ldrb	r3, [r7, #31]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d179      	bne.n	8007712 <Service_Msg_Extr+0x73e>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800761e:	78ba      	ldrb	r2, [r7, #2]
 8007620:	4613      	mov	r3, r2
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	4a97      	ldr	r2, [pc, #604]	; (8007888 <Service_Msg_Extr+0x8b4>)
 800762a:	4413      	add	r3, r2
 800762c:	3301      	adds	r3, #1
 800762e:	2210      	movs	r2, #16
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f01e f92a 	bl	802588c <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8007638:	78ba      	ldrb	r2, [r7, #2]
 800763a:	4613      	mov	r3, r2
 800763c:	009b      	lsls	r3, r3, #2
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4a91      	ldr	r2, [pc, #580]	; (8007888 <Service_Msg_Extr+0x8b4>)
 8007644:	1898      	adds	r0, r3, r2
 8007646:	78ba      	ldrb	r2, [r7, #2]
 8007648:	4613      	mov	r3, r2
 800764a:	009b      	lsls	r3, r3, #2
 800764c:	4413      	add	r3, r2
 800764e:	009b      	lsls	r3, r3, #2
 8007650:	4a8e      	ldr	r2, [pc, #568]	; (800788c <Service_Msg_Extr+0x8b8>)
 8007652:	4413      	add	r3, r2
 8007654:	2214      	movs	r2, #20
 8007656:	4619      	mov	r1, r3
 8007658:	f01e f8f0 	bl	802583c <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 800765c:	78bb      	ldrb	r3, [r7, #2]
 800765e:	4a8c      	ldr	r2, [pc, #560]	; (8007890 <Service_Msg_Extr+0x8bc>)
 8007660:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8007664:	78ba      	ldrb	r2, [r7, #2]
 8007666:	4888      	ldr	r0, [pc, #544]	; (8007888 <Service_Msg_Extr+0x8b4>)
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4403      	add	r3, r0
 8007672:	3312      	adds	r3, #18
 8007674:	881b      	ldrh	r3, [r3, #0]
 8007676:	4299      	cmp	r1, r3
 8007678:	d04b      	beq.n	8007712 <Service_Msg_Extr+0x73e>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800767a:	78ba      	ldrb	r2, [r7, #2]
 800767c:	78b9      	ldrb	r1, [r7, #2]
 800767e:	4882      	ldr	r0, [pc, #520]	; (8007888 <Service_Msg_Extr+0x8b4>)
 8007680:	4613      	mov	r3, r2
 8007682:	009b      	lsls	r3, r3, #2
 8007684:	4413      	add	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4403      	add	r3, r0
 800768a:	3312      	adds	r3, #18
 800768c:	881a      	ldrh	r2, [r3, #0]
 800768e:	4b80      	ldr	r3, [pc, #512]	; (8007890 <Service_Msg_Extr+0x8bc>)
 8007690:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8007694:	2214      	movs	r2, #20
 8007696:	2100      	movs	r1, #0
 8007698:	487e      	ldr	r0, [pc, #504]	; (8007894 <Service_Msg_Extr+0x8c0>)
 800769a:	f01e f8f7 	bl	802588c <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800769e:	78ba      	ldrb	r2, [r7, #2]
 80076a0:	4613      	mov	r3, r2
 80076a2:	009b      	lsls	r3, r3, #2
 80076a4:	4413      	add	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4a77      	ldr	r2, [pc, #476]	; (8007888 <Service_Msg_Extr+0x8b4>)
 80076aa:	4413      	add	r3, r2
 80076ac:	2214      	movs	r2, #20
 80076ae:	4619      	mov	r1, r3
 80076b0:	4878      	ldr	r0, [pc, #480]	; (8007894 <Service_Msg_Extr+0x8c0>)
 80076b2:	f01e f8c3 	bl	802583c <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80076b6:	f44f 7002 	mov.w	r0, #520	; 0x208
 80076ba:	f009 f9fd 	bl	8010ab8 <TransmitCanPkt>
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80076be:	78b9      	ldrb	r1, [r7, #2]
 80076c0:	78ba      	ldrb	r2, [r7, #2]
 80076c2:	4871      	ldr	r0, [pc, #452]	; (8007888 <Service_Msg_Extr+0x8b4>)
 80076c4:	460b      	mov	r3, r1
 80076c6:	009b      	lsls	r3, r3, #2
 80076c8:	440b      	add	r3, r1
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4403      	add	r3, r0
 80076ce:	3312      	adds	r3, #18
 80076d0:	8818      	ldrh	r0, [r3, #0]
 80076d2:	4971      	ldr	r1, [pc, #452]	; (8007898 <Service_Msg_Extr+0x8c4>)
 80076d4:	4613      	mov	r3, r2
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	4413      	add	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	440b      	add	r3, r1
 80076de:	3306      	adds	r3, #6
 80076e0:	4602      	mov	r2, r0
 80076e2:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 80076e4:	78bb      	ldrb	r3, [r7, #2]
 80076e6:	4a6d      	ldr	r2, [pc, #436]	; (800789c <Service_Msg_Extr+0x8c8>)
 80076e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d110      	bne.n	8007712 <Service_Msg_Extr+0x73e>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80076f0:	78bb      	ldrb	r3, [r7, #2]
 80076f2:	011b      	lsls	r3, r3, #4
 80076f4:	4a6a      	ldr	r2, [pc, #424]	; (80078a0 <Service_Msg_Extr+0x8cc>)
 80076f6:	4413      	add	r3, r2
 80076f8:	1c98      	adds	r0, r3, #2
 80076fa:	78ba      	ldrb	r2, [r7, #2]
 80076fc:	4613      	mov	r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4413      	add	r3, r2
 8007702:	009b      	lsls	r3, r3, #2
 8007704:	4a60      	ldr	r2, [pc, #384]	; (8007888 <Service_Msg_Extr+0x8b4>)
 8007706:	4413      	add	r3, r2
 8007708:	3301      	adds	r3, #1
 800770a:	2210      	movs	r2, #16
 800770c:	4619      	mov	r1, r3
 800770e:	f01e f895 	bl	802583c <memcpy>
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8007712:	78ba      	ldrb	r2, [r7, #2]
 8007714:	4960      	ldr	r1, [pc, #384]	; (8007898 <Service_Msg_Extr+0x8c4>)
 8007716:	4613      	mov	r3, r2
 8007718:	005b      	lsls	r3, r3, #1
 800771a:	4413      	add	r3, r2
 800771c:	00db      	lsls	r3, r3, #3
 800771e:	440b      	add	r3, r1
 8007720:	3314      	adds	r3, #20
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8007726:	78ba      	ldrb	r2, [r7, #2]
 8007728:	495b      	ldr	r1, [pc, #364]	; (8007898 <Service_Msg_Extr+0x8c4>)
 800772a:	4613      	mov	r3, r2
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4413      	add	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	440b      	add	r3, r1
 8007734:	3305      	adds	r3, #5
 8007736:	2206      	movs	r2, #6
 8007738:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800773a:	78ba      	ldrb	r2, [r7, #2]
 800773c:	4956      	ldr	r1, [pc, #344]	; (8007898 <Service_Msg_Extr+0x8c4>)
 800773e:	4613      	mov	r3, r2
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	4413      	add	r3, r2
 8007744:	00db      	lsls	r3, r3, #3
 8007746:	440b      	add	r3, r1
 8007748:	78ba      	ldrb	r2, [r7, #2]
 800774a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800774c:	78ba      	ldrb	r2, [r7, #2]
 800774e:	4952      	ldr	r1, [pc, #328]	; (8007898 <Service_Msg_Extr+0x8c4>)
 8007750:	4613      	mov	r3, r2
 8007752:	005b      	lsls	r3, r3, #1
 8007754:	4413      	add	r3, r2
 8007756:	00db      	lsls	r3, r3, #3
 8007758:	440b      	add	r3, r1
 800775a:	3301      	adds	r3, #1
 800775c:	2201      	movs	r2, #1
 800775e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8007760:	78ba      	ldrb	r2, [r7, #2]
 8007762:	494d      	ldr	r1, [pc, #308]	; (8007898 <Service_Msg_Extr+0x8c4>)
 8007764:	4613      	mov	r3, r2
 8007766:	005b      	lsls	r3, r3, #1
 8007768:	4413      	add	r3, r2
 800776a:	00db      	lsls	r3, r3, #3
 800776c:	440b      	add	r3, r1
 800776e:	3302      	adds	r3, #2
 8007770:	7ffa      	ldrb	r2, [r7, #31]
 8007772:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007774:	2218      	movs	r2, #24
 8007776:	2100      	movs	r1, #0
 8007778:	484a      	ldr	r0, [pc, #296]	; (80078a4 <Service_Msg_Extr+0x8d0>)
 800777a:	f01e f887 	bl	802588c <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800777e:	78ba      	ldrb	r2, [r7, #2]
 8007780:	4613      	mov	r3, r2
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	4413      	add	r3, r2
 8007786:	00db      	lsls	r3, r3, #3
 8007788:	4a43      	ldr	r2, [pc, #268]	; (8007898 <Service_Msg_Extr+0x8c4>)
 800778a:	4413      	add	r3, r2
 800778c:	2218      	movs	r2, #24
 800778e:	4619      	mov	r1, r3
 8007790:	4844      	ldr	r0, [pc, #272]	; (80078a4 <Service_Msg_Extr+0x8d0>)
 8007792:	f01e f853 	bl	802583c <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8007796:	f240 2002 	movw	r0, #514	; 0x202
 800779a:	f009 f98d 	bl	8010ab8 <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800779e:	78ba      	ldrb	r2, [r7, #2]
 80077a0:	493d      	ldr	r1, [pc, #244]	; (8007898 <Service_Msg_Extr+0x8c4>)
 80077a2:	4613      	mov	r3, r2
 80077a4:	005b      	lsls	r3, r3, #1
 80077a6:	4413      	add	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	440b      	add	r3, r1
 80077ac:	3301      	adds	r3, #1
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80077b2:	78bb      	ldrb	r3, [r7, #2]
 80077b4:	493c      	ldr	r1, [pc, #240]	; (80078a8 <Service_Msg_Extr+0x8d4>)
 80077b6:	693a      	ldr	r2, [r7, #16]
 80077b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 80077bc:	7ffb      	ldrb	r3, [r7, #31]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d11d      	bne.n	80077fe <Service_Msg_Extr+0x82a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80077c2:	78bb      	ldrb	r3, [r7, #2]
 80077c4:	4939      	ldr	r1, [pc, #228]	; (80078ac <Service_Msg_Extr+0x8d8>)
 80077c6:	693a      	ldr	r2, [r7, #16]
 80077c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 80077cc:	78bb      	ldrb	r3, [r7, #2]
 80077ce:	4a38      	ldr	r2, [pc, #224]	; (80078b0 <Service_Msg_Extr+0x8dc>)
 80077d0:	2101      	movs	r1, #1
 80077d2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 80077d4:	78ba      	ldrb	r2, [r7, #2]
 80077d6:	4937      	ldr	r1, [pc, #220]	; (80078b4 <Service_Msg_Extr+0x8e0>)
 80077d8:	4613      	mov	r3, r2
 80077da:	005b      	lsls	r3, r3, #1
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	3301      	adds	r3, #1
 80077e4:	2201      	movs	r2, #1
 80077e6:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 80077e8:	78ba      	ldrb	r2, [r7, #2]
 80077ea:	4932      	ldr	r1, [pc, #200]	; (80078b4 <Service_Msg_Extr+0x8e0>)
 80077ec:	4613      	mov	r3, r2
 80077ee:	005b      	lsls	r3, r3, #1
 80077f0:	4413      	add	r3, r2
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	3304      	adds	r3, #4
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	601a      	str	r2, [r3, #0]
 80077fc:	e02e      	b.n	800785c <Service_Msg_Extr+0x888>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 80077fe:	78bb      	ldrb	r3, [r7, #2]
 8007800:	4a2b      	ldr	r2, [pc, #172]	; (80078b0 <Service_Msg_Extr+0x8dc>)
 8007802:	2100      	movs	r1, #0
 8007804:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8007806:	78ba      	ldrb	r2, [r7, #2]
 8007808:	492a      	ldr	r1, [pc, #168]	; (80078b4 <Service_Msg_Extr+0x8e0>)
 800780a:	4613      	mov	r3, r2
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	009b      	lsls	r3, r3, #2
 8007812:	440b      	add	r3, r1
 8007814:	3308      	adds	r3, #8
 8007816:	693a      	ldr	r2, [r7, #16]
 8007818:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 800781a:	78ba      	ldrb	r2, [r7, #2]
 800781c:	4925      	ldr	r1, [pc, #148]	; (80078b4 <Service_Msg_Extr+0x8e0>)
 800781e:	4613      	mov	r3, r2
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	3301      	adds	r3, #1
 800782a:	2200      	movs	r2, #0
 800782c:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800782e:	78ba      	ldrb	r2, [r7, #2]
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a13      	ldr	r2, [pc, #76]	; (8007888 <Service_Msg_Extr+0x8b4>)
 800783a:	4413      	add	r3, r2
 800783c:	3301      	adds	r3, #1
 800783e:	2210      	movs	r2, #16
 8007840:	2100      	movs	r1, #0
 8007842:	4618      	mov	r0, r3
 8007844:	f01e f822 	bl	802588c <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 8007848:	78ba      	ldrb	r2, [r7, #2]
 800784a:	490f      	ldr	r1, [pc, #60]	; (8007888 <Service_Msg_Extr+0x8b4>)
 800784c:	4613      	mov	r3, r2
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	009b      	lsls	r3, r3, #2
 8007854:	440b      	add	r3, r1
 8007856:	3312      	adds	r3, #18
 8007858:	2200      	movs	r2, #0
 800785a:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800785c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007860:	4815      	ldr	r0, [pc, #84]	; (80078b8 <Service_Msg_Extr+0x8e4>)
 8007862:	f013 fdda 	bl	801b41a <HAL_GPIO_TogglePin>

}
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	20000504 	.word	0x20000504
 8007870:	20002544 	.word	0x20002544
 8007874:	08027ef4 	.word	0x08027ef4
 8007878:	20002538 	.word	0x20002538
 800787c:	08027f04 	.word	0x08027f04
 8007880:	20002ad4 	.word	0x20002ad4
 8007884:	08027f1c 	.word	0x08027f1c
 8007888:	20003598 	.word	0x20003598
 800788c:	200034d0 	.word	0x200034d0
 8007890:	2000258c 	.word	0x2000258c
 8007894:	20003728 	.word	0x20003728
 8007898:	20002da4 	.word	0x20002da4
 800789c:	20002550 	.word	0x20002550
 80078a0:	20002770 	.word	0x20002770
 80078a4:	20002f84 	.word	0x20002f84
 80078a8:	200024b8 	.word	0x200024b8
 80078ac:	200025a0 	.word	0x200025a0
 80078b0:	200025f0 	.word	0x200025f0
 80078b4:	200033e0 	.word	0x200033e0
 80078b8:	40021c00 	.word	0x40021c00

080078bc <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b095      	sub	sp, #84	; 0x54
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	4603      	mov	r3, r0
 80078c4:	460a      	mov	r2, r1
 80078c6:	71fb      	strb	r3, [r7, #7]
 80078c8:	4613      	mov	r3, r2
 80078ca:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 80078cc:	2300      	movs	r3, #0
 80078ce:	60fb      	str	r3, [r7, #12]
 80078d0:	f107 0310 	add.w	r3, r7, #16
 80078d4:	2238      	movs	r2, #56	; 0x38
 80078d6:	2100      	movs	r1, #0
 80078d8:	4618      	mov	r0, r3
 80078da:	f01d ffd7 	bl	802588c <memset>

	BITSTUFFINIT(0, 0);
 80078de:	2300      	movs	r3, #0
 80078e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80078e4:	2300      	movs	r3, #0
 80078e6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 80078ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80078ee:	f107 020c 	add.w	r2, r7, #12
 80078f2:	441a      	add	r2, r3
 80078f4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80078f8:	23f4      	movs	r3, #244	; 0xf4
 80078fa:	2108      	movs	r1, #8
 80078fc:	f7f8 ff16 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007900:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007904:	3308      	adds	r3, #8
 8007906:	2b00      	cmp	r3, #0
 8007908:	da00      	bge.n	800790c <Send_Service_Signal_Message+0x50>
 800790a:	3307      	adds	r3, #7
 800790c:	10db      	asrs	r3, r3, #3
 800790e:	b29a      	uxth	r2, r3
 8007910:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007914:	4413      	add	r3, r2
 8007916:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800791a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800791e:	3308      	adds	r3, #8
 8007920:	b29b      	uxth	r3, r3
 8007922:	b21b      	sxth	r3, r3
 8007924:	425a      	negs	r2, r3
 8007926:	f003 0307 	and.w	r3, r3, #7
 800792a:	f002 0207 	and.w	r2, r2, #7
 800792e:	bf58      	it	pl
 8007930:	4253      	negpl	r3, r2
 8007932:	b21b      	sxth	r3, r3
 8007934:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8007938:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800793c:	f107 020c 	add.w	r2, r7, #12
 8007940:	441a      	add	r2, r3
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	497b      	ldr	r1, [pc, #492]	; (8007b34 <Send_Service_Signal_Message+0x278>)
 8007946:	3366      	adds	r3, #102	; 0x66
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	440b      	add	r3, r1
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007952:	2110      	movs	r1, #16
 8007954:	f7f8 feea 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007958:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800795c:	3310      	adds	r3, #16
 800795e:	2b00      	cmp	r3, #0
 8007960:	da00      	bge.n	8007964 <Send_Service_Signal_Message+0xa8>
 8007962:	3307      	adds	r3, #7
 8007964:	10db      	asrs	r3, r3, #3
 8007966:	b29a      	uxth	r2, r3
 8007968:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800796c:	4413      	add	r3, r2
 800796e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007972:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007976:	3310      	adds	r3, #16
 8007978:	b29b      	uxth	r3, r3
 800797a:	b21b      	sxth	r3, r3
 800797c:	425a      	negs	r2, r3
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	f002 0207 	and.w	r2, r2, #7
 8007986:	bf58      	it	pl
 8007988:	4253      	negpl	r3, r2
 800798a:	b21b      	sxth	r3, r3
 800798c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8007990:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007994:	f107 020c 	add.w	r2, r7, #12
 8007998:	441a      	add	r2, r3
 800799a:	79fb      	ldrb	r3, [r7, #7]
 800799c:	4965      	ldr	r1, [pc, #404]	; (8007b34 <Send_Service_Signal_Message+0x278>)
 800799e:	3370      	adds	r3, #112	; 0x70
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	440b      	add	r3, r1
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80079aa:	2110      	movs	r1, #16
 80079ac:	f7f8 febe 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80079b0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80079b4:	3310      	adds	r3, #16
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	da00      	bge.n	80079bc <Send_Service_Signal_Message+0x100>
 80079ba:	3307      	adds	r3, #7
 80079bc:	10db      	asrs	r3, r3, #3
 80079be:	b29a      	uxth	r2, r3
 80079c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079c4:	4413      	add	r3, r2
 80079c6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079ce:	3310      	adds	r3, #16
 80079d0:	b29b      	uxth	r3, r3
 80079d2:	b21b      	sxth	r3, r3
 80079d4:	425a      	negs	r2, r3
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	f002 0207 	and.w	r2, r2, #7
 80079de:	bf58      	it	pl
 80079e0:	4253      	negpl	r3, r2
 80079e2:	b21b      	sxth	r3, r3
 80079e4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80079e8:	4b53      	ldr	r3, [pc, #332]	; (8007b38 <Send_Service_Signal_Message+0x27c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	089b      	lsrs	r3, r3, #2
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d035      	beq.n	8007a62 <Send_Service_Signal_Message+0x1a6>
 80079f6:	4b50      	ldr	r3, [pc, #320]	; (8007b38 <Send_Service_Signal_Message+0x27c>)
 80079f8:	791b      	ldrb	r3, [r3, #4]
 80079fa:	79fa      	ldrb	r2, [r7, #7]
 80079fc:	429a      	cmp	r2, r3
 80079fe:	d130      	bne.n	8007a62 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007a06:	484d      	ldr	r0, [pc, #308]	; (8007b3c <Send_Service_Signal_Message+0x280>)
 8007a08:	f015 fcd0 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	4b4c      	ldr	r3, [pc, #304]	; (8007b40 <Send_Service_Signal_Message+0x284>)
 8007a10:	fba3 1302 	umull	r1, r3, r3, r2
 8007a14:	099b      	lsrs	r3, r3, #6
 8007a16:	21c8      	movs	r1, #200	; 0xc8
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007a22:	4848      	ldr	r0, [pc, #288]	; (8007b44 <Send_Service_Signal_Message+0x288>)
 8007a24:	f01e f8b6 	bl	8025b94 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4a47      	ldr	r2, [pc, #284]	; (8007b48 <Send_Service_Signal_Message+0x28c>)
 8007a2c:	011b      	lsls	r3, r3, #4
 8007a2e:	4413      	add	r3, r2
 8007a30:	3301      	adds	r3, #1
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	4619      	mov	r1, r3
 8007a36:	4845      	ldr	r0, [pc, #276]	; (8007b4c <Send_Service_Signal_Message+0x290>)
 8007a38:	f01e f810 	bl	8025a5c <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007a3c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a40:	4619      	mov	r1, r3
 8007a42:	4843      	ldr	r0, [pc, #268]	; (8007b50 <Send_Service_Signal_Message+0x294>)
 8007a44:	f01e f80a 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a4c:	f107 020c 	add.w	r2, r7, #12
 8007a50:	441a      	add	r2, r3
 8007a52:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007a56:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a5a:	2108      	movs	r1, #8
 8007a5c:	f7f8 fe66 	bl	800072c <InsertBits>
	{
 8007a60:	e00f      	b.n	8007a82 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007a62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a66:	f107 020c 	add.w	r2, r7, #12
 8007a6a:	441a      	add	r2, r3
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	4936      	ldr	r1, [pc, #216]	; (8007b48 <Send_Service_Signal_Message+0x28c>)
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	440b      	add	r3, r1
 8007a74:	3301      	adds	r3, #1
 8007a76:	781b      	ldrb	r3, [r3, #0]
 8007a78:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a7c:	2108      	movs	r1, #8
 8007a7e:	f7f8 fe55 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007a82:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007a86:	3308      	adds	r3, #8
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	da00      	bge.n	8007a8e <Send_Service_Signal_Message+0x1d2>
 8007a8c:	3307      	adds	r3, #7
 8007a8e:	10db      	asrs	r3, r3, #3
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a96:	4413      	add	r3, r2
 8007a98:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	b21b      	sxth	r3, r3
 8007aa6:	425a      	negs	r2, r3
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	f002 0207 	and.w	r2, r2, #7
 8007ab0:	bf58      	it	pl
 8007ab2:	4253      	negpl	r3, r2
 8007ab4:	b21b      	sxth	r3, r3
 8007ab6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007aba:	4b1f      	ldr	r3, [pc, #124]	; (8007b38 <Send_Service_Signal_Message+0x27c>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	08db      	lsrs	r3, r3, #3
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d04b      	beq.n	8007b60 <Send_Service_Signal_Message+0x2a4>
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <Send_Service_Signal_Message+0x27c>)
 8007aca:	791b      	ldrb	r3, [r3, #4]
 8007acc:	79fa      	ldrb	r2, [r7, #7]
 8007ace:	429a      	cmp	r2, r3
 8007ad0:	d146      	bne.n	8007b60 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007ad8:	4818      	ldr	r0, [pc, #96]	; (8007b3c <Send_Service_Signal_Message+0x280>)
 8007ada:	f015 fc67 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8007ade:	4602      	mov	r2, r0
 8007ae0:	4b17      	ldr	r3, [pc, #92]	; (8007b40 <Send_Service_Signal_Message+0x284>)
 8007ae2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ae6:	099b      	lsrs	r3, r3, #6
 8007ae8:	21c8      	movs	r1, #200	; 0xc8
 8007aea:	fb01 f303 	mul.w	r3, r1, r3
 8007aee:	1ad3      	subs	r3, r2, r3
 8007af0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007af4:	4817      	ldr	r0, [pc, #92]	; (8007b54 <Send_Service_Signal_Message+0x298>)
 8007af6:	f01e f84d 	bl	8025b94 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007afa:	79fb      	ldrb	r3, [r7, #7]
 8007afc:	4a12      	ldr	r2, [pc, #72]	; (8007b48 <Send_Service_Signal_Message+0x28c>)
 8007afe:	011b      	lsls	r3, r3, #4
 8007b00:	4413      	add	r3, r2
 8007b02:	3302      	adds	r3, #2
 8007b04:	781b      	ldrb	r3, [r3, #0]
 8007b06:	4619      	mov	r1, r3
 8007b08:	4813      	ldr	r0, [pc, #76]	; (8007b58 <Send_Service_Signal_Message+0x29c>)
 8007b0a:	f01d ffa7 	bl	8025a5c <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007b0e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b12:	4619      	mov	r1, r3
 8007b14:	4811      	ldr	r0, [pc, #68]	; (8007b5c <Send_Service_Signal_Message+0x2a0>)
 8007b16:	f01d ffa1 	bl	8025a5c <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007b1a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b1e:	f107 020c 	add.w	r2, r7, #12
 8007b22:	441a      	add	r2, r3
 8007b24:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b28:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	f7f8 fdfd 	bl	800072c <InsertBits>
	{
 8007b32:	e033      	b.n	8007b9c <Send_Service_Signal_Message+0x2e0>
 8007b34:	20000504 	.word	0x20000504
 8007b38:	2000308c 	.word	0x2000308c
 8007b3c:	2000bbac 	.word	0x2000bbac
 8007b40:	51eb851f 	.word	0x51eb851f
 8007b44:	08027914 	.word	0x08027914
 8007b48:	200028f4 	.word	0x200028f4
 8007b4c:	08027f2c 	.word	0x08027f2c
 8007b50:	08027f4c 	.word	0x08027f4c
 8007b54:	08027978 	.word	0x08027978
 8007b58:	08027f6c 	.word	0x08027f6c
 8007b5c:	08027f8c 	.word	0x08027f8c
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007b60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b64:	f107 020c 	add.w	r2, r7, #12
 8007b68:	18d1      	adds	r1, r2, r3
 8007b6a:	79fb      	ldrb	r3, [r7, #7]
 8007b6c:	484e      	ldr	r0, [pc, #312]	; (8007ca8 <Send_Service_Signal_Message+0x3ec>)
 8007b6e:	011a      	lsls	r2, r3, #4
 8007b70:	4402      	add	r2, r0
 8007b72:	3202      	adds	r2, #2
 8007b74:	7812      	ldrb	r2, [r2, #0]
 8007b76:	3201      	adds	r2, #1
 8007b78:	b2d4      	uxtb	r4, r2
 8007b7a:	484b      	ldr	r0, [pc, #300]	; (8007ca8 <Send_Service_Signal_Message+0x3ec>)
 8007b7c:	011a      	lsls	r2, r3, #4
 8007b7e:	4402      	add	r2, r0
 8007b80:	3202      	adds	r2, #2
 8007b82:	4620      	mov	r0, r4
 8007b84:	7010      	strb	r0, [r2, #0]
 8007b86:	4a48      	ldr	r2, [pc, #288]	; (8007ca8 <Send_Service_Signal_Message+0x3ec>)
 8007b88:	011b      	lsls	r3, r3, #4
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3302      	adds	r3, #2
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b94:	460a      	mov	r2, r1
 8007b96:	2108      	movs	r1, #8
 8007b98:	f7f8 fdc8 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007b9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ba0:	3308      	adds	r3, #8
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	da00      	bge.n	8007ba8 <Send_Service_Signal_Message+0x2ec>
 8007ba6:	3307      	adds	r3, #7
 8007ba8:	10db      	asrs	r3, r3, #3
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bb0:	4413      	add	r3, r2
 8007bb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007bb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007bba:	3308      	adds	r3, #8
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	b21b      	sxth	r3, r3
 8007bc0:	425a      	negs	r2, r3
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	f002 0207 	and.w	r2, r2, #7
 8007bca:	bf58      	it	pl
 8007bcc:	4253      	negpl	r3, r2
 8007bce:	b21b      	sxth	r3, r3
 8007bd0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007bd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bd8:	f107 020c 	add.w	r2, r7, #12
 8007bdc:	441a      	add	r2, r3
 8007bde:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007be2:	2306      	movs	r3, #6
 8007be4:	2108      	movs	r1, #8
 8007be6:	f7f8 fda1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007bea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007bee:	3308      	adds	r3, #8
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	da00      	bge.n	8007bf6 <Send_Service_Signal_Message+0x33a>
 8007bf4:	3307      	adds	r3, #7
 8007bf6:	10db      	asrs	r3, r3, #3
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bfe:	4413      	add	r3, r2
 8007c00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c08:	3308      	adds	r3, #8
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	b21b      	sxth	r3, r3
 8007c0e:	425a      	negs	r2, r3
 8007c10:	f003 0307 	and.w	r3, r3, #7
 8007c14:	f002 0207 	and.w	r2, r2, #7
 8007c18:	bf58      	it	pl
 8007c1a:	4253      	negpl	r3, r2
 8007c1c:	b21b      	sxth	r3, r3
 8007c1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007c22:	79fb      	ldrb	r3, [r7, #7]
 8007c24:	4a21      	ldr	r2, [pc, #132]	; (8007cac <Send_Service_Signal_Message+0x3f0>)
 8007c26:	5cd3      	ldrb	r3, [r2, r3]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d147      	bne.n	8007cbc <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007c2c:	f004 fd7c 	bl	800c728 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007c30:	79fa      	ldrb	r2, [r7, #7]
 8007c32:	4613      	mov	r3, r2
 8007c34:	005b      	lsls	r3, r3, #1
 8007c36:	4413      	add	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <Send_Service_Signal_Message+0x3f4>)
 8007c3c:	4413      	add	r3, r2
 8007c3e:	4a1d      	ldr	r2, [pc, #116]	; (8007cb4 <Send_Service_Signal_Message+0x3f8>)
 8007c40:	6811      	ldr	r1, [r2, #0]
 8007c42:	6019      	str	r1, [r3, #0]
 8007c44:	8892      	ldrh	r2, [r2, #4]
 8007c46:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007c48:	481b      	ldr	r0, [pc, #108]	; (8007cb8 <Send_Service_Signal_Message+0x3fc>)
 8007c4a:	f01d ffa3 	bl	8025b94 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007c4e:	79fb      	ldrb	r3, [r7, #7]
 8007c50:	4a16      	ldr	r2, [pc, #88]	; (8007cac <Send_Service_Signal_Message+0x3f0>)
 8007c52:	2100      	movs	r1, #0
 8007c54:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 8007c56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c5a:	f107 020c 	add.w	r2, r7, #12
 8007c5e:	441a      	add	r2, r3
 8007c60:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c64:	2369      	movs	r3, #105	; 0x69
 8007c66:	2110      	movs	r1, #16
 8007c68:	f7f8 fd60 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007c6c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c70:	3310      	adds	r3, #16
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da00      	bge.n	8007c78 <Send_Service_Signal_Message+0x3bc>
 8007c76:	3307      	adds	r3, #7
 8007c78:	10db      	asrs	r3, r3, #3
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c80:	4413      	add	r3, r2
 8007c82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c86:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c8a:	3310      	adds	r3, #16
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	b21b      	sxth	r3, r3
 8007c90:	425a      	negs	r2, r3
 8007c92:	f003 0307 	and.w	r3, r3, #7
 8007c96:	f002 0207 	and.w	r2, r2, #7
 8007c9a:	bf58      	it	pl
 8007c9c:	4253      	negpl	r3, r2
 8007c9e:	b21b      	sxth	r3, r3
 8007ca0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007ca4:	e031      	b.n	8007d0a <Send_Service_Signal_Message+0x44e>
 8007ca6:	bf00      	nop
 8007ca8:	200028f4 	.word	0x200028f4
 8007cac:	20002764 	.word	0x20002764
 8007cb0:	200028b8 	.word	0x200028b8
 8007cb4:	20003f28 	.word	0x20003f28
 8007cb8:	08027cd0 	.word	0x08027cd0
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007cbc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc0:	f107 020c 	add.w	r2, r7, #12
 8007cc4:	441a      	add	r2, r3
 8007cc6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007cca:	2329      	movs	r3, #41	; 0x29
 8007ccc:	2110      	movs	r1, #16
 8007cce:	f7f8 fd2d 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007cd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007cd6:	3310      	adds	r3, #16
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	da00      	bge.n	8007cde <Send_Service_Signal_Message+0x422>
 8007cdc:	3307      	adds	r3, #7
 8007cde:	10db      	asrs	r3, r3, #3
 8007ce0:	b29a      	uxth	r2, r3
 8007ce2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cf0:	3310      	adds	r3, #16
 8007cf2:	b29b      	uxth	r3, r3
 8007cf4:	b21b      	sxth	r3, r3
 8007cf6:	425a      	negs	r2, r3
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	f002 0207 	and.w	r2, r2, #7
 8007d00:	bf58      	it	pl
 8007d02:	4253      	negpl	r3, r2
 8007d04:	b21b      	sxth	r3, r3
 8007d06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007d0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d0e:	f107 020c 	add.w	r2, r7, #12
 8007d12:	18d1      	adds	r1, r2, r3
 8007d14:	79fa      	ldrb	r2, [r7, #7]
 8007d16:	48b5      	ldr	r0, [pc, #724]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007d18:	4613      	mov	r3, r2
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	4413      	add	r3, r2
 8007d1e:	005b      	lsls	r3, r3, #1
 8007d20:	4403      	add	r3, r0
 8007d22:	3305      	adds	r3, #5
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	2108      	movs	r1, #8
 8007d2e:	f7f8 fcfd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d32:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d36:	3308      	adds	r3, #8
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	da00      	bge.n	8007d3e <Send_Service_Signal_Message+0x482>
 8007d3c:	3307      	adds	r3, #7
 8007d3e:	10db      	asrs	r3, r3, #3
 8007d40:	b29a      	uxth	r2, r3
 8007d42:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d46:	4413      	add	r3, r2
 8007d48:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d4c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d50:	3308      	adds	r3, #8
 8007d52:	b29b      	uxth	r3, r3
 8007d54:	b21b      	sxth	r3, r3
 8007d56:	425a      	negs	r2, r3
 8007d58:	f003 0307 	and.w	r3, r3, #7
 8007d5c:	f002 0207 	and.w	r2, r2, #7
 8007d60:	bf58      	it	pl
 8007d62:	4253      	negpl	r3, r2
 8007d64:	b21b      	sxth	r3, r3
 8007d66:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007d6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d6e:	f107 020c 	add.w	r2, r7, #12
 8007d72:	18d1      	adds	r1, r2, r3
 8007d74:	79fa      	ldrb	r2, [r7, #7]
 8007d76:	489d      	ldr	r0, [pc, #628]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007d78:	4613      	mov	r3, r2
 8007d7a:	005b      	lsls	r3, r3, #1
 8007d7c:	4413      	add	r3, r2
 8007d7e:	005b      	lsls	r3, r3, #1
 8007d80:	4403      	add	r3, r0
 8007d82:	3304      	adds	r3, #4
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d8a:	460a      	mov	r2, r1
 8007d8c:	2108      	movs	r1, #8
 8007d8e:	f7f8 fccd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d92:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d96:	3308      	adds	r3, #8
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	da00      	bge.n	8007d9e <Send_Service_Signal_Message+0x4e2>
 8007d9c:	3307      	adds	r3, #7
 8007d9e:	10db      	asrs	r3, r3, #3
 8007da0:	b29a      	uxth	r2, r3
 8007da2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007da6:	4413      	add	r3, r2
 8007da8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007dac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007db0:	3308      	adds	r3, #8
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	b21b      	sxth	r3, r3
 8007db6:	425a      	negs	r2, r3
 8007db8:	f003 0307 	and.w	r3, r3, #7
 8007dbc:	f002 0207 	and.w	r2, r2, #7
 8007dc0:	bf58      	it	pl
 8007dc2:	4253      	negpl	r3, r2
 8007dc4:	b21b      	sxth	r3, r3
 8007dc6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007dca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dce:	f107 020c 	add.w	r2, r7, #12
 8007dd2:	18d1      	adds	r1, r2, r3
 8007dd4:	79fa      	ldrb	r2, [r7, #7]
 8007dd6:	4885      	ldr	r0, [pc, #532]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007dd8:	4613      	mov	r3, r2
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	4413      	add	r3, r2
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	4403      	add	r3, r0
 8007de2:	3303      	adds	r3, #3
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007dea:	460a      	mov	r2, r1
 8007dec:	2108      	movs	r1, #8
 8007dee:	f7f8 fc9d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007df2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007df6:	3308      	adds	r3, #8
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	da00      	bge.n	8007dfe <Send_Service_Signal_Message+0x542>
 8007dfc:	3307      	adds	r3, #7
 8007dfe:	10db      	asrs	r3, r3, #3
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e06:	4413      	add	r3, r2
 8007e08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e0c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e10:	3308      	adds	r3, #8
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	b21b      	sxth	r3, r3
 8007e16:	425a      	negs	r2, r3
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	f002 0207 	and.w	r2, r2, #7
 8007e20:	bf58      	it	pl
 8007e22:	4253      	negpl	r3, r2
 8007e24:	b21b      	sxth	r3, r3
 8007e26:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007e2a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e2e:	f107 020c 	add.w	r2, r7, #12
 8007e32:	18d1      	adds	r1, r2, r3
 8007e34:	79fa      	ldrb	r2, [r7, #7]
 8007e36:	486d      	ldr	r0, [pc, #436]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007e38:	4613      	mov	r3, r2
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	4413      	add	r3, r2
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	4403      	add	r3, r0
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e48:	460a      	mov	r2, r1
 8007e4a:	2108      	movs	r1, #8
 8007e4c:	f7f8 fc6e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e50:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e54:	3308      	adds	r3, #8
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da00      	bge.n	8007e5c <Send_Service_Signal_Message+0x5a0>
 8007e5a:	3307      	adds	r3, #7
 8007e5c:	10db      	asrs	r3, r3, #3
 8007e5e:	b29a      	uxth	r2, r3
 8007e60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e64:	4413      	add	r3, r2
 8007e66:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e6e:	3308      	adds	r3, #8
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	b21b      	sxth	r3, r3
 8007e74:	425a      	negs	r2, r3
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	f002 0207 	and.w	r2, r2, #7
 8007e7e:	bf58      	it	pl
 8007e80:	4253      	negpl	r3, r2
 8007e82:	b21b      	sxth	r3, r3
 8007e84:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007e88:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e8c:	f107 020c 	add.w	r2, r7, #12
 8007e90:	18d1      	adds	r1, r2, r3
 8007e92:	79fa      	ldrb	r2, [r7, #7]
 8007e94:	4855      	ldr	r0, [pc, #340]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007e96:	4613      	mov	r3, r2
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	4413      	add	r3, r2
 8007e9c:	005b      	lsls	r3, r3, #1
 8007e9e:	4403      	add	r3, r0
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ea8:	460a      	mov	r2, r1
 8007eaa:	2108      	movs	r1, #8
 8007eac:	f7f8 fc3e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007eb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007eb4:	3308      	adds	r3, #8
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da00      	bge.n	8007ebc <Send_Service_Signal_Message+0x600>
 8007eba:	3307      	adds	r3, #7
 8007ebc:	10db      	asrs	r3, r3, #3
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ec4:	4413      	add	r3, r2
 8007ec6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007eca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ece:	3308      	adds	r3, #8
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	b21b      	sxth	r3, r3
 8007ed4:	425a      	negs	r2, r3
 8007ed6:	f003 0307 	and.w	r3, r3, #7
 8007eda:	f002 0207 	and.w	r2, r2, #7
 8007ede:	bf58      	it	pl
 8007ee0:	4253      	negpl	r3, r2
 8007ee2:	b21b      	sxth	r3, r3
 8007ee4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007ee8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007eec:	f107 020c 	add.w	r2, r7, #12
 8007ef0:	18d1      	adds	r1, r2, r3
 8007ef2:	79fa      	ldrb	r2, [r7, #7]
 8007ef4:	483d      	ldr	r0, [pc, #244]	; (8007fec <Send_Service_Signal_Message+0x730>)
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	005b      	lsls	r3, r3, #1
 8007efa:	4413      	add	r3, r2
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	4403      	add	r3, r0
 8007f00:	3302      	adds	r3, #2
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f08:	460a      	mov	r2, r1
 8007f0a:	2108      	movs	r1, #8
 8007f0c:	f7f8 fc0e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f14:	3308      	adds	r3, #8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	da00      	bge.n	8007f1c <Send_Service_Signal_Message+0x660>
 8007f1a:	3307      	adds	r3, #7
 8007f1c:	10db      	asrs	r3, r3, #3
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f24:	4413      	add	r3, r2
 8007f26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f2e:	3308      	adds	r3, #8
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	b21b      	sxth	r3, r3
 8007f34:	425a      	negs	r2, r3
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	f002 0207 	and.w	r2, r2, #7
 8007f3e:	bf58      	it	pl
 8007f40:	4253      	negpl	r3, r2
 8007f42:	b21b      	sxth	r3, r3
 8007f44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f4c:	f107 020c 	add.w	r2, r7, #12
 8007f50:	18d4      	adds	r4, r2, r3
 8007f52:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007f56:	f107 030c 	add.w	r3, r7, #12
 8007f5a:	4611      	mov	r1, r2
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f00d f939 	bl	80151d4 <CalculateDirectReverseCrc>
 8007f62:	4603      	mov	r3, r0
 8007f64:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f68:	4622      	mov	r2, r4
 8007f6a:	2120      	movs	r1, #32
 8007f6c:	f7f8 fbde 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007f70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f74:	3320      	adds	r3, #32
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	da00      	bge.n	8007f7c <Send_Service_Signal_Message+0x6c0>
 8007f7a:	3307      	adds	r3, #7
 8007f7c:	10db      	asrs	r3, r3, #3
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f84:	4413      	add	r3, r2
 8007f86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f8e:	3320      	adds	r3, #32
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	b21b      	sxth	r3, r3
 8007f94:	425a      	negs	r2, r3
 8007f96:	f003 0307 	and.w	r3, r3, #7
 8007f9a:	f002 0207 	and.w	r2, r2, #7
 8007f9e:	bf58      	it	pl
 8007fa0:	4253      	negpl	r3, r2
 8007fa2:	b21b      	sxth	r3, r3
 8007fa4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007fa8:	4b11      	ldr	r3, [pc, #68]	; (8007ff0 <Send_Service_Signal_Message+0x734>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	0a5b      	lsrs	r3, r3, #9
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d00b      	beq.n	8007fce <Send_Service_Signal_Message+0x712>
 8007fb6:	4b0e      	ldr	r3, [pc, #56]	; (8007ff0 <Send_Service_Signal_Message+0x734>)
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	79fa      	ldrb	r2, [r7, #7]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d106      	bne.n	8007fce <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007fc0:	480c      	ldr	r0, [pc, #48]	; (8007ff4 <Send_Service_Signal_Message+0x738>)
 8007fc2:	f01d fde7 	bl	8025b94 <puts>
		printf("Not Sending Reply");
 8007fc6:	480c      	ldr	r0, [pc, #48]	; (8007ff8 <Send_Service_Signal_Message+0x73c>)
 8007fc8:	f01d fd48 	bl	8025a5c <iprintf>
 8007fcc:	e009      	b.n	8007fe2 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007fce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fd2:	b2d9      	uxtb	r1, r3
 8007fd4:	79fa      	ldrb	r2, [r7, #7]
 8007fd6:	f107 030c 	add.w	r3, r7, #12
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f000 f80e 	bl	8007ffc <Process_Sending_Reply>
	}
}
 8007fe0:	bf00      	nop
 8007fe2:	bf00      	nop
 8007fe4:	3754      	adds	r7, #84	; 0x54
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd90      	pop	{r4, r7, pc}
 8007fea:	bf00      	nop
 8007fec:	200028b8 	.word	0x200028b8
 8007ff0:	2000308c 	.word	0x2000308c
 8007ff4:	08027a44 	.word	0x08027a44
 8007ff8:	08027a5c 	.word	0x08027a5c

08007ffc <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b09c      	sub	sp, #112	; 0x70
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	460b      	mov	r3, r1
 8008006:	70fb      	strb	r3, [r7, #3]
 8008008:	4613      	mov	r3, r2
 800800a:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 800800c:	2300      	movs	r3, #0
 800800e:	60bb      	str	r3, [r7, #8]
 8008010:	f107 030c 	add.w	r3, r7, #12
 8008014:	2260      	movs	r2, #96	; 0x60
 8008016:	2100      	movs	r1, #0
 8008018:	4618      	mov	r0, r3
 800801a:	f01d fc37 	bl	802588c <memset>
	uint8_t uc_index = 0;
 800801e:	2300      	movs	r3, #0
 8008020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8008024:	2300      	movs	r3, #0
 8008026:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800802a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800802e:	1c5a      	adds	r2, r3, #1
 8008030:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8008034:	4619      	mov	r1, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	781a      	ldrb	r2, [r3, #0]
 800803a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800803e:	443b      	add	r3, r7
 8008040:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008044:	2301      	movs	r3, #1
 8008046:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800804a:	e03c      	b.n	80080c6 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 800804c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	4413      	add	r3, r2
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	2bef      	cmp	r3, #239	; 0xef
 8008058:	d922      	bls.n	80080a0 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 800805a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	4413      	add	r3, r2
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008068:	1c59      	adds	r1, r3, #1
 800806a:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800806e:	f022 020f 	bic.w	r2, r2, #15
 8008072:	b2d2      	uxtb	r2, r2
 8008074:	3370      	adds	r3, #112	; 0x70
 8008076:	443b      	add	r3, r7
 8008078:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 800807c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	4413      	add	r3, r2
 8008084:	781a      	ldrb	r2, [r3, #0]
 8008086:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800808a:	1c59      	adds	r1, r3, #1
 800808c:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8008090:	f002 020f 	and.w	r2, r2, #15
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	3370      	adds	r3, #112	; 0x70
 8008098:	443b      	add	r3, r7
 800809a:	f803 2c68 	strb.w	r2, [r3, #-104]
 800809e:	e00d      	b.n	80080bc <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 80080a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	441a      	add	r2, r3
 80080a8:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080ac:	1c59      	adds	r1, r3, #1
 80080ae:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080b2:	7812      	ldrb	r2, [r2, #0]
 80080b4:	3370      	adds	r3, #112	; 0x70
 80080b6:	443b      	add	r3, r7
 80080b8:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80080bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080c0:	3301      	adds	r3, #1
 80080c2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80080c6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80080ca:	78fb      	ldrb	r3, [r7, #3]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d3bd      	bcc.n	800804c <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 80080d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080d4:	1c5a      	adds	r2, r3, #1
 80080d6:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80080da:	3370      	adds	r3, #112	; 0x70
 80080dc:	443b      	add	r3, r7
 80080de:	22f6      	movs	r2, #246	; 0xf6
 80080e0:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80080e4:	78bb      	ldrb	r3, [r7, #2]
 80080e6:	4a37      	ldr	r2, [pc, #220]	; (80081c4 <Process_Sending_Reply+0x1c8>)
 80080e8:	5cd3      	ldrb	r3, [r2, r3]
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d10b      	bne.n	8008106 <Process_Sending_Reply+0x10a>
 80080ee:	4b36      	ldr	r3, [pc, #216]	; (80081c8 <Process_Sending_Reply+0x1cc>)
 80080f0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <Process_Sending_Reply+0x10a>
 80080f8:	4b34      	ldr	r3, [pc, #208]	; (80081cc <Process_Sending_Reply+0x1d0>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d102      	bne.n	8008106 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8008100:	4833      	ldr	r0, [pc, #204]	; (80081d0 <Process_Sending_Reply+0x1d4>)
 8008102:	f000 ff77 	bl	8008ff4 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8008106:	78bb      	ldrb	r3, [r7, #2]
 8008108:	4a32      	ldr	r2, [pc, #200]	; (80081d4 <Process_Sending_Reply+0x1d8>)
 800810a:	4413      	add	r3, r2
 800810c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008110:	2b01      	cmp	r3, #1
 8008112:	d10d      	bne.n	8008130 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8008114:	78bb      	ldrb	r3, [r7, #2]
 8008116:	4a30      	ldr	r2, [pc, #192]	; (80081d8 <Process_Sending_Reply+0x1dc>)
 8008118:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800811c:	f107 0008 	add.w	r0, r7, #8
 8008120:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008124:	f008 fabc 	bl	80106a0 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8008128:	78bb      	ldrb	r3, [r7, #2]
 800812a:	4a26      	ldr	r2, [pc, #152]	; (80081c4 <Process_Sending_Reply+0x1c8>)
 800812c:	2100      	movs	r1, #0
 800812e:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8008130:	78bb      	ldrb	r3, [r7, #2]
 8008132:	4a28      	ldr	r2, [pc, #160]	; (80081d4 <Process_Sending_Reply+0x1d8>)
 8008134:	4413      	add	r3, r2
 8008136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800813a:	2b02      	cmp	r3, #2
 800813c:	d119      	bne.n	8008172 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 800813e:	2300      	movs	r3, #0
 8008140:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8008144:	e00e      	b.n	8008164 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 8008146:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800814a:	3370      	adds	r3, #112	; 0x70
 800814c:	443b      	add	r3, r7
 800814e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8008152:	4619      	mov	r1, r3
 8008154:	2003      	movs	r0, #3
 8008156:	f010 fb13 	bl	8018780 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 800815a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800815e:	3301      	adds	r3, #1
 8008160:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8008164:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008168:	b29b      	uxth	r3, r3
 800816a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800816e:	429a      	cmp	r2, r3
 8008170:	d3e9      	bcc.n	8008146 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8008172:	4b16      	ldr	r3, [pc, #88]	; (80081cc <Process_Sending_Reply+0x1d0>)
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	2b01      	cmp	r3, #1
 8008178:	d102      	bne.n	8008180 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800817a:	4815      	ldr	r0, [pc, #84]	; (80081d0 <Process_Sending_Reply+0x1d4>)
 800817c:	f000 ff3a 	bl	8008ff4 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8008180:	4b11      	ldr	r3, [pc, #68]	; (80081c8 <Process_Sending_Reply+0x1cc>)
 8008182:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 800818a:	4b0f      	ldr	r3, [pc, #60]	; (80081c8 <Process_Sending_Reply+0x1cc>)
 800818c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008190:	461a      	mov	r2, r3
 8008192:	2101      	movs	r1, #1
 8008194:	480c      	ldr	r0, [pc, #48]	; (80081c8 <Process_Sending_Reply+0x1cc>)
 8008196:	f000 fd87 	bl	8008ca8 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <Process_Sending_Reply+0x1cc>)
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 80081a2:	78fb      	ldrb	r3, [r7, #3]
 80081a4:	461a      	mov	r2, r3
 80081a6:	2100      	movs	r1, #0
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f000 fd7d 	bl	8008ca8 <Print_EI_DATA>

	if(Debug_flag == 1)
 80081ae:	4b07      	ldr	r3, [pc, #28]	; (80081cc <Process_Sending_Reply+0x1d0>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d102      	bne.n	80081bc <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 80081b6:	4809      	ldr	r0, [pc, #36]	; (80081dc <Process_Sending_Reply+0x1e0>)
 80081b8:	f000 ff1c 	bl	8008ff4 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 80081bc:	bf00      	nop
 80081be:	3770      	adds	r7, #112	; 0x70
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	20002758 	.word	0x20002758
 80081c8:	20003328 	.word	0x20003328
 80081cc:	20000bbb 	.word	0x20000bbb
 80081d0:	08027fd0 	.word	0x08027fd0
 80081d4:	20000504 	.word	0x20000504
 80081d8:	200026e4 	.word	0x200026e4
 80081dc:	08028030 	.word	0x08028030

080081e0 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	4603      	mov	r3, r0
 80081e8:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80081ea:	f010 fd21 	bl	8018c30 <HAL_GetTick>
 80081ee:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80081f0:	79fb      	ldrb	r3, [r7, #7]
 80081f2:	4a7c      	ldr	r2, [pc, #496]	; (80083e4 <Check_Primary_r_Secondary+0x204>)
 80081f4:	4413      	add	r3, r2
 80081f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	f000 80ee 	beq.w	80083dc <Check_Primary_r_Secondary+0x1fc>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8008200:	79fa      	ldrb	r2, [r7, #7]
 8008202:	4979      	ldr	r1, [pc, #484]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 8008204:	4613      	mov	r3, r2
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4413      	add	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	440b      	add	r3, r1
 800820e:	3303      	adds	r3, #3
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d12b      	bne.n	800826e <Check_Primary_r_Secondary+0x8e>
 8008216:	79fa      	ldrb	r2, [r7, #7]
 8008218:	4974      	ldr	r1, [pc, #464]	; (80083ec <Check_Primary_r_Secondary+0x20c>)
 800821a:	4613      	mov	r3, r2
 800821c:	005b      	lsls	r3, r3, #1
 800821e:	4413      	add	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	440b      	add	r3, r1
 8008224:	3303      	adds	r3, #3
 8008226:	781b      	ldrb	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d120      	bne.n	800826e <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800822c:	79fa      	ldrb	r2, [r7, #7]
 800822e:	496e      	ldr	r1, [pc, #440]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 8008230:	4613      	mov	r3, r2
 8008232:	005b      	lsls	r3, r3, #1
 8008234:	4413      	add	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	440b      	add	r3, r1
 800823a:	3304      	adds	r3, #4
 800823c:	781b      	ldrb	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	f000 80cd 	beq.w	80083de <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008244:	79fb      	ldrb	r3, [r7, #7]
 8008246:	4a67      	ldr	r2, [pc, #412]	; (80083e4 <Check_Primary_r_Secondary+0x204>)
 8008248:	3366      	adds	r3, #102	; 0x66
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	685b      	ldr	r3, [r3, #4]
 8008250:	4619      	mov	r1, r3
 8008252:	4867      	ldr	r0, [pc, #412]	; (80083f0 <Check_Primary_r_Secondary+0x210>)
 8008254:	f01d fc02 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8008258:	79fa      	ldrb	r2, [r7, #7]
 800825a:	4963      	ldr	r1, [pc, #396]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 800825c:	4613      	mov	r3, r2
 800825e:	005b      	lsls	r3, r3, #1
 8008260:	4413      	add	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	440b      	add	r3, r1
 8008266:	3304      	adds	r3, #4
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800826c:	e0b7      	b.n	80083de <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 800826e:	79fa      	ldrb	r2, [r7, #7]
 8008270:	495d      	ldr	r1, [pc, #372]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 8008272:	4613      	mov	r3, r2
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	4413      	add	r3, r2
 8008278:	00db      	lsls	r3, r3, #3
 800827a:	440b      	add	r3, r1
 800827c:	3303      	adds	r3, #3
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d12b      	bne.n	80082dc <Check_Primary_r_Secondary+0xfc>
 8008284:	79fa      	ldrb	r2, [r7, #7]
 8008286:	4959      	ldr	r1, [pc, #356]	; (80083ec <Check_Primary_r_Secondary+0x20c>)
 8008288:	4613      	mov	r3, r2
 800828a:	005b      	lsls	r3, r3, #1
 800828c:	4413      	add	r3, r2
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	440b      	add	r3, r1
 8008292:	3303      	adds	r3, #3
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b01      	cmp	r3, #1
 8008298:	d120      	bne.n	80082dc <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800829a:	79fa      	ldrb	r2, [r7, #7]
 800829c:	4952      	ldr	r1, [pc, #328]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 800829e:	4613      	mov	r3, r2
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	4413      	add	r3, r2
 80082a4:	00db      	lsls	r3, r3, #3
 80082a6:	440b      	add	r3, r1
 80082a8:	3304      	adds	r3, #4
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8096 	beq.w	80083de <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80082b2:	79fb      	ldrb	r3, [r7, #7]
 80082b4:	4a4b      	ldr	r2, [pc, #300]	; (80083e4 <Check_Primary_r_Secondary+0x204>)
 80082b6:	3366      	adds	r3, #102	; 0x66
 80082b8:	009b      	lsls	r3, r3, #2
 80082ba:	4413      	add	r3, r2
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	4619      	mov	r1, r3
 80082c0:	484c      	ldr	r0, [pc, #304]	; (80083f4 <Check_Primary_r_Secondary+0x214>)
 80082c2:	f01d fbcb 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80082c6:	79fa      	ldrb	r2, [r7, #7]
 80082c8:	4947      	ldr	r1, [pc, #284]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 80082ca:	4613      	mov	r3, r2
 80082cc:	005b      	lsls	r3, r3, #1
 80082ce:	4413      	add	r3, r2
 80082d0:	00db      	lsls	r3, r3, #3
 80082d2:	440b      	add	r3, r1
 80082d4:	3304      	adds	r3, #4
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082da:	e080      	b.n	80083de <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80082dc:	79fa      	ldrb	r2, [r7, #7]
 80082de:	4942      	ldr	r1, [pc, #264]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 80082e0:	4613      	mov	r3, r2
 80082e2:	005b      	lsls	r3, r3, #1
 80082e4:	4413      	add	r3, r2
 80082e6:	00db      	lsls	r3, r3, #3
 80082e8:	440b      	add	r3, r1
 80082ea:	3303      	adds	r3, #3
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	d13e      	bne.n	8008370 <Check_Primary_r_Secondary+0x190>
 80082f2:	79fa      	ldrb	r2, [r7, #7]
 80082f4:	493d      	ldr	r1, [pc, #244]	; (80083ec <Check_Primary_r_Secondary+0x20c>)
 80082f6:	4613      	mov	r3, r2
 80082f8:	005b      	lsls	r3, r3, #1
 80082fa:	4413      	add	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	440b      	add	r3, r1
 8008300:	3303      	adds	r3, #3
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d133      	bne.n	8008370 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008308:	79fa      	ldrb	r2, [r7, #7]
 800830a:	4937      	ldr	r1, [pc, #220]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 800830c:	4613      	mov	r3, r2
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	4413      	add	r3, r2
 8008312:	00db      	lsls	r3, r3, #3
 8008314:	440b      	add	r3, r1
 8008316:	3304      	adds	r3, #4
 8008318:	781b      	ldrb	r3, [r3, #0]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d05f      	beq.n	80083de <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	4a30      	ldr	r2, [pc, #192]	; (80083e4 <Check_Primary_r_Secondary+0x204>)
 8008322:	3366      	adds	r3, #102	; 0x66
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4619      	mov	r1, r3
 800832c:	4832      	ldr	r0, [pc, #200]	; (80083f8 <Check_Primary_r_Secondary+0x218>)
 800832e:	f01d fb95 	bl	8025a5c <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	4931      	ldr	r1, [pc, #196]	; (80083fc <Check_Primary_r_Secondary+0x21c>)
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 800833c:	79fb      	ldrb	r3, [r7, #7]
 800833e:	4930      	ldr	r1, [pc, #192]	; (8008400 <Check_Primary_r_Secondary+0x220>)
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8008346:	79fa      	ldrb	r2, [r7, #7]
 8008348:	4927      	ldr	r1, [pc, #156]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 800834a:	4613      	mov	r3, r2
 800834c:	005b      	lsls	r3, r3, #1
 800834e:	4413      	add	r3, r2
 8008350:	00db      	lsls	r3, r3, #3
 8008352:	440b      	add	r3, r1
 8008354:	3310      	adds	r3, #16
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800835a:	79fa      	ldrb	r2, [r7, #7]
 800835c:	4922      	ldr	r1, [pc, #136]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 800835e:	4613      	mov	r3, r2
 8008360:	005b      	lsls	r3, r3, #1
 8008362:	4413      	add	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	440b      	add	r3, r1
 8008368:	3304      	adds	r3, #4
 800836a:	2201      	movs	r2, #1
 800836c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 800836e:	e036      	b.n	80083de <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8008370:	79fa      	ldrb	r2, [r7, #7]
 8008372:	491d      	ldr	r1, [pc, #116]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 8008374:	4613      	mov	r3, r2
 8008376:	005b      	lsls	r3, r3, #1
 8008378:	4413      	add	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	440b      	add	r3, r1
 800837e:	3303      	adds	r3, #3
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b01      	cmp	r3, #1
 8008384:	d12b      	bne.n	80083de <Check_Primary_r_Secondary+0x1fe>
 8008386:	79fa      	ldrb	r2, [r7, #7]
 8008388:	4918      	ldr	r1, [pc, #96]	; (80083ec <Check_Primary_r_Secondary+0x20c>)
 800838a:	4613      	mov	r3, r2
 800838c:	005b      	lsls	r3, r3, #1
 800838e:	4413      	add	r3, r2
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	3303      	adds	r3, #3
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d120      	bne.n	80083de <Check_Primary_r_Secondary+0x1fe>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
			}
#endif

#ifdef EI_2
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800839c:	79fa      	ldrb	r2, [r7, #7]
 800839e:	4912      	ldr	r1, [pc, #72]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 80083a0:	4613      	mov	r3, r2
 80083a2:	005b      	lsls	r3, r3, #1
 80083a4:	4413      	add	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	440b      	add	r3, r1
 80083aa:	3304      	adds	r3, #4
 80083ac:	781b      	ldrb	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d015      	beq.n	80083de <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards Receiving data,EiPC_2 Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80083b2:	79fb      	ldrb	r3, [r7, #7]
 80083b4:	4a0b      	ldr	r2, [pc, #44]	; (80083e4 <Check_Primary_r_Secondary+0x204>)
 80083b6:	3366      	adds	r3, #102	; 0x66
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	4413      	add	r3, r2
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	4619      	mov	r1, r3
 80083c0:	4810      	ldr	r0, [pc, #64]	; (8008404 <Check_Primary_r_Secondary+0x224>)
 80083c2:	f01d fb4b 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80083c6:	79fa      	ldrb	r2, [r7, #7]
 80083c8:	4907      	ldr	r1, [pc, #28]	; (80083e8 <Check_Primary_r_Secondary+0x208>)
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	440b      	add	r3, r1
 80083d4:	3304      	adds	r3, #4
 80083d6:	2200      	movs	r2, #0
 80083d8:	701a      	strb	r2, [r3, #0]
 80083da:	e000      	b.n	80083de <Check_Primary_r_Secondary+0x1fe>
		return;
 80083dc:	bf00      	nop
			}
#endif

		}
	}
}
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20000504 	.word	0x20000504
 80083e8:	20002da4 	.word	0x20002da4
 80083ec:	20002e94 	.word	0x20002e94
 80083f0:	080281e8 	.word	0x080281e8
 80083f4:	08028224 	.word	0x08028224
 80083f8:	08028260 	.word	0x08028260
 80083fc:	20002630 	.word	0x20002630
 8008400:	20002658 	.word	0x20002658
 8008404:	08028298 	.word	0x08028298

08008408 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	4603      	mov	r3, r0
 8008410:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	4aac      	ldr	r2, [pc, #688]	; (80086c8 <Check_Vital_CRC+0x2c0>)
 8008416:	4413      	add	r3, r2
 8008418:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800841c:	2b02      	cmp	r3, #2
 800841e:	f000 814f 	beq.w	80086c0 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8008422:	79fa      	ldrb	r2, [r7, #7]
 8008424:	49a9      	ldr	r1, [pc, #676]	; (80086cc <Check_Vital_CRC+0x2c4>)
 8008426:	4613      	mov	r3, r2
 8008428:	005b      	lsls	r3, r3, #1
 800842a:	4413      	add	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	440b      	add	r3, r1
 8008430:	3308      	adds	r3, #8
 8008432:	6819      	ldr	r1, [r3, #0]
 8008434:	79fa      	ldrb	r2, [r7, #7]
 8008436:	48a6      	ldr	r0, [pc, #664]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 8008438:	4613      	mov	r3, r2
 800843a:	005b      	lsls	r3, r3, #1
 800843c:	4413      	add	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	4403      	add	r3, r0
 8008442:	3308      	adds	r3, #8
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4299      	cmp	r1, r3
 8008448:	f000 8092 	beq.w	8008570 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 800844c:	79fa      	ldrb	r2, [r7, #7]
 800844e:	49a0      	ldr	r1, [pc, #640]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 8008450:	4613      	mov	r3, r2
 8008452:	005b      	lsls	r3, r3, #1
 8008454:	4413      	add	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	440b      	add	r3, r1
 800845a:	3308      	adds	r3, #8
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 8086 	beq.w	8008570 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8008464:	79fa      	ldrb	r2, [r7, #7]
 8008466:	4999      	ldr	r1, [pc, #612]	; (80086cc <Check_Vital_CRC+0x2c4>)
 8008468:	4613      	mov	r3, r2
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	4413      	add	r3, r2
 800846e:	00db      	lsls	r3, r3, #3
 8008470:	440b      	add	r3, r1
 8008472:	3304      	adds	r3, #4
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d104      	bne.n	8008484 <Check_Vital_CRC+0x7c>
 800847a:	79fb      	ldrb	r3, [r7, #7]
 800847c:	4a95      	ldr	r2, [pc, #596]	; (80086d4 <Check_Vital_CRC+0x2cc>)
 800847e:	5cd3      	ldrb	r3, [r2, r3]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d175      	bne.n	8008570 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008484:	79fa      	ldrb	r2, [r7, #7]
 8008486:	4991      	ldr	r1, [pc, #580]	; (80086cc <Check_Vital_CRC+0x2c4>)
 8008488:	4613      	mov	r3, r2
 800848a:	005b      	lsls	r3, r3, #1
 800848c:	4413      	add	r3, r2
 800848e:	00db      	lsls	r3, r3, #3
 8008490:	440b      	add	r3, r1
 8008492:	3308      	adds	r3, #8
 8008494:	6819      	ldr	r1, [r3, #0]
 8008496:	79fa      	ldrb	r2, [r7, #7]
 8008498:	488d      	ldr	r0, [pc, #564]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800849a:	4613      	mov	r3, r2
 800849c:	005b      	lsls	r3, r3, #1
 800849e:	4413      	add	r3, r2
 80084a0:	00db      	lsls	r3, r3, #3
 80084a2:	4403      	add	r3, r0
 80084a4:	3308      	adds	r3, #8
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	1acb      	subs	r3, r1, r3
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	bfb8      	it	lt
 80084ae:	425b      	neglt	r3, r3
 80084b0:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d104      	bne.n	80084c2 <Check_Vital_CRC+0xba>
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	4a87      	ldr	r2, [pc, #540]	; (80086d8 <Check_Vital_CRC+0x2d0>)
 80084bc:	5cd3      	ldrb	r3, [r2, r3]
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d14c      	bne.n	800855c <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 80084c2:	79fb      	ldrb	r3, [r7, #7]
 80084c4:	4a84      	ldr	r2, [pc, #528]	; (80086d8 <Check_Vital_CRC+0x2d0>)
 80084c6:	2100      	movs	r1, #0
 80084c8:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80084ca:	79fb      	ldrb	r3, [r7, #7]
 80084cc:	4a7e      	ldr	r2, [pc, #504]	; (80086c8 <Check_Vital_CRC+0x2c0>)
 80084ce:	3366      	adds	r3, #102	; 0x66
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4413      	add	r3, r2
 80084d4:	685b      	ldr	r3, [r3, #4]
 80084d6:	4619      	mov	r1, r3
 80084d8:	4880      	ldr	r0, [pc, #512]	; (80086dc <Check_Vital_CRC+0x2d4>)
 80084da:	f01d fabf 	bl	8025a5c <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80084de:	79fa      	ldrb	r2, [r7, #7]
 80084e0:	497a      	ldr	r1, [pc, #488]	; (80086cc <Check_Vital_CRC+0x2c4>)
 80084e2:	4613      	mov	r3, r2
 80084e4:	005b      	lsls	r3, r3, #1
 80084e6:	4413      	add	r3, r2
 80084e8:	00db      	lsls	r3, r3, #3
 80084ea:	440b      	add	r3, r1
 80084ec:	3308      	adds	r3, #8
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4619      	mov	r1, r3
 80084f2:	487b      	ldr	r0, [pc, #492]	; (80086e0 <Check_Vital_CRC+0x2d8>)
 80084f4:	f01d fab2 	bl	8025a5c <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	4975      	ldr	r1, [pc, #468]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	440b      	add	r3, r1
 8008506:	3308      	adds	r3, #8
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4619      	mov	r1, r3
 800850c:	4875      	ldr	r0, [pc, #468]	; (80086e4 <Check_Vital_CRC+0x2dc>)
 800850e:	f01d faa5 	bl	8025a5c <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8008512:	4875      	ldr	r0, [pc, #468]	; (80086e8 <Check_Vital_CRC+0x2e0>)
 8008514:	f01d fb3e 	bl	8025b94 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	79f9      	ldrb	r1, [r7, #7]
 800851c:	486c      	ldr	r0, [pc, #432]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800851e:	4613      	mov	r3, r2
 8008520:	005b      	lsls	r3, r3, #1
 8008522:	4413      	add	r3, r2
 8008524:	00db      	lsls	r3, r3, #3
 8008526:	4403      	add	r3, r0
 8008528:	3308      	adds	r3, #8
 800852a:	681a      	ldr	r2, [r3, #0]
 800852c:	486f      	ldr	r0, [pc, #444]	; (80086ec <Check_Vital_CRC+0x2e4>)
 800852e:	010b      	lsls	r3, r1, #4
 8008530:	4403      	add	r3, r0
 8008532:	3308      	adds	r3, #8
 8008534:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8008536:	79f9      	ldrb	r1, [r7, #7]
 8008538:	79fa      	ldrb	r2, [r7, #7]
 800853a:	4865      	ldr	r0, [pc, #404]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800853c:	460b      	mov	r3, r1
 800853e:	005b      	lsls	r3, r3, #1
 8008540:	440b      	add	r3, r1
 8008542:	00db      	lsls	r3, r3, #3
 8008544:	4403      	add	r3, r0
 8008546:	3308      	adds	r3, #8
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	4860      	ldr	r0, [pc, #384]	; (80086cc <Check_Vital_CRC+0x2c4>)
 800854c:	4613      	mov	r3, r2
 800854e:	005b      	lsls	r3, r3, #1
 8008550:	4413      	add	r3, r2
 8008552:	00db      	lsls	r3, r3, #3
 8008554:	4403      	add	r3, r0
 8008556:	3308      	adds	r3, #8
 8008558:	6019      	str	r1, [r3, #0]
 800855a:	e009      	b.n	8008570 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b01      	cmp	r3, #1
 8008560:	d106      	bne.n	8008570 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8008562:	79fb      	ldrb	r3, [r7, #7]
 8008564:	4a5c      	ldr	r2, [pc, #368]	; (80086d8 <Check_Vital_CRC+0x2d0>)
 8008566:	5cd2      	ldrb	r2, [r2, r3]
 8008568:	3201      	adds	r2, #1
 800856a:	b2d1      	uxtb	r1, r2
 800856c:	4a5a      	ldr	r2, [pc, #360]	; (80086d8 <Check_Vital_CRC+0x2d0>)
 800856e:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8008570:	79fa      	ldrb	r2, [r7, #7]
 8008572:	4956      	ldr	r1, [pc, #344]	; (80086cc <Check_Vital_CRC+0x2c4>)
 8008574:	4613      	mov	r3, r2
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	4413      	add	r3, r2
 800857a:	00db      	lsls	r3, r3, #3
 800857c:	440b      	add	r3, r1
 800857e:	330c      	adds	r3, #12
 8008580:	6819      	ldr	r1, [r3, #0]
 8008582:	79fa      	ldrb	r2, [r7, #7]
 8008584:	4852      	ldr	r0, [pc, #328]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 8008586:	4613      	mov	r3, r2
 8008588:	005b      	lsls	r3, r3, #1
 800858a:	4413      	add	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	4403      	add	r3, r0
 8008590:	330c      	adds	r3, #12
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4299      	cmp	r1, r3
 8008596:	f000 8094 	beq.w	80086c2 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 800859a:	79fa      	ldrb	r2, [r7, #7]
 800859c:	494c      	ldr	r1, [pc, #304]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	00db      	lsls	r3, r3, #3
 80085a6:	440b      	add	r3, r1
 80085a8:	330c      	adds	r3, #12
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	f000 8088 	beq.w	80086c2 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80085b2:	79fa      	ldrb	r2, [r7, #7]
 80085b4:	4945      	ldr	r1, [pc, #276]	; (80086cc <Check_Vital_CRC+0x2c4>)
 80085b6:	4613      	mov	r3, r2
 80085b8:	005b      	lsls	r3, r3, #1
 80085ba:	4413      	add	r3, r2
 80085bc:	00db      	lsls	r3, r3, #3
 80085be:	440b      	add	r3, r1
 80085c0:	3304      	adds	r3, #4
 80085c2:	781b      	ldrb	r3, [r3, #0]
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d104      	bne.n	80085d2 <Check_Vital_CRC+0x1ca>
 80085c8:	79fb      	ldrb	r3, [r7, #7]
 80085ca:	4a42      	ldr	r2, [pc, #264]	; (80086d4 <Check_Vital_CRC+0x2cc>)
 80085cc:	5cd3      	ldrb	r3, [r2, r3]
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d177      	bne.n	80086c2 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80085d2:	79fa      	ldrb	r2, [r7, #7]
 80085d4:	493d      	ldr	r1, [pc, #244]	; (80086cc <Check_Vital_CRC+0x2c4>)
 80085d6:	4613      	mov	r3, r2
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	4413      	add	r3, r2
 80085dc:	00db      	lsls	r3, r3, #3
 80085de:	440b      	add	r3, r1
 80085e0:	330c      	adds	r3, #12
 80085e2:	6819      	ldr	r1, [r3, #0]
 80085e4:	79fa      	ldrb	r2, [r7, #7]
 80085e6:	483a      	ldr	r0, [pc, #232]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 80085e8:	4613      	mov	r3, r2
 80085ea:	005b      	lsls	r3, r3, #1
 80085ec:	4413      	add	r3, r2
 80085ee:	00db      	lsls	r3, r3, #3
 80085f0:	4403      	add	r3, r0
 80085f2:	330c      	adds	r3, #12
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	1acb      	subs	r3, r1, r3
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfb8      	it	lt
 80085fc:	425b      	neglt	r3, r3
 80085fe:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d104      	bne.n	8008610 <Check_Vital_CRC+0x208>
 8008606:	79fb      	ldrb	r3, [r7, #7]
 8008608:	4a39      	ldr	r2, [pc, #228]	; (80086f0 <Check_Vital_CRC+0x2e8>)
 800860a:	5cd3      	ldrb	r3, [r2, r3]
 800860c:	2b03      	cmp	r3, #3
 800860e:	d14c      	bne.n	80086aa <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	4a37      	ldr	r2, [pc, #220]	; (80086f0 <Check_Vital_CRC+0x2e8>)
 8008614:	2100      	movs	r1, #0
 8008616:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008618:	79fb      	ldrb	r3, [r7, #7]
 800861a:	4a2b      	ldr	r2, [pc, #172]	; (80086c8 <Check_Vital_CRC+0x2c0>)
 800861c:	3366      	adds	r3, #102	; 0x66
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	685b      	ldr	r3, [r3, #4]
 8008624:	4619      	mov	r1, r3
 8008626:	4833      	ldr	r0, [pc, #204]	; (80086f4 <Check_Vital_CRC+0x2ec>)
 8008628:	f01d fa18 	bl	8025a5c <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 800862c:	79fa      	ldrb	r2, [r7, #7]
 800862e:	4927      	ldr	r1, [pc, #156]	; (80086cc <Check_Vital_CRC+0x2c4>)
 8008630:	4613      	mov	r3, r2
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	4413      	add	r3, r2
 8008636:	00db      	lsls	r3, r3, #3
 8008638:	440b      	add	r3, r1
 800863a:	330c      	adds	r3, #12
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4619      	mov	r1, r3
 8008640:	482d      	ldr	r0, [pc, #180]	; (80086f8 <Check_Vital_CRC+0x2f0>)
 8008642:	f01d fa0b 	bl	8025a5c <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8008646:	79fa      	ldrb	r2, [r7, #7]
 8008648:	4921      	ldr	r1, [pc, #132]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	330c      	adds	r3, #12
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4619      	mov	r1, r3
 800865a:	4828      	ldr	r0, [pc, #160]	; (80086fc <Check_Vital_CRC+0x2f4>)
 800865c:	f01d f9fe 	bl	8025a5c <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8008660:	4827      	ldr	r0, [pc, #156]	; (8008700 <Check_Vital_CRC+0x2f8>)
 8008662:	f01d fa97 	bl	8025b94 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008666:	79fa      	ldrb	r2, [r7, #7]
 8008668:	79f9      	ldrb	r1, [r7, #7]
 800866a:	4819      	ldr	r0, [pc, #100]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800866c:	4613      	mov	r3, r2
 800866e:	005b      	lsls	r3, r3, #1
 8008670:	4413      	add	r3, r2
 8008672:	00db      	lsls	r3, r3, #3
 8008674:	4403      	add	r3, r0
 8008676:	330c      	adds	r3, #12
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	481c      	ldr	r0, [pc, #112]	; (80086ec <Check_Vital_CRC+0x2e4>)
 800867c:	010b      	lsls	r3, r1, #4
 800867e:	4403      	add	r3, r0
 8008680:	330c      	adds	r3, #12
 8008682:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008684:	79f9      	ldrb	r1, [r7, #7]
 8008686:	79fa      	ldrb	r2, [r7, #7]
 8008688:	4811      	ldr	r0, [pc, #68]	; (80086d0 <Check_Vital_CRC+0x2c8>)
 800868a:	460b      	mov	r3, r1
 800868c:	005b      	lsls	r3, r3, #1
 800868e:	440b      	add	r3, r1
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4403      	add	r3, r0
 8008694:	330c      	adds	r3, #12
 8008696:	6819      	ldr	r1, [r3, #0]
 8008698:	480c      	ldr	r0, [pc, #48]	; (80086cc <Check_Vital_CRC+0x2c4>)
 800869a:	4613      	mov	r3, r2
 800869c:	005b      	lsls	r3, r3, #1
 800869e:	4413      	add	r3, r2
 80086a0:	00db      	lsls	r3, r3, #3
 80086a2:	4403      	add	r3, r0
 80086a4:	330c      	adds	r3, #12
 80086a6:	6019      	str	r1, [r3, #0]
 80086a8:	e00b      	b.n	80086c2 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d108      	bne.n	80086c2 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 80086b0:	79fb      	ldrb	r3, [r7, #7]
 80086b2:	4a0f      	ldr	r2, [pc, #60]	; (80086f0 <Check_Vital_CRC+0x2e8>)
 80086b4:	5cd2      	ldrb	r2, [r2, r3]
 80086b6:	3201      	adds	r2, #1
 80086b8:	b2d1      	uxtb	r1, r2
 80086ba:	4a0d      	ldr	r2, [pc, #52]	; (80086f0 <Check_Vital_CRC+0x2e8>)
 80086bc:	54d1      	strb	r1, [r2, r3]
 80086be:	e000      	b.n	80086c2 <Check_Vital_CRC+0x2ba>
		return;
 80086c0:	bf00      	nop
				}
			}
		}
	}
}
 80086c2:	3710      	adds	r7, #16
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000504 	.word	0x20000504
 80086cc:	20002da4 	.word	0x20002da4
 80086d0:	20002e94 	.word	0x20002e94
 80086d4:	20002680 	.word	0x20002680
 80086d8:	20003750 	.word	0x20003750
 80086dc:	080282d4 	.word	0x080282d4
 80086e0:	08028318 	.word	0x08028318
 80086e4:	0802833c 	.word	0x0802833c
 80086e8:	08028360 	.word	0x08028360
 80086ec:	200028f4 	.word	0x200028f4
 80086f0:	2000375c 	.word	0x2000375c
 80086f4:	08028388 	.word	0x08028388
 80086f8:	080283cc 	.word	0x080283cc
 80086fc:	080283f0 	.word	0x080283f0
 8008700:	08028414 	.word	0x08028414

08008704 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	4603      	mov	r3, r0
 800870c:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 800870e:	79fb      	ldrb	r3, [r7, #7]
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <Check_Other_EiPC_Packet+0x38>)
 8008712:	4413      	add	r3, r2
 8008714:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008718:	2b02      	cmp	r3, #2
 800871a:	d007      	beq.n	800872c <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 800871c:	79fb      	ldrb	r3, [r7, #7]
 800871e:	4618      	mov	r0, r3
 8008720:	f7ff fd5e 	bl	80081e0 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fe6e 	bl	8008408 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 800872c:	79fb      	ldrb	r3, [r7, #7]
 800872e:	4618      	mov	r0, r3
 8008730:	f001 f904 	bl	800993c <CheckOtherLinkStatus>
}
 8008734:	bf00      	nop
 8008736:	3708      	adds	r7, #8
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	20000504 	.word	0x20000504

08008740 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8008740:	b590      	push	{r4, r7, lr}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008746:	2300      	movs	r3, #0
 8008748:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800874a:	493c      	ldr	r1, [pc, #240]	; (800883c <CheckLinkEstablishTimeout+0xfc>)
 800874c:	483c      	ldr	r0, [pc, #240]	; (8008840 <CheckLinkEstablishTimeout+0x100>)
 800874e:	f7f7 fd77 	bl	8000240 <strcmp>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d06c      	beq.n	8008832 <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008758:	2300      	movs	r3, #0
 800875a:	71fb      	strb	r3, [r7, #7]
 800875c:	e062      	b.n	8008824 <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 800875e:	79fb      	ldrb	r3, [r7, #7]
 8008760:	4a38      	ldr	r2, [pc, #224]	; (8008844 <CheckLinkEstablishTimeout+0x104>)
 8008762:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008766:	4618      	mov	r0, r3
 8008768:	f007 fc2a 	bl	800ffc0 <HAL_Elaps_Ticks>
 800876c:	4602      	mov	r2, r0
 800876e:	79fb      	ldrb	r3, [r7, #7]
 8008770:	4935      	ldr	r1, [pc, #212]	; (8008848 <CheckLinkEstablishTimeout+0x108>)
 8008772:	339e      	adds	r3, #158	; 0x9e
 8008774:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008778:	429a      	cmp	r2, r3
 800877a:	d950      	bls.n	800881e <CheckLinkEstablishTimeout+0xde>
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	4a33      	ldr	r2, [pc, #204]	; (800884c <CheckLinkEstablishTimeout+0x10c>)
 8008780:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008784:	79fb      	ldrb	r3, [r7, #7]
 8008786:	492f      	ldr	r1, [pc, #188]	; (8008844 <CheckLinkEstablishTimeout+0x104>)
 8008788:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800878c:	429a      	cmp	r2, r3
 800878e:	d046      	beq.n	800881e <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8008790:	79fa      	ldrb	r2, [r7, #7]
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	492b      	ldr	r1, [pc, #172]	; (8008844 <CheckLinkEstablishTimeout+0x104>)
 8008796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800879a:	492c      	ldr	r1, [pc, #176]	; (800884c <CheckLinkEstablishTimeout+0x10c>)
 800879c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80087a0:	79fb      	ldrb	r3, [r7, #7]
 80087a2:	4a29      	ldr	r2, [pc, #164]	; (8008848 <CheckLinkEstablishTimeout+0x108>)
 80087a4:	3366      	adds	r3, #102	; 0x66
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4413      	add	r3, r2
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	4619      	mov	r1, r3
 80087ae:	4828      	ldr	r0, [pc, #160]	; (8008850 <CheckLinkEstablishTimeout+0x110>)
 80087b0:	f01d f954 	bl	8025a5c <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 80087b4:	79fb      	ldrb	r3, [r7, #7]
 80087b6:	4a27      	ldr	r2, [pc, #156]	; (8008854 <CheckLinkEstablishTimeout+0x114>)
 80087b8:	2100      	movs	r1, #0
 80087ba:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 80087bc:	79fa      	ldrb	r2, [r7, #7]
 80087be:	4613      	mov	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	4a24      	ldr	r2, [pc, #144]	; (8008858 <CheckLinkEstablishTimeout+0x118>)
 80087c8:	4413      	add	r3, r2
 80087ca:	3301      	adds	r3, #1
 80087cc:	2210      	movs	r2, #16
 80087ce:	2100      	movs	r1, #0
 80087d0:	4618      	mov	r0, r3
 80087d2:	f01d f85b 	bl	802588c <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 80087d6:	79fa      	ldrb	r2, [r7, #7]
 80087d8:	491f      	ldr	r1, [pc, #124]	; (8008858 <CheckLinkEstablishTimeout+0x118>)
 80087da:	4613      	mov	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4413      	add	r3, r2
 80087e0:	009b      	lsls	r3, r3, #2
 80087e2:	440b      	add	r3, r1
 80087e4:	3312      	adds	r3, #18
 80087e6:	2200      	movs	r2, #0
 80087e8:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 80087ea:	79fa      	ldrb	r2, [r7, #7]
 80087ec:	491b      	ldr	r1, [pc, #108]	; (800885c <CheckLinkEstablishTimeout+0x11c>)
 80087ee:	4613      	mov	r3, r2
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	4413      	add	r3, r2
 80087f4:	00db      	lsls	r3, r3, #3
 80087f6:	440b      	add	r3, r1
 80087f8:	3310      	adds	r3, #16
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	79fc      	ldrb	r4, [r7, #7]
 80087fe:	4618      	mov	r0, r3
 8008800:	f007 fbde 	bl	800ffc0 <HAL_Elaps_Ticks>
 8008804:	4602      	mov	r2, r0
 8008806:	4915      	ldr	r1, [pc, #84]	; (800885c <CheckLinkEstablishTimeout+0x11c>)
 8008808:	4623      	mov	r3, r4
 800880a:	005b      	lsls	r3, r3, #1
 800880c:	4423      	add	r3, r4
 800880e:	00db      	lsls	r3, r3, #3
 8008810:	440b      	add	r3, r1
 8008812:	3310      	adds	r3, #16
 8008814:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	4618      	mov	r0, r3
 800881a:	f001 f88f 	bl	800993c <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800881e:	79fb      	ldrb	r3, [r7, #7]
 8008820:	3301      	adds	r3, #1
 8008822:	71fb      	strb	r3, [r7, #7]
 8008824:	4b08      	ldr	r3, [pc, #32]	; (8008848 <CheckLinkEstablishTimeout+0x108>)
 8008826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800882a:	79fa      	ldrb	r2, [r7, #7]
 800882c:	429a      	cmp	r2, r3
 800882e:	d396      	bcc.n	800875e <CheckLinkEstablishTimeout+0x1e>
 8008830:	e000      	b.n	8008834 <CheckLinkEstablishTimeout+0xf4>
		return;
 8008832:	bf00      	nop
		}
	}
}
 8008834:	370c      	adds	r7, #12
 8008836:	46bd      	mov	sp, r7
 8008838:	bd90      	pop	{r4, r7, pc}
 800883a:	bf00      	nop
 800883c:	0802756c 	.word	0x0802756c
 8008840:	20000505 	.word	0x20000505
 8008844:	200025a0 	.word	0x200025a0
 8008848:	20000504 	.word	0x20000504
 800884c:	20003768 	.word	0x20003768
 8008850:	0802843c 	.word	0x0802843c
 8008854:	200025f0 	.word	0x200025f0
 8008858:	20003598 	.word	0x20003598
 800885c:	20002da4 	.word	0x20002da4

08008860 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8008860:	b590      	push	{r4, r7, lr}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008866:	2300      	movs	r3, #0
 8008868:	71fb      	strb	r3, [r7, #7]
 800886a:	e052      	b.n	8008912 <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	4a2d      	ldr	r2, [pc, #180]	; (8008924 <Send_Self_Sharing+0xc4>)
 8008870:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008874:	4618      	mov	r0, r3
 8008876:	f007 fba3 	bl	800ffc0 <HAL_Elaps_Ticks>
 800887a:	4602      	mov	r2, r0
 800887c:	4b2a      	ldr	r3, [pc, #168]	; (8008928 <Send_Self_Sharing+0xc8>)
 800887e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008882:	429a      	cmp	r2, r3
 8008884:	d942      	bls.n	800890c <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8008886:	79fa      	ldrb	r2, [r7, #7]
 8008888:	4928      	ldr	r1, [pc, #160]	; (800892c <Send_Self_Sharing+0xcc>)
 800888a:	4613      	mov	r3, r2
 800888c:	005b      	lsls	r3, r3, #1
 800888e:	4413      	add	r3, r2
 8008890:	00db      	lsls	r3, r3, #3
 8008892:	440b      	add	r3, r1
 8008894:	3301      	adds	r3, #1
 8008896:	2200      	movs	r2, #0
 8008898:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 800889a:	79f9      	ldrb	r1, [r7, #7]
 800889c:	79fa      	ldrb	r2, [r7, #7]
 800889e:	4824      	ldr	r0, [pc, #144]	; (8008930 <Send_Self_Sharing+0xd0>)
 80088a0:	460b      	mov	r3, r1
 80088a2:	005b      	lsls	r3, r3, #1
 80088a4:	440b      	add	r3, r1
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	4403      	add	r3, r0
 80088aa:	3301      	adds	r3, #1
 80088ac:	7818      	ldrb	r0, [r3, #0]
 80088ae:	491f      	ldr	r1, [pc, #124]	; (800892c <Send_Self_Sharing+0xcc>)
 80088b0:	4613      	mov	r3, r2
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	4413      	add	r3, r2
 80088b6:	00db      	lsls	r3, r3, #3
 80088b8:	440b      	add	r3, r1
 80088ba:	3302      	adds	r3, #2
 80088bc:	4602      	mov	r2, r0
 80088be:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80088c0:	2218      	movs	r2, #24
 80088c2:	2100      	movs	r1, #0
 80088c4:	481b      	ldr	r0, [pc, #108]	; (8008934 <Send_Self_Sharing+0xd4>)
 80088c6:	f01c ffe1 	bl	802588c <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 80088ca:	79fa      	ldrb	r2, [r7, #7]
 80088cc:	4917      	ldr	r1, [pc, #92]	; (800892c <Send_Self_Sharing+0xcc>)
 80088ce:	4613      	mov	r3, r2
 80088d0:	005b      	lsls	r3, r3, #1
 80088d2:	4413      	add	r3, r2
 80088d4:	00db      	lsls	r3, r3, #3
 80088d6:	440b      	add	r3, r1
 80088d8:	79fa      	ldrb	r2, [r7, #7]
 80088da:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 80088dc:	79fa      	ldrb	r2, [r7, #7]
 80088de:	4613      	mov	r3, r2
 80088e0:	005b      	lsls	r3, r3, #1
 80088e2:	4413      	add	r3, r2
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	4a11      	ldr	r2, [pc, #68]	; (800892c <Send_Self_Sharing+0xcc>)
 80088e8:	4413      	add	r3, r2
 80088ea:	2218      	movs	r2, #24
 80088ec:	4619      	mov	r1, r3
 80088ee:	4811      	ldr	r0, [pc, #68]	; (8008934 <Send_Self_Sharing+0xd4>)
 80088f0:	f01c ffa4 	bl	802583c <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 80088f4:	f240 2002 	movw	r0, #514	; 0x202
 80088f8:	f008 f8de 	bl	8010ab8 <TransmitCanPkt>
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 80088fc:	79fc      	ldrb	r4, [r7, #7]
 80088fe:	f010 f997 	bl	8018c30 <HAL_GetTick>
 8008902:	4603      	mov	r3, r0
 8008904:	4a07      	ldr	r2, [pc, #28]	; (8008924 <Send_Self_Sharing+0xc4>)
 8008906:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 800890a:	e008      	b.n	800891e <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800890c:	79fb      	ldrb	r3, [r7, #7]
 800890e:	3301      	adds	r3, #1
 8008910:	71fb      	strb	r3, [r7, #7]
 8008912:	4b05      	ldr	r3, [pc, #20]	; (8008928 <Send_Self_Sharing+0xc8>)
 8008914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008918:	79fa      	ldrb	r2, [r7, #7]
 800891a:	429a      	cmp	r2, r3
 800891c:	d3a6      	bcc.n	800886c <Send_Self_Sharing+0xc>
		}
	}
}
 800891e:	370c      	adds	r7, #12
 8008920:	46bd      	mov	sp, r7
 8008922:	bd90      	pop	{r4, r7, pc}
 8008924:	200024b8 	.word	0x200024b8
 8008928:	20000504 	.word	0x20000504
 800892c:	20002da4 	.word	0x20002da4
 8008930:	200033e0 	.word	0x200033e0
 8008934:	20002f84 	.word	0x20002f84

08008938 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 800893c:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <Detect_CAN_Xchange_Failure+0xac>)
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d101      	bne.n	8008948 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8008944:	f00c fef6 	bl	8015734 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008948:	4927      	ldr	r1, [pc, #156]	; (80089e8 <Detect_CAN_Xchange_Failure+0xb0>)
 800894a:	4828      	ldr	r0, [pc, #160]	; (80089ec <Detect_CAN_Xchange_Failure+0xb4>)
 800894c:	f7f7 fc78 	bl	8000240 <strcmp>
 8008950:	4603      	mov	r3, r0
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8008956:	4b23      	ldr	r3, [pc, #140]	; (80089e4 <Detect_CAN_Xchange_Failure+0xac>)
 8008958:	2201      	movs	r2, #1
 800895a:	701a      	strb	r2, [r3, #0]
		return;
 800895c:	e040      	b.n	80089e0 <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 800895e:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <Detect_CAN_Xchange_Failure+0xb8>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	4618      	mov	r0, r3
 8008964:	f007 fb2c 	bl	800ffc0 <HAL_Elaps_Ticks>
 8008968:	4602      	mov	r2, r0
 800896a:	4b22      	ldr	r3, [pc, #136]	; (80089f4 <Detect_CAN_Xchange_Failure+0xbc>)
 800896c:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008970:	429a      	cmp	r2, r3
 8008972:	d335      	bcc.n	80089e0 <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008974:	4b20      	ldr	r3, [pc, #128]	; (80089f8 <Detect_CAN_Xchange_Failure+0xc0>)
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <Detect_CAN_Xchange_Failure+0xb8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	429a      	cmp	r2, r3
 800897e:	d02f      	beq.n	80089e0 <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 8008980:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <Detect_CAN_Xchange_Failure+0xac>)
 8008982:	2200      	movs	r2, #0
 8008984:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008986:	4b1a      	ldr	r3, [pc, #104]	; (80089f0 <Detect_CAN_Xchange_Failure+0xb8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4a1b      	ldr	r2, [pc, #108]	; (80089f8 <Detect_CAN_Xchange_Failure+0xc0>)
 800898c:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 800898e:	4b18      	ldr	r3, [pc, #96]	; (80089f0 <Detect_CAN_Xchange_Failure+0xb8>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4618      	mov	r0, r3
 8008994:	f007 fb14 	bl	800ffc0 <HAL_Elaps_Ticks>
 8008998:	4603      	mov	r3, r0
 800899a:	4a18      	ldr	r2, [pc, #96]	; (80089fc <Detect_CAN_Xchange_Failure+0xc4>)
 800899c:	fba2 2303 	umull	r2, r3, r2, r3
 80089a0:	099b      	lsrs	r3, r3, #6
 80089a2:	4619      	mov	r1, r3
 80089a4:	4816      	ldr	r0, [pc, #88]	; (8008a00 <Detect_CAN_Xchange_Failure+0xc8>)
 80089a6:	f01d f859 	bl	8025a5c <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 80089aa:	4816      	ldr	r0, [pc, #88]	; (8008a04 <Detect_CAN_Xchange_Failure+0xcc>)
 80089ac:	f01d f8f2 	bl	8025b94 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 80089b0:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <Detect_CAN_Xchange_Failure+0xbc>)
 80089b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089b6:	461a      	mov	r2, r3
 80089b8:	4613      	mov	r3, r2
 80089ba:	005b      	lsls	r3, r3, #1
 80089bc:	4413      	add	r3, r2
 80089be:	00db      	lsls	r3, r3, #3
 80089c0:	461a      	mov	r2, r3
 80089c2:	2100      	movs	r1, #0
 80089c4:	4810      	ldr	r0, [pc, #64]	; (8008a08 <Detect_CAN_Xchange_Failure+0xd0>)
 80089c6:	f01c ff61 	bl	802588c <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 80089ca:	22a2      	movs	r2, #162	; 0xa2
 80089cc:	2100      	movs	r1, #0
 80089ce:	480f      	ldr	r0, [pc, #60]	; (8008a0c <Detect_CAN_Xchange_Failure+0xd4>)
 80089d0:	f01c ff5c 	bl	802588c <memset>
			ReArrangedVitalData();
 80089d4:	f001 fcbc 	bl	800a350 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 80089d8:	f240 1019 	movw	r0, #281	; 0x119
 80089dc:	f008 f86c 	bl	8010ab8 <TransmitCanPkt>
		}
	}
}
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	2000030b 	.word	0x2000030b
 80089e8:	0802756c 	.word	0x0802756c
 80089ec:	20000505 	.word	0x20000505
 80089f0:	200024b4 	.word	0x200024b4
 80089f4:	20000504 	.word	0x20000504
 80089f8:	20003790 	.word	0x20003790
 80089fc:	10624dd3 	.word	0x10624dd3
 8008a00:	0802845c 	.word	0x0802845c
 8008a04:	0802848c 	.word	0x0802848c
 8008a08:	20002e94 	.word	0x20002e94
 8008a0c:	20002770 	.word	0x20002770

08008a10 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
	uint16_t Serial_Byte = RESET;
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8008a16:	4b8f      	ldr	r3, [pc, #572]	; (8008c54 <Process_Send_Signals_2_MIE+0x244>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f007 fad0 	bl	800ffc0 <HAL_Elaps_Ticks>
 8008a20:	4602      	mov	r2, r0
 8008a22:	4b8d      	ldr	r3, [pc, #564]	; (8008c58 <Process_Send_Signals_2_MIE+0x248>)
 8008a24:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	f240 810f 	bls.w	8008c4c <Process_Send_Signals_2_MIE+0x23c>
	{
		uint8_t Traverser = RESET;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	71fb      	strb	r3, [r7, #7]
		uint8_t Choice = RESET;
 8008a32:	2300      	movs	r3, #0
 8008a34:	71bb      	strb	r3, [r7, #6]


#endif
#ifdef EI_2

		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a36:	2300      	movs	r3, #0
 8008a38:	71fb      	strb	r3, [r7, #7]
 8008a3a:	e0a7      	b.n	8008b8c <Process_Send_Signals_2_MIE+0x17c>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008a3c:	79fb      	ldrb	r3, [r7, #7]
 8008a3e:	4a87      	ldr	r2, [pc, #540]	; (8008c5c <Process_Send_Signals_2_MIE+0x24c>)
 8008a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a44:	2b01      	cmp	r3, #1
 8008a46:	d11b      	bne.n	8008a80 <Process_Send_Signals_2_MIE+0x70>
 8008a48:	4985      	ldr	r1, [pc, #532]	; (8008c60 <Process_Send_Signals_2_MIE+0x250>)
 8008a4a:	4886      	ldr	r0, [pc, #536]	; (8008c64 <Process_Send_Signals_2_MIE+0x254>)
 8008a4c:	f7f7 fbf8 	bl	8000240 <strcmp>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d014      	beq.n	8008a80 <Process_Send_Signals_2_MIE+0x70>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008a56:	79fb      	ldrb	r3, [r7, #7]
 8008a58:	4a7f      	ldr	r2, [pc, #508]	; (8008c58 <Process_Send_Signals_2_MIE+0x248>)
 8008a5a:	3366      	adds	r3, #102	; 0x66
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	4619      	mov	r1, r3
 8008a64:	4880      	ldr	r0, [pc, #512]	; (8008c68 <Process_Send_Signals_2_MIE+0x258>)
 8008a66:	f01c fff9 	bl	8025a5c <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008a6a:	79fb      	ldrb	r3, [r7, #7]
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	4a7f      	ldr	r2, [pc, #508]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008a70:	4413      	add	r3, r2
 8008a72:	3302      	adds	r3, #2
 8008a74:	2210      	movs	r2, #16
 8008a76:	2100      	movs	r1, #0
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f01c ff07 	bl	802588c <memset>
				continue;
 8008a7e:	e082      	b.n	8008b86 <Process_Send_Signals_2_MIE+0x176>
			}
			Choice = RESET;
 8008a80:	2300      	movs	r3, #0
 8008a82:	71bb      	strb	r3, [r7, #6]
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008a84:	79fb      	ldrb	r3, [r7, #7]
 8008a86:	4a7a      	ldr	r2, [pc, #488]	; (8008c70 <Process_Send_Signals_2_MIE+0x260>)
 8008a88:	5cd3      	ldrb	r3, [r2, r3]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d104      	bne.n	8008a98 <Process_Send_Signals_2_MIE+0x88>
 8008a8e:	79bb      	ldrb	r3, [r7, #6]
 8008a90:	f043 0301 	orr.w	r3, r3, #1
 8008a94:	71bb      	strb	r3, [r7, #6]
 8008a96:	e003      	b.n	8008aa0 <Process_Send_Signals_2_MIE+0x90>
 8008a98:	79bb      	ldrb	r3, [r7, #6]
 8008a9a:	f023 0301 	bic.w	r3, r3, #1
 8008a9e:	71bb      	strb	r3, [r7, #6]
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008aa0:	79fb      	ldrb	r3, [r7, #7]
 8008aa2:	4a74      	ldr	r2, [pc, #464]	; (8008c74 <Process_Send_Signals_2_MIE+0x264>)
 8008aa4:	5cd3      	ldrb	r3, [r2, r3]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d104      	bne.n	8008ab4 <Process_Send_Signals_2_MIE+0xa4>
 8008aaa:	79bb      	ldrb	r3, [r7, #6]
 8008aac:	f043 0302 	orr.w	r3, r3, #2
 8008ab0:	71bb      	strb	r3, [r7, #6]
 8008ab2:	e003      	b.n	8008abc <Process_Send_Signals_2_MIE+0xac>
 8008ab4:	79bb      	ldrb	r3, [r7, #6]
 8008ab6:	f023 0302 	bic.w	r3, r3, #2
 8008aba:	71bb      	strb	r3, [r7, #6]

			printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008abc:	79b9      	ldrb	r1, [r7, #6]
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	4a65      	ldr	r2, [pc, #404]	; (8008c58 <Process_Send_Signals_2_MIE+0x248>)
 8008ac2:	3366      	adds	r3, #102	; 0x66
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	461a      	mov	r2, r3
 8008acc:	486a      	ldr	r0, [pc, #424]	; (8008c78 <Process_Send_Signals_2_MIE+0x268>)
 8008ace:	f01c ffc5 	bl	8025a5c <iprintf>

			switch(Choice)
 8008ad2:	79bb      	ldrb	r3, [r7, #6]
 8008ad4:	2b03      	cmp	r3, #3
 8008ad6:	d84c      	bhi.n	8008b72 <Process_Send_Signals_2_MIE+0x162>
 8008ad8:	a201      	add	r2, pc, #4	; (adr r2, 8008ae0 <Process_Send_Signals_2_MIE+0xd0>)
 8008ada:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ade:	bf00      	nop
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008b07 	.word	0x08008b07
 8008ae8:	08008b2b 	.word	0x08008b2b
 8008aec:	08008b4f 	.word	0x08008b4f
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	011b      	lsls	r3, r3, #4
 8008af4:	4a5d      	ldr	r2, [pc, #372]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008af6:	4413      	add	r3, r2
 8008af8:	3302      	adds	r3, #2
 8008afa:	2210      	movs	r2, #16
 8008afc:	2100      	movs	r1, #0
 8008afe:	4618      	mov	r0, r3
 8008b00:	f01c fec4 	bl	802588c <memset>
				break;
 8008b04:	e03f      	b.n	8008b86 <Process_Send_Signals_2_MIE+0x176>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	011b      	lsls	r3, r3, #4
 8008b0a:	4a58      	ldr	r2, [pc, #352]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	1c98      	adds	r0, r3, #2
 8008b10:	79fa      	ldrb	r2, [r7, #7]
 8008b12:	4613      	mov	r3, r2
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	4413      	add	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4a58      	ldr	r2, [pc, #352]	; (8008c7c <Process_Send_Signals_2_MIE+0x26c>)
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3301      	adds	r3, #1
 8008b20:	2210      	movs	r2, #16
 8008b22:	4619      	mov	r1, r3
 8008b24:	f01c fe8a 	bl	802583c <memcpy>
				break;
 8008b28:	e02d      	b.n	8008b86 <Process_Send_Signals_2_MIE+0x176>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	011b      	lsls	r3, r3, #4
 8008b2e:	4a4f      	ldr	r2, [pc, #316]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008b30:	4413      	add	r3, r2
 8008b32:	1c98      	adds	r0, r3, #2
 8008b34:	79fa      	ldrb	r2, [r7, #7]
 8008b36:	4613      	mov	r3, r2
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	4413      	add	r3, r2
 8008b3c:	009b      	lsls	r3, r3, #2
 8008b3e:	4a50      	ldr	r2, [pc, #320]	; (8008c80 <Process_Send_Signals_2_MIE+0x270>)
 8008b40:	4413      	add	r3, r2
 8008b42:	3301      	adds	r3, #1
 8008b44:	2210      	movs	r2, #16
 8008b46:	4619      	mov	r1, r3
 8008b48:	f01c fe78 	bl	802583c <memcpy>
				break;
 8008b4c:	e01b      	b.n	8008b86 <Process_Send_Signals_2_MIE+0x176>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008b4e:	79fb      	ldrb	r3, [r7, #7]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	4a46      	ldr	r2, [pc, #280]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008b54:	4413      	add	r3, r2
 8008b56:	1c98      	adds	r0, r3, #2
 8008b58:	79fa      	ldrb	r2, [r7, #7]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4a47      	ldr	r2, [pc, #284]	; (8008c80 <Process_Send_Signals_2_MIE+0x270>)
 8008b64:	4413      	add	r3, r2
 8008b66:	3301      	adds	r3, #1
 8008b68:	2210      	movs	r2, #16
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f01c fe66 	bl	802583c <memcpy>
				break;
 8008b70:	e009      	b.n	8008b86 <Process_Send_Signals_2_MIE+0x176>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008b72:	79fb      	ldrb	r3, [r7, #7]
 8008b74:	011b      	lsls	r3, r3, #4
 8008b76:	4a3d      	ldr	r2, [pc, #244]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008b78:	4413      	add	r3, r2
 8008b7a:	3302      	adds	r3, #2
 8008b7c:	2210      	movs	r2, #16
 8008b7e:	2100      	movs	r1, #0
 8008b80:	4618      	mov	r0, r3
 8008b82:	f01c fe83 	bl	802588c <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	71fb      	strb	r3, [r7, #7]
 8008b8c:	4b32      	ldr	r3, [pc, #200]	; (8008c58 <Process_Send_Signals_2_MIE+0x248>)
 8008b8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b92:	79fa      	ldrb	r2, [r7, #7]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	f4ff af51 	bcc.w	8008a3c <Process_Send_Signals_2_MIE+0x2c>
			}
		}
		if(Is_CAN_Exchange_happening == NO)
 8008b9a:	4b3a      	ldr	r3, [pc, #232]	; (8008c84 <Process_Send_Signals_2_MIE+0x274>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d110      	bne.n	8008bc4 <Process_Send_Signals_2_MIE+0x1b4>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008ba2:	4839      	ldr	r0, [pc, #228]	; (8008c88 <Process_Send_Signals_2_MIE+0x278>)
 8008ba4:	f01c fff6 	bl	8025b94 <puts>
			printf("Sending Blank Relay statuses\n");
 8008ba8:	4838      	ldr	r0, [pc, #224]	; (8008c8c <Process_Send_Signals_2_MIE+0x27c>)
 8008baa:	f01c fff3 	bl	8025b94 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008bae:	22a2      	movs	r2, #162	; 0xa2
 8008bb0:	2100      	movs	r1, #0
 8008bb2:	482e      	ldr	r0, [pc, #184]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008bb4:	f01c fe6a 	bl	802588c <memset>
			ReArrangedVitalData();
 8008bb8:	f001 fbca 	bl	800a350 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008bbc:	f240 1019 	movw	r0, #281	; 0x119
 8008bc0:	f007 ff7a 	bl	8010ab8 <TransmitCanPkt>
		}

		if(Debug_flag == 1)
 8008bc4:	4b32      	ldr	r3, [pc, #200]	; (8008c90 <Process_Send_Signals_2_MIE+0x280>)
 8008bc6:	781b      	ldrb	r3, [r3, #0]
 8008bc8:	2b01      	cmp	r3, #1
 8008bca:	d13a      	bne.n	8008c42 <Process_Send_Signals_2_MIE+0x232>
		{
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008bcc:	4b31      	ldr	r3, [pc, #196]	; (8008c94 <Process_Send_Signals_2_MIE+0x284>)
 8008bce:	781b      	ldrb	r3, [r3, #0]
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4b30      	ldr	r3, [pc, #192]	; (8008c94 <Process_Send_Signals_2_MIE+0x284>)
 8008bd4:	785b      	ldrb	r3, [r3, #1]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	4b2e      	ldr	r3, [pc, #184]	; (8008c94 <Process_Send_Signals_2_MIE+0x284>)
 8008bda:	789b      	ldrb	r3, [r3, #2]
 8008bdc:	482e      	ldr	r0, [pc, #184]	; (8008c98 <Process_Send_Signals_2_MIE+0x288>)
 8008bde:	f01c ff3d 	bl	8025a5c <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			ReArrangedVitalData();
 8008be2:	f001 fbb5 	bl	800a350 <ReArrangedVitalData>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008be6:	2300      	movs	r3, #0
 8008be8:	80bb      	strh	r3, [r7, #4]
 8008bea:	e020      	b.n	8008c2e <Process_Send_Signals_2_MIE+0x21e>

			{
				if(ReorderFlag == RESET)
 8008bec:	4b2b      	ldr	r3, [pc, #172]	; (8008c9c <Process_Send_Signals_2_MIE+0x28c>)
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d108      	bne.n	8008c06 <Process_Send_Signals_2_MIE+0x1f6>
				{
					printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008bf4:	88bb      	ldrh	r3, [r7, #4]
 8008bf6:	4a1d      	ldr	r2, [pc, #116]	; (8008c6c <Process_Send_Signals_2_MIE+0x25c>)
 8008bf8:	4413      	add	r3, r2
 8008bfa:	789b      	ldrb	r3, [r3, #2]
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4828      	ldr	r0, [pc, #160]	; (8008ca0 <Process_Send_Signals_2_MIE+0x290>)
 8008c00:	f01c ff2c 	bl	8025a5c <iprintf>
 8008c04:	e007      	b.n	8008c16 <Process_Send_Signals_2_MIE+0x206>
				}
				else
				{
					printf("%02X ",HitachiEI_DataReArranged_st.Inputs[Byte]);
 8008c06:	88bb      	ldrh	r3, [r7, #4]
 8008c08:	4a26      	ldr	r2, [pc, #152]	; (8008ca4 <Process_Send_Signals_2_MIE+0x294>)
 8008c0a:	4413      	add	r3, r2
 8008c0c:	789b      	ldrb	r3, [r3, #2]
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4823      	ldr	r0, [pc, #140]	; (8008ca0 <Process_Send_Signals_2_MIE+0x290>)
 8008c12:	f01c ff23 	bl	8025a5c <iprintf>
				}
				if(((Byte+1)%16)==0)
 8008c16:	88bb      	ldrh	r3, [r7, #4]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	f003 030f 	and.w	r3, r3, #15
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d102      	bne.n	8008c28 <Process_Send_Signals_2_MIE+0x218>
				{
					printf("\n");
 8008c22:	200a      	movs	r0, #10
 8008c24:	f01c ff32 	bl	8025a8c <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008c28:	88bb      	ldrh	r3, [r7, #4]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	80bb      	strh	r3, [r7, #4]
 8008c2e:	88ba      	ldrh	r2, [r7, #4]
 8008c30:	4b09      	ldr	r3, [pc, #36]	; (8008c58 <Process_Send_Signals_2_MIE+0x248>)
 8008c32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	429a      	cmp	r2, r3
 8008c3a:	dbd7      	blt.n	8008bec <Process_Send_Signals_2_MIE+0x1dc>
				}
			}
			printf("\n");
 8008c3c:	200a      	movs	r0, #10
 8008c3e:	f01c ff25 	bl	8025a8c <putchar>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008c42:	f00f fff5 	bl	8018c30 <HAL_GetTick>
 8008c46:	4603      	mov	r3, r0
 8008c48:	4a02      	ldr	r2, [pc, #8]	; (8008c54 <Process_Send_Signals_2_MIE+0x244>)
 8008c4a:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008c4c:	bf00      	nop
 8008c4e:	3708      	adds	r7, #8
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	200024e4 	.word	0x200024e4
 8008c58:	20000504 	.word	0x20000504
 8008c5c:	20002550 	.word	0x20002550
 8008c60:	0802756c 	.word	0x0802756c
 8008c64:	20000505 	.word	0x20000505
 8008c68:	080284b0 	.word	0x080284b0
 8008c6c:	20002770 	.word	0x20002770
 8008c70:	200025fc 	.word	0x200025fc
 8008c74:	200025f0 	.word	0x200025f0
 8008c78:	080284c4 	.word	0x080284c4
 8008c7c:	20003660 	.word	0x20003660
 8008c80:	20003598 	.word	0x20003598
 8008c84:	2000030b 	.word	0x2000030b
 8008c88:	080284d8 	.word	0x080284d8
 8008c8c:	080284fc 	.word	0x080284fc
 8008c90:	20000bbb 	.word	0x20000bbb
 8008c94:	20003f20 	.word	0x20003f20
 8008c98:	0802851c 	.word	0x0802851c
 8008c9c:	2000254e 	.word	0x2000254e
 8008ca0:	08028544 	.word	0x08028544
 8008ca4:	20002814 	.word	0x20002814

08008ca8 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008caa:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 8008cae:	af04      	add	r7, sp, #16
 8008cb0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cb4:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008cb8:	6018      	str	r0, [r3, #0]
 8008cba:	4608      	mov	r0, r1
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cc2:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	701a      	strb	r2, [r3, #0]
 8008cca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cce:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008cd2:	460a      	mov	r2, r1
 8008cd4:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008cd6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	3304      	adds	r3, #4
 8008ce4:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008ce8:	2100      	movs	r1, #0
 8008cea:	4618      	mov	r0, r3
 8008cec:	f01c fdce 	bl	802588c <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 8008cf6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008cfa:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d003      	beq.n	8008d0c <Print_EI_DATA+0x64>
 8008d04:	48a8      	ldr	r0, [pc, #672]	; (8008fa8 <Print_EI_DATA+0x300>)
 8008d06:	f000 f975 	bl	8008ff4 <Display>
 8008d0a:	e002      	b.n	8008d12 <Print_EI_DATA+0x6a>
 8008d0c:	48a7      	ldr	r0, [pc, #668]	; (8008fac <Print_EI_DATA+0x304>)
 8008d0e:	f000 f971 	bl	8008ff4 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 8008d12:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008d16:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2110      	movs	r1, #16
 8008d22:	2000      	movs	r0, #0
 8008d24:	f7f7 fc76 	bl	8000614 <ExtractBits>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	f107 030c 	add.w	r3, r7, #12
 8008d2e:	49a0      	ldr	r1, [pc, #640]	; (8008fb0 <Print_EI_DATA+0x308>)
 8008d30:	4618      	mov	r0, r3
 8008d32:	f01d f84b 	bl	8025dcc <siprintf>
	Display(Print_buff);
 8008d36:	f107 030c 	add.w	r3, r7, #12
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f000 f95a 	bl	8008ff4 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 8008d40:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008d44:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3303      	adds	r3, #3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	2110      	movs	r1, #16
 8008d50:	2000      	movs	r0, #0
 8008d52:	f7f7 fc5f 	bl	8000614 <ExtractBits>
 8008d56:	4602      	mov	r2, r0
 8008d58:	f107 030c 	add.w	r3, r7, #12
 8008d5c:	4995      	ldr	r1, [pc, #596]	; (8008fb4 <Print_EI_DATA+0x30c>)
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f01d f834 	bl	8025dcc <siprintf>
	Display(Print_buff);
 8008d64:	f107 030c 	add.w	r3, r7, #12
 8008d68:	4618      	mov	r0, r3
 8008d6a:	f000 f943 	bl	8008ff4 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 8008d6e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008d72:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3307      	adds	r3, #7
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	2108      	movs	r1, #8
 8008d7e:	2000      	movs	r0, #0
 8008d80:	f7f7 fc48 	bl	8000614 <ExtractBits>
 8008d84:	4603      	mov	r3, r0
 8008d86:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008d8a:	488b      	ldr	r0, [pc, #556]	; (8008fb8 <Print_EI_DATA+0x310>)
 8008d8c:	f000 f932 	bl	8008ff4 <Display>
	switch(Msg_type)
 8008d90:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008d94:	3b01      	subs	r3, #1
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	d829      	bhi.n	8008dee <Print_EI_DATA+0x146>
 8008d9a:	a201      	add	r2, pc, #4	; (adr r2, 8008da0 <Print_EI_DATA+0xf8>)
 8008d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da0:	08008db9 	.word	0x08008db9
 8008da4:	08008dd7 	.word	0x08008dd7
 8008da8:	08008def 	.word	0x08008def
 8008dac:	08008ddf 	.word	0x08008ddf
 8008db0:	08008def 	.word	0x08008def
 8008db4:	08008de7 	.word	0x08008de7
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008db8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008dbc:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d003      	beq.n	8008dce <Print_EI_DATA+0x126>
 8008dc6:	487d      	ldr	r0, [pc, #500]	; (8008fbc <Print_EI_DATA+0x314>)
 8008dc8:	f000 f914 	bl	8008ff4 <Display>
		//Display("INIT     ");
		break;
 8008dcc:	e012      	b.n	8008df4 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008dce:	487c      	ldr	r0, [pc, #496]	; (8008fc0 <Print_EI_DATA+0x318>)
 8008dd0:	f000 f910 	bl	8008ff4 <Display>
		break;
 8008dd4:	e00e      	b.n	8008df4 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008dd6:	487b      	ldr	r0, [pc, #492]	; (8008fc4 <Print_EI_DATA+0x31c>)
 8008dd8:	f000 f90c 	bl	8008ff4 <Display>
		break;
 8008ddc:	e00a      	b.n	8008df4 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 8008dde:	487a      	ldr	r0, [pc, #488]	; (8008fc8 <Print_EI_DATA+0x320>)
 8008de0:	f000 f908 	bl	8008ff4 <Display>
		break;
 8008de4:	e006      	b.n	8008df4 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 8008de6:	4879      	ldr	r0, [pc, #484]	; (8008fcc <Print_EI_DATA+0x324>)
 8008de8:	f000 f904 	bl	8008ff4 <Display>
		break;
 8008dec:	e002      	b.n	8008df4 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 8008dee:	4878      	ldr	r0, [pc, #480]	; (8008fd0 <Print_EI_DATA+0x328>)
 8008df0:	f000 f900 	bl	8008ff4 <Display>
	}
	Display("|");
 8008df4:	4877      	ldr	r0, [pc, #476]	; (8008fd4 <Print_EI_DATA+0x32c>)
 8008df6:	f000 f8fd 	bl	8008ff4 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 8008dfa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008dfe:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3305      	adds	r3, #5
 8008e06:	461a      	mov	r2, r3
 8008e08:	2108      	movs	r1, #8
 8008e0a:	2000      	movs	r0, #0
 8008e0c:	f7f7 fc02 	bl	8000614 <ExtractBits>
 8008e10:	4602      	mov	r2, r0
 8008e12:	f107 030c 	add.w	r3, r7, #12
 8008e16:	4970      	ldr	r1, [pc, #448]	; (8008fd8 <Print_EI_DATA+0x330>)
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f01c ffd7 	bl	8025dcc <siprintf>
	Display(Print_buff);
 8008e1e:	f107 030c 	add.w	r3, r7, #12
 8008e22:	4618      	mov	r0, r3
 8008e24:	f000 f8e6 	bl	8008ff4 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008e28:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e2c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3306      	adds	r3, #6
 8008e34:	461a      	mov	r2, r3
 8008e36:	2108      	movs	r1, #8
 8008e38:	2000      	movs	r0, #0
 8008e3a:	f7f7 fbeb 	bl	8000614 <ExtractBits>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	f107 030c 	add.w	r3, r7, #12
 8008e44:	4965      	ldr	r1, [pc, #404]	; (8008fdc <Print_EI_DATA+0x334>)
 8008e46:	4618      	mov	r0, r3
 8008e48:	f01c ffc0 	bl	8025dcc <siprintf>
	Display(Print_buff);
 8008e4c:	f107 030c 	add.w	r3, r7, #12
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 f8cf 	bl	8008ff4 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008e56:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008e5a:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	461a      	mov	r2, r3
 8008e64:	2110      	movs	r1, #16
 8008e66:	2000      	movs	r0, #0
 8008e68:	f7f7 fbd4 	bl	8000614 <ExtractBits>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 8008e72:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008e76:	f107 030c 	add.w	r3, r7, #12
 8008e7a:	4959      	ldr	r1, [pc, #356]	; (8008fe0 <Print_EI_DATA+0x338>)
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f01c ffa5 	bl	8025dcc <siprintf>
	Display(Print_buff);
 8008e82:	f107 030c 	add.w	r3, r7, #12
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 f8b4 	bl	8008ff4 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008e8c:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 8008e90:	095b      	lsrs	r3, r3, #5
 8008e92:	b29b      	uxth	r3, r3
 8008e94:	f003 0301 	and.w	r3, r3, #1
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d03f      	beq.n	8008f1c <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008e9c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ea0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	330a      	adds	r3, #10
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	461d      	mov	r5, r3
 8008eac:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008eb0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	330b      	adds	r3, #11
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461e      	mov	r6, r3
 8008ebc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ec0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	330c      	adds	r3, #12
 8008ec8:	781b      	ldrb	r3, [r3, #0]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ed0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	330d      	adds	r3, #13
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	4619      	mov	r1, r3
 8008edc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ee0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	330e      	adds	r3, #14
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	461c      	mov	r4, r3
 8008eec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ef0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	330f      	adds	r3, #15
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	f107 000c 	add.w	r0, r7, #12
 8008efe:	9303      	str	r3, [sp, #12]
 8008f00:	9402      	str	r4, [sp, #8]
 8008f02:	9101      	str	r1, [sp, #4]
 8008f04:	9200      	str	r2, [sp, #0]
 8008f06:	4633      	mov	r3, r6
 8008f08:	462a      	mov	r2, r5
 8008f0a:	4936      	ldr	r1, [pc, #216]	; (8008fe4 <Print_EI_DATA+0x33c>)
 8008f0c:	f01c ff5e 	bl	8025dcc <siprintf>
		Display(Print_buff);
 8008f10:	f107 030c 	add.w	r3, r7, #12
 8008f14:	4618      	mov	r0, r3
 8008f16:	f000 f86d 	bl	8008ff4 <Display>
 8008f1a:	e002      	b.n	8008f22 <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 8008f1c:	4832      	ldr	r0, [pc, #200]	; (8008fe8 <Print_EI_DATA+0x340>)
 8008f1e:	f000 f869 	bl	8008ff4 <Display>
	}
	if(Debug_flag == 1)
 8008f22:	4b32      	ldr	r3, [pc, #200]	; (8008fec <Print_EI_DATA+0x344>)
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	2b01      	cmp	r3, #1
 8008f28:	d139      	bne.n	8008f9e <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008f30:	e019      	b.n	8008f66 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8008f32:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008f36:	f507 7204 	add.w	r2, r7, #528	; 0x210
 8008f3a:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 8008f3e:	6812      	ldr	r2, [r2, #0]
 8008f40:	4413      	add	r3, r2
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	461a      	mov	r2, r3
 8008f46:	f107 030c 	add.w	r3, r7, #12
 8008f4a:	4929      	ldr	r1, [pc, #164]	; (8008ff0 <Print_EI_DATA+0x348>)
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f01c ff3d 	bl	8025dcc <siprintf>
			Display(Print_buff);
 8008f52:	f107 030c 	add.w	r3, r7, #12
 8008f56:	4618      	mov	r0, r3
 8008f58:	f000 f84c 	bl	8008ff4 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008f5c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008f60:	3301      	adds	r3, #1
 8008f62:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008f66:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f6a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 8008f6e:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8008f72:	781b      	ldrb	r3, [r3, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d3dc      	bcc.n	8008f32 <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008f78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f7c:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10b      	bne.n	8008f9e <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008f86:	f107 030c 	add.w	r3, r7, #12
 8008f8a:	22f6      	movs	r2, #246	; 0xf6
 8008f8c:	4918      	ldr	r1, [pc, #96]	; (8008ff0 <Print_EI_DATA+0x348>)
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f01c ff1c 	bl	8025dcc <siprintf>
			Display(Print_buff);
 8008f94:	f107 030c 	add.w	r3, r7, #12
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f82b 	bl	8008ff4 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008f9e:	bf00      	nop
 8008fa0:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fa8:	0802854c 	.word	0x0802854c
 8008fac:	08028550 	.word	0x08028550
 8008fb0:	08028554 	.word	0x08028554
 8008fb4:	0802855c 	.word	0x0802855c
 8008fb8:	08028564 	.word	0x08028564
 8008fbc:	08028568 	.word	0x08028568
 8008fc0:	08028570 	.word	0x08028570
 8008fc4:	08028578 	.word	0x08028578
 8008fc8:	0802857c 	.word	0x0802857c
 8008fcc:	08028580 	.word	0x08028580
 8008fd0:	08028584 	.word	0x08028584
 8008fd4:	08028598 	.word	0x08028598
 8008fd8:	0802859c 	.word	0x0802859c
 8008fdc:	080285a8 	.word	0x080285a8
 8008fe0:	080285b4 	.word	0x080285b4
 8008fe4:	080285c0 	.word	0x080285c0
 8008fe8:	080285e4 	.word	0x080285e4
 8008fec:	20000bbb 	.word	0x20000bbb
 8008ff0:	08028544 	.word	0x08028544

08008ff4 <Display>:

void Display(char *Data)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 8009000:	e00a      	b.n	8009018 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	4413      	add	r3, r2
 8009008:	781b      	ldrb	r3, [r3, #0]
 800900a:	4619      	mov	r1, r3
 800900c:	2000      	movs	r0, #0
 800900e:	f00f fbb7 	bl	8018780 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 8009012:	7bfb      	ldrb	r3, [r7, #15]
 8009014:	3301      	adds	r3, #1
 8009016:	73fb      	strb	r3, [r7, #15]
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	687a      	ldr	r2, [r7, #4]
 800901c:	4413      	add	r3, r2
 800901e:	781b      	ldrb	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1ee      	bne.n	8009002 <Display+0xe>
	}
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 8009030:	b5b0      	push	{r4, r5, r7, lr}
 8009032:	b086      	sub	sp, #24
 8009034:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
 800903a:	4890      	ldr	r0, [pc, #576]	; (800927c <print_self_Details_Hitachi+0x24c>)
 800903c:	f01c fdaa 	bl	8025b94 <puts>
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8009040:	4b8f      	ldr	r3, [pc, #572]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009042:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009046:	4619      	mov	r1, r3
 8009048:	488e      	ldr	r0, [pc, #568]	; (8009284 <print_self_Details_Hitachi+0x254>)
 800904a:	f01c fd07 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 800904e:	4b8c      	ldr	r3, [pc, #560]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009050:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009054:	4619      	mov	r1, r3
 8009056:	488c      	ldr	r0, [pc, #560]	; (8009288 <print_self_Details_Hitachi+0x258>)
 8009058:	f01c fd00 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 800905c:	4b88      	ldr	r3, [pc, #544]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800905e:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8009062:	4619      	mov	r1, r3
 8009064:	4889      	ldr	r0, [pc, #548]	; (800928c <print_self_Details_Hitachi+0x25c>)
 8009066:	f01c fcf9 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 800906a:	4b85      	ldr	r3, [pc, #532]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800906c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8009070:	4619      	mov	r1, r3
 8009072:	4887      	ldr	r0, [pc, #540]	; (8009290 <print_self_Details_Hitachi+0x260>)
 8009074:	f01c fcf2 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8009078:	4b81      	ldr	r3, [pc, #516]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800907a:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800907e:	4619      	mov	r1, r3
 8009080:	4884      	ldr	r0, [pc, #528]	; (8009294 <print_self_Details_Hitachi+0x264>)
 8009082:	f01c fceb 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009086:	4b7e      	ldr	r3, [pc, #504]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009088:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800908c:	4619      	mov	r1, r3
 800908e:	4882      	ldr	r0, [pc, #520]	; (8009298 <print_self_Details_Hitachi+0x268>)
 8009090:	f01c fce4 	bl	8025a5c <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8009094:	4b7a      	ldr	r3, [pc, #488]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800909a:	4619      	mov	r1, r3
 800909c:	4879      	ldr	r0, [pc, #484]	; (8009284 <print_self_Details_Hitachi+0x254>)
 800909e:	f01c fcdd 	bl	8025a5c <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80090a2:	2300      	movs	r3, #0
 80090a4:	71fb      	strb	r3, [r7, #7]
 80090a6:	e03b      	b.n	8009120 <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80090a8:	79f9      	ldrb	r1, [r7, #7]
 80090aa:	79fb      	ldrb	r3, [r7, #7]
 80090ac:	4a74      	ldr	r2, [pc, #464]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80090ae:	3326      	adds	r3, #38	; 0x26
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	78db      	ldrb	r3, [r3, #3]
 80090b6:	461c      	mov	r4, r3
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	4a71      	ldr	r2, [pc, #452]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	4413      	add	r3, r2
 80090c0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80090c4:	461d      	mov	r5, r3
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	4a6d      	ldr	r2, [pc, #436]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80090ca:	009b      	lsls	r3, r3, #2
 80090cc:	4413      	add	r3, r2
 80090ce:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80090d2:	4618      	mov	r0, r3
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	4a6a      	ldr	r2, [pc, #424]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80090d8:	009b      	lsls	r3, r3, #2
 80090da:	4413      	add	r3, r2
 80090dc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80090e0:	9301      	str	r3, [sp, #4]
 80090e2:	9000      	str	r0, [sp, #0]
 80090e4:	462b      	mov	r3, r5
 80090e6:	4622      	mov	r2, r4
 80090e8:	486c      	ldr	r0, [pc, #432]	; (800929c <print_self_Details_Hitachi+0x26c>)
 80090ea:	f01c fcb7 	bl	8025a5c <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80090ee:	79f9      	ldrb	r1, [r7, #7]
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	4a63      	ldr	r2, [pc, #396]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80090f4:	3352      	adds	r3, #82	; 0x52
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	885b      	ldrh	r3, [r3, #2]
 80090fc:	461a      	mov	r2, r3
 80090fe:	4868      	ldr	r0, [pc, #416]	; (80092a0 <print_self_Details_Hitachi+0x270>)
 8009100:	f01c fcac 	bl	8025a5c <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 8009104:	79f9      	ldrb	r1, [r7, #7]
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	4a5d      	ldr	r2, [pc, #372]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	4413      	add	r3, r2
 800910e:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 8009112:	461a      	mov	r2, r3
 8009114:	4863      	ldr	r0, [pc, #396]	; (80092a4 <print_self_Details_Hitachi+0x274>)
 8009116:	f01c fca1 	bl	8025a5c <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800911a:	79fb      	ldrb	r3, [r7, #7]
 800911c:	3301      	adds	r3, #1
 800911e:	71fb      	strb	r3, [r7, #7]
 8009120:	4b57      	ldr	r3, [pc, #348]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009122:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009126:	79fa      	ldrb	r2, [r7, #7]
 8009128:	429a      	cmp	r2, r3
 800912a:	d3bd      	bcc.n	80090a8 <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800912c:	4b54      	ldr	r3, [pc, #336]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800912e:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8009132:	4619      	mov	r1, r3
 8009134:	4b52      	ldr	r3, [pc, #328]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009136:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800913a:	461a      	mov	r2, r3
 800913c:	4b50      	ldr	r3, [pc, #320]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800913e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009142:	4618      	mov	r0, r3
 8009144:	4b4e      	ldr	r3, [pc, #312]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009146:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	4603      	mov	r3, r0
 800914e:	4856      	ldr	r0, [pc, #344]	; (80092a8 <print_self_Details_Hitachi+0x278>)
 8009150:	f01c fc84 	bl	8025a5c <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8009154:	4b4a      	ldr	r3, [pc, #296]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915a:	4618      	mov	r0, r3
 800915c:	4b48      	ldr	r3, [pc, #288]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800915e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009162:	461c      	mov	r4, r3
 8009164:	4b46      	ldr	r3, [pc, #280]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009166:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800916a:	461d      	mov	r5, r3
 800916c:	4b44      	ldr	r3, [pc, #272]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800916e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8009172:	461a      	mov	r2, r3
 8009174:	4b42      	ldr	r3, [pc, #264]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009176:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800917a:	4619      	mov	r1, r3
 800917c:	4b40      	ldr	r3, [pc, #256]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800917e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8009182:	9302      	str	r3, [sp, #8]
 8009184:	9101      	str	r1, [sp, #4]
 8009186:	9200      	str	r2, [sp, #0]
 8009188:	462b      	mov	r3, r5
 800918a:	4622      	mov	r2, r4
 800918c:	4601      	mov	r1, r0
 800918e:	4847      	ldr	r0, [pc, #284]	; (80092ac <print_self_Details_Hitachi+0x27c>)
 8009190:	f01c fc64 	bl	8025a5c <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009194:	4b3a      	ldr	r3, [pc, #232]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009196:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800919a:	4619      	mov	r1, r3
 800919c:	4844      	ldr	r0, [pc, #272]	; (80092b0 <print_self_Details_Hitachi+0x280>)
 800919e:	f01c fc5d 	bl	8025a5c <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80091a2:	2300      	movs	r3, #0
 80091a4:	71fb      	strb	r3, [r7, #7]
 80091a6:	e05c      	b.n	8009262 <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	3301      	adds	r3, #1
 80091ac:	4619      	mov	r1, r3
 80091ae:	4841      	ldr	r0, [pc, #260]	; (80092b4 <print_self_Details_Hitachi+0x284>)
 80091b0:	f01c fc54 	bl	8025a5c <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	4a32      	ldr	r2, [pc, #200]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80091b8:	3366      	adds	r3, #102	; 0x66
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	4619      	mov	r1, r3
 80091c2:	483d      	ldr	r0, [pc, #244]	; (80092b8 <print_self_Details_Hitachi+0x288>)
 80091c4:	f01c fc4a 	bl	8025a5c <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 80091c8:	79fb      	ldrb	r3, [r7, #7]
 80091ca:	4a2d      	ldr	r2, [pc, #180]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80091cc:	3370      	adds	r3, #112	; 0x70
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	4619      	mov	r1, r3
 80091d6:	4839      	ldr	r0, [pc, #228]	; (80092bc <print_self_Details_Hitachi+0x28c>)
 80091d8:	f01c fc40 	bl	8025a5c <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	4a28      	ldr	r2, [pc, #160]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80091e0:	33fe      	adds	r3, #254	; 0xfe
 80091e2:	005b      	lsls	r3, r3, #1
 80091e4:	4413      	add	r3, r2
 80091e6:	889b      	ldrh	r3, [r3, #4]
 80091e8:	4619      	mov	r1, r3
 80091ea:	4835      	ldr	r0, [pc, #212]	; (80092c0 <print_self_Details_Hitachi+0x290>)
 80091ec:	f01c fc36 	bl	8025a5c <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80091f0:	79fb      	ldrb	r3, [r7, #7]
 80091f2:	4a23      	ldr	r2, [pc, #140]	; (8009280 <print_self_Details_Hitachi+0x250>)
 80091f4:	4413      	add	r3, r2
 80091f6:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80091fa:	4619      	mov	r1, r3
 80091fc:	4831      	ldr	r0, [pc, #196]	; (80092c4 <print_self_Details_Hitachi+0x294>)
 80091fe:	f01c fc2d 	bl	8025a5c <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 8009202:	79fb      	ldrb	r3, [r7, #7]
 8009204:	4a1e      	ldr	r2, [pc, #120]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009206:	4413      	add	r3, r2
 8009208:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800920c:	4619      	mov	r1, r3
 800920e:	482e      	ldr	r0, [pc, #184]	; (80092c8 <print_self_Details_Hitachi+0x298>)
 8009210:	f01c fc24 	bl	8025a5c <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009218:	4413      	add	r3, r2
 800921a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800921e:	4619      	mov	r1, r3
 8009220:	482a      	ldr	r0, [pc, #168]	; (80092cc <print_self_Details_Hitachi+0x29c>)
 8009222:	f01c fc1b 	bl	8025a5c <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 8009226:	79fb      	ldrb	r3, [r7, #7]
 8009228:	4a15      	ldr	r2, [pc, #84]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800922a:	338a      	adds	r3, #138	; 0x8a
 800922c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009230:	4619      	mov	r1, r3
 8009232:	4827      	ldr	r0, [pc, #156]	; (80092d0 <print_self_Details_Hitachi+0x2a0>)
 8009234:	f01c fc12 	bl	8025a5c <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	4a11      	ldr	r2, [pc, #68]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800923c:	3394      	adds	r3, #148	; 0x94
 800923e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009242:	4619      	mov	r1, r3
 8009244:	4823      	ldr	r0, [pc, #140]	; (80092d4 <print_self_Details_Hitachi+0x2a4>)
 8009246:	f01c fc09 	bl	8025a5c <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 800924a:	79fb      	ldrb	r3, [r7, #7]
 800924c:	4a0c      	ldr	r2, [pc, #48]	; (8009280 <print_self_Details_Hitachi+0x250>)
 800924e:	339e      	adds	r3, #158	; 0x9e
 8009250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009254:	4619      	mov	r1, r3
 8009256:	4820      	ldr	r0, [pc, #128]	; (80092d8 <print_self_Details_Hitachi+0x2a8>)
 8009258:	f01c fc00 	bl	8025a5c <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800925c:	79fb      	ldrb	r3, [r7, #7]
 800925e:	3301      	adds	r3, #1
 8009260:	71fb      	strb	r3, [r7, #7]
 8009262:	4b07      	ldr	r3, [pc, #28]	; (8009280 <print_self_Details_Hitachi+0x250>)
 8009264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009268:	79fa      	ldrb	r2, [r7, #7]
 800926a:	429a      	cmp	r2, r3
 800926c:	d39c      	bcc.n	80091a8 <print_self_Details_Hitachi+0x178>

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
 800926e:	4803      	ldr	r0, [pc, #12]	; (800927c <print_self_Details_Hitachi+0x24c>)
 8009270:	f01c fc90 	bl	8025b94 <puts>
#endif
}
 8009274:	bf00      	nop
 8009276:	3708      	adds	r7, #8
 8009278:	46bd      	mov	sp, r7
 800927a:	bdb0      	pop	{r4, r5, r7, pc}
 800927c:	08028658 	.word	0x08028658
 8009280:	20000504 	.word	0x20000504
 8009284:	080286ac 	.word	0x080286ac
 8009288:	080286d0 	.word	0x080286d0
 800928c:	080286f4 	.word	0x080286f4
 8009290:	08028720 	.word	0x08028720
 8009294:	0802874c 	.word	0x0802874c
 8009298:	08028778 	.word	0x08028778
 800929c:	080287a4 	.word	0x080287a4
 80092a0:	080287c4 	.word	0x080287c4
 80092a4:	080287d4 	.word	0x080287d4
 80092a8:	080287e4 	.word	0x080287e4
 80092ac:	08028800 	.word	0x08028800
 80092b0:	08028830 	.word	0x08028830
 80092b4:	08028844 	.word	0x08028844
 80092b8:	08028858 	.word	0x08028858
 80092bc:	08028874 	.word	0x08028874
 80092c0:	08028890 	.word	0x08028890
 80092c4:	080288ac 	.word	0x080288ac
 80092c8:	080288c4 	.word	0x080288c4
 80092cc:	080288d8 	.word	0x080288d8
 80092d0:	080288ec 	.word	0x080288ec
 80092d4:	08028908 	.word	0x08028908
 80092d8:	08028924 	.word	0x08028924

080092dc <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80092e6:	2300      	movs	r3, #0
 80092e8:	71fb      	strb	r3, [r7, #7]
 80092ea:	e058      	b.n	800939e <Send_Init_After_Timeout+0xc2>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	4a31      	ldr	r2, [pc, #196]	; (80093b4 <Send_Init_After_Timeout+0xd8>)
 80092f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d04f      	beq.n	8009398 <Send_Init_After_Timeout+0xbc>
			}
#endif
#ifdef EI_2
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80092f8:	79fb      	ldrb	r3, [r7, #7]
 80092fa:	4a2e      	ldr	r2, [pc, #184]	; (80093b4 <Send_Init_After_Timeout+0xd8>)
 80092fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009300:	4618      	mov	r0, r3
 8009302:	f006 fe5d 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009306:	4602      	mov	r2, r0
 8009308:	79fb      	ldrb	r3, [r7, #7]
 800930a:	492b      	ldr	r1, [pc, #172]	; (80093b8 <Send_Init_After_Timeout+0xdc>)
 800930c:	3394      	adds	r3, #148	; 0x94
 800930e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009312:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			if(
 8009316:	429a      	cmp	r2, r3
 8009318:	d93e      	bls.n	8009398 <Send_Init_After_Timeout+0xbc>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 800931a:	79fb      	ldrb	r3, [r7, #7]
 800931c:	4a27      	ldr	r2, [pc, #156]	; (80093bc <Send_Init_After_Timeout+0xe0>)
 800931e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009322:	4618      	mov	r0, r3
 8009324:	f006 fe4c 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009328:	4602      	mov	r2, r0
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	4922      	ldr	r1, [pc, #136]	; (80093b8 <Send_Init_After_Timeout+0xdc>)
 800932e:	3394      	adds	r3, #148	; 0x94
 8009330:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009334:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 8009338:	429a      	cmp	r2, r3
 800933a:	d92d      	bls.n	8009398 <Send_Init_After_Timeout+0xbc>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 800933c:	79fb      	ldrb	r3, [r7, #7]
 800933e:	4a20      	ldr	r2, [pc, #128]	; (80093c0 <Send_Init_After_Timeout+0xe4>)
 8009340:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 8009342:	2b01      	cmp	r3, #1
 8009344:	d028      	beq.n	8009398 <Send_Init_After_Timeout+0xbc>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8009346:	79fb      	ldrb	r3, [r7, #7]
 8009348:	4a1e      	ldr	r2, [pc, #120]	; (80093c4 <Send_Init_After_Timeout+0xe8>)
 800934a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 800934e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009352:	d921      	bls.n	8009398 <Send_Init_After_Timeout+0xbc>
			)
			{

				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	4a17      	ldr	r2, [pc, #92]	; (80093b4 <Send_Init_After_Timeout+0xd8>)
 8009358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800935c:	4618      	mov	r0, r3
 800935e:	f006 fe2f 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009362:	4603      	mov	r3, r0
 8009364:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <Send_Init_After_Timeout+0xec>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	099b      	lsrs	r3, r3, #6
 800936c:	4619      	mov	r1, r3
 800936e:	4817      	ldr	r0, [pc, #92]	; (80093cc <Send_Init_After_Timeout+0xf0>)
 8009370:	f01c fb74 	bl	8025a5c <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	4a16      	ldr	r2, [pc, #88]	; (80093d0 <Send_Init_After_Timeout+0xf4>)
 8009378:	2101      	movs	r1, #1
 800937a:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 800937c:	79fa      	ldrb	r2, [r7, #7]
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	4611      	mov	r1, r2
 8009382:	4618      	mov	r0, r3
 8009384:	f7f9 fb2a 	bl	80029dc <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8009388:	79fb      	ldrb	r3, [r7, #7]
 800938a:	4a0d      	ldr	r2, [pc, #52]	; (80093c0 <Send_Init_After_Timeout+0xe4>)
 800938c:	2101      	movs	r1, #1
 800938e:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	4a10      	ldr	r2, [pc, #64]	; (80093d4 <Send_Init_After_Timeout+0xf8>)
 8009394:	2101      	movs	r1, #1
 8009396:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009398:	79fb      	ldrb	r3, [r7, #7]
 800939a:	3301      	adds	r3, #1
 800939c:	71fb      	strb	r3, [r7, #7]
 800939e:	4b06      	ldr	r3, [pc, #24]	; (80093b8 <Send_Init_After_Timeout+0xdc>)
 80093a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80093a4:	79fa      	ldrb	r2, [r7, #7]
 80093a6:	429a      	cmp	r2, r3
 80093a8:	d3a0      	bcc.n	80092ec <Send_Init_After_Timeout+0x10>
			}
#endif
		}
	}
}
 80093aa:	bf00      	nop
 80093ac:	bf00      	nop
 80093ae:	3708      	adds	r7, #8
 80093b0:	46bd      	mov	sp, r7
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	20002630 	.word	0x20002630
 80093b8:	20000504 	.word	0x20000504
 80093bc:	20002510 	.word	0x20002510
 80093c0:	20002718 	.word	0x20002718
 80093c4:	20002724 	.word	0x20002724
 80093c8:	10624dd3 	.word	0x10624dd3
 80093cc:	08028940 	.word	0x08028940
 80093d0:	20002758 	.word	0x20002758
 80093d4:	2000274c 	.word	0x2000274c

080093d8 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80093e2:	e037      	b.n	8009454 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80093e4:	79fa      	ldrb	r2, [r7, #7]
 80093e6:	4921      	ldr	r1, [pc, #132]	; (800946c <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 80093e8:	4613      	mov	r3, r2
 80093ea:	005b      	lsls	r3, r3, #1
 80093ec:	4413      	add	r3, r2
 80093ee:	00db      	lsls	r3, r3, #3
 80093f0:	440b      	add	r3, r1
 80093f2:	3304      	adds	r3, #4
 80093f4:	781b      	ldrb	r3, [r3, #0]
		if(
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d006      	beq.n	8009408 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80093fa:	79fb      	ldrb	r3, [r7, #7]
 80093fc:	4a1c      	ldr	r2, [pc, #112]	; (8009470 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80093fe:	4413      	add	r3, r2
 8009400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009404:	2b02      	cmp	r3, #2
 8009406:	d122      	bne.n	800944e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009408:	79fb      	ldrb	r3, [r7, #7]
 800940a:	4a1a      	ldr	r2, [pc, #104]	; (8009474 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800940c:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 800940e:	2b01      	cmp	r3, #1
 8009410:	d11d      	bne.n	800944e <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 8009412:	79fb      	ldrb	r3, [r7, #7]
 8009414:	4a17      	ldr	r2, [pc, #92]	; (8009474 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009416:	3302      	adds	r3, #2
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	685b      	ldr	r3, [r3, #4]
 800941e:	4618      	mov	r0, r3
 8009420:	f006 fdce 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009424:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8009426:	2b32      	cmp	r3, #50	; 0x32
 8009428:	d911      	bls.n	800944e <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 800942a:	79fa      	ldrb	r2, [r7, #7]
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	4611      	mov	r1, r2
 8009430:	4618      	mov	r0, r3
 8009432:	f7fb f8cf 	bl	80045d4 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 8009436:	79fb      	ldrb	r3, [r7, #7]
 8009438:	4a0e      	ldr	r2, [pc, #56]	; (8009474 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800943a:	2100      	movs	r1, #0
 800943c:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 800943e:	79fb      	ldrb	r3, [r7, #7]
 8009440:	4a0c      	ldr	r2, [pc, #48]	; (8009474 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8009442:	3302      	adds	r3, #2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	4413      	add	r3, r2
 8009448:	f04f 32ff 	mov.w	r2, #4294967295
 800944c:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800944e:	79fb      	ldrb	r3, [r7, #7]
 8009450:	3301      	adds	r3, #1
 8009452:	71fb      	strb	r3, [r7, #7]
 8009454:	4b06      	ldr	r3, [pc, #24]	; (8009470 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 8009456:	f893 3020 	ldrb.w	r3, [r3, #32]
 800945a:	79fa      	ldrb	r2, [r7, #7]
 800945c:	429a      	cmp	r2, r3
 800945e:	d3c1      	bcc.n	80093e4 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8009460:	bf00      	nop
 8009462:	bf00      	nop
 8009464:	3708      	adds	r7, #8
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	20002da4 	.word	0x20002da4
 8009470:	20000504 	.word	0x20000504
 8009474:	200033ac 	.word	0x200033ac

08009478 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800947e:	2300      	movs	r3, #0
 8009480:	71fb      	strb	r3, [r7, #7]
 8009482:	e04e      	b.n	8009522 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8009484:	79fb      	ldrb	r3, [r7, #7]
 8009486:	4a2c      	ldr	r2, [pc, #176]	; (8009538 <Check_Recv_Status_fail+0xc0>)
 8009488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d045      	beq.n	800951c <Check_Recv_Status_fail+0xa4>
 8009490:	79fa      	ldrb	r2, [r7, #7]
 8009492:	492a      	ldr	r1, [pc, #168]	; (800953c <Check_Recv_Status_fail+0xc4>)
 8009494:	4613      	mov	r3, r2
 8009496:	005b      	lsls	r3, r3, #1
 8009498:	4413      	add	r3, r2
 800949a:	00db      	lsls	r3, r3, #3
 800949c:	440b      	add	r3, r1
 800949e:	3303      	adds	r3, #3
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d03a      	beq.n	800951c <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 80094a6:	79fb      	ldrb	r3, [r7, #7]
 80094a8:	4a23      	ldr	r2, [pc, #140]	; (8009538 <Check_Recv_Status_fail+0xc0>)
 80094aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f006 fd86 	bl	800ffc0 <HAL_Elaps_Ticks>
 80094b4:	4602      	mov	r2, r0
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	4921      	ldr	r1, [pc, #132]	; (8009540 <Check_Recv_Status_fail+0xc8>)
 80094ba:	338a      	adds	r3, #138	; 0x8a
 80094bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d92b      	bls.n	800951c <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <Check_Recv_Status_fail+0xc8>)
 80094c8:	3366      	adds	r3, #102	; 0x66
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	6859      	ldr	r1, [r3, #4]
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	4a1b      	ldr	r2, [pc, #108]	; (8009540 <Check_Recv_Status_fail+0xc8>)
 80094d4:	338a      	adds	r3, #138	; 0x8a
 80094d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <Check_Recv_Status_fail+0xcc>)
 80094dc:	fba2 2303 	umull	r2, r3, r2, r3
 80094e0:	099b      	lsrs	r3, r3, #6
 80094e2:	461a      	mov	r2, r3
 80094e4:	4818      	ldr	r0, [pc, #96]	; (8009548 <Check_Recv_Status_fail+0xd0>)
 80094e6:	f01c fab9 	bl	8025a5c <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 80094ea:	79fb      	ldrb	r3, [r7, #7]
 80094ec:	4a12      	ldr	r2, [pc, #72]	; (8009538 <Check_Recv_Status_fail+0xc0>)
 80094ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80094f2:	4619      	mov	r1, r3
 80094f4:	4815      	ldr	r0, [pc, #84]	; (800954c <Check_Recv_Status_fail+0xd4>)
 80094f6:	f01c fab1 	bl	8025a5c <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80094fa:	f00f fb99 	bl	8018c30 <HAL_GetTick>
 80094fe:	4603      	mov	r3, r0
 8009500:	4619      	mov	r1, r3
 8009502:	4813      	ldr	r0, [pc, #76]	; (8009550 <Check_Recv_Status_fail+0xd8>)
 8009504:	f01c faaa 	bl	8025a5c <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8009508:	79fa      	ldrb	r2, [r7, #7]
 800950a:	490c      	ldr	r1, [pc, #48]	; (800953c <Check_Recv_Status_fail+0xc4>)
 800950c:	4613      	mov	r3, r2
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	4413      	add	r3, r2
 8009512:	00db      	lsls	r3, r3, #3
 8009514:	440b      	add	r3, r1
 8009516:	3303      	adds	r3, #3
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800951c:	79fb      	ldrb	r3, [r7, #7]
 800951e:	3301      	adds	r3, #1
 8009520:	71fb      	strb	r3, [r7, #7]
 8009522:	4b07      	ldr	r3, [pc, #28]	; (8009540 <Check_Recv_Status_fail+0xc8>)
 8009524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009528:	79fa      	ldrb	r2, [r7, #7]
 800952a:	429a      	cmp	r2, r3
 800952c:	d3aa      	bcc.n	8009484 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 800952e:	bf00      	nop
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}
 8009538:	20002658 	.word	0x20002658
 800953c:	20002da4 	.word	0x20002da4
 8009540:	20000504 	.word	0x20000504
 8009544:	10624dd3 	.word	0x10624dd3
 8009548:	0802896c 	.word	0x0802896c
 800954c:	080289a0 	.word	0x080289a0
 8009550:	080289d0 	.word	0x080289d0

08009554 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8009554:	b590      	push	{r4, r7, lr}
 8009556:	b087      	sub	sp, #28
 8009558:	af00      	add	r7, sp, #0
 800955a:	4603      	mov	r3, r0
 800955c:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 800955e:	2300      	movs	r3, #0
 8009560:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8009566:	2301      	movs	r3, #1
 8009568:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	4a39      	ldr	r2, [pc, #228]	; (8009654 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 800956e:	4413      	add	r3, r2
 8009570:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009574:	2b01      	cmp	r3, #1
 8009576:	d168      	bne.n	800964a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8009578:	4b37      	ldr	r3, [pc, #220]	; (8009658 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 800957a:	781b      	ldrb	r3, [r3, #0]
 800957c:	2b01      	cmp	r3, #1
 800957e:	d164      	bne.n	800964a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009580:	79fa      	ldrb	r2, [r7, #7]
 8009582:	4936      	ldr	r1, [pc, #216]	; (800965c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009584:	4613      	mov	r3, r2
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	4413      	add	r3, r2
 800958a:	005b      	lsls	r3, r3, #1
 800958c:	440b      	add	r3, r1
 800958e:	781b      	ldrb	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f002 ffcd 	bl	800c530 <bcdToDec>
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800959e:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80095a2:	79fa      	ldrb	r2, [r7, #7]
 80095a4:	492d      	ldr	r1, [pc, #180]	; (800965c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80095a6:	4613      	mov	r3, r2
 80095a8:	005b      	lsls	r3, r3, #1
 80095aa:	4413      	add	r3, r2
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	440b      	add	r3, r1
 80095b0:	3301      	adds	r3, #1
 80095b2:	781b      	ldrb	r3, [r3, #0]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f002 ffbb 	bl	800c530 <bcdToDec>
 80095ba:	4603      	mov	r3, r0
 80095bc:	461a      	mov	r2, r3
 80095be:	4613      	mov	r3, r2
 80095c0:	011b      	lsls	r3, r3, #4
 80095c2:	1a9b      	subs	r3, r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80095c6:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80095c8:	79fa      	ldrb	r2, [r7, #7]
 80095ca:	4924      	ldr	r1, [pc, #144]	; (800965c <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80095cc:	4613      	mov	r3, r2
 80095ce:	005b      	lsls	r3, r3, #1
 80095d0:	4413      	add	r3, r2
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	440b      	add	r3, r1
 80095d6:	3302      	adds	r3, #2
 80095d8:	781b      	ldrb	r3, [r3, #0]
 80095da:	4618      	mov	r0, r3
 80095dc:	f002 ffa8 	bl	800c530 <bcdToDec>
 80095e0:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80095e2:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80095e4:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80095e6:	613b      	str	r3, [r7, #16]

		Get_time();
 80095e8:	f003 f89e 	bl	800c728 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80095ec:	4b1c      	ldr	r3, [pc, #112]	; (8009660 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80095ee:	781b      	ldrb	r3, [r3, #0]
 80095f0:	461a      	mov	r2, r3
 80095f2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80095f6:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80095fa:	4b19      	ldr	r3, [pc, #100]	; (8009660 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	4619      	mov	r1, r3
 8009600:	460b      	mov	r3, r1
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	1a5b      	subs	r3, r3, r1
 8009606:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009608:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 800960a:	4a15      	ldr	r2, [pc, #84]	; (8009660 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 800960c:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 800960e:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8009610:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8009612:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8009614:	693a      	ldr	r2, [r7, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	1ad3      	subs	r3, r2, r3
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfb8      	it	lt
 800961e:	425b      	neglt	r3, r3
 8009620:	2b01      	cmp	r3, #1
 8009622:	dd12      	ble.n	800964a <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	1ad3      	subs	r3, r2, r3
 800962a:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 800962e:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8009632:	79fb      	ldrb	r3, [r7, #7]
 8009634:	4a07      	ldr	r2, [pc, #28]	; (8009654 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009636:	3366      	adds	r3, #102	; 0x66
 8009638:	009b      	lsls	r3, r3, #2
 800963a:	4413      	add	r3, r2
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	461a      	mov	r2, r3
 8009640:	4808      	ldr	r0, [pc, #32]	; (8009664 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8009642:	f01c fa0b 	bl	8025a5c <iprintf>
			Return_Value  = 0;
 8009646:	2300      	movs	r3, #0
 8009648:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 800964a:	7dfb      	ldrb	r3, [r7, #23]
}
 800964c:	4618      	mov	r0, r3
 800964e:	371c      	adds	r7, #28
 8009650:	46bd      	mov	sp, r7
 8009652:	bd90      	pop	{r4, r7, pc}
 8009654:	20000504 	.word	0x20000504
 8009658:	200024e0 	.word	0x200024e0
 800965c:	200028b8 	.word	0x200028b8
 8009660:	20003f20 	.word	0x20003f20
 8009664:	080289dc 	.word	0x080289dc

08009668 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8009668:	b590      	push	{r4, r7, lr}
 800966a:	b083      	sub	sp, #12
 800966c:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800966e:	2300      	movs	r3, #0
 8009670:	71fb      	strb	r3, [r7, #7]
 8009672:	e045      	b.n	8009700 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8009674:	79fb      	ldrb	r3, [r7, #7]
 8009676:	4618      	mov	r0, r3
 8009678:	f7fe fec6 	bl	8008408 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800967c:	79fa      	ldrb	r2, [r7, #7]
 800967e:	4926      	ldr	r1, [pc, #152]	; (8009718 <Check_All_Peers+0xb0>)
 8009680:	4613      	mov	r3, r2
 8009682:	005b      	lsls	r3, r3, #1
 8009684:	4413      	add	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	3304      	adds	r3, #4
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4618      	mov	r0, r3
 8009690:	f006 fc96 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009694:	4602      	mov	r2, r0
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	4920      	ldr	r1, [pc, #128]	; (800971c <Check_All_Peers+0xb4>)
 800969a:	338a      	adds	r3, #138	; 0x8a
 800969c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80096a0:	429a      	cmp	r2, r3
 80096a2:	d92a      	bls.n	80096fa <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 80096a4:	79fa      	ldrb	r2, [r7, #7]
 80096a6:	491c      	ldr	r1, [pc, #112]	; (8009718 <Check_All_Peers+0xb0>)
 80096a8:	4613      	mov	r3, r2
 80096aa:	005b      	lsls	r3, r3, #1
 80096ac:	4413      	add	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	440b      	add	r3, r1
 80096b2:	3301      	adds	r3, #1
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d11f      	bne.n	80096fa <Check_All_Peers+0x92>
 80096ba:	79fb      	ldrb	r3, [r7, #7]
 80096bc:	4a18      	ldr	r2, [pc, #96]	; (8009720 <Check_All_Peers+0xb8>)
 80096be:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80096c2:	79fa      	ldrb	r2, [r7, #7]
 80096c4:	4814      	ldr	r0, [pc, #80]	; (8009718 <Check_All_Peers+0xb0>)
 80096c6:	4613      	mov	r3, r2
 80096c8:	005b      	lsls	r3, r3, #1
 80096ca:	4413      	add	r3, r2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4403      	add	r3, r0
 80096d0:	3304      	adds	r3, #4
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4299      	cmp	r1, r3
 80096d6:	d010      	beq.n	80096fa <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 80096d8:	79fa      	ldrb	r2, [r7, #7]
 80096da:	490f      	ldr	r1, [pc, #60]	; (8009718 <Check_All_Peers+0xb0>)
 80096dc:	4613      	mov	r3, r2
 80096de:	005b      	lsls	r3, r3, #1
 80096e0:	4413      	add	r3, r2
 80096e2:	009b      	lsls	r3, r3, #2
 80096e4:	440b      	add	r3, r1
 80096e6:	3301      	adds	r3, #1
 80096e8:	2200      	movs	r2, #0
 80096ea:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 80096ec:	79fc      	ldrb	r4, [r7, #7]
 80096ee:	f00f fa9f 	bl	8018c30 <HAL_GetTick>
 80096f2:	4603      	mov	r3, r0
 80096f4:	4a0a      	ldr	r2, [pc, #40]	; (8009720 <Check_All_Peers+0xb8>)
 80096f6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	3301      	adds	r3, #1
 80096fe:	71fb      	strb	r3, [r7, #7]
 8009700:	4b06      	ldr	r3, [pc, #24]	; (800971c <Check_All_Peers+0xb4>)
 8009702:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009706:	79fa      	ldrb	r2, [r7, #7]
 8009708:	429a      	cmp	r2, r3
 800970a:	d3b3      	bcc.n	8009674 <Check_All_Peers+0xc>
			}
		}
	}
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	370c      	adds	r7, #12
 8009712:	46bd      	mov	sp, r7
 8009714:	bd90      	pop	{r4, r7, pc}
 8009716:	bf00      	nop
 8009718:	200033e0 	.word	0x200033e0
 800971c:	20000504 	.word	0x20000504
 8009720:	20003794 	.word	0x20003794

08009724 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009724:	b590      	push	{r4, r7, lr}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800972a:	4976      	ldr	r1, [pc, #472]	; (8009904 <Check_for_RelayMisMatch+0x1e0>)
 800972c:	4876      	ldr	r0, [pc, #472]	; (8009908 <Check_for_RelayMisMatch+0x1e4>)
 800972e:	f7f6 fd87 	bl	8000240 <strcmp>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	f000 80e0 	beq.w	80098fa <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 800973a:	2300      	movs	r3, #0
 800973c:	71fb      	strb	r3, [r7, #7]
 800973e:	e0d4      	b.n	80098ea <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	4a72      	ldr	r2, [pc, #456]	; (800990c <Check_for_RelayMisMatch+0x1e8>)
 8009744:	4413      	add	r3, r2
 8009746:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800974a:	2b01      	cmp	r3, #1
 800974c:	f000 80c7 	beq.w	80098de <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009750:	79fb      	ldrb	r3, [r7, #7]
 8009752:	4a6f      	ldr	r2, [pc, #444]	; (8009910 <Check_for_RelayMisMatch+0x1ec>)
 8009754:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009758:	4618      	mov	r0, r3
 800975a:	f006 fc31 	bl	800ffc0 <HAL_Elaps_Ticks>
 800975e:	4603      	mov	r3, r0
 8009760:	f241 3287 	movw	r2, #4999	; 0x1387
 8009764:	4293      	cmp	r3, r2
 8009766:	d906      	bls.n	8009776 <Check_for_RelayMisMatch+0x52>
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	4a6a      	ldr	r2, [pc, #424]	; (8009914 <Check_for_RelayMisMatch+0x1f0>)
 800976c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009770:	2b01      	cmp	r3, #1
 8009772:	f040 80ac 	bne.w	80098ce <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 8009776:	79fb      	ldrb	r3, [r7, #7]
 8009778:	4a67      	ldr	r2, [pc, #412]	; (8009918 <Check_for_RelayMisMatch+0x1f4>)
 800977a:	5cd3      	ldrb	r3, [r2, r3]
 800977c:	2b01      	cmp	r3, #1
 800977e:	d116      	bne.n	80097ae <Check_for_RelayMisMatch+0x8a>
 8009780:	79fb      	ldrb	r3, [r7, #7]
 8009782:	4a66      	ldr	r2, [pc, #408]	; (800991c <Check_for_RelayMisMatch+0x1f8>)
 8009784:	5cd3      	ldrb	r3, [r2, r3]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d111      	bne.n	80097ae <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 800978a:	79fa      	ldrb	r2, [r7, #7]
 800978c:	4613      	mov	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	4413      	add	r3, r2
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	4a62      	ldr	r2, [pc, #392]	; (8009920 <Check_for_RelayMisMatch+0x1fc>)
 8009796:	1898      	adds	r0, r3, r2
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4613      	mov	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4a60      	ldr	r2, [pc, #384]	; (8009924 <Check_for_RelayMisMatch+0x200>)
 80097a4:	4413      	add	r3, r2
 80097a6:	2214      	movs	r2, #20
 80097a8:	4619      	mov	r1, r3
 80097aa:	f01c f847 	bl	802583c <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 80097ae:	79fa      	ldrb	r2, [r7, #7]
 80097b0:	495b      	ldr	r1, [pc, #364]	; (8009920 <Check_for_RelayMisMatch+0x1fc>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3312      	adds	r3, #18
 80097be:	8819      	ldrh	r1, [r3, #0]
 80097c0:	79fa      	ldrb	r2, [r7, #7]
 80097c2:	4858      	ldr	r0, [pc, #352]	; (8009924 <Check_for_RelayMisMatch+0x200>)
 80097c4:	4613      	mov	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	4413      	add	r3, r2
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4403      	add	r3, r0
 80097ce:	3312      	adds	r3, #18
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	4299      	cmp	r1, r3
 80097d4:	d076      	beq.n	80098c4 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 80097d6:	79fb      	ldrb	r3, [r7, #7]
 80097d8:	4a53      	ldr	r2, [pc, #332]	; (8009928 <Check_for_RelayMisMatch+0x204>)
 80097da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097de:	4618      	mov	r0, r3
 80097e0:	f006 fbee 	bl	800ffc0 <HAL_Elaps_Ticks>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80097ea:	d37a      	bcc.n	80098e2 <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 80097ec:	79fb      	ldrb	r3, [r7, #7]
 80097ee:	4a49      	ldr	r2, [pc, #292]	; (8009914 <Check_for_RelayMisMatch+0x1f0>)
 80097f0:	2101      	movs	r1, #1
 80097f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 80097f6:	79fa      	ldrb	r2, [r7, #7]
 80097f8:	4949      	ldr	r1, [pc, #292]	; (8009920 <Check_for_RelayMisMatch+0x1fc>)
 80097fa:	4613      	mov	r3, r2
 80097fc:	009b      	lsls	r3, r3, #2
 80097fe:	4413      	add	r3, r2
 8009800:	009b      	lsls	r3, r3, #2
 8009802:	440b      	add	r3, r1
 8009804:	3312      	adds	r3, #18
 8009806:	881b      	ldrh	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d10a      	bne.n	8009822 <Check_for_RelayMisMatch+0xfe>
 800980c:	79fa      	ldrb	r2, [r7, #7]
 800980e:	4945      	ldr	r1, [pc, #276]	; (8009924 <Check_for_RelayMisMatch+0x200>)
 8009810:	4613      	mov	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4413      	add	r3, r2
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	440b      	add	r3, r1
 800981a:	3312      	adds	r3, #18
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d115      	bne.n	800984e <Check_for_RelayMisMatch+0x12a>
 8009822:	79fa      	ldrb	r2, [r7, #7]
 8009824:	493e      	ldr	r1, [pc, #248]	; (8009920 <Check_for_RelayMisMatch+0x1fc>)
 8009826:	4613      	mov	r3, r2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	440b      	add	r3, r1
 8009830:	3312      	adds	r3, #18
 8009832:	881b      	ldrh	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d00f      	beq.n	8009858 <Check_for_RelayMisMatch+0x134>
 8009838:	79fa      	ldrb	r2, [r7, #7]
 800983a:	493a      	ldr	r1, [pc, #232]	; (8009924 <Check_for_RelayMisMatch+0x200>)
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	3312      	adds	r3, #18
 8009848:	881b      	ldrh	r3, [r3, #0]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d104      	bne.n	8009858 <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 800984e:	79fb      	ldrb	r3, [r7, #7]
 8009850:	4a30      	ldr	r2, [pc, #192]	; (8009914 <Check_for_RelayMisMatch+0x1f0>)
 8009852:	2100      	movs	r1, #0
 8009854:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	4a2e      	ldr	r2, [pc, #184]	; (8009914 <Check_for_RelayMisMatch+0x1f0>)
 800985c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009860:	2b01      	cmp	r3, #1
 8009862:	d134      	bne.n	80098ce <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 8009864:	79fb      	ldrb	r3, [r7, #7]
 8009866:	4a2d      	ldr	r2, [pc, #180]	; (800991c <Check_for_RelayMisMatch+0x1f8>)
 8009868:	5cd3      	ldrb	r3, [r2, r3]
 800986a:	4619      	mov	r1, r3
 800986c:	79fb      	ldrb	r3, [r7, #7]
 800986e:	4a2a      	ldr	r2, [pc, #168]	; (8009918 <Check_for_RelayMisMatch+0x1f4>)
 8009870:	5cd3      	ldrb	r3, [r2, r3]
 8009872:	461a      	mov	r2, r3
 8009874:	482d      	ldr	r0, [pc, #180]	; (800992c <Check_for_RelayMisMatch+0x208>)
 8009876:	f01c f8f1 	bl	8025a5c <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800987a:	79fb      	ldrb	r3, [r7, #7]
 800987c:	4a23      	ldr	r2, [pc, #140]	; (800990c <Check_for_RelayMisMatch+0x1e8>)
 800987e:	3366      	adds	r3, #102	; 0x66
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	4619      	mov	r1, r3
 8009888:	4829      	ldr	r0, [pc, #164]	; (8009930 <Check_for_RelayMisMatch+0x20c>)
 800988a:	f01c f8e7 	bl	8025a5c <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 800988e:	79fa      	ldrb	r2, [r7, #7]
 8009890:	4923      	ldr	r1, [pc, #140]	; (8009920 <Check_for_RelayMisMatch+0x1fc>)
 8009892:	4613      	mov	r3, r2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	440b      	add	r3, r1
 800989c:	3312      	adds	r3, #18
 800989e:	881b      	ldrh	r3, [r3, #0]
 80098a0:	4619      	mov	r1, r3
 80098a2:	4824      	ldr	r0, [pc, #144]	; (8009934 <Check_for_RelayMisMatch+0x210>)
 80098a4:	f01c f8da 	bl	8025a5c <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 80098a8:	79fa      	ldrb	r2, [r7, #7]
 80098aa:	491e      	ldr	r1, [pc, #120]	; (8009924 <Check_for_RelayMisMatch+0x200>)
 80098ac:	4613      	mov	r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	3312      	adds	r3, #18
 80098b8:	881b      	ldrh	r3, [r3, #0]
 80098ba:	4619      	mov	r1, r3
 80098bc:	481e      	ldr	r0, [pc, #120]	; (8009938 <Check_for_RelayMisMatch+0x214>)
 80098be:	f01c f8cd 	bl	8025a5c <iprintf>
 80098c2:	e004      	b.n	80098ce <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 80098c4:	79fb      	ldrb	r3, [r7, #7]
 80098c6:	4a13      	ldr	r2, [pc, #76]	; (8009914 <Check_for_RelayMisMatch+0x1f0>)
 80098c8:	2100      	movs	r1, #0
 80098ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 80098ce:	79fc      	ldrb	r4, [r7, #7]
 80098d0:	f00f f9ae 	bl	8018c30 <HAL_GetTick>
 80098d4:	4603      	mov	r3, r0
 80098d6:	4a0e      	ldr	r2, [pc, #56]	; (8009910 <Check_for_RelayMisMatch+0x1ec>)
 80098d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80098dc:	e002      	b.n	80098e4 <Check_for_RelayMisMatch+0x1c0>
			continue;
 80098de:	bf00      	nop
 80098e0:	e000      	b.n	80098e4 <Check_for_RelayMisMatch+0x1c0>
					continue;
 80098e2:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 80098e4:	79fb      	ldrb	r3, [r7, #7]
 80098e6:	3301      	adds	r3, #1
 80098e8:	71fb      	strb	r3, [r7, #7]
 80098ea:	4b08      	ldr	r3, [pc, #32]	; (800990c <Check_for_RelayMisMatch+0x1e8>)
 80098ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098f0:	79fa      	ldrb	r2, [r7, #7]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	f4ff af24 	bcc.w	8009740 <Check_for_RelayMisMatch+0x1c>
 80098f8:	e000      	b.n	80098fc <Check_for_RelayMisMatch+0x1d8>
		return;
 80098fa:	bf00      	nop
	}
}
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd90      	pop	{r4, r7, pc}
 8009902:	bf00      	nop
 8009904:	0802756c 	.word	0x0802756c
 8009908:	20000505 	.word	0x20000505
 800990c:	20000504 	.word	0x20000504
 8009910:	200037bc 	.word	0x200037bc
 8009914:	20002550 	.word	0x20002550
 8009918:	200025fc 	.word	0x200025fc
 800991c:	200025f0 	.word	0x200025f0
 8009920:	20003598 	.word	0x20003598
 8009924:	20003660 	.word	0x20003660
 8009928:	20002564 	.word	0x20002564
 800992c:	08028a1c 	.word	0x08028a1c
 8009930:	08028a28 	.word	0x08028a28
 8009934:	08028a34 	.word	0x08028a34
 8009938:	08028a44 	.word	0x08028a44

0800993c <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009946:	f00f f973 	bl	8018c30 <HAL_GetTick>
 800994a:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 800994c:	79fa      	ldrb	r2, [r7, #7]
 800994e:	4935      	ldr	r1, [pc, #212]	; (8009a24 <CheckOtherLinkStatus+0xe8>)
 8009950:	4613      	mov	r3, r2
 8009952:	005b      	lsls	r3, r3, #1
 8009954:	4413      	add	r3, r2
 8009956:	00db      	lsls	r3, r3, #3
 8009958:	440b      	add	r3, r1
 800995a:	3302      	adds	r3, #2
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d11d      	bne.n	800999e <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009962:	79fb      	ldrb	r3, [r7, #7]
 8009964:	4930      	ldr	r1, [pc, #192]	; (8009a28 <CheckOtherLinkStatus+0xec>)
 8009966:	68fa      	ldr	r2, [r7, #12]
 8009968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 800996c:	79fa      	ldrb	r2, [r7, #7]
 800996e:	492f      	ldr	r1, [pc, #188]	; (8009a2c <CheckOtherLinkStatus+0xf0>)
 8009970:	4613      	mov	r3, r2
 8009972:	005b      	lsls	r3, r3, #1
 8009974:	4413      	add	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	440b      	add	r3, r1
 800997a:	3304      	adds	r3, #4
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009980:	79fa      	ldrb	r2, [r7, #7]
 8009982:	492a      	ldr	r1, [pc, #168]	; (8009a2c <CheckOtherLinkStatus+0xf0>)
 8009984:	4613      	mov	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	4413      	add	r3, r2
 800998a:	009b      	lsls	r3, r3, #2
 800998c:	440b      	add	r3, r1
 800998e:	3301      	adds	r3, #1
 8009990:	2201      	movs	r2, #1
 8009992:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009994:	79fb      	ldrb	r3, [r7, #7]
 8009996:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <CheckOtherLinkStatus+0xf4>)
 8009998:	2101      	movs	r1, #1
 800999a:	54d1      	strb	r1, [r2, r3]
 800999c:	e02e      	b.n	80099fc <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	4a23      	ldr	r2, [pc, #140]	; (8009a30 <CheckOtherLinkStatus+0xf4>)
 80099a2:	2100      	movs	r1, #0
 80099a4:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 80099a6:	79fa      	ldrb	r2, [r7, #7]
 80099a8:	4920      	ldr	r1, [pc, #128]	; (8009a2c <CheckOtherLinkStatus+0xf0>)
 80099aa:	4613      	mov	r3, r2
 80099ac:	005b      	lsls	r3, r3, #1
 80099ae:	4413      	add	r3, r2
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	440b      	add	r3, r1
 80099b4:	3308      	adds	r3, #8
 80099b6:	68fa      	ldr	r2, [r7, #12]
 80099b8:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 80099ba:	79fa      	ldrb	r2, [r7, #7]
 80099bc:	491b      	ldr	r1, [pc, #108]	; (8009a2c <CheckOtherLinkStatus+0xf0>)
 80099be:	4613      	mov	r3, r2
 80099c0:	005b      	lsls	r3, r3, #1
 80099c2:	4413      	add	r3, r2
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	440b      	add	r3, r1
 80099c8:	3301      	adds	r3, #1
 80099ca:	2200      	movs	r2, #0
 80099cc:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 80099ce:	79fa      	ldrb	r2, [r7, #7]
 80099d0:	4918      	ldr	r1, [pc, #96]	; (8009a34 <CheckOtherLinkStatus+0xf8>)
 80099d2:	4613      	mov	r3, r2
 80099d4:	009b      	lsls	r3, r3, #2
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	440b      	add	r3, r1
 80099dc:	3312      	adds	r3, #18
 80099de:	2200      	movs	r2, #0
 80099e0:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 80099e2:	79fa      	ldrb	r2, [r7, #7]
 80099e4:	4613      	mov	r3, r2
 80099e6:	009b      	lsls	r3, r3, #2
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	4a11      	ldr	r2, [pc, #68]	; (8009a34 <CheckOtherLinkStatus+0xf8>)
 80099ee:	4413      	add	r3, r2
 80099f0:	3301      	adds	r3, #1
 80099f2:	2210      	movs	r2, #16
 80099f4:	2100      	movs	r1, #0
 80099f6:	4618      	mov	r0, r3
 80099f8:	f01b ff48 	bl	802588c <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 80099fc:	79fa      	ldrb	r2, [r7, #7]
 80099fe:	4909      	ldr	r1, [pc, #36]	; (8009a24 <CheckOtherLinkStatus+0xe8>)
 8009a00:	4613      	mov	r3, r2
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	4413      	add	r3, r2
 8009a06:	00db      	lsls	r3, r3, #3
 8009a08:	440b      	add	r3, r1
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b01      	cmp	r3, #1
 8009a10:	d104      	bne.n	8009a1c <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009a12:	79fb      	ldrb	r3, [r7, #7]
 8009a14:	4908      	ldr	r1, [pc, #32]	; (8009a38 <CheckOtherLinkStatus+0xfc>)
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}
 8009a24:	20002e94 	.word	0x20002e94
 8009a28:	200025c8 	.word	0x200025c8
 8009a2c:	20003458 	.word	0x20003458
 8009a30:	200025fc 	.word	0x200025fc
 8009a34:	20003660 	.word	0x20003660
 8009a38:	20002510 	.word	0x20002510

08009a3c <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009a40:	4b1a      	ldr	r3, [pc, #104]	; (8009aac <SendRelay2_Other+0x70>)
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4618      	mov	r0, r3
 8009a46:	f006 fabb 	bl	800ffc0 <HAL_Elaps_Ticks>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a50:	d92a      	bls.n	8009aa8 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009a52:	2214      	movs	r2, #20
 8009a54:	2100      	movs	r1, #0
 8009a56:	4816      	ldr	r0, [pc, #88]	; (8009ab0 <SendRelay2_Other+0x74>)
 8009a58:	f01b ff18 	bl	802588c <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009a5c:	4b15      	ldr	r3, [pc, #84]	; (8009ab4 <SendRelay2_Other+0x78>)
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	4a13      	ldr	r2, [pc, #76]	; (8009ab8 <SendRelay2_Other+0x7c>)
 8009a6a:	4413      	add	r3, r2
 8009a6c:	2214      	movs	r2, #20
 8009a6e:	4619      	mov	r1, r3
 8009a70:	480f      	ldr	r0, [pc, #60]	; (8009ab0 <SendRelay2_Other+0x74>)
 8009a72:	f01b fee3 	bl	802583c <memcpy>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8009a76:	f44f 7002 	mov.w	r0, #520	; 0x208
 8009a7a:	f007 f81d 	bl	8010ab8 <TransmitCanPkt>
#endif

		++Traverser;
 8009a7e:	4b0d      	ldr	r3, [pc, #52]	; (8009ab4 <SendRelay2_Other+0x78>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3301      	adds	r3, #1
 8009a84:	4a0b      	ldr	r2, [pc, #44]	; (8009ab4 <SendRelay2_Other+0x78>)
 8009a86:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009a88:	4b0c      	ldr	r3, [pc, #48]	; (8009abc <SendRelay2_Other+0x80>)
 8009a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	4b08      	ldr	r3, [pc, #32]	; (8009ab4 <SendRelay2_Other+0x78>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d102      	bne.n	8009a9e <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <SendRelay2_Other+0x78>)
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009a9e:	f00f f8c7 	bl	8018c30 <HAL_GetTick>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4a01      	ldr	r2, [pc, #4]	; (8009aac <SendRelay2_Other+0x70>)
 8009aa6:	6013      	str	r3, [r2, #0]
	}
}
 8009aa8:	bf00      	nop
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	200037e4 	.word	0x200037e4
 8009ab0:	20003728 	.word	0x20003728
 8009ab4:	200037e8 	.word	0x200037e8
 8009ab8:	20003598 	.word	0x20003598
 8009abc:	20000504 	.word	0x20000504

08009ac0 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	af00      	add	r7, sp, #0
	while(1)
	{
		process_to_comReceived();
 8009ac4:	f7f7 fc14 	bl	80012f0 <process_to_comReceived>

		Check_OnlineDiag_OFC_Modem();
 8009ac8:	f7f7 fa7c 	bl	8000fc4 <Check_OnlineDiag_OFC_Modem>

		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009acc:	f016 faaa 	bl	8020024 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009ad0:	481b      	ldr	r0, [pc, #108]	; (8009b40 <Process_HitachiEI+0x80>)
 8009ad2:	f012 fb1f 	bl	801c114 <HAL_IWDG_Refresh>

		Feed_wdt();
 8009ad6:	f00b fe11 	bl	80156fc <Feed_wdt>

		readCanToStructs();
 8009ada:	f007 f977 	bl	8010dcc <readCanToStructs>

		Check_for_cmd();
 8009ade:	f7f7 f83b 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8009ae2:	f7f7 fdaf 	bl	8001644 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009ae6:	f7f7 fe1b 	bl	8001720 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009aea:	f7fe ff91 	bl	8008a10 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009aee:	f7fe feb7 	bl	8008860 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8009af2:	f7fe ff21 	bl	8008938 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009af6:	f7fe fe23 	bl	8008740 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009afa:	f7ff fdb5 	bl	8009668 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009afe:	f7ff fc6b 	bl	80093d8 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8009b02:	f7ff fbeb 	bl	80092dc <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009b06:	f7ff fcb7 	bl	8009478 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009b0a:	f002 fe6f 	bl	800c7ec <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009b0e:	f7ff fe09 	bl	8009724 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009b12:	f7ff ff93 	bl	8009a3c <SendRelay2_Other>

		Print_BuildDat_Details();
 8009b16:	f00e f811 	bl	8017b3c <Print_BuildDat_Details>

		CheckEIPC_DAT_CRC();
 8009b1a:	f7f7 fa17 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8009b1e:	4b09      	ldr	r3, [pc, #36]	; (8009b44 <Process_HitachiEI+0x84>)
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d003      	beq.n	8009b2e <Process_HitachiEI+0x6e>
		{
			gucFlagUpdate = 3;
 8009b26:	4b08      	ldr	r3, [pc, #32]	; (8009b48 <Process_HitachiEI+0x88>)
 8009b28:	2203      	movs	r2, #3
 8009b2a:	701a      	strb	r2, [r3, #0]
			break;
 8009b2c:	e002      	b.n	8009b34 <Process_HitachiEI+0x74>
		}

		Enable_UART_Interrupts();
 8009b2e:	f00e fe6d 	bl	801880c <Enable_UART_Interrupts>
		process_to_comReceived();
 8009b32:	e7c7      	b.n	8009ac4 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009b34:	f00d ff00 	bl	8017938 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009b38:	4801      	ldr	r0, [pc, #4]	; (8009b40 <Process_HitachiEI+0x80>)
 8009b3a:	f012 faeb 	bl	801c114 <HAL_IWDG_Refresh>
		Data_Processing();
 8009b3e:	e7f9      	b.n	8009b34 <Process_HitachiEI+0x74>
 8009b40:	2000b370 	.word	0x2000b370
 8009b44:	20000bba 	.word	0x20000bba
 8009b48:	20000fbd 	.word	0x20000fbd

08009b4c <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009b52:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009b54:	2300      	movs	r3, #0
 8009b56:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 8009b60:	2301      	movs	r3, #1
 8009b62:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 8009b66:	2300      	movs	r3, #0
 8009b68:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009b72:	4b8d      	ldr	r3, [pc, #564]	; (8009da8 <ReAssignData+0x25c>)
 8009b74:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009b78:	4619      	mov	r1, r3
 8009b7a:	488c      	ldr	r0, [pc, #560]	; (8009dac <ReAssignData+0x260>)
 8009b7c:	f01b ff6e 	bl	8025a5c <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 8009b80:	4b89      	ldr	r3, [pc, #548]	; (8009da8 <ReAssignData+0x25c>)
 8009b82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f000 83d8 	beq.w	800a33c <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 8009b8c:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009b90:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009b94:	2100      	movs	r1, #0
 8009b96:	4618      	mov	r0, r3
 8009b98:	f01b fe78 	bl	802588c <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 8009b9c:	463b      	mov	r3, r7
 8009b9e:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f01b fe71 	bl	802588c <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009baa:	2300      	movs	r3, #0
 8009bac:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009bb0:	e026      	b.n	8009c00 <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009bb2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009bb6:	4a7c      	ldr	r2, [pc, #496]	; (8009da8 <ReAssignData+0x25c>)
 8009bb8:	4413      	add	r3, r2
 8009bba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d103      	bne.n	8009bca <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 8009bc8:	e015      	b.n	8009bf6 <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 8009bca:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009bce:	4a76      	ldr	r2, [pc, #472]	; (8009da8 <ReAssignData+0x25c>)
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d10d      	bne.n	8009bf6 <ReAssignData+0xaa>
 8009bda:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d009      	beq.n	8009bf6 <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009be2:	4b71      	ldr	r3, [pc, #452]	; (8009da8 <ReAssignData+0x25c>)
 8009be4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009be8:	4619      	mov	r1, r3
 8009bea:	4871      	ldr	r0, [pc, #452]	; (8009db0 <ReAssignData+0x264>)
 8009bec:	f01b ff36 	bl	8025a5c <iprintf>
			OrderOKFlag = RESET;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009bf6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009c00:	4b69      	ldr	r3, [pc, #420]	; (8009da8 <ReAssignData+0x25c>)
 8009c02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c06:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d3d1      	bcc.n	8009bb2 <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009c0e:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009c12:	f083 0301 	eor.w	r3, r3, #1
 8009c16:	b2db      	uxtb	r3, r3
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	f000 838b 	beq.w	800a334 <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009c1e:	4a65      	ldr	r2, [pc, #404]	; (8009db4 <ReAssignData+0x268>)
 8009c20:	4b61      	ldr	r3, [pc, #388]	; (8009da8 <ReAssignData+0x25c>)
 8009c22:	4610      	mov	r0, r2
 8009c24:	4619      	mov	r1, r3
 8009c26:	f44f 7356 	mov.w	r3, #856	; 0x358
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	f01b fe06 	bl	802583c <memcpy>
		ReorderFlag = SET;
 8009c30:	4b61      	ldr	r3, [pc, #388]	; (8009db8 <ReAssignData+0x26c>)
 8009c32:	2201      	movs	r2, #1
 8009c34:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 8009c36:	4861      	ldr	r0, [pc, #388]	; (8009dbc <ReAssignData+0x270>)
 8009c38:	f01b ffac 	bl	8025b94 <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009c42:	e172      	b.n	8009f2a <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009c44:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c48:	4a57      	ldr	r2, [pc, #348]	; (8009da8 <ReAssignData+0x25c>)
 8009c4a:	4413      	add	r3, r2
 8009c4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	f040 80b5 	bne.w	8009dc0 <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009c56:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c5a:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009c5e:	4952      	ldr	r1, [pc, #328]	; (8009da8 <ReAssignData+0x25c>)
 8009c60:	440a      	add	r2, r1
 8009c62:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009c66:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009c6a:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009c6e:	4413      	add	r3, r2
 8009c70:	460a      	mov	r2, r1
 8009c72:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009c76:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009c7a:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009c7e:	494a      	ldr	r1, [pc, #296]	; (8009da8 <ReAssignData+0x25c>)
 8009c80:	440a      	add	r2, r1
 8009c82:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009c86:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009c8a:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009c8e:	4413      	add	r3, r2
 8009c90:	460a      	mov	r2, r1
 8009c92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009c96:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009c9a:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009c9e:	4a42      	ldr	r2, [pc, #264]	; (8009da8 <ReAssignData+0x25c>)
 8009ca0:	3366      	adds	r3, #102	; 0x66
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	4413      	add	r3, r2
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009cac:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009cb0:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009cba:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009cbe:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 8009cc2:	4a39      	ldr	r2, [pc, #228]	; (8009da8 <ReAssignData+0x25c>)
 8009cc4:	3370      	adds	r3, #112	; 0x70
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	685a      	ldr	r2, [r3, #4]
 8009ccc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009cd0:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 8009cd4:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	440b      	add	r3, r1
 8009cdc:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009cde:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ce2:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009ce6:	4a30      	ldr	r2, [pc, #192]	; (8009da8 <ReAssignData+0x25c>)
 8009ce8:	33fe      	adds	r3, #254	; 0xfe
 8009cea:	005b      	lsls	r3, r3, #1
 8009cec:	4413      	add	r3, r2
 8009cee:	8898      	ldrh	r0, [r3, #4]
 8009cf0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009cf4:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009cf8:	f101 03fe 	add.w	r3, r1, #254	; 0xfe
 8009cfc:	005b      	lsls	r3, r3, #1
 8009cfe:	4413      	add	r3, r2
 8009d00:	4602      	mov	r2, r0
 8009d02:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009d04:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009d08:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009d0c:	4926      	ldr	r1, [pc, #152]	; (8009da8 <ReAssignData+0x25c>)
 8009d0e:	440a      	add	r2, r1
 8009d10:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009d14:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009d18:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 8009d1c:	4413      	add	r3, r2
 8009d1e:	460a      	mov	r2, r1
 8009d20:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009d24:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d28:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009d2c:	491e      	ldr	r1, [pc, #120]	; (8009da8 <ReAssignData+0x25c>)
 8009d2e:	338a      	adds	r3, #138	; 0x8a
 8009d30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d34:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d38:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d3c:	328a      	adds	r2, #138	; 0x8a
 8009d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009d42:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d46:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009d4a:	4917      	ldr	r1, [pc, #92]	; (8009da8 <ReAssignData+0x25c>)
 8009d4c:	3394      	adds	r3, #148	; 0x94
 8009d4e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d52:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d56:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d5a:	3294      	adds	r2, #148	; 0x94
 8009d5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009d60:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009d64:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 8009d68:	490f      	ldr	r1, [pc, #60]	; (8009da8 <ReAssignData+0x25c>)
 8009d6a:	339e      	adds	r3, #158	; 0x9e
 8009d6c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009d70:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d74:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d78:	329e      	adds	r2, #158	; 0x9e
 8009d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 8009d7e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d82:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d8a:	3301      	adds	r3, #1
 8009d8c:	b2da      	uxtb	r2, r3
 8009d8e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009d92:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 8009d96:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 8009d9a:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 8009d9e:	3301      	adds	r3, #1
 8009da0:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 8009da4:	e0bc      	b.n	8009f20 <ReAssignData+0x3d4>
 8009da6:	bf00      	nop
 8009da8:	20000504 	.word	0x20000504
 8009dac:	08028a54 	.word	0x08028a54
 8009db0:	08028a7c 	.word	0x08028a7c
 8009db4:	2000085c 	.word	0x2000085c
 8009db8:	2000254e 	.word	0x2000254e
 8009dbc:	08028ab0 	.word	0x08028ab0
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009dc0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009dc4:	4aa9      	ldr	r2, [pc, #676]	; (800a06c <ReAssignData+0x520>)
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009dcc:	2b02      	cmp	r3, #2
 8009dce:	f040 80a7 	bne.w	8009f20 <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 8009dd2:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009dd6:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009dda:	49a4      	ldr	r1, [pc, #656]	; (800a06c <ReAssignData+0x520>)
 8009ddc:	440a      	add	r2, r1
 8009dde:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 8009de2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009de6:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009dea:	4413      	add	r3, r2
 8009dec:	460a      	mov	r2, r1
 8009dee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 8009df2:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009df6:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009dfa:	499c      	ldr	r1, [pc, #624]	; (800a06c <ReAssignData+0x520>)
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 8009e02:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009e06:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009e0a:	4413      	add	r3, r2
 8009e0c:	460a      	mov	r2, r1
 8009e0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 8009e12:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e16:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009e1a:	4a94      	ldr	r2, [pc, #592]	; (800a06c <ReAssignData+0x520>)
 8009e1c:	3366      	adds	r3, #102	; 0x66
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e28:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009e2c:	f100 0366 	add.w	r3, r0, #102	; 0x66
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	440b      	add	r3, r1
 8009e34:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 8009e36:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e3a:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 8009e3e:	4a8b      	ldr	r2, [pc, #556]	; (800a06c <ReAssignData+0x520>)
 8009e40:	3370      	adds	r3, #112	; 0x70
 8009e42:	009b      	lsls	r3, r3, #2
 8009e44:	4413      	add	r3, r2
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e4c:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 8009e50:	f100 0370 	add.w	r3, r0, #112	; 0x70
 8009e54:	009b      	lsls	r3, r3, #2
 8009e56:	440b      	add	r3, r1
 8009e58:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 8009e5a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009e5e:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 8009e62:	4a82      	ldr	r2, [pc, #520]	; (800a06c <ReAssignData+0x520>)
 8009e64:	33fe      	adds	r3, #254	; 0xfe
 8009e66:	005b      	lsls	r3, r3, #1
 8009e68:	4413      	add	r3, r2
 8009e6a:	8898      	ldrh	r0, [r3, #4]
 8009e6c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009e70:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 8009e74:	f101 03fe 	add.w	r3, r1, #254	; 0xfe
 8009e78:	005b      	lsls	r3, r3, #1
 8009e7a:	4413      	add	r3, r2
 8009e7c:	4602      	mov	r2, r0
 8009e7e:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 8009e80:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009e84:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009e88:	4978      	ldr	r1, [pc, #480]	; (800a06c <ReAssignData+0x520>)
 8009e8a:	440a      	add	r2, r1
 8009e8c:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 8009e90:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 8009e94:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 8009e98:	4413      	add	r3, r2
 8009e9a:	460a      	mov	r2, r1
 8009e9c:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 8009ea0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ea4:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009ea8:	4970      	ldr	r1, [pc, #448]	; (800a06c <ReAssignData+0x520>)
 8009eaa:	338a      	adds	r3, #138	; 0x8a
 8009eac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009eb0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009eb4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009eb8:	328a      	adds	r2, #138	; 0x8a
 8009eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 8009ebe:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ec2:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009ec6:	4969      	ldr	r1, [pc, #420]	; (800a06c <ReAssignData+0x520>)
 8009ec8:	3394      	adds	r3, #148	; 0x94
 8009eca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009ece:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ed2:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009ed6:	3294      	adds	r2, #148	; 0x94
 8009ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 8009edc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ee0:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8009ee4:	4961      	ldr	r1, [pc, #388]	; (800a06c <ReAssignData+0x520>)
 8009ee6:	339e      	adds	r3, #158	; 0x9e
 8009ee8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009eec:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ef0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009ef4:	329e      	adds	r2, #158	; 0x9e
 8009ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 8009efa:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009efe:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009f02:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f06:	3301      	adds	r3, #1
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f0e:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 8009f12:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 8009f16:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f20:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f24:	3301      	adds	r3, #1
 8009f26:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f2a:	4b50      	ldr	r3, [pc, #320]	; (800a06c <ReAssignData+0x520>)
 8009f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009f30:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009f34:	429a      	cmp	r2, r3
 8009f36:	f4ff ae85 	bcc.w	8009c44 <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 8009f46:	2300      	movs	r3, #0
 8009f48:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f4c:	e077      	b.n	800a03e <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 8009f4e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f52:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f56:	4a45      	ldr	r2, [pc, #276]	; (800a06c <ReAssignData+0x520>)
 8009f58:	3326      	adds	r3, #38	; 0x26
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	78d8      	ldrb	r0, [r3, #3]
 8009f60:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f64:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f68:	f101 0326 	add.w	r3, r1, #38	; 0x26
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	4413      	add	r3, r2
 8009f70:	4602      	mov	r2, r0
 8009f72:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 8009f74:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f78:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009f7c:	4a3b      	ldr	r2, [pc, #236]	; (800a06c <ReAssignData+0x520>)
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	f893 009c 	ldrb.w	r0, [r3, #156]	; 0x9c
 8009f86:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009f8a:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009f8e:	008b      	lsls	r3, r1, #2
 8009f90:	4413      	add	r3, r2
 8009f92:	4602      	mov	r2, r0
 8009f94:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 8009f98:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f9c:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009fa0:	4a32      	ldr	r2, [pc, #200]	; (800a06c <ReAssignData+0x520>)
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	f893 009d 	ldrb.w	r0, [r3, #157]	; 0x9d
 8009faa:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009fae:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009fb2:	008b      	lsls	r3, r1, #2
 8009fb4:	4413      	add	r3, r2
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 8009fbc:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fc0:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009fc4:	4a29      	ldr	r2, [pc, #164]	; (800a06c <ReAssignData+0x520>)
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	f893 009e 	ldrb.w	r0, [r3, #158]	; 0x9e
 8009fce:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009fd2:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009fd6:	008b      	lsls	r3, r1, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	4602      	mov	r2, r0
 8009fdc:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 8009fe0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fe4:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 8009fe8:	4a20      	ldr	r2, [pc, #128]	; (800a06c <ReAssignData+0x520>)
 8009fea:	3352      	adds	r3, #82	; 0x52
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	8858      	ldrh	r0, [r3, #2]
 8009ff2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 8009ff6:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 8009ffa:	f101 0352 	add.w	r3, r1, #82	; 0x52
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	4602      	mov	r2, r0
 800a004:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 800a006:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a00a:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a00e:	4a17      	ldr	r2, [pc, #92]	; (800a06c <ReAssignData+0x520>)
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	f8b3 014c 	ldrh.w	r0, [r3, #332]	; 0x14c
 800a018:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a01c:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a020:	008b      	lsls	r3, r1, #2
 800a022:	4413      	add	r3, r2
 800a024:	4602      	mov	r2, r0
 800a026:	f8a3 214c 	strh.w	r2, [r3, #332]	; 0x14c
			++EthernetIndex;
 800a02a:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a02e:	3301      	adds	r3, #1
 800a030:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a034:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a038:	3301      	adds	r3, #1
 800a03a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a03e:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <ReAssignData+0x520>)
 800a040:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a044:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a048:	429a      	cmp	r2, r3
 800a04a:	d380      	bcc.n	8009f4e <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 800a052:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a056:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a05a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	f000 80af 	beq.w	800a1c2 <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a064:	2300      	movs	r3, #0
 800a066:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a06a:	e09f      	b.n	800a1ac <ReAssignData+0x660>
 800a06c:	20000504 	.word	0x20000504
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 800a070:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a074:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a078:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a07c:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a080:	440a      	add	r2, r1
 800a082:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a086:	4ab0      	ldr	r2, [pc, #704]	; (800a348 <ReAssignData+0x7fc>)
 800a088:	4413      	add	r3, r2
 800a08a:	460a      	mov	r2, r1
 800a08c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 800a090:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a094:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a098:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a09c:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a0a0:	440a      	add	r2, r1
 800a0a2:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a0a6:	4aa8      	ldr	r2, [pc, #672]	; (800a348 <ReAssignData+0x7fc>)
 800a0a8:	4413      	add	r3, r2
 800a0aa:	460a      	mov	r2, r1
 800a0ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a0b0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0b4:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a0b8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a0bc:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a0c0:	3366      	adds	r3, #102	; 0x66
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	685a      	ldr	r2, [r3, #4]
 800a0c8:	489f      	ldr	r0, [pc, #636]	; (800a348 <ReAssignData+0x7fc>)
 800a0ca:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	4403      	add	r3, r0
 800a0d2:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a0d4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0d8:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a0dc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a0e0:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a0e4:	3370      	adds	r3, #112	; 0x70
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	4413      	add	r3, r2
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	4896      	ldr	r0, [pc, #600]	; (800a348 <ReAssignData+0x7fc>)
 800a0ee:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4403      	add	r3, r0
 800a0f6:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a0f8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0fc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a100:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a104:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a108:	33fe      	adds	r3, #254	; 0xfe
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	440b      	add	r3, r1
 800a10e:	8898      	ldrh	r0, [r3, #4]
 800a110:	498d      	ldr	r1, [pc, #564]	; (800a348 <ReAssignData+0x7fc>)
 800a112:	f102 03fe 	add.w	r3, r2, #254	; 0xfe
 800a116:	005b      	lsls	r3, r3, #1
 800a118:	440b      	add	r3, r1
 800a11a:	4602      	mov	r2, r0
 800a11c:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 800a11e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a122:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a126:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a12a:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a12e:	440a      	add	r2, r1
 800a130:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a134:	4a84      	ldr	r2, [pc, #528]	; (800a348 <ReAssignData+0x7fc>)
 800a136:	4413      	add	r3, r2
 800a138:	460a      	mov	r2, r1
 800a13a:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a13e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a142:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a146:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a14a:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a14e:	318a      	adds	r1, #138	; 0x8a
 800a150:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a154:	497c      	ldr	r1, [pc, #496]	; (800a348 <ReAssignData+0x7fc>)
 800a156:	338a      	adds	r3, #138	; 0x8a
 800a158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a15c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a160:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a164:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a168:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a16c:	3194      	adds	r1, #148	; 0x94
 800a16e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a172:	4975      	ldr	r1, [pc, #468]	; (800a348 <ReAssignData+0x7fc>)
 800a174:	3394      	adds	r3, #148	; 0x94
 800a176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a17a:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a17e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a182:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a186:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a18a:	319e      	adds	r1, #158	; 0x9e
 800a18c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a190:	496d      	ldr	r1, [pc, #436]	; (800a348 <ReAssignData+0x7fc>)
 800a192:	339e      	adds	r3, #158	; 0x9e
 800a194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a198:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a19c:	3301      	adds	r3, #1
 800a19e:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a1a2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a1ac:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1b0:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a1b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1b8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	f4ff af57 	bcc.w	800a070 <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 800a1c2:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1c6:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a1ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	f000 80ad 	beq.w	800a32e <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a1da:	e09d      	b.n	800a318 <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 800a1dc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1e0:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a1e4:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a1e8:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a1ec:	440a      	add	r2, r1
 800a1ee:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a1f2:	4a55      	ldr	r2, [pc, #340]	; (800a348 <ReAssignData+0x7fc>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	460a      	mov	r2, r1
 800a1f8:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 800a1fc:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a200:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a204:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a208:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a20c:	440a      	add	r2, r1
 800a20e:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a212:	4a4d      	ldr	r2, [pc, #308]	; (800a348 <ReAssignData+0x7fc>)
 800a214:	4413      	add	r3, r2
 800a216:	460a      	mov	r2, r1
 800a218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a21c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a220:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a224:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a228:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a22c:	3366      	adds	r3, #102	; 0x66
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	685a      	ldr	r2, [r3, #4]
 800a234:	4844      	ldr	r0, [pc, #272]	; (800a348 <ReAssignData+0x7fc>)
 800a236:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a23a:	009b      	lsls	r3, r3, #2
 800a23c:	4403      	add	r3, r0
 800a23e:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a240:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a244:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a248:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a24c:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a250:	3370      	adds	r3, #112	; 0x70
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	4413      	add	r3, r2
 800a256:	685a      	ldr	r2, [r3, #4]
 800a258:	483b      	ldr	r0, [pc, #236]	; (800a348 <ReAssignData+0x7fc>)
 800a25a:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	4403      	add	r3, r0
 800a262:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a264:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a268:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a26c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a270:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a274:	33fe      	adds	r3, #254	; 0xfe
 800a276:	005b      	lsls	r3, r3, #1
 800a278:	440b      	add	r3, r1
 800a27a:	8898      	ldrh	r0, [r3, #4]
 800a27c:	4932      	ldr	r1, [pc, #200]	; (800a348 <ReAssignData+0x7fc>)
 800a27e:	f102 03fe 	add.w	r3, r2, #254	; 0xfe
 800a282:	005b      	lsls	r3, r3, #1
 800a284:	440b      	add	r3, r1
 800a286:	4602      	mov	r2, r0
 800a288:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 800a28a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a28e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a292:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a296:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a29a:	440a      	add	r2, r1
 800a29c:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a2a0:	4a29      	ldr	r2, [pc, #164]	; (800a348 <ReAssignData+0x7fc>)
 800a2a2:	4413      	add	r3, r2
 800a2a4:	460a      	mov	r2, r1
 800a2a6:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a2aa:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a2ae:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a2b2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a2b6:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a2ba:	318a      	adds	r1, #138	; 0x8a
 800a2bc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2c0:	4921      	ldr	r1, [pc, #132]	; (800a348 <ReAssignData+0x7fc>)
 800a2c2:	338a      	adds	r3, #138	; 0x8a
 800a2c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a2c8:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a2cc:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a2d0:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a2d4:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a2d8:	3194      	adds	r1, #148	; 0x94
 800a2da:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2de:	491a      	ldr	r1, [pc, #104]	; (800a348 <ReAssignData+0x7fc>)
 800a2e0:	3394      	adds	r3, #148	; 0x94
 800a2e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a2e6:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a2ea:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a2ee:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a2f2:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a2f6:	319e      	adds	r1, #158	; 0x9e
 800a2f8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a2fc:	4912      	ldr	r1, [pc, #72]	; (800a348 <ReAssignData+0x7fc>)
 800a2fe:	339e      	adds	r3, #158	; 0x9e
 800a300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a304:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a308:	3301      	adds	r3, #1
 800a30a:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a30e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a312:	3301      	adds	r3, #1
 800a314:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a318:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a31c:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a320:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a324:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a328:	429a      	cmp	r2, r3
 800a32a:	f4ff af57 	bcc.w	800a1dc <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 800a32e:	f7fe fe7f 	bl	8009030 <print_self_Details_Hitachi>
 800a332:	e004      	b.n	800a33e <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 800a334:	4805      	ldr	r0, [pc, #20]	; (800a34c <ReAssignData+0x800>)
 800a336:	f01b fc2d 	bl	8025b94 <puts>
 800a33a:	e000      	b.n	800a33e <ReAssignData+0x7f2>
		return;
 800a33c:	bf00      	nop
	}

}
 800a33e:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000504 	.word	0x20000504
 800a34c:	08028b1c 	.word	0x08028b1c

0800a350 <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 800a356:	4b23      	ldr	r3, [pc, #140]	; (800a3e4 <ReArrangedVitalData+0x94>)
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	2b01      	cmp	r3, #1
 800a35c:	d13d      	bne.n	800a3da <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 800a35e:	22a2      	movs	r2, #162	; 0xa2
 800a360:	2100      	movs	r1, #0
 800a362:	4821      	ldr	r0, [pc, #132]	; (800a3e8 <ReArrangedVitalData+0x98>)
 800a364:	f01b fa92 	bl	802588c <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 800a368:	4b20      	ldr	r3, [pc, #128]	; (800a3ec <ReArrangedVitalData+0x9c>)
 800a36a:	881a      	ldrh	r2, [r3, #0]
 800a36c:	4b1e      	ldr	r3, [pc, #120]	; (800a3e8 <ReArrangedVitalData+0x98>)
 800a36e:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a370:	2300      	movs	r3, #0
 800a372:	71fb      	strb	r3, [r7, #7]
 800a374:	e02b      	b.n	800a3ce <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a376:	2300      	movs	r3, #0
 800a378:	71bb      	strb	r3, [r7, #6]
 800a37a:	e01f      	b.n	800a3bc <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 800a37c:	79fb      	ldrb	r3, [r7, #7]
 800a37e:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <ReArrangedVitalData+0xa0>)
 800a380:	3366      	adds	r3, #102	; 0x66
 800a382:	009b      	lsls	r3, r3, #2
 800a384:	4413      	add	r3, r2
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	79bb      	ldrb	r3, [r7, #6]
 800a38a:	491a      	ldr	r1, [pc, #104]	; (800a3f4 <ReArrangedVitalData+0xa4>)
 800a38c:	3366      	adds	r3, #102	; 0x66
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	429a      	cmp	r2, r3
 800a396:	d10e      	bne.n	800a3b6 <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 800a398:	79fb      	ldrb	r3, [r7, #7]
 800a39a:	011b      	lsls	r3, r3, #4
 800a39c:	4a12      	ldr	r2, [pc, #72]	; (800a3e8 <ReArrangedVitalData+0x98>)
 800a39e:	4413      	add	r3, r2
 800a3a0:	1c98      	adds	r0, r3, #2
 800a3a2:	79bb      	ldrb	r3, [r7, #6]
 800a3a4:	011b      	lsls	r3, r3, #4
 800a3a6:	4a11      	ldr	r2, [pc, #68]	; (800a3ec <ReArrangedVitalData+0x9c>)
 800a3a8:	4413      	add	r3, r2
 800a3aa:	3302      	adds	r3, #2
 800a3ac:	2210      	movs	r2, #16
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	f01b fa44 	bl	802583c <memcpy>
					break;
 800a3b4:	e008      	b.n	800a3c8 <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a3b6:	79bb      	ldrb	r3, [r7, #6]
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	71bb      	strb	r3, [r7, #6]
 800a3bc:	4b0c      	ldr	r3, [pc, #48]	; (800a3f0 <ReArrangedVitalData+0xa0>)
 800a3be:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3c2:	79ba      	ldrb	r2, [r7, #6]
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d3d9      	bcc.n	800a37c <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	71fb      	strb	r3, [r7, #7]
 800a3ce:	4b08      	ldr	r3, [pc, #32]	; (800a3f0 <ReArrangedVitalData+0xa0>)
 800a3d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a3d4:	79fa      	ldrb	r2, [r7, #7]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d3cd      	bcc.n	800a376 <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a3da:	bf00      	nop
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	2000254e 	.word	0x2000254e
 800a3e8:	20002814 	.word	0x20002814
 800a3ec:	20002770 	.word	0x20002770
 800a3f0:	20000504 	.word	0x20000504
 800a3f4:	2000085c 	.word	0x2000085c

0800a3f8 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a3fe:	4b26      	ldr	r3, [pc, #152]	; (800a498 <reset_cause_get+0xa0>)
 800a400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a402:	2b00      	cmp	r3, #0
 800a404:	da02      	bge.n	800a40c <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a406:	2301      	movs	r3, #1
 800a408:	71fb      	strb	r3, [r7, #7]
 800a40a:	e037      	b.n	800a47c <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a40c:	4b22      	ldr	r3, [pc, #136]	; (800a498 <reset_cause_get+0xa0>)
 800a40e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a410:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a414:	2b00      	cmp	r3, #0
 800a416:	d002      	beq.n	800a41e <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a418:	2302      	movs	r3, #2
 800a41a:	71fb      	strb	r3, [r7, #7]
 800a41c:	e02e      	b.n	800a47c <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a41e:	4b1e      	ldr	r3, [pc, #120]	; (800a498 <reset_cause_get+0xa0>)
 800a420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a422:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a426:	2b00      	cmp	r3, #0
 800a428:	d002      	beq.n	800a430 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a42a:	2303      	movs	r3, #3
 800a42c:	71fb      	strb	r3, [r7, #7]
 800a42e:	e025      	b.n	800a47c <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a430:	4b19      	ldr	r3, [pc, #100]	; (800a498 <reset_cause_get+0xa0>)
 800a432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a43c:	2304      	movs	r3, #4
 800a43e:	71fb      	strb	r3, [r7, #7]
 800a440:	e01c      	b.n	800a47c <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a442:	4b15      	ldr	r3, [pc, #84]	; (800a498 <reset_cause_get+0xa0>)
 800a444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a44e:	2305      	movs	r3, #5
 800a450:	71fb      	strb	r3, [r7, #7]
 800a452:	e013      	b.n	800a47c <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a454:	4b10      	ldr	r3, [pc, #64]	; (800a498 <reset_cause_get+0xa0>)
 800a456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d002      	beq.n	800a466 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a460:	2306      	movs	r3, #6
 800a462:	71fb      	strb	r3, [r7, #7]
 800a464:	e00a      	b.n	800a47c <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <reset_cause_get+0xa0>)
 800a468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d002      	beq.n	800a478 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a472:	2307      	movs	r3, #7
 800a474:	71fb      	strb	r3, [r7, #7]
 800a476:	e001      	b.n	800a47c <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a478:	2300      	movs	r3, #0
 800a47a:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a47c:	4b06      	ldr	r3, [pc, #24]	; (800a498 <reset_cause_get+0xa0>)
 800a47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a480:	4a05      	ldr	r2, [pc, #20]	; (800a498 <reset_cause_get+0xa0>)
 800a482:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a486:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a488:	79fb      	ldrb	r3, [r7, #7]
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr
 800a496:	bf00      	nop
 800a498:	40023800 	.word	0x40023800

0800a49c <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a49c:	b480      	push	{r7}
 800a49e:	b085      	sub	sp, #20
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a4a6:	4b1c      	ldr	r3, [pc, #112]	; (800a518 <reset_cause_get_name+0x7c>)
 800a4a8:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a4aa:	79fb      	ldrb	r3, [r7, #7]
 800a4ac:	2b07      	cmp	r3, #7
 800a4ae:	d82b      	bhi.n	800a508 <reset_cause_get_name+0x6c>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <reset_cause_get_name+0x1c>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4d9 	.word	0x0800a4d9
 800a4bc:	0800a4df 	.word	0x0800a4df
 800a4c0:	0800a4e5 	.word	0x0800a4e5
 800a4c4:	0800a4eb 	.word	0x0800a4eb
 800a4c8:	0800a4f1 	.word	0x0800a4f1
 800a4cc:	0800a4f7 	.word	0x0800a4f7
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	0800a503 	.word	0x0800a503
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a4d8:	4b10      	ldr	r3, [pc, #64]	; (800a51c <reset_cause_get_name+0x80>)
 800a4da:	60fb      	str	r3, [r7, #12]
            break;
 800a4dc:	e014      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a4de:	4b10      	ldr	r3, [pc, #64]	; (800a520 <reset_cause_get_name+0x84>)
 800a4e0:	60fb      	str	r3, [r7, #12]
            break;
 800a4e2:	e011      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a4e4:	4b0f      	ldr	r3, [pc, #60]	; (800a524 <reset_cause_get_name+0x88>)
 800a4e6:	60fb      	str	r3, [r7, #12]
            break;
 800a4e8:	e00e      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a4ea:	4b0f      	ldr	r3, [pc, #60]	; (800a528 <reset_cause_get_name+0x8c>)
 800a4ec:	60fb      	str	r3, [r7, #12]
            break;
 800a4ee:	e00b      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <reset_cause_get_name+0x90>)
 800a4f2:	60fb      	str	r3, [r7, #12]
            break;
 800a4f4:	e008      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a4f6:	4b0e      	ldr	r3, [pc, #56]	; (800a530 <reset_cause_get_name+0x94>)
 800a4f8:	60fb      	str	r3, [r7, #12]
            break;
 800a4fa:	e005      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a4fc:	4b0d      	ldr	r3, [pc, #52]	; (800a534 <reset_cause_get_name+0x98>)
 800a4fe:	60fb      	str	r3, [r7, #12]
            break;
 800a500:	e002      	b.n	800a508 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a502:	4b0d      	ldr	r3, [pc, #52]	; (800a538 <reset_cause_get_name+0x9c>)
 800a504:	60fb      	str	r3, [r7, #12]
            break;
 800a506:	bf00      	nop
    }

    return reset_cause_name;
 800a508:	68fb      	ldr	r3, [r7, #12]
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	3714      	adds	r7, #20
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	08028b30 	.word	0x08028b30
 800a51c:	08028b34 	.word	0x08028b34
 800a520:	08028b3c 	.word	0x08028b3c
 800a524:	08028b4c 	.word	0x08028b4c
 800a528:	08028b64 	.word	0x08028b64
 800a52c:	08028b80 	.word	0x08028b80
 800a530:	08028b90 	.word	0x08028b90
 800a534:	08028bc0 	.word	0x08028bc0
 800a538:	08028bdc 	.word	0x08028bdc

0800a53c <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a540:	f00d fafc 	bl	8017b3c <Print_BuildDat_Details>

		readCanToStructs();
 800a544:	f006 fc42 	bl	8010dcc <readCanToStructs>

		Feed_wdt();
 800a548:	f00b f8d8 	bl	80156fc <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a54c:	4810      	ldr	r0, [pc, #64]	; (800a590 <Process_Medha_EI+0x54>)
 800a54e:	f011 fde1 	bl	801c114 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a552:	f000 f91f 	bl	800a794 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a556:	f000 fef3 	bl	800b340 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a55a:	f000 ff55 	bl	800b408 <Process_Clear_Relays>

		Send_Data_to_Other();
 800a55e:	f001 f839 	bl	800b5d4 <Send_Data_to_Other>

		Process_Data_from_Other();
 800a562:	f001 f891 	bl	800b688 <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a566:	f001 fa65 	bl	800ba34 <CheckforMedhaCMD>

		CheckEIPC_DAT_CRC();
 800a56a:	f7f6 fcef 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800a56e:	4b09      	ldr	r3, [pc, #36]	; (800a594 <Process_Medha_EI+0x58>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d003      	beq.n	800a57e <Process_Medha_EI+0x42>
		{
			gucFlagUpdate = 3;
 800a576:	4b08      	ldr	r3, [pc, #32]	; (800a598 <Process_Medha_EI+0x5c>)
 800a578:	2203      	movs	r2, #3
 800a57a:	701a      	strb	r2, [r3, #0]
			break;
 800a57c:	e002      	b.n	800a584 <Process_Medha_EI+0x48>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a57e:	f00e f945 	bl	801880c <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a582:	e7dd      	b.n	800a540 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a584:	4802      	ldr	r0, [pc, #8]	; (800a590 <Process_Medha_EI+0x54>)
 800a586:	f011 fdc5 	bl	801c114 <HAL_IWDG_Refresh>
		Data_Processing();
 800a58a:	f00d f9d5 	bl	8017938 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a58e:	e7f9      	b.n	800a584 <Process_Medha_EI+0x48>
 800a590:	2000b370 	.word	0x2000b370
 800a594:	20000bba 	.word	0x20000bba
 800a598:	20000fbd 	.word	0x20000fbd

0800a59c <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	6039      	str	r1, [r7, #0]
 800a5a6:	71fb      	strb	r3, [r7, #7]
 800a5a8:	4613      	mov	r3, r2
 800a5aa:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a5b4:	e0d0      	b.n	800a758 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	f00e f811 	bl	80185e0 <Com_Get_Byte>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	4b6c      	ldr	r3, [pc, #432]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a5c4:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a5c6:	4b6c      	ldr	r3, [pc, #432]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a5c8:	781b      	ldrb	r3, [r3, #0]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	f200 80c2 	bhi.w	800a756 <Get_Medha_EI_Message+0x1ba>
 800a5d2:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <Get_Medha_EI_Message+0x3c>)
 800a5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d8:	0800a5ed 	.word	0x0800a5ed
 800a5dc:	0800a605 	.word	0x0800a605
 800a5e0:	0800a757 	.word	0x0800a757
 800a5e4:	0800a651 	.word	0x0800a651
 800a5e8:	0800a6a9 	.word	0x0800a6a9
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a5ec:	4b61      	ldr	r3, [pc, #388]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	2b53      	cmp	r3, #83	; 0x53
 800a5f2:	f040 80b1 	bne.w	800a758 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a5f6:	4b61      	ldr	r3, [pc, #388]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a5f8:	2201      	movs	r2, #1
 800a5fa:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a5fc:	4b5e      	ldr	r3, [pc, #376]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a5fe:	2202      	movs	r2, #2
 800a600:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a602:	e0a9      	b.n	800a758 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a604:	4b5d      	ldr	r3, [pc, #372]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a606:	881b      	ldrh	r3, [r3, #0]
 800a608:	2b08      	cmp	r3, #8
 800a60a:	d111      	bne.n	800a630 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a60c:	4b5b      	ldr	r3, [pc, #364]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a60e:	881b      	ldrh	r3, [r3, #0]
 800a610:	461a      	mov	r2, r3
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	4413      	add	r3, r2
 800a616:	4a57      	ldr	r2, [pc, #348]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a618:	7812      	ldrb	r2, [r2, #0]
 800a61a:	701a      	strb	r2, [r3, #0]
					i++;
 800a61c:	4b57      	ldr	r3, [pc, #348]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a61e:	881b      	ldrh	r3, [r3, #0]
 800a620:	3301      	adds	r3, #1
 800a622:	b29a      	uxth	r2, r3
 800a624:	4b55      	ldr	r3, [pc, #340]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a626:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a628:	4b53      	ldr	r3, [pc, #332]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a62a:	2204      	movs	r2, #4
 800a62c:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a62e:	e00d      	b.n	800a64c <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a630:	4b52      	ldr	r3, [pc, #328]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	4413      	add	r3, r2
 800a63a:	4a4e      	ldr	r2, [pc, #312]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a63c:	7812      	ldrb	r2, [r2, #0]
 800a63e:	701a      	strb	r2, [r3, #0]
					i++;
 800a640:	4b4e      	ldr	r3, [pc, #312]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a642:	881b      	ldrh	r3, [r3, #0]
 800a644:	3301      	adds	r3, #1
 800a646:	b29a      	uxth	r2, r3
 800a648:	4b4c      	ldr	r3, [pc, #304]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a64a:	801a      	strh	r2, [r3, #0]
				break;
 800a64c:	bf00      	nop
			}
			break;
 800a64e:	e083      	b.n	800a758 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800a650:	4b4a      	ldr	r3, [pc, #296]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	3b02      	subs	r3, #2
 800a656:	683a      	ldr	r2, [r7, #0]
 800a658:	4413      	add	r3, r2
 800a65a:	881b      	ldrh	r3, [r3, #0]
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800a660:	4b47      	ldr	r3, [pc, #284]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a662:	2200      	movs	r2, #0
 800a664:	801a      	strh	r2, [r3, #0]
				j=1;
 800a666:	4b47      	ldr	r3, [pc, #284]	; (800a784 <Get_Medha_EI_Message+0x1e8>)
 800a668:	2201      	movs	r2, #1
 800a66a:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800a66c:	4b43      	ldr	r3, [pc, #268]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a66e:	881b      	ldrh	r3, [r3, #0]
 800a670:	461a      	mov	r2, r3
 800a672:	683b      	ldr	r3, [r7, #0]
 800a674:	4413      	add	r3, r2
 800a676:	4a3f      	ldr	r2, [pc, #252]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a678:	7812      	ldrb	r2, [r2, #0]
 800a67a:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800a67c:	4b40      	ldr	r3, [pc, #256]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a67e:	881b      	ldrh	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	b29a      	uxth	r2, r3
 800a684:	4b3e      	ldr	r3, [pc, #248]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a686:	801a      	strh	r2, [r3, #0]
				i++;
 800a688:	4b3c      	ldr	r3, [pc, #240]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a68a:	881b      	ldrh	r3, [r3, #0]
 800a68c:	3301      	adds	r3, #1
 800a68e:	b29a      	uxth	r2, r3
 800a690:	4b3a      	ldr	r3, [pc, #232]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a692:	801a      	strh	r2, [r3, #0]
				j++;
 800a694:	4b3b      	ldr	r3, [pc, #236]	; (800a784 <Get_Medha_EI_Message+0x1e8>)
 800a696:	881b      	ldrh	r3, [r3, #0]
 800a698:	3301      	adds	r3, #1
 800a69a:	b29a      	uxth	r2, r3
 800a69c:	4b39      	ldr	r3, [pc, #228]	; (800a784 <Get_Medha_EI_Message+0x1e8>)
 800a69e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800a6a0:	4b35      	ldr	r3, [pc, #212]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a6a2:	2205      	movs	r2, #5
 800a6a4:	701a      	strb	r2, [r3, #0]
				break;
 800a6a6:	e057      	b.n	800a758 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800a6a8:	4b34      	ldr	r3, [pc, #208]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a6aa:	881b      	ldrh	r3, [r3, #0]
 800a6ac:	461a      	mov	r2, r3
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	4413      	add	r3, r2
 800a6b2:	4a30      	ldr	r2, [pc, #192]	; (800a774 <Get_Medha_EI_Message+0x1d8>)
 800a6b4:	7812      	ldrb	r2, [r2, #0]
 800a6b6:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800a6b8:	89ba      	ldrh	r2, [r7, #12]
 800a6ba:	4b31      	ldr	r3, [pc, #196]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a6bc:	881b      	ldrh	r3, [r3, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d940      	bls.n	800a744 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800a6c2:	4b2f      	ldr	r3, [pc, #188]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a6c4:	881b      	ldrh	r3, [r3, #0]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	4b2d      	ldr	r3, [pc, #180]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a6cc:	801a      	strh	r2, [r3, #0]
					i++;
 800a6ce:	4b2b      	ldr	r3, [pc, #172]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	4b29      	ldr	r3, [pc, #164]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a6d8:	801a      	strh	r2, [r3, #0]
					j++;
 800a6da:	4b2a      	ldr	r3, [pc, #168]	; (800a784 <Get_Medha_EI_Message+0x1e8>)
 800a6dc:	881b      	ldrh	r3, [r3, #0]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	4b28      	ldr	r3, [pc, #160]	; (800a784 <Get_Medha_EI_Message+0x1e8>)
 800a6e4:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800a6e6:	89ba      	ldrh	r2, [r7, #12]
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <Get_Medha_EI_Message+0x1e4>)
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d133      	bne.n	800a758 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800a6f0:	4b22      	ldr	r3, [pc, #136]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a6f2:	881b      	ldrh	r3, [r3, #0]
 800a6f4:	3b04      	subs	r3, #4
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	4b23      	ldr	r3, [pc, #140]	; (800a788 <Get_Medha_EI_Message+0x1ec>)
 800a6fa:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800a6fc:	4b22      	ldr	r3, [pc, #136]	; (800a788 <Get_Medha_EI_Message+0x1ec>)
 800a6fe:	881b      	ldrh	r3, [r3, #0]
 800a700:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800a702:	4b1e      	ldr	r3, [pc, #120]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a704:	2200      	movs	r2, #0
 800a706:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800a708:	4b1b      	ldr	r3, [pc, #108]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800a70e:	2300      	movs	r3, #0
 800a710:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800a712:	89fb      	ldrh	r3, [r7, #14]
 800a714:	2b04      	cmp	r3, #4
 800a716:	d804      	bhi.n	800a722 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800a718:	481c      	ldr	r0, [pc, #112]	; (800a78c <Get_Medha_EI_Message+0x1f0>)
 800a71a:	f01b fa3b 	bl	8025b94 <puts>
							return ZERO;
 800a71e:	2300      	movs	r3, #0
 800a720:	e023      	b.n	800a76a <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800a722:	4b19      	ldr	r3, [pc, #100]	; (800a788 <Get_Medha_EI_Message+0x1ec>)
 800a724:	881b      	ldrh	r3, [r3, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	6839      	ldr	r1, [r7, #0]
 800a72a:	2000      	movs	r0, #0
 800a72c:	f001 fc44 	bl	800bfb8 <CheckCRC32>
 800a730:	4603      	mov	r3, r0
 800a732:	2b00      	cmp	r3, #0
 800a734:	d001      	beq.n	800a73a <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800a736:	89fb      	ldrh	r3, [r7, #14]
 800a738:	e017      	b.n	800a76a <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800a73a:	4815      	ldr	r0, [pc, #84]	; (800a790 <Get_Medha_EI_Message+0x1f4>)
 800a73c:	f01b fa2a 	bl	8025b94 <puts>
							return ZERO;
 800a740:	2300      	movs	r3, #0
 800a742:	e012      	b.n	800a76a <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <Get_Medha_EI_Message+0x1e0>)
 800a746:	2200      	movs	r2, #0
 800a748:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800a74a:	4b0b      	ldr	r3, [pc, #44]	; (800a778 <Get_Medha_EI_Message+0x1dc>)
 800a74c:	2201      	movs	r2, #1
 800a74e:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800a750:	2300      	movs	r3, #0
 800a752:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800a754:	e000      	b.n	800a758 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800a756:	bf00      	nop
	while(Com_DataReady(ComPort))
 800a758:	79fb      	ldrb	r3, [r7, #7]
 800a75a:	4618      	mov	r0, r3
 800a75c:	f00d ff00 	bl	8018560 <Com_DataReady>
 800a760:	4603      	mov	r3, r0
 800a762:	2b00      	cmp	r3, #0
 800a764:	f47f af27 	bne.w	800a5b6 <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3710      	adds	r7, #16
 800a76e:	46bd      	mov	sp, r7
 800a770:	bd80      	pop	{r7, pc}
 800a772:	bf00      	nop
 800a774:	20003eec 	.word	0x20003eec
 800a778:	20000316 	.word	0x20000316
 800a77c:	20003eee 	.word	0x20003eee
 800a780:	20003ef0 	.word	0x20003ef0
 800a784:	20003ef2 	.word	0x20003ef2
 800a788:	20003ef4 	.word	0x20003ef4
 800a78c:	08028bf4 	.word	0x08028bf4
 800a790:	08028bfc 	.word	0x08028bfc

0800a794 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800a794:	b5b0      	push	{r4, r5, r7, lr}
 800a796:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800a79a:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800a79c:	2300      	movs	r3, #0
 800a79e:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800a7a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	601a      	str	r2, [r3, #0]
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f01b f868 	bl	802588c <memset>
	uint16_t NoOfInputs 		= 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800a7c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a7cc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	601a      	str	r2, [r3, #0]
 800a7d4:	3304      	adds	r3, #4
 800a7d6:	227c      	movs	r2, #124	; 0x7c
 800a7d8:	2100      	movs	r1, #0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f01b f856 	bl	802588c <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800a7ec:	4bc8      	ldr	r3, [pc, #800]	; (800ab10 <Medha_EI_Analyser+0x37c>)
 800a7ee:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a7f2:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800a7f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	f7ff fece 	bl	800a59c <Get_Medha_EI_Message>
 800a800:	4603      	mov	r3, r0
 800a802:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800a806:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a80a:	2b05      	cmp	r3, #5
 800a80c:	d939      	bls.n	800a882 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800a80e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800a812:	48c0      	ldr	r0, [pc, #768]	; (800ab14 <Medha_EI_Analyser+0x380>)
 800a814:	f010 fe01 	bl	801b41a <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800a818:	48bf      	ldr	r0, [pc, #764]	; (800ab18 <Medha_EI_Analyser+0x384>)
 800a81a:	f01b f9bb 	bl	8025b94 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a81e:	2300      	movs	r3, #0
 800a820:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a824:	e024      	b.n	800a870 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800a826:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d010      	beq.n	800a850 <Medha_EI_Analyser+0xbc>
 800a82e:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a832:	4bba      	ldr	r3, [pc, #744]	; (800ab1c <Medha_EI_Analyser+0x388>)
 800a834:	fba3 1302 	umull	r1, r3, r3, r2
 800a838:	08d9      	lsrs	r1, r3, #3
 800a83a:	460b      	mov	r3, r1
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b29b      	uxth	r3, r3
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800a84a:	200a      	movs	r0, #10
 800a84c:	f01b f91e 	bl	8025a8c <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800a850:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a854:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800a858:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800a85c:	5cd3      	ldrb	r3, [r2, r3]
 800a85e:	4619      	mov	r1, r3
 800a860:	48af      	ldr	r0, [pc, #700]	; (800ab20 <Medha_EI_Analyser+0x38c>)
 800a862:	f01b f8fb 	bl	8025a5c <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800a866:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800a86a:	3301      	adds	r3, #1
 800a86c:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800a870:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800a874:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a878:	429a      	cmp	r2, r3
 800a87a:	d3d4      	bcc.n	800a826 <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800a87c:	200a      	movs	r0, #10
 800a87e:	f01b f905 	bl	8025a8c <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800a882:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800a886:	2b00      	cmp	r3, #0
 800a888:	f000 83d1 	beq.w	800b02e <Medha_EI_Analyser+0x89a>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800a88c:	463b      	mov	r3, r7
 800a88e:	f44f 7292 	mov.w	r2, #292	; 0x124
 800a892:	2100      	movs	r1, #0
 800a894:	4618      	mov	r0, r3
 800a896:	f01a fff9 	bl	802588c <memset>

		BYTEINIT(0);
 800a89a:	2300      	movs	r3, #0
 800a89c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800a8a0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8a4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a8a8:	4413      	add	r3, r2
 800a8aa:	781a      	ldrb	r2, [r3, #0]
 800a8ac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8b0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a8b4:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800a8b6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8ba:	3301      	adds	r3, #1
 800a8bc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800a8c0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a8c4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a8c8:	4413      	add	r3, r2
 800a8ca:	881b      	ldrh	r3, [r3, #0]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8d2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a8d6:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800a8d8:	4b8d      	ldr	r3, [pc, #564]	; (800ab10 <Medha_EI_Analyser+0x37c>)
 800a8da:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800a8de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a8e6:	889b      	ldrh	r3, [r3, #4]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d017      	beq.n	800a91c <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800a8ec:	488d      	ldr	r0, [pc, #564]	; (800ab24 <Medha_EI_Analyser+0x390>)
 800a8ee:	f01b f951 	bl	8025b94 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800a8f2:	4b87      	ldr	r3, [pc, #540]	; (800ab10 <Medha_EI_Analyser+0x37c>)
 800a8f4:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a8fe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a902:	889b      	ldrh	r3, [r3, #4]
 800a904:	461a      	mov	r2, r3
 800a906:	4888      	ldr	r0, [pc, #544]	; (800ab28 <Medha_EI_Analyser+0x394>)
 800a908:	f01b f8a8 	bl	8025a5c <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a90c:	4987      	ldr	r1, [pc, #540]	; (800ab2c <Medha_EI_Analyser+0x398>)
 800a90e:	4888      	ldr	r0, [pc, #544]	; (800ab30 <Medha_EI_Analyser+0x39c>)
 800a910:	f7f5 fc96 	bl	8000240 <strcmp>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	f040 838b 	bne.w	800b032 <Medha_EI_Analyser+0x89e>
			{
				return;
			}
		}
		BYTEINC(2);
 800a91c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a920:	3302      	adds	r3, #2
 800a922:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800a926:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a92a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a92e:	4413      	add	r3, r2
 800a930:	881b      	ldrh	r3, [r3, #0]
 800a932:	b29a      	uxth	r2, r3
 800a934:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a938:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a93c:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800a93e:	4b74      	ldr	r3, [pc, #464]	; (800ab10 <Medha_EI_Analyser+0x37c>)
 800a940:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800a944:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a948:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a94c:	885b      	ldrh	r3, [r3, #2]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d017      	beq.n	800a982 <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800a952:	4878      	ldr	r0, [pc, #480]	; (800ab34 <Medha_EI_Analyser+0x3a0>)
 800a954:	f01b f91e 	bl	8025b94 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800a958:	4b6d      	ldr	r3, [pc, #436]	; (800ab10 <Medha_EI_Analyser+0x37c>)
 800a95a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a95e:	4619      	mov	r1, r3
 800a960:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a964:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a968:	885b      	ldrh	r3, [r3, #2]
 800a96a:	461a      	mov	r2, r3
 800a96c:	486e      	ldr	r0, [pc, #440]	; (800ab28 <Medha_EI_Analyser+0x394>)
 800a96e:	f01b f875 	bl	8025a5c <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800a972:	496e      	ldr	r1, [pc, #440]	; (800ab2c <Medha_EI_Analyser+0x398>)
 800a974:	486e      	ldr	r0, [pc, #440]	; (800ab30 <Medha_EI_Analyser+0x39c>)
 800a976:	f7f5 fc63 	bl	8000240 <strcmp>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f040 835a 	bne.w	800b036 <Medha_EI_Analyser+0x8a2>
			{
				return;
			}		}
		BYTEINC(2);
 800a982:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a986:	3302      	adds	r3, #2
 800a988:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800a98c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a990:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a994:	4413      	add	r3, r2
 800a996:	781a      	ldrb	r2, [r3, #0]
 800a998:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a99c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9a0:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800a9a2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9a6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9aa:	799b      	ldrb	r3, [r3, #6]
 800a9ac:	2baa      	cmp	r3, #170	; 0xaa
 800a9ae:	d010      	beq.n	800a9d2 <Medha_EI_Analyser+0x23e>
 800a9b0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9b4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9b8:	799b      	ldrb	r3, [r3, #6]
 800a9ba:	2bbb      	cmp	r3, #187	; 0xbb
 800a9bc:	d009      	beq.n	800a9d2 <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800a9be:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9c2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9c6:	799b      	ldrb	r3, [r3, #6]
 800a9c8:	4619      	mov	r1, r3
 800a9ca:	485b      	ldr	r0, [pc, #364]	; (800ab38 <Medha_EI_Analyser+0x3a4>)
 800a9cc:	f01b f846 	bl	8025a5c <iprintf>
			return;
 800a9d0:	e332      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
		}
		BYTEINC(1);
 800a9d2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800a9dc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800a9e0:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800a9e4:	4413      	add	r3, r2
 800a9e6:	781a      	ldrb	r2, [r3, #0]
 800a9e8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9ec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9f0:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800a9f2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800a9f6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800a9fa:	79db      	ldrb	r3, [r3, #7]
 800a9fc:	2be1      	cmp	r3, #225	; 0xe1
 800a9fe:	d009      	beq.n	800aa14 <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800aa00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa08:	79db      	ldrb	r3, [r3, #7]
 800aa0a:	4619      	mov	r1, r3
 800aa0c:	484b      	ldr	r0, [pc, #300]	; (800ab3c <Medha_EI_Analyser+0x3a8>)
 800aa0e:	f01b f825 	bl	8025a5c <iprintf>
			return;
 800aa12:	e311      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
		}

		BYTEINC(1);
 800aa14:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa18:	3301      	adds	r3, #1
 800aa1a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800aa1e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa22:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa26:	4413      	add	r3, r2
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	b29a      	uxth	r2, r3
 800aa2c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa30:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa34:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800aa36:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa3a:	3302      	adds	r3, #2
 800aa3c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800aa40:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa44:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa48:	4413      	add	r3, r2
 800aa4a:	781a      	ldrb	r2, [r3, #0]
 800aa4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa50:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa54:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800aa56:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800aa60:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa64:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa68:	441a      	add	r2, r3
 800aa6a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa6e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa72:	330b      	adds	r3, #11
 800aa74:	6811      	ldr	r1, [r2, #0]
 800aa76:	6019      	str	r1, [r3, #0]
 800aa78:	8891      	ldrh	r1, [r2, #4]
 800aa7a:	7992      	ldrb	r2, [r2, #6]
 800aa7c:	8099      	strh	r1, [r3, #4]
 800aa7e:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800aa80:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa84:	3307      	adds	r3, #7
 800aa86:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800aa8a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aa8e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aa92:	4413      	add	r3, r2
 800aa94:	781a      	ldrb	r2, [r3, #0]
 800aa96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aa9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aa9e:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800aaa0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aaa4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aaa8:	7c9b      	ldrb	r3, [r3, #18]
 800aaaa:	2b11      	cmp	r3, #17
 800aaac:	d009      	beq.n	800aac2 <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800aaae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aab2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aab6:	7c9b      	ldrb	r3, [r3, #18]
 800aab8:	4619      	mov	r1, r3
 800aaba:	4821      	ldr	r0, [pc, #132]	; (800ab40 <Medha_EI_Analyser+0x3ac>)
 800aabc:	f01a ffce 	bl	8025a5c <iprintf>
			return;
 800aac0:	e2ba      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
		}

		BYTEINC(1);
 800aac2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aac6:	3301      	adds	r3, #1
 800aac8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800aacc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aad0:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800aad4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800aad8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800aadc:	4413      	add	r3, r2
 800aade:	881b      	ldrh	r3, [r3, #0]
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aae6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aaea:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800aaec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aaf0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aaf4:	695b      	ldr	r3, [r3, #20]
 800aaf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aafa:	d925      	bls.n	800ab48 <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800aafc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab00:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	4619      	mov	r1, r3
 800ab08:	480e      	ldr	r0, [pc, #56]	; (800ab44 <Medha_EI_Analyser+0x3b0>)
 800ab0a:	f01a ffa7 	bl	8025a5c <iprintf>
			return;
 800ab0e:	e293      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
 800ab10:	20000504 	.word	0x20000504
 800ab14:	40021c00 	.word	0x40021c00
 800ab18:	08028c04 	.word	0x08028c04
 800ab1c:	cccccccd 	.word	0xcccccccd
 800ab20:	08028c10 	.word	0x08028c10
 800ab24:	08028c18 	.word	0x08028c18
 800ab28:	08028c4c 	.word	0x08028c4c
 800ab2c:	08028c70 	.word	0x08028c70
 800ab30:	20000505 	.word	0x20000505
 800ab34:	08028c7c 	.word	0x08028c7c
 800ab38:	08028cac 	.word	0x08028cac
 800ab3c:	08028ce4 	.word	0x08028ce4
 800ab40:	08028d1c 	.word	0x08028d1c
 800ab44:	08028d60 	.word	0x08028d60
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800ab48:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab4c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab50:	695a      	ldr	r2, [r3, #20]
 800ab52:	4baa      	ldr	r3, [pc, #680]	; (800adfc <Medha_EI_Analyser+0x668>)
 800ab54:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d01b      	beq.n	800ab94 <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800ab5c:	49a8      	ldr	r1, [pc, #672]	; (800ae00 <Medha_EI_Analyser+0x66c>)
 800ab5e:	48a9      	ldr	r0, [pc, #676]	; (800ae04 <Medha_EI_Analyser+0x670>)
 800ab60:	f7f5 fb6e 	bl	8000240 <strcmp>
 800ab64:	4603      	mov	r3, r0
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00c      	beq.n	800ab84 <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800ab6a:	4ba4      	ldr	r3, [pc, #656]	; (800adfc <Medha_EI_Analyser+0x668>)
 800ab6c:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800ab70:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab74:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab78:	695b      	ldr	r3, [r3, #20]
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	48a2      	ldr	r0, [pc, #648]	; (800ae08 <Medha_EI_Analyser+0x674>)
 800ab7e:	f01a ff6d 	bl	8025a5c <iprintf>
				return;
 800ab82:	e259      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800ab84:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab88:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ab8c:	695b      	ldr	r3, [r3, #20]
 800ab8e:	4a9b      	ldr	r2, [pc, #620]	; (800adfc <Medha_EI_Analyser+0x668>)
 800ab90:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800ab94:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ab98:	3302      	adds	r3, #2
 800ab9a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800ab9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aba2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aba6:	695b      	ldr	r3, [r3, #20]
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	f003 0307 	and.w	r3, r3, #7
 800abae:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800abb2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00a      	beq.n	800abd0 <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800abba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abbe:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	3301      	adds	r3, #1
 800abca:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800abce:	e007      	b.n	800abe0 <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800abd0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800abd4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800abd8:	695b      	ldr	r3, [r3, #20]
 800abda:	08db      	lsrs	r3, r3, #3
 800abdc:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800abe0:	2300      	movs	r3, #0
 800abe2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800abe6:	e02a      	b.n	800ac3e <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800abe8:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800abec:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800abf0:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800abf4:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800abf8:	5c89      	ldrb	r1, [r1, r2]
 800abfa:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800abfe:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ac02:	4413      	add	r3, r2
 800ac04:	460a      	mov	r2, r1
 800ac06:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800ac08:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac0c:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac10:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ac14:	4413      	add	r3, r2
 800ac16:	7e1a      	ldrb	r2, [r3, #24]
 800ac18:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac1c:	43d2      	mvns	r2, r2
 800ac1e:	b2d1      	uxtb	r1, r2
 800ac20:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac24:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800ac28:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800ac2a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac2e:	3301      	adds	r3, #1
 800ac30:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac34:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac38:	3301      	adds	r3, #1
 800ac3a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac3e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac42:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d3ce      	bcc.n	800abe8 <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac50:	e01a      	b.n	800ac88 <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800ac52:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800ac56:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac5a:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800ac5e:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800ac62:	5c89      	ldrb	r1, [r1, r2]
 800ac64:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac68:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800ac6c:	4413      	add	r3, r2
 800ac6e:	460a      	mov	r2, r1
 800ac70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800ac74:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac78:	3301      	adds	r3, #1
 800ac7a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ac7e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ac82:	3301      	adds	r3, #1
 800ac84:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ac88:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ac8c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d3de      	bcc.n	800ac52 <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800ac94:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800ac98:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800ac9c:	463b      	mov	r3, r7
 800ac9e:	3398      	adds	r3, #152	; 0x98
 800aca0:	4618      	mov	r0, r3
 800aca2:	f01a fdbb 	bl	802581c <memcmp>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d03f      	beq.n	800ad2c <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800acac:	4857      	ldr	r0, [pc, #348]	; (800ae0c <Medha_EI_Analyser+0x678>)
 800acae:	f01a ff71 	bl	8025b94 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800acb2:	2300      	movs	r3, #0
 800acb4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800acb8:	e011      	b.n	800acde <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800acba:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800acbe:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800acc2:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800acc6:	4413      	add	r3, r2
 800acc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800accc:	4619      	mov	r1, r3
 800acce:	4850      	ldr	r0, [pc, #320]	; (800ae10 <Medha_EI_Analyser+0x67c>)
 800acd0:	f01a fec4 	bl	8025a5c <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800acd4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800acd8:	3301      	adds	r3, #1
 800acda:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800acde:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ace2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d3e7      	bcc.n	800acba <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800acea:	484a      	ldr	r0, [pc, #296]	; (800ae14 <Medha_EI_Analyser+0x680>)
 800acec:	f01a ff52 	bl	8025b94 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800acf0:	2300      	movs	r3, #0
 800acf2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800acf6:	e00f      	b.n	800ad18 <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800acf8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800acfc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ad00:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800ad04:	5cd3      	ldrb	r3, [r2, r3]
 800ad06:	4619      	mov	r1, r3
 800ad08:	4841      	ldr	r0, [pc, #260]	; (800ae10 <Medha_EI_Analyser+0x67c>)
 800ad0a:	f01a fea7 	bl	8025a5c <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800ad0e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ad12:	3301      	adds	r3, #1
 800ad14:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ad18:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ad1c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ad20:	429a      	cmp	r2, r3
 800ad22:	d3e9      	bcc.n	800acf8 <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800ad24:	483c      	ldr	r0, [pc, #240]	; (800ae18 <Medha_EI_Analyser+0x684>)
 800ad26:	f01a ff35 	bl	8025b94 <puts>
			return;
 800ad2a:	e185      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800ad2c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800ad30:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800ad34:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800ad38:	4618      	mov	r0, r3
 800ad3a:	f001 f909 	bl	800bf50 <GetCRC32>
 800ad3e:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800ad42:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad46:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad4a:	4413      	add	r3, r2
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad54:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad58:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800ad5c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad60:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad64:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad68:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800ad6c:	429a      	cmp	r2, r3
 800ad6e:	d00c      	beq.n	800ad8a <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800ad70:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad74:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad78:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800ad82:	4826      	ldr	r0, [pc, #152]	; (800ae1c <Medha_EI_Analyser+0x688>)
 800ad84:	f01a fe6a 	bl	8025a5c <iprintf>
			return;
 800ad88:	e156      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
		}
		BYTEINC(4);
 800ad8a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad8e:	3304      	adds	r3, #4
 800ad90:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800ad94:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad98:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad9c:	4413      	add	r3, r2
 800ad9e:	881b      	ldrh	r3, [r3, #0]
 800ada0:	b29a      	uxth	r2, r3
 800ada2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ada6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adaa:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800adae:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adb2:	3302      	adds	r3, #2
 800adb4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800adb8:	f00d ff3a 	bl	8018c30 <HAL_GetTick>
 800adbc:	4603      	mov	r3, r0
 800adbe:	4a18      	ldr	r2, [pc, #96]	; (800ae20 <Medha_EI_Analyser+0x68c>)
 800adc0:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800adc2:	4a18      	ldr	r2, [pc, #96]	; (800ae24 <Medha_EI_Analyser+0x690>)
 800adc4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adc8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adcc:	4610      	mov	r0, r2
 800adce:	4619      	mov	r1, r3
 800add0:	f44f 7392 	mov.w	r3, #292	; 0x124
 800add4:	461a      	mov	r2, r3
 800add6:	f01a fd31 	bl	802583c <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800adda:	4b13      	ldr	r3, [pc, #76]	; (800ae28 <Medha_EI_Analyser+0x694>)
 800addc:	2201      	movs	r2, #1
 800adde:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800ade0:	4b10      	ldr	r3, [pc, #64]	; (800ae24 <Medha_EI_Analyser+0x690>)
 800ade2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ade6:	4a10      	ldr	r2, [pc, #64]	; (800ae28 <Medha_EI_Analyser+0x694>)
 800ade8:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800adea:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800adee:	4618      	mov	r0, r3
 800adf0:	f000 f952 	bl	800b098 <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800adf4:	2300      	movs	r3, #0
 800adf6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800adfa:	e028      	b.n	800ae4e <Medha_EI_Analyser+0x6ba>
 800adfc:	20000504 	.word	0x20000504
 800ae00:	08028c70 	.word	0x08028c70
 800ae04:	20000505 	.word	0x20000505
 800ae08:	08028db4 	.word	0x08028db4
 800ae0c:	08028df0 	.word	0x08028df0
 800ae10:	08028c10 	.word	0x08028c10
 800ae14:	08028e3c 	.word	0x08028e3c
 800ae18:	08028e60 	.word	0x08028e60
 800ae1c:	08028e74 	.word	0x08028e74
 800ae20:	20003d38 	.word	0x20003d38
 800ae24:	20003be0 	.word	0x20003be0
 800ae28:	20003d48 	.word	0x20003d48
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800ae2c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ae30:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ae34:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800ae38:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800ae3c:	440a      	add	r2, r1
 800ae3e:	7e11      	ldrb	r1, [r2, #24]
 800ae40:	4a7f      	ldr	r2, [pc, #508]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800ae42:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800ae44:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800ae48:	3301      	adds	r3, #1
 800ae4a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800ae4e:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800ae52:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae56:	429a      	cmp	r2, r3
 800ae58:	d3e8      	bcc.n	800ae2c <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800ae5a:	4b7a      	ldr	r3, [pc, #488]	; (800b044 <Medha_EI_Analyser+0x8b0>)
 800ae5c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800ae60:	4a77      	ldr	r2, [pc, #476]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800ae62:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800ae66:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	4974      	ldr	r1, [pc, #464]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800ae6e:	4876      	ldr	r0, [pc, #472]	; (800b048 <Medha_EI_Analyser+0x8b4>)
 800ae70:	f01a fcd4 	bl	802581c <memcmp>
 800ae74:	4603      	mov	r3, r0
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d02c      	beq.n	800aed4 <Medha_EI_Analyser+0x740>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800ae7a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800ae7e:	461a      	mov	r2, r3
 800ae80:	496f      	ldr	r1, [pc, #444]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800ae82:	4871      	ldr	r0, [pc, #452]	; (800b048 <Medha_EI_Analyser+0x8b4>)
 800ae84:	f01a fcda 	bl	802583c <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800ae88:	4b6d      	ldr	r3, [pc, #436]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800ae8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ae8e:	4a6e      	ldr	r2, [pc, #440]	; (800b048 <Medha_EI_Analyser+0x8b4>)
 800ae90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800ae94:	2230      	movs	r2, #48	; 0x30
 800ae96:	2100      	movs	r1, #0
 800ae98:	486c      	ldr	r0, [pc, #432]	; (800b04c <Medha_EI_Analyser+0x8b8>)
 800ae9a:	f01a fcf7 	bl	802588c <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800ae9e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800aea2:	461a      	mov	r2, r3
 800aea4:	4966      	ldr	r1, [pc, #408]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800aea6:	4869      	ldr	r0, [pc, #420]	; (800b04c <Medha_EI_Analyser+0x8b8>)
 800aea8:	f01a fcc8 	bl	802583c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800aeac:	f00d fec0 	bl	8018c30 <HAL_GetTick>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	4a67      	ldr	r2, [pc, #412]	; (800b050 <Medha_EI_Analyser+0x8bc>)
 800aeb4:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800aeb6:	4867      	ldr	r0, [pc, #412]	; (800b054 <Medha_EI_Analyser+0x8c0>)
 800aeb8:	f01a fe6c 	bl	8025b94 <puts>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 800aebc:	f240 2002 	movw	r0, #514	; 0x202
 800aec0:	f005 fdfa 	bl	8010ab8 <TransmitCanPkt>
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800aec4:	4b64      	ldr	r3, [pc, #400]	; (800b058 <Medha_EI_Analyser+0x8c4>)
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d103      	bne.n	800aed4 <Medha_EI_Analyser+0x740>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800aecc:	f44f 7002 	mov.w	r0, #520	; 0x208
 800aed0:	f005 fdf2 	bl	8010ab8 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800aed4:	4861      	ldr	r0, [pc, #388]	; (800b05c <Medha_EI_Analyser+0x8c8>)
 800aed6:	f01a fe5d 	bl	8025b94 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800aeda:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aede:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aee2:	889b      	ldrh	r3, [r3, #4]
 800aee4:	4619      	mov	r1, r3
 800aee6:	485e      	ldr	r0, [pc, #376]	; (800b060 <Medha_EI_Analyser+0x8cc>)
 800aee8:	f01a fdb8 	bl	8025a5c <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800aeec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aef0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aef4:	885b      	ldrh	r3, [r3, #2]
 800aef6:	4619      	mov	r1, r3
 800aef8:	485a      	ldr	r0, [pc, #360]	; (800b064 <Medha_EI_Analyser+0x8d0>)
 800aefa:	f01a fdaf 	bl	8025a5c <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800aefe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af02:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af06:	799b      	ldrb	r3, [r3, #6]
 800af08:	4619      	mov	r1, r3
 800af0a:	4857      	ldr	r0, [pc, #348]	; (800b068 <Medha_EI_Analyser+0x8d4>)
 800af0c:	f01a fda6 	bl	8025a5c <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800af10:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af14:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af18:	79db      	ldrb	r3, [r3, #7]
 800af1a:	4619      	mov	r1, r3
 800af1c:	4853      	ldr	r0, [pc, #332]	; (800b06c <Medha_EI_Analyser+0x8d8>)
 800af1e:	f01a fd9d 	bl	8025a5c <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800af22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af2a:	891b      	ldrh	r3, [r3, #8]
 800af2c:	4619      	mov	r1, r3
 800af2e:	4850      	ldr	r0, [pc, #320]	; (800b070 <Medha_EI_Analyser+0x8dc>)
 800af30:	f01a fd94 	bl	8025a5c <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800af34:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af38:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af3c:	7a9b      	ldrb	r3, [r3, #10]
 800af3e:	4619      	mov	r1, r3
 800af40:	484c      	ldr	r0, [pc, #304]	; (800b074 <Medha_EI_Analyser+0x8e0>)
 800af42:	f01a fd8b 	bl	8025a5c <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800af46:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af4a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af4e:	7b9b      	ldrb	r3, [r3, #14]
 800af50:	4618      	mov	r0, r3
 800af52:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af56:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af5a:	7b5b      	ldrb	r3, [r3, #13]
 800af5c:	461c      	mov	r4, r3
 800af5e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af62:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af66:	7b1b      	ldrb	r3, [r3, #12]
 800af68:	461d      	mov	r5, r3
 800af6a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af6e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af72:	7bdb      	ldrb	r3, [r3, #15]
 800af74:	461a      	mov	r2, r3
 800af76:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af7a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af7e:	7c1b      	ldrb	r3, [r3, #16]
 800af80:	4619      	mov	r1, r3
 800af82:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af86:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af8a:	7c5b      	ldrb	r3, [r3, #17]
 800af8c:	9302      	str	r3, [sp, #8]
 800af8e:	9101      	str	r1, [sp, #4]
 800af90:	9200      	str	r2, [sp, #0]
 800af92:	462b      	mov	r3, r5
 800af94:	4622      	mov	r2, r4
 800af96:	4601      	mov	r1, r0
 800af98:	4837      	ldr	r0, [pc, #220]	; (800b078 <Medha_EI_Analyser+0x8e4>)
 800af9a:	f01a fd5f 	bl	8025a5c <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800af9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800afa2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800afa6:	7c9b      	ldrb	r3, [r3, #18]
 800afa8:	4619      	mov	r1, r3
 800afaa:	4834      	ldr	r0, [pc, #208]	; (800b07c <Medha_EI_Analyser+0x8e8>)
 800afac:	f01a fd56 	bl	8025a5c <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800afb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800afb4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800afb8:	695b      	ldr	r3, [r3, #20]
 800afba:	4619      	mov	r1, r3
 800afbc:	4830      	ldr	r0, [pc, #192]	; (800b080 <Medha_EI_Analyser+0x8ec>)
 800afbe:	f01a fd4d 	bl	8025a5c <iprintf>
		printf("SIGNAL DATA       :");
 800afc2:	4830      	ldr	r0, [pc, #192]	; (800b084 <Medha_EI_Analyser+0x8f0>)
 800afc4:	f01a fd4a 	bl	8025a5c <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800afc8:	2300      	movs	r3, #0
 800afca:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800afce:	e021      	b.n	800b014 <Medha_EI_Analyser+0x880>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800afd0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d010      	beq.n	800affa <Medha_EI_Analyser+0x866>
 800afd8:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800afdc:	4b2a      	ldr	r3, [pc, #168]	; (800b088 <Medha_EI_Analyser+0x8f4>)
 800afde:	fba3 1302 	umull	r1, r3, r3, r2
 800afe2:	08d9      	lsrs	r1, r3, #3
 800afe4:	460b      	mov	r3, r1
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	440b      	add	r3, r1
 800afea:	005b      	lsls	r3, r3, #1
 800afec:	1ad3      	subs	r3, r2, r3
 800afee:	b29b      	uxth	r3, r3
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <Medha_EI_Analyser+0x866>
			{
				printf("\n                   ");
 800aff4:	4825      	ldr	r0, [pc, #148]	; (800b08c <Medha_EI_Analyser+0x8f8>)
 800aff6:	f01a fd31 	bl	8025a5c <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800affa:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800affe:	4a10      	ldr	r2, [pc, #64]	; (800b040 <Medha_EI_Analyser+0x8ac>)
 800b000:	5cd3      	ldrb	r3, [r2, r3]
 800b002:	4619      	mov	r1, r3
 800b004:	4822      	ldr	r0, [pc, #136]	; (800b090 <Medha_EI_Analyser+0x8fc>)
 800b006:	f01a fd29 	bl	8025a5c <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b00a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b00e:	3301      	adds	r3, #1
 800b010:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b014:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b018:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d3d7      	bcc.n	800afd0 <Medha_EI_Analyser+0x83c>
		}
		printf("\n");
 800b020:	200a      	movs	r0, #10
 800b022:	f01a fd33 	bl	8025a8c <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800b026:	481b      	ldr	r0, [pc, #108]	; (800b094 <Medha_EI_Analyser+0x900>)
 800b028:	f01a fdb4 	bl	8025b94 <puts>
		return;
 800b02c:	e004      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
	}
	else
	{
		return;
 800b02e:	bf00      	nop
 800b030:	e002      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
				return;
 800b032:	bf00      	nop
 800b034:	e000      	b.n	800b038 <Medha_EI_Analyser+0x8a4>
				return;
 800b036:	bf00      	nop
	}
}
 800b038:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800b03c:	46bd      	mov	sp, r7
 800b03e:	bdb0      	pop	{r4, r5, r7, pc}
 800b040:	20003d60 	.word	0x20003d60
 800b044:	20003be0 	.word	0x20003be0
 800b048:	20003e68 	.word	0x20003e68
 800b04c:	20003d06 	.word	0x20003d06
 800b050:	20003d38 	.word	0x20003d38
 800b054:	08028eb4 	.word	0x08028eb4
 800b058:	20003d50 	.word	0x20003d50
 800b05c:	08028ecc 	.word	0x08028ecc
 800b060:	08028ef4 	.word	0x08028ef4
 800b064:	08028efc 	.word	0x08028efc
 800b068:	08028f04 	.word	0x08028f04
 800b06c:	08028f10 	.word	0x08028f10
 800b070:	08028f1c 	.word	0x08028f1c
 800b074:	08028f24 	.word	0x08028f24
 800b078:	08028f2c 	.word	0x08028f2c
 800b07c:	08028f50 	.word	0x08028f50
 800b080:	08028f5c 	.word	0x08028f5c
 800b084:	08028f68 	.word	0x08028f68
 800b088:	cccccccd 	.word	0xcccccccd
 800b08c:	08028f7c 	.word	0x08028f7c
 800b090:	08028c10 	.word	0x08028c10
 800b094:	08028f94 	.word	0x08028f94

0800b098 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b0d2      	sub	sp, #328	; 0x148
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	4602      	mov	r2, r0
 800b0a0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0a4:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b0a8:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800b0aa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0ae:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	601a      	str	r2, [r3, #0]
 800b0b6:	3304      	adds	r3, #4
 800b0b8:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b0bc:	2100      	movs	r1, #0
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f01a fbe4 	bl	802588c <memset>
	uint32_t Cal_Crc =0;
 800b0c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800b0d6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b0da:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b0de:	2200      	movs	r2, #0
 800b0e0:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800b0e8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0ec:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b0f0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b0f4:	2153      	movs	r1, #83	; 0x53
 800b0f6:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b0f8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b0fc:	3301      	adds	r3, #1
 800b0fe:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800b102:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b106:	f107 0214 	add.w	r2, r7, #20
 800b10a:	4413      	add	r3, r2
 800b10c:	4a88      	ldr	r2, [pc, #544]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b10e:	8852      	ldrh	r2, [r2, #2]
 800b110:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b112:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b116:	3302      	adds	r3, #2
 800b118:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800b11c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b120:	f107 0214 	add.w	r2, r7, #20
 800b124:	4413      	add	r3, r2
 800b126:	4a82      	ldr	r2, [pc, #520]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b128:	8892      	ldrh	r2, [r2, #4]
 800b12a:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b12c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b130:	3302      	adds	r3, #2
 800b132:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800b136:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b13a:	f107 0214 	add.w	r2, r7, #20
 800b13e:	4413      	add	r3, r2
 800b140:	4a7b      	ldr	r2, [pc, #492]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b142:	7992      	ldrb	r2, [r2, #6]
 800b144:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b146:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b14a:	3301      	adds	r3, #1
 800b14c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800b150:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b154:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b158:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b15c:	21e2      	movs	r1, #226	; 0xe2
 800b15e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b160:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b164:	3301      	adds	r3, #1
 800b166:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800b16a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b16e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800b172:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b176:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b17a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b17e:	2100      	movs	r1, #0
 800b180:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800b182:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b186:	3301      	adds	r3, #1
 800b188:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b18c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b190:	2100      	movs	r1, #0
 800b192:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800b194:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b198:	3302      	adds	r3, #2
 800b19a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800b19e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1a2:	f107 0214 	add.w	r2, r7, #20
 800b1a6:	4413      	add	r3, r2
 800b1a8:	4a61      	ldr	r2, [pc, #388]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b1aa:	7a92      	ldrb	r2, [r2, #10]
 800b1ac:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b1ae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1b2:	3301      	adds	r3, #1
 800b1b4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800b1b8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1bc:	f107 0214 	add.w	r2, r7, #20
 800b1c0:	441a      	add	r2, r3
 800b1c2:	4b5b      	ldr	r3, [pc, #364]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b1c4:	330b      	adds	r3, #11
 800b1c6:	6819      	ldr	r1, [r3, #0]
 800b1c8:	6011      	str	r1, [r2, #0]
 800b1ca:	8899      	ldrh	r1, [r3, #4]
 800b1cc:	799b      	ldrb	r3, [r3, #6]
 800b1ce:	8091      	strh	r1, [r2, #4]
 800b1d0:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800b1d2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1d6:	3307      	adds	r3, #7
 800b1d8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800b1dc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1e0:	f107 0214 	add.w	r2, r7, #20
 800b1e4:	4413      	add	r3, r2
 800b1e6:	4a52      	ldr	r2, [pc, #328]	; (800b330 <Send_Medha_EI_Reply+0x298>)
 800b1e8:	8a92      	ldrh	r2, [r2, #20]
 800b1ea:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b1ec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1f0:	3302      	adds	r3, #2
 800b1f2:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800b1f6:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b1fa:	f107 0214 	add.w	r2, r7, #20
 800b1fe:	18d0      	adds	r0, r2, r3
 800b200:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b204:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	461a      	mov	r2, r3
 800b20c:	4949      	ldr	r1, [pc, #292]	; (800b334 <Send_Medha_EI_Reply+0x29c>)
 800b20e:	f01a fb15 	bl	802583c <memcpy>
	BYTEINC(Outputs);
 800b212:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b216:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b21a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	4413      	add	r3, r2
 800b222:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800b226:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b22a:	f107 0214 	add.w	r2, r7, #20
 800b22e:	18d0      	adds	r0, r2, r3
 800b230:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b234:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b238:	881b      	ldrh	r3, [r3, #0]
 800b23a:	461a      	mov	r2, r3
 800b23c:	493e      	ldr	r1, [pc, #248]	; (800b338 <Send_Medha_EI_Reply+0x2a0>)
 800b23e:	f01a fafd 	bl	802583c <memcpy>
	BYTEINC(Outputs);
 800b242:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b246:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b24a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b24e:	881b      	ldrh	r3, [r3, #0]
 800b250:	4413      	add	r3, r2
 800b252:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800b256:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b25a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b25e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b262:	2100      	movs	r1, #0
 800b264:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800b266:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b26a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b26e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b272:	2100      	movs	r1, #0
 800b274:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800b276:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b27a:	3302      	adds	r3, #2
 800b27c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800b280:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b284:	b29b      	uxth	r3, r3
 800b286:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b28a:	1ad3      	subs	r3, r2, r3
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	3302      	adds	r3, #2
 800b290:	b29a      	uxth	r2, r3
 800b292:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b296:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b29a:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800b29c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b2a0:	f107 0214 	add.w	r2, r7, #20
 800b2a4:	4413      	add	r3, r2
 800b2a6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b2aa:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b2ae:	8812      	ldrh	r2, [r2, #0]
 800b2b0:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800b2b2:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b2b6:	f107 0314 	add.w	r3, r7, #20
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	2000      	movs	r0, #0
 800b2be:	f000 fe47 	bl	800bf50 <GetCRC32>
 800b2c2:	4602      	mov	r2, r0
 800b2c4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b2c8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b2cc:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800b2ce:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b2d2:	f107 0214 	add.w	r2, r7, #20
 800b2d6:	4413      	add	r3, r2
 800b2d8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b2dc:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b2e0:	6812      	ldr	r2, [r2, #0]
 800b2e2:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800b2e4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b2e8:	3304      	adds	r3, #4
 800b2ea:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b2f4:	e011      	b.n	800b31a <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800b2f6:	4b11      	ldr	r3, [pc, #68]	; (800b33c <Send_Medha_EI_Reply+0x2a4>)
 800b2f8:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800b2fc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b300:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b304:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b308:	5cd3      	ldrb	r3, [r2, r3]
 800b30a:	4619      	mov	r1, r3
 800b30c:	f00d fa38 	bl	8018780 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b310:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b314:	3301      	adds	r3, #1
 800b316:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b31a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800b31e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b322:	429a      	cmp	r2, r3
 800b324:	d3e7      	bcc.n	800b2f6 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800b326:	bf00      	nop
}
 800b328:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}
 800b330:	20003be0 	.word	0x20003be0
 800b334:	20003bf8 	.word	0x20003bf8
 800b338:	20003c78 	.word	0x20003c78
 800b33c:	20000504 	.word	0x20000504

0800b340 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <Send_Relay_Statuses_2_MIE+0xb0>)
 800b348:	689b      	ldr	r3, [r3, #8]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f004 fe38 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b350:	4602      	mov	r2, r0
 800b352:	4b28      	ldr	r3, [pc, #160]	; (800b3f4 <Send_Relay_Statuses_2_MIE+0xb4>)
 800b354:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b358:	429a      	cmp	r2, r3
 800b35a:	d345      	bcc.n	800b3e8 <Send_Relay_Statuses_2_MIE+0xa8>
	{
		uint16_t NoOfInputs = 0;
 800b35c:	2300      	movs	r3, #0
 800b35e:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800b360:	4b24      	ldr	r3, [pc, #144]	; (800b3f4 <Send_Relay_Statuses_2_MIE+0xb4>)
 800b362:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d007      	beq.n	800b37e <Send_Relay_Statuses_2_MIE+0x3e>
 800b36e:	4b21      	ldr	r3, [pc, #132]	; (800b3f4 <Send_Relay_Statuses_2_MIE+0xb4>)
 800b370:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b374:	08db      	lsrs	r3, r3, #3
 800b376:	b29b      	uxth	r3, r3
 800b378:	3301      	adds	r3, #1
 800b37a:	80fb      	strh	r3, [r7, #6]
 800b37c:	e004      	b.n	800b388 <Send_Relay_Statuses_2_MIE+0x48>
 800b37e:	4b1d      	ldr	r3, [pc, #116]	; (800b3f4 <Send_Relay_Statuses_2_MIE+0xb4>)
 800b380:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b384:	08db      	lsrs	r3, r3, #3
 800b386:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b388:	f00d fc52 	bl	8018c30 <HAL_GetTick>
 800b38c:	4603      	mov	r3, r0
 800b38e:	4a18      	ldr	r2, [pc, #96]	; (800b3f0 <Send_Relay_Statuses_2_MIE+0xb0>)
 800b390:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800b392:	4819      	ldr	r0, [pc, #100]	; (800b3f8 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b394:	f01a fbfe 	bl	8025b94 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b398:	2300      	movs	r3, #0
 800b39a:	603b      	str	r3, [r7, #0]
 800b39c:	e01d      	b.n	800b3da <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00e      	beq.n	800b3c2 <Send_Relay_Statuses_2_MIE+0x82>
 800b3a4:	6839      	ldr	r1, [r7, #0]
 800b3a6:	4b15      	ldr	r3, [pc, #84]	; (800b3fc <Send_Relay_Statuses_2_MIE+0xbc>)
 800b3a8:	fba3 2301 	umull	r2, r3, r3, r1
 800b3ac:	091a      	lsrs	r2, r3, #4
 800b3ae:	4613      	mov	r3, r2
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	4413      	add	r3, r2
 800b3b4:	009b      	lsls	r3, r3, #2
 800b3b6:	1aca      	subs	r2, r1, r3
 800b3b8:	2a00      	cmp	r2, #0
 800b3ba:	d102      	bne.n	800b3c2 <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b3bc:	200a      	movs	r0, #10
 800b3be:	f01a fb65 	bl	8025a8c <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b3c2:	4a0f      	ldr	r2, [pc, #60]	; (800b400 <Send_Relay_Statuses_2_MIE+0xc0>)
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	3302      	adds	r3, #2
 800b3ca:	781b      	ldrb	r3, [r3, #0]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	480d      	ldr	r0, [pc, #52]	; (800b404 <Send_Relay_Statuses_2_MIE+0xc4>)
 800b3d0:	f01a fb44 	bl	8025a5c <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b3d4:	683b      	ldr	r3, [r7, #0]
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	603b      	str	r3, [r7, #0]
 800b3da:	88fb      	ldrh	r3, [r7, #6]
 800b3dc:	683a      	ldr	r2, [r7, #0]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d3dd      	bcc.n	800b39e <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b3e2:	200a      	movs	r0, #10
 800b3e4:	f01a fb52 	bl	8025a8c <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
#endif
	}
}
 800b3e8:	bf00      	nop
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	20003d38 	.word	0x20003d38
 800b3f4:	20000504 	.word	0x20000504
 800b3f8:	08028fbc 	.word	0x08028fbc
 800b3fc:	cccccccd 	.word	0xcccccccd
 800b400:	20003d04 	.word	0x20003d04
 800b404:	08028c10 	.word	0x08028c10

0800b408 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b40e:	4b61      	ldr	r3, [pc, #388]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b410:	685b      	ldr	r3, [r3, #4]
 800b412:	4618      	mov	r0, r3
 800b414:	f004 fdd4 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b418:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b41a:	4b5f      	ldr	r3, [pc, #380]	; (800b598 <Process_Clear_Relays+0x190>)
 800b41c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b420:	4a5d      	ldr	r2, [pc, #372]	; (800b598 <Process_Clear_Relays+0x190>)
 800b422:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b426:	fb02 f303 	mul.w	r3, r2, r3
 800b42a:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b42c:	495b      	ldr	r1, [pc, #364]	; (800b59c <Process_Clear_Relays+0x194>)
 800b42e:	485c      	ldr	r0, [pc, #368]	; (800b5a0 <Process_Clear_Relays+0x198>)
 800b430:	f7f4 ff06 	bl	8000240 <strcmp>
 800b434:	4603      	mov	r3, r0
 800b436:	2b00      	cmp	r3, #0
 800b438:	f000 80a7 	beq.w	800b58a <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b43c:	687a      	ldr	r2, [r7, #4]
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	429a      	cmp	r2, r3
 800b442:	d30c      	bcc.n	800b45e <Process_Clear_Relays+0x56>
 800b444:	4b53      	ldr	r3, [pc, #332]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	4b56      	ldr	r3, [pc, #344]	; (800b5a4 <Process_Clear_Relays+0x19c>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d006      	beq.n	800b45e <Process_Clear_Relays+0x56>
 800b450:	4b55      	ldr	r3, [pc, #340]	; (800b5a8 <Process_Clear_Relays+0x1a0>)
 800b452:	785a      	ldrb	r2, [r3, #1]
 800b454:	4b50      	ldr	r3, [pc, #320]	; (800b598 <Process_Clear_Relays+0x190>)
 800b456:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d808      	bhi.n	800b470 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b45e:	4b4d      	ldr	r3, [pc, #308]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b460:	781b      	ldrb	r3, [r3, #0]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d049      	beq.n	800b4fa <Process_Clear_Relays+0xf2>
 800b466:	4b51      	ldr	r3, [pc, #324]	; (800b5ac <Process_Clear_Relays+0x1a4>)
 800b468:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d044      	beq.n	800b4fa <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b470:	4b48      	ldr	r3, [pc, #288]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	4619      	mov	r1, r3
 800b476:	484e      	ldr	r0, [pc, #312]	; (800b5b0 <Process_Clear_Relays+0x1a8>)
 800b478:	f01a faf0 	bl	8025a5c <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b47c:	4b45      	ldr	r3, [pc, #276]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	f003 0301 	and.w	r3, r3, #1
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b488:	4b42      	ldr	r3, [pc, #264]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	f023 0301 	bic.w	r3, r3, #1
 800b490:	b2da      	uxtb	r2, r3
 800b492:	4b40      	ldr	r3, [pc, #256]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b494:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b496:	4b3f      	ldr	r3, [pc, #252]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b498:	781b      	ldrb	r3, [r3, #0]
 800b49a:	f003 0302 	and.w	r3, r3, #2
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d006      	beq.n	800b4b0 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b4a2:	4b3c      	ldr	r3, [pc, #240]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	f023 0302 	bic.w	r3, r3, #2
 800b4aa:	b2da      	uxtb	r2, r3
 800b4ac:	4b39      	ldr	r3, [pc, #228]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b4ae:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b4b0:	2284      	movs	r2, #132	; 0x84
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	483d      	ldr	r0, [pc, #244]	; (800b5ac <Process_Clear_Relays+0x1a4>)
 800b4b6:	f01a f9e9 	bl	802588c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b4ba:	2232      	movs	r2, #50	; 0x32
 800b4bc:	2100      	movs	r1, #0
 800b4be:	483d      	ldr	r0, [pc, #244]	; (800b5b4 <Process_Clear_Relays+0x1ac>)
 800b4c0:	f01a f9e4 	bl	802588c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b4c4:	2284      	movs	r2, #132	; 0x84
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	483b      	ldr	r0, [pc, #236]	; (800b5b8 <Process_Clear_Relays+0x1b0>)
 800b4ca:	f01a f9df 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b4ce:	2208      	movs	r2, #8
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	483a      	ldr	r0, [pc, #232]	; (800b5bc <Process_Clear_Relays+0x1b4>)
 800b4d4:	f01a f9da 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b4d8:	2208      	movs	r2, #8
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4832      	ldr	r0, [pc, #200]	; (800b5a8 <Process_Clear_Relays+0x1a0>)
 800b4de:	f01a f9d5 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b4e2:	2208      	movs	r2, #8
 800b4e4:	2100      	movs	r1, #0
 800b4e6:	4836      	ldr	r0, [pc, #216]	; (800b5c0 <Process_Clear_Relays+0x1b8>)
 800b4e8:	f01a f9d0 	bl	802588c <memset>
		printf("Cleared Relay Statuses\n");
 800b4ec:	4835      	ldr	r0, [pc, #212]	; (800b5c4 <Process_Clear_Relays+0x1bc>)
 800b4ee:	f01a fb51 	bl	8025b94 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b4f2:	4b28      	ldr	r3, [pc, #160]	; (800b594 <Process_Clear_Relays+0x18c>)
 800b4f4:	685b      	ldr	r3, [r3, #4]
 800b4f6:	4a2b      	ldr	r2, [pc, #172]	; (800b5a4 <Process_Clear_Relays+0x19c>)
 800b4f8:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b4fa:	4b33      	ldr	r3, [pc, #204]	; (800b5c8 <Process_Clear_Relays+0x1c0>)
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	4618      	mov	r0, r3
 800b500:	f004 fd5e 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b504:	4602      	mov	r2, r0
 800b506:	4b24      	ldr	r3, [pc, #144]	; (800b598 <Process_Clear_Relays+0x190>)
 800b508:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b50c:	429a      	cmp	r2, r3
 800b50e:	d92a      	bls.n	800b566 <Process_Clear_Relays+0x15e>
 800b510:	4b2e      	ldr	r3, [pc, #184]	; (800b5cc <Process_Clear_Relays+0x1c4>)
 800b512:	781b      	ldrb	r3, [r3, #0]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d126      	bne.n	800b566 <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b518:	482d      	ldr	r0, [pc, #180]	; (800b5d0 <Process_Clear_Relays+0x1c8>)
 800b51a:	f01a fb3b 	bl	8025b94 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b51e:	4b2b      	ldr	r3, [pc, #172]	; (800b5cc <Process_Clear_Relays+0x1c4>)
 800b520:	2200      	movs	r2, #0
 800b522:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b524:	2284      	movs	r2, #132	; 0x84
 800b526:	2100      	movs	r1, #0
 800b528:	4820      	ldr	r0, [pc, #128]	; (800b5ac <Process_Clear_Relays+0x1a4>)
 800b52a:	f01a f9af 	bl	802588c <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b52e:	2232      	movs	r2, #50	; 0x32
 800b530:	2100      	movs	r1, #0
 800b532:	4820      	ldr	r0, [pc, #128]	; (800b5b4 <Process_Clear_Relays+0x1ac>)
 800b534:	f01a f9aa 	bl	802588c <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b538:	2284      	movs	r2, #132	; 0x84
 800b53a:	2100      	movs	r1, #0
 800b53c:	481e      	ldr	r0, [pc, #120]	; (800b5b8 <Process_Clear_Relays+0x1b0>)
 800b53e:	f01a f9a5 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b542:	2208      	movs	r2, #8
 800b544:	2100      	movs	r1, #0
 800b546:	481d      	ldr	r0, [pc, #116]	; (800b5bc <Process_Clear_Relays+0x1b4>)
 800b548:	f01a f9a0 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b54c:	2208      	movs	r2, #8
 800b54e:	2100      	movs	r1, #0
 800b550:	4815      	ldr	r0, [pc, #84]	; (800b5a8 <Process_Clear_Relays+0x1a0>)
 800b552:	f01a f99b 	bl	802588c <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b556:	2208      	movs	r2, #8
 800b558:	2100      	movs	r1, #0
 800b55a:	4819      	ldr	r0, [pc, #100]	; (800b5c0 <Process_Clear_Relays+0x1b8>)
 800b55c:	f01a f996 	bl	802588c <memset>
		printf("Cleared Relay Statuses\n");
 800b560:	4818      	ldr	r0, [pc, #96]	; (800b5c4 <Process_Clear_Relays+0x1bc>)
 800b562:	f01a fb17 	bl	8025b94 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b566:	4b18      	ldr	r3, [pc, #96]	; (800b5c8 <Process_Clear_Relays+0x1c0>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4618      	mov	r0, r3
 800b56c:	f004 fd28 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b570:	4602      	mov	r2, r0
 800b572:	4b09      	ldr	r3, [pc, #36]	; (800b598 <Process_Clear_Relays+0x190>)
 800b574:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d207      	bcs.n	800b58c <Process_Clear_Relays+0x184>
 800b57c:	4b13      	ldr	r3, [pc, #76]	; (800b5cc <Process_Clear_Relays+0x1c4>)
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	2b01      	cmp	r3, #1
 800b582:	d103      	bne.n	800b58c <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b584:	f00a f8d6 	bl	8015734 <Blink_S2>
 800b588:	e000      	b.n	800b58c <Process_Clear_Relays+0x184>
		return;
 800b58a:	bf00      	nop
	}


}
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20003d38 	.word	0x20003d38
 800b598:	20000504 	.word	0x20000504
 800b59c:	08028c70 	.word	0x08028c70
 800b5a0:	20000505 	.word	0x20000505
 800b5a4:	20003ef8 	.word	0x20003ef8
 800b5a8:	20003d50 	.word	0x20003d50
 800b5ac:	20003d60 	.word	0x20003d60
 800b5b0:	08028fd0 	.word	0x08028fd0
 800b5b4:	20003d04 	.word	0x20003d04
 800b5b8:	20003e68 	.word	0x20003e68
 800b5bc:	20003d48 	.word	0x20003d48
 800b5c0:	20003d58 	.word	0x20003d58
 800b5c4:	08029000 	.word	0x08029000
 800b5c8:	200037f0 	.word	0x200037f0
 800b5cc:	200037ec 	.word	0x200037ec
 800b5d0:	08029018 	.word	0x08029018

0800b5d4 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b5d8:	4b26      	ldr	r3, [pc, #152]	; (800b674 <Send_Data_to_Other+0xa0>)
 800b5da:	685b      	ldr	r3, [r3, #4]
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f004 fcef 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	4b24      	ldr	r3, [pc, #144]	; (800b678 <Send_Data_to_Other+0xa4>)
 800b5e6:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b5ea:	4923      	ldr	r1, [pc, #140]	; (800b678 <Send_Data_to_Other+0xa4>)
 800b5ec:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b5f0:	fb01 f303 	mul.w	r3, r1, r3
 800b5f4:	429a      	cmp	r2, r3
 800b5f6:	d306      	bcc.n	800b606 <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b5f8:	4b20      	ldr	r3, [pc, #128]	; (800b67c <Send_Data_to_Other+0xa8>)
 800b5fa:	781b      	ldrb	r3, [r3, #0]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b600:	4b1e      	ldr	r3, [pc, #120]	; (800b67c <Send_Data_to_Other+0xa8>)
 800b602:	2200      	movs	r2, #0
 800b604:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b606:	4b1b      	ldr	r3, [pc, #108]	; (800b674 <Send_Data_to_Other+0xa0>)
 800b608:	685b      	ldr	r3, [r3, #4]
 800b60a:	4618      	mov	r0, r3
 800b60c:	f004 fcd8 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b610:	4602      	mov	r2, r0
 800b612:	4b19      	ldr	r3, [pc, #100]	; (800b678 <Send_Data_to_Other+0xa4>)
 800b614:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b618:	429a      	cmp	r2, r3
 800b61a:	d90e      	bls.n	800b63a <Send_Data_to_Other+0x66>
 800b61c:	4b15      	ldr	r3, [pc, #84]	; (800b674 <Send_Data_to_Other+0xa0>)
 800b61e:	685a      	ldr	r2, [r3, #4]
 800b620:	4b17      	ldr	r3, [pc, #92]	; (800b680 <Send_Data_to_Other+0xac>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	429a      	cmp	r2, r3
 800b626:	d008      	beq.n	800b63a <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b628:	4b12      	ldr	r3, [pc, #72]	; (800b674 <Send_Data_to_Other+0xa0>)
 800b62a:	685b      	ldr	r3, [r3, #4]
 800b62c:	4a14      	ldr	r2, [pc, #80]	; (800b680 <Send_Data_to_Other+0xac>)
 800b62e:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800b630:	f240 2002 	movw	r0, #514	; 0x202
 800b634:	f005 fa40 	bl	8010ab8 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b638:	e01a      	b.n	800b670 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b63a:	4b12      	ldr	r3, [pc, #72]	; (800b684 <Send_Data_to_Other+0xb0>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	4618      	mov	r0, r3
 800b640:	f004 fcbe 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b644:	4603      	mov	r3, r0
 800b646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b64a:	d911      	bls.n	800b670 <Send_Data_to_Other+0x9c>
 800b64c:	4b09      	ldr	r3, [pc, #36]	; (800b674 <Send_Data_to_Other+0xa0>)
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	4618      	mov	r0, r3
 800b652:	f004 fcb5 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b656:	4603      	mov	r3, r0
 800b658:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b65c:	d908      	bls.n	800b670 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800b65e:	f00d fae7 	bl	8018c30 <HAL_GetTick>
 800b662:	4603      	mov	r3, r0
 800b664:	4a07      	ldr	r2, [pc, #28]	; (800b684 <Send_Data_to_Other+0xb0>)
 800b666:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_2_SELF_SHARING);
 800b668:	f240 2002 	movw	r0, #514	; 0x202
 800b66c:	f005 fa24 	bl	8010ab8 <TransmitCanPkt>
}
 800b670:	bf00      	nop
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20003d38 	.word	0x20003d38
 800b678:	20000504 	.word	0x20000504
 800b67c:	20003d48 	.word	0x20003d48
 800b680:	20003efc 	.word	0x20003efc
 800b684:	20003f00 	.word	0x20003f00

0800b688 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800b688:	b5b0      	push	{r4, r5, r7, lr}
 800b68a:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800b68c:	499a      	ldr	r1, [pc, #616]	; (800b8f8 <Process_Data_from_Other+0x270>)
 800b68e:	489b      	ldr	r0, [pc, #620]	; (800b8fc <Process_Data_from_Other+0x274>)
 800b690:	f7f4 fdd6 	bl	8000240 <strcmp>
 800b694:	4603      	mov	r3, r0
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 812b 	beq.w	800b8f2 <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800b69c:	4b98      	ldr	r3, [pc, #608]	; (800b900 <Process_Data_from_Other+0x278>)
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	4b98      	ldr	r3, [pc, #608]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	d109      	bne.n	800b6bc <Process_Data_from_Other+0x34>
 800b6a8:	4b95      	ldr	r3, [pc, #596]	; (800b900 <Process_Data_from_Other+0x278>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f004 fc87 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b6b8:	f0c0 80e4 	bcc.w	800b884 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800b6bc:	f00d fab8 	bl	8018c30 <HAL_GetTick>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	4a8f      	ldr	r2, [pc, #572]	; (800b900 <Process_Data_from_Other+0x278>)
 800b6c4:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800b6c6:	4b90      	ldr	r3, [pc, #576]	; (800b908 <Process_Data_from_Other+0x280>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d007      	beq.n	800b6de <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800b6ce:	4b8f      	ldr	r3, [pc, #572]	; (800b90c <Process_Data_from_Other+0x284>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	f043 0301 	orr.w	r3, r3, #1
 800b6d6:	b2da      	uxtb	r2, r3
 800b6d8:	4b8c      	ldr	r3, [pc, #560]	; (800b90c <Process_Data_from_Other+0x284>)
 800b6da:	701a      	strb	r2, [r3, #0]
 800b6dc:	e006      	b.n	800b6ec <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800b6de:	4b8b      	ldr	r3, [pc, #556]	; (800b90c <Process_Data_from_Other+0x284>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	f023 0301 	bic.w	r3, r3, #1
 800b6e6:	b2da      	uxtb	r2, r3
 800b6e8:	4b88      	ldr	r3, [pc, #544]	; (800b90c <Process_Data_from_Other+0x284>)
 800b6ea:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800b6ec:	4b88      	ldr	r3, [pc, #544]	; (800b910 <Process_Data_from_Other+0x288>)
 800b6ee:	781b      	ldrb	r3, [r3, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d007      	beq.n	800b704 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800b6f4:	4b85      	ldr	r3, [pc, #532]	; (800b90c <Process_Data_from_Other+0x284>)
 800b6f6:	781b      	ldrb	r3, [r3, #0]
 800b6f8:	f043 0302 	orr.w	r3, r3, #2
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	4b83      	ldr	r3, [pc, #524]	; (800b90c <Process_Data_from_Other+0x284>)
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e006      	b.n	800b712 <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800b704:	4b81      	ldr	r3, [pc, #516]	; (800b90c <Process_Data_from_Other+0x284>)
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	f023 0302 	bic.w	r3, r3, #2
 800b70c:	b2da      	uxtb	r2, r3
 800b70e:	4b7f      	ldr	r3, [pc, #508]	; (800b90c <Process_Data_from_Other+0x284>)
 800b710:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800b712:	4b7e      	ldr	r3, [pc, #504]	; (800b90c <Process_Data_from_Other+0x284>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	2b03      	cmp	r3, #3
 800b718:	f200 809a 	bhi.w	800b850 <Process_Data_from_Other+0x1c8>
 800b71c:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <Process_Data_from_Other+0x9c>)
 800b71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b722:	bf00      	nop
 800b724:	0800b735 	.word	0x0800b735
 800b728:	0800b7c5 	.word	0x0800b7c5
 800b72c:	0800b743 	.word	0x0800b743
 800b730:	0800b815 	.word	0x0800b815
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b734:	4b74      	ldr	r3, [pc, #464]	; (800b908 <Process_Data_from_Other+0x280>)
 800b736:	785b      	ldrb	r3, [r3, #1]
 800b738:	3301      	adds	r3, #1
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	4b72      	ldr	r3, [pc, #456]	; (800b908 <Process_Data_from_Other+0x280>)
 800b73e:	705a      	strb	r2, [r3, #1]
			break;
 800b740:	e086      	b.n	800b850 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b742:	4b73      	ldr	r3, [pc, #460]	; (800b910 <Process_Data_from_Other+0x288>)
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	4b70      	ldr	r3, [pc, #448]	; (800b908 <Process_Data_from_Other+0x280>)
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	429a      	cmp	r2, r3
 800b74c:	d02f      	beq.n	800b7ae <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800b74e:	4b71      	ldr	r3, [pc, #452]	; (800b914 <Process_Data_from_Other+0x28c>)
 800b750:	781b      	ldrb	r3, [r3, #0]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d179      	bne.n	800b84a <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800b756:	4b6c      	ldr	r3, [pc, #432]	; (800b908 <Process_Data_from_Other+0x280>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	4619      	mov	r1, r3
 800b75c:	486e      	ldr	r0, [pc, #440]	; (800b918 <Process_Data_from_Other+0x290>)
 800b75e:	f01a f97d 	bl	8025a5c <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800b762:	4b6b      	ldr	r3, [pc, #428]	; (800b910 <Process_Data_from_Other+0x288>)
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	4619      	mov	r1, r3
 800b768:	486c      	ldr	r0, [pc, #432]	; (800b91c <Process_Data_from_Other+0x294>)
 800b76a:	f01a f977 	bl	8025a5c <iprintf>
					Received_CAN_Relay_Status=NO;
 800b76e:	4b69      	ldr	r3, [pc, #420]	; (800b914 <Process_Data_from_Other+0x28c>)
 800b770:	2200      	movs	r2, #0
 800b772:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800b774:	486a      	ldr	r0, [pc, #424]	; (800b920 <Process_Data_from_Other+0x298>)
 800b776:	f01a fa0d 	bl	8025b94 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b77a:	4a6a      	ldr	r2, [pc, #424]	; (800b924 <Process_Data_from_Other+0x29c>)
 800b77c:	4b6a      	ldr	r3, [pc, #424]	; (800b928 <Process_Data_from_Other+0x2a0>)
 800b77e:	4610      	mov	r0, r2
 800b780:	4619      	mov	r1, r3
 800b782:	2384      	movs	r3, #132	; 0x84
 800b784:	461a      	mov	r2, r3
 800b786:	f01a f859 	bl	802583c <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800b78a:	4a68      	ldr	r2, [pc, #416]	; (800b92c <Process_Data_from_Other+0x2a4>)
 800b78c:	4b65      	ldr	r3, [pc, #404]	; (800b924 <Process_Data_from_Other+0x29c>)
 800b78e:	4614      	mov	r4, r2
 800b790:	461d      	mov	r5, r3
 800b792:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b794:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b79a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b79c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b79e:	682b      	ldr	r3, [r5, #0]
 800b7a0:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b7a2:	4b60      	ldr	r3, [pc, #384]	; (800b924 <Process_Data_from_Other+0x29c>)
 800b7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7a8:	4a57      	ldr	r2, [pc, #348]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7aa:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800b7ac:	e04d      	b.n	800b84a <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b7ae:	4b56      	ldr	r3, [pc, #344]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7b4:	4b5e      	ldr	r3, [pc, #376]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	f023 0301 	bic.w	r3, r3, #1
 800b7bc:	b2da      	uxtb	r2, r3
 800b7be:	4b5c      	ldr	r3, [pc, #368]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b7c0:	701a      	strb	r2, [r3, #0]
			break;
 800b7c2:	e042      	b.n	800b84a <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b7c4:	4b52      	ldr	r3, [pc, #328]	; (800b910 <Process_Data_from_Other+0x288>)
 800b7c6:	685a      	ldr	r2, [r3, #4]
 800b7c8:	4b4f      	ldr	r3, [pc, #316]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d016      	beq.n	800b7fe <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b7d0:	4858      	ldr	r0, [pc, #352]	; (800b934 <Process_Data_from_Other+0x2ac>)
 800b7d2:	f01a f9df 	bl	8025b94 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b7d6:	4b4c      	ldr	r3, [pc, #304]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7d8:	785b      	ldrb	r3, [r3, #1]
 800b7da:	3301      	adds	r3, #1
 800b7dc:	b2da      	uxtb	r2, r3
 800b7de:	4b4a      	ldr	r3, [pc, #296]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7e0:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800b7e2:	4b49      	ldr	r3, [pc, #292]	; (800b908 <Process_Data_from_Other+0x280>)
 800b7e4:	785b      	ldrb	r3, [r3, #1]
 800b7e6:	2b02      	cmp	r3, #2
 800b7e8:	d931      	bls.n	800b84e <Process_Data_from_Other+0x1c6>
 800b7ea:	4b4e      	ldr	r3, [pc, #312]	; (800b924 <Process_Data_from_Other+0x29c>)
 800b7ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d02c      	beq.n	800b84e <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
					TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800b7f4:	f44f 7002 	mov.w	r0, #520	; 0x208
 800b7f8:	f005 f95e 	bl	8010ab8 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b7fc:	e027      	b.n	800b84e <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b7fe:	4b4c      	ldr	r3, [pc, #304]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b800:	781b      	ldrb	r3, [r3, #0]
 800b802:	f023 0301 	bic.w	r3, r3, #1
 800b806:	b2da      	uxtb	r2, r3
 800b808:	4b49      	ldr	r3, [pc, #292]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b80a:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b80c:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <Process_Data_from_Other+0x280>)
 800b80e:	2200      	movs	r2, #0
 800b810:	705a      	strb	r2, [r3, #1]
			break;
 800b812:	e01c      	b.n	800b84e <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800b814:	4b3e      	ldr	r3, [pc, #248]	; (800b910 <Process_Data_from_Other+0x288>)
 800b816:	685a      	ldr	r2, [r3, #4]
 800b818:	4b3b      	ldr	r3, [pc, #236]	; (800b908 <Process_Data_from_Other+0x280>)
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d009      	beq.n	800b834 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800b820:	4844      	ldr	r0, [pc, #272]	; (800b934 <Process_Data_from_Other+0x2ac>)
 800b822:	f01a f9b7 	bl	8025b94 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800b826:	4b38      	ldr	r3, [pc, #224]	; (800b908 <Process_Data_from_Other+0x280>)
 800b828:	785b      	ldrb	r3, [r3, #1]
 800b82a:	3301      	adds	r3, #1
 800b82c:	b2da      	uxtb	r2, r3
 800b82e:	4b36      	ldr	r3, [pc, #216]	; (800b908 <Process_Data_from_Other+0x280>)
 800b830:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800b832:	e00d      	b.n	800b850 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b834:	4b3e      	ldr	r3, [pc, #248]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	f023 0301 	bic.w	r3, r3, #1
 800b83c:	b2da      	uxtb	r2, r3
 800b83e:	4b3c      	ldr	r3, [pc, #240]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b840:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800b842:	4b31      	ldr	r3, [pc, #196]	; (800b908 <Process_Data_from_Other+0x280>)
 800b844:	2200      	movs	r2, #0
 800b846:	705a      	strb	r2, [r3, #1]
			break;
 800b848:	e002      	b.n	800b850 <Process_Data_from_Other+0x1c8>
			break;
 800b84a:	bf00      	nop
 800b84c:	e000      	b.n	800b850 <Process_Data_from_Other+0x1c8>
			break;
 800b84e:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800b850:	4b2d      	ldr	r3, [pc, #180]	; (800b908 <Process_Data_from_Other+0x280>)
 800b852:	785a      	ldrb	r2, [r3, #1]
 800b854:	4b38      	ldr	r3, [pc, #224]	; (800b938 <Process_Data_from_Other+0x2b0>)
 800b856:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b85a:	429a      	cmp	r2, r3
 800b85c:	d312      	bcc.n	800b884 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b85e:	4b34      	ldr	r3, [pc, #208]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b860:	781b      	ldrb	r3, [r3, #0]
 800b862:	f003 0301 	and.w	r3, r3, #1
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10c      	bne.n	800b884 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800b86a:	4834      	ldr	r0, [pc, #208]	; (800b93c <Process_Data_from_Other+0x2b4>)
 800b86c:	f01a f992 	bl	8025b94 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800b870:	4b25      	ldr	r3, [pc, #148]	; (800b908 <Process_Data_from_Other+0x280>)
 800b872:	2200      	movs	r2, #0
 800b874:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b876:	4b2e      	ldr	r3, [pc, #184]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b878:	781b      	ldrb	r3, [r3, #0]
 800b87a:	f043 0301 	orr.w	r3, r3, #1
 800b87e:	b2da      	uxtb	r2, r3
 800b880:	4b2b      	ldr	r3, [pc, #172]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b882:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800b884:	4b1f      	ldr	r3, [pc, #124]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4618      	mov	r0, r3
 800b88a:	f004 fb99 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b88e:	4602      	mov	r2, r0
 800b890:	4b29      	ldr	r3, [pc, #164]	; (800b938 <Process_Data_from_Other+0x2b0>)
 800b892:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b896:	429a      	cmp	r2, r3
 800b898:	d92c      	bls.n	800b8f4 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800b89a:	4b29      	ldr	r3, [pc, #164]	; (800b940 <Process_Data_from_Other+0x2b8>)
 800b89c:	681a      	ldr	r2, [r3, #0]
 800b89e:	4b19      	ldr	r3, [pc, #100]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d026      	beq.n	800b8f4 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800b8a6:	4b17      	ldr	r3, [pc, #92]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a25      	ldr	r2, [pc, #148]	; (800b940 <Process_Data_from_Other+0x2b8>)
 800b8ac:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800b8ae:	4b15      	ldr	r3, [pc, #84]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f004 fb84 	bl	800ffc0 <HAL_Elaps_Ticks>
 800b8b8:	4603      	mov	r3, r0
 800b8ba:	4a22      	ldr	r2, [pc, #136]	; (800b944 <Process_Data_from_Other+0x2bc>)
 800b8bc:	fba2 2303 	umull	r2, r3, r2, r3
 800b8c0:	099b      	lsrs	r3, r3, #6
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	4820      	ldr	r0, [pc, #128]	; (800b948 <Process_Data_from_Other+0x2c0>)
 800b8c6:	f01a f8c9 	bl	8025a5c <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800b8ca:	4b0e      	ldr	r3, [pc, #56]	; (800b904 <Process_Data_from_Other+0x27c>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	481e      	ldr	r0, [pc, #120]	; (800b94c <Process_Data_from_Other+0x2c4>)
 800b8d2:	f01a f8c3 	bl	8025a5c <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800b8d6:	4b16      	ldr	r3, [pc, #88]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d108      	bne.n	800b8f4 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b8e2:	4b13      	ldr	r3, [pc, #76]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	f043 0302 	orr.w	r3, r3, #2
 800b8ea:	b2da      	uxtb	r2, r3
 800b8ec:	4b10      	ldr	r3, [pc, #64]	; (800b930 <Process_Data_from_Other+0x2a8>)
 800b8ee:	701a      	strb	r2, [r3, #0]
 800b8f0:	e000      	b.n	800b8f4 <Process_Data_from_Other+0x26c>
		return;
 800b8f2:	bf00      	nop
			}
		}
	}
}
 800b8f4:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	08028c70 	.word	0x08028c70
 800b8fc:	20000505 	.word	0x20000505
 800b900:	20003f04 	.word	0x20003f04
 800b904:	200037f0 	.word	0x200037f0
 800b908:	20003d48 	.word	0x20003d48
 800b90c:	200037ee 	.word	0x200037ee
 800b910:	20003d50 	.word	0x20003d50
 800b914:	200037ed 	.word	0x200037ed
 800b918:	08029038 	.word	0x08029038
 800b91c:	08029050 	.word	0x08029050
 800b920:	08029068 	.word	0x08029068
 800b924:	20003d60 	.word	0x20003d60
 800b928:	20003de4 	.word	0x20003de4
 800b92c:	20003d04 	.word	0x20003d04
 800b930:	20003d38 	.word	0x20003d38
 800b934:	0802909c 	.word	0x0802909c
 800b938:	20000504 	.word	0x20000504
 800b93c:	080290c0 	.word	0x080290c0
 800b940:	20003f08 	.word	0x20003f08
 800b944:	10624dd3 	.word	0x10624dd3
 800b948:	080290d8 	.word	0x080290d8
 800b94c:	08029108 	.word	0x08029108

0800b950 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800b950:	b580      	push	{r7, lr}
 800b952:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800b954:	482a      	ldr	r0, [pc, #168]	; (800ba00 <Print_Medha_Self_Details+0xb0>)
 800b956:	f01a f91d 	bl	8025b94 <puts>
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800b95a:	4b2a      	ldr	r3, [pc, #168]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b95c:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800b960:	4619      	mov	r1, r3
 800b962:	4829      	ldr	r0, [pc, #164]	; (800ba08 <Print_Medha_Self_Details+0xb8>)
 800b964:	f01a f87a 	bl	8025a5c <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800b968:	4b26      	ldr	r3, [pc, #152]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b96a:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800b96e:	4619      	mov	r1, r3
 800b970:	4826      	ldr	r0, [pc, #152]	; (800ba0c <Print_Medha_Self_Details+0xbc>)
 800b972:	f01a f873 	bl	8025a5c <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800b976:	4b23      	ldr	r3, [pc, #140]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b978:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b97c:	4619      	mov	r1, r3
 800b97e:	4824      	ldr	r0, [pc, #144]	; (800ba10 <Print_Medha_Self_Details+0xc0>)
 800b980:	f01a f86c 	bl	8025a5c <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800b984:	4b1f      	ldr	r3, [pc, #124]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b986:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800b98a:	4619      	mov	r1, r3
 800b98c:	4821      	ldr	r0, [pc, #132]	; (800ba14 <Print_Medha_Self_Details+0xc4>)
 800b98e:	f01a f865 	bl	8025a5c <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800b992:	4b1c      	ldr	r3, [pc, #112]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b994:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b998:	4619      	mov	r1, r3
 800b99a:	481f      	ldr	r0, [pc, #124]	; (800ba18 <Print_Medha_Self_Details+0xc8>)
 800b99c:	f01a f85e 	bl	8025a5c <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800b9a0:	4b18      	ldr	r3, [pc, #96]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9a2:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	481c      	ldr	r0, [pc, #112]	; (800ba1c <Print_Medha_Self_Details+0xcc>)
 800b9aa:	f01a f857 	bl	8025a5c <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800b9ae:	4b15      	ldr	r3, [pc, #84]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9b0:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b9b4:	4619      	mov	r1, r3
 800b9b6:	481a      	ldr	r0, [pc, #104]	; (800ba20 <Print_Medha_Self_Details+0xd0>)
 800b9b8:	f01a f850 	bl	8025a5c <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800b9bc:	4b11      	ldr	r3, [pc, #68]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9be:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	4817      	ldr	r0, [pc, #92]	; (800ba24 <Print_Medha_Self_Details+0xd4>)
 800b9c6:	f01a f849 	bl	8025a5c <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800b9ca:	4b0e      	ldr	r3, [pc, #56]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9cc:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	4815      	ldr	r0, [pc, #84]	; (800ba28 <Print_Medha_Self_Details+0xd8>)
 800b9d4:	f01a f842 	bl	8025a5c <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9da:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800b9de:	4619      	mov	r1, r3
 800b9e0:	4812      	ldr	r0, [pc, #72]	; (800ba2c <Print_Medha_Self_Details+0xdc>)
 800b9e2:	f01a f83b 	bl	8025a5c <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800b9e6:	4b07      	ldr	r3, [pc, #28]	; (800ba04 <Print_Medha_Self_Details+0xb4>)
 800b9e8:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	4810      	ldr	r0, [pc, #64]	; (800ba30 <Print_Medha_Self_Details+0xe0>)
 800b9f0:	f01a f834 	bl	8025a5c <iprintf>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800b9f4:	4802      	ldr	r0, [pc, #8]	; (800ba00 <Print_Medha_Self_Details+0xb0>)
 800b9f6:	f01a f8cd 	bl	8025b94 <puts>
#endif
}
 800b9fa:	bf00      	nop
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08029130 	.word	0x08029130
 800ba04:	20000504 	.word	0x20000504
 800ba08:	08029184 	.word	0x08029184
 800ba0c:	080291a8 	.word	0x080291a8
 800ba10:	080291cc 	.word	0x080291cc
 800ba14:	080291f0 	.word	0x080291f0
 800ba18:	08029214 	.word	0x08029214
 800ba1c:	08029238 	.word	0x08029238
 800ba20:	0802925c 	.word	0x0802925c
 800ba24:	08029280 	.word	0x08029280
 800ba28:	080292a4 	.word	0x080292a4
 800ba2c:	080292c8 	.word	0x080292c8
 800ba30:	080292ec 	.word	0x080292ec

0800ba34 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b09a      	sub	sp, #104	; 0x68
 800ba38:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800ba46:	2300      	movs	r3, #0
 800ba48:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	603b      	str	r3, [r7, #0]
 800ba50:	1d3b      	adds	r3, r7, #4
 800ba52:	2260      	movs	r2, #96	; 0x60
 800ba54:	2100      	movs	r1, #0
 800ba56:	4618      	mov	r0, r3
 800ba58:	f019 ff18 	bl	802588c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800ba5c:	4bb9      	ldr	r3, [pc, #740]	; (800bd44 <CheckforMedhaCMD+0x310>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4618      	mov	r0, r3
 800ba62:	f004 faad 	bl	800ffc0 <HAL_Elaps_Ticks>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b09      	cmp	r3, #9
 800ba6a:	f240 81ad 	bls.w	800bdc8 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800ba6e:	e010      	b.n	800ba92 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800ba70:	2000      	movs	r0, #0
 800ba72:	f00c fdb5 	bl	80185e0 <Com_Get_Byte>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ba7c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ba86:	3368      	adds	r3, #104	; 0x68
 800ba88:	443b      	add	r3, r7
 800ba8a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ba8e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ba92:	2000      	movs	r0, #0
 800ba94:	f00c fd64 	bl	8018560 <Com_DataReady>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d1e8      	bne.n	800ba70 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800ba9e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 8144 	beq.w	800bd30 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800baa8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800baac:	3368      	adds	r3, #104	; 0x68
 800baae:	443b      	add	r3, r7
 800bab0:	2200      	movs	r2, #0
 800bab2:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800bab6:	463b      	mov	r3, r7
 800bab8:	4619      	mov	r1, r3
 800baba:	48a3      	ldr	r0, [pc, #652]	; (800bd48 <CheckforMedhaCMD+0x314>)
 800babc:	f019 ffce 	bl	8025a5c <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800bac0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800bac4:	463b      	mov	r3, r7
 800bac6:	4611      	mov	r1, r2
 800bac8:	4618      	mov	r0, r3
 800baca:	f000 fa0d 	bl	800bee8 <Is_MedhaCommand_Valid>
 800bace:	4603      	mov	r3, r0
 800bad0:	2b0c      	cmp	r3, #12
 800bad2:	f200 8129 	bhi.w	800bd28 <CheckforMedhaCMD+0x2f4>
 800bad6:	a201      	add	r2, pc, #4	; (adr r2, 800badc <CheckforMedhaCMD+0xa8>)
 800bad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800badc:	0800bb11 	.word	0x0800bb11
 800bae0:	0800bb1f 	.word	0x0800bb1f
 800bae4:	0800bb83 	.word	0x0800bb83
 800bae8:	0800bba5 	.word	0x0800bba5
 800baec:	0800bbcd 	.word	0x0800bbcd
 800baf0:	0800bbf5 	.word	0x0800bbf5
 800baf4:	0800bc1d 	.word	0x0800bc1d
 800baf8:	0800bc45 	.word	0x0800bc45
 800bafc:	0800bc6d 	.word	0x0800bc6d
 800bb00:	0800bc95 	.word	0x0800bc95
 800bb04:	0800bcbd 	.word	0x0800bcbd
 800bb08:	0800bce5 	.word	0x0800bce5
 800bb0c:	0800bd0d 	.word	0x0800bd0d
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800bb10:	4b8e      	ldr	r3, [pc, #568]	; (800bd4c <CheckforMedhaCMD+0x318>)
 800bb12:	2201      	movs	r2, #1
 800bb14:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800bb16:	488e      	ldr	r0, [pc, #568]	; (800bd50 <CheckforMedhaCMD+0x31c>)
 800bb18:	f01a f83c 	bl	8025b94 <puts>
				break;
 800bb1c:	e109      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800bb1e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb22:	3b01      	subs	r3, #1
 800bb24:	3368      	adds	r3, #104	; 0x68
 800bb26:	443b      	add	r3, r7
 800bb28:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb2c:	3b30      	subs	r3, #48	; 0x30
 800bb2e:	461a      	mov	r2, r3
 800bb30:	4988      	ldr	r1, [pc, #544]	; (800bd54 <CheckforMedhaCMD+0x320>)
 800bb32:	4889      	ldr	r0, [pc, #548]	; (800bd58 <CheckforMedhaCMD+0x324>)
 800bb34:	f019 ff92 	bl	8025a5c <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800bb38:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb3c:	3b01      	subs	r3, #1
 800bb3e:	3368      	adds	r3, #104	; 0x68
 800bb40:	443b      	add	r3, r7
 800bb42:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb46:	2b2f      	cmp	r3, #47	; 0x2f
 800bb48:	d914      	bls.n	800bb74 <CheckforMedhaCMD+0x140>
 800bb4a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	3368      	adds	r3, #104	; 0x68
 800bb52:	443b      	add	r3, r7
 800bb54:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb58:	2b32      	cmp	r3, #50	; 0x32
 800bb5a:	d80b      	bhi.n	800bb74 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800bb5c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bb60:	3b01      	subs	r3, #1
 800bb62:	3368      	adds	r3, #104	; 0x68
 800bb64:	443b      	add	r3, r7
 800bb66:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bb6a:	3b30      	subs	r3, #48	; 0x30
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	4b7b      	ldr	r3, [pc, #492]	; (800bd5c <CheckforMedhaCMD+0x328>)
 800bb70:	701a      	strb	r2, [r3, #0]
 800bb72:	e002      	b.n	800bb7a <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800bb74:	487a      	ldr	r0, [pc, #488]	; (800bd60 <CheckforMedhaCMD+0x32c>)
 800bb76:	f01a f80d 	bl	8025b94 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bb80:	e0d7      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800bb82:	4978      	ldr	r1, [pc, #480]	; (800bd64 <CheckforMedhaCMD+0x330>)
 800bb84:	4878      	ldr	r0, [pc, #480]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bb86:	f019 ff69 	bl	8025a5c <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800bb8a:	4878      	ldr	r0, [pc, #480]	; (800bd6c <CheckforMedhaCMD+0x338>)
 800bb8c:	f01a f802 	bl	8025b94 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bb90:	4b77      	ldr	r3, [pc, #476]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f043 0301 	orr.w	r3, r3, #1
 800bb98:	4a75      	ldr	r2, [pc, #468]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bb9a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bba2:	e0c6      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800bba4:	4973      	ldr	r1, [pc, #460]	; (800bd74 <CheckforMedhaCMD+0x340>)
 800bba6:	4870      	ldr	r0, [pc, #448]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bba8:	f019 ff58 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800bbac:	4872      	ldr	r0, [pc, #456]	; (800bd78 <CheckforMedhaCMD+0x344>)
 800bbae:	f019 fff1 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bbb2:	4b6f      	ldr	r3, [pc, #444]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bbb8:	4b6d      	ldr	r3, [pc, #436]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f043 0302 	orr.w	r3, r3, #2
 800bbc0:	4a6b      	ldr	r2, [pc, #428]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbc2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bbca:	e0b2      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800bbcc:	496b      	ldr	r1, [pc, #428]	; (800bd7c <CheckforMedhaCMD+0x348>)
 800bbce:	4866      	ldr	r0, [pc, #408]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bbd0:	f019 ff44 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800bbd4:	486a      	ldr	r0, [pc, #424]	; (800bd80 <CheckforMedhaCMD+0x34c>)
 800bbd6:	f019 ffdd 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bbda:	4b65      	ldr	r3, [pc, #404]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bbe0:	4b63      	ldr	r3, [pc, #396]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f043 0304 	orr.w	r3, r3, #4
 800bbe8:	4a61      	ldr	r2, [pc, #388]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bbea:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bbec:	2301      	movs	r3, #1
 800bbee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bbf2:	e09e      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800bbf4:	4963      	ldr	r1, [pc, #396]	; (800bd84 <CheckforMedhaCMD+0x350>)
 800bbf6:	485c      	ldr	r0, [pc, #368]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bbf8:	f019 ff30 	bl	8025a5c <iprintf>
				printf("INVALID_DES_PORT\n");
 800bbfc:	4862      	ldr	r0, [pc, #392]	; (800bd88 <CheckforMedhaCMD+0x354>)
 800bbfe:	f019 ffc9 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc02:	4b5b      	ldr	r3, [pc, #364]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc04:	2200      	movs	r2, #0
 800bc06:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc08:	4b59      	ldr	r3, [pc, #356]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	f043 0308 	orr.w	r3, r3, #8
 800bc10:	4a57      	ldr	r2, [pc, #348]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc12:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc14:	2301      	movs	r3, #1
 800bc16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc1a:	e08a      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800bc1c:	495b      	ldr	r1, [pc, #364]	; (800bd8c <CheckforMedhaCMD+0x358>)
 800bc1e:	4852      	ldr	r0, [pc, #328]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bc20:	f019 ff1c 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_PORT\n");
 800bc24:	485a      	ldr	r0, [pc, #360]	; (800bd90 <CheckforMedhaCMD+0x35c>)
 800bc26:	f019 ffb5 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc2a:	4b51      	ldr	r3, [pc, #324]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc30:	4b4f      	ldr	r3, [pc, #316]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f043 0310 	orr.w	r3, r3, #16
 800bc38:	4a4d      	ldr	r2, [pc, #308]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc3a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc42:	e076      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800bc44:	4953      	ldr	r1, [pc, #332]	; (800bd94 <CheckforMedhaCMD+0x360>)
 800bc46:	4848      	ldr	r0, [pc, #288]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bc48:	f019 ff08 	bl	8025a5c <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800bc4c:	4852      	ldr	r0, [pc, #328]	; (800bd98 <CheckforMedhaCMD+0x364>)
 800bc4e:	f019 ffa1 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc52:	4b47      	ldr	r3, [pc, #284]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc58:	4b45      	ldr	r3, [pc, #276]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f043 0320 	orr.w	r3, r3, #32
 800bc60:	4a43      	ldr	r2, [pc, #268]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc62:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc64:	2301      	movs	r3, #1
 800bc66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc6a:	e062      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800bc6c:	494b      	ldr	r1, [pc, #300]	; (800bd9c <CheckforMedhaCMD+0x368>)
 800bc6e:	484c      	ldr	r0, [pc, #304]	; (800bda0 <CheckforMedhaCMD+0x36c>)
 800bc70:	f019 fef4 	bl	8025a5c <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800bc74:	484b      	ldr	r0, [pc, #300]	; (800bda4 <CheckforMedhaCMD+0x370>)
 800bc76:	f019 ff8d 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bc7a:	4b3d      	ldr	r3, [pc, #244]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bc80:	4b3b      	ldr	r3, [pc, #236]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc88:	4a39      	ldr	r2, [pc, #228]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bc8a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bc92:	e04e      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800bc94:	4944      	ldr	r1, [pc, #272]	; (800bda8 <CheckforMedhaCMD+0x374>)
 800bc96:	4834      	ldr	r0, [pc, #208]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bc98:	f019 fee0 	bl	8025a5c <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800bc9c:	4843      	ldr	r0, [pc, #268]	; (800bdac <CheckforMedhaCMD+0x378>)
 800bc9e:	f019 ff79 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bca2:	4b33      	ldr	r3, [pc, #204]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bca4:	2200      	movs	r2, #0
 800bca6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bca8:	4b31      	ldr	r3, [pc, #196]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb0:	4a2f      	ldr	r2, [pc, #188]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcb2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bcba:	e03a      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800bcbc:	493c      	ldr	r1, [pc, #240]	; (800bdb0 <CheckforMedhaCMD+0x37c>)
 800bcbe:	482a      	ldr	r0, [pc, #168]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bcc0:	f019 fecc 	bl	8025a5c <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800bcc4:	483b      	ldr	r0, [pc, #236]	; (800bdb4 <CheckforMedhaCMD+0x380>)
 800bcc6:	f019 ff65 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bcca:	4b29      	ldr	r3, [pc, #164]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bccc:	2200      	movs	r2, #0
 800bcce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bcd0:	4b27      	ldr	r3, [pc, #156]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcd8:	4a25      	ldr	r2, [pc, #148]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcda:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bce2:	e026      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800bce4:	4934      	ldr	r1, [pc, #208]	; (800bdb8 <CheckforMedhaCMD+0x384>)
 800bce6:	4820      	ldr	r0, [pc, #128]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bce8:	f019 feb8 	bl	8025a5c <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800bcec:	4833      	ldr	r0, [pc, #204]	; (800bdbc <CheckforMedhaCMD+0x388>)
 800bcee:	f019 ff51 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bcf2:	4b1f      	ldr	r3, [pc, #124]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bcf8:	4b1d      	ldr	r3, [pc, #116]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd00:	4a1b      	ldr	r2, [pc, #108]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bd02:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bd04:	2301      	movs	r3, #1
 800bd06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bd0a:	e012      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800bd0c:	492c      	ldr	r1, [pc, #176]	; (800bdc0 <CheckforMedhaCMD+0x38c>)
 800bd0e:	4816      	ldr	r0, [pc, #88]	; (800bd68 <CheckforMedhaCMD+0x334>)
 800bd10:	f019 fea4 	bl	8025a5c <iprintf>
				printf("CLEAR ALL\n");
 800bd14:	482b      	ldr	r0, [pc, #172]	; (800bdc4 <CheckforMedhaCMD+0x390>)
 800bd16:	f019 ff3d 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bd1a:	4b15      	ldr	r3, [pc, #84]	; (800bd70 <CheckforMedhaCMD+0x33c>)
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800bd20:	2301      	movs	r3, #1
 800bd22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bd26:	e004      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800bd28:	480d      	ldr	r0, [pc, #52]	; (800bd60 <CheckforMedhaCMD+0x32c>)
 800bd2a:	f019 ff33 	bl	8025b94 <puts>
 800bd2e:	e000      	b.n	800bd32 <CheckforMedhaCMD+0x2fe>
			}
		}
 800bd30:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800bd32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d147      	bne.n	800bdca <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800bd3a:	f240 2005 	movw	r0, #517	; 0x205
 800bd3e:	f004 febb 	bl	8010ab8 <TransmitCanPkt>
 800bd42:	e042      	b.n	800bdca <CheckforMedhaCMD+0x396>
 800bd44:	2000bf34 	.word	0x2000bf34
 800bd48:	08029310 	.word	0x08029310
 800bd4c:	20000bba 	.word	0x20000bba
 800bd50:	08029328 	.word	0x08029328
 800bd54:	20003826 	.word	0x20003826
 800bd58:	08029368 	.word	0x08029368
 800bd5c:	20000bbb 	.word	0x20000bbb
 800bd60:	0802937c 	.word	0x0802937c
 800bd64:	20003858 	.word	0x20003858
 800bd68:	08029398 	.word	0x08029398
 800bd6c:	080293a8 	.word	0x080293a8
 800bd70:	20004bb0 	.word	0x20004bb0
 800bd74:	2000388a 	.word	0x2000388a
 800bd78:	080293c0 	.word	0x080293c0
 800bd7c:	200038bc 	.word	0x200038bc
 800bd80:	080293d8 	.word	0x080293d8
 800bd84:	200038ee 	.word	0x200038ee
 800bd88:	080293ec 	.word	0x080293ec
 800bd8c:	20003920 	.word	0x20003920
 800bd90:	08029400 	.word	0x08029400
 800bd94:	20003952 	.word	0x20003952
 800bd98:	08029414 	.word	0x08029414
 800bd9c:	20003984 	.word	0x20003984
 800bda0:	08029430 	.word	0x08029430
 800bda4:	08029448 	.word	0x08029448
 800bda8:	200039b6 	.word	0x200039b6
 800bdac:	0802945c 	.word	0x0802945c
 800bdb0:	200039e8 	.word	0x200039e8
 800bdb4:	08029474 	.word	0x08029474
 800bdb8:	20003a1a 	.word	0x20003a1a
 800bdbc:	08029494 	.word	0x08029494
 800bdc0:	20003a4c 	.word	0x20003a4c
 800bdc4:	080294b4 	.word	0x080294b4
		return;
 800bdc8:	bf00      	nop
		}
	}
}
 800bdca:	3768      	adds	r7, #104	; 0x68
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800bdda:	79fb      	ldrb	r3, [r7, #7]
 800bddc:	4a3d      	ldr	r2, [pc, #244]	; (800bed4 <Update_MedhaCommands+0x104>)
 800bdde:	2132      	movs	r1, #50	; 0x32
 800bde0:	fb01 f303 	mul.w	r3, r1, r3
 800bde4:	4413      	add	r3, r2
 800bde6:	2224      	movs	r2, #36	; 0x24
 800bde8:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800bdea:	79fb      	ldrb	r3, [r7, #7]
 800bdec:	4a39      	ldr	r2, [pc, #228]	; (800bed4 <Update_MedhaCommands+0x104>)
 800bdee:	2132      	movs	r1, #50	; 0x32
 800bdf0:	fb01 f303 	mul.w	r3, r1, r3
 800bdf4:	4413      	add	r3, r2
 800bdf6:	3301      	adds	r3, #1
 800bdf8:	2201      	movs	r2, #1
 800bdfa:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800bdfc:	79fb      	ldrb	r3, [r7, #7]
 800bdfe:	4a35      	ldr	r2, [pc, #212]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be00:	2132      	movs	r1, #50	; 0x32
 800be02:	fb01 f303 	mul.w	r3, r1, r3
 800be06:	4413      	add	r3, r2
 800be08:	3302      	adds	r3, #2
 800be0a:	2230      	movs	r2, #48	; 0x30
 800be0c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800be0e:	79fb      	ldrb	r3, [r7, #7]
 800be10:	4a30      	ldr	r2, [pc, #192]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be12:	2132      	movs	r1, #50	; 0x32
 800be14:	fb01 f303 	mul.w	r3, r1, r3
 800be18:	4413      	add	r3, r2
 800be1a:	3303      	adds	r3, #3
 800be1c:	2240      	movs	r2, #64	; 0x40
 800be1e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	4a2c      	ldr	r2, [pc, #176]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be24:	2132      	movs	r1, #50	; 0x32
 800be26:	fb01 f303 	mul.w	r3, r1, r3
 800be2a:	4413      	add	r3, r2
 800be2c:	3304      	adds	r3, #4
 800be2e:	22c0      	movs	r2, #192	; 0xc0
 800be30:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800be32:	79fb      	ldrb	r3, [r7, #7]
 800be34:	4a27      	ldr	r2, [pc, #156]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be36:	2132      	movs	r1, #50	; 0x32
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	4413      	add	r3, r2
 800be3e:	3305      	adds	r3, #5
 800be40:	224e      	movs	r2, #78	; 0x4e
 800be42:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800be44:	79fb      	ldrb	r3, [r7, #7]
 800be46:	4a23      	ldr	r2, [pc, #140]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be48:	2132      	movs	r1, #50	; 0x32
 800be4a:	fb01 f303 	mul.w	r3, r1, r3
 800be4e:	4413      	add	r3, r2
 800be50:	3306      	adds	r3, #6
 800be52:	2226      	movs	r2, #38	; 0x26
 800be54:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800be56:	79fb      	ldrb	r3, [r7, #7]
 800be58:	3301      	adds	r3, #1
 800be5a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800be5c:	79fb      	ldrb	r3, [r7, #7]
 800be5e:	1c5a      	adds	r2, r3, #1
 800be60:	71fa      	strb	r2, [r7, #7]
 800be62:	461a      	mov	r2, r3
 800be64:	2332      	movs	r3, #50	; 0x32
 800be66:	fb02 f303 	mul.w	r3, r2, r3
 800be6a:	4a1a      	ldr	r2, [pc, #104]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be6c:	4413      	add	r3, r2
 800be6e:	491a      	ldr	r1, [pc, #104]	; (800bed8 <Update_MedhaCommands+0x108>)
 800be70:	461a      	mov	r2, r3
 800be72:	460b      	mov	r3, r1
 800be74:	cb03      	ldmia	r3!, {r0, r1}
 800be76:	6010      	str	r0, [r2, #0]
 800be78:	6051      	str	r1, [r2, #4]
 800be7a:	8819      	ldrh	r1, [r3, #0]
 800be7c:	789b      	ldrb	r3, [r3, #2]
 800be7e:	8111      	strh	r1, [r2, #8]
 800be80:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800be82:	79fb      	ldrb	r3, [r7, #7]
 800be84:	1c5a      	adds	r2, r3, #1
 800be86:	71fa      	strb	r2, [r7, #7]
 800be88:	461a      	mov	r2, r3
 800be8a:	2332      	movs	r3, #50	; 0x32
 800be8c:	fb02 f303 	mul.w	r3, r2, r3
 800be90:	4a10      	ldr	r2, [pc, #64]	; (800bed4 <Update_MedhaCommands+0x104>)
 800be92:	4413      	add	r3, r2
 800be94:	4911      	ldr	r1, [pc, #68]	; (800bedc <Update_MedhaCommands+0x10c>)
 800be96:	461a      	mov	r2, r3
 800be98:	460b      	mov	r3, r1
 800be9a:	cb03      	ldmia	r3!, {r0, r1}
 800be9c:	6010      	str	r0, [r2, #0]
 800be9e:	6051      	str	r1, [r2, #4]
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800bea4:	79fb      	ldrb	r3, [r7, #7]
 800bea6:	1c5a      	adds	r2, r3, #1
 800bea8:	71fa      	strb	r2, [r7, #7]
 800beaa:	461a      	mov	r2, r3
 800beac:	2332      	movs	r3, #50	; 0x32
 800beae:	fb02 f303 	mul.w	r3, r2, r3
 800beb2:	4a08      	ldr	r2, [pc, #32]	; (800bed4 <Update_MedhaCommands+0x104>)
 800beb4:	4413      	add	r3, r2
 800beb6:	4a0a      	ldr	r2, [pc, #40]	; (800bee0 <Update_MedhaCommands+0x110>)
 800beb8:	6810      	ldr	r0, [r2, #0]
 800beba:	6018      	str	r0, [r3, #0]
 800bebc:	7912      	ldrb	r2, [r2, #4]
 800bebe:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800bec0:	4a08      	ldr	r2, [pc, #32]	; (800bee4 <Update_MedhaCommands+0x114>)
 800bec2:	79fb      	ldrb	r3, [r7, #7]
 800bec4:	7013      	strb	r3, [r2, #0]
}
 800bec6:	bf00      	nop
 800bec8:	370c      	adds	r7, #12
 800beca:	46bd      	mov	sp, r7
 800becc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed0:	4770      	bx	lr
 800bed2:	bf00      	nop
 800bed4:	200037f4 	.word	0x200037f4
 800bed8:	080294c0 	.word	0x080294c0
 800bedc:	080294cc 	.word	0x080294cc
 800bee0:	080294d8 	.word	0x080294d8
 800bee4:	20003bdc 	.word	0x20003bdc

0800bee8 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800bee8:	b590      	push	{r4, r7, lr}
 800beea:	b085      	sub	sp, #20
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	460b      	mov	r3, r1
 800bef2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800bef4:	2300      	movs	r3, #0
 800bef6:	73fb      	strb	r3, [r7, #15]
 800bef8:	e01c      	b.n	800bf34 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800befa:	7bfb      	ldrb	r3, [r7, #15]
 800befc:	2232      	movs	r2, #50	; 0x32
 800befe:	fb02 f303 	mul.w	r3, r2, r3
 800bf02:	4a11      	ldr	r2, [pc, #68]	; (800bf48 <Is_MedhaCommand_Valid+0x60>)
 800bf04:	189c      	adds	r4, r3, r2
 800bf06:	7bfb      	ldrb	r3, [r7, #15]
 800bf08:	2232      	movs	r2, #50	; 0x32
 800bf0a:	fb02 f303 	mul.w	r3, r2, r3
 800bf0e:	4a0e      	ldr	r2, [pc, #56]	; (800bf48 <Is_MedhaCommand_Valid+0x60>)
 800bf10:	4413      	add	r3, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7f4 f99e 	bl	8000254 <strlen>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	461a      	mov	r2, r3
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	6878      	ldr	r0, [r7, #4]
 800bf20:	f019 fc7c 	bl	802581c <memcmp>
 800bf24:	4603      	mov	r3, r0
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d101      	bne.n	800bf2e <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800bf2a:	7bfb      	ldrb	r3, [r7, #15]
 800bf2c:	e008      	b.n	800bf40 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800bf2e:	7bfb      	ldrb	r3, [r7, #15]
 800bf30:	3301      	adds	r3, #1
 800bf32:	73fb      	strb	r3, [r7, #15]
 800bf34:	4b05      	ldr	r3, [pc, #20]	; (800bf4c <Is_MedhaCommand_Valid+0x64>)
 800bf36:	781b      	ldrb	r3, [r3, #0]
 800bf38:	7bfa      	ldrb	r2, [r7, #15]
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d3dd      	bcc.n	800befa <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800bf3e:	23ff      	movs	r3, #255	; 0xff
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3714      	adds	r7, #20
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd90      	pop	{r4, r7, pc}
 800bf48:	200037f4 	.word	0x200037f4
 800bf4c:	20003bdc 	.word	0x20003bdc

0800bf50 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b087      	sub	sp, #28
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	4603      	mov	r3, r0
 800bf58:	6039      	str	r1, [r7, #0]
 800bf5a:	80fb      	strh	r3, [r7, #6]
 800bf5c:	4613      	mov	r3, r2
 800bf5e:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800bf64:	2300      	movs	r3, #0
 800bf66:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800bf6c:	88fb      	ldrh	r3, [r7, #6]
 800bf6e:	613b      	str	r3, [r7, #16]
 800bf70:	e015      	b.n	800bf9e <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	693b      	ldr	r3, [r7, #16]
 800bf7a:	440b      	add	r3, r1
 800bf7c:	781b      	ldrb	r3, [r3, #0]
 800bf7e:	4053      	eors	r3, r2
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	0a1b      	lsrs	r3, r3, #8
 800bf88:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800bf8a:	4a0a      	ldr	r2, [pc, #40]	; (800bfb4 <GetCRC32+0x64>)
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bf92:	697a      	ldr	r2, [r7, #20]
 800bf94:	4053      	eors	r3, r2
 800bf96:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	3301      	adds	r3, #1
 800bf9c:	613b      	str	r3, [r7, #16]
 800bf9e:	88bb      	ldrh	r3, [r7, #4]
 800bfa0:	693a      	ldr	r2, [r7, #16]
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d3e5      	bcc.n	800bf72 <GetCRC32+0x22>
	}

	return Crc;
 800bfa6:	697b      	ldr	r3, [r7, #20]
}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	371c      	adds	r7, #28
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr
 800bfb4:	0802caa8 	.word	0x0802caa8

0800bfb8 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	6039      	str	r1, [r7, #0]
 800bfc2:	80fb      	strh	r3, [r7, #6]
 800bfc4:	4613      	mov	r3, r2
 800bfc6:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800bfc8:	2300      	movs	r3, #0
 800bfca:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800bfd0:	88ba      	ldrh	r2, [r7, #4]
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f7ff ffba 	bl	800bf50 <GetCRC32>
 800bfdc:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800bfde:	88bb      	ldrh	r3, [r7, #4]
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	4413      	add	r3, r2
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	429a      	cmp	r2, r3
 800bfee:	d101      	bne.n	800bff4 <CheckCRC32+0x3c>
	{
		return OK;
 800bff0:	2301      	movs	r3, #1
 800bff2:	e009      	b.n	800c008 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800bff4:	68bb      	ldr	r3, [r7, #8]
 800bff6:	4619      	mov	r1, r3
 800bff8:	4805      	ldr	r0, [pc, #20]	; (800c010 <CheckCRC32+0x58>)
 800bffa:	f019 fd2f 	bl	8025a5c <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800bffe:	68f9      	ldr	r1, [r7, #12]
 800c000:	4804      	ldr	r0, [pc, #16]	; (800c014 <CheckCRC32+0x5c>)
 800c002:	f019 fd2b 	bl	8025a5c <iprintf>
		return NOT_OK;
 800c006:	2300      	movs	r3, #0
	}

}
 800c008:	4618      	mov	r0, r3
 800c00a:	3710      	adds	r7, #16
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}
 800c010:	080294e0 	.word	0x080294e0
 800c014:	080294f8 	.word	0x080294f8

0800c018 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	4603      	mov	r3, r0
 800c020:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
 800c026:	f107 0310 	add.w	r3, r7, #16
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]
 800c02e:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800c030:	79fb      	ldrb	r3, [r7, #7]
 800c032:	b29b      	uxth	r3, r3
 800c034:	f107 010c 	add.w	r1, r7, #12
 800c038:	220a      	movs	r2, #10
 800c03a:	4618      	mov	r0, r3
 800c03c:	f000 f846 	bl	800c0cc <ReadAndFormMsg>
 800c040:	4603      	mov	r3, r0
 800c042:	2b00      	cmp	r3, #0
 800c044:	dd34      	ble.n	800c0b0 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c046:	7b7b      	ldrb	r3, [r7, #13]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d115      	bne.n	800c078 <CheckForRqst+0x60>
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d112      	bne.n	800c078 <CheckForRqst+0x60>
 800c052:	7bfb      	ldrb	r3, [r7, #15]
 800c054:	2b01      	cmp	r3, #1
 800c056:	d10f      	bne.n	800c078 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800c058:	4818      	ldr	r0, [pc, #96]	; (800c0bc <CheckForRqst+0xa4>)
 800c05a:	f019 fd9b 	bl	8025b94 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800c05e:	79fb      	ldrb	r3, [r7, #7]
 800c060:	2202      	movs	r2, #2
 800c062:	2101      	movs	r1, #1
 800c064:	4618      	mov	r0, r3
 800c066:	f000 f933 	bl	800c2d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c06a:	f00c fde1 	bl	8018c30 <HAL_GetTick>
 800c06e:	4603      	mov	r3, r0
 800c070:	4a13      	ldr	r2, [pc, #76]	; (800c0c0 <CheckForRqst+0xa8>)
 800c072:	6013      	str	r3, [r2, #0]
			return 0x01;
 800c074:	2301      	movs	r3, #1
 800c076:	e01c      	b.n	800c0b2 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c078:	7b7b      	ldrb	r3, [r7, #13]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d115      	bne.n	800c0aa <CheckForRqst+0x92>
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b02      	cmp	r3, #2
 800c082:	d112      	bne.n	800c0aa <CheckForRqst+0x92>
 800c084:	7bfb      	ldrb	r3, [r7, #15]
 800c086:	2b01      	cmp	r3, #1
 800c088:	d10f      	bne.n	800c0aa <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800c08a:	480e      	ldr	r0, [pc, #56]	; (800c0c4 <CheckForRqst+0xac>)
 800c08c:	f019 fd82 	bl	8025b94 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	2202      	movs	r2, #2
 800c094:	2102      	movs	r1, #2
 800c096:	4618      	mov	r0, r3
 800c098:	f000 f91a 	bl	800c2d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c09c:	f00c fdc8 	bl	8018c30 <HAL_GetTick>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	4a07      	ldr	r2, [pc, #28]	; (800c0c0 <CheckForRqst+0xa8>)
 800c0a4:	6013      	str	r3, [r2, #0]
			return 0x02;
 800c0a6:	2302      	movs	r3, #2
 800c0a8:	e003      	b.n	800c0b2 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800c0aa:	4807      	ldr	r0, [pc, #28]	; (800c0c8 <CheckForRqst+0xb0>)
 800c0ac:	f019 fd72 	bl	8025b94 <puts>
	}
	return 0x00;
 800c0b0:	2300      	movs	r3, #0
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3718      	adds	r7, #24
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	08029510 	.word	0x08029510
 800c0c0:	20000fc0 	.word	0x20000fc0
 800c0c4:	08029528 	.word	0x08029528
 800c0c8:	08029540 	.word	0x08029540

0800c0cc <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c0cc:	b590      	push	{r4, r7, lr}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	af02      	add	r7, sp, #8
 800c0d2:	4603      	mov	r3, r0
 800c0d4:	6039      	str	r1, [r7, #0]
 800c0d6:	80fb      	strh	r3, [r7, #6]
 800c0d8:	4613      	mov	r3, r2
 800c0da:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c0e8:	e0d4      	b.n	800c294 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800c0ea:	4b71      	ldr	r3, [pc, #452]	; (800c2b0 <ReadAndFormMsg+0x1e4>)
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800c0f0:	4870      	ldr	r0, [pc, #448]	; (800c2b4 <ReadAndFormMsg+0x1e8>)
 800c0f2:	f010 f80f 	bl	801c114 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800c0f6:	88fb      	ldrh	r3, [r7, #6]
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f00c fa70 	bl	80185e0 <Com_Get_Byte>
 800c100:	4603      	mov	r3, r0
 800c102:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800c104:	f00c fb82 	bl	801880c <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800c108:	4b6b      	ldr	r3, [pc, #428]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	f000 8099 	beq.w	800c244 <ReadAndFormMsg+0x178>
 800c112:	2b03      	cmp	r3, #3
 800c114:	f300 80b0 	bgt.w	800c278 <ReadAndFormMsg+0x1ac>
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d002      	beq.n	800c122 <ReadAndFormMsg+0x56>
 800c11c:	2b02      	cmp	r3, #2
 800c11e:	d00e      	beq.n	800c13e <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c120:	e0aa      	b.n	800c278 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800c122:	7bfb      	ldrb	r3, [r7, #15]
 800c124:	2b24      	cmp	r3, #36	; 0x24
 800c126:	f040 80a9 	bne.w	800c27c <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	7bfa      	ldrb	r2, [r7, #15]
 800c12e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c130:	4b62      	ldr	r3, [pc, #392]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c132:	2201      	movs	r2, #1
 800c134:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c136:	4b60      	ldr	r3, [pc, #384]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c138:	2202      	movs	r2, #2
 800c13a:	701a      	strb	r2, [r3, #0]
			break;
 800c13c:	e09e      	b.n	800c27c <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	2b26      	cmp	r3, #38	; 0x26
 800c142:	d006      	beq.n	800c152 <ReadAndFormMsg+0x86>
 800c144:	2b26      	cmp	r3, #38	; 0x26
 800c146:	dc6e      	bgt.n	800c226 <ReadAndFormMsg+0x15a>
 800c148:	2b05      	cmp	r3, #5
 800c14a:	d068      	beq.n	800c21e <ReadAndFormMsg+0x152>
 800c14c:	2b24      	cmp	r3, #36	; 0x24
 800c14e:	d05c      	beq.n	800c20a <ReadAndFormMsg+0x13e>
 800c150:	e069      	b.n	800c226 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800c152:	4b5a      	ldr	r3, [pc, #360]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	3b02      	subs	r3, #2
 800c158:	b29b      	uxth	r3, r3
 800c15a:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800c15c:	4b57      	ldr	r3, [pc, #348]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800c162:	4b56      	ldr	r3, [pc, #344]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c164:	2200      	movs	r2, #0
 800c166:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c168:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da01      	bge.n	800c174 <ReadAndFormMsg+0xa8>
					return 0;
 800c170:	2300      	movs	r3, #0
 800c172:	e099      	b.n	800c2a8 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800c174:	4b50      	ldr	r3, [pc, #320]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c176:	2201      	movs	r2, #1
 800c178:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c17a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800c17e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	4413      	add	r3, r2
 800c186:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c188:	461c      	mov	r4, r3
 800c18a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c18e:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800c190:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c194:	3301      	adds	r3, #1
 800c196:	683a      	ldr	r2, [r7, #0]
 800c198:	4413      	add	r3, r2
 800c19a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c19c:	9300      	str	r3, [sp, #0]
 800c19e:	4603      	mov	r3, r0
 800c1a0:	4622      	mov	r2, r4
 800c1a2:	4847      	ldr	r0, [pc, #284]	; (800c2c0 <ReadAndFormMsg+0x1f4>)
 800c1a4:	f019 fc5a 	bl	8025a5c <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c1a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1ac:	4619      	mov	r1, r3
 800c1ae:	6838      	ldr	r0, [r7, #0]
 800c1b0:	f008 ff02 	bl	8014fb8 <CheckCRC>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d012      	beq.n	800c1e0 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c1ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1be:	683a      	ldr	r2, [r7, #0]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	781b      	ldrb	r3, [r3, #0]
 800c1c4:	4619      	mov	r1, r3
 800c1c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	683a      	ldr	r2, [r7, #0]
 800c1ce:	4413      	add	r3, r2
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	461a      	mov	r2, r3
 800c1d4:	483b      	ldr	r0, [pc, #236]	; (800c2c4 <ReadAndFormMsg+0x1f8>)
 800c1d6:	f019 fc41 	bl	8025a5c <iprintf>
					return us_ReturnBytes;
 800c1da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c1de:	e063      	b.n	800c2a8 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800c1e0:	4839      	ldr	r0, [pc, #228]	; (800c2c8 <ReadAndFormMsg+0x1fc>)
 800c1e2:	f019 fc3b 	bl	8025a5c <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c1e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1ea:	683a      	ldr	r2, [r7, #0]
 800c1ec:	4413      	add	r3, r2
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	683a      	ldr	r2, [r7, #0]
 800c1fa:	4413      	add	r3, r2
 800c1fc:	781b      	ldrb	r3, [r3, #0]
 800c1fe:	461a      	mov	r2, r3
 800c200:	4832      	ldr	r0, [pc, #200]	; (800c2cc <ReadAndFormMsg+0x200>)
 800c202:	f019 fc2b 	bl	8025a5c <iprintf>
					return 0;
 800c206:	2300      	movs	r3, #0
 800c208:	e04e      	b.n	800c2a8 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	7bfa      	ldrb	r2, [r7, #15]
 800c20e:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c210:	4b2a      	ldr	r3, [pc, #168]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c212:	2201      	movs	r2, #1
 800c214:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c216:	4b28      	ldr	r3, [pc, #160]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c218:	2202      	movs	r2, #2
 800c21a:	701a      	strb	r2, [r3, #0]
				break;
 800c21c:	e011      	b.n	800c242 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800c21e:	4b26      	ldr	r3, [pc, #152]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c220:	2203      	movs	r2, #3
 800c222:	701a      	strb	r2, [r3, #0]
				break;
 800c224:	e00d      	b.n	800c242 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800c226:	4b25      	ldr	r3, [pc, #148]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c228:	881b      	ldrh	r3, [r3, #0]
 800c22a:	461a      	mov	r2, r3
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	4413      	add	r3, r2
 800c230:	7bfa      	ldrb	r2, [r7, #15]
 800c232:	701a      	strb	r2, [r3, #0]
				j++;
 800c234:	4b21      	ldr	r3, [pc, #132]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	3301      	adds	r3, #1
 800c23a:	b29a      	uxth	r2, r3
 800c23c:	4b1f      	ldr	r3, [pc, #124]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c23e:	801a      	strh	r2, [r3, #0]
				break;
 800c240:	bf00      	nop
			break;
 800c242:	e01c      	b.n	800c27e <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800c244:	7bfb      	ldrb	r3, [r7, #15]
 800c246:	2b24      	cmp	r3, #36	; 0x24
 800c248:	d005      	beq.n	800c256 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800c24a:	7bfb      	ldrb	r3, [r7, #15]
 800c24c:	2b26      	cmp	r3, #38	; 0x26
 800c24e:	d002      	beq.n	800c256 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800c250:	7bfb      	ldrb	r3, [r7, #15]
 800c252:	2b05      	cmp	r3, #5
 800c254:	d10c      	bne.n	800c270 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800c256:	4b19      	ldr	r3, [pc, #100]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c258:	881b      	ldrh	r3, [r3, #0]
 800c25a:	461a      	mov	r2, r3
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	4413      	add	r3, r2
 800c260:	7bfa      	ldrb	r2, [r7, #15]
 800c262:	701a      	strb	r2, [r3, #0]
					j++;
 800c264:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c266:	881b      	ldrh	r3, [r3, #0]
 800c268:	3301      	adds	r3, #1
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	4b13      	ldr	r3, [pc, #76]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c26e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c270:	4b11      	ldr	r3, [pc, #68]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c272:	2202      	movs	r2, #2
 800c274:	701a      	strb	r2, [r3, #0]
				break;
 800c276:	e002      	b.n	800c27e <ReadAndFormMsg+0x1b2>
				break;
 800c278:	bf00      	nop
 800c27a:	e000      	b.n	800c27e <ReadAndFormMsg+0x1b2>
			break;
 800c27c:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800c27e:	4b0f      	ldr	r3, [pc, #60]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c280:	881b      	ldrh	r3, [r3, #0]
 800c282:	88ba      	ldrh	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d805      	bhi.n	800c294 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800c288:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <ReadAndFormMsg+0x1ec>)
 800c28a:	2201      	movs	r2, #1
 800c28c:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800c28e:	4b0b      	ldr	r3, [pc, #44]	; (800c2bc <ReadAndFormMsg+0x1f0>)
 800c290:	2200      	movs	r2, #0
 800c292:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c294:	88fb      	ldrh	r3, [r7, #6]
 800c296:	b2db      	uxtb	r3, r3
 800c298:	4618      	mov	r0, r3
 800c29a:	f00c f961 	bl	8018560 <Com_DataReady>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	f47f af22 	bne.w	800c0ea <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c2a6:	2300      	movs	r3, #0
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3714      	adds	r7, #20
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd90      	pop	{r4, r7, pc}
 800c2b0:	20000fbe 	.word	0x20000fbe
 800c2b4:	2000b370 	.word	0x2000b370
 800c2b8:	20000317 	.word	0x20000317
 800c2bc:	20003f0c 	.word	0x20003f0c
 800c2c0:	08029550 	.word	0x08029550
 800c2c4:	08029578 	.word	0x08029578
 800c2c8:	0802958c 	.word	0x0802958c
 800c2cc:	08029598 	.word	0x08029598

0800c2d0 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	4603      	mov	r3, r0
 800c2d8:	71fb      	strb	r3, [r7, #7]
 800c2da:	460b      	mov	r3, r1
 800c2dc:	71bb      	strb	r3, [r7, #6]
 800c2de:	4613      	mov	r3, r2
 800c2e0:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	60bb      	str	r3, [r7, #8]
 800c2ea:	f107 030c 	add.w	r3, r7, #12
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]
 800c2f2:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800c2f4:	2324      	movs	r3, #36	; 0x24
 800c2f6:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800c2f8:	79bb      	ldrb	r3, [r7, #6]
 800c2fa:	121b      	asrs	r3, r3, #8
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800c300:	79bb      	ldrb	r3, [r7, #6]
 800c302:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800c304:	797b      	ldrb	r3, [r7, #5]
 800c306:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800c308:	f107 0308 	add.w	r3, r7, #8
 800c30c:	2104      	movs	r1, #4
 800c30e:	4618      	mov	r0, r3
 800c310:	f008 fefc 	bl	801510c <ComputeCRC>
	puc_Message[6]= '&';
 800c314:	2326      	movs	r3, #38	; 0x26
 800c316:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800c318:	7b3b      	ldrb	r3, [r7, #12]
 800c31a:	4619      	mov	r1, r3
 800c31c:	7b7b      	ldrb	r3, [r7, #13]
 800c31e:	461a      	mov	r2, r3
 800c320:	480f      	ldr	r0, [pc, #60]	; (800c360 <SendAck+0x90>)
 800c322:	f019 fb9b 	bl	8025a5c <iprintf>

	AckTim=HAL_GetTick();
 800c326:	f00c fc83 	bl	8018c30 <HAL_GetTick>
 800c32a:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c32c:	e002      	b.n	800c334 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800c32e:	480d      	ldr	r0, [pc, #52]	; (800c364 <SendAck+0x94>)
 800c330:	f00f fef0 	bl	801c114 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c334:	6978      	ldr	r0, [r7, #20]
 800c336:	f003 fe43 	bl	800ffc0 <HAL_Elaps_Ticks>
 800c33a:	4603      	mov	r3, r0
 800c33c:	f240 52db 	movw	r2, #1499	; 0x5db
 800c340:	4293      	cmp	r3, r2
 800c342:	d9f4      	bls.n	800c32e <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800c344:	f107 0108 	add.w	r1, r7, #8
 800c348:	79fb      	ldrb	r3, [r7, #7]
 800c34a:	2206      	movs	r2, #6
 800c34c:	4618      	mov	r0, r3
 800c34e:	f00c f9c7 	bl	80186e0 <CommTransmitMessage>

	AckTim = 0;
 800c352:	2300      	movs	r3, #0
 800c354:	617b      	str	r3, [r7, #20]
}
 800c356:	bf00      	nop
 800c358:	3718      	adds	r7, #24
 800c35a:	46bd      	mov	sp, r7
 800c35c:	bd80      	pop	{r7, pc}
 800c35e:	bf00      	nop
 800c360:	080295a4 	.word	0x080295a4
 800c364:	2000b370 	.word	0x2000b370

0800c368 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	4603      	mov	r3, r0
 800c370:	6039      	str	r1, [r7, #0]
 800c372:	80fb      	strh	r3, [r7, #6]
 800c374:	4613      	mov	r3, r2
 800c376:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c378:	2300      	movs	r3, #0
 800c37a:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800c37c:	2300      	movs	r3, #0
 800c37e:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c380:	2300      	movs	r3, #0
 800c382:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c384:	e0ba      	b.n	800c4fc <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800c386:	88fb      	ldrh	r3, [r7, #6]
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	4618      	mov	r0, r3
 800c38c:	f00c f928 	bl	80185e0 <Com_Get_Byte>
 800c390:	4603      	mov	r3, r0
 800c392:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800c394:	f00c fa3a 	bl	801880c <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800c398:	485f      	ldr	r0, [pc, #380]	; (800c518 <ReadAndFormConfig+0x1b0>)
 800c39a:	f00f febb 	bl	801c114 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800c39e:	4b5f      	ldr	r3, [pc, #380]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	f000 8082 	beq.w	800c4ac <ReadAndFormConfig+0x144>
 800c3a8:	2b03      	cmp	r3, #3
 800c3aa:	f300 8099 	bgt.w	800c4e0 <ReadAndFormConfig+0x178>
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d002      	beq.n	800c3b8 <ReadAndFormConfig+0x50>
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d00e      	beq.n	800c3d4 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c3b6:	e093      	b.n	800c4e0 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c3b8:	7bfb      	ldrb	r3, [r7, #15]
 800c3ba:	2b24      	cmp	r3, #36	; 0x24
 800c3bc:	f040 8092 	bne.w	800c4e4 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c3c0:	683b      	ldr	r3, [r7, #0]
 800c3c2:	7bfa      	ldrb	r2, [r7, #15]
 800c3c4:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c3c6:	4b56      	ldr	r3, [pc, #344]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c3cc:	4b53      	ldr	r3, [pc, #332]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c3ce:	2202      	movs	r2, #2
 800c3d0:	701a      	strb	r2, [r3, #0]
			break;
 800c3d2:	e087      	b.n	800c4e4 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c3d4:	7bfb      	ldrb	r3, [r7, #15]
 800c3d6:	2b26      	cmp	r3, #38	; 0x26
 800c3d8:	d006      	beq.n	800c3e8 <ReadAndFormConfig+0x80>
 800c3da:	2b26      	cmp	r3, #38	; 0x26
 800c3dc:	dc57      	bgt.n	800c48e <ReadAndFormConfig+0x126>
 800c3de:	2b05      	cmp	r3, #5
 800c3e0:	d051      	beq.n	800c486 <ReadAndFormConfig+0x11e>
 800c3e2:	2b24      	cmp	r3, #36	; 0x24
 800c3e4:	d045      	beq.n	800c472 <ReadAndFormConfig+0x10a>
 800c3e6:	e052      	b.n	800c48e <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c3e8:	4b4d      	ldr	r3, [pc, #308]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c3ea:	881b      	ldrh	r3, [r3, #0]
 800c3ec:	3b02      	subs	r3, #2
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c3f2:	4b4b      	ldr	r3, [pc, #300]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c3f4:	881b      	ldrh	r3, [r3, #0]
 800c3f6:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c3f8:	4b49      	ldr	r3, [pc, #292]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c3fe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	da01      	bge.n	800c40a <ReadAndFormConfig+0xa2>
					return 0;
 800c406:	2300      	movs	r3, #0
 800c408:	e082      	b.n	800c510 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c40a:	4b44      	ldr	r3, [pc, #272]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c40c:	2201      	movs	r2, #1
 800c40e:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c410:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c414:	4619      	mov	r1, r3
 800c416:	6838      	ldr	r0, [r7, #0]
 800c418:	f008 fdce 	bl	8014fb8 <CheckCRC>
 800c41c:	4603      	mov	r3, r0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d012      	beq.n	800c448 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c422:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c426:	683a      	ldr	r2, [r7, #0]
 800c428:	4413      	add	r3, r2
 800c42a:	781b      	ldrb	r3, [r3, #0]
 800c42c:	4619      	mov	r1, r3
 800c42e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c432:	3301      	adds	r3, #1
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	4413      	add	r3, r2
 800c438:	781b      	ldrb	r3, [r3, #0]
 800c43a:	461a      	mov	r2, r3
 800c43c:	4839      	ldr	r0, [pc, #228]	; (800c524 <ReadAndFormConfig+0x1bc>)
 800c43e:	f019 fb0d 	bl	8025a5c <iprintf>
					return us_ReturnBytes;
 800c442:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c446:	e063      	b.n	800c510 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c448:	4837      	ldr	r0, [pc, #220]	; (800c528 <ReadAndFormConfig+0x1c0>)
 800c44a:	f019 fb07 	bl	8025a5c <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c44e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	4413      	add	r3, r2
 800c456:	781b      	ldrb	r3, [r3, #0]
 800c458:	4619      	mov	r1, r3
 800c45a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c45e:	3301      	adds	r3, #1
 800c460:	683a      	ldr	r2, [r7, #0]
 800c462:	4413      	add	r3, r2
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	461a      	mov	r2, r3
 800c468:	4830      	ldr	r0, [pc, #192]	; (800c52c <ReadAndFormConfig+0x1c4>)
 800c46a:	f019 faf7 	bl	8025a5c <iprintf>
					return 0;
 800c46e:	2300      	movs	r3, #0
 800c470:	e04e      	b.n	800c510 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	7bfa      	ldrb	r2, [r7, #15]
 800c476:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c478:	4b29      	ldr	r3, [pc, #164]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c47a:	2201      	movs	r2, #1
 800c47c:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c47e:	4b27      	ldr	r3, [pc, #156]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c480:	2202      	movs	r2, #2
 800c482:	701a      	strb	r2, [r3, #0]
				break;
 800c484:	e011      	b.n	800c4aa <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c486:	4b25      	ldr	r3, [pc, #148]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c488:	2203      	movs	r2, #3
 800c48a:	701a      	strb	r2, [r3, #0]
				break;
 800c48c:	e00d      	b.n	800c4aa <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c48e:	4b24      	ldr	r3, [pc, #144]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c490:	881b      	ldrh	r3, [r3, #0]
 800c492:	461a      	mov	r2, r3
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	4413      	add	r3, r2
 800c498:	7bfa      	ldrb	r2, [r7, #15]
 800c49a:	701a      	strb	r2, [r3, #0]
				i++;
 800c49c:	4b20      	ldr	r3, [pc, #128]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c49e:	881b      	ldrh	r3, [r3, #0]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	b29a      	uxth	r2, r3
 800c4a4:	4b1e      	ldr	r3, [pc, #120]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4a6:	801a      	strh	r2, [r3, #0]
				break;
 800c4a8:	bf00      	nop
			break;
 800c4aa:	e01c      	b.n	800c4e6 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c4ac:	7bfb      	ldrb	r3, [r7, #15]
 800c4ae:	2b24      	cmp	r3, #36	; 0x24
 800c4b0:	d005      	beq.n	800c4be <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	2b26      	cmp	r3, #38	; 0x26
 800c4b6:	d002      	beq.n	800c4be <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b05      	cmp	r3, #5
 800c4bc:	d10c      	bne.n	800c4d8 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c4be:	4b18      	ldr	r3, [pc, #96]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	461a      	mov	r2, r3
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	4413      	add	r3, r2
 800c4c8:	7bfa      	ldrb	r2, [r7, #15]
 800c4ca:	701a      	strb	r2, [r3, #0]
					i++;
 800c4cc:	4b14      	ldr	r3, [pc, #80]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4ce:	881b      	ldrh	r3, [r3, #0]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	b29a      	uxth	r2, r3
 800c4d4:	4b12      	ldr	r3, [pc, #72]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4d6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c4d8:	4b10      	ldr	r3, [pc, #64]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c4da:	2202      	movs	r2, #2
 800c4dc:	701a      	strb	r2, [r3, #0]
				break;
 800c4de:	e002      	b.n	800c4e6 <ReadAndFormConfig+0x17e>
				break;
 800c4e0:	bf00      	nop
 800c4e2:	e000      	b.n	800c4e6 <ReadAndFormConfig+0x17e>
			break;
 800c4e4:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c4e6:	4b0e      	ldr	r3, [pc, #56]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4e8:	881b      	ldrh	r3, [r3, #0]
 800c4ea:	88ba      	ldrh	r2, [r7, #4]
 800c4ec:	429a      	cmp	r2, r3
 800c4ee:	d805      	bhi.n	800c4fc <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <ReadAndFormConfig+0x1b4>)
 800c4f2:	2201      	movs	r2, #1
 800c4f4:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c4f6:	4b0a      	ldr	r3, [pc, #40]	; (800c520 <ReadAndFormConfig+0x1b8>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c4fc:	88fb      	ldrh	r3, [r7, #6]
 800c4fe:	b2db      	uxtb	r3, r3
 800c500:	4618      	mov	r0, r3
 800c502:	f00c f82d 	bl	8018560 <Com_DataReady>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	f47f af3c 	bne.w	800c386 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c50e:	2300      	movs	r3, #0
}
 800c510:	4618      	mov	r0, r3
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}
 800c518:	2000b370 	.word	0x2000b370
 800c51c:	20000318 	.word	0x20000318
 800c520:	20003f0e 	.word	0x20003f0e
 800c524:	080295c0 	.word	0x080295c0
 800c528:	0802958c 	.word	0x0802958c
 800c52c:	080295d4 	.word	0x080295d4

0800c530 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c530:	b480      	push	{r7}
 800c532:	b083      	sub	sp, #12
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c53a:	79fb      	ldrb	r3, [r7, #7]
 800c53c:	091b      	lsrs	r3, r3, #4
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	461a      	mov	r2, r3
 800c542:	0092      	lsls	r2, r2, #2
 800c544:	4413      	add	r3, r2
 800c546:	005b      	lsls	r3, r3, #1
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	79fb      	ldrb	r3, [r7, #7]
 800c54c:	f003 030f 	and.w	r3, r3, #15
 800c550:	b2db      	uxtb	r3, r3
 800c552:	4413      	add	r3, r2
 800c554:	b2db      	uxtb	r3, r3
}
 800c556:	4618      	mov	r0, r3
 800c558:	370c      	adds	r7, #12
 800c55a:	46bd      	mov	sp, r7
 800c55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c560:	4770      	bx	lr
	...

0800c564 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	4603      	mov	r3, r0
 800c56c:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	4a0d      	ldr	r2, [pc, #52]	; (800c5a8 <Dec_to_BCD+0x44>)
 800c572:	fba2 2303 	umull	r2, r3, r2, r3
 800c576:	08db      	lsrs	r3, r3, #3
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	011b      	lsls	r3, r3, #4
 800c57c:	b2d8      	uxtb	r0, r3
 800c57e:	79fa      	ldrb	r2, [r7, #7]
 800c580:	4b09      	ldr	r3, [pc, #36]	; (800c5a8 <Dec_to_BCD+0x44>)
 800c582:	fba3 1302 	umull	r1, r3, r3, r2
 800c586:	08d9      	lsrs	r1, r3, #3
 800c588:	460b      	mov	r3, r1
 800c58a:	009b      	lsls	r3, r3, #2
 800c58c:	440b      	add	r3, r1
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	b2db      	uxtb	r3, r3
 800c594:	4403      	add	r3, r0
 800c596:	71fb      	strb	r3, [r7, #7]
	return c;
 800c598:	79fb      	ldrb	r3, [r7, #7]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	370c      	adds	r7, #12
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a4:	4770      	bx	lr
 800c5a6:	bf00      	nop
 800c5a8:	cccccccd 	.word	0xcccccccd

0800c5ac <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	; (800c5e0 <Is_GPS_Valid+0x34>)
 800c5b2:	795b      	ldrb	r3, [r3, #5]
 800c5b4:	2b09      	cmp	r3, #9
 800c5b6:	d801      	bhi.n	800c5bc <Is_GPS_Valid+0x10>
	{
		return 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	e00c      	b.n	800c5d6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c5bc:	4b08      	ldr	r3, [pc, #32]	; (800c5e0 <Is_GPS_Valid+0x34>)
 800c5be:	791b      	ldrb	r3, [r3, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d101      	bne.n	800c5c8 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	e006      	b.n	800c5d6 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <Is_GPS_Valid+0x34>)
 800c5ca:	78db      	ldrb	r3, [r3, #3]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <Is_GPS_Valid+0x28>
	{
		return 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	e000      	b.n	800c5d6 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c5d4:	2301      	movs	r3, #1
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	20003f10 	.word	0x20003f10

0800c5e4 <Write_RTC>:


void Write_RTC(void)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	603b      	str	r3, [r7, #0]
 800c5ee:	1d3b      	adds	r3, r7, #4
 800c5f0:	2100      	movs	r1, #0
 800c5f2:	460a      	mov	r2, r1
 800c5f4:	801a      	strh	r2, [r3, #0]
 800c5f6:	460a      	mov	r2, r1
 800c5f8:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c5fa:	f7ff ffd7 	bl	800c5ac <Is_GPS_Valid>
 800c5fe:	4603      	mov	r3, r0
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c604:	4844      	ldr	r0, [pc, #272]	; (800c718 <Write_RTC+0x134>)
 800c606:	f019 fac5 	bl	8025b94 <puts>
 800c60a:	e081      	b.n	800c710 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c60c:	4b43      	ldr	r3, [pc, #268]	; (800c71c <Write_RTC+0x138>)
 800c60e:	2201      	movs	r2, #1
 800c610:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c612:	4b43      	ldr	r3, [pc, #268]	; (800c720 <Write_RTC+0x13c>)
 800c614:	789b      	ldrb	r3, [r3, #2]
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff ffa4 	bl	800c564 <Dec_to_BCD>
 800c61c:	4603      	mov	r3, r0
 800c61e:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c620:	4b3f      	ldr	r3, [pc, #252]	; (800c720 <Write_RTC+0x13c>)
 800c622:	785b      	ldrb	r3, [r3, #1]
 800c624:	4618      	mov	r0, r3
 800c626:	f7ff ff9d 	bl	800c564 <Dec_to_BCD>
 800c62a:	4603      	mov	r3, r0
 800c62c:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c62e:	4b3c      	ldr	r3, [pc, #240]	; (800c720 <Write_RTC+0x13c>)
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	4618      	mov	r0, r3
 800c634:	f7ff ff96 	bl	800c564 <Dec_to_BCD>
 800c638:	4603      	mov	r3, r0
 800c63a:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800c63c:	4b38      	ldr	r3, [pc, #224]	; (800c720 <Write_RTC+0x13c>)
 800c63e:	78db      	ldrb	r3, [r3, #3]
 800c640:	4618      	mov	r0, r3
 800c642:	f7ff ff8f 	bl	800c564 <Dec_to_BCD>
 800c646:	4603      	mov	r3, r0
 800c648:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800c64a:	4b35      	ldr	r3, [pc, #212]	; (800c720 <Write_RTC+0x13c>)
 800c64c:	791b      	ldrb	r3, [r3, #4]
 800c64e:	4618      	mov	r0, r3
 800c650:	f7ff ff88 	bl	800c564 <Dec_to_BCD>
 800c654:	4603      	mov	r3, r0
 800c656:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800c658:	4b31      	ldr	r3, [pc, #196]	; (800c720 <Write_RTC+0x13c>)
 800c65a:	795b      	ldrb	r3, [r3, #5]
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff ff81 	bl	800c564 <Dec_to_BCD>
 800c662:	4603      	mov	r3, r0
 800c664:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800c666:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c66a:	9302      	str	r3, [sp, #8]
 800c66c:	2301      	movs	r3, #1
 800c66e:	9301      	str	r3, [sp, #4]
 800c670:	463b      	mov	r3, r7
 800c672:	9300      	str	r3, [sp, #0]
 800c674:	2301      	movs	r3, #1
 800c676:	2200      	movs	r2, #0
 800c678:	21d0      	movs	r1, #208	; 0xd0
 800c67a:	482a      	ldr	r0, [pc, #168]	; (800c724 <Write_RTC+0x140>)
 800c67c:	f00e ff9c 	bl	801b5b8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800c680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c684:	9302      	str	r3, [sp, #8]
 800c686:	2301      	movs	r3, #1
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	463b      	mov	r3, r7
 800c68c:	3301      	adds	r3, #1
 800c68e:	9300      	str	r3, [sp, #0]
 800c690:	2301      	movs	r3, #1
 800c692:	2201      	movs	r2, #1
 800c694:	21d0      	movs	r1, #208	; 0xd0
 800c696:	4823      	ldr	r0, [pc, #140]	; (800c724 <Write_RTC+0x140>)
 800c698:	f00e ff8e 	bl	801b5b8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800c69c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6a0:	9302      	str	r3, [sp, #8]
 800c6a2:	2301      	movs	r3, #1
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	463b      	mov	r3, r7
 800c6a8:	3302      	adds	r3, #2
 800c6aa:	9300      	str	r3, [sp, #0]
 800c6ac:	2301      	movs	r3, #1
 800c6ae:	2202      	movs	r2, #2
 800c6b0:	21d0      	movs	r1, #208	; 0xd0
 800c6b2:	481c      	ldr	r0, [pc, #112]	; (800c724 <Write_RTC+0x140>)
 800c6b4:	f00e ff80 	bl	801b5b8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800c6b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6bc:	9302      	str	r3, [sp, #8]
 800c6be:	2301      	movs	r3, #1
 800c6c0:	9301      	str	r3, [sp, #4]
 800c6c2:	463b      	mov	r3, r7
 800c6c4:	3303      	adds	r3, #3
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	2204      	movs	r2, #4
 800c6cc:	21d0      	movs	r1, #208	; 0xd0
 800c6ce:	4815      	ldr	r0, [pc, #84]	; (800c724 <Write_RTC+0x140>)
 800c6d0:	f00e ff72 	bl	801b5b8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800c6d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6d8:	9302      	str	r3, [sp, #8]
 800c6da:	2301      	movs	r3, #1
 800c6dc:	9301      	str	r3, [sp, #4]
 800c6de:	463b      	mov	r3, r7
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	9300      	str	r3, [sp, #0]
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	2205      	movs	r2, #5
 800c6e8:	21d0      	movs	r1, #208	; 0xd0
 800c6ea:	480e      	ldr	r0, [pc, #56]	; (800c724 <Write_RTC+0x140>)
 800c6ec:	f00e ff64 	bl	801b5b8 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800c6f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c6f4:	9302      	str	r3, [sp, #8]
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	463b      	mov	r3, r7
 800c6fc:	3305      	adds	r3, #5
 800c6fe:	9300      	str	r3, [sp, #0]
 800c700:	2301      	movs	r3, #1
 800c702:	2206      	movs	r2, #6
 800c704:	21d0      	movs	r1, #208	; 0xd0
 800c706:	4807      	ldr	r0, [pc, #28]	; (800c724 <Write_RTC+0x140>)
 800c708:	f00e ff56 	bl	801b5b8 <HAL_I2C_Mem_Write>

	Get_time();
 800c70c:	f000 f80c 	bl	800c728 <Get_time>

}
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}
 800c716:	bf00      	nop
 800c718:	08029634 	.word	0x08029634
 800c71c:	200024e0 	.word	0x200024e0
 800c720:	20003f10 	.word	0x20003f10
 800c724:	2000b2c8 	.word	0x2000b2c8

0800c728 <Get_time>:


void Get_time(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b086      	sub	sp, #24
 800c72c:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800c72e:	463b      	mov	r3, r7
 800c730:	2207      	movs	r2, #7
 800c732:	2100      	movs	r1, #0
 800c734:	4618      	mov	r0, r3
 800c736:	f019 f8a9 	bl	802588c <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800c73a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800c73e:	9302      	str	r3, [sp, #8]
 800c740:	2307      	movs	r3, #7
 800c742:	9301      	str	r3, [sp, #4]
 800c744:	463b      	mov	r3, r7
 800c746:	9300      	str	r3, [sp, #0]
 800c748:	2301      	movs	r3, #1
 800c74a:	2200      	movs	r2, #0
 800c74c:	21d0      	movs	r1, #208	; 0xd0
 800c74e:	4824      	ldr	r0, [pc, #144]	; (800c7e0 <Get_time+0xb8>)
 800c750:	f00f f846 	bl	801b7e0 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800c754:	783b      	ldrb	r3, [r7, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f7ff feea 	bl	800c530 <bcdToDec>
 800c75c:	4603      	mov	r3, r0
 800c75e:	461a      	mov	r2, r3
 800c760:	4b20      	ldr	r3, [pc, #128]	; (800c7e4 <Get_time+0xbc>)
 800c762:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800c764:	787b      	ldrb	r3, [r7, #1]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fee2 	bl	800c530 <bcdToDec>
 800c76c:	4603      	mov	r3, r0
 800c76e:	461a      	mov	r2, r3
 800c770:	4b1c      	ldr	r3, [pc, #112]	; (800c7e4 <Get_time+0xbc>)
 800c772:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800c774:	78bb      	ldrb	r3, [r7, #2]
 800c776:	4618      	mov	r0, r3
 800c778:	f7ff feda 	bl	800c530 <bcdToDec>
 800c77c:	4603      	mov	r3, r0
 800c77e:	461a      	mov	r2, r3
 800c780:	4b18      	ldr	r3, [pc, #96]	; (800c7e4 <Get_time+0xbc>)
 800c782:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800c784:	793b      	ldrb	r3, [r7, #4]
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fed2 	bl	800c530 <bcdToDec>
 800c78c:	4603      	mov	r3, r0
 800c78e:	461a      	mov	r2, r3
 800c790:	4b14      	ldr	r3, [pc, #80]	; (800c7e4 <Get_time+0xbc>)
 800c792:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800c794:	797b      	ldrb	r3, [r7, #5]
 800c796:	4618      	mov	r0, r3
 800c798:	f7ff feca 	bl	800c530 <bcdToDec>
 800c79c:	4603      	mov	r3, r0
 800c79e:	461a      	mov	r2, r3
 800c7a0:	4b10      	ldr	r3, [pc, #64]	; (800c7e4 <Get_time+0xbc>)
 800c7a2:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800c7a4:	79bb      	ldrb	r3, [r7, #6]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7ff fec2 	bl	800c530 <bcdToDec>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	4b0c      	ldr	r3, [pc, #48]	; (800c7e4 <Get_time+0xbc>)
 800c7b2:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800c7b4:	783a      	ldrb	r2, [r7, #0]
 800c7b6:	4b0c      	ldr	r3, [pc, #48]	; (800c7e8 <Get_time+0xc0>)
 800c7b8:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800c7ba:	787a      	ldrb	r2, [r7, #1]
 800c7bc:	4b0a      	ldr	r3, [pc, #40]	; (800c7e8 <Get_time+0xc0>)
 800c7be:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800c7c0:	78ba      	ldrb	r2, [r7, #2]
 800c7c2:	4b09      	ldr	r3, [pc, #36]	; (800c7e8 <Get_time+0xc0>)
 800c7c4:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800c7c6:	793a      	ldrb	r2, [r7, #4]
 800c7c8:	4b07      	ldr	r3, [pc, #28]	; (800c7e8 <Get_time+0xc0>)
 800c7ca:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800c7cc:	797a      	ldrb	r2, [r7, #5]
 800c7ce:	4b06      	ldr	r3, [pc, #24]	; (800c7e8 <Get_time+0xc0>)
 800c7d0:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800c7d2:	79ba      	ldrb	r2, [r7, #6]
 800c7d4:	4b04      	ldr	r3, [pc, #16]	; (800c7e8 <Get_time+0xc0>)
 800c7d6:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800c7d8:	bf00      	nop
}
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}
 800c7e0:	2000b2c8 	.word	0x2000b2c8
 800c7e4:	20003f20 	.word	0x20003f20
 800c7e8:	20003f28 	.word	0x20003f28

0800c7ec <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800c7f0:	4b09      	ldr	r3, [pc, #36]	; (800c818 <Update_Time_Every_Sec+0x2c>)
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	f003 fbe3 	bl	800ffc0 <HAL_Elaps_Ticks>
 800c7fa:	4603      	mov	r3, r0
 800c7fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c800:	d307      	bcc.n	800c812 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800c802:	f7ff ff91 	bl	800c728 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800c806:	f00c fa13 	bl	8018c30 <HAL_GetTick>
 800c80a:	4603      	mov	r3, r0
 800c80c:	4a02      	ldr	r2, [pc, #8]	; (800c818 <Update_Time_Every_Sec+0x2c>)
 800c80e:	6013      	str	r3, [r2, #0]
	}
	return;
 800c810:	bf00      	nop
 800c812:	bf00      	nop
}
 800c814:	bd80      	pop	{r7, pc}
 800c816:	bf00      	nop
 800c818:	20003f30 	.word	0x20003f30

0800c81c <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800c820:	f013 fc00 	bl	8020024 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800c824:	4814      	ldr	r0, [pc, #80]	; (800c878 <Process_SiemensEI+0x5c>)
 800c826:	f00f fc75 	bl	801c114 <HAL_IWDG_Refresh>

		Feed_wdt();
 800c82a:	f008 ff67 	bl	80156fc <Feed_wdt>

		readCanToStructs();
 800c82e:	f004 facd 	bl	8010dcc <readCanToStructs>

		Chech_forSiemensCMD();
 800c832:	f001 fdef 	bl	800e414 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800c836:	f001 fb7f 	bl	800df38 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800c83a:	f001 fc33 	bl	800e0a4 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800c83e:	f000 f821 	bl	800c884 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800c842:	f001 fc51 	bl	800e0e8 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800c846:	f001 fc93 	bl	800e170 <SendRelays2Other>

		CheckRelayMisMatch();
 800c84a:	f001 fca9 	bl	800e1a0 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800c84e:	f001 fce1 	bl	800e214 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800c852:	f00b f973 	bl	8017b3c <Print_BuildDat_Details>

		GetTimeStamp();
 800c856:	f002 fd67 	bl	800f328 <GetTimeStamp>

		CheckEIPC_DAT_CRC();
 800c85a:	f7f4 fb77 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800c85e:	4b07      	ldr	r3, [pc, #28]	; (800c87c <Process_SiemensEI+0x60>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d0dc      	beq.n	800c820 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800c866:	4b06      	ldr	r3, [pc, #24]	; (800c880 <Process_SiemensEI+0x64>)
 800c868:	2203      	movs	r2, #3
 800c86a:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800c86c:	f00b f864 	bl	8017938 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800c870:	4801      	ldr	r0, [pc, #4]	; (800c878 <Process_SiemensEI+0x5c>)
 800c872:	f00f fc4f 	bl	801c114 <HAL_IWDG_Refresh>
		Data_Processing();
 800c876:	e7f9      	b.n	800c86c <Process_SiemensEI+0x50>
 800c878:	2000b370 	.word	0x2000b370
 800c87c:	20000bba 	.word	0x20000bba
 800c880:	20000fbd 	.word	0x20000fbd

0800c884 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800c884:	b580      	push	{r7, lr}
 800c886:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800c88a:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800c892:	2300      	movs	r3, #0
 800c894:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800c898:	2300      	movs	r3, #0
 800c89a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800c8bc:	2300      	movs	r3, #0
 800c8be:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800c8da:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c8de:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	601a      	str	r2, [r3, #0]
 800c8e6:	3304      	adds	r3, #4
 800c8e8:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800c8ec:	2100      	movs	r1, #0
 800c8ee:	4618      	mov	r0, r3
 800c8f0:	f018 ffcc 	bl	802588c <memset>
	uint16_t Size = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800c900:	4b7c      	ldr	r3, [pc, #496]	; (800caf4 <Siemens_Data_Analyser+0x270>)
 800c902:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c906:	2b0a      	cmp	r3, #10
 800c908:	f240 86d4 	bls.w	800d6b4 <Siemens_Data_Analyser+0xe30>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800c90c:	4b79      	ldr	r3, [pc, #484]	; (800caf4 <Siemens_Data_Analyser+0x270>)
 800c90e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c912:	461a      	mov	r2, r3
 800c914:	f107 030c 	add.w	r3, r7, #12
 800c918:	4976      	ldr	r1, [pc, #472]	; (800caf4 <Siemens_Data_Analyser+0x270>)
 800c91a:	4618      	mov	r0, r3
 800c91c:	f018 ff8e 	bl	802583c <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800c920:	4b74      	ldr	r3, [pc, #464]	; (800caf4 <Siemens_Data_Analyser+0x270>)
 800c922:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800c926:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800c92a:	f240 6204 	movw	r2, #1540	; 0x604
 800c92e:	2100      	movs	r1, #0
 800c930:	4870      	ldr	r0, [pc, #448]	; (800caf4 <Siemens_Data_Analyser+0x270>)
 800c932:	f018 ffab 	bl	802588c <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c936:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c93a:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f018 ffa3 	bl	802588c <memset>


	BITSTUFFINIT(0,0);
 800c946:	2300      	movs	r3, #0
 800c948:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c94c:	2300      	movs	r3, #0
 800c94e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800c952:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c956:	085b      	lsrs	r3, r3, #1
 800c958:	b29b      	uxth	r3, r3
 800c95a:	3b02      	subs	r3, #2
 800c95c:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800c960:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c964:	085b      	lsrs	r3, r3, #1
 800c966:	b29b      	uxth	r3, r3
 800c968:	3b02      	subs	r3, #2
 800c96a:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800c96e:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c972:	3b02      	subs	r3, #2
 800c974:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800c978:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800c97c:	085b      	lsrs	r3, r3, #1
 800c97e:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800c982:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800c986:	f107 030c 	add.w	r3, r7, #12
 800c98a:	2200      	movs	r2, #0
 800c98c:	4618      	mov	r0, r3
 800c98e:	f002 fbb1 	bl	800f0f4 <Data_Compliment>
 800c992:	4603      	mov	r3, r0
 800c994:	2b01      	cmp	r3, #1
 800c996:	d004      	beq.n	800c9a2 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800c998:	4857      	ldr	r0, [pc, #348]	; (800caf8 <Siemens_Data_Analyser+0x274>)
 800c99a:	f019 f8fb 	bl	8025b94 <puts>
		return ;
 800c99e:	f000 be8c 	b.w	800d6ba <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800c9a2:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800c9a6:	f107 020c 	add.w	r2, r7, #12
 800c9aa:	4413      	add	r3, r2
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	2110      	movs	r1, #16
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	f7f3 fe2f 	bl	8000614 <ExtractBits>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800c9bc:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c9c0:	f107 030c 	add.w	r3, r7, #12
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f002 f898 	bl	800eafc <Siemens_CRC>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c9d2:	4b4a      	ldr	r3, [pc, #296]	; (800cafc <Siemens_Data_Analyser+0x278>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	095b      	lsrs	r3, r3, #5
 800c9d8:	f003 0301 	and.w	r3, r3, #1
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d01c      	beq.n	800ca1a <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c9e0:	4847      	ldr	r0, [pc, #284]	; (800cb00 <Siemens_Data_Analyser+0x27c>)
 800c9e2:	f019 f8d7 	bl	8025b94 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c9e6:	4847      	ldr	r0, [pc, #284]	; (800cb04 <Siemens_Data_Analyser+0x280>)
 800c9e8:	f010 fce0 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	4b46      	ldr	r3, [pc, #280]	; (800cb08 <Siemens_Data_Analyser+0x284>)
 800c9f0:	fba3 2301 	umull	r2, r3, r3, r1
 800c9f4:	0bda      	lsrs	r2, r3, #15
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	041b      	lsls	r3, r3, #16
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	1aca      	subs	r2, r1, r3
 800c9fe:	4613      	mov	r3, r2
 800ca00:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800ca04:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800ca08:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	d104      	bne.n	800ca1a <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800ca10:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800ca14:	3304      	adds	r3, #4
 800ca16:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800ca1a:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800ca1e:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800ca22:	429a      	cmp	r2, r3
 800ca24:	d010      	beq.n	800ca48 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800ca26:	4839      	ldr	r0, [pc, #228]	; (800cb0c <Siemens_Data_Analyser+0x288>)
 800ca28:	f019 f8b4 	bl	8025b94 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800ca2c:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800ca30:	4619      	mov	r1, r3
 800ca32:	4837      	ldr	r0, [pc, #220]	; (800cb10 <Siemens_Data_Analyser+0x28c>)
 800ca34:	f019 f812 	bl	8025a5c <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800ca38:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	4835      	ldr	r0, [pc, #212]	; (800cb14 <Siemens_Data_Analyser+0x290>)
 800ca40:	f019 f80c 	bl	8025a5c <iprintf>
		return;
 800ca44:	f000 be39 	b.w	800d6ba <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800ca48:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800ca4c:	f107 020c 	add.w	r2, r7, #12
 800ca50:	4413      	add	r3, r2
 800ca52:	461a      	mov	r2, r3
 800ca54:	2110      	movs	r1, #16
 800ca56:	2000      	movs	r0, #0
 800ca58:	f7f3 fddc 	bl	8000614 <ExtractBits>
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800ca62:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800ca66:	f107 020c 	add.w	r2, r7, #12
 800ca6a:	4413      	add	r3, r2
 800ca6c:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800ca70:	4611      	mov	r1, r2
 800ca72:	4618      	mov	r0, r3
 800ca74:	f002 f842 	bl	800eafc <Siemens_CRC>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ca7e:	4b1f      	ldr	r3, [pc, #124]	; (800cafc <Siemens_Data_Analyser+0x278>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	0a1b      	lsrs	r3, r3, #8
 800ca84:	f003 0301 	and.w	r3, r3, #1
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d01c      	beq.n	800cac6 <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ca8c:	4822      	ldr	r0, [pc, #136]	; (800cb18 <Siemens_Data_Analyser+0x294>)
 800ca8e:	f019 f881 	bl	8025b94 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800ca92:	481c      	ldr	r0, [pc, #112]	; (800cb04 <Siemens_Data_Analyser+0x280>)
 800ca94:	f010 fc8a 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800ca98:	4601      	mov	r1, r0
 800ca9a:	4b1b      	ldr	r3, [pc, #108]	; (800cb08 <Siemens_Data_Analyser+0x284>)
 800ca9c:	fba3 2301 	umull	r2, r3, r3, r1
 800caa0:	0bda      	lsrs	r2, r3, #15
 800caa2:	4613      	mov	r3, r2
 800caa4:	041b      	lsls	r3, r3, #16
 800caa6:	1a9b      	subs	r3, r3, r2
 800caa8:	1aca      	subs	r2, r1, r3
 800caaa:	4613      	mov	r3, r2
 800caac:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800cab0:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800cab4:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800cab8:	429a      	cmp	r2, r3
 800caba:	d104      	bne.n	800cac6 <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800cabc:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800cac0:	3304      	adds	r3, #4
 800cac2:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800cac6:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800caca:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800cace:	429a      	cmp	r2, r3
 800cad0:	d02a      	beq.n	800cb28 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800cad2:	4812      	ldr	r0, [pc, #72]	; (800cb1c <Siemens_Data_Analyser+0x298>)
 800cad4:	f019 f85e 	bl	8025b94 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800cad8:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800cadc:	4619      	mov	r1, r3
 800cade:	4810      	ldr	r0, [pc, #64]	; (800cb20 <Siemens_Data_Analyser+0x29c>)
 800cae0:	f018 ffbc 	bl	8025a5c <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800cae4:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800cae8:	4619      	mov	r1, r3
 800caea:	480e      	ldr	r0, [pc, #56]	; (800cb24 <Siemens_Data_Analyser+0x2a0>)
 800caec:	f018 ffb6 	bl	8025a5c <iprintf>
		return;
 800caf0:	f000 bde3 	b.w	800d6ba <Siemens_Data_Analyser+0xe36>
 800caf4:	200062ec 	.word	0x200062ec
 800caf8:	08029654 	.word	0x08029654
 800cafc:	20004bb0 	.word	0x20004bb0
 800cb00:	08029674 	.word	0x08029674
 800cb04:	2000bbac 	.word	0x2000bbac
 800cb08:	80008001 	.word	0x80008001
 800cb0c:	0802969c 	.word	0x0802969c
 800cb10:	080296ac 	.word	0x080296ac
 800cb14:	080296c0 	.word	0x080296c0
 800cb18:	080296d4 	.word	0x080296d4
 800cb1c:	08029700 	.word	0x08029700
 800cb20:	08029710 	.word	0x08029710
 800cb24:	0802972c 	.word	0x0802972c
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cb28:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cb2c:	b2d8      	uxtb	r0, r3
 800cb2e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cb32:	f107 020c 	add.w	r2, r7, #12
 800cb36:	441a      	add	r2, r3
 800cb38:	2301      	movs	r3, #1
 800cb3a:	2108      	movs	r1, #8
 800cb3c:	f002 f832 	bl	800eba4 <Extract_Parity_Data>
 800cb40:	4603      	mov	r3, r0
 800cb42:	b2da      	uxtb	r2, r3
 800cb44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb4c:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cb4e:	4b56      	ldr	r3, [pc, #344]	; (800cca8 <Siemens_Data_Analyser+0x424>)
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d02a      	beq.n	800cbb0 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800cb5a:	4854      	ldr	r0, [pc, #336]	; (800ccac <Siemens_Data_Analyser+0x428>)
 800cb5c:	f019 f81a 	bl	8025b94 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cb60:	4853      	ldr	r0, [pc, #332]	; (800ccb0 <Siemens_Data_Analyser+0x42c>)
 800cb62:	f010 fc23 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800cb66:	4601      	mov	r1, r0
 800cb68:	4b52      	ldr	r3, [pc, #328]	; (800ccb4 <Siemens_Data_Analyser+0x430>)
 800cb6a:	fba3 2301 	umull	r2, r3, r3, r1
 800cb6e:	09da      	lsrs	r2, r3, #7
 800cb70:	4613      	mov	r3, r2
 800cb72:	021b      	lsls	r3, r3, #8
 800cb74:	1a9b      	subs	r3, r3, r2
 800cb76:	1aca      	subs	r2, r1, r3
 800cb78:	b2d2      	uxtb	r2, r2
 800cb7a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb7e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb82:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800cb84:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb88:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cb8c:	781a      	ldrb	r2, [r3, #0]
 800cb8e:	4b4a      	ldr	r3, [pc, #296]	; (800ccb8 <Siemens_Data_Analyser+0x434>)
 800cb90:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d10b      	bne.n	800cbb0 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800cb98:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cb9c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cba0:	781b      	ldrb	r3, [r3, #0]
 800cba2:	3304      	adds	r3, #4
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cbaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cbae:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800cbb0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cbb4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cbb8:	781a      	ldrb	r2, [r3, #0]
 800cbba:	4b3f      	ldr	r3, [pc, #252]	; (800ccb8 <Siemens_Data_Analyser+0x434>)
 800cbbc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d015      	beq.n	800cbf0 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800cbc4:	483d      	ldr	r0, [pc, #244]	; (800ccbc <Siemens_Data_Analyser+0x438>)
 800cbc6:	f018 ffe5 	bl	8025b94 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800cbca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cbce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	483a      	ldr	r0, [pc, #232]	; (800ccc0 <Siemens_Data_Analyser+0x43c>)
 800cbd8:	f018 ff40 	bl	8025a5c <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800cbdc:	4b36      	ldr	r3, [pc, #216]	; (800ccb8 <Siemens_Data_Analyser+0x434>)
 800cbde:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cbe2:	4619      	mov	r1, r3
 800cbe4:	4837      	ldr	r0, [pc, #220]	; (800ccc4 <Siemens_Data_Analyser+0x440>)
 800cbe6:	f018 ff39 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800cbea:	2301      	movs	r3, #1
 800cbec:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800cbf0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da00      	bge.n	800cbfc <Siemens_Data_Analyser+0x378>
 800cbfa:	3307      	adds	r3, #7
 800cbfc:	10db      	asrs	r3, r3, #3
 800cbfe:	b29a      	uxth	r2, r3
 800cc00:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc04:	4413      	add	r3, r2
 800cc06:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cc0a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cc0e:	3308      	adds	r3, #8
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	b21b      	sxth	r3, r3
 800cc14:	425a      	negs	r2, r3
 800cc16:	f003 0307 	and.w	r3, r3, #7
 800cc1a:	f002 0207 	and.w	r2, r2, #7
 800cc1e:	bf58      	it	pl
 800cc20:	4253      	negpl	r3, r2
 800cc22:	b21b      	sxth	r3, r3
 800cc24:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800cc28:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cc2c:	b2d8      	uxtb	r0, r3
 800cc2e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc32:	f107 020c 	add.w	r2, r7, #12
 800cc36:	441a      	add	r2, r3
 800cc38:	2300      	movs	r3, #0
 800cc3a:	2118      	movs	r1, #24
 800cc3c:	f001 ffb2 	bl	800eba4 <Extract_Parity_Data>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc4c:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800cc4e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc52:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc5c:	d036      	beq.n	800cccc <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800cc5e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc62:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800cc66:	4a18      	ldr	r2, [pc, #96]	; (800ccc8 <Siemens_Data_Analyser+0x444>)
 800cc68:	8812      	ldrh	r2, [r2, #0]
 800cc6a:	801a      	strh	r2, [r3, #0]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800cc70:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cc74:	f107 020c 	add.w	r2, r7, #12
 800cc78:	4413      	add	r3, r2
 800cc7a:	f107 0208 	add.w	r2, r7, #8
 800cc7e:	2103      	movs	r1, #3
 800cc80:	4618      	mov	r0, r3
 800cc82:	f000 fd45 	bl	800d710 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800cc86:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cc8a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cc8e:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800cc92:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800cc96:	3308      	adds	r3, #8
 800cc98:	6812      	ldr	r2, [r2, #0]
 800cc9a:	4611      	mov	r1, r2
 800cc9c:	8019      	strh	r1, [r3, #0]
 800cc9e:	3302      	adds	r3, #2
 800cca0:	0c12      	lsrs	r2, r2, #16
 800cca2:	701a      	strb	r2, [r3, #0]
 800cca4:	e015      	b.n	800ccd2 <Siemens_Data_Analyser+0x44e>
 800cca6:	bf00      	nop
 800cca8:	20004bb0 	.word	0x20004bb0
 800ccac:	08029748 	.word	0x08029748
 800ccb0:	2000bbac 	.word	0x2000bbac
 800ccb4:	80808081 	.word	0x80808081
 800ccb8:	20000504 	.word	0x20000504
 800ccbc:	08029768 	.word	0x08029768
 800ccc0:	0802978c 	.word	0x0802978c
 800ccc4:	0802979c 	.word	0x0802979c
 800ccc8:	08029920 	.word	0x08029920
	}
	else
	{
		RejectPacketFlag = 1;
 800cccc:	2301      	movs	r3, #1
 800ccce:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800ccd2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ccd6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ccda:	689a      	ldr	r2, [r3, #8]
 800ccdc:	4bbf      	ldr	r3, [pc, #764]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800ccde:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d015      	beq.n	800cd12 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800cce6:	48be      	ldr	r0, [pc, #760]	; (800cfe0 <Siemens_Data_Analyser+0x75c>)
 800cce8:	f018 ff54 	bl	8025b94 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800ccec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ccf0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	48ba      	ldr	r0, [pc, #744]	; (800cfe4 <Siemens_Data_Analyser+0x760>)
 800ccfa:	f018 feaf 	bl	8025a5c <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800ccfe:	4bb7      	ldr	r3, [pc, #732]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cd00:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800cd04:	4619      	mov	r1, r3
 800cd06:	48b8      	ldr	r0, [pc, #736]	; (800cfe8 <Siemens_Data_Analyser+0x764>)
 800cd08:	f018 fea8 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800cd12:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cd16:	3318      	adds	r3, #24
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	da00      	bge.n	800cd1e <Siemens_Data_Analyser+0x49a>
 800cd1c:	3307      	adds	r3, #7
 800cd1e:	10db      	asrs	r3, r3, #3
 800cd20:	b29a      	uxth	r2, r3
 800cd22:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cd26:	4413      	add	r3, r2
 800cd28:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cd2c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cd30:	3318      	adds	r3, #24
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	b21b      	sxth	r3, r3
 800cd36:	425a      	negs	r2, r3
 800cd38:	f003 0307 	and.w	r3, r3, #7
 800cd3c:	f002 0207 	and.w	r2, r2, #7
 800cd40:	bf58      	it	pl
 800cd42:	4253      	negpl	r3, r2
 800cd44:	b21b      	sxth	r3, r3
 800cd46:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800cd4a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cd4e:	b2d8      	uxtb	r0, r3
 800cd50:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cd54:	f107 020c 	add.w	r2, r7, #12
 800cd58:	441a      	add	r2, r3
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	2108      	movs	r1, #8
 800cd5e:	f001 ff21 	bl	800eba4 <Extract_Parity_Data>
 800cd62:	4603      	mov	r3, r0
 800cd64:	b2da      	uxtb	r2, r3
 800cd66:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cd6a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cd6e:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd70:	4b9e      	ldr	r3, [pc, #632]	; (800cfec <Siemens_Data_Analyser+0x768>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	085b      	lsrs	r3, r3, #1
 800cd76:	f003 0301 	and.w	r3, r3, #1
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d02a      	beq.n	800cdd4 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800cd7e:	489c      	ldr	r0, [pc, #624]	; (800cff0 <Siemens_Data_Analyser+0x76c>)
 800cd80:	f018 ff08 	bl	8025b94 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cd84:	489b      	ldr	r0, [pc, #620]	; (800cff4 <Siemens_Data_Analyser+0x770>)
 800cd86:	f010 fb11 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800cd8a:	4601      	mov	r1, r0
 800cd8c:	4b9a      	ldr	r3, [pc, #616]	; (800cff8 <Siemens_Data_Analyser+0x774>)
 800cd8e:	fba3 2301 	umull	r2, r3, r3, r1
 800cd92:	09da      	lsrs	r2, r3, #7
 800cd94:	4613      	mov	r3, r2
 800cd96:	021b      	lsls	r3, r3, #8
 800cd98:	1a9b      	subs	r3, r3, r2
 800cd9a:	1aca      	subs	r2, r1, r3
 800cd9c:	b2d2      	uxtb	r2, r2
 800cd9e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cda2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cda6:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800cda8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cdb0:	7b1a      	ldrb	r2, [r3, #12]
 800cdb2:	4b8a      	ldr	r3, [pc, #552]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cdb4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d10b      	bne.n	800cdd4 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800cdbc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdc0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cdc4:	7b1b      	ldrb	r3, [r3, #12]
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdce:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cdd2:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800cdd4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdd8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cddc:	7b1a      	ldrb	r2, [r3, #12]
 800cdde:	4b7f      	ldr	r3, [pc, #508]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cde0:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d015      	beq.n	800ce14 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800cde8:	4884      	ldr	r0, [pc, #528]	; (800cffc <Siemens_Data_Analyser+0x778>)
 800cdea:	f018 fed3 	bl	8025b94 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800cdee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cdf2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cdf6:	7b1b      	ldrb	r3, [r3, #12]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4881      	ldr	r0, [pc, #516]	; (800d000 <Siemens_Data_Analyser+0x77c>)
 800cdfc:	f018 fe2e 	bl	8025a5c <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800ce00:	4b76      	ldr	r3, [pc, #472]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800ce02:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ce06:	4619      	mov	r1, r3
 800ce08:	487e      	ldr	r0, [pc, #504]	; (800d004 <Siemens_Data_Analyser+0x780>)
 800ce0a:	f018 fe27 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800ce0e:	2301      	movs	r3, #1
 800ce10:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800ce14:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800ce18:	3308      	adds	r3, #8
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	da00      	bge.n	800ce20 <Siemens_Data_Analyser+0x59c>
 800ce1e:	3307      	adds	r3, #7
 800ce20:	10db      	asrs	r3, r3, #3
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ce28:	4413      	add	r3, r2
 800ce2a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ce2e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ce32:	3308      	adds	r3, #8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	b21b      	sxth	r3, r3
 800ce38:	425a      	negs	r2, r3
 800ce3a:	f003 0307 	and.w	r3, r3, #7
 800ce3e:	f002 0207 	and.w	r2, r2, #7
 800ce42:	bf58      	it	pl
 800ce44:	4253      	negpl	r3, r2
 800ce46:	b21b      	sxth	r3, r3
 800ce48:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800ce4c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ce50:	b2d8      	uxtb	r0, r3
 800ce52:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ce56:	f107 020c 	add.w	r2, r7, #12
 800ce5a:	441a      	add	r2, r3
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	2118      	movs	r1, #24
 800ce60:	f001 fea0 	bl	800eba4 <Extract_Parity_Data>
 800ce64:	4603      	mov	r3, r0
 800ce66:	461a      	mov	r2, r3
 800ce68:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce6c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce70:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800ce72:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce76:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce80:	d021      	beq.n	800cec6 <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800ce82:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ce86:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800ce8a:	4a5f      	ldr	r2, [pc, #380]	; (800d008 <Siemens_Data_Analyser+0x784>)
 800ce8c:	8812      	ldrh	r2, [r2, #0]
 800ce8e:	801a      	strh	r2, [r3, #0]
 800ce90:	2200      	movs	r2, #0
 800ce92:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800ce94:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ce98:	f107 020c 	add.w	r2, r7, #12
 800ce9c:	4413      	add	r3, r2
 800ce9e:	1d3a      	adds	r2, r7, #4
 800cea0:	2103      	movs	r1, #3
 800cea2:	4618      	mov	r0, r3
 800cea4:	f000 fc34 	bl	800d710 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800cea8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ceac:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ceb0:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800ceb4:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800ceb8:	3314      	adds	r3, #20
 800ceba:	6812      	ldr	r2, [r2, #0]
 800cebc:	4611      	mov	r1, r2
 800cebe:	8019      	strh	r1, [r3, #0]
 800cec0:	3302      	adds	r3, #2
 800cec2:	0c12      	lsrs	r2, r2, #16
 800cec4:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cec6:	4b49      	ldr	r3, [pc, #292]	; (800cfec <Siemens_Data_Analyser+0x768>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	089b      	lsrs	r3, r3, #2
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d02c      	beq.n	800cf2e <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800ced4:	484d      	ldr	r0, [pc, #308]	; (800d00c <Siemens_Data_Analyser+0x788>)
 800ced6:	f018 fe5d 	bl	8025b94 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800ceda:	4846      	ldr	r0, [pc, #280]	; (800cff4 <Siemens_Data_Analyser+0x770>)
 800cedc:	f010 fa66 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800cee0:	4601      	mov	r1, r0
 800cee2:	f240 1301 	movw	r3, #257	; 0x101
 800cee6:	fba3 2301 	umull	r2, r3, r3, r1
 800ceea:	1aca      	subs	r2, r1, r3
 800ceec:	0852      	lsrs	r2, r2, #1
 800ceee:	4413      	add	r3, r2
 800cef0:	0dda      	lsrs	r2, r3, #23
 800cef2:	4613      	mov	r3, r2
 800cef4:	061b      	lsls	r3, r3, #24
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	1aca      	subs	r2, r1, r3
 800cefa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cefe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf02:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800cf04:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf08:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf0c:	695a      	ldr	r2, [r3, #20]
 800cf0e:	4b33      	ldr	r3, [pc, #204]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cf10:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf14:	429a      	cmp	r2, r3
 800cf16:	d10a      	bne.n	800cf2e <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800cf18:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf1c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf20:	695b      	ldr	r3, [r3, #20]
 800cf22:	1d1a      	adds	r2, r3, #4
 800cf24:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf28:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf2c:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800cf2e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf32:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf36:	695a      	ldr	r2, [r3, #20]
 800cf38:	4b28      	ldr	r3, [pc, #160]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cf3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d015      	beq.n	800cf6e <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800cf42:	4833      	ldr	r0, [pc, #204]	; (800d010 <Siemens_Data_Analyser+0x78c>)
 800cf44:	f018 fe26 	bl	8025b94 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800cf48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf50:	695b      	ldr	r3, [r3, #20]
 800cf52:	4619      	mov	r1, r3
 800cf54:	4823      	ldr	r0, [pc, #140]	; (800cfe4 <Siemens_Data_Analyser+0x760>)
 800cf56:	f018 fd81 	bl	8025a5c <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800cf5a:	4b20      	ldr	r3, [pc, #128]	; (800cfdc <Siemens_Data_Analyser+0x758>)
 800cf5c:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800cf60:	4619      	mov	r1, r3
 800cf62:	4821      	ldr	r0, [pc, #132]	; (800cfe8 <Siemens_Data_Analyser+0x764>)
 800cf64:	f018 fd7a 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800cf6e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cf72:	3318      	adds	r3, #24
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	da00      	bge.n	800cf7a <Siemens_Data_Analyser+0x6f6>
 800cf78:	3307      	adds	r3, #7
 800cf7a:	10db      	asrs	r3, r3, #3
 800cf7c:	b29a      	uxth	r2, r3
 800cf7e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cf82:	4413      	add	r3, r2
 800cf84:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cf88:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cf8c:	3318      	adds	r3, #24
 800cf8e:	b29b      	uxth	r3, r3
 800cf90:	b21b      	sxth	r3, r3
 800cf92:	425a      	negs	r2, r3
 800cf94:	f003 0307 	and.w	r3, r3, #7
 800cf98:	f002 0207 	and.w	r2, r2, #7
 800cf9c:	bf58      	it	pl
 800cf9e:	4253      	negpl	r3, r2
 800cfa0:	b21b      	sxth	r3, r3
 800cfa2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800cfa6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cfaa:	b2d8      	uxtb	r0, r3
 800cfac:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cfb0:	f107 020c 	add.w	r2, r7, #12
 800cfb4:	441a      	add	r2, r3
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	2108      	movs	r1, #8
 800cfba:	f001 fdf3 	bl	800eba4 <Extract_Parity_Data>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	b2da      	uxtb	r2, r3
 800cfc2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cfc6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cfca:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800cfcc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cfd0:	3308      	adds	r3, #8
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	da1e      	bge.n	800d014 <Siemens_Data_Analyser+0x790>
 800cfd6:	3307      	adds	r3, #7
 800cfd8:	e01c      	b.n	800d014 <Siemens_Data_Analyser+0x790>
 800cfda:	bf00      	nop
 800cfdc:	20000504 	.word	0x20000504
 800cfe0:	080297ac 	.word	0x080297ac
 800cfe4:	080297cc 	.word	0x080297cc
 800cfe8:	080297dc 	.word	0x080297dc
 800cfec:	20004bb0 	.word	0x20004bb0
 800cff0:	080297ec 	.word	0x080297ec
 800cff4:	2000bbac 	.word	0x2000bbac
 800cff8:	80808081 	.word	0x80808081
 800cffc:	0802980c 	.word	0x0802980c
 800d000:	0802978c 	.word	0x0802978c
 800d004:	0802979c 	.word	0x0802979c
 800d008:	08029920 	.word	0x08029920
 800d00c:	0802982c 	.word	0x0802982c
 800d010:	08029848 	.word	0x08029848
 800d014:	10db      	asrs	r3, r3, #3
 800d016:	b29a      	uxth	r2, r3
 800d018:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d01c:	4413      	add	r3, r2
 800d01e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d022:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d026:	3308      	adds	r3, #8
 800d028:	b29b      	uxth	r3, r3
 800d02a:	b21b      	sxth	r3, r3
 800d02c:	425a      	negs	r2, r3
 800d02e:	f003 0307 	and.w	r3, r3, #7
 800d032:	f002 0207 	and.w	r2, r2, #7
 800d036:	bf58      	it	pl
 800d038:	4253      	negpl	r3, r2
 800d03a:	b21b      	sxth	r3, r3
 800d03c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d040:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d044:	b2d8      	uxtb	r0, r3
 800d046:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d04a:	f107 020c 	add.w	r2, r7, #12
 800d04e:	441a      	add	r2, r3
 800d050:	2301      	movs	r3, #1
 800d052:	2108      	movs	r1, #8
 800d054:	f001 fda6 	bl	800eba4 <Extract_Parity_Data>
 800d058:	4603      	mov	r3, r0
 800d05a:	b2da      	uxtb	r2, r3
 800d05c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d060:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d064:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800d066:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d06a:	3308      	adds	r3, #8
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	da00      	bge.n	800d072 <Siemens_Data_Analyser+0x7ee>
 800d070:	3307      	adds	r3, #7
 800d072:	10db      	asrs	r3, r3, #3
 800d074:	b29a      	uxth	r2, r3
 800d076:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d07a:	4413      	add	r3, r2
 800d07c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d080:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d084:	3308      	adds	r3, #8
 800d086:	b29b      	uxth	r3, r3
 800d088:	b21b      	sxth	r3, r3
 800d08a:	425a      	negs	r2, r3
 800d08c:	f003 0307 	and.w	r3, r3, #7
 800d090:	f002 0207 	and.w	r2, r2, #7
 800d094:	bf58      	it	pl
 800d096:	4253      	negpl	r3, r2
 800d098:	b21b      	sxth	r3, r3
 800d09a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d09e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d0a2:	b2d8      	uxtb	r0, r3
 800d0a4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d0a8:	f107 020c 	add.w	r2, r7, #12
 800d0ac:	441a      	add	r2, r3
 800d0ae:	2302      	movs	r3, #2
 800d0b0:	2108      	movs	r1, #8
 800d0b2:	f001 fd77 	bl	800eba4 <Extract_Parity_Data>
 800d0b6:	4603      	mov	r3, r0
 800d0b8:	b2da      	uxtb	r2, r3
 800d0ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0c2:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d0c4:	4bab      	ldr	r3, [pc, #684]	; (800d374 <Siemens_Data_Analyser+0xaf0>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	08db      	lsrs	r3, r3, #3
 800d0ca:	f003 0301 	and.w	r3, r3, #1
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d02a      	beq.n	800d128 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800d0d2:	48a9      	ldr	r0, [pc, #676]	; (800d378 <Siemens_Data_Analyser+0xaf4>)
 800d0d4:	f018 fd5e 	bl	8025b94 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d0d8:	48a8      	ldr	r0, [pc, #672]	; (800d37c <Siemens_Data_Analyser+0xaf8>)
 800d0da:	f010 f967 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800d0de:	4601      	mov	r1, r0
 800d0e0:	4ba7      	ldr	r3, [pc, #668]	; (800d380 <Siemens_Data_Analyser+0xafc>)
 800d0e2:	fba3 2301 	umull	r2, r3, r3, r1
 800d0e6:	09da      	lsrs	r2, r3, #7
 800d0e8:	4613      	mov	r3, r2
 800d0ea:	021b      	lsls	r3, r3, #8
 800d0ec:	1a9b      	subs	r3, r3, r2
 800d0ee:	1aca      	subs	r2, r1, r3
 800d0f0:	b2d2      	uxtb	r2, r2
 800d0f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0fa:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800d0fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d100:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d104:	7e9a      	ldrb	r2, [r3, #26]
 800d106:	4b9f      	ldr	r3, [pc, #636]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d108:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d10b      	bne.n	800d128 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800d110:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d114:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d118:	7e9b      	ldrb	r3, [r3, #26]
 800d11a:	3304      	adds	r3, #4
 800d11c:	b2da      	uxtb	r2, r3
 800d11e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d122:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d126:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800d128:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d12c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d130:	7e9a      	ldrb	r2, [r3, #26]
 800d132:	4b94      	ldr	r3, [pc, #592]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d134:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d138:	429a      	cmp	r2, r3
 800d13a:	d015      	beq.n	800d168 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800d13c:	4892      	ldr	r0, [pc, #584]	; (800d388 <Siemens_Data_Analyser+0xb04>)
 800d13e:	f018 fd29 	bl	8025b94 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800d142:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d146:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d14a:	7e9b      	ldrb	r3, [r3, #26]
 800d14c:	4619      	mov	r1, r3
 800d14e:	488f      	ldr	r0, [pc, #572]	; (800d38c <Siemens_Data_Analyser+0xb08>)
 800d150:	f018 fc84 	bl	8025a5c <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800d154:	4b8b      	ldr	r3, [pc, #556]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d156:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d15a:	4619      	mov	r1, r3
 800d15c:	488c      	ldr	r0, [pc, #560]	; (800d390 <Siemens_Data_Analyser+0xb0c>)
 800d15e:	f018 fc7d 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800d162:	2301      	movs	r3, #1
 800d164:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800d168:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d16c:	3308      	adds	r3, #8
 800d16e:	2b00      	cmp	r3, #0
 800d170:	da00      	bge.n	800d174 <Siemens_Data_Analyser+0x8f0>
 800d172:	3307      	adds	r3, #7
 800d174:	10db      	asrs	r3, r3, #3
 800d176:	b29a      	uxth	r2, r3
 800d178:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d17c:	4413      	add	r3, r2
 800d17e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d182:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d186:	3308      	adds	r3, #8
 800d188:	b29b      	uxth	r3, r3
 800d18a:	b21b      	sxth	r3, r3
 800d18c:	425a      	negs	r2, r3
 800d18e:	f003 0307 	and.w	r3, r3, #7
 800d192:	f002 0207 	and.w	r2, r2, #7
 800d196:	bf58      	it	pl
 800d198:	4253      	negpl	r3, r2
 800d19a:	b21b      	sxth	r3, r3
 800d19c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d1a0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d1a4:	b2d8      	uxtb	r0, r3
 800d1a6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d1aa:	f107 020c 	add.w	r2, r7, #12
 800d1ae:	441a      	add	r2, r3
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	2108      	movs	r1, #8
 800d1b4:	f001 fcf6 	bl	800eba4 <Extract_Parity_Data>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1c0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1c4:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d1c6:	4b6b      	ldr	r3, [pc, #428]	; (800d374 <Siemens_Data_Analyser+0xaf0>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	091b      	lsrs	r3, r3, #4
 800d1cc:	f003 0301 	and.w	r3, r3, #1
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d02a      	beq.n	800d22a <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800d1d4:	486f      	ldr	r0, [pc, #444]	; (800d394 <Siemens_Data_Analyser+0xb10>)
 800d1d6:	f018 fcdd 	bl	8025b94 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d1da:	4868      	ldr	r0, [pc, #416]	; (800d37c <Siemens_Data_Analyser+0xaf8>)
 800d1dc:	f010 f8e6 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800d1e0:	4601      	mov	r1, r0
 800d1e2:	4b67      	ldr	r3, [pc, #412]	; (800d380 <Siemens_Data_Analyser+0xafc>)
 800d1e4:	fba3 2301 	umull	r2, r3, r3, r1
 800d1e8:	09da      	lsrs	r2, r3, #7
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	021b      	lsls	r3, r3, #8
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	1aca      	subs	r2, r1, r3
 800d1f2:	b2d2      	uxtb	r2, r2
 800d1f4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1f8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1fc:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800d1fe:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d202:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d206:	7eda      	ldrb	r2, [r3, #27]
 800d208:	4b5e      	ldr	r3, [pc, #376]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d20a:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d20e:	429a      	cmp	r2, r3
 800d210:	d10b      	bne.n	800d22a <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800d212:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d216:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d21a:	7edb      	ldrb	r3, [r3, #27]
 800d21c:	3304      	adds	r3, #4
 800d21e:	b2da      	uxtb	r2, r3
 800d220:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d224:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d228:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800d22a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d22e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d232:	7eda      	ldrb	r2, [r3, #27]
 800d234:	4b53      	ldr	r3, [pc, #332]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d236:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d015      	beq.n	800d26a <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800d23e:	4856      	ldr	r0, [pc, #344]	; (800d398 <Siemens_Data_Analyser+0xb14>)
 800d240:	f018 fca8 	bl	8025b94 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800d244:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d248:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d24c:	7edb      	ldrb	r3, [r3, #27]
 800d24e:	4619      	mov	r1, r3
 800d250:	484e      	ldr	r0, [pc, #312]	; (800d38c <Siemens_Data_Analyser+0xb08>)
 800d252:	f018 fc03 	bl	8025a5c <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800d256:	4b4b      	ldr	r3, [pc, #300]	; (800d384 <Siemens_Data_Analyser+0xb00>)
 800d258:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d25c:	4619      	mov	r1, r3
 800d25e:	484c      	ldr	r0, [pc, #304]	; (800d390 <Siemens_Data_Analyser+0xb0c>)
 800d260:	f018 fbfc 	bl	8025a5c <iprintf>
		RejectPacketFlag = 1;
 800d264:	2301      	movs	r3, #1
 800d266:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800d26a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d26e:	3308      	adds	r3, #8
 800d270:	2b00      	cmp	r3, #0
 800d272:	da00      	bge.n	800d276 <Siemens_Data_Analyser+0x9f2>
 800d274:	3307      	adds	r3, #7
 800d276:	10db      	asrs	r3, r3, #3
 800d278:	b29a      	uxth	r2, r3
 800d27a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d27e:	4413      	add	r3, r2
 800d280:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d284:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d288:	3308      	adds	r3, #8
 800d28a:	b29b      	uxth	r3, r3
 800d28c:	b21b      	sxth	r3, r3
 800d28e:	425a      	negs	r2, r3
 800d290:	f003 0307 	and.w	r3, r3, #7
 800d294:	f002 0207 	and.w	r2, r2, #7
 800d298:	bf58      	it	pl
 800d29a:	4253      	negpl	r3, r2
 800d29c:	b21b      	sxth	r3, r3
 800d29e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d2a2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d2a6:	b2d8      	uxtb	r0, r3
 800d2a8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d2ac:	f107 020c 	add.w	r2, r7, #12
 800d2b0:	441a      	add	r2, r3
 800d2b2:	2302      	movs	r3, #2
 800d2b4:	2120      	movs	r1, #32
 800d2b6:	f001 fc75 	bl	800eba4 <Extract_Parity_Data>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	461a      	mov	r2, r3
 800d2be:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2c6:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800d2c8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d2cc:	3320      	adds	r3, #32
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	da00      	bge.n	800d2d4 <Siemens_Data_Analyser+0xa50>
 800d2d2:	3307      	adds	r3, #7
 800d2d4:	10db      	asrs	r3, r3, #3
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d2dc:	4413      	add	r3, r2
 800d2de:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d2e2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d2e6:	3320      	adds	r3, #32
 800d2e8:	b29b      	uxth	r3, r3
 800d2ea:	b21b      	sxth	r3, r3
 800d2ec:	425a      	negs	r2, r3
 800d2ee:	f003 0307 	and.w	r3, r3, #7
 800d2f2:	f002 0207 	and.w	r2, r2, #7
 800d2f6:	bf58      	it	pl
 800d2f8:	4253      	negpl	r3, r2
 800d2fa:	b21b      	sxth	r3, r3
 800d2fc:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d300:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d304:	b2d8      	uxtb	r0, r3
 800d306:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d30a:	f107 020c 	add.w	r2, r7, #12
 800d30e:	441a      	add	r2, r3
 800d310:	2302      	movs	r3, #2
 800d312:	2120      	movs	r1, #32
 800d314:	f001 fc46 	bl	800eba4 <Extract_Parity_Data>
 800d318:	4603      	mov	r3, r0
 800d31a:	461a      	mov	r2, r3
 800d31c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d320:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d324:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800d326:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d32a:	3320      	adds	r3, #32
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	da00      	bge.n	800d332 <Siemens_Data_Analyser+0xaae>
 800d330:	3307      	adds	r3, #7
 800d332:	10db      	asrs	r3, r3, #3
 800d334:	b29a      	uxth	r2, r3
 800d336:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d33a:	4413      	add	r3, r2
 800d33c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d340:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d344:	3320      	adds	r3, #32
 800d346:	b29b      	uxth	r3, r3
 800d348:	b21b      	sxth	r3, r3
 800d34a:	425a      	negs	r2, r3
 800d34c:	f003 0307 	and.w	r3, r3, #7
 800d350:	f002 0207 	and.w	r2, r2, #7
 800d354:	bf58      	it	pl
 800d356:	4253      	negpl	r3, r2
 800d358:	b21b      	sxth	r3, r3
 800d35a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800d35e:	2300      	movs	r3, #0
 800d360:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800d364:	200a      	movs	r0, #10
 800d366:	f018 fb91 	bl	8025a8c <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d36a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d36e:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d372:	e052      	b.n	800d41a <Siemens_Data_Analyser+0xb96>
 800d374:	20004bb0 	.word	0x20004bb0
 800d378:	08029864 	.word	0x08029864
 800d37c:	2000bbac 	.word	0x2000bbac
 800d380:	80808081 	.word	0x80808081
 800d384:	20000504 	.word	0x20000504
 800d388:	08029880 	.word	0x08029880
 800d38c:	0802978c 	.word	0x0802978c
 800d390:	0802979c 	.word	0x0802979c
 800d394:	080298a0 	.word	0x080298a0
 800d398:	080298bc 	.word	0x080298bc
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800d39c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3a0:	b2d8      	uxtb	r0, r3
 800d3a2:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d3a6:	f107 020c 	add.w	r2, r7, #12
 800d3aa:	441a      	add	r2, r3
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	2108      	movs	r1, #8
 800d3b0:	f001 fbf8 	bl	800eba4 <Extract_Parity_Data>
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d3ba:	1c5a      	adds	r2, r3, #1
 800d3bc:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d3c0:	461a      	mov	r2, r3
 800d3c2:	b2c9      	uxtb	r1, r1
 800d3c4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d3c8:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d3cc:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d3ce:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d3d8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d3dc:	3308      	adds	r3, #8
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	da00      	bge.n	800d3e4 <Siemens_Data_Analyser+0xb60>
 800d3e2:	3307      	adds	r3, #7
 800d3e4:	10db      	asrs	r3, r3, #3
 800d3e6:	b29a      	uxth	r2, r3
 800d3e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d3ec:	4413      	add	r3, r2
 800d3ee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d3f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3f6:	3308      	adds	r3, #8
 800d3f8:	b29b      	uxth	r3, r3
 800d3fa:	b21b      	sxth	r3, r3
 800d3fc:	425a      	negs	r2, r3
 800d3fe:	f003 0307 	and.w	r3, r3, #7
 800d402:	f002 0207 	and.w	r2, r2, #7
 800d406:	bf58      	it	pl
 800d408:	4253      	negpl	r3, r2
 800d40a:	b21b      	sxth	r3, r3
 800d40c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d410:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d414:	3301      	adds	r3, #1
 800d416:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d41a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d41e:	b29b      	uxth	r3, r3
 800d420:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d424:	429a      	cmp	r2, r3
 800d426:	d8b9      	bhi.n	800d39c <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d428:	200a      	movs	r0, #10
 800d42a:	f018 fb2f 	bl	8025a8c <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d42e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d432:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d436:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d43a:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d43e:	4618      	mov	r0, r3
 800d440:	f000 f966 	bl	800d710 <ExtractAppData>
 800d444:	4603      	mov	r3, r0
 800d446:	461a      	mov	r2, r3
 800d448:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d44c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d450:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d452:	4b9c      	ldr	r3, [pc, #624]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d454:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d458:	f003 0307 	and.w	r3, r3, #7
 800d45c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d460:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d008      	beq.n	800d47a <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d468:	4b96      	ldr	r3, [pc, #600]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d46a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d46e:	08db      	lsrs	r3, r3, #3
 800d470:	b29b      	uxth	r3, r3
 800d472:	3301      	adds	r3, #1
 800d474:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d478:	e005      	b.n	800d486 <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d47a:	4b92      	ldr	r3, [pc, #584]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d47c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d480:	08db      	lsrs	r3, r3, #3
 800d482:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d486:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d48a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d48e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d490:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d494:	429a      	cmp	r2, r3
 800d496:	d02c      	beq.n	800d4f2 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800d498:	488b      	ldr	r0, [pc, #556]	; (800d6c8 <Siemens_Data_Analyser+0xe44>)
 800d49a:	f018 fb7b 	bl	8025b94 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800d49e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4a2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4888      	ldr	r0, [pc, #544]	; (800d6cc <Siemens_Data_Analyser+0xe48>)
 800d4ac:	f018 fad6 	bl	8025a5c <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800d4b0:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4886      	ldr	r0, [pc, #536]	; (800d6d0 <Siemens_Data_Analyser+0xe4c>)
 800d4b8:	f018 fad0 	bl	8025a5c <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800d4bc:	4985      	ldr	r1, [pc, #532]	; (800d6d4 <Siemens_Data_Analyser+0xe50>)
 800d4be:	4886      	ldr	r0, [pc, #536]	; (800d6d8 <Siemens_Data_Analyser+0xe54>)
 800d4c0:	f7f2 febe 	bl	8000240 <strcmp>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d002      	beq.n	800d4d0 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800d4ca:	2301      	movs	r3, #1
 800d4cc:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d4d0:	4980      	ldr	r1, [pc, #512]	; (800d6d4 <Siemens_Data_Analyser+0xe50>)
 800d4d2:	4881      	ldr	r0, [pc, #516]	; (800d6d8 <Siemens_Data_Analyser+0xe54>)
 800d4d4:	f7f2 feb4 	bl	8000240 <strcmp>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d109      	bne.n	800d4f2 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800d4de:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4e2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d4e8:	00db      	lsls	r3, r3, #3
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	4b75      	ldr	r3, [pc, #468]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d4ee:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800d4f2:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800d4f6:	2b01      	cmp	r3, #1
 800d4f8:	f000 80de 	beq.w	800d6b8 <Siemens_Data_Analyser+0xe34>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800d4fc:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800d500:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d504:	3326      	adds	r3, #38	; 0x26
 800d506:	4619      	mov	r1, r3
 800d508:	2000      	movs	r0, #0
 800d50a:	f007 fda9 	bl	8015060 <GetCRC16>
 800d50e:	4603      	mov	r3, r0
 800d510:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800d514:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d518:	f107 020c 	add.w	r2, r7, #12
 800d51c:	4413      	add	r3, r2
 800d51e:	461a      	mov	r2, r3
 800d520:	2110      	movs	r1, #16
 800d522:	2000      	movs	r0, #0
 800d524:	f7f3 f876 	bl	8000614 <ExtractBits>
 800d528:	4603      	mov	r3, r0
 800d52a:	b29a      	uxth	r2, r3
 800d52c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d530:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d534:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800d538:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d53c:	2100      	movs	r1, #0
 800d53e:	4867      	ldr	r0, [pc, #412]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d540:	f018 f9a4 	bl	802588c <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800d544:	4a65      	ldr	r2, [pc, #404]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d546:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d54a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d54e:	4610      	mov	r0, r2
 800d550:	4619      	mov	r1, r3
 800d552:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d556:	461a      	mov	r2, r3
 800d558:	f018 f970 	bl	802583c <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800d55c:	f000 f92e 	bl	800d7bc <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d560:	4b5f      	ldr	r3, [pc, #380]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d562:	881b      	ldrh	r3, [r3, #0]
 800d564:	461a      	mov	r2, r3
 800d566:	4b57      	ldr	r3, [pc, #348]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d568:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d56c:	1ad3      	subs	r3, r2, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	bfb8      	it	lt
 800d572:	425b      	neglt	r3, r3
 800d574:	461a      	mov	r2, r3
 800d576:	4b53      	ldr	r3, [pc, #332]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d578:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d869      	bhi.n	800d654 <Siemens_Data_Analyser+0xdd0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800d580:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d584:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d588:	69da      	ldr	r2, [r3, #28]
 800d58a:	4b56      	ldr	r3, [pc, #344]	; (800d6e4 <Siemens_Data_Analyser+0xe60>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d044      	beq.n	800d61c <Siemens_Data_Analyser+0xd98>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800d592:	f00b fb4d 	bl	8018c30 <HAL_GetTick>
 800d596:	4603      	mov	r3, r0
 800d598:	4a53      	ldr	r2, [pc, #332]	; (800d6e8 <Siemens_Data_Analyser+0xe64>)
 800d59a:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800d59c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5a0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	4a4f      	ldr	r2, [pc, #316]	; (800d6e4 <Siemens_Data_Analyser+0xe60>)
 800d5a8:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800d5aa:	4b4d      	ldr	r3, [pc, #308]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800d5b0:	4b4e      	ldr	r3, [pc, #312]	; (800d6ec <Siemens_Data_Analyser+0xe68>)
 800d5b2:	885b      	ldrh	r3, [r3, #2]
 800d5b4:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d04b      	beq.n	800d654 <Siemens_Data_Analyser+0xdd0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800d5bc:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	484a      	ldr	r0, [pc, #296]	; (800d6ec <Siemens_Data_Analyser+0xe68>)
 800d5c4:	f018 f962 	bl	802588c <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800d5c8:	f240 2202 	movw	r2, #514	; 0x202
 800d5cc:	2100      	movs	r1, #0
 800d5ce:	4848      	ldr	r0, [pc, #288]	; (800d6f0 <Siemens_Data_Analyser+0xe6c>)
 800d5d0:	f018 f95c 	bl	802588c <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800d5d4:	4a45      	ldr	r2, [pc, #276]	; (800d6ec <Siemens_Data_Analyser+0xe68>)
 800d5d6:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800d5da:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d5dc:	4b3f      	ldr	r3, [pc, #252]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d5de:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d5e0:	4b42      	ldr	r3, [pc, #264]	; (800d6ec <Siemens_Data_Analyser+0xe68>)
 800d5e2:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d5e4:	4b3d      	ldr	r3, [pc, #244]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d5e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4942      	ldr	r1, [pc, #264]	; (800d6f4 <Siemens_Data_Analyser+0xe70>)
 800d5ec:	4842      	ldr	r0, [pc, #264]	; (800d6f8 <Siemens_Data_Analyser+0xe74>)
 800d5ee:	f018 f925 	bl	802583c <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d5f2:	4b3a      	ldr	r3, [pc, #232]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d5f4:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d5f6:	4b3e      	ldr	r3, [pc, #248]	; (800d6f0 <Siemens_Data_Analyser+0xe6c>)
 800d5f8:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d5fa:	4b38      	ldr	r3, [pc, #224]	; (800d6dc <Siemens_Data_Analyser+0xe58>)
 800d5fc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d5fe:	461a      	mov	r2, r3
 800d600:	493c      	ldr	r1, [pc, #240]	; (800d6f4 <Siemens_Data_Analyser+0xe70>)
 800d602:	483e      	ldr	r0, [pc, #248]	; (800d6fc <Siemens_Data_Analyser+0xe78>)
 800d604:	f018 f91a 	bl	802583c <memcpy>
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);

#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800d608:	f44f 7002 	mov.w	r0, #520	; 0x208
 800d60c:	f003 fa54 	bl	8010ab8 <TransmitCanPkt>
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d610:	f00b fb0e 	bl	8018c30 <HAL_GetTick>
 800d614:	4603      	mov	r3, r0
 800d616:	4a34      	ldr	r2, [pc, #208]	; (800d6e8 <Siemens_Data_Analyser+0xe64>)
 800d618:	6113      	str	r3, [r2, #16]
 800d61a:	e01b      	b.n	800d654 <Siemens_Data_Analyser+0xdd0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800d61c:	4b30      	ldr	r3, [pc, #192]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d61e:	881b      	ldrh	r3, [r3, #0]
 800d620:	3301      	adds	r3, #1
 800d622:	b29a      	uxth	r2, r3
 800d624:	4b2e      	ldr	r3, [pc, #184]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d626:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d628:	4b2d      	ldr	r3, [pc, #180]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d62a:	881b      	ldrh	r3, [r3, #0]
 800d62c:	461a      	mov	r2, r3
 800d62e:	4b25      	ldr	r3, [pc, #148]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d630:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d634:	429a      	cmp	r2, r3
 800d636:	d90d      	bls.n	800d654 <Siemens_Data_Analyser+0xdd0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800d638:	4b29      	ldr	r3, [pc, #164]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d63a:	881b      	ldrh	r3, [r3, #0]
 800d63c:	4619      	mov	r1, r3
 800d63e:	4830      	ldr	r0, [pc, #192]	; (800d700 <Siemens_Data_Analyser+0xe7c>)
 800d640:	f018 fa0c 	bl	8025a5c <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800d644:	4b1f      	ldr	r3, [pc, #124]	; (800d6c4 <Siemens_Data_Analyser+0xe40>)
 800d646:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d64a:	b29b      	uxth	r3, r3
 800d64c:	3301      	adds	r3, #1
 800d64e:	b29a      	uxth	r2, r3
 800d650:	4b23      	ldr	r3, [pc, #140]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d652:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800d654:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800d658:	f107 010c 	add.w	r1, r7, #12
 800d65c:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800d660:	2302      	movs	r3, #2
 800d662:	f000 fe11 	bl	800e288 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800d666:	4b27      	ldr	r3, [pc, #156]	; (800d704 <Siemens_Data_Analyser+0xe80>)
 800d668:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d00d      	beq.n	800d68c <Siemens_Data_Analyser+0xe08>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800d670:	4b24      	ldr	r3, [pc, #144]	; (800d704 <Siemens_Data_Analyser+0xe80>)
 800d672:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800d676:	2301      	movs	r3, #1
 800d678:	4922      	ldr	r1, [pc, #136]	; (800d704 <Siemens_Data_Analyser+0xe80>)
 800d67a:	4823      	ldr	r0, [pc, #140]	; (800d708 <Siemens_Data_Analyser+0xe84>)
 800d67c:	f000 fe04 	bl	800e288 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800d680:	f240 6202 	movw	r2, #1538	; 0x602
 800d684:	2100      	movs	r1, #0
 800d686:	481f      	ldr	r0, [pc, #124]	; (800d704 <Siemens_Data_Analyser+0xe80>)
 800d688:	f018 f900 	bl	802588c <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800d68c:	4b14      	ldr	r3, [pc, #80]	; (800d6e0 <Siemens_Data_Analyser+0xe5c>)
 800d68e:	881a      	ldrh	r2, [r3, #0]
 800d690:	4b1e      	ldr	r3, [pc, #120]	; (800d70c <Siemens_Data_Analyser+0xe88>)
 800d692:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800d694:	4b1d      	ldr	r3, [pc, #116]	; (800d70c <Siemens_Data_Analyser+0xe88>)
 800d696:	2201      	movs	r2, #1
 800d698:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800d69a:	4b1c      	ldr	r3, [pc, #112]	; (800d70c <Siemens_Data_Analyser+0xe88>)
 800d69c:	2201      	movs	r2, #1
 800d69e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 800d6a0:	f240 2002 	movw	r0, #514	; 0x202
 800d6a4:	f003 fa08 	bl	8010ab8 <TransmitCanPkt>
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800d6a8:	f00b fac2 	bl	8018c30 <HAL_GetTick>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	4a0e      	ldr	r2, [pc, #56]	; (800d6e8 <Siemens_Data_Analyser+0xe64>)
 800d6b0:	6093      	str	r3, [r2, #8]

	return;
 800d6b2:	e002      	b.n	800d6ba <Siemens_Data_Analyser+0xe36>
		return;
 800d6b4:	bf00      	nop
 800d6b6:	e000      	b.n	800d6ba <Siemens_Data_Analyser+0xe36>
		return;
 800d6b8:	bf00      	nop
}
 800d6ba:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20000504 	.word	0x20000504
 800d6c8:	080298d4 	.word	0x080298d4
 800d6cc:	0802978c 	.word	0x0802978c
 800d6d0:	0802979c 	.word	0x0802979c
 800d6d4:	080298f4 	.word	0x080298f4
 800d6d8:	20000505 	.word	0x20000505
 800d6dc:	20003f34 	.word	0x20003f34
 800d6e0:	200053f4 	.word	0x200053f4
 800d6e4:	200053f0 	.word	0x200053f0
 800d6e8:	20004bc4 	.word	0x20004bc4
 800d6ec:	20004de4 	.word	0x20004de4
 800d6f0:	20004be0 	.word	0x20004be0
 800d6f4:	20003f5a 	.word	0x20003f5a
 800d6f8:	20004de8 	.word	0x20004de8
 800d6fc:	20004be2 	.word	0x20004be2
 800d700:	08029900 	.word	0x08029900
 800d704:	200045ac 	.word	0x200045ac
 800d708:	20004384 	.word	0x20004384
 800d70c:	20004bb8 	.word	0x20004bb8

0800d710 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800d710:	b480      	push	{r7}
 800d712:	b089      	sub	sp, #36	; 0x24
 800d714:	af00      	add	r7, sp, #0
 800d716:	60f8      	str	r0, [r7, #12]
 800d718:	460b      	mov	r3, r1
 800d71a:	607a      	str	r2, [r7, #4]
 800d71c:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800d726:	897b      	ldrh	r3, [r7, #10]
 800d728:	00db      	lsls	r3, r3, #3
 800d72a:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d72c:	2300      	movs	r3, #0
 800d72e:	837b      	strh	r3, [r7, #26]
 800d730:	e039      	b.n	800d7a6 <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800d732:	8b7b      	ldrh	r3, [r7, #26]
 800d734:	08db      	lsrs	r3, r3, #3
 800d736:	b29b      	uxth	r3, r3
 800d738:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800d73a:	8b7b      	ldrh	r3, [r7, #26]
 800d73c:	f003 0307 	and.w	r3, r3, #7
 800d740:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	2b07      	cmp	r3, #7
 800d746:	d02a      	beq.n	800d79e <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4413      	add	r3, r2
 800d74e:	781b      	ldrb	r3, [r3, #0]
 800d750:	461a      	mov	r2, r3
 800d752:	8b7b      	ldrh	r3, [r7, #26]
 800d754:	f003 0307 	and.w	r3, r3, #7
 800d758:	fa42 f303 	asr.w	r3, r2, r3
 800d75c:	f003 0301 	and.w	r3, r3, #1
 800d760:	2b00      	cmp	r3, #0
 800d762:	d010      	beq.n	800d786 <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800d764:	8bfb      	ldrh	r3, [r7, #30]
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	4413      	add	r3, r2
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	b25a      	sxtb	r2, r3
 800d76e:	7f7b      	ldrb	r3, [r7, #29]
 800d770:	2101      	movs	r1, #1
 800d772:	fa01 f303 	lsl.w	r3, r1, r3
 800d776:	b25b      	sxtb	r3, r3
 800d778:	4313      	orrs	r3, r2
 800d77a:	b259      	sxtb	r1, r3
 800d77c:	8bfb      	ldrh	r3, [r7, #30]
 800d77e:	687a      	ldr	r2, [r7, #4]
 800d780:	4413      	add	r3, r2
 800d782:	b2ca      	uxtb	r2, r1
 800d784:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800d786:	7f7b      	ldrb	r3, [r7, #29]
 800d788:	3301      	adds	r3, #1
 800d78a:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800d78c:	7f7b      	ldrb	r3, [r7, #29]
 800d78e:	2b08      	cmp	r3, #8
 800d790:	d106      	bne.n	800d7a0 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800d792:	2300      	movs	r3, #0
 800d794:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800d796:	8bfb      	ldrh	r3, [r7, #30]
 800d798:	3301      	adds	r3, #1
 800d79a:	83fb      	strh	r3, [r7, #30]
 800d79c:	e000      	b.n	800d7a0 <ExtractAppData+0x90>
			continue;
 800d79e:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800d7a0:	8b7b      	ldrh	r3, [r7, #26]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	837b      	strh	r3, [r7, #26]
 800d7a6:	8b7a      	ldrh	r2, [r7, #26]
 800d7a8:	8b3b      	ldrh	r3, [r7, #24]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d3c1      	bcc.n	800d732 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800d7ae:	8bfb      	ldrh	r3, [r7, #30]
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	3724      	adds	r7, #36	; 0x24
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ba:	4770      	bx	lr

0800d7bc <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800d7bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d7c0:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800d7c4:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800d7c6:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800d7ca:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800d7ce:	2300      	movs	r3, #0
 800d7d0:	6013      	str	r3, [r2, #0]
 800d7d2:	1d10      	adds	r0, r2, #4
 800d7d4:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800d7d8:	461a      	mov	r2, r3
 800d7da:	2100      	movs	r1, #0
 800d7dc:	f018 f856 	bl	802588c <memset>
	uint16_t App_data_Traverser = 0;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d7fe:	2300      	movs	r3, #0
 800d800:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800d804:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d808:	2100      	movs	r1, #0
 800d80a:	48ba      	ldr	r0, [pc, #744]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d80c:	f018 f83e 	bl	802588c <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800d810:	4bb9      	ldr	r3, [pc, #740]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d812:	7b1b      	ldrb	r3, [r3, #12]
 800d814:	4ab7      	ldr	r2, [pc, #732]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d816:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800d818:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d81c:	b2d8      	uxtb	r0, r3
 800d81e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d822:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d826:	1899      	adds	r1, r3, r2
 800d828:	4bb2      	ldr	r3, [pc, #712]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	2200      	movs	r2, #0
 800d830:	461c      	mov	r4, r3
 800d832:	4615      	mov	r5, r2
 800d834:	2301      	movs	r3, #1
 800d836:	9302      	str	r3, [sp, #8]
 800d838:	e9cd 4500 	strd	r4, r5, [sp]
 800d83c:	460a      	mov	r2, r1
 800d83e:	2108      	movs	r1, #8
 800d840:	f001 faf2 	bl	800ee28 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d844:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d848:	3308      	adds	r3, #8
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	da00      	bge.n	800d850 <Form_Siemens_Reply+0x94>
 800d84e:	3307      	adds	r3, #7
 800d850:	10db      	asrs	r3, r3, #3
 800d852:	b29a      	uxth	r2, r3
 800d854:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d858:	4413      	add	r3, r2
 800d85a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d85e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d862:	3308      	adds	r3, #8
 800d864:	b29b      	uxth	r3, r3
 800d866:	b21b      	sxth	r3, r3
 800d868:	425a      	negs	r2, r3
 800d86a:	f003 0107 	and.w	r1, r3, #7
 800d86e:	f002 0307 	and.w	r3, r2, #7
 800d872:	bf58      	it	pl
 800d874:	4259      	negpl	r1, r3
 800d876:	b20b      	sxth	r3, r1
 800d878:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800d87c:	4b9e      	ldr	r3, [pc, #632]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d87e:	691a      	ldr	r2, [r3, #16]
 800d880:	4b9c      	ldr	r3, [pc, #624]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d882:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800d884:	4b9c      	ldr	r3, [pc, #624]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d886:	695a      	ldr	r2, [r3, #20]
 800d888:	4b9a      	ldr	r3, [pc, #616]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d88a:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800d88c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d890:	b2d8      	uxtb	r0, r3
 800d892:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d896:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d89a:	1899      	adds	r1, r3, r2
 800d89c:	4b95      	ldr	r3, [pc, #596]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d89e:	685b      	ldr	r3, [r3, #4]
 800d8a0:	2200      	movs	r2, #0
 800d8a2:	4698      	mov	r8, r3
 800d8a4:	4691      	mov	r9, r2
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	9302      	str	r3, [sp, #8]
 800d8aa:	e9cd 8900 	strd	r8, r9, [sp]
 800d8ae:	460a      	mov	r2, r1
 800d8b0:	2118      	movs	r1, #24
 800d8b2:	f001 fab9 	bl	800ee28 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800d8b6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d8ba:	3318      	adds	r3, #24
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	da00      	bge.n	800d8c2 <Form_Siemens_Reply+0x106>
 800d8c0:	3307      	adds	r3, #7
 800d8c2:	10db      	asrs	r3, r3, #3
 800d8c4:	b29a      	uxth	r2, r3
 800d8c6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d8ca:	4413      	add	r3, r2
 800d8cc:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d8d0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d8d4:	3318      	adds	r3, #24
 800d8d6:	b29b      	uxth	r3, r3
 800d8d8:	b21b      	sxth	r3, r3
 800d8da:	425a      	negs	r2, r3
 800d8dc:	f003 0107 	and.w	r1, r3, #7
 800d8e0:	f002 0307 	and.w	r3, r2, #7
 800d8e4:	bf58      	it	pl
 800d8e6:	4259      	negpl	r1, r3
 800d8e8:	b20b      	sxth	r3, r1
 800d8ea:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800d8ee:	4b82      	ldr	r3, [pc, #520]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	4a80      	ldr	r2, [pc, #512]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d8f4:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800d8f6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d8fa:	b2d8      	uxtb	r0, r3
 800d8fc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d900:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d904:	1899      	adds	r1, r3, r2
 800d906:	4b7b      	ldr	r3, [pc, #492]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d908:	7b1b      	ldrb	r3, [r3, #12]
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	2200      	movs	r2, #0
 800d90e:	469a      	mov	sl, r3
 800d910:	4693      	mov	fp, r2
 800d912:	2301      	movs	r3, #1
 800d914:	9302      	str	r3, [sp, #8]
 800d916:	e9cd ab00 	strd	sl, fp, [sp]
 800d91a:	460a      	mov	r2, r1
 800d91c:	2108      	movs	r1, #8
 800d91e:	f001 fa83 	bl	800ee28 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800d922:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d926:	3308      	adds	r3, #8
 800d928:	2b00      	cmp	r3, #0
 800d92a:	da00      	bge.n	800d92e <Form_Siemens_Reply+0x172>
 800d92c:	3307      	adds	r3, #7
 800d92e:	10db      	asrs	r3, r3, #3
 800d930:	b29a      	uxth	r2, r3
 800d932:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d936:	4413      	add	r3, r2
 800d938:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d93c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d940:	3308      	adds	r3, #8
 800d942:	b29b      	uxth	r3, r3
 800d944:	b21b      	sxth	r3, r3
 800d946:	425a      	negs	r2, r3
 800d948:	f003 0107 	and.w	r1, r3, #7
 800d94c:	f002 0307 	and.w	r3, r2, #7
 800d950:	bf58      	it	pl
 800d952:	4259      	negpl	r1, r3
 800d954:	b20b      	sxth	r3, r1
 800d956:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800d95a:	4b67      	ldr	r3, [pc, #412]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d95c:	685a      	ldr	r2, [r3, #4]
 800d95e:	4b65      	ldr	r3, [pc, #404]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d960:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800d962:	4b65      	ldr	r3, [pc, #404]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d964:	689a      	ldr	r2, [r3, #8]
 800d966:	4b63      	ldr	r3, [pc, #396]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d968:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800d96a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d96e:	b2d8      	uxtb	r0, r3
 800d970:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d974:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d978:	1899      	adds	r1, r3, r2
 800d97a:	4b5e      	ldr	r3, [pc, #376]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2200      	movs	r2, #0
 800d980:	643b      	str	r3, [r7, #64]	; 0x40
 800d982:	647a      	str	r2, [r7, #68]	; 0x44
 800d984:	2300      	movs	r3, #0
 800d986:	9302      	str	r3, [sp, #8]
 800d988:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800d98c:	e9cd 3400 	strd	r3, r4, [sp]
 800d990:	460a      	mov	r2, r1
 800d992:	2118      	movs	r1, #24
 800d994:	f001 fa48 	bl	800ee28 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800d998:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800d99c:	3318      	adds	r3, #24
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	da00      	bge.n	800d9a4 <Form_Siemens_Reply+0x1e8>
 800d9a2:	3307      	adds	r3, #7
 800d9a4:	10db      	asrs	r3, r3, #3
 800d9a6:	b29a      	uxth	r2, r3
 800d9a8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800d9ac:	4413      	add	r3, r2
 800d9ae:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800d9b2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d9b6:	3318      	adds	r3, #24
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	b21b      	sxth	r3, r3
 800d9bc:	425a      	negs	r2, r3
 800d9be:	f003 0107 	and.w	r1, r3, #7
 800d9c2:	f002 0307 	and.w	r3, r2, #7
 800d9c6:	bf58      	it	pl
 800d9c8:	4259      	negpl	r1, r3
 800d9ca:	b20b      	sxth	r3, r1
 800d9cc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800d9d0:	4b49      	ldr	r3, [pc, #292]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800d9d2:	7e1b      	ldrb	r3, [r3, #24]
 800d9d4:	4a47      	ldr	r2, [pc, #284]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d9d6:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800d9d8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800d9dc:	b2d8      	uxtb	r0, r3
 800d9de:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800d9e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800d9e6:	1899      	adds	r1, r3, r2
 800d9e8:	4b42      	ldr	r3, [pc, #264]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800d9ea:	7e1b      	ldrb	r3, [r3, #24]
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d9f2:	63fa      	str	r2, [r7, #60]	; 0x3c
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	9302      	str	r3, [sp, #8]
 800d9f8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800d9fc:	e9cd 3400 	strd	r3, r4, [sp]
 800da00:	460a      	mov	r2, r1
 800da02:	2108      	movs	r1, #8
 800da04:	f001 fa10 	bl	800ee28 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800da08:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800da0c:	3308      	adds	r3, #8
 800da0e:	2b00      	cmp	r3, #0
 800da10:	da00      	bge.n	800da14 <Form_Siemens_Reply+0x258>
 800da12:	3307      	adds	r3, #7
 800da14:	10db      	asrs	r3, r3, #3
 800da16:	b29a      	uxth	r2, r3
 800da18:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800da1c:	4413      	add	r3, r2
 800da1e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800da22:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da26:	3308      	adds	r3, #8
 800da28:	b29b      	uxth	r3, r3
 800da2a:	b21b      	sxth	r3, r3
 800da2c:	425a      	negs	r2, r3
 800da2e:	f003 0107 	and.w	r1, r3, #7
 800da32:	f002 0307 	and.w	r3, r2, #7
 800da36:	bf58      	it	pl
 800da38:	4259      	negpl	r1, r3
 800da3a:	b20b      	sxth	r3, r1
 800da3c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800da40:	4a2c      	ldr	r2, [pc, #176]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800da42:	2301      	movs	r3, #1
 800da44:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800da46:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da4a:	b2d8      	uxtb	r0, r3
 800da4c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800da50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800da54:	1899      	adds	r1, r3, r2
 800da56:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800da58:	7e5b      	ldrb	r3, [r3, #25]
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2200      	movs	r2, #0
 800da5e:	633b      	str	r3, [r7, #48]	; 0x30
 800da60:	637a      	str	r2, [r7, #52]	; 0x34
 800da62:	2301      	movs	r3, #1
 800da64:	9302      	str	r3, [sp, #8]
 800da66:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800da6a:	e9cd 3400 	strd	r3, r4, [sp]
 800da6e:	460a      	mov	r2, r1
 800da70:	2108      	movs	r1, #8
 800da72:	f001 f9d9 	bl	800ee28 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800da76:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800da7a:	3308      	adds	r3, #8
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	da00      	bge.n	800da82 <Form_Siemens_Reply+0x2c6>
 800da80:	3307      	adds	r3, #7
 800da82:	10db      	asrs	r3, r3, #3
 800da84:	b29a      	uxth	r2, r3
 800da86:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800da8a:	4413      	add	r3, r2
 800da8c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800da90:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800da94:	3308      	adds	r3, #8
 800da96:	b29b      	uxth	r3, r3
 800da98:	b21b      	sxth	r3, r3
 800da9a:	425a      	negs	r2, r3
 800da9c:	f003 0307 	and.w	r3, r3, #7
 800daa0:	f002 0207 	and.w	r2, r2, #7
 800daa4:	bf58      	it	pl
 800daa6:	4253      	negpl	r3, r2
 800daa8:	b21b      	sxth	r3, r3
 800daaa:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800daae:	4b12      	ldr	r3, [pc, #72]	; (800daf8 <Form_Siemens_Reply+0x33c>)
 800dab0:	7edb      	ldrb	r3, [r3, #27]
 800dab2:	4a10      	ldr	r2, [pc, #64]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800dab4:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800dab6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800daba:	b2d8      	uxtb	r0, r3
 800dabc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dac4:	1899      	adds	r1, r3, r2
 800dac6:	4b0b      	ldr	r3, [pc, #44]	; (800daf4 <Form_Siemens_Reply+0x338>)
 800dac8:	7e9b      	ldrb	r3, [r3, #26]
 800daca:	b2db      	uxtb	r3, r3
 800dacc:	2200      	movs	r2, #0
 800dace:	62bb      	str	r3, [r7, #40]	; 0x28
 800dad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dad2:	2302      	movs	r3, #2
 800dad4:	9302      	str	r3, [sp, #8]
 800dad6:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800dada:	e9cd 3400 	strd	r3, r4, [sp]
 800dade:	460a      	mov	r2, r1
 800dae0:	2108      	movs	r1, #8
 800dae2:	f001 f9a1 	bl	800ee28 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dae6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800daea:	3308      	adds	r3, #8
 800daec:	2b00      	cmp	r3, #0
 800daee:	da05      	bge.n	800dafc <Form_Siemens_Reply+0x340>
 800daf0:	3307      	adds	r3, #7
 800daf2:	e003      	b.n	800dafc <Form_Siemens_Reply+0x340>
 800daf4:	2000415c 	.word	0x2000415c
 800daf8:	20003f34 	.word	0x20003f34
 800dafc:	10db      	asrs	r3, r3, #3
 800dafe:	b29a      	uxth	r2, r3
 800db00:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db04:	4413      	add	r3, r2
 800db06:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800db0a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800db0e:	3308      	adds	r3, #8
 800db10:	b29b      	uxth	r3, r3
 800db12:	b21b      	sxth	r3, r3
 800db14:	425a      	negs	r2, r3
 800db16:	f003 0307 	and.w	r3, r3, #7
 800db1a:	f002 0207 	and.w	r2, r2, #7
 800db1e:	bf58      	it	pl
 800db20:	4253      	negpl	r3, r2
 800db22:	b21b      	sxth	r3, r3
 800db24:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800db28:	4bc4      	ldr	r3, [pc, #784]	; (800de3c <Form_Siemens_Reply+0x680>)
 800db2a:	7e9a      	ldrb	r2, [r3, #26]
 800db2c:	4bc4      	ldr	r3, [pc, #784]	; (800de40 <Form_Siemens_Reply+0x684>)
 800db2e:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800db30:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800db34:	b2d8      	uxtb	r0, r3
 800db36:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800db3e:	441a      	add	r2, r3
 800db40:	4bbf      	ldr	r3, [pc, #764]	; (800de40 <Form_Siemens_Reply+0x684>)
 800db42:	7edb      	ldrb	r3, [r3, #27]
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2100      	movs	r1, #0
 800db48:	623b      	str	r3, [r7, #32]
 800db4a:	6279      	str	r1, [r7, #36]	; 0x24
 800db4c:	2302      	movs	r3, #2
 800db4e:	9302      	str	r3, [sp, #8]
 800db50:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800db54:	e9cd 3400 	strd	r3, r4, [sp]
 800db58:	2108      	movs	r1, #8
 800db5a:	f001 f965 	bl	800ee28 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800db5e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800db62:	3308      	adds	r3, #8
 800db64:	2b00      	cmp	r3, #0
 800db66:	da00      	bge.n	800db6a <Form_Siemens_Reply+0x3ae>
 800db68:	3307      	adds	r3, #7
 800db6a:	10db      	asrs	r3, r3, #3
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800db72:	4413      	add	r3, r2
 800db74:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800db78:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800db7c:	3308      	adds	r3, #8
 800db7e:	b29b      	uxth	r3, r3
 800db80:	b21b      	sxth	r3, r3
 800db82:	425a      	negs	r2, r3
 800db84:	f003 0307 	and.w	r3, r3, #7
 800db88:	f002 0207 	and.w	r2, r2, #7
 800db8c:	bf58      	it	pl
 800db8e:	4253      	negpl	r3, r2
 800db90:	b21b      	sxth	r3, r3
 800db92:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800db96:	4ba9      	ldr	r3, [pc, #676]	; (800de3c <Form_Siemens_Reply+0x680>)
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	4aa9      	ldr	r2, [pc, #676]	; (800de40 <Form_Siemens_Reply+0x684>)
 800db9c:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800db9e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dba2:	b2d8      	uxtb	r0, r3
 800dba4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dba8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dbac:	4413      	add	r3, r2
 800dbae:	4aa4      	ldr	r2, [pc, #656]	; (800de40 <Form_Siemens_Reply+0x684>)
 800dbb0:	69d2      	ldr	r2, [r2, #28]
 800dbb2:	2100      	movs	r1, #0
 800dbb4:	61ba      	str	r2, [r7, #24]
 800dbb6:	61f9      	str	r1, [r7, #28]
 800dbb8:	2202      	movs	r2, #2
 800dbba:	9202      	str	r2, [sp, #8]
 800dbbc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dbc0:	e9cd 1200 	strd	r1, r2, [sp]
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	2120      	movs	r1, #32
 800dbc8:	f001 f92e 	bl	800ee28 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800dbcc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dbd0:	3320      	adds	r3, #32
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	da00      	bge.n	800dbd8 <Form_Siemens_Reply+0x41c>
 800dbd6:	3307      	adds	r3, #7
 800dbd8:	10db      	asrs	r3, r3, #3
 800dbda:	b29a      	uxth	r2, r3
 800dbdc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dbe0:	4413      	add	r3, r2
 800dbe2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dbe6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dbea:	3320      	adds	r3, #32
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	b21b      	sxth	r3, r3
 800dbf0:	425a      	negs	r2, r3
 800dbf2:	f003 0307 	and.w	r3, r3, #7
 800dbf6:	f002 0207 	and.w	r2, r2, #7
 800dbfa:	bf58      	it	pl
 800dbfc:	4253      	negpl	r3, r2
 800dbfe:	b21b      	sxth	r3, r3
 800dc00:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800dc04:	4b8f      	ldr	r3, [pc, #572]	; (800de44 <Form_Siemens_Reply+0x688>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	4a8d      	ldr	r2, [pc, #564]	; (800de40 <Form_Siemens_Reply+0x684>)
 800dc0a:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800dc0c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc10:	b2d8      	uxtb	r0, r3
 800dc12:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dc1a:	4413      	add	r3, r2
 800dc1c:	4a88      	ldr	r2, [pc, #544]	; (800de40 <Form_Siemens_Reply+0x684>)
 800dc1e:	6a12      	ldr	r2, [r2, #32]
 800dc20:	2100      	movs	r1, #0
 800dc22:	613a      	str	r2, [r7, #16]
 800dc24:	6179      	str	r1, [r7, #20]
 800dc26:	2202      	movs	r2, #2
 800dc28:	9202      	str	r2, [sp, #8]
 800dc2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dc2e:	e9cd 1200 	strd	r1, r2, [sp]
 800dc32:	461a      	mov	r2, r3
 800dc34:	2120      	movs	r1, #32
 800dc36:	f001 f8f7 	bl	800ee28 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800dc3a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dc3e:	3320      	adds	r3, #32
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	da00      	bge.n	800dc46 <Form_Siemens_Reply+0x48a>
 800dc44:	3307      	adds	r3, #7
 800dc46:	10db      	asrs	r3, r3, #3
 800dc48:	b29a      	uxth	r2, r3
 800dc4a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc4e:	4413      	add	r3, r2
 800dc50:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dc54:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc58:	3320      	adds	r3, #32
 800dc5a:	b29b      	uxth	r3, r3
 800dc5c:	b21b      	sxth	r3, r3
 800dc5e:	425a      	negs	r2, r3
 800dc60:	f003 0307 	and.w	r3, r3, #7
 800dc64:	f002 0207 	and.w	r2, r2, #7
 800dc68:	bf58      	it	pl
 800dc6a:	4253      	negpl	r3, r2
 800dc6c:	b21b      	sxth	r3, r3
 800dc6e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800dc72:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800dc76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f001 fa39 	bl	800f0f4 <Data_Compliment>
 800dc82:	4603      	mov	r3, r0
 800dc84:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800dc88:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dc8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc90:	4611      	mov	r1, r2
 800dc92:	4618      	mov	r0, r3
 800dc94:	f000 ff32 	bl	800eafc <Siemens_CRC>
 800dc98:	4603      	mov	r3, r0
 800dc9a:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800dc9e:	4b6a      	ldr	r3, [pc, #424]	; (800de48 <Form_Siemens_Reply+0x68c>)
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	09db      	lsrs	r3, r3, #7
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d02c      	beq.n	800dd06 <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800dcac:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcb0:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800dcb4:	4865      	ldr	r0, [pc, #404]	; (800de4c <Form_Siemens_Reply+0x690>)
 800dcb6:	f017 ff6d 	bl	8025b94 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800dcba:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcbe:	4619      	mov	r1, r3
 800dcc0:	4863      	ldr	r0, [pc, #396]	; (800de50 <Form_Siemens_Reply+0x694>)
 800dcc2:	f017 fecb 	bl	8025a5c <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800dcc6:	4863      	ldr	r0, [pc, #396]	; (800de54 <Form_Siemens_Reply+0x698>)
 800dcc8:	f00f fb70 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4b62      	ldr	r3, [pc, #392]	; (800de58 <Form_Siemens_Reply+0x69c>)
 800dcd0:	fba3 2301 	umull	r2, r3, r3, r1
 800dcd4:	0bda      	lsrs	r2, r3, #15
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	041b      	lsls	r3, r3, #16
 800dcda:	1a9b      	subs	r3, r3, r2
 800dcdc:	1aca      	subs	r2, r1, r3
 800dcde:	4613      	mov	r3, r2
 800dce0:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800dce4:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800dce8:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800dcec:	429a      	cmp	r2, r3
 800dcee:	d104      	bne.n	800dcfa <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800dcf0:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcf4:	3304      	adds	r3, #4
 800dcf6:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800dcfa:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800dcfe:	4619      	mov	r1, r3
 800dd00:	4856      	ldr	r0, [pc, #344]	; (800de5c <Form_Siemens_Reply+0x6a0>)
 800dd02:	f017 feab 	bl	8025a5c <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800dd06:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd0a:	b2d8      	uxtb	r0, r3
 800dd0c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dd14:	4413      	add	r3, r2
 800dd16:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	60ba      	str	r2, [r7, #8]
 800dd1e:	60f9      	str	r1, [r7, #12]
 800dd20:	2202      	movs	r2, #2
 800dd22:	9202      	str	r2, [sp, #8]
 800dd24:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800dd28:	e9cd 1200 	strd	r1, r2, [sp]
 800dd2c:	461a      	mov	r2, r3
 800dd2e:	2110      	movs	r1, #16
 800dd30:	f001 f87a 	bl	800ee28 <Insert_cal_parity>
	BITSTUFFINC(16);
 800dd34:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dd38:	3310      	adds	r3, #16
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	da00      	bge.n	800dd40 <Form_Siemens_Reply+0x584>
 800dd3e:	3307      	adds	r3, #7
 800dd40:	10db      	asrs	r3, r3, #3
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd48:	4413      	add	r3, r2
 800dd4a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd4e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd52:	3310      	adds	r3, #16
 800dd54:	b29b      	uxth	r3, r3
 800dd56:	b21b      	sxth	r3, r3
 800dd58:	425a      	negs	r2, r3
 800dd5a:	f003 0307 	and.w	r3, r3, #7
 800dd5e:	f002 0207 	and.w	r2, r2, #7
 800dd62:	bf58      	it	pl
 800dd64:	4253      	negpl	r3, r2
 800dd66:	b21b      	sxth	r3, r3
 800dd68:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800dd6c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd70:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dd74:	441a      	add	r2, r3
 800dd76:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd7a:	3b02      	subs	r3, #2
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	4619      	mov	r1, r3
 800dd80:	4610      	mov	r0, r2
 800dd82:	f000 febb 	bl	800eafc <Siemens_CRC>
 800dd86:	4603      	mov	r3, r0
 800dd88:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800dd8c:	4b2e      	ldr	r3, [pc, #184]	; (800de48 <Form_Siemens_Reply+0x68c>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	0a5b      	lsrs	r3, r3, #9
 800dd92:	f003 0301 	and.w	r3, r3, #1
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d02c      	beq.n	800ddf4 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800dd9a:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dd9e:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800dda2:	482a      	ldr	r0, [pc, #168]	; (800de4c <Form_Siemens_Reply+0x690>)
 800dda4:	f017 fef6 	bl	8025b94 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800dda8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800ddac:	4619      	mov	r1, r3
 800ddae:	482c      	ldr	r0, [pc, #176]	; (800de60 <Form_Siemens_Reply+0x6a4>)
 800ddb0:	f017 fe54 	bl	8025a5c <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800ddb4:	4827      	ldr	r0, [pc, #156]	; (800de54 <Form_Siemens_Reply+0x698>)
 800ddb6:	f00f faf9 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 800ddba:	4601      	mov	r1, r0
 800ddbc:	4b26      	ldr	r3, [pc, #152]	; (800de58 <Form_Siemens_Reply+0x69c>)
 800ddbe:	fba3 2301 	umull	r2, r3, r3, r1
 800ddc2:	0bda      	lsrs	r2, r3, #15
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	041b      	lsls	r3, r3, #16
 800ddc8:	1a9b      	subs	r3, r3, r2
 800ddca:	1aca      	subs	r2, r1, r3
 800ddcc:	4613      	mov	r3, r2
 800ddce:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800ddd2:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800ddd6:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d104      	bne.n	800dde8 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800ddde:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800dde2:	3304      	adds	r3, #4
 800dde4:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800dde8:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800ddec:	4619      	mov	r1, r3
 800ddee:	481d      	ldr	r0, [pc, #116]	; (800de64 <Form_Siemens_Reply+0x6a8>)
 800ddf0:	f017 fe34 	bl	8025a5c <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800ddf4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800ddfe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de02:	b2d8      	uxtb	r0, r3
 800de04:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800de08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800de0c:	4413      	add	r3, r2
 800de0e:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800de12:	2100      	movs	r1, #0
 800de14:	603a      	str	r2, [r7, #0]
 800de16:	6079      	str	r1, [r7, #4]
 800de18:	2202      	movs	r2, #2
 800de1a:	9202      	str	r2, [sp, #8]
 800de1c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800de20:	e9cd 1200 	strd	r1, r2, [sp]
 800de24:	461a      	mov	r2, r3
 800de26:	2110      	movs	r1, #16
 800de28:	f000 fffe 	bl	800ee28 <Insert_cal_parity>
	BITSTUFFINC(16);
 800de2c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800de30:	3310      	adds	r3, #16
 800de32:	2b00      	cmp	r3, #0
 800de34:	da18      	bge.n	800de68 <Form_Siemens_Reply+0x6ac>
 800de36:	3307      	adds	r3, #7
 800de38:	e016      	b.n	800de68 <Form_Siemens_Reply+0x6ac>
 800de3a:	bf00      	nop
 800de3c:	20003f34 	.word	0x20003f34
 800de40:	2000415c 	.word	0x2000415c
 800de44:	200053f8 	.word	0x200053f8
 800de48:	20004bb0 	.word	0x20004bb0
 800de4c:	08029674 	.word	0x08029674
 800de50:	08029924 	.word	0x08029924
 800de54:	2000bbac 	.word	0x2000bbac
 800de58:	80008001 	.word	0x80008001
 800de5c:	08029938 	.word	0x08029938
 800de60:	0802994c 	.word	0x0802994c
 800de64:	08029968 	.word	0x08029968
 800de68:	10db      	asrs	r3, r3, #3
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800de70:	4413      	add	r3, r2
 800de72:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800de76:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de7a:	3310      	adds	r3, #16
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	b21b      	sxth	r3, r3
 800de80:	425a      	negs	r2, r3
 800de82:	f003 0307 	and.w	r3, r3, #7
 800de86:	f002 0207 	and.w	r2, r2, #7
 800de8a:	bf58      	it	pl
 800de8c:	4253      	negpl	r3, r2
 800de8e:	b21b      	sxth	r3, r3
 800de90:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800de94:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800de98:	3302      	adds	r3, #2
 800de9a:	461a      	mov	r2, r3
 800de9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dea0:	4619      	mov	r1, r3
 800dea2:	481e      	ldr	r0, [pc, #120]	; (800df1c <Form_Siemens_Reply+0x760>)
 800dea4:	f017 fcca 	bl	802583c <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800dea8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800deac:	3302      	adds	r3, #2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	4b1a      	ldr	r3, [pc, #104]	; (800df1c <Form_Siemens_Reply+0x760>)
 800deb2:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800deb6:	f001 f989 	bl	800f1cc <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800deba:	4b19      	ldr	r3, [pc, #100]	; (800df20 <Form_Siemens_Reply+0x764>)
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	099b      	lsrs	r3, r3, #6
 800dec0:	f003 0301 	and.w	r3, r3, #1
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d003      	beq.n	800ded0 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800dec8:	4816      	ldr	r0, [pc, #88]	; (800df24 <Form_Siemens_Reply+0x768>)
 800deca:	f017 fe63 	bl	8025b94 <puts>
 800dece:	e00f      	b.n	800def0 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800ded0:	4b15      	ldr	r3, [pc, #84]	; (800df28 <Form_Siemens_Reply+0x76c>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d10b      	bne.n	800def0 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800ded8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800dedc:	b2db      	uxtb	r3, r3
 800dede:	3302      	adds	r3, #2
 800dee0:	b2d9      	uxtb	r1, r3
 800dee2:	4a12      	ldr	r2, [pc, #72]	; (800df2c <Form_Siemens_Reply+0x770>)
 800dee4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dee8:	6812      	ldr	r2, [r2, #0]
 800deea:	4618      	mov	r0, r3
 800deec:	f002 fbd8 	bl	80106a0 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800def0:	f44f 720a 	mov.w	r2, #552	; 0x228
 800def4:	2100      	movs	r1, #0
 800def6:	480e      	ldr	r0, [pc, #56]	; (800df30 <Form_Siemens_Reply+0x774>)
 800def8:	f017 fcc8 	bl	802588c <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800defc:	4a0c      	ldr	r2, [pc, #48]	; (800df30 <Form_Siemens_Reply+0x774>)
 800defe:	4b0d      	ldr	r3, [pc, #52]	; (800df34 <Form_Siemens_Reply+0x778>)
 800df00:	4610      	mov	r0, r2
 800df02:	4619      	mov	r1, r3
 800df04:	f44f 730a 	mov.w	r3, #552	; 0x228
 800df08:	461a      	mov	r2, r3
 800df0a:	f017 fc97 	bl	802583c <memcpy>
	UNUSED(App_data_Traverser);
}
 800df0e:	bf00      	nop
 800df10:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800df14:	46bd      	mov	sp, r7
 800df16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800df1a:	bf00      	nop
 800df1c:	200045ac 	.word	0x200045ac
 800df20:	20004bb0 	.word	0x20004bb0
 800df24:	08029988 	.word	0x08029988
 800df28:	200062d9 	.word	0x200062d9
 800df2c:	20006940 	.word	0x20006940
 800df30:	20004384 	.word	0x20004384
 800df34:	2000415c 	.word	0x2000415c

0800df38 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800df3c:	4b4d      	ldr	r3, [pc, #308]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800df3e:	685b      	ldr	r3, [r3, #4]
 800df40:	4618      	mov	r0, r3
 800df42:	f002 f83d 	bl	800ffc0 <HAL_Elaps_Ticks>
 800df46:	4602      	mov	r2, r0
 800df48:	4b4b      	ldr	r3, [pc, #300]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800df4a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800df4e:	429a      	cmp	r2, r3
 800df50:	f240 808d 	bls.w	800e06e <ProcessSendingSignals2MIE+0x136>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800df54:	4b47      	ldr	r3, [pc, #284]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800df56:	781b      	ldrb	r3, [r3, #0]
		if(
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d113      	bne.n	800df84 <ProcessSendingSignals2MIE+0x4c>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800df5c:	4b45      	ldr	r3, [pc, #276]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800df5e:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800df60:	2b01      	cmp	r3, #1
 800df62:	d10f      	bne.n	800df84 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800df64:	4b45      	ldr	r3, [pc, #276]	; (800e07c <ProcessSendingSignals2MIE+0x144>)
 800df66:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800df68:	2b01      	cmp	r3, #1
 800df6a:	d10b      	bne.n	800df84 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800df6c:	4b44      	ldr	r3, [pc, #272]	; (800e080 <ProcessSendingSignals2MIE+0x148>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d107      	bne.n	800df84 <ProcessSendingSignals2MIE+0x4c>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800df74:	4b43      	ldr	r3, [pc, #268]	; (800e084 <ProcessSendingSignals2MIE+0x14c>)
 800df76:	881b      	ldrh	r3, [r3, #0]
 800df78:	461a      	mov	r2, r3
 800df7a:	4943      	ldr	r1, [pc, #268]	; (800e088 <ProcessSendingSignals2MIE+0x150>)
 800df7c:	4843      	ldr	r0, [pc, #268]	; (800e08c <ProcessSendingSignals2MIE+0x154>)
 800df7e:	f017 fc5d 	bl	802583c <memcpy>
 800df82:	e02d      	b.n	800dfe0 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800df84:	4b3d      	ldr	r3, [pc, #244]	; (800e07c <ProcessSendingSignals2MIE+0x144>)
 800df86:	781b      	ldrb	r3, [r3, #0]
 800df88:	2b01      	cmp	r3, #1
 800df8a:	d10f      	bne.n	800dfac <ProcessSendingSignals2MIE+0x74>
 800df8c:	4b3c      	ldr	r3, [pc, #240]	; (800e080 <ProcessSendingSignals2MIE+0x148>)
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10b      	bne.n	800dfac <ProcessSendingSignals2MIE+0x74>
 800df94:	4b37      	ldr	r3, [pc, #220]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	2b01      	cmp	r3, #1
 800df9a:	d107      	bne.n	800dfac <ProcessSendingSignals2MIE+0x74>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800df9c:	4b3c      	ldr	r3, [pc, #240]	; (800e090 <ProcessSendingSignals2MIE+0x158>)
 800df9e:	881b      	ldrh	r3, [r3, #0]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	493c      	ldr	r1, [pc, #240]	; (800e094 <ProcessSendingSignals2MIE+0x15c>)
 800dfa4:	4839      	ldr	r0, [pc, #228]	; (800e08c <ProcessSendingSignals2MIE+0x154>)
 800dfa6:	f017 fc49 	bl	802583c <memcpy>
 800dfaa:	e019      	b.n	800dfe0 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800dfac:	4b34      	ldr	r3, [pc, #208]	; (800e080 <ProcessSendingSignals2MIE+0x148>)
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	2b01      	cmp	r3, #1
 800dfb2:	d10f      	bne.n	800dfd4 <ProcessSendingSignals2MIE+0x9c>
 800dfb4:	4b31      	ldr	r3, [pc, #196]	; (800e07c <ProcessSendingSignals2MIE+0x144>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d10b      	bne.n	800dfd4 <ProcessSendingSignals2MIE+0x9c>
 800dfbc:	4b2d      	ldr	r3, [pc, #180]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800dfbe:	785b      	ldrb	r3, [r3, #1]
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d107      	bne.n	800dfd4 <ProcessSendingSignals2MIE+0x9c>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dfc4:	4b2f      	ldr	r3, [pc, #188]	; (800e084 <ProcessSendingSignals2MIE+0x14c>)
 800dfc6:	881b      	ldrh	r3, [r3, #0]
 800dfc8:	461a      	mov	r2, r3
 800dfca:	492f      	ldr	r1, [pc, #188]	; (800e088 <ProcessSendingSignals2MIE+0x150>)
 800dfcc:	482f      	ldr	r0, [pc, #188]	; (800e08c <ProcessSendingSignals2MIE+0x154>)
 800dfce:	f017 fc35 	bl	802583c <memcpy>
 800dfd2:	e005      	b.n	800dfe0 <ProcessSendingSignals2MIE+0xa8>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800dfd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dfd8:	2100      	movs	r1, #0
 800dfda:	482c      	ldr	r0, [pc, #176]	; (800e08c <ProcessSendingSignals2MIE+0x154>)
 800dfdc:	f017 fc56 	bl	802588c <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800dfe0:	4b27      	ldr	r3, [pc, #156]	; (800e080 <ProcessSendingSignals2MIE+0x148>)
 800dfe2:	885b      	ldrh	r3, [r3, #2]
 800dfe4:	461a      	mov	r2, r3
 800dfe6:	4b24      	ldr	r3, [pc, #144]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800dfe8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d30d      	bcc.n	800e00c <ProcessSendingSignals2MIE+0xd4>
 800dff0:	4b22      	ldr	r3, [pc, #136]	; (800e07c <ProcessSendingSignals2MIE+0x144>)
 800dff2:	885b      	ldrh	r3, [r3, #2]
 800dff4:	461a      	mov	r2, r3
 800dff6:	4b20      	ldr	r3, [pc, #128]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800dff8:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800dffc:	429a      	cmp	r2, r3
 800dffe:	d305      	bcc.n	800e00c <ProcessSendingSignals2MIE+0xd4>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e000:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e004:	2100      	movs	r1, #0
 800e006:	4821      	ldr	r0, [pc, #132]	; (800e08c <ProcessSendingSignals2MIE+0x154>)
 800e008:	f017 fc40 	bl	802588c <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800e00c:	4b1a      	ldr	r3, [pc, #104]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800e00e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e012:	f003 0307 	and.w	r3, r3, #7
 800e016:	b29a      	uxth	r2, r3
 800e018:	4b1f      	ldr	r3, [pc, #124]	; (800e098 <ProcessSendingSignals2MIE+0x160>)
 800e01a:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800e01c:	4b1e      	ldr	r3, [pc, #120]	; (800e098 <ProcessSendingSignals2MIE+0x160>)
 800e01e:	881b      	ldrh	r3, [r3, #0]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d009      	beq.n	800e038 <ProcessSendingSignals2MIE+0x100>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800e024:	4b14      	ldr	r3, [pc, #80]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800e026:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e02a:	08db      	lsrs	r3, r3, #3
 800e02c:	b29b      	uxth	r3, r3
 800e02e:	3301      	adds	r3, #1
 800e030:	b29a      	uxth	r2, r3
 800e032:	4b19      	ldr	r3, [pc, #100]	; (800e098 <ProcessSendingSignals2MIE+0x160>)
 800e034:	801a      	strh	r2, [r3, #0]
 800e036:	e006      	b.n	800e046 <ProcessSendingSignals2MIE+0x10e>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800e038:	4b0f      	ldr	r3, [pc, #60]	; (800e078 <ProcessSendingSignals2MIE+0x140>)
 800e03a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e03e:	08db      	lsrs	r3, r3, #3
 800e040:	b29a      	uxth	r2, r3
 800e042:	4b15      	ldr	r3, [pc, #84]	; (800e098 <ProcessSendingSignals2MIE+0x160>)
 800e044:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800e046:	4915      	ldr	r1, [pc, #84]	; (800e09c <ProcessSendingSignals2MIE+0x164>)
 800e048:	4815      	ldr	r0, [pc, #84]	; (800e0a0 <ProcessSendingSignals2MIE+0x168>)
 800e04a:	f7f2 f8f9 	bl	8000240 <strcmp>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d007      	beq.n	800e064 <ProcessSendingSignals2MIE+0x12c>
 800e054:	4b07      	ldr	r3, [pc, #28]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800e056:	785b      	ldrb	r3, [r3, #1]
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d103      	bne.n	800e064 <ProcessSendingSignals2MIE+0x12c>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800e05c:	f240 1019 	movw	r0, #281	; 0x119
 800e060:	f002 fd2a 	bl	8010ab8 <TransmitCanPkt>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800e064:	f00a fde4 	bl	8018c30 <HAL_GetTick>
 800e068:	4603      	mov	r3, r0
 800e06a:	4a02      	ldr	r2, [pc, #8]	; (800e074 <ProcessSendingSignals2MIE+0x13c>)
 800e06c:	6053      	str	r3, [r2, #4]
	}
}
 800e06e:	bf00      	nop
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20004bc4 	.word	0x20004bc4
 800e078:	20000504 	.word	0x20000504
 800e07c:	20004bbc 	.word	0x20004bbc
 800e080:	20004bb8 	.word	0x20004bb8
 800e084:	20004de4 	.word	0x20004de4
 800e088:	20004de8 	.word	0x20004de8
 800e08c:	20004be2 	.word	0x20004be2
 800e090:	20004fe8 	.word	0x20004fe8
 800e094:	20004fec 	.word	0x20004fec
 800e098:	20004be0 	.word	0x20004be0
 800e09c:	080298f4 	.word	0x080298f4
 800e0a0:	20000505 	.word	0x20000505

0800e0a4 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800e0a8:	4b0c      	ldr	r3, [pc, #48]	; (800e0dc <ProcessSelfSharing+0x38>)
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	f001 ff87 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e0b2:	4602      	mov	r2, r0
 800e0b4:	4b0a      	ldr	r3, [pc, #40]	; (800e0e0 <ProcessSelfSharing+0x3c>)
 800e0b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d90b      	bls.n	800e0d6 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800e0be:	4b09      	ldr	r3, [pc, #36]	; (800e0e4 <ProcessSelfSharing+0x40>)
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800e0c4:	f240 2002 	movw	r0, #514	; 0x202
 800e0c8:	f002 fcf6 	bl	8010ab8 <TransmitCanPkt>
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800e0cc:	f00a fdb0 	bl	8018c30 <HAL_GetTick>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	4a02      	ldr	r2, [pc, #8]	; (800e0dc <ProcessSelfSharing+0x38>)
 800e0d4:	6093      	str	r3, [r2, #8]
	}
}
 800e0d6:	bf00      	nop
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	20004bc4 	.word	0x20004bc4
 800e0e0:	20000504 	.word	0x20000504
 800e0e4:	20004bb8 	.word	0x20004bb8

0800e0e8 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800e0ec:	4b1a      	ldr	r3, [pc, #104]	; (800e158 <ProcessDetectNoValidDataReceive+0x70>)
 800e0ee:	68db      	ldr	r3, [r3, #12]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d014      	beq.n	800e11e <ProcessDetectNoValidDataReceive+0x36>
 800e0f4:	4b18      	ldr	r3, [pc, #96]	; (800e158 <ProcessDetectNoValidDataReceive+0x70>)
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f001 ff61 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e0fe:	4602      	mov	r2, r0
 800e100:	4b16      	ldr	r3, [pc, #88]	; (800e15c <ProcessDetectNoValidDataReceive+0x74>)
 800e102:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e106:	429a      	cmp	r2, r3
 800e108:	d909      	bls.n	800e11e <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e10a:	4b15      	ldr	r3, [pc, #84]	; (800e160 <ProcessDetectNoValidDataReceive+0x78>)
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d005      	beq.n	800e11e <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800e112:	4814      	ldr	r0, [pc, #80]	; (800e164 <ProcessDetectNoValidDataReceive+0x7c>)
 800e114:	f017 fd3e 	bl	8025b94 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e118:	4b11      	ldr	r3, [pc, #68]	; (800e160 <ProcessDetectNoValidDataReceive+0x78>)
 800e11a:	2200      	movs	r2, #0
 800e11c:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e11e:	4b10      	ldr	r3, [pc, #64]	; (800e160 <ProcessDetectNoValidDataReceive+0x78>)
 800e120:	885b      	ldrh	r3, [r3, #2]
 800e122:	461a      	mov	r2, r3
 800e124:	4b0d      	ldr	r3, [pc, #52]	; (800e15c <ProcessDetectNoValidDataReceive+0x74>)
 800e126:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d911      	bls.n	800e152 <ProcessDetectNoValidDataReceive+0x6a>
 800e12e:	4b0e      	ldr	r3, [pc, #56]	; (800e168 <ProcessDetectNoValidDataReceive+0x80>)
 800e130:	885b      	ldrh	r3, [r3, #2]
 800e132:	461a      	mov	r2, r3
 800e134:	4b09      	ldr	r3, [pc, #36]	; (800e15c <ProcessDetectNoValidDataReceive+0x74>)
 800e136:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d909      	bls.n	800e152 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e13e:	4b08      	ldr	r3, [pc, #32]	; (800e160 <ProcessDetectNoValidDataReceive+0x78>)
 800e140:	781b      	ldrb	r3, [r3, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d005      	beq.n	800e152 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800e146:	4809      	ldr	r0, [pc, #36]	; (800e16c <ProcessDetectNoValidDataReceive+0x84>)
 800e148:	f017 fd24 	bl	8025b94 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e14c:	4b04      	ldr	r3, [pc, #16]	; (800e160 <ProcessDetectNoValidDataReceive+0x78>)
 800e14e:	2200      	movs	r2, #0
 800e150:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800e152:	bf00      	nop
 800e154:	bd80      	pop	{r7, pc}
 800e156:	bf00      	nop
 800e158:	20004bc4 	.word	0x20004bc4
 800e15c:	20000504 	.word	0x20000504
 800e160:	20004bb8 	.word	0x20004bb8
 800e164:	080299b0 	.word	0x080299b0
 800e168:	20004bbc 	.word	0x20004bbc
 800e16c:	080299d0 	.word	0x080299d0

0800e170 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800e170:	b580      	push	{r7, lr}
 800e172:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800e174:	4b09      	ldr	r3, [pc, #36]	; (800e19c <SendRelays2Other+0x2c>)
 800e176:	691b      	ldr	r3, [r3, #16]
 800e178:	4618      	mov	r0, r3
 800e17a:	f001 ff21 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e17e:	4603      	mov	r3, r0
 800e180:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e184:	d908      	bls.n	800e198 <SendRelays2Other+0x28>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800e186:	f44f 7002 	mov.w	r0, #520	; 0x208
 800e18a:	f002 fc95 	bl	8010ab8 <TransmitCanPkt>
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800e18e:	f00a fd4f 	bl	8018c30 <HAL_GetTick>
 800e192:	4603      	mov	r3, r0
 800e194:	4a01      	ldr	r2, [pc, #4]	; (800e19c <SendRelays2Other+0x2c>)
 800e196:	6113      	str	r3, [r2, #16]

	}
}
 800e198:	bf00      	nop
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	20004bc4 	.word	0x20004bc4

0800e1a0 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800e1a4:	4b16      	ldr	r3, [pc, #88]	; (800e200 <CheckRelayMisMatch+0x60>)
 800e1a6:	695b      	ldr	r3, [r3, #20]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f001 ff09 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e1b4:	d922      	bls.n	800e1fc <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e1b6:	4b13      	ldr	r3, [pc, #76]	; (800e204 <CheckRelayMisMatch+0x64>)
 800e1b8:	781b      	ldrb	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10c      	bne.n	800e1d8 <CheckRelayMisMatch+0x38>
 800e1be:	4b12      	ldr	r3, [pc, #72]	; (800e208 <CheckRelayMisMatch+0x68>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	2b01      	cmp	r3, #1
 800e1c4:	d108      	bne.n	800e1d8 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800e1c6:	4a11      	ldr	r2, [pc, #68]	; (800e20c <CheckRelayMisMatch+0x6c>)
 800e1c8:	4b11      	ldr	r3, [pc, #68]	; (800e210 <CheckRelayMisMatch+0x70>)
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	4619      	mov	r1, r3
 800e1ce:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e1d2:	461a      	mov	r2, r3
 800e1d4:	f017 fb32 	bl	802583c <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800e1d8:	4b0d      	ldr	r3, [pc, #52]	; (800e210 <CheckRelayMisMatch+0x70>)
 800e1da:	885a      	ldrh	r2, [r3, #2]
 800e1dc:	4b0b      	ldr	r3, [pc, #44]	; (800e20c <CheckRelayMisMatch+0x6c>)
 800e1de:	885b      	ldrh	r3, [r3, #2]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	d003      	beq.n	800e1ec <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800e1e4:	4b06      	ldr	r3, [pc, #24]	; (800e200 <CheckRelayMisMatch+0x60>)
 800e1e6:	2201      	movs	r2, #1
 800e1e8:	701a      	strb	r2, [r3, #0]
 800e1ea:	e002      	b.n	800e1f2 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800e1ec:	4b04      	ldr	r3, [pc, #16]	; (800e200 <CheckRelayMisMatch+0x60>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800e1f2:	f00a fd1d 	bl	8018c30 <HAL_GetTick>
 800e1f6:	4603      	mov	r3, r0
 800e1f8:	4a01      	ldr	r2, [pc, #4]	; (800e200 <CheckRelayMisMatch+0x60>)
 800e1fa:	6153      	str	r3, [r2, #20]
	}
}
 800e1fc:	bf00      	nop
 800e1fe:	bd80      	pop	{r7, pc}
 800e200:	20004bc4 	.word	0x20004bc4
 800e204:	20004bb8 	.word	0x20004bb8
 800e208:	20004bbc 	.word	0x20004bbc
 800e20c:	20004de4 	.word	0x20004de4
 800e210:	20004fe8 	.word	0x20004fe8

0800e214 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800e218:	4b16      	ldr	r3, [pc, #88]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e21a:	785b      	ldrb	r3, [r3, #1]
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d101      	bne.n	800e224 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800e220:	f007 fa88 	bl	8015734 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800e224:	4b13      	ldr	r3, [pc, #76]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e226:	699b      	ldr	r3, [r3, #24]
 800e228:	4618      	mov	r0, r3
 800e22a:	f001 fec9 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e22e:	4602      	mov	r2, r0
 800e230:	4b11      	ldr	r3, [pc, #68]	; (800e278 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800e232:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800e236:	429a      	cmp	r2, r3
 800e238:	d31a      	bcc.n	800e270 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800e23a:	4b0e      	ldr	r3, [pc, #56]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e23c:	699a      	ldr	r2, [r3, #24]
 800e23e:	4b0f      	ldr	r3, [pc, #60]	; (800e27c <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	429a      	cmp	r2, r3
 800e244:	d014      	beq.n	800e270 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800e246:	4b0b      	ldr	r3, [pc, #44]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e248:	2200      	movs	r2, #0
 800e24a:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800e24c:	4b09      	ldr	r3, [pc, #36]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	4a0a      	ldr	r2, [pc, #40]	; (800e27c <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e252:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800e254:	4b07      	ldr	r3, [pc, #28]	; (800e274 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e256:	699b      	ldr	r3, [r3, #24]
 800e258:	4618      	mov	r0, r3
 800e25a:	f001 feb1 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e25e:	4603      	mov	r3, r0
 800e260:	4a07      	ldr	r2, [pc, #28]	; (800e280 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800e262:	fba2 2303 	umull	r2, r3, r2, r3
 800e266:	099b      	lsrs	r3, r3, #6
 800e268:	4619      	mov	r1, r3
 800e26a:	4806      	ldr	r0, [pc, #24]	; (800e284 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800e26c:	f017 fbf6 	bl	8025a5c <iprintf>
		}
	}
}
 800e270:	bf00      	nop
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20004bc4 	.word	0x20004bc4
 800e278:	20000504 	.word	0x20000504
 800e27c:	200062dc 	.word	0x200062dc
 800e280:	10624dd3 	.word	0x10624dd3
 800e284:	080299f4 	.word	0x080299f4

0800e288 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800e288:	b580      	push	{r7, lr}
 800e28a:	b086      	sub	sp, #24
 800e28c:	af00      	add	r7, sp, #0
 800e28e:	60f8      	str	r0, [r7, #12]
 800e290:	60b9      	str	r1, [r7, #8]
 800e292:	4611      	mov	r1, r2
 800e294:	461a      	mov	r2, r3
 800e296:	460b      	mov	r3, r1
 800e298:	80fb      	strh	r3, [r7, #6]
 800e29a:	4613      	mov	r3, r2
 800e29c:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800e29e:	484d      	ldr	r0, [pc, #308]	; (800e3d4 <Print_Siemens_MSG+0x14c>)
 800e2a0:	f017 fbdc 	bl	8025a5c <iprintf>
	if(TX_RX == TX)
 800e2a4:	797b      	ldrb	r3, [r7, #5]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d103      	bne.n	800e2b2 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800e2aa:	484b      	ldr	r0, [pc, #300]	; (800e3d8 <Print_Siemens_MSG+0x150>)
 800e2ac:	f017 fbd6 	bl	8025a5c <iprintf>
 800e2b0:	e005      	b.n	800e2be <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800e2b2:	797b      	ldrb	r3, [r7, #5]
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	d102      	bne.n	800e2be <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800e2b8:	4848      	ldr	r0, [pc, #288]	; (800e3dc <Print_Siemens_MSG+0x154>)
 800e2ba:	f017 fbcf 	bl	8025a5c <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	781b      	ldrb	r3, [r3, #0]
 800e2c2:	4619      	mov	r1, r3
 800e2c4:	4846      	ldr	r0, [pc, #280]	; (800e3e0 <Print_Siemens_MSG+0x158>)
 800e2c6:	f017 fbc9 	bl	8025a5c <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	4844      	ldr	r0, [pc, #272]	; (800e3e4 <Print_Siemens_MSG+0x15c>)
 800e2d2:	f017 fbc3 	bl	8025a5c <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	7b1b      	ldrb	r3, [r3, #12]
 800e2da:	4619      	mov	r1, r3
 800e2dc:	4842      	ldr	r0, [pc, #264]	; (800e3e8 <Print_Siemens_MSG+0x160>)
 800e2de:	f017 fbbd 	bl	8025a5c <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	695b      	ldr	r3, [r3, #20]
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4840      	ldr	r0, [pc, #256]	; (800e3ec <Print_Siemens_MSG+0x164>)
 800e2ea:	f017 fbb7 	bl	8025a5c <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	7e1b      	ldrb	r3, [r3, #24]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	483e      	ldr	r0, [pc, #248]	; (800e3f0 <Print_Siemens_MSG+0x168>)
 800e2f6:	f017 fbb1 	bl	8025a5c <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	7e5b      	ldrb	r3, [r3, #25]
 800e2fe:	4619      	mov	r1, r3
 800e300:	483c      	ldr	r0, [pc, #240]	; (800e3f4 <Print_Siemens_MSG+0x16c>)
 800e302:	f017 fbab 	bl	8025a5c <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	7e9b      	ldrb	r3, [r3, #26]
 800e30a:	4619      	mov	r1, r3
 800e30c:	483a      	ldr	r0, [pc, #232]	; (800e3f8 <Print_Siemens_MSG+0x170>)
 800e30e:	f017 fba5 	bl	8025a5c <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	7edb      	ldrb	r3, [r3, #27]
 800e316:	4619      	mov	r1, r3
 800e318:	4838      	ldr	r0, [pc, #224]	; (800e3fc <Print_Siemens_MSG+0x174>)
 800e31a:	f017 fb9f 	bl	8025a5c <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	69db      	ldr	r3, [r3, #28]
 800e322:	4619      	mov	r1, r3
 800e324:	4836      	ldr	r0, [pc, #216]	; (800e400 <Print_Siemens_MSG+0x178>)
 800e326:	f017 fb99 	bl	8025a5c <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6a1b      	ldr	r3, [r3, #32]
 800e32e:	4619      	mov	r1, r3
 800e330:	4834      	ldr	r0, [pc, #208]	; (800e404 <Print_Siemens_MSG+0x17c>)
 800e332:	f017 fb93 	bl	8025a5c <iprintf>
	if(TX_RX == RX)
 800e336:	797b      	ldrb	r3, [r7, #5]
 800e338:	2b02      	cmp	r3, #2
 800e33a:	d122      	bne.n	800e382 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e340:	4619      	mov	r1, r3
 800e342:	4831      	ldr	r0, [pc, #196]	; (800e408 <Print_Siemens_MSG+0x180>)
 800e344:	f017 fb8a 	bl	8025a5c <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e348:	2300      	movs	r3, #0
 800e34a:	82fb      	strh	r3, [r7, #22]
 800e34c:	e00b      	b.n	800e366 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e34e:	8afb      	ldrh	r3, [r7, #22]
 800e350:	68fa      	ldr	r2, [r7, #12]
 800e352:	4413      	add	r3, r2
 800e354:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e358:	4619      	mov	r1, r3
 800e35a:	482c      	ldr	r0, [pc, #176]	; (800e40c <Print_Siemens_MSG+0x184>)
 800e35c:	f017 fb7e 	bl	8025a5c <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e360:	8afb      	ldrh	r3, [r7, #22]
 800e362:	3301      	adds	r3, #1
 800e364:	82fb      	strh	r3, [r7, #22]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e36a:	8afa      	ldrh	r2, [r7, #22]
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d3ee      	bcc.n	800e34e <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e370:	200a      	movs	r0, #10
 800e372:	f017 fb8b 	bl	8025a8c <putchar>

		if(Debug_flag == 2)
 800e376:	4b26      	ldr	r3, [pc, #152]	; (800e410 <Print_Siemens_MSG+0x188>)
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	2b02      	cmp	r3, #2
 800e37c:	d101      	bne.n	800e382 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e37e:	f000 ff65 	bl	800f24c <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e382:	4b23      	ldr	r3, [pc, #140]	; (800e410 <Print_Siemens_MSG+0x188>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d120      	bne.n	800e3cc <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e38a:	2300      	movs	r3, #0
 800e38c:	82bb      	strh	r3, [r7, #20]
 800e38e:	e016      	b.n	800e3be <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e390:	8abb      	ldrh	r3, [r7, #20]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d008      	beq.n	800e3a8 <Print_Siemens_MSG+0x120>
 800e396:	8abb      	ldrh	r3, [r7, #20]
 800e398:	f003 031f 	and.w	r3, r3, #31
 800e39c:	b29b      	uxth	r3, r3
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d102      	bne.n	800e3a8 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e3a2:	200a      	movs	r0, #10
 800e3a4:	f017 fb72 	bl	8025a8c <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e3a8:	8abb      	ldrh	r3, [r7, #20]
 800e3aa:	68ba      	ldr	r2, [r7, #8]
 800e3ac:	4413      	add	r3, r2
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	4619      	mov	r1, r3
 800e3b2:	4816      	ldr	r0, [pc, #88]	; (800e40c <Print_Siemens_MSG+0x184>)
 800e3b4:	f017 fb52 	bl	8025a5c <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e3b8:	8abb      	ldrh	r3, [r7, #20]
 800e3ba:	3301      	adds	r3, #1
 800e3bc:	82bb      	strh	r3, [r7, #20]
 800e3be:	8aba      	ldrh	r2, [r7, #20]
 800e3c0:	88fb      	ldrh	r3, [r7, #6]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d3e4      	bcc.n	800e390 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e3c6:	200a      	movs	r0, #10
 800e3c8:	f017 fb60 	bl	8025a8c <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e3cc:	bf00      	nop
 800e3ce:	3718      	adds	r7, #24
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	08029a24 	.word	0x08029a24
 800e3d8:	08029a2c 	.word	0x08029a2c
 800e3dc:	08029a30 	.word	0x08029a30
 800e3e0:	08029a34 	.word	0x08029a34
 800e3e4:	08029a3c 	.word	0x08029a3c
 800e3e8:	08029a44 	.word	0x08029a44
 800e3ec:	08029a4c 	.word	0x08029a4c
 800e3f0:	08029a54 	.word	0x08029a54
 800e3f4:	08029a60 	.word	0x08029a60
 800e3f8:	08029a68 	.word	0x08029a68
 800e3fc:	08029a70 	.word	0x08029a70
 800e400:	08029a78 	.word	0x08029a78
 800e404:	08029a84 	.word	0x08029a84
 800e408:	08029a90 	.word	0x08029a90
 800e40c:	08029a98 	.word	0x08029a98
 800e410:	20000bbb 	.word	0x20000bbb

0800e414 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b09a      	sub	sp, #104	; 0x68
 800e418:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e41a:	2300      	movs	r3, #0
 800e41c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e420:	2300      	movs	r3, #0
 800e422:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800e426:	2300      	movs	r3, #0
 800e428:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800e42c:	2300      	movs	r3, #0
 800e42e:	603b      	str	r3, [r7, #0]
 800e430:	1d3b      	adds	r3, r7, #4
 800e432:	2260      	movs	r2, #96	; 0x60
 800e434:	2100      	movs	r1, #0
 800e436:	4618      	mov	r0, r3
 800e438:	f017 fa28 	bl	802588c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800e43c:	4bb9      	ldr	r3, [pc, #740]	; (800e724 <Chech_forSiemensCMD+0x310>)
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	4618      	mov	r0, r3
 800e442:	f001 fdbd 	bl	800ffc0 <HAL_Elaps_Ticks>
 800e446:	4603      	mov	r3, r0
 800e448:	2b09      	cmp	r3, #9
 800e44a:	f240 81ad 	bls.w	800e7a8 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800e44e:	e010      	b.n	800e472 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800e450:	2000      	movs	r0, #0
 800e452:	f00a f8c5 	bl	80185e0 <Com_Get_Byte>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800e45c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e460:	1c5a      	adds	r2, r3, #1
 800e462:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800e466:	3368      	adds	r3, #104	; 0x68
 800e468:	443b      	add	r3, r7
 800e46a:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e46e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800e472:	2000      	movs	r0, #0
 800e474:	f00a f874 	bl	8018560 <Com_DataReady>
 800e478:	4603      	mov	r3, r0
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d1e8      	bne.n	800e450 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800e47e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8144 	beq.w	800e710 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800e488:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e48c:	3368      	adds	r3, #104	; 0x68
 800e48e:	443b      	add	r3, r7
 800e490:	2200      	movs	r2, #0
 800e492:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800e496:	463b      	mov	r3, r7
 800e498:	4619      	mov	r1, r3
 800e49a:	48a3      	ldr	r0, [pc, #652]	; (800e728 <Chech_forSiemensCMD+0x314>)
 800e49c:	f017 fade 	bl	8025a5c <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800e4a0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800e4a4:	463b      	mov	r3, r7
 800e4a6:	4611      	mov	r1, r2
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	f000 faf3 	bl	800ea94 <Is_SiemensCommand_Valid>
 800e4ae:	4603      	mov	r3, r0
 800e4b0:	2b0c      	cmp	r3, #12
 800e4b2:	f200 8129 	bhi.w	800e708 <Chech_forSiemensCMD+0x2f4>
 800e4b6:	a201      	add	r2, pc, #4	; (adr r2, 800e4bc <Chech_forSiemensCMD+0xa8>)
 800e4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4bc:	0800e4f1 	.word	0x0800e4f1
 800e4c0:	0800e4ff 	.word	0x0800e4ff
 800e4c4:	0800e563 	.word	0x0800e563
 800e4c8:	0800e585 	.word	0x0800e585
 800e4cc:	0800e5ad 	.word	0x0800e5ad
 800e4d0:	0800e5d5 	.word	0x0800e5d5
 800e4d4:	0800e5fd 	.word	0x0800e5fd
 800e4d8:	0800e625 	.word	0x0800e625
 800e4dc:	0800e64d 	.word	0x0800e64d
 800e4e0:	0800e675 	.word	0x0800e675
 800e4e4:	0800e69d 	.word	0x0800e69d
 800e4e8:	0800e6c5 	.word	0x0800e6c5
 800e4ec:	0800e6ed 	.word	0x0800e6ed
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800e4f0:	4b8e      	ldr	r3, [pc, #568]	; (800e72c <Chech_forSiemensCMD+0x318>)
 800e4f2:	2201      	movs	r2, #1
 800e4f4:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800e4f6:	488e      	ldr	r0, [pc, #568]	; (800e730 <Chech_forSiemensCMD+0x31c>)
 800e4f8:	f017 fb4c 	bl	8025b94 <puts>
				break;
 800e4fc:	e109      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800e4fe:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e502:	3b01      	subs	r3, #1
 800e504:	3368      	adds	r3, #104	; 0x68
 800e506:	443b      	add	r3, r7
 800e508:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e50c:	3b30      	subs	r3, #48	; 0x30
 800e50e:	461a      	mov	r2, r3
 800e510:	4988      	ldr	r1, [pc, #544]	; (800e734 <Chech_forSiemensCMD+0x320>)
 800e512:	4889      	ldr	r0, [pc, #548]	; (800e738 <Chech_forSiemensCMD+0x324>)
 800e514:	f017 faa2 	bl	8025a5c <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800e518:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e51c:	3b01      	subs	r3, #1
 800e51e:	3368      	adds	r3, #104	; 0x68
 800e520:	443b      	add	r3, r7
 800e522:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e526:	2b2f      	cmp	r3, #47	; 0x2f
 800e528:	d914      	bls.n	800e554 <Chech_forSiemensCMD+0x140>
 800e52a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e52e:	3b01      	subs	r3, #1
 800e530:	3368      	adds	r3, #104	; 0x68
 800e532:	443b      	add	r3, r7
 800e534:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e538:	2b32      	cmp	r3, #50	; 0x32
 800e53a:	d80b      	bhi.n	800e554 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800e53c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e540:	3b01      	subs	r3, #1
 800e542:	3368      	adds	r3, #104	; 0x68
 800e544:	443b      	add	r3, r7
 800e546:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e54a:	3b30      	subs	r3, #48	; 0x30
 800e54c:	b2da      	uxtb	r2, r3
 800e54e:	4b7b      	ldr	r3, [pc, #492]	; (800e73c <Chech_forSiemensCMD+0x328>)
 800e550:	701a      	strb	r2, [r3, #0]
 800e552:	e002      	b.n	800e55a <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800e554:	487a      	ldr	r0, [pc, #488]	; (800e740 <Chech_forSiemensCMD+0x32c>)
 800e556:	f017 fb1d 	bl	8025b94 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800e55a:	2301      	movs	r3, #1
 800e55c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e560:	e0d7      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800e562:	4978      	ldr	r1, [pc, #480]	; (800e744 <Chech_forSiemensCMD+0x330>)
 800e564:	4878      	ldr	r0, [pc, #480]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e566:	f017 fa79 	bl	8025a5c <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800e56a:	4878      	ldr	r0, [pc, #480]	; (800e74c <Chech_forSiemensCMD+0x338>)
 800e56c:	f017 fb12 	bl	8025b94 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e570:	4b77      	ldr	r3, [pc, #476]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f043 0301 	orr.w	r3, r3, #1
 800e578:	4a75      	ldr	r2, [pc, #468]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e57a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e57c:	2301      	movs	r3, #1
 800e57e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e582:	e0c6      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800e584:	4973      	ldr	r1, [pc, #460]	; (800e754 <Chech_forSiemensCMD+0x340>)
 800e586:	4870      	ldr	r0, [pc, #448]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e588:	f017 fa68 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800e58c:	4872      	ldr	r0, [pc, #456]	; (800e758 <Chech_forSiemensCMD+0x344>)
 800e58e:	f017 fb01 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e592:	4b6f      	ldr	r3, [pc, #444]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e594:	2200      	movs	r2, #0
 800e596:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e598:	4b6d      	ldr	r3, [pc, #436]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	f043 0302 	orr.w	r3, r3, #2
 800e5a0:	4a6b      	ldr	r2, [pc, #428]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5a2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e5aa:	e0b2      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800e5ac:	496b      	ldr	r1, [pc, #428]	; (800e75c <Chech_forSiemensCMD+0x348>)
 800e5ae:	4866      	ldr	r0, [pc, #408]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e5b0:	f017 fa54 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800e5b4:	486a      	ldr	r0, [pc, #424]	; (800e760 <Chech_forSiemensCMD+0x34c>)
 800e5b6:	f017 faed 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e5ba:	4b65      	ldr	r3, [pc, #404]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e5c0:	4b63      	ldr	r3, [pc, #396]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	f043 0304 	orr.w	r3, r3, #4
 800e5c8:	4a61      	ldr	r2, [pc, #388]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5ca:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5cc:	2301      	movs	r3, #1
 800e5ce:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e5d2:	e09e      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800e5d4:	4963      	ldr	r1, [pc, #396]	; (800e764 <Chech_forSiemensCMD+0x350>)
 800e5d6:	485c      	ldr	r0, [pc, #368]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e5d8:	f017 fa40 	bl	8025a5c <iprintf>
				printf("INVALID_DES_PORT\n");
 800e5dc:	4862      	ldr	r0, [pc, #392]	; (800e768 <Chech_forSiemensCMD+0x354>)
 800e5de:	f017 fad9 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e5e2:	4b5b      	ldr	r3, [pc, #364]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e5e8:	4b59      	ldr	r3, [pc, #356]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	f043 0308 	orr.w	r3, r3, #8
 800e5f0:	4a57      	ldr	r2, [pc, #348]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e5f2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e5fa:	e08a      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800e5fc:	495b      	ldr	r1, [pc, #364]	; (800e76c <Chech_forSiemensCMD+0x358>)
 800e5fe:	4852      	ldr	r0, [pc, #328]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e600:	f017 fa2c 	bl	8025a5c <iprintf>
				printf("INVALID_SRC_PORT\n");
 800e604:	485a      	ldr	r0, [pc, #360]	; (800e770 <Chech_forSiemensCMD+0x35c>)
 800e606:	f017 fac5 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e60a:	4b51      	ldr	r3, [pc, #324]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e60c:	2200      	movs	r2, #0
 800e60e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e610:	4b4f      	ldr	r3, [pc, #316]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f043 0310 	orr.w	r3, r3, #16
 800e618:	4a4d      	ldr	r2, [pc, #308]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e61a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e61c:	2301      	movs	r3, #1
 800e61e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e622:	e076      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800e624:	4953      	ldr	r1, [pc, #332]	; (800e774 <Chech_forSiemensCMD+0x360>)
 800e626:	4848      	ldr	r0, [pc, #288]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e628:	f017 fa18 	bl	8025a5c <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800e62c:	4852      	ldr	r0, [pc, #328]	; (800e778 <Chech_forSiemensCMD+0x364>)
 800e62e:	f017 fab1 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e632:	4b47      	ldr	r3, [pc, #284]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e634:	2200      	movs	r2, #0
 800e636:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e638:	4b45      	ldr	r3, [pc, #276]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f043 0320 	orr.w	r3, r3, #32
 800e640:	4a43      	ldr	r2, [pc, #268]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e642:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e644:	2301      	movs	r3, #1
 800e646:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e64a:	e062      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800e64c:	494b      	ldr	r1, [pc, #300]	; (800e77c <Chech_forSiemensCMD+0x368>)
 800e64e:	484c      	ldr	r0, [pc, #304]	; (800e780 <Chech_forSiemensCMD+0x36c>)
 800e650:	f017 fa04 	bl	8025a5c <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800e654:	484b      	ldr	r0, [pc, #300]	; (800e784 <Chech_forSiemensCMD+0x370>)
 800e656:	f017 fa9d 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e65a:	4b3d      	ldr	r3, [pc, #244]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e65c:	2200      	movs	r2, #0
 800e65e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e660:	4b3b      	ldr	r3, [pc, #236]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e668:	4a39      	ldr	r2, [pc, #228]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e66a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e66c:	2301      	movs	r3, #1
 800e66e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e672:	e04e      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800e674:	4944      	ldr	r1, [pc, #272]	; (800e788 <Chech_forSiemensCMD+0x374>)
 800e676:	4834      	ldr	r0, [pc, #208]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e678:	f017 f9f0 	bl	8025a5c <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800e67c:	4843      	ldr	r0, [pc, #268]	; (800e78c <Chech_forSiemensCMD+0x378>)
 800e67e:	f017 fa89 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e682:	4b33      	ldr	r3, [pc, #204]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e684:	2200      	movs	r2, #0
 800e686:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e688:	4b31      	ldr	r3, [pc, #196]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e690:	4a2f      	ldr	r2, [pc, #188]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e692:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e694:	2301      	movs	r3, #1
 800e696:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e69a:	e03a      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800e69c:	493c      	ldr	r1, [pc, #240]	; (800e790 <Chech_forSiemensCMD+0x37c>)
 800e69e:	482a      	ldr	r0, [pc, #168]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e6a0:	f017 f9dc 	bl	8025a5c <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800e6a4:	483b      	ldr	r0, [pc, #236]	; (800e794 <Chech_forSiemensCMD+0x380>)
 800e6a6:	f017 fa75 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e6aa:	4b29      	ldr	r3, [pc, #164]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e6b0:	4b27      	ldr	r3, [pc, #156]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6b8:	4a25      	ldr	r2, [pc, #148]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6ba:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e6bc:	2301      	movs	r3, #1
 800e6be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e6c2:	e026      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800e6c4:	4934      	ldr	r1, [pc, #208]	; (800e798 <Chech_forSiemensCMD+0x384>)
 800e6c6:	4820      	ldr	r0, [pc, #128]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e6c8:	f017 f9c8 	bl	8025a5c <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800e6cc:	4833      	ldr	r0, [pc, #204]	; (800e79c <Chech_forSiemensCMD+0x388>)
 800e6ce:	f017 fa61 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e6d2:	4b1f      	ldr	r3, [pc, #124]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6d4:	2200      	movs	r2, #0
 800e6d6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e6d8:	4b1d      	ldr	r3, [pc, #116]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e6e0:	4a1b      	ldr	r2, [pc, #108]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6e2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e6ea:	e012      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800e6ec:	492c      	ldr	r1, [pc, #176]	; (800e7a0 <Chech_forSiemensCMD+0x38c>)
 800e6ee:	4816      	ldr	r0, [pc, #88]	; (800e748 <Chech_forSiemensCMD+0x334>)
 800e6f0:	f017 f9b4 	bl	8025a5c <iprintf>
				printf("CLEAR ALL\n");
 800e6f4:	482b      	ldr	r0, [pc, #172]	; (800e7a4 <Chech_forSiemensCMD+0x390>)
 800e6f6:	f017 fa4d 	bl	8025b94 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e6fa:	4b15      	ldr	r3, [pc, #84]	; (800e750 <Chech_forSiemensCMD+0x33c>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800e700:	2301      	movs	r3, #1
 800e702:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e706:	e004      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800e708:	480d      	ldr	r0, [pc, #52]	; (800e740 <Chech_forSiemensCMD+0x32c>)
 800e70a:	f017 fa43 	bl	8025b94 <puts>
 800e70e:	e000      	b.n	800e712 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800e710:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800e712:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e716:	2b01      	cmp	r3, #1
 800e718:	d147      	bne.n	800e7aa <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800e71a:	f240 2005 	movw	r0, #517	; 0x205
 800e71e:	f002 f9cb 	bl	8010ab8 <TransmitCanPkt>
 800e722:	e042      	b.n	800e7aa <Chech_forSiemensCMD+0x396>
 800e724:	2000bf34 	.word	0x2000bf34
 800e728:	08029aa0 	.word	0x08029aa0
 800e72c:	20000bba 	.word	0x20000bba
 800e730:	08029ab8 	.word	0x08029ab8
 800e734:	20005f22 	.word	0x20005f22
 800e738:	08029af8 	.word	0x08029af8
 800e73c:	20000bbb 	.word	0x20000bbb
 800e740:	08029b0c 	.word	0x08029b0c
 800e744:	20005f54 	.word	0x20005f54
 800e748:	08029b28 	.word	0x08029b28
 800e74c:	08029b38 	.word	0x08029b38
 800e750:	20004bb0 	.word	0x20004bb0
 800e754:	20005f86 	.word	0x20005f86
 800e758:	08029b50 	.word	0x08029b50
 800e75c:	20005fb8 	.word	0x20005fb8
 800e760:	08029b68 	.word	0x08029b68
 800e764:	20005fea 	.word	0x20005fea
 800e768:	08029b7c 	.word	0x08029b7c
 800e76c:	2000601c 	.word	0x2000601c
 800e770:	08029b90 	.word	0x08029b90
 800e774:	2000604e 	.word	0x2000604e
 800e778:	08029ba4 	.word	0x08029ba4
 800e77c:	20006080 	.word	0x20006080
 800e780:	08029bc0 	.word	0x08029bc0
 800e784:	08029bd8 	.word	0x08029bd8
 800e788:	200060b2 	.word	0x200060b2
 800e78c:	08029bec 	.word	0x08029bec
 800e790:	200060e4 	.word	0x200060e4
 800e794:	08029c04 	.word	0x08029c04
 800e798:	20006116 	.word	0x20006116
 800e79c:	08029c24 	.word	0x08029c24
 800e7a0:	20006148 	.word	0x20006148
 800e7a4:	08029c44 	.word	0x08029c44
		return;
 800e7a8:	bf00      	nop
		}
	}
}
 800e7aa:	3768      	adds	r7, #104	; 0x68
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bd80      	pop	{r7, pc}

0800e7b0 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800e7b0:	b4b0      	push	{r4, r5, r7}
 800e7b2:	b083      	sub	sp, #12
 800e7b4:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800e7ba:	79fb      	ldrb	r3, [r7, #7]
 800e7bc:	4aa6      	ldr	r2, [pc, #664]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e7be:	2132      	movs	r1, #50	; 0x32
 800e7c0:	fb01 f303 	mul.w	r3, r1, r3
 800e7c4:	4413      	add	r3, r2
 800e7c6:	2224      	movs	r2, #36	; 0x24
 800e7c8:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800e7ca:	79fb      	ldrb	r3, [r7, #7]
 800e7cc:	4aa2      	ldr	r2, [pc, #648]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e7ce:	2132      	movs	r1, #50	; 0x32
 800e7d0:	fb01 f303 	mul.w	r3, r1, r3
 800e7d4:	4413      	add	r3, r2
 800e7d6:	3301      	adds	r3, #1
 800e7d8:	2201      	movs	r2, #1
 800e7da:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800e7dc:	79fb      	ldrb	r3, [r7, #7]
 800e7de:	4a9e      	ldr	r2, [pc, #632]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e7e0:	2132      	movs	r1, #50	; 0x32
 800e7e2:	fb01 f303 	mul.w	r3, r1, r3
 800e7e6:	4413      	add	r3, r2
 800e7e8:	3302      	adds	r3, #2
 800e7ea:	2230      	movs	r2, #48	; 0x30
 800e7ec:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800e7ee:	79fb      	ldrb	r3, [r7, #7]
 800e7f0:	4a99      	ldr	r2, [pc, #612]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e7f2:	2132      	movs	r1, #50	; 0x32
 800e7f4:	fb01 f303 	mul.w	r3, r1, r3
 800e7f8:	4413      	add	r3, r2
 800e7fa:	3303      	adds	r3, #3
 800e7fc:	2240      	movs	r2, #64	; 0x40
 800e7fe:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800e800:	79fb      	ldrb	r3, [r7, #7]
 800e802:	4a95      	ldr	r2, [pc, #596]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e804:	2132      	movs	r1, #50	; 0x32
 800e806:	fb01 f303 	mul.w	r3, r1, r3
 800e80a:	4413      	add	r3, r2
 800e80c:	3304      	adds	r3, #4
 800e80e:	22c0      	movs	r2, #192	; 0xc0
 800e810:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800e812:	79fb      	ldrb	r3, [r7, #7]
 800e814:	4a90      	ldr	r2, [pc, #576]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e816:	2132      	movs	r1, #50	; 0x32
 800e818:	fb01 f303 	mul.w	r3, r1, r3
 800e81c:	4413      	add	r3, r2
 800e81e:	3305      	adds	r3, #5
 800e820:	224e      	movs	r2, #78	; 0x4e
 800e822:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800e824:	79fb      	ldrb	r3, [r7, #7]
 800e826:	4a8c      	ldr	r2, [pc, #560]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e828:	2132      	movs	r1, #50	; 0x32
 800e82a:	fb01 f303 	mul.w	r3, r1, r3
 800e82e:	4413      	add	r3, r2
 800e830:	3306      	adds	r3, #6
 800e832:	2226      	movs	r2, #38	; 0x26
 800e834:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800e836:	79fb      	ldrb	r3, [r7, #7]
 800e838:	3301      	adds	r3, #1
 800e83a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800e83c:	79fb      	ldrb	r3, [r7, #7]
 800e83e:	1c5a      	adds	r2, r3, #1
 800e840:	71fa      	strb	r2, [r7, #7]
 800e842:	461a      	mov	r2, r3
 800e844:	2332      	movs	r3, #50	; 0x32
 800e846:	fb02 f303 	mul.w	r3, r2, r3
 800e84a:	4a83      	ldr	r2, [pc, #524]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e84c:	4413      	add	r3, r2
 800e84e:	4983      	ldr	r1, [pc, #524]	; (800ea5c <Update_SiemensCommands+0x2ac>)
 800e850:	461a      	mov	r2, r3
 800e852:	460b      	mov	r3, r1
 800e854:	cb03      	ldmia	r3!, {r0, r1}
 800e856:	6010      	str	r0, [r2, #0]
 800e858:	6051      	str	r1, [r2, #4]
 800e85a:	8819      	ldrh	r1, [r3, #0]
 800e85c:	789b      	ldrb	r3, [r3, #2]
 800e85e:	8111      	strh	r1, [r2, #8]
 800e860:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800e862:	79fb      	ldrb	r3, [r7, #7]
 800e864:	1c5a      	adds	r2, r3, #1
 800e866:	71fa      	strb	r2, [r7, #7]
 800e868:	461a      	mov	r2, r3
 800e86a:	2332      	movs	r3, #50	; 0x32
 800e86c:	fb02 f303 	mul.w	r3, r2, r3
 800e870:	4a79      	ldr	r2, [pc, #484]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e872:	4413      	add	r3, r2
 800e874:	4a7a      	ldr	r2, [pc, #488]	; (800ea60 <Update_SiemensCommands+0x2b0>)
 800e876:	461d      	mov	r5, r3
 800e878:	4614      	mov	r4, r2
 800e87a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e87c:	6028      	str	r0, [r5, #0]
 800e87e:	6069      	str	r1, [r5, #4]
 800e880:	60aa      	str	r2, [r5, #8]
 800e882:	60eb      	str	r3, [r5, #12]
 800e884:	6820      	ldr	r0, [r4, #0]
 800e886:	6128      	str	r0, [r5, #16]
 800e888:	7923      	ldrb	r3, [r4, #4]
 800e88a:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800e88c:	79fb      	ldrb	r3, [r7, #7]
 800e88e:	1c5a      	adds	r2, r3, #1
 800e890:	71fa      	strb	r2, [r7, #7]
 800e892:	461a      	mov	r2, r3
 800e894:	2332      	movs	r3, #50	; 0x32
 800e896:	fb02 f303 	mul.w	r3, r2, r3
 800e89a:	4a6f      	ldr	r2, [pc, #444]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e89c:	4413      	add	r3, r2
 800e89e:	4a71      	ldr	r2, [pc, #452]	; (800ea64 <Update_SiemensCommands+0x2b4>)
 800e8a0:	461d      	mov	r5, r3
 800e8a2:	4614      	mov	r4, r2
 800e8a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8a6:	6028      	str	r0, [r5, #0]
 800e8a8:	6069      	str	r1, [r5, #4]
 800e8aa:	60aa      	str	r2, [r5, #8]
 800e8ac:	60eb      	str	r3, [r5, #12]
 800e8ae:	6820      	ldr	r0, [r4, #0]
 800e8b0:	6128      	str	r0, [r5, #16]
 800e8b2:	7923      	ldrb	r3, [r4, #4]
 800e8b4:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	1c5a      	adds	r2, r3, #1
 800e8ba:	71fa      	strb	r2, [r7, #7]
 800e8bc:	461a      	mov	r2, r3
 800e8be:	2332      	movs	r3, #50	; 0x32
 800e8c0:	fb02 f303 	mul.w	r3, r2, r3
 800e8c4:	4a64      	ldr	r2, [pc, #400]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e8c6:	4413      	add	r3, r2
 800e8c8:	4a67      	ldr	r2, [pc, #412]	; (800ea68 <Update_SiemensCommands+0x2b8>)
 800e8ca:	461d      	mov	r5, r3
 800e8cc:	4614      	mov	r4, r2
 800e8ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8d0:	6028      	str	r0, [r5, #0]
 800e8d2:	6069      	str	r1, [r5, #4]
 800e8d4:	60aa      	str	r2, [r5, #8]
 800e8d6:	60eb      	str	r3, [r5, #12]
 800e8d8:	7823      	ldrb	r3, [r4, #0]
 800e8da:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800e8dc:	79fb      	ldrb	r3, [r7, #7]
 800e8de:	1c5a      	adds	r2, r3, #1
 800e8e0:	71fa      	strb	r2, [r7, #7]
 800e8e2:	461a      	mov	r2, r3
 800e8e4:	2332      	movs	r3, #50	; 0x32
 800e8e6:	fb02 f303 	mul.w	r3, r2, r3
 800e8ea:	4a5b      	ldr	r2, [pc, #364]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e8ec:	4413      	add	r3, r2
 800e8ee:	4a5f      	ldr	r2, [pc, #380]	; (800ea6c <Update_SiemensCommands+0x2bc>)
 800e8f0:	461d      	mov	r5, r3
 800e8f2:	4614      	mov	r4, r2
 800e8f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e8f6:	6028      	str	r0, [r5, #0]
 800e8f8:	6069      	str	r1, [r5, #4]
 800e8fa:	60aa      	str	r2, [r5, #8]
 800e8fc:	60eb      	str	r3, [r5, #12]
 800e8fe:	7823      	ldrb	r3, [r4, #0]
 800e900:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800e902:	79fb      	ldrb	r3, [r7, #7]
 800e904:	1c5a      	adds	r2, r3, #1
 800e906:	71fa      	strb	r2, [r7, #7]
 800e908:	461a      	mov	r2, r3
 800e90a:	2332      	movs	r3, #50	; 0x32
 800e90c:	fb02 f303 	mul.w	r3, r2, r3
 800e910:	4a51      	ldr	r2, [pc, #324]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e912:	4413      	add	r3, r2
 800e914:	4a56      	ldr	r2, [pc, #344]	; (800ea70 <Update_SiemensCommands+0x2c0>)
 800e916:	461d      	mov	r5, r3
 800e918:	4614      	mov	r4, r2
 800e91a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e91c:	6028      	str	r0, [r5, #0]
 800e91e:	6069      	str	r1, [r5, #4]
 800e920:	60aa      	str	r2, [r5, #8]
 800e922:	60eb      	str	r3, [r5, #12]
 800e924:	7823      	ldrb	r3, [r4, #0]
 800e926:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800e928:	79fb      	ldrb	r3, [r7, #7]
 800e92a:	1c5a      	adds	r2, r3, #1
 800e92c:	71fa      	strb	r2, [r7, #7]
 800e92e:	461a      	mov	r2, r3
 800e930:	2332      	movs	r3, #50	; 0x32
 800e932:	fb02 f303 	mul.w	r3, r2, r3
 800e936:	4a48      	ldr	r2, [pc, #288]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e938:	4413      	add	r3, r2
 800e93a:	4a4e      	ldr	r2, [pc, #312]	; (800ea74 <Update_SiemensCommands+0x2c4>)
 800e93c:	461d      	mov	r5, r3
 800e93e:	4614      	mov	r4, r2
 800e940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e942:	6028      	str	r0, [r5, #0]
 800e944:	6069      	str	r1, [r5, #4]
 800e946:	60aa      	str	r2, [r5, #8]
 800e948:	60eb      	str	r3, [r5, #12]
 800e94a:	cc03      	ldmia	r4!, {r0, r1}
 800e94c:	6128      	str	r0, [r5, #16]
 800e94e:	6169      	str	r1, [r5, #20]
 800e950:	8823      	ldrh	r3, [r4, #0]
 800e952:	78a2      	ldrb	r2, [r4, #2]
 800e954:	832b      	strh	r3, [r5, #24]
 800e956:	4613      	mov	r3, r2
 800e958:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800e95a:	79fb      	ldrb	r3, [r7, #7]
 800e95c:	1c5a      	adds	r2, r3, #1
 800e95e:	71fa      	strb	r2, [r7, #7]
 800e960:	461a      	mov	r2, r3
 800e962:	2332      	movs	r3, #50	; 0x32
 800e964:	fb02 f303 	mul.w	r3, r2, r3
 800e968:	4a3b      	ldr	r2, [pc, #236]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e96a:	4413      	add	r3, r2
 800e96c:	4a42      	ldr	r2, [pc, #264]	; (800ea78 <Update_SiemensCommands+0x2c8>)
 800e96e:	461d      	mov	r5, r3
 800e970:	4614      	mov	r4, r2
 800e972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e974:	6028      	str	r0, [r5, #0]
 800e976:	6069      	str	r1, [r5, #4]
 800e978:	60aa      	str	r2, [r5, #8]
 800e97a:	60eb      	str	r3, [r5, #12]
 800e97c:	8823      	ldrh	r3, [r4, #0]
 800e97e:	78a2      	ldrb	r2, [r4, #2]
 800e980:	822b      	strh	r3, [r5, #16]
 800e982:	4613      	mov	r3, r2
 800e984:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800e986:	79fb      	ldrb	r3, [r7, #7]
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	71fa      	strb	r2, [r7, #7]
 800e98c:	461a      	mov	r2, r3
 800e98e:	2332      	movs	r3, #50	; 0x32
 800e990:	fb02 f303 	mul.w	r3, r2, r3
 800e994:	4a30      	ldr	r2, [pc, #192]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e996:	4413      	add	r3, r2
 800e998:	4a38      	ldr	r2, [pc, #224]	; (800ea7c <Update_SiemensCommands+0x2cc>)
 800e99a:	461d      	mov	r5, r3
 800e99c:	4614      	mov	r4, r2
 800e99e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9a0:	6028      	str	r0, [r5, #0]
 800e9a2:	6069      	str	r1, [r5, #4]
 800e9a4:	60aa      	str	r2, [r5, #8]
 800e9a6:	60eb      	str	r3, [r5, #12]
 800e9a8:	cc03      	ldmia	r4!, {r0, r1}
 800e9aa:	6128      	str	r0, [r5, #16]
 800e9ac:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800e9ae:	79fb      	ldrb	r3, [r7, #7]
 800e9b0:	1c5a      	adds	r2, r3, #1
 800e9b2:	71fa      	strb	r2, [r7, #7]
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	2332      	movs	r3, #50	; 0x32
 800e9b8:	fb02 f303 	mul.w	r3, r2, r3
 800e9bc:	4a26      	ldr	r2, [pc, #152]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e9be:	4413      	add	r3, r2
 800e9c0:	4a2f      	ldr	r2, [pc, #188]	; (800ea80 <Update_SiemensCommands+0x2d0>)
 800e9c2:	461c      	mov	r4, r3
 800e9c4:	4615      	mov	r5, r2
 800e9c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9c8:	6020      	str	r0, [r4, #0]
 800e9ca:	6061      	str	r1, [r4, #4]
 800e9cc:	60a2      	str	r2, [r4, #8]
 800e9ce:	60e3      	str	r3, [r4, #12]
 800e9d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9d2:	6120      	str	r0, [r4, #16]
 800e9d4:	6161      	str	r1, [r4, #20]
 800e9d6:	61a2      	str	r2, [r4, #24]
 800e9d8:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800e9da:	79fb      	ldrb	r3, [r7, #7]
 800e9dc:	1c5a      	adds	r2, r3, #1
 800e9de:	71fa      	strb	r2, [r7, #7]
 800e9e0:	461a      	mov	r2, r3
 800e9e2:	2332      	movs	r3, #50	; 0x32
 800e9e4:	fb02 f303 	mul.w	r3, r2, r3
 800e9e8:	4a1b      	ldr	r2, [pc, #108]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800e9ea:	4413      	add	r3, r2
 800e9ec:	4a25      	ldr	r2, [pc, #148]	; (800ea84 <Update_SiemensCommands+0x2d4>)
 800e9ee:	461d      	mov	r5, r3
 800e9f0:	4614      	mov	r4, r2
 800e9f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9f4:	6028      	str	r0, [r5, #0]
 800e9f6:	6069      	str	r1, [r5, #4]
 800e9f8:	60aa      	str	r2, [r5, #8]
 800e9fa:	60eb      	str	r3, [r5, #12]
 800e9fc:	cc07      	ldmia	r4!, {r0, r1, r2}
 800e9fe:	6128      	str	r0, [r5, #16]
 800ea00:	6169      	str	r1, [r5, #20]
 800ea02:	61aa      	str	r2, [r5, #24]
 800ea04:	7823      	ldrb	r3, [r4, #0]
 800ea06:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800ea08:	79fb      	ldrb	r3, [r7, #7]
 800ea0a:	1c5a      	adds	r2, r3, #1
 800ea0c:	71fa      	strb	r2, [r7, #7]
 800ea0e:	461a      	mov	r2, r3
 800ea10:	2332      	movs	r3, #50	; 0x32
 800ea12:	fb02 f303 	mul.w	r3, r2, r3
 800ea16:	4a10      	ldr	r2, [pc, #64]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800ea18:	4413      	add	r3, r2
 800ea1a:	491b      	ldr	r1, [pc, #108]	; (800ea88 <Update_SiemensCommands+0x2d8>)
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	460b      	mov	r3, r1
 800ea20:	cb03      	ldmia	r3!, {r0, r1}
 800ea22:	6010      	str	r0, [r2, #0]
 800ea24:	6051      	str	r1, [r2, #4]
 800ea26:	881b      	ldrh	r3, [r3, #0]
 800ea28:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800ea2a:	79fb      	ldrb	r3, [r7, #7]
 800ea2c:	1c5a      	adds	r2, r3, #1
 800ea2e:	71fa      	strb	r2, [r7, #7]
 800ea30:	461a      	mov	r2, r3
 800ea32:	2332      	movs	r3, #50	; 0x32
 800ea34:	fb02 f303 	mul.w	r3, r2, r3
 800ea38:	4a07      	ldr	r2, [pc, #28]	; (800ea58 <Update_SiemensCommands+0x2a8>)
 800ea3a:	4413      	add	r3, r2
 800ea3c:	4a13      	ldr	r2, [pc, #76]	; (800ea8c <Update_SiemensCommands+0x2dc>)
 800ea3e:	6810      	ldr	r0, [r2, #0]
 800ea40:	6018      	str	r0, [r3, #0]
 800ea42:	7912      	ldrb	r2, [r2, #4]
 800ea44:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ea46:	4a12      	ldr	r2, [pc, #72]	; (800ea90 <Update_SiemensCommands+0x2e0>)
 800ea48:	79fb      	ldrb	r3, [r7, #7]
 800ea4a:	7013      	strb	r3, [r2, #0]
}
 800ea4c:	bf00      	nop
 800ea4e:	370c      	adds	r7, #12
 800ea50:	46bd      	mov	sp, r7
 800ea52:	bcb0      	pop	{r4, r5, r7}
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	20005ef0 	.word	0x20005ef0
 800ea5c:	08029c50 	.word	0x08029c50
 800ea60:	08029b38 	.word	0x08029b38
 800ea64:	08029b50 	.word	0x08029b50
 800ea68:	08029b68 	.word	0x08029b68
 800ea6c:	08029b7c 	.word	0x08029b7c
 800ea70:	08029b90 	.word	0x08029b90
 800ea74:	08029c5c 	.word	0x08029c5c
 800ea78:	08029bd8 	.word	0x08029bd8
 800ea7c:	08029bec 	.word	0x08029bec
 800ea80:	08029c04 	.word	0x08029c04
 800ea84:	08029c24 	.word	0x08029c24
 800ea88:	08029c78 	.word	0x08029c78
 800ea8c:	08029c84 	.word	0x08029c84
 800ea90:	200062d8 	.word	0x200062d8

0800ea94 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800ea94:	b590      	push	{r4, r7, lr}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	73fb      	strb	r3, [r7, #15]
 800eaa4:	e01c      	b.n	800eae0 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	2232      	movs	r2, #50	; 0x32
 800eaaa:	fb02 f303 	mul.w	r3, r2, r3
 800eaae:	4a11      	ldr	r2, [pc, #68]	; (800eaf4 <Is_SiemensCommand_Valid+0x60>)
 800eab0:	189c      	adds	r4, r3, r2
 800eab2:	7bfb      	ldrb	r3, [r7, #15]
 800eab4:	2232      	movs	r2, #50	; 0x32
 800eab6:	fb02 f303 	mul.w	r3, r2, r3
 800eaba:	4a0e      	ldr	r2, [pc, #56]	; (800eaf4 <Is_SiemensCommand_Valid+0x60>)
 800eabc:	4413      	add	r3, r2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f7f1 fbc8 	bl	8000254 <strlen>
 800eac4:	4603      	mov	r3, r0
 800eac6:	461a      	mov	r2, r3
 800eac8:	4621      	mov	r1, r4
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f016 fea6 	bl	802581c <memcmp>
 800ead0:	4603      	mov	r3, r0
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d101      	bne.n	800eada <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800ead6:	7bfb      	ldrb	r3, [r7, #15]
 800ead8:	e008      	b.n	800eaec <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800eada:	7bfb      	ldrb	r3, [r7, #15]
 800eadc:	3301      	adds	r3, #1
 800eade:	73fb      	strb	r3, [r7, #15]
 800eae0:	4b05      	ldr	r3, [pc, #20]	; (800eaf8 <Is_SiemensCommand_Valid+0x64>)
 800eae2:	781b      	ldrb	r3, [r3, #0]
 800eae4:	7bfa      	ldrb	r2, [r7, #15]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d3dd      	bcc.n	800eaa6 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800eaea:	23ff      	movs	r3, #255	; 0xff
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	3714      	adds	r7, #20
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd90      	pop	{r4, r7, pc}
 800eaf4:	20005ef0 	.word	0x20005ef0
 800eaf8:	200062d8 	.word	0x200062d8

0800eafc <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b087      	sub	sp, #28
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800eb08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800eb0c:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800eb0e:	2300      	movs	r3, #0
 800eb10:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800eb12:	2300      	movs	r3, #0
 800eb14:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800eb16:	2300      	movs	r3, #0
 800eb18:	82bb      	strh	r3, [r7, #20]
 800eb1a:	e022      	b.n	800eb62 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800eb1c:	8abb      	ldrh	r3, [r7, #20]
 800eb1e:	687a      	ldr	r2, [r7, #4]
 800eb20:	4413      	add	r3, r2
 800eb22:	781b      	ldrb	r3, [r3, #0]
 800eb24:	b29a      	uxth	r2, r3
 800eb26:	8afb      	ldrh	r3, [r7, #22]
 800eb28:	4053      	eors	r3, r2
 800eb2a:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	613b      	str	r3, [r7, #16]
 800eb30:	e011      	b.n	800eb56 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800eb32:	8afb      	ldrh	r3, [r7, #22]
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d006      	beq.n	800eb4a <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800eb3c:	8afb      	ldrh	r3, [r7, #22]
 800eb3e:	085b      	lsrs	r3, r3, #1
 800eb40:	b29a      	uxth	r2, r3
 800eb42:	4b17      	ldr	r3, [pc, #92]	; (800eba0 <Siemens_CRC+0xa4>)
 800eb44:	4053      	eors	r3, r2
 800eb46:	82fb      	strh	r3, [r7, #22]
 800eb48:	e002      	b.n	800eb50 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800eb4a:	8afb      	ldrh	r3, [r7, #22]
 800eb4c:	085b      	lsrs	r3, r3, #1
 800eb4e:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800eb50:	693b      	ldr	r3, [r7, #16]
 800eb52:	3301      	adds	r3, #1
 800eb54:	613b      	str	r3, [r7, #16]
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	2b07      	cmp	r3, #7
 800eb5a:	ddea      	ble.n	800eb32 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800eb5c:	8abb      	ldrh	r3, [r7, #20]
 800eb5e:	3301      	adds	r3, #1
 800eb60:	82bb      	strh	r3, [r7, #20]
 800eb62:	8aba      	ldrh	r2, [r7, #20]
 800eb64:	887b      	ldrh	r3, [r7, #2]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d3d8      	bcc.n	800eb1c <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800eb6a:	8afb      	ldrh	r3, [r7, #22]
 800eb6c:	b2db      	uxtb	r3, r3
 800eb6e:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800eb70:	8afb      	ldrh	r3, [r7, #22]
 800eb72:	0a1b      	lsrs	r3, r3, #8
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800eb7a:	7b3b      	ldrb	r3, [r7, #12]
 800eb7c:	021b      	lsls	r3, r3, #8
 800eb7e:	b21a      	sxth	r2, r3
 800eb80:	7b7b      	ldrb	r3, [r7, #13]
 800eb82:	b21b      	sxth	r3, r3
 800eb84:	4313      	orrs	r3, r2
 800eb86:	b21b      	sxth	r3, r3
 800eb88:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800eb8a:	8afb      	ldrh	r3, [r7, #22]
 800eb8c:	43db      	mvns	r3, r3
 800eb8e:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800eb90:	8afb      	ldrh	r3, [r7, #22]
}
 800eb92:	4618      	mov	r0, r3
 800eb94:	371c      	adds	r7, #28
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr
 800eb9e:	bf00      	nop
 800eba0:	ffff8408 	.word	0xffff8408

0800eba4 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	603a      	str	r2, [r7, #0]
 800ebac:	461a      	mov	r2, r3
 800ebae:	4603      	mov	r3, r0
 800ebb0:	71fb      	strb	r3, [r7, #7]
 800ebb2:	460b      	mov	r3, r1
 800ebb4:	71bb      	strb	r3, [r7, #6]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800ebc2:	797b      	ldrb	r3, [r7, #5]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d010      	beq.n	800ebea <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800ebc8:	79bb      	ldrb	r3, [r7, #6]
 800ebca:	08db      	lsrs	r3, r3, #3
 800ebcc:	b2db      	uxtb	r3, r3
 800ebce:	797a      	ldrb	r2, [r7, #5]
 800ebd0:	4619      	mov	r1, r3
 800ebd2:	6838      	ldr	r0, [r7, #0]
 800ebd4:	f000 f8d0 	bl	800ed78 <Verify_parity>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d110      	bne.n	800ec00 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800ebde:	4840      	ldr	r0, [pc, #256]	; (800ece0 <Extract_Parity_Data+0x13c>)
 800ebe0:	f016 ffd8 	bl	8025b94 <puts>
			return -1;
 800ebe4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe8:	e075      	b.n	800ecd6 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800ebea:	79fb      	ldrb	r3, [r7, #7]
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	79ba      	ldrb	r2, [r7, #6]
 800ebf0:	b291      	uxth	r1, r2
 800ebf2:	683a      	ldr	r2, [r7, #0]
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7f1 fd0d 	bl	8000614 <ExtractBits>
 800ebfa:	6138      	str	r0, [r7, #16]
		return Return_value;
 800ebfc:	693b      	ldr	r3, [r7, #16]
 800ebfe:	e06a      	b.n	800ecd6 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800ec00:	79bb      	ldrb	r3, [r7, #6]
 800ec02:	2b08      	cmp	r3, #8
 800ec04:	d108      	bne.n	800ec18 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800ec0c:	7dfb      	ldrb	r3, [r7, #23]
 800ec0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec12:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800ec14:	7dfb      	ldrb	r3, [r7, #23]
 800ec16:	e05e      	b.n	800ecd6 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800ec18:	79bb      	ldrb	r3, [r7, #6]
 800ec1a:	2b18      	cmp	r3, #24
 800ec1c:	d15a      	bne.n	800ecd4 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	781b      	ldrb	r3, [r3, #0]
 800ec22:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	f003 0301 	and.w	r3, r3, #1
 800ec2a:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800ec2c:	7dfb      	ldrb	r3, [r7, #23]
 800ec2e:	085b      	lsrs	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	f003 0301 	and.w	r3, r3, #1
 800ec36:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800ec38:	7dfb      	ldrb	r3, [r7, #23]
 800ec3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec3e:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800ec40:	7dfb      	ldrb	r3, [r7, #23]
 800ec42:	089b      	lsrs	r3, r3, #2
 800ec44:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800ec46:	7dfb      	ldrb	r3, [r7, #23]
 800ec48:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	785b      	ldrb	r3, [r3, #1]
 800ec4e:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800ec50:	7dfb      	ldrb	r3, [r7, #23]
 800ec52:	f003 0301 	and.w	r3, r3, #1
 800ec56:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec5e:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800ec60:	7dfb      	ldrb	r3, [r7, #23]
 800ec62:	085b      	lsrs	r3, r3, #1
 800ec64:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800ec66:	7bbb      	ldrb	r3, [r7, #14]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d104      	bne.n	800ec76 <Extract_Parity_Data+0xd2>
 800ec6c:	7dfb      	ldrb	r3, [r7, #23]
 800ec6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ec72:	75fb      	strb	r3, [r7, #23]
 800ec74:	e003      	b.n	800ec7e <Extract_Parity_Data+0xda>
 800ec76:	7dfb      	ldrb	r3, [r7, #23]
 800ec78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ec7c:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800ec7e:	7bfb      	ldrb	r3, [r7, #15]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d104      	bne.n	800ec8e <Extract_Parity_Data+0xea>
 800ec84:	7dfb      	ldrb	r3, [r7, #23]
 800ec86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ec8a:	75fb      	strb	r3, [r7, #23]
 800ec8c:	e003      	b.n	800ec96 <Extract_Parity_Data+0xf2>
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec94:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800ec96:	693b      	ldr	r3, [r7, #16]
 800ec98:	021b      	lsls	r3, r3, #8
 800ec9a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
 800ec9e:	693a      	ldr	r2, [r7, #16]
 800eca0:	4413      	add	r3, r2
 800eca2:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	789b      	ldrb	r3, [r3, #2]
 800eca8:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800ecaa:	7b7b      	ldrb	r3, [r7, #13]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d104      	bne.n	800ecba <Extract_Parity_Data+0x116>
 800ecb0:	7dfb      	ldrb	r3, [r7, #23]
 800ecb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecb6:	75fb      	strb	r3, [r7, #23]
 800ecb8:	e003      	b.n	800ecc2 <Extract_Parity_Data+0x11e>
 800ecba:	7dfb      	ldrb	r3, [r7, #23]
 800ecbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ecc0:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	021b      	lsls	r3, r3, #8
 800ecc6:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800ecc8:	7dfb      	ldrb	r3, [r7, #23]
 800ecca:	693a      	ldr	r2, [r7, #16]
 800eccc:	4413      	add	r3, r2
 800ecce:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	e000      	b.n	800ecd6 <Extract_Parity_Data+0x132>
	}
	return 0;
 800ecd4:	2300      	movs	r3, #0
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3718      	adds	r7, #24
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	bd80      	pop	{r7, pc}
 800ecde:	bf00      	nop
 800ece0:	08029c8c 	.word	0x08029c8c

0800ece4 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	4603      	mov	r3, r0
 800ecec:	460a      	mov	r2, r1
 800ecee:	71fb      	strb	r3, [r7, #7]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800ecfc:	2306      	movs	r3, #6
 800ecfe:	73fb      	strb	r3, [r7, #15]
 800ed00:	e014      	b.n	800ed2c <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800ed02:	79fa      	ldrb	r2, [r7, #7]
 800ed04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed08:	fa42 f303 	asr.w	r3, r2, r3
 800ed0c:	f003 0301 	and.w	r3, r3, #1
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d005      	beq.n	800ed20 <Calculate_Parity+0x3c>
		{
			count++;
 800ed14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	3301      	adds	r3, #1
 800ed1c:	b2db      	uxtb	r3, r3
 800ed1e:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800ed20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed24:	b2db      	uxtb	r3, r3
 800ed26:	3b01      	subs	r3, #1
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	73fb      	strb	r3, [r7, #15]
 800ed2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	dae6      	bge.n	800ed02 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800ed34:	79bb      	ldrb	r3, [r7, #6]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d109      	bne.n	800ed4e <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800ed3a:	7bbb      	ldrb	r3, [r7, #14]
 800ed3c:	f003 0301 	and.w	r3, r3, #1
 800ed40:	b2db      	uxtb	r3, r3
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d101      	bne.n	800ed4a <Calculate_Parity+0x66>
		{
			return 0;
 800ed46:	2300      	movs	r3, #0
 800ed48:	e00f      	b.n	800ed6a <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800ed4a:	2301      	movs	r3, #1
 800ed4c:	e00d      	b.n	800ed6a <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800ed4e:	79bb      	ldrb	r3, [r7, #6]
 800ed50:	2b01      	cmp	r3, #1
 800ed52:	d109      	bne.n	800ed68 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800ed54:	7bbb      	ldrb	r3, [r7, #14]
 800ed56:	f003 0301 	and.w	r3, r3, #1
 800ed5a:	b2db      	uxtb	r3, r3
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d101      	bne.n	800ed64 <Calculate_Parity+0x80>
		{
			return 1;
 800ed60:	2301      	movs	r3, #1
 800ed62:	e002      	b.n	800ed6a <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800ed64:	2300      	movs	r3, #0
 800ed66:	e000      	b.n	800ed6a <Calculate_Parity+0x86>
		}
	}
	return 0;
 800ed68:	2300      	movs	r3, #0
}
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	3714      	adds	r7, #20
 800ed6e:	46bd      	mov	sp, r7
 800ed70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed74:	4770      	bx	lr
	...

0800ed78 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800ed78:	b580      	push	{r7, lr}
 800ed7a:	b084      	sub	sp, #16
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	460b      	mov	r3, r1
 800ed82:	70fb      	strb	r3, [r7, #3]
 800ed84:	4613      	mov	r3, r2
 800ed86:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800ed88:	2300      	movs	r3, #0
 800ed8a:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800ed8c:	2300      	movs	r3, #0
 800ed8e:	73fb      	strb	r3, [r7, #15]
 800ed90:	e03b      	b.n	800ee0a <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800ed92:	7bfb      	ldrb	r3, [r7, #15]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	4413      	add	r3, r2
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	78ba      	ldrb	r2, [r7, #2]
 800ed9c:	4611      	mov	r1, r2
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f7ff ffa0 	bl	800ece4 <Calculate_Parity>
 800eda4:	4603      	mov	r3, r0
 800eda6:	4619      	mov	r1, r3
 800eda8:	7bfb      	ldrb	r3, [r7, #15]
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	4413      	add	r3, r2
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	09db      	lsrs	r3, r3, #7
 800edb2:	b2db      	uxtb	r3, r3
 800edb4:	f003 0301 	and.w	r3, r3, #1
 800edb8:	4299      	cmp	r1, r3
 800edba:	d023      	beq.n	800ee04 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800edbc:	7bfb      	ldrb	r3, [r7, #15]
 800edbe:	687a      	ldr	r2, [r7, #4]
 800edc0:	4413      	add	r3, r2
 800edc2:	781b      	ldrb	r3, [r3, #0]
 800edc4:	4619      	mov	r1, r3
 800edc6:	4815      	ldr	r0, [pc, #84]	; (800ee1c <Verify_parity+0xa4>)
 800edc8:	f016 fe48 	bl	8025a5c <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800edcc:	7bfb      	ldrb	r3, [r7, #15]
 800edce:	687a      	ldr	r2, [r7, #4]
 800edd0:	4413      	add	r3, r2
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	78ba      	ldrb	r2, [r7, #2]
 800edd6:	4611      	mov	r1, r2
 800edd8:	4618      	mov	r0, r3
 800edda:	f7ff ff83 	bl	800ece4 <Calculate_Parity>
 800edde:	4603      	mov	r3, r0
 800ede0:	4619      	mov	r1, r3
 800ede2:	480f      	ldr	r0, [pc, #60]	; (800ee20 <Verify_parity+0xa8>)
 800ede4:	f016 fe3a 	bl	8025a5c <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800ede8:	7bfb      	ldrb	r3, [r7, #15]
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	4413      	add	r3, r2
 800edee:	781b      	ldrb	r3, [r3, #0]
 800edf0:	09db      	lsrs	r3, r3, #7
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	f003 0301 	and.w	r3, r3, #1
 800edf8:	4619      	mov	r1, r3
 800edfa:	480a      	ldr	r0, [pc, #40]	; (800ee24 <Verify_parity+0xac>)
 800edfc:	f016 fe2e 	bl	8025a5c <iprintf>
			return 0;
 800ee00:	2300      	movs	r3, #0
 800ee02:	e007      	b.n	800ee14 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
 800ee06:	3301      	adds	r3, #1
 800ee08:	73fb      	strb	r3, [r7, #15]
 800ee0a:	7bfa      	ldrb	r2, [r7, #15]
 800ee0c:	78fb      	ldrb	r3, [r7, #3]
 800ee0e:	429a      	cmp	r2, r3
 800ee10:	d3bf      	bcc.n	800ed92 <Verify_parity+0x1a>
		}
	}
	return 1;
 800ee12:	2301      	movs	r3, #1
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	08029ca8 	.word	0x08029ca8
 800ee20:	08029cc0 	.word	0x08029cc0
 800ee24:	08029cd4 	.word	0x08029cd4

0800ee28 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800ee28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee2c:	b089      	sub	sp, #36	; 0x24
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	4603      	mov	r3, r0
 800ee32:	60ba      	str	r2, [r7, #8]
 800ee34:	73fb      	strb	r3, [r7, #15]
 800ee36:	460b      	mov	r3, r1
 800ee38:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	83fb      	strh	r3, [r7, #30]
 800ee3e:	2300      	movs	r3, #0
 800ee40:	83bb      	strh	r3, [r7, #28]
 800ee42:	2300      	movs	r3, #0
 800ee44:	833b      	strh	r3, [r7, #24]
 800ee46:	2300      	movs	r3, #0
 800ee48:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800ee4e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d108      	bne.n	800ee68 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800ee56:	7bfb      	ldrb	r3, [r7, #15]
 800ee58:	b298      	uxth	r0, r3
 800ee5a:	7bbb      	ldrb	r3, [r7, #14]
 800ee5c:	b299      	uxth	r1, r3
 800ee5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ee60:	68ba      	ldr	r2, [r7, #8]
 800ee62:	f7f1 fc63 	bl	800072c <InsertBits>
		return;
 800ee66:	e13b      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800ee68:	7bbb      	ldrb	r3, [r7, #14]
 800ee6a:	2b08      	cmp	r3, #8
 800ee6c:	d12c      	bne.n	800eec8 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800ee6e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ee72:	2a80      	cmp	r2, #128	; 0x80
 800ee74:	f173 0300 	sbcs.w	r3, r3, #0
 800ee78:	d303      	bcc.n	800ee82 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800ee7a:	489b      	ldr	r0, [pc, #620]	; (800f0e8 <Insert_cal_parity+0x2c0>)
 800ee7c:	f016 fe8a 	bl	8025b94 <puts>
			return;
 800ee80:	e12e      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800ee82:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800ee86:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ee8a:	4611      	mov	r1, r2
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f7ff ff29 	bl	800ece4 <Calculate_Parity>
 800ee92:	4603      	mov	r3, r0
 800ee94:	2b01      	cmp	r3, #1
 800ee96:	d10b      	bne.n	800eeb0 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800ee98:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	781b      	ldrb	r3, [r3, #0]
 800eea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eea8:	b2da      	uxtb	r2, r3
 800eeaa:	68bb      	ldr	r3, [r7, #8]
 800eeac:	701a      	strb	r2, [r3, #0]
 800eeae:	e117      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800eeb0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800eeb8:	68bb      	ldr	r3, [r7, #8]
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eec0:	b2da      	uxtb	r2, r3
 800eec2:	68bb      	ldr	r3, [r7, #8]
 800eec4:	701a      	strb	r2, [r3, #0]
 800eec6:	e10b      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800eec8:	7bbb      	ldrb	r3, [r7, #14]
 800eeca:	2b18      	cmp	r3, #24
 800eecc:	f040 8104 	bne.w	800f0d8 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800eed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eed4:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800eed8:	f173 0300 	sbcs.w	r3, r3, #0
 800eedc:	d303      	bcc.n	800eee6 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800eede:	4883      	ldr	r0, [pc, #524]	; (800f0ec <Insert_cal_parity+0x2c4>)
 800eee0:	f016 fe58 	bl	8025b94 <puts>
			return;
 800eee4:	e0fc      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800eee6:	2300      	movs	r3, #0
 800eee8:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800eeea:	2300      	movs	r3, #0
 800eeec:	76bb      	strb	r3, [r7, #26]
 800eeee:	e0ee      	b.n	800f0ce <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800eef0:	7ebb      	ldrb	r3, [r7, #26]
 800eef2:	00d9      	lsls	r1, r3, #3
 800eef4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800eef8:	f1c1 0620 	rsb	r6, r1, #32
 800eefc:	f1a1 0c20 	sub.w	ip, r1, #32
 800ef00:	fa22 f001 	lsr.w	r0, r2, r1
 800ef04:	6038      	str	r0, [r7, #0]
 800ef06:	fa03 f606 	lsl.w	r6, r3, r6
 800ef0a:	6838      	ldr	r0, [r7, #0]
 800ef0c:	4330      	orrs	r0, r6
 800ef0e:	6038      	str	r0, [r7, #0]
 800ef10:	fa23 fc0c 	lsr.w	ip, r3, ip
 800ef14:	6838      	ldr	r0, [r7, #0]
 800ef16:	ea40 000c 	orr.w	r0, r0, ip
 800ef1a:	6038      	str	r0, [r7, #0]
 800ef1c:	40cb      	lsrs	r3, r1
 800ef1e:	607b      	str	r3, [r7, #4]
 800ef20:	783b      	ldrb	r3, [r7, #0]
 800ef22:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800ef24:	7ebb      	ldrb	r3, [r7, #26]
 800ef26:	2b02      	cmp	r3, #2
 800ef28:	d07a      	beq.n	800f020 <Insert_cal_parity+0x1f8>
 800ef2a:	2b02      	cmp	r3, #2
 800ef2c:	f300 8094 	bgt.w	800f058 <Insert_cal_parity+0x230>
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d002      	beq.n	800ef3a <Insert_cal_parity+0x112>
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	d01f      	beq.n	800ef78 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800ef38:	e08e      	b.n	800f058 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ef3a:	7ebb      	ldrb	r3, [r7, #26]
 800ef3c:	00d9      	lsls	r1, r3, #3
 800ef3e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef42:	f1c1 0620 	rsb	r6, r1, #32
 800ef46:	f1a1 0020 	sub.w	r0, r1, #32
 800ef4a:	fa22 f401 	lsr.w	r4, r2, r1
 800ef4e:	fa03 f606 	lsl.w	r6, r3, r6
 800ef52:	4334      	orrs	r4, r6
 800ef54:	fa23 f000 	lsr.w	r0, r3, r0
 800ef58:	4304      	orrs	r4, r0
 800ef5a:	fa23 f501 	lsr.w	r5, r3, r1
 800ef5e:	f04f 0200 	mov.w	r2, #0
 800ef62:	f04f 0300 	mov.w	r3, #0
 800ef66:	09e2      	lsrs	r2, r4, #7
 800ef68:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800ef6c:	09eb      	lsrs	r3, r5, #7
 800ef6e:	b293      	uxth	r3, r2
 800ef70:	f003 0301 	and.w	r3, r3, #1
 800ef74:	83fb      	strh	r3, [r7, #30]
					break;
 800ef76:	e070      	b.n	800f05a <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800ef78:	7efb      	ldrb	r3, [r7, #27]
 800ef7a:	005b      	lsls	r3, r3, #1
 800ef7c:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800ef7e:	8bfb      	ldrh	r3, [r7, #30]
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d104      	bne.n	800ef8e <Insert_cal_parity+0x166>
 800ef84:	7efb      	ldrb	r3, [r7, #27]
 800ef86:	f023 0301 	bic.w	r3, r3, #1
 800ef8a:	76fb      	strb	r3, [r7, #27]
 800ef8c:	e003      	b.n	800ef96 <Insert_cal_parity+0x16e>
 800ef8e:	7efb      	ldrb	r3, [r7, #27]
 800ef90:	f043 0301 	orr.w	r3, r3, #1
 800ef94:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800ef96:	7ebb      	ldrb	r3, [r7, #26]
 800ef98:	00d9      	lsls	r1, r3, #3
 800ef9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800ef9e:	f1c1 0620 	rsb	r6, r1, #32
 800efa2:	f1a1 0020 	sub.w	r0, r1, #32
 800efa6:	fa22 f801 	lsr.w	r8, r2, r1
 800efaa:	fa03 f606 	lsl.w	r6, r3, r6
 800efae:	ea48 0806 	orr.w	r8, r8, r6
 800efb2:	fa23 f000 	lsr.w	r0, r3, r0
 800efb6:	ea48 0800 	orr.w	r8, r8, r0
 800efba:	fa23 f901 	lsr.w	r9, r3, r1
 800efbe:	f04f 0200 	mov.w	r2, #0
 800efc2:	f04f 0300 	mov.w	r3, #0
 800efc6:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800efca:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800efce:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800efd2:	b293      	uxth	r3, r2
 800efd4:	f003 0301 	and.w	r3, r3, #1
 800efd8:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800efda:	7ebb      	ldrb	r3, [r7, #26]
 800efdc:	00d9      	lsls	r1, r3, #3
 800efde:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800efe2:	f1c1 0620 	rsb	r6, r1, #32
 800efe6:	f1a1 0020 	sub.w	r0, r1, #32
 800efea:	fa22 fa01 	lsr.w	sl, r2, r1
 800efee:	fa03 f606 	lsl.w	r6, r3, r6
 800eff2:	ea4a 0a06 	orr.w	sl, sl, r6
 800eff6:	fa23 f000 	lsr.w	r0, r3, r0
 800effa:	ea4a 0a00 	orr.w	sl, sl, r0
 800effe:	fa23 fb01 	lsr.w	fp, r3, r1
 800f002:	f04f 0200 	mov.w	r2, #0
 800f006:	f04f 0300 	mov.w	r3, #0
 800f00a:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800f00e:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800f012:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800f016:	b293      	uxth	r3, r2
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	83bb      	strh	r3, [r7, #28]
					break;
 800f01e:	e01c      	b.n	800f05a <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800f020:	7efb      	ldrb	r3, [r7, #27]
 800f022:	009b      	lsls	r3, r3, #2
 800f024:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f026:	8bbb      	ldrh	r3, [r7, #28]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d104      	bne.n	800f036 <Insert_cal_parity+0x20e>
 800f02c:	7efb      	ldrb	r3, [r7, #27]
 800f02e:	f023 0301 	bic.w	r3, r3, #1
 800f032:	76fb      	strb	r3, [r7, #27]
 800f034:	e003      	b.n	800f03e <Insert_cal_parity+0x216>
 800f036:	7efb      	ldrb	r3, [r7, #27]
 800f038:	f043 0301 	orr.w	r3, r3, #1
 800f03c:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f03e:	8bfb      	ldrh	r3, [r7, #30]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d104      	bne.n	800f04e <Insert_cal_parity+0x226>
 800f044:	7efb      	ldrb	r3, [r7, #27]
 800f046:	f023 0302 	bic.w	r3, r3, #2
 800f04a:	76fb      	strb	r3, [r7, #27]
					break;
 800f04c:	e005      	b.n	800f05a <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f04e:	7efb      	ldrb	r3, [r7, #27]
 800f050:	f043 0302 	orr.w	r3, r3, #2
 800f054:	76fb      	strb	r3, [r7, #27]
					break;
 800f056:	e000      	b.n	800f05a <Insert_cal_parity+0x232>
					break;
 800f058:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800f05a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f05e:	7efb      	ldrb	r3, [r7, #27]
 800f060:	4611      	mov	r1, r2
 800f062:	4618      	mov	r0, r3
 800f064:	f7ff fe3e 	bl	800ece4 <Calculate_Parity>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d116      	bne.n	800f09c <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f06e:	7ebb      	ldrb	r3, [r7, #26]
 800f070:	f1c3 0302 	rsb	r3, r3, #2
 800f074:	68ba      	ldr	r2, [r7, #8]
 800f076:	4413      	add	r3, r2
 800f078:	7efa      	ldrb	r2, [r7, #27]
 800f07a:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800f07c:	7ebb      	ldrb	r3, [r7, #26]
 800f07e:	f1c3 0302 	rsb	r3, r3, #2
 800f082:	68ba      	ldr	r2, [r7, #8]
 800f084:	4413      	add	r3, r2
 800f086:	781a      	ldrb	r2, [r3, #0]
 800f088:	7ebb      	ldrb	r3, [r7, #26]
 800f08a:	f1c3 0302 	rsb	r3, r3, #2
 800f08e:	68b9      	ldr	r1, [r7, #8]
 800f090:	440b      	add	r3, r1
 800f092:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f096:	b2d2      	uxtb	r2, r2
 800f098:	701a      	strb	r2, [r3, #0]
 800f09a:	e015      	b.n	800f0c8 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f09c:	7ebb      	ldrb	r3, [r7, #26]
 800f09e:	f1c3 0302 	rsb	r3, r3, #2
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	4413      	add	r3, r2
 800f0a6:	7efa      	ldrb	r2, [r7, #27]
 800f0a8:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800f0aa:	7ebb      	ldrb	r3, [r7, #26]
 800f0ac:	f1c3 0302 	rsb	r3, r3, #2
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	4413      	add	r3, r2
 800f0b4:	781a      	ldrb	r2, [r3, #0]
 800f0b6:	7ebb      	ldrb	r3, [r7, #26]
 800f0b8:	f1c3 0302 	rsb	r3, r3, #2
 800f0bc:	68b9      	ldr	r1, [r7, #8]
 800f0be:	440b      	add	r3, r1
 800f0c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f0c4:	b2d2      	uxtb	r2, r2
 800f0c6:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f0c8:	7ebb      	ldrb	r3, [r7, #26]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	76bb      	strb	r3, [r7, #26]
 800f0ce:	7ebb      	ldrb	r3, [r7, #26]
 800f0d0:	2b02      	cmp	r3, #2
 800f0d2:	f67f af0d 	bls.w	800eef0 <Insert_cal_parity+0xc8>
 800f0d6:	e003      	b.n	800f0e0 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800f0d8:	4805      	ldr	r0, [pc, #20]	; (800f0f0 <Insert_cal_parity+0x2c8>)
 800f0da:	f016 fd5b 	bl	8025b94 <puts>
		return;
 800f0de:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800f0e0:	3724      	adds	r7, #36	; 0x24
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0e8:	08029cec 	.word	0x08029cec
 800f0ec:	08029d20 	.word	0x08029d20
 800f0f0:	08029d54 	.word	0x08029d54

0800f0f4 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b084      	sub	sp, #16
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
 800f0fc:	460b      	mov	r3, r1
 800f0fe:	807b      	strh	r3, [r7, #2]
 800f100:	4613      	mov	r3, r2
 800f102:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800f104:	2300      	movs	r3, #0
 800f106:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800f108:	2300      	movs	r3, #0
 800f10a:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800f10c:	787b      	ldrb	r3, [r7, #1]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d133      	bne.n	800f17a <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800f112:	887b      	ldrh	r3, [r7, #2]
 800f114:	085b      	lsrs	r3, r3, #1
 800f116:	b29b      	uxth	r3, r3
 800f118:	3b02      	subs	r3, #2
 800f11a:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f11c:	2300      	movs	r3, #0
 800f11e:	81fb      	strh	r3, [r7, #14]
 800f120:	e025      	b.n	800f16e <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800f122:	89fb      	ldrh	r3, [r7, #14]
 800f124:	687a      	ldr	r2, [r7, #4]
 800f126:	4413      	add	r3, r2
 800f128:	781a      	ldrb	r2, [r3, #0]
 800f12a:	89f9      	ldrh	r1, [r7, #14]
 800f12c:	89bb      	ldrh	r3, [r7, #12]
 800f12e:	440b      	add	r3, r1
 800f130:	3302      	adds	r3, #2
 800f132:	6879      	ldr	r1, [r7, #4]
 800f134:	440b      	add	r3, r1
 800f136:	781b      	ldrb	r3, [r3, #0]
 800f138:	43db      	mvns	r3, r3
 800f13a:	b2db      	uxtb	r3, r3
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d013      	beq.n	800f168 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800f140:	89fb      	ldrh	r3, [r7, #14]
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	4413      	add	r3, r2
 800f146:	781b      	ldrb	r3, [r3, #0]
 800f148:	4619      	mov	r1, r3
 800f14a:	89fa      	ldrh	r2, [r7, #14]
 800f14c:	89bb      	ldrh	r3, [r7, #12]
 800f14e:	4413      	add	r3, r2
 800f150:	3302      	adds	r3, #2
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	4413      	add	r3, r2
 800f156:	781b      	ldrb	r3, [r3, #0]
 800f158:	43db      	mvns	r3, r3
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	461a      	mov	r2, r3
 800f15e:	481a      	ldr	r0, [pc, #104]	; (800f1c8 <Data_Compliment+0xd4>)
 800f160:	f016 fc7c 	bl	8025a5c <iprintf>
				return 0;
 800f164:	2300      	movs	r3, #0
 800f166:	e02b      	b.n	800f1c0 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f168:	89fb      	ldrh	r3, [r7, #14]
 800f16a:	3301      	adds	r3, #1
 800f16c:	81fb      	strh	r3, [r7, #14]
 800f16e:	89fa      	ldrh	r2, [r7, #14]
 800f170:	89bb      	ldrh	r3, [r7, #12]
 800f172:	429a      	cmp	r2, r3
 800f174:	d3d5      	bcc.n	800f122 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800f176:	2301      	movs	r3, #1
 800f178:	e022      	b.n	800f1c0 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800f17a:	787b      	ldrb	r3, [r7, #1]
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d11e      	bne.n	800f1be <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f180:	2300      	movs	r3, #0
 800f182:	81fb      	strh	r3, [r7, #14]
 800f184:	e010      	b.n	800f1a8 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800f186:	89fb      	ldrh	r3, [r7, #14]
 800f188:	687a      	ldr	r2, [r7, #4]
 800f18a:	4413      	add	r3, r2
 800f18c:	781a      	ldrb	r2, [r3, #0]
 800f18e:	89fb      	ldrh	r3, [r7, #14]
 800f190:	1c99      	adds	r1, r3, #2
 800f192:	887b      	ldrh	r3, [r7, #2]
 800f194:	440b      	add	r3, r1
 800f196:	4619      	mov	r1, r3
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	440b      	add	r3, r1
 800f19c:	43d2      	mvns	r2, r2
 800f19e:	b2d2      	uxtb	r2, r2
 800f1a0:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f1a2:	89fb      	ldrh	r3, [r7, #14]
 800f1a4:	3301      	adds	r3, #1
 800f1a6:	81fb      	strh	r3, [r7, #14]
 800f1a8:	89fa      	ldrh	r2, [r7, #14]
 800f1aa:	887b      	ldrh	r3, [r7, #2]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d3ea      	bcc.n	800f186 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800f1b0:	89fa      	ldrh	r2, [r7, #14]
 800f1b2:	887b      	ldrh	r3, [r7, #2]
 800f1b4:	4413      	add	r3, r2
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	3302      	adds	r3, #2
 800f1ba:	b29b      	uxth	r3, r3
 800f1bc:	e000      	b.n	800f1c0 <Data_Compliment+0xcc>
	}
	return 0;
 800f1be:	2300      	movs	r3, #0
}
 800f1c0:	4618      	mov	r0, r3
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}
 800f1c8:	08029d64 	.word	0x08029d64

0800f1cc <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b083      	sub	sp, #12
 800f1d0:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f1d6:	4b1a      	ldr	r3, [pc, #104]	; (800f240 <CheckToSendReplyorNot+0x74>)
 800f1d8:	785b      	ldrb	r3, [r3, #1]
 800f1da:	2b01      	cmp	r3, #1
 800f1dc:	d104      	bne.n	800f1e8 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800f1de:	79fb      	ldrb	r3, [r7, #7]
 800f1e0:	f043 0301 	orr.w	r3, r3, #1
 800f1e4:	71fb      	strb	r3, [r7, #7]
 800f1e6:	e003      	b.n	800f1f0 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800f1e8:	79fb      	ldrb	r3, [r7, #7]
 800f1ea:	f023 0301 	bic.w	r3, r3, #1
 800f1ee:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f1f0:	4b14      	ldr	r3, [pc, #80]	; (800f244 <CheckToSendReplyorNot+0x78>)
 800f1f2:	785b      	ldrb	r3, [r3, #1]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d104      	bne.n	800f202 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	f043 0302 	orr.w	r3, r3, #2
 800f1fe:	71fb      	strb	r3, [r7, #7]
 800f200:	e003      	b.n	800f20a <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800f202:	79fb      	ldrb	r3, [r7, #7]
 800f204:	f023 0302 	bic.w	r3, r3, #2
 800f208:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800f20a:	79fb      	ldrb	r3, [r7, #7]
 800f20c:	2b02      	cmp	r3, #2
 800f20e:	dc02      	bgt.n	800f216 <CheckToSendReplyorNot+0x4a>
 800f210:	2b00      	cmp	r3, #0
 800f212:	da03      	bge.n	800f21c <CheckToSendReplyorNot+0x50>
 800f214:	e00a      	b.n	800f22c <CheckToSendReplyorNot+0x60>
 800f216:	2b03      	cmp	r3, #3
 800f218:	d004      	beq.n	800f224 <CheckToSendReplyorNot+0x58>
 800f21a:	e007      	b.n	800f22c <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800f21c:	4b0a      	ldr	r3, [pc, #40]	; (800f248 <CheckToSendReplyorNot+0x7c>)
 800f21e:	2201      	movs	r2, #1
 800f220:	701a      	strb	r2, [r3, #0]
		break;
 800f222:	e007      	b.n	800f234 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
#endif
#ifdef EI_2
		SendReply = 0;
 800f224:	4b08      	ldr	r3, [pc, #32]	; (800f248 <CheckToSendReplyorNot+0x7c>)
 800f226:	2200      	movs	r2, #0
 800f228:	701a      	strb	r2, [r3, #0]
#endif
		break;
 800f22a:	e003      	b.n	800f234 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800f22c:	4b06      	ldr	r3, [pc, #24]	; (800f248 <CheckToSendReplyorNot+0x7c>)
 800f22e:	2201      	movs	r2, #1
 800f230:	701a      	strb	r2, [r3, #0]
		break;
 800f232:	bf00      	nop
	}

}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr
 800f240:	20004bb8 	.word	0x20004bb8
 800f244:	20004bbc 	.word	0x20004bbc
 800f248:	200062d9 	.word	0x200062d9

0800f24c <PrintSignals>:



void PrintSignals(void)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b082      	sub	sp, #8
 800f250:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800f252:	4b2d      	ldr	r3, [pc, #180]	; (800f308 <PrintSignals+0xbc>)
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	492c      	ldr	r1, [pc, #176]	; (800f30c <PrintSignals+0xc0>)
 800f25a:	482d      	ldr	r0, [pc, #180]	; (800f310 <PrintSignals+0xc4>)
 800f25c:	f016 faee 	bl	802583c <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f260:	2301      	movs	r3, #1
 800f262:	80fb      	strh	r3, [r7, #6]
 800f264:	e045      	b.n	800f2f2 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800f266:	4b2b      	ldr	r3, [pc, #172]	; (800f314 <PrintSignals+0xc8>)
 800f268:	881b      	ldrh	r3, [r3, #0]
 800f26a:	88fa      	ldrh	r2, [r7, #6]
 800f26c:	429a      	cmp	r2, r3
 800f26e:	d83c      	bhi.n	800f2ea <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800f270:	88fb      	ldrh	r3, [r7, #6]
 800f272:	3b01      	subs	r3, #1
 800f274:	2b00      	cmp	r3, #0
 800f276:	da00      	bge.n	800f27a <PrintSignals+0x2e>
 800f278:	3307      	adds	r3, #7
 800f27a:	10db      	asrs	r3, r3, #3
 800f27c:	461a      	mov	r2, r3
 800f27e:	4b26      	ldr	r3, [pc, #152]	; (800f318 <PrintSignals+0xcc>)
 800f280:	4413      	add	r3, r2
 800f282:	789b      	ldrb	r3, [r3, #2]
 800f284:	4619      	mov	r1, r3
 800f286:	88fb      	ldrh	r3, [r7, #6]
 800f288:	3b01      	subs	r3, #1
 800f28a:	425a      	negs	r2, r3
 800f28c:	f003 0307 	and.w	r3, r3, #7
 800f290:	f002 0207 	and.w	r2, r2, #7
 800f294:	bf58      	it	pl
 800f296:	4253      	negpl	r3, r2
 800f298:	2201      	movs	r2, #1
 800f29a:	fa02 f303 	lsl.w	r3, r2, r3
 800f29e:	400b      	ands	r3, r1
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	dd0c      	ble.n	800f2be <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800f2a4:	88fb      	ldrh	r3, [r7, #6]
 800f2a6:	1e5a      	subs	r2, r3, #1
 800f2a8:	4613      	mov	r3, r2
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	4413      	add	r3, r2
 800f2ae:	00db      	lsls	r3, r3, #3
 800f2b0:	4a1a      	ldr	r2, [pc, #104]	; (800f31c <PrintSignals+0xd0>)
 800f2b2:	4413      	add	r3, r2
 800f2b4:	4619      	mov	r1, r3
 800f2b6:	481a      	ldr	r0, [pc, #104]	; (800f320 <PrintSignals+0xd4>)
 800f2b8:	f016 fbd0 	bl	8025a5c <iprintf>
 800f2bc:	e00b      	b.n	800f2d6 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800f2be:	88fb      	ldrh	r3, [r7, #6]
 800f2c0:	1e5a      	subs	r2, r3, #1
 800f2c2:	4613      	mov	r3, r2
 800f2c4:	009b      	lsls	r3, r3, #2
 800f2c6:	4413      	add	r3, r2
 800f2c8:	00db      	lsls	r3, r3, #3
 800f2ca:	4a14      	ldr	r2, [pc, #80]	; (800f31c <PrintSignals+0xd0>)
 800f2cc:	4413      	add	r3, r2
 800f2ce:	4619      	mov	r1, r3
 800f2d0:	4814      	ldr	r0, [pc, #80]	; (800f324 <PrintSignals+0xd8>)
 800f2d2:	f016 fbc3 	bl	8025a5c <iprintf>
		}

		if( (Traverser%2) == 0)
 800f2d6:	88fb      	ldrh	r3, [r7, #6]
 800f2d8:	f003 0301 	and.w	r3, r3, #1
 800f2dc:	b29b      	uxth	r3, r3
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d104      	bne.n	800f2ec <PrintSignals+0xa0>
		{
			printf("\n");
 800f2e2:	200a      	movs	r0, #10
 800f2e4:	f016 fbd2 	bl	8025a8c <putchar>
 800f2e8:	e000      	b.n	800f2ec <PrintSignals+0xa0>
			continue;
 800f2ea:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f2ec:	88fb      	ldrh	r3, [r7, #6]
 800f2ee:	3301      	adds	r3, #1
 800f2f0:	80fb      	strh	r3, [r7, #6]
 800f2f2:	88fa      	ldrh	r2, [r7, #6]
 800f2f4:	4b08      	ldr	r3, [pc, #32]	; (800f318 <PrintSignals+0xcc>)
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	00db      	lsls	r3, r3, #3
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	ddb3      	ble.n	800f266 <PrintSignals+0x1a>
		}
	}
}
 800f2fe:	bf00      	nop
 800f300:	bf00      	nop
 800f302:	3708      	adds	r7, #8
 800f304:	46bd      	mov	sp, r7
 800f306:	bd80      	pop	{r7, pc}
 800f308:	20004de4 	.word	0x20004de4
 800f30c:	20004de8 	.word	0x20004de8
 800f310:	20004be2 	.word	0x20004be2
 800f314:	20005eec 	.word	0x20005eec
 800f318:	20004be0 	.word	0x20004be0
 800f31c:	200053fc 	.word	0x200053fc
 800f320:	08029d9c 	.word	0x08029d9c
 800f324:	08029dac 	.word	0x08029dac

0800f328 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b084      	sub	sp, #16
 800f32c:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800f332:	2300      	movs	r3, #0
 800f334:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800f336:	2300      	movs	r3, #0
 800f338:	607b      	str	r3, [r7, #4]

	Get_time();
 800f33a:	f7fd f9f5 	bl	800c728 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800f33e:	4b21      	ldr	r3, [pc, #132]	; (800f3c4 <GetTimeStamp+0x9c>)
 800f340:	781b      	ldrb	r3, [r3, #0]
 800f342:	461a      	mov	r2, r3
 800f344:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f348:	fb03 f202 	mul.w	r2, r3, r2
 800f34c:	4b1d      	ldr	r3, [pc, #116]	; (800f3c4 <GetTimeStamp+0x9c>)
 800f34e:	785b      	ldrb	r3, [r3, #1]
 800f350:	4619      	mov	r1, r3
 800f352:	460b      	mov	r3, r1
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	1a5b      	subs	r3, r3, r1
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	4a19      	ldr	r2, [pc, #100]	; (800f3c4 <GetTimeStamp+0x9c>)
 800f35e:	7892      	ldrb	r2, [r2, #2]
 800f360:	4413      	add	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f364:	4b18      	ldr	r3, [pc, #96]	; (800f3c8 <GetTimeStamp+0xa0>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d007      	beq.n	800f37e <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f36e:	4a16      	ldr	r2, [pc, #88]	; (800f3c8 <GetTimeStamp+0xa0>)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f374:	f009 fc5c 	bl	8018c30 <HAL_GetTick>
 800f378:	4603      	mov	r3, r0
 800f37a:	4a14      	ldr	r2, [pc, #80]	; (800f3cc <GetTimeStamp+0xa4>)
 800f37c:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f37e:	4b13      	ldr	r3, [pc, #76]	; (800f3cc <GetTimeStamp+0xa4>)
 800f380:	681b      	ldr	r3, [r3, #0]
 800f382:	4618      	mov	r0, r3
 800f384:	f000 fe1c 	bl	800ffc0 <HAL_Elaps_Ticks>
 800f388:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f38a:	68fa      	ldr	r2, [r7, #12]
 800f38c:	4613      	mov	r3, r2
 800f38e:	009b      	lsls	r3, r3, #2
 800f390:	4413      	add	r3, r2
 800f392:	005b      	lsls	r3, r3, #1
 800f394:	4619      	mov	r1, r3
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	4a0d      	ldr	r2, [pc, #52]	; (800f3d0 <GetTimeStamp+0xa8>)
 800f39a:	fba2 2303 	umull	r2, r3, r2, r3
 800f39e:	095b      	lsrs	r3, r3, #5
 800f3a0:	440b      	add	r3, r1
 800f3a2:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f3a4:	4b0b      	ldr	r3, [pc, #44]	; (800f3d4 <GetTimeStamp+0xac>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	68ba      	ldr	r2, [r7, #8]
 800f3aa:	429a      	cmp	r2, r3
 800f3ac:	d005      	beq.n	800f3ba <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f3ae:	4a09      	ldr	r2, [pc, #36]	; (800f3d4 <GetTimeStamp+0xac>)
 800f3b0:	68bb      	ldr	r3, [r7, #8]
 800f3b2:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f3b4:	4a08      	ldr	r2, [pc, #32]	; (800f3d8 <GetTimeStamp+0xb0>)
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f3ba:	bf00      	nop
 800f3bc:	3710      	adds	r7, #16
 800f3be:	46bd      	mov	sp, r7
 800f3c0:	bd80      	pop	{r7, pc}
 800f3c2:	bf00      	nop
 800f3c4:	20003f20 	.word	0x20003f20
 800f3c8:	200062e0 	.word	0x200062e0
 800f3cc:	200062e4 	.word	0x200062e4
 800f3d0:	51eb851f 	.word	0x51eb851f
 800f3d4:	200062e8 	.word	0x200062e8
 800f3d8:	200053f8 	.word	0x200053f8

0800f3dc <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f3dc:	b490      	push	{r4, r7}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f3e6:	79fb      	ldrb	r3, [r7, #7]
 800f3e8:	1c5a      	adds	r2, r3, #1
 800f3ea:	71fa      	strb	r2, [r7, #7]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	4613      	mov	r3, r2
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	4413      	add	r3, r2
 800f3f4:	00db      	lsls	r3, r3, #3
 800f3f6:	4acd      	ldr	r2, [pc, #820]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f3f8:	4413      	add	r3, r2
 800f3fa:	4acd      	ldr	r2, [pc, #820]	; (800f730 <UpdateSIGNALSNames+0x354>)
 800f3fc:	6810      	ldr	r0, [r2, #0]
 800f3fe:	6018      	str	r0, [r3, #0]
 800f400:	8892      	ldrh	r2, [r2, #4]
 800f402:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f404:	79fb      	ldrb	r3, [r7, #7]
 800f406:	1c5a      	adds	r2, r3, #1
 800f408:	71fa      	strb	r2, [r7, #7]
 800f40a:	461a      	mov	r2, r3
 800f40c:	4613      	mov	r3, r2
 800f40e:	009b      	lsls	r3, r3, #2
 800f410:	4413      	add	r3, r2
 800f412:	00db      	lsls	r3, r3, #3
 800f414:	4ac5      	ldr	r2, [pc, #788]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f416:	4413      	add	r3, r2
 800f418:	4ac6      	ldr	r2, [pc, #792]	; (800f734 <UpdateSIGNALSNames+0x358>)
 800f41a:	6810      	ldr	r0, [r2, #0]
 800f41c:	6018      	str	r0, [r3, #0]
 800f41e:	8892      	ldrh	r2, [r2, #4]
 800f420:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f422:	79fb      	ldrb	r3, [r7, #7]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	71fa      	strb	r2, [r7, #7]
 800f428:	461a      	mov	r2, r3
 800f42a:	4613      	mov	r3, r2
 800f42c:	009b      	lsls	r3, r3, #2
 800f42e:	4413      	add	r3, r2
 800f430:	00db      	lsls	r3, r3, #3
 800f432:	4abe      	ldr	r2, [pc, #760]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f434:	4413      	add	r3, r2
 800f436:	4ac0      	ldr	r2, [pc, #768]	; (800f738 <UpdateSIGNALSNames+0x35c>)
 800f438:	6810      	ldr	r0, [r2, #0]
 800f43a:	6018      	str	r0, [r3, #0]
 800f43c:	8892      	ldrh	r2, [r2, #4]
 800f43e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800f440:	79fb      	ldrb	r3, [r7, #7]
 800f442:	1c5a      	adds	r2, r3, #1
 800f444:	71fa      	strb	r2, [r7, #7]
 800f446:	461a      	mov	r2, r3
 800f448:	4613      	mov	r3, r2
 800f44a:	009b      	lsls	r3, r3, #2
 800f44c:	4413      	add	r3, r2
 800f44e:	00db      	lsls	r3, r3, #3
 800f450:	4ab6      	ldr	r2, [pc, #728]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f452:	4413      	add	r3, r2
 800f454:	4ab9      	ldr	r2, [pc, #740]	; (800f73c <UpdateSIGNALSNames+0x360>)
 800f456:	6810      	ldr	r0, [r2, #0]
 800f458:	6018      	str	r0, [r3, #0]
 800f45a:	8892      	ldrh	r2, [r2, #4]
 800f45c:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800f45e:	79fb      	ldrb	r3, [r7, #7]
 800f460:	1c5a      	adds	r2, r3, #1
 800f462:	71fa      	strb	r2, [r7, #7]
 800f464:	461a      	mov	r2, r3
 800f466:	4613      	mov	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	4413      	add	r3, r2
 800f46c:	00db      	lsls	r3, r3, #3
 800f46e:	4aaf      	ldr	r2, [pc, #700]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f470:	4413      	add	r3, r2
 800f472:	4ab3      	ldr	r2, [pc, #716]	; (800f740 <UpdateSIGNALSNames+0x364>)
 800f474:	6810      	ldr	r0, [r2, #0]
 800f476:	6018      	str	r0, [r3, #0]
 800f478:	8892      	ldrh	r2, [r2, #4]
 800f47a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800f47c:	79fb      	ldrb	r3, [r7, #7]
 800f47e:	1c5a      	adds	r2, r3, #1
 800f480:	71fa      	strb	r2, [r7, #7]
 800f482:	461a      	mov	r2, r3
 800f484:	4613      	mov	r3, r2
 800f486:	009b      	lsls	r3, r3, #2
 800f488:	4413      	add	r3, r2
 800f48a:	00db      	lsls	r3, r3, #3
 800f48c:	4aa7      	ldr	r2, [pc, #668]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f48e:	4413      	add	r3, r2
 800f490:	4aac      	ldr	r2, [pc, #688]	; (800f744 <UpdateSIGNALSNames+0x368>)
 800f492:	6810      	ldr	r0, [r2, #0]
 800f494:	6018      	str	r0, [r3, #0]
 800f496:	8891      	ldrh	r1, [r2, #4]
 800f498:	7992      	ldrb	r2, [r2, #6]
 800f49a:	8099      	strh	r1, [r3, #4]
 800f49c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800f49e:	79fb      	ldrb	r3, [r7, #7]
 800f4a0:	1c5a      	adds	r2, r3, #1
 800f4a2:	71fa      	strb	r2, [r7, #7]
 800f4a4:	461a      	mov	r2, r3
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4413      	add	r3, r2
 800f4ac:	00db      	lsls	r3, r3, #3
 800f4ae:	4a9f      	ldr	r2, [pc, #636]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f4b0:	4413      	add	r3, r2
 800f4b2:	4aa5      	ldr	r2, [pc, #660]	; (800f748 <UpdateSIGNALSNames+0x36c>)
 800f4b4:	6810      	ldr	r0, [r2, #0]
 800f4b6:	6018      	str	r0, [r3, #0]
 800f4b8:	8891      	ldrh	r1, [r2, #4]
 800f4ba:	7992      	ldrb	r2, [r2, #6]
 800f4bc:	8099      	strh	r1, [r3, #4]
 800f4be:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	1c5a      	adds	r2, r3, #1
 800f4c4:	71fa      	strb	r2, [r7, #7]
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	009b      	lsls	r3, r3, #2
 800f4cc:	4413      	add	r3, r2
 800f4ce:	00db      	lsls	r3, r3, #3
 800f4d0:	4a96      	ldr	r2, [pc, #600]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f4d2:	4413      	add	r3, r2
 800f4d4:	4a9d      	ldr	r2, [pc, #628]	; (800f74c <UpdateSIGNALSNames+0x370>)
 800f4d6:	6810      	ldr	r0, [r2, #0]
 800f4d8:	6018      	str	r0, [r3, #0]
 800f4da:	7912      	ldrb	r2, [r2, #4]
 800f4dc:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800f4de:	79fb      	ldrb	r3, [r7, #7]
 800f4e0:	1c5a      	adds	r2, r3, #1
 800f4e2:	71fa      	strb	r2, [r7, #7]
 800f4e4:	461a      	mov	r2, r3
 800f4e6:	4613      	mov	r3, r2
 800f4e8:	009b      	lsls	r3, r3, #2
 800f4ea:	4413      	add	r3, r2
 800f4ec:	00db      	lsls	r3, r3, #3
 800f4ee:	4a8f      	ldr	r2, [pc, #572]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f4f0:	4413      	add	r3, r2
 800f4f2:	4997      	ldr	r1, [pc, #604]	; (800f750 <UpdateSIGNALSNames+0x374>)
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	460b      	mov	r3, r1
 800f4f8:	cb03      	ldmia	r3!, {r0, r1}
 800f4fa:	6010      	str	r0, [r2, #0]
 800f4fc:	6051      	str	r1, [r2, #4]
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800f502:	79fb      	ldrb	r3, [r7, #7]
 800f504:	1c5a      	adds	r2, r3, #1
 800f506:	71fa      	strb	r2, [r7, #7]
 800f508:	461a      	mov	r2, r3
 800f50a:	4613      	mov	r3, r2
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	00db      	lsls	r3, r3, #3
 800f512:	4a86      	ldr	r2, [pc, #536]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f514:	4413      	add	r3, r2
 800f516:	4a8f      	ldr	r2, [pc, #572]	; (800f754 <UpdateSIGNALSNames+0x378>)
 800f518:	6810      	ldr	r0, [r2, #0]
 800f51a:	6018      	str	r0, [r3, #0]
 800f51c:	8892      	ldrh	r2, [r2, #4]
 800f51e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800f520:	79fb      	ldrb	r3, [r7, #7]
 800f522:	1c5a      	adds	r2, r3, #1
 800f524:	71fa      	strb	r2, [r7, #7]
 800f526:	461a      	mov	r2, r3
 800f528:	4613      	mov	r3, r2
 800f52a:	009b      	lsls	r3, r3, #2
 800f52c:	4413      	add	r3, r2
 800f52e:	00db      	lsls	r3, r3, #3
 800f530:	4a7e      	ldr	r2, [pc, #504]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f532:	4413      	add	r3, r2
 800f534:	4988      	ldr	r1, [pc, #544]	; (800f758 <UpdateSIGNALSNames+0x37c>)
 800f536:	461a      	mov	r2, r3
 800f538:	460b      	mov	r3, r1
 800f53a:	cb03      	ldmia	r3!, {r0, r1}
 800f53c:	6010      	str	r0, [r2, #0]
 800f53e:	6051      	str	r1, [r2, #4]
 800f540:	881b      	ldrh	r3, [r3, #0]
 800f542:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800f544:	79fb      	ldrb	r3, [r7, #7]
 800f546:	1c5a      	adds	r2, r3, #1
 800f548:	71fa      	strb	r2, [r7, #7]
 800f54a:	461a      	mov	r2, r3
 800f54c:	4613      	mov	r3, r2
 800f54e:	009b      	lsls	r3, r3, #2
 800f550:	4413      	add	r3, r2
 800f552:	00db      	lsls	r3, r3, #3
 800f554:	4a75      	ldr	r2, [pc, #468]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f556:	4413      	add	r3, r2
 800f558:	4980      	ldr	r1, [pc, #512]	; (800f75c <UpdateSIGNALSNames+0x380>)
 800f55a:	461a      	mov	r2, r3
 800f55c:	460b      	mov	r3, r1
 800f55e:	cb03      	ldmia	r3!, {r0, r1}
 800f560:	6010      	str	r0, [r2, #0]
 800f562:	6051      	str	r1, [r2, #4]
 800f564:	8819      	ldrh	r1, [r3, #0]
 800f566:	789b      	ldrb	r3, [r3, #2]
 800f568:	8111      	strh	r1, [r2, #8]
 800f56a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800f56c:	79fb      	ldrb	r3, [r7, #7]
 800f56e:	1c5a      	adds	r2, r3, #1
 800f570:	71fa      	strb	r2, [r7, #7]
 800f572:	461a      	mov	r2, r3
 800f574:	4613      	mov	r3, r2
 800f576:	009b      	lsls	r3, r3, #2
 800f578:	4413      	add	r3, r2
 800f57a:	00db      	lsls	r3, r3, #3
 800f57c:	4a6b      	ldr	r2, [pc, #428]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f57e:	4413      	add	r3, r2
 800f580:	4977      	ldr	r1, [pc, #476]	; (800f760 <UpdateSIGNALSNames+0x384>)
 800f582:	461a      	mov	r2, r3
 800f584:	460b      	mov	r3, r1
 800f586:	cb03      	ldmia	r3!, {r0, r1}
 800f588:	6010      	str	r0, [r2, #0]
 800f58a:	6051      	str	r1, [r2, #4]
 800f58c:	881b      	ldrh	r3, [r3, #0]
 800f58e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800f590:	79fb      	ldrb	r3, [r7, #7]
 800f592:	1c5a      	adds	r2, r3, #1
 800f594:	71fa      	strb	r2, [r7, #7]
 800f596:	461a      	mov	r2, r3
 800f598:	4613      	mov	r3, r2
 800f59a:	009b      	lsls	r3, r3, #2
 800f59c:	4413      	add	r3, r2
 800f59e:	00db      	lsls	r3, r3, #3
 800f5a0:	4a62      	ldr	r2, [pc, #392]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f5a2:	4413      	add	r3, r2
 800f5a4:	496f      	ldr	r1, [pc, #444]	; (800f764 <UpdateSIGNALSNames+0x388>)
 800f5a6:	461a      	mov	r2, r3
 800f5a8:	460b      	mov	r3, r1
 800f5aa:	cb03      	ldmia	r3!, {r0, r1}
 800f5ac:	6010      	str	r0, [r2, #0]
 800f5ae:	6051      	str	r1, [r2, #4]
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	1c5a      	adds	r2, r3, #1
 800f5b8:	71fa      	strb	r2, [r7, #7]
 800f5ba:	461a      	mov	r2, r3
 800f5bc:	4613      	mov	r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	00db      	lsls	r3, r3, #3
 800f5c4:	4a59      	ldr	r2, [pc, #356]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f5c6:	4413      	add	r3, r2
 800f5c8:	4967      	ldr	r1, [pc, #412]	; (800f768 <UpdateSIGNALSNames+0x38c>)
 800f5ca:	461a      	mov	r2, r3
 800f5cc:	460b      	mov	r3, r1
 800f5ce:	cb03      	ldmia	r3!, {r0, r1}
 800f5d0:	6010      	str	r0, [r2, #0]
 800f5d2:	6051      	str	r1, [r2, #4]
 800f5d4:	8819      	ldrh	r1, [r3, #0]
 800f5d6:	789b      	ldrb	r3, [r3, #2]
 800f5d8:	8111      	strh	r1, [r2, #8]
 800f5da:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800f5dc:	79fb      	ldrb	r3, [r7, #7]
 800f5de:	1c5a      	adds	r2, r3, #1
 800f5e0:	71fa      	strb	r2, [r7, #7]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	009b      	lsls	r3, r3, #2
 800f5e8:	4413      	add	r3, r2
 800f5ea:	00db      	lsls	r3, r3, #3
 800f5ec:	4a4f      	ldr	r2, [pc, #316]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f5ee:	4413      	add	r3, r2
 800f5f0:	495e      	ldr	r1, [pc, #376]	; (800f76c <UpdateSIGNALSNames+0x390>)
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	cb03      	ldmia	r3!, {r0, r1}
 800f5f8:	6010      	str	r0, [r2, #0]
 800f5fa:	6051      	str	r1, [r2, #4]
 800f5fc:	881b      	ldrh	r3, [r3, #0]
 800f5fe:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800f600:	79fb      	ldrb	r3, [r7, #7]
 800f602:	1c5a      	adds	r2, r3, #1
 800f604:	71fa      	strb	r2, [r7, #7]
 800f606:	461a      	mov	r2, r3
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	00db      	lsls	r3, r3, #3
 800f610:	4a46      	ldr	r2, [pc, #280]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f612:	4413      	add	r3, r2
 800f614:	4a56      	ldr	r2, [pc, #344]	; (800f770 <UpdateSIGNALSNames+0x394>)
 800f616:	6810      	ldr	r0, [r2, #0]
 800f618:	6018      	str	r0, [r3, #0]
 800f61a:	8891      	ldrh	r1, [r2, #4]
 800f61c:	7992      	ldrb	r2, [r2, #6]
 800f61e:	8099      	strh	r1, [r3, #4]
 800f620:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	1c5a      	adds	r2, r3, #1
 800f626:	71fa      	strb	r2, [r7, #7]
 800f628:	461a      	mov	r2, r3
 800f62a:	4613      	mov	r3, r2
 800f62c:	009b      	lsls	r3, r3, #2
 800f62e:	4413      	add	r3, r2
 800f630:	00db      	lsls	r3, r3, #3
 800f632:	4a3e      	ldr	r2, [pc, #248]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f634:	4413      	add	r3, r2
 800f636:	4a4f      	ldr	r2, [pc, #316]	; (800f774 <UpdateSIGNALSNames+0x398>)
 800f638:	6810      	ldr	r0, [r2, #0]
 800f63a:	6018      	str	r0, [r3, #0]
 800f63c:	8891      	ldrh	r1, [r2, #4]
 800f63e:	7992      	ldrb	r2, [r2, #6]
 800f640:	8099      	strh	r1, [r3, #4]
 800f642:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800f644:	79fb      	ldrb	r3, [r7, #7]
 800f646:	1c5a      	adds	r2, r3, #1
 800f648:	71fa      	strb	r2, [r7, #7]
 800f64a:	461a      	mov	r2, r3
 800f64c:	4613      	mov	r3, r2
 800f64e:	009b      	lsls	r3, r3, #2
 800f650:	4413      	add	r3, r2
 800f652:	00db      	lsls	r3, r3, #3
 800f654:	4a35      	ldr	r2, [pc, #212]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f656:	4413      	add	r3, r2
 800f658:	4a47      	ldr	r2, [pc, #284]	; (800f778 <UpdateSIGNALSNames+0x39c>)
 800f65a:	6810      	ldr	r0, [r2, #0]
 800f65c:	6018      	str	r0, [r3, #0]
 800f65e:	8891      	ldrh	r1, [r2, #4]
 800f660:	7992      	ldrb	r2, [r2, #6]
 800f662:	8099      	strh	r1, [r3, #4]
 800f664:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	1c5a      	adds	r2, r3, #1
 800f66a:	71fa      	strb	r2, [r7, #7]
 800f66c:	461a      	mov	r2, r3
 800f66e:	4613      	mov	r3, r2
 800f670:	009b      	lsls	r3, r3, #2
 800f672:	4413      	add	r3, r2
 800f674:	00db      	lsls	r3, r3, #3
 800f676:	4a2d      	ldr	r2, [pc, #180]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f678:	4413      	add	r3, r2
 800f67a:	4a40      	ldr	r2, [pc, #256]	; (800f77c <UpdateSIGNALSNames+0x3a0>)
 800f67c:	6810      	ldr	r0, [r2, #0]
 800f67e:	6018      	str	r0, [r3, #0]
 800f680:	8891      	ldrh	r1, [r2, #4]
 800f682:	7992      	ldrb	r2, [r2, #6]
 800f684:	8099      	strh	r1, [r3, #4]
 800f686:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800f688:	79fb      	ldrb	r3, [r7, #7]
 800f68a:	1c5a      	adds	r2, r3, #1
 800f68c:	71fa      	strb	r2, [r7, #7]
 800f68e:	461a      	mov	r2, r3
 800f690:	4613      	mov	r3, r2
 800f692:	009b      	lsls	r3, r3, #2
 800f694:	4413      	add	r3, r2
 800f696:	00db      	lsls	r3, r3, #3
 800f698:	4a24      	ldr	r2, [pc, #144]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f69a:	4413      	add	r3, r2
 800f69c:	4938      	ldr	r1, [pc, #224]	; (800f780 <UpdateSIGNALSNames+0x3a4>)
 800f69e:	461a      	mov	r2, r3
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	cb03      	ldmia	r3!, {r0, r1}
 800f6a4:	6010      	str	r0, [r2, #0]
 800f6a6:	6051      	str	r1, [r2, #4]
 800f6a8:	8819      	ldrh	r1, [r3, #0]
 800f6aa:	789b      	ldrb	r3, [r3, #2]
 800f6ac:	8111      	strh	r1, [r2, #8]
 800f6ae:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800f6b0:	79fb      	ldrb	r3, [r7, #7]
 800f6b2:	1c5a      	adds	r2, r3, #1
 800f6b4:	71fa      	strb	r2, [r7, #7]
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	4613      	mov	r3, r2
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	4413      	add	r3, r2
 800f6be:	00db      	lsls	r3, r3, #3
 800f6c0:	4a1a      	ldr	r2, [pc, #104]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f6c2:	4413      	add	r3, r2
 800f6c4:	4a2f      	ldr	r2, [pc, #188]	; (800f784 <UpdateSIGNALSNames+0x3a8>)
 800f6c6:	6810      	ldr	r0, [r2, #0]
 800f6c8:	6018      	str	r0, [r3, #0]
 800f6ca:	8891      	ldrh	r1, [r2, #4]
 800f6cc:	7992      	ldrb	r2, [r2, #6]
 800f6ce:	8099      	strh	r1, [r3, #4]
 800f6d0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	1c5a      	adds	r2, r3, #1
 800f6d6:	71fa      	strb	r2, [r7, #7]
 800f6d8:	461a      	mov	r2, r3
 800f6da:	4613      	mov	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4413      	add	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	4a12      	ldr	r2, [pc, #72]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f6e4:	4413      	add	r3, r2
 800f6e6:	4a28      	ldr	r2, [pc, #160]	; (800f788 <UpdateSIGNALSNames+0x3ac>)
 800f6e8:	6810      	ldr	r0, [r2, #0]
 800f6ea:	6018      	str	r0, [r3, #0]
 800f6ec:	8891      	ldrh	r1, [r2, #4]
 800f6ee:	7992      	ldrb	r2, [r2, #6]
 800f6f0:	8099      	strh	r1, [r3, #4]
 800f6f2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800f6f4:	79fb      	ldrb	r3, [r7, #7]
 800f6f6:	1c5a      	adds	r2, r3, #1
 800f6f8:	71fa      	strb	r2, [r7, #7]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	4613      	mov	r3, r2
 800f6fe:	009b      	lsls	r3, r3, #2
 800f700:	4413      	add	r3, r2
 800f702:	00db      	lsls	r3, r3, #3
 800f704:	4a09      	ldr	r2, [pc, #36]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f706:	4413      	add	r3, r2
 800f708:	4a20      	ldr	r2, [pc, #128]	; (800f78c <UpdateSIGNALSNames+0x3b0>)
 800f70a:	6810      	ldr	r0, [r2, #0]
 800f70c:	6018      	str	r0, [r3, #0]
 800f70e:	8891      	ldrh	r1, [r2, #4]
 800f710:	7992      	ldrb	r2, [r2, #6]
 800f712:	8099      	strh	r1, [r3, #4]
 800f714:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800f716:	79fb      	ldrb	r3, [r7, #7]
 800f718:	1c5a      	adds	r2, r3, #1
 800f71a:	71fa      	strb	r2, [r7, #7]
 800f71c:	461a      	mov	r2, r3
 800f71e:	4613      	mov	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	4413      	add	r3, r2
 800f724:	00db      	lsls	r3, r3, #3
 800f726:	4a01      	ldr	r2, [pc, #4]	; (800f72c <UpdateSIGNALSNames+0x350>)
 800f728:	4413      	add	r3, r2
 800f72a:	e031      	b.n	800f790 <UpdateSIGNALSNames+0x3b4>
 800f72c:	200053fc 	.word	0x200053fc
 800f730:	08029dbc 	.word	0x08029dbc
 800f734:	08029dc4 	.word	0x08029dc4
 800f738:	08029dcc 	.word	0x08029dcc
 800f73c:	08029dd4 	.word	0x08029dd4
 800f740:	08029ddc 	.word	0x08029ddc
 800f744:	08029de4 	.word	0x08029de4
 800f748:	08029dec 	.word	0x08029dec
 800f74c:	08029df4 	.word	0x08029df4
 800f750:	08029dfc 	.word	0x08029dfc
 800f754:	08029e08 	.word	0x08029e08
 800f758:	08029e10 	.word	0x08029e10
 800f75c:	08029e1c 	.word	0x08029e1c
 800f760:	08029e28 	.word	0x08029e28
 800f764:	08029e34 	.word	0x08029e34
 800f768:	08029e40 	.word	0x08029e40
 800f76c:	08029e4c 	.word	0x08029e4c
 800f770:	08029e58 	.word	0x08029e58
 800f774:	08029e60 	.word	0x08029e60
 800f778:	08029e68 	.word	0x08029e68
 800f77c:	08029e70 	.word	0x08029e70
 800f780:	08029e78 	.word	0x08029e78
 800f784:	08029e84 	.word	0x08029e84
 800f788:	08029e8c 	.word	0x08029e8c
 800f78c:	08029e94 	.word	0x08029e94
 800f790:	4acd      	ldr	r2, [pc, #820]	; (800fac8 <UpdateSIGNALSNames+0x6ec>)
 800f792:	6810      	ldr	r0, [r2, #0]
 800f794:	6018      	str	r0, [r3, #0]
 800f796:	8891      	ldrh	r1, [r2, #4]
 800f798:	7992      	ldrb	r2, [r2, #6]
 800f79a:	8099      	strh	r1, [r3, #4]
 800f79c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800f79e:	79fb      	ldrb	r3, [r7, #7]
 800f7a0:	1c5a      	adds	r2, r3, #1
 800f7a2:	71fa      	strb	r2, [r7, #7]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4613      	mov	r3, r2
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	4413      	add	r3, r2
 800f7ac:	00db      	lsls	r3, r3, #3
 800f7ae:	4ac7      	ldr	r2, [pc, #796]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f7b0:	4413      	add	r3, r2
 800f7b2:	4ac7      	ldr	r2, [pc, #796]	; (800fad0 <UpdateSIGNALSNames+0x6f4>)
 800f7b4:	6810      	ldr	r0, [r2, #0]
 800f7b6:	6018      	str	r0, [r3, #0]
 800f7b8:	8891      	ldrh	r1, [r2, #4]
 800f7ba:	7992      	ldrb	r2, [r2, #6]
 800f7bc:	8099      	strh	r1, [r3, #4]
 800f7be:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800f7c0:	79fb      	ldrb	r3, [r7, #7]
 800f7c2:	1c5a      	adds	r2, r3, #1
 800f7c4:	71fa      	strb	r2, [r7, #7]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	4613      	mov	r3, r2
 800f7ca:	009b      	lsls	r3, r3, #2
 800f7cc:	4413      	add	r3, r2
 800f7ce:	00db      	lsls	r3, r3, #3
 800f7d0:	4abe      	ldr	r2, [pc, #760]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f7d2:	4413      	add	r3, r2
 800f7d4:	4abf      	ldr	r2, [pc, #764]	; (800fad4 <UpdateSIGNALSNames+0x6f8>)
 800f7d6:	6810      	ldr	r0, [r2, #0]
 800f7d8:	6018      	str	r0, [r3, #0]
 800f7da:	8891      	ldrh	r1, [r2, #4]
 800f7dc:	7992      	ldrb	r2, [r2, #6]
 800f7de:	8099      	strh	r1, [r3, #4]
 800f7e0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	1c5a      	adds	r2, r3, #1
 800f7e6:	71fa      	strb	r2, [r7, #7]
 800f7e8:	461a      	mov	r2, r3
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	4413      	add	r3, r2
 800f7f0:	00db      	lsls	r3, r3, #3
 800f7f2:	4ab6      	ldr	r2, [pc, #728]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f7f4:	4413      	add	r3, r2
 800f7f6:	4ab8      	ldr	r2, [pc, #736]	; (800fad8 <UpdateSIGNALSNames+0x6fc>)
 800f7f8:	6810      	ldr	r0, [r2, #0]
 800f7fa:	6018      	str	r0, [r3, #0]
 800f7fc:	8891      	ldrh	r1, [r2, #4]
 800f7fe:	7992      	ldrb	r2, [r2, #6]
 800f800:	8099      	strh	r1, [r3, #4]
 800f802:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800f804:	79fb      	ldrb	r3, [r7, #7]
 800f806:	1c5a      	adds	r2, r3, #1
 800f808:	71fa      	strb	r2, [r7, #7]
 800f80a:	461a      	mov	r2, r3
 800f80c:	4613      	mov	r3, r2
 800f80e:	009b      	lsls	r3, r3, #2
 800f810:	4413      	add	r3, r2
 800f812:	00db      	lsls	r3, r3, #3
 800f814:	4aad      	ldr	r2, [pc, #692]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f816:	4413      	add	r3, r2
 800f818:	49b0      	ldr	r1, [pc, #704]	; (800fadc <UpdateSIGNALSNames+0x700>)
 800f81a:	461a      	mov	r2, r3
 800f81c:	460b      	mov	r3, r1
 800f81e:	cb03      	ldmia	r3!, {r0, r1}
 800f820:	6010      	str	r0, [r2, #0]
 800f822:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800f824:	79fb      	ldrb	r3, [r7, #7]
 800f826:	1c5a      	adds	r2, r3, #1
 800f828:	71fa      	strb	r2, [r7, #7]
 800f82a:	461a      	mov	r2, r3
 800f82c:	4613      	mov	r3, r2
 800f82e:	009b      	lsls	r3, r3, #2
 800f830:	4413      	add	r3, r2
 800f832:	00db      	lsls	r3, r3, #3
 800f834:	4aa5      	ldr	r2, [pc, #660]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f836:	4413      	add	r3, r2
 800f838:	49a9      	ldr	r1, [pc, #676]	; (800fae0 <UpdateSIGNALSNames+0x704>)
 800f83a:	461a      	mov	r2, r3
 800f83c:	460b      	mov	r3, r1
 800f83e:	cb03      	ldmia	r3!, {r0, r1}
 800f840:	6010      	str	r0, [r2, #0]
 800f842:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800f844:	79fb      	ldrb	r3, [r7, #7]
 800f846:	1c5a      	adds	r2, r3, #1
 800f848:	71fa      	strb	r2, [r7, #7]
 800f84a:	461a      	mov	r2, r3
 800f84c:	4613      	mov	r3, r2
 800f84e:	009b      	lsls	r3, r3, #2
 800f850:	4413      	add	r3, r2
 800f852:	00db      	lsls	r3, r3, #3
 800f854:	4a9d      	ldr	r2, [pc, #628]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f856:	4413      	add	r3, r2
 800f858:	49a2      	ldr	r1, [pc, #648]	; (800fae4 <UpdateSIGNALSNames+0x708>)
 800f85a:	461a      	mov	r2, r3
 800f85c:	460b      	mov	r3, r1
 800f85e:	cb03      	ldmia	r3!, {r0, r1}
 800f860:	6010      	str	r0, [r2, #0]
 800f862:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	1c5a      	adds	r2, r3, #1
 800f868:	71fa      	strb	r2, [r7, #7]
 800f86a:	461a      	mov	r2, r3
 800f86c:	4613      	mov	r3, r2
 800f86e:	009b      	lsls	r3, r3, #2
 800f870:	4413      	add	r3, r2
 800f872:	00db      	lsls	r3, r3, #3
 800f874:	4a95      	ldr	r2, [pc, #596]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f876:	4413      	add	r3, r2
 800f878:	499b      	ldr	r1, [pc, #620]	; (800fae8 <UpdateSIGNALSNames+0x70c>)
 800f87a:	461a      	mov	r2, r3
 800f87c:	460b      	mov	r3, r1
 800f87e:	cb03      	ldmia	r3!, {r0, r1}
 800f880:	6010      	str	r0, [r2, #0]
 800f882:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	1c5a      	adds	r2, r3, #1
 800f888:	71fa      	strb	r2, [r7, #7]
 800f88a:	461a      	mov	r2, r3
 800f88c:	4613      	mov	r3, r2
 800f88e:	009b      	lsls	r3, r3, #2
 800f890:	4413      	add	r3, r2
 800f892:	00db      	lsls	r3, r3, #3
 800f894:	4a8d      	ldr	r2, [pc, #564]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f896:	4413      	add	r3, r2
 800f898:	4994      	ldr	r1, [pc, #592]	; (800faec <UpdateSIGNALSNames+0x710>)
 800f89a:	461a      	mov	r2, r3
 800f89c:	460b      	mov	r3, r1
 800f89e:	cb03      	ldmia	r3!, {r0, r1}
 800f8a0:	6010      	str	r0, [r2, #0]
 800f8a2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800f8a4:	79fb      	ldrb	r3, [r7, #7]
 800f8a6:	1c5a      	adds	r2, r3, #1
 800f8a8:	71fa      	strb	r2, [r7, #7]
 800f8aa:	461a      	mov	r2, r3
 800f8ac:	4613      	mov	r3, r2
 800f8ae:	009b      	lsls	r3, r3, #2
 800f8b0:	4413      	add	r3, r2
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	4a85      	ldr	r2, [pc, #532]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f8b6:	4413      	add	r3, r2
 800f8b8:	498d      	ldr	r1, [pc, #564]	; (800faf0 <UpdateSIGNALSNames+0x714>)
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	460b      	mov	r3, r1
 800f8be:	cb03      	ldmia	r3!, {r0, r1}
 800f8c0:	6010      	str	r0, [r2, #0]
 800f8c2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800f8c4:	79fb      	ldrb	r3, [r7, #7]
 800f8c6:	1c5a      	adds	r2, r3, #1
 800f8c8:	71fa      	strb	r2, [r7, #7]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	009b      	lsls	r3, r3, #2
 800f8d0:	4413      	add	r3, r2
 800f8d2:	00db      	lsls	r3, r3, #3
 800f8d4:	4a7d      	ldr	r2, [pc, #500]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f8d6:	4413      	add	r3, r2
 800f8d8:	4986      	ldr	r1, [pc, #536]	; (800faf4 <UpdateSIGNALSNames+0x718>)
 800f8da:	461a      	mov	r2, r3
 800f8dc:	460b      	mov	r3, r1
 800f8de:	cb03      	ldmia	r3!, {r0, r1}
 800f8e0:	6010      	str	r0, [r2, #0]
 800f8e2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800f8e4:	79fb      	ldrb	r3, [r7, #7]
 800f8e6:	1c5a      	adds	r2, r3, #1
 800f8e8:	71fa      	strb	r2, [r7, #7]
 800f8ea:	461a      	mov	r2, r3
 800f8ec:	4613      	mov	r3, r2
 800f8ee:	009b      	lsls	r3, r3, #2
 800f8f0:	4413      	add	r3, r2
 800f8f2:	00db      	lsls	r3, r3, #3
 800f8f4:	4a75      	ldr	r2, [pc, #468]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f8f6:	4413      	add	r3, r2
 800f8f8:	497f      	ldr	r1, [pc, #508]	; (800faf8 <UpdateSIGNALSNames+0x71c>)
 800f8fa:	461a      	mov	r2, r3
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	cb03      	ldmia	r3!, {r0, r1}
 800f900:	6010      	str	r0, [r2, #0]
 800f902:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800f904:	79fb      	ldrb	r3, [r7, #7]
 800f906:	1c5a      	adds	r2, r3, #1
 800f908:	71fa      	strb	r2, [r7, #7]
 800f90a:	461a      	mov	r2, r3
 800f90c:	4613      	mov	r3, r2
 800f90e:	009b      	lsls	r3, r3, #2
 800f910:	4413      	add	r3, r2
 800f912:	00db      	lsls	r3, r3, #3
 800f914:	4a6d      	ldr	r2, [pc, #436]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f916:	4413      	add	r3, r2
 800f918:	4978      	ldr	r1, [pc, #480]	; (800fafc <UpdateSIGNALSNames+0x720>)
 800f91a:	461a      	mov	r2, r3
 800f91c:	460b      	mov	r3, r1
 800f91e:	cb03      	ldmia	r3!, {r0, r1}
 800f920:	6010      	str	r0, [r2, #0]
 800f922:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800f924:	79fb      	ldrb	r3, [r7, #7]
 800f926:	1c5a      	adds	r2, r3, #1
 800f928:	71fa      	strb	r2, [r7, #7]
 800f92a:	461a      	mov	r2, r3
 800f92c:	4613      	mov	r3, r2
 800f92e:	009b      	lsls	r3, r3, #2
 800f930:	4413      	add	r3, r2
 800f932:	00db      	lsls	r3, r3, #3
 800f934:	4a65      	ldr	r2, [pc, #404]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f936:	4413      	add	r3, r2
 800f938:	4971      	ldr	r1, [pc, #452]	; (800fb00 <UpdateSIGNALSNames+0x724>)
 800f93a:	461a      	mov	r2, r3
 800f93c:	460b      	mov	r3, r1
 800f93e:	cb03      	ldmia	r3!, {r0, r1}
 800f940:	6010      	str	r0, [r2, #0]
 800f942:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800f944:	79fb      	ldrb	r3, [r7, #7]
 800f946:	1c5a      	adds	r2, r3, #1
 800f948:	71fa      	strb	r2, [r7, #7]
 800f94a:	461a      	mov	r2, r3
 800f94c:	4613      	mov	r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4413      	add	r3, r2
 800f952:	00db      	lsls	r3, r3, #3
 800f954:	4a5d      	ldr	r2, [pc, #372]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f956:	4413      	add	r3, r2
 800f958:	496a      	ldr	r1, [pc, #424]	; (800fb04 <UpdateSIGNALSNames+0x728>)
 800f95a:	461a      	mov	r2, r3
 800f95c:	460b      	mov	r3, r1
 800f95e:	cb03      	ldmia	r3!, {r0, r1}
 800f960:	6010      	str	r0, [r2, #0]
 800f962:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800f964:	79fb      	ldrb	r3, [r7, #7]
 800f966:	1c5a      	adds	r2, r3, #1
 800f968:	71fa      	strb	r2, [r7, #7]
 800f96a:	461a      	mov	r2, r3
 800f96c:	4613      	mov	r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4413      	add	r3, r2
 800f972:	00db      	lsls	r3, r3, #3
 800f974:	4a55      	ldr	r2, [pc, #340]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f976:	4413      	add	r3, r2
 800f978:	4963      	ldr	r1, [pc, #396]	; (800fb08 <UpdateSIGNALSNames+0x72c>)
 800f97a:	461a      	mov	r2, r3
 800f97c:	460b      	mov	r3, r1
 800f97e:	cb03      	ldmia	r3!, {r0, r1}
 800f980:	6010      	str	r0, [r2, #0]
 800f982:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800f984:	79fb      	ldrb	r3, [r7, #7]
 800f986:	1c5a      	adds	r2, r3, #1
 800f988:	71fa      	strb	r2, [r7, #7]
 800f98a:	461a      	mov	r2, r3
 800f98c:	4613      	mov	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	4413      	add	r3, r2
 800f992:	00db      	lsls	r3, r3, #3
 800f994:	4a4d      	ldr	r2, [pc, #308]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f996:	4413      	add	r3, r2
 800f998:	495c      	ldr	r1, [pc, #368]	; (800fb0c <UpdateSIGNALSNames+0x730>)
 800f99a:	461a      	mov	r2, r3
 800f99c:	460b      	mov	r3, r1
 800f99e:	cb03      	ldmia	r3!, {r0, r1}
 800f9a0:	6010      	str	r0, [r2, #0]
 800f9a2:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	1c5a      	adds	r2, r3, #1
 800f9a8:	71fa      	strb	r2, [r7, #7]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	4a45      	ldr	r2, [pc, #276]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f9b6:	4413      	add	r3, r2
 800f9b8:	4a55      	ldr	r2, [pc, #340]	; (800fb10 <UpdateSIGNALSNames+0x734>)
 800f9ba:	461c      	mov	r4, r3
 800f9bc:	4613      	mov	r3, r2
 800f9be:	cb07      	ldmia	r3!, {r0, r1, r2}
 800f9c0:	6020      	str	r0, [r4, #0]
 800f9c2:	6061      	str	r1, [r4, #4]
 800f9c4:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800f9c6:	79fb      	ldrb	r3, [r7, #7]
 800f9c8:	1c5a      	adds	r2, r3, #1
 800f9ca:	71fa      	strb	r2, [r7, #7]
 800f9cc:	461a      	mov	r2, r3
 800f9ce:	4613      	mov	r3, r2
 800f9d0:	009b      	lsls	r3, r3, #2
 800f9d2:	4413      	add	r3, r2
 800f9d4:	00db      	lsls	r3, r3, #3
 800f9d6:	4a3d      	ldr	r2, [pc, #244]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800f9d8:	4413      	add	r3, r2
 800f9da:	494e      	ldr	r1, [pc, #312]	; (800fb14 <UpdateSIGNALSNames+0x738>)
 800f9dc:	461a      	mov	r2, r3
 800f9de:	460b      	mov	r3, r1
 800f9e0:	cb03      	ldmia	r3!, {r0, r1}
 800f9e2:	6010      	str	r0, [r2, #0]
 800f9e4:	6051      	str	r1, [r2, #4]
 800f9e6:	8819      	ldrh	r1, [r3, #0]
 800f9e8:	789b      	ldrb	r3, [r3, #2]
 800f9ea:	8111      	strh	r1, [r2, #8]
 800f9ec:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	71fa      	strb	r2, [r7, #7]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	4613      	mov	r3, r2
 800f9f8:	009b      	lsls	r3, r3, #2
 800f9fa:	4413      	add	r3, r2
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	4a33      	ldr	r2, [pc, #204]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fa00:	4413      	add	r3, r2
 800fa02:	4a45      	ldr	r2, [pc, #276]	; (800fb18 <UpdateSIGNALSNames+0x73c>)
 800fa04:	461c      	mov	r4, r3
 800fa06:	4613      	mov	r3, r2
 800fa08:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa0a:	6020      	str	r0, [r4, #0]
 800fa0c:	6061      	str	r1, [r4, #4]
 800fa0e:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800fa10:	79fb      	ldrb	r3, [r7, #7]
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	71fa      	strb	r2, [r7, #7]
 800fa16:	461a      	mov	r2, r3
 800fa18:	4613      	mov	r3, r2
 800fa1a:	009b      	lsls	r3, r3, #2
 800fa1c:	4413      	add	r3, r2
 800fa1e:	00db      	lsls	r3, r3, #3
 800fa20:	4a2a      	ldr	r2, [pc, #168]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fa22:	4413      	add	r3, r2
 800fa24:	493d      	ldr	r1, [pc, #244]	; (800fb1c <UpdateSIGNALSNames+0x740>)
 800fa26:	461a      	mov	r2, r3
 800fa28:	460b      	mov	r3, r1
 800fa2a:	cb03      	ldmia	r3!, {r0, r1}
 800fa2c:	6010      	str	r0, [r2, #0]
 800fa2e:	6051      	str	r1, [r2, #4]
 800fa30:	8819      	ldrh	r1, [r3, #0]
 800fa32:	789b      	ldrb	r3, [r3, #2]
 800fa34:	8111      	strh	r1, [r2, #8]
 800fa36:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	71fa      	strb	r2, [r7, #7]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	4a20      	ldr	r2, [pc, #128]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	4934      	ldr	r1, [pc, #208]	; (800fb20 <UpdateSIGNALSNames+0x744>)
 800fa4e:	461a      	mov	r2, r3
 800fa50:	460b      	mov	r3, r1
 800fa52:	cb03      	ldmia	r3!, {r0, r1}
 800fa54:	6010      	str	r0, [r2, #0]
 800fa56:	6051      	str	r1, [r2, #4]
 800fa58:	8819      	ldrh	r1, [r3, #0]
 800fa5a:	789b      	ldrb	r3, [r3, #2]
 800fa5c:	8111      	strh	r1, [r2, #8]
 800fa5e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800fa60:	79fb      	ldrb	r3, [r7, #7]
 800fa62:	1c5a      	adds	r2, r3, #1
 800fa64:	71fa      	strb	r2, [r7, #7]
 800fa66:	461a      	mov	r2, r3
 800fa68:	4613      	mov	r3, r2
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	00db      	lsls	r3, r3, #3
 800fa70:	4a16      	ldr	r2, [pc, #88]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fa72:	4413      	add	r3, r2
 800fa74:	4a2b      	ldr	r2, [pc, #172]	; (800fb24 <UpdateSIGNALSNames+0x748>)
 800fa76:	461c      	mov	r4, r3
 800fa78:	4613      	mov	r3, r2
 800fa7a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fa7c:	6020      	str	r0, [r4, #0]
 800fa7e:	6061      	str	r1, [r4, #4]
 800fa80:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800fa82:	79fb      	ldrb	r3, [r7, #7]
 800fa84:	1c5a      	adds	r2, r3, #1
 800fa86:	71fa      	strb	r2, [r7, #7]
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4613      	mov	r3, r2
 800fa8c:	009b      	lsls	r3, r3, #2
 800fa8e:	4413      	add	r3, r2
 800fa90:	00db      	lsls	r3, r3, #3
 800fa92:	4a0e      	ldr	r2, [pc, #56]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fa94:	4413      	add	r3, r2
 800fa96:	4924      	ldr	r1, [pc, #144]	; (800fb28 <UpdateSIGNALSNames+0x74c>)
 800fa98:	461a      	mov	r2, r3
 800fa9a:	460b      	mov	r3, r1
 800fa9c:	cb03      	ldmia	r3!, {r0, r1}
 800fa9e:	6010      	str	r0, [r2, #0]
 800faa0:	6051      	str	r1, [r2, #4]
 800faa2:	8819      	ldrh	r1, [r3, #0]
 800faa4:	789b      	ldrb	r3, [r3, #2]
 800faa6:	8111      	strh	r1, [r2, #8]
 800faa8:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800faaa:	79fb      	ldrb	r3, [r7, #7]
 800faac:	1c5a      	adds	r2, r3, #1
 800faae:	71fa      	strb	r2, [r7, #7]
 800fab0:	461a      	mov	r2, r3
 800fab2:	4613      	mov	r3, r2
 800fab4:	009b      	lsls	r3, r3, #2
 800fab6:	4413      	add	r3, r2
 800fab8:	00db      	lsls	r3, r3, #3
 800faba:	4a04      	ldr	r2, [pc, #16]	; (800facc <UpdateSIGNALSNames+0x6f0>)
 800fabc:	4413      	add	r3, r2
 800fabe:	4a1b      	ldr	r2, [pc, #108]	; (800fb2c <UpdateSIGNALSNames+0x750>)
 800fac0:	6810      	ldr	r0, [r2, #0]
 800fac2:	6018      	str	r0, [r3, #0]
 800fac4:	e034      	b.n	800fb30 <UpdateSIGNALSNames+0x754>
 800fac6:	bf00      	nop
 800fac8:	08029e9c 	.word	0x08029e9c
 800facc:	200053fc 	.word	0x200053fc
 800fad0:	08029ea4 	.word	0x08029ea4
 800fad4:	08029eac 	.word	0x08029eac
 800fad8:	08029eb4 	.word	0x08029eb4
 800fadc:	08029ebc 	.word	0x08029ebc
 800fae0:	08029ec4 	.word	0x08029ec4
 800fae4:	08029ecc 	.word	0x08029ecc
 800fae8:	08029ed4 	.word	0x08029ed4
 800faec:	08029edc 	.word	0x08029edc
 800faf0:	08029ee4 	.word	0x08029ee4
 800faf4:	08029eec 	.word	0x08029eec
 800faf8:	08029ef4 	.word	0x08029ef4
 800fafc:	08029efc 	.word	0x08029efc
 800fb00:	08029f04 	.word	0x08029f04
 800fb04:	08029f0c 	.word	0x08029f0c
 800fb08:	08029f14 	.word	0x08029f14
 800fb0c:	08029f1c 	.word	0x08029f1c
 800fb10:	08029f24 	.word	0x08029f24
 800fb14:	08029f30 	.word	0x08029f30
 800fb18:	08029f3c 	.word	0x08029f3c
 800fb1c:	08029f48 	.word	0x08029f48
 800fb20:	08029f54 	.word	0x08029f54
 800fb24:	08029f60 	.word	0x08029f60
 800fb28:	08029f6c 	.word	0x08029f6c
 800fb2c:	08029f78 	.word	0x08029f78
 800fb30:	8891      	ldrh	r1, [r2, #4]
 800fb32:	7992      	ldrb	r2, [r2, #6]
 800fb34:	8099      	strh	r1, [r3, #4]
 800fb36:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	71fa      	strb	r2, [r7, #7]
 800fb3e:	461a      	mov	r2, r3
 800fb40:	4613      	mov	r3, r2
 800fb42:	009b      	lsls	r3, r3, #2
 800fb44:	4413      	add	r3, r2
 800fb46:	00db      	lsls	r3, r3, #3
 800fb48:	4a82      	ldr	r2, [pc, #520]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fb4a:	4413      	add	r3, r2
 800fb4c:	4a82      	ldr	r2, [pc, #520]	; (800fd58 <UpdateSIGNALSNames+0x97c>)
 800fb4e:	6810      	ldr	r0, [r2, #0]
 800fb50:	6018      	str	r0, [r3, #0]
 800fb52:	8891      	ldrh	r1, [r2, #4]
 800fb54:	7992      	ldrb	r2, [r2, #6]
 800fb56:	8099      	strh	r1, [r3, #4]
 800fb58:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800fb5a:	79fb      	ldrb	r3, [r7, #7]
 800fb5c:	1c5a      	adds	r2, r3, #1
 800fb5e:	71fa      	strb	r2, [r7, #7]
 800fb60:	461a      	mov	r2, r3
 800fb62:	4613      	mov	r3, r2
 800fb64:	009b      	lsls	r3, r3, #2
 800fb66:	4413      	add	r3, r2
 800fb68:	00db      	lsls	r3, r3, #3
 800fb6a:	4a7a      	ldr	r2, [pc, #488]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fb6c:	4413      	add	r3, r2
 800fb6e:	4a7b      	ldr	r2, [pc, #492]	; (800fd5c <UpdateSIGNALSNames+0x980>)
 800fb70:	6810      	ldr	r0, [r2, #0]
 800fb72:	6018      	str	r0, [r3, #0]
 800fb74:	8891      	ldrh	r1, [r2, #4]
 800fb76:	7992      	ldrb	r2, [r2, #6]
 800fb78:	8099      	strh	r1, [r3, #4]
 800fb7a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800fb7c:	79fb      	ldrb	r3, [r7, #7]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	71fa      	strb	r2, [r7, #7]
 800fb82:	461a      	mov	r2, r3
 800fb84:	4613      	mov	r3, r2
 800fb86:	009b      	lsls	r3, r3, #2
 800fb88:	4413      	add	r3, r2
 800fb8a:	00db      	lsls	r3, r3, #3
 800fb8c:	4a71      	ldr	r2, [pc, #452]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fb8e:	4413      	add	r3, r2
 800fb90:	4a73      	ldr	r2, [pc, #460]	; (800fd60 <UpdateSIGNALSNames+0x984>)
 800fb92:	6810      	ldr	r0, [r2, #0]
 800fb94:	6018      	str	r0, [r3, #0]
 800fb96:	8891      	ldrh	r1, [r2, #4]
 800fb98:	7992      	ldrb	r2, [r2, #6]
 800fb9a:	8099      	strh	r1, [r3, #4]
 800fb9c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800fb9e:	79fb      	ldrb	r3, [r7, #7]
 800fba0:	1c5a      	adds	r2, r3, #1
 800fba2:	71fa      	strb	r2, [r7, #7]
 800fba4:	461a      	mov	r2, r3
 800fba6:	4613      	mov	r3, r2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	4413      	add	r3, r2
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	4a69      	ldr	r2, [pc, #420]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fbb0:	4413      	add	r3, r2
 800fbb2:	4a6c      	ldr	r2, [pc, #432]	; (800fd64 <UpdateSIGNALSNames+0x988>)
 800fbb4:	6810      	ldr	r0, [r2, #0]
 800fbb6:	6018      	str	r0, [r3, #0]
 800fbb8:	8891      	ldrh	r1, [r2, #4]
 800fbba:	7992      	ldrb	r2, [r2, #6]
 800fbbc:	8099      	strh	r1, [r3, #4]
 800fbbe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800fbc0:	79fb      	ldrb	r3, [r7, #7]
 800fbc2:	1c5a      	adds	r2, r3, #1
 800fbc4:	71fa      	strb	r2, [r7, #7]
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	4613      	mov	r3, r2
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	4413      	add	r3, r2
 800fbce:	00db      	lsls	r3, r3, #3
 800fbd0:	4a60      	ldr	r2, [pc, #384]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fbd2:	4413      	add	r3, r2
 800fbd4:	4a64      	ldr	r2, [pc, #400]	; (800fd68 <UpdateSIGNALSNames+0x98c>)
 800fbd6:	6810      	ldr	r0, [r2, #0]
 800fbd8:	6018      	str	r0, [r3, #0]
 800fbda:	8891      	ldrh	r1, [r2, #4]
 800fbdc:	7992      	ldrb	r2, [r2, #6]
 800fbde:	8099      	strh	r1, [r3, #4]
 800fbe0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800fbe2:	79fb      	ldrb	r3, [r7, #7]
 800fbe4:	1c5a      	adds	r2, r3, #1
 800fbe6:	71fa      	strb	r2, [r7, #7]
 800fbe8:	461a      	mov	r2, r3
 800fbea:	4613      	mov	r3, r2
 800fbec:	009b      	lsls	r3, r3, #2
 800fbee:	4413      	add	r3, r2
 800fbf0:	00db      	lsls	r3, r3, #3
 800fbf2:	4a58      	ldr	r2, [pc, #352]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fbf4:	4413      	add	r3, r2
 800fbf6:	4a5d      	ldr	r2, [pc, #372]	; (800fd6c <UpdateSIGNALSNames+0x990>)
 800fbf8:	6810      	ldr	r0, [r2, #0]
 800fbfa:	6018      	str	r0, [r3, #0]
 800fbfc:	8891      	ldrh	r1, [r2, #4]
 800fbfe:	7992      	ldrb	r2, [r2, #6]
 800fc00:	8099      	strh	r1, [r3, #4]
 800fc02:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800fc04:	79fb      	ldrb	r3, [r7, #7]
 800fc06:	1c5a      	adds	r2, r3, #1
 800fc08:	71fa      	strb	r2, [r7, #7]
 800fc0a:	461a      	mov	r2, r3
 800fc0c:	4613      	mov	r3, r2
 800fc0e:	009b      	lsls	r3, r3, #2
 800fc10:	4413      	add	r3, r2
 800fc12:	00db      	lsls	r3, r3, #3
 800fc14:	4a4f      	ldr	r2, [pc, #316]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fc16:	4413      	add	r3, r2
 800fc18:	4a55      	ldr	r2, [pc, #340]	; (800fd70 <UpdateSIGNALSNames+0x994>)
 800fc1a:	6810      	ldr	r0, [r2, #0]
 800fc1c:	6018      	str	r0, [r3, #0]
 800fc1e:	8891      	ldrh	r1, [r2, #4]
 800fc20:	7992      	ldrb	r2, [r2, #6]
 800fc22:	8099      	strh	r1, [r3, #4]
 800fc24:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800fc26:	79fb      	ldrb	r3, [r7, #7]
 800fc28:	1c5a      	adds	r2, r3, #1
 800fc2a:	71fa      	strb	r2, [r7, #7]
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	4613      	mov	r3, r2
 800fc30:	009b      	lsls	r3, r3, #2
 800fc32:	4413      	add	r3, r2
 800fc34:	00db      	lsls	r3, r3, #3
 800fc36:	4a47      	ldr	r2, [pc, #284]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fc38:	4413      	add	r3, r2
 800fc3a:	4a4e      	ldr	r2, [pc, #312]	; (800fd74 <UpdateSIGNALSNames+0x998>)
 800fc3c:	6810      	ldr	r0, [r2, #0]
 800fc3e:	6018      	str	r0, [r3, #0]
 800fc40:	8891      	ldrh	r1, [r2, #4]
 800fc42:	7992      	ldrb	r2, [r2, #6]
 800fc44:	8099      	strh	r1, [r3, #4]
 800fc46:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800fc48:	79fb      	ldrb	r3, [r7, #7]
 800fc4a:	1c5a      	adds	r2, r3, #1
 800fc4c:	71fa      	strb	r2, [r7, #7]
 800fc4e:	461a      	mov	r2, r3
 800fc50:	4613      	mov	r3, r2
 800fc52:	009b      	lsls	r3, r3, #2
 800fc54:	4413      	add	r3, r2
 800fc56:	00db      	lsls	r3, r3, #3
 800fc58:	4a3e      	ldr	r2, [pc, #248]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fc5a:	4413      	add	r3, r2
 800fc5c:	4a46      	ldr	r2, [pc, #280]	; (800fd78 <UpdateSIGNALSNames+0x99c>)
 800fc5e:	6810      	ldr	r0, [r2, #0]
 800fc60:	6018      	str	r0, [r3, #0]
 800fc62:	8891      	ldrh	r1, [r2, #4]
 800fc64:	7992      	ldrb	r2, [r2, #6]
 800fc66:	8099      	strh	r1, [r3, #4]
 800fc68:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800fc6a:	79fb      	ldrb	r3, [r7, #7]
 800fc6c:	1c5a      	adds	r2, r3, #1
 800fc6e:	71fa      	strb	r2, [r7, #7]
 800fc70:	461a      	mov	r2, r3
 800fc72:	4613      	mov	r3, r2
 800fc74:	009b      	lsls	r3, r3, #2
 800fc76:	4413      	add	r3, r2
 800fc78:	00db      	lsls	r3, r3, #3
 800fc7a:	4a36      	ldr	r2, [pc, #216]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fc7c:	4413      	add	r3, r2
 800fc7e:	4a3f      	ldr	r2, [pc, #252]	; (800fd7c <UpdateSIGNALSNames+0x9a0>)
 800fc80:	6810      	ldr	r0, [r2, #0]
 800fc82:	6018      	str	r0, [r3, #0]
 800fc84:	8891      	ldrh	r1, [r2, #4]
 800fc86:	7992      	ldrb	r2, [r2, #6]
 800fc88:	8099      	strh	r1, [r3, #4]
 800fc8a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800fc8c:	79fb      	ldrb	r3, [r7, #7]
 800fc8e:	1c5a      	adds	r2, r3, #1
 800fc90:	71fa      	strb	r2, [r7, #7]
 800fc92:	461a      	mov	r2, r3
 800fc94:	4613      	mov	r3, r2
 800fc96:	009b      	lsls	r3, r3, #2
 800fc98:	4413      	add	r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	4a2d      	ldr	r2, [pc, #180]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fc9e:	4413      	add	r3, r2
 800fca0:	4a37      	ldr	r2, [pc, #220]	; (800fd80 <UpdateSIGNALSNames+0x9a4>)
 800fca2:	6810      	ldr	r0, [r2, #0]
 800fca4:	6018      	str	r0, [r3, #0]
 800fca6:	8891      	ldrh	r1, [r2, #4]
 800fca8:	7992      	ldrb	r2, [r2, #6]
 800fcaa:	8099      	strh	r1, [r3, #4]
 800fcac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800fcae:	79fb      	ldrb	r3, [r7, #7]
 800fcb0:	1c5a      	adds	r2, r3, #1
 800fcb2:	71fa      	strb	r2, [r7, #7]
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	4613      	mov	r3, r2
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	4413      	add	r3, r2
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	4a25      	ldr	r2, [pc, #148]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fcc0:	4413      	add	r3, r2
 800fcc2:	4930      	ldr	r1, [pc, #192]	; (800fd84 <UpdateSIGNALSNames+0x9a8>)
 800fcc4:	461a      	mov	r2, r3
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	cb03      	ldmia	r3!, {r0, r1}
 800fcca:	6010      	str	r0, [r2, #0]
 800fccc:	6051      	str	r1, [r2, #4]
 800fcce:	881b      	ldrh	r3, [r3, #0]
 800fcd0:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800fcd2:	79fb      	ldrb	r3, [r7, #7]
 800fcd4:	1c5a      	adds	r2, r3, #1
 800fcd6:	71fa      	strb	r2, [r7, #7]
 800fcd8:	461a      	mov	r2, r3
 800fcda:	4613      	mov	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	00db      	lsls	r3, r3, #3
 800fce2:	4a1c      	ldr	r2, [pc, #112]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fce4:	4413      	add	r3, r2
 800fce6:	4a28      	ldr	r2, [pc, #160]	; (800fd88 <UpdateSIGNALSNames+0x9ac>)
 800fce8:	6810      	ldr	r0, [r2, #0]
 800fcea:	6018      	str	r0, [r3, #0]
 800fcec:	8891      	ldrh	r1, [r2, #4]
 800fcee:	7992      	ldrb	r2, [r2, #6]
 800fcf0:	8099      	strh	r1, [r3, #4]
 800fcf2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800fcf4:	79fb      	ldrb	r3, [r7, #7]
 800fcf6:	1c5a      	adds	r2, r3, #1
 800fcf8:	71fa      	strb	r2, [r7, #7]
 800fcfa:	461a      	mov	r2, r3
 800fcfc:	4613      	mov	r3, r2
 800fcfe:	009b      	lsls	r3, r3, #2
 800fd00:	4413      	add	r3, r2
 800fd02:	00db      	lsls	r3, r3, #3
 800fd04:	4a13      	ldr	r2, [pc, #76]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fd06:	4413      	add	r3, r2
 800fd08:	4a20      	ldr	r2, [pc, #128]	; (800fd8c <UpdateSIGNALSNames+0x9b0>)
 800fd0a:	461c      	mov	r4, r3
 800fd0c:	4613      	mov	r3, r2
 800fd0e:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd10:	6020      	str	r0, [r4, #0]
 800fd12:	6061      	str	r1, [r4, #4]
 800fd14:	60a2      	str	r2, [r4, #8]
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800fd1a:	79fb      	ldrb	r3, [r7, #7]
 800fd1c:	1c5a      	adds	r2, r3, #1
 800fd1e:	71fa      	strb	r2, [r7, #7]
 800fd20:	461a      	mov	r2, r3
 800fd22:	4613      	mov	r3, r2
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	00db      	lsls	r3, r3, #3
 800fd2a:	4a0a      	ldr	r2, [pc, #40]	; (800fd54 <UpdateSIGNALSNames+0x978>)
 800fd2c:	4413      	add	r3, r2
 800fd2e:	4a18      	ldr	r2, [pc, #96]	; (800fd90 <UpdateSIGNALSNames+0x9b4>)
 800fd30:	461c      	mov	r4, r3
 800fd32:	4613      	mov	r3, r2
 800fd34:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fd36:	6020      	str	r0, [r4, #0]
 800fd38:	6061      	str	r1, [r4, #4]
 800fd3a:	60a2      	str	r2, [r4, #8]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800fd40:	79fb      	ldrb	r3, [r7, #7]
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	4b13      	ldr	r3, [pc, #76]	; (800fd94 <UpdateSIGNALSNames+0x9b8>)
 800fd46:	801a      	strh	r2, [r3, #0]


}
 800fd48:	bf00      	nop
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bc90      	pop	{r4, r7}
 800fd50:	4770      	bx	lr
 800fd52:	bf00      	nop
 800fd54:	200053fc 	.word	0x200053fc
 800fd58:	08029f80 	.word	0x08029f80
 800fd5c:	08029f88 	.word	0x08029f88
 800fd60:	08029f90 	.word	0x08029f90
 800fd64:	08029f98 	.word	0x08029f98
 800fd68:	08029fa0 	.word	0x08029fa0
 800fd6c:	08029fa8 	.word	0x08029fa8
 800fd70:	08029fb0 	.word	0x08029fb0
 800fd74:	08029fb8 	.word	0x08029fb8
 800fd78:	08029fc0 	.word	0x08029fc0
 800fd7c:	08029fc8 	.word	0x08029fc8
 800fd80:	08029fd0 	.word	0x08029fd0
 800fd84:	08029fd8 	.word	0x08029fd8
 800fd88:	08029fe4 	.word	0x08029fe4
 800fd8c:	08029fec 	.word	0x08029fec
 800fd90:	08029ffc 	.word	0x08029ffc
 800fd94:	20005eec 	.word	0x20005eec

0800fd98 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800fd98:	b5b0      	push	{r4, r5, r7, lr}
 800fd9a:	b086      	sub	sp, #24
 800fd9c:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800fd9e:	4974      	ldr	r1, [pc, #464]	; (800ff70 <print_self_DetailsSiemens+0x1d8>)
 800fda0:	4874      	ldr	r0, [pc, #464]	; (800ff74 <print_self_DetailsSiemens+0x1dc>)
 800fda2:	f015 fe5b 	bl	8025a5c <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800fda6:	4b74      	ldr	r3, [pc, #464]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fda8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fdac:	4619      	mov	r1, r3
 800fdae:	4873      	ldr	r0, [pc, #460]	; (800ff7c <print_self_DetailsSiemens+0x1e4>)
 800fdb0:	f015 fe54 	bl	8025a5c <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800fdb4:	4b70      	ldr	r3, [pc, #448]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdb6:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800fdba:	4619      	mov	r1, r3
 800fdbc:	4b6e      	ldr	r3, [pc, #440]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4b6c      	ldr	r3, [pc, #432]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdc6:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800fdca:	4618      	mov	r0, r3
 800fdcc:	4b6a      	ldr	r3, [pc, #424]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdce:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	486a      	ldr	r0, [pc, #424]	; (800ff80 <print_self_DetailsSiemens+0x1e8>)
 800fdd8:	f015 fe40 	bl	8025a5c <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800fddc:	4b66      	ldr	r3, [pc, #408]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdde:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800fde2:	4618      	mov	r0, r3
 800fde4:	4b64      	ldr	r3, [pc, #400]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fde6:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800fdea:	461c      	mov	r4, r3
 800fdec:	4b62      	ldr	r3, [pc, #392]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdee:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800fdf2:	461d      	mov	r5, r3
 800fdf4:	4b60      	ldr	r3, [pc, #384]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdf6:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	4b5e      	ldr	r3, [pc, #376]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fdfe:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 800fe02:	4619      	mov	r1, r3
 800fe04:	4b5c      	ldr	r3, [pc, #368]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe06:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800fe0a:	9302      	str	r3, [sp, #8]
 800fe0c:	9101      	str	r1, [sp, #4]
 800fe0e:	9200      	str	r2, [sp, #0]
 800fe10:	462b      	mov	r3, r5
 800fe12:	4622      	mov	r2, r4
 800fe14:	4601      	mov	r1, r0
 800fe16:	485b      	ldr	r0, [pc, #364]	; (800ff84 <print_self_DetailsSiemens+0x1ec>)
 800fe18:	f015 fe20 	bl	8025a5c <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800fe1c:	4b56      	ldr	r3, [pc, #344]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe1e:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800fe22:	4619      	mov	r1, r3
 800fe24:	4858      	ldr	r0, [pc, #352]	; (800ff88 <print_self_DetailsSiemens+0x1f0>)
 800fe26:	f015 fe19 	bl	8025a5c <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	71fb      	strb	r3, [r7, #7]
 800fe2e:	e037      	b.n	800fea0 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800fe30:	79fb      	ldrb	r3, [r7, #7]
 800fe32:	1c59      	adds	r1, r3, #1
 800fe34:	79fb      	ldrb	r3, [r7, #7]
 800fe36:	4a50      	ldr	r2, [pc, #320]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe38:	33b2      	adds	r3, #178	; 0xb2
 800fe3a:	009b      	lsls	r3, r3, #2
 800fe3c:	4413      	add	r3, r2
 800fe3e:	785b      	ldrb	r3, [r3, #1]
 800fe40:	461c      	mov	r4, r3
 800fe42:	79fb      	ldrb	r3, [r7, #7]
 800fe44:	4a4c      	ldr	r2, [pc, #304]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe46:	009b      	lsls	r3, r3, #2
 800fe48:	4413      	add	r3, r2
 800fe4a:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800fe4e:	461d      	mov	r5, r3
 800fe50:	79fb      	ldrb	r3, [r7, #7]
 800fe52:	4a49      	ldr	r2, [pc, #292]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe54:	009b      	lsls	r3, r3, #2
 800fe56:	4413      	add	r3, r2
 800fe58:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	79fb      	ldrb	r3, [r7, #7]
 800fe60:	4a45      	ldr	r2, [pc, #276]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe62:	009b      	lsls	r3, r3, #2
 800fe64:	4413      	add	r3, r2
 800fe66:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800fe6a:	9301      	str	r3, [sp, #4]
 800fe6c:	9000      	str	r0, [sp, #0]
 800fe6e:	462b      	mov	r3, r5
 800fe70:	4622      	mov	r2, r4
 800fe72:	4846      	ldr	r0, [pc, #280]	; (800ff8c <print_self_DetailsSiemens+0x1f4>)
 800fe74:	f015 fdf2 	bl	8025a5c <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800fe78:	79fb      	ldrb	r3, [r7, #7]
 800fe7a:	4a3f      	ldr	r2, [pc, #252]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe7c:	33ba      	adds	r3, #186	; 0xba
 800fe7e:	009b      	lsls	r3, r3, #2
 800fe80:	4413      	add	r3, r2
 800fe82:	88db      	ldrh	r3, [r3, #6]
 800fe84:	4619      	mov	r1, r3
 800fe86:	79fb      	ldrb	r3, [r7, #7]
 800fe88:	4a3b      	ldr	r2, [pc, #236]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fe8a:	009b      	lsls	r3, r3, #2
 800fe8c:	4413      	add	r3, r2
 800fe8e:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800fe92:	461a      	mov	r2, r3
 800fe94:	483e      	ldr	r0, [pc, #248]	; (800ff90 <print_self_DetailsSiemens+0x1f8>)
 800fe96:	f015 fde1 	bl	8025a5c <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800fe9a:	79fb      	ldrb	r3, [r7, #7]
 800fe9c:	3301      	adds	r3, #1
 800fe9e:	71fb      	strb	r3, [r7, #7]
 800fea0:	4b35      	ldr	r3, [pc, #212]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fea2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800fea6:	79fa      	ldrb	r2, [r7, #7]
 800fea8:	429a      	cmp	r2, r3
 800feaa:	d3c1      	bcc.n	800fe30 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800feac:	4b32      	ldr	r3, [pc, #200]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800feae:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800feb2:	4619      	mov	r1, r3
 800feb4:	4837      	ldr	r0, [pc, #220]	; (800ff94 <print_self_DetailsSiemens+0x1fc>)
 800feb6:	f015 fdd1 	bl	8025a5c <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800feba:	4b2f      	ldr	r3, [pc, #188]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800febc:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800fec0:	4619      	mov	r1, r3
 800fec2:	4835      	ldr	r0, [pc, #212]	; (800ff98 <print_self_DetailsSiemens+0x200>)
 800fec4:	f015 fdca 	bl	8025a5c <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800fec8:	4b2b      	ldr	r3, [pc, #172]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800feca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800fece:	4619      	mov	r1, r3
 800fed0:	4832      	ldr	r0, [pc, #200]	; (800ff9c <print_self_DetailsSiemens+0x204>)
 800fed2:	f015 fdc3 	bl	8025a5c <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800fed6:	4b28      	ldr	r3, [pc, #160]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fed8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800fedc:	4619      	mov	r1, r3
 800fede:	482f      	ldr	r0, [pc, #188]	; (800ff9c <print_self_DetailsSiemens+0x204>)
 800fee0:	f015 fdbc 	bl	8025a5c <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800fee4:	4b24      	ldr	r3, [pc, #144]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fee6:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800feea:	4619      	mov	r1, r3
 800feec:	482c      	ldr	r0, [pc, #176]	; (800ffa0 <print_self_DetailsSiemens+0x208>)
 800feee:	f015 fdb5 	bl	8025a5c <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800fef2:	4b21      	ldr	r3, [pc, #132]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800fef4:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800fef8:	4619      	mov	r1, r3
 800fefa:	482a      	ldr	r0, [pc, #168]	; (800ffa4 <print_self_DetailsSiemens+0x20c>)
 800fefc:	f015 fdae 	bl	8025a5c <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800ff00:	4b1d      	ldr	r3, [pc, #116]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff02:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ff06:	4619      	mov	r1, r3
 800ff08:	4827      	ldr	r0, [pc, #156]	; (800ffa8 <print_self_DetailsSiemens+0x210>)
 800ff0a:	f015 fda7 	bl	8025a5c <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800ff0e:	4b1a      	ldr	r3, [pc, #104]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff10:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ff14:	4619      	mov	r1, r3
 800ff16:	4825      	ldr	r0, [pc, #148]	; (800ffac <print_self_DetailsSiemens+0x214>)
 800ff18:	f015 fda0 	bl	8025a5c <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800ff1c:	4b16      	ldr	r3, [pc, #88]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff1e:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ff22:	4619      	mov	r1, r3
 800ff24:	4822      	ldr	r0, [pc, #136]	; (800ffb0 <print_self_DetailsSiemens+0x218>)
 800ff26:	f015 fd99 	bl	8025a5c <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800ff2a:	4b13      	ldr	r3, [pc, #76]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff2c:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ff30:	4619      	mov	r1, r3
 800ff32:	4820      	ldr	r0, [pc, #128]	; (800ffb4 <print_self_DetailsSiemens+0x21c>)
 800ff34:	f015 fd92 	bl	8025a5c <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800ff38:	4b0f      	ldr	r3, [pc, #60]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff3a:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ff3e:	4619      	mov	r1, r3
 800ff40:	481d      	ldr	r0, [pc, #116]	; (800ffb8 <print_self_DetailsSiemens+0x220>)
 800ff42:	f015 fd8b 	bl	8025a5c <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 800ff46:	4b0c      	ldr	r3, [pc, #48]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff48:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d103      	bne.n	800ff58 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 800ff50:	4b09      	ldr	r3, [pc, #36]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff52:	2232      	movs	r2, #50	; 0x32
 800ff54:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800ff58:	4b07      	ldr	r3, [pc, #28]	; (800ff78 <print_self_DetailsSiemens+0x1e0>)
 800ff5a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ff5e:	4619      	mov	r1, r3
 800ff60:	4816      	ldr	r0, [pc, #88]	; (800ffbc <print_self_DetailsSiemens+0x224>)
 800ff62:	f015 fd7b 	bl	8025a5c <iprintf>

}
 800ff66:	bf00      	nop
 800ff68:	3708      	adds	r7, #8
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bdb0      	pop	{r4, r5, r7, pc}
 800ff6e:	bf00      	nop
 800ff70:	20000505 	.word	0x20000505
 800ff74:	0802a00c 	.word	0x0802a00c
 800ff78:	20000504 	.word	0x20000504
 800ff7c:	0802a020 	.word	0x0802a020
 800ff80:	0802a030 	.word	0x0802a030
 800ff84:	0802a048 	.word	0x0802a048
 800ff88:	0802a070 	.word	0x0802a070
 800ff8c:	0802a088 	.word	0x0802a088
 800ff90:	0802a09c 	.word	0x0802a09c
 800ff94:	0802a0b4 	.word	0x0802a0b4
 800ff98:	0802a0c4 	.word	0x0802a0c4
 800ff9c:	0802a0d8 	.word	0x0802a0d8
 800ffa0:	0802a0ec 	.word	0x0802a0ec
 800ffa4:	0802a0fc 	.word	0x0802a0fc
 800ffa8:	0802a10c 	.word	0x0802a10c
 800ffac:	0802a120 	.word	0x0802a120
 800ffb0:	0802a138 	.word	0x0802a138
 800ffb4:	0802a150 	.word	0x0802a150
 800ffb8:	0802a16c 	.word	0x0802a16c
 800ffbc:	0802a188 	.word	0x0802a188

0800ffc0 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ffc0:	b580      	push	{r7, lr}
 800ffc2:	b082      	sub	sp, #8
 800ffc4:	af00      	add	r7, sp, #0
 800ffc6:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ffc8:	f008 fe32 	bl	8018c30 <HAL_GetTick>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	1ad3      	subs	r3, r2, r3
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	bfb8      	it	lt
 800ffd6:	425b      	neglt	r3, r3
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	3708      	adds	r7, #8
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	bd80      	pop	{r7, pc}

0800ffe0 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b082      	sub	sp, #8
 800ffe4:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ffe6:	23f3      	movs	r3, #243	; 0xf3
 800ffe8:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ffea:	f013 f841 	bl	8023070 <udp_new>
 800ffee:	4603      	mov	r3, r0
 800fff0:	4a7a      	ldr	r2, [pc, #488]	; (80101dc <udpServer_init+0x1fc>)
 800fff2:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800fff4:	4b7a      	ldr	r3, [pc, #488]	; (80101e0 <udpServer_init+0x200>)
 800fff6:	781b      	ldrb	r3, [r3, #0]
 800fff8:	2b01      	cmp	r3, #1
 800fffa:	d002      	beq.n	8010002 <udpServer_init+0x22>
 800fffc:	2b02      	cmp	r3, #2
 800fffe:	d074      	beq.n	80100ea <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 8010000:	e0e9      	b.n	80101d6 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8010002:	4b77      	ldr	r3, [pc, #476]	; (80101e0 <udpServer_init+0x200>)
 8010004:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8010008:	061a      	lsls	r2, r3, #24
 801000a:	4b75      	ldr	r3, [pc, #468]	; (80101e0 <udpServer_init+0x200>)
 801000c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010010:	041b      	lsls	r3, r3, #16
 8010012:	431a      	orrs	r2, r3
 8010014:	4b72      	ldr	r3, [pc, #456]	; (80101e0 <udpServer_init+0x200>)
 8010016:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801001a:	021b      	lsls	r3, r3, #8
 801001c:	4313      	orrs	r3, r2
 801001e:	4a70      	ldr	r2, [pc, #448]	; (80101e0 <udpServer_init+0x200>)
 8010020:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 8010024:	4313      	orrs	r3, r2
 8010026:	061a      	lsls	r2, r3, #24
 8010028:	4b6d      	ldr	r3, [pc, #436]	; (80101e0 <udpServer_init+0x200>)
 801002a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 801002e:	0619      	lsls	r1, r3, #24
 8010030:	4b6b      	ldr	r3, [pc, #428]	; (80101e0 <udpServer_init+0x200>)
 8010032:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010036:	041b      	lsls	r3, r3, #16
 8010038:	4319      	orrs	r1, r3
 801003a:	4b69      	ldr	r3, [pc, #420]	; (80101e0 <udpServer_init+0x200>)
 801003c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010040:	021b      	lsls	r3, r3, #8
 8010042:	430b      	orrs	r3, r1
 8010044:	4966      	ldr	r1, [pc, #408]	; (80101e0 <udpServer_init+0x200>)
 8010046:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 801004a:	430b      	orrs	r3, r1
 801004c:	021b      	lsls	r3, r3, #8
 801004e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010052:	431a      	orrs	r2, r3
 8010054:	4b62      	ldr	r3, [pc, #392]	; (80101e0 <udpServer_init+0x200>)
 8010056:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 801005a:	0619      	lsls	r1, r3, #24
 801005c:	4b60      	ldr	r3, [pc, #384]	; (80101e0 <udpServer_init+0x200>)
 801005e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010062:	041b      	lsls	r3, r3, #16
 8010064:	4319      	orrs	r1, r3
 8010066:	4b5e      	ldr	r3, [pc, #376]	; (80101e0 <udpServer_init+0x200>)
 8010068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801006c:	021b      	lsls	r3, r3, #8
 801006e:	430b      	orrs	r3, r1
 8010070:	495b      	ldr	r1, [pc, #364]	; (80101e0 <udpServer_init+0x200>)
 8010072:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 8010076:	430b      	orrs	r3, r1
 8010078:	0a1b      	lsrs	r3, r3, #8
 801007a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801007e:	431a      	orrs	r2, r3
 8010080:	4b57      	ldr	r3, [pc, #348]	; (80101e0 <udpServer_init+0x200>)
 8010082:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8010086:	0619      	lsls	r1, r3, #24
 8010088:	4b55      	ldr	r3, [pc, #340]	; (80101e0 <udpServer_init+0x200>)
 801008a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801008e:	041b      	lsls	r3, r3, #16
 8010090:	4319      	orrs	r1, r3
 8010092:	4b53      	ldr	r3, [pc, #332]	; (80101e0 <udpServer_init+0x200>)
 8010094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010098:	021b      	lsls	r3, r3, #8
 801009a:	430b      	orrs	r3, r1
 801009c:	4950      	ldr	r1, [pc, #320]	; (80101e0 <udpServer_init+0x200>)
 801009e:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 80100a2:	430b      	orrs	r3, r1
 80100a4:	0e1b      	lsrs	r3, r3, #24
 80100a6:	4313      	orrs	r3, r2
 80100a8:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 80100aa:	4b4c      	ldr	r3, [pc, #304]	; (80101dc <udpServer_init+0x1fc>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	4a4c      	ldr	r2, [pc, #304]	; (80101e0 <udpServer_init+0x200>)
 80100b0:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 80100b4:	4639      	mov	r1, r7
 80100b6:	4618      	mov	r0, r3
 80100b8:	f012 fef0 	bl	8022e9c <udp_bind>
 80100bc:	4603      	mov	r3, r0
 80100be:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80100c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d107      	bne.n	80100d8 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 80100c8:	4b44      	ldr	r3, [pc, #272]	; (80101dc <udpServer_init+0x1fc>)
 80100ca:	681b      	ldr	r3, [r3, #0]
 80100cc:	2200      	movs	r2, #0
 80100ce:	4945      	ldr	r1, [pc, #276]	; (80101e4 <udpServer_init+0x204>)
 80100d0:	4618      	mov	r0, r3
 80100d2:	f012 ff6b 	bl	8022fac <udp_recv>
		break;
 80100d6:	e07c      	b.n	80101d2 <udpServer_init+0x1f2>
			printf("N-OK\n");
 80100d8:	4843      	ldr	r0, [pc, #268]	; (80101e8 <udpServer_init+0x208>)
 80100da:	f015 fd5b 	bl	8025b94 <puts>
			udp_remove(upcb);
 80100de:	4b3f      	ldr	r3, [pc, #252]	; (80101dc <udpServer_init+0x1fc>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f012 ff82 	bl	8022fec <udp_remove>
		break;
 80100e8:	e073      	b.n	80101d2 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 80100ea:	4b3d      	ldr	r3, [pc, #244]	; (80101e0 <udpServer_init+0x200>)
 80100ec:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80100f0:	061a      	lsls	r2, r3, #24
 80100f2:	4b3b      	ldr	r3, [pc, #236]	; (80101e0 <udpServer_init+0x200>)
 80100f4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80100f8:	041b      	lsls	r3, r3, #16
 80100fa:	431a      	orrs	r2, r3
 80100fc:	4b38      	ldr	r3, [pc, #224]	; (80101e0 <udpServer_init+0x200>)
 80100fe:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 8010102:	021b      	lsls	r3, r3, #8
 8010104:	4313      	orrs	r3, r2
 8010106:	4a36      	ldr	r2, [pc, #216]	; (80101e0 <udpServer_init+0x200>)
 8010108:	f892 22ac 	ldrb.w	r2, [r2, #684]	; 0x2ac
 801010c:	4313      	orrs	r3, r2
 801010e:	061a      	lsls	r2, r3, #24
 8010110:	4b33      	ldr	r3, [pc, #204]	; (80101e0 <udpServer_init+0x200>)
 8010112:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8010116:	0619      	lsls	r1, r3, #24
 8010118:	4b31      	ldr	r3, [pc, #196]	; (80101e0 <udpServer_init+0x200>)
 801011a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801011e:	041b      	lsls	r3, r3, #16
 8010120:	4319      	orrs	r1, r3
 8010122:	4b2f      	ldr	r3, [pc, #188]	; (80101e0 <udpServer_init+0x200>)
 8010124:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 8010128:	021b      	lsls	r3, r3, #8
 801012a:	430b      	orrs	r3, r1
 801012c:	492c      	ldr	r1, [pc, #176]	; (80101e0 <udpServer_init+0x200>)
 801012e:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 8010132:	430b      	orrs	r3, r1
 8010134:	021b      	lsls	r3, r3, #8
 8010136:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801013a:	431a      	orrs	r2, r3
 801013c:	4b28      	ldr	r3, [pc, #160]	; (80101e0 <udpServer_init+0x200>)
 801013e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8010142:	0619      	lsls	r1, r3, #24
 8010144:	4b26      	ldr	r3, [pc, #152]	; (80101e0 <udpServer_init+0x200>)
 8010146:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801014a:	041b      	lsls	r3, r3, #16
 801014c:	4319      	orrs	r1, r3
 801014e:	4b24      	ldr	r3, [pc, #144]	; (80101e0 <udpServer_init+0x200>)
 8010150:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 8010154:	021b      	lsls	r3, r3, #8
 8010156:	430b      	orrs	r3, r1
 8010158:	4921      	ldr	r1, [pc, #132]	; (80101e0 <udpServer_init+0x200>)
 801015a:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 801015e:	430b      	orrs	r3, r1
 8010160:	0a1b      	lsrs	r3, r3, #8
 8010162:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010166:	431a      	orrs	r2, r3
 8010168:	4b1d      	ldr	r3, [pc, #116]	; (80101e0 <udpServer_init+0x200>)
 801016a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 801016e:	0619      	lsls	r1, r3, #24
 8010170:	4b1b      	ldr	r3, [pc, #108]	; (80101e0 <udpServer_init+0x200>)
 8010172:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8010176:	041b      	lsls	r3, r3, #16
 8010178:	4319      	orrs	r1, r3
 801017a:	4b19      	ldr	r3, [pc, #100]	; (80101e0 <udpServer_init+0x200>)
 801017c:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 8010180:	021b      	lsls	r3, r3, #8
 8010182:	430b      	orrs	r3, r1
 8010184:	4916      	ldr	r1, [pc, #88]	; (80101e0 <udpServer_init+0x200>)
 8010186:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 801018a:	430b      	orrs	r3, r1
 801018c:	0e1b      	lsrs	r3, r3, #24
 801018e:	4313      	orrs	r3, r2
 8010190:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 8010192:	4b12      	ldr	r3, [pc, #72]	; (80101dc <udpServer_init+0x1fc>)
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	4a12      	ldr	r2, [pc, #72]	; (80101e0 <udpServer_init+0x200>)
 8010198:	f8b2 22dc 	ldrh.w	r2, [r2, #732]	; 0x2dc
 801019c:	4639      	mov	r1, r7
 801019e:	4618      	mov	r0, r3
 80101a0:	f012 fe7c 	bl	8022e9c <udp_bind>
 80101a4:	4603      	mov	r3, r0
 80101a6:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80101a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d107      	bne.n	80101c0 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 80101b0:	4b0a      	ldr	r3, [pc, #40]	; (80101dc <udpServer_init+0x1fc>)
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2200      	movs	r2, #0
 80101b6:	490b      	ldr	r1, [pc, #44]	; (80101e4 <udpServer_init+0x204>)
 80101b8:	4618      	mov	r0, r3
 80101ba:	f012 fef7 	bl	8022fac <udp_recv>
		break;
 80101be:	e007      	b.n	80101d0 <udpServer_init+0x1f0>
			printf("N-OK\n");
 80101c0:	4809      	ldr	r0, [pc, #36]	; (80101e8 <udpServer_init+0x208>)
 80101c2:	f015 fce7 	bl	8025b94 <puts>
			udp_remove(upcb);
 80101c6:	4b05      	ldr	r3, [pc, #20]	; (80101dc <udpServer_init+0x1fc>)
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	4618      	mov	r0, r3
 80101cc:	f012 ff0e 	bl	8022fec <udp_remove>
		break;
 80101d0:	bf00      	nop
	}

	udpClient_connect();
 80101d2:	f000 f90d 	bl	80103f0 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 80101d6:	3708      	adds	r7, #8
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	2000696c 	.word	0x2000696c
 80101e0:	20000504 	.word	0x20000504
 80101e4:	080101ed 	.word	0x080101ed
 80101e8:	0802a1a8 	.word	0x0802a1a8

080101ec <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b086      	sub	sp, #24
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 80101fe:	2300      	movs	r3, #0
 8010200:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 8010202:	2300      	movs	r3, #0
 8010204:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 8010206:	4a70      	ldr	r2, [pc, #448]	; (80103c8 <UDP_Receive_Callback+0x1dc>)
 8010208:	683b      	ldr	r3, [r7, #0]
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	6013      	str	r3, [r2, #0]
	Length = p->len;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	895b      	ldrh	r3, [r3, #10]
 8010212:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 8010214:	4b6d      	ldr	r3, [pc, #436]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	2b01      	cmp	r3, #1
 801021a:	d02e      	beq.n	801027a <UDP_Receive_Callback+0x8e>
 801021c:	2b02      	cmp	r3, #2
 801021e:	d045      	beq.n	80102ac <UDP_Receive_Callback+0xc0>
 8010220:	e069      	b.n	80102f6 <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 8010222:	4b69      	ldr	r3, [pc, #420]	; (80103c8 <UDP_Receive_Callback+0x1dc>)
 8010224:	681a      	ldr	r2, [r3, #0]
 8010226:	7dfb      	ldrb	r3, [r7, #23]
 8010228:	4969      	ldr	r1, [pc, #420]	; (80103d0 <UDP_Receive_Callback+0x1e4>)
 801022a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801022e:	429a      	cmp	r2, r3
 8010230:	d120      	bne.n	8010274 <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 8010232:	7dbb      	ldrb	r3, [r7, #22]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d109      	bne.n	801024c <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 8010238:	6838      	ldr	r0, [r7, #0]
 801023a:	f014 fb17 	bl	802486c <ip4addr_ntoa>
 801023e:	4603      	mov	r3, r0
 8010240:	4619      	mov	r1, r3
 8010242:	4864      	ldr	r0, [pc, #400]	; (80103d4 <UDP_Receive_Callback+0x1e8>)
 8010244:	f015 fc0a 	bl	8025a5c <iprintf>
					IpMatched = 1;
 8010248:	2301      	movs	r3, #1
 801024a:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 801024c:	7dfb      	ldrb	r3, [r7, #23]
 801024e:	085b      	lsrs	r3, r3, #1
 8010250:	b2db      	uxtb	r3, r3
 8010252:	4619      	mov	r1, r3
 8010254:	4a60      	ldr	r2, [pc, #384]	; (80103d8 <UDP_Receive_Callback+0x1ec>)
 8010256:	683b      	ldr	r3, [r7, #0]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 801025e:	7dfb      	ldrb	r3, [r7, #23]
 8010260:	f003 0301 	and.w	r3, r3, #1
 8010264:	b2db      	uxtb	r3, r3
 8010266:	7dfa      	ldrb	r2, [r7, #23]
 8010268:	0852      	lsrs	r2, r2, #1
 801026a:	b2d2      	uxtb	r2, r2
 801026c:	3301      	adds	r3, #1
 801026e:	b2d9      	uxtb	r1, r3
 8010270:	4b5a      	ldr	r3, [pc, #360]	; (80103dc <UDP_Receive_Callback+0x1f0>)
 8010272:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010274:	7dfb      	ldrb	r3, [r7, #23]
 8010276:	3301      	adds	r3, #1
 8010278:	75fb      	strb	r3, [r7, #23]
 801027a:	4b54      	ldr	r3, [pc, #336]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 801027c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010280:	7dfa      	ldrb	r2, [r7, #23]
 8010282:	429a      	cmp	r2, r3
 8010284:	d3cd      	bcc.n	8010222 <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 8010286:	4b51      	ldr	r3, [pc, #324]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 8010288:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 801028c:	7dfa      	ldrb	r2, [r7, #23]
 801028e:	429a      	cmp	r2, r3
 8010290:	d935      	bls.n	80102fe <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f011 feaa 	bl	8021fec <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 8010298:	6838      	ldr	r0, [r7, #0]
 801029a:	f014 fae7 	bl	802486c <ip4addr_ntoa>
 801029e:	4601      	mov	r1, r0
 80102a0:	7dfb      	ldrb	r3, [r7, #23]
 80102a2:	461a      	mov	r2, r3
 80102a4:	484e      	ldr	r0, [pc, #312]	; (80103e0 <UDP_Receive_Callback+0x1f4>)
 80102a6:	f015 fbd9 	bl	8025a5c <iprintf>
			return;
 80102aa:	e08a      	b.n	80103c2 <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80102ac:	2300      	movs	r3, #0
 80102ae:	75fb      	strb	r3, [r7, #23]
 80102b0:	e00a      	b.n	80102c8 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 80102b2:	4b45      	ldr	r3, [pc, #276]	; (80103c8 <UDP_Receive_Callback+0x1dc>)
 80102b4:	681a      	ldr	r2, [r3, #0]
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
 80102b8:	4945      	ldr	r1, [pc, #276]	; (80103d0 <UDP_Receive_Callback+0x1e4>)
 80102ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80102be:	429a      	cmp	r2, r3
 80102c0:	d009      	beq.n	80102d6 <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80102c2:	7dfb      	ldrb	r3, [r7, #23]
 80102c4:	3301      	adds	r3, #1
 80102c6:	75fb      	strb	r3, [r7, #23]
 80102c8:	4b40      	ldr	r3, [pc, #256]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 80102ca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80102ce:	7dfa      	ldrb	r2, [r7, #23]
 80102d0:	429a      	cmp	r2, r3
 80102d2:	d3ee      	bcc.n	80102b2 <UDP_Receive_Callback+0xc6>
 80102d4:	e000      	b.n	80102d8 <UDP_Receive_Callback+0xec>
			{
				break;
 80102d6:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 80102d8:	4b3c      	ldr	r3, [pc, #240]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 80102da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80102de:	7dfa      	ldrb	r2, [r7, #23]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d90e      	bls.n	8010302 <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f011 fe81 	bl	8021fec <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 80102ea:	7dfb      	ldrb	r3, [r7, #23]
 80102ec:	4619      	mov	r1, r3
 80102ee:	483d      	ldr	r0, [pc, #244]	; (80103e4 <UDP_Receive_Callback+0x1f8>)
 80102f0:	f015 fbb4 	bl	8025a5c <iprintf>
			return;
 80102f4:	e065      	b.n	80103c2 <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 80102f6:	6878      	ldr	r0, [r7, #4]
 80102f8:	f011 fe78 	bl	8021fec <pbuf_free>
		return;
 80102fc:	e061      	b.n	80103c2 <UDP_Receive_Callback+0x1d6>
		break;
 80102fe:	bf00      	nop
 8010300:	e000      	b.n	8010304 <UDP_Receive_Callback+0x118>
		break;
 8010302:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 8010304:	4b31      	ldr	r3, [pc, #196]	; (80103cc <UDP_Receive_Callback+0x1e0>)
 8010306:	781b      	ldrb	r3, [r3, #0]
 8010308:	2b01      	cmp	r3, #1
 801030a:	d002      	beq.n	8010312 <UDP_Receive_Callback+0x126>
 801030c:	2b02      	cmp	r3, #2
 801030e:	d049      	beq.n	80103a4 <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 8010310:	e054      	b.n	80103bc <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 8010312:	f008 fc8d 	bl	8018c30 <HAL_GetTick>
 8010316:	4603      	mov	r3, r0
 8010318:	4a33      	ldr	r2, [pc, #204]	; (80103e8 <UDP_Receive_Callback+0x1fc>)
 801031a:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 801031c:	4b33      	ldr	r3, [pc, #204]	; (80103ec <UDP_Receive_Callback+0x200>)
 801031e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010322:	461a      	mov	r2, r3
 8010324:	8abb      	ldrh	r3, [r7, #20]
 8010326:	4413      	add	r3, r2
 8010328:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801032c:	dd24      	ble.n	8010378 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 801032e:	4b2f      	ldr	r3, [pc, #188]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010330:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010334:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8010338:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 801033a:	4b2c      	ldr	r3, [pc, #176]	; (80103ec <UDP_Receive_Callback+0x200>)
 801033c:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010340:	461a      	mov	r2, r3
 8010342:	4b2a      	ldr	r3, [pc, #168]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010344:	18d0      	adds	r0, r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	8a7a      	ldrh	r2, [r7, #18]
 801034c:	4619      	mov	r1, r3
 801034e:	f015 fa75 	bl	802583c <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	685a      	ldr	r2, [r3, #4]
 8010356:	8a7b      	ldrh	r3, [r7, #18]
 8010358:	18d1      	adds	r1, r2, r3
 801035a:	8aba      	ldrh	r2, [r7, #20]
 801035c:	8a7b      	ldrh	r3, [r7, #18]
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	461a      	mov	r2, r3
 8010362:	4822      	ldr	r0, [pc, #136]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010364:	f015 fa6a 	bl	802583c <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 8010368:	8aba      	ldrh	r2, [r7, #20]
 801036a:	8a7b      	ldrh	r3, [r7, #18]
 801036c:	1ad3      	subs	r3, r2, r3
 801036e:	b29a      	uxth	r2, r3
 8010370:	4b1e      	ldr	r3, [pc, #120]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010372:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 8010376:	e021      	b.n	80103bc <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 8010378:	4b1c      	ldr	r3, [pc, #112]	; (80103ec <UDP_Receive_Callback+0x200>)
 801037a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801037e:	461a      	mov	r2, r3
 8010380:	4b1a      	ldr	r3, [pc, #104]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010382:	18d0      	adds	r0, r2, r3
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	685b      	ldr	r3, [r3, #4]
 8010388:	8aba      	ldrh	r2, [r7, #20]
 801038a:	4619      	mov	r1, r3
 801038c:	f015 fa56 	bl	802583c <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 8010390:	4b16      	ldr	r3, [pc, #88]	; (80103ec <UDP_Receive_Callback+0x200>)
 8010392:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 8010396:	8abb      	ldrh	r3, [r7, #20]
 8010398:	4413      	add	r3, r2
 801039a:	b29a      	uxth	r2, r3
 801039c:	4b13      	ldr	r3, [pc, #76]	; (80103ec <UDP_Receive_Callback+0x200>)
 801039e:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 80103a2:	e00b      	b.n	80103bc <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	8aba      	ldrh	r2, [r7, #20]
 80103aa:	4619      	mov	r1, r3
 80103ac:	480f      	ldr	r0, [pc, #60]	; (80103ec <UDP_Receive_Callback+0x200>)
 80103ae:	f015 fa45 	bl	802583c <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 80103b2:	4a0e      	ldr	r2, [pc, #56]	; (80103ec <UDP_Receive_Callback+0x200>)
 80103b4:	8abb      	ldrh	r3, [r7, #20]
 80103b6:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 80103ba:	bf00      	nop
	}


	pbuf_free(p);
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f011 fe15 	bl	8021fec <pbuf_free>
}
 80103c2:	3718      	adds	r7, #24
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	20006940 	.word	0x20006940
 80103cc:	20000504 	.word	0x20000504
 80103d0:	200068f0 	.word	0x200068f0
 80103d4:	0802a1b0 	.word	0x0802a1b0
 80103d8:	200026e4 	.word	0x200026e4
 80103dc:	2000270c 	.word	0x2000270c
 80103e0:	0802a1bc 	.word	0x0802a1bc
 80103e4:	0802a1e8 	.word	0x0802a1e8
 80103e8:	200024b0 	.word	0x200024b0
 80103ec:	200062ec 	.word	0x200062ec

080103f0 <udpClient_connect>:
void udpClient_connect(void)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 80103f6:	2300      	movs	r3, #0
 80103f8:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 80103fa:	4ba6      	ldr	r3, [pc, #664]	; (8010694 <udpClient_connect+0x2a4>)
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	2b01      	cmp	r3, #1
 8010400:	d003      	beq.n	801040a <udpClient_connect+0x1a>
 8010402:	2b02      	cmp	r3, #2
 8010404:	f000 80a1 	beq.w	801054a <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 8010408:	e13f      	b.n	801068a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 801040a:	2300      	movs	r3, #0
 801040c:	71fb      	strb	r3, [r7, #7]
 801040e:	e094      	b.n	801053a <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	4aa0      	ldr	r2, [pc, #640]	; (8010694 <udpClient_connect+0x2a4>)
 8010414:	3326      	adds	r3, #38	; 0x26
 8010416:	009b      	lsls	r3, r3, #2
 8010418:	4413      	add	r3, r2
 801041a:	78db      	ldrb	r3, [r3, #3]
 801041c:	061a      	lsls	r2, r3, #24
 801041e:	79fb      	ldrb	r3, [r7, #7]
 8010420:	499c      	ldr	r1, [pc, #624]	; (8010694 <udpClient_connect+0x2a4>)
 8010422:	009b      	lsls	r3, r3, #2
 8010424:	440b      	add	r3, r1
 8010426:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 801042a:	041b      	lsls	r3, r3, #16
 801042c:	431a      	orrs	r2, r3
 801042e:	79fb      	ldrb	r3, [r7, #7]
 8010430:	4998      	ldr	r1, [pc, #608]	; (8010694 <udpClient_connect+0x2a4>)
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	440b      	add	r3, r1
 8010436:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 801043a:	021b      	lsls	r3, r3, #8
 801043c:	431a      	orrs	r2, r3
 801043e:	79fb      	ldrb	r3, [r7, #7]
 8010440:	4994      	ldr	r1, [pc, #592]	; (8010694 <udpClient_connect+0x2a4>)
 8010442:	009b      	lsls	r3, r3, #2
 8010444:	440b      	add	r3, r1
 8010446:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 801044a:	4313      	orrs	r3, r2
 801044c:	061a      	lsls	r2, r3, #24
 801044e:	79fb      	ldrb	r3, [r7, #7]
 8010450:	4990      	ldr	r1, [pc, #576]	; (8010694 <udpClient_connect+0x2a4>)
 8010452:	3326      	adds	r3, #38	; 0x26
 8010454:	009b      	lsls	r3, r3, #2
 8010456:	440b      	add	r3, r1
 8010458:	78db      	ldrb	r3, [r3, #3]
 801045a:	0619      	lsls	r1, r3, #24
 801045c:	79fb      	ldrb	r3, [r7, #7]
 801045e:	488d      	ldr	r0, [pc, #564]	; (8010694 <udpClient_connect+0x2a4>)
 8010460:	009b      	lsls	r3, r3, #2
 8010462:	4403      	add	r3, r0
 8010464:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8010468:	041b      	lsls	r3, r3, #16
 801046a:	4319      	orrs	r1, r3
 801046c:	79fb      	ldrb	r3, [r7, #7]
 801046e:	4889      	ldr	r0, [pc, #548]	; (8010694 <udpClient_connect+0x2a4>)
 8010470:	009b      	lsls	r3, r3, #2
 8010472:	4403      	add	r3, r0
 8010474:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010478:	021b      	lsls	r3, r3, #8
 801047a:	4319      	orrs	r1, r3
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	4885      	ldr	r0, [pc, #532]	; (8010694 <udpClient_connect+0x2a4>)
 8010480:	009b      	lsls	r3, r3, #2
 8010482:	4403      	add	r3, r0
 8010484:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010488:	430b      	orrs	r3, r1
 801048a:	021b      	lsls	r3, r3, #8
 801048c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010490:	431a      	orrs	r2, r3
 8010492:	79fb      	ldrb	r3, [r7, #7]
 8010494:	497f      	ldr	r1, [pc, #508]	; (8010694 <udpClient_connect+0x2a4>)
 8010496:	3326      	adds	r3, #38	; 0x26
 8010498:	009b      	lsls	r3, r3, #2
 801049a:	440b      	add	r3, r1
 801049c:	78db      	ldrb	r3, [r3, #3]
 801049e:	0619      	lsls	r1, r3, #24
 80104a0:	79fb      	ldrb	r3, [r7, #7]
 80104a2:	487c      	ldr	r0, [pc, #496]	; (8010694 <udpClient_connect+0x2a4>)
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	4403      	add	r3, r0
 80104a8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80104ac:	041b      	lsls	r3, r3, #16
 80104ae:	4319      	orrs	r1, r3
 80104b0:	79fb      	ldrb	r3, [r7, #7]
 80104b2:	4878      	ldr	r0, [pc, #480]	; (8010694 <udpClient_connect+0x2a4>)
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	4403      	add	r3, r0
 80104b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80104bc:	021b      	lsls	r3, r3, #8
 80104be:	4319      	orrs	r1, r3
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	4874      	ldr	r0, [pc, #464]	; (8010694 <udpClient_connect+0x2a4>)
 80104c4:	009b      	lsls	r3, r3, #2
 80104c6:	4403      	add	r3, r0
 80104c8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80104cc:	430b      	orrs	r3, r1
 80104ce:	0a1b      	lsrs	r3, r3, #8
 80104d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80104d4:	ea42 0103 	orr.w	r1, r2, r3
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	4a6e      	ldr	r2, [pc, #440]	; (8010694 <udpClient_connect+0x2a4>)
 80104dc:	3326      	adds	r3, #38	; 0x26
 80104de:	009b      	lsls	r3, r3, #2
 80104e0:	4413      	add	r3, r2
 80104e2:	78db      	ldrb	r3, [r3, #3]
 80104e4:	061a      	lsls	r2, r3, #24
 80104e6:	79fb      	ldrb	r3, [r7, #7]
 80104e8:	486a      	ldr	r0, [pc, #424]	; (8010694 <udpClient_connect+0x2a4>)
 80104ea:	009b      	lsls	r3, r3, #2
 80104ec:	4403      	add	r3, r0
 80104ee:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80104f2:	041b      	lsls	r3, r3, #16
 80104f4:	431a      	orrs	r2, r3
 80104f6:	79fb      	ldrb	r3, [r7, #7]
 80104f8:	4866      	ldr	r0, [pc, #408]	; (8010694 <udpClient_connect+0x2a4>)
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4403      	add	r3, r0
 80104fe:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010502:	021b      	lsls	r3, r3, #8
 8010504:	431a      	orrs	r2, r3
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	4862      	ldr	r0, [pc, #392]	; (8010694 <udpClient_connect+0x2a4>)
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	4403      	add	r3, r0
 801050e:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 8010512:	4313      	orrs	r3, r2
 8010514:	0e1a      	lsrs	r2, r3, #24
 8010516:	79fb      	ldrb	r3, [r7, #7]
 8010518:	430a      	orrs	r2, r1
 801051a:	495f      	ldr	r1, [pc, #380]	; (8010698 <udpClient_connect+0x2a8>)
 801051c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010520:	79fb      	ldrb	r3, [r7, #7]
 8010522:	79fa      	ldrb	r2, [r7, #7]
 8010524:	495b      	ldr	r1, [pc, #364]	; (8010694 <udpClient_connect+0x2a4>)
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	440b      	add	r3, r1
 801052a:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 801052e:	4b5b      	ldr	r3, [pc, #364]	; (801069c <udpClient_connect+0x2ac>)
 8010530:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010534:	79fb      	ldrb	r3, [r7, #7]
 8010536:	3301      	adds	r3, #1
 8010538:	71fb      	strb	r3, [r7, #7]
 801053a:	4b56      	ldr	r3, [pc, #344]	; (8010694 <udpClient_connect+0x2a4>)
 801053c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010540:	79fa      	ldrb	r2, [r7, #7]
 8010542:	429a      	cmp	r2, r3
 8010544:	f4ff af64 	bcc.w	8010410 <udpClient_connect+0x20>
		break;
 8010548:	e09f      	b.n	801068a <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 801054a:	2300      	movs	r3, #0
 801054c:	71fb      	strb	r3, [r7, #7]
 801054e:	e094      	b.n	801067a <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010550:	79fb      	ldrb	r3, [r7, #7]
 8010552:	4a50      	ldr	r2, [pc, #320]	; (8010694 <udpClient_connect+0x2a4>)
 8010554:	33b2      	adds	r3, #178	; 0xb2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	4413      	add	r3, r2
 801055a:	785b      	ldrb	r3, [r3, #1]
 801055c:	061a      	lsls	r2, r3, #24
 801055e:	79fb      	ldrb	r3, [r7, #7]
 8010560:	494c      	ldr	r1, [pc, #304]	; (8010694 <udpClient_connect+0x2a4>)
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	440b      	add	r3, r1
 8010566:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 801056a:	041b      	lsls	r3, r3, #16
 801056c:	431a      	orrs	r2, r3
 801056e:	79fb      	ldrb	r3, [r7, #7]
 8010570:	4948      	ldr	r1, [pc, #288]	; (8010694 <udpClient_connect+0x2a4>)
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	440b      	add	r3, r1
 8010576:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 801057a:	021b      	lsls	r3, r3, #8
 801057c:	431a      	orrs	r2, r3
 801057e:	79fb      	ldrb	r3, [r7, #7]
 8010580:	4944      	ldr	r1, [pc, #272]	; (8010694 <udpClient_connect+0x2a4>)
 8010582:	009b      	lsls	r3, r3, #2
 8010584:	440b      	add	r3, r1
 8010586:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 801058a:	4313      	orrs	r3, r2
 801058c:	061a      	lsls	r2, r3, #24
 801058e:	79fb      	ldrb	r3, [r7, #7]
 8010590:	4940      	ldr	r1, [pc, #256]	; (8010694 <udpClient_connect+0x2a4>)
 8010592:	33b2      	adds	r3, #178	; 0xb2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	440b      	add	r3, r1
 8010598:	785b      	ldrb	r3, [r3, #1]
 801059a:	0619      	lsls	r1, r3, #24
 801059c:	79fb      	ldrb	r3, [r7, #7]
 801059e:	483d      	ldr	r0, [pc, #244]	; (8010694 <udpClient_connect+0x2a4>)
 80105a0:	009b      	lsls	r3, r3, #2
 80105a2:	4403      	add	r3, r0
 80105a4:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 80105a8:	041b      	lsls	r3, r3, #16
 80105aa:	4319      	orrs	r1, r3
 80105ac:	79fb      	ldrb	r3, [r7, #7]
 80105ae:	4839      	ldr	r0, [pc, #228]	; (8010694 <udpClient_connect+0x2a4>)
 80105b0:	009b      	lsls	r3, r3, #2
 80105b2:	4403      	add	r3, r0
 80105b4:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	4319      	orrs	r1, r3
 80105bc:	79fb      	ldrb	r3, [r7, #7]
 80105be:	4835      	ldr	r0, [pc, #212]	; (8010694 <udpClient_connect+0x2a4>)
 80105c0:	009b      	lsls	r3, r3, #2
 80105c2:	4403      	add	r3, r0
 80105c4:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 80105c8:	430b      	orrs	r3, r1
 80105ca:	021b      	lsls	r3, r3, #8
 80105cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80105d0:	431a      	orrs	r2, r3
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	492f      	ldr	r1, [pc, #188]	; (8010694 <udpClient_connect+0x2a4>)
 80105d6:	33b2      	adds	r3, #178	; 0xb2
 80105d8:	009b      	lsls	r3, r3, #2
 80105da:	440b      	add	r3, r1
 80105dc:	785b      	ldrb	r3, [r3, #1]
 80105de:	0619      	lsls	r1, r3, #24
 80105e0:	79fb      	ldrb	r3, [r7, #7]
 80105e2:	482c      	ldr	r0, [pc, #176]	; (8010694 <udpClient_connect+0x2a4>)
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4403      	add	r3, r0
 80105e8:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 80105ec:	041b      	lsls	r3, r3, #16
 80105ee:	4319      	orrs	r1, r3
 80105f0:	79fb      	ldrb	r3, [r7, #7]
 80105f2:	4828      	ldr	r0, [pc, #160]	; (8010694 <udpClient_connect+0x2a4>)
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	4403      	add	r3, r0
 80105f8:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 80105fc:	021b      	lsls	r3, r3, #8
 80105fe:	4319      	orrs	r1, r3
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	4824      	ldr	r0, [pc, #144]	; (8010694 <udpClient_connect+0x2a4>)
 8010604:	009b      	lsls	r3, r3, #2
 8010606:	4403      	add	r3, r0
 8010608:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 801060c:	430b      	orrs	r3, r1
 801060e:	0a1b      	lsrs	r3, r3, #8
 8010610:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010614:	ea42 0103 	orr.w	r1, r2, r3
 8010618:	79fb      	ldrb	r3, [r7, #7]
 801061a:	4a1e      	ldr	r2, [pc, #120]	; (8010694 <udpClient_connect+0x2a4>)
 801061c:	33b2      	adds	r3, #178	; 0xb2
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	4413      	add	r3, r2
 8010622:	785b      	ldrb	r3, [r3, #1]
 8010624:	061a      	lsls	r2, r3, #24
 8010626:	79fb      	ldrb	r3, [r7, #7]
 8010628:	481a      	ldr	r0, [pc, #104]	; (8010694 <udpClient_connect+0x2a4>)
 801062a:	009b      	lsls	r3, r3, #2
 801062c:	4403      	add	r3, r0
 801062e:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 8010632:	041b      	lsls	r3, r3, #16
 8010634:	431a      	orrs	r2, r3
 8010636:	79fb      	ldrb	r3, [r7, #7]
 8010638:	4816      	ldr	r0, [pc, #88]	; (8010694 <udpClient_connect+0x2a4>)
 801063a:	009b      	lsls	r3, r3, #2
 801063c:	4403      	add	r3, r0
 801063e:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 8010642:	021b      	lsls	r3, r3, #8
 8010644:	431a      	orrs	r2, r3
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	4812      	ldr	r0, [pc, #72]	; (8010694 <udpClient_connect+0x2a4>)
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	4403      	add	r3, r0
 801064e:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 8010652:	4313      	orrs	r3, r2
 8010654:	0e1a      	lsrs	r2, r3, #24
 8010656:	79fb      	ldrb	r3, [r7, #7]
 8010658:	430a      	orrs	r2, r1
 801065a:	490f      	ldr	r1, [pc, #60]	; (8010698 <udpClient_connect+0x2a8>)
 801065c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010660:	79fb      	ldrb	r3, [r7, #7]
 8010662:	79fa      	ldrb	r2, [r7, #7]
 8010664:	490b      	ldr	r1, [pc, #44]	; (8010694 <udpClient_connect+0x2a4>)
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	440b      	add	r3, r1
 801066a:	f8b3 12f0 	ldrh.w	r1, [r3, #752]	; 0x2f0
 801066e:	4b0b      	ldr	r3, [pc, #44]	; (801069c <udpClient_connect+0x2ac>)
 8010670:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	3301      	adds	r3, #1
 8010678:	71fb      	strb	r3, [r7, #7]
 801067a:	4b06      	ldr	r3, [pc, #24]	; (8010694 <udpClient_connect+0x2a4>)
 801067c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010680:	79fa      	ldrb	r2, [r7, #7]
 8010682:	429a      	cmp	r2, r3
 8010684:	f4ff af64 	bcc.w	8010550 <udpClient_connect+0x160>
		break;
 8010688:	bf00      	nop
	}
}
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr
 8010694:	20000504 	.word	0x20000504
 8010698:	200068f0 	.word	0x200068f0
 801069c:	20006944 	.word	0x20006944

080106a0 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b086      	sub	sp, #24
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	60f8      	str	r0, [r7, #12]
 80106a8:	460b      	mov	r3, r1
 80106aa:	607a      	str	r2, [r7, #4]
 80106ac:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 80106ae:	2300      	movs	r3, #0
 80106b0:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 80106b2:	7afb      	ldrb	r3, [r7, #11]
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80106ba:	4619      	mov	r1, r3
 80106bc:	2036      	movs	r0, #54	; 0x36
 80106be:	f011 f9b3 	bl	8021a28 <pbuf_alloc>
 80106c2:	6138      	str	r0, [r7, #16]

//		char *SendingIP = ipaddr_ntoa(&IP_addr);
//
//		printf("\nSent IP:%s:%u\n",SendingIP,des_port[0]);

	if (txBuf != NULL)
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d01d      	beq.n	8010706 <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 80106ca:	7afb      	ldrb	r3, [r7, #11]
 80106cc:	b29b      	uxth	r3, r3
 80106ce:	461a      	mov	r2, r3
 80106d0:	68f9      	ldr	r1, [r7, #12]
 80106d2:	6938      	ldr	r0, [r7, #16]
 80106d4:	f011 fe84 	bl	80223e0 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 80106d8:	4b0d      	ldr	r3, [pc, #52]	; (8010710 <udpClient_send+0x70>)
 80106da:	6818      	ldr	r0, [r3, #0]
 80106dc:	4b0d      	ldr	r3, [pc, #52]	; (8010714 <udpClient_send+0x74>)
 80106de:	881b      	ldrh	r3, [r3, #0]
 80106e0:	1d3a      	adds	r2, r7, #4
 80106e2:	6939      	ldr	r1, [r7, #16]
 80106e4:	f012 fa24 	bl	8022b30 <udp_sendto>
 80106e8:	4603      	mov	r3, r0
 80106ea:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 80106ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d005      	beq.n	8010700 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 80106f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80106f8:	4619      	mov	r1, r3
 80106fa:	4807      	ldr	r0, [pc, #28]	; (8010718 <udpClient_send+0x78>)
 80106fc:	f015 f9ae 	bl	8025a5c <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 8010700:	6938      	ldr	r0, [r7, #16]
 8010702:	f011 fc73 	bl	8021fec <pbuf_free>
	}
}
 8010706:	bf00      	nop
 8010708:	3718      	adds	r7, #24
 801070a:	46bd      	mov	sp, r7
 801070c:	bd80      	pop	{r7, pc}
 801070e:	bf00      	nop
 8010710:	2000696c 	.word	0x2000696c
 8010714:	20006944 	.word	0x20006944
 8010718:	0802a210 	.word	0x0802a210

0801071c <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 801071c:	b480      	push	{r7}
 801071e:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 8010720:	4b07      	ldr	r3, [pc, #28]	; (8010740 <Is_There_EI_Data+0x24>)
 8010722:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 8010726:	4b06      	ldr	r3, [pc, #24]	; (8010740 <Is_There_EI_Data+0x24>)
 8010728:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801072c:	429a      	cmp	r2, r3
 801072e:	d001      	beq.n	8010734 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 8010730:	2301      	movs	r3, #1
 8010732:	e000      	b.n	8010736 <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 8010734:	2300      	movs	r3, #0
	}
}
 8010736:	4618      	mov	r0, r3
 8010738:	46bd      	mov	sp, r7
 801073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073e:	4770      	bx	lr
 8010740:	200062ec 	.word	0x200062ec

08010744 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 801074a:	4b15      	ldr	r3, [pc, #84]	; (80107a0 <Get_Eth_Byte+0x5c>)
 801074c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010750:	1c5a      	adds	r2, r3, #1
 8010752:	b291      	uxth	r1, r2
 8010754:	4a12      	ldr	r2, [pc, #72]	; (80107a0 <Get_Eth_Byte+0x5c>)
 8010756:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 801075a:	461a      	mov	r2, r3
 801075c:	4b10      	ldr	r3, [pc, #64]	; (80107a0 <Get_Eth_Byte+0x5c>)
 801075e:	5c9b      	ldrb	r3, [r3, r2]
 8010760:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 8010762:	4b0f      	ldr	r3, [pc, #60]	; (80107a0 <Get_Eth_Byte+0x5c>)
 8010764:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010768:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801076c:	d313      	bcc.n	8010796 <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 801076e:	4b0c      	ldr	r3, [pc, #48]	; (80107a0 <Get_Eth_Byte+0x5c>)
 8010770:	2200      	movs	r2, #0
 8010772:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 8010776:	4b0a      	ldr	r3, [pc, #40]	; (80107a0 <Get_Eth_Byte+0x5c>)
 8010778:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801077c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010780:	d109      	bne.n	8010796 <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 8010782:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010786:	2100      	movs	r1, #0
 8010788:	4805      	ldr	r0, [pc, #20]	; (80107a0 <Get_Eth_Byte+0x5c>)
 801078a:	f015 f87f 	bl	802588c <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 801078e:	4b04      	ldr	r3, [pc, #16]	; (80107a0 <Get_Eth_Byte+0x5c>)
 8010790:	2200      	movs	r2, #0
 8010792:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 8010796:	79fb      	ldrb	r3, [r7, #7]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3708      	adds	r7, #8
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	200062ec 	.word	0x200062ec

080107a4 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b094      	sub	sp, #80	; 0x50
 80107a8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80107aa:	4b38      	ldr	r3, [pc, #224]	; (801088c <MX_CAN2_Init+0xe8>)
 80107ac:	4a38      	ldr	r2, [pc, #224]	; (8010890 <MX_CAN2_Init+0xec>)
 80107ae:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 80107b0:	4b36      	ldr	r3, [pc, #216]	; (801088c <MX_CAN2_Init+0xe8>)
 80107b2:	2212      	movs	r2, #18
 80107b4:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80107b6:	4b35      	ldr	r3, [pc, #212]	; (801088c <MX_CAN2_Init+0xe8>)
 80107b8:	2200      	movs	r2, #0
 80107ba:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80107bc:	4b33      	ldr	r3, [pc, #204]	; (801088c <MX_CAN2_Init+0xe8>)
 80107be:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80107c2:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80107c4:	4b31      	ldr	r3, [pc, #196]	; (801088c <MX_CAN2_Init+0xe8>)
 80107c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80107ca:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 80107cc:	4b2f      	ldr	r3, [pc, #188]	; (801088c <MX_CAN2_Init+0xe8>)
 80107ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80107d2:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80107d4:	4b2d      	ldr	r3, [pc, #180]	; (801088c <MX_CAN2_Init+0xe8>)
 80107d6:	2200      	movs	r2, #0
 80107d8:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80107da:	4b2c      	ldr	r3, [pc, #176]	; (801088c <MX_CAN2_Init+0xe8>)
 80107dc:	2200      	movs	r2, #0
 80107de:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80107e0:	4b2a      	ldr	r3, [pc, #168]	; (801088c <MX_CAN2_Init+0xe8>)
 80107e2:	2200      	movs	r2, #0
 80107e4:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 80107e6:	4b29      	ldr	r3, [pc, #164]	; (801088c <MX_CAN2_Init+0xe8>)
 80107e8:	2201      	movs	r2, #1
 80107ea:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80107ec:	4b27      	ldr	r3, [pc, #156]	; (801088c <MX_CAN2_Init+0xe8>)
 80107ee:	2200      	movs	r2, #0
 80107f0:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80107f2:	4b26      	ldr	r3, [pc, #152]	; (801088c <MX_CAN2_Init+0xe8>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80107f8:	4824      	ldr	r0, [pc, #144]	; (801088c <MX_CAN2_Init+0xe8>)
 80107fa:	f008 fa49 	bl	8018c90 <HAL_CAN_Init>
 80107fe:	4603      	mov	r3, r0
 8010800:	2b00      	cmp	r3, #0
 8010802:	d001      	beq.n	8010808 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8010804:	f006 fc1a 	bl	801703c <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010808:	2301      	movs	r3, #1
 801080a:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 801080c:	2304      	movs	r3, #4
 801080e:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010810:	2301      	movs	r3, #1
 8010812:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010814:	f242 0360 	movw	r3, #8288	; 0x2060
 8010818:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 801081a:	2300      	movs	r3, #0
 801081c:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 801081e:	f242 0360 	movw	r3, #8288	; 0x2060
 8010822:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010824:	2300      	movs	r3, #0
 8010826:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 8010828:	2301      	movs	r3, #1
 801082a:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 801082c:	2301      	movs	r3, #1
 801082e:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 8010830:	2302      	movs	r3, #2
 8010832:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 8010834:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010838:	4619      	mov	r1, r3
 801083a:	4814      	ldr	r0, [pc, #80]	; (801088c <MX_CAN2_Init+0xe8>)
 801083c:	f008 fb6e 	bl	8018f1c <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 8010840:	2301      	movs	r3, #1
 8010842:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 8010844:	2305      	movs	r3, #5
 8010846:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010848:	2301      	movs	r3, #1
 801084a:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 801084c:	f242 1320 	movw	r3, #8480	; 0x2120
 8010850:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 8010852:	2300      	movs	r3, #0
 8010854:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 8010856:	f242 1320 	movw	r3, #8480	; 0x2120
 801085a:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 801085c:	2300      	movs	r3, #0
 801085e:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010860:	2301      	movs	r3, #1
 8010862:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 8010864:	2301      	movs	r3, #1
 8010866:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010868:	2302      	movs	r3, #2
 801086a:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 801086c:	463b      	mov	r3, r7
 801086e:	4619      	mov	r1, r3
 8010870:	4806      	ldr	r0, [pc, #24]	; (801088c <MX_CAN2_Init+0xe8>)
 8010872:	f008 fb53 	bl	8018f1c <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 8010876:	4805      	ldr	r0, [pc, #20]	; (801088c <MX_CAN2_Init+0xe8>)
 8010878:	f008 fc3c 	bl	80190f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 801087c:	2110      	movs	r1, #16
 801087e:	4803      	ldr	r0, [pc, #12]	; (801088c <MX_CAN2_Init+0xe8>)
 8010880:	f008 fd8e 	bl	80193a0 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 8010884:	bf00      	nop
 8010886:	3750      	adds	r7, #80	; 0x50
 8010888:	46bd      	mov	sp, r7
 801088a:	bd80      	pop	{r7, pc}
 801088c:	2000b1ec 	.word	0x2000b1ec
 8010890:	40006800 	.word	0x40006800

08010894 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8010894:	b580      	push	{r7, lr}
 8010896:	b08a      	sub	sp, #40	; 0x28
 8010898:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 801089a:	4b34      	ldr	r3, [pc, #208]	; (801096c <MX_CAN3_Init+0xd8>)
 801089c:	4a34      	ldr	r2, [pc, #208]	; (8010970 <MX_CAN3_Init+0xdc>)
 801089e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 80108a0:	4b32      	ldr	r3, [pc, #200]	; (801096c <MX_CAN3_Init+0xd8>)
 80108a2:	2205      	movs	r2, #5
 80108a4:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 80108a6:	4b31      	ldr	r3, [pc, #196]	; (801096c <MX_CAN3_Init+0xd8>)
 80108a8:	2200      	movs	r2, #0
 80108aa:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 80108ac:	4b2f      	ldr	r3, [pc, #188]	; (801096c <MX_CAN3_Init+0xd8>)
 80108ae:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80108b2:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 80108b4:	4b2d      	ldr	r3, [pc, #180]	; (801096c <MX_CAN3_Init+0xd8>)
 80108b6:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80108ba:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 80108bc:	4b2b      	ldr	r3, [pc, #172]	; (801096c <MX_CAN3_Init+0xd8>)
 80108be:	2200      	movs	r2, #0
 80108c0:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 80108c2:	4b2a      	ldr	r3, [pc, #168]	; (801096c <MX_CAN3_Init+0xd8>)
 80108c4:	4a2a      	ldr	r2, [pc, #168]	; (8010970 <MX_CAN3_Init+0xdc>)
 80108c6:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 80108c8:	4b28      	ldr	r3, [pc, #160]	; (801096c <MX_CAN3_Init+0xd8>)
 80108ca:	2212      	movs	r2, #18
 80108cc:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 80108ce:	4b27      	ldr	r3, [pc, #156]	; (801096c <MX_CAN3_Init+0xd8>)
 80108d0:	2200      	movs	r2, #0
 80108d2:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80108d4:	4b25      	ldr	r3, [pc, #148]	; (801096c <MX_CAN3_Init+0xd8>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 80108da:	4b24      	ldr	r3, [pc, #144]	; (801096c <MX_CAN3_Init+0xd8>)
 80108dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80108e0:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 80108e2:	4b22      	ldr	r3, [pc, #136]	; (801096c <MX_CAN3_Init+0xd8>)
 80108e4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80108e8:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 80108ea:	4b20      	ldr	r3, [pc, #128]	; (801096c <MX_CAN3_Init+0xd8>)
 80108ec:	2200      	movs	r2, #0
 80108ee:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 80108f0:	4b1e      	ldr	r3, [pc, #120]	; (801096c <MX_CAN3_Init+0xd8>)
 80108f2:	2200      	movs	r2, #0
 80108f4:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 80108f6:	4b1d      	ldr	r3, [pc, #116]	; (801096c <MX_CAN3_Init+0xd8>)
 80108f8:	2200      	movs	r2, #0
 80108fa:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 80108fc:	4b1b      	ldr	r3, [pc, #108]	; (801096c <MX_CAN3_Init+0xd8>)
 80108fe:	2201      	movs	r2, #1
 8010900:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 8010902:	4b1a      	ldr	r3, [pc, #104]	; (801096c <MX_CAN3_Init+0xd8>)
 8010904:	2200      	movs	r2, #0
 8010906:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 8010908:	4b18      	ldr	r3, [pc, #96]	; (801096c <MX_CAN3_Init+0xd8>)
 801090a:	2200      	movs	r2, #0
 801090c:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 801090e:	4817      	ldr	r0, [pc, #92]	; (801096c <MX_CAN3_Init+0xd8>)
 8010910:	f008 f9be 	bl	8018c90 <HAL_CAN_Init>
 8010914:	4603      	mov	r3, r0
 8010916:	2b00      	cmp	r3, #0
 8010918:	d001      	beq.n	801091e <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 801091a:	f006 fb8f 	bl	801703c <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 801091e:	2301      	movs	r3, #1
 8010920:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 8010922:	2301      	movs	r3, #1
 8010924:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8010926:	2300      	movs	r3, #0
 8010928:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 801092a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801092e:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010930:	2300      	movs	r3, #0
 8010932:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 8010934:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010938:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 801093a:	2300      	movs	r3, #0
 801093c:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 801093e:	2300      	movs	r3, #0
 8010940:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010942:	2301      	movs	r3, #1
 8010944:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 8010946:	2306      	movs	r3, #6
 8010948:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 801094a:	463b      	mov	r3, r7
 801094c:	4619      	mov	r1, r3
 801094e:	4807      	ldr	r0, [pc, #28]	; (801096c <MX_CAN3_Init+0xd8>)
 8010950:	f008 fae4 	bl	8018f1c <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 8010954:	4805      	ldr	r0, [pc, #20]	; (801096c <MX_CAN3_Init+0xd8>)
 8010956:	f008 fbcd 	bl	80190f4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 801095a:	2102      	movs	r1, #2
 801095c:	4803      	ldr	r0, [pc, #12]	; (801096c <MX_CAN3_Init+0xd8>)
 801095e:	f008 fd1f 	bl	80193a0 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 8010962:	bf00      	nop
 8010964:	3728      	adds	r7, #40	; 0x28
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	2000b250 	.word	0x2000b250
 8010970:	40003400 	.word	0x40003400

08010974 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b08c      	sub	sp, #48	; 0x30
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 801097c:	f107 031c 	add.w	r3, r7, #28
 8010980:	2200      	movs	r2, #0
 8010982:	601a      	str	r2, [r3, #0]
 8010984:	605a      	str	r2, [r3, #4]
 8010986:	609a      	str	r2, [r3, #8]
 8010988:	60da      	str	r2, [r3, #12]
 801098a:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	4a44      	ldr	r2, [pc, #272]	; (8010aa4 <HAL_CAN_MspInit+0x130>)
 8010992:	4293      	cmp	r3, r2
 8010994:	d144      	bne.n	8010a20 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8010996:	4b44      	ldr	r3, [pc, #272]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801099a:	4a43      	ldr	r2, [pc, #268]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 801099c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80109a0:	6413      	str	r3, [r2, #64]	; 0x40
 80109a2:	4b41      	ldr	r3, [pc, #260]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109a6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80109aa:	61bb      	str	r3, [r7, #24]
 80109ac:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 80109ae:	4b3e      	ldr	r3, [pc, #248]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109b2:	4a3d      	ldr	r2, [pc, #244]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80109b8:	6413      	str	r3, [r2, #64]	; 0x40
 80109ba:	4b3b      	ldr	r3, [pc, #236]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 80109c6:	4b38      	ldr	r3, [pc, #224]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ca:	4a37      	ldr	r2, [pc, #220]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109cc:	f043 0302 	orr.w	r3, r3, #2
 80109d0:	6313      	str	r3, [r2, #48]	; 0x30
 80109d2:	4b35      	ldr	r3, [pc, #212]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 80109d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d6:	f003 0302 	and.w	r3, r3, #2
 80109da:	613b      	str	r3, [r7, #16]
 80109dc:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 80109de:	2360      	movs	r3, #96	; 0x60
 80109e0:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80109e2:	2302      	movs	r3, #2
 80109e4:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80109e6:	2300      	movs	r3, #0
 80109e8:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80109ea:	2303      	movs	r3, #3
 80109ec:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80109ee:	2309      	movs	r3, #9
 80109f0:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80109f2:	f107 031c 	add.w	r3, r7, #28
 80109f6:	4619      	mov	r1, r3
 80109f8:	482c      	ldr	r0, [pc, #176]	; (8010aac <HAL_CAN_MspInit+0x138>)
 80109fa:	f00a fb31 	bl	801b060 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 80109fe:	2200      	movs	r2, #0
 8010a00:	2104      	movs	r1, #4
 8010a02:	2040      	movs	r0, #64	; 0x40
 8010a04:	f009 f801 	bl	8019a0a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8010a08:	2040      	movs	r0, #64	; 0x40
 8010a0a:	f009 f81a 	bl	8019a42 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 8010a0e:	2201      	movs	r2, #1
 8010a10:	2104      	movs	r1, #4
 8010a12:	2041      	movs	r0, #65	; 0x41
 8010a14:	f008 fff9 	bl	8019a0a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8010a18:	2041      	movs	r0, #65	; 0x41
 8010a1a:	f009 f812 	bl	8019a42 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 8010a1e:	e03d      	b.n	8010a9c <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a22      	ldr	r2, [pc, #136]	; (8010ab0 <HAL_CAN_MspInit+0x13c>)
 8010a26:	4293      	cmp	r3, r2
 8010a28:	d138      	bne.n	8010a9c <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 8010a2a:	4b1f      	ldr	r3, [pc, #124]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2e:	4a1e      	ldr	r2, [pc, #120]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010a34:	6413      	str	r3, [r2, #64]	; 0x40
 8010a36:	4b1c      	ldr	r3, [pc, #112]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010a3e:	60fb      	str	r3, [r7, #12]
 8010a40:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010a42:	4b19      	ldr	r3, [pc, #100]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a46:	4a18      	ldr	r2, [pc, #96]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a48:	f043 0301 	orr.w	r3, r3, #1
 8010a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a4e:	4b16      	ldr	r3, [pc, #88]	; (8010aa8 <HAL_CAN_MspInit+0x134>)
 8010a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a52:	f003 0301 	and.w	r3, r3, #1
 8010a56:	60bb      	str	r3, [r7, #8]
 8010a58:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8010a5a:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8010a5e:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a60:	2302      	movs	r3, #2
 8010a62:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a64:	2300      	movs	r3, #0
 8010a66:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a68:	2303      	movs	r3, #3
 8010a6a:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8010a6c:	230b      	movs	r3, #11
 8010a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010a70:	f107 031c 	add.w	r3, r7, #28
 8010a74:	4619      	mov	r1, r3
 8010a76:	480f      	ldr	r0, [pc, #60]	; (8010ab4 <HAL_CAN_MspInit+0x140>)
 8010a78:	f00a faf2 	bl	801b060 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8010a7c:	2200      	movs	r2, #0
 8010a7e:	2100      	movs	r1, #0
 8010a80:	2069      	movs	r0, #105	; 0x69
 8010a82:	f008 ffc2 	bl	8019a0a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8010a86:	2069      	movs	r0, #105	; 0x69
 8010a88:	f008 ffdb 	bl	8019a42 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	2100      	movs	r1, #0
 8010a90:	206a      	movs	r0, #106	; 0x6a
 8010a92:	f008 ffba 	bl	8019a0a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8010a96:	206a      	movs	r0, #106	; 0x6a
 8010a98:	f008 ffd3 	bl	8019a42 <HAL_NVIC_EnableIRQ>
}
 8010a9c:	bf00      	nop
 8010a9e:	3730      	adds	r7, #48	; 0x30
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}
 8010aa4:	40006800 	.word	0x40006800
 8010aa8:	40023800 	.word	0x40023800
 8010aac:	40020400 	.word	0x40020400
 8010ab0:	40003400 	.word	0x40003400
 8010ab4:	40020000 	.word	0x40020000

08010ab8 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 8010ab8:	b480      	push	{r7}
 8010aba:	b085      	sub	sp, #20
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	4603      	mov	r3, r0
 8010ac0:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	81fb      	strh	r3, [r7, #14]

#warning "NOT SENDING CAN PACKETS"
	return;
 8010aca:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 8010acc:	3714      	adds	r7, #20
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
	...

08010ad8 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4a3e      	ldr	r2, [pc, #248]	; (8010be0 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d175      	bne.n	8010bd6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 8010aea:	4b3e      	ldr	r3, [pc, #248]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010aec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010af6:	d104      	bne.n	8010b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 8010af8:	4b3a      	ldr	r3, [pc, #232]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010afa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010afe:	2200      	movs	r2, #0
 8010b00:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8010b02:	4b39      	ldr	r3, [pc, #228]	; (8010be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010b04:	4a39      	ldr	r2, [pc, #228]	; (8010bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010b06:	2100      	movs	r1, #0
 8010b08:	4839      	ldr	r0, [pc, #228]	; (8010bf0 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8010b0a:	f008 fb37 	bl	801917c <HAL_CAN_GetRxMessage>
 8010b0e:	4603      	mov	r3, r0
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d001      	beq.n	8010b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8010b14:	f006 fa92 	bl	801703c <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 8010b18:	4b32      	ldr	r3, [pc, #200]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b1e:	881b      	ldrh	r3, [r3, #0]
 8010b20:	4a30      	ldr	r2, [pc, #192]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b22:	011b      	lsls	r3, r3, #4
 8010b24:	4413      	add	r3, r2
 8010b26:	330f      	adds	r3, #15
 8010b28:	2203      	movs	r2, #3
 8010b2a:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8010b2c:	4b2f      	ldr	r3, [pc, #188]	; (8010bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010b2e:	691a      	ldr	r2, [r3, #16]
 8010b30:	4b2c      	ldr	r3, [pc, #176]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b36:	881b      	ldrh	r3, [r3, #0]
 8010b38:	b2d1      	uxtb	r1, r2
 8010b3a:	4a2a      	ldr	r2, [pc, #168]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b3c:	011b      	lsls	r3, r3, #4
 8010b3e:	4413      	add	r3, r2
 8010b40:	330c      	adds	r3, #12
 8010b42:	460a      	mov	r2, r1
 8010b44:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 8010b46:	4b29      	ldr	r3, [pc, #164]	; (8010bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010b48:	689a      	ldr	r2, [r3, #8]
 8010b4a:	4b26      	ldr	r3, [pc, #152]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b50:	881b      	ldrh	r3, [r3, #0]
 8010b52:	b2d1      	uxtb	r1, r2
 8010b54:	4a23      	ldr	r2, [pc, #140]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b56:	011b      	lsls	r3, r3, #4
 8010b58:	4413      	add	r3, r2
 8010b5a:	330d      	adds	r3, #13
 8010b5c:	460a      	mov	r2, r1
 8010b5e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8010b60:	4b22      	ldr	r3, [pc, #136]	; (8010bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010b62:	68da      	ldr	r2, [r3, #12]
 8010b64:	4b1f      	ldr	r3, [pc, #124]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b6a:	881b      	ldrh	r3, [r3, #0]
 8010b6c:	b2d1      	uxtb	r1, r2
 8010b6e:	4a1d      	ldr	r2, [pc, #116]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b70:	011b      	lsls	r3, r3, #4
 8010b72:	4413      	add	r3, r2
 8010b74:	330e      	adds	r3, #14
 8010b76:	460a      	mov	r2, r1
 8010b78:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 8010b7a:	4b1a      	ldr	r3, [pc, #104]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b80:	881b      	ldrh	r3, [r3, #0]
 8010b82:	4618      	mov	r0, r3
 8010b84:	4b19      	ldr	r3, [pc, #100]	; (8010bec <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	4916      	ldr	r1, [pc, #88]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b8a:	0103      	lsls	r3, r0, #4
 8010b8c:	440b      	add	r3, r1
 8010b8e:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8010b90:	4b14      	ldr	r3, [pc, #80]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b92:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b96:	881b      	ldrh	r3, [r3, #0]
 8010b98:	4a12      	ldr	r2, [pc, #72]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010b9a:	011b      	lsls	r3, r3, #4
 8010b9c:	4413      	add	r3, r2
 8010b9e:	330e      	adds	r3, #14
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d117      	bne.n	8010bd6 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 8010ba6:	4b0f      	ldr	r3, [pc, #60]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010ba8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bac:	881b      	ldrh	r3, [r3, #0]
 8010bae:	011b      	lsls	r3, r3, #4
 8010bb0:	4a0c      	ldr	r2, [pc, #48]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010bb2:	4413      	add	r3, r2
 8010bb4:	3304      	adds	r3, #4
 8010bb6:	490c      	ldr	r1, [pc, #48]	; (8010be8 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010bb8:	461a      	mov	r2, r3
 8010bba:	460b      	mov	r3, r1
 8010bbc:	cb03      	ldmia	r3!, {r0, r1}
 8010bbe:	6010      	str	r0, [r2, #0]
 8010bc0:	6051      	str	r1, [r2, #4]
			canRead.In++;
 8010bc2:	4b08      	ldr	r3, [pc, #32]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010bc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	3301      	adds	r3, #1
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	4b05      	ldr	r3, [pc, #20]	; (8010be4 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010bd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bd4:	801a      	strh	r2, [r3, #0]
		}
	}
}
 8010bd6:	bf00      	nop
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}
 8010bde:	bf00      	nop
 8010be0:	40003400 	.word	0x40003400
 8010be4:	2000719c 	.word	0x2000719c
 8010be8:	2000b1e0 	.word	0x2000b1e0
 8010bec:	2000b1bc 	.word	0x2000b1bc
 8010bf0:	2000b250 	.word	0x2000b250

08010bf4 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010bf4:	b580      	push	{r7, lr}
 8010bf6:	b082      	sub	sp, #8
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 8010bfc:	4b42      	ldr	r3, [pc, #264]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010bfe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c02:	881b      	ldrh	r3, [r3, #0]
 8010c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010c08:	d104      	bne.n	8010c14 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 8010c0a:	4b3f      	ldr	r3, [pc, #252]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c0c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c10:	2200      	movs	r2, #0
 8010c12:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 8010c14:	4b3d      	ldr	r3, [pc, #244]	; (8010d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010c16:	4a3e      	ldr	r2, [pc, #248]	; (8010d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010c18:	2101      	movs	r1, #1
 8010c1a:	483e      	ldr	r0, [pc, #248]	; (8010d14 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 8010c1c:	f008 faae 	bl	801917c <HAL_CAN_GetRxMessage>
 8010c20:	4603      	mov	r3, r0
 8010c22:	461a      	mov	r2, r3
 8010c24:	4b3c      	ldr	r3, [pc, #240]	; (8010d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8010c26:	701a      	strb	r2, [r3, #0]
 8010c28:	4b3b      	ldr	r3, [pc, #236]	; (8010d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d007      	beq.n	8010c40 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 8010c30:	4b39      	ldr	r3, [pc, #228]	; (8010d18 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	4619      	mov	r1, r3
 8010c36:	4839      	ldr	r0, [pc, #228]	; (8010d1c <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 8010c38:	f014 ff10 	bl	8025a5c <iprintf>
		Error_Handler();
 8010c3c:	f006 f9fe 	bl	801703c <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 8010c40:	4b31      	ldr	r3, [pc, #196]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c42:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c46:	881b      	ldrh	r3, [r3, #0]
 8010c48:	4a2f      	ldr	r2, [pc, #188]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c4a:	011b      	lsls	r3, r3, #4
 8010c4c:	4413      	add	r3, r2
 8010c4e:	330f      	adds	r3, #15
 8010c50:	2202      	movs	r2, #2
 8010c52:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 8010c54:	4b2e      	ldr	r3, [pc, #184]	; (8010d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010c56:	691a      	ldr	r2, [r3, #16]
 8010c58:	4b2b      	ldr	r3, [pc, #172]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c5e:	881b      	ldrh	r3, [r3, #0]
 8010c60:	b2d1      	uxtb	r1, r2
 8010c62:	4a29      	ldr	r2, [pc, #164]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c64:	011b      	lsls	r3, r3, #4
 8010c66:	4413      	add	r3, r2
 8010c68:	330c      	adds	r3, #12
 8010c6a:	460a      	mov	r2, r1
 8010c6c:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 8010c6e:	4b28      	ldr	r3, [pc, #160]	; (8010d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010c70:	689a      	ldr	r2, [r3, #8]
 8010c72:	4b25      	ldr	r3, [pc, #148]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c78:	881b      	ldrh	r3, [r3, #0]
 8010c7a:	b2d1      	uxtb	r1, r2
 8010c7c:	4a22      	ldr	r2, [pc, #136]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c7e:	011b      	lsls	r3, r3, #4
 8010c80:	4413      	add	r3, r2
 8010c82:	330d      	adds	r3, #13
 8010c84:	460a      	mov	r2, r1
 8010c86:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8010c88:	4b21      	ldr	r3, [pc, #132]	; (8010d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010c8a:	68da      	ldr	r2, [r3, #12]
 8010c8c:	4b1e      	ldr	r3, [pc, #120]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c92:	881b      	ldrh	r3, [r3, #0]
 8010c94:	b2d1      	uxtb	r1, r2
 8010c96:	4a1c      	ldr	r2, [pc, #112]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	4413      	add	r3, r2
 8010c9c:	330e      	adds	r3, #14
 8010c9e:	460a      	mov	r2, r1
 8010ca0:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 8010ca2:	4b19      	ldr	r3, [pc, #100]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010ca4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ca8:	881b      	ldrh	r3, [r3, #0]
 8010caa:	4618      	mov	r0, r3
 8010cac:	4b18      	ldr	r3, [pc, #96]	; (8010d10 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	4915      	ldr	r1, [pc, #84]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cb2:	0103      	lsls	r3, r0, #4
 8010cb4:	440b      	add	r3, r1
 8010cb6:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8010cb8:	4b13      	ldr	r3, [pc, #76]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cbe:	881b      	ldrh	r3, [r3, #0]
 8010cc0:	4a11      	ldr	r2, [pc, #68]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cc2:	011b      	lsls	r3, r3, #4
 8010cc4:	4413      	add	r3, r2
 8010cc6:	330e      	adds	r3, #14
 8010cc8:	781b      	ldrb	r3, [r3, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d117      	bne.n	8010cfe <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8010cce:	4b0e      	ldr	r3, [pc, #56]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cd4:	881b      	ldrh	r3, [r3, #0]
 8010cd6:	011b      	lsls	r3, r3, #4
 8010cd8:	4a0b      	ldr	r2, [pc, #44]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cda:	4413      	add	r3, r2
 8010cdc:	3304      	adds	r3, #4
 8010cde:	490b      	ldr	r1, [pc, #44]	; (8010d0c <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010ce0:	461a      	mov	r2, r3
 8010ce2:	460b      	mov	r3, r1
 8010ce4:	cb03      	ldmia	r3!, {r0, r1}
 8010ce6:	6010      	str	r0, [r2, #0]
 8010ce8:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8010cea:	4b07      	ldr	r3, [pc, #28]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cf0:	881b      	ldrh	r3, [r3, #0]
 8010cf2:	3301      	adds	r3, #1
 8010cf4:	b29a      	uxth	r2, r3
 8010cf6:	4b04      	ldr	r3, [pc, #16]	; (8010d08 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010cf8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cfc:	801a      	strh	r2, [r3, #0]
	}
}
 8010cfe:	bf00      	nop
 8010d00:	3708      	adds	r7, #8
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	2000719c 	.word	0x2000719c
 8010d0c:	2000b1d8 	.word	0x2000b1d8
 8010d10:	2000b1a0 	.word	0x2000b1a0
 8010d14:	2000b1ec 	.word	0x2000b1ec
 8010d18:	2000b1e8 	.word	0x2000b1e8
 8010d1c:	0802a278 	.word	0x0802a278

08010d20 <canDataReady>:


unsigned char canDataReady()
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b082      	sub	sp, #8
 8010d24:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 8010d26:	2300      	movs	r3, #0
 8010d28:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 8010d2a:	4b27      	ldr	r3, [pc, #156]	; (8010dc8 <canDataReady+0xa8>)
 8010d2c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d30:	881a      	ldrh	r2, [r3, #0]
 8010d32:	4b25      	ldr	r3, [pc, #148]	; (8010dc8 <canDataReady+0xa8>)
 8010d34:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d38:	885b      	ldrh	r3, [r3, #2]
 8010d3a:	429a      	cmp	r2, r3
 8010d3c:	d101      	bne.n	8010d42 <canDataReady+0x22>
	{
		return 0;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	e03e      	b.n	8010dc0 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8010d42:	4b21      	ldr	r3, [pc, #132]	; (8010dc8 <canDataReady+0xa8>)
 8010d44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d48:	885b      	ldrh	r3, [r3, #2]
 8010d4a:	3301      	adds	r3, #1
 8010d4c:	607b      	str	r3, [r7, #4]
 8010d4e:	e02e      	b.n	8010dae <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 8010d50:	4b1d      	ldr	r3, [pc, #116]	; (8010dc8 <canDataReady+0xa8>)
 8010d52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d56:	885b      	ldrh	r3, [r3, #2]
 8010d58:	011b      	lsls	r3, r3, #4
 8010d5a:	4a1b      	ldr	r2, [pc, #108]	; (8010dc8 <canDataReady+0xa8>)
 8010d5c:	1898      	adds	r0, r3, r2
 8010d5e:	4b1a      	ldr	r3, [pc, #104]	; (8010dc8 <canDataReady+0xa8>)
 8010d60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	011b      	lsls	r3, r3, #4
 8010d68:	4a17      	ldr	r2, [pc, #92]	; (8010dc8 <canDataReady+0xa8>)
 8010d6a:	4413      	add	r3, r2
 8010d6c:	2210      	movs	r2, #16
 8010d6e:	4619      	mov	r1, r3
 8010d70:	f014 fd54 	bl	802581c <memcmp>
 8010d74:	4603      	mov	r3, r0
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d116      	bne.n	8010da8 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010d7a:	4b13      	ldr	r3, [pc, #76]	; (8010dc8 <canDataReady+0xa8>)
 8010d7c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d80:	885b      	ldrh	r3, [r3, #2]
 8010d82:	011b      	lsls	r3, r3, #4
 8010d84:	4a10      	ldr	r2, [pc, #64]	; (8010dc8 <canDataReady+0xa8>)
 8010d86:	4413      	add	r3, r2
 8010d88:	2210      	movs	r2, #16
 8010d8a:	2100      	movs	r1, #0
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	f014 fd7d 	bl	802588c <memset>
			canRead.Out++;
 8010d92:	4b0d      	ldr	r3, [pc, #52]	; (8010dc8 <canDataReady+0xa8>)
 8010d94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d98:	885b      	ldrh	r3, [r3, #2]
 8010d9a:	3301      	adds	r3, #1
 8010d9c:	b29a      	uxth	r2, r3
 8010d9e:	4b0a      	ldr	r3, [pc, #40]	; (8010dc8 <canDataReady+0xa8>)
 8010da0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010da4:	805a      	strh	r2, [r3, #2]
			break;
 8010da6:	e00a      	b.n	8010dbe <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	3301      	adds	r3, #1
 8010dac:	607b      	str	r3, [r7, #4]
 8010dae:	4b06      	ldr	r3, [pc, #24]	; (8010dc8 <canDataReady+0xa8>)
 8010db0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010db4:	881b      	ldrh	r3, [r3, #0]
 8010db6:	461a      	mov	r2, r3
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	4293      	cmp	r3, r2
 8010dbc:	d3c8      	bcc.n	8010d50 <canDataReady+0x30>
		}
	}
	return 1;
 8010dbe:	2301      	movs	r3, #1
}
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	3708      	adds	r7, #8
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	2000719c 	.word	0x2000719c

08010dcc <readCanToStructs>:

void readCanToStructs(void)
{
 8010dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010dce:	b08f      	sub	sp, #60	; 0x3c
 8010dd0:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010dd8:	2300      	movs	r3, #0
 8010dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010dde:	2300      	movs	r3, #0
 8010de0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 8010de4:	2300      	movs	r3, #0
 8010de6:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8010de8:	4bc4      	ldr	r3, [pc, #784]	; (80110fc <readCanToStructs+0x330>)
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	3b01      	subs	r3, #1
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	f204 80d7 	bhi.w	8014fa2 <readCanToStructs+0x41d6>
 8010df4:	a201      	add	r2, pc, #4	; (adr r2, 8010dfc <readCanToStructs+0x30>)
 8010df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dfa:	bf00      	nop
 8010dfc:	08010e0d 	.word	0x08010e0d
 8010e00:	08013513 	.word	0x08013513
 8010e04:	080145e1 	.word	0x080145e1
 8010e08:	08014f97 	.word	0x08014f97
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8010e0c:	4bbc      	ldr	r3, [pc, #752]	; (8011100 <readCanToStructs+0x334>)
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	09db      	lsrs	r3, r3, #7
 8010e12:	f003 0301 	and.w	r3, r3, #1
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	f044 80c5 	bne.w	8014fa6 <readCanToStructs+0x41da>
		{
			return;
		}
		while(canDataReady())
 8010e1c:	f001 baf3 	b.w	8012406 <readCanToStructs+0x163a>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8010e20:	4bb8      	ldr	r3, [pc, #736]	; (8011104 <readCanToStructs+0x338>)
 8010e22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e26:	885b      	ldrh	r3, [r3, #2]
 8010e28:	4ab6      	ldr	r2, [pc, #728]	; (8011104 <readCanToStructs+0x338>)
 8010e2a:	011b      	lsls	r3, r3, #4
 8010e2c:	4413      	add	r3, r2
 8010e2e:	330f      	adds	r3, #15
 8010e30:	781b      	ldrb	r3, [r3, #0]
 8010e32:	3b01      	subs	r3, #1
 8010e34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8010e38:	4bb2      	ldr	r3, [pc, #712]	; (8011104 <readCanToStructs+0x338>)
 8010e3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e3e:	885b      	ldrh	r3, [r3, #2]
 8010e40:	4ab0      	ldr	r2, [pc, #704]	; (8011104 <readCanToStructs+0x338>)
 8010e42:	011b      	lsls	r3, r3, #4
 8010e44:	4413      	add	r3, r2
 8010e46:	681b      	ldr	r3, [r3, #0]
 8010e48:	f240 220a 	movw	r2, #522	; 0x20a
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	f201 82b7 	bhi.w	80123c0 <readCanToStructs+0x15f4>
 8010e52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010e56:	d80a      	bhi.n	8010e6e <readCanToStructs+0xa2>
 8010e58:	f240 1203 	movw	r2, #259	; 0x103
 8010e5c:	4293      	cmp	r3, r2
 8010e5e:	d023      	beq.n	8010ea8 <readCanToStructs+0xdc>
 8010e60:	f240 1209 	movw	r2, #265	; 0x109
 8010e64:	4293      	cmp	r3, r2
 8010e66:	f000 80f5 	beq.w	8011054 <readCanToStructs+0x288>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8010e6a:	f001 baa9 	b.w	80123c0 <readCanToStructs+0x15f4>
 8010e6e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010e72:	2b09      	cmp	r3, #9
 8010e74:	f201 82a4 	bhi.w	80123c0 <readCanToStructs+0x15f4>
 8010e78:	a201      	add	r2, pc, #4	; (adr r2, 8010e80 <readCanToStructs+0xb4>)
 8010e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e7e:	bf00      	nop
 8010e80:	08011229 	.word	0x08011229
 8010e84:	08011431 	.word	0x08011431
 8010e88:	08011609 	.word	0x08011609
 8010e8c:	08011823 	.word	0x08011823
 8010e90:	08011a3f 	.word	0x08011a3f
 8010e94:	080123c1 	.word	0x080123c1
 8010e98:	08011bd7 	.word	0x08011bd7
 8010e9c:	08011e0f 	.word	0x08011e0f
 8010ea0:	0801204b 	.word	0x0801204b
 8010ea4:	080121ed 	.word	0x080121ed
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010ea8:	4b97      	ldr	r3, [pc, #604]	; (8011108 <readCanToStructs+0x33c>)
 8010eaa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010eac:	4b95      	ldr	r3, [pc, #596]	; (8011104 <readCanToStructs+0x338>)
 8010eae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010eb2:	885b      	ldrh	r3, [r3, #2]
 8010eb4:	4a93      	ldr	r2, [pc, #588]	; (8011104 <readCanToStructs+0x338>)
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	4413      	add	r3, r2
 8010eba:	3304      	adds	r3, #4
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010ec2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d110      	bne.n	8010eec <readCanToStructs+0x120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010eca:	2206      	movs	r2, #6
 8010ecc:	2100      	movs	r1, #0
 8010ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ed0:	f014 fcdc 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010ed4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ed8:	4a8c      	ldr	r2, [pc, #560]	; (801110c <readCanToStructs+0x340>)
 8010eda:	f240 4116 	movw	r1, #1046	; 0x416
 8010ede:	fb01 f303 	mul.w	r3, r1, r3
 8010ee2:	4413      	add	r3, r2
 8010ee4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010ee8:	2200      	movs	r2, #0
 8010eea:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8010eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ef0:	4a86      	ldr	r2, [pc, #536]	; (801110c <readCanToStructs+0x340>)
 8010ef2:	f240 4116 	movw	r1, #1046	; 0x416
 8010ef6:	fb01 f303 	mul.w	r3, r1, r3
 8010efa:	4413      	add	r3, r2
 8010efc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d015      	beq.n	8010f36 <readCanToStructs+0x16a>
					printf("GPS Packet Seq no MisMatch\n");
 8010f0a:	4881      	ldr	r0, [pc, #516]	; (8011110 <readCanToStructs+0x344>)
 8010f0c:	f014 fe42 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010f10:	2206      	movs	r2, #6
 8010f12:	2100      	movs	r1, #0
 8010f14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f16:	f014 fcb9 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010f1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f1e:	4a7b      	ldr	r2, [pc, #492]	; (801110c <readCanToStructs+0x340>)
 8010f20:	f240 4116 	movw	r1, #1046	; 0x416
 8010f24:	fb01 f303 	mul.w	r3, r1, r3
 8010f28:	4413      	add	r3, r2
 8010f2a:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010f2e:	2200      	movs	r2, #0
 8010f30:	701a      	strb	r2, [r3, #0]
					break;
 8010f32:	f001 ba46 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010f36:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	00db      	lsls	r3, r3, #3
 8010f3e:	1a9b      	subs	r3, r3, r2
 8010f40:	461a      	mov	r2, r3
 8010f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f44:	4413      	add	r3, r2
 8010f46:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f48:	2301      	movs	r3, #1
 8010f4a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f4e:	e016      	b.n	8010f7e <readCanToStructs+0x1b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010f50:	4b6c      	ldr	r3, [pc, #432]	; (8011104 <readCanToStructs+0x338>)
 8010f52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f56:	885b      	ldrh	r3, [r3, #2]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f5e:	4969      	ldr	r1, [pc, #420]	; (8011104 <readCanToStructs+0x338>)
 8010f60:	0112      	lsls	r2, r2, #4
 8010f62:	440a      	add	r2, r1
 8010f64:	4413      	add	r3, r2
 8010f66:	3304      	adds	r3, #4
 8010f68:	781a      	ldrb	r2, [r3, #0]
 8010f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f6c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f70:	3301      	adds	r3, #1
 8010f72:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010f74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f78:	3301      	adds	r3, #1
 8010f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010f7e:	4b61      	ldr	r3, [pc, #388]	; (8011104 <readCanToStructs+0x338>)
 8010f80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f84:	885b      	ldrh	r3, [r3, #2]
 8010f86:	4a5f      	ldr	r2, [pc, #380]	; (8011104 <readCanToStructs+0x338>)
 8010f88:	011b      	lsls	r3, r3, #4
 8010f8a:	4413      	add	r3, r2
 8010f8c:	330c      	adds	r3, #12
 8010f8e:	781b      	ldrb	r3, [r3, #0]
 8010f90:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010f94:	429a      	cmp	r2, r3
 8010f96:	d3db      	bcc.n	8010f50 <readCanToStructs+0x184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010f98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f9c:	4a5b      	ldr	r2, [pc, #364]	; (801110c <readCanToStructs+0x340>)
 8010f9e:	f240 4116 	movw	r1, #1046	; 0x416
 8010fa2:	fb01 f303 	mul.w	r3, r1, r3
 8010fa6:	4413      	add	r3, r2
 8010fa8:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	4613      	mov	r3, r2
 8010fb2:	00db      	lsls	r3, r3, #3
 8010fb4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010fb6:	4b53      	ldr	r3, [pc, #332]	; (8011104 <readCanToStructs+0x338>)
 8010fb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fbc:	885b      	ldrh	r3, [r3, #2]
 8010fbe:	4951      	ldr	r1, [pc, #324]	; (8011104 <readCanToStructs+0x338>)
 8010fc0:	011b      	lsls	r3, r3, #4
 8010fc2:	440b      	add	r3, r1
 8010fc4:	330c      	adds	r3, #12
 8010fc6:	781b      	ldrb	r3, [r3, #0]
 8010fc8:	3b01      	subs	r3, #1
 8010fca:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010fcc:	2b05      	cmp	r3, #5
 8010fce:	d91c      	bls.n	801100a <readCanToStructs+0x23e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010fd0:	4b50      	ldr	r3, [pc, #320]	; (8011114 <readCanToStructs+0x348>)
 8010fd2:	4a4d      	ldr	r2, [pc, #308]	; (8011108 <readCanToStructs+0x33c>)
 8010fd4:	6811      	ldr	r1, [r2, #0]
 8010fd6:	6019      	str	r1, [r3, #0]
 8010fd8:	8892      	ldrh	r2, [r2, #4]
 8010fda:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010fdc:	4b4e      	ldr	r3, [pc, #312]	; (8011118 <readCanToStructs+0x34c>)
 8010fde:	781b      	ldrb	r3, [r3, #0]
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d102      	bne.n	8010fea <readCanToStructs+0x21e>
						printf("GPS_PACKET_RECEIVED\n");
 8010fe4:	484d      	ldr	r0, [pc, #308]	; (801111c <readCanToStructs+0x350>)
 8010fe6:	f014 fdd5 	bl	8025b94 <puts>
					Write_RTC();
 8010fea:	f7fb fafb 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ff2:	4a46      	ldr	r2, [pc, #280]	; (801110c <readCanToStructs+0x340>)
 8010ff4:	f240 4116 	movw	r1, #1046	; 0x416
 8010ff8:	fb01 f303 	mul.w	r3, r1, r3
 8010ffc:	4413      	add	r3, r2
 8010ffe:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011002:	2200      	movs	r2, #0
 8011004:	701a      	strb	r2, [r3, #0]
				break;
 8011006:	f001 b9dc 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801100a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801100e:	4a3f      	ldr	r2, [pc, #252]	; (801110c <readCanToStructs+0x340>)
 8011010:	f240 4116 	movw	r1, #1046	; 0x416
 8011014:	fb01 f303 	mul.w	r3, r1, r3
 8011018:	4413      	add	r3, r2
 801101a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801101e:	2201      	movs	r2, #1
 8011020:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011022:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011026:	4939      	ldr	r1, [pc, #228]	; (801110c <readCanToStructs+0x340>)
 8011028:	f240 4216 	movw	r2, #1046	; 0x416
 801102c:	fb03 f202 	mul.w	r2, r3, r2
 8011030:	440a      	add	r2, r1
 8011032:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011036:	7812      	ldrb	r2, [r2, #0]
 8011038:	3201      	adds	r2, #1
 801103a:	b2d0      	uxtb	r0, r2
 801103c:	4a33      	ldr	r2, [pc, #204]	; (801110c <readCanToStructs+0x340>)
 801103e:	f240 4116 	movw	r1, #1046	; 0x416
 8011042:	fb01 f303 	mul.w	r3, r1, r3
 8011046:	4413      	add	r3, r2
 8011048:	f203 2307 	addw	r3, r3, #519	; 0x207
 801104c:	4602      	mov	r2, r0
 801104e:	701a      	strb	r2, [r3, #0]
				break;
 8011050:	f001 b9b7 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011054:	4b2c      	ldr	r3, [pc, #176]	; (8011108 <readCanToStructs+0x33c>)
 8011056:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011058:	4b2a      	ldr	r3, [pc, #168]	; (8011104 <readCanToStructs+0x338>)
 801105a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801105e:	885b      	ldrh	r3, [r3, #2]
 8011060:	4a28      	ldr	r2, [pc, #160]	; (8011104 <readCanToStructs+0x338>)
 8011062:	011b      	lsls	r3, r3, #4
 8011064:	4413      	add	r3, r2
 8011066:	3304      	adds	r3, #4
 8011068:	781b      	ldrb	r3, [r3, #0]
 801106a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801106e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011072:	2b00      	cmp	r3, #0
 8011074:	d110      	bne.n	8011098 <readCanToStructs+0x2cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011076:	2206      	movs	r2, #6
 8011078:	2100      	movs	r1, #0
 801107a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801107c:	f014 fc06 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011084:	4a21      	ldr	r2, [pc, #132]	; (801110c <readCanToStructs+0x340>)
 8011086:	f240 4116 	movw	r1, #1046	; 0x416
 801108a:	fb01 f303 	mul.w	r3, r1, r3
 801108e:	4413      	add	r3, r2
 8011090:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011094:	2200      	movs	r2, #0
 8011096:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011098:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801109c:	4a1b      	ldr	r2, [pc, #108]	; (801110c <readCanToStructs+0x340>)
 801109e:	f240 4116 	movw	r1, #1046	; 0x416
 80110a2:	fb01 f303 	mul.w	r3, r1, r3
 80110a6:	4413      	add	r3, r2
 80110a8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80110ac:	781b      	ldrb	r3, [r3, #0]
 80110ae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80110b2:	429a      	cmp	r2, r3
 80110b4:	d015      	beq.n	80110e2 <readCanToStructs+0x316>
					printf("GPS2 Packet Seq no MisMatch\n");
 80110b6:	481a      	ldr	r0, [pc, #104]	; (8011120 <readCanToStructs+0x354>)
 80110b8:	f014 fd6c 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80110bc:	2206      	movs	r2, #6
 80110be:	2100      	movs	r1, #0
 80110c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110c2:	f014 fbe3 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80110c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110ca:	4a10      	ldr	r2, [pc, #64]	; (801110c <readCanToStructs+0x340>)
 80110cc:	f240 4116 	movw	r1, #1046	; 0x416
 80110d0:	fb01 f303 	mul.w	r3, r1, r3
 80110d4:	4413      	add	r3, r2
 80110d6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80110da:	2200      	movs	r2, #0
 80110dc:	701a      	strb	r2, [r3, #0]
					break;
 80110de:	f001 b970 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80110e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80110e6:	4613      	mov	r3, r2
 80110e8:	00db      	lsls	r3, r3, #3
 80110ea:	1a9b      	subs	r3, r3, r2
 80110ec:	461a      	mov	r2, r3
 80110ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f0:	4413      	add	r3, r2
 80110f2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80110f4:	2301      	movs	r3, #1
 80110f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80110fa:	e02a      	b.n	8011152 <readCanToStructs+0x386>
 80110fc:	20000504 	.word	0x20000504
 8011100:	2000308c 	.word	0x2000308c
 8011104:	2000719c 	.word	0x2000719c
 8011108:	20003f18 	.word	0x20003f18
 801110c:	20006970 	.word	0x20006970
 8011110:	0802a2a0 	.word	0x0802a2a0
 8011114:	20003f10 	.word	0x20003f10
 8011118:	20000bbb 	.word	0x20000bbb
 801111c:	0802a2bc 	.word	0x0802a2bc
 8011120:	0802a2d0 	.word	0x0802a2d0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011124:	4bb6      	ldr	r3, [pc, #728]	; (8011400 <readCanToStructs+0x634>)
 8011126:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801112a:	885b      	ldrh	r3, [r3, #2]
 801112c:	461a      	mov	r2, r3
 801112e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011132:	49b3      	ldr	r1, [pc, #716]	; (8011400 <readCanToStructs+0x634>)
 8011134:	0112      	lsls	r2, r2, #4
 8011136:	440a      	add	r2, r1
 8011138:	4413      	add	r3, r2
 801113a:	3304      	adds	r3, #4
 801113c:	781a      	ldrb	r2, [r3, #0]
 801113e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011140:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	3301      	adds	r3, #1
 8011146:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011148:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801114c:	3301      	adds	r3, #1
 801114e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011152:	4bab      	ldr	r3, [pc, #684]	; (8011400 <readCanToStructs+0x634>)
 8011154:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011158:	885b      	ldrh	r3, [r3, #2]
 801115a:	4aa9      	ldr	r2, [pc, #676]	; (8011400 <readCanToStructs+0x634>)
 801115c:	011b      	lsls	r3, r3, #4
 801115e:	4413      	add	r3, r2
 8011160:	330c      	adds	r3, #12
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011168:	429a      	cmp	r2, r3
 801116a:	d3db      	bcc.n	8011124 <readCanToStructs+0x358>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801116c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011170:	4aa4      	ldr	r2, [pc, #656]	; (8011404 <readCanToStructs+0x638>)
 8011172:	f240 4116 	movw	r1, #1046	; 0x416
 8011176:	fb01 f303 	mul.w	r3, r1, r3
 801117a:	4413      	add	r3, r2
 801117c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011180:	781b      	ldrb	r3, [r3, #0]
 8011182:	461a      	mov	r2, r3
 8011184:	4613      	mov	r3, r2
 8011186:	00db      	lsls	r3, r3, #3
 8011188:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801118a:	4b9d      	ldr	r3, [pc, #628]	; (8011400 <readCanToStructs+0x634>)
 801118c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011190:	885b      	ldrh	r3, [r3, #2]
 8011192:	499b      	ldr	r1, [pc, #620]	; (8011400 <readCanToStructs+0x634>)
 8011194:	011b      	lsls	r3, r3, #4
 8011196:	440b      	add	r3, r1
 8011198:	330c      	adds	r3, #12
 801119a:	781b      	ldrb	r3, [r3, #0]
 801119c:	3b01      	subs	r3, #1
 801119e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80111a0:	2b05      	cmp	r3, #5
 80111a2:	d91c      	bls.n	80111de <readCanToStructs+0x412>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80111a4:	4b98      	ldr	r3, [pc, #608]	; (8011408 <readCanToStructs+0x63c>)
 80111a6:	4a99      	ldr	r2, [pc, #612]	; (801140c <readCanToStructs+0x640>)
 80111a8:	6811      	ldr	r1, [r2, #0]
 80111aa:	6019      	str	r1, [r3, #0]
 80111ac:	8892      	ldrh	r2, [r2, #4]
 80111ae:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80111b0:	4b97      	ldr	r3, [pc, #604]	; (8011410 <readCanToStructs+0x644>)
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d102      	bne.n	80111be <readCanToStructs+0x3f2>
						printf("GPS2_PACKET_RECEIVED\n");
 80111b8:	4896      	ldr	r0, [pc, #600]	; (8011414 <readCanToStructs+0x648>)
 80111ba:	f014 fceb 	bl	8025b94 <puts>
					Write_RTC();
 80111be:	f7fb fa11 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80111c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111c6:	4a8f      	ldr	r2, [pc, #572]	; (8011404 <readCanToStructs+0x638>)
 80111c8:	f240 4116 	movw	r1, #1046	; 0x416
 80111cc:	fb01 f303 	mul.w	r3, r1, r3
 80111d0:	4413      	add	r3, r2
 80111d2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80111d6:	2200      	movs	r2, #0
 80111d8:	701a      	strb	r2, [r3, #0]
				break;
 80111da:	f001 b8f2 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80111de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111e2:	4a88      	ldr	r2, [pc, #544]	; (8011404 <readCanToStructs+0x638>)
 80111e4:	f240 4116 	movw	r1, #1046	; 0x416
 80111e8:	fb01 f303 	mul.w	r3, r1, r3
 80111ec:	4413      	add	r3, r2
 80111ee:	f203 2312 	addw	r3, r3, #530	; 0x212
 80111f2:	2201      	movs	r2, #1
 80111f4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80111f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111fa:	4982      	ldr	r1, [pc, #520]	; (8011404 <readCanToStructs+0x638>)
 80111fc:	f240 4216 	movw	r2, #1046	; 0x416
 8011200:	fb03 f202 	mul.w	r2, r3, r2
 8011204:	440a      	add	r2, r1
 8011206:	f202 2213 	addw	r2, r2, #531	; 0x213
 801120a:	7812      	ldrb	r2, [r2, #0]
 801120c:	3201      	adds	r2, #1
 801120e:	b2d0      	uxtb	r0, r2
 8011210:	4a7c      	ldr	r2, [pc, #496]	; (8011404 <readCanToStructs+0x638>)
 8011212:	f240 4116 	movw	r1, #1046	; 0x416
 8011216:	fb01 f303 	mul.w	r3, r1, r3
 801121a:	4413      	add	r3, r2
 801121c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011220:	4602      	mov	r2, r0
 8011222:	701a      	strb	r2, [r3, #0]
				break;
 8011224:	f001 b8cd 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8011228:	4b7b      	ldr	r3, [pc, #492]	; (8011418 <readCanToStructs+0x64c>)
 801122a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801122c:	4b74      	ldr	r3, [pc, #464]	; (8011400 <readCanToStructs+0x634>)
 801122e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011232:	885b      	ldrh	r3, [r3, #2]
 8011234:	4a72      	ldr	r2, [pc, #456]	; (8011400 <readCanToStructs+0x634>)
 8011236:	011b      	lsls	r3, r3, #4
 8011238:	4413      	add	r3, r2
 801123a:	3304      	adds	r3, #4
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011242:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011246:	2b00      	cmp	r3, #0
 8011248:	d110      	bne.n	801126c <readCanToStructs+0x4a0>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801124a:	2218      	movs	r2, #24
 801124c:	2100      	movs	r1, #0
 801124e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011250:	f014 fb1c 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011258:	4a6a      	ldr	r2, [pc, #424]	; (8011404 <readCanToStructs+0x638>)
 801125a:	f240 4116 	movw	r1, #1046	; 0x416
 801125e:	fb01 f303 	mul.w	r3, r1, r3
 8011262:	4413      	add	r3, r2
 8011264:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011268:	2200      	movs	r2, #0
 801126a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 801126c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011270:	4a64      	ldr	r2, [pc, #400]	; (8011404 <readCanToStructs+0x638>)
 8011272:	f240 4116 	movw	r1, #1046	; 0x416
 8011276:	fb01 f303 	mul.w	r3, r1, r3
 801127a:	4413      	add	r3, r2
 801127c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011286:	429a      	cmp	r2, r3
 8011288:	d015      	beq.n	80112b6 <readCanToStructs+0x4ea>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801128a:	4864      	ldr	r0, [pc, #400]	; (801141c <readCanToStructs+0x650>)
 801128c:	f014 fc82 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011290:	2218      	movs	r2, #24
 8011292:	2100      	movs	r1, #0
 8011294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011296:	f014 faf9 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801129a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801129e:	4a59      	ldr	r2, [pc, #356]	; (8011404 <readCanToStructs+0x638>)
 80112a0:	f240 4116 	movw	r1, #1046	; 0x416
 80112a4:	fb01 f303 	mul.w	r3, r1, r3
 80112a8:	4413      	add	r3, r2
 80112aa:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80112ae:	2200      	movs	r2, #0
 80112b0:	701a      	strb	r2, [r3, #0]
					break;
 80112b2:	f001 b886 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80112b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80112ba:	4613      	mov	r3, r2
 80112bc:	00db      	lsls	r3, r3, #3
 80112be:	1a9b      	subs	r3, r3, r2
 80112c0:	461a      	mov	r2, r3
 80112c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c4:	4413      	add	r3, r2
 80112c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80112c8:	2301      	movs	r3, #1
 80112ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112ce:	e016      	b.n	80112fe <readCanToStructs+0x532>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80112d0:	4b4b      	ldr	r3, [pc, #300]	; (8011400 <readCanToStructs+0x634>)
 80112d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112d6:	885b      	ldrh	r3, [r3, #2]
 80112d8:	461a      	mov	r2, r3
 80112da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112de:	4948      	ldr	r1, [pc, #288]	; (8011400 <readCanToStructs+0x634>)
 80112e0:	0112      	lsls	r2, r2, #4
 80112e2:	440a      	add	r2, r1
 80112e4:	4413      	add	r3, r2
 80112e6:	3304      	adds	r3, #4
 80112e8:	781a      	ldrb	r2, [r3, #0]
 80112ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112ec:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80112ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f0:	3301      	adds	r3, #1
 80112f2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80112f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80112f8:	3301      	adds	r3, #1
 80112fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80112fe:	4b40      	ldr	r3, [pc, #256]	; (8011400 <readCanToStructs+0x634>)
 8011300:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011304:	885b      	ldrh	r3, [r3, #2]
 8011306:	4a3e      	ldr	r2, [pc, #248]	; (8011400 <readCanToStructs+0x634>)
 8011308:	011b      	lsls	r3, r3, #4
 801130a:	4413      	add	r3, r2
 801130c:	330c      	adds	r3, #12
 801130e:	781b      	ldrb	r3, [r3, #0]
 8011310:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011314:	429a      	cmp	r2, r3
 8011316:	d3db      	bcc.n	80112d0 <readCanToStructs+0x504>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011318:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801131c:	4a39      	ldr	r2, [pc, #228]	; (8011404 <readCanToStructs+0x638>)
 801131e:	f240 4116 	movw	r1, #1046	; 0x416
 8011322:	fb01 f303 	mul.w	r3, r1, r3
 8011326:	4413      	add	r3, r2
 8011328:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	461a      	mov	r2, r3
 8011330:	4613      	mov	r3, r2
 8011332:	00db      	lsls	r3, r3, #3
 8011334:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8011336:	4b32      	ldr	r3, [pc, #200]	; (8011400 <readCanToStructs+0x634>)
 8011338:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801133c:	885b      	ldrh	r3, [r3, #2]
 801133e:	4930      	ldr	r1, [pc, #192]	; (8011400 <readCanToStructs+0x634>)
 8011340:	011b      	lsls	r3, r3, #4
 8011342:	440b      	add	r3, r1
 8011344:	330c      	adds	r3, #12
 8011346:	781b      	ldrb	r3, [r3, #0]
 8011348:	3b01      	subs	r3, #1
 801134a:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801134c:	2b17      	cmp	r3, #23
 801134e:	d932      	bls.n	80113b6 <readCanToStructs+0x5ea>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011350:	4b31      	ldr	r3, [pc, #196]	; (8011418 <readCanToStructs+0x64c>)
 8011352:	781b      	ldrb	r3, [r3, #0]
 8011354:	461a      	mov	r2, r3
 8011356:	4613      	mov	r3, r2
 8011358:	005b      	lsls	r3, r3, #1
 801135a:	4413      	add	r3, r2
 801135c:	00db      	lsls	r3, r3, #3
 801135e:	4a30      	ldr	r2, [pc, #192]	; (8011420 <readCanToStructs+0x654>)
 8011360:	4413      	add	r3, r2
 8011362:	2218      	movs	r2, #24
 8011364:	492c      	ldr	r1, [pc, #176]	; (8011418 <readCanToStructs+0x64c>)
 8011366:	4618      	mov	r0, r3
 8011368:	f014 fa68 	bl	802583c <memcpy>
					if(Debug_flag == 1)
 801136c:	4b28      	ldr	r3, [pc, #160]	; (8011410 <readCanToStructs+0x644>)
 801136e:	781b      	ldrb	r3, [r3, #0]
 8011370:	2b01      	cmp	r3, #1
 8011372:	d105      	bne.n	8011380 <readCanToStructs+0x5b4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011374:	4b28      	ldr	r3, [pc, #160]	; (8011418 <readCanToStructs+0x64c>)
 8011376:	781b      	ldrb	r3, [r3, #0]
 8011378:	4619      	mov	r1, r3
 801137a:	482a      	ldr	r0, [pc, #168]	; (8011424 <readCanToStructs+0x658>)
 801137c:	f014 fb6e 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8011380:	4b29      	ldr	r3, [pc, #164]	; (8011428 <readCanToStructs+0x65c>)
 8011382:	2201      	movs	r2, #1
 8011384:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011386:	f007 fc53 	bl	8018c30 <HAL_GetTick>
 801138a:	4603      	mov	r3, r0
 801138c:	4a27      	ldr	r2, [pc, #156]	; (801142c <readCanToStructs+0x660>)
 801138e:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011390:	4b21      	ldr	r3, [pc, #132]	; (8011418 <readCanToStructs+0x64c>)
 8011392:	781b      	ldrb	r3, [r3, #0]
 8011394:	4618      	mov	r0, r3
 8011396:	f7f7 f9b5 	bl	8008704 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801139a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801139e:	4a19      	ldr	r2, [pc, #100]	; (8011404 <readCanToStructs+0x638>)
 80113a0:	f240 4116 	movw	r1, #1046	; 0x416
 80113a4:	fb01 f303 	mul.w	r3, r1, r3
 80113a8:	4413      	add	r3, r2
 80113aa:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80113ae:	2200      	movs	r2, #0
 80113b0:	701a      	strb	r2, [r3, #0]
				break;
 80113b2:	f001 b806 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80113b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113ba:	4a12      	ldr	r2, [pc, #72]	; (8011404 <readCanToStructs+0x638>)
 80113bc:	f240 4116 	movw	r1, #1046	; 0x416
 80113c0:	fb01 f303 	mul.w	r3, r1, r3
 80113c4:	4413      	add	r3, r2
 80113c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80113ca:	2201      	movs	r2, #1
 80113cc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80113ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113d2:	490c      	ldr	r1, [pc, #48]	; (8011404 <readCanToStructs+0x638>)
 80113d4:	f240 4216 	movw	r2, #1046	; 0x416
 80113d8:	fb03 f202 	mul.w	r2, r3, r2
 80113dc:	440a      	add	r2, r1
 80113de:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80113e2:	7812      	ldrb	r2, [r2, #0]
 80113e4:	3201      	adds	r2, #1
 80113e6:	b2d0      	uxtb	r0, r2
 80113e8:	4a06      	ldr	r2, [pc, #24]	; (8011404 <readCanToStructs+0x638>)
 80113ea:	f240 4116 	movw	r1, #1046	; 0x416
 80113ee:	fb01 f303 	mul.w	r3, r1, r3
 80113f2:	4413      	add	r3, r2
 80113f4:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80113f8:	4602      	mov	r2, r0
 80113fa:	701a      	strb	r2, [r3, #0]
				break;
 80113fc:	f000 bfe1 	b.w	80123c2 <readCanToStructs+0x15f6>
 8011400:	2000719c 	.word	0x2000719c
 8011404:	20006970 	.word	0x20006970
 8011408:	20003f10 	.word	0x20003f10
 801140c:	20003f18 	.word	0x20003f18
 8011410:	20000bbb 	.word	0x20000bbb
 8011414:	0802a2ec 	.word	0x0802a2ec
 8011418:	20002f9c 	.word	0x20002f9c
 801141c:	0802a304 	.word	0x0802a304
 8011420:	20002e94 	.word	0x20002e94
 8011424:	0802a328 	.word	0x0802a328
 8011428:	2000030b 	.word	0x2000030b
 801142c:	200024b4 	.word	0x200024b4
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8011430:	4b9f      	ldr	r3, [pc, #636]	; (80116b0 <readCanToStructs+0x8e4>)
 8011432:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011434:	4b9f      	ldr	r3, [pc, #636]	; (80116b4 <readCanToStructs+0x8e8>)
 8011436:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801143a:	885b      	ldrh	r3, [r3, #2]
 801143c:	4a9d      	ldr	r2, [pc, #628]	; (80116b4 <readCanToStructs+0x8e8>)
 801143e:	011b      	lsls	r3, r3, #4
 8011440:	4413      	add	r3, r2
 8011442:	3304      	adds	r3, #4
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801144a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801144e:	2b00      	cmp	r3, #0
 8011450:	d110      	bne.n	8011474 <readCanToStructs+0x6a8>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011452:	2218      	movs	r2, #24
 8011454:	2100      	movs	r1, #0
 8011456:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011458:	f014 fa18 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801145c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011460:	4a95      	ldr	r2, [pc, #596]	; (80116b8 <readCanToStructs+0x8ec>)
 8011462:	f240 4116 	movw	r1, #1046	; 0x416
 8011466:	fb01 f303 	mul.w	r3, r1, r3
 801146a:	4413      	add	r3, r2
 801146c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011470:	2200      	movs	r2, #0
 8011472:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011474:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011478:	4a8f      	ldr	r2, [pc, #572]	; (80116b8 <readCanToStructs+0x8ec>)
 801147a:	f240 4116 	movw	r1, #1046	; 0x416
 801147e:	fb01 f303 	mul.w	r3, r1, r3
 8011482:	4413      	add	r3, r2
 8011484:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011488:	781b      	ldrb	r3, [r3, #0]
 801148a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801148e:	429a      	cmp	r2, r3
 8011490:	d015      	beq.n	80114be <readCanToStructs+0x6f2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011492:	488a      	ldr	r0, [pc, #552]	; (80116bc <readCanToStructs+0x8f0>)
 8011494:	f014 fb7e 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011498:	2218      	movs	r2, #24
 801149a:	2100      	movs	r1, #0
 801149c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801149e:	f014 f9f5 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80114a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114a6:	4a84      	ldr	r2, [pc, #528]	; (80116b8 <readCanToStructs+0x8ec>)
 80114a8:	f240 4116 	movw	r1, #1046	; 0x416
 80114ac:	fb01 f303 	mul.w	r3, r1, r3
 80114b0:	4413      	add	r3, r2
 80114b2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80114b6:	2200      	movs	r2, #0
 80114b8:	701a      	strb	r2, [r3, #0]
					break;
 80114ba:	f000 bf82 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80114be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114c2:	4613      	mov	r3, r2
 80114c4:	00db      	lsls	r3, r3, #3
 80114c6:	1a9b      	subs	r3, r3, r2
 80114c8:	461a      	mov	r2, r3
 80114ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114cc:	4413      	add	r3, r2
 80114ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80114d0:	2301      	movs	r3, #1
 80114d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80114d6:	e016      	b.n	8011506 <readCanToStructs+0x73a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80114d8:	4b76      	ldr	r3, [pc, #472]	; (80116b4 <readCanToStructs+0x8e8>)
 80114da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114de:	885b      	ldrh	r3, [r3, #2]
 80114e0:	461a      	mov	r2, r3
 80114e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80114e6:	4973      	ldr	r1, [pc, #460]	; (80116b4 <readCanToStructs+0x8e8>)
 80114e8:	0112      	lsls	r2, r2, #4
 80114ea:	440a      	add	r2, r1
 80114ec:	4413      	add	r3, r2
 80114ee:	3304      	adds	r3, #4
 80114f0:	781a      	ldrb	r2, [r3, #0]
 80114f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80114f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80114f8:	3301      	adds	r3, #1
 80114fa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80114fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011500:	3301      	adds	r3, #1
 8011502:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011506:	4b6b      	ldr	r3, [pc, #428]	; (80116b4 <readCanToStructs+0x8e8>)
 8011508:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801150c:	885b      	ldrh	r3, [r3, #2]
 801150e:	4a69      	ldr	r2, [pc, #420]	; (80116b4 <readCanToStructs+0x8e8>)
 8011510:	011b      	lsls	r3, r3, #4
 8011512:	4413      	add	r3, r2
 8011514:	330c      	adds	r3, #12
 8011516:	781b      	ldrb	r3, [r3, #0]
 8011518:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801151c:	429a      	cmp	r2, r3
 801151e:	d3db      	bcc.n	80114d8 <readCanToStructs+0x70c>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011524:	4a64      	ldr	r2, [pc, #400]	; (80116b8 <readCanToStructs+0x8ec>)
 8011526:	f240 4116 	movw	r1, #1046	; 0x416
 801152a:	fb01 f303 	mul.w	r3, r1, r3
 801152e:	4413      	add	r3, r2
 8011530:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011534:	781b      	ldrb	r3, [r3, #0]
 8011536:	461a      	mov	r2, r3
 8011538:	4613      	mov	r3, r2
 801153a:	00db      	lsls	r3, r3, #3
 801153c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801153e:	4b5d      	ldr	r3, [pc, #372]	; (80116b4 <readCanToStructs+0x8e8>)
 8011540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011544:	885b      	ldrh	r3, [r3, #2]
 8011546:	495b      	ldr	r1, [pc, #364]	; (80116b4 <readCanToStructs+0x8e8>)
 8011548:	011b      	lsls	r3, r3, #4
 801154a:	440b      	add	r3, r1
 801154c:	330c      	adds	r3, #12
 801154e:	781b      	ldrb	r3, [r3, #0]
 8011550:	3b01      	subs	r3, #1
 8011552:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011554:	2b17      	cmp	r3, #23
 8011556:	d932      	bls.n	80115be <readCanToStructs+0x7f2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011558:	4b55      	ldr	r3, [pc, #340]	; (80116b0 <readCanToStructs+0x8e4>)
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	461a      	mov	r2, r3
 801155e:	4613      	mov	r3, r2
 8011560:	005b      	lsls	r3, r3, #1
 8011562:	4413      	add	r3, r2
 8011564:	00db      	lsls	r3, r3, #3
 8011566:	4a56      	ldr	r2, [pc, #344]	; (80116c0 <readCanToStructs+0x8f4>)
 8011568:	4413      	add	r3, r2
 801156a:	2218      	movs	r2, #24
 801156c:	4950      	ldr	r1, [pc, #320]	; (80116b0 <readCanToStructs+0x8e4>)
 801156e:	4618      	mov	r0, r3
 8011570:	f014 f964 	bl	802583c <memcpy>
					if(Debug_flag == 1)
 8011574:	4b53      	ldr	r3, [pc, #332]	; (80116c4 <readCanToStructs+0x8f8>)
 8011576:	781b      	ldrb	r3, [r3, #0]
 8011578:	2b01      	cmp	r3, #1
 801157a:	d105      	bne.n	8011588 <readCanToStructs+0x7bc>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801157c:	4b4c      	ldr	r3, [pc, #304]	; (80116b0 <readCanToStructs+0x8e4>)
 801157e:	781b      	ldrb	r3, [r3, #0]
 8011580:	4619      	mov	r1, r3
 8011582:	4851      	ldr	r0, [pc, #324]	; (80116c8 <readCanToStructs+0x8fc>)
 8011584:	f014 fa6a 	bl	8025a5c <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011588:	f007 fb52 	bl	8018c30 <HAL_GetTick>
 801158c:	4603      	mov	r3, r0
 801158e:	4a4f      	ldr	r2, [pc, #316]	; (80116cc <readCanToStructs+0x900>)
 8011590:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8011592:	4b4f      	ldr	r3, [pc, #316]	; (80116d0 <readCanToStructs+0x904>)
 8011594:	2201      	movs	r2, #1
 8011596:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011598:	4b45      	ldr	r3, [pc, #276]	; (80116b0 <readCanToStructs+0x8e4>)
 801159a:	781b      	ldrb	r3, [r3, #0]
 801159c:	4618      	mov	r0, r3
 801159e:	f7f7 f8b1 	bl	8008704 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80115a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115a6:	4a44      	ldr	r2, [pc, #272]	; (80116b8 <readCanToStructs+0x8ec>)
 80115a8:	f240 4116 	movw	r1, #1046	; 0x416
 80115ac:	fb01 f303 	mul.w	r3, r1, r3
 80115b0:	4413      	add	r3, r2
 80115b2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80115b6:	2200      	movs	r2, #0
 80115b8:	701a      	strb	r2, [r3, #0]
				break;
 80115ba:	f000 bf02 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80115be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115c2:	4a3d      	ldr	r2, [pc, #244]	; (80116b8 <readCanToStructs+0x8ec>)
 80115c4:	f240 4116 	movw	r1, #1046	; 0x416
 80115c8:	fb01 f303 	mul.w	r3, r1, r3
 80115cc:	4413      	add	r3, r2
 80115ce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80115d2:	2201      	movs	r2, #1
 80115d4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80115d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115da:	4937      	ldr	r1, [pc, #220]	; (80116b8 <readCanToStructs+0x8ec>)
 80115dc:	f240 4216 	movw	r2, #1046	; 0x416
 80115e0:	fb03 f202 	mul.w	r2, r3, r2
 80115e4:	440a      	add	r2, r1
 80115e6:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80115ea:	7812      	ldrb	r2, [r2, #0]
 80115ec:	3201      	adds	r2, #1
 80115ee:	b2d0      	uxtb	r0, r2
 80115f0:	4a31      	ldr	r2, [pc, #196]	; (80116b8 <readCanToStructs+0x8ec>)
 80115f2:	f240 4116 	movw	r1, #1046	; 0x416
 80115f6:	fb01 f303 	mul.w	r3, r1, r3
 80115fa:	4413      	add	r3, r2
 80115fc:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011600:	4602      	mov	r2, r0
 8011602:	701a      	strb	r2, [r3, #0]
				break;
 8011604:	f000 bedd 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011608:	4b32      	ldr	r3, [pc, #200]	; (80116d4 <readCanToStructs+0x908>)
 801160a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801160c:	4b29      	ldr	r3, [pc, #164]	; (80116b4 <readCanToStructs+0x8e8>)
 801160e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011612:	885b      	ldrh	r3, [r3, #2]
 8011614:	4a27      	ldr	r2, [pc, #156]	; (80116b4 <readCanToStructs+0x8e8>)
 8011616:	011b      	lsls	r3, r3, #4
 8011618:	4413      	add	r3, r2
 801161a:	3304      	adds	r3, #4
 801161c:	781b      	ldrb	r3, [r3, #0]
 801161e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011622:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011626:	2b00      	cmp	r3, #0
 8011628:	d110      	bne.n	801164c <readCanToStructs+0x880>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801162a:	2246      	movs	r2, #70	; 0x46
 801162c:	2100      	movs	r1, #0
 801162e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011630:	f014 f92c 	bl	802588c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011634:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011638:	4a1f      	ldr	r2, [pc, #124]	; (80116b8 <readCanToStructs+0x8ec>)
 801163a:	f240 4116 	movw	r1, #1046	; 0x416
 801163e:	fb01 f303 	mul.w	r3, r1, r3
 8011642:	4413      	add	r3, r2
 8011644:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011648:	2200      	movs	r2, #0
 801164a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 801164c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011650:	4a19      	ldr	r2, [pc, #100]	; (80116b8 <readCanToStructs+0x8ec>)
 8011652:	f240 4116 	movw	r1, #1046	; 0x416
 8011656:	fb01 f303 	mul.w	r3, r1, r3
 801165a:	4413      	add	r3, r2
 801165c:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011660:	781b      	ldrb	r3, [r3, #0]
 8011662:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011666:	429a      	cmp	r2, r3
 8011668:	d015      	beq.n	8011696 <readCanToStructs+0x8ca>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 801166a:	481b      	ldr	r0, [pc, #108]	; (80116d8 <readCanToStructs+0x90c>)
 801166c:	f014 fa92 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011670:	2246      	movs	r2, #70	; 0x46
 8011672:	2100      	movs	r1, #0
 8011674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011676:	f014 f909 	bl	802588c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 801167a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801167e:	4a0e      	ldr	r2, [pc, #56]	; (80116b8 <readCanToStructs+0x8ec>)
 8011680:	f240 4116 	movw	r1, #1046	; 0x416
 8011684:	fb01 f303 	mul.w	r3, r1, r3
 8011688:	4413      	add	r3, r2
 801168a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801168e:	2200      	movs	r2, #0
 8011690:	701a      	strb	r2, [r3, #0]
					break;
 8011692:	f000 be96 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011696:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801169a:	4613      	mov	r3, r2
 801169c:	00db      	lsls	r3, r3, #3
 801169e:	1a9b      	subs	r3, r3, r2
 80116a0:	461a      	mov	r2, r3
 80116a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116a4:	4413      	add	r3, r2
 80116a6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116a8:	2301      	movs	r3, #1
 80116aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80116ae:	e02c      	b.n	801170a <readCanToStructs+0x93e>
 80116b0:	20002f9c 	.word	0x20002f9c
 80116b4:	2000719c 	.word	0x2000719c
 80116b8:	20006970 	.word	0x20006970
 80116bc:	0802a338 	.word	0x0802a338
 80116c0:	20002e94 	.word	0x20002e94
 80116c4:	20000bbb 	.word	0x20000bbb
 80116c8:	0802a35c 	.word	0x0802a35c
 80116cc:	200024b4 	.word	0x200024b4
 80116d0:	2000030b 	.word	0x2000030b
 80116d4:	20003044 	.word	0x20003044
 80116d8:	0802a36c 	.word	0x0802a36c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80116dc:	4bba      	ldr	r3, [pc, #744]	; (80119c8 <readCanToStructs+0xbfc>)
 80116de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116e2:	885b      	ldrh	r3, [r3, #2]
 80116e4:	461a      	mov	r2, r3
 80116e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116ea:	49b7      	ldr	r1, [pc, #732]	; (80119c8 <readCanToStructs+0xbfc>)
 80116ec:	0112      	lsls	r2, r2, #4
 80116ee:	440a      	add	r2, r1
 80116f0:	4413      	add	r3, r2
 80116f2:	3304      	adds	r3, #4
 80116f4:	781a      	ldrb	r2, [r3, #0]
 80116f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	3301      	adds	r3, #1
 80116fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011704:	3301      	adds	r3, #1
 8011706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801170a:	4baf      	ldr	r3, [pc, #700]	; (80119c8 <readCanToStructs+0xbfc>)
 801170c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011710:	885b      	ldrh	r3, [r3, #2]
 8011712:	4aad      	ldr	r2, [pc, #692]	; (80119c8 <readCanToStructs+0xbfc>)
 8011714:	011b      	lsls	r3, r3, #4
 8011716:	4413      	add	r3, r2
 8011718:	330c      	adds	r3, #12
 801171a:	781b      	ldrb	r3, [r3, #0]
 801171c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011720:	429a      	cmp	r2, r3
 8011722:	d3db      	bcc.n	80116dc <readCanToStructs+0x910>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011728:	4aa8      	ldr	r2, [pc, #672]	; (80119cc <readCanToStructs+0xc00>)
 801172a:	f240 4116 	movw	r1, #1046	; 0x416
 801172e:	fb01 f303 	mul.w	r3, r1, r3
 8011732:	4413      	add	r3, r2
 8011734:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	461a      	mov	r2, r3
 801173c:	4613      	mov	r3, r2
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011742:	4ba1      	ldr	r3, [pc, #644]	; (80119c8 <readCanToStructs+0xbfc>)
 8011744:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011748:	885b      	ldrh	r3, [r3, #2]
 801174a:	499f      	ldr	r1, [pc, #636]	; (80119c8 <readCanToStructs+0xbfc>)
 801174c:	011b      	lsls	r3, r3, #4
 801174e:	440b      	add	r3, r1
 8011750:	330c      	adds	r3, #12
 8011752:	781b      	ldrb	r3, [r3, #0]
 8011754:	3b01      	subs	r3, #1
 8011756:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011758:	2b45      	cmp	r3, #69	; 0x45
 801175a:	d93d      	bls.n	80117d8 <readCanToStructs+0xa0c>
					if(Debug_flag == 1)
 801175c:	4b9c      	ldr	r3, [pc, #624]	; (80119d0 <readCanToStructs+0xc04>)
 801175e:	781b      	ldrb	r3, [r3, #0]
 8011760:	2b01      	cmp	r3, #1
 8011762:	d102      	bne.n	801176a <readCanToStructs+0x99e>
						printf("RCV V-Message-1\n");
 8011764:	489b      	ldr	r0, [pc, #620]	; (80119d4 <readCanToStructs+0xc08>)
 8011766:	f014 fa15 	bl	8025b94 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801176a:	2246      	movs	r2, #70	; 0x46
 801176c:	2100      	movs	r1, #0
 801176e:	489a      	ldr	r0, [pc, #616]	; (80119d8 <readCanToStructs+0xc0c>)
 8011770:	f014 f88c 	bl	802588c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011774:	4a98      	ldr	r2, [pc, #608]	; (80119d8 <readCanToStructs+0xc0c>)
 8011776:	4b99      	ldr	r3, [pc, #612]	; (80119dc <readCanToStructs+0xc10>)
 8011778:	4610      	mov	r0, r2
 801177a:	4619      	mov	r1, r3
 801177c:	2346      	movs	r3, #70	; 0x46
 801177e:	461a      	mov	r2, r3
 8011780:	f014 f85c 	bl	802583c <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011784:	4b96      	ldr	r3, [pc, #600]	; (80119e0 <readCanToStructs+0xc14>)
 8011786:	2201      	movs	r2, #1
 8011788:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 801178a:	4b93      	ldr	r3, [pc, #588]	; (80119d8 <readCanToStructs+0xc0c>)
 801178c:	881b      	ldrh	r3, [r3, #0]
 801178e:	4619      	mov	r1, r3
 8011790:	4a94      	ldr	r2, [pc, #592]	; (80119e4 <readCanToStructs+0xc18>)
 8011792:	460b      	mov	r3, r1
 8011794:	005b      	lsls	r3, r3, #1
 8011796:	440b      	add	r3, r1
 8011798:	00db      	lsls	r3, r3, #3
 801179a:	4413      	add	r3, r2
 801179c:	3304      	adds	r3, #4
 801179e:	781b      	ldrb	r3, [r3, #0]
 80117a0:	2b01      	cmp	r3, #1
 80117a2:	d00b      	beq.n	80117bc <readCanToStructs+0x9f0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80117a4:	4b8c      	ldr	r3, [pc, #560]	; (80119d8 <readCanToStructs+0xc0c>)
 80117a6:	889b      	ldrh	r3, [r3, #4]
 80117a8:	b2d9      	uxtb	r1, r3
 80117aa:	4b8b      	ldr	r3, [pc, #556]	; (80119d8 <readCanToStructs+0xc0c>)
 80117ac:	881b      	ldrh	r3, [r3, #0]
 80117ae:	b2da      	uxtb	r2, r3
 80117b0:	4b89      	ldr	r3, [pc, #548]	; (80119d8 <readCanToStructs+0xc0c>)
 80117b2:	885b      	ldrh	r3, [r3, #2]
 80117b4:	b2db      	uxtb	r3, r3
 80117b6:	488c      	ldr	r0, [pc, #560]	; (80119e8 <readCanToStructs+0xc1c>)
 80117b8:	f7f3 fb8a 	bl	8004ed0 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80117bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117c0:	4a82      	ldr	r2, [pc, #520]	; (80119cc <readCanToStructs+0xc00>)
 80117c2:	f240 4116 	movw	r1, #1046	; 0x416
 80117c6:	fb01 f303 	mul.w	r3, r1, r3
 80117ca:	4413      	add	r3, r2
 80117cc:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80117d0:	2200      	movs	r2, #0
 80117d2:	701a      	strb	r2, [r3, #0]
				break;
 80117d4:	f000 bdf5 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 80117d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117dc:	4a7b      	ldr	r2, [pc, #492]	; (80119cc <readCanToStructs+0xc00>)
 80117de:	f240 4116 	movw	r1, #1046	; 0x416
 80117e2:	fb01 f303 	mul.w	r3, r1, r3
 80117e6:	4413      	add	r3, r2
 80117e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80117ec:	2201      	movs	r2, #1
 80117ee:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 80117f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117f4:	4975      	ldr	r1, [pc, #468]	; (80119cc <readCanToStructs+0xc00>)
 80117f6:	f240 4216 	movw	r2, #1046	; 0x416
 80117fa:	fb03 f202 	mul.w	r2, r3, r2
 80117fe:	440a      	add	r2, r1
 8011800:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8011804:	7812      	ldrb	r2, [r2, #0]
 8011806:	3201      	adds	r2, #1
 8011808:	b2d0      	uxtb	r0, r2
 801180a:	4a70      	ldr	r2, [pc, #448]	; (80119cc <readCanToStructs+0xc00>)
 801180c:	f240 4116 	movw	r1, #1046	; 0x416
 8011810:	fb01 f303 	mul.w	r3, r1, r3
 8011814:	4413      	add	r3, r2
 8011816:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801181a:	4602      	mov	r2, r0
 801181c:	701a      	strb	r2, [r3, #0]
				break;
 801181e:	f000 bdd0 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011822:	4b6e      	ldr	r3, [pc, #440]	; (80119dc <readCanToStructs+0xc10>)
 8011824:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011826:	4b68      	ldr	r3, [pc, #416]	; (80119c8 <readCanToStructs+0xbfc>)
 8011828:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801182c:	885b      	ldrh	r3, [r3, #2]
 801182e:	4a66      	ldr	r2, [pc, #408]	; (80119c8 <readCanToStructs+0xbfc>)
 8011830:	011b      	lsls	r3, r3, #4
 8011832:	4413      	add	r3, r2
 8011834:	3304      	adds	r3, #4
 8011836:	781b      	ldrb	r3, [r3, #0]
 8011838:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801183c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011840:	2b00      	cmp	r3, #0
 8011842:	d110      	bne.n	8011866 <readCanToStructs+0xa9a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011844:	2246      	movs	r2, #70	; 0x46
 8011846:	2100      	movs	r1, #0
 8011848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801184a:	f014 f81f 	bl	802588c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 801184e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011852:	4a5e      	ldr	r2, [pc, #376]	; (80119cc <readCanToStructs+0xc00>)
 8011854:	f240 4116 	movw	r1, #1046	; 0x416
 8011858:	fb01 f303 	mul.w	r3, r1, r3
 801185c:	4413      	add	r3, r2
 801185e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011862:	2200      	movs	r2, #0
 8011864:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8011866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801186a:	4a58      	ldr	r2, [pc, #352]	; (80119cc <readCanToStructs+0xc00>)
 801186c:	f240 4116 	movw	r1, #1046	; 0x416
 8011870:	fb01 f303 	mul.w	r3, r1, r3
 8011874:	4413      	add	r3, r2
 8011876:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011880:	429a      	cmp	r2, r3
 8011882:	d015      	beq.n	80118b0 <readCanToStructs+0xae4>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8011884:	4859      	ldr	r0, [pc, #356]	; (80119ec <readCanToStructs+0xc20>)
 8011886:	f014 f985 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801188a:	2246      	movs	r2, #70	; 0x46
 801188c:	2100      	movs	r1, #0
 801188e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011890:	f013 fffc 	bl	802588c <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011898:	4a4c      	ldr	r2, [pc, #304]	; (80119cc <readCanToStructs+0xc00>)
 801189a:	f240 4116 	movw	r1, #1046	; 0x416
 801189e:	fb01 f303 	mul.w	r3, r1, r3
 80118a2:	4413      	add	r3, r2
 80118a4:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80118a8:	2200      	movs	r2, #0
 80118aa:	701a      	strb	r2, [r3, #0]
					break;
 80118ac:	f000 bd89 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80118b0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80118b4:	4613      	mov	r3, r2
 80118b6:	00db      	lsls	r3, r3, #3
 80118b8:	1a9b      	subs	r3, r3, r2
 80118ba:	461a      	mov	r2, r3
 80118bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118be:	4413      	add	r3, r2
 80118c0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118c2:	2301      	movs	r3, #1
 80118c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118c8:	e016      	b.n	80118f8 <readCanToStructs+0xb2c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80118ca:	4b3f      	ldr	r3, [pc, #252]	; (80119c8 <readCanToStructs+0xbfc>)
 80118cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118d0:	885b      	ldrh	r3, [r3, #2]
 80118d2:	461a      	mov	r2, r3
 80118d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118d8:	493b      	ldr	r1, [pc, #236]	; (80119c8 <readCanToStructs+0xbfc>)
 80118da:	0112      	lsls	r2, r2, #4
 80118dc:	440a      	add	r2, r1
 80118de:	4413      	add	r3, r2
 80118e0:	3304      	adds	r3, #4
 80118e2:	781a      	ldrb	r2, [r3, #0]
 80118e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118e6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80118e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ea:	3301      	adds	r3, #1
 80118ec:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118f2:	3301      	adds	r3, #1
 80118f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118f8:	4b33      	ldr	r3, [pc, #204]	; (80119c8 <readCanToStructs+0xbfc>)
 80118fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118fe:	885b      	ldrh	r3, [r3, #2]
 8011900:	4a31      	ldr	r2, [pc, #196]	; (80119c8 <readCanToStructs+0xbfc>)
 8011902:	011b      	lsls	r3, r3, #4
 8011904:	4413      	add	r3, r2
 8011906:	330c      	adds	r3, #12
 8011908:	781b      	ldrb	r3, [r3, #0]
 801190a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801190e:	429a      	cmp	r2, r3
 8011910:	d3db      	bcc.n	80118ca <readCanToStructs+0xafe>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011916:	4a2d      	ldr	r2, [pc, #180]	; (80119cc <readCanToStructs+0xc00>)
 8011918:	f240 4116 	movw	r1, #1046	; 0x416
 801191c:	fb01 f303 	mul.w	r3, r1, r3
 8011920:	4413      	add	r3, r2
 8011922:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	461a      	mov	r2, r3
 801192a:	4613      	mov	r3, r2
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011930:	4b25      	ldr	r3, [pc, #148]	; (80119c8 <readCanToStructs+0xbfc>)
 8011932:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011936:	885b      	ldrh	r3, [r3, #2]
 8011938:	4923      	ldr	r1, [pc, #140]	; (80119c8 <readCanToStructs+0xbfc>)
 801193a:	011b      	lsls	r3, r3, #4
 801193c:	440b      	add	r3, r1
 801193e:	330c      	adds	r3, #12
 8011940:	781b      	ldrb	r3, [r3, #0]
 8011942:	3b01      	subs	r3, #1
 8011944:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011946:	2b45      	cmp	r3, #69	; 0x45
 8011948:	d954      	bls.n	80119f4 <readCanToStructs+0xc28>
					if(Debug_flag == 1)
 801194a:	4b21      	ldr	r3, [pc, #132]	; (80119d0 <readCanToStructs+0xc04>)
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b01      	cmp	r3, #1
 8011950:	d102      	bne.n	8011958 <readCanToStructs+0xb8c>
						printf("RCV V-Message-2\n");
 8011952:	4827      	ldr	r0, [pc, #156]	; (80119f0 <readCanToStructs+0xc24>)
 8011954:	f014 f91e 	bl	8025b94 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011958:	2246      	movs	r2, #70	; 0x46
 801195a:	2100      	movs	r1, #0
 801195c:	481e      	ldr	r0, [pc, #120]	; (80119d8 <readCanToStructs+0xc0c>)
 801195e:	f013 ff95 	bl	802588c <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011962:	4a1d      	ldr	r2, [pc, #116]	; (80119d8 <readCanToStructs+0xc0c>)
 8011964:	4b1d      	ldr	r3, [pc, #116]	; (80119dc <readCanToStructs+0xc10>)
 8011966:	4610      	mov	r0, r2
 8011968:	4619      	mov	r1, r3
 801196a:	2346      	movs	r3, #70	; 0x46
 801196c:	461a      	mov	r2, r3
 801196e:	f013 ff65 	bl	802583c <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011972:	4b1b      	ldr	r3, [pc, #108]	; (80119e0 <readCanToStructs+0xc14>)
 8011974:	2201      	movs	r2, #1
 8011976:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8011978:	4b17      	ldr	r3, [pc, #92]	; (80119d8 <readCanToStructs+0xc0c>)
 801197a:	881b      	ldrh	r3, [r3, #0]
 801197c:	4619      	mov	r1, r3
 801197e:	4a19      	ldr	r2, [pc, #100]	; (80119e4 <readCanToStructs+0xc18>)
 8011980:	460b      	mov	r3, r1
 8011982:	005b      	lsls	r3, r3, #1
 8011984:	440b      	add	r3, r1
 8011986:	00db      	lsls	r3, r3, #3
 8011988:	4413      	add	r3, r2
 801198a:	3303      	adds	r3, #3
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	2b01      	cmp	r3, #1
 8011990:	d00b      	beq.n	80119aa <readCanToStructs+0xbde>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011992:	4b11      	ldr	r3, [pc, #68]	; (80119d8 <readCanToStructs+0xc0c>)
 8011994:	889b      	ldrh	r3, [r3, #4]
 8011996:	b2d9      	uxtb	r1, r3
 8011998:	4b0f      	ldr	r3, [pc, #60]	; (80119d8 <readCanToStructs+0xc0c>)
 801199a:	881b      	ldrh	r3, [r3, #0]
 801199c:	b2da      	uxtb	r2, r3
 801199e:	4b0e      	ldr	r3, [pc, #56]	; (80119d8 <readCanToStructs+0xc0c>)
 80119a0:	885b      	ldrh	r3, [r3, #2]
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	4810      	ldr	r0, [pc, #64]	; (80119e8 <readCanToStructs+0xc1c>)
 80119a6:	f7f3 fa93 	bl	8004ed0 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80119aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119ae:	4a07      	ldr	r2, [pc, #28]	; (80119cc <readCanToStructs+0xc00>)
 80119b0:	f240 4116 	movw	r1, #1046	; 0x416
 80119b4:	fb01 f303 	mul.w	r3, r1, r3
 80119b8:	4413      	add	r3, r2
 80119ba:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80119be:	2200      	movs	r2, #0
 80119c0:	701a      	strb	r2, [r3, #0]
				break;
 80119c2:	f000 bcfe 	b.w	80123c2 <readCanToStructs+0x15f6>
 80119c6:	bf00      	nop
 80119c8:	2000719c 	.word	0x2000719c
 80119cc:	20006970 	.word	0x20006970
 80119d0:	20000bbb 	.word	0x20000bbb
 80119d4:	0802a390 	.word	0x0802a390
 80119d8:	20002ffc 	.word	0x20002ffc
 80119dc:	20003044 	.word	0x20003044
 80119e0:	2000030b 	.word	0x2000030b
 80119e4:	20002da4 	.word	0x20002da4
 80119e8:	20003002 	.word	0x20003002
 80119ec:	0802a3a0 	.word	0x0802a3a0
 80119f0:	0802a3c4 	.word	0x0802a3c4
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 80119f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119f8:	4aa0      	ldr	r2, [pc, #640]	; (8011c7c <readCanToStructs+0xeb0>)
 80119fa:	f240 4116 	movw	r1, #1046	; 0x416
 80119fe:	fb01 f303 	mul.w	r3, r1, r3
 8011a02:	4413      	add	r3, r2
 8011a04:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8011a08:	2201      	movs	r2, #1
 8011a0a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8011a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a10:	499a      	ldr	r1, [pc, #616]	; (8011c7c <readCanToStructs+0xeb0>)
 8011a12:	f240 4216 	movw	r2, #1046	; 0x416
 8011a16:	fb03 f202 	mul.w	r2, r3, r2
 8011a1a:	440a      	add	r2, r1
 8011a1c:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8011a20:	7812      	ldrb	r2, [r2, #0]
 8011a22:	3201      	adds	r2, #1
 8011a24:	b2d0      	uxtb	r0, r2
 8011a26:	4a95      	ldr	r2, [pc, #596]	; (8011c7c <readCanToStructs+0xeb0>)
 8011a28:	f240 4116 	movw	r1, #1046	; 0x416
 8011a2c:	fb01 f303 	mul.w	r3, r1, r3
 8011a30:	4413      	add	r3, r2
 8011a32:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011a36:	4602      	mov	r2, r0
 8011a38:	701a      	strb	r2, [r3, #0]
				break;
 8011a3a:	f000 bcc2 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8011a3e:	4b90      	ldr	r3, [pc, #576]	; (8011c80 <readCanToStructs+0xeb4>)
 8011a40:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011a42:	4b90      	ldr	r3, [pc, #576]	; (8011c84 <readCanToStructs+0xeb8>)
 8011a44:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a48:	885b      	ldrh	r3, [r3, #2]
 8011a4a:	4a8e      	ldr	r2, [pc, #568]	; (8011c84 <readCanToStructs+0xeb8>)
 8011a4c:	011b      	lsls	r3, r3, #4
 8011a4e:	4413      	add	r3, r2
 8011a50:	3304      	adds	r3, #4
 8011a52:	781b      	ldrb	r3, [r3, #0]
 8011a54:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011a58:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d110      	bne.n	8011a82 <readCanToStructs+0xcb6>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011a60:	2208      	movs	r2, #8
 8011a62:	2100      	movs	r1, #0
 8011a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a66:	f013 ff11 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011a6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a6e:	4a83      	ldr	r2, [pc, #524]	; (8011c7c <readCanToStructs+0xeb0>)
 8011a70:	f240 4116 	movw	r1, #1046	; 0x416
 8011a74:	fb01 f303 	mul.w	r3, r1, r3
 8011a78:	4413      	add	r3, r2
 8011a7a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011a7e:	2200      	movs	r2, #0
 8011a80:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011a82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a86:	4a7d      	ldr	r2, [pc, #500]	; (8011c7c <readCanToStructs+0xeb0>)
 8011a88:	f240 4116 	movw	r1, #1046	; 0x416
 8011a8c:	fb01 f303 	mul.w	r3, r1, r3
 8011a90:	4413      	add	r3, r2
 8011a92:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011a96:	781b      	ldrb	r3, [r3, #0]
 8011a98:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011a9c:	429a      	cmp	r2, r3
 8011a9e:	d015      	beq.n	8011acc <readCanToStructs+0xd00>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011aa0:	4879      	ldr	r0, [pc, #484]	; (8011c88 <readCanToStructs+0xebc>)
 8011aa2:	f014 f877 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011aa6:	2208      	movs	r2, #8
 8011aa8:	2100      	movs	r1, #0
 8011aaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011aac:	f013 feee 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011ab0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ab4:	4a71      	ldr	r2, [pc, #452]	; (8011c7c <readCanToStructs+0xeb0>)
 8011ab6:	f240 4116 	movw	r1, #1046	; 0x416
 8011aba:	fb01 f303 	mul.w	r3, r1, r3
 8011abe:	4413      	add	r3, r2
 8011ac0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	701a      	strb	r2, [r3, #0]
					break;
 8011ac8:	f000 bc7b 	b.w	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011acc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	00db      	lsls	r3, r3, #3
 8011ad4:	1a9b      	subs	r3, r3, r2
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ada:	4413      	add	r3, r2
 8011adc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ade:	2301      	movs	r3, #1
 8011ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ae4:	e016      	b.n	8011b14 <readCanToStructs+0xd48>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011ae6:	4b67      	ldr	r3, [pc, #412]	; (8011c84 <readCanToStructs+0xeb8>)
 8011ae8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011aec:	885b      	ldrh	r3, [r3, #2]
 8011aee:	461a      	mov	r2, r3
 8011af0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011af4:	4963      	ldr	r1, [pc, #396]	; (8011c84 <readCanToStructs+0xeb8>)
 8011af6:	0112      	lsls	r2, r2, #4
 8011af8:	440a      	add	r2, r1
 8011afa:	4413      	add	r3, r2
 8011afc:	3304      	adds	r3, #4
 8011afe:	781a      	ldrb	r2, [r3, #0]
 8011b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b02:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b06:	3301      	adds	r3, #1
 8011b08:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b0e:	3301      	adds	r3, #1
 8011b10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b14:	4b5b      	ldr	r3, [pc, #364]	; (8011c84 <readCanToStructs+0xeb8>)
 8011b16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b1a:	885b      	ldrh	r3, [r3, #2]
 8011b1c:	4a59      	ldr	r2, [pc, #356]	; (8011c84 <readCanToStructs+0xeb8>)
 8011b1e:	011b      	lsls	r3, r3, #4
 8011b20:	4413      	add	r3, r2
 8011b22:	330c      	adds	r3, #12
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b2a:	429a      	cmp	r2, r3
 8011b2c:	d3db      	bcc.n	8011ae6 <readCanToStructs+0xd1a>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8011b2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b32:	4a52      	ldr	r2, [pc, #328]	; (8011c7c <readCanToStructs+0xeb0>)
 8011b34:	f240 4116 	movw	r1, #1046	; 0x416
 8011b38:	fb01 f303 	mul.w	r3, r1, r3
 8011b3c:	4413      	add	r3, r2
 8011b3e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011b42:	781b      	ldrb	r3, [r3, #0]
 8011b44:	461a      	mov	r2, r3
 8011b46:	4613      	mov	r3, r2
 8011b48:	00db      	lsls	r3, r3, #3
 8011b4a:	1a9a      	subs	r2, r3, r2
 8011b4c:	4b4d      	ldr	r3, [pc, #308]	; (8011c84 <readCanToStructs+0xeb8>)
 8011b4e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b52:	885b      	ldrh	r3, [r3, #2]
 8011b54:	494b      	ldr	r1, [pc, #300]	; (8011c84 <readCanToStructs+0xeb8>)
 8011b56:	011b      	lsls	r3, r3, #4
 8011b58:	440b      	add	r3, r1
 8011b5a:	330c      	adds	r3, #12
 8011b5c:	781b      	ldrb	r3, [r3, #0]
 8011b5e:	3b01      	subs	r3, #1
 8011b60:	4413      	add	r3, r2
 8011b62:	2b07      	cmp	r3, #7
 8011b64:	d913      	bls.n	8011b8e <readCanToStructs+0xdc2>
					printf("Received Fault Injection Data\n");
 8011b66:	4849      	ldr	r0, [pc, #292]	; (8011c8c <readCanToStructs+0xec0>)
 8011b68:	f014 f814 	bl	8025b94 <puts>
					Is_CAN_Exchange_happening = YES;
 8011b6c:	4b48      	ldr	r3, [pc, #288]	; (8011c90 <readCanToStructs+0xec4>)
 8011b6e:	2201      	movs	r2, #1
 8011b70:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011b72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b76:	4a41      	ldr	r2, [pc, #260]	; (8011c7c <readCanToStructs+0xeb0>)
 8011b78:	f240 4116 	movw	r1, #1046	; 0x416
 8011b7c:	fb01 f303 	mul.w	r3, r1, r3
 8011b80:	4413      	add	r3, r2
 8011b82:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011b86:	2200      	movs	r2, #0
 8011b88:	701a      	strb	r2, [r3, #0]
				break;
 8011b8a:	f000 bc1a 	b.w	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011b8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b92:	4a3a      	ldr	r2, [pc, #232]	; (8011c7c <readCanToStructs+0xeb0>)
 8011b94:	f240 4116 	movw	r1, #1046	; 0x416
 8011b98:	fb01 f303 	mul.w	r3, r1, r3
 8011b9c:	4413      	add	r3, r2
 8011b9e:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011ba2:	2201      	movs	r2, #1
 8011ba4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011baa:	4934      	ldr	r1, [pc, #208]	; (8011c7c <readCanToStructs+0xeb0>)
 8011bac:	f240 4216 	movw	r2, #1046	; 0x416
 8011bb0:	fb03 f202 	mul.w	r2, r3, r2
 8011bb4:	440a      	add	r2, r1
 8011bb6:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011bba:	7812      	ldrb	r2, [r2, #0]
 8011bbc:	3201      	adds	r2, #1
 8011bbe:	b2d0      	uxtb	r0, r2
 8011bc0:	4a2e      	ldr	r2, [pc, #184]	; (8011c7c <readCanToStructs+0xeb0>)
 8011bc2:	f240 4116 	movw	r1, #1046	; 0x416
 8011bc6:	fb01 f303 	mul.w	r3, r1, r3
 8011bca:	4413      	add	r3, r2
 8011bcc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011bd0:	4602      	mov	r2, r0
 8011bd2:	701a      	strb	r2, [r3, #0]
				break;
 8011bd4:	e3f5      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8011bd6:	4b2f      	ldr	r3, [pc, #188]	; (8011c94 <readCanToStructs+0xec8>)
 8011bd8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bda:	4b2a      	ldr	r3, [pc, #168]	; (8011c84 <readCanToStructs+0xeb8>)
 8011bdc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011be0:	885b      	ldrh	r3, [r3, #2]
 8011be2:	4a28      	ldr	r2, [pc, #160]	; (8011c84 <readCanToStructs+0xeb8>)
 8011be4:	011b      	lsls	r3, r3, #4
 8011be6:	4413      	add	r3, r2
 8011be8:	3304      	adds	r3, #4
 8011bea:	781b      	ldrb	r3, [r3, #0]
 8011bec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011bf0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d110      	bne.n	8011c1a <readCanToStructs+0xe4e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011bf8:	2214      	movs	r2, #20
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011bfe:	f013 fe45 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c06:	4a1d      	ldr	r2, [pc, #116]	; (8011c7c <readCanToStructs+0xeb0>)
 8011c08:	f240 4116 	movw	r1, #1046	; 0x416
 8011c0c:	fb01 f303 	mul.w	r3, r1, r3
 8011c10:	4413      	add	r3, r2
 8011c12:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011c16:	2200      	movs	r2, #0
 8011c18:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011c1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c1e:	4a17      	ldr	r2, [pc, #92]	; (8011c7c <readCanToStructs+0xeb0>)
 8011c20:	f240 4116 	movw	r1, #1046	; 0x416
 8011c24:	fb01 f303 	mul.w	r3, r1, r3
 8011c28:	4413      	add	r3, r2
 8011c2a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d014      	beq.n	8011c62 <readCanToStructs+0xe96>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8011c38:	4817      	ldr	r0, [pc, #92]	; (8011c98 <readCanToStructs+0xecc>)
 8011c3a:	f013 ffab 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011c3e:	2214      	movs	r2, #20
 8011c40:	2100      	movs	r1, #0
 8011c42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c44:	f013 fe22 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011c48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c4c:	4a0b      	ldr	r2, [pc, #44]	; (8011c7c <readCanToStructs+0xeb0>)
 8011c4e:	f240 4116 	movw	r1, #1046	; 0x416
 8011c52:	fb01 f303 	mul.w	r3, r1, r3
 8011c56:	4413      	add	r3, r2
 8011c58:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011c5c:	2200      	movs	r2, #0
 8011c5e:	701a      	strb	r2, [r3, #0]
					break;
 8011c60:	e3af      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011c62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011c66:	4613      	mov	r3, r2
 8011c68:	00db      	lsls	r3, r3, #3
 8011c6a:	1a9b      	subs	r3, r3, r2
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c70:	4413      	add	r3, r2
 8011c72:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c74:	2301      	movs	r3, #1
 8011c76:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c7a:	e026      	b.n	8011cca <readCanToStructs+0xefe>
 8011c7c:	20006970 	.word	0x20006970
 8011c80:	2000308c 	.word	0x2000308c
 8011c84:	2000719c 	.word	0x2000719c
 8011c88:	0802a3d4 	.word	0x0802a3d4
 8011c8c:	0802a3f4 	.word	0x0802a3f4
 8011c90:	2000030b 	.word	0x2000030b
 8011c94:	2000373c 	.word	0x2000373c
 8011c98:	0802a414 	.word	0x0802a414
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c9c:	4bb9      	ldr	r3, [pc, #740]	; (8011f84 <readCanToStructs+0x11b8>)
 8011c9e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ca2:	885b      	ldrh	r3, [r3, #2]
 8011ca4:	461a      	mov	r2, r3
 8011ca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011caa:	49b6      	ldr	r1, [pc, #728]	; (8011f84 <readCanToStructs+0x11b8>)
 8011cac:	0112      	lsls	r2, r2, #4
 8011cae:	440a      	add	r2, r1
 8011cb0:	4413      	add	r3, r2
 8011cb2:	3304      	adds	r3, #4
 8011cb4:	781a      	ldrb	r2, [r3, #0]
 8011cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cbc:	3301      	adds	r3, #1
 8011cbe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011cca:	4bae      	ldr	r3, [pc, #696]	; (8011f84 <readCanToStructs+0x11b8>)
 8011ccc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cd0:	885b      	ldrh	r3, [r3, #2]
 8011cd2:	4aac      	ldr	r2, [pc, #688]	; (8011f84 <readCanToStructs+0x11b8>)
 8011cd4:	011b      	lsls	r3, r3, #4
 8011cd6:	4413      	add	r3, r2
 8011cd8:	330c      	adds	r3, #12
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ce0:	429a      	cmp	r2, r3
 8011ce2:	d3db      	bcc.n	8011c9c <readCanToStructs+0xed0>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011ce4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ce8:	4aa7      	ldr	r2, [pc, #668]	; (8011f88 <readCanToStructs+0x11bc>)
 8011cea:	f240 4116 	movw	r1, #1046	; 0x416
 8011cee:	fb01 f303 	mul.w	r3, r1, r3
 8011cf2:	4413      	add	r3, r2
 8011cf4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011cf8:	781b      	ldrb	r3, [r3, #0]
 8011cfa:	461a      	mov	r2, r3
 8011cfc:	4613      	mov	r3, r2
 8011cfe:	00db      	lsls	r3, r3, #3
 8011d00:	1a9a      	subs	r2, r3, r2
 8011d02:	4ba0      	ldr	r3, [pc, #640]	; (8011f84 <readCanToStructs+0x11b8>)
 8011d04:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d08:	885b      	ldrh	r3, [r3, #2]
 8011d0a:	499e      	ldr	r1, [pc, #632]	; (8011f84 <readCanToStructs+0x11b8>)
 8011d0c:	011b      	lsls	r3, r3, #4
 8011d0e:	440b      	add	r3, r1
 8011d10:	330c      	adds	r3, #12
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	3b01      	subs	r3, #1
 8011d16:	4413      	add	r3, r2
 8011d18:	2b13      	cmp	r3, #19
 8011d1a:	d954      	bls.n	8011dc6 <readCanToStructs+0xffa>
					uint16_t CRC16 = 0;
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8011d20:	2300      	movs	r3, #0
 8011d22:	603b      	str	r3, [r7, #0]
 8011d24:	1d3b      	adds	r3, r7, #4
 8011d26:	2224      	movs	r2, #36	; 0x24
 8011d28:	2100      	movs	r1, #0
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f013 fdae 	bl	802588c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8011d30:	463b      	mov	r3, r7
 8011d32:	2214      	movs	r2, #20
 8011d34:	4995      	ldr	r1, [pc, #596]	; (8011f8c <readCanToStructs+0x11c0>)
 8011d36:	4618      	mov	r0, r3
 8011d38:	f013 fd80 	bl	802583c <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8011d3c:	463b      	mov	r3, r7
 8011d3e:	2214      	movs	r2, #20
 8011d40:	4619      	mov	r1, r3
 8011d42:	2000      	movs	r0, #0
 8011d44:	f003 f98c 	bl	8015060 <GetCRC16>
 8011d48:	4603      	mov	r3, r0
 8011d4a:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8011d4c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d10c      	bne.n	8011d6c <readCanToStructs+0xfa0>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d56:	4a8c      	ldr	r2, [pc, #560]	; (8011f88 <readCanToStructs+0x11bc>)
 8011d58:	f240 4116 	movw	r1, #1046	; 0x416
 8011d5c:	fb01 f303 	mul.w	r3, r1, r3
 8011d60:	4413      	add	r3, r2
 8011d62:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011d66:	2200      	movs	r2, #0
 8011d68:	701a      	strb	r2, [r3, #0]
				break;
 8011d6a:	e32a      	b.n	80123c2 <readCanToStructs+0x15f6>
						if(Debug_flag == 1)
 8011d6c:	4b88      	ldr	r3, [pc, #544]	; (8011f90 <readCanToStructs+0x11c4>)
 8011d6e:	781b      	ldrb	r3, [r3, #0]
 8011d70:	2b01      	cmp	r3, #1
 8011d72:	d10a      	bne.n	8011d8a <readCanToStructs+0xfbe>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011d74:	4b85      	ldr	r3, [pc, #532]	; (8011f8c <readCanToStructs+0x11c0>)
 8011d76:	781b      	ldrb	r3, [r3, #0]
 8011d78:	4a86      	ldr	r2, [pc, #536]	; (8011f94 <readCanToStructs+0x11c8>)
 8011d7a:	3366      	adds	r3, #102	; 0x66
 8011d7c:	009b      	lsls	r3, r3, #2
 8011d7e:	4413      	add	r3, r2
 8011d80:	685b      	ldr	r3, [r3, #4]
 8011d82:	4619      	mov	r1, r3
 8011d84:	4884      	ldr	r0, [pc, #528]	; (8011f98 <readCanToStructs+0x11cc>)
 8011d86:	f013 fe69 	bl	8025a5c <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011d8a:	4b80      	ldr	r3, [pc, #512]	; (8011f8c <readCanToStructs+0x11c0>)
 8011d8c:	781b      	ldrb	r3, [r3, #0]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	4613      	mov	r3, r2
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	4a80      	ldr	r2, [pc, #512]	; (8011f9c <readCanToStructs+0x11d0>)
 8011d9a:	4413      	add	r3, r2
 8011d9c:	2214      	movs	r2, #20
 8011d9e:	497b      	ldr	r1, [pc, #492]	; (8011f8c <readCanToStructs+0x11c0>)
 8011da0:	4618      	mov	r0, r3
 8011da2:	f013 fd4b 	bl	802583c <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011da6:	4b7e      	ldr	r3, [pc, #504]	; (8011fa0 <readCanToStructs+0x11d4>)
 8011da8:	2201      	movs	r2, #1
 8011daa:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011dac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011db0:	4a75      	ldr	r2, [pc, #468]	; (8011f88 <readCanToStructs+0x11bc>)
 8011db2:	f240 4116 	movw	r1, #1046	; 0x416
 8011db6:	fb01 f303 	mul.w	r3, r1, r3
 8011dba:	4413      	add	r3, r2
 8011dbc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011dc0:	2200      	movs	r2, #0
 8011dc2:	701a      	strb	r2, [r3, #0]
				break;
 8011dc4:	e2fd      	b.n	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8011dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dca:	4a6f      	ldr	r2, [pc, #444]	; (8011f88 <readCanToStructs+0x11bc>)
 8011dcc:	f240 4116 	movw	r1, #1046	; 0x416
 8011dd0:	fb01 f303 	mul.w	r3, r1, r3
 8011dd4:	4413      	add	r3, r2
 8011dd6:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8011dda:	2201      	movs	r2, #1
 8011ddc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011dde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011de2:	4969      	ldr	r1, [pc, #420]	; (8011f88 <readCanToStructs+0x11bc>)
 8011de4:	f240 4216 	movw	r2, #1046	; 0x416
 8011de8:	fb03 f202 	mul.w	r2, r3, r2
 8011dec:	440a      	add	r2, r1
 8011dee:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011df2:	7812      	ldrb	r2, [r2, #0]
 8011df4:	3201      	adds	r2, #1
 8011df6:	b2d0      	uxtb	r0, r2
 8011df8:	4a63      	ldr	r2, [pc, #396]	; (8011f88 <readCanToStructs+0x11bc>)
 8011dfa:	f240 4116 	movw	r1, #1046	; 0x416
 8011dfe:	fb01 f303 	mul.w	r3, r1, r3
 8011e02:	4413      	add	r3, r2
 8011e04:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011e08:	4602      	mov	r2, r0
 8011e0a:	701a      	strb	r2, [r3, #0]
				break;
 8011e0c:	e2d9      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8011e0e:	4b5f      	ldr	r3, [pc, #380]	; (8011f8c <readCanToStructs+0x11c0>)
 8011e10:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011e12:	4b5c      	ldr	r3, [pc, #368]	; (8011f84 <readCanToStructs+0x11b8>)
 8011e14:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e18:	885b      	ldrh	r3, [r3, #2]
 8011e1a:	4a5a      	ldr	r2, [pc, #360]	; (8011f84 <readCanToStructs+0x11b8>)
 8011e1c:	011b      	lsls	r3, r3, #4
 8011e1e:	4413      	add	r3, r2
 8011e20:	3304      	adds	r3, #4
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011e28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d110      	bne.n	8011e52 <readCanToStructs+0x1086>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011e30:	2214      	movs	r2, #20
 8011e32:	2100      	movs	r1, #0
 8011e34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e36:	f013 fd29 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011e3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e3e:	4a52      	ldr	r2, [pc, #328]	; (8011f88 <readCanToStructs+0x11bc>)
 8011e40:	f240 4116 	movw	r1, #1046	; 0x416
 8011e44:	fb01 f303 	mul.w	r3, r1, r3
 8011e48:	4413      	add	r3, r2
 8011e4a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011e4e:	2200      	movs	r2, #0
 8011e50:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e56:	4a4c      	ldr	r2, [pc, #304]	; (8011f88 <readCanToStructs+0x11bc>)
 8011e58:	f240 4116 	movw	r1, #1046	; 0x416
 8011e5c:	fb01 f303 	mul.w	r3, r1, r3
 8011e60:	4413      	add	r3, r2
 8011e62:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011e66:	781b      	ldrb	r3, [r3, #0]
 8011e68:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e6c:	429a      	cmp	r2, r3
 8011e6e:	d014      	beq.n	8011e9a <readCanToStructs+0x10ce>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8011e70:	484c      	ldr	r0, [pc, #304]	; (8011fa4 <readCanToStructs+0x11d8>)
 8011e72:	f013 fe8f 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011e76:	2214      	movs	r2, #20
 8011e78:	2100      	movs	r1, #0
 8011e7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e7c:	f013 fd06 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e84:	4a40      	ldr	r2, [pc, #256]	; (8011f88 <readCanToStructs+0x11bc>)
 8011e86:	f240 4116 	movw	r1, #1046	; 0x416
 8011e8a:	fb01 f303 	mul.w	r3, r1, r3
 8011e8e:	4413      	add	r3, r2
 8011e90:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011e94:	2200      	movs	r2, #0
 8011e96:	701a      	strb	r2, [r3, #0]
					break;
 8011e98:	e293      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011e9a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	00db      	lsls	r3, r3, #3
 8011ea2:	1a9b      	subs	r3, r3, r2
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea8:	4413      	add	r3, r2
 8011eaa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011eac:	2301      	movs	r3, #1
 8011eae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011eb2:	e016      	b.n	8011ee2 <readCanToStructs+0x1116>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011eb4:	4b33      	ldr	r3, [pc, #204]	; (8011f84 <readCanToStructs+0x11b8>)
 8011eb6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011eba:	885b      	ldrh	r3, [r3, #2]
 8011ebc:	461a      	mov	r2, r3
 8011ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ec2:	4930      	ldr	r1, [pc, #192]	; (8011f84 <readCanToStructs+0x11b8>)
 8011ec4:	0112      	lsls	r2, r2, #4
 8011ec6:	440a      	add	r2, r1
 8011ec8:	4413      	add	r3, r2
 8011eca:	3304      	adds	r3, #4
 8011ecc:	781a      	ldrb	r2, [r3, #0]
 8011ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ed4:	3301      	adds	r3, #1
 8011ed6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ed8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011edc:	3301      	adds	r3, #1
 8011ede:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ee2:	4b28      	ldr	r3, [pc, #160]	; (8011f84 <readCanToStructs+0x11b8>)
 8011ee4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ee8:	885b      	ldrh	r3, [r3, #2]
 8011eea:	4a26      	ldr	r2, [pc, #152]	; (8011f84 <readCanToStructs+0x11b8>)
 8011eec:	011b      	lsls	r3, r3, #4
 8011eee:	4413      	add	r3, r2
 8011ef0:	330c      	adds	r3, #12
 8011ef2:	781b      	ldrb	r3, [r3, #0]
 8011ef4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011ef8:	429a      	cmp	r2, r3
 8011efa:	d3db      	bcc.n	8011eb4 <readCanToStructs+0x10e8>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011efc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f00:	4a21      	ldr	r2, [pc, #132]	; (8011f88 <readCanToStructs+0x11bc>)
 8011f02:	f240 4116 	movw	r1, #1046	; 0x416
 8011f06:	fb01 f303 	mul.w	r3, r1, r3
 8011f0a:	4413      	add	r3, r2
 8011f0c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011f10:	781b      	ldrb	r3, [r3, #0]
 8011f12:	461a      	mov	r2, r3
 8011f14:	4613      	mov	r3, r2
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	1a9a      	subs	r2, r3, r2
 8011f1a:	4b1a      	ldr	r3, [pc, #104]	; (8011f84 <readCanToStructs+0x11b8>)
 8011f1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f20:	885b      	ldrh	r3, [r3, #2]
 8011f22:	4918      	ldr	r1, [pc, #96]	; (8011f84 <readCanToStructs+0x11b8>)
 8011f24:	011b      	lsls	r3, r3, #4
 8011f26:	440b      	add	r3, r1
 8011f28:	330c      	adds	r3, #12
 8011f2a:	781b      	ldrb	r3, [r3, #0]
 8011f2c:	3b01      	subs	r3, #1
 8011f2e:	4413      	add	r3, r2
 8011f30:	2b13      	cmp	r3, #19
 8011f32:	d966      	bls.n	8012002 <readCanToStructs+0x1236>
					uint16_t CRC16 = 0;
 8011f34:	2300      	movs	r3, #0
 8011f36:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8011f38:	2300      	movs	r3, #0
 8011f3a:	603b      	str	r3, [r7, #0]
 8011f3c:	1d3b      	adds	r3, r7, #4
 8011f3e:	2224      	movs	r2, #36	; 0x24
 8011f40:	2100      	movs	r1, #0
 8011f42:	4618      	mov	r0, r3
 8011f44:	f013 fca2 	bl	802588c <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8011f48:	463b      	mov	r3, r7
 8011f4a:	2214      	movs	r2, #20
 8011f4c:	490f      	ldr	r1, [pc, #60]	; (8011f8c <readCanToStructs+0x11c0>)
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f013 fc74 	bl	802583c <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8011f54:	463b      	mov	r3, r7
 8011f56:	2214      	movs	r2, #20
 8011f58:	4619      	mov	r1, r3
 8011f5a:	2000      	movs	r0, #0
 8011f5c:	f003 f880 	bl	8015060 <GetCRC16>
 8011f60:	4603      	mov	r3, r0
 8011f62:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8011f64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d11e      	bne.n	8011fa8 <readCanToStructs+0x11dc>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f6e:	4a06      	ldr	r2, [pc, #24]	; (8011f88 <readCanToStructs+0x11bc>)
 8011f70:	f240 4116 	movw	r1, #1046	; 0x416
 8011f74:	fb01 f303 	mul.w	r3, r1, r3
 8011f78:	4413      	add	r3, r2
 8011f7a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011f7e:	2200      	movs	r2, #0
 8011f80:	701a      	strb	r2, [r3, #0]
				break;
 8011f82:	e21e      	b.n	80123c2 <readCanToStructs+0x15f6>
 8011f84:	2000719c 	.word	0x2000719c
 8011f88:	20006970 	.word	0x20006970
 8011f8c:	2000373c 	.word	0x2000373c
 8011f90:	20000bbb 	.word	0x20000bbb
 8011f94:	20000504 	.word	0x20000504
 8011f98:	0802a430 	.word	0x0802a430
 8011f9c:	20003660 	.word	0x20003660
 8011fa0:	2000030b 	.word	0x2000030b
 8011fa4:	0802a444 	.word	0x0802a444
						if(Debug_flag == 1)
 8011fa8:	4bba      	ldr	r3, [pc, #744]	; (8012294 <readCanToStructs+0x14c8>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d10a      	bne.n	8011fc6 <readCanToStructs+0x11fa>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011fb0:	4bb9      	ldr	r3, [pc, #740]	; (8012298 <readCanToStructs+0x14cc>)
 8011fb2:	781b      	ldrb	r3, [r3, #0]
 8011fb4:	4ab9      	ldr	r2, [pc, #740]	; (801229c <readCanToStructs+0x14d0>)
 8011fb6:	3366      	adds	r3, #102	; 0x66
 8011fb8:	009b      	lsls	r3, r3, #2
 8011fba:	4413      	add	r3, r2
 8011fbc:	685b      	ldr	r3, [r3, #4]
 8011fbe:	4619      	mov	r1, r3
 8011fc0:	48b7      	ldr	r0, [pc, #732]	; (80122a0 <readCanToStructs+0x14d4>)
 8011fc2:	f013 fd4b 	bl	8025a5c <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011fc6:	4bb4      	ldr	r3, [pc, #720]	; (8012298 <readCanToStructs+0x14cc>)
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	461a      	mov	r2, r3
 8011fcc:	4613      	mov	r3, r2
 8011fce:	009b      	lsls	r3, r3, #2
 8011fd0:	4413      	add	r3, r2
 8011fd2:	009b      	lsls	r3, r3, #2
 8011fd4:	4ab3      	ldr	r2, [pc, #716]	; (80122a4 <readCanToStructs+0x14d8>)
 8011fd6:	4413      	add	r3, r2
 8011fd8:	2214      	movs	r2, #20
 8011fda:	49af      	ldr	r1, [pc, #700]	; (8012298 <readCanToStructs+0x14cc>)
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f013 fc2d 	bl	802583c <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011fe2:	4bb1      	ldr	r3, [pc, #708]	; (80122a8 <readCanToStructs+0x14dc>)
 8011fe4:	2201      	movs	r2, #1
 8011fe6:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011fe8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fec:	4aaf      	ldr	r2, [pc, #700]	; (80122ac <readCanToStructs+0x14e0>)
 8011fee:	f240 4116 	movw	r1, #1046	; 0x416
 8011ff2:	fb01 f303 	mul.w	r3, r1, r3
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011ffc:	2200      	movs	r2, #0
 8011ffe:	701a      	strb	r2, [r3, #0]
				break;
 8012000:	e1df      	b.n	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012006:	4aa9      	ldr	r2, [pc, #676]	; (80122ac <readCanToStructs+0x14e0>)
 8012008:	f240 4116 	movw	r1, #1046	; 0x416
 801200c:	fb01 f303 	mul.w	r3, r1, r3
 8012010:	4413      	add	r3, r2
 8012012:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012016:	2201      	movs	r2, #1
 8012018:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801201e:	49a3      	ldr	r1, [pc, #652]	; (80122ac <readCanToStructs+0x14e0>)
 8012020:	f240 4216 	movw	r2, #1046	; 0x416
 8012024:	fb03 f202 	mul.w	r2, r3, r2
 8012028:	440a      	add	r2, r1
 801202a:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801202e:	7812      	ldrb	r2, [r2, #0]
 8012030:	3201      	adds	r2, #1
 8012032:	b2d0      	uxtb	r0, r2
 8012034:	4a9d      	ldr	r2, [pc, #628]	; (80122ac <readCanToStructs+0x14e0>)
 8012036:	f240 4116 	movw	r1, #1046	; 0x416
 801203a:	fb01 f303 	mul.w	r3, r1, r3
 801203e:	4413      	add	r3, r2
 8012040:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012044:	4602      	mov	r2, r0
 8012046:	701a      	strb	r2, [r3, #0]
				break;
 8012048:	e1bb      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801204a:	4b99      	ldr	r3, [pc, #612]	; (80122b0 <readCanToStructs+0x14e4>)
 801204c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801204e:	4b99      	ldr	r3, [pc, #612]	; (80122b4 <readCanToStructs+0x14e8>)
 8012050:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012054:	885b      	ldrh	r3, [r3, #2]
 8012056:	4a97      	ldr	r2, [pc, #604]	; (80122b4 <readCanToStructs+0x14e8>)
 8012058:	011b      	lsls	r3, r3, #4
 801205a:	4413      	add	r3, r2
 801205c:	3304      	adds	r3, #4
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012064:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012068:	2b00      	cmp	r3, #0
 801206a:	d110      	bne.n	801208e <readCanToStructs+0x12c2>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801206c:	2202      	movs	r2, #2
 801206e:	2100      	movs	r1, #0
 8012070:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012072:	f013 fc0b 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012076:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801207a:	4a8c      	ldr	r2, [pc, #560]	; (80122ac <readCanToStructs+0x14e0>)
 801207c:	f240 4116 	movw	r1, #1046	; 0x416
 8012080:	fb01 f303 	mul.w	r3, r1, r3
 8012084:	4413      	add	r3, r2
 8012086:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801208a:	2200      	movs	r2, #0
 801208c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 801208e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012092:	4a86      	ldr	r2, [pc, #536]	; (80122ac <readCanToStructs+0x14e0>)
 8012094:	f240 4116 	movw	r1, #1046	; 0x416
 8012098:	fb01 f303 	mul.w	r3, r1, r3
 801209c:	4413      	add	r3, r2
 801209e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80120a2:	781b      	ldrb	r3, [r3, #0]
 80120a4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d014      	beq.n	80120d6 <readCanToStructs+0x130a>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80120ac:	4882      	ldr	r0, [pc, #520]	; (80122b8 <readCanToStructs+0x14ec>)
 80120ae:	f013 fd71 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80120b2:	2202      	movs	r2, #2
 80120b4:	2100      	movs	r1, #0
 80120b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120b8:	f013 fbe8 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80120bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c0:	4a7a      	ldr	r2, [pc, #488]	; (80122ac <readCanToStructs+0x14e0>)
 80120c2:	f240 4116 	movw	r1, #1046	; 0x416
 80120c6:	fb01 f303 	mul.w	r3, r1, r3
 80120ca:	4413      	add	r3, r2
 80120cc:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80120d0:	2200      	movs	r2, #0
 80120d2:	701a      	strb	r2, [r3, #0]
					break;
 80120d4:	e175      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80120d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120da:	4613      	mov	r3, r2
 80120dc:	00db      	lsls	r3, r3, #3
 80120de:	1a9b      	subs	r3, r3, r2
 80120e0:	461a      	mov	r2, r3
 80120e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e4:	4413      	add	r3, r2
 80120e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120e8:	2301      	movs	r3, #1
 80120ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120ee:	e016      	b.n	801211e <readCanToStructs+0x1352>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80120f0:	4b70      	ldr	r3, [pc, #448]	; (80122b4 <readCanToStructs+0x14e8>)
 80120f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120f6:	885b      	ldrh	r3, [r3, #2]
 80120f8:	461a      	mov	r2, r3
 80120fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120fe:	496d      	ldr	r1, [pc, #436]	; (80122b4 <readCanToStructs+0x14e8>)
 8012100:	0112      	lsls	r2, r2, #4
 8012102:	440a      	add	r2, r1
 8012104:	4413      	add	r3, r2
 8012106:	3304      	adds	r3, #4
 8012108:	781a      	ldrb	r2, [r3, #0]
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	3301      	adds	r3, #1
 8012112:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012114:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012118:	3301      	adds	r3, #1
 801211a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801211e:	4b65      	ldr	r3, [pc, #404]	; (80122b4 <readCanToStructs+0x14e8>)
 8012120:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012124:	885b      	ldrh	r3, [r3, #2]
 8012126:	4a63      	ldr	r2, [pc, #396]	; (80122b4 <readCanToStructs+0x14e8>)
 8012128:	011b      	lsls	r3, r3, #4
 801212a:	4413      	add	r3, r2
 801212c:	330c      	adds	r3, #12
 801212e:	781b      	ldrb	r3, [r3, #0]
 8012130:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012134:	429a      	cmp	r2, r3
 8012136:	d3db      	bcc.n	80120f0 <readCanToStructs+0x1324>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8012138:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801213c:	4a5b      	ldr	r2, [pc, #364]	; (80122ac <readCanToStructs+0x14e0>)
 801213e:	f240 4116 	movw	r1, #1046	; 0x416
 8012142:	fb01 f303 	mul.w	r3, r1, r3
 8012146:	4413      	add	r3, r2
 8012148:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801214c:	781b      	ldrb	r3, [r3, #0]
 801214e:	461a      	mov	r2, r3
 8012150:	4613      	mov	r3, r2
 8012152:	00db      	lsls	r3, r3, #3
 8012154:	1a9a      	subs	r2, r3, r2
 8012156:	4b57      	ldr	r3, [pc, #348]	; (80122b4 <readCanToStructs+0x14e8>)
 8012158:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801215c:	885b      	ldrh	r3, [r3, #2]
 801215e:	4955      	ldr	r1, [pc, #340]	; (80122b4 <readCanToStructs+0x14e8>)
 8012160:	011b      	lsls	r3, r3, #4
 8012162:	440b      	add	r3, r1
 8012164:	330c      	adds	r3, #12
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	3b01      	subs	r3, #1
 801216a:	4413      	add	r3, r2
 801216c:	2b01      	cmp	r3, #1
 801216e:	d919      	bls.n	80121a4 <readCanToStructs+0x13d8>
					if(Debug_flag == 1)
 8012170:	4b48      	ldr	r3, [pc, #288]	; (8012294 <readCanToStructs+0x14c8>)
 8012172:	781b      	ldrb	r3, [r3, #0]
 8012174:	2b01      	cmp	r3, #1
 8012176:	d105      	bne.n	8012184 <readCanToStructs+0x13b8>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8012178:	4b4d      	ldr	r3, [pc, #308]	; (80122b0 <readCanToStructs+0x14e4>)
 801217a:	881b      	ldrh	r3, [r3, #0]
 801217c:	4619      	mov	r1, r3
 801217e:	484f      	ldr	r0, [pc, #316]	; (80122bc <readCanToStructs+0x14f0>)
 8012180:	f013 fc6c 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012184:	4b48      	ldr	r3, [pc, #288]	; (80122a8 <readCanToStructs+0x14dc>)
 8012186:	2201      	movs	r2, #1
 8012188:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801218a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801218e:	4a47      	ldr	r2, [pc, #284]	; (80122ac <readCanToStructs+0x14e0>)
 8012190:	f240 4116 	movw	r1, #1046	; 0x416
 8012194:	fb01 f303 	mul.w	r3, r1, r3
 8012198:	4413      	add	r3, r2
 801219a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801219e:	2200      	movs	r2, #0
 80121a0:	701a      	strb	r2, [r3, #0]
				break;
 80121a2:	e10e      	b.n	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80121a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121a8:	4a40      	ldr	r2, [pc, #256]	; (80122ac <readCanToStructs+0x14e0>)
 80121aa:	f240 4116 	movw	r1, #1046	; 0x416
 80121ae:	fb01 f303 	mul.w	r3, r1, r3
 80121b2:	4413      	add	r3, r2
 80121b4:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80121b8:	2201      	movs	r2, #1
 80121ba:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80121bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121c0:	493a      	ldr	r1, [pc, #232]	; (80122ac <readCanToStructs+0x14e0>)
 80121c2:	f240 4216 	movw	r2, #1046	; 0x416
 80121c6:	fb03 f202 	mul.w	r2, r3, r2
 80121ca:	440a      	add	r2, r1
 80121cc:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80121d0:	7812      	ldrb	r2, [r2, #0]
 80121d2:	3201      	adds	r2, #1
 80121d4:	b2d0      	uxtb	r0, r2
 80121d6:	4a35      	ldr	r2, [pc, #212]	; (80122ac <readCanToStructs+0x14e0>)
 80121d8:	f240 4116 	movw	r1, #1046	; 0x416
 80121dc:	fb01 f303 	mul.w	r3, r1, r3
 80121e0:	4413      	add	r3, r2
 80121e2:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80121e6:	4602      	mov	r2, r0
 80121e8:	701a      	strb	r2, [r3, #0]
				break;
 80121ea:	e0ea      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80121ec:	4b30      	ldr	r3, [pc, #192]	; (80122b0 <readCanToStructs+0x14e4>)
 80121ee:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80121f0:	4b30      	ldr	r3, [pc, #192]	; (80122b4 <readCanToStructs+0x14e8>)
 80121f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121f6:	885b      	ldrh	r3, [r3, #2]
 80121f8:	4a2e      	ldr	r2, [pc, #184]	; (80122b4 <readCanToStructs+0x14e8>)
 80121fa:	011b      	lsls	r3, r3, #4
 80121fc:	4413      	add	r3, r2
 80121fe:	3304      	adds	r3, #4
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012206:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801220a:	2b00      	cmp	r3, #0
 801220c:	d110      	bne.n	8012230 <readCanToStructs+0x1464>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801220e:	2202      	movs	r2, #2
 8012210:	2100      	movs	r1, #0
 8012212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012214:	f013 fb3a 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012218:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801221c:	4a23      	ldr	r2, [pc, #140]	; (80122ac <readCanToStructs+0x14e0>)
 801221e:	f240 4116 	movw	r1, #1046	; 0x416
 8012222:	fb01 f303 	mul.w	r3, r1, r3
 8012226:	4413      	add	r3, r2
 8012228:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801222c:	2200      	movs	r2, #0
 801222e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8012230:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012234:	4a1d      	ldr	r2, [pc, #116]	; (80122ac <readCanToStructs+0x14e0>)
 8012236:	f240 4116 	movw	r1, #1046	; 0x416
 801223a:	fb01 f303 	mul.w	r3, r1, r3
 801223e:	4413      	add	r3, r2
 8012240:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012244:	781b      	ldrb	r3, [r3, #0]
 8012246:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801224a:	429a      	cmp	r2, r3
 801224c:	d014      	beq.n	8012278 <readCanToStructs+0x14ac>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 801224e:	481c      	ldr	r0, [pc, #112]	; (80122c0 <readCanToStructs+0x14f4>)
 8012250:	f013 fca0 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012254:	2202      	movs	r2, #2
 8012256:	2100      	movs	r1, #0
 8012258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801225a:	f013 fb17 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801225e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012262:	4a12      	ldr	r2, [pc, #72]	; (80122ac <readCanToStructs+0x14e0>)
 8012264:	f240 4116 	movw	r1, #1046	; 0x416
 8012268:	fb01 f303 	mul.w	r3, r1, r3
 801226c:	4413      	add	r3, r2
 801226e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012272:	2200      	movs	r2, #0
 8012274:	701a      	strb	r2, [r3, #0]
					break;
 8012276:	e0a4      	b.n	80123c2 <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012278:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801227c:	4613      	mov	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	1a9b      	subs	r3, r3, r2
 8012282:	461a      	mov	r2, r3
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	4413      	add	r3, r2
 8012288:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801228a:	2301      	movs	r3, #1
 801228c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012290:	e02f      	b.n	80122f2 <readCanToStructs+0x1526>
 8012292:	bf00      	nop
 8012294:	20000bbb 	.word	0x20000bbb
 8012298:	2000373c 	.word	0x2000373c
 801229c:	20000504 	.word	0x20000504
 80122a0:	0802a464 	.word	0x0802a464
 80122a4:	20003660 	.word	0x20003660
 80122a8:	2000030b 	.word	0x2000030b
 80122ac:	20006970 	.word	0x20006970
 80122b0:	20000bb8 	.word	0x20000bb8
 80122b4:	2000719c 	.word	0x2000719c
 80122b8:	0802a478 	.word	0x0802a478
 80122bc:	0802a4a0 	.word	0x0802a4a0
 80122c0:	0802a4b4 	.word	0x0802a4b4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80122c4:	4b9f      	ldr	r3, [pc, #636]	; (8012544 <readCanToStructs+0x1778>)
 80122c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122ca:	885b      	ldrh	r3, [r3, #2]
 80122cc:	461a      	mov	r2, r3
 80122ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122d2:	499c      	ldr	r1, [pc, #624]	; (8012544 <readCanToStructs+0x1778>)
 80122d4:	0112      	lsls	r2, r2, #4
 80122d6:	440a      	add	r2, r1
 80122d8:	4413      	add	r3, r2
 80122da:	3304      	adds	r3, #4
 80122dc:	781a      	ldrb	r2, [r3, #0]
 80122de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80122e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e4:	3301      	adds	r3, #1
 80122e6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80122e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122ec:	3301      	adds	r3, #1
 80122ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122f2:	4b94      	ldr	r3, [pc, #592]	; (8012544 <readCanToStructs+0x1778>)
 80122f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122f8:	885b      	ldrh	r3, [r3, #2]
 80122fa:	4a92      	ldr	r2, [pc, #584]	; (8012544 <readCanToStructs+0x1778>)
 80122fc:	011b      	lsls	r3, r3, #4
 80122fe:	4413      	add	r3, r2
 8012300:	330c      	adds	r3, #12
 8012302:	781b      	ldrb	r3, [r3, #0]
 8012304:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012308:	429a      	cmp	r2, r3
 801230a:	d3db      	bcc.n	80122c4 <readCanToStructs+0x14f8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801230c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012310:	4a8d      	ldr	r2, [pc, #564]	; (8012548 <readCanToStructs+0x177c>)
 8012312:	f240 4116 	movw	r1, #1046	; 0x416
 8012316:	fb01 f303 	mul.w	r3, r1, r3
 801231a:	4413      	add	r3, r2
 801231c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	461a      	mov	r2, r3
 8012324:	4613      	mov	r3, r2
 8012326:	00db      	lsls	r3, r3, #3
 8012328:	1a9a      	subs	r2, r3, r2
 801232a:	4b86      	ldr	r3, [pc, #536]	; (8012544 <readCanToStructs+0x1778>)
 801232c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012330:	885b      	ldrh	r3, [r3, #2]
 8012332:	4984      	ldr	r1, [pc, #528]	; (8012544 <readCanToStructs+0x1778>)
 8012334:	011b      	lsls	r3, r3, #4
 8012336:	440b      	add	r3, r1
 8012338:	330c      	adds	r3, #12
 801233a:	781b      	ldrb	r3, [r3, #0]
 801233c:	3b01      	subs	r3, #1
 801233e:	4413      	add	r3, r2
 8012340:	2b01      	cmp	r3, #1
 8012342:	d919      	bls.n	8012378 <readCanToStructs+0x15ac>
					if(Debug_flag == 1)
 8012344:	4b81      	ldr	r3, [pc, #516]	; (801254c <readCanToStructs+0x1780>)
 8012346:	781b      	ldrb	r3, [r3, #0]
 8012348:	2b01      	cmp	r3, #1
 801234a:	d105      	bne.n	8012358 <readCanToStructs+0x158c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801234c:	4b80      	ldr	r3, [pc, #512]	; (8012550 <readCanToStructs+0x1784>)
 801234e:	881b      	ldrh	r3, [r3, #0]
 8012350:	4619      	mov	r1, r3
 8012352:	4880      	ldr	r0, [pc, #512]	; (8012554 <readCanToStructs+0x1788>)
 8012354:	f013 fb82 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012358:	4b7f      	ldr	r3, [pc, #508]	; (8012558 <readCanToStructs+0x178c>)
 801235a:	2201      	movs	r2, #1
 801235c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801235e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012362:	4a79      	ldr	r2, [pc, #484]	; (8012548 <readCanToStructs+0x177c>)
 8012364:	f240 4116 	movw	r1, #1046	; 0x416
 8012368:	fb01 f303 	mul.w	r3, r1, r3
 801236c:	4413      	add	r3, r2
 801236e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012372:	2200      	movs	r2, #0
 8012374:	701a      	strb	r2, [r3, #0]
				break;
 8012376:	e024      	b.n	80123c2 <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8012378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801237c:	4a72      	ldr	r2, [pc, #456]	; (8012548 <readCanToStructs+0x177c>)
 801237e:	f240 4116 	movw	r1, #1046	; 0x416
 8012382:	fb01 f303 	mul.w	r3, r1, r3
 8012386:	4413      	add	r3, r2
 8012388:	f203 4314 	addw	r3, r3, #1044	; 0x414
 801238c:	2201      	movs	r2, #1
 801238e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8012390:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012394:	496c      	ldr	r1, [pc, #432]	; (8012548 <readCanToStructs+0x177c>)
 8012396:	f240 4216 	movw	r2, #1046	; 0x416
 801239a:	fb03 f202 	mul.w	r2, r3, r2
 801239e:	440a      	add	r2, r1
 80123a0:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80123a4:	7812      	ldrb	r2, [r2, #0]
 80123a6:	3201      	adds	r2, #1
 80123a8:	b2d0      	uxtb	r0, r2
 80123aa:	4a67      	ldr	r2, [pc, #412]	; (8012548 <readCanToStructs+0x177c>)
 80123ac:	f240 4116 	movw	r1, #1046	; 0x416
 80123b0:	fb01 f303 	mul.w	r3, r1, r3
 80123b4:	4413      	add	r3, r2
 80123b6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80123ba:	4602      	mov	r2, r0
 80123bc:	701a      	strb	r2, [r3, #0]
				break;
 80123be:	e000      	b.n	80123c2 <readCanToStructs+0x15f6>
				break;
 80123c0:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80123c2:	4b60      	ldr	r3, [pc, #384]	; (8012544 <readCanToStructs+0x1778>)
 80123c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123c8:	885b      	ldrh	r3, [r3, #2]
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	4a5d      	ldr	r2, [pc, #372]	; (8012544 <readCanToStructs+0x1778>)
 80123ce:	4413      	add	r3, r2
 80123d0:	2210      	movs	r2, #16
 80123d2:	2100      	movs	r1, #0
 80123d4:	4618      	mov	r0, r3
 80123d6:	f013 fa59 	bl	802588c <memset>
			canRead.Out++;
 80123da:	4b5a      	ldr	r3, [pc, #360]	; (8012544 <readCanToStructs+0x1778>)
 80123dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123e0:	885b      	ldrh	r3, [r3, #2]
 80123e2:	3301      	adds	r3, #1
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	4b57      	ldr	r3, [pc, #348]	; (8012544 <readCanToStructs+0x1778>)
 80123e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123ec:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80123ee:	4b55      	ldr	r3, [pc, #340]	; (8012544 <readCanToStructs+0x1778>)
 80123f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123f4:	885b      	ldrh	r3, [r3, #2]
 80123f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80123fa:	d104      	bne.n	8012406 <readCanToStructs+0x163a>
				canRead.Out = 0;
 80123fc:	4b51      	ldr	r3, [pc, #324]	; (8012544 <readCanToStructs+0x1778>)
 80123fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012402:	2200      	movs	r2, #0
 8012404:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8012406:	f7fe fc8b 	bl	8010d20 <canDataReady>
 801240a:	4603      	mov	r3, r0
 801240c:	2b00      	cmp	r3, #0
 801240e:	f47e ad07 	bne.w	8010e20 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 8012412:	f002 bdc9 	b.w	8014fa8 <readCanToStructs+0x41dc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8012416:	4b4b      	ldr	r3, [pc, #300]	; (8012544 <readCanToStructs+0x1778>)
 8012418:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801241c:	885b      	ldrh	r3, [r3, #2]
 801241e:	4a49      	ldr	r2, [pc, #292]	; (8012544 <readCanToStructs+0x1778>)
 8012420:	011b      	lsls	r3, r3, #4
 8012422:	4413      	add	r3, r2
 8012424:	330f      	adds	r3, #15
 8012426:	781b      	ldrb	r3, [r3, #0]
 8012428:	3b01      	subs	r3, #1
 801242a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801242e:	4b45      	ldr	r3, [pc, #276]	; (8012544 <readCanToStructs+0x1778>)
 8012430:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012434:	885b      	ldrh	r3, [r3, #2]
 8012436:	4a43      	ldr	r2, [pc, #268]	; (8012544 <readCanToStructs+0x1778>)
 8012438:	011b      	lsls	r3, r3, #4
 801243a:	4413      	add	r3, r2
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	f240 220a 	movw	r2, #522	; 0x20a
 8012442:	4293      	cmp	r3, r2
 8012444:	f201 803e 	bhi.w	80134c4 <readCanToStructs+0x26f8>
 8012448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801244c:	d80a      	bhi.n	8012464 <readCanToStructs+0x1698>
 801244e:	f240 1203 	movw	r2, #259	; 0x103
 8012452:	4293      	cmp	r3, r2
 8012454:	d022      	beq.n	801249c <readCanToStructs+0x16d0>
 8012456:	f240 1209 	movw	r2, #265	; 0x109
 801245a:	4293      	cmp	r3, r2
 801245c:	f000 8104 	beq.w	8012668 <readCanToStructs+0x189c>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8012460:	f001 b830 	b.w	80134c4 <readCanToStructs+0x26f8>
 8012464:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012468:	2b09      	cmp	r3, #9
 801246a:	f201 802b 	bhi.w	80134c4 <readCanToStructs+0x26f8>
 801246e:	a201      	add	r2, pc, #4	; (adr r2, 8012474 <readCanToStructs+0x16a8>)
 8012470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012474:	08012835 	.word	0x08012835
 8012478:	080129eb 	.word	0x080129eb
 801247c:	080134c5 	.word	0x080134c5
 8012480:	080134c5 	.word	0x080134c5
 8012484:	08012f8b 	.word	0x08012f8b
 8012488:	080134c5 	.word	0x080134c5
 801248c:	08012bcb 	.word	0x08012bcb
 8012490:	08012d97 	.word	0x08012d97
 8012494:	0801315d 	.word	0x0801315d
 8012498:	080132ff 	.word	0x080132ff
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801249c:	4b2f      	ldr	r3, [pc, #188]	; (801255c <readCanToStructs+0x1790>)
 801249e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80124a0:	4b28      	ldr	r3, [pc, #160]	; (8012544 <readCanToStructs+0x1778>)
 80124a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124a6:	885b      	ldrh	r3, [r3, #2]
 80124a8:	4a26      	ldr	r2, [pc, #152]	; (8012544 <readCanToStructs+0x1778>)
 80124aa:	011b      	lsls	r3, r3, #4
 80124ac:	4413      	add	r3, r2
 80124ae:	3304      	adds	r3, #4
 80124b0:	781b      	ldrb	r3, [r3, #0]
 80124b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80124b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d110      	bne.n	80124e0 <readCanToStructs+0x1714>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80124be:	2206      	movs	r2, #6
 80124c0:	2100      	movs	r1, #0
 80124c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80124c4:	f013 f9e2 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80124c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124cc:	4a1e      	ldr	r2, [pc, #120]	; (8012548 <readCanToStructs+0x177c>)
 80124ce:	f240 4116 	movw	r1, #1046	; 0x416
 80124d2:	fb01 f303 	mul.w	r3, r1, r3
 80124d6:	4413      	add	r3, r2
 80124d8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80124dc:	2200      	movs	r2, #0
 80124de:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80124e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124e4:	4a18      	ldr	r2, [pc, #96]	; (8012548 <readCanToStructs+0x177c>)
 80124e6:	f240 4116 	movw	r1, #1046	; 0x416
 80124ea:	fb01 f303 	mul.w	r3, r1, r3
 80124ee:	4413      	add	r3, r2
 80124f0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80124f4:	781b      	ldrb	r3, [r3, #0]
 80124f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d015      	beq.n	801252a <readCanToStructs+0x175e>
					printf("GPS Packet Seq no MisMatch\n");
 80124fe:	4818      	ldr	r0, [pc, #96]	; (8012560 <readCanToStructs+0x1794>)
 8012500:	f013 fb48 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012504:	2206      	movs	r2, #6
 8012506:	2100      	movs	r1, #0
 8012508:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801250a:	f013 f9bf 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801250e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012512:	4a0d      	ldr	r2, [pc, #52]	; (8012548 <readCanToStructs+0x177c>)
 8012514:	f240 4116 	movw	r1, #1046	; 0x416
 8012518:	fb01 f303 	mul.w	r3, r1, r3
 801251c:	4413      	add	r3, r2
 801251e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012522:	2200      	movs	r2, #0
 8012524:	701a      	strb	r2, [r3, #0]
					break;
 8012526:	f000 bfd2 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 801252a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801252e:	4613      	mov	r3, r2
 8012530:	00db      	lsls	r3, r3, #3
 8012532:	1a9b      	subs	r3, r3, r2
 8012534:	461a      	mov	r2, r3
 8012536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012538:	4413      	add	r3, r2
 801253a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801253c:	2301      	movs	r3, #1
 801253e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012542:	e026      	b.n	8012592 <readCanToStructs+0x17c6>
 8012544:	2000719c 	.word	0x2000719c
 8012548:	20006970 	.word	0x20006970
 801254c:	20000bbb 	.word	0x20000bbb
 8012550:	20000bb8 	.word	0x20000bb8
 8012554:	0802a4dc 	.word	0x0802a4dc
 8012558:	2000030b 	.word	0x2000030b
 801255c:	20003f18 	.word	0x20003f18
 8012560:	0802a2a0 	.word	0x0802a2a0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012564:	4bab      	ldr	r3, [pc, #684]	; (8012814 <readCanToStructs+0x1a48>)
 8012566:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801256a:	885b      	ldrh	r3, [r3, #2]
 801256c:	461a      	mov	r2, r3
 801256e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012572:	49a8      	ldr	r1, [pc, #672]	; (8012814 <readCanToStructs+0x1a48>)
 8012574:	0112      	lsls	r2, r2, #4
 8012576:	440a      	add	r2, r1
 8012578:	4413      	add	r3, r2
 801257a:	3304      	adds	r3, #4
 801257c:	781a      	ldrb	r2, [r3, #0]
 801257e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012580:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012584:	3301      	adds	r3, #1
 8012586:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012588:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801258c:	3301      	adds	r3, #1
 801258e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012592:	4ba0      	ldr	r3, [pc, #640]	; (8012814 <readCanToStructs+0x1a48>)
 8012594:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012598:	885b      	ldrh	r3, [r3, #2]
 801259a:	4a9e      	ldr	r2, [pc, #632]	; (8012814 <readCanToStructs+0x1a48>)
 801259c:	011b      	lsls	r3, r3, #4
 801259e:	4413      	add	r3, r2
 80125a0:	330c      	adds	r3, #12
 80125a2:	781b      	ldrb	r3, [r3, #0]
 80125a4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80125a8:	429a      	cmp	r2, r3
 80125aa:	d3db      	bcc.n	8012564 <readCanToStructs+0x1798>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80125ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125b0:	4a99      	ldr	r2, [pc, #612]	; (8012818 <readCanToStructs+0x1a4c>)
 80125b2:	f240 4116 	movw	r1, #1046	; 0x416
 80125b6:	fb01 f303 	mul.w	r3, r1, r3
 80125ba:	4413      	add	r3, r2
 80125bc:	f203 2307 	addw	r3, r3, #519	; 0x207
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	461a      	mov	r2, r3
 80125c4:	4613      	mov	r3, r2
 80125c6:	00db      	lsls	r3, r3, #3
 80125c8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80125ca:	4b92      	ldr	r3, [pc, #584]	; (8012814 <readCanToStructs+0x1a48>)
 80125cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125d0:	885b      	ldrh	r3, [r3, #2]
 80125d2:	4990      	ldr	r1, [pc, #576]	; (8012814 <readCanToStructs+0x1a48>)
 80125d4:	011b      	lsls	r3, r3, #4
 80125d6:	440b      	add	r3, r1
 80125d8:	330c      	adds	r3, #12
 80125da:	781b      	ldrb	r3, [r3, #0]
 80125dc:	3b01      	subs	r3, #1
 80125de:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80125e0:	2b05      	cmp	r3, #5
 80125e2:	d91c      	bls.n	801261e <readCanToStructs+0x1852>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80125e4:	4b8d      	ldr	r3, [pc, #564]	; (801281c <readCanToStructs+0x1a50>)
 80125e6:	4a8e      	ldr	r2, [pc, #568]	; (8012820 <readCanToStructs+0x1a54>)
 80125e8:	6811      	ldr	r1, [r2, #0]
 80125ea:	6019      	str	r1, [r3, #0]
 80125ec:	8892      	ldrh	r2, [r2, #4]
 80125ee:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80125f0:	4b8c      	ldr	r3, [pc, #560]	; (8012824 <readCanToStructs+0x1a58>)
 80125f2:	781b      	ldrb	r3, [r3, #0]
 80125f4:	2b01      	cmp	r3, #1
 80125f6:	d102      	bne.n	80125fe <readCanToStructs+0x1832>
						printf("GPS_PACKET_RECEIVED\n");
 80125f8:	488b      	ldr	r0, [pc, #556]	; (8012828 <readCanToStructs+0x1a5c>)
 80125fa:	f013 facb 	bl	8025b94 <puts>
					Write_RTC();
 80125fe:	f7f9 fff1 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012602:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012606:	4a84      	ldr	r2, [pc, #528]	; (8012818 <readCanToStructs+0x1a4c>)
 8012608:	f240 4116 	movw	r1, #1046	; 0x416
 801260c:	fb01 f303 	mul.w	r3, r1, r3
 8012610:	4413      	add	r3, r2
 8012612:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012616:	2200      	movs	r2, #0
 8012618:	701a      	strb	r2, [r3, #0]
				break;
 801261a:	f000 bf58 	b.w	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801261e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012622:	4a7d      	ldr	r2, [pc, #500]	; (8012818 <readCanToStructs+0x1a4c>)
 8012624:	f240 4116 	movw	r1, #1046	; 0x416
 8012628:	fb01 f303 	mul.w	r3, r1, r3
 801262c:	4413      	add	r3, r2
 801262e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012632:	2201      	movs	r2, #1
 8012634:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012636:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801263a:	4977      	ldr	r1, [pc, #476]	; (8012818 <readCanToStructs+0x1a4c>)
 801263c:	f240 4216 	movw	r2, #1046	; 0x416
 8012640:	fb03 f202 	mul.w	r2, r3, r2
 8012644:	440a      	add	r2, r1
 8012646:	f202 2207 	addw	r2, r2, #519	; 0x207
 801264a:	7812      	ldrb	r2, [r2, #0]
 801264c:	3201      	adds	r2, #1
 801264e:	b2d0      	uxtb	r0, r2
 8012650:	4a71      	ldr	r2, [pc, #452]	; (8012818 <readCanToStructs+0x1a4c>)
 8012652:	f240 4116 	movw	r1, #1046	; 0x416
 8012656:	fb01 f303 	mul.w	r3, r1, r3
 801265a:	4413      	add	r3, r2
 801265c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012660:	4602      	mov	r2, r0
 8012662:	701a      	strb	r2, [r3, #0]
				break;
 8012664:	f000 bf33 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012668:	4b6d      	ldr	r3, [pc, #436]	; (8012820 <readCanToStructs+0x1a54>)
 801266a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801266c:	4b69      	ldr	r3, [pc, #420]	; (8012814 <readCanToStructs+0x1a48>)
 801266e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012672:	885b      	ldrh	r3, [r3, #2]
 8012674:	4a67      	ldr	r2, [pc, #412]	; (8012814 <readCanToStructs+0x1a48>)
 8012676:	011b      	lsls	r3, r3, #4
 8012678:	4413      	add	r3, r2
 801267a:	3304      	adds	r3, #4
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012682:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012686:	2b00      	cmp	r3, #0
 8012688:	d110      	bne.n	80126ac <readCanToStructs+0x18e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801268a:	2206      	movs	r2, #6
 801268c:	2100      	movs	r1, #0
 801268e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012690:	f013 f8fc 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012698:	4a5f      	ldr	r2, [pc, #380]	; (8012818 <readCanToStructs+0x1a4c>)
 801269a:	f240 4116 	movw	r1, #1046	; 0x416
 801269e:	fb01 f303 	mul.w	r3, r1, r3
 80126a2:	4413      	add	r3, r2
 80126a4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80126a8:	2200      	movs	r2, #0
 80126aa:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80126ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126b0:	4a59      	ldr	r2, [pc, #356]	; (8012818 <readCanToStructs+0x1a4c>)
 80126b2:	f240 4116 	movw	r1, #1046	; 0x416
 80126b6:	fb01 f303 	mul.w	r3, r1, r3
 80126ba:	4413      	add	r3, r2
 80126bc:	f203 2313 	addw	r3, r3, #531	; 0x213
 80126c0:	781b      	ldrb	r3, [r3, #0]
 80126c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126c6:	429a      	cmp	r2, r3
 80126c8:	d015      	beq.n	80126f6 <readCanToStructs+0x192a>
					printf("GPS2 Packet Seq no MisMatch\n");
 80126ca:	4858      	ldr	r0, [pc, #352]	; (801282c <readCanToStructs+0x1a60>)
 80126cc:	f013 fa62 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80126d0:	2206      	movs	r2, #6
 80126d2:	2100      	movs	r1, #0
 80126d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126d6:	f013 f8d9 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80126da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126de:	4a4e      	ldr	r2, [pc, #312]	; (8012818 <readCanToStructs+0x1a4c>)
 80126e0:	f240 4116 	movw	r1, #1046	; 0x416
 80126e4:	fb01 f303 	mul.w	r3, r1, r3
 80126e8:	4413      	add	r3, r2
 80126ea:	f203 2313 	addw	r3, r3, #531	; 0x213
 80126ee:	2200      	movs	r2, #0
 80126f0:	701a      	strb	r2, [r3, #0]
					break;
 80126f2:	f000 beec 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80126f6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126fa:	4613      	mov	r3, r2
 80126fc:	00db      	lsls	r3, r3, #3
 80126fe:	1a9b      	subs	r3, r3, r2
 8012700:	461a      	mov	r2, r3
 8012702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012704:	4413      	add	r3, r2
 8012706:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012708:	2301      	movs	r3, #1
 801270a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801270e:	e016      	b.n	801273e <readCanToStructs+0x1972>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012710:	4b40      	ldr	r3, [pc, #256]	; (8012814 <readCanToStructs+0x1a48>)
 8012712:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012716:	885b      	ldrh	r3, [r3, #2]
 8012718:	461a      	mov	r2, r3
 801271a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801271e:	493d      	ldr	r1, [pc, #244]	; (8012814 <readCanToStructs+0x1a48>)
 8012720:	0112      	lsls	r2, r2, #4
 8012722:	440a      	add	r2, r1
 8012724:	4413      	add	r3, r2
 8012726:	3304      	adds	r3, #4
 8012728:	781a      	ldrb	r2, [r3, #0]
 801272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012730:	3301      	adds	r3, #1
 8012732:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012738:	3301      	adds	r3, #1
 801273a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801273e:	4b35      	ldr	r3, [pc, #212]	; (8012814 <readCanToStructs+0x1a48>)
 8012740:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	4a33      	ldr	r2, [pc, #204]	; (8012814 <readCanToStructs+0x1a48>)
 8012748:	011b      	lsls	r3, r3, #4
 801274a:	4413      	add	r3, r2
 801274c:	330c      	adds	r3, #12
 801274e:	781b      	ldrb	r3, [r3, #0]
 8012750:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012754:	429a      	cmp	r2, r3
 8012756:	d3db      	bcc.n	8012710 <readCanToStructs+0x1944>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012758:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801275c:	4a2e      	ldr	r2, [pc, #184]	; (8012818 <readCanToStructs+0x1a4c>)
 801275e:	f240 4116 	movw	r1, #1046	; 0x416
 8012762:	fb01 f303 	mul.w	r3, r1, r3
 8012766:	4413      	add	r3, r2
 8012768:	f203 2313 	addw	r3, r3, #531	; 0x213
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	461a      	mov	r2, r3
 8012770:	4613      	mov	r3, r2
 8012772:	00db      	lsls	r3, r3, #3
 8012774:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012776:	4b27      	ldr	r3, [pc, #156]	; (8012814 <readCanToStructs+0x1a48>)
 8012778:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801277c:	885b      	ldrh	r3, [r3, #2]
 801277e:	4925      	ldr	r1, [pc, #148]	; (8012814 <readCanToStructs+0x1a48>)
 8012780:	011b      	lsls	r3, r3, #4
 8012782:	440b      	add	r3, r1
 8012784:	330c      	adds	r3, #12
 8012786:	781b      	ldrb	r3, [r3, #0]
 8012788:	3b01      	subs	r3, #1
 801278a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801278c:	2b05      	cmp	r3, #5
 801278e:	d91c      	bls.n	80127ca <readCanToStructs+0x19fe>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012790:	4b22      	ldr	r3, [pc, #136]	; (801281c <readCanToStructs+0x1a50>)
 8012792:	4a23      	ldr	r2, [pc, #140]	; (8012820 <readCanToStructs+0x1a54>)
 8012794:	6811      	ldr	r1, [r2, #0]
 8012796:	6019      	str	r1, [r3, #0]
 8012798:	8892      	ldrh	r2, [r2, #4]
 801279a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801279c:	4b21      	ldr	r3, [pc, #132]	; (8012824 <readCanToStructs+0x1a58>)
 801279e:	781b      	ldrb	r3, [r3, #0]
 80127a0:	2b01      	cmp	r3, #1
 80127a2:	d102      	bne.n	80127aa <readCanToStructs+0x19de>
						printf("GPS2_PACKET_RECEIVED\n");
 80127a4:	4822      	ldr	r0, [pc, #136]	; (8012830 <readCanToStructs+0x1a64>)
 80127a6:	f013 f9f5 	bl	8025b94 <puts>
					Write_RTC();
 80127aa:	f7f9 ff1b 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80127ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b2:	4a19      	ldr	r2, [pc, #100]	; (8012818 <readCanToStructs+0x1a4c>)
 80127b4:	f240 4116 	movw	r1, #1046	; 0x416
 80127b8:	fb01 f303 	mul.w	r3, r1, r3
 80127bc:	4413      	add	r3, r2
 80127be:	f203 2313 	addw	r3, r3, #531	; 0x213
 80127c2:	2200      	movs	r2, #0
 80127c4:	701a      	strb	r2, [r3, #0]
				break;
 80127c6:	f000 be82 	b.w	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80127ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ce:	4a12      	ldr	r2, [pc, #72]	; (8012818 <readCanToStructs+0x1a4c>)
 80127d0:	f240 4116 	movw	r1, #1046	; 0x416
 80127d4:	fb01 f303 	mul.w	r3, r1, r3
 80127d8:	4413      	add	r3, r2
 80127da:	f203 2312 	addw	r3, r3, #530	; 0x212
 80127de:	2201      	movs	r2, #1
 80127e0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80127e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127e6:	490c      	ldr	r1, [pc, #48]	; (8012818 <readCanToStructs+0x1a4c>)
 80127e8:	f240 4216 	movw	r2, #1046	; 0x416
 80127ec:	fb03 f202 	mul.w	r2, r3, r2
 80127f0:	440a      	add	r2, r1
 80127f2:	f202 2213 	addw	r2, r2, #531	; 0x213
 80127f6:	7812      	ldrb	r2, [r2, #0]
 80127f8:	3201      	adds	r2, #1
 80127fa:	b2d0      	uxtb	r0, r2
 80127fc:	4a06      	ldr	r2, [pc, #24]	; (8012818 <readCanToStructs+0x1a4c>)
 80127fe:	f240 4116 	movw	r1, #1046	; 0x416
 8012802:	fb01 f303 	mul.w	r3, r1, r3
 8012806:	4413      	add	r3, r2
 8012808:	f203 2313 	addw	r3, r3, #531	; 0x213
 801280c:	4602      	mov	r2, r0
 801280e:	701a      	strb	r2, [r3, #0]
				break;
 8012810:	f000 be5d 	b.w	80134ce <readCanToStructs+0x2702>
 8012814:	2000719c 	.word	0x2000719c
 8012818:	20006970 	.word	0x20006970
 801281c:	20003f10 	.word	0x20003f10
 8012820:	20003f18 	.word	0x20003f18
 8012824:	20000bbb 	.word	0x20000bbb
 8012828:	0802a2bc 	.word	0x0802a2bc
 801282c:	0802a2d0 	.word	0x0802a2d0
 8012830:	0802a2ec 	.word	0x0802a2ec
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8012834:	4bc8      	ldr	r3, [pc, #800]	; (8012b58 <readCanToStructs+0x1d8c>)
 8012836:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012838:	4bc8      	ldr	r3, [pc, #800]	; (8012b5c <readCanToStructs+0x1d90>)
 801283a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801283e:	885b      	ldrh	r3, [r3, #2]
 8012840:	4ac6      	ldr	r2, [pc, #792]	; (8012b5c <readCanToStructs+0x1d90>)
 8012842:	011b      	lsls	r3, r3, #4
 8012844:	4413      	add	r3, r2
 8012846:	3304      	adds	r3, #4
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801284e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012852:	2b00      	cmp	r3, #0
 8012854:	d110      	bne.n	8012878 <readCanToStructs+0x1aac>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012856:	2204      	movs	r2, #4
 8012858:	2100      	movs	r1, #0
 801285a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801285c:	f013 f816 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012864:	4abe      	ldr	r2, [pc, #760]	; (8012b60 <readCanToStructs+0x1d94>)
 8012866:	f240 4116 	movw	r1, #1046	; 0x416
 801286a:	fb01 f303 	mul.w	r3, r1, r3
 801286e:	4413      	add	r3, r2
 8012870:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012874:	2200      	movs	r2, #0
 8012876:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801287c:	4ab8      	ldr	r2, [pc, #736]	; (8012b60 <readCanToStructs+0x1d94>)
 801287e:	f240 4116 	movw	r1, #1046	; 0x416
 8012882:	fb01 f303 	mul.w	r3, r1, r3
 8012886:	4413      	add	r3, r2
 8012888:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801288c:	781b      	ldrb	r3, [r3, #0]
 801288e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012892:	429a      	cmp	r2, r3
 8012894:	d015      	beq.n	80128c2 <readCanToStructs+0x1af6>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8012896:	48b3      	ldr	r0, [pc, #716]	; (8012b64 <readCanToStructs+0x1d98>)
 8012898:	f013 f97c 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801289c:	2204      	movs	r2, #4
 801289e:	2100      	movs	r1, #0
 80128a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128a2:	f012 fff3 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80128a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128aa:	4aad      	ldr	r2, [pc, #692]	; (8012b60 <readCanToStructs+0x1d94>)
 80128ac:	f240 4116 	movw	r1, #1046	; 0x416
 80128b0:	fb01 f303 	mul.w	r3, r1, r3
 80128b4:	4413      	add	r3, r2
 80128b6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80128ba:	2200      	movs	r2, #0
 80128bc:	701a      	strb	r2, [r3, #0]
					break;
 80128be:	f000 be06 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80128c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80128c6:	4613      	mov	r3, r2
 80128c8:	00db      	lsls	r3, r3, #3
 80128ca:	1a9b      	subs	r3, r3, r2
 80128cc:	461a      	mov	r2, r3
 80128ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d0:	4413      	add	r3, r2
 80128d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80128d4:	2301      	movs	r3, #1
 80128d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80128da:	e016      	b.n	801290a <readCanToStructs+0x1b3e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80128dc:	4b9f      	ldr	r3, [pc, #636]	; (8012b5c <readCanToStructs+0x1d90>)
 80128de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128e2:	885b      	ldrh	r3, [r3, #2]
 80128e4:	461a      	mov	r2, r3
 80128e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80128ea:	499c      	ldr	r1, [pc, #624]	; (8012b5c <readCanToStructs+0x1d90>)
 80128ec:	0112      	lsls	r2, r2, #4
 80128ee:	440a      	add	r2, r1
 80128f0:	4413      	add	r3, r2
 80128f2:	3304      	adds	r3, #4
 80128f4:	781a      	ldrb	r2, [r3, #0]
 80128f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80128fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128fc:	3301      	adds	r3, #1
 80128fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012900:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012904:	3301      	adds	r3, #1
 8012906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801290a:	4b94      	ldr	r3, [pc, #592]	; (8012b5c <readCanToStructs+0x1d90>)
 801290c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012910:	885b      	ldrh	r3, [r3, #2]
 8012912:	4a92      	ldr	r2, [pc, #584]	; (8012b5c <readCanToStructs+0x1d90>)
 8012914:	011b      	lsls	r3, r3, #4
 8012916:	4413      	add	r3, r2
 8012918:	330c      	adds	r3, #12
 801291a:	781b      	ldrb	r3, [r3, #0]
 801291c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012920:	429a      	cmp	r2, r3
 8012922:	d3db      	bcc.n	80128dc <readCanToStructs+0x1b10>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012928:	4a8d      	ldr	r2, [pc, #564]	; (8012b60 <readCanToStructs+0x1d94>)
 801292a:	f240 4116 	movw	r1, #1046	; 0x416
 801292e:	fb01 f303 	mul.w	r3, r1, r3
 8012932:	4413      	add	r3, r2
 8012934:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	461a      	mov	r2, r3
 801293c:	4613      	mov	r3, r2
 801293e:	00db      	lsls	r3, r3, #3
 8012940:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012942:	4b86      	ldr	r3, [pc, #536]	; (8012b5c <readCanToStructs+0x1d90>)
 8012944:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012948:	885b      	ldrh	r3, [r3, #2]
 801294a:	4984      	ldr	r1, [pc, #528]	; (8012b5c <readCanToStructs+0x1d90>)
 801294c:	011b      	lsls	r3, r3, #4
 801294e:	440b      	add	r3, r1
 8012950:	330c      	adds	r3, #12
 8012952:	781b      	ldrb	r3, [r3, #0]
 8012954:	3b01      	subs	r3, #1
 8012956:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012958:	2b03      	cmp	r3, #3
 801295a:	d921      	bls.n	80129a0 <readCanToStructs+0x1bd4>
 801295c:	4b7e      	ldr	r3, [pc, #504]	; (8012b58 <readCanToStructs+0x1d8c>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012962:	4b81      	ldr	r3, [pc, #516]	; (8012b68 <readCanToStructs+0x1d9c>)
 8012964:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012966:	4b81      	ldr	r3, [pc, #516]	; (8012b6c <readCanToStructs+0x1da0>)
 8012968:	781b      	ldrb	r3, [r3, #0]
 801296a:	2b01      	cmp	r3, #1
 801296c:	d102      	bne.n	8012974 <readCanToStructs+0x1ba8>
						printf("O_Info1_RCV\n");
 801296e:	4880      	ldr	r0, [pc, #512]	; (8012b70 <readCanToStructs+0x1da4>)
 8012970:	f013 f910 	bl	8025b94 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012974:	4b7f      	ldr	r3, [pc, #508]	; (8012b74 <readCanToStructs+0x1da8>)
 8012976:	2201      	movs	r2, #1
 8012978:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801297a:	f006 f959 	bl	8018c30 <HAL_GetTick>
 801297e:	4603      	mov	r3, r0
 8012980:	4a7c      	ldr	r2, [pc, #496]	; (8012b74 <readCanToStructs+0x1da8>)
 8012982:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012988:	4a75      	ldr	r2, [pc, #468]	; (8012b60 <readCanToStructs+0x1d94>)
 801298a:	f240 4116 	movw	r1, #1046	; 0x416
 801298e:	fb01 f303 	mul.w	r3, r1, r3
 8012992:	4413      	add	r3, r2
 8012994:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012998:	2200      	movs	r2, #0
 801299a:	701a      	strb	r2, [r3, #0]
				break;
 801299c:	f000 bd97 	b.w	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80129a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129a4:	4a6e      	ldr	r2, [pc, #440]	; (8012b60 <readCanToStructs+0x1d94>)
 80129a6:	f240 4116 	movw	r1, #1046	; 0x416
 80129aa:	fb01 f303 	mul.w	r3, r1, r3
 80129ae:	4413      	add	r3, r2
 80129b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80129b4:	2201      	movs	r2, #1
 80129b6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80129b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129bc:	4968      	ldr	r1, [pc, #416]	; (8012b60 <readCanToStructs+0x1d94>)
 80129be:	f240 4216 	movw	r2, #1046	; 0x416
 80129c2:	fb03 f202 	mul.w	r2, r3, r2
 80129c6:	440a      	add	r2, r1
 80129c8:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80129cc:	7812      	ldrb	r2, [r2, #0]
 80129ce:	3201      	adds	r2, #1
 80129d0:	b2d0      	uxtb	r0, r2
 80129d2:	4a63      	ldr	r2, [pc, #396]	; (8012b60 <readCanToStructs+0x1d94>)
 80129d4:	f240 4116 	movw	r1, #1046	; 0x416
 80129d8:	fb01 f303 	mul.w	r3, r1, r3
 80129dc:	4413      	add	r3, r2
 80129de:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80129e2:	4602      	mov	r2, r0
 80129e4:	701a      	strb	r2, [r3, #0]
				break;
 80129e6:	f000 bd72 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 80129ea:	4b5b      	ldr	r3, [pc, #364]	; (8012b58 <readCanToStructs+0x1d8c>)
 80129ec:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80129ee:	4b5b      	ldr	r3, [pc, #364]	; (8012b5c <readCanToStructs+0x1d90>)
 80129f0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129f4:	885b      	ldrh	r3, [r3, #2]
 80129f6:	4a59      	ldr	r2, [pc, #356]	; (8012b5c <readCanToStructs+0x1d90>)
 80129f8:	011b      	lsls	r3, r3, #4
 80129fa:	4413      	add	r3, r2
 80129fc:	3304      	adds	r3, #4
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012a04:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	d110      	bne.n	8012a2e <readCanToStructs+0x1c62>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012a0c:	2204      	movs	r2, #4
 8012a0e:	2100      	movs	r1, #0
 8012a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a12:	f012 ff3b 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012a16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a1a:	4a51      	ldr	r2, [pc, #324]	; (8012b60 <readCanToStructs+0x1d94>)
 8012a1c:	f240 4116 	movw	r1, #1046	; 0x416
 8012a20:	fb01 f303 	mul.w	r3, r1, r3
 8012a24:	4413      	add	r3, r2
 8012a26:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012a2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a32:	4a4b      	ldr	r2, [pc, #300]	; (8012b60 <readCanToStructs+0x1d94>)
 8012a34:	f240 4116 	movw	r1, #1046	; 0x416
 8012a38:	fb01 f303 	mul.w	r3, r1, r3
 8012a3c:	4413      	add	r3, r2
 8012a3e:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a42:	781b      	ldrb	r3, [r3, #0]
 8012a44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d015      	beq.n	8012a78 <readCanToStructs+0x1cac>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8012a4c:	484a      	ldr	r0, [pc, #296]	; (8012b78 <readCanToStructs+0x1dac>)
 8012a4e:	f013 f8a1 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012a52:	2204      	movs	r2, #4
 8012a54:	2100      	movs	r1, #0
 8012a56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a58:	f012 ff18 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a60:	4a3f      	ldr	r2, [pc, #252]	; (8012b60 <readCanToStructs+0x1d94>)
 8012a62:	f240 4116 	movw	r1, #1046	; 0x416
 8012a66:	fb01 f303 	mul.w	r3, r1, r3
 8012a6a:	4413      	add	r3, r2
 8012a6c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012a70:	2200      	movs	r2, #0
 8012a72:	701a      	strb	r2, [r3, #0]
					break;
 8012a74:	f000 bd2b 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012a78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	00db      	lsls	r3, r3, #3
 8012a80:	1a9b      	subs	r3, r3, r2
 8012a82:	461a      	mov	r2, r3
 8012a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a86:	4413      	add	r3, r2
 8012a88:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a8a:	2301      	movs	r3, #1
 8012a8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a90:	e016      	b.n	8012ac0 <readCanToStructs+0x1cf4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012a92:	4b32      	ldr	r3, [pc, #200]	; (8012b5c <readCanToStructs+0x1d90>)
 8012a94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a98:	885b      	ldrh	r3, [r3, #2]
 8012a9a:	461a      	mov	r2, r3
 8012a9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aa0:	492e      	ldr	r1, [pc, #184]	; (8012b5c <readCanToStructs+0x1d90>)
 8012aa2:	0112      	lsls	r2, r2, #4
 8012aa4:	440a      	add	r2, r1
 8012aa6:	4413      	add	r3, r2
 8012aa8:	3304      	adds	r3, #4
 8012aaa:	781a      	ldrb	r2, [r3, #0]
 8012aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012aae:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012ab6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012aba:	3301      	adds	r3, #1
 8012abc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012ac0:	4b26      	ldr	r3, [pc, #152]	; (8012b5c <readCanToStructs+0x1d90>)
 8012ac2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ac6:	885b      	ldrh	r3, [r3, #2]
 8012ac8:	4a24      	ldr	r2, [pc, #144]	; (8012b5c <readCanToStructs+0x1d90>)
 8012aca:	011b      	lsls	r3, r3, #4
 8012acc:	4413      	add	r3, r2
 8012ace:	330c      	adds	r3, #12
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012ad6:	429a      	cmp	r2, r3
 8012ad8:	d3db      	bcc.n	8012a92 <readCanToStructs+0x1cc6>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ade:	4a20      	ldr	r2, [pc, #128]	; (8012b60 <readCanToStructs+0x1d94>)
 8012ae0:	f240 4116 	movw	r1, #1046	; 0x416
 8012ae4:	fb01 f303 	mul.w	r3, r1, r3
 8012ae8:	4413      	add	r3, r2
 8012aea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	461a      	mov	r2, r3
 8012af2:	4613      	mov	r3, r2
 8012af4:	00db      	lsls	r3, r3, #3
 8012af6:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012af8:	4b18      	ldr	r3, [pc, #96]	; (8012b5c <readCanToStructs+0x1d90>)
 8012afa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012afe:	885b      	ldrh	r3, [r3, #2]
 8012b00:	4916      	ldr	r1, [pc, #88]	; (8012b5c <readCanToStructs+0x1d90>)
 8012b02:	011b      	lsls	r3, r3, #4
 8012b04:	440b      	add	r3, r1
 8012b06:	330c      	adds	r3, #12
 8012b08:	781b      	ldrb	r3, [r3, #0]
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012b0e:	2b03      	cmp	r3, #3
 8012b10:	d936      	bls.n	8012b80 <readCanToStructs+0x1db4>
 8012b12:	4b11      	ldr	r3, [pc, #68]	; (8012b58 <readCanToStructs+0x1d8c>)
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012b18:	4b13      	ldr	r3, [pc, #76]	; (8012b68 <readCanToStructs+0x1d9c>)
 8012b1a:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012b1c:	4b13      	ldr	r3, [pc, #76]	; (8012b6c <readCanToStructs+0x1da0>)
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	2b01      	cmp	r3, #1
 8012b22:	d102      	bne.n	8012b2a <readCanToStructs+0x1d5e>
						printf("O_Info2_RCV\n");
 8012b24:	4815      	ldr	r0, [pc, #84]	; (8012b7c <readCanToStructs+0x1db0>)
 8012b26:	f013 f835 	bl	8025b94 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012b2a:	4b12      	ldr	r3, [pc, #72]	; (8012b74 <readCanToStructs+0x1da8>)
 8012b2c:	2201      	movs	r2, #1
 8012b2e:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012b30:	f006 f87e 	bl	8018c30 <HAL_GetTick>
 8012b34:	4603      	mov	r3, r0
 8012b36:	4a0f      	ldr	r2, [pc, #60]	; (8012b74 <readCanToStructs+0x1da8>)
 8012b38:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012b3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b3e:	4a08      	ldr	r2, [pc, #32]	; (8012b60 <readCanToStructs+0x1d94>)
 8012b40:	f240 4116 	movw	r1, #1046	; 0x416
 8012b44:	fb01 f303 	mul.w	r3, r1, r3
 8012b48:	4413      	add	r3, r2
 8012b4a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012b4e:	2200      	movs	r2, #0
 8012b50:	701a      	strb	r2, [r3, #0]
				break;
 8012b52:	f000 bcbc 	b.w	80134ce <readCanToStructs+0x2702>
 8012b56:	bf00      	nop
 8012b58:	20004bc0 	.word	0x20004bc0
 8012b5c:	2000719c 	.word	0x2000719c
 8012b60:	20006970 	.word	0x20006970
 8012b64:	0802a304 	.word	0x0802a304
 8012b68:	20004bbc 	.word	0x20004bbc
 8012b6c:	20000bbb 	.word	0x20000bbb
 8012b70:	0802a4f0 	.word	0x0802a4f0
 8012b74:	20004bc4 	.word	0x20004bc4
 8012b78:	0802a338 	.word	0x0802a338
 8012b7c:	0802a4fc 	.word	0x0802a4fc
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b84:	4a9f      	ldr	r2, [pc, #636]	; (8012e04 <readCanToStructs+0x2038>)
 8012b86:	f240 4116 	movw	r1, #1046	; 0x416
 8012b8a:	fb01 f303 	mul.w	r3, r1, r3
 8012b8e:	4413      	add	r3, r2
 8012b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012b94:	2201      	movs	r2, #1
 8012b96:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b9c:	4999      	ldr	r1, [pc, #612]	; (8012e04 <readCanToStructs+0x2038>)
 8012b9e:	f240 4216 	movw	r2, #1046	; 0x416
 8012ba2:	fb03 f202 	mul.w	r2, r3, r2
 8012ba6:	440a      	add	r2, r1
 8012ba8:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012bac:	7812      	ldrb	r2, [r2, #0]
 8012bae:	3201      	adds	r2, #1
 8012bb0:	b2d0      	uxtb	r0, r2
 8012bb2:	4a94      	ldr	r2, [pc, #592]	; (8012e04 <readCanToStructs+0x2038>)
 8012bb4:	f240 4116 	movw	r1, #1046	; 0x416
 8012bb8:	fb01 f303 	mul.w	r3, r1, r3
 8012bbc:	4413      	add	r3, r2
 8012bbe:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	701a      	strb	r2, [r3, #0]
				break;
 8012bc6:	f000 bc82 	b.w	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8012bca:	4b8f      	ldr	r3, [pc, #572]	; (8012e08 <readCanToStructs+0x203c>)
 8012bcc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012bce:	4b8f      	ldr	r3, [pc, #572]	; (8012e0c <readCanToStructs+0x2040>)
 8012bd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bd4:	885b      	ldrh	r3, [r3, #2]
 8012bd6:	4a8d      	ldr	r2, [pc, #564]	; (8012e0c <readCanToStructs+0x2040>)
 8012bd8:	011b      	lsls	r3, r3, #4
 8012bda:	4413      	add	r3, r2
 8012bdc:	3304      	adds	r3, #4
 8012bde:	781b      	ldrb	r3, [r3, #0]
 8012be0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8012be4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <readCanToStructs+0x1e2c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8012bec:	4b88      	ldr	r3, [pc, #544]	; (8012e10 <readCanToStructs+0x2044>)
 8012bee:	881b      	ldrh	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf4:	4413      	add	r3, r2
 8012bf6:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8012bf8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d117      	bne.n	8012c30 <readCanToStructs+0x1e64>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012c00:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012c04:	2100      	movs	r1, #0
 8012c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012c08:	f012 fe40 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c10:	4a7c      	ldr	r2, [pc, #496]	; (8012e04 <readCanToStructs+0x2038>)
 8012c12:	f240 4116 	movw	r1, #1046	; 0x416
 8012c16:	fb01 f303 	mul.w	r3, r1, r3
 8012c1a:	4413      	add	r3, r2
 8012c1c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c20:	2200      	movs	r2, #0
 8012c22:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012c24:	4b7a      	ldr	r3, [pc, #488]	; (8012e10 <readCanToStructs+0x2044>)
 8012c26:	2200      	movs	r2, #0
 8012c28:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8012c2a:	4b7a      	ldr	r3, [pc, #488]	; (8012e14 <readCanToStructs+0x2048>)
 8012c2c:	2200      	movs	r2, #0
 8012c2e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012c30:	2301      	movs	r3, #1
 8012c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c36:	e01c      	b.n	8012c72 <readCanToStructs+0x1ea6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012c38:	4b74      	ldr	r3, [pc, #464]	; (8012e0c <readCanToStructs+0x2040>)
 8012c3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c3e:	885b      	ldrh	r3, [r3, #2]
 8012c40:	461a      	mov	r2, r3
 8012c42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c46:	4971      	ldr	r1, [pc, #452]	; (8012e0c <readCanToStructs+0x2040>)
 8012c48:	0112      	lsls	r2, r2, #4
 8012c4a:	440a      	add	r2, r1
 8012c4c:	4413      	add	r3, r2
 8012c4e:	3304      	adds	r3, #4
 8012c50:	781a      	ldrb	r2, [r3, #0]
 8012c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c54:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c58:	3301      	adds	r3, #1
 8012c5a:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012c5c:	4b6c      	ldr	r3, [pc, #432]	; (8012e10 <readCanToStructs+0x2044>)
 8012c5e:	881b      	ldrh	r3, [r3, #0]
 8012c60:	3301      	adds	r3, #1
 8012c62:	b29a      	uxth	r2, r3
 8012c64:	4b6a      	ldr	r3, [pc, #424]	; (8012e10 <readCanToStructs+0x2044>)
 8012c66:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012c68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012c72:	4b66      	ldr	r3, [pc, #408]	; (8012e0c <readCanToStructs+0x2040>)
 8012c74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c78:	885b      	ldrh	r3, [r3, #2]
 8012c7a:	4a64      	ldr	r2, [pc, #400]	; (8012e0c <readCanToStructs+0x2040>)
 8012c7c:	011b      	lsls	r3, r3, #4
 8012c7e:	4413      	add	r3, r2
 8012c80:	330c      	adds	r3, #12
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d3d5      	bcc.n	8012c38 <readCanToStructs+0x1e6c>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c90:	4a5c      	ldr	r2, [pc, #368]	; (8012e04 <readCanToStructs+0x2038>)
 8012c92:	f240 4116 	movw	r1, #1046	; 0x416
 8012c96:	fb01 f303 	mul.w	r3, r1, r3
 8012c9a:	4413      	add	r3, r2
 8012c9c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d026      	beq.n	8012cf8 <readCanToStructs+0x1f2c>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8012caa:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012cae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cb2:	4a54      	ldr	r2, [pc, #336]	; (8012e04 <readCanToStructs+0x2038>)
 8012cb4:	f240 4016 	movw	r0, #1046	; 0x416
 8012cb8:	fb00 f303 	mul.w	r3, r0, r3
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	461a      	mov	r2, r3
 8012cc6:	4854      	ldr	r0, [pc, #336]	; (8012e18 <readCanToStructs+0x204c>)
 8012cc8:	f012 fec8 	bl	8025a5c <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012ccc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012cd0:	2100      	movs	r1, #0
 8012cd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cd4:	f012 fdda 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012cd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cdc:	4a49      	ldr	r2, [pc, #292]	; (8012e04 <readCanToStructs+0x2038>)
 8012cde:	f240 4116 	movw	r1, #1046	; 0x416
 8012ce2:	fb01 f303 	mul.w	r3, r1, r3
 8012ce6:	4413      	add	r3, r2
 8012ce8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012cec:	2200      	movs	r2, #0
 8012cee:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012cf0:	4b47      	ldr	r3, [pc, #284]	; (8012e10 <readCanToStructs+0x2044>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	801a      	strh	r2, [r3, #0]
					break;
 8012cf6:	e3ea      	b.n	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012cf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cfc:	4941      	ldr	r1, [pc, #260]	; (8012e04 <readCanToStructs+0x2038>)
 8012cfe:	f240 4216 	movw	r2, #1046	; 0x416
 8012d02:	fb03 f202 	mul.w	r2, r3, r2
 8012d06:	440a      	add	r2, r1
 8012d08:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012d0c:	7812      	ldrb	r2, [r2, #0]
 8012d0e:	3201      	adds	r2, #1
 8012d10:	b2d0      	uxtb	r0, r2
 8012d12:	4a3c      	ldr	r2, [pc, #240]	; (8012e04 <readCanToStructs+0x2038>)
 8012d14:	f240 4116 	movw	r1, #1046	; 0x416
 8012d18:	fb01 f303 	mul.w	r3, r1, r3
 8012d1c:	4413      	add	r3, r2
 8012d1e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012d22:	4602      	mov	r2, r0
 8012d24:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012d26:	4b38      	ldr	r3, [pc, #224]	; (8012e08 <readCanToStructs+0x203c>)
 8012d28:	881b      	ldrh	r3, [r3, #0]
 8012d2a:	3304      	adds	r3, #4
 8012d2c:	b29a      	uxth	r2, r3
 8012d2e:	4b39      	ldr	r3, [pc, #228]	; (8012e14 <readCanToStructs+0x2048>)
 8012d30:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8012d32:	4b37      	ldr	r3, [pc, #220]	; (8012e10 <readCanToStructs+0x2044>)
 8012d34:	881a      	ldrh	r2, [r3, #0]
 8012d36:	4b37      	ldr	r3, [pc, #220]	; (8012e14 <readCanToStructs+0x2048>)
 8012d38:	881b      	ldrh	r3, [r3, #0]
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	f0c0 83c4 	bcc.w	80134c8 <readCanToStructs+0x26fc>
					if(Debug_flag == 1)
 8012d40:	4b36      	ldr	r3, [pc, #216]	; (8012e1c <readCanToStructs+0x2050>)
 8012d42:	781b      	ldrb	r3, [r3, #0]
 8012d44:	2b01      	cmp	r3, #1
 8012d46:	d102      	bne.n	8012d4e <readCanToStructs+0x1f82>
						printf("EI1 Relay Info Received\n");
 8012d48:	4835      	ldr	r0, [pc, #212]	; (8012e20 <readCanToStructs+0x2054>)
 8012d4a:	f012 ff23 	bl	8025b94 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8012d4e:	4a35      	ldr	r2, [pc, #212]	; (8012e24 <readCanToStructs+0x2058>)
 8012d50:	4b2d      	ldr	r3, [pc, #180]	; (8012e08 <readCanToStructs+0x203c>)
 8012d52:	4610      	mov	r0, r2
 8012d54:	4619      	mov	r1, r3
 8012d56:	f44f 7301 	mov.w	r3, #516	; 0x204
 8012d5a:	461a      	mov	r2, r3
 8012d5c:	f012 fd6e 	bl	802583c <memcpy>
					DataTraverser = 0;
 8012d60:	4b2b      	ldr	r3, [pc, #172]	; (8012e10 <readCanToStructs+0x2044>)
 8012d62:	2200      	movs	r2, #0
 8012d64:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8012d66:	4b2b      	ldr	r3, [pc, #172]	; (8012e14 <readCanToStructs+0x2048>)
 8012d68:	2200      	movs	r2, #0
 8012d6a:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012d6c:	4b2e      	ldr	r3, [pc, #184]	; (8012e28 <readCanToStructs+0x205c>)
 8012d6e:	2201      	movs	r2, #1
 8012d70:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012d72:	f005 ff5d 	bl	8018c30 <HAL_GetTick>
 8012d76:	4603      	mov	r3, r0
 8012d78:	4a2b      	ldr	r2, [pc, #172]	; (8012e28 <readCanToStructs+0x205c>)
 8012d7a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d80:	4a20      	ldr	r2, [pc, #128]	; (8012e04 <readCanToStructs+0x2038>)
 8012d82:	f240 4116 	movw	r1, #1046	; 0x416
 8012d86:	fb01 f303 	mul.w	r3, r1, r3
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012d90:	2200      	movs	r2, #0
 8012d92:	701a      	strb	r2, [r3, #0]
				break;
 8012d94:	e398      	b.n	80134c8 <readCanToStructs+0x26fc>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8012d96:	4b1c      	ldr	r3, [pc, #112]	; (8012e08 <readCanToStructs+0x203c>)
 8012d98:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012d9a:	4b1c      	ldr	r3, [pc, #112]	; (8012e0c <readCanToStructs+0x2040>)
 8012d9c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012da0:	885b      	ldrh	r3, [r3, #2]
 8012da2:	4a1a      	ldr	r2, [pc, #104]	; (8012e0c <readCanToStructs+0x2040>)
 8012da4:	011b      	lsls	r3, r3, #4
 8012da6:	4413      	add	r3, r2
 8012da8:	3304      	adds	r3, #4
 8012daa:	781b      	ldrb	r3, [r3, #0]
 8012dac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8012db0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d005      	beq.n	8012dc4 <readCanToStructs+0x1ff8>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8012db8:	4b15      	ldr	r3, [pc, #84]	; (8012e10 <readCanToStructs+0x2044>)
 8012dba:	881b      	ldrh	r3, [r3, #0]
 8012dbc:	461a      	mov	r2, r3
 8012dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012dc0:	4413      	add	r3, r2
 8012dc2:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8012dc4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d117      	bne.n	8012dfc <readCanToStructs+0x2030>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012dcc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012dd0:	2100      	movs	r1, #0
 8012dd2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012dd4:	f012 fd5a 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ddc:	4a09      	ldr	r2, [pc, #36]	; (8012e04 <readCanToStructs+0x2038>)
 8012dde:	f240 4116 	movw	r1, #1046	; 0x416
 8012de2:	fb01 f303 	mul.w	r3, r1, r3
 8012de6:	4413      	add	r3, r2
 8012de8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012dec:	2200      	movs	r2, #0
 8012dee:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012df0:	4b07      	ldr	r3, [pc, #28]	; (8012e10 <readCanToStructs+0x2044>)
 8012df2:	2200      	movs	r2, #0
 8012df4:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8012df6:	4b07      	ldr	r3, [pc, #28]	; (8012e14 <readCanToStructs+0x2048>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012dfc:	2301      	movs	r3, #1
 8012dfe:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e02:	e030      	b.n	8012e66 <readCanToStructs+0x209a>
 8012e04:	20006970 	.word	0x20006970
 8012e08:	200051ec 	.word	0x200051ec
 8012e0c:	2000719c 	.word	0x2000719c
 8012e10:	2000b2b4 	.word	0x2000b2b4
 8012e14:	2000b2b6 	.word	0x2000b2b6
 8012e18:	0802a508 	.word	0x0802a508
 8012e1c:	20000bbb 	.word	0x20000bbb
 8012e20:	0802a534 	.word	0x0802a534
 8012e24:	20004fe8 	.word	0x20004fe8
 8012e28:	20004bc4 	.word	0x20004bc4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012e2c:	4bbe      	ldr	r3, [pc, #760]	; (8013128 <readCanToStructs+0x235c>)
 8012e2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e32:	885b      	ldrh	r3, [r3, #2]
 8012e34:	461a      	mov	r2, r3
 8012e36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e3a:	49bb      	ldr	r1, [pc, #748]	; (8013128 <readCanToStructs+0x235c>)
 8012e3c:	0112      	lsls	r2, r2, #4
 8012e3e:	440a      	add	r2, r1
 8012e40:	4413      	add	r3, r2
 8012e42:	3304      	adds	r3, #4
 8012e44:	781a      	ldrb	r2, [r3, #0]
 8012e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e48:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e4c:	3301      	adds	r3, #1
 8012e4e:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8012e50:	4bb6      	ldr	r3, [pc, #728]	; (801312c <readCanToStructs+0x2360>)
 8012e52:	881b      	ldrh	r3, [r3, #0]
 8012e54:	3301      	adds	r3, #1
 8012e56:	b29a      	uxth	r2, r3
 8012e58:	4bb4      	ldr	r3, [pc, #720]	; (801312c <readCanToStructs+0x2360>)
 8012e5a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012e5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012e60:	3301      	adds	r3, #1
 8012e62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012e66:	4bb0      	ldr	r3, [pc, #704]	; (8013128 <readCanToStructs+0x235c>)
 8012e68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e6c:	885b      	ldrh	r3, [r3, #2]
 8012e6e:	4aae      	ldr	r2, [pc, #696]	; (8013128 <readCanToStructs+0x235c>)
 8012e70:	011b      	lsls	r3, r3, #4
 8012e72:	4413      	add	r3, r2
 8012e74:	330c      	adds	r3, #12
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d3d5      	bcc.n	8012e2c <readCanToStructs+0x2060>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e84:	4aaa      	ldr	r2, [pc, #680]	; (8013130 <readCanToStructs+0x2364>)
 8012e86:	f240 4116 	movw	r1, #1046	; 0x416
 8012e8a:	fb01 f303 	mul.w	r3, r1, r3
 8012e8e:	4413      	add	r3, r2
 8012e90:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e94:	781b      	ldrb	r3, [r3, #0]
 8012e96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d026      	beq.n	8012eec <readCanToStructs+0x2120>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8012e9e:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8012ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ea6:	4aa2      	ldr	r2, [pc, #648]	; (8013130 <readCanToStructs+0x2364>)
 8012ea8:	f240 4016 	movw	r0, #1046	; 0x416
 8012eac:	fb00 f303 	mul.w	r3, r0, r3
 8012eb0:	4413      	add	r3, r2
 8012eb2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012eb6:	781b      	ldrb	r3, [r3, #0]
 8012eb8:	461a      	mov	r2, r3
 8012eba:	489e      	ldr	r0, [pc, #632]	; (8013134 <readCanToStructs+0x2368>)
 8012ebc:	f012 fdce 	bl	8025a5c <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8012ec0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012ec4:	2100      	movs	r1, #0
 8012ec6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ec8:	f012 fce0 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012ecc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ed0:	4a97      	ldr	r2, [pc, #604]	; (8013130 <readCanToStructs+0x2364>)
 8012ed2:	f240 4116 	movw	r1, #1046	; 0x416
 8012ed6:	fb01 f303 	mul.w	r3, r1, r3
 8012eda:	4413      	add	r3, r2
 8012edc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012ee0:	2200      	movs	r2, #0
 8012ee2:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8012ee4:	4b91      	ldr	r3, [pc, #580]	; (801312c <readCanToStructs+0x2360>)
 8012ee6:	2200      	movs	r2, #0
 8012ee8:	801a      	strh	r2, [r3, #0]
					break;
 8012eea:	e2f0      	b.n	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012eec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ef0:	498f      	ldr	r1, [pc, #572]	; (8013130 <readCanToStructs+0x2364>)
 8012ef2:	f240 4216 	movw	r2, #1046	; 0x416
 8012ef6:	fb03 f202 	mul.w	r2, r3, r2
 8012efa:	440a      	add	r2, r1
 8012efc:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012f00:	7812      	ldrb	r2, [r2, #0]
 8012f02:	3201      	adds	r2, #1
 8012f04:	b2d0      	uxtb	r0, r2
 8012f06:	4a8a      	ldr	r2, [pc, #552]	; (8013130 <readCanToStructs+0x2364>)
 8012f08:	f240 4116 	movw	r1, #1046	; 0x416
 8012f0c:	fb01 f303 	mul.w	r3, r1, r3
 8012f10:	4413      	add	r3, r2
 8012f12:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f16:	4602      	mov	r2, r0
 8012f18:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8012f1a:	4b87      	ldr	r3, [pc, #540]	; (8013138 <readCanToStructs+0x236c>)
 8012f1c:	881b      	ldrh	r3, [r3, #0]
 8012f1e:	3304      	adds	r3, #4
 8012f20:	b29a      	uxth	r2, r3
 8012f22:	4b86      	ldr	r3, [pc, #536]	; (801313c <readCanToStructs+0x2370>)
 8012f24:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8012f26:	4b81      	ldr	r3, [pc, #516]	; (801312c <readCanToStructs+0x2360>)
 8012f28:	881a      	ldrh	r2, [r3, #0]
 8012f2a:	4b84      	ldr	r3, [pc, #528]	; (801313c <readCanToStructs+0x2370>)
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	f0c0 82cc 	bcc.w	80134cc <readCanToStructs+0x2700>
					if(Debug_flag == 1)
 8012f34:	4b82      	ldr	r3, [pc, #520]	; (8013140 <readCanToStructs+0x2374>)
 8012f36:	781b      	ldrb	r3, [r3, #0]
 8012f38:	2b01      	cmp	r3, #1
 8012f3a:	d102      	bne.n	8012f42 <readCanToStructs+0x2176>
						printf("EI2 Relay Info Received\n");
 8012f3c:	4881      	ldr	r0, [pc, #516]	; (8013144 <readCanToStructs+0x2378>)
 8012f3e:	f012 fe29 	bl	8025b94 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8012f42:	4a81      	ldr	r2, [pc, #516]	; (8013148 <readCanToStructs+0x237c>)
 8012f44:	4b7c      	ldr	r3, [pc, #496]	; (8013138 <readCanToStructs+0x236c>)
 8012f46:	4610      	mov	r0, r2
 8012f48:	4619      	mov	r1, r3
 8012f4a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8012f4e:	461a      	mov	r2, r3
 8012f50:	f012 fc74 	bl	802583c <memcpy>
					DataTraverser = 0;
 8012f54:	4b75      	ldr	r3, [pc, #468]	; (801312c <readCanToStructs+0x2360>)
 8012f56:	2200      	movs	r2, #0
 8012f58:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8012f5a:	4b78      	ldr	r3, [pc, #480]	; (801313c <readCanToStructs+0x2370>)
 8012f5c:	2200      	movs	r2, #0
 8012f5e:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012f60:	4b7a      	ldr	r3, [pc, #488]	; (801314c <readCanToStructs+0x2380>)
 8012f62:	2201      	movs	r2, #1
 8012f64:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012f66:	f005 fe63 	bl	8018c30 <HAL_GetTick>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	4a77      	ldr	r2, [pc, #476]	; (801314c <readCanToStructs+0x2380>)
 8012f6e:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f74:	4a6e      	ldr	r2, [pc, #440]	; (8013130 <readCanToStructs+0x2364>)
 8012f76:	f240 4116 	movw	r1, #1046	; 0x416
 8012f7a:	fb01 f303 	mul.w	r3, r1, r3
 8012f7e:	4413      	add	r3, r2
 8012f80:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012f84:	2200      	movs	r2, #0
 8012f86:	701a      	strb	r2, [r3, #0]
				break;
 8012f88:	e2a0      	b.n	80134cc <readCanToStructs+0x2700>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8012f8a:	4b71      	ldr	r3, [pc, #452]	; (8013150 <readCanToStructs+0x2384>)
 8012f8c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012f8e:	4b66      	ldr	r3, [pc, #408]	; (8013128 <readCanToStructs+0x235c>)
 8012f90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f94:	885b      	ldrh	r3, [r3, #2]
 8012f96:	4a64      	ldr	r2, [pc, #400]	; (8013128 <readCanToStructs+0x235c>)
 8012f98:	011b      	lsls	r3, r3, #4
 8012f9a:	4413      	add	r3, r2
 8012f9c:	3304      	adds	r3, #4
 8012f9e:	781b      	ldrb	r3, [r3, #0]
 8012fa0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012fa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d110      	bne.n	8012fce <readCanToStructs+0x2202>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012fac:	2208      	movs	r2, #8
 8012fae:	2100      	movs	r1, #0
 8012fb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012fb2:	f012 fc6b 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012fb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fba:	4a5d      	ldr	r2, [pc, #372]	; (8013130 <readCanToStructs+0x2364>)
 8012fbc:	f240 4116 	movw	r1, #1046	; 0x416
 8012fc0:	fb01 f303 	mul.w	r3, r1, r3
 8012fc4:	4413      	add	r3, r2
 8012fc6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012fca:	2200      	movs	r2, #0
 8012fcc:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fd2:	4a57      	ldr	r2, [pc, #348]	; (8013130 <readCanToStructs+0x2364>)
 8012fd4:	f240 4116 	movw	r1, #1046	; 0x416
 8012fd8:	fb01 f303 	mul.w	r3, r1, r3
 8012fdc:	4413      	add	r3, r2
 8012fde:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012fe2:	781b      	ldrb	r3, [r3, #0]
 8012fe4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012fe8:	429a      	cmp	r2, r3
 8012fea:	d014      	beq.n	8013016 <readCanToStructs+0x224a>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8012fec:	4859      	ldr	r0, [pc, #356]	; (8013154 <readCanToStructs+0x2388>)
 8012fee:	f012 fdd1 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8012ff2:	2208      	movs	r2, #8
 8012ff4:	2100      	movs	r1, #0
 8012ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012ff8:	f012 fc48 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013000:	4a4b      	ldr	r2, [pc, #300]	; (8013130 <readCanToStructs+0x2364>)
 8013002:	f240 4116 	movw	r1, #1046	; 0x416
 8013006:	fb01 f303 	mul.w	r3, r1, r3
 801300a:	4413      	add	r3, r2
 801300c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013010:	2200      	movs	r2, #0
 8013012:	701a      	strb	r2, [r3, #0]
					break;
 8013014:	e25b      	b.n	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013016:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801301a:	4613      	mov	r3, r2
 801301c:	00db      	lsls	r3, r3, #3
 801301e:	1a9b      	subs	r3, r3, r2
 8013020:	461a      	mov	r2, r3
 8013022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013024:	4413      	add	r3, r2
 8013026:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013028:	2301      	movs	r3, #1
 801302a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801302e:	e016      	b.n	801305e <readCanToStructs+0x2292>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013030:	4b3d      	ldr	r3, [pc, #244]	; (8013128 <readCanToStructs+0x235c>)
 8013032:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013036:	885b      	ldrh	r3, [r3, #2]
 8013038:	461a      	mov	r2, r3
 801303a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801303e:	493a      	ldr	r1, [pc, #232]	; (8013128 <readCanToStructs+0x235c>)
 8013040:	0112      	lsls	r2, r2, #4
 8013042:	440a      	add	r2, r1
 8013044:	4413      	add	r3, r2
 8013046:	3304      	adds	r3, #4
 8013048:	781a      	ldrb	r2, [r3, #0]
 801304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801304c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801304e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013050:	3301      	adds	r3, #1
 8013052:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013054:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013058:	3301      	adds	r3, #1
 801305a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801305e:	4b32      	ldr	r3, [pc, #200]	; (8013128 <readCanToStructs+0x235c>)
 8013060:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013064:	885b      	ldrh	r3, [r3, #2]
 8013066:	4a30      	ldr	r2, [pc, #192]	; (8013128 <readCanToStructs+0x235c>)
 8013068:	011b      	lsls	r3, r3, #4
 801306a:	4413      	add	r3, r2
 801306c:	330c      	adds	r3, #12
 801306e:	781b      	ldrb	r3, [r3, #0]
 8013070:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013074:	429a      	cmp	r2, r3
 8013076:	d3db      	bcc.n	8013030 <readCanToStructs+0x2264>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8013078:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801307c:	4a2c      	ldr	r2, [pc, #176]	; (8013130 <readCanToStructs+0x2364>)
 801307e:	f240 4116 	movw	r1, #1046	; 0x416
 8013082:	fb01 f303 	mul.w	r3, r1, r3
 8013086:	4413      	add	r3, r2
 8013088:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801308c:	781b      	ldrb	r3, [r3, #0]
 801308e:	461a      	mov	r2, r3
 8013090:	4613      	mov	r3, r2
 8013092:	00db      	lsls	r3, r3, #3
 8013094:	1a9a      	subs	r2, r3, r2
 8013096:	4b24      	ldr	r3, [pc, #144]	; (8013128 <readCanToStructs+0x235c>)
 8013098:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801309c:	885b      	ldrh	r3, [r3, #2]
 801309e:	4922      	ldr	r1, [pc, #136]	; (8013128 <readCanToStructs+0x235c>)
 80130a0:	011b      	lsls	r3, r3, #4
 80130a2:	440b      	add	r3, r1
 80130a4:	330c      	adds	r3, #12
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	3b01      	subs	r3, #1
 80130aa:	4413      	add	r3, r2
 80130ac:	2b07      	cmp	r3, #7
 80130ae:	d917      	bls.n	80130e0 <readCanToStructs+0x2314>
					printf("Received Fault Injection Data\n");
 80130b0:	4829      	ldr	r0, [pc, #164]	; (8013158 <readCanToStructs+0x238c>)
 80130b2:	f012 fd6f 	bl	8025b94 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80130b6:	4b25      	ldr	r3, [pc, #148]	; (801314c <readCanToStructs+0x2380>)
 80130b8:	2201      	movs	r2, #1
 80130ba:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80130bc:	f005 fdb8 	bl	8018c30 <HAL_GetTick>
 80130c0:	4603      	mov	r3, r0
 80130c2:	4a22      	ldr	r2, [pc, #136]	; (801314c <readCanToStructs+0x2380>)
 80130c4:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80130c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130ca:	4a19      	ldr	r2, [pc, #100]	; (8013130 <readCanToStructs+0x2364>)
 80130cc:	f240 4116 	movw	r1, #1046	; 0x416
 80130d0:	fb01 f303 	mul.w	r3, r1, r3
 80130d4:	4413      	add	r3, r2
 80130d6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80130da:	2200      	movs	r2, #0
 80130dc:	701a      	strb	r2, [r3, #0]
				break;
 80130de:	e1f6      	b.n	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80130e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130e4:	4a12      	ldr	r2, [pc, #72]	; (8013130 <readCanToStructs+0x2364>)
 80130e6:	f240 4116 	movw	r1, #1046	; 0x416
 80130ea:	fb01 f303 	mul.w	r3, r1, r3
 80130ee:	4413      	add	r3, r2
 80130f0:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80130f4:	2201      	movs	r2, #1
 80130f6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80130f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130fc:	490c      	ldr	r1, [pc, #48]	; (8013130 <readCanToStructs+0x2364>)
 80130fe:	f240 4216 	movw	r2, #1046	; 0x416
 8013102:	fb03 f202 	mul.w	r2, r3, r2
 8013106:	440a      	add	r2, r1
 8013108:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801310c:	7812      	ldrb	r2, [r2, #0]
 801310e:	3201      	adds	r2, #1
 8013110:	b2d0      	uxtb	r0, r2
 8013112:	4a07      	ldr	r2, [pc, #28]	; (8013130 <readCanToStructs+0x2364>)
 8013114:	f240 4116 	movw	r1, #1046	; 0x416
 8013118:	fb01 f303 	mul.w	r3, r1, r3
 801311c:	4413      	add	r3, r2
 801311e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013122:	4602      	mov	r2, r0
 8013124:	701a      	strb	r2, [r3, #0]
				break;
 8013126:	e1d2      	b.n	80134ce <readCanToStructs+0x2702>
 8013128:	2000719c 	.word	0x2000719c
 801312c:	2000b2b4 	.word	0x2000b2b4
 8013130:	20006970 	.word	0x20006970
 8013134:	0802a54c 	.word	0x0802a54c
 8013138:	200051ec 	.word	0x200051ec
 801313c:	2000b2b6 	.word	0x2000b2b6
 8013140:	20000bbb 	.word	0x20000bbb
 8013144:	0802a578 	.word	0x0802a578
 8013148:	20004fe8 	.word	0x20004fe8
 801314c:	20004bc4 	.word	0x20004bc4
 8013150:	20004bb0 	.word	0x20004bb0
 8013154:	0802a3d4 	.word	0x0802a3d4
 8013158:	0802a3f4 	.word	0x0802a3f4
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801315c:	4bbe      	ldr	r3, [pc, #760]	; (8013458 <readCanToStructs+0x268c>)
 801315e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013160:	4bbe      	ldr	r3, [pc, #760]	; (801345c <readCanToStructs+0x2690>)
 8013162:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013166:	885b      	ldrh	r3, [r3, #2]
 8013168:	4abc      	ldr	r2, [pc, #752]	; (801345c <readCanToStructs+0x2690>)
 801316a:	011b      	lsls	r3, r3, #4
 801316c:	4413      	add	r3, r2
 801316e:	3304      	adds	r3, #4
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013176:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801317a:	2b00      	cmp	r3, #0
 801317c:	d110      	bne.n	80131a0 <readCanToStructs+0x23d4>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801317e:	2202      	movs	r2, #2
 8013180:	2100      	movs	r1, #0
 8013182:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013184:	f012 fb82 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013188:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801318c:	4ab4      	ldr	r2, [pc, #720]	; (8013460 <readCanToStructs+0x2694>)
 801318e:	f240 4116 	movw	r1, #1046	; 0x416
 8013192:	fb01 f303 	mul.w	r3, r1, r3
 8013196:	4413      	add	r3, r2
 8013198:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801319c:	2200      	movs	r2, #0
 801319e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 80131a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131a4:	4aae      	ldr	r2, [pc, #696]	; (8013460 <readCanToStructs+0x2694>)
 80131a6:	f240 4116 	movw	r1, #1046	; 0x416
 80131aa:	fb01 f303 	mul.w	r3, r1, r3
 80131ae:	4413      	add	r3, r2
 80131b0:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80131b4:	781b      	ldrb	r3, [r3, #0]
 80131b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80131ba:	429a      	cmp	r2, r3
 80131bc:	d014      	beq.n	80131e8 <readCanToStructs+0x241c>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80131be:	48a9      	ldr	r0, [pc, #676]	; (8013464 <readCanToStructs+0x2698>)
 80131c0:	f012 fce8 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80131c4:	2202      	movs	r2, #2
 80131c6:	2100      	movs	r1, #0
 80131c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131ca:	f012 fb5f 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80131ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131d2:	4aa3      	ldr	r2, [pc, #652]	; (8013460 <readCanToStructs+0x2694>)
 80131d4:	f240 4116 	movw	r1, #1046	; 0x416
 80131d8:	fb01 f303 	mul.w	r3, r1, r3
 80131dc:	4413      	add	r3, r2
 80131de:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80131e2:	2200      	movs	r2, #0
 80131e4:	701a      	strb	r2, [r3, #0]
					break;
 80131e6:	e172      	b.n	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80131e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80131ec:	4613      	mov	r3, r2
 80131ee:	00db      	lsls	r3, r3, #3
 80131f0:	1a9b      	subs	r3, r3, r2
 80131f2:	461a      	mov	r2, r3
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	4413      	add	r3, r2
 80131f8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80131fa:	2301      	movs	r3, #1
 80131fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013200:	e016      	b.n	8013230 <readCanToStructs+0x2464>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013202:	4b96      	ldr	r3, [pc, #600]	; (801345c <readCanToStructs+0x2690>)
 8013204:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013208:	885b      	ldrh	r3, [r3, #2]
 801320a:	461a      	mov	r2, r3
 801320c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013210:	4992      	ldr	r1, [pc, #584]	; (801345c <readCanToStructs+0x2690>)
 8013212:	0112      	lsls	r2, r2, #4
 8013214:	440a      	add	r2, r1
 8013216:	4413      	add	r3, r2
 8013218:	3304      	adds	r3, #4
 801321a:	781a      	ldrb	r2, [r3, #0]
 801321c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801321e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013222:	3301      	adds	r3, #1
 8013224:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013226:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801322a:	3301      	adds	r3, #1
 801322c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013230:	4b8a      	ldr	r3, [pc, #552]	; (801345c <readCanToStructs+0x2690>)
 8013232:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013236:	885b      	ldrh	r3, [r3, #2]
 8013238:	4a88      	ldr	r2, [pc, #544]	; (801345c <readCanToStructs+0x2690>)
 801323a:	011b      	lsls	r3, r3, #4
 801323c:	4413      	add	r3, r2
 801323e:	330c      	adds	r3, #12
 8013240:	781b      	ldrb	r3, [r3, #0]
 8013242:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013246:	429a      	cmp	r2, r3
 8013248:	d3db      	bcc.n	8013202 <readCanToStructs+0x2436>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801324a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801324e:	4a84      	ldr	r2, [pc, #528]	; (8013460 <readCanToStructs+0x2694>)
 8013250:	f240 4116 	movw	r1, #1046	; 0x416
 8013254:	fb01 f303 	mul.w	r3, r1, r3
 8013258:	4413      	add	r3, r2
 801325a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	461a      	mov	r2, r3
 8013262:	4613      	mov	r3, r2
 8013264:	00db      	lsls	r3, r3, #3
 8013266:	1a9a      	subs	r2, r3, r2
 8013268:	4b7c      	ldr	r3, [pc, #496]	; (801345c <readCanToStructs+0x2690>)
 801326a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801326e:	885b      	ldrh	r3, [r3, #2]
 8013270:	497a      	ldr	r1, [pc, #488]	; (801345c <readCanToStructs+0x2690>)
 8013272:	011b      	lsls	r3, r3, #4
 8013274:	440b      	add	r3, r1
 8013276:	330c      	adds	r3, #12
 8013278:	781b      	ldrb	r3, [r3, #0]
 801327a:	3b01      	subs	r3, #1
 801327c:	4413      	add	r3, r2
 801327e:	2b01      	cmp	r3, #1
 8013280:	d919      	bls.n	80132b6 <readCanToStructs+0x24ea>
					if(Debug_flag == 1)
 8013282:	4b79      	ldr	r3, [pc, #484]	; (8013468 <readCanToStructs+0x269c>)
 8013284:	781b      	ldrb	r3, [r3, #0]
 8013286:	2b01      	cmp	r3, #1
 8013288:	d105      	bne.n	8013296 <readCanToStructs+0x24ca>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801328a:	4b73      	ldr	r3, [pc, #460]	; (8013458 <readCanToStructs+0x268c>)
 801328c:	881b      	ldrh	r3, [r3, #0]
 801328e:	4619      	mov	r1, r3
 8013290:	4876      	ldr	r0, [pc, #472]	; (801346c <readCanToStructs+0x26a0>)
 8013292:	f012 fbe3 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013296:	4b76      	ldr	r3, [pc, #472]	; (8013470 <readCanToStructs+0x26a4>)
 8013298:	2201      	movs	r2, #1
 801329a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801329c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132a0:	4a6f      	ldr	r2, [pc, #444]	; (8013460 <readCanToStructs+0x2694>)
 80132a2:	f240 4116 	movw	r1, #1046	; 0x416
 80132a6:	fb01 f303 	mul.w	r3, r1, r3
 80132aa:	4413      	add	r3, r2
 80132ac:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80132b0:	2200      	movs	r2, #0
 80132b2:	701a      	strb	r2, [r3, #0]
				break;
 80132b4:	e10b      	b.n	80134ce <readCanToStructs+0x2702>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80132b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132ba:	4a69      	ldr	r2, [pc, #420]	; (8013460 <readCanToStructs+0x2694>)
 80132bc:	f240 4116 	movw	r1, #1046	; 0x416
 80132c0:	fb01 f303 	mul.w	r3, r1, r3
 80132c4:	4413      	add	r3, r2
 80132c6:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80132ca:	2201      	movs	r2, #1
 80132cc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80132ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80132d2:	4963      	ldr	r1, [pc, #396]	; (8013460 <readCanToStructs+0x2694>)
 80132d4:	f240 4216 	movw	r2, #1046	; 0x416
 80132d8:	fb03 f202 	mul.w	r2, r3, r2
 80132dc:	440a      	add	r2, r1
 80132de:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80132e2:	7812      	ldrb	r2, [r2, #0]
 80132e4:	3201      	adds	r2, #1
 80132e6:	b2d0      	uxtb	r0, r2
 80132e8:	4a5d      	ldr	r2, [pc, #372]	; (8013460 <readCanToStructs+0x2694>)
 80132ea:	f240 4116 	movw	r1, #1046	; 0x416
 80132ee:	fb01 f303 	mul.w	r3, r1, r3
 80132f2:	4413      	add	r3, r2
 80132f4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80132f8:	4602      	mov	r2, r0
 80132fa:	701a      	strb	r2, [r3, #0]
				break;
 80132fc:	e0e7      	b.n	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80132fe:	4b56      	ldr	r3, [pc, #344]	; (8013458 <readCanToStructs+0x268c>)
 8013300:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013302:	4b56      	ldr	r3, [pc, #344]	; (801345c <readCanToStructs+0x2690>)
 8013304:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013308:	885b      	ldrh	r3, [r3, #2]
 801330a:	4a54      	ldr	r2, [pc, #336]	; (801345c <readCanToStructs+0x2690>)
 801330c:	011b      	lsls	r3, r3, #4
 801330e:	4413      	add	r3, r2
 8013310:	3304      	adds	r3, #4
 8013312:	781b      	ldrb	r3, [r3, #0]
 8013314:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013318:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801331c:	2b00      	cmp	r3, #0
 801331e:	d110      	bne.n	8013342 <readCanToStructs+0x2576>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013320:	2202      	movs	r2, #2
 8013322:	2100      	movs	r1, #0
 8013324:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013326:	f012 fab1 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801332a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332e:	4a4c      	ldr	r2, [pc, #304]	; (8013460 <readCanToStructs+0x2694>)
 8013330:	f240 4116 	movw	r1, #1046	; 0x416
 8013334:	fb01 f303 	mul.w	r3, r1, r3
 8013338:	4413      	add	r3, r2
 801333a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801333e:	2200      	movs	r2, #0
 8013340:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8013342:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013346:	4a46      	ldr	r2, [pc, #280]	; (8013460 <readCanToStructs+0x2694>)
 8013348:	f240 4116 	movw	r1, #1046	; 0x416
 801334c:	fb01 f303 	mul.w	r3, r1, r3
 8013350:	4413      	add	r3, r2
 8013352:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013356:	781b      	ldrb	r3, [r3, #0]
 8013358:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801335c:	429a      	cmp	r2, r3
 801335e:	d014      	beq.n	801338a <readCanToStructs+0x25be>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013360:	4844      	ldr	r0, [pc, #272]	; (8013474 <readCanToStructs+0x26a8>)
 8013362:	f012 fc17 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013366:	2202      	movs	r2, #2
 8013368:	2100      	movs	r1, #0
 801336a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801336c:	f012 fa8e 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013370:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013374:	4a3a      	ldr	r2, [pc, #232]	; (8013460 <readCanToStructs+0x2694>)
 8013376:	f240 4116 	movw	r1, #1046	; 0x416
 801337a:	fb01 f303 	mul.w	r3, r1, r3
 801337e:	4413      	add	r3, r2
 8013380:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013384:	2200      	movs	r2, #0
 8013386:	701a      	strb	r2, [r3, #0]
					break;
 8013388:	e0a1      	b.n	80134ce <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 801338a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801338e:	4613      	mov	r3, r2
 8013390:	00db      	lsls	r3, r3, #3
 8013392:	1a9b      	subs	r3, r3, r2
 8013394:	461a      	mov	r2, r3
 8013396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013398:	4413      	add	r3, r2
 801339a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801339c:	2301      	movs	r3, #1
 801339e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80133a2:	e016      	b.n	80133d2 <readCanToStructs+0x2606>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80133a4:	4b2d      	ldr	r3, [pc, #180]	; (801345c <readCanToStructs+0x2690>)
 80133a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80133aa:	885b      	ldrh	r3, [r3, #2]
 80133ac:	461a      	mov	r2, r3
 80133ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133b2:	492a      	ldr	r1, [pc, #168]	; (801345c <readCanToStructs+0x2690>)
 80133b4:	0112      	lsls	r2, r2, #4
 80133b6:	440a      	add	r2, r1
 80133b8:	4413      	add	r3, r2
 80133ba:	3304      	adds	r3, #4
 80133bc:	781a      	ldrb	r2, [r3, #0]
 80133be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	3301      	adds	r3, #1
 80133c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80133c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80133cc:	3301      	adds	r3, #1
 80133ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80133d2:	4b22      	ldr	r3, [pc, #136]	; (801345c <readCanToStructs+0x2690>)
 80133d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80133d8:	885b      	ldrh	r3, [r3, #2]
 80133da:	4a20      	ldr	r2, [pc, #128]	; (801345c <readCanToStructs+0x2690>)
 80133dc:	011b      	lsls	r3, r3, #4
 80133de:	4413      	add	r3, r2
 80133e0:	330c      	adds	r3, #12
 80133e2:	781b      	ldrb	r3, [r3, #0]
 80133e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80133e8:	429a      	cmp	r2, r3
 80133ea:	d3db      	bcc.n	80133a4 <readCanToStructs+0x25d8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80133ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80133f0:	4a1b      	ldr	r2, [pc, #108]	; (8013460 <readCanToStructs+0x2694>)
 80133f2:	f240 4116 	movw	r1, #1046	; 0x416
 80133f6:	fb01 f303 	mul.w	r3, r1, r3
 80133fa:	4413      	add	r3, r2
 80133fc:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013400:	781b      	ldrb	r3, [r3, #0]
 8013402:	461a      	mov	r2, r3
 8013404:	4613      	mov	r3, r2
 8013406:	00db      	lsls	r3, r3, #3
 8013408:	1a9a      	subs	r2, r3, r2
 801340a:	4b14      	ldr	r3, [pc, #80]	; (801345c <readCanToStructs+0x2690>)
 801340c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013410:	885b      	ldrh	r3, [r3, #2]
 8013412:	4912      	ldr	r1, [pc, #72]	; (801345c <readCanToStructs+0x2690>)
 8013414:	011b      	lsls	r3, r3, #4
 8013416:	440b      	add	r3, r1
 8013418:	330c      	adds	r3, #12
 801341a:	781b      	ldrb	r3, [r3, #0]
 801341c:	3b01      	subs	r3, #1
 801341e:	4413      	add	r3, r2
 8013420:	2b01      	cmp	r3, #1
 8013422:	d92b      	bls.n	801347c <readCanToStructs+0x26b0>
					if(Debug_flag == 1)
 8013424:	4b10      	ldr	r3, [pc, #64]	; (8013468 <readCanToStructs+0x269c>)
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	2b01      	cmp	r3, #1
 801342a:	d105      	bne.n	8013438 <readCanToStructs+0x266c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801342c:	4b0a      	ldr	r3, [pc, #40]	; (8013458 <readCanToStructs+0x268c>)
 801342e:	881b      	ldrh	r3, [r3, #0]
 8013430:	4619      	mov	r1, r3
 8013432:	4811      	ldr	r0, [pc, #68]	; (8013478 <readCanToStructs+0x26ac>)
 8013434:	f012 fb12 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8013438:	4b0d      	ldr	r3, [pc, #52]	; (8013470 <readCanToStructs+0x26a4>)
 801343a:	2201      	movs	r2, #1
 801343c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801343e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013442:	4a07      	ldr	r2, [pc, #28]	; (8013460 <readCanToStructs+0x2694>)
 8013444:	f240 4116 	movw	r1, #1046	; 0x416
 8013448:	fb01 f303 	mul.w	r3, r1, r3
 801344c:	4413      	add	r3, r2
 801344e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013452:	2200      	movs	r2, #0
 8013454:	701a      	strb	r2, [r3, #0]
				break;
 8013456:	e03a      	b.n	80134ce <readCanToStructs+0x2702>
 8013458:	20000bb8 	.word	0x20000bb8
 801345c:	2000719c 	.word	0x2000719c
 8013460:	20006970 	.word	0x20006970
 8013464:	0802a478 	.word	0x0802a478
 8013468:	20000bbb 	.word	0x20000bbb
 801346c:	0802a4a0 	.word	0x0802a4a0
 8013470:	2000030b 	.word	0x2000030b
 8013474:	0802a4b4 	.word	0x0802a4b4
 8013478:	0802a4dc 	.word	0x0802a4dc
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 801347c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013480:	4ab4      	ldr	r2, [pc, #720]	; (8013754 <readCanToStructs+0x2988>)
 8013482:	f240 4116 	movw	r1, #1046	; 0x416
 8013486:	fb01 f303 	mul.w	r3, r1, r3
 801348a:	4413      	add	r3, r2
 801348c:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8013490:	2201      	movs	r2, #1
 8013492:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8013494:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013498:	49ae      	ldr	r1, [pc, #696]	; (8013754 <readCanToStructs+0x2988>)
 801349a:	f240 4216 	movw	r2, #1046	; 0x416
 801349e:	fb03 f202 	mul.w	r2, r3, r2
 80134a2:	440a      	add	r2, r1
 80134a4:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80134a8:	7812      	ldrb	r2, [r2, #0]
 80134aa:	3201      	adds	r2, #1
 80134ac:	b2d0      	uxtb	r0, r2
 80134ae:	4aa9      	ldr	r2, [pc, #676]	; (8013754 <readCanToStructs+0x2988>)
 80134b0:	f240 4116 	movw	r1, #1046	; 0x416
 80134b4:	fb01 f303 	mul.w	r3, r1, r3
 80134b8:	4413      	add	r3, r2
 80134ba:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80134be:	4602      	mov	r2, r0
 80134c0:	701a      	strb	r2, [r3, #0]
				break;
 80134c2:	e004      	b.n	80134ce <readCanToStructs+0x2702>
				break;
 80134c4:	bf00      	nop
 80134c6:	e002      	b.n	80134ce <readCanToStructs+0x2702>
				break;
 80134c8:	bf00      	nop
 80134ca:	e000      	b.n	80134ce <readCanToStructs+0x2702>
				break;
 80134cc:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80134ce:	4ba2      	ldr	r3, [pc, #648]	; (8013758 <readCanToStructs+0x298c>)
 80134d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134d4:	885b      	ldrh	r3, [r3, #2]
 80134d6:	011b      	lsls	r3, r3, #4
 80134d8:	4a9f      	ldr	r2, [pc, #636]	; (8013758 <readCanToStructs+0x298c>)
 80134da:	4413      	add	r3, r2
 80134dc:	2210      	movs	r2, #16
 80134de:	2100      	movs	r1, #0
 80134e0:	4618      	mov	r0, r3
 80134e2:	f012 f9d3 	bl	802588c <memset>
			canRead.Out++;
 80134e6:	4b9c      	ldr	r3, [pc, #624]	; (8013758 <readCanToStructs+0x298c>)
 80134e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134ec:	885b      	ldrh	r3, [r3, #2]
 80134ee:	3301      	adds	r3, #1
 80134f0:	b29a      	uxth	r2, r3
 80134f2:	4b99      	ldr	r3, [pc, #612]	; (8013758 <readCanToStructs+0x298c>)
 80134f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134f8:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80134fa:	4b97      	ldr	r3, [pc, #604]	; (8013758 <readCanToStructs+0x298c>)
 80134fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013500:	885b      	ldrh	r3, [r3, #2]
 8013502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8013506:	d104      	bne.n	8013512 <readCanToStructs+0x2746>
			{
				canRead.Out = 0;
 8013508:	4b93      	ldr	r3, [pc, #588]	; (8013758 <readCanToStructs+0x298c>)
 801350a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801350e:	2200      	movs	r2, #0
 8013510:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8013512:	f7fd fc05 	bl	8010d20 <canDataReady>
 8013516:	4603      	mov	r3, r0
 8013518:	2b00      	cmp	r3, #0
 801351a:	f47e af7c 	bne.w	8012416 <readCanToStructs+0x164a>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 801351e:	f001 bd43 	b.w	8014fa8 <readCanToStructs+0x41dc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8013522:	4b8d      	ldr	r3, [pc, #564]	; (8013758 <readCanToStructs+0x298c>)
 8013524:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013528:	885b      	ldrh	r3, [r3, #2]
 801352a:	4a8b      	ldr	r2, [pc, #556]	; (8013758 <readCanToStructs+0x298c>)
 801352c:	011b      	lsls	r3, r3, #4
 801352e:	4413      	add	r3, r2
 8013530:	330f      	adds	r3, #15
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	3b01      	subs	r3, #1
 8013536:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 801353a:	4b87      	ldr	r3, [pc, #540]	; (8013758 <readCanToStructs+0x298c>)
 801353c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013540:	885b      	ldrh	r3, [r3, #2]
 8013542:	4a85      	ldr	r2, [pc, #532]	; (8013758 <readCanToStructs+0x298c>)
 8013544:	011b      	lsls	r3, r3, #4
 8013546:	4413      	add	r3, r2
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	f240 220a 	movw	r2, #522	; 0x20a
 801354e:	4293      	cmp	r3, r2
 8013550:	f201 8023 	bhi.w	801459a <readCanToStructs+0x37ce>
 8013554:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013558:	d80a      	bhi.n	8013570 <readCanToStructs+0x27a4>
 801355a:	f240 1203 	movw	r2, #259	; 0x103
 801355e:	4293      	cmp	r3, r2
 8013560:	d022      	beq.n	80135a8 <readCanToStructs+0x27dc>
 8013562:	f240 1209 	movw	r2, #265	; 0x109
 8013566:	4293      	cmp	r3, r2
 8013568:	f000 8102 	beq.w	8013770 <readCanToStructs+0x29a4>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 801356c:	f001 b815 	b.w	801459a <readCanToStructs+0x37ce>
 8013570:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013574:	2b09      	cmp	r3, #9
 8013576:	f201 8010 	bhi.w	801459a <readCanToStructs+0x37ce>
 801357a:	a201      	add	r2, pc, #4	; (adr r2, 8013580 <readCanToStructs+0x27b4>)
 801357c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013580:	0801391d 	.word	0x0801391d
 8013584:	08013b21 	.word	0x08013b21
 8013588:	0801459b 	.word	0x0801459b
 801358c:	0801459b 	.word	0x0801459b
 8013590:	08013d29 	.word	0x08013d29
 8013594:	0801459b 	.word	0x0801459b
 8013598:	08013ebb 	.word	0x08013ebb
 801359c:	08014089 	.word	0x08014089
 80135a0:	0801422f 	.word	0x0801422f
 80135a4:	080143f9 	.word	0x080143f9
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80135a8:	4b6c      	ldr	r3, [pc, #432]	; (801375c <readCanToStructs+0x2990>)
 80135aa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80135ac:	4b6a      	ldr	r3, [pc, #424]	; (8013758 <readCanToStructs+0x298c>)
 80135ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80135b2:	885b      	ldrh	r3, [r3, #2]
 80135b4:	4a68      	ldr	r2, [pc, #416]	; (8013758 <readCanToStructs+0x298c>)
 80135b6:	011b      	lsls	r3, r3, #4
 80135b8:	4413      	add	r3, r2
 80135ba:	3304      	adds	r3, #4
 80135bc:	781b      	ldrb	r3, [r3, #0]
 80135be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80135c2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d110      	bne.n	80135ec <readCanToStructs+0x2820>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80135ca:	2206      	movs	r2, #6
 80135cc:	2100      	movs	r1, #0
 80135ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80135d0:	f012 f95c 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80135d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135d8:	4a5e      	ldr	r2, [pc, #376]	; (8013754 <readCanToStructs+0x2988>)
 80135da:	f240 4116 	movw	r1, #1046	; 0x416
 80135de:	fb01 f303 	mul.w	r3, r1, r3
 80135e2:	4413      	add	r3, r2
 80135e4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80135e8:	2200      	movs	r2, #0
 80135ea:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80135ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135f0:	4a58      	ldr	r2, [pc, #352]	; (8013754 <readCanToStructs+0x2988>)
 80135f2:	f240 4116 	movw	r1, #1046	; 0x416
 80135f6:	fb01 f303 	mul.w	r3, r1, r3
 80135fa:	4413      	add	r3, r2
 80135fc:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013600:	781b      	ldrb	r3, [r3, #0]
 8013602:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013606:	429a      	cmp	r2, r3
 8013608:	d015      	beq.n	8013636 <readCanToStructs+0x286a>
					printf("GPS Packet Seq no MisMatch\n");
 801360a:	4855      	ldr	r0, [pc, #340]	; (8013760 <readCanToStructs+0x2994>)
 801360c:	f012 fac2 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013610:	2206      	movs	r2, #6
 8013612:	2100      	movs	r1, #0
 8013614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013616:	f012 f939 	bl	802588c <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801361a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801361e:	4a4d      	ldr	r2, [pc, #308]	; (8013754 <readCanToStructs+0x2988>)
 8013620:	f240 4116 	movw	r1, #1046	; 0x416
 8013624:	fb01 f303 	mul.w	r3, r1, r3
 8013628:	4413      	add	r3, r2
 801362a:	f203 2307 	addw	r3, r3, #519	; 0x207
 801362e:	2200      	movs	r2, #0
 8013630:	701a      	strb	r2, [r3, #0]
					break;
 8013632:	f000 bfb3 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013636:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801363a:	4613      	mov	r3, r2
 801363c:	00db      	lsls	r3, r3, #3
 801363e:	1a9b      	subs	r3, r3, r2
 8013640:	461a      	mov	r2, r3
 8013642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013644:	4413      	add	r3, r2
 8013646:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013648:	2301      	movs	r3, #1
 801364a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801364e:	e016      	b.n	801367e <readCanToStructs+0x28b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013650:	4b41      	ldr	r3, [pc, #260]	; (8013758 <readCanToStructs+0x298c>)
 8013652:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013656:	885b      	ldrh	r3, [r3, #2]
 8013658:	461a      	mov	r2, r3
 801365a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801365e:	493e      	ldr	r1, [pc, #248]	; (8013758 <readCanToStructs+0x298c>)
 8013660:	0112      	lsls	r2, r2, #4
 8013662:	440a      	add	r2, r1
 8013664:	4413      	add	r3, r2
 8013666:	3304      	adds	r3, #4
 8013668:	781a      	ldrb	r2, [r3, #0]
 801366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	3301      	adds	r3, #1
 8013672:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013674:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013678:	3301      	adds	r3, #1
 801367a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801367e:	4b36      	ldr	r3, [pc, #216]	; (8013758 <readCanToStructs+0x298c>)
 8013680:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013684:	885b      	ldrh	r3, [r3, #2]
 8013686:	4a34      	ldr	r2, [pc, #208]	; (8013758 <readCanToStructs+0x298c>)
 8013688:	011b      	lsls	r3, r3, #4
 801368a:	4413      	add	r3, r2
 801368c:	330c      	adds	r3, #12
 801368e:	781b      	ldrb	r3, [r3, #0]
 8013690:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013694:	429a      	cmp	r2, r3
 8013696:	d3db      	bcc.n	8013650 <readCanToStructs+0x2884>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801369c:	4a2d      	ldr	r2, [pc, #180]	; (8013754 <readCanToStructs+0x2988>)
 801369e:	f240 4116 	movw	r1, #1046	; 0x416
 80136a2:	fb01 f303 	mul.w	r3, r1, r3
 80136a6:	4413      	add	r3, r2
 80136a8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80136ac:	781b      	ldrb	r3, [r3, #0]
 80136ae:	461a      	mov	r2, r3
 80136b0:	4613      	mov	r3, r2
 80136b2:	00db      	lsls	r3, r3, #3
 80136b4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80136b6:	4b28      	ldr	r3, [pc, #160]	; (8013758 <readCanToStructs+0x298c>)
 80136b8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80136bc:	885b      	ldrh	r3, [r3, #2]
 80136be:	4926      	ldr	r1, [pc, #152]	; (8013758 <readCanToStructs+0x298c>)
 80136c0:	011b      	lsls	r3, r3, #4
 80136c2:	440b      	add	r3, r1
 80136c4:	330c      	adds	r3, #12
 80136c6:	781b      	ldrb	r3, [r3, #0]
 80136c8:	3b01      	subs	r3, #1
 80136ca:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80136cc:	2b05      	cmp	r3, #5
 80136ce:	d91c      	bls.n	801370a <readCanToStructs+0x293e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80136d0:	4b24      	ldr	r3, [pc, #144]	; (8013764 <readCanToStructs+0x2998>)
 80136d2:	4a22      	ldr	r2, [pc, #136]	; (801375c <readCanToStructs+0x2990>)
 80136d4:	6811      	ldr	r1, [r2, #0]
 80136d6:	6019      	str	r1, [r3, #0]
 80136d8:	8892      	ldrh	r2, [r2, #4]
 80136da:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80136dc:	4b22      	ldr	r3, [pc, #136]	; (8013768 <readCanToStructs+0x299c>)
 80136de:	781b      	ldrb	r3, [r3, #0]
 80136e0:	2b01      	cmp	r3, #1
 80136e2:	d102      	bne.n	80136ea <readCanToStructs+0x291e>
						printf("GPS_PACKET_RECEIVED\n");
 80136e4:	4821      	ldr	r0, [pc, #132]	; (801376c <readCanToStructs+0x29a0>)
 80136e6:	f012 fa55 	bl	8025b94 <puts>
					Write_RTC();
 80136ea:	f7f8 ff7b 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80136ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136f2:	4a18      	ldr	r2, [pc, #96]	; (8013754 <readCanToStructs+0x2988>)
 80136f4:	f240 4116 	movw	r1, #1046	; 0x416
 80136f8:	fb01 f303 	mul.w	r3, r1, r3
 80136fc:	4413      	add	r3, r2
 80136fe:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013702:	2200      	movs	r2, #0
 8013704:	701a      	strb	r2, [r3, #0]
				break;
 8013706:	f000 bf49 	b.w	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801370a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801370e:	4a11      	ldr	r2, [pc, #68]	; (8013754 <readCanToStructs+0x2988>)
 8013710:	f240 4116 	movw	r1, #1046	; 0x416
 8013714:	fb01 f303 	mul.w	r3, r1, r3
 8013718:	4413      	add	r3, r2
 801371a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801371e:	2201      	movs	r2, #1
 8013720:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8013722:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013726:	490b      	ldr	r1, [pc, #44]	; (8013754 <readCanToStructs+0x2988>)
 8013728:	f240 4216 	movw	r2, #1046	; 0x416
 801372c:	fb03 f202 	mul.w	r2, r3, r2
 8013730:	440a      	add	r2, r1
 8013732:	f202 2207 	addw	r2, r2, #519	; 0x207
 8013736:	7812      	ldrb	r2, [r2, #0]
 8013738:	3201      	adds	r2, #1
 801373a:	b2d0      	uxtb	r0, r2
 801373c:	4a05      	ldr	r2, [pc, #20]	; (8013754 <readCanToStructs+0x2988>)
 801373e:	f240 4116 	movw	r1, #1046	; 0x416
 8013742:	fb01 f303 	mul.w	r3, r1, r3
 8013746:	4413      	add	r3, r2
 8013748:	f203 2307 	addw	r3, r3, #519	; 0x207
 801374c:	4602      	mov	r2, r0
 801374e:	701a      	strb	r2, [r3, #0]
				break;
 8013750:	f000 bf24 	b.w	801459c <readCanToStructs+0x37d0>
 8013754:	20006970 	.word	0x20006970
 8013758:	2000719c 	.word	0x2000719c
 801375c:	20003f18 	.word	0x20003f18
 8013760:	0802a2a0 	.word	0x0802a2a0
 8013764:	20003f10 	.word	0x20003f10
 8013768:	20000bbb 	.word	0x20000bbb
 801376c:	0802a2bc 	.word	0x0802a2bc
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013770:	4b9d      	ldr	r3, [pc, #628]	; (80139e8 <readCanToStructs+0x2c1c>)
 8013772:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013774:	4b9d      	ldr	r3, [pc, #628]	; (80139ec <readCanToStructs+0x2c20>)
 8013776:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801377a:	885b      	ldrh	r3, [r3, #2]
 801377c:	4a9b      	ldr	r2, [pc, #620]	; (80139ec <readCanToStructs+0x2c20>)
 801377e:	011b      	lsls	r3, r3, #4
 8013780:	4413      	add	r3, r2
 8013782:	3304      	adds	r3, #4
 8013784:	781b      	ldrb	r3, [r3, #0]
 8013786:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801378a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801378e:	2b00      	cmp	r3, #0
 8013790:	d110      	bne.n	80137b4 <readCanToStructs+0x29e8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013792:	2206      	movs	r2, #6
 8013794:	2100      	movs	r1, #0
 8013796:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013798:	f012 f878 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801379c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137a0:	4a93      	ldr	r2, [pc, #588]	; (80139f0 <readCanToStructs+0x2c24>)
 80137a2:	f240 4116 	movw	r1, #1046	; 0x416
 80137a6:	fb01 f303 	mul.w	r3, r1, r3
 80137aa:	4413      	add	r3, r2
 80137ac:	f203 2313 	addw	r3, r3, #531	; 0x213
 80137b0:	2200      	movs	r2, #0
 80137b2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80137b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137b8:	4a8d      	ldr	r2, [pc, #564]	; (80139f0 <readCanToStructs+0x2c24>)
 80137ba:	f240 4116 	movw	r1, #1046	; 0x416
 80137be:	fb01 f303 	mul.w	r3, r1, r3
 80137c2:	4413      	add	r3, r2
 80137c4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80137c8:	781b      	ldrb	r3, [r3, #0]
 80137ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80137ce:	429a      	cmp	r2, r3
 80137d0:	d015      	beq.n	80137fe <readCanToStructs+0x2a32>
					printf("GPS2 Packet Seq no MisMatch\n");
 80137d2:	4888      	ldr	r0, [pc, #544]	; (80139f4 <readCanToStructs+0x2c28>)
 80137d4:	f012 f9de 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80137d8:	2206      	movs	r2, #6
 80137da:	2100      	movs	r1, #0
 80137dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137de:	f012 f855 	bl	802588c <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80137e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137e6:	4a82      	ldr	r2, [pc, #520]	; (80139f0 <readCanToStructs+0x2c24>)
 80137e8:	f240 4116 	movw	r1, #1046	; 0x416
 80137ec:	fb01 f303 	mul.w	r3, r1, r3
 80137f0:	4413      	add	r3, r2
 80137f2:	f203 2313 	addw	r3, r3, #531	; 0x213
 80137f6:	2200      	movs	r2, #0
 80137f8:	701a      	strb	r2, [r3, #0]
					break;
 80137fa:	f000 becf 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80137fe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013802:	4613      	mov	r3, r2
 8013804:	00db      	lsls	r3, r3, #3
 8013806:	1a9b      	subs	r3, r3, r2
 8013808:	461a      	mov	r2, r3
 801380a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380c:	4413      	add	r3, r2
 801380e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013810:	2301      	movs	r3, #1
 8013812:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013816:	e016      	b.n	8013846 <readCanToStructs+0x2a7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013818:	4b74      	ldr	r3, [pc, #464]	; (80139ec <readCanToStructs+0x2c20>)
 801381a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801381e:	885b      	ldrh	r3, [r3, #2]
 8013820:	461a      	mov	r2, r3
 8013822:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013826:	4971      	ldr	r1, [pc, #452]	; (80139ec <readCanToStructs+0x2c20>)
 8013828:	0112      	lsls	r2, r2, #4
 801382a:	440a      	add	r2, r1
 801382c:	4413      	add	r3, r2
 801382e:	3304      	adds	r3, #4
 8013830:	781a      	ldrb	r2, [r3, #0]
 8013832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013834:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013838:	3301      	adds	r3, #1
 801383a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801383c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013840:	3301      	adds	r3, #1
 8013842:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013846:	4b69      	ldr	r3, [pc, #420]	; (80139ec <readCanToStructs+0x2c20>)
 8013848:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801384c:	885b      	ldrh	r3, [r3, #2]
 801384e:	4a67      	ldr	r2, [pc, #412]	; (80139ec <readCanToStructs+0x2c20>)
 8013850:	011b      	lsls	r3, r3, #4
 8013852:	4413      	add	r3, r2
 8013854:	330c      	adds	r3, #12
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801385c:	429a      	cmp	r2, r3
 801385e:	d3db      	bcc.n	8013818 <readCanToStructs+0x2a4c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013864:	4a62      	ldr	r2, [pc, #392]	; (80139f0 <readCanToStructs+0x2c24>)
 8013866:	f240 4116 	movw	r1, #1046	; 0x416
 801386a:	fb01 f303 	mul.w	r3, r1, r3
 801386e:	4413      	add	r3, r2
 8013870:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	461a      	mov	r2, r3
 8013878:	4613      	mov	r3, r2
 801387a:	00db      	lsls	r3, r3, #3
 801387c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801387e:	4b5b      	ldr	r3, [pc, #364]	; (80139ec <readCanToStructs+0x2c20>)
 8013880:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013884:	885b      	ldrh	r3, [r3, #2]
 8013886:	4959      	ldr	r1, [pc, #356]	; (80139ec <readCanToStructs+0x2c20>)
 8013888:	011b      	lsls	r3, r3, #4
 801388a:	440b      	add	r3, r1
 801388c:	330c      	adds	r3, #12
 801388e:	781b      	ldrb	r3, [r3, #0]
 8013890:	3b01      	subs	r3, #1
 8013892:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013894:	2b05      	cmp	r3, #5
 8013896:	d91c      	bls.n	80138d2 <readCanToStructs+0x2b06>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013898:	4b57      	ldr	r3, [pc, #348]	; (80139f8 <readCanToStructs+0x2c2c>)
 801389a:	4a53      	ldr	r2, [pc, #332]	; (80139e8 <readCanToStructs+0x2c1c>)
 801389c:	6811      	ldr	r1, [r2, #0]
 801389e:	6019      	str	r1, [r3, #0]
 80138a0:	8892      	ldrh	r2, [r2, #4]
 80138a2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80138a4:	4b55      	ldr	r3, [pc, #340]	; (80139fc <readCanToStructs+0x2c30>)
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d102      	bne.n	80138b2 <readCanToStructs+0x2ae6>
						printf("GPS2_PACKET_RECEIVED\n");
 80138ac:	4854      	ldr	r0, [pc, #336]	; (8013a00 <readCanToStructs+0x2c34>)
 80138ae:	f012 f971 	bl	8025b94 <puts>
					Write_RTC();
 80138b2:	f7f8 fe97 	bl	800c5e4 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80138b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138ba:	4a4d      	ldr	r2, [pc, #308]	; (80139f0 <readCanToStructs+0x2c24>)
 80138bc:	f240 4116 	movw	r1, #1046	; 0x416
 80138c0:	fb01 f303 	mul.w	r3, r1, r3
 80138c4:	4413      	add	r3, r2
 80138c6:	f203 2313 	addw	r3, r3, #531	; 0x213
 80138ca:	2200      	movs	r2, #0
 80138cc:	701a      	strb	r2, [r3, #0]
				break;
 80138ce:	f000 be65 	b.w	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80138d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138d6:	4a46      	ldr	r2, [pc, #280]	; (80139f0 <readCanToStructs+0x2c24>)
 80138d8:	f240 4116 	movw	r1, #1046	; 0x416
 80138dc:	fb01 f303 	mul.w	r3, r1, r3
 80138e0:	4413      	add	r3, r2
 80138e2:	f203 2312 	addw	r3, r3, #530	; 0x212
 80138e6:	2201      	movs	r2, #1
 80138e8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 80138ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138ee:	4940      	ldr	r1, [pc, #256]	; (80139f0 <readCanToStructs+0x2c24>)
 80138f0:	f240 4216 	movw	r2, #1046	; 0x416
 80138f4:	fb03 f202 	mul.w	r2, r3, r2
 80138f8:	440a      	add	r2, r1
 80138fa:	f202 2213 	addw	r2, r2, #531	; 0x213
 80138fe:	7812      	ldrb	r2, [r2, #0]
 8013900:	3201      	adds	r2, #1
 8013902:	b2d0      	uxtb	r0, r2
 8013904:	4a3a      	ldr	r2, [pc, #232]	; (80139f0 <readCanToStructs+0x2c24>)
 8013906:	f240 4116 	movw	r1, #1046	; 0x416
 801390a:	fb01 f303 	mul.w	r3, r1, r3
 801390e:	4413      	add	r3, r2
 8013910:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013914:	4602      	mov	r2, r0
 8013916:	701a      	strb	r2, [r3, #0]
				break;
 8013918:	f000 be40 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 801391c:	4b39      	ldr	r3, [pc, #228]	; (8013a04 <readCanToStructs+0x2c38>)
 801391e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013920:	4b32      	ldr	r3, [pc, #200]	; (80139ec <readCanToStructs+0x2c20>)
 8013922:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013926:	885b      	ldrh	r3, [r3, #2]
 8013928:	4a30      	ldr	r2, [pc, #192]	; (80139ec <readCanToStructs+0x2c20>)
 801392a:	011b      	lsls	r3, r3, #4
 801392c:	4413      	add	r3, r2
 801392e:	3304      	adds	r3, #4
 8013930:	781b      	ldrb	r3, [r3, #0]
 8013932:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013936:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801393a:	2b00      	cmp	r3, #0
 801393c:	d110      	bne.n	8013960 <readCanToStructs+0x2b94>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 801393e:	2208      	movs	r2, #8
 8013940:	2100      	movs	r1, #0
 8013942:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013944:	f011 ffa2 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013948:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801394c:	4a28      	ldr	r2, [pc, #160]	; (80139f0 <readCanToStructs+0x2c24>)
 801394e:	f240 4116 	movw	r1, #1046	; 0x416
 8013952:	fb01 f303 	mul.w	r3, r1, r3
 8013956:	4413      	add	r3, r2
 8013958:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801395c:	2200      	movs	r2, #0
 801395e:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8013960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013964:	4a22      	ldr	r2, [pc, #136]	; (80139f0 <readCanToStructs+0x2c24>)
 8013966:	f240 4116 	movw	r1, #1046	; 0x416
 801396a:	fb01 f303 	mul.w	r3, r1, r3
 801396e:	4413      	add	r3, r2
 8013970:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013974:	781b      	ldrb	r3, [r3, #0]
 8013976:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801397a:	429a      	cmp	r2, r3
 801397c:	d026      	beq.n	80139cc <readCanToStructs+0x2c00>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 801397e:	4822      	ldr	r0, [pc, #136]	; (8013a08 <readCanToStructs+0x2c3c>)
 8013980:	f012 f908 	bl	8025b94 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 8013984:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801398c:	4a18      	ldr	r2, [pc, #96]	; (80139f0 <readCanToStructs+0x2c24>)
 801398e:	f240 4016 	movw	r0, #1046	; 0x416
 8013992:	fb00 f303 	mul.w	r3, r0, r3
 8013996:	4413      	add	r3, r2
 8013998:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801399c:	781b      	ldrb	r3, [r3, #0]
 801399e:	461a      	mov	r2, r3
 80139a0:	481a      	ldr	r0, [pc, #104]	; (8013a0c <readCanToStructs+0x2c40>)
 80139a2:	f012 f85b 	bl	8025a5c <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80139a6:	2208      	movs	r2, #8
 80139a8:	2100      	movs	r1, #0
 80139aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139ac:	f011 ff6e 	bl	802588c <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80139b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80139b4:	4a0e      	ldr	r2, [pc, #56]	; (80139f0 <readCanToStructs+0x2c24>)
 80139b6:	f240 4116 	movw	r1, #1046	; 0x416
 80139ba:	fb01 f303 	mul.w	r3, r1, r3
 80139be:	4413      	add	r3, r2
 80139c0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80139c4:	2200      	movs	r2, #0
 80139c6:	701a      	strb	r2, [r3, #0]
					break;
 80139c8:	f000 bde8 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80139cc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80139d0:	4613      	mov	r3, r2
 80139d2:	00db      	lsls	r3, r3, #3
 80139d4:	1a9b      	subs	r3, r3, r2
 80139d6:	461a      	mov	r2, r3
 80139d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139da:	4413      	add	r3, r2
 80139dc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80139de:	2301      	movs	r3, #1
 80139e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80139e4:	e02b      	b.n	8013a3e <readCanToStructs+0x2c72>
 80139e6:	bf00      	nop
 80139e8:	20003f18 	.word	0x20003f18
 80139ec:	2000719c 	.word	0x2000719c
 80139f0:	20006970 	.word	0x20006970
 80139f4:	0802a2d0 	.word	0x0802a2d0
 80139f8:	20003f10 	.word	0x20003f10
 80139fc:	20000bbb 	.word	0x20000bbb
 8013a00:	0802a2ec 	.word	0x0802a2ec
 8013a04:	20003d58 	.word	0x20003d58
 8013a08:	0802a590 	.word	0x0802a590
 8013a0c:	0802a5b8 	.word	0x0802a5b8
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013a10:	4bba      	ldr	r3, [pc, #744]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a12:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a16:	885b      	ldrh	r3, [r3, #2]
 8013a18:	461a      	mov	r2, r3
 8013a1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a1e:	49b7      	ldr	r1, [pc, #732]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a20:	0112      	lsls	r2, r2, #4
 8013a22:	440a      	add	r2, r1
 8013a24:	4413      	add	r3, r2
 8013a26:	3304      	adds	r3, #4
 8013a28:	781a      	ldrb	r2, [r3, #0]
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a30:	3301      	adds	r3, #1
 8013a32:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013a34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013a38:	3301      	adds	r3, #1
 8013a3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013a3e:	4baf      	ldr	r3, [pc, #700]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a44:	885b      	ldrh	r3, [r3, #2]
 8013a46:	4aad      	ldr	r2, [pc, #692]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a48:	011b      	lsls	r3, r3, #4
 8013a4a:	4413      	add	r3, r2
 8013a4c:	330c      	adds	r3, #12
 8013a4e:	781b      	ldrb	r3, [r3, #0]
 8013a50:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013a54:	429a      	cmp	r2, r3
 8013a56:	d3db      	bcc.n	8013a10 <readCanToStructs+0x2c44>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8013a58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a5c:	4aa8      	ldr	r2, [pc, #672]	; (8013d00 <readCanToStructs+0x2f34>)
 8013a5e:	f240 4116 	movw	r1, #1046	; 0x416
 8013a62:	fb01 f303 	mul.w	r3, r1, r3
 8013a66:	4413      	add	r3, r2
 8013a68:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013a6c:	781b      	ldrb	r3, [r3, #0]
 8013a6e:	461a      	mov	r2, r3
 8013a70:	4613      	mov	r3, r2
 8013a72:	00db      	lsls	r3, r3, #3
 8013a74:	1a9a      	subs	r2, r3, r2
 8013a76:	4ba1      	ldr	r3, [pc, #644]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a7c:	885b      	ldrh	r3, [r3, #2]
 8013a7e:	499f      	ldr	r1, [pc, #636]	; (8013cfc <readCanToStructs+0x2f30>)
 8013a80:	011b      	lsls	r3, r3, #4
 8013a82:	440b      	add	r3, r1
 8013a84:	330c      	adds	r3, #12
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	3b01      	subs	r3, #1
 8013a8a:	4413      	add	r3, r2
 8013a8c:	2b07      	cmp	r3, #7
 8013a8e:	d922      	bls.n	8013ad6 <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 8013a90:	4b9c      	ldr	r3, [pc, #624]	; (8013d04 <readCanToStructs+0x2f38>)
 8013a92:	781b      	ldrb	r3, [r3, #0]
 8013a94:	2b01      	cmp	r3, #1
 8013a96:	d102      	bne.n	8013a9e <readCanToStructs+0x2cd2>
						printf("\nRCV OTH_INFO1\n");
 8013a98:	489b      	ldr	r0, [pc, #620]	; (8013d08 <readCanToStructs+0x2f3c>)
 8013a9a:	f012 f87b 	bl	8025b94 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013a9e:	4b9b      	ldr	r3, [pc, #620]	; (8013d0c <readCanToStructs+0x2f40>)
 8013aa0:	4a9b      	ldr	r2, [pc, #620]	; (8013d10 <readCanToStructs+0x2f44>)
 8013aa2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013aa6:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013aaa:	4b9a      	ldr	r3, [pc, #616]	; (8013d14 <readCanToStructs+0x2f48>)
 8013aac:	2201      	movs	r2, #1
 8013aae:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013ab0:	f005 f8be 	bl	8018c30 <HAL_GetTick>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	4a98      	ldr	r2, [pc, #608]	; (8013d18 <readCanToStructs+0x2f4c>)
 8013ab8:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013aba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013abe:	4a90      	ldr	r2, [pc, #576]	; (8013d00 <readCanToStructs+0x2f34>)
 8013ac0:	f240 4116 	movw	r1, #1046	; 0x416
 8013ac4:	fb01 f303 	mul.w	r3, r1, r3
 8013ac8:	4413      	add	r3, r2
 8013aca:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013ace:	2200      	movs	r2, #0
 8013ad0:	701a      	strb	r2, [r3, #0]
				break;
 8013ad2:	f000 bd63 	b.w	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8013ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ada:	4a89      	ldr	r2, [pc, #548]	; (8013d00 <readCanToStructs+0x2f34>)
 8013adc:	f240 4116 	movw	r1, #1046	; 0x416
 8013ae0:	fb01 f303 	mul.w	r3, r1, r3
 8013ae4:	4413      	add	r3, r2
 8013ae6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013aea:	2201      	movs	r2, #1
 8013aec:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8013aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013af2:	4983      	ldr	r1, [pc, #524]	; (8013d00 <readCanToStructs+0x2f34>)
 8013af4:	f240 4216 	movw	r2, #1046	; 0x416
 8013af8:	fb03 f202 	mul.w	r2, r3, r2
 8013afc:	440a      	add	r2, r1
 8013afe:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8013b02:	7812      	ldrb	r2, [r2, #0]
 8013b04:	3201      	adds	r2, #1
 8013b06:	b2d0      	uxtb	r0, r2
 8013b08:	4a7d      	ldr	r2, [pc, #500]	; (8013d00 <readCanToStructs+0x2f34>)
 8013b0a:	f240 4116 	movw	r1, #1046	; 0x416
 8013b0e:	fb01 f303 	mul.w	r3, r1, r3
 8013b12:	4413      	add	r3, r2
 8013b14:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013b18:	4602      	mov	r2, r0
 8013b1a:	701a      	strb	r2, [r3, #0]
				break;
 8013b1c:	f000 bd3e 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8013b20:	4b7b      	ldr	r3, [pc, #492]	; (8013d10 <readCanToStructs+0x2f44>)
 8013b22:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013b24:	4b75      	ldr	r3, [pc, #468]	; (8013cfc <readCanToStructs+0x2f30>)
 8013b26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b2a:	885b      	ldrh	r3, [r3, #2]
 8013b2c:	4a73      	ldr	r2, [pc, #460]	; (8013cfc <readCanToStructs+0x2f30>)
 8013b2e:	011b      	lsls	r3, r3, #4
 8013b30:	4413      	add	r3, r2
 8013b32:	3304      	adds	r3, #4
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013b3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d110      	bne.n	8013b64 <readCanToStructs+0x2d98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013b42:	2208      	movs	r2, #8
 8013b44:	2100      	movs	r1, #0
 8013b46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b48:	f011 fea0 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b50:	4a6b      	ldr	r2, [pc, #428]	; (8013d00 <readCanToStructs+0x2f34>)
 8013b52:	f240 4116 	movw	r1, #1046	; 0x416
 8013b56:	fb01 f303 	mul.w	r3, r1, r3
 8013b5a:	4413      	add	r3, r2
 8013b5c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013b60:	2200      	movs	r2, #0
 8013b62:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8013b64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b68:	4a65      	ldr	r2, [pc, #404]	; (8013d00 <readCanToStructs+0x2f34>)
 8013b6a:	f240 4116 	movw	r1, #1046	; 0x416
 8013b6e:	fb01 f303 	mul.w	r3, r1, r3
 8013b72:	4413      	add	r3, r2
 8013b74:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013b78:	781b      	ldrb	r3, [r3, #0]
 8013b7a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d026      	beq.n	8013bd0 <readCanToStructs+0x2e04>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 8013b82:	4866      	ldr	r0, [pc, #408]	; (8013d1c <readCanToStructs+0x2f50>)
 8013b84:	f012 f806 	bl	8025b94 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 8013b88:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b90:	4a5b      	ldr	r2, [pc, #364]	; (8013d00 <readCanToStructs+0x2f34>)
 8013b92:	f240 4016 	movw	r0, #1046	; 0x416
 8013b96:	fb00 f303 	mul.w	r3, r0, r3
 8013b9a:	4413      	add	r3, r2
 8013b9c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013ba0:	781b      	ldrb	r3, [r3, #0]
 8013ba2:	461a      	mov	r2, r3
 8013ba4:	485e      	ldr	r0, [pc, #376]	; (8013d20 <readCanToStructs+0x2f54>)
 8013ba6:	f011 ff59 	bl	8025a5c <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013baa:	2208      	movs	r2, #8
 8013bac:	2100      	movs	r1, #0
 8013bae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bb0:	f011 fe6c 	bl	802588c <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bb8:	4a51      	ldr	r2, [pc, #324]	; (8013d00 <readCanToStructs+0x2f34>)
 8013bba:	f240 4116 	movw	r1, #1046	; 0x416
 8013bbe:	fb01 f303 	mul.w	r3, r1, r3
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013bc8:	2200      	movs	r2, #0
 8013bca:	701a      	strb	r2, [r3, #0]
					break;
 8013bcc:	f000 bce6 	b.w	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013bd0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	00db      	lsls	r3, r3, #3
 8013bd8:	1a9b      	subs	r3, r3, r2
 8013bda:	461a      	mov	r2, r3
 8013bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bde:	4413      	add	r3, r2
 8013be0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013be2:	2301      	movs	r3, #1
 8013be4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013be8:	e016      	b.n	8013c18 <readCanToStructs+0x2e4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013bea:	4b44      	ldr	r3, [pc, #272]	; (8013cfc <readCanToStructs+0x2f30>)
 8013bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013bf0:	885b      	ldrh	r3, [r3, #2]
 8013bf2:	461a      	mov	r2, r3
 8013bf4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013bf8:	4940      	ldr	r1, [pc, #256]	; (8013cfc <readCanToStructs+0x2f30>)
 8013bfa:	0112      	lsls	r2, r2, #4
 8013bfc:	440a      	add	r2, r1
 8013bfe:	4413      	add	r3, r2
 8013c00:	3304      	adds	r3, #4
 8013c02:	781a      	ldrb	r2, [r3, #0]
 8013c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c06:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0a:	3301      	adds	r3, #1
 8013c0c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013c0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013c12:	3301      	adds	r3, #1
 8013c14:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013c18:	4b38      	ldr	r3, [pc, #224]	; (8013cfc <readCanToStructs+0x2f30>)
 8013c1a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c1e:	885b      	ldrh	r3, [r3, #2]
 8013c20:	4a36      	ldr	r2, [pc, #216]	; (8013cfc <readCanToStructs+0x2f30>)
 8013c22:	011b      	lsls	r3, r3, #4
 8013c24:	4413      	add	r3, r2
 8013c26:	330c      	adds	r3, #12
 8013c28:	781b      	ldrb	r3, [r3, #0]
 8013c2a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d3db      	bcc.n	8013bea <readCanToStructs+0x2e1e>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8013c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c36:	4a32      	ldr	r2, [pc, #200]	; (8013d00 <readCanToStructs+0x2f34>)
 8013c38:	f240 4116 	movw	r1, #1046	; 0x416
 8013c3c:	fb01 f303 	mul.w	r3, r1, r3
 8013c40:	4413      	add	r3, r2
 8013c42:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013c46:	781b      	ldrb	r3, [r3, #0]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	00db      	lsls	r3, r3, #3
 8013c4e:	1a9a      	subs	r2, r3, r2
 8013c50:	4b2a      	ldr	r3, [pc, #168]	; (8013cfc <readCanToStructs+0x2f30>)
 8013c52:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c56:	885b      	ldrh	r3, [r3, #2]
 8013c58:	4928      	ldr	r1, [pc, #160]	; (8013cfc <readCanToStructs+0x2f30>)
 8013c5a:	011b      	lsls	r3, r3, #4
 8013c5c:	440b      	add	r3, r1
 8013c5e:	330c      	adds	r3, #12
 8013c60:	781b      	ldrb	r3, [r3, #0]
 8013c62:	3b01      	subs	r3, #1
 8013c64:	4413      	add	r3, r2
 8013c66:	2b07      	cmp	r3, #7
 8013c68:	d922      	bls.n	8013cb0 <readCanToStructs+0x2ee4>
					if(Debug_flag == 1)
 8013c6a:	4b26      	ldr	r3, [pc, #152]	; (8013d04 <readCanToStructs+0x2f38>)
 8013c6c:	781b      	ldrb	r3, [r3, #0]
 8013c6e:	2b01      	cmp	r3, #1
 8013c70:	d102      	bne.n	8013c78 <readCanToStructs+0x2eac>
						printf("\nRCV OTH_INFO2\n");
 8013c72:	482c      	ldr	r0, [pc, #176]	; (8013d24 <readCanToStructs+0x2f58>)
 8013c74:	f011 ff8e 	bl	8025b94 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013c78:	4b24      	ldr	r3, [pc, #144]	; (8013d0c <readCanToStructs+0x2f40>)
 8013c7a:	4a25      	ldr	r2, [pc, #148]	; (8013d10 <readCanToStructs+0x2f44>)
 8013c7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013c80:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013c84:	4b23      	ldr	r3, [pc, #140]	; (8013d14 <readCanToStructs+0x2f48>)
 8013c86:	2201      	movs	r2, #1
 8013c88:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013c8a:	f004 ffd1 	bl	8018c30 <HAL_GetTick>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	4a21      	ldr	r2, [pc, #132]	; (8013d18 <readCanToStructs+0x2f4c>)
 8013c92:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013c94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c98:	4a19      	ldr	r2, [pc, #100]	; (8013d00 <readCanToStructs+0x2f34>)
 8013c9a:	f240 4116 	movw	r1, #1046	; 0x416
 8013c9e:	fb01 f303 	mul.w	r3, r1, r3
 8013ca2:	4413      	add	r3, r2
 8013ca4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013ca8:	2200      	movs	r2, #0
 8013caa:	701a      	strb	r2, [r3, #0]
				break;
 8013cac:	f000 bc76 	b.w	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8013cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013cb4:	4a12      	ldr	r2, [pc, #72]	; (8013d00 <readCanToStructs+0x2f34>)
 8013cb6:	f240 4116 	movw	r1, #1046	; 0x416
 8013cba:	fb01 f303 	mul.w	r3, r1, r3
 8013cbe:	4413      	add	r3, r2
 8013cc0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8013cc4:	2201      	movs	r2, #1
 8013cc6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8013cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ccc:	490c      	ldr	r1, [pc, #48]	; (8013d00 <readCanToStructs+0x2f34>)
 8013cce:	f240 4216 	movw	r2, #1046	; 0x416
 8013cd2:	fb03 f202 	mul.w	r2, r3, r2
 8013cd6:	440a      	add	r2, r1
 8013cd8:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013cdc:	7812      	ldrb	r2, [r2, #0]
 8013cde:	3201      	adds	r2, #1
 8013ce0:	b2d0      	uxtb	r0, r2
 8013ce2:	4a07      	ldr	r2, [pc, #28]	; (8013d00 <readCanToStructs+0x2f34>)
 8013ce4:	f240 4116 	movw	r1, #1046	; 0x416
 8013ce8:	fb01 f303 	mul.w	r3, r1, r3
 8013cec:	4413      	add	r3, r2
 8013cee:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8013cf2:	4602      	mov	r2, r0
 8013cf4:	701a      	strb	r2, [r3, #0]
				break;
 8013cf6:	f000 bc51 	b.w	801459c <readCanToStructs+0x37d0>
 8013cfa:	bf00      	nop
 8013cfc:	2000719c 	.word	0x2000719c
 8013d00:	20006970 	.word	0x20006970
 8013d04:	20000bbb 	.word	0x20000bbb
 8013d08:	0802a5c8 	.word	0x0802a5c8
 8013d0c:	20003d50 	.word	0x20003d50
 8013d10:	20003d58 	.word	0x20003d58
 8013d14:	200037ec 	.word	0x200037ec
 8013d18:	200037f0 	.word	0x200037f0
 8013d1c:	0802a5d8 	.word	0x0802a5d8
 8013d20:	0802a5b8 	.word	0x0802a5b8
 8013d24:	0802a600 	.word	0x0802a600
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8013d28:	4bbb      	ldr	r3, [pc, #748]	; (8014018 <readCanToStructs+0x324c>)
 8013d2a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013d2c:	4bbb      	ldr	r3, [pc, #748]	; (801401c <readCanToStructs+0x3250>)
 8013d2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d32:	885b      	ldrh	r3, [r3, #2]
 8013d34:	4ab9      	ldr	r2, [pc, #740]	; (801401c <readCanToStructs+0x3250>)
 8013d36:	011b      	lsls	r3, r3, #4
 8013d38:	4413      	add	r3, r2
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013d42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d110      	bne.n	8013d6c <readCanToStructs+0x2fa0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8013d4a:	2204      	movs	r2, #4
 8013d4c:	2100      	movs	r1, #0
 8013d4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d50:	f011 fd9c 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d58:	4ab1      	ldr	r2, [pc, #708]	; (8014020 <readCanToStructs+0x3254>)
 8013d5a:	f240 4116 	movw	r1, #1046	; 0x416
 8013d5e:	fb01 f303 	mul.w	r3, r1, r3
 8013d62:	4413      	add	r3, r2
 8013d64:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013d68:	2200      	movs	r2, #0
 8013d6a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013d6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d70:	4aab      	ldr	r2, [pc, #684]	; (8014020 <readCanToStructs+0x3254>)
 8013d72:	f240 4116 	movw	r1, #1046	; 0x416
 8013d76:	fb01 f303 	mul.w	r3, r1, r3
 8013d7a:	4413      	add	r3, r2
 8013d7c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013d80:	781b      	ldrb	r3, [r3, #0]
 8013d82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013d86:	429a      	cmp	r2, r3
 8013d88:	d011      	beq.n	8013dae <readCanToStructs+0x2fe2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8013d8a:	2204      	movs	r2, #4
 8013d8c:	2100      	movs	r1, #0
 8013d8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013d90:	f011 fd7c 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013d94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d98:	4aa1      	ldr	r2, [pc, #644]	; (8014020 <readCanToStructs+0x3254>)
 8013d9a:	f240 4116 	movw	r1, #1046	; 0x416
 8013d9e:	fb01 f303 	mul.w	r3, r1, r3
 8013da2:	4413      	add	r3, r2
 8013da4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013da8:	2200      	movs	r2, #0
 8013daa:	701a      	strb	r2, [r3, #0]
					break;
 8013dac:	e3f6      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013dae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013db2:	4613      	mov	r3, r2
 8013db4:	00db      	lsls	r3, r3, #3
 8013db6:	1a9b      	subs	r3, r3, r2
 8013db8:	461a      	mov	r2, r3
 8013dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dbc:	4413      	add	r3, r2
 8013dbe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013dc0:	2301      	movs	r3, #1
 8013dc2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013dc6:	e016      	b.n	8013df6 <readCanToStructs+0x302a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013dc8:	4b94      	ldr	r3, [pc, #592]	; (801401c <readCanToStructs+0x3250>)
 8013dca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013dce:	885b      	ldrh	r3, [r3, #2]
 8013dd0:	461a      	mov	r2, r3
 8013dd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013dd6:	4991      	ldr	r1, [pc, #580]	; (801401c <readCanToStructs+0x3250>)
 8013dd8:	0112      	lsls	r2, r2, #4
 8013dda:	440a      	add	r2, r1
 8013ddc:	4413      	add	r3, r2
 8013dde:	3304      	adds	r3, #4
 8013de0:	781a      	ldrb	r2, [r3, #0]
 8013de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013de8:	3301      	adds	r3, #1
 8013dea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013dec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013df0:	3301      	adds	r3, #1
 8013df2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013df6:	4b89      	ldr	r3, [pc, #548]	; (801401c <readCanToStructs+0x3250>)
 8013df8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013dfc:	885b      	ldrh	r3, [r3, #2]
 8013dfe:	4a87      	ldr	r2, [pc, #540]	; (801401c <readCanToStructs+0x3250>)
 8013e00:	011b      	lsls	r3, r3, #4
 8013e02:	4413      	add	r3, r2
 8013e04:	330c      	adds	r3, #12
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013e0c:	429a      	cmp	r2, r3
 8013e0e:	d3db      	bcc.n	8013dc8 <readCanToStructs+0x2ffc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8013e10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e14:	4a82      	ldr	r2, [pc, #520]	; (8014020 <readCanToStructs+0x3254>)
 8013e16:	f240 4116 	movw	r1, #1046	; 0x416
 8013e1a:	fb01 f303 	mul.w	r3, r1, r3
 8013e1e:	4413      	add	r3, r2
 8013e20:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013e24:	781b      	ldrb	r3, [r3, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	4613      	mov	r3, r2
 8013e2a:	00db      	lsls	r3, r3, #3
 8013e2c:	1a9a      	subs	r2, r3, r2
 8013e2e:	4b7b      	ldr	r3, [pc, #492]	; (801401c <readCanToStructs+0x3250>)
 8013e30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013e34:	885b      	ldrh	r3, [r3, #2]
 8013e36:	4979      	ldr	r1, [pc, #484]	; (801401c <readCanToStructs+0x3250>)
 8013e38:	011b      	lsls	r3, r3, #4
 8013e3a:	440b      	add	r3, r1
 8013e3c:	330c      	adds	r3, #12
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	3b01      	subs	r3, #1
 8013e42:	4413      	add	r3, r2
 8013e44:	2b03      	cmp	r3, #3
 8013e46:	d914      	bls.n	8013e72 <readCanToStructs+0x30a6>
					printf("Received CAN_FAULT_INJECTION\n");
 8013e48:	4876      	ldr	r0, [pc, #472]	; (8014024 <readCanToStructs+0x3258>)
 8013e4a:	f011 fea3 	bl	8025b94 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013e4e:	f004 feef 	bl	8018c30 <HAL_GetTick>
 8013e52:	4603      	mov	r3, r0
 8013e54:	4a74      	ldr	r2, [pc, #464]	; (8014028 <readCanToStructs+0x325c>)
 8013e56:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8013e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e5c:	4a70      	ldr	r2, [pc, #448]	; (8014020 <readCanToStructs+0x3254>)
 8013e5e:	f240 4116 	movw	r1, #1046	; 0x416
 8013e62:	fb01 f303 	mul.w	r3, r1, r3
 8013e66:	4413      	add	r3, r2
 8013e68:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	701a      	strb	r2, [r3, #0]
				break;
 8013e70:	e394      	b.n	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013e72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e76:	4a6a      	ldr	r2, [pc, #424]	; (8014020 <readCanToStructs+0x3254>)
 8013e78:	f240 4116 	movw	r1, #1046	; 0x416
 8013e7c:	fb01 f303 	mul.w	r3, r1, r3
 8013e80:	4413      	add	r3, r2
 8013e82:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8013e86:	2201      	movs	r2, #1
 8013e88:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8013e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e8e:	4964      	ldr	r1, [pc, #400]	; (8014020 <readCanToStructs+0x3254>)
 8013e90:	f240 4216 	movw	r2, #1046	; 0x416
 8013e94:	fb03 f202 	mul.w	r2, r3, r2
 8013e98:	440a      	add	r2, r1
 8013e9a:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8013e9e:	7812      	ldrb	r2, [r2, #0]
 8013ea0:	3201      	adds	r2, #1
 8013ea2:	b2d0      	uxtb	r0, r2
 8013ea4:	4a5e      	ldr	r2, [pc, #376]	; (8014020 <readCanToStructs+0x3254>)
 8013ea6:	f240 4116 	movw	r1, #1046	; 0x416
 8013eaa:	fb01 f303 	mul.w	r3, r1, r3
 8013eae:	4413      	add	r3, r2
 8013eb0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013eb4:	4602      	mov	r2, r0
 8013eb6:	701a      	strb	r2, [r3, #0]
				break;
 8013eb8:	e370      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8013eba:	4b5c      	ldr	r3, [pc, #368]	; (801402c <readCanToStructs+0x3260>)
 8013ebc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013ebe:	4b57      	ldr	r3, [pc, #348]	; (801401c <readCanToStructs+0x3250>)
 8013ec0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ec4:	885b      	ldrh	r3, [r3, #2]
 8013ec6:	4a55      	ldr	r2, [pc, #340]	; (801401c <readCanToStructs+0x3250>)
 8013ec8:	011b      	lsls	r3, r3, #4
 8013eca:	4413      	add	r3, r2
 8013ecc:	3304      	adds	r3, #4
 8013ece:	781b      	ldrb	r3, [r3, #0]
 8013ed0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013ed4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d110      	bne.n	8013efe <readCanToStructs+0x3132>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013edc:	2284      	movs	r2, #132	; 0x84
 8013ede:	2100      	movs	r1, #0
 8013ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ee2:	f011 fcd3 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013eea:	4a4d      	ldr	r2, [pc, #308]	; (8014020 <readCanToStructs+0x3254>)
 8013eec:	f240 4116 	movw	r1, #1046	; 0x416
 8013ef0:	fb01 f303 	mul.w	r3, r1, r3
 8013ef4:	4413      	add	r3, r2
 8013ef6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013efa:	2200      	movs	r2, #0
 8013efc:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8013efe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f02:	4a47      	ldr	r2, [pc, #284]	; (8014020 <readCanToStructs+0x3254>)
 8013f04:	f240 4116 	movw	r1, #1046	; 0x416
 8013f08:	fb01 f303 	mul.w	r3, r1, r3
 8013f0c:	4413      	add	r3, r2
 8013f0e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013f12:	781b      	ldrb	r3, [r3, #0]
 8013f14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013f18:	429a      	cmp	r2, r3
 8013f1a:	d011      	beq.n	8013f40 <readCanToStructs+0x3174>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8013f1c:	2284      	movs	r2, #132	; 0x84
 8013f1e:	2100      	movs	r1, #0
 8013f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f22:	f011 fcb3 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f2a:	4a3d      	ldr	r2, [pc, #244]	; (8014020 <readCanToStructs+0x3254>)
 8013f2c:	f240 4116 	movw	r1, #1046	; 0x416
 8013f30:	fb01 f303 	mul.w	r3, r1, r3
 8013f34:	4413      	add	r3, r2
 8013f36:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013f3a:	2200      	movs	r2, #0
 8013f3c:	701a      	strb	r2, [r3, #0]
					break;
 8013f3e:	e32d      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013f40:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013f44:	4613      	mov	r3, r2
 8013f46:	00db      	lsls	r3, r3, #3
 8013f48:	1a9b      	subs	r3, r3, r2
 8013f4a:	461a      	mov	r2, r3
 8013f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4e:	4413      	add	r3, r2
 8013f50:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f52:	2301      	movs	r3, #1
 8013f54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f58:	e016      	b.n	8013f88 <readCanToStructs+0x31bc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013f5a:	4b30      	ldr	r3, [pc, #192]	; (801401c <readCanToStructs+0x3250>)
 8013f5c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f60:	885b      	ldrh	r3, [r3, #2]
 8013f62:	461a      	mov	r2, r3
 8013f64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f68:	492c      	ldr	r1, [pc, #176]	; (801401c <readCanToStructs+0x3250>)
 8013f6a:	0112      	lsls	r2, r2, #4
 8013f6c:	440a      	add	r2, r1
 8013f6e:	4413      	add	r3, r2
 8013f70:	3304      	adds	r3, #4
 8013f72:	781a      	ldrb	r2, [r3, #0]
 8013f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f76:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f7a:	3301      	adds	r3, #1
 8013f7c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013f82:	3301      	adds	r3, #1
 8013f84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013f88:	4b24      	ldr	r3, [pc, #144]	; (801401c <readCanToStructs+0x3250>)
 8013f8a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f8e:	885b      	ldrh	r3, [r3, #2]
 8013f90:	4a22      	ldr	r2, [pc, #136]	; (801401c <readCanToStructs+0x3250>)
 8013f92:	011b      	lsls	r3, r3, #4
 8013f94:	4413      	add	r3, r2
 8013f96:	330c      	adds	r3, #12
 8013f98:	781b      	ldrb	r3, [r3, #0]
 8013f9a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	d3db      	bcc.n	8013f5a <readCanToStructs+0x318e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8013fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013fa6:	4a1e      	ldr	r2, [pc, #120]	; (8014020 <readCanToStructs+0x3254>)
 8013fa8:	f240 4116 	movw	r1, #1046	; 0x416
 8013fac:	fb01 f303 	mul.w	r3, r1, r3
 8013fb0:	4413      	add	r3, r2
 8013fb2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013fb6:	781b      	ldrb	r3, [r3, #0]
 8013fb8:	461a      	mov	r2, r3
 8013fba:	4613      	mov	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	1a9a      	subs	r2, r3, r2
 8013fc0:	4b16      	ldr	r3, [pc, #88]	; (801401c <readCanToStructs+0x3250>)
 8013fc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013fc6:	885b      	ldrh	r3, [r3, #2]
 8013fc8:	4914      	ldr	r1, [pc, #80]	; (801401c <readCanToStructs+0x3250>)
 8013fca:	011b      	lsls	r3, r3, #4
 8013fcc:	440b      	add	r3, r1
 8013fce:	330c      	adds	r3, #12
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	3b01      	subs	r3, #1
 8013fd4:	4413      	add	r3, r2
 8013fd6:	2b83      	cmp	r3, #131	; 0x83
 8013fd8:	d932      	bls.n	8014040 <readCanToStructs+0x3274>
					if(Debug_flag == 1)
 8013fda:	4b15      	ldr	r3, [pc, #84]	; (8014030 <readCanToStructs+0x3264>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	2b01      	cmp	r3, #1
 8013fe0:	d102      	bne.n	8013fe8 <readCanToStructs+0x321c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8013fe2:	4814      	ldr	r0, [pc, #80]	; (8014034 <readCanToStructs+0x3268>)
 8013fe4:	f011 fdd6 	bl	8025b94 <puts>
					Received_CAN_Relay_Status = YES;
 8013fe8:	4b13      	ldr	r3, [pc, #76]	; (8014038 <readCanToStructs+0x326c>)
 8013fea:	2201      	movs	r2, #1
 8013fec:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8013fee:	4b13      	ldr	r3, [pc, #76]	; (801403c <readCanToStructs+0x3270>)
 8013ff0:	2201      	movs	r2, #1
 8013ff2:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013ff4:	f004 fe1c 	bl	8018c30 <HAL_GetTick>
 8013ff8:	4603      	mov	r3, r0
 8013ffa:	4a0b      	ldr	r2, [pc, #44]	; (8014028 <readCanToStructs+0x325c>)
 8013ffc:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014002:	4a07      	ldr	r2, [pc, #28]	; (8014020 <readCanToStructs+0x3254>)
 8014004:	f240 4116 	movw	r1, #1046	; 0x416
 8014008:	fb01 f303 	mul.w	r3, r1, r3
 801400c:	4413      	add	r3, r2
 801400e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014012:	2200      	movs	r2, #0
 8014014:	701a      	strb	r2, [r3, #0]
				break;
 8014016:	e2c1      	b.n	801459c <readCanToStructs+0x37d0>
 8014018:	20003d44 	.word	0x20003d44
 801401c:	2000719c 	.word	0x2000719c
 8014020:	20006970 	.word	0x20006970
 8014024:	0802a610 	.word	0x0802a610
 8014028:	200037f0 	.word	0x200037f0
 801402c:	20003de4 	.word	0x20003de4
 8014030:	20000bbb 	.word	0x20000bbb
 8014034:	0802a630 	.word	0x0802a630
 8014038:	200037ed 	.word	0x200037ed
 801403c:	200037ec 	.word	0x200037ec
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014044:	4aa3      	ldr	r2, [pc, #652]	; (80142d4 <readCanToStructs+0x3508>)
 8014046:	f240 4116 	movw	r1, #1046	; 0x416
 801404a:	fb01 f303 	mul.w	r3, r1, r3
 801404e:	4413      	add	r3, r2
 8014050:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014054:	2201      	movs	r2, #1
 8014056:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014058:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801405c:	499d      	ldr	r1, [pc, #628]	; (80142d4 <readCanToStructs+0x3508>)
 801405e:	f240 4216 	movw	r2, #1046	; 0x416
 8014062:	fb03 f202 	mul.w	r2, r3, r2
 8014066:	440a      	add	r2, r1
 8014068:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801406c:	7812      	ldrb	r2, [r2, #0]
 801406e:	3201      	adds	r2, #1
 8014070:	b2d0      	uxtb	r0, r2
 8014072:	4a98      	ldr	r2, [pc, #608]	; (80142d4 <readCanToStructs+0x3508>)
 8014074:	f240 4116 	movw	r1, #1046	; 0x416
 8014078:	fb01 f303 	mul.w	r3, r1, r3
 801407c:	4413      	add	r3, r2
 801407e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014082:	4602      	mov	r2, r0
 8014084:	701a      	strb	r2, [r3, #0]
				break;
 8014086:	e289      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014088:	4b93      	ldr	r3, [pc, #588]	; (80142d8 <readCanToStructs+0x350c>)
 801408a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801408c:	4b93      	ldr	r3, [pc, #588]	; (80142dc <readCanToStructs+0x3510>)
 801408e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014092:	885b      	ldrh	r3, [r3, #2]
 8014094:	4a91      	ldr	r2, [pc, #580]	; (80142dc <readCanToStructs+0x3510>)
 8014096:	011b      	lsls	r3, r3, #4
 8014098:	4413      	add	r3, r2
 801409a:	3304      	adds	r3, #4
 801409c:	781b      	ldrb	r3, [r3, #0]
 801409e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80140a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d110      	bne.n	80140cc <readCanToStructs+0x3300>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80140aa:	2284      	movs	r2, #132	; 0x84
 80140ac:	2100      	movs	r1, #0
 80140ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140b0:	f011 fbec 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80140b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140b8:	4a86      	ldr	r2, [pc, #536]	; (80142d4 <readCanToStructs+0x3508>)
 80140ba:	f240 4116 	movw	r1, #1046	; 0x416
 80140be:	fb01 f303 	mul.w	r3, r1, r3
 80140c2:	4413      	add	r3, r2
 80140c4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80140c8:	2200      	movs	r2, #0
 80140ca:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80140cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140d0:	4a80      	ldr	r2, [pc, #512]	; (80142d4 <readCanToStructs+0x3508>)
 80140d2:	f240 4116 	movw	r1, #1046	; 0x416
 80140d6:	fb01 f303 	mul.w	r3, r1, r3
 80140da:	4413      	add	r3, r2
 80140dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80140e6:	429a      	cmp	r2, r3
 80140e8:	d011      	beq.n	801410e <readCanToStructs+0x3342>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80140ea:	2284      	movs	r2, #132	; 0x84
 80140ec:	2100      	movs	r1, #0
 80140ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80140f0:	f011 fbcc 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80140f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140f8:	4a76      	ldr	r2, [pc, #472]	; (80142d4 <readCanToStructs+0x3508>)
 80140fa:	f240 4116 	movw	r1, #1046	; 0x416
 80140fe:	fb01 f303 	mul.w	r3, r1, r3
 8014102:	4413      	add	r3, r2
 8014104:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014108:	2200      	movs	r2, #0
 801410a:	701a      	strb	r2, [r3, #0]
					break;
 801410c:	e246      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 801410e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014112:	4613      	mov	r3, r2
 8014114:	00db      	lsls	r3, r3, #3
 8014116:	1a9b      	subs	r3, r3, r2
 8014118:	461a      	mov	r2, r3
 801411a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801411c:	4413      	add	r3, r2
 801411e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014120:	2301      	movs	r3, #1
 8014122:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014126:	e016      	b.n	8014156 <readCanToStructs+0x338a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014128:	4b6c      	ldr	r3, [pc, #432]	; (80142dc <readCanToStructs+0x3510>)
 801412a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801412e:	885b      	ldrh	r3, [r3, #2]
 8014130:	461a      	mov	r2, r3
 8014132:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014136:	4969      	ldr	r1, [pc, #420]	; (80142dc <readCanToStructs+0x3510>)
 8014138:	0112      	lsls	r2, r2, #4
 801413a:	440a      	add	r2, r1
 801413c:	4413      	add	r3, r2
 801413e:	3304      	adds	r3, #4
 8014140:	781a      	ldrb	r2, [r3, #0]
 8014142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014144:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014148:	3301      	adds	r3, #1
 801414a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801414c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014150:	3301      	adds	r3, #1
 8014152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014156:	4b61      	ldr	r3, [pc, #388]	; (80142dc <readCanToStructs+0x3510>)
 8014158:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801415c:	885b      	ldrh	r3, [r3, #2]
 801415e:	4a5f      	ldr	r2, [pc, #380]	; (80142dc <readCanToStructs+0x3510>)
 8014160:	011b      	lsls	r3, r3, #4
 8014162:	4413      	add	r3, r2
 8014164:	330c      	adds	r3, #12
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801416c:	429a      	cmp	r2, r3
 801416e:	d3db      	bcc.n	8014128 <readCanToStructs+0x335c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8014170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014174:	4a57      	ldr	r2, [pc, #348]	; (80142d4 <readCanToStructs+0x3508>)
 8014176:	f240 4116 	movw	r1, #1046	; 0x416
 801417a:	fb01 f303 	mul.w	r3, r1, r3
 801417e:	4413      	add	r3, r2
 8014180:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	461a      	mov	r2, r3
 8014188:	4613      	mov	r3, r2
 801418a:	00db      	lsls	r3, r3, #3
 801418c:	1a9a      	subs	r2, r3, r2
 801418e:	4b53      	ldr	r3, [pc, #332]	; (80142dc <readCanToStructs+0x3510>)
 8014190:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014194:	885b      	ldrh	r3, [r3, #2]
 8014196:	4951      	ldr	r1, [pc, #324]	; (80142dc <readCanToStructs+0x3510>)
 8014198:	011b      	lsls	r3, r3, #4
 801419a:	440b      	add	r3, r1
 801419c:	330c      	adds	r3, #12
 801419e:	781b      	ldrb	r3, [r3, #0]
 80141a0:	3b01      	subs	r3, #1
 80141a2:	4413      	add	r3, r2
 80141a4:	2b83      	cmp	r3, #131	; 0x83
 80141a6:	d91e      	bls.n	80141e6 <readCanToStructs+0x341a>
					if(Debug_flag == 1)
 80141a8:	4b4d      	ldr	r3, [pc, #308]	; (80142e0 <readCanToStructs+0x3514>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	2b01      	cmp	r3, #1
 80141ae:	d102      	bne.n	80141b6 <readCanToStructs+0x33ea>
						printf("\nRCV RELAY_DATA_EI2\n");
 80141b0:	484c      	ldr	r0, [pc, #304]	; (80142e4 <readCanToStructs+0x3518>)
 80141b2:	f011 fcef 	bl	8025b94 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 80141b6:	4b4c      	ldr	r3, [pc, #304]	; (80142e8 <readCanToStructs+0x351c>)
 80141b8:	2201      	movs	r2, #1
 80141ba:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80141bc:	f004 fd38 	bl	8018c30 <HAL_GetTick>
 80141c0:	4603      	mov	r3, r0
 80141c2:	4a4a      	ldr	r2, [pc, #296]	; (80142ec <readCanToStructs+0x3520>)
 80141c4:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 80141c6:	4b4a      	ldr	r3, [pc, #296]	; (80142f0 <readCanToStructs+0x3524>)
 80141c8:	2201      	movs	r2, #1
 80141ca:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80141cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141d0:	4a40      	ldr	r2, [pc, #256]	; (80142d4 <readCanToStructs+0x3508>)
 80141d2:	f240 4116 	movw	r1, #1046	; 0x416
 80141d6:	fb01 f303 	mul.w	r3, r1, r3
 80141da:	4413      	add	r3, r2
 80141dc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80141e0:	2200      	movs	r2, #0
 80141e2:	701a      	strb	r2, [r3, #0]
				break;
 80141e4:	e1da      	b.n	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80141e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80141ea:	4a3a      	ldr	r2, [pc, #232]	; (80142d4 <readCanToStructs+0x3508>)
 80141ec:	f240 4116 	movw	r1, #1046	; 0x416
 80141f0:	fb01 f303 	mul.w	r3, r1, r3
 80141f4:	4413      	add	r3, r2
 80141f6:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80141fa:	2201      	movs	r2, #1
 80141fc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80141fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014202:	4934      	ldr	r1, [pc, #208]	; (80142d4 <readCanToStructs+0x3508>)
 8014204:	f240 4216 	movw	r2, #1046	; 0x416
 8014208:	fb03 f202 	mul.w	r2, r3, r2
 801420c:	440a      	add	r2, r1
 801420e:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8014212:	7812      	ldrb	r2, [r2, #0]
 8014214:	3201      	adds	r2, #1
 8014216:	b2d0      	uxtb	r0, r2
 8014218:	4a2e      	ldr	r2, [pc, #184]	; (80142d4 <readCanToStructs+0x3508>)
 801421a:	f240 4116 	movw	r1, #1046	; 0x416
 801421e:	fb01 f303 	mul.w	r3, r1, r3
 8014222:	4413      	add	r3, r2
 8014224:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014228:	4602      	mov	r2, r0
 801422a:	701a      	strb	r2, [r3, #0]
				break;
 801422c:	e1b6      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 801422e:	4b31      	ldr	r3, [pc, #196]	; (80142f4 <readCanToStructs+0x3528>)
 8014230:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014232:	4b2a      	ldr	r3, [pc, #168]	; (80142dc <readCanToStructs+0x3510>)
 8014234:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014238:	885b      	ldrh	r3, [r3, #2]
 801423a:	4a28      	ldr	r2, [pc, #160]	; (80142dc <readCanToStructs+0x3510>)
 801423c:	011b      	lsls	r3, r3, #4
 801423e:	4413      	add	r3, r2
 8014240:	3304      	adds	r3, #4
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014248:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801424c:	2b00      	cmp	r3, #0
 801424e:	d110      	bne.n	8014272 <readCanToStructs+0x34a6>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014250:	2202      	movs	r2, #2
 8014252:	2100      	movs	r1, #0
 8014254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014256:	f011 fb19 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801425a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801425e:	4a1d      	ldr	r2, [pc, #116]	; (80142d4 <readCanToStructs+0x3508>)
 8014260:	f240 4116 	movw	r1, #1046	; 0x416
 8014264:	fb01 f303 	mul.w	r3, r1, r3
 8014268:	4413      	add	r3, r2
 801426a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801426e:	2200      	movs	r2, #0
 8014270:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8014272:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014276:	4a17      	ldr	r2, [pc, #92]	; (80142d4 <readCanToStructs+0x3508>)
 8014278:	f240 4116 	movw	r1, #1046	; 0x416
 801427c:	fb01 f303 	mul.w	r3, r1, r3
 8014280:	4413      	add	r3, r2
 8014282:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801428c:	429a      	cmp	r2, r3
 801428e:	d014      	beq.n	80142ba <readCanToStructs+0x34ee>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014290:	4819      	ldr	r0, [pc, #100]	; (80142f8 <readCanToStructs+0x352c>)
 8014292:	f011 fc7f 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014296:	2202      	movs	r2, #2
 8014298:	2100      	movs	r1, #0
 801429a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801429c:	f011 faf6 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80142a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142a4:	4a0b      	ldr	r2, [pc, #44]	; (80142d4 <readCanToStructs+0x3508>)
 80142a6:	f240 4116 	movw	r1, #1046	; 0x416
 80142aa:	fb01 f303 	mul.w	r3, r1, r3
 80142ae:	4413      	add	r3, r2
 80142b0:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80142b4:	2200      	movs	r2, #0
 80142b6:	701a      	strb	r2, [r3, #0]
					break;
 80142b8:	e170      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80142ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80142be:	4613      	mov	r3, r2
 80142c0:	00db      	lsls	r3, r3, #3
 80142c2:	1a9b      	subs	r3, r3, r2
 80142c4:	461a      	mov	r2, r3
 80142c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142c8:	4413      	add	r3, r2
 80142ca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80142cc:	2301      	movs	r3, #1
 80142ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80142d2:	e02a      	b.n	801432a <readCanToStructs+0x355e>
 80142d4:	20006970 	.word	0x20006970
 80142d8:	20003de4 	.word	0x20003de4
 80142dc:	2000719c 	.word	0x2000719c
 80142e0:	20000bbb 	.word	0x20000bbb
 80142e4:	0802a64c 	.word	0x0802a64c
 80142e8:	200037ec 	.word	0x200037ec
 80142ec:	200037f0 	.word	0x200037f0
 80142f0:	200037ed 	.word	0x200037ed
 80142f4:	20000bb8 	.word	0x20000bb8
 80142f8:	0802a478 	.word	0x0802a478
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80142fc:	4bbc      	ldr	r3, [pc, #752]	; (80145f0 <readCanToStructs+0x3824>)
 80142fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014302:	885b      	ldrh	r3, [r3, #2]
 8014304:	461a      	mov	r2, r3
 8014306:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801430a:	49b9      	ldr	r1, [pc, #740]	; (80145f0 <readCanToStructs+0x3824>)
 801430c:	0112      	lsls	r2, r2, #4
 801430e:	440a      	add	r2, r1
 8014310:	4413      	add	r3, r2
 8014312:	3304      	adds	r3, #4
 8014314:	781a      	ldrb	r2, [r3, #0]
 8014316:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014318:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801431c:	3301      	adds	r3, #1
 801431e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014320:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014324:	3301      	adds	r3, #1
 8014326:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801432a:	4bb1      	ldr	r3, [pc, #708]	; (80145f0 <readCanToStructs+0x3824>)
 801432c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014330:	885b      	ldrh	r3, [r3, #2]
 8014332:	4aaf      	ldr	r2, [pc, #700]	; (80145f0 <readCanToStructs+0x3824>)
 8014334:	011b      	lsls	r3, r3, #4
 8014336:	4413      	add	r3, r2
 8014338:	330c      	adds	r3, #12
 801433a:	781b      	ldrb	r3, [r3, #0]
 801433c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014340:	429a      	cmp	r2, r3
 8014342:	d3db      	bcc.n	80142fc <readCanToStructs+0x3530>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014344:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014348:	4aaa      	ldr	r2, [pc, #680]	; (80145f4 <readCanToStructs+0x3828>)
 801434a:	f240 4116 	movw	r1, #1046	; 0x416
 801434e:	fb01 f303 	mul.w	r3, r1, r3
 8014352:	4413      	add	r3, r2
 8014354:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014358:	781b      	ldrb	r3, [r3, #0]
 801435a:	461a      	mov	r2, r3
 801435c:	4613      	mov	r3, r2
 801435e:	00db      	lsls	r3, r3, #3
 8014360:	1a9a      	subs	r2, r3, r2
 8014362:	4ba3      	ldr	r3, [pc, #652]	; (80145f0 <readCanToStructs+0x3824>)
 8014364:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014368:	885b      	ldrh	r3, [r3, #2]
 801436a:	49a1      	ldr	r1, [pc, #644]	; (80145f0 <readCanToStructs+0x3824>)
 801436c:	011b      	lsls	r3, r3, #4
 801436e:	440b      	add	r3, r1
 8014370:	330c      	adds	r3, #12
 8014372:	781b      	ldrb	r3, [r3, #0]
 8014374:	3b01      	subs	r3, #1
 8014376:	4413      	add	r3, r2
 8014378:	2b01      	cmp	r3, #1
 801437a:	d919      	bls.n	80143b0 <readCanToStructs+0x35e4>
					if(Debug_flag == 1)
 801437c:	4b9e      	ldr	r3, [pc, #632]	; (80145f8 <readCanToStructs+0x382c>)
 801437e:	781b      	ldrb	r3, [r3, #0]
 8014380:	2b01      	cmp	r3, #1
 8014382:	d105      	bne.n	8014390 <readCanToStructs+0x35c4>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014384:	4b9d      	ldr	r3, [pc, #628]	; (80145fc <readCanToStructs+0x3830>)
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	4619      	mov	r1, r3
 801438a:	489d      	ldr	r0, [pc, #628]	; (8014600 <readCanToStructs+0x3834>)
 801438c:	f011 fb66 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014390:	4b9c      	ldr	r3, [pc, #624]	; (8014604 <readCanToStructs+0x3838>)
 8014392:	2201      	movs	r2, #1
 8014394:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014396:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801439a:	4a96      	ldr	r2, [pc, #600]	; (80145f4 <readCanToStructs+0x3828>)
 801439c:	f240 4116 	movw	r1, #1046	; 0x416
 80143a0:	fb01 f303 	mul.w	r3, r1, r3
 80143a4:	4413      	add	r3, r2
 80143a6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80143aa:	2200      	movs	r2, #0
 80143ac:	701a      	strb	r2, [r3, #0]
				break;
 80143ae:	e0f5      	b.n	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80143b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143b4:	4a8f      	ldr	r2, [pc, #572]	; (80145f4 <readCanToStructs+0x3828>)
 80143b6:	f240 4116 	movw	r1, #1046	; 0x416
 80143ba:	fb01 f303 	mul.w	r3, r1, r3
 80143be:	4413      	add	r3, r2
 80143c0:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80143c4:	2201      	movs	r2, #1
 80143c6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 80143c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143cc:	4989      	ldr	r1, [pc, #548]	; (80145f4 <readCanToStructs+0x3828>)
 80143ce:	f240 4216 	movw	r2, #1046	; 0x416
 80143d2:	fb03 f202 	mul.w	r2, r3, r2
 80143d6:	440a      	add	r2, r1
 80143d8:	f202 4213 	addw	r2, r2, #1043	; 0x413
 80143dc:	7812      	ldrb	r2, [r2, #0]
 80143de:	3201      	adds	r2, #1
 80143e0:	b2d0      	uxtb	r0, r2
 80143e2:	4a84      	ldr	r2, [pc, #528]	; (80145f4 <readCanToStructs+0x3828>)
 80143e4:	f240 4116 	movw	r1, #1046	; 0x416
 80143e8:	fb01 f303 	mul.w	r3, r1, r3
 80143ec:	4413      	add	r3, r2
 80143ee:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80143f2:	4602      	mov	r2, r0
 80143f4:	701a      	strb	r2, [r3, #0]
				break;
 80143f6:	e0d1      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80143f8:	4b80      	ldr	r3, [pc, #512]	; (80145fc <readCanToStructs+0x3830>)
 80143fa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80143fc:	4b7c      	ldr	r3, [pc, #496]	; (80145f0 <readCanToStructs+0x3824>)
 80143fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014402:	885b      	ldrh	r3, [r3, #2]
 8014404:	4a7a      	ldr	r2, [pc, #488]	; (80145f0 <readCanToStructs+0x3824>)
 8014406:	011b      	lsls	r3, r3, #4
 8014408:	4413      	add	r3, r2
 801440a:	3304      	adds	r3, #4
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014416:	2b00      	cmp	r3, #0
 8014418:	d110      	bne.n	801443c <readCanToStructs+0x3670>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801441a:	2202      	movs	r2, #2
 801441c:	2100      	movs	r1, #0
 801441e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014420:	f011 fa34 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014428:	4a72      	ldr	r2, [pc, #456]	; (80145f4 <readCanToStructs+0x3828>)
 801442a:	f240 4116 	movw	r1, #1046	; 0x416
 801442e:	fb01 f303 	mul.w	r3, r1, r3
 8014432:	4413      	add	r3, r2
 8014434:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014438:	2200      	movs	r2, #0
 801443a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 801443c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014440:	4a6c      	ldr	r2, [pc, #432]	; (80145f4 <readCanToStructs+0x3828>)
 8014442:	f240 4116 	movw	r1, #1046	; 0x416
 8014446:	fb01 f303 	mul.w	r3, r1, r3
 801444a:	4413      	add	r3, r2
 801444c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014456:	429a      	cmp	r2, r3
 8014458:	d014      	beq.n	8014484 <readCanToStructs+0x36b8>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 801445a:	486b      	ldr	r0, [pc, #428]	; (8014608 <readCanToStructs+0x383c>)
 801445c:	f011 fb9a 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014460:	2202      	movs	r2, #2
 8014462:	2100      	movs	r1, #0
 8014464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014466:	f011 fa11 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801446a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801446e:	4a61      	ldr	r2, [pc, #388]	; (80145f4 <readCanToStructs+0x3828>)
 8014470:	f240 4116 	movw	r1, #1046	; 0x416
 8014474:	fb01 f303 	mul.w	r3, r1, r3
 8014478:	4413      	add	r3, r2
 801447a:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801447e:	2200      	movs	r2, #0
 8014480:	701a      	strb	r2, [r3, #0]
					break;
 8014482:	e08b      	b.n	801459c <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014484:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014488:	4613      	mov	r3, r2
 801448a:	00db      	lsls	r3, r3, #3
 801448c:	1a9b      	subs	r3, r3, r2
 801448e:	461a      	mov	r2, r3
 8014490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014492:	4413      	add	r3, r2
 8014494:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014496:	2301      	movs	r3, #1
 8014498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801449c:	e016      	b.n	80144cc <readCanToStructs+0x3700>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801449e:	4b54      	ldr	r3, [pc, #336]	; (80145f0 <readCanToStructs+0x3824>)
 80144a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80144a4:	885b      	ldrh	r3, [r3, #2]
 80144a6:	461a      	mov	r2, r3
 80144a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144ac:	4950      	ldr	r1, [pc, #320]	; (80145f0 <readCanToStructs+0x3824>)
 80144ae:	0112      	lsls	r2, r2, #4
 80144b0:	440a      	add	r2, r1
 80144b2:	4413      	add	r3, r2
 80144b4:	3304      	adds	r3, #4
 80144b6:	781a      	ldrb	r2, [r3, #0]
 80144b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144ba:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80144bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144be:	3301      	adds	r3, #1
 80144c0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80144c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144c6:	3301      	adds	r3, #1
 80144c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80144cc:	4b48      	ldr	r3, [pc, #288]	; (80145f0 <readCanToStructs+0x3824>)
 80144ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80144d2:	885b      	ldrh	r3, [r3, #2]
 80144d4:	4a46      	ldr	r2, [pc, #280]	; (80145f0 <readCanToStructs+0x3824>)
 80144d6:	011b      	lsls	r3, r3, #4
 80144d8:	4413      	add	r3, r2
 80144da:	330c      	adds	r3, #12
 80144dc:	781b      	ldrb	r3, [r3, #0]
 80144de:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d3db      	bcc.n	801449e <readCanToStructs+0x36d2>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80144e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144ea:	4a42      	ldr	r2, [pc, #264]	; (80145f4 <readCanToStructs+0x3828>)
 80144ec:	f240 4116 	movw	r1, #1046	; 0x416
 80144f0:	fb01 f303 	mul.w	r3, r1, r3
 80144f4:	4413      	add	r3, r2
 80144f6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	461a      	mov	r2, r3
 80144fe:	4613      	mov	r3, r2
 8014500:	00db      	lsls	r3, r3, #3
 8014502:	1a9a      	subs	r2, r3, r2
 8014504:	4b3a      	ldr	r3, [pc, #232]	; (80145f0 <readCanToStructs+0x3824>)
 8014506:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801450a:	885b      	ldrh	r3, [r3, #2]
 801450c:	4938      	ldr	r1, [pc, #224]	; (80145f0 <readCanToStructs+0x3824>)
 801450e:	011b      	lsls	r3, r3, #4
 8014510:	440b      	add	r3, r1
 8014512:	330c      	adds	r3, #12
 8014514:	781b      	ldrb	r3, [r3, #0]
 8014516:	3b01      	subs	r3, #1
 8014518:	4413      	add	r3, r2
 801451a:	2b01      	cmp	r3, #1
 801451c:	d919      	bls.n	8014552 <readCanToStructs+0x3786>
					if(Debug_flag == 1)
 801451e:	4b36      	ldr	r3, [pc, #216]	; (80145f8 <readCanToStructs+0x382c>)
 8014520:	781b      	ldrb	r3, [r3, #0]
 8014522:	2b01      	cmp	r3, #1
 8014524:	d105      	bne.n	8014532 <readCanToStructs+0x3766>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014526:	4b35      	ldr	r3, [pc, #212]	; (80145fc <readCanToStructs+0x3830>)
 8014528:	881b      	ldrh	r3, [r3, #0]
 801452a:	4619      	mov	r1, r3
 801452c:	4837      	ldr	r0, [pc, #220]	; (801460c <readCanToStructs+0x3840>)
 801452e:	f011 fa95 	bl	8025a5c <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014532:	4b34      	ldr	r3, [pc, #208]	; (8014604 <readCanToStructs+0x3838>)
 8014534:	2201      	movs	r2, #1
 8014536:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801453c:	4a2d      	ldr	r2, [pc, #180]	; (80145f4 <readCanToStructs+0x3828>)
 801453e:	f240 4116 	movw	r1, #1046	; 0x416
 8014542:	fb01 f303 	mul.w	r3, r1, r3
 8014546:	4413      	add	r3, r2
 8014548:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801454c:	2200      	movs	r2, #0
 801454e:	701a      	strb	r2, [r3, #0]
				break;
 8014550:	e024      	b.n	801459c <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8014552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014556:	4a27      	ldr	r2, [pc, #156]	; (80145f4 <readCanToStructs+0x3828>)
 8014558:	f240 4116 	movw	r1, #1046	; 0x416
 801455c:	fb01 f303 	mul.w	r3, r1, r3
 8014560:	4413      	add	r3, r2
 8014562:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014566:	2201      	movs	r2, #1
 8014568:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 801456a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801456e:	4921      	ldr	r1, [pc, #132]	; (80145f4 <readCanToStructs+0x3828>)
 8014570:	f240 4216 	movw	r2, #1046	; 0x416
 8014574:	fb03 f202 	mul.w	r2, r3, r2
 8014578:	440a      	add	r2, r1
 801457a:	f202 4215 	addw	r2, r2, #1045	; 0x415
 801457e:	7812      	ldrb	r2, [r2, #0]
 8014580:	3201      	adds	r2, #1
 8014582:	b2d0      	uxtb	r0, r2
 8014584:	4a1b      	ldr	r2, [pc, #108]	; (80145f4 <readCanToStructs+0x3828>)
 8014586:	f240 4116 	movw	r1, #1046	; 0x416
 801458a:	fb01 f303 	mul.w	r3, r1, r3
 801458e:	4413      	add	r3, r2
 8014590:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014594:	4602      	mov	r2, r0
 8014596:	701a      	strb	r2, [r3, #0]
				break;
 8014598:	e000      	b.n	801459c <readCanToStructs+0x37d0>
				break;
 801459a:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801459c:	4b14      	ldr	r3, [pc, #80]	; (80145f0 <readCanToStructs+0x3824>)
 801459e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145a2:	885b      	ldrh	r3, [r3, #2]
 80145a4:	011b      	lsls	r3, r3, #4
 80145a6:	4a12      	ldr	r2, [pc, #72]	; (80145f0 <readCanToStructs+0x3824>)
 80145a8:	4413      	add	r3, r2
 80145aa:	2210      	movs	r2, #16
 80145ac:	2100      	movs	r1, #0
 80145ae:	4618      	mov	r0, r3
 80145b0:	f011 f96c 	bl	802588c <memset>
			canRead.Out++;
 80145b4:	4b0e      	ldr	r3, [pc, #56]	; (80145f0 <readCanToStructs+0x3824>)
 80145b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145ba:	885b      	ldrh	r3, [r3, #2]
 80145bc:	3301      	adds	r3, #1
 80145be:	b29a      	uxth	r2, r3
 80145c0:	4b0b      	ldr	r3, [pc, #44]	; (80145f0 <readCanToStructs+0x3824>)
 80145c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145c6:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80145c8:	4b09      	ldr	r3, [pc, #36]	; (80145f0 <readCanToStructs+0x3824>)
 80145ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145ce:	885b      	ldrh	r3, [r3, #2]
 80145d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80145d4:	d104      	bne.n	80145e0 <readCanToStructs+0x3814>
				canRead.Out = 0;
 80145d6:	4b06      	ldr	r3, [pc, #24]	; (80145f0 <readCanToStructs+0x3824>)
 80145d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145dc:	2200      	movs	r2, #0
 80145de:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80145e0:	f7fc fb9e 	bl	8010d20 <canDataReady>
 80145e4:	4603      	mov	r3, r0
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f47e af9b 	bne.w	8013522 <readCanToStructs+0x2756>
		}
		/* __________ MEDHA _________ */
	}
	break;
 80145ec:	f000 bcdc 	b.w	8014fa8 <readCanToStructs+0x41dc>
 80145f0:	2000719c 	.word	0x2000719c
 80145f4:	20006970 	.word	0x20006970
 80145f8:	20000bbb 	.word	0x20000bbb
 80145fc:	20000bb8 	.word	0x20000bb8
 8014600:	0802a4a0 	.word	0x0802a4a0
 8014604:	2000030b 	.word	0x2000030b
 8014608:	0802a4b4 	.word	0x0802a4b4
 801460c:	0802a4dc 	.word	0x0802a4dc
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8014610:	4bb3      	ldr	r3, [pc, #716]	; (80148e0 <readCanToStructs+0x3b14>)
 8014612:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014616:	885b      	ldrh	r3, [r3, #2]
 8014618:	4ab1      	ldr	r2, [pc, #708]	; (80148e0 <readCanToStructs+0x3b14>)
 801461a:	011b      	lsls	r3, r3, #4
 801461c:	4413      	add	r3, r2
 801461e:	330f      	adds	r3, #15
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	3b01      	subs	r3, #1
 8014624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8014628:	4bad      	ldr	r3, [pc, #692]	; (80148e0 <readCanToStructs+0x3b14>)
 801462a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801462e:	885b      	ldrh	r3, [r3, #2]
 8014630:	4aab      	ldr	r2, [pc, #684]	; (80148e0 <readCanToStructs+0x3b14>)
 8014632:	011b      	lsls	r3, r3, #4
 8014634:	4413      	add	r3, r2
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 801463c:	2b05      	cmp	r3, #5
 801463e:	f200 8487 	bhi.w	8014f50 <readCanToStructs+0x4184>
 8014642:	a201      	add	r2, pc, #4	; (adr r2, 8014648 <readCanToStructs+0x387c>)
 8014644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014648:	08014a39 	.word	0x08014a39
 801464c:	08014f51 	.word	0x08014f51
 8014650:	08014661 	.word	0x08014661
 8014654:	08014839 	.word	0x08014839
 8014658:	08014be9 	.word	0x08014be9
 801465c:	08014d8b 	.word	0x08014d8b
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8014660:	4ba0      	ldr	r3, [pc, #640]	; (80148e4 <readCanToStructs+0x3b18>)
 8014662:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014664:	4b9e      	ldr	r3, [pc, #632]	; (80148e0 <readCanToStructs+0x3b14>)
 8014666:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801466a:	885b      	ldrh	r3, [r3, #2]
 801466c:	4a9c      	ldr	r2, [pc, #624]	; (80148e0 <readCanToStructs+0x3b14>)
 801466e:	011b      	lsls	r3, r3, #4
 8014670:	4413      	add	r3, r2
 8014672:	3304      	adds	r3, #4
 8014674:	781b      	ldrb	r3, [r3, #0]
 8014676:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801467a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801467e:	2b00      	cmp	r3, #0
 8014680:	d110      	bne.n	80146a4 <readCanToStructs+0x38d8>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014682:	2240      	movs	r2, #64	; 0x40
 8014684:	2100      	movs	r1, #0
 8014686:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014688:	f011 f900 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801468c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014690:	4a95      	ldr	r2, [pc, #596]	; (80148e8 <readCanToStructs+0x3b1c>)
 8014692:	f240 4116 	movw	r1, #1046	; 0x416
 8014696:	fb01 f303 	mul.w	r3, r1, r3
 801469a:	4413      	add	r3, r2
 801469c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80146a0:	2200      	movs	r2, #0
 80146a2:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80146a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146a8:	4a8f      	ldr	r2, [pc, #572]	; (80148e8 <readCanToStructs+0x3b1c>)
 80146aa:	f240 4116 	movw	r1, #1046	; 0x416
 80146ae:	fb01 f303 	mul.w	r3, r1, r3
 80146b2:	4413      	add	r3, r2
 80146b4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80146be:	429a      	cmp	r2, r3
 80146c0:	d015      	beq.n	80146ee <readCanToStructs+0x3922>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80146c2:	488a      	ldr	r0, [pc, #552]	; (80148ec <readCanToStructs+0x3b20>)
 80146c4:	f011 fa66 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80146c8:	2240      	movs	r2, #64	; 0x40
 80146ca:	2100      	movs	r1, #0
 80146cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146ce:	f011 f8dd 	bl	802588c <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80146d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146d6:	4a84      	ldr	r2, [pc, #528]	; (80148e8 <readCanToStructs+0x3b1c>)
 80146d8:	f240 4116 	movw	r1, #1046	; 0x416
 80146dc:	fb01 f303 	mul.w	r3, r1, r3
 80146e0:	4413      	add	r3, r2
 80146e2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80146e6:	2200      	movs	r2, #0
 80146e8:	701a      	strb	r2, [r3, #0]
					break;
 80146ea:	f000 bc32 	b.w	8014f52 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80146ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80146f2:	4613      	mov	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	1a9b      	subs	r3, r3, r2
 80146f8:	461a      	mov	r2, r3
 80146fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146fc:	4413      	add	r3, r2
 80146fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014700:	2301      	movs	r3, #1
 8014702:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014706:	e016      	b.n	8014736 <readCanToStructs+0x396a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014708:	4b75      	ldr	r3, [pc, #468]	; (80148e0 <readCanToStructs+0x3b14>)
 801470a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801470e:	885b      	ldrh	r3, [r3, #2]
 8014710:	461a      	mov	r2, r3
 8014712:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014716:	4972      	ldr	r1, [pc, #456]	; (80148e0 <readCanToStructs+0x3b14>)
 8014718:	0112      	lsls	r2, r2, #4
 801471a:	440a      	add	r2, r1
 801471c:	4413      	add	r3, r2
 801471e:	3304      	adds	r3, #4
 8014720:	781a      	ldrb	r2, [r3, #0]
 8014722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014724:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014728:	3301      	adds	r3, #1
 801472a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801472c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014730:	3301      	adds	r3, #1
 8014732:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014736:	4b6a      	ldr	r3, [pc, #424]	; (80148e0 <readCanToStructs+0x3b14>)
 8014738:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801473c:	885b      	ldrh	r3, [r3, #2]
 801473e:	4a68      	ldr	r2, [pc, #416]	; (80148e0 <readCanToStructs+0x3b14>)
 8014740:	011b      	lsls	r3, r3, #4
 8014742:	4413      	add	r3, r2
 8014744:	330c      	adds	r3, #12
 8014746:	781b      	ldrb	r3, [r3, #0]
 8014748:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801474c:	429a      	cmp	r2, r3
 801474e:	d3db      	bcc.n	8014708 <readCanToStructs+0x393c>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8014750:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014754:	4a64      	ldr	r2, [pc, #400]	; (80148e8 <readCanToStructs+0x3b1c>)
 8014756:	f240 4116 	movw	r1, #1046	; 0x416
 801475a:	fb01 f303 	mul.w	r3, r1, r3
 801475e:	4413      	add	r3, r2
 8014760:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014764:	781b      	ldrb	r3, [r3, #0]
 8014766:	461a      	mov	r2, r3
 8014768:	4613      	mov	r3, r2
 801476a:	00db      	lsls	r3, r3, #3
 801476c:	1a9a      	subs	r2, r3, r2
 801476e:	4b5c      	ldr	r3, [pc, #368]	; (80148e0 <readCanToStructs+0x3b14>)
 8014770:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014774:	885b      	ldrh	r3, [r3, #2]
 8014776:	495a      	ldr	r1, [pc, #360]	; (80148e0 <readCanToStructs+0x3b14>)
 8014778:	011b      	lsls	r3, r3, #4
 801477a:	440b      	add	r3, r1
 801477c:	330c      	adds	r3, #12
 801477e:	781b      	ldrb	r3, [r3, #0]
 8014780:	3b01      	subs	r3, #1
 8014782:	4413      	add	r3, r2
 8014784:	2b3f      	cmp	r3, #63	; 0x3f
 8014786:	d933      	bls.n	80147f0 <readCanToStructs+0x3a24>
				{
					if(Debug_flag == 1)
 8014788:	4b59      	ldr	r3, [pc, #356]	; (80148f0 <readCanToStructs+0x3b24>)
 801478a:	781b      	ldrb	r3, [r3, #0]
 801478c:	2b01      	cmp	r3, #1
 801478e:	d105      	bne.n	801479c <readCanToStructs+0x39d0>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 8014790:	4b54      	ldr	r3, [pc, #336]	; (80148e4 <readCanToStructs+0x3b18>)
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	4619      	mov	r1, r3
 8014796:	4857      	ldr	r0, [pc, #348]	; (80148f4 <readCanToStructs+0x3b28>)
 8014798:	f011 f960 	bl	8025a5c <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 801479c:	4a56      	ldr	r2, [pc, #344]	; (80148f8 <readCanToStructs+0x3b2c>)
 801479e:	4b51      	ldr	r3, [pc, #324]	; (80148e4 <readCanToStructs+0x3b18>)
 80147a0:	4610      	mov	r0, r2
 80147a2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80147a6:	4602      	mov	r2, r0
 80147a8:	4619      	mov	r1, r3
 80147aa:	f8d1 c000 	ldr.w	ip, [r1]
 80147ae:	684e      	ldr	r6, [r1, #4]
 80147b0:	688d      	ldr	r5, [r1, #8]
 80147b2:	68c9      	ldr	r1, [r1, #12]
 80147b4:	f8c2 c000 	str.w	ip, [r2]
 80147b8:	6056      	str	r6, [r2, #4]
 80147ba:	6095      	str	r5, [r2, #8]
 80147bc:	60d1      	str	r1, [r2, #12]
 80147be:	3310      	adds	r3, #16
 80147c0:	3010      	adds	r0, #16
 80147c2:	42a3      	cmp	r3, r4
 80147c4:	d1ef      	bne.n	80147a6 <readCanToStructs+0x39da>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80147c6:	f004 fa33 	bl	8018c30 <HAL_GetTick>
 80147ca:	4603      	mov	r3, r0
 80147cc:	4a4b      	ldr	r2, [pc, #300]	; (80148fc <readCanToStructs+0x3b30>)
 80147ce:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80147d0:	4b4b      	ldr	r3, [pc, #300]	; (8014900 <readCanToStructs+0x3b34>)
 80147d2:	2201      	movs	r2, #1
 80147d4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80147d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147da:	4a43      	ldr	r2, [pc, #268]	; (80148e8 <readCanToStructs+0x3b1c>)
 80147dc:	f240 4116 	movw	r1, #1046	; 0x416
 80147e0:	fb01 f303 	mul.w	r3, r1, r3
 80147e4:	4413      	add	r3, r2
 80147e6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80147ea:	2200      	movs	r2, #0
 80147ec:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 80147ee:	e3b0      	b.n	8014f52 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80147f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147f4:	4a3c      	ldr	r2, [pc, #240]	; (80148e8 <readCanToStructs+0x3b1c>)
 80147f6:	f240 4116 	movw	r1, #1046	; 0x416
 80147fa:	fb01 f303 	mul.w	r3, r1, r3
 80147fe:	4413      	add	r3, r2
 8014800:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014804:	2201      	movs	r2, #1
 8014806:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801480c:	4936      	ldr	r1, [pc, #216]	; (80148e8 <readCanToStructs+0x3b1c>)
 801480e:	f240 4216 	movw	r2, #1046	; 0x416
 8014812:	fb03 f202 	mul.w	r2, r3, r2
 8014816:	440a      	add	r2, r1
 8014818:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801481c:	7812      	ldrb	r2, [r2, #0]
 801481e:	3201      	adds	r2, #1
 8014820:	b2d0      	uxtb	r0, r2
 8014822:	4a31      	ldr	r2, [pc, #196]	; (80148e8 <readCanToStructs+0x3b1c>)
 8014824:	f240 4116 	movw	r1, #1046	; 0x416
 8014828:	fb01 f303 	mul.w	r3, r1, r3
 801482c:	4413      	add	r3, r2
 801482e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014832:	4602      	mov	r2, r0
 8014834:	701a      	strb	r2, [r3, #0]
				break;
 8014836:	e38c      	b.n	8014f52 <readCanToStructs+0x4186>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8014838:	4b2a      	ldr	r3, [pc, #168]	; (80148e4 <readCanToStructs+0x3b18>)
 801483a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801483c:	4b28      	ldr	r3, [pc, #160]	; (80148e0 <readCanToStructs+0x3b14>)
 801483e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014842:	885b      	ldrh	r3, [r3, #2]
 8014844:	4a26      	ldr	r2, [pc, #152]	; (80148e0 <readCanToStructs+0x3b14>)
 8014846:	011b      	lsls	r3, r3, #4
 8014848:	4413      	add	r3, r2
 801484a:	3304      	adds	r3, #4
 801484c:	781b      	ldrb	r3, [r3, #0]
 801484e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014852:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014856:	2b00      	cmp	r3, #0
 8014858:	d110      	bne.n	801487c <readCanToStructs+0x3ab0>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 801485a:	2240      	movs	r2, #64	; 0x40
 801485c:	2100      	movs	r1, #0
 801485e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014860:	f011 f814 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014868:	4a1f      	ldr	r2, [pc, #124]	; (80148e8 <readCanToStructs+0x3b1c>)
 801486a:	f240 4116 	movw	r1, #1046	; 0x416
 801486e:	fb01 f303 	mul.w	r3, r1, r3
 8014872:	4413      	add	r3, r2
 8014874:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014878:	2200      	movs	r2, #0
 801487a:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 801487c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014880:	4a19      	ldr	r2, [pc, #100]	; (80148e8 <readCanToStructs+0x3b1c>)
 8014882:	f240 4116 	movw	r1, #1046	; 0x416
 8014886:	fb01 f303 	mul.w	r3, r1, r3
 801488a:	4413      	add	r3, r2
 801488c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014890:	781b      	ldrb	r3, [r3, #0]
 8014892:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014896:	429a      	cmp	r2, r3
 8014898:	d014      	beq.n	80148c4 <readCanToStructs+0x3af8>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 801489a:	481a      	ldr	r0, [pc, #104]	; (8014904 <readCanToStructs+0x3b38>)
 801489c:	f011 f97a 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 80148a0:	2240      	movs	r2, #64	; 0x40
 80148a2:	2100      	movs	r1, #0
 80148a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148a6:	f010 fff1 	bl	802588c <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80148aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148ae:	4a0e      	ldr	r2, [pc, #56]	; (80148e8 <readCanToStructs+0x3b1c>)
 80148b0:	f240 4116 	movw	r1, #1046	; 0x416
 80148b4:	fb01 f303 	mul.w	r3, r1, r3
 80148b8:	4413      	add	r3, r2
 80148ba:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80148be:	2200      	movs	r2, #0
 80148c0:	701a      	strb	r2, [r3, #0]
					break;
 80148c2:	e346      	b.n	8014f52 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80148c4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80148c8:	4613      	mov	r3, r2
 80148ca:	00db      	lsls	r3, r3, #3
 80148cc:	1a9b      	subs	r3, r3, r2
 80148ce:	461a      	mov	r2, r3
 80148d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d2:	4413      	add	r3, r2
 80148d4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80148d6:	2301      	movs	r3, #1
 80148d8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80148dc:	e02b      	b.n	8014936 <readCanToStructs+0x3b6a>
 80148de:	bf00      	nop
 80148e0:	2000719c 	.word	0x2000719c
 80148e4:	2000b41c 	.word	0x2000b41c
 80148e8:	20006970 	.word	0x20006970
 80148ec:	0802a414 	.word	0x0802a414
 80148f0:	20000bbb 	.word	0x20000bbb
 80148f4:	0802a660 	.word	0x0802a660
 80148f8:	2000b3dc 	.word	0x2000b3dc
 80148fc:	2000b4a0 	.word	0x2000b4a0
 8014900:	2000030b 	.word	0x2000030b
 8014904:	0802a444 	.word	0x0802a444
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014908:	4bad      	ldr	r3, [pc, #692]	; (8014bc0 <readCanToStructs+0x3df4>)
 801490a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801490e:	885b      	ldrh	r3, [r3, #2]
 8014910:	461a      	mov	r2, r3
 8014912:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014916:	49aa      	ldr	r1, [pc, #680]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014918:	0112      	lsls	r2, r2, #4
 801491a:	440a      	add	r2, r1
 801491c:	4413      	add	r3, r2
 801491e:	3304      	adds	r3, #4
 8014920:	781a      	ldrb	r2, [r3, #0]
 8014922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014924:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014928:	3301      	adds	r3, #1
 801492a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801492c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014930:	3301      	adds	r3, #1
 8014932:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014936:	4ba2      	ldr	r3, [pc, #648]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014938:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801493c:	885b      	ldrh	r3, [r3, #2]
 801493e:	4aa0      	ldr	r2, [pc, #640]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014940:	011b      	lsls	r3, r3, #4
 8014942:	4413      	add	r3, r2
 8014944:	330c      	adds	r3, #12
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801494c:	429a      	cmp	r2, r3
 801494e:	d3db      	bcc.n	8014908 <readCanToStructs+0x3b3c>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8014950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014954:	4a9b      	ldr	r2, [pc, #620]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014956:	f240 4116 	movw	r1, #1046	; 0x416
 801495a:	fb01 f303 	mul.w	r3, r1, r3
 801495e:	4413      	add	r3, r2
 8014960:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014964:	781b      	ldrb	r3, [r3, #0]
 8014966:	461a      	mov	r2, r3
 8014968:	4613      	mov	r3, r2
 801496a:	00db      	lsls	r3, r3, #3
 801496c:	1a9a      	subs	r2, r3, r2
 801496e:	4b94      	ldr	r3, [pc, #592]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014970:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014974:	885b      	ldrh	r3, [r3, #2]
 8014976:	4992      	ldr	r1, [pc, #584]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014978:	011b      	lsls	r3, r3, #4
 801497a:	440b      	add	r3, r1
 801497c:	330c      	adds	r3, #12
 801497e:	781b      	ldrb	r3, [r3, #0]
 8014980:	3b01      	subs	r3, #1
 8014982:	4413      	add	r3, r2
 8014984:	2b3f      	cmp	r3, #63	; 0x3f
 8014986:	d933      	bls.n	80149f0 <readCanToStructs+0x3c24>
				{
					if(Debug_flag == 1)
 8014988:	4b8f      	ldr	r3, [pc, #572]	; (8014bc8 <readCanToStructs+0x3dfc>)
 801498a:	781b      	ldrb	r3, [r3, #0]
 801498c:	2b01      	cmp	r3, #1
 801498e:	d105      	bne.n	801499c <readCanToStructs+0x3bd0>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 8014990:	4b8e      	ldr	r3, [pc, #568]	; (8014bcc <readCanToStructs+0x3e00>)
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	4619      	mov	r1, r3
 8014996:	488e      	ldr	r0, [pc, #568]	; (8014bd0 <readCanToStructs+0x3e04>)
 8014998:	f011 f860 	bl	8025a5c <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 801499c:	4a8d      	ldr	r2, [pc, #564]	; (8014bd4 <readCanToStructs+0x3e08>)
 801499e:	4b8b      	ldr	r3, [pc, #556]	; (8014bcc <readCanToStructs+0x3e00>)
 80149a0:	4610      	mov	r0, r2
 80149a2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80149a6:	4602      	mov	r2, r0
 80149a8:	4619      	mov	r1, r3
 80149aa:	f8d1 c000 	ldr.w	ip, [r1]
 80149ae:	684e      	ldr	r6, [r1, #4]
 80149b0:	688d      	ldr	r5, [r1, #8]
 80149b2:	68c9      	ldr	r1, [r1, #12]
 80149b4:	f8c2 c000 	str.w	ip, [r2]
 80149b8:	6056      	str	r6, [r2, #4]
 80149ba:	6095      	str	r5, [r2, #8]
 80149bc:	60d1      	str	r1, [r2, #12]
 80149be:	3310      	adds	r3, #16
 80149c0:	3010      	adds	r0, #16
 80149c2:	42a3      	cmp	r3, r4
 80149c4:	d1ef      	bne.n	80149a6 <readCanToStructs+0x3bda>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 80149c6:	f004 f933 	bl	8018c30 <HAL_GetTick>
 80149ca:	4603      	mov	r3, r0
 80149cc:	4a82      	ldr	r2, [pc, #520]	; (8014bd8 <readCanToStructs+0x3e0c>)
 80149ce:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 80149d0:	4b82      	ldr	r3, [pc, #520]	; (8014bdc <readCanToStructs+0x3e10>)
 80149d2:	2201      	movs	r2, #1
 80149d4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80149d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149da:	4a7a      	ldr	r2, [pc, #488]	; (8014bc4 <readCanToStructs+0x3df8>)
 80149dc:	f240 4116 	movw	r1, #1046	; 0x416
 80149e0:	fb01 f303 	mul.w	r3, r1, r3
 80149e4:	4413      	add	r3, r2
 80149e6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80149ea:	2200      	movs	r2, #0
 80149ec:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 80149ee:	e2b0      	b.n	8014f52 <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80149f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149f4:	4a73      	ldr	r2, [pc, #460]	; (8014bc4 <readCanToStructs+0x3df8>)
 80149f6:	f240 4116 	movw	r1, #1046	; 0x416
 80149fa:	fb01 f303 	mul.w	r3, r1, r3
 80149fe:	4413      	add	r3, r2
 8014a00:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8014a04:	2201      	movs	r2, #1
 8014a06:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8014a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a0c:	496d      	ldr	r1, [pc, #436]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014a0e:	f240 4216 	movw	r2, #1046	; 0x416
 8014a12:	fb03 f202 	mul.w	r2, r3, r2
 8014a16:	440a      	add	r2, r1
 8014a18:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8014a1c:	7812      	ldrb	r2, [r2, #0]
 8014a1e:	3201      	adds	r2, #1
 8014a20:	b2d0      	uxtb	r0, r2
 8014a22:	4a68      	ldr	r2, [pc, #416]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014a24:	f240 4116 	movw	r1, #1046	; 0x416
 8014a28:	fb01 f303 	mul.w	r3, r1, r3
 8014a2c:	4413      	add	r3, r2
 8014a2e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014a32:	4602      	mov	r2, r0
 8014a34:	701a      	strb	r2, [r3, #0]
				break;
 8014a36:	e28c      	b.n	8014f52 <readCanToStructs+0x4186>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 8014a38:	4b69      	ldr	r3, [pc, #420]	; (8014be0 <readCanToStructs+0x3e14>)
 8014a3a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014a3c:	4b60      	ldr	r3, [pc, #384]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014a3e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a42:	885b      	ldrh	r3, [r3, #2]
 8014a44:	4a5e      	ldr	r2, [pc, #376]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014a46:	011b      	lsls	r3, r3, #4
 8014a48:	4413      	add	r3, r2
 8014a4a:	3304      	adds	r3, #4
 8014a4c:	781b      	ldrb	r3, [r3, #0]
 8014a4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014a52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d110      	bne.n	8014a7c <readCanToStructs+0x3cb0>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8014a5a:	2208      	movs	r2, #8
 8014a5c:	2100      	movs	r1, #0
 8014a5e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a60:	f010 ff14 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014a64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a68:	4a56      	ldr	r2, [pc, #344]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014a6a:	f240 4116 	movw	r1, #1046	; 0x416
 8014a6e:	fb01 f303 	mul.w	r3, r1, r3
 8014a72:	4413      	add	r3, r2
 8014a74:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014a78:	2200      	movs	r2, #0
 8014a7a:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8014a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a80:	4a50      	ldr	r2, [pc, #320]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014a82:	f240 4116 	movw	r1, #1046	; 0x416
 8014a86:	fb01 f303 	mul.w	r3, r1, r3
 8014a8a:	4413      	add	r3, r2
 8014a8c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014a90:	781b      	ldrb	r3, [r3, #0]
 8014a92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014a96:	429a      	cmp	r2, r3
 8014a98:	d011      	beq.n	8014abe <readCanToStructs+0x3cf2>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8014a9a:	2208      	movs	r2, #8
 8014a9c:	2100      	movs	r1, #0
 8014a9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014aa0:	f010 fef4 	bl	802588c <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014aa4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014aa8:	4a46      	ldr	r2, [pc, #280]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014aaa:	f240 4116 	movw	r1, #1046	; 0x416
 8014aae:	fb01 f303 	mul.w	r3, r1, r3
 8014ab2:	4413      	add	r3, r2
 8014ab4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014ab8:	2200      	movs	r2, #0
 8014aba:	701a      	strb	r2, [r3, #0]
					break;
 8014abc:	e249      	b.n	8014f52 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014abe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014ac2:	4613      	mov	r3, r2
 8014ac4:	00db      	lsls	r3, r3, #3
 8014ac6:	1a9b      	subs	r3, r3, r2
 8014ac8:	461a      	mov	r2, r3
 8014aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014acc:	4413      	add	r3, r2
 8014ace:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014ad0:	2301      	movs	r3, #1
 8014ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014ad6:	e016      	b.n	8014b06 <readCanToStructs+0x3d3a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014ad8:	4b39      	ldr	r3, [pc, #228]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014ada:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ade:	885b      	ldrh	r3, [r3, #2]
 8014ae0:	461a      	mov	r2, r3
 8014ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014ae6:	4936      	ldr	r1, [pc, #216]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014ae8:	0112      	lsls	r2, r2, #4
 8014aea:	440a      	add	r2, r1
 8014aec:	4413      	add	r3, r2
 8014aee:	3304      	adds	r3, #4
 8014af0:	781a      	ldrb	r2, [r3, #0]
 8014af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014af8:	3301      	adds	r3, #1
 8014afa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b00:	3301      	adds	r3, #1
 8014b02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014b06:	4b2e      	ldr	r3, [pc, #184]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014b08:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b0c:	885b      	ldrh	r3, [r3, #2]
 8014b0e:	4a2c      	ldr	r2, [pc, #176]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014b10:	011b      	lsls	r3, r3, #4
 8014b12:	4413      	add	r3, r2
 8014b14:	330c      	adds	r3, #12
 8014b16:	781b      	ldrb	r3, [r3, #0]
 8014b18:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014b1c:	429a      	cmp	r2, r3
 8014b1e:	d3db      	bcc.n	8014ad8 <readCanToStructs+0x3d0c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8014b20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b24:	4a27      	ldr	r2, [pc, #156]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014b26:	f240 4116 	movw	r1, #1046	; 0x416
 8014b2a:	fb01 f303 	mul.w	r3, r1, r3
 8014b2e:	4413      	add	r3, r2
 8014b30:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014b34:	781b      	ldrb	r3, [r3, #0]
 8014b36:	461a      	mov	r2, r3
 8014b38:	4613      	mov	r3, r2
 8014b3a:	00db      	lsls	r3, r3, #3
 8014b3c:	1a9a      	subs	r2, r3, r2
 8014b3e:	4b20      	ldr	r3, [pc, #128]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014b40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b44:	885b      	ldrh	r3, [r3, #2]
 8014b46:	491e      	ldr	r1, [pc, #120]	; (8014bc0 <readCanToStructs+0x3df4>)
 8014b48:	011b      	lsls	r3, r3, #4
 8014b4a:	440b      	add	r3, r1
 8014b4c:	330c      	adds	r3, #12
 8014b4e:	781b      	ldrb	r3, [r3, #0]
 8014b50:	3b01      	subs	r3, #1
 8014b52:	4413      	add	r3, r2
 8014b54:	2b07      	cmp	r3, #7
 8014b56:	d90f      	bls.n	8014b78 <readCanToStructs+0x3dac>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 8014b58:	4822      	ldr	r0, [pc, #136]	; (8014be4 <readCanToStructs+0x3e18>)
 8014b5a:	f011 f81b 	bl	8025b94 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b62:	4a18      	ldr	r2, [pc, #96]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014b64:	f240 4116 	movw	r1, #1046	; 0x416
 8014b68:	fb01 f303 	mul.w	r3, r1, r3
 8014b6c:	4413      	add	r3, r2
 8014b6e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014b72:	2200      	movs	r2, #0
 8014b74:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 8014b76:	e1ec      	b.n	8014f52 <readCanToStructs+0x4186>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8014b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b7c:	4a11      	ldr	r2, [pc, #68]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014b7e:	f240 4116 	movw	r1, #1046	; 0x416
 8014b82:	fb01 f303 	mul.w	r3, r1, r3
 8014b86:	4413      	add	r3, r2
 8014b88:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8014b8c:	2201      	movs	r2, #1
 8014b8e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8014b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b94:	490b      	ldr	r1, [pc, #44]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014b96:	f240 4216 	movw	r2, #1046	; 0x416
 8014b9a:	fb03 f202 	mul.w	r2, r3, r2
 8014b9e:	440a      	add	r2, r1
 8014ba0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8014ba4:	7812      	ldrb	r2, [r2, #0]
 8014ba6:	3201      	adds	r2, #1
 8014ba8:	b2d0      	uxtb	r0, r2
 8014baa:	4a06      	ldr	r2, [pc, #24]	; (8014bc4 <readCanToStructs+0x3df8>)
 8014bac:	f240 4116 	movw	r1, #1046	; 0x416
 8014bb0:	fb01 f303 	mul.w	r3, r1, r3
 8014bb4:	4413      	add	r3, r2
 8014bb6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014bba:	4602      	mov	r2, r0
 8014bbc:	701a      	strb	r2, [r3, #0]
				break;
 8014bbe:	e1c8      	b.n	8014f52 <readCanToStructs+0x4186>
 8014bc0:	2000719c 	.word	0x2000719c
 8014bc4:	20006970 	.word	0x20006970
 8014bc8:	20000bbb 	.word	0x20000bbb
 8014bcc:	2000b41c 	.word	0x2000b41c
 8014bd0:	0802a674 	.word	0x0802a674
 8014bd4:	2000b3dc 	.word	0x2000b3dc
 8014bd8:	2000b4a0 	.word	0x2000b4a0
 8014bdc:	2000030b 	.word	0x2000030b
 8014be0:	2000b380 	.word	0x2000b380
 8014be4:	0802a610 	.word	0x0802a610

			case DAT_CRC_EXCHANGE_1:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014be8:	4bbe      	ldr	r3, [pc, #760]	; (8014ee4 <readCanToStructs+0x4118>)
 8014bea:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014bec:	4bbe      	ldr	r3, [pc, #760]	; (8014ee8 <readCanToStructs+0x411c>)
 8014bee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014bf2:	885b      	ldrh	r3, [r3, #2]
 8014bf4:	4abc      	ldr	r2, [pc, #752]	; (8014ee8 <readCanToStructs+0x411c>)
 8014bf6:	011b      	lsls	r3, r3, #4
 8014bf8:	4413      	add	r3, r2
 8014bfa:	3304      	adds	r3, #4
 8014bfc:	781b      	ldrb	r3, [r3, #0]
 8014bfe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014c02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d110      	bne.n	8014c2c <readCanToStructs+0x3e60>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014c0a:	2202      	movs	r2, #2
 8014c0c:	2100      	movs	r1, #0
 8014c0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c10:	f010 fe3c 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014c14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c18:	4ab4      	ldr	r2, [pc, #720]	; (8014eec <readCanToStructs+0x4120>)
 8014c1a:	f240 4116 	movw	r1, #1046	; 0x416
 8014c1e:	fb01 f303 	mul.w	r3, r1, r3
 8014c22:	4413      	add	r3, r2
 8014c24:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014c28:	2200      	movs	r2, #0
 8014c2a:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8014c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c30:	4aae      	ldr	r2, [pc, #696]	; (8014eec <readCanToStructs+0x4120>)
 8014c32:	f240 4116 	movw	r1, #1046	; 0x416
 8014c36:	fb01 f303 	mul.w	r3, r1, r3
 8014c3a:	4413      	add	r3, r2
 8014c3c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d014      	beq.n	8014c74 <readCanToStructs+0x3ea8>
				{
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014c4a:	48a9      	ldr	r0, [pc, #676]	; (8014ef0 <readCanToStructs+0x4124>)
 8014c4c:	f010 ffa2 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014c50:	2202      	movs	r2, #2
 8014c52:	2100      	movs	r1, #0
 8014c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014c56:	f010 fe19 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c5e:	4aa3      	ldr	r2, [pc, #652]	; (8014eec <readCanToStructs+0x4120>)
 8014c60:	f240 4116 	movw	r1, #1046	; 0x416
 8014c64:	fb01 f303 	mul.w	r3, r1, r3
 8014c68:	4413      	add	r3, r2
 8014c6a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014c6e:	2200      	movs	r2, #0
 8014c70:	701a      	strb	r2, [r3, #0]
					break;
 8014c72:	e16e      	b.n	8014f52 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014c74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014c78:	4613      	mov	r3, r2
 8014c7a:	00db      	lsls	r3, r3, #3
 8014c7c:	1a9b      	subs	r3, r3, r2
 8014c7e:	461a      	mov	r2, r3
 8014c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014c82:	4413      	add	r3, r2
 8014c84:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014c86:	2301      	movs	r3, #1
 8014c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014c8c:	e016      	b.n	8014cbc <readCanToStructs+0x3ef0>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014c8e:	4b96      	ldr	r3, [pc, #600]	; (8014ee8 <readCanToStructs+0x411c>)
 8014c90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014c94:	885b      	ldrh	r3, [r3, #2]
 8014c96:	461a      	mov	r2, r3
 8014c98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014c9c:	4992      	ldr	r1, [pc, #584]	; (8014ee8 <readCanToStructs+0x411c>)
 8014c9e:	0112      	lsls	r2, r2, #4
 8014ca0:	440a      	add	r2, r1
 8014ca2:	4413      	add	r3, r2
 8014ca4:	3304      	adds	r3, #4
 8014ca6:	781a      	ldrb	r2, [r3, #0]
 8014ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014caa:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014cae:	3301      	adds	r3, #1
 8014cb0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014cb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014cb6:	3301      	adds	r3, #1
 8014cb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014cbc:	4b8a      	ldr	r3, [pc, #552]	; (8014ee8 <readCanToStructs+0x411c>)
 8014cbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cc2:	885b      	ldrh	r3, [r3, #2]
 8014cc4:	4a88      	ldr	r2, [pc, #544]	; (8014ee8 <readCanToStructs+0x411c>)
 8014cc6:	011b      	lsls	r3, r3, #4
 8014cc8:	4413      	add	r3, r2
 8014cca:	330c      	adds	r3, #12
 8014ccc:	781b      	ldrb	r3, [r3, #0]
 8014cce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014cd2:	429a      	cmp	r2, r3
 8014cd4:	d3db      	bcc.n	8014c8e <readCanToStructs+0x3ec2>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cda:	4a84      	ldr	r2, [pc, #528]	; (8014eec <readCanToStructs+0x4120>)
 8014cdc:	f240 4116 	movw	r1, #1046	; 0x416
 8014ce0:	fb01 f303 	mul.w	r3, r1, r3
 8014ce4:	4413      	add	r3, r2
 8014ce6:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	461a      	mov	r2, r3
 8014cee:	4613      	mov	r3, r2
 8014cf0:	00db      	lsls	r3, r3, #3
 8014cf2:	1a9a      	subs	r2, r3, r2
 8014cf4:	4b7c      	ldr	r3, [pc, #496]	; (8014ee8 <readCanToStructs+0x411c>)
 8014cf6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cfa:	885b      	ldrh	r3, [r3, #2]
 8014cfc:	497a      	ldr	r1, [pc, #488]	; (8014ee8 <readCanToStructs+0x411c>)
 8014cfe:	011b      	lsls	r3, r3, #4
 8014d00:	440b      	add	r3, r1
 8014d02:	330c      	adds	r3, #12
 8014d04:	781b      	ldrb	r3, [r3, #0]
 8014d06:	3b01      	subs	r3, #1
 8014d08:	4413      	add	r3, r2
 8014d0a:	2b01      	cmp	r3, #1
 8014d0c:	d919      	bls.n	8014d42 <readCanToStructs+0x3f76>
				{
					if(Debug_flag == 1)
 8014d0e:	4b79      	ldr	r3, [pc, #484]	; (8014ef4 <readCanToStructs+0x4128>)
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	2b01      	cmp	r3, #1
 8014d14:	d105      	bne.n	8014d22 <readCanToStructs+0x3f56>
					{
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014d16:	4b73      	ldr	r3, [pc, #460]	; (8014ee4 <readCanToStructs+0x4118>)
 8014d18:	881b      	ldrh	r3, [r3, #0]
 8014d1a:	4619      	mov	r1, r3
 8014d1c:	4876      	ldr	r0, [pc, #472]	; (8014ef8 <readCanToStructs+0x412c>)
 8014d1e:	f010 fe9d 	bl	8025a5c <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8014d22:	4b76      	ldr	r3, [pc, #472]	; (8014efc <readCanToStructs+0x4130>)
 8014d24:	2201      	movs	r2, #1
 8014d26:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d2c:	4a6f      	ldr	r2, [pc, #444]	; (8014eec <readCanToStructs+0x4120>)
 8014d2e:	f240 4116 	movw	r1, #1046	; 0x416
 8014d32:	fb01 f303 	mul.w	r3, r1, r3
 8014d36:	4413      	add	r3, r2
 8014d38:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014d3c:	2200      	movs	r2, #0
 8014d3e:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
				}
				break;
 8014d40:	e107      	b.n	8014f52 <readCanToStructs+0x4186>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8014d42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d46:	4a69      	ldr	r2, [pc, #420]	; (8014eec <readCanToStructs+0x4120>)
 8014d48:	f240 4116 	movw	r1, #1046	; 0x416
 8014d4c:	fb01 f303 	mul.w	r3, r1, r3
 8014d50:	4413      	add	r3, r2
 8014d52:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8014d56:	2201      	movs	r2, #1
 8014d58:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8014d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d5e:	4963      	ldr	r1, [pc, #396]	; (8014eec <readCanToStructs+0x4120>)
 8014d60:	f240 4216 	movw	r2, #1046	; 0x416
 8014d64:	fb03 f202 	mul.w	r2, r3, r2
 8014d68:	440a      	add	r2, r1
 8014d6a:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8014d6e:	7812      	ldrb	r2, [r2, #0]
 8014d70:	3201      	adds	r2, #1
 8014d72:	b2d0      	uxtb	r0, r2
 8014d74:	4a5d      	ldr	r2, [pc, #372]	; (8014eec <readCanToStructs+0x4120>)
 8014d76:	f240 4116 	movw	r1, #1046	; 0x416
 8014d7a:	fb01 f303 	mul.w	r3, r1, r3
 8014d7e:	4413      	add	r3, r2
 8014d80:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014d84:	4602      	mov	r2, r0
 8014d86:	701a      	strb	r2, [r3, #0]
				break;
 8014d88:	e0e3      	b.n	8014f52 <readCanToStructs+0x4186>

			case DAT_CRC_EXCHANGE_2:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8014d8a:	4b56      	ldr	r3, [pc, #344]	; (8014ee4 <readCanToStructs+0x4118>)
 8014d8c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014d8e:	4b56      	ldr	r3, [pc, #344]	; (8014ee8 <readCanToStructs+0x411c>)
 8014d90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014d94:	885b      	ldrh	r3, [r3, #2]
 8014d96:	4a54      	ldr	r2, [pc, #336]	; (8014ee8 <readCanToStructs+0x411c>)
 8014d98:	011b      	lsls	r3, r3, #4
 8014d9a:	4413      	add	r3, r2
 8014d9c:	3304      	adds	r3, #4
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014da4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d110      	bne.n	8014dce <readCanToStructs+0x4002>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014dac:	2202      	movs	r2, #2
 8014dae:	2100      	movs	r1, #0
 8014db0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014db2:	f010 fd6b 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014db6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dba:	4a4c      	ldr	r2, [pc, #304]	; (8014eec <readCanToStructs+0x4120>)
 8014dbc:	f240 4116 	movw	r1, #1046	; 0x416
 8014dc0:	fb01 f303 	mul.w	r3, r1, r3
 8014dc4:	4413      	add	r3, r2
 8014dc6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014dca:	2200      	movs	r2, #0
 8014dcc:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8014dce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dd2:	4a46      	ldr	r2, [pc, #280]	; (8014eec <readCanToStructs+0x4120>)
 8014dd4:	f240 4116 	movw	r1, #1046	; 0x416
 8014dd8:	fb01 f303 	mul.w	r3, r1, r3
 8014ddc:	4413      	add	r3, r2
 8014dde:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014de2:	781b      	ldrb	r3, [r3, #0]
 8014de4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014de8:	429a      	cmp	r2, r3
 8014dea:	d014      	beq.n	8014e16 <readCanToStructs+0x404a>
				{
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014dec:	4844      	ldr	r0, [pc, #272]	; (8014f00 <readCanToStructs+0x4134>)
 8014dee:	f010 fed1 	bl	8025b94 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014df2:	2202      	movs	r2, #2
 8014df4:	2100      	movs	r1, #0
 8014df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014df8:	f010 fd48 	bl	802588c <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e00:	4a3a      	ldr	r2, [pc, #232]	; (8014eec <readCanToStructs+0x4120>)
 8014e02:	f240 4116 	movw	r1, #1046	; 0x416
 8014e06:	fb01 f303 	mul.w	r3, r1, r3
 8014e0a:	4413      	add	r3, r2
 8014e0c:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014e10:	2200      	movs	r2, #0
 8014e12:	701a      	strb	r2, [r3, #0]
					break;
 8014e14:	e09d      	b.n	8014f52 <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014e16:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	00db      	lsls	r3, r3, #3
 8014e1e:	1a9b      	subs	r3, r3, r2
 8014e20:	461a      	mov	r2, r3
 8014e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e24:	4413      	add	r3, r2
 8014e26:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e28:	2301      	movs	r3, #1
 8014e2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e2e:	e016      	b.n	8014e5e <readCanToStructs+0x4092>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014e30:	4b2d      	ldr	r3, [pc, #180]	; (8014ee8 <readCanToStructs+0x411c>)
 8014e32:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e36:	885b      	ldrh	r3, [r3, #2]
 8014e38:	461a      	mov	r2, r3
 8014e3a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e3e:	492a      	ldr	r1, [pc, #168]	; (8014ee8 <readCanToStructs+0x411c>)
 8014e40:	0112      	lsls	r2, r2, #4
 8014e42:	440a      	add	r2, r1
 8014e44:	4413      	add	r3, r2
 8014e46:	3304      	adds	r3, #4
 8014e48:	781a      	ldrb	r2, [r3, #0]
 8014e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e4c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e50:	3301      	adds	r3, #1
 8014e52:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014e54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014e58:	3301      	adds	r3, #1
 8014e5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014e5e:	4b22      	ldr	r3, [pc, #136]	; (8014ee8 <readCanToStructs+0x411c>)
 8014e60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e64:	885b      	ldrh	r3, [r3, #2]
 8014e66:	4a20      	ldr	r2, [pc, #128]	; (8014ee8 <readCanToStructs+0x411c>)
 8014e68:	011b      	lsls	r3, r3, #4
 8014e6a:	4413      	add	r3, r2
 8014e6c:	330c      	adds	r3, #12
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014e74:	429a      	cmp	r2, r3
 8014e76:	d3db      	bcc.n	8014e30 <readCanToStructs+0x4064>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8014e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e7c:	4a1b      	ldr	r2, [pc, #108]	; (8014eec <readCanToStructs+0x4120>)
 8014e7e:	f240 4116 	movw	r1, #1046	; 0x416
 8014e82:	fb01 f303 	mul.w	r3, r1, r3
 8014e86:	4413      	add	r3, r2
 8014e88:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	461a      	mov	r2, r3
 8014e90:	4613      	mov	r3, r2
 8014e92:	00db      	lsls	r3, r3, #3
 8014e94:	1a9a      	subs	r2, r3, r2
 8014e96:	4b14      	ldr	r3, [pc, #80]	; (8014ee8 <readCanToStructs+0x411c>)
 8014e98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e9c:	885b      	ldrh	r3, [r3, #2]
 8014e9e:	4912      	ldr	r1, [pc, #72]	; (8014ee8 <readCanToStructs+0x411c>)
 8014ea0:	011b      	lsls	r3, r3, #4
 8014ea2:	440b      	add	r3, r1
 8014ea4:	330c      	adds	r3, #12
 8014ea6:	781b      	ldrb	r3, [r3, #0]
 8014ea8:	3b01      	subs	r3, #1
 8014eaa:	4413      	add	r3, r2
 8014eac:	2b01      	cmp	r3, #1
 8014eae:	d92b      	bls.n	8014f08 <readCanToStructs+0x413c>
				{
					if(Debug_flag == 1)
 8014eb0:	4b10      	ldr	r3, [pc, #64]	; (8014ef4 <readCanToStructs+0x4128>)
 8014eb2:	781b      	ldrb	r3, [r3, #0]
 8014eb4:	2b01      	cmp	r3, #1
 8014eb6:	d105      	bne.n	8014ec4 <readCanToStructs+0x40f8>
					{
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8014eb8:	4b0a      	ldr	r3, [pc, #40]	; (8014ee4 <readCanToStructs+0x4118>)
 8014eba:	881b      	ldrh	r3, [r3, #0]
 8014ebc:	4619      	mov	r1, r3
 8014ebe:	4811      	ldr	r0, [pc, #68]	; (8014f04 <readCanToStructs+0x4138>)
 8014ec0:	f010 fdcc 	bl	8025a5c <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 8014ec4:	4b0d      	ldr	r3, [pc, #52]	; (8014efc <readCanToStructs+0x4130>)
 8014ec6:	2201      	movs	r2, #1
 8014ec8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014eca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ece:	4a07      	ldr	r2, [pc, #28]	; (8014eec <readCanToStructs+0x4120>)
 8014ed0:	f240 4116 	movw	r1, #1046	; 0x416
 8014ed4:	fb01 f303 	mul.w	r3, r1, r3
 8014ed8:	4413      	add	r3, r2
 8014eda:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014ede:	2200      	movs	r2, #0
 8014ee0:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;
 8014ee2:	e036      	b.n	8014f52 <readCanToStructs+0x4186>
 8014ee4:	20000bb8 	.word	0x20000bb8
 8014ee8:	2000719c 	.word	0x2000719c
 8014eec:	20006970 	.word	0x20006970
 8014ef0:	0802a478 	.word	0x0802a478
 8014ef4:	20000bbb 	.word	0x20000bbb
 8014ef8:	0802a4a0 	.word	0x0802a4a0
 8014efc:	2000030b 	.word	0x2000030b
 8014f00:	0802a4b4 	.word	0x0802a4b4
 8014f04:	0802a4dc 	.word	0x0802a4dc
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8014f08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f0c:	4a28      	ldr	r2, [pc, #160]	; (8014fb0 <readCanToStructs+0x41e4>)
 8014f0e:	f240 4116 	movw	r1, #1046	; 0x416
 8014f12:	fb01 f303 	mul.w	r3, r1, r3
 8014f16:	4413      	add	r3, r2
 8014f18:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014f1c:	2201      	movs	r2, #1
 8014f1e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8014f20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f24:	4922      	ldr	r1, [pc, #136]	; (8014fb0 <readCanToStructs+0x41e4>)
 8014f26:	f240 4216 	movw	r2, #1046	; 0x416
 8014f2a:	fb03 f202 	mul.w	r2, r3, r2
 8014f2e:	440a      	add	r2, r1
 8014f30:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8014f34:	7812      	ldrb	r2, [r2, #0]
 8014f36:	3201      	adds	r2, #1
 8014f38:	b2d0      	uxtb	r0, r2
 8014f3a:	4a1d      	ldr	r2, [pc, #116]	; (8014fb0 <readCanToStructs+0x41e4>)
 8014f3c:	f240 4116 	movw	r1, #1046	; 0x416
 8014f40:	fb01 f303 	mul.w	r3, r1, r3
 8014f44:	4413      	add	r3, r2
 8014f46:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014f4a:	4602      	mov	r2, r0
 8014f4c:	701a      	strb	r2, [r3, #0]
				break;
 8014f4e:	e000      	b.n	8014f52 <readCanToStructs+0x4186>

			default:
				break;
 8014f50:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8014f52:	4b18      	ldr	r3, [pc, #96]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f54:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f58:	885b      	ldrh	r3, [r3, #2]
 8014f5a:	011b      	lsls	r3, r3, #4
 8014f5c:	4a15      	ldr	r2, [pc, #84]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f5e:	4413      	add	r3, r2
 8014f60:	2210      	movs	r2, #16
 8014f62:	2100      	movs	r1, #0
 8014f64:	4618      	mov	r0, r3
 8014f66:	f010 fc91 	bl	802588c <memset>
			canRead.Out++;
 8014f6a:	4b12      	ldr	r3, [pc, #72]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f70:	885b      	ldrh	r3, [r3, #2]
 8014f72:	3301      	adds	r3, #1
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	4b0f      	ldr	r3, [pc, #60]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f7c:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8014f7e:	4b0d      	ldr	r3, [pc, #52]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f84:	885b      	ldrh	r3, [r3, #2]
 8014f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014f8a:	d104      	bne.n	8014f96 <readCanToStructs+0x41ca>
				canRead.Out = 0;
 8014f8c:	4b09      	ldr	r3, [pc, #36]	; (8014fb4 <readCanToStructs+0x41e8>)
 8014f8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f92:	2200      	movs	r2, #0
 8014f94:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014f96:	f7fb fec3 	bl	8010d20 <canDataReady>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	f47f ab37 	bne.w	8014610 <readCanToStructs+0x3844>
			/* Protocol Type */
		}
	}
	default:
		break;
 8014fa2:	bf00      	nop
 8014fa4:	e000      	b.n	8014fa8 <readCanToStructs+0x41dc>
			return;
 8014fa6:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8014fa8:	373c      	adds	r7, #60	; 0x3c
 8014faa:	46bd      	mov	sp, r7
 8014fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014fae:	bf00      	nop
 8014fb0:	20006970 	.word	0x20006970
 8014fb4:	2000719c 	.word	0x2000719c

08014fb8 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8014fb8:	b580      	push	{r7, lr}
 8014fba:	b084      	sub	sp, #16
 8014fbc:	af00      	add	r7, sp, #0
 8014fbe:	6078      	str	r0, [r7, #4]
 8014fc0:	460b      	mov	r3, r1
 8014fc2:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8014fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014fcc:	461a      	mov	r2, r3
 8014fce:	6879      	ldr	r1, [r7, #4]
 8014fd0:	2000      	movs	r0, #0
 8014fd2:	f000 f845 	bl	8015060 <GetCRC16>
 8014fd6:	4603      	mov	r3, r0
 8014fd8:	461a      	mov	r2, r3
 8014fda:	4b1d      	ldr	r3, [pc, #116]	; (8015050 <CheckCRC+0x98>)
 8014fdc:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8014fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014fe2:	687a      	ldr	r2, [r7, #4]
 8014fe4:	4413      	add	r3, r2
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	b29a      	uxth	r2, r3
 8014fea:	4b1a      	ldr	r3, [pc, #104]	; (8015054 <CheckCRC+0x9c>)
 8014fec:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8014fee:	4b19      	ldr	r3, [pc, #100]	; (8015054 <CheckCRC+0x9c>)
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	021b      	lsls	r3, r3, #8
 8014ff4:	b29a      	uxth	r2, r3
 8014ff6:	4b17      	ldr	r3, [pc, #92]	; (8015054 <CheckCRC+0x9c>)
 8014ff8:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8014ffa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014ffe:	3301      	adds	r3, #1
 8015000:	687a      	ldr	r2, [r7, #4]
 8015002:	4413      	add	r3, r2
 8015004:	781b      	ldrb	r3, [r3, #0]
 8015006:	b29a      	uxth	r2, r3
 8015008:	4b12      	ldr	r3, [pc, #72]	; (8015054 <CheckCRC+0x9c>)
 801500a:	881b      	ldrh	r3, [r3, #0]
 801500c:	4313      	orrs	r3, r2
 801500e:	b29a      	uxth	r2, r3
 8015010:	4b10      	ldr	r3, [pc, #64]	; (8015054 <CheckCRC+0x9c>)
 8015012:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8015014:	4b0f      	ldr	r3, [pc, #60]	; (8015054 <CheckCRC+0x9c>)
 8015016:	881a      	ldrh	r2, [r3, #0]
 8015018:	4b0d      	ldr	r3, [pc, #52]	; (8015050 <CheckCRC+0x98>)
 801501a:	881b      	ldrh	r3, [r3, #0]
 801501c:	429a      	cmp	r2, r3
 801501e:	d105      	bne.n	801502c <CheckCRC+0x74>
	{
		retVal = 1;
 8015020:	2301      	movs	r3, #1
 8015022:	81fb      	strh	r3, [r7, #14]
		return k;
 8015024:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <CheckCRC+0x9c>)
 8015026:	881b      	ldrh	r3, [r3, #0]
 8015028:	b21b      	sxth	r3, r3
 801502a:	e00d      	b.n	8015048 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 801502c:	4b08      	ldr	r3, [pc, #32]	; (8015050 <CheckCRC+0x98>)
 801502e:	881b      	ldrh	r3, [r3, #0]
 8015030:	4619      	mov	r1, r3
 8015032:	4809      	ldr	r0, [pc, #36]	; (8015058 <CheckCRC+0xa0>)
 8015034:	f010 fd12 	bl	8025a5c <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8015038:	4b06      	ldr	r3, [pc, #24]	; (8015054 <CheckCRC+0x9c>)
 801503a:	881b      	ldrh	r3, [r3, #0]
 801503c:	4619      	mov	r1, r3
 801503e:	4807      	ldr	r0, [pc, #28]	; (801505c <CheckCRC+0xa4>)
 8015040:	f010 fd0c 	bl	8025a5c <iprintf>
	return retVal;
 8015044:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8015048:	4618      	mov	r0, r3
 801504a:	3710      	adds	r7, #16
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	2000b2b8 	.word	0x2000b2b8
 8015054:	2000b2ba 	.word	0x2000b2ba
 8015058:	0802a688 	.word	0x0802a688
 801505c:	0802a6a0 	.word	0x0802a6a0

08015060 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8015060:	b480      	push	{r7}
 8015062:	b085      	sub	sp, #20
 8015064:	af00      	add	r7, sp, #0
 8015066:	4603      	mov	r3, r0
 8015068:	6039      	str	r1, [r7, #0]
 801506a:	80fb      	strh	r3, [r7, #6]
 801506c:	4613      	mov	r3, r2
 801506e:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8015070:	88fb      	ldrh	r3, [r7, #6]
 8015072:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8015074:	e038      	b.n	80150e8 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015076:	89fb      	ldrh	r3, [r7, #14]
 8015078:	f003 030f 	and.w	r3, r3, #15
 801507c:	4a22      	ldr	r2, [pc, #136]	; (8015108 <GetCRC16+0xa8>)
 801507e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015082:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015084:	89fb      	ldrh	r3, [r7, #14]
 8015086:	091b      	lsrs	r3, r3, #4
 8015088:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 801508a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801508e:	89bb      	ldrh	r3, [r7, #12]
 8015090:	4053      	eors	r3, r2
 8015092:	b21a      	sxth	r2, r3
 8015094:	683b      	ldr	r3, [r7, #0]
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	f003 030f 	and.w	r3, r3, #15
 801509c:	491a      	ldr	r1, [pc, #104]	; (8015108 <GetCRC16+0xa8>)
 801509e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80150a2:	b21b      	sxth	r3, r3
 80150a4:	4053      	eors	r3, r2
 80150a6:	b21b      	sxth	r3, r3
 80150a8:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 80150aa:	89fb      	ldrh	r3, [r7, #14]
 80150ac:	f003 030f 	and.w	r3, r3, #15
 80150b0:	4a15      	ldr	r2, [pc, #84]	; (8015108 <GetCRC16+0xa8>)
 80150b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80150b6:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 80150b8:	89fb      	ldrh	r3, [r7, #14]
 80150ba:	091b      	lsrs	r3, r3, #4
 80150bc:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 80150be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80150c2:	89bb      	ldrh	r3, [r7, #12]
 80150c4:	4053      	eors	r3, r2
 80150c6:	b21a      	sxth	r2, r3
 80150c8:	683b      	ldr	r3, [r7, #0]
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	091b      	lsrs	r3, r3, #4
 80150ce:	b2db      	uxtb	r3, r3
 80150d0:	f003 030f 	and.w	r3, r3, #15
 80150d4:	490c      	ldr	r1, [pc, #48]	; (8015108 <GetCRC16+0xa8>)
 80150d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80150da:	b21b      	sxth	r3, r3
 80150dc:	4053      	eors	r3, r2
 80150de:	b21b      	sxth	r3, r3
 80150e0:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	3301      	adds	r3, #1
 80150e6:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 80150e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80150ec:	b29a      	uxth	r2, r3
 80150ee:	3a01      	subs	r2, #1
 80150f0:	b292      	uxth	r2, r2
 80150f2:	80ba      	strh	r2, [r7, #4]
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	dcbe      	bgt.n	8015076 <GetCRC16+0x16>
	}
	return(uiCrc);
 80150f8:	89fb      	ldrh	r3, [r7, #14]
}
 80150fa:	4618      	mov	r0, r3
 80150fc:	3714      	adds	r7, #20
 80150fe:	46bd      	mov	sp, r7
 8015100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015104:	4770      	bx	lr
 8015106:	bf00      	nop
 8015108:	0802cea8 	.word	0x0802cea8

0801510c <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b082      	sub	sp, #8
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
 8015114:	460b      	mov	r3, r1
 8015116:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8015118:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801511c:	461a      	mov	r2, r3
 801511e:	6879      	ldr	r1, [r7, #4]
 8015120:	2000      	movs	r0, #0
 8015122:	f7ff ff9d 	bl	8015060 <GetCRC16>
 8015126:	4603      	mov	r3, r0
 8015128:	461a      	mov	r2, r3
 801512a:	4b11      	ldr	r3, [pc, #68]	; (8015170 <ComputeCRC+0x64>)
 801512c:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 801512e:	4b10      	ldr	r3, [pc, #64]	; (8015170 <ComputeCRC+0x64>)
 8015130:	881a      	ldrh	r2, [r3, #0]
 8015132:	4b10      	ldr	r3, [pc, #64]	; (8015174 <ComputeCRC+0x68>)
 8015134:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8015136:	4b0e      	ldr	r3, [pc, #56]	; (8015170 <ComputeCRC+0x64>)
 8015138:	8819      	ldrh	r1, [r3, #0]
 801513a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801513e:	3301      	adds	r3, #1
 8015140:	687a      	ldr	r2, [r7, #4]
 8015142:	4413      	add	r3, r2
 8015144:	b2ca      	uxtb	r2, r1
 8015146:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8015148:	4b09      	ldr	r3, [pc, #36]	; (8015170 <ComputeCRC+0x64>)
 801514a:	881b      	ldrh	r3, [r3, #0]
 801514c:	0a1b      	lsrs	r3, r3, #8
 801514e:	b29a      	uxth	r2, r3
 8015150:	4b07      	ldr	r3, [pc, #28]	; (8015170 <ComputeCRC+0x64>)
 8015152:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8015154:	4b06      	ldr	r3, [pc, #24]	; (8015170 <ComputeCRC+0x64>)
 8015156:	8819      	ldrh	r1, [r3, #0]
 8015158:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801515c:	687a      	ldr	r2, [r7, #4]
 801515e:	4413      	add	r3, r2
 8015160:	b2ca      	uxtb	r2, r1
 8015162:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8015164:	4b03      	ldr	r3, [pc, #12]	; (8015174 <ComputeCRC+0x68>)
 8015166:	881b      	ldrh	r3, [r3, #0]
}
 8015168:	4618      	mov	r0, r3
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	2000b2bc 	.word	0x2000b2bc
 8015174:	2000b2be 	.word	0x2000b2be

08015178 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8015178:	b480      	push	{r7}
 801517a:	b087      	sub	sp, #28
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8015180:	2300      	movs	r3, #0
 8015182:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8015184:	2300      	movs	r3, #0
 8015186:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8015188:	2300      	movs	r3, #0
 801518a:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	005b      	lsls	r3, r3, #1
 8015190:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8015192:	2300      	movs	r3, #0
 8015194:	60fb      	str	r3, [r7, #12]
 8015196:	e012      	b.n	80151be <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8015198:	693b      	ldr	r3, [r7, #16]
 801519a:	f003 0301 	and.w	r3, r3, #1
 801519e:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	f1c3 031f 	rsb	r3, r3, #31
 80151a6:	68ba      	ldr	r2, [r7, #8]
 80151a8:	fa02 f303 	lsl.w	r3, r2, r3
 80151ac:	697a      	ldr	r2, [r7, #20]
 80151ae:	4313      	orrs	r3, r2
 80151b0:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 80151b2:	693b      	ldr	r3, [r7, #16]
 80151b4:	085b      	lsrs	r3, r3, #1
 80151b6:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	3301      	adds	r3, #1
 80151bc:	60fb      	str	r3, [r7, #12]
 80151be:	68fb      	ldr	r3, [r7, #12]
 80151c0:	2b1f      	cmp	r3, #31
 80151c2:	dde9      	ble.n	8015198 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 80151c4:	697b      	ldr	r3, [r7, #20]
}
 80151c6:	4618      	mov	r0, r3
 80151c8:	371c      	adds	r7, #28
 80151ca:	46bd      	mov	sp, r7
 80151cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151d0:	4770      	bx	lr
	...

080151d4 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b088      	sub	sp, #32
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
 80151dc:	460b      	mov	r3, r1
 80151de:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 80151e0:	2300      	movs	r3, #0
 80151e2:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 80151e4:	2300      	movs	r3, #0
 80151e6:	617b      	str	r3, [r7, #20]
	int converted = 0;
 80151e8:	2300      	movs	r3, #0
 80151ea:	613b      	str	r3, [r7, #16]
	int i=0;
 80151ec:	2300      	movs	r3, #0
 80151ee:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 80151f0:	4b26      	ldr	r3, [pc, #152]	; (801528c <CalculateDirectReverseCrc+0xb8>)
 80151f2:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 80151f4:	68f8      	ldr	r0, [r7, #12]
 80151f6:	f7ff ffbf 	bl	8015178 <ReverseCRCPolynomial>
 80151fa:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80151fc:	2300      	movs	r3, #0
 80151fe:	61bb      	str	r3, [r7, #24]
 8015200:	e00d      	b.n	801521e <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8015202:	69f8      	ldr	r0, [r7, #28]
 8015204:	69bb      	ldr	r3, [r7, #24]
 8015206:	687a      	ldr	r2, [r7, #4]
 8015208:	4413      	add	r3, r2
 801520a:	781b      	ldrb	r3, [r3, #0]
 801520c:	697a      	ldr	r2, [r7, #20]
 801520e:	4619      	mov	r1, r3
 8015210:	f000 f844 	bl	801529c <AnsoldoCrc>
 8015214:	4603      	mov	r3, r0
 8015216:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8015218:	69bb      	ldr	r3, [r7, #24]
 801521a:	3301      	adds	r3, #1
 801521c:	61bb      	str	r3, [r7, #24]
 801521e:	887b      	ldrh	r3, [r7, #2]
 8015220:	69ba      	ldr	r2, [r7, #24]
 8015222:	429a      	cmp	r2, r3
 8015224:	dbed      	blt.n	8015202 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8015226:	69fb      	ldr	r3, [r7, #28]
 8015228:	061b      	lsls	r3, r3, #24
 801522a:	693a      	ldr	r2, [r7, #16]
 801522c:	4313      	orrs	r3, r2
 801522e:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8015230:	69fb      	ldr	r3, [r7, #28]
 8015232:	021b      	lsls	r3, r3, #8
 8015234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8015238:	693a      	ldr	r2, [r7, #16]
 801523a:	4313      	orrs	r3, r2
 801523c:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 801523e:	69fb      	ldr	r3, [r7, #28]
 8015240:	121b      	asrs	r3, r3, #8
 8015242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8015246:	693a      	ldr	r2, [r7, #16]
 8015248:	4313      	orrs	r3, r2
 801524a:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 801524c:	69fb      	ldr	r3, [r7, #28]
 801524e:	0e1a      	lsrs	r2, r3, #24
 8015250:	693b      	ldr	r3, [r7, #16]
 8015252:	4313      	orrs	r3, r2
 8015254:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8015256:	4b0e      	ldr	r3, [pc, #56]	; (8015290 <CalculateDirectReverseCrc+0xbc>)
 8015258:	781b      	ldrb	r3, [r3, #0]
 801525a:	2b01      	cmp	r3, #1
 801525c:	d110      	bne.n	8015280 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 801525e:	480d      	ldr	r0, [pc, #52]	; (8015294 <CalculateDirectReverseCrc+0xc0>)
 8015260:	f008 f8a4 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8015264:	4601      	mov	r1, r0
 8015266:	4b0c      	ldr	r3, [pc, #48]	; (8015298 <CalculateDirectReverseCrc+0xc4>)
 8015268:	fba3 2301 	umull	r2, r3, r3, r1
 801526c:	08da      	lsrs	r2, r3, #3
 801526e:	4613      	mov	r3, r2
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	4413      	add	r3, r2
 8015274:	005b      	lsls	r3, r3, #1
 8015276:	1aca      	subs	r2, r1, r3
 8015278:	693b      	ldr	r3, [r7, #16]
 801527a:	4413      	add	r3, r2
 801527c:	3301      	adds	r3, #1
 801527e:	e000      	b.n	8015282 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8015280:	693b      	ldr	r3, [r7, #16]
}
 8015282:	4618      	mov	r0, r3
 8015284:	3720      	adds	r7, #32
 8015286:	46bd      	mov	sp, r7
 8015288:	bd80      	pop	{r7, pc}
 801528a:	bf00      	nop
 801528c:	d20d8a81 	.word	0xd20d8a81
 8015290:	200024af 	.word	0x200024af
 8015294:	2000bbac 	.word	0x2000bbac
 8015298:	cccccccd 	.word	0xcccccccd

0801529c <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 801529c:	b480      	push	{r7}
 801529e:	b08b      	sub	sp, #44	; 0x2c
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	60f8      	str	r0, [r7, #12]
 80152a4:	460b      	mov	r3, r1
 80152a6:	607a      	str	r2, [r7, #4]
 80152a8:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 80152aa:	7afb      	ldrb	r3, [r7, #11]
 80152ac:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 80152ae:	2301      	movs	r3, #1
 80152b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152b4:	e01d      	b.n	80152f2 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 80152b6:	68fb      	ldr	r3, [r7, #12]
 80152b8:	f003 0301 	and.w	r3, r3, #1
 80152bc:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 80152be:	6a3b      	ldr	r3, [r7, #32]
 80152c0:	f003 0301 	and.w	r3, r3, #1
 80152c4:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 80152c6:	68fb      	ldr	r3, [r7, #12]
 80152c8:	085b      	lsrs	r3, r3, #1
 80152ca:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 80152cc:	69fa      	ldr	r2, [r7, #28]
 80152ce:	69bb      	ldr	r3, [r7, #24]
 80152d0:	4053      	eors	r3, r2
 80152d2:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 80152d4:	697b      	ldr	r3, [r7, #20]
 80152d6:	2b01      	cmp	r3, #1
 80152d8:	d103      	bne.n	80152e2 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	4053      	eors	r3, r2
 80152e0:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 80152e2:	6a3b      	ldr	r3, [r7, #32]
 80152e4:	085b      	lsrs	r3, r3, #1
 80152e6:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 80152e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152ec:	3301      	adds	r3, #1
 80152ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80152f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80152f6:	2b08      	cmp	r3, #8
 80152f8:	d9dd      	bls.n	80152b6 <AnsoldoCrc+0x1a>
	}
	return (Crc);
 80152fa:	68fb      	ldr	r3, [r7, #12]
}
 80152fc:	4618      	mov	r0, r3
 80152fe:	372c      	adds	r7, #44	; 0x2c
 8015300:	46bd      	mov	sp, r7
 8015302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015306:	4770      	bx	lr

08015308 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8015308:	b580      	push	{r7, lr}
 801530a:	b090      	sub	sp, #64	; 0x40
 801530c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801530e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015312:	2200      	movs	r2, #0
 8015314:	601a      	str	r2, [r3, #0]
 8015316:	605a      	str	r2, [r3, #4]
 8015318:	609a      	str	r2, [r3, #8]
 801531a:	60da      	str	r2, [r3, #12]
 801531c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801531e:	4bb2      	ldr	r3, [pc, #712]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015322:	4ab1      	ldr	r2, [pc, #708]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015328:	6313      	str	r3, [r2, #48]	; 0x30
 801532a:	4baf      	ldr	r3, [pc, #700]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801532e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015332:	62bb      	str	r3, [r7, #40]	; 0x28
 8015334:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8015336:	4bac      	ldr	r3, [pc, #688]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801533a:	4aab      	ldr	r2, [pc, #684]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801533c:	f043 0320 	orr.w	r3, r3, #32
 8015340:	6313      	str	r3, [r2, #48]	; 0x30
 8015342:	4ba9      	ldr	r3, [pc, #676]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015346:	f003 0320 	and.w	r3, r3, #32
 801534a:	627b      	str	r3, [r7, #36]	; 0x24
 801534c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801534e:	4ba6      	ldr	r3, [pc, #664]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015352:	4aa5      	ldr	r2, [pc, #660]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015354:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015358:	6313      	str	r3, [r2, #48]	; 0x30
 801535a:	4ba3      	ldr	r3, [pc, #652]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801535e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015362:	623b      	str	r3, [r7, #32]
 8015364:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8015366:	4ba0      	ldr	r3, [pc, #640]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801536a:	4a9f      	ldr	r2, [pc, #636]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801536c:	f043 0304 	orr.w	r3, r3, #4
 8015370:	6313      	str	r3, [r2, #48]	; 0x30
 8015372:	4b9d      	ldr	r3, [pc, #628]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015376:	f003 0304 	and.w	r3, r3, #4
 801537a:	61fb      	str	r3, [r7, #28]
 801537c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801537e:	4b9a      	ldr	r3, [pc, #616]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015382:	4a99      	ldr	r2, [pc, #612]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015384:	f043 0301 	orr.w	r3, r3, #1
 8015388:	6313      	str	r3, [r2, #48]	; 0x30
 801538a:	4b97      	ldr	r3, [pc, #604]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801538e:	f003 0301 	and.w	r3, r3, #1
 8015392:	61bb      	str	r3, [r7, #24]
 8015394:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8015396:	4b94      	ldr	r3, [pc, #592]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801539a:	4a93      	ldr	r2, [pc, #588]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801539c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80153a0:	6313      	str	r3, [r2, #48]	; 0x30
 80153a2:	4b91      	ldr	r3, [pc, #580]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80153aa:	617b      	str	r3, [r7, #20]
 80153ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80153ae:	4b8e      	ldr	r3, [pc, #568]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153b2:	4a8d      	ldr	r2, [pc, #564]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153b4:	f043 0310 	orr.w	r3, r3, #16
 80153b8:	6313      	str	r3, [r2, #48]	; 0x30
 80153ba:	4b8b      	ldr	r3, [pc, #556]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153be:	f003 0310 	and.w	r3, r3, #16
 80153c2:	613b      	str	r3, [r7, #16]
 80153c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80153c6:	4b88      	ldr	r3, [pc, #544]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153ca:	4a87      	ldr	r2, [pc, #540]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153cc:	f043 0302 	orr.w	r3, r3, #2
 80153d0:	6313      	str	r3, [r2, #48]	; 0x30
 80153d2:	4b85      	ldr	r3, [pc, #532]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153d6:	f003 0302 	and.w	r3, r3, #2
 80153da:	60fb      	str	r3, [r7, #12]
 80153dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80153de:	4b82      	ldr	r3, [pc, #520]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153e2:	4a81      	ldr	r2, [pc, #516]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153e4:	f043 0308 	orr.w	r3, r3, #8
 80153e8:	6313      	str	r3, [r2, #48]	; 0x30
 80153ea:	4b7f      	ldr	r3, [pc, #508]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153ee:	f003 0308 	and.w	r3, r3, #8
 80153f2:	60bb      	str	r3, [r7, #8]
 80153f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80153f6:	4b7c      	ldr	r3, [pc, #496]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153fa:	4a7b      	ldr	r2, [pc, #492]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 80153fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015400:	6313      	str	r3, [r2, #48]	; 0x30
 8015402:	4b79      	ldr	r3, [pc, #484]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015406:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801540a:	607b      	str	r3, [r7, #4]
 801540c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 801540e:	4b76      	ldr	r3, [pc, #472]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015412:	4a75      	ldr	r2, [pc, #468]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 8015414:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015418:	6313      	str	r3, [r2, #48]	; 0x30
 801541a:	4b73      	ldr	r3, [pc, #460]	; (80155e8 <MX_GPIO_Init+0x2e0>)
 801541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801541e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015422:	603b      	str	r3, [r7, #0]
 8015424:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8015426:	2200      	movs	r2, #0
 8015428:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 801542c:	486f      	ldr	r0, [pc, #444]	; (80155ec <MX_GPIO_Init+0x2e4>)
 801542e:	f005 ffdb 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8015432:	2200      	movs	r2, #0
 8015434:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8015438:	486d      	ldr	r0, [pc, #436]	; (80155f0 <MX_GPIO_Init+0x2e8>)
 801543a:	f005 ffd5 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 801543e:	2200      	movs	r2, #0
 8015440:	f240 7104 	movw	r1, #1796	; 0x704
 8015444:	486b      	ldr	r0, [pc, #428]	; (80155f4 <MX_GPIO_Init+0x2ec>)
 8015446:	f005 ffcf 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 801544a:	2201      	movs	r2, #1
 801544c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015450:	4869      	ldr	r0, [pc, #420]	; (80155f8 <MX_GPIO_Init+0x2f0>)
 8015452:	f005 ffc9 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8015456:	2200      	movs	r2, #0
 8015458:	f241 0104 	movw	r1, #4100	; 0x1004
 801545c:	4867      	ldr	r0, [pc, #412]	; (80155fc <MX_GPIO_Init+0x2f4>)
 801545e:	f005 ffc3 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8015462:	2201      	movs	r2, #1
 8015464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015468:	4865      	ldr	r0, [pc, #404]	; (8015600 <MX_GPIO_Init+0x2f8>)
 801546a:	f005 ffbd 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 801546e:	2200      	movs	r2, #0
 8015470:	2108      	movs	r1, #8
 8015472:	4864      	ldr	r0, [pc, #400]	; (8015604 <MX_GPIO_Init+0x2fc>)
 8015474:	f005 ffb8 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8015478:	2201      	movs	r2, #1
 801547a:	2160      	movs	r1, #96	; 0x60
 801547c:	4861      	ldr	r0, [pc, #388]	; (8015604 <MX_GPIO_Init+0x2fc>)
 801547e:	f005 ffb3 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8015482:	2200      	movs	r2, #0
 8015484:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8015488:	485f      	ldr	r0, [pc, #380]	; (8015608 <MX_GPIO_Init+0x300>)
 801548a:	f005 ffad 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 801548e:	2201      	movs	r2, #1
 8015490:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8015494:	485c      	ldr	r0, [pc, #368]	; (8015608 <MX_GPIO_Init+0x300>)
 8015496:	f005 ffa7 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 801549a:	2201      	movs	r2, #1
 801549c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80154a0:	4856      	ldr	r0, [pc, #344]	; (80155fc <MX_GPIO_Init+0x2f4>)
 80154a2:	f005 ffa1 	bl	801b3e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 80154a6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80154aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80154ac:	2301      	movs	r3, #1
 80154ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154b0:	2300      	movs	r3, #0
 80154b2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154b4:	2303      	movs	r3, #3
 80154b6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80154b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154bc:	4619      	mov	r1, r3
 80154be:	484b      	ldr	r0, [pc, #300]	; (80155ec <MX_GPIO_Init+0x2e4>)
 80154c0:	f005 fdce 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 80154c4:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80154c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80154ca:	2300      	movs	r3, #0
 80154cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154ce:	2300      	movs	r3, #0
 80154d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80154d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154d6:	4619      	mov	r1, r3
 80154d8:	4844      	ldr	r0, [pc, #272]	; (80155ec <MX_GPIO_Init+0x2e4>)
 80154da:	f005 fdc1 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 80154de:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80154e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80154e4:	2301      	movs	r3, #1
 80154e6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80154e8:	2300      	movs	r3, #0
 80154ea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80154ec:	2303      	movs	r3, #3
 80154ee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80154f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80154f4:	4619      	mov	r1, r3
 80154f6:	483e      	ldr	r0, [pc, #248]	; (80155f0 <MX_GPIO_Init+0x2e8>)
 80154f8:	f005 fdb2 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 80154fc:	2304      	movs	r3, #4
 80154fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015500:	2300      	movs	r3, #0
 8015502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015504:	2300      	movs	r3, #0
 8015506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8015508:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801550c:	4619      	mov	r1, r3
 801550e:	483c      	ldr	r0, [pc, #240]	; (8015600 <MX_GPIO_Init+0x2f8>)
 8015510:	f005 fda6 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8015514:	f240 7304 	movw	r3, #1796	; 0x704
 8015518:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801551a:	2301      	movs	r3, #1
 801551c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801551e:	2300      	movs	r3, #0
 8015520:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015522:	2303      	movs	r3, #3
 8015524:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015526:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801552a:	4619      	mov	r1, r3
 801552c:	4831      	ldr	r0, [pc, #196]	; (80155f4 <MX_GPIO_Init+0x2ec>)
 801552e:	f005 fd97 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8015532:	2303      	movs	r3, #3
 8015534:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8015536:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801553a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801553c:	2300      	movs	r3, #0
 801553e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015540:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015544:	4619      	mov	r1, r3
 8015546:	482d      	ldr	r0, [pc, #180]	; (80155fc <MX_GPIO_Init+0x2f4>)
 8015548:	f005 fd8a 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 801554c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015550:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015552:	2300      	movs	r3, #0
 8015554:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015556:	2300      	movs	r3, #0
 8015558:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 801555a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801555e:	4619      	mov	r1, r3
 8015560:	4825      	ldr	r0, [pc, #148]	; (80155f8 <MX_GPIO_Init+0x2f0>)
 8015562:	f005 fd7d 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8015566:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801556a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801556c:	2301      	movs	r3, #1
 801556e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015570:	2300      	movs	r3, #0
 8015572:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015574:	2303      	movs	r3, #3
 8015576:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8015578:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801557c:	4619      	mov	r1, r3
 801557e:	481e      	ldr	r0, [pc, #120]	; (80155f8 <MX_GPIO_Init+0x2f0>)
 8015580:	f005 fd6e 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8015584:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015588:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801558a:	2300      	movs	r3, #0
 801558c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801558e:	2300      	movs	r3, #0
 8015590:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015592:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015596:	4619      	mov	r1, r3
 8015598:	481a      	ldr	r0, [pc, #104]	; (8015604 <MX_GPIO_Init+0x2fc>)
 801559a:	f005 fd61 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 801559e:	f241 4304 	movw	r3, #5124	; 0x1404
 80155a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155a4:	2301      	movs	r3, #1
 80155a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155a8:	2300      	movs	r3, #0
 80155aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80155ac:	2303      	movs	r3, #3
 80155ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80155b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80155b4:	4619      	mov	r1, r3
 80155b6:	4811      	ldr	r0, [pc, #68]	; (80155fc <MX_GPIO_Init+0x2f4>)
 80155b8:	f005 fd52 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 80155bc:	2308      	movs	r3, #8
 80155be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80155c0:	2300      	movs	r3, #0
 80155c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155c4:	2300      	movs	r3, #0
 80155c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 80155c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80155cc:	4619      	mov	r1, r3
 80155ce:	480b      	ldr	r0, [pc, #44]	; (80155fc <MX_GPIO_Init+0x2f4>)
 80155d0:	f005 fd46 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 80155d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80155d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80155da:	2301      	movs	r3, #1
 80155dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80155de:	2300      	movs	r3, #0
 80155e0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80155e2:	2300      	movs	r3, #0
 80155e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80155e6:	e011      	b.n	801560c <MX_GPIO_Init+0x304>
 80155e8:	40023800 	.word	0x40023800
 80155ec:	40022000 	.word	0x40022000
 80155f0:	40021400 	.word	0x40021400
 80155f4:	40021c00 	.word	0x40021c00
 80155f8:	40021000 	.word	0x40021000
 80155fc:	40021800 	.word	0x40021800
 8015600:	40020800 	.word	0x40020800
 8015604:	40020c00 	.word	0x40020c00
 8015608:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 801560c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015610:	4619      	mov	r1, r3
 8015612:	4836      	ldr	r0, [pc, #216]	; (80156ec <MX_GPIO_Init+0x3e4>)
 8015614:	f005 fd24 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8015618:	2303      	movs	r3, #3
 801561a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801561c:	2302      	movs	r3, #2
 801561e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015620:	2300      	movs	r3, #0
 8015622:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015624:	2303      	movs	r3, #3
 8015626:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8015628:	2309      	movs	r3, #9
 801562a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801562c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015630:	4619      	mov	r1, r3
 8015632:	482f      	ldr	r0, [pc, #188]	; (80156f0 <MX_GPIO_Init+0x3e8>)
 8015634:	f005 fd14 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8015638:	2368      	movs	r3, #104	; 0x68
 801563a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801563c:	2301      	movs	r3, #1
 801563e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015640:	2300      	movs	r3, #0
 8015642:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015644:	2303      	movs	r3, #3
 8015646:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801564c:	4619      	mov	r1, r3
 801564e:	4828      	ldr	r0, [pc, #160]	; (80156f0 <MX_GPIO_Init+0x3e8>)
 8015650:	f005 fd06 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8015654:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801565a:	2300      	movs	r3, #0
 801565c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801565e:	2300      	movs	r3, #0
 8015660:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8015662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015666:	4619      	mov	r1, r3
 8015668:	4822      	ldr	r0, [pc, #136]	; (80156f4 <MX_GPIO_Init+0x3ec>)
 801566a:	f005 fcf9 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 801566e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015672:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015674:	2301      	movs	r3, #1
 8015676:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015678:	2300      	movs	r3, #0
 801567a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801567c:	2300      	movs	r3, #0
 801567e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8015680:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015684:	4619      	mov	r1, r3
 8015686:	481b      	ldr	r0, [pc, #108]	; (80156f4 <MX_GPIO_Init+0x3ec>)
 8015688:	f005 fcea 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 801568c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015692:	2301      	movs	r3, #1
 8015694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015696:	2300      	movs	r3, #0
 8015698:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801569a:	2303      	movs	r3, #3
 801569c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 801569e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80156a2:	4619      	mov	r1, r3
 80156a4:	4813      	ldr	r0, [pc, #76]	; (80156f4 <MX_GPIO_Init+0x3ec>)
 80156a6:	f005 fcdb 	bl	801b060 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 80156aa:	2318      	movs	r3, #24
 80156ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80156ae:	2300      	movs	r3, #0
 80156b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80156b2:	2300      	movs	r3, #0
 80156b4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80156b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80156ba:	4619      	mov	r1, r3
 80156bc:	480e      	ldr	r0, [pc, #56]	; (80156f8 <MX_GPIO_Init+0x3f0>)
 80156be:	f005 fccf 	bl	801b060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80156c2:	2200      	movs	r2, #0
 80156c4:	2101      	movs	r1, #1
 80156c6:	2006      	movs	r0, #6
 80156c8:	f004 f99f 	bl	8019a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80156cc:	2006      	movs	r0, #6
 80156ce:	f004 f9b8 	bl	8019a42 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 80156d2:	2201      	movs	r2, #1
 80156d4:	2101      	movs	r1, #1
 80156d6:	2007      	movs	r0, #7
 80156d8:	f004 f997 	bl	8019a0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80156dc:	2007      	movs	r0, #7
 80156de:	f004 f9b0 	bl	8019a42 <HAL_NVIC_EnableIRQ>

}
 80156e2:	bf00      	nop
 80156e4:	3740      	adds	r7, #64	; 0x40
 80156e6:	46bd      	mov	sp, r7
 80156e8:	bd80      	pop	{r7, pc}
 80156ea:	bf00      	nop
 80156ec:	40020800 	.word	0x40020800
 80156f0:	40020c00 	.word	0x40020c00
 80156f4:	40022400 	.word	0x40022400
 80156f8:	40022800 	.word	0x40022800

080156fc <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8015700:	4b0a      	ldr	r3, [pc, #40]	; (801572c <Feed_wdt+0x30>)
 8015702:	681b      	ldr	r3, [r3, #0]
 8015704:	4618      	mov	r0, r3
 8015706:	f7fa fc5b 	bl	800ffc0 <HAL_Elaps_Ticks>
 801570a:	4603      	mov	r3, r0
 801570c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015710:	d309      	bcc.n	8015726 <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8015712:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015716:	4806      	ldr	r0, [pc, #24]	; (8015730 <Feed_wdt+0x34>)
 8015718:	f005 fe7f 	bl	801b41a <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 801571c:	f003 fa88 	bl	8018c30 <HAL_GetTick>
 8015720:	4603      	mov	r3, r0
 8015722:	4a02      	ldr	r2, [pc, #8]	; (801572c <Feed_wdt+0x30>)
 8015724:	6013      	str	r3, [r2, #0]
	}

}
 8015726:	bf00      	nop
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	2000b2c0 	.word	0x2000b2c0
 8015730:	40022400 	.word	0x40022400

08015734 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8015734:	b580      	push	{r7, lr}
 8015736:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8015738:	4b09      	ldr	r3, [pc, #36]	; (8015760 <Blink_S2+0x2c>)
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	4618      	mov	r0, r3
 801573e:	f7fa fc3f 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015742:	4603      	mov	r3, r0
 8015744:	2b64      	cmp	r3, #100	; 0x64
 8015746:	d909      	bls.n	801575c <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8015748:	f44f 7100 	mov.w	r1, #512	; 0x200
 801574c:	4805      	ldr	r0, [pc, #20]	; (8015764 <Blink_S2+0x30>)
 801574e:	f005 fe64 	bl	801b41a <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8015752:	f003 fa6d 	bl	8018c30 <HAL_GetTick>
 8015756:	4603      	mov	r3, r0
 8015758:	4a01      	ldr	r2, [pc, #4]	; (8015760 <Blink_S2+0x2c>)
 801575a:	6013      	str	r3, [r2, #0]
	}
}
 801575c:	bf00      	nop
 801575e:	bd80      	pop	{r7, pc}
 8015760:	2000b2c4 	.word	0x2000b2c4
 8015764:	40021c00 	.word	0x40021c00

08015768 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801576c:	4b1b      	ldr	r3, [pc, #108]	; (80157dc <MX_I2C1_Init+0x74>)
 801576e:	4a1c      	ldr	r2, [pc, #112]	; (80157e0 <MX_I2C1_Init+0x78>)
 8015770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8015772:	4b1a      	ldr	r3, [pc, #104]	; (80157dc <MX_I2C1_Init+0x74>)
 8015774:	4a1b      	ldr	r2, [pc, #108]	; (80157e4 <MX_I2C1_Init+0x7c>)
 8015776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8015778:	4b18      	ldr	r3, [pc, #96]	; (80157dc <MX_I2C1_Init+0x74>)
 801577a:	2200      	movs	r2, #0
 801577c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801577e:	4b17      	ldr	r3, [pc, #92]	; (80157dc <MX_I2C1_Init+0x74>)
 8015780:	2201      	movs	r2, #1
 8015782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015784:	4b15      	ldr	r3, [pc, #84]	; (80157dc <MX_I2C1_Init+0x74>)
 8015786:	2200      	movs	r2, #0
 8015788:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801578a:	4b14      	ldr	r3, [pc, #80]	; (80157dc <MX_I2C1_Init+0x74>)
 801578c:	2200      	movs	r2, #0
 801578e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015790:	4b12      	ldr	r3, [pc, #72]	; (80157dc <MX_I2C1_Init+0x74>)
 8015792:	2200      	movs	r2, #0
 8015794:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015796:	4b11      	ldr	r3, [pc, #68]	; (80157dc <MX_I2C1_Init+0x74>)
 8015798:	2200      	movs	r2, #0
 801579a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801579c:	4b0f      	ldr	r3, [pc, #60]	; (80157dc <MX_I2C1_Init+0x74>)
 801579e:	2200      	movs	r2, #0
 80157a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80157a2:	480e      	ldr	r0, [pc, #56]	; (80157dc <MX_I2C1_Init+0x74>)
 80157a4:	f005 fe78 	bl	801b498 <HAL_I2C_Init>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d001      	beq.n	80157b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80157ae:	f001 fc45 	bl	801703c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80157b2:	2100      	movs	r1, #0
 80157b4:	4809      	ldr	r0, [pc, #36]	; (80157dc <MX_I2C1_Init+0x74>)
 80157b6:	f006 fbc7 	bl	801bf48 <HAL_I2CEx_ConfigAnalogFilter>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d001      	beq.n	80157c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80157c0:	f001 fc3c 	bl	801703c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80157c4:	2100      	movs	r1, #0
 80157c6:	4805      	ldr	r0, [pc, #20]	; (80157dc <MX_I2C1_Init+0x74>)
 80157c8:	f006 fc09 	bl	801bfde <HAL_I2CEx_ConfigDigitalFilter>
 80157cc:	4603      	mov	r3, r0
 80157ce:	2b00      	cmp	r3, #0
 80157d0:	d001      	beq.n	80157d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80157d2:	f001 fc33 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80157d6:	bf00      	nop
 80157d8:	bd80      	pop	{r7, pc}
 80157da:	bf00      	nop
 80157dc:	2000b2c8 	.word	0x2000b2c8
 80157e0:	40005400 	.word	0x40005400
 80157e4:	c0000e12 	.word	0xc0000e12

080157e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80157e8:	b580      	push	{r7, lr}
 80157ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80157ec:	4b1b      	ldr	r3, [pc, #108]	; (801585c <MX_I2C2_Init+0x74>)
 80157ee:	4a1c      	ldr	r2, [pc, #112]	; (8015860 <MX_I2C2_Init+0x78>)
 80157f0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 80157f2:	4b1a      	ldr	r3, [pc, #104]	; (801585c <MX_I2C2_Init+0x74>)
 80157f4:	4a1b      	ldr	r2, [pc, #108]	; (8015864 <MX_I2C2_Init+0x7c>)
 80157f6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80157f8:	4b18      	ldr	r3, [pc, #96]	; (801585c <MX_I2C2_Init+0x74>)
 80157fa:	2200      	movs	r2, #0
 80157fc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80157fe:	4b17      	ldr	r3, [pc, #92]	; (801585c <MX_I2C2_Init+0x74>)
 8015800:	2201      	movs	r2, #1
 8015802:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015804:	4b15      	ldr	r3, [pc, #84]	; (801585c <MX_I2C2_Init+0x74>)
 8015806:	2200      	movs	r2, #0
 8015808:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801580a:	4b14      	ldr	r3, [pc, #80]	; (801585c <MX_I2C2_Init+0x74>)
 801580c:	2200      	movs	r2, #0
 801580e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015810:	4b12      	ldr	r3, [pc, #72]	; (801585c <MX_I2C2_Init+0x74>)
 8015812:	2200      	movs	r2, #0
 8015814:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015816:	4b11      	ldr	r3, [pc, #68]	; (801585c <MX_I2C2_Init+0x74>)
 8015818:	2200      	movs	r2, #0
 801581a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801581c:	4b0f      	ldr	r3, [pc, #60]	; (801585c <MX_I2C2_Init+0x74>)
 801581e:	2200      	movs	r2, #0
 8015820:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8015822:	480e      	ldr	r0, [pc, #56]	; (801585c <MX_I2C2_Init+0x74>)
 8015824:	f005 fe38 	bl	801b498 <HAL_I2C_Init>
 8015828:	4603      	mov	r3, r0
 801582a:	2b00      	cmp	r3, #0
 801582c:	d001      	beq.n	8015832 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 801582e:	f001 fc05 	bl	801703c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015832:	2100      	movs	r1, #0
 8015834:	4809      	ldr	r0, [pc, #36]	; (801585c <MX_I2C2_Init+0x74>)
 8015836:	f006 fb87 	bl	801bf48 <HAL_I2CEx_ConfigAnalogFilter>
 801583a:	4603      	mov	r3, r0
 801583c:	2b00      	cmp	r3, #0
 801583e:	d001      	beq.n	8015844 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8015840:	f001 fbfc 	bl	801703c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8015844:	2100      	movs	r1, #0
 8015846:	4805      	ldr	r0, [pc, #20]	; (801585c <MX_I2C2_Init+0x74>)
 8015848:	f006 fbc9 	bl	801bfde <HAL_I2CEx_ConfigDigitalFilter>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d001      	beq.n	8015856 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8015852:	f001 fbf3 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8015856:	bf00      	nop
 8015858:	bd80      	pop	{r7, pc}
 801585a:	bf00      	nop
 801585c:	2000b31c 	.word	0x2000b31c
 8015860:	40005800 	.word	0x40005800
 8015864:	c0000e12 	.word	0xc0000e12

08015868 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b0b0      	sub	sp, #192	; 0xc0
 801586c:	af00      	add	r7, sp, #0
 801586e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015870:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015874:	2200      	movs	r2, #0
 8015876:	601a      	str	r2, [r3, #0]
 8015878:	605a      	str	r2, [r3, #4]
 801587a:	609a      	str	r2, [r3, #8]
 801587c:	60da      	str	r2, [r3, #12]
 801587e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015880:	f107 031c 	add.w	r3, r7, #28
 8015884:	2290      	movs	r2, #144	; 0x90
 8015886:	2100      	movs	r1, #0
 8015888:	4618      	mov	r0, r3
 801588a:	f00f ffff 	bl	802588c <memset>
  if(i2cHandle->Instance==I2C1)
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	681b      	ldr	r3, [r3, #0]
 8015892:	4a44      	ldr	r2, [pc, #272]	; (80159a4 <HAL_I2C_MspInit+0x13c>)
 8015894:	4293      	cmp	r3, r2
 8015896:	d13e      	bne.n	8015916 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8015898:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801589c:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 801589e:	2300      	movs	r3, #0
 80158a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80158a4:	f107 031c 	add.w	r3, r7, #28
 80158a8:	4618      	mov	r0, r3
 80158aa:	f007 f8d7 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 80158ae:	4603      	mov	r3, r0
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d001      	beq.n	80158b8 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80158b4:	f001 fbc2 	bl	801703c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80158b8:	4b3b      	ldr	r3, [pc, #236]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 80158ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158bc:	4a3a      	ldr	r2, [pc, #232]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 80158be:	f043 0302 	orr.w	r3, r3, #2
 80158c2:	6313      	str	r3, [r2, #48]	; 0x30
 80158c4:	4b38      	ldr	r3, [pc, #224]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 80158c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158c8:	f003 0302 	and.w	r3, r3, #2
 80158cc:	61bb      	str	r3, [r7, #24]
 80158ce:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80158d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80158d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80158d8:	2312      	movs	r3, #18
 80158da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80158de:	2300      	movs	r3, #0
 80158e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80158e4:	2303      	movs	r3, #3
 80158e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80158ea:	2304      	movs	r3, #4
 80158ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80158f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80158f4:	4619      	mov	r1, r3
 80158f6:	482d      	ldr	r0, [pc, #180]	; (80159ac <HAL_I2C_MspInit+0x144>)
 80158f8:	f005 fbb2 	bl	801b060 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80158fc:	4b2a      	ldr	r3, [pc, #168]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 80158fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015900:	4a29      	ldr	r2, [pc, #164]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015902:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015906:	6413      	str	r3, [r2, #64]	; 0x40
 8015908:	4b27      	ldr	r3, [pc, #156]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 801590a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801590c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015910:	617b      	str	r3, [r7, #20]
 8015912:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8015914:	e041      	b.n	801599a <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	4a25      	ldr	r2, [pc, #148]	; (80159b0 <HAL_I2C_MspInit+0x148>)
 801591c:	4293      	cmp	r3, r2
 801591e:	d13c      	bne.n	801599a <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8015920:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015924:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8015926:	2300      	movs	r3, #0
 8015928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801592c:	f107 031c 	add.w	r3, r7, #28
 8015930:	4618      	mov	r0, r3
 8015932:	f007 f893 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 8015936:	4603      	mov	r3, r0
 8015938:	2b00      	cmp	r3, #0
 801593a:	d001      	beq.n	8015940 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 801593c:	f001 fb7e 	bl	801703c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8015940:	4b19      	ldr	r3, [pc, #100]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015944:	4a18      	ldr	r2, [pc, #96]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015946:	f043 0320 	orr.w	r3, r3, #32
 801594a:	6313      	str	r3, [r2, #48]	; 0x30
 801594c:	4b16      	ldr	r3, [pc, #88]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 801594e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015950:	f003 0320 	and.w	r3, r3, #32
 8015954:	613b      	str	r3, [r7, #16]
 8015956:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8015958:	2303      	movs	r3, #3
 801595a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801595e:	2312      	movs	r3, #18
 8015960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015964:	2300      	movs	r3, #0
 8015966:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801596a:	2303      	movs	r3, #3
 801596c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8015970:	2304      	movs	r3, #4
 8015972:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015976:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801597a:	4619      	mov	r1, r3
 801597c:	480d      	ldr	r0, [pc, #52]	; (80159b4 <HAL_I2C_MspInit+0x14c>)
 801597e:	f005 fb6f 	bl	801b060 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8015982:	4b09      	ldr	r3, [pc, #36]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015986:	4a08      	ldr	r2, [pc, #32]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801598c:	6413      	str	r3, [r2, #64]	; 0x40
 801598e:	4b06      	ldr	r3, [pc, #24]	; (80159a8 <HAL_I2C_MspInit+0x140>)
 8015990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015996:	60fb      	str	r3, [r7, #12]
 8015998:	68fb      	ldr	r3, [r7, #12]
}
 801599a:	bf00      	nop
 801599c:	37c0      	adds	r7, #192	; 0xc0
 801599e:	46bd      	mov	sp, r7
 80159a0:	bd80      	pop	{r7, pc}
 80159a2:	bf00      	nop
 80159a4:	40005400 	.word	0x40005400
 80159a8:	40023800 	.word	0x40023800
 80159ac:	40020400 	.word	0x40020400
 80159b0:	40005800 	.word	0x40005800
 80159b4:	40021400 	.word	0x40021400

080159b8 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80159b8:	b580      	push	{r7, lr}
 80159ba:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80159bc:	4b0b      	ldr	r3, [pc, #44]	; (80159ec <MX_IWDG_Init+0x34>)
 80159be:	4a0c      	ldr	r2, [pc, #48]	; (80159f0 <MX_IWDG_Init+0x38>)
 80159c0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80159c2:	4b0a      	ldr	r3, [pc, #40]	; (80159ec <MX_IWDG_Init+0x34>)
 80159c4:	2203      	movs	r2, #3
 80159c6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80159c8:	4b08      	ldr	r3, [pc, #32]	; (80159ec <MX_IWDG_Init+0x34>)
 80159ca:	f640 72ff 	movw	r2, #4095	; 0xfff
 80159ce:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80159d0:	4b06      	ldr	r3, [pc, #24]	; (80159ec <MX_IWDG_Init+0x34>)
 80159d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80159d6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80159d8:	4804      	ldr	r0, [pc, #16]	; (80159ec <MX_IWDG_Init+0x34>)
 80159da:	f006 fb4c 	bl	801c076 <HAL_IWDG_Init>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	d001      	beq.n	80159e8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80159e4:	f001 fb2a 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80159e8:	bf00      	nop
 80159ea:	bd80      	pop	{r7, pc}
 80159ec:	2000b370 	.word	0x2000b370
 80159f0:	40003000 	.word	0x40003000

080159f4 <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 80159f8:	4811      	ldr	r0, [pc, #68]	; (8015a40 <Process_Kyosan_EI+0x4c>)
 80159fa:	f006 fb8b 	bl	801c114 <HAL_IWDG_Refresh>

		Feed_wdt();
 80159fe:	f7ff fe7d 	bl	80156fc <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 8015a02:	2003      	movs	r0, #3
 8015a04:	f000 f9ae 	bl	8015d64 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 8015a08:	f000 f912 	bl	8015c30 <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 8015a0c:	f000 f8ce 	bl	8015bac <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 8015a10:	f000 f81c 	bl	8015a4c <Process_ComFailTimeout>

		readCanToStructs();
 8015a14:	f7fb f9da 	bl	8010dcc <readCanToStructs>

		Check_forKyosanCMD();
 8015a18:	f000 fe14 	bl	8016644 <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 8015a1c:	f000 f8ac 	bl	8015b78 <SendKyosanRelays2Other>

		CheckEIPC_DAT_CRC();
 8015a20:	f7eb fa94 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8015a24:	4b07      	ldr	r3, [pc, #28]	; (8015a44 <Process_Kyosan_EI+0x50>)
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d0e5      	beq.n	80159f8 <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8015a2c:	4b06      	ldr	r3, [pc, #24]	; (8015a48 <Process_Kyosan_EI+0x54>)
 8015a2e:	2203      	movs	r2, #3
 8015a30:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8015a32:	4803      	ldr	r0, [pc, #12]	; (8015a40 <Process_Kyosan_EI+0x4c>)
 8015a34:	f006 fb6e 	bl	801c114 <HAL_IWDG_Refresh>
		Data_Processing();
 8015a38:	f001 ff7e 	bl	8017938 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8015a3c:	e7f9      	b.n	8015a32 <Process_Kyosan_EI+0x3e>
 8015a3e:	bf00      	nop
 8015a40:	2000b370 	.word	0x2000b370
 8015a44:	20000bba 	.word	0x20000bba
 8015a48:	20000fbd 	.word	0x20000fbd

08015a4c <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 8015a4c:	b580      	push	{r7, lr}
 8015a4e:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 8015a50:	4b43      	ldr	r3, [pc, #268]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7fa fab3 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015a5a:	4602      	mov	r2, r0
 8015a5c:	4b41      	ldr	r3, [pc, #260]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015a5e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015a62:	429a      	cmp	r2, r3
 8015a64:	d82b      	bhi.n	8015abe <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015a66:	4b3e      	ldr	r3, [pc, #248]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015a68:	689b      	ldr	r3, [r3, #8]
 8015a6a:	4618      	mov	r0, r3
 8015a6c:	f7fa faa8 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015a70:	4602      	mov	r2, r0
 8015a72:	4b3c      	ldr	r3, [pc, #240]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015a74:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015a78:	429a      	cmp	r2, r3
 8015a7a:	d820      	bhi.n	8015abe <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015a7c:	4b38      	ldr	r3, [pc, #224]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015a7e:	681b      	ldr	r3, [r3, #0]
 8015a80:	4618      	mov	r0, r3
 8015a82:	f7fa fa9d 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015a86:	4602      	mov	r2, r0
 8015a88:	4b36      	ldr	r3, [pc, #216]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015a8a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015a8e:	429a      	cmp	r2, r3
 8015a90:	d815      	bhi.n	8015abe <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015a92:	4b33      	ldr	r3, [pc, #204]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015a94:	68db      	ldr	r3, [r3, #12]
 8015a96:	4618      	mov	r0, r3
 8015a98:	f7fa fa92 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015a9c:	4602      	mov	r2, r0
 8015a9e:	4b31      	ldr	r3, [pc, #196]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015aa0:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d80a      	bhi.n	8015abe <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 8015aa8:	4b2d      	ldr	r3, [pc, #180]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015aaa:	691b      	ldr	r3, [r3, #16]
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fa fa87 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015ab2:	4602      	mov	r2, r0
 8015ab4:	4b2b      	ldr	r3, [pc, #172]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015ab6:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d913      	bls.n	8015ae6 <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8015abe:	492a      	ldr	r1, [pc, #168]	; (8015b68 <Process_ComFailTimeout+0x11c>)
 8015ac0:	482a      	ldr	r0, [pc, #168]	; (8015b6c <Process_ComFailTimeout+0x120>)
 8015ac2:	f7ea fbbd 	bl	8000240 <strcmp>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d047      	beq.n	8015b5c <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8015acc:	4b28      	ldr	r3, [pc, #160]	; (8015b70 <Process_ComFailTimeout+0x124>)
 8015ace:	785b      	ldrb	r3, [r3, #1]
 8015ad0:	2b01      	cmp	r3, #1
 8015ad2:	d144      	bne.n	8015b5e <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 8015ad4:	4827      	ldr	r0, [pc, #156]	; (8015b74 <Process_ComFailTimeout+0x128>)
 8015ad6:	f010 f85d 	bl	8025b94 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 8015ada:	2240      	movs	r2, #64	; 0x40
 8015adc:	2100      	movs	r1, #0
 8015ade:	4824      	ldr	r0, [pc, #144]	; (8015b70 <Process_ComFailTimeout+0x124>)
 8015ae0:	f00f fed4 	bl	802588c <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8015ae4:	e03b      	b.n	8015b5e <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 8015ae6:	4b1e      	ldr	r3, [pc, #120]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fa fa68 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015af0:	4602      	mov	r2, r0
 8015af2:	4b1c      	ldr	r3, [pc, #112]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015af4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d230      	bcs.n	8015b5e <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015afc:	4b18      	ldr	r3, [pc, #96]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015afe:	689b      	ldr	r3, [r3, #8]
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7fa fa5d 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015b06:	4602      	mov	r2, r0
 8015b08:	4b16      	ldr	r3, [pc, #88]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015b0a:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015b0e:	429a      	cmp	r2, r3
 8015b10:	d225      	bcs.n	8015b5e <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015b12:	4b13      	ldr	r3, [pc, #76]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7fa fa52 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015b1c:	4602      	mov	r2, r0
 8015b1e:	4b11      	ldr	r3, [pc, #68]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015b20:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d21a      	bcs.n	8015b5e <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015b28:	4b0d      	ldr	r3, [pc, #52]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	f7fa fa47 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015b32:	4602      	mov	r2, r0
 8015b34:	4b0b      	ldr	r3, [pc, #44]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015b36:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015b3a:	429a      	cmp	r2, r3
 8015b3c:	d20f      	bcs.n	8015b5e <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 8015b3e:	4b08      	ldr	r3, [pc, #32]	; (8015b60 <Process_ComFailTimeout+0x114>)
 8015b40:	691b      	ldr	r3, [r3, #16]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7fa fa3c 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015b48:	4602      	mov	r2, r0
 8015b4a:	4b06      	ldr	r3, [pc, #24]	; (8015b64 <Process_ComFailTimeout+0x118>)
 8015b4c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015b50:	429a      	cmp	r2, r3
 8015b52:	d204      	bcs.n	8015b5e <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 8015b54:	4b06      	ldr	r3, [pc, #24]	; (8015b70 <Process_ComFailTimeout+0x124>)
 8015b56:	2201      	movs	r2, #1
 8015b58:	705a      	strb	r2, [r3, #1]
 8015b5a:	e000      	b.n	8015b5e <Process_ComFailTimeout+0x112>
			return;
 8015b5c:	bf00      	nop
	}
}
 8015b5e:	bd80      	pop	{r7, pc}
 8015b60:	2000b388 	.word	0x2000b388
 8015b64:	20000504 	.word	0x20000504
 8015b68:	0802a6b8 	.word	0x0802a6b8
 8015b6c:	20000505 	.word	0x20000505
 8015b70:	2000b39c 	.word	0x2000b39c
 8015b74:	0802a6c4 	.word	0x0802a6c4

08015b78 <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 8015b7c:	4b0a      	ldr	r3, [pc, #40]	; (8015ba8 <SendKyosanRelays2Other+0x30>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fa fa1d 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015b86:	4603      	mov	r3, r0
 8015b88:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8015b8c:	4293      	cmp	r3, r2
 8015b8e:	d908      	bls.n	8015ba2 <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8015b90:	f44f 7002 	mov.w	r0, #520	; 0x208
 8015b94:	f7fa ff90 	bl	8010ab8 <TransmitCanPkt>
#endif
		RelaySendingClk = HAL_GetTick();
 8015b98:	f003 f84a 	bl	8018c30 <HAL_GetTick>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	4a02      	ldr	r2, [pc, #8]	; (8015ba8 <SendKyosanRelays2Other+0x30>)
 8015ba0:	6013      	str	r3, [r2, #0]
	}
}
 8015ba2:	bf00      	nop
 8015ba4:	bd80      	pop	{r7, pc}
 8015ba6:	bf00      	nop
 8015ba8:	2000b890 	.word	0x2000b890

08015bac <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 8015bb0:	4b18      	ldr	r3, [pc, #96]	; (8015c14 <DetectCanXchangeFailure+0x68>)
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	4618      	mov	r0, r3
 8015bb6:	f7fa fa03 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015bba:	4602      	mov	r2, r0
 8015bbc:	4b16      	ldr	r3, [pc, #88]	; (8015c18 <DetectCanXchangeFailure+0x6c>)
 8015bbe:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8015bc2:	429a      	cmp	r2, r3
 8015bc4:	d912      	bls.n	8015bec <DetectCanXchangeFailure+0x40>
 8015bc6:	4b15      	ldr	r3, [pc, #84]	; (8015c1c <DetectCanXchangeFailure+0x70>)
 8015bc8:	781b      	ldrb	r3, [r3, #0]
 8015bca:	2b00      	cmp	r3, #0
 8015bcc:	d00e      	beq.n	8015bec <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8015bce:	4914      	ldr	r1, [pc, #80]	; (8015c20 <DetectCanXchangeFailure+0x74>)
 8015bd0:	4814      	ldr	r0, [pc, #80]	; (8015c24 <DetectCanXchangeFailure+0x78>)
 8015bd2:	f7ea fb35 	bl	8000240 <strcmp>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d103      	bne.n	8015be4 <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 8015bdc:	4b0f      	ldr	r3, [pc, #60]	; (8015c1c <DetectCanXchangeFailure+0x70>)
 8015bde:	2201      	movs	r2, #1
 8015be0:	701a      	strb	r2, [r3, #0]
			return;
 8015be2:	e016      	b.n	8015c12 <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 8015be4:	4b0d      	ldr	r3, [pc, #52]	; (8015c1c <DetectCanXchangeFailure+0x70>)
 8015be6:	2200      	movs	r2, #0
 8015be8:	701a      	strb	r2, [r3, #0]
 8015bea:	e012      	b.n	8015c12 <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 8015bec:	4b0e      	ldr	r3, [pc, #56]	; (8015c28 <DetectCanXchangeFailure+0x7c>)
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	4618      	mov	r0, r3
 8015bf2:	f7fa f9e5 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015bfc:	d909      	bls.n	8015c12 <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 8015bfe:	f003 f817 	bl	8018c30 <HAL_GetTick>
 8015c02:	4603      	mov	r3, r0
 8015c04:	4a08      	ldr	r2, [pc, #32]	; (8015c28 <DetectCanXchangeFailure+0x7c>)
 8015c06:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8015c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015c0c:	4807      	ldr	r0, [pc, #28]	; (8015c2c <DetectCanXchangeFailure+0x80>)
 8015c0e:	f005 fc04 	bl	801b41a <HAL_GPIO_TogglePin>
		}

	}
}
 8015c12:	bd80      	pop	{r7, pc}
 8015c14:	2000b4a0 	.word	0x2000b4a0
 8015c18:	20000504 	.word	0x20000504
 8015c1c:	2000030b 	.word	0x2000030b
 8015c20:	0802a6b8 	.word	0x0802a6b8
 8015c24:	20000505 	.word	0x20000505
 8015c28:	2000b894 	.word	0x2000b894
 8015c2c:	40021c00 	.word	0x40021c00

08015c30 <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 8015c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c32:	b083      	sub	sp, #12
 8015c34:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 8015c36:	2300      	movs	r3, #0
 8015c38:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 8015c3a:	4b44      	ldr	r3, [pc, #272]	; (8015d4c <Process_Send_Signals_2_MIE_Kyosan+0x11c>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	4618      	mov	r0, r3
 8015c40:	f7fa f9be 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015c44:	4602      	mov	r2, r0
 8015c46:	4b42      	ldr	r3, [pc, #264]	; (8015d50 <Process_Send_Signals_2_MIE_Kyosan+0x120>)
 8015c48:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 8015c4c:	429a      	cmp	r2, r3
 8015c4e:	d978      	bls.n	8015d42 <Process_Send_Signals_2_MIE_Kyosan+0x112>
		}
#endif

#ifdef EI_2

		if(Is_CAN_Exchange_happening == SET)
 8015c50:	4b40      	ldr	r3, [pc, #256]	; (8015d54 <Process_Send_Signals_2_MIE_Kyosan+0x124>)
 8015c52:	781b      	ldrb	r3, [r3, #0]
 8015c54:	2b01      	cmp	r3, #1
 8015c56:	d166      	bne.n	8015d26 <Process_Send_Signals_2_MIE_Kyosan+0xf6>
		{
			Choice = 0;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8015c5c:	4b3e      	ldr	r3, [pc, #248]	; (8015d58 <Process_Send_Signals_2_MIE_Kyosan+0x128>)
 8015c5e:	785b      	ldrb	r3, [r3, #1]
 8015c60:	2b01      	cmp	r3, #1
 8015c62:	d104      	bne.n	8015c6e <Process_Send_Signals_2_MIE_Kyosan+0x3e>
 8015c64:	79fb      	ldrb	r3, [r7, #7]
 8015c66:	f043 0301 	orr.w	r3, r3, #1
 8015c6a:	71fb      	strb	r3, [r7, #7]
 8015c6c:	e003      	b.n	8015c76 <Process_Send_Signals_2_MIE_Kyosan+0x46>
 8015c6e:	79fb      	ldrb	r3, [r7, #7]
 8015c70:	f023 0301 	bic.w	r3, r3, #1
 8015c74:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8015c76:	4b39      	ldr	r3, [pc, #228]	; (8015d5c <Process_Send_Signals_2_MIE_Kyosan+0x12c>)
 8015c78:	785b      	ldrb	r3, [r3, #1]
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d104      	bne.n	8015c88 <Process_Send_Signals_2_MIE_Kyosan+0x58>
 8015c7e:	79fb      	ldrb	r3, [r7, #7]
 8015c80:	f043 0302 	orr.w	r3, r3, #2
 8015c84:	71fb      	strb	r3, [r7, #7]
 8015c86:	e003      	b.n	8015c90 <Process_Send_Signals_2_MIE_Kyosan+0x60>
 8015c88:	79fb      	ldrb	r3, [r7, #7]
 8015c8a:	f023 0302 	bic.w	r3, r3, #2
 8015c8e:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 8015c90:	79fb      	ldrb	r3, [r7, #7]
 8015c92:	2b01      	cmp	r3, #1
 8015c94:	d005      	beq.n	8015ca2 <Process_Send_Signals_2_MIE_Kyosan+0x72>
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	dd3f      	ble.n	8015d1a <Process_Send_Signals_2_MIE_Kyosan+0xea>
 8015c9a:	3b02      	subs	r3, #2
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d83c      	bhi.n	8015d1a <Process_Send_Signals_2_MIE_Kyosan+0xea>
 8015ca0:	e01d      	b.n	8015cde <Process_Send_Signals_2_MIE_Kyosan+0xae>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 8015ca2:	4a2f      	ldr	r2, [pc, #188]	; (8015d60 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8015ca4:	4b2c      	ldr	r3, [pc, #176]	; (8015d58 <Process_Send_Signals_2_MIE_Kyosan+0x128>)
 8015ca6:	3302      	adds	r3, #2
 8015ca8:	1c90      	adds	r0, r2, #2
 8015caa:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015cae:	4602      	mov	r2, r0
 8015cb0:	4619      	mov	r1, r3
 8015cb2:	f8d1 c000 	ldr.w	ip, [r1]
 8015cb6:	684e      	ldr	r6, [r1, #4]
 8015cb8:	688d      	ldr	r5, [r1, #8]
 8015cba:	68c9      	ldr	r1, [r1, #12]
 8015cbc:	f8c2 c000 	str.w	ip, [r2]
 8015cc0:	6056      	str	r6, [r2, #4]
 8015cc2:	6095      	str	r5, [r2, #8]
 8015cc4:	60d1      	str	r1, [r2, #12]
 8015cc6:	3310      	adds	r3, #16
 8015cc8:	3010      	adds	r0, #16
 8015cca:	42a3      	cmp	r3, r4
 8015ccc:	d1ef      	bne.n	8015cae <Process_Send_Signals_2_MIE_Kyosan+0x7e>
 8015cce:	4602      	mov	r2, r0
 8015cd0:	6818      	ldr	r0, [r3, #0]
 8015cd2:	6859      	ldr	r1, [r3, #4]
 8015cd4:	689b      	ldr	r3, [r3, #8]
 8015cd6:	6010      	str	r0, [r2, #0]
 8015cd8:	6051      	str	r1, [r2, #4]
 8015cda:	6093      	str	r3, [r2, #8]
				break;
 8015cdc:	e02c      	b.n	8015d38 <Process_Send_Signals_2_MIE_Kyosan+0x108>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 8015cde:	4a20      	ldr	r2, [pc, #128]	; (8015d60 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8015ce0:	4b1e      	ldr	r3, [pc, #120]	; (8015d5c <Process_Send_Signals_2_MIE_Kyosan+0x12c>)
 8015ce2:	3302      	adds	r3, #2
 8015ce4:	1c90      	adds	r0, r2, #2
 8015ce6:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8015cea:	4602      	mov	r2, r0
 8015cec:	4619      	mov	r1, r3
 8015cee:	f8d1 c000 	ldr.w	ip, [r1]
 8015cf2:	684e      	ldr	r6, [r1, #4]
 8015cf4:	688d      	ldr	r5, [r1, #8]
 8015cf6:	68c9      	ldr	r1, [r1, #12]
 8015cf8:	f8c2 c000 	str.w	ip, [r2]
 8015cfc:	6056      	str	r6, [r2, #4]
 8015cfe:	6095      	str	r5, [r2, #8]
 8015d00:	60d1      	str	r1, [r2, #12]
 8015d02:	3310      	adds	r3, #16
 8015d04:	3010      	adds	r0, #16
 8015d06:	42a3      	cmp	r3, r4
 8015d08:	d1ef      	bne.n	8015cea <Process_Send_Signals_2_MIE_Kyosan+0xba>
 8015d0a:	4602      	mov	r2, r0
 8015d0c:	6818      	ldr	r0, [r3, #0]
 8015d0e:	6859      	ldr	r1, [r3, #4]
 8015d10:	689b      	ldr	r3, [r3, #8]
 8015d12:	6010      	str	r0, [r2, #0]
 8015d14:	6051      	str	r1, [r2, #4]
 8015d16:	6093      	str	r3, [r2, #8]
				break;
 8015d18:	e00e      	b.n	8015d38 <Process_Send_Signals_2_MIE_Kyosan+0x108>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8015d1a:	2240      	movs	r2, #64	; 0x40
 8015d1c:	2100      	movs	r1, #0
 8015d1e:	4810      	ldr	r0, [pc, #64]	; (8015d60 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8015d20:	f00f fdb4 	bl	802588c <memset>
 8015d24:	e008      	b.n	8015d38 <Process_Send_Signals_2_MIE_Kyosan+0x108>
			}
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8015d26:	2240      	movs	r2, #64	; 0x40
 8015d28:	2100      	movs	r1, #0
 8015d2a:	480d      	ldr	r0, [pc, #52]	; (8015d60 <Process_Send_Signals_2_MIE_Kyosan+0x130>)
 8015d2c:	f00f fdae 	bl	802588c <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8015d30:	f240 1019 	movw	r0, #281	; 0x119
 8015d34:	f7fa fec0 	bl	8010ab8 <TransmitCanPkt>
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 8015d38:	f002 ff7a 	bl	8018c30 <HAL_GetTick>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	4a03      	ldr	r2, [pc, #12]	; (8015d4c <Process_Send_Signals_2_MIE_Kyosan+0x11c>)
 8015d40:	6013      	str	r3, [r2, #0]
	}
}
 8015d42:	bf00      	nop
 8015d44:	370c      	adds	r7, #12
 8015d46:	46bd      	mov	sp, r7
 8015d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d4a:	bf00      	nop
 8015d4c:	2000b49c 	.word	0x2000b49c
 8015d50:	20000504 	.word	0x20000504
 8015d54:	2000030b 	.word	0x2000030b
 8015d58:	2000b3dc 	.word	0x2000b3dc
 8015d5c:	2000b39c 	.word	0x2000b39c
 8015d60:	2000b45c 	.word	0x2000b45c

08015d64 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 8015d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d66:	b089      	sub	sp, #36	; 0x24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 8015d72:	2300      	movs	r3, #0
 8015d74:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 8015d76:	2300      	movs	r3, #0
 8015d78:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 8015d82:	2300      	movs	r3, #0
 8015d84:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 8015d86:	4b33      	ldr	r3, [pc, #204]	; (8015e54 <Get_Kyosan_EI_Message+0xf0>)
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7fa f918 	bl	800ffc0 <HAL_Elaps_Ticks>
 8015d90:	4602      	mov	r2, r0
 8015d92:	4b31      	ldr	r3, [pc, #196]	; (8015e58 <Get_Kyosan_EI_Message+0xf4>)
 8015d94:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	f0c0 83ef 	bcc.w	801657c <Get_Kyosan_EI_Message+0x818>
 8015d9e:	4b2f      	ldr	r3, [pc, #188]	; (8015e5c <Get_Kyosan_EI_Message+0xf8>)
 8015da0:	781b      	ldrb	r3, [r3, #0]
 8015da2:	2b01      	cmp	r3, #1
 8015da4:	f040 83ea 	bne.w	801657c <Get_Kyosan_EI_Message+0x818>
	{
		Control_DataReceived = RESET;
 8015da8:	4b2c      	ldr	r3, [pc, #176]	; (8015e5c <Get_Kyosan_EI_Message+0xf8>)
 8015daa:	2200      	movs	r2, #0
 8015dac:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 8015dae:	e3e5      	b.n	801657c <Get_Kyosan_EI_Message+0x818>
	{
		Data = Com_Get_Byte(ComPort);
 8015db0:	79fb      	ldrb	r3, [r7, #7]
 8015db2:	4618      	mov	r0, r3
 8015db4:	f002 fc14 	bl	80185e0 <Com_Get_Byte>
 8015db8:	4603      	mov	r3, r0
 8015dba:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 8015dbc:	4b28      	ldr	r3, [pc, #160]	; (8015e60 <Get_Kyosan_EI_Message+0xfc>)
 8015dbe:	881a      	ldrh	r2, [r3, #0]
 8015dc0:	4b28      	ldr	r3, [pc, #160]	; (8015e64 <Get_Kyosan_EI_Message+0x100>)
 8015dc2:	881b      	ldrh	r3, [r3, #0]
 8015dc4:	429a      	cmp	r2, r3
 8015dc6:	d003      	beq.n	8015dd0 <Get_Kyosan_EI_Message+0x6c>
 8015dc8:	4b25      	ldr	r3, [pc, #148]	; (8015e60 <Get_Kyosan_EI_Message+0xfc>)
 8015dca:	881b      	ldrh	r3, [r3, #0]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d139      	bne.n	8015e44 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8015dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015dd4:	2100      	movs	r1, #0
 8015dd6:	4824      	ldr	r0, [pc, #144]	; (8015e68 <Get_Kyosan_EI_Message+0x104>)
 8015dd8:	f00f fd58 	bl	802588c <memset>
			Cur_Receive_Length = RESET;
 8015ddc:	4b20      	ldr	r3, [pc, #128]	; (8015e60 <Get_Kyosan_EI_Message+0xfc>)
 8015dde:	2200      	movs	r2, #0
 8015de0:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8015de2:	7b7b      	ldrb	r3, [r7, #13]
 8015de4:	2b01      	cmp	r3, #1
 8015de6:	d001      	beq.n	8015dec <Get_Kyosan_EI_Message+0x88>
 8015de8:	2bfe      	cmp	r3, #254	; 0xfe
 8015dea:	d113      	bne.n	8015e14 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8015dec:	4b1a      	ldr	r3, [pc, #104]	; (8015e58 <Get_Kyosan_EI_Message+0xf4>)
 8015dee:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8015df2:	b29b      	uxth	r3, r3
 8015df4:	019b      	lsls	r3, r3, #6
 8015df6:	b29a      	uxth	r2, r3
 8015df8:	4b1a      	ldr	r3, [pc, #104]	; (8015e64 <Get_Kyosan_EI_Message+0x100>)
 8015dfa:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8015dfc:	4b16      	ldr	r3, [pc, #88]	; (8015e58 <Get_Kyosan_EI_Message+0xf4>)
 8015dfe:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8015e02:	2b04      	cmp	r3, #4
 8015e04:	d102      	bne.n	8015e0c <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 8015e06:	4b17      	ldr	r3, [pc, #92]	; (8015e64 <Get_Kyosan_EI_Message+0x100>)
 8015e08:	22c0      	movs	r2, #192	; 0xc0
 8015e0a:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8015e0c:	4b17      	ldr	r3, [pc, #92]	; (8015e6c <Get_Kyosan_EI_Message+0x108>)
 8015e0e:	2201      	movs	r2, #1
 8015e10:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8015e12:	e017      	b.n	8015e44 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8015e14:	4b11      	ldr	r3, [pc, #68]	; (8015e5c <Get_Kyosan_EI_Message+0xf8>)
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	2b01      	cmp	r3, #1
 8015e1a:	d113      	bne.n	8015e44 <Get_Kyosan_EI_Message+0xe0>
 8015e1c:	7b7b      	ldrb	r3, [r7, #13]
 8015e1e:	2b10      	cmp	r3, #16
 8015e20:	d903      	bls.n	8015e2a <Get_Kyosan_EI_Message+0xc6>
 8015e22:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	da06      	bge.n	8015e38 <Get_Kyosan_EI_Message+0xd4>
 8015e2a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	da08      	bge.n	8015e44 <Get_Kyosan_EI_Message+0xe0>
 8015e32:	7b7b      	ldrb	r3, [r7, #13]
 8015e34:	2bee      	cmp	r3, #238	; 0xee
 8015e36:	d805      	bhi.n	8015e44 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 8015e38:	4b0c      	ldr	r3, [pc, #48]	; (8015e6c <Get_Kyosan_EI_Message+0x108>)
 8015e3a:	2202      	movs	r2, #2
 8015e3c:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8015e3e:	4b09      	ldr	r3, [pc, #36]	; (8015e64 <Get_Kyosan_EI_Message+0x100>)
 8015e40:	2203      	movs	r2, #3
 8015e42:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8015e44:	4b09      	ldr	r3, [pc, #36]	; (8015e6c <Get_Kyosan_EI_Message+0x108>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d011      	beq.n	8015e70 <Get_Kyosan_EI_Message+0x10c>
 8015e4c:	2b02      	cmp	r3, #2
 8015e4e:	f000 82c1 	beq.w	80163d4 <Get_Kyosan_EI_Message+0x670>
 8015e52:	e390      	b.n	8016576 <Get_Kyosan_EI_Message+0x812>
 8015e54:	2000b898 	.word	0x2000b898
 8015e58:	20000504 	.word	0x20000504
 8015e5c:	2000b89c 	.word	0x2000b89c
 8015e60:	2000b89e 	.word	0x2000b89e
 8015e64:	2000b8a0 	.word	0x2000b8a0
 8015e68:	2000b8a4 	.word	0x2000b8a4
 8015e6c:	2000b9a4 	.word	0x2000b9a4
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8015e70:	4ba4      	ldr	r3, [pc, #656]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015e72:	881b      	ldrh	r3, [r3, #0]
 8015e74:	1c5a      	adds	r2, r3, #1
 8015e76:	b291      	uxth	r1, r2
 8015e78:	4aa2      	ldr	r2, [pc, #648]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015e7a:	8011      	strh	r1, [r2, #0]
 8015e7c:	4619      	mov	r1, r3
 8015e7e:	4aa2      	ldr	r2, [pc, #648]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015e80:	7b7b      	ldrb	r3, [r7, #13]
 8015e82:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 8015e84:	4b9f      	ldr	r3, [pc, #636]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015e86:	881a      	ldrh	r2, [r3, #0]
 8015e88:	4ba0      	ldr	r3, [pc, #640]	; (801610c <Get_Kyosan_EI_Message+0x3a8>)
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	429a      	cmp	r2, r3
 8015e8e:	f040 8375 	bne.w	801657c <Get_Kyosan_EI_Message+0x818>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 8015e92:	4b9c      	ldr	r3, [pc, #624]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015e94:	881b      	ldrh	r3, [r3, #0]
 8015e96:	3b02      	subs	r3, #2
 8015e98:	4619      	mov	r1, r3
 8015e9a:	489b      	ldr	r0, [pc, #620]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015e9c:	f000 fb96 	bl	80165cc <Calc_Kysoan_CRC>
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8015ea4:	4b97      	ldr	r3, [pc, #604]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015ea6:	881b      	ldrh	r3, [r3, #0]
 8015ea8:	3b02      	subs	r3, #2
 8015eaa:	4a97      	ldr	r2, [pc, #604]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015eac:	4413      	add	r3, r2
 8015eae:	461a      	mov	r2, r3
 8015eb0:	2110      	movs	r1, #16
 8015eb2:	2000      	movs	r0, #0
 8015eb4:	f7ea fbae 	bl	8000614 <ExtractBits>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8015ebc:	4b94      	ldr	r3, [pc, #592]	; (8016110 <Get_Kyosan_EI_Message+0x3ac>)
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	f003 0301 	and.w	r3, r3, #1
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d02d      	beq.n	8015f24 <Get_Kyosan_EI_Message+0x1c0>
 8015ec8:	4b8f      	ldr	r3, [pc, #572]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	b25b      	sxtb	r3, r3
 8015ece:	11db      	asrs	r3, r3, #7
 8015ed0:	b25b      	sxtb	r3, r3
 8015ed2:	f003 0301 	and.w	r3, r3, #1
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d124      	bne.n	8015f24 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 8015eda:	488e      	ldr	r0, [pc, #568]	; (8016114 <Get_Kyosan_EI_Message+0x3b0>)
 8015edc:	f00f fe5a 	bl	8025b94 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015ee0:	488d      	ldr	r0, [pc, #564]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 8015ee2:	f007 fa63 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8015ee6:	4601      	mov	r1, r0
 8015ee8:	4b8c      	ldr	r3, [pc, #560]	; (801611c <Get_Kyosan_EI_Message+0x3b8>)
 8015eea:	fba3 2301 	umull	r2, r3, r3, r1
 8015eee:	0bda      	lsrs	r2, r3, #15
 8015ef0:	4613      	mov	r3, r2
 8015ef2:	041b      	lsls	r3, r3, #16
 8015ef4:	1a9b      	subs	r3, r3, r2
 8015ef6:	1aca      	subs	r2, r1, r3
 8015ef8:	4613      	mov	r3, r2
 8015efa:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015efc:	8bfa      	ldrh	r2, [r7, #30]
 8015efe:	897b      	ldrh	r3, [r7, #10]
 8015f00:	429a      	cmp	r2, r3
 8015f02:	d10f      	bne.n	8015f24 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8015f04:	4884      	ldr	r0, [pc, #528]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 8015f06:	f007 fa51 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8015f0a:	4601      	mov	r1, r0
 8015f0c:	4b84      	ldr	r3, [pc, #528]	; (8016120 <Get_Kyosan_EI_Message+0x3bc>)
 8015f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8015f12:	09da      	lsrs	r2, r3, #7
 8015f14:	4613      	mov	r3, r2
 8015f16:	021b      	lsls	r3, r3, #8
 8015f18:	1a9b      	subs	r3, r3, r2
 8015f1a:	1aca      	subs	r2, r1, r3
 8015f1c:	b293      	uxth	r3, r2
 8015f1e:	8bfa      	ldrh	r2, [r7, #30]
 8015f20:	1ad3      	subs	r3, r2, r3
 8015f22:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8015f24:	4b7a      	ldr	r3, [pc, #488]	; (8016110 <Get_Kyosan_EI_Message+0x3ac>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	085b      	lsrs	r3, r3, #1
 8015f2a:	f003 0301 	and.w	r3, r3, #1
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d02d      	beq.n	8015f8e <Get_Kyosan_EI_Message+0x22a>
 8015f32:	4b75      	ldr	r3, [pc, #468]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015f34:	781b      	ldrb	r3, [r3, #0]
 8015f36:	b25b      	sxtb	r3, r3
 8015f38:	11db      	asrs	r3, r3, #7
 8015f3a:	b25b      	sxtb	r3, r3
 8015f3c:	f003 0301 	and.w	r3, r3, #1
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d024      	beq.n	8015f8e <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8015f44:	4877      	ldr	r0, [pc, #476]	; (8016124 <Get_Kyosan_EI_Message+0x3c0>)
 8015f46:	f00f fe25 	bl	8025b94 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8015f4a:	4873      	ldr	r0, [pc, #460]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 8015f4c:	f007 fa2e 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8015f50:	4601      	mov	r1, r0
 8015f52:	4b72      	ldr	r3, [pc, #456]	; (801611c <Get_Kyosan_EI_Message+0x3b8>)
 8015f54:	fba3 2301 	umull	r2, r3, r3, r1
 8015f58:	0bda      	lsrs	r2, r3, #15
 8015f5a:	4613      	mov	r3, r2
 8015f5c:	041b      	lsls	r3, r3, #16
 8015f5e:	1a9b      	subs	r3, r3, r2
 8015f60:	1aca      	subs	r2, r1, r3
 8015f62:	4613      	mov	r3, r2
 8015f64:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8015f66:	8bfa      	ldrh	r2, [r7, #30]
 8015f68:	897b      	ldrh	r3, [r7, #10]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d10f      	bne.n	8015f8e <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8015f6e:	486a      	ldr	r0, [pc, #424]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 8015f70:	f007 fa1c 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8015f74:	4601      	mov	r1, r0
 8015f76:	4b6a      	ldr	r3, [pc, #424]	; (8016120 <Get_Kyosan_EI_Message+0x3bc>)
 8015f78:	fba3 2301 	umull	r2, r3, r3, r1
 8015f7c:	09da      	lsrs	r2, r3, #7
 8015f7e:	4613      	mov	r3, r2
 8015f80:	021b      	lsls	r3, r3, #8
 8015f82:	1a9b      	subs	r3, r3, r2
 8015f84:	1aca      	subs	r2, r1, r3
 8015f86:	b293      	uxth	r3, r2
 8015f88:	8bfa      	ldrh	r2, [r7, #30]
 8015f8a:	1ad3      	subs	r3, r2, r3
 8015f8c:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 8015f8e:	8bfa      	ldrh	r2, [r7, #30]
 8015f90:	897b      	ldrh	r3, [r7, #10]
 8015f92:	429a      	cmp	r2, r3
 8015f94:	f040 81db 	bne.w	801634e <Get_Kyosan_EI_Message+0x5ea>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8015f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8015f9c:	4862      	ldr	r0, [pc, #392]	; (8016128 <Get_Kyosan_EI_Message+0x3c4>)
 8015f9e:	f005 fa3c 	bl	801b41a <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 8015fa2:	f002 fe45 	bl	8018c30 <HAL_GetTick>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	4a60      	ldr	r2, [pc, #384]	; (801612c <Get_Kyosan_EI_Message+0x3c8>)
 8015faa:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 8015fac:	4b60      	ldr	r3, [pc, #384]	; (8016130 <Get_Kyosan_EI_Message+0x3cc>)
 8015fae:	2201      	movs	r2, #1
 8015fb0:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8015fb2:	f002 fe3d 	bl	8018c30 <HAL_GetTick>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	4a5e      	ldr	r2, [pc, #376]	; (8016134 <Get_Kyosan_EI_Message+0x3d0>)
 8015fba:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8015fbc:	4b52      	ldr	r3, [pc, #328]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015fbe:	781b      	ldrb	r3, [r3, #0]
 8015fc0:	b25b      	sxtb	r3, r3
 8015fc2:	11db      	asrs	r3, r3, #7
 8015fc4:	b25b      	sxtb	r3, r3
 8015fc6:	f003 0301 	and.w	r3, r3, #1
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	f040 80c6 	bne.w	801615c <Get_Kyosan_EI_Message+0x3f8>
					{
						printf("+ Ctrl Data|");
 8015fd0:	4859      	ldr	r0, [pc, #356]	; (8016138 <Get_Kyosan_EI_Message+0x3d4>)
 8015fd2:	f00f fd43 	bl	8025a5c <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 8015fd6:	4b4b      	ldr	r3, [pc, #300]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 8015fd8:	881b      	ldrh	r3, [r3, #0]
 8015fda:	461a      	mov	r2, r3
 8015fdc:	494a      	ldr	r1, [pc, #296]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015fde:	4857      	ldr	r0, [pc, #348]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 8015fe0:	f00f fc2c 	bl	802583c <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8015fe4:	4b4a      	ldr	r3, [pc, #296]	; (8016110 <Get_Kyosan_EI_Message+0x3ac>)
 8015fe6:	681b      	ldr	r3, [r3, #0]
 8015fe8:	091b      	lsrs	r3, r3, #4
 8015fea:	f003 0301 	and.w	r3, r3, #1
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d027      	beq.n	8016042 <Get_Kyosan_EI_Message+0x2de>
 8015ff2:	4b45      	ldr	r3, [pc, #276]	; (8016108 <Get_Kyosan_EI_Message+0x3a4>)
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	b25b      	sxtb	r3, r3
 8015ff8:	11db      	asrs	r3, r3, #7
 8015ffa:	b25b      	sxtb	r3, r3
 8015ffc:	f003 0301 	and.w	r3, r3, #1
 8016000:	2b00      	cmp	r3, #0
 8016002:	d01e      	beq.n	8016042 <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016004:	484e      	ldr	r0, [pc, #312]	; (8016140 <Get_Kyosan_EI_Message+0x3dc>)
 8016006:	f00f fdc5 	bl	8025b94 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 801600a:	4843      	ldr	r0, [pc, #268]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 801600c:	f007 f9ce 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8016010:	4602      	mov	r2, r0
 8016012:	4b43      	ldr	r3, [pc, #268]	; (8016120 <Get_Kyosan_EI_Message+0x3bc>)
 8016014:	fba3 1302 	umull	r1, r3, r3, r2
 8016018:	09dc      	lsrs	r4, r3, #7
 801601a:	4623      	mov	r3, r4
 801601c:	021b      	lsls	r3, r3, #8
 801601e:	1b1b      	subs	r3, r3, r4
 8016020:	1ad4      	subs	r4, r2, r3
 8016022:	483d      	ldr	r0, [pc, #244]	; (8016118 <Get_Kyosan_EI_Message+0x3b4>)
 8016024:	f007 f9c2 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8016028:	4601      	mov	r1, r0
 801602a:	4b46      	ldr	r3, [pc, #280]	; (8016144 <Get_Kyosan_EI_Message+0x3e0>)
 801602c:	fba3 2301 	umull	r2, r3, r3, r1
 8016030:	08da      	lsrs	r2, r3, #3
 8016032:	4613      	mov	r3, r2
 8016034:	011b      	lsls	r3, r3, #4
 8016036:	1a9b      	subs	r3, r3, r2
 8016038:	1aca      	subs	r2, r1, r3
 801603a:	1c53      	adds	r3, r2, #1
 801603c:	b2e1      	uxtb	r1, r4
 801603e:	4a3f      	ldr	r2, [pc, #252]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 8016040:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8016042:	4b3e      	ldr	r3, [pc, #248]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	f003 030f 	and.w	r3, r3, #15
 801604a:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801604c:	2300      	movs	r3, #0
 801604e:	837b      	strh	r3, [r7, #26]
 8016050:	e011      	b.n	8016076 <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 8016052:	8b7b      	ldrh	r3, [r7, #26]
 8016054:	4a3c      	ldr	r2, [pc, #240]	; (8016148 <Get_Kyosan_EI_Message+0x3e4>)
 8016056:	5cd2      	ldrb	r2, [r2, r3]
 8016058:	8b7b      	ldrh	r3, [r7, #26]
 801605a:	4938      	ldr	r1, [pc, #224]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 801605c:	5ccb      	ldrb	r3, [r1, r3]
 801605e:	43db      	mvns	r3, r3
 8016060:	b2db      	uxtb	r3, r3
 8016062:	429a      	cmp	r2, r3
 8016064:	d004      	beq.n	8016070 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 8016066:	2301      	movs	r3, #1
 8016068:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 801606a:	2301      	movs	r3, #1
 801606c:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 801606e:	e008      	b.n	8016082 <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016070:	8b7b      	ldrh	r3, [r7, #26]
 8016072:	3301      	adds	r3, #1
 8016074:	837b      	strh	r3, [r7, #26]
 8016076:	8b7a      	ldrh	r2, [r7, #26]
 8016078:	4b22      	ldr	r3, [pc, #136]	; (8016104 <Get_Kyosan_EI_Message+0x3a0>)
 801607a:	881b      	ldrh	r3, [r3, #0]
 801607c:	3b02      	subs	r3, #2
 801607e:	429a      	cmp	r2, r3
 8016080:	dbe7      	blt.n	8016052 <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 8016082:	7f7b      	ldrb	r3, [r7, #29]
 8016084:	2b00      	cmp	r3, #0
 8016086:	f040 80c1 	bne.w	801620c <Get_Kyosan_EI_Message+0x4a8>
						{
							printf("\nR:");
 801608a:	4830      	ldr	r0, [pc, #192]	; (801614c <Get_Kyosan_EI_Message+0x3e8>)
 801608c:	f00f fce6 	bl	8025a5c <iprintf>
							for(uint8_t i=1;i<61;++i)
 8016090:	2301      	movs	r3, #1
 8016092:	767b      	strb	r3, [r7, #25]
 8016094:	e009      	b.n	80160aa <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 8016096:	7e7b      	ldrb	r3, [r7, #25]
 8016098:	4a28      	ldr	r2, [pc, #160]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 801609a:	5cd3      	ldrb	r3, [r2, r3]
 801609c:	4619      	mov	r1, r3
 801609e:	482c      	ldr	r0, [pc, #176]	; (8016150 <Get_Kyosan_EI_Message+0x3ec>)
 80160a0:	f00f fcdc 	bl	8025a5c <iprintf>
							for(uint8_t i=1;i<61;++i)
 80160a4:	7e7b      	ldrb	r3, [r7, #25]
 80160a6:	3301      	adds	r3, #1
 80160a8:	767b      	strb	r3, [r7, #25]
 80160aa:	7e7b      	ldrb	r3, [r7, #25]
 80160ac:	2b3c      	cmp	r3, #60	; 0x3c
 80160ae:	d9f2      	bls.n	8016096 <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 80160b0:	200a      	movs	r0, #10
 80160b2:	f00f fceb 	bl	8025a8c <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 80160b6:	4a27      	ldr	r2, [pc, #156]	; (8016154 <Get_Kyosan_EI_Message+0x3f0>)
 80160b8:	4b20      	ldr	r3, [pc, #128]	; (801613c <Get_Kyosan_EI_Message+0x3d8>)
 80160ba:	3301      	adds	r3, #1
 80160bc:	1c90      	adds	r0, r2, #2
 80160be:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80160c2:	4602      	mov	r2, r0
 80160c4:	4619      	mov	r1, r3
 80160c6:	f8d1 c000 	ldr.w	ip, [r1]
 80160ca:	684e      	ldr	r6, [r1, #4]
 80160cc:	688d      	ldr	r5, [r1, #8]
 80160ce:	68c9      	ldr	r1, [r1, #12]
 80160d0:	f8c2 c000 	str.w	ip, [r2]
 80160d4:	6056      	str	r6, [r2, #4]
 80160d6:	6095      	str	r5, [r2, #8]
 80160d8:	60d1      	str	r1, [r2, #12]
 80160da:	3310      	adds	r3, #16
 80160dc:	3010      	adds	r0, #16
 80160de:	42a3      	cmp	r3, r4
 80160e0:	d1ef      	bne.n	80160c2 <Get_Kyosan_EI_Message+0x35e>
 80160e2:	4602      	mov	r2, r0
 80160e4:	6818      	ldr	r0, [r3, #0]
 80160e6:	6859      	ldr	r1, [r3, #4]
 80160e8:	689b      	ldr	r3, [r3, #8]
 80160ea:	6010      	str	r0, [r2, #0]
 80160ec:	6051      	str	r1, [r2, #4]
 80160ee:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 80160f0:	213c      	movs	r1, #60	; 0x3c
 80160f2:	4819      	ldr	r0, [pc, #100]	; (8016158 <Get_Kyosan_EI_Message+0x3f4>)
 80160f4:	f000 fa6a 	bl	80165cc <Calc_Kysoan_CRC>
 80160f8:	4603      	mov	r3, r0
 80160fa:	461a      	mov	r2, r3
 80160fc:	4b15      	ldr	r3, [pc, #84]	; (8016154 <Get_Kyosan_EI_Message+0x3f0>)
 80160fe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8016100:	e084      	b.n	801620c <Get_Kyosan_EI_Message+0x4a8>
 8016102:	bf00      	nop
 8016104:	2000b89e 	.word	0x2000b89e
 8016108:	2000b8a4 	.word	0x2000b8a4
 801610c:	2000b8a0 	.word	0x2000b8a0
 8016110:	2000b380 	.word	0x2000b380
 8016114:	0802a6ec 	.word	0x0802a6ec
 8016118:	2000bbac 	.word	0x2000bbac
 801611c:	80008001 	.word	0x80008001
 8016120:	80808081 	.word	0x80808081
 8016124:	0802a71c 	.word	0x0802a71c
 8016128:	40021c00 	.word	0x40021c00
 801612c:	2000b898 	.word	0x2000b898
 8016130:	2000b89c 	.word	0x2000b89c
 8016134:	2000b388 	.word	0x2000b388
 8016138:	0802a74c 	.word	0x0802a74c
 801613c:	2000b9a8 	.word	0x2000b9a8
 8016140:	0802a75c 	.word	0x0802a75c
 8016144:	88888889 	.word	0x88888889
 8016148:	2000baa8 	.word	0x2000baa8
 801614c:	0802a79c 	.word	0x0802a79c
 8016150:	0802a7a0 	.word	0x0802a7a0
 8016154:	2000b39c 	.word	0x2000b39c
 8016158:	2000b39e 	.word	0x2000b39e
						}

					}
					else
					{
						printf("- Ctrl Data|");
 801615c:	4888      	ldr	r0, [pc, #544]	; (8016380 <Get_Kyosan_EI_Message+0x61c>)
 801615e:	f00f fc7d 	bl	8025a5c <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 8016162:	4b88      	ldr	r3, [pc, #544]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 8016164:	881b      	ldrh	r3, [r3, #0]
 8016166:	461a      	mov	r2, r3
 8016168:	4987      	ldr	r1, [pc, #540]	; (8016388 <Get_Kyosan_EI_Message+0x624>)
 801616a:	4888      	ldr	r0, [pc, #544]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 801616c:	f00f fb66 	bl	802583c <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 8016170:	4b86      	ldr	r3, [pc, #536]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 8016172:	781b      	ldrb	r3, [r3, #0]
 8016174:	43db      	mvns	r3, r3
 8016176:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016178:	4b85      	ldr	r3, [pc, #532]	; (8016390 <Get_Kyosan_EI_Message+0x62c>)
 801617a:	681b      	ldr	r3, [r3, #0]
 801617c:	091b      	lsrs	r3, r3, #4
 801617e:	f003 0301 	and.w	r3, r3, #1
 8016182:	2b00      	cmp	r3, #0
 8016184:	d027      	beq.n	80161d6 <Get_Kyosan_EI_Message+0x472>
 8016186:	4b80      	ldr	r3, [pc, #512]	; (8016388 <Get_Kyosan_EI_Message+0x624>)
 8016188:	781b      	ldrb	r3, [r3, #0]
 801618a:	b25b      	sxtb	r3, r3
 801618c:	11db      	asrs	r3, r3, #7
 801618e:	b25b      	sxtb	r3, r3
 8016190:	f003 0301 	and.w	r3, r3, #1
 8016194:	2b00      	cmp	r3, #0
 8016196:	d01e      	beq.n	80161d6 <Get_Kyosan_EI_Message+0x472>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016198:	487e      	ldr	r0, [pc, #504]	; (8016394 <Get_Kyosan_EI_Message+0x630>)
 801619a:	f00f fcfb 	bl	8025b94 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 801619e:	487e      	ldr	r0, [pc, #504]	; (8016398 <Get_Kyosan_EI_Message+0x634>)
 80161a0:	f007 f904 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 80161a4:	4602      	mov	r2, r0
 80161a6:	4b7d      	ldr	r3, [pc, #500]	; (801639c <Get_Kyosan_EI_Message+0x638>)
 80161a8:	fba3 1302 	umull	r1, r3, r3, r2
 80161ac:	09dc      	lsrs	r4, r3, #7
 80161ae:	4623      	mov	r3, r4
 80161b0:	021b      	lsls	r3, r3, #8
 80161b2:	1b1b      	subs	r3, r3, r4
 80161b4:	1ad4      	subs	r4, r2, r3
 80161b6:	4878      	ldr	r0, [pc, #480]	; (8016398 <Get_Kyosan_EI_Message+0x634>)
 80161b8:	f007 f8f8 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 80161bc:	4601      	mov	r1, r0
 80161be:	4b78      	ldr	r3, [pc, #480]	; (80163a0 <Get_Kyosan_EI_Message+0x63c>)
 80161c0:	fba3 2301 	umull	r2, r3, r3, r1
 80161c4:	08da      	lsrs	r2, r3, #3
 80161c6:	4613      	mov	r3, r2
 80161c8:	011b      	lsls	r3, r3, #4
 80161ca:	1a9b      	subs	r3, r3, r2
 80161cc:	1aca      	subs	r2, r1, r3
 80161ce:	1c53      	adds	r3, r2, #1
 80161d0:	b2e1      	uxtb	r1, r4
 80161d2:	4a6e      	ldr	r2, [pc, #440]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 80161d4:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80161d6:	2300      	movs	r3, #0
 80161d8:	82fb      	strh	r3, [r7, #22]
 80161da:	e011      	b.n	8016200 <Get_Kyosan_EI_Message+0x49c>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 80161dc:	8afb      	ldrh	r3, [r7, #22]
 80161de:	4a71      	ldr	r2, [pc, #452]	; (80163a4 <Get_Kyosan_EI_Message+0x640>)
 80161e0:	5cd2      	ldrb	r2, [r2, r3]
 80161e2:	8afb      	ldrh	r3, [r7, #22]
 80161e4:	4969      	ldr	r1, [pc, #420]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 80161e6:	5ccb      	ldrb	r3, [r1, r3]
 80161e8:	43db      	mvns	r3, r3
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d004      	beq.n	80161fa <Get_Kyosan_EI_Message+0x496>
							{
								Pos_NegDataMisMatch = SET;
 80161f0:	2301      	movs	r3, #1
 80161f2:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 80161f4:	2302      	movs	r3, #2
 80161f6:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 80161f8:	e008      	b.n	801620c <Get_Kyosan_EI_Message+0x4a8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80161fa:	8afb      	ldrh	r3, [r7, #22]
 80161fc:	3301      	adds	r3, #1
 80161fe:	82fb      	strh	r3, [r7, #22]
 8016200:	8afa      	ldrh	r2, [r7, #22]
 8016202:	4b60      	ldr	r3, [pc, #384]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	3b02      	subs	r3, #2
 8016208:	429a      	cmp	r2, r3
 801620a:	dbe7      	blt.n	80161dc <Get_Kyosan_EI_Message+0x478>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 801620c:	7f7b      	ldrb	r3, [r7, #29]
 801620e:	2b00      	cmp	r3, #0
 8016210:	d11b      	bne.n	801624a <Get_Kyosan_EI_Message+0x4e6>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016212:	4b5d      	ldr	r3, [pc, #372]	; (8016388 <Get_Kyosan_EI_Message+0x624>)
 8016214:	781b      	ldrb	r3, [r3, #0]
 8016216:	b25b      	sxtb	r3, r3
 8016218:	11db      	asrs	r3, r3, #7
 801621a:	b25b      	sxtb	r3, r3
 801621c:	f003 0301 	and.w	r3, r3, #1
 8016220:	2b00      	cmp	r3, #0
 8016222:	d105      	bne.n	8016230 <Get_Kyosan_EI_Message+0x4cc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 8016224:	f002 fd04 	bl	8018c30 <HAL_GetTick>
 8016228:	4603      	mov	r3, r0
 801622a:	4a5f      	ldr	r2, [pc, #380]	; (80163a8 <Get_Kyosan_EI_Message+0x644>)
 801622c:	6053      	str	r3, [r2, #4]
 801622e:	e004      	b.n	801623a <Get_Kyosan_EI_Message+0x4d6>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 8016230:	f002 fcfe 	bl	8018c30 <HAL_GetTick>
 8016234:	4603      	mov	r3, r0
 8016236:	4a5c      	ldr	r2, [pc, #368]	; (80163a8 <Get_Kyosan_EI_Message+0x644>)
 8016238:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 801623a:	4b5c      	ldr	r3, [pc, #368]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 801623c:	2200      	movs	r2, #0
 801623e:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 8016240:	2300      	movs	r3, #0
 8016242:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 8016244:	2300      	movs	r3, #0
 8016246:	777b      	strb	r3, [r7, #29]
 8016248:	e092      	b.n	8016370 <Get_Kyosan_EI_Message+0x60c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 801624a:	4b58      	ldr	r3, [pc, #352]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 801624c:	781b      	ldrb	r3, [r3, #0]
 801624e:	3301      	adds	r3, #1
 8016250:	b2da      	uxtb	r2, r3
 8016252:	4b56      	ldr	r3, [pc, #344]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 8016254:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 8016256:	4b55      	ldr	r3, [pc, #340]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 8016258:	781b      	ldrb	r3, [r3, #0]
 801625a:	2b02      	cmp	r3, #2
 801625c:	d161      	bne.n	8016322 <Get_Kyosan_EI_Message+0x5be>
						{
							switch(TypeofDataMisMatch)
 801625e:	7f3b      	ldrb	r3, [r7, #28]
 8016260:	2b01      	cmp	r3, #1
 8016262:	d002      	beq.n	801626a <Get_Kyosan_EI_Message+0x506>
 8016264:	2b02      	cmp	r3, #2
 8016266:	d02e      	beq.n	80162c6 <Get_Kyosan_EI_Message+0x562>
 8016268:	e05c      	b.n	8016324 <Get_Kyosan_EI_Message+0x5c0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 801626a:	4851      	ldr	r0, [pc, #324]	; (80163b0 <Get_Kyosan_EI_Message+0x64c>)
 801626c:	f00f fbf6 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016270:	2300      	movs	r3, #0
 8016272:	82bb      	strh	r3, [r7, #20]
 8016274:	e009      	b.n	801628a <Get_Kyosan_EI_Message+0x526>
								{
									printf("%02X ",ControlData_Positive[i]);
 8016276:	8abb      	ldrh	r3, [r7, #20]
 8016278:	4a4a      	ldr	r2, [pc, #296]	; (80163a4 <Get_Kyosan_EI_Message+0x640>)
 801627a:	5cd3      	ldrb	r3, [r2, r3]
 801627c:	4619      	mov	r1, r3
 801627e:	484d      	ldr	r0, [pc, #308]	; (80163b4 <Get_Kyosan_EI_Message+0x650>)
 8016280:	f00f fbec 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016284:	8abb      	ldrh	r3, [r7, #20]
 8016286:	3301      	adds	r3, #1
 8016288:	82bb      	strh	r3, [r7, #20]
 801628a:	4b3e      	ldr	r3, [pc, #248]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 801628c:	881b      	ldrh	r3, [r3, #0]
 801628e:	8aba      	ldrh	r2, [r7, #20]
 8016290:	429a      	cmp	r2, r3
 8016292:	d3f0      	bcc.n	8016276 <Get_Kyosan_EI_Message+0x512>
								}
								printf("\nN:");
 8016294:	4848      	ldr	r0, [pc, #288]	; (80163b8 <Get_Kyosan_EI_Message+0x654>)
 8016296:	f00f fbe1 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801629a:	2300      	movs	r3, #0
 801629c:	827b      	strh	r3, [r7, #18]
 801629e:	e009      	b.n	80162b4 <Get_Kyosan_EI_Message+0x550>
								{
									printf("%02X ",ControlData_Negative[i]);
 80162a0:	8a7b      	ldrh	r3, [r7, #18]
 80162a2:	4a3a      	ldr	r2, [pc, #232]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 80162a4:	5cd3      	ldrb	r3, [r2, r3]
 80162a6:	4619      	mov	r1, r3
 80162a8:	4842      	ldr	r0, [pc, #264]	; (80163b4 <Get_Kyosan_EI_Message+0x650>)
 80162aa:	f00f fbd7 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80162ae:	8a7b      	ldrh	r3, [r7, #18]
 80162b0:	3301      	adds	r3, #1
 80162b2:	827b      	strh	r3, [r7, #18]
 80162b4:	4b33      	ldr	r3, [pc, #204]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 80162b6:	881b      	ldrh	r3, [r3, #0]
 80162b8:	8a7a      	ldrh	r2, [r7, #18]
 80162ba:	429a      	cmp	r2, r3
 80162bc:	d3f0      	bcc.n	80162a0 <Get_Kyosan_EI_Message+0x53c>
								}
								printf("\n");
 80162be:	200a      	movs	r0, #10
 80162c0:	f00f fbe4 	bl	8025a8c <putchar>
								break;
 80162c4:	e02e      	b.n	8016324 <Get_Kyosan_EI_Message+0x5c0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 80162c6:	483d      	ldr	r0, [pc, #244]	; (80163bc <Get_Kyosan_EI_Message+0x658>)
 80162c8:	f00f fbc8 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80162cc:	2300      	movs	r3, #0
 80162ce:	823b      	strh	r3, [r7, #16]
 80162d0:	e009      	b.n	80162e6 <Get_Kyosan_EI_Message+0x582>
								{
									printf("%02X ",ControlData_Negative[i]);
 80162d2:	8a3b      	ldrh	r3, [r7, #16]
 80162d4:	4a2d      	ldr	r2, [pc, #180]	; (801638c <Get_Kyosan_EI_Message+0x628>)
 80162d6:	5cd3      	ldrb	r3, [r2, r3]
 80162d8:	4619      	mov	r1, r3
 80162da:	4836      	ldr	r0, [pc, #216]	; (80163b4 <Get_Kyosan_EI_Message+0x650>)
 80162dc:	f00f fbbe 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80162e0:	8a3b      	ldrh	r3, [r7, #16]
 80162e2:	3301      	adds	r3, #1
 80162e4:	823b      	strh	r3, [r7, #16]
 80162e6:	4b27      	ldr	r3, [pc, #156]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 80162e8:	881b      	ldrh	r3, [r3, #0]
 80162ea:	8a3a      	ldrh	r2, [r7, #16]
 80162ec:	429a      	cmp	r2, r3
 80162ee:	d3f0      	bcc.n	80162d2 <Get_Kyosan_EI_Message+0x56e>
								}
								printf("\nP:");
 80162f0:	4833      	ldr	r0, [pc, #204]	; (80163c0 <Get_Kyosan_EI_Message+0x65c>)
 80162f2:	f00f fbb3 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80162f6:	2300      	movs	r3, #0
 80162f8:	81fb      	strh	r3, [r7, #14]
 80162fa:	e009      	b.n	8016310 <Get_Kyosan_EI_Message+0x5ac>
								{
									printf("%02X ",ControlData_Positive[i]);
 80162fc:	89fb      	ldrh	r3, [r7, #14]
 80162fe:	4a29      	ldr	r2, [pc, #164]	; (80163a4 <Get_Kyosan_EI_Message+0x640>)
 8016300:	5cd3      	ldrb	r3, [r2, r3]
 8016302:	4619      	mov	r1, r3
 8016304:	482b      	ldr	r0, [pc, #172]	; (80163b4 <Get_Kyosan_EI_Message+0x650>)
 8016306:	f00f fba9 	bl	8025a5c <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801630a:	89fb      	ldrh	r3, [r7, #14]
 801630c:	3301      	adds	r3, #1
 801630e:	81fb      	strh	r3, [r7, #14]
 8016310:	4b1c      	ldr	r3, [pc, #112]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 8016312:	881b      	ldrh	r3, [r3, #0]
 8016314:	89fa      	ldrh	r2, [r7, #14]
 8016316:	429a      	cmp	r2, r3
 8016318:	d3f0      	bcc.n	80162fc <Get_Kyosan_EI_Message+0x598>
								}
								printf("\n");
 801631a:	200a      	movs	r0, #10
 801631c:	f00f fbb6 	bl	8025a8c <putchar>
								break;
 8016320:	e000      	b.n	8016324 <Get_Kyosan_EI_Message+0x5c0>
							default:
 8016322:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8016324:	4b21      	ldr	r3, [pc, #132]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	b29a      	uxth	r2, r3
 801632a:	4b26      	ldr	r3, [pc, #152]	; (80163c4 <Get_Kyosan_EI_Message+0x660>)
 801632c:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8016330:	429a      	cmp	r2, r3
 8016332:	d31d      	bcc.n	8016370 <Get_Kyosan_EI_Message+0x60c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8016334:	4b1d      	ldr	r3, [pc, #116]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 8016336:	781b      	ldrb	r3, [r3, #0]
 8016338:	4619      	mov	r1, r3
 801633a:	4823      	ldr	r0, [pc, #140]	; (80163c8 <Get_Kyosan_EI_Message+0x664>)
 801633c:	f00f fb8e 	bl	8025a5c <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 8016340:	4b20      	ldr	r3, [pc, #128]	; (80163c4 <Get_Kyosan_EI_Message+0x660>)
 8016342:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8016346:	b2da      	uxtb	r2, r3
 8016348:	4b18      	ldr	r3, [pc, #96]	; (80163ac <Get_Kyosan_EI_Message+0x648>)
 801634a:	701a      	strb	r2, [r3, #0]
 801634c:	e010      	b.n	8016370 <Get_Kyosan_EI_Message+0x60c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 801634e:	4b0e      	ldr	r3, [pc, #56]	; (8016388 <Get_Kyosan_EI_Message+0x624>)
 8016350:	781b      	ldrb	r3, [r3, #0]
 8016352:	b25b      	sxtb	r3, r3
 8016354:	11db      	asrs	r3, r3, #7
 8016356:	b25b      	sxtb	r3, r3
 8016358:	f003 0301 	and.w	r3, r3, #1
 801635c:	2b00      	cmp	r3, #0
 801635e:	d101      	bne.n	8016364 <Get_Kyosan_EI_Message+0x600>
 8016360:	212b      	movs	r1, #43	; 0x2b
 8016362:	e000      	b.n	8016366 <Get_Kyosan_EI_Message+0x602>
 8016364:	212d      	movs	r1, #45	; 0x2d
 8016366:	897a      	ldrh	r2, [r7, #10]
 8016368:	8bfb      	ldrh	r3, [r7, #30]
 801636a:	4818      	ldr	r0, [pc, #96]	; (80163cc <Get_Kyosan_EI_Message+0x668>)
 801636c:	f00f fb76 	bl	8025a5c <iprintf>

				}
				Cur_Receive_Length = RESET;
 8016370:	4b04      	ldr	r3, [pc, #16]	; (8016384 <Get_Kyosan_EI_Message+0x620>)
 8016372:	2200      	movs	r2, #0
 8016374:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8016376:	4b16      	ldr	r3, [pc, #88]	; (80163d0 <Get_Kyosan_EI_Message+0x66c>)
 8016378:	2200      	movs	r2, #0
 801637a:	801a      	strh	r2, [r3, #0]
			}
			break;
 801637c:	e0fe      	b.n	801657c <Get_Kyosan_EI_Message+0x818>
 801637e:	bf00      	nop
 8016380:	0802a7a8 	.word	0x0802a7a8
 8016384:	2000b89e 	.word	0x2000b89e
 8016388:	2000b8a4 	.word	0x2000b8a4
 801638c:	2000baa8 	.word	0x2000baa8
 8016390:	2000b380 	.word	0x2000b380
 8016394:	0802a75c 	.word	0x0802a75c
 8016398:	2000bbac 	.word	0x2000bbac
 801639c:	80808081 	.word	0x80808081
 80163a0:	88888889 	.word	0x88888889
 80163a4:	2000b9a8 	.word	0x2000b9a8
 80163a8:	2000b388 	.word	0x2000b388
 80163ac:	2000bba8 	.word	0x2000bba8
 80163b0:	0802a7b8 	.word	0x0802a7b8
 80163b4:	0802a7a0 	.word	0x0802a7a0
 80163b8:	0802a7bc 	.word	0x0802a7bc
 80163bc:	0802a7c0 	.word	0x0802a7c0
 80163c0:	0802a7c4 	.word	0x0802a7c4
 80163c4:	20000504 	.word	0x20000504
 80163c8:	0802a7c8 	.word	0x0802a7c8
 80163cc:	0802a7f0 	.word	0x0802a7f0
 80163d0:	2000b8a0 	.word	0x2000b8a0
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80163d4:	4b70      	ldr	r3, [pc, #448]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 80163d6:	881b      	ldrh	r3, [r3, #0]
 80163d8:	1c5a      	adds	r2, r3, #1
 80163da:	b291      	uxth	r1, r2
 80163dc:	4a6e      	ldr	r2, [pc, #440]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 80163de:	8011      	strh	r1, [r2, #0]
 80163e0:	4619      	mov	r1, r3
 80163e2:	4a6e      	ldr	r2, [pc, #440]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 80163e4:	7b7b      	ldrb	r3, [r7, #13]
 80163e6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80163e8:	4b6b      	ldr	r3, [pc, #428]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 80163ea:	881a      	ldrh	r2, [r3, #0]
 80163ec:	4b6c      	ldr	r3, [pc, #432]	; (80165a0 <Get_Kyosan_EI_Message+0x83c>)
 80163ee:	881b      	ldrh	r3, [r3, #0]
 80163f0:	429a      	cmp	r2, r3
 80163f2:	f040 80c3 	bne.w	801657c <Get_Kyosan_EI_Message+0x818>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 80163f6:	4b68      	ldr	r3, [pc, #416]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 80163f8:	881b      	ldrh	r3, [r3, #0]
 80163fa:	3b02      	subs	r3, #2
 80163fc:	4619      	mov	r1, r3
 80163fe:	4867      	ldr	r0, [pc, #412]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 8016400:	f000 f8e4 	bl	80165cc <Calc_Kysoan_CRC>
 8016404:	4603      	mov	r3, r0
 8016406:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 8016408:	4b63      	ldr	r3, [pc, #396]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 801640a:	881b      	ldrh	r3, [r3, #0]
 801640c:	3b02      	subs	r3, #2
 801640e:	4a63      	ldr	r2, [pc, #396]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 8016410:	4413      	add	r3, r2
 8016412:	461a      	mov	r2, r3
 8016414:	2110      	movs	r1, #16
 8016416:	2000      	movs	r0, #0
 8016418:	f7ea f8fc 	bl	8000614 <ExtractBits>
 801641c:	4603      	mov	r3, r0
 801641e:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016420:	4b60      	ldr	r3, [pc, #384]	; (80165a4 <Get_Kyosan_EI_Message+0x840>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	089b      	lsrs	r3, r3, #2
 8016426:	f003 0301 	and.w	r3, r3, #1
 801642a:	2b00      	cmp	r3, #0
 801642c:	d02d      	beq.n	801648a <Get_Kyosan_EI_Message+0x726>
 801642e:	4b5b      	ldr	r3, [pc, #364]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	b25b      	sxtb	r3, r3
 8016434:	11db      	asrs	r3, r3, #7
 8016436:	b25b      	sxtb	r3, r3
 8016438:	f003 0301 	and.w	r3, r3, #1
 801643c:	2b00      	cmp	r3, #0
 801643e:	d124      	bne.n	801648a <Get_Kyosan_EI_Message+0x726>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 8016440:	4859      	ldr	r0, [pc, #356]	; (80165a8 <Get_Kyosan_EI_Message+0x844>)
 8016442:	f00f fba7 	bl	8025b94 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016446:	4859      	ldr	r0, [pc, #356]	; (80165ac <Get_Kyosan_EI_Message+0x848>)
 8016448:	f006 ffb0 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 801644c:	4601      	mov	r1, r0
 801644e:	4b58      	ldr	r3, [pc, #352]	; (80165b0 <Get_Kyosan_EI_Message+0x84c>)
 8016450:	fba3 2301 	umull	r2, r3, r3, r1
 8016454:	0bda      	lsrs	r2, r3, #15
 8016456:	4613      	mov	r3, r2
 8016458:	041b      	lsls	r3, r3, #16
 801645a:	1a9b      	subs	r3, r3, r2
 801645c:	1aca      	subs	r2, r1, r3
 801645e:	4613      	mov	r3, r2
 8016460:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016462:	8bfa      	ldrh	r2, [r7, #30]
 8016464:	897b      	ldrh	r3, [r7, #10]
 8016466:	429a      	cmp	r2, r3
 8016468:	d10f      	bne.n	801648a <Get_Kyosan_EI_Message+0x726>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 801646a:	4850      	ldr	r0, [pc, #320]	; (80165ac <Get_Kyosan_EI_Message+0x848>)
 801646c:	f006 ff9e 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 8016470:	4601      	mov	r1, r0
 8016472:	4b50      	ldr	r3, [pc, #320]	; (80165b4 <Get_Kyosan_EI_Message+0x850>)
 8016474:	fba3 2301 	umull	r2, r3, r3, r1
 8016478:	09da      	lsrs	r2, r3, #7
 801647a:	4613      	mov	r3, r2
 801647c:	021b      	lsls	r3, r3, #8
 801647e:	1a9b      	subs	r3, r3, r2
 8016480:	1aca      	subs	r2, r1, r3
 8016482:	b293      	uxth	r3, r2
 8016484:	8bfa      	ldrh	r2, [r7, #30]
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 801648a:	4b46      	ldr	r3, [pc, #280]	; (80165a4 <Get_Kyosan_EI_Message+0x840>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	08db      	lsrs	r3, r3, #3
 8016490:	f003 0301 	and.w	r3, r3, #1
 8016494:	2b00      	cmp	r3, #0
 8016496:	d02d      	beq.n	80164f4 <Get_Kyosan_EI_Message+0x790>
 8016498:	4b40      	ldr	r3, [pc, #256]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 801649a:	781b      	ldrb	r3, [r3, #0]
 801649c:	b25b      	sxtb	r3, r3
 801649e:	11db      	asrs	r3, r3, #7
 80164a0:	b25b      	sxtb	r3, r3
 80164a2:	f003 0301 	and.w	r3, r3, #1
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d024      	beq.n	80164f4 <Get_Kyosan_EI_Message+0x790>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 80164aa:	4843      	ldr	r0, [pc, #268]	; (80165b8 <Get_Kyosan_EI_Message+0x854>)
 80164ac:	f00f fb72 	bl	8025b94 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80164b0:	483e      	ldr	r0, [pc, #248]	; (80165ac <Get_Kyosan_EI_Message+0x848>)
 80164b2:	f006 ff7b 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 80164b6:	4601      	mov	r1, r0
 80164b8:	4b3d      	ldr	r3, [pc, #244]	; (80165b0 <Get_Kyosan_EI_Message+0x84c>)
 80164ba:	fba3 2301 	umull	r2, r3, r3, r1
 80164be:	0bda      	lsrs	r2, r3, #15
 80164c0:	4613      	mov	r3, r2
 80164c2:	041b      	lsls	r3, r3, #16
 80164c4:	1a9b      	subs	r3, r3, r2
 80164c6:	1aca      	subs	r2, r1, r3
 80164c8:	4613      	mov	r3, r2
 80164ca:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80164cc:	8bfa      	ldrh	r2, [r7, #30]
 80164ce:	897b      	ldrh	r3, [r7, #10]
 80164d0:	429a      	cmp	r2, r3
 80164d2:	d10f      	bne.n	80164f4 <Get_Kyosan_EI_Message+0x790>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80164d4:	4835      	ldr	r0, [pc, #212]	; (80165ac <Get_Kyosan_EI_Message+0x848>)
 80164d6:	f006 ff69 	bl	801d3ac <HAL_RNG_GetRandomNumber>
 80164da:	4601      	mov	r1, r0
 80164dc:	4b35      	ldr	r3, [pc, #212]	; (80165b4 <Get_Kyosan_EI_Message+0x850>)
 80164de:	fba3 2301 	umull	r2, r3, r3, r1
 80164e2:	09da      	lsrs	r2, r3, #7
 80164e4:	4613      	mov	r3, r2
 80164e6:	021b      	lsls	r3, r3, #8
 80164e8:	1a9b      	subs	r3, r3, r2
 80164ea:	1aca      	subs	r2, r1, r3
 80164ec:	b293      	uxth	r3, r2
 80164ee:	8bfa      	ldrh	r2, [r7, #30]
 80164f0:	1ad3      	subs	r3, r2, r3
 80164f2:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 80164f4:	897a      	ldrh	r2, [r7, #10]
 80164f6:	8bfb      	ldrh	r3, [r7, #30]
 80164f8:	429a      	cmp	r2, r3
 80164fa:	d11e      	bne.n	801653a <Get_Kyosan_EI_Message+0x7d6>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 80164fc:	f002 fb98 	bl	8018c30 <HAL_GetTick>
 8016500:	4603      	mov	r3, r0
 8016502:	4a2e      	ldr	r2, [pc, #184]	; (80165bc <Get_Kyosan_EI_Message+0x858>)
 8016504:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8016506:	f44f 7180 	mov.w	r1, #256	; 0x100
 801650a:	482d      	ldr	r0, [pc, #180]	; (80165c0 <Get_Kyosan_EI_Message+0x85c>)
 801650c:	f004 ff85 	bl	801b41a <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016510:	4b22      	ldr	r3, [pc, #136]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 8016512:	781b      	ldrb	r3, [r3, #0]
 8016514:	b25b      	sxtb	r3, r3
 8016516:	11db      	asrs	r3, r3, #7
 8016518:	b25b      	sxtb	r3, r3
 801651a:	f003 0301 	and.w	r3, r3, #1
 801651e:	2b00      	cmp	r3, #0
 8016520:	d105      	bne.n	801652e <Get_Kyosan_EI_Message+0x7ca>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8016522:	f002 fb85 	bl	8018c30 <HAL_GetTick>
 8016526:	4603      	mov	r3, r0
 8016528:	4a24      	ldr	r2, [pc, #144]	; (80165bc <Get_Kyosan_EI_Message+0x858>)
 801652a:	60d3      	str	r3, [r2, #12]
 801652c:	e01c      	b.n	8016568 <Get_Kyosan_EI_Message+0x804>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 801652e:	f002 fb7f 	bl	8018c30 <HAL_GetTick>
 8016532:	4603      	mov	r3, r0
 8016534:	4a21      	ldr	r2, [pc, #132]	; (80165bc <Get_Kyosan_EI_Message+0x858>)
 8016536:	6113      	str	r3, [r2, #16]
 8016538:	e016      	b.n	8016568 <Get_Kyosan_EI_Message+0x804>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 801653a:	897b      	ldrh	r3, [r7, #10]
 801653c:	8bfa      	ldrh	r2, [r7, #30]
 801653e:	4619      	mov	r1, r3
 8016540:	4820      	ldr	r0, [pc, #128]	; (80165c4 <Get_Kyosan_EI_Message+0x860>)
 8016542:	f00f fa8b 	bl	8025a5c <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8016546:	4b15      	ldr	r3, [pc, #84]	; (801659c <Get_Kyosan_EI_Message+0x838>)
 8016548:	781b      	ldrb	r3, [r3, #0]
 801654a:	b25b      	sxtb	r3, r3
 801654c:	11db      	asrs	r3, r3, #7
 801654e:	b25b      	sxtb	r3, r3
 8016550:	f003 0301 	and.w	r3, r3, #1
 8016554:	2b00      	cmp	r3, #0
 8016556:	d101      	bne.n	801655c <Get_Kyosan_EI_Message+0x7f8>
 8016558:	212b      	movs	r1, #43	; 0x2b
 801655a:	e000      	b.n	801655e <Get_Kyosan_EI_Message+0x7fa>
 801655c:	212d      	movs	r1, #45	; 0x2d
 801655e:	897a      	ldrh	r2, [r7, #10]
 8016560:	8bfb      	ldrh	r3, [r7, #30]
 8016562:	4819      	ldr	r0, [pc, #100]	; (80165c8 <Get_Kyosan_EI_Message+0x864>)
 8016564:	f00f fa7a 	bl	8025a5c <iprintf>

				}
				Cur_Receive_Length = RESET;
 8016568:	4b0b      	ldr	r3, [pc, #44]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 801656a:	2200      	movs	r2, #0
 801656c:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 801656e:	4b0c      	ldr	r3, [pc, #48]	; (80165a0 <Get_Kyosan_EI_Message+0x83c>)
 8016570:	2200      	movs	r2, #0
 8016572:	801a      	strh	r2, [r3, #0]
			}
			break;
 8016574:	e002      	b.n	801657c <Get_Kyosan_EI_Message+0x818>
		default:
			Cur_Receive_Length = RESET;
 8016576:	4b08      	ldr	r3, [pc, #32]	; (8016598 <Get_Kyosan_EI_Message+0x834>)
 8016578:	2200      	movs	r2, #0
 801657a:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 801657c:	79fb      	ldrb	r3, [r7, #7]
 801657e:	4618      	mov	r0, r3
 8016580:	f001 ffee 	bl	8018560 <Com_DataReady>
 8016584:	4603      	mov	r3, r0
 8016586:	2b00      	cmp	r3, #0
 8016588:	f47f ac12 	bne.w	8015db0 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 801658c:	bf00      	nop
 801658e:	bf00      	nop
 8016590:	3724      	adds	r7, #36	; 0x24
 8016592:	46bd      	mov	sp, r7
 8016594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016596:	bf00      	nop
 8016598:	2000b89e 	.word	0x2000b89e
 801659c:	2000b8a4 	.word	0x2000b8a4
 80165a0:	2000b8a0 	.word	0x2000b8a0
 80165a4:	2000b380 	.word	0x2000b380
 80165a8:	0802a824 	.word	0x0802a824
 80165ac:	2000bbac 	.word	0x2000bbac
 80165b0:	80008001 	.word	0x80008001
 80165b4:	80808081 	.word	0x80808081
 80165b8:	0802a854 	.word	0x0802a854
 80165bc:	2000b388 	.word	0x2000b388
 80165c0:	40021c00 	.word	0x40021c00
 80165c4:	0802a884 	.word	0x0802a884
 80165c8:	0802a8ac 	.word	0x0802a8ac

080165cc <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 80165cc:	b480      	push	{r7}
 80165ce:	b087      	sub	sp, #28
 80165d0:	af00      	add	r7, sp, #0
 80165d2:	6078      	str	r0, [r7, #4]
 80165d4:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 80165d6:	2300      	movs	r3, #0
 80165d8:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 80165da:	2300      	movs	r3, #0
 80165dc:	613b      	str	r3, [r7, #16]
 80165de:	e026      	b.n	801662e <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	693b      	ldr	r3, [r7, #16]
 80165e4:	4413      	add	r3, r2
 80165e6:	781b      	ldrb	r3, [r3, #0]
 80165e8:	021b      	lsls	r3, r3, #8
 80165ea:	b21a      	sxth	r2, r3
 80165ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80165f0:	4053      	eors	r3, r2
 80165f2:	b21b      	sxth	r3, r3
 80165f4:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 80165f6:	2300      	movs	r3, #0
 80165f8:	60fb      	str	r3, [r7, #12]
 80165fa:	e012      	b.n	8016622 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 80165fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016600:	2b00      	cmp	r3, #0
 8016602:	da08      	bge.n	8016616 <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8016604:	8afb      	ldrh	r3, [r7, #22]
 8016606:	005b      	lsls	r3, r3, #1
 8016608:	b21a      	sxth	r2, r3
 801660a:	f241 0321 	movw	r3, #4129	; 0x1021
 801660e:	4053      	eors	r3, r2
 8016610:	b21b      	sxth	r3, r3
 8016612:	82fb      	strh	r3, [r7, #22]
 8016614:	e002      	b.n	801661c <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8016616:	8afb      	ldrh	r3, [r7, #22]
 8016618:	005b      	lsls	r3, r3, #1
 801661a:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	3301      	adds	r3, #1
 8016620:	60fb      	str	r3, [r7, #12]
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	2b07      	cmp	r3, #7
 8016626:	dde9      	ble.n	80165fc <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8016628:	693b      	ldr	r3, [r7, #16]
 801662a:	3301      	adds	r3, #1
 801662c:	613b      	str	r3, [r7, #16]
 801662e:	693a      	ldr	r2, [r7, #16]
 8016630:	683b      	ldr	r3, [r7, #0]
 8016632:	429a      	cmp	r2, r3
 8016634:	d3d4      	bcc.n	80165e0 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8016636:	8afb      	ldrh	r3, [r7, #22]
}
 8016638:	4618      	mov	r0, r3
 801663a:	371c      	adds	r7, #28
 801663c:	46bd      	mov	sp, r7
 801663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016642:	4770      	bx	lr

08016644 <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b09a      	sub	sp, #104	; 0x68
 8016648:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 801664a:	2300      	movs	r3, #0
 801664c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8016650:	2300      	movs	r3, #0
 8016652:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8016656:	2300      	movs	r3, #0
 8016658:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 801665c:	2300      	movs	r3, #0
 801665e:	603b      	str	r3, [r7, #0]
 8016660:	1d3b      	adds	r3, r7, #4
 8016662:	2260      	movs	r2, #96	; 0x60
 8016664:	2100      	movs	r1, #0
 8016666:	4618      	mov	r0, r3
 8016668:	f00f f910 	bl	802588c <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 801666c:	4b90      	ldr	r3, [pc, #576]	; (80168b0 <Check_forKyosanCMD+0x26c>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	4618      	mov	r0, r3
 8016672:	f7f9 fca5 	bl	800ffc0 <HAL_Elaps_Ticks>
 8016676:	4603      	mov	r3, r0
 8016678:	2b09      	cmp	r3, #9
 801667a:	f240 8114 	bls.w	80168a6 <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 801667e:	e010      	b.n	80166a2 <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8016680:	2000      	movs	r0, #0
 8016682:	f001 ffad 	bl	80185e0 <Com_Get_Byte>
 8016686:	4603      	mov	r3, r0
 8016688:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 801668c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016690:	1c5a      	adds	r2, r3, #1
 8016692:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8016696:	3368      	adds	r3, #104	; 0x68
 8016698:	443b      	add	r3, r7
 801669a:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 801669e:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 80166a2:	2000      	movs	r0, #0
 80166a4:	f001 ff5c 	bl	8018560 <Com_DataReady>
 80166a8:	4603      	mov	r3, r0
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d1e8      	bne.n	8016680 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 80166ae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	f000 80ee 	beq.w	8016894 <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 80166b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80166bc:	3368      	adds	r3, #104	; 0x68
 80166be:	443b      	add	r3, r7
 80166c0:	2200      	movs	r2, #0
 80166c2:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 80166c6:	463b      	mov	r3, r7
 80166c8:	4619      	mov	r1, r3
 80166ca:	487a      	ldr	r0, [pc, #488]	; (80168b4 <Check_forKyosanCMD+0x270>)
 80166cc:	f00f f9c6 	bl	8025a5c <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 80166d0:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80166d4:	463b      	mov	r3, r7
 80166d6:	4611      	mov	r1, r2
 80166d8:	4618      	mov	r0, r3
 80166da:	f000 fa25 	bl	8016b28 <Is_KyosanCommand_Valid>
 80166de:	4603      	mov	r3, r0
 80166e0:	2b07      	cmp	r3, #7
 80166e2:	f200 80bb 	bhi.w	801685c <Check_forKyosanCMD+0x218>
 80166e6:	a201      	add	r2, pc, #4	; (adr r2, 80166ec <Check_forKyosanCMD+0xa8>)
 80166e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166ec:	0801670d 	.word	0x0801670d
 80166f0:	0801671b 	.word	0x0801671b
 80166f4:	0801677f 	.word	0x0801677f
 80166f8:	080167a1 	.word	0x080167a1
 80166fc:	080167c9 	.word	0x080167c9
 8016700:	080167f1 	.word	0x080167f1
 8016704:	08016819 	.word	0x08016819
 8016708:	08016841 	.word	0x08016841
			{
			case ZERO:
				Dats_Request_Flag = 1;
 801670c:	4b6a      	ldr	r3, [pc, #424]	; (80168b8 <Check_forKyosanCMD+0x274>)
 801670e:	2201      	movs	r2, #1
 8016710:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8016712:	486a      	ldr	r0, [pc, #424]	; (80168bc <Check_forKyosanCMD+0x278>)
 8016714:	f00f fa3e 	bl	8025b94 <puts>
				break;
 8016718:	e0bc      	b.n	8016894 <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 801671a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801671e:	3b01      	subs	r3, #1
 8016720:	3368      	adds	r3, #104	; 0x68
 8016722:	443b      	add	r3, r7
 8016724:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016728:	3b30      	subs	r3, #48	; 0x30
 801672a:	461a      	mov	r2, r3
 801672c:	4964      	ldr	r1, [pc, #400]	; (80168c0 <Check_forKyosanCMD+0x27c>)
 801672e:	4865      	ldr	r0, [pc, #404]	; (80168c4 <Check_forKyosanCMD+0x280>)
 8016730:	f00f f994 	bl	8025a5c <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8016734:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016738:	3b01      	subs	r3, #1
 801673a:	3368      	adds	r3, #104	; 0x68
 801673c:	443b      	add	r3, r7
 801673e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016742:	2b2f      	cmp	r3, #47	; 0x2f
 8016744:	d914      	bls.n	8016770 <Check_forKyosanCMD+0x12c>
 8016746:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801674a:	3b01      	subs	r3, #1
 801674c:	3368      	adds	r3, #104	; 0x68
 801674e:	443b      	add	r3, r7
 8016750:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016754:	2b31      	cmp	r3, #49	; 0x31
 8016756:	d80b      	bhi.n	8016770 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8016758:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 801675c:	3b01      	subs	r3, #1
 801675e:	3368      	adds	r3, #104	; 0x68
 8016760:	443b      	add	r3, r7
 8016762:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016766:	3b30      	subs	r3, #48	; 0x30
 8016768:	b2da      	uxtb	r2, r3
 801676a:	4b57      	ldr	r3, [pc, #348]	; (80168c8 <Check_forKyosanCMD+0x284>)
 801676c:	701a      	strb	r2, [r3, #0]
 801676e:	e002      	b.n	8016776 <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8016770:	4856      	ldr	r0, [pc, #344]	; (80168cc <Check_forKyosanCMD+0x288>)
 8016772:	f00f fa0f 	bl	8025b94 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8016776:	2301      	movs	r3, #1
 8016778:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801677c:	e08a      	b.n	8016894 <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 801677e:	4954      	ldr	r1, [pc, #336]	; (80168d0 <Check_forKyosanCMD+0x28c>)
 8016780:	4854      	ldr	r0, [pc, #336]	; (80168d4 <Check_forKyosanCMD+0x290>)
 8016782:	f00f f96b 	bl	8025a5c <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 8016786:	4854      	ldr	r0, [pc, #336]	; (80168d8 <Check_forKyosanCMD+0x294>)
 8016788:	f00f fa04 	bl	8025b94 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 801678c:	4b53      	ldr	r3, [pc, #332]	; (80168dc <Check_forKyosanCMD+0x298>)
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	f043 0301 	orr.w	r3, r3, #1
 8016794:	4a51      	ldr	r2, [pc, #324]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016796:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016798:	2301      	movs	r3, #1
 801679a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801679e:	e079      	b.n	8016894 <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 80167a0:	494f      	ldr	r1, [pc, #316]	; (80168e0 <Check_forKyosanCMD+0x29c>)
 80167a2:	484c      	ldr	r0, [pc, #304]	; (80168d4 <Check_forKyosanCMD+0x290>)
 80167a4:	f00f f95a 	bl	8025a5c <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 80167a8:	484e      	ldr	r0, [pc, #312]	; (80168e4 <Check_forKyosanCMD+0x2a0>)
 80167aa:	f00f f9f3 	bl	8025b94 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80167ae:	4b4b      	ldr	r3, [pc, #300]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167b0:	2200      	movs	r2, #0
 80167b2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80167b4:	4b49      	ldr	r3, [pc, #292]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	f043 0302 	orr.w	r3, r3, #2
 80167bc:	4a47      	ldr	r2, [pc, #284]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167be:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80167c0:	2301      	movs	r3, #1
 80167c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80167c6:	e065      	b.n	8016894 <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 80167c8:	4947      	ldr	r1, [pc, #284]	; (80168e8 <Check_forKyosanCMD+0x2a4>)
 80167ca:	4842      	ldr	r0, [pc, #264]	; (80168d4 <Check_forKyosanCMD+0x290>)
 80167cc:	f00f f946 	bl	8025a5c <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 80167d0:	4846      	ldr	r0, [pc, #280]	; (80168ec <Check_forKyosanCMD+0x2a8>)
 80167d2:	f00f f9df 	bl	8025b94 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80167d6:	4b41      	ldr	r3, [pc, #260]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167d8:	2200      	movs	r2, #0
 80167da:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 80167dc:	4b3f      	ldr	r3, [pc, #252]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	f043 0304 	orr.w	r3, r3, #4
 80167e4:	4a3d      	ldr	r2, [pc, #244]	; (80168dc <Check_forKyosanCMD+0x298>)
 80167e6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 80167e8:	2301      	movs	r3, #1
 80167ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 80167ee:	e051      	b.n	8016894 <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 80167f0:	493f      	ldr	r1, [pc, #252]	; (80168f0 <Check_forKyosanCMD+0x2ac>)
 80167f2:	4838      	ldr	r0, [pc, #224]	; (80168d4 <Check_forKyosanCMD+0x290>)
 80167f4:	f00f f932 	bl	8025a5c <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 80167f8:	483e      	ldr	r0, [pc, #248]	; (80168f4 <Check_forKyosanCMD+0x2b0>)
 80167fa:	f00f f9cb 	bl	8025b94 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 80167fe:	4b37      	ldr	r3, [pc, #220]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016800:	2200      	movs	r2, #0
 8016802:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016804:	4b35      	ldr	r3, [pc, #212]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	f043 0308 	orr.w	r3, r3, #8
 801680c:	4a33      	ldr	r2, [pc, #204]	; (80168dc <Check_forKyosanCMD+0x298>)
 801680e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016810:	2301      	movs	r3, #1
 8016812:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016816:	e03d      	b.n	8016894 <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 8016818:	4937      	ldr	r1, [pc, #220]	; (80168f8 <Check_forKyosanCMD+0x2b4>)
 801681a:	482e      	ldr	r0, [pc, #184]	; (80168d4 <Check_forKyosanCMD+0x290>)
 801681c:	f00f f91e 	bl	8025a5c <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 8016820:	4836      	ldr	r0, [pc, #216]	; (80168fc <Check_forKyosanCMD+0x2b8>)
 8016822:	f00f f9b7 	bl	8025b94 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016826:	4b2d      	ldr	r3, [pc, #180]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016828:	2200      	movs	r2, #0
 801682a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 801682c:	4b2b      	ldr	r3, [pc, #172]	; (80168dc <Check_forKyosanCMD+0x298>)
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	f043 0310 	orr.w	r3, r3, #16
 8016834:	4a29      	ldr	r2, [pc, #164]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016836:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016838:	2301      	movs	r3, #1
 801683a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801683e:	e029      	b.n	8016894 <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8016840:	492f      	ldr	r1, [pc, #188]	; (8016900 <Check_forKyosanCMD+0x2bc>)
 8016842:	4824      	ldr	r0, [pc, #144]	; (80168d4 <Check_forKyosanCMD+0x290>)
 8016844:	f00f f90a 	bl	8025a5c <iprintf>
				printf("CLEAR ALL\n");
 8016848:	482e      	ldr	r0, [pc, #184]	; (8016904 <Check_forKyosanCMD+0x2c0>)
 801684a:	f00f f9a3 	bl	8025b94 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 801684e:	4b23      	ldr	r3, [pc, #140]	; (80168dc <Check_forKyosanCMD+0x298>)
 8016850:	2200      	movs	r2, #0
 8016852:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 8016854:	2301      	movs	r3, #1
 8016856:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 801685a:	e01b      	b.n	8016894 <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 801685c:	481b      	ldr	r0, [pc, #108]	; (80168cc <Check_forKyosanCMD+0x288>)
 801685e:	f00f f999 	bl	8025b94 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8016862:	2300      	movs	r3, #0
 8016864:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016868:	e00e      	b.n	8016888 <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 801686a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 801686e:	2232      	movs	r2, #50	; 0x32
 8016870:	fb02 f303 	mul.w	r3, r2, r3
 8016874:	4a24      	ldr	r2, [pc, #144]	; (8016908 <Check_forKyosanCMD+0x2c4>)
 8016876:	4413      	add	r3, r2
 8016878:	4618      	mov	r0, r3
 801687a:	f00f f98b 	bl	8025b94 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 801687e:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016882:	3301      	adds	r3, #1
 8016884:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016888:	4b20      	ldr	r3, [pc, #128]	; (801690c <Check_forKyosanCMD+0x2c8>)
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8016890:	429a      	cmp	r2, r3
 8016892:	d3ea      	bcc.n	801686a <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 8016894:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016898:	2b01      	cmp	r3, #1
 801689a:	d105      	bne.n	80168a8 <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 801689c:	f240 2005 	movw	r0, #517	; 0x205
 80168a0:	f7fa f90a 	bl	8010ab8 <TransmitCanPkt>
 80168a4:	e000      	b.n	80168a8 <Check_forKyosanCMD+0x264>
		return;
 80168a6:	bf00      	nop
		}
	}
}
 80168a8:	3768      	adds	r7, #104	; 0x68
 80168aa:	46bd      	mov	sp, r7
 80168ac:	bd80      	pop	{r7, pc}
 80168ae:	bf00      	nop
 80168b0:	2000bf34 	.word	0x2000bf34
 80168b4:	0802ab44 	.word	0x0802ab44
 80168b8:	20000bba 	.word	0x20000bba
 80168bc:	0802ab5c 	.word	0x0802ab5c
 80168c0:	2000b4d6 	.word	0x2000b4d6
 80168c4:	0802ab9c 	.word	0x0802ab9c
 80168c8:	20000bbb 	.word	0x20000bbb
 80168cc:	0802abb0 	.word	0x0802abb0
 80168d0:	2000b508 	.word	0x2000b508
 80168d4:	0802abcc 	.word	0x0802abcc
 80168d8:	0802abdc 	.word	0x0802abdc
 80168dc:	2000b380 	.word	0x2000b380
 80168e0:	2000b53a 	.word	0x2000b53a
 80168e4:	0802abf8 	.word	0x0802abf8
 80168e8:	2000b56c 	.word	0x2000b56c
 80168ec:	0802ac14 	.word	0x0802ac14
 80168f0:	2000b59e 	.word	0x2000b59e
 80168f4:	0802ac30 	.word	0x0802ac30
 80168f8:	2000b5d0 	.word	0x2000b5d0
 80168fc:	0802ac4c 	.word	0x0802ac4c
 8016900:	2000b602 	.word	0x2000b602
 8016904:	0802ac78 	.word	0x0802ac78
 8016908:	2000b4a4 	.word	0x2000b4a4
 801690c:	2000b88c 	.word	0x2000b88c

08016910 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 8016910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016912:	b083      	sub	sp, #12
 8016914:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 8016916:	2300      	movs	r3, #0
 8016918:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 801691a:	79fb      	ldrb	r3, [r7, #7]
 801691c:	4a78      	ldr	r2, [pc, #480]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 801691e:	2132      	movs	r1, #50	; 0x32
 8016920:	fb01 f303 	mul.w	r3, r1, r3
 8016924:	4413      	add	r3, r2
 8016926:	2224      	movs	r2, #36	; 0x24
 8016928:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 801692a:	79fb      	ldrb	r3, [r7, #7]
 801692c:	4a74      	ldr	r2, [pc, #464]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 801692e:	2132      	movs	r1, #50	; 0x32
 8016930:	fb01 f303 	mul.w	r3, r1, r3
 8016934:	4413      	add	r3, r2
 8016936:	3301      	adds	r3, #1
 8016938:	2201      	movs	r2, #1
 801693a:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 801693c:	79fb      	ldrb	r3, [r7, #7]
 801693e:	4a70      	ldr	r2, [pc, #448]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016940:	2132      	movs	r1, #50	; 0x32
 8016942:	fb01 f303 	mul.w	r3, r1, r3
 8016946:	4413      	add	r3, r2
 8016948:	3302      	adds	r3, #2
 801694a:	2230      	movs	r2, #48	; 0x30
 801694c:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 801694e:	79fb      	ldrb	r3, [r7, #7]
 8016950:	4a6b      	ldr	r2, [pc, #428]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016952:	2132      	movs	r1, #50	; 0x32
 8016954:	fb01 f303 	mul.w	r3, r1, r3
 8016958:	4413      	add	r3, r2
 801695a:	3303      	adds	r3, #3
 801695c:	2240      	movs	r2, #64	; 0x40
 801695e:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 8016960:	79fb      	ldrb	r3, [r7, #7]
 8016962:	4a67      	ldr	r2, [pc, #412]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016964:	2132      	movs	r1, #50	; 0x32
 8016966:	fb01 f303 	mul.w	r3, r1, r3
 801696a:	4413      	add	r3, r2
 801696c:	3304      	adds	r3, #4
 801696e:	22c0      	movs	r2, #192	; 0xc0
 8016970:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 8016972:	79fb      	ldrb	r3, [r7, #7]
 8016974:	4a62      	ldr	r2, [pc, #392]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016976:	2132      	movs	r1, #50	; 0x32
 8016978:	fb01 f303 	mul.w	r3, r1, r3
 801697c:	4413      	add	r3, r2
 801697e:	3305      	adds	r3, #5
 8016980:	224e      	movs	r2, #78	; 0x4e
 8016982:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 8016984:	79fb      	ldrb	r3, [r7, #7]
 8016986:	4a5e      	ldr	r2, [pc, #376]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016988:	2132      	movs	r1, #50	; 0x32
 801698a:	fb01 f303 	mul.w	r3, r1, r3
 801698e:	4413      	add	r3, r2
 8016990:	3306      	adds	r3, #6
 8016992:	2226      	movs	r2, #38	; 0x26
 8016994:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 8016996:	79fb      	ldrb	r3, [r7, #7]
 8016998:	3301      	adds	r3, #1
 801699a:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 801699c:	79fb      	ldrb	r3, [r7, #7]
 801699e:	1c5a      	adds	r2, r3, #1
 80169a0:	71fa      	strb	r2, [r7, #7]
 80169a2:	461a      	mov	r2, r3
 80169a4:	2332      	movs	r3, #50	; 0x32
 80169a6:	fb02 f303 	mul.w	r3, r2, r3
 80169aa:	4a55      	ldr	r2, [pc, #340]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 80169ac:	4413      	add	r3, r2
 80169ae:	4955      	ldr	r1, [pc, #340]	; (8016b04 <Update_KyosanCommands+0x1f4>)
 80169b0:	461a      	mov	r2, r3
 80169b2:	460b      	mov	r3, r1
 80169b4:	cb03      	ldmia	r3!, {r0, r1}
 80169b6:	6010      	str	r0, [r2, #0]
 80169b8:	6051      	str	r1, [r2, #4]
 80169ba:	8819      	ldrh	r1, [r3, #0]
 80169bc:	789b      	ldrb	r3, [r3, #2]
 80169be:	8111      	strh	r1, [r2, #8]
 80169c0:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 80169c2:	79fb      	ldrb	r3, [r7, #7]
 80169c4:	1c5a      	adds	r2, r3, #1
 80169c6:	71fa      	strb	r2, [r7, #7]
 80169c8:	461a      	mov	r2, r3
 80169ca:	2332      	movs	r3, #50	; 0x32
 80169cc:	fb02 f303 	mul.w	r3, r2, r3
 80169d0:	4a4b      	ldr	r2, [pc, #300]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 80169d2:	4413      	add	r3, r2
 80169d4:	4a4c      	ldr	r2, [pc, #304]	; (8016b08 <Update_KyosanCommands+0x1f8>)
 80169d6:	461d      	mov	r5, r3
 80169d8:	4614      	mov	r4, r2
 80169da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80169dc:	6028      	str	r0, [r5, #0]
 80169de:	6069      	str	r1, [r5, #4]
 80169e0:	60aa      	str	r2, [r5, #8]
 80169e2:	60eb      	str	r3, [r5, #12]
 80169e4:	cc03      	ldmia	r4!, {r0, r1}
 80169e6:	6128      	str	r0, [r5, #16]
 80169e8:	6169      	str	r1, [r5, #20]
 80169ea:	8823      	ldrh	r3, [r4, #0]
 80169ec:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 80169ee:	79fb      	ldrb	r3, [r7, #7]
 80169f0:	1c5a      	adds	r2, r3, #1
 80169f2:	71fa      	strb	r2, [r7, #7]
 80169f4:	461a      	mov	r2, r3
 80169f6:	2332      	movs	r3, #50	; 0x32
 80169f8:	fb02 f303 	mul.w	r3, r2, r3
 80169fc:	4a40      	ldr	r2, [pc, #256]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 80169fe:	4413      	add	r3, r2
 8016a00:	4a42      	ldr	r2, [pc, #264]	; (8016b0c <Update_KyosanCommands+0x1fc>)
 8016a02:	461d      	mov	r5, r3
 8016a04:	4614      	mov	r4, r2
 8016a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a08:	6028      	str	r0, [r5, #0]
 8016a0a:	6069      	str	r1, [r5, #4]
 8016a0c:	60aa      	str	r2, [r5, #8]
 8016a0e:	60eb      	str	r3, [r5, #12]
 8016a10:	cc03      	ldmia	r4!, {r0, r1}
 8016a12:	6128      	str	r0, [r5, #16]
 8016a14:	6169      	str	r1, [r5, #20]
 8016a16:	8823      	ldrh	r3, [r4, #0]
 8016a18:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 8016a1a:	79fb      	ldrb	r3, [r7, #7]
 8016a1c:	1c5a      	adds	r2, r3, #1
 8016a1e:	71fa      	strb	r2, [r7, #7]
 8016a20:	461a      	mov	r2, r3
 8016a22:	2332      	movs	r3, #50	; 0x32
 8016a24:	fb02 f303 	mul.w	r3, r2, r3
 8016a28:	4a35      	ldr	r2, [pc, #212]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016a2a:	4413      	add	r3, r2
 8016a2c:	4a38      	ldr	r2, [pc, #224]	; (8016b10 <Update_KyosanCommands+0x200>)
 8016a2e:	461d      	mov	r5, r3
 8016a30:	4614      	mov	r4, r2
 8016a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a34:	6028      	str	r0, [r5, #0]
 8016a36:	6069      	str	r1, [r5, #4]
 8016a38:	60aa      	str	r2, [r5, #8]
 8016a3a:	60eb      	str	r3, [r5, #12]
 8016a3c:	cc03      	ldmia	r4!, {r0, r1}
 8016a3e:	6128      	str	r0, [r5, #16]
 8016a40:	6169      	str	r1, [r5, #20]
 8016a42:	8823      	ldrh	r3, [r4, #0]
 8016a44:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 8016a46:	79fb      	ldrb	r3, [r7, #7]
 8016a48:	1c5a      	adds	r2, r3, #1
 8016a4a:	71fa      	strb	r2, [r7, #7]
 8016a4c:	461a      	mov	r2, r3
 8016a4e:	2332      	movs	r3, #50	; 0x32
 8016a50:	fb02 f303 	mul.w	r3, r2, r3
 8016a54:	4a2a      	ldr	r2, [pc, #168]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016a56:	4413      	add	r3, r2
 8016a58:	4a2e      	ldr	r2, [pc, #184]	; (8016b14 <Update_KyosanCommands+0x204>)
 8016a5a:	461d      	mov	r5, r3
 8016a5c:	4614      	mov	r4, r2
 8016a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016a60:	6028      	str	r0, [r5, #0]
 8016a62:	6069      	str	r1, [r5, #4]
 8016a64:	60aa      	str	r2, [r5, #8]
 8016a66:	60eb      	str	r3, [r5, #12]
 8016a68:	cc03      	ldmia	r4!, {r0, r1}
 8016a6a:	6128      	str	r0, [r5, #16]
 8016a6c:	6169      	str	r1, [r5, #20]
 8016a6e:	8823      	ldrh	r3, [r4, #0]
 8016a70:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 8016a72:	79fb      	ldrb	r3, [r7, #7]
 8016a74:	1c5a      	adds	r2, r3, #1
 8016a76:	71fa      	strb	r2, [r7, #7]
 8016a78:	461a      	mov	r2, r3
 8016a7a:	2332      	movs	r3, #50	; 0x32
 8016a7c:	fb02 f303 	mul.w	r3, r2, r3
 8016a80:	4a1f      	ldr	r2, [pc, #124]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016a82:	4413      	add	r3, r2
 8016a84:	4a24      	ldr	r2, [pc, #144]	; (8016b18 <Update_KyosanCommands+0x208>)
 8016a86:	4614      	mov	r4, r2
 8016a88:	469c      	mov	ip, r3
 8016a8a:	f104 0e20 	add.w	lr, r4, #32
 8016a8e:	4665      	mov	r5, ip
 8016a90:	4626      	mov	r6, r4
 8016a92:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016a94:	6028      	str	r0, [r5, #0]
 8016a96:	6069      	str	r1, [r5, #4]
 8016a98:	60aa      	str	r2, [r5, #8]
 8016a9a:	60eb      	str	r3, [r5, #12]
 8016a9c:	3410      	adds	r4, #16
 8016a9e:	f10c 0c10 	add.w	ip, ip, #16
 8016aa2:	4574      	cmp	r4, lr
 8016aa4:	d1f3      	bne.n	8016a8e <Update_KyosanCommands+0x17e>
 8016aa6:	4662      	mov	r2, ip
 8016aa8:	4623      	mov	r3, r4
 8016aaa:	cb03      	ldmia	r3!, {r0, r1}
 8016aac:	6010      	str	r0, [r2, #0]
 8016aae:	6051      	str	r1, [r2, #4]
 8016ab0:	881b      	ldrh	r3, [r3, #0]
 8016ab2:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8016ab4:	79fb      	ldrb	r3, [r7, #7]
 8016ab6:	1c5a      	adds	r2, r3, #1
 8016ab8:	71fa      	strb	r2, [r7, #7]
 8016aba:	461a      	mov	r2, r3
 8016abc:	2332      	movs	r3, #50	; 0x32
 8016abe:	fb02 f303 	mul.w	r3, r2, r3
 8016ac2:	4a0f      	ldr	r2, [pc, #60]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016ac4:	4413      	add	r3, r2
 8016ac6:	4915      	ldr	r1, [pc, #84]	; (8016b1c <Update_KyosanCommands+0x20c>)
 8016ac8:	461a      	mov	r2, r3
 8016aca:	460b      	mov	r3, r1
 8016acc:	cb03      	ldmia	r3!, {r0, r1}
 8016ace:	6010      	str	r0, [r2, #0]
 8016ad0:	6051      	str	r1, [r2, #4]
 8016ad2:	881b      	ldrh	r3, [r3, #0]
 8016ad4:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 8016ad6:	79fb      	ldrb	r3, [r7, #7]
 8016ad8:	1c5a      	adds	r2, r3, #1
 8016ada:	71fa      	strb	r2, [r7, #7]
 8016adc:	461a      	mov	r2, r3
 8016ade:	2332      	movs	r3, #50	; 0x32
 8016ae0:	fb02 f303 	mul.w	r3, r2, r3
 8016ae4:	4a06      	ldr	r2, [pc, #24]	; (8016b00 <Update_KyosanCommands+0x1f0>)
 8016ae6:	4413      	add	r3, r2
 8016ae8:	4a0d      	ldr	r2, [pc, #52]	; (8016b20 <Update_KyosanCommands+0x210>)
 8016aea:	6810      	ldr	r0, [r2, #0]
 8016aec:	6018      	str	r0, [r3, #0]
 8016aee:	7912      	ldrb	r2, [r2, #4]
 8016af0:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 8016af2:	4a0c      	ldr	r2, [pc, #48]	; (8016b24 <Update_KyosanCommands+0x214>)
 8016af4:	79fb      	ldrb	r3, [r7, #7]
 8016af6:	7013      	strb	r3, [r2, #0]
}
 8016af8:	bf00      	nop
 8016afa:	370c      	adds	r7, #12
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016b00:	2000b4a4 	.word	0x2000b4a4
 8016b04:	0802ac84 	.word	0x0802ac84
 8016b08:	0802abdc 	.word	0x0802abdc
 8016b0c:	0802abf8 	.word	0x0802abf8
 8016b10:	0802ac14 	.word	0x0802ac14
 8016b14:	0802ac30 	.word	0x0802ac30
 8016b18:	0802ac4c 	.word	0x0802ac4c
 8016b1c:	0802ac90 	.word	0x0802ac90
 8016b20:	0802ac9c 	.word	0x0802ac9c
 8016b24:	2000b88c 	.word	0x2000b88c

08016b28 <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 8016b28:	b590      	push	{r4, r7, lr}
 8016b2a:	b085      	sub	sp, #20
 8016b2c:	af00      	add	r7, sp, #0
 8016b2e:	6078      	str	r0, [r7, #4]
 8016b30:	460b      	mov	r3, r1
 8016b32:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8016b34:	2300      	movs	r3, #0
 8016b36:	73fb      	strb	r3, [r7, #15]
 8016b38:	e01c      	b.n	8016b74 <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 8016b3a:	7bfb      	ldrb	r3, [r7, #15]
 8016b3c:	2232      	movs	r2, #50	; 0x32
 8016b3e:	fb02 f303 	mul.w	r3, r2, r3
 8016b42:	4a11      	ldr	r2, [pc, #68]	; (8016b88 <Is_KyosanCommand_Valid+0x60>)
 8016b44:	189c      	adds	r4, r3, r2
 8016b46:	7bfb      	ldrb	r3, [r7, #15]
 8016b48:	2232      	movs	r2, #50	; 0x32
 8016b4a:	fb02 f303 	mul.w	r3, r2, r3
 8016b4e:	4a0e      	ldr	r2, [pc, #56]	; (8016b88 <Is_KyosanCommand_Valid+0x60>)
 8016b50:	4413      	add	r3, r2
 8016b52:	4618      	mov	r0, r3
 8016b54:	f7e9 fb7e 	bl	8000254 <strlen>
 8016b58:	4603      	mov	r3, r0
 8016b5a:	461a      	mov	r2, r3
 8016b5c:	4621      	mov	r1, r4
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f00e fe5c 	bl	802581c <memcmp>
 8016b64:	4603      	mov	r3, r0
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d101      	bne.n	8016b6e <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 8016b6a:	7bfb      	ldrb	r3, [r7, #15]
 8016b6c:	e008      	b.n	8016b80 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8016b6e:	7bfb      	ldrb	r3, [r7, #15]
 8016b70:	3301      	adds	r3, #1
 8016b72:	73fb      	strb	r3, [r7, #15]
 8016b74:	4b05      	ldr	r3, [pc, #20]	; (8016b8c <Is_KyosanCommand_Valid+0x64>)
 8016b76:	781b      	ldrb	r3, [r3, #0]
 8016b78:	7bfa      	ldrb	r2, [r7, #15]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d3dd      	bcc.n	8016b3a <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 8016b7e:	23ff      	movs	r3, #255	; 0xff
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3714      	adds	r7, #20
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd90      	pop	{r4, r7, pc}
 8016b88:	2000b4a4 	.word	0x2000b4a4
 8016b8c:	2000b88c 	.word	0x2000b88c

08016b90 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8016b90:	b480      	push	{r7}
 8016b92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8016b94:	f3bf 8f4f 	dsb	sy
}
 8016b98:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016b9a:	f3bf 8f6f 	isb	sy
}
 8016b9e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8016ba0:	4b0d      	ldr	r3, [pc, #52]	; (8016bd8 <SCB_EnableICache+0x48>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8016ba8:	f3bf 8f4f 	dsb	sy
}
 8016bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016bae:	f3bf 8f6f 	isb	sy
}
 8016bb2:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8016bb4:	4b08      	ldr	r3, [pc, #32]	; (8016bd8 <SCB_EnableICache+0x48>)
 8016bb6:	695b      	ldr	r3, [r3, #20]
 8016bb8:	4a07      	ldr	r2, [pc, #28]	; (8016bd8 <SCB_EnableICache+0x48>)
 8016bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016bbe:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8016bc0:	f3bf 8f4f 	dsb	sy
}
 8016bc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016bc6:	f3bf 8f6f 	isb	sy
}
 8016bca:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8016bcc:	bf00      	nop
 8016bce:	46bd      	mov	sp, r7
 8016bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bd4:	4770      	bx	lr
 8016bd6:	bf00      	nop
 8016bd8:	e000ed00 	.word	0xe000ed00

08016bdc <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8016bdc:	b480      	push	{r7}
 8016bde:	b085      	sub	sp, #20
 8016be0:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8016be2:	4b1f      	ldr	r3, [pc, #124]	; (8016c60 <SCB_EnableDCache+0x84>)
 8016be4:	2200      	movs	r2, #0
 8016be6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8016bea:	f3bf 8f4f 	dsb	sy
}
 8016bee:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8016bf0:	4b1b      	ldr	r3, [pc, #108]	; (8016c60 <SCB_EnableDCache+0x84>)
 8016bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016bf6:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	0b5b      	lsrs	r3, r3, #13
 8016bfc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016c00:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	08db      	lsrs	r3, r3, #3
 8016c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016c0a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	015a      	lsls	r2, r3, #5
 8016c10:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8016c14:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8016c16:	68ba      	ldr	r2, [r7, #8]
 8016c18:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8016c1a:	4911      	ldr	r1, [pc, #68]	; (8016c60 <SCB_EnableDCache+0x84>)
 8016c1c:	4313      	orrs	r3, r2
 8016c1e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8016c22:	68bb      	ldr	r3, [r7, #8]
 8016c24:	1e5a      	subs	r2, r3, #1
 8016c26:	60ba      	str	r2, [r7, #8]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d1ef      	bne.n	8016c0c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8016c2c:	68fb      	ldr	r3, [r7, #12]
 8016c2e:	1e5a      	subs	r2, r3, #1
 8016c30:	60fa      	str	r2, [r7, #12]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d1e5      	bne.n	8016c02 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8016c36:	f3bf 8f4f 	dsb	sy
}
 8016c3a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8016c3c:	4b08      	ldr	r3, [pc, #32]	; (8016c60 <SCB_EnableDCache+0x84>)
 8016c3e:	695b      	ldr	r3, [r3, #20]
 8016c40:	4a07      	ldr	r2, [pc, #28]	; (8016c60 <SCB_EnableDCache+0x84>)
 8016c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016c46:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8016c48:	f3bf 8f4f 	dsb	sy
}
 8016c4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016c4e:	f3bf 8f6f 	isb	sy
}
 8016c52:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8016c54:	bf00      	nop
 8016c56:	3714      	adds	r7, #20
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c5e:	4770      	bx	lr
 8016c60:	e000ed00 	.word	0xe000ed00

08016c64 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8016c6a:	2300      	movs	r3, #0
 8016c6c:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 8016c6e:	f000 f9b9 	bl	8016fe4 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8016c72:	f7ff ff8d 	bl	8016b90 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8016c76:	f7ff ffb1 	bl	8016bdc <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8016c7a:	f001 ff79 	bl	8018b70 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8016c7e:	f000 f8eb 	bl	8016e58 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 8016c82:	f7f3 fbb9 	bl	800a3f8 <reset_cause_get>
 8016c86:	4603      	mov	r3, r0
 8016c88:	4618      	mov	r0, r3
 8016c8a:	f7f3 fc07 	bl	800a49c <reset_cause_get_name>
 8016c8e:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8016c90:	f7fe fb3a 	bl	8015308 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8016c94:	f001 f980 	bl	8017f98 <MX_USART1_UART_Init>
	Get_Slot();
 8016c98:	f7e9 ff18 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8016c9c:	f7f9 fd82 	bl	80107a4 <MX_CAN2_Init>
	MX_CAN3_Init();
 8016ca0:	f7f9 fdf8 	bl	8010894 <MX_CAN3_Init>
	MX_I2C1_Init();
 8016ca4:	f7fe fd60 	bl	8015768 <MX_I2C1_Init>
	MX_I2C2_Init();
 8016ca8:	f7fe fd9e 	bl	80157e8 <MX_I2C2_Init>
	MX_SPI1_Init();
 8016cac:	f000 fa2a 	bl	8017104 <MX_SPI1_Init>
	printf("\r\r\r\r");
 8016cb0:	485b      	ldr	r0, [pc, #364]	; (8016e20 <main+0x1bc>)
 8016cb2:	f00e fed3 	bl	8025a5c <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8016cb6:	485b      	ldr	r0, [pc, #364]	; (8016e24 <main+0x1c0>)
 8016cb8:	f00e ff6c 	bl	8025b94 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8016cbc:	6879      	ldr	r1, [r7, #4]
 8016cbe:	485a      	ldr	r0, [pc, #360]	; (8016e28 <main+0x1c4>)
 8016cc0:	f00e fecc 	bl	8025a5c <iprintf>
	Get_Build_Details();
 8016cc4:	f000 f932 	bl	8016f2c <Get_Build_Details>
	Get_Config();
 8016cc8:	f000 fd88 	bl	80177dc <Get_Config>
	MX_RNG_Init();
 8016ccc:	f000 f9bc 	bl	8017048 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8016cd0:	2208      	movs	r2, #8
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	4855      	ldr	r0, [pc, #340]	; (8016e2c <main+0x1c8>)
 8016cd6:	f00e fdd9 	bl	802588c <memset>
	HAL_Delay(250);
 8016cda:	20fa      	movs	r0, #250	; 0xfa
 8016cdc:	f001 ffb4 	bl	8018c48 <HAL_Delay>


	switch(EI_data.ProtocolType)
 8016ce0:	4b53      	ldr	r3, [pc, #332]	; (8016e30 <main+0x1cc>)
 8016ce2:	781b      	ldrb	r3, [r3, #0]
 8016ce4:	3b01      	subs	r3, #1
 8016ce6:	2b03      	cmp	r3, #3
 8016ce8:	d86d      	bhi.n	8016dc6 <main+0x162>
 8016cea:	a201      	add	r2, pc, #4	; (adr r2, 8016cf0 <main+0x8c>)
 8016cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cf0:	08016d01 	.word	0x08016d01
 8016cf4:	08016d5b 	.word	0x08016d5b
 8016cf8:	08016d83 	.word	0x08016d83
 8016cfc:	08016db3 	.word	0x08016db3
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8016d00:	f7f2 f996 	bl	8009030 <print_self_Details_Hitachi>
		ReAssignData();
 8016d04:	f7f2 ff22 	bl	8009b4c <ReAssignData>
		Update_HitachiCommands();
 8016d08:	f7e9 fdcc 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 8016d0c:	4849      	ldr	r0, [pc, #292]	; (8016e34 <main+0x1d0>)
 8016d0e:	f00e ff41 	bl	8025b94 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8016d12:	4849      	ldr	r0, [pc, #292]	; (8016e38 <main+0x1d4>)
 8016d14:	f00e ff3e 	bl	8025b94 <puts>
		MX_LWIP_Init();
 8016d18:	f008 ffc0 	bl	801fc9c <MX_LWIP_Init>
		udpServer_init();
 8016d1c:	f7f9 f960 	bl	800ffe0 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8016d20:	4846      	ldr	r0, [pc, #280]	; (8016e3c <main+0x1d8>)
 8016d22:	f00e ff37 	bl	8025b94 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort > 0) && (EI_data.Hitachi_st.BaudRate > 0) )
 8016d26:	4b42      	ldr	r3, [pc, #264]	; (8016e30 <main+0x1cc>)
 8016d28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d04e      	beq.n	8016dce <main+0x16a>
 8016d30:	4b3f      	ldr	r3, [pc, #252]	; (8016e30 <main+0x1cc>)
 8016d32:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d049      	beq.n	8016dce <main+0x16a>
		{
			MX_UART7_Init();
 8016d3a:	f001 f8f7 	bl	8017f2c <MX_UART7_Init>
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8016d3e:	4b3c      	ldr	r3, [pc, #240]	; (8016e30 <main+0x1cc>)
 8016d40:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016d44:	4619      	mov	r1, r3
 8016d46:	483e      	ldr	r0, [pc, #248]	; (8016e40 <main+0x1dc>)
 8016d48:	f00e fe88 	bl	8025a5c <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8016d4c:	4b38      	ldr	r3, [pc, #224]	; (8016e30 <main+0x1cc>)
 8016d4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016d52:	4618      	mov	r0, r3
 8016d54:	f001 face 	bl	80182f4 <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 8016d58:	e039      	b.n	8016dce <main+0x16a>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8016d5a:	483a      	ldr	r0, [pc, #232]	; (8016e44 <main+0x1e0>)
 8016d5c:	f00e ff1a 	bl	8025b94 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8016d60:	4835      	ldr	r0, [pc, #212]	; (8016e38 <main+0x1d4>)
 8016d62:	f00e ff17 	bl	8025b94 <puts>
		MX_LWIP_Init();
 8016d66:	f008 ff99 	bl	801fc9c <MX_LWIP_Init>
		udpServer_init();
 8016d6a:	f7f9 f939 	bl	800ffe0 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8016d6e:	4833      	ldr	r0, [pc, #204]	; (8016e3c <main+0x1d8>)
 8016d70:	f00e ff10 	bl	8025b94 <puts>
		print_self_DetailsSiemens();
 8016d74:	f7f9 f810 	bl	800fd98 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8016d78:	f7f7 fd1a 	bl	800e7b0 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8016d7c:	f7f8 fb2e 	bl	800f3dc <UpdateSIGNALSNames>
		break;
 8016d80:	e026      	b.n	8016dd0 <main+0x16c>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8016d82:	4831      	ldr	r0, [pc, #196]	; (8016e48 <main+0x1e4>)
 8016d84:	f00e ff06 	bl	8025b94 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8016d88:	4b29      	ldr	r3, [pc, #164]	; (8016e30 <main+0x1cc>)
 8016d8a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d006      	beq.n	8016da0 <main+0x13c>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8016d92:	4b27      	ldr	r3, [pc, #156]	; (8016e30 <main+0x1cc>)
 8016d94:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f001 faab 	bl	80182f4 <UART4_Init>
 8016d9e:	e003      	b.n	8016da8 <main+0x144>
		}
		else
		{
			UART4_Init(115200);
 8016da0:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8016da4:	f001 faa6 	bl	80182f4 <UART4_Init>
		}
		Update_MedhaCommands();
 8016da8:	f7f5 f812 	bl	800bdd0 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8016dac:	f7f4 fdd0 	bl	800b950 <Print_Medha_Self_Details>
		break;
 8016db0:	e00e      	b.n	8016dd0 <main+0x16c>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8016db2:	4826      	ldr	r0, [pc, #152]	; (8016e4c <main+0x1e8>)
 8016db4:	f00e feee 	bl	8025b94 <puts>
		UART4_Init(31200);
 8016db8:	f647 10e0 	movw	r0, #31200	; 0x79e0
 8016dbc:	f001 fa9a 	bl	80182f4 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8016dc0:	f7ff fda6 	bl	8016910 <Update_KyosanCommands>
		break;
 8016dc4:	e004      	b.n	8016dd0 <main+0x16c>

	default:
		printf("Please Select Protocol Type\n");
 8016dc6:	4822      	ldr	r0, [pc, #136]	; (8016e50 <main+0x1ec>)
 8016dc8:	f00e fee4 	bl	8025b94 <puts>
		while(1);
 8016dcc:	e7fe      	b.n	8016dcc <main+0x168>
		break;
 8016dce:	bf00      	nop
	}


	printf("Initialization Success\n");
 8016dd0:	4820      	ldr	r0, [pc, #128]	; (8016e54 <main+0x1f0>)
 8016dd2:	f00e fedf 	bl	8025b94 <puts>
	MX_IWDG_Init();
 8016dd6:	f7fe fdef 	bl	80159b8 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8016dda:	4b15      	ldr	r3, [pc, #84]	; (8016e30 <main+0x1cc>)
 8016ddc:	781b      	ldrb	r3, [r3, #0]
 8016dde:	3b01      	subs	r3, #1
 8016de0:	2b03      	cmp	r3, #3
 8016de2:	d817      	bhi.n	8016e14 <main+0x1b0>
 8016de4:	a201      	add	r2, pc, #4	; (adr r2, 8016dec <main+0x188>)
 8016de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dea:	bf00      	nop
 8016dec:	08016dfd 	.word	0x08016dfd
 8016df0:	08016e03 	.word	0x08016e03
 8016df4:	08016e09 	.word	0x08016e09
 8016df8:	08016e0f 	.word	0x08016e0f
		{
		case HITACHI:
			Process_HitachiEI();
 8016dfc:	f7f2 fe60 	bl	8009ac0 <Process_HitachiEI>
			break;
 8016e00:	e00c      	b.n	8016e1c <main+0x1b8>

		case SIEMENS:
			Process_SiemensEI();
 8016e02:	f7f5 fd0b 	bl	800c81c <Process_SiemensEI>
			break;
 8016e06:	e009      	b.n	8016e1c <main+0x1b8>

		case MEDHA:
			Process_Medha_EI();
 8016e08:	f7f3 fb98 	bl	800a53c <Process_Medha_EI>
			break;
 8016e0c:	e006      	b.n	8016e1c <main+0x1b8>

		case KYOSAN:
			Process_Kyosan_EI();
 8016e0e:	f7fe fdf1 	bl	80159f4 <Process_Kyosan_EI>
			break;
 8016e12:	e003      	b.n	8016e1c <main+0x1b8>

		default:
			printf("Please Select Protocol Type\n");
 8016e14:	480e      	ldr	r0, [pc, #56]	; (8016e50 <main+0x1ec>)
 8016e16:	f00e febd 	bl	8025b94 <puts>
			while(1);
 8016e1a:	e7fe      	b.n	8016e1a <main+0x1b6>
		switch(EI_data.ProtocolType)
 8016e1c:	e7dd      	b.n	8016dda <main+0x176>
 8016e1e:	bf00      	nop
 8016e20:	0802aca4 	.word	0x0802aca4
 8016e24:	0802acac 	.word	0x0802acac
 8016e28:	0802acfc 	.word	0x0802acfc
 8016e2c:	2000308c 	.word	0x2000308c
 8016e30:	20000504 	.word	0x20000504
 8016e34:	0802ad18 	.word	0x0802ad18
 8016e38:	0802ad38 	.word	0x0802ad38
 8016e3c:	0802ad60 	.word	0x0802ad60
 8016e40:	0802ad7c 	.word	0x0802ad7c
 8016e44:	0802ada4 	.word	0x0802ada4
 8016e48:	0802adc4 	.word	0x0802adc4
 8016e4c:	0802ade0 	.word	0x0802ade0
 8016e50:	0802adfc 	.word	0x0802adfc
 8016e54:	0802ae18 	.word	0x0802ae18

08016e58 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8016e58:	b580      	push	{r7, lr}
 8016e5a:	b094      	sub	sp, #80	; 0x50
 8016e5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8016e5e:	f107 031c 	add.w	r3, r7, #28
 8016e62:	2234      	movs	r2, #52	; 0x34
 8016e64:	2100      	movs	r1, #0
 8016e66:	4618      	mov	r0, r3
 8016e68:	f00e fd10 	bl	802588c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8016e6c:	f107 0308 	add.w	r3, r7, #8
 8016e70:	2200      	movs	r2, #0
 8016e72:	601a      	str	r2, [r3, #0]
 8016e74:	605a      	str	r2, [r3, #4]
 8016e76:	609a      	str	r2, [r3, #8]
 8016e78:	60da      	str	r2, [r3, #12]
 8016e7a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8016e7c:	4b29      	ldr	r3, [pc, #164]	; (8016f24 <SystemClock_Config+0xcc>)
 8016e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e80:	4a28      	ldr	r2, [pc, #160]	; (8016f24 <SystemClock_Config+0xcc>)
 8016e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016e86:	6413      	str	r3, [r2, #64]	; 0x40
 8016e88:	4b26      	ldr	r3, [pc, #152]	; (8016f24 <SystemClock_Config+0xcc>)
 8016e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8016e90:	607b      	str	r3, [r7, #4]
 8016e92:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8016e94:	4b24      	ldr	r3, [pc, #144]	; (8016f28 <SystemClock_Config+0xd0>)
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	4a23      	ldr	r2, [pc, #140]	; (8016f28 <SystemClock_Config+0xd0>)
 8016e9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8016e9e:	6013      	str	r3, [r2, #0]
 8016ea0:	4b21      	ldr	r3, [pc, #132]	; (8016f28 <SystemClock_Config+0xd0>)
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8016ea8:	603b      	str	r3, [r7, #0]
 8016eaa:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8016eac:	2309      	movs	r3, #9
 8016eae:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8016eb0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8016eb4:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8016eba:	2302      	movs	r3, #2
 8016ebc:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8016ebe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8016ec2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8016ec4:	2306      	movs	r3, #6
 8016ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8016ec8:	23b4      	movs	r3, #180	; 0xb4
 8016eca:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8016ecc:	2302      	movs	r3, #2
 8016ece:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8016ed0:	2308      	movs	r3, #8
 8016ed2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8016ed4:	2302      	movs	r3, #2
 8016ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8016ed8:	f107 031c 	add.w	r3, r7, #28
 8016edc:	4618      	mov	r0, r3
 8016ede:	f005 f929 	bl	801c134 <HAL_RCC_OscConfig>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	d001      	beq.n	8016eec <SystemClock_Config+0x94>
	{
		Error_Handler();
 8016ee8:	f000 f8a8 	bl	801703c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8016eec:	230f      	movs	r3, #15
 8016eee:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8016ef0:	2302      	movs	r3, #2
 8016ef2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8016ef8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8016efc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8016efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f02:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8016f04:	f107 0308 	add.w	r3, r7, #8
 8016f08:	2105      	movs	r1, #5
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	f005 fbc0 	bl	801c690 <HAL_RCC_ClockConfig>
 8016f10:	4603      	mov	r3, r0
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d001      	beq.n	8016f1a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8016f16:	f000 f891 	bl	801703c <Error_Handler>
	}
}
 8016f1a:	bf00      	nop
 8016f1c:	3750      	adds	r7, #80	; 0x50
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	40023800 	.word	0x40023800
 8016f28:	40007000 	.word	0x40007000

08016f2c <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b08e      	sub	sp, #56	; 0x38
 8016f30:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8016f32:	2300      	movs	r3, #0
 8016f34:	607b      	str	r3, [r7, #4]
 8016f36:	f107 0308 	add.w	r3, r7, #8
 8016f3a:	222e      	movs	r2, #46	; 0x2e
 8016f3c:	2100      	movs	r1, #0
 8016f3e:	4618      	mov	r0, r3
 8016f40:	f00e fca4 	bl	802588c <memset>
	printf("\n_____________________________________________\n");
 8016f44:	481d      	ldr	r0, [pc, #116]	; (8016fbc <Get_Build_Details+0x90>)
 8016f46:	f00e fe25 	bl	8025b94 <puts>
	printf("Build Date:%s\n",__DATE__);
 8016f4a:	491d      	ldr	r1, [pc, #116]	; (8016fc0 <Get_Build_Details+0x94>)
 8016f4c:	481d      	ldr	r0, [pc, #116]	; (8016fc4 <Get_Build_Details+0x98>)
 8016f4e:	f00e fd85 	bl	8025a5c <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8016f52:	491d      	ldr	r1, [pc, #116]	; (8016fc8 <Get_Build_Details+0x9c>)
 8016f54:	481d      	ldr	r0, [pc, #116]	; (8016fcc <Get_Build_Details+0xa0>)
 8016f56:	f00e fd81 	bl	8025a5c <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8016f5a:	1d3b      	adds	r3, r7, #4
 8016f5c:	4a18      	ldr	r2, [pc, #96]	; (8016fc0 <Get_Build_Details+0x94>)
 8016f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8016f60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8016f64:	1d3b      	adds	r3, r7, #4
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7e9 f974 	bl	8000254 <strlen>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	461a      	mov	r2, r3
 8016f70:	1d3b      	adds	r3, r7, #4
 8016f72:	4413      	add	r3, r2
 8016f74:	4914      	ldr	r1, [pc, #80]	; (8016fc8 <Get_Build_Details+0x9c>)
 8016f76:	461a      	mov	r2, r3
 8016f78:	460b      	mov	r3, r1
 8016f7a:	cb03      	ldmia	r3!, {r0, r1}
 8016f7c:	6010      	str	r0, [r2, #0]
 8016f7e:	6051      	str	r1, [r2, #4]
 8016f80:	781b      	ldrb	r3, [r3, #0]
 8016f82:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8016f84:	1d3b      	adds	r3, r7, #4
 8016f86:	4618      	mov	r0, r3
 8016f88:	f7e9 f964 	bl	8000254 <strlen>
 8016f8c:	4603      	mov	r3, r0
 8016f8e:	b21a      	sxth	r2, r3
 8016f90:	1d3b      	adds	r3, r7, #4
 8016f92:	4619      	mov	r1, r3
 8016f94:	2000      	movs	r0, #0
 8016f96:	f7fe f863 	bl	8015060 <GetCRC16>
 8016f9a:	4603      	mov	r3, r0
 8016f9c:	461a      	mov	r2, r3
 8016f9e:	4b0c      	ldr	r3, [pc, #48]	; (8016fd0 <Get_Build_Details+0xa4>)
 8016fa0:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8016fa2:	4a0c      	ldr	r2, [pc, #48]	; (8016fd4 <Get_Build_Details+0xa8>)
 8016fa4:	490c      	ldr	r1, [pc, #48]	; (8016fd8 <Get_Build_Details+0xac>)
 8016fa6:	480d      	ldr	r0, [pc, #52]	; (8016fdc <Get_Build_Details+0xb0>)
 8016fa8:	f00e fd58 	bl	8025a5c <iprintf>
	printf("_____________________________________________\n");
 8016fac:	480c      	ldr	r0, [pc, #48]	; (8016fe0 <Get_Build_Details+0xb4>)
 8016fae:	f00e fdf1 	bl	8025b94 <puts>

}
 8016fb2:	bf00      	nop
 8016fb4:	3738      	adds	r7, #56	; 0x38
 8016fb6:	46bd      	mov	sp, r7
 8016fb8:	bd80      	pop	{r7, pc}
 8016fba:	bf00      	nop
 8016fbc:	0802ae30 	.word	0x0802ae30
 8016fc0:	0802ae60 	.word	0x0802ae60
 8016fc4:	0802ae6c 	.word	0x0802ae6c
 8016fc8:	0802ae7c 	.word	0x0802ae7c
 8016fcc:	0802ae88 	.word	0x0802ae88
 8016fd0:	2000bbd0 	.word	0x2000bbd0
 8016fd4:	0802ae98 	.word	0x0802ae98
 8016fd8:	0802ae9c 	.word	0x0802ae9c
 8016fdc:	0802aeb4 	.word	0x0802aeb4
 8016fe0:	0802aed0 	.word	0x0802aed0

08016fe4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8016fe4:	b580      	push	{r7, lr}
 8016fe6:	b084      	sub	sp, #16
 8016fe8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8016fea:	463b      	mov	r3, r7
 8016fec:	2200      	movs	r2, #0
 8016fee:	601a      	str	r2, [r3, #0]
 8016ff0:	605a      	str	r2, [r3, #4]
 8016ff2:	609a      	str	r2, [r3, #8]
 8016ff4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8016ff6:	f002 fd3f 	bl	8019a78 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8016ffa:	2301      	movs	r3, #1
 8016ffc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8017002:	2300      	movs	r3, #0
 8017004:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8017006:	231f      	movs	r3, #31
 8017008:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801700a:	2387      	movs	r3, #135	; 0x87
 801700c:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 801700e:	2300      	movs	r3, #0
 8017010:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8017012:	2300      	movs	r3, #0
 8017014:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8017016:	2301      	movs	r3, #1
 8017018:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801701a:	2301      	movs	r3, #1
 801701c:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 801701e:	2300      	movs	r3, #0
 8017020:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8017022:	2300      	movs	r3, #0
 8017024:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8017026:	463b      	mov	r3, r7
 8017028:	4618      	mov	r0, r3
 801702a:	f002 fd5d 	bl	8019ae8 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 801702e:	2004      	movs	r0, #4
 8017030:	f002 fd3a 	bl	8019aa8 <HAL_MPU_Enable>

}
 8017034:	bf00      	nop
 8017036:	3710      	adds	r7, #16
 8017038:	46bd      	mov	sp, r7
 801703a:	bd80      	pop	{r7, pc}

0801703c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 801703c:	b480      	push	{r7}
 801703e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8017040:	b672      	cpsid	i
}
 8017042:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8017044:	e7fe      	b.n	8017044 <Error_Handler+0x8>
	...

08017048 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8017048:	b580      	push	{r7, lr}
 801704a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 801704c:	4b06      	ldr	r3, [pc, #24]	; (8017068 <MX_RNG_Init+0x20>)
 801704e:	4a07      	ldr	r2, [pc, #28]	; (801706c <MX_RNG_Init+0x24>)
 8017050:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8017052:	4805      	ldr	r0, [pc, #20]	; (8017068 <MX_RNG_Init+0x20>)
 8017054:	f006 f92a 	bl	801d2ac <HAL_RNG_Init>
 8017058:	4603      	mov	r3, r0
 801705a:	2b00      	cmp	r3, #0
 801705c:	d001      	beq.n	8017062 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 801705e:	f7ff ffed 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8017062:	bf00      	nop
 8017064:	bd80      	pop	{r7, pc}
 8017066:	bf00      	nop
 8017068:	2000bbac 	.word	0x2000bbac
 801706c:	50060800 	.word	0x50060800

08017070 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b0a8      	sub	sp, #160	; 0xa0
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017078:	f107 0310 	add.w	r3, r7, #16
 801707c:	2290      	movs	r2, #144	; 0x90
 801707e:	2100      	movs	r1, #0
 8017080:	4618      	mov	r0, r3
 8017082:	f00e fc03 	bl	802588c <memset>
  if(rngHandle->Instance==RNG)
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4a11      	ldr	r2, [pc, #68]	; (80170d0 <HAL_RNG_MspInit+0x60>)
 801708c:	4293      	cmp	r3, r2
 801708e:	d11b      	bne.n	80170c8 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8017090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8017094:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8017096:	2300      	movs	r3, #0
 8017098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801709c:	f107 0310 	add.w	r3, r7, #16
 80170a0:	4618      	mov	r0, r3
 80170a2:	f005 fcdb 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 80170a6:	4603      	mov	r3, r0
 80170a8:	2b00      	cmp	r3, #0
 80170aa:	d001      	beq.n	80170b0 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80170ac:	f7ff ffc6 	bl	801703c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80170b0:	4b08      	ldr	r3, [pc, #32]	; (80170d4 <HAL_RNG_MspInit+0x64>)
 80170b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170b4:	4a07      	ldr	r2, [pc, #28]	; (80170d4 <HAL_RNG_MspInit+0x64>)
 80170b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80170ba:	6353      	str	r3, [r2, #52]	; 0x34
 80170bc:	4b05      	ldr	r3, [pc, #20]	; (80170d4 <HAL_RNG_MspInit+0x64>)
 80170be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80170c4:	60fb      	str	r3, [r7, #12]
 80170c6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80170c8:	bf00      	nop
 80170ca:	37a0      	adds	r7, #160	; 0xa0
 80170cc:	46bd      	mov	sp, r7
 80170ce:	bd80      	pop	{r7, pc}
 80170d0:	50060800 	.word	0x50060800
 80170d4:	40023800 	.word	0x40023800

080170d8 <__NVIC_SystemReset>:
{
 80170d8:	b480      	push	{r7}
 80170da:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80170dc:	f3bf 8f4f 	dsb	sy
}
 80170e0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80170e2:	4b06      	ldr	r3, [pc, #24]	; (80170fc <__NVIC_SystemReset+0x24>)
 80170e4:	68db      	ldr	r3, [r3, #12]
 80170e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80170ea:	4904      	ldr	r1, [pc, #16]	; (80170fc <__NVIC_SystemReset+0x24>)
 80170ec:	4b04      	ldr	r3, [pc, #16]	; (8017100 <__NVIC_SystemReset+0x28>)
 80170ee:	4313      	orrs	r3, r2
 80170f0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80170f2:	f3bf 8f4f 	dsb	sy
}
 80170f6:	bf00      	nop
    __NOP();
 80170f8:	bf00      	nop
 80170fa:	e7fd      	b.n	80170f8 <__NVIC_SystemReset+0x20>
 80170fc:	e000ed00 	.word	0xe000ed00
 8017100:	05fa0004 	.word	0x05fa0004

08017104 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017104:	b580      	push	{r7, lr}
 8017106:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8017108:	4b1b      	ldr	r3, [pc, #108]	; (8017178 <MX_SPI1_Init+0x74>)
 801710a:	4a1c      	ldr	r2, [pc, #112]	; (801717c <MX_SPI1_Init+0x78>)
 801710c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801710e:	4b1a      	ldr	r3, [pc, #104]	; (8017178 <MX_SPI1_Init+0x74>)
 8017110:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017114:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8017116:	4b18      	ldr	r3, [pc, #96]	; (8017178 <MX_SPI1_Init+0x74>)
 8017118:	2200      	movs	r2, #0
 801711a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 801711c:	4b16      	ldr	r3, [pc, #88]	; (8017178 <MX_SPI1_Init+0x74>)
 801711e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017122:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017124:	4b14      	ldr	r3, [pc, #80]	; (8017178 <MX_SPI1_Init+0x74>)
 8017126:	2200      	movs	r2, #0
 8017128:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801712a:	4b13      	ldr	r3, [pc, #76]	; (8017178 <MX_SPI1_Init+0x74>)
 801712c:	2200      	movs	r2, #0
 801712e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017130:	4b11      	ldr	r3, [pc, #68]	; (8017178 <MX_SPI1_Init+0x74>)
 8017132:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017136:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8017138:	4b0f      	ldr	r3, [pc, #60]	; (8017178 <MX_SPI1_Init+0x74>)
 801713a:	2208      	movs	r2, #8
 801713c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 801713e:	4b0e      	ldr	r3, [pc, #56]	; (8017178 <MX_SPI1_Init+0x74>)
 8017140:	2200      	movs	r2, #0
 8017142:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8017144:	4b0c      	ldr	r3, [pc, #48]	; (8017178 <MX_SPI1_Init+0x74>)
 8017146:	2200      	movs	r2, #0
 8017148:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801714a:	4b0b      	ldr	r3, [pc, #44]	; (8017178 <MX_SPI1_Init+0x74>)
 801714c:	2200      	movs	r2, #0
 801714e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8017150:	4b09      	ldr	r3, [pc, #36]	; (8017178 <MX_SPI1_Init+0x74>)
 8017152:	2207      	movs	r2, #7
 8017154:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017156:	4b08      	ldr	r3, [pc, #32]	; (8017178 <MX_SPI1_Init+0x74>)
 8017158:	2200      	movs	r2, #0
 801715a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 801715c:	4b06      	ldr	r3, [pc, #24]	; (8017178 <MX_SPI1_Init+0x74>)
 801715e:	2208      	movs	r2, #8
 8017160:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8017162:	4805      	ldr	r0, [pc, #20]	; (8017178 <MX_SPI1_Init+0x74>)
 8017164:	f006 f937 	bl	801d3d6 <HAL_SPI_Init>
 8017168:	4603      	mov	r3, r0
 801716a:	2b00      	cmp	r3, #0
 801716c:	d001      	beq.n	8017172 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 801716e:	f7ff ff65 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8017172:	bf00      	nop
 8017174:	bd80      	pop	{r7, pc}
 8017176:	bf00      	nop
 8017178:	2000bbd4 	.word	0x2000bbd4
 801717c:	40013000 	.word	0x40013000

08017180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8017180:	b580      	push	{r7, lr}
 8017182:	b08c      	sub	sp, #48	; 0x30
 8017184:	af00      	add	r7, sp, #0
 8017186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017188:	f107 031c 	add.w	r3, r7, #28
 801718c:	2200      	movs	r2, #0
 801718e:	601a      	str	r2, [r3, #0]
 8017190:	605a      	str	r2, [r3, #4]
 8017192:	609a      	str	r2, [r3, #8]
 8017194:	60da      	str	r2, [r3, #12]
 8017196:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	4a33      	ldr	r2, [pc, #204]	; (801726c <HAL_SPI_MspInit+0xec>)
 801719e:	4293      	cmp	r3, r2
 80171a0:	d160      	bne.n	8017264 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80171a2:	4b33      	ldr	r3, [pc, #204]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171a6:	4a32      	ldr	r2, [pc, #200]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80171ac:	6453      	str	r3, [r2, #68]	; 0x44
 80171ae:	4b30      	ldr	r3, [pc, #192]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80171b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80171b6:	61bb      	str	r3, [r7, #24]
 80171b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80171ba:	4b2d      	ldr	r3, [pc, #180]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171be:	4a2c      	ldr	r2, [pc, #176]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171c0:	f043 0301 	orr.w	r3, r3, #1
 80171c4:	6313      	str	r3, [r2, #48]	; 0x30
 80171c6:	4b2a      	ldr	r3, [pc, #168]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ca:	f003 0301 	and.w	r3, r3, #1
 80171ce:	617b      	str	r3, [r7, #20]
 80171d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80171d2:	4b27      	ldr	r3, [pc, #156]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171d6:	4a26      	ldr	r2, [pc, #152]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171d8:	f043 0308 	orr.w	r3, r3, #8
 80171dc:	6313      	str	r3, [r2, #48]	; 0x30
 80171de:	4b24      	ldr	r3, [pc, #144]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171e2:	f003 0308 	and.w	r3, r3, #8
 80171e6:	613b      	str	r3, [r7, #16]
 80171e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80171ea:	4b21      	ldr	r3, [pc, #132]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171ee:	4a20      	ldr	r2, [pc, #128]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80171f4:	6313      	str	r3, [r2, #48]	; 0x30
 80171f6:	4b1e      	ldr	r3, [pc, #120]	; (8017270 <HAL_SPI_MspInit+0xf0>)
 80171f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80171fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80171fe:	60fb      	str	r3, [r7, #12]
 8017200:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8017202:	2320      	movs	r3, #32
 8017204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017206:	2302      	movs	r3, #2
 8017208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801720a:	2300      	movs	r3, #0
 801720c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801720e:	2303      	movs	r3, #3
 8017210:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017212:	2305      	movs	r3, #5
 8017214:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8017216:	f107 031c 	add.w	r3, r7, #28
 801721a:	4619      	mov	r1, r3
 801721c:	4815      	ldr	r0, [pc, #84]	; (8017274 <HAL_SPI_MspInit+0xf4>)
 801721e:	f003 ff1f 	bl	801b060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8017222:	2380      	movs	r3, #128	; 0x80
 8017224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017226:	2302      	movs	r3, #2
 8017228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801722a:	2300      	movs	r3, #0
 801722c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801722e:	2303      	movs	r3, #3
 8017230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017232:	2305      	movs	r3, #5
 8017234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8017236:	f107 031c 	add.w	r3, r7, #28
 801723a:	4619      	mov	r1, r3
 801723c:	480e      	ldr	r0, [pc, #56]	; (8017278 <HAL_SPI_MspInit+0xf8>)
 801723e:	f003 ff0f 	bl	801b060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8017242:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017248:	2302      	movs	r3, #2
 801724a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801724c:	2300      	movs	r3, #0
 801724e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017250:	2303      	movs	r3, #3
 8017252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017254:	2305      	movs	r3, #5
 8017256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8017258:	f107 031c 	add.w	r3, r7, #28
 801725c:	4619      	mov	r1, r3
 801725e:	4807      	ldr	r0, [pc, #28]	; (801727c <HAL_SPI_MspInit+0xfc>)
 8017260:	f003 fefe 	bl	801b060 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8017264:	bf00      	nop
 8017266:	3730      	adds	r7, #48	; 0x30
 8017268:	46bd      	mov	sp, r7
 801726a:	bd80      	pop	{r7, pc}
 801726c:	40013000 	.word	0x40013000
 8017270:	40023800 	.word	0x40023800
 8017274:	40020000 	.word	0x40020000
 8017278:	40020c00 	.word	0x40020c00
 801727c:	40021800 	.word	0x40021800

08017280 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8017280:	b580      	push	{r7, lr}
 8017282:	b086      	sub	sp, #24
 8017284:	af00      	add	r7, sp, #0
 8017286:	60b9      	str	r1, [r7, #8]
 8017288:	607b      	str	r3, [r7, #4]
 801728a:	4603      	mov	r3, r0
 801728c:	73fb      	strb	r3, [r7, #15]
 801728e:	4613      	mov	r3, r2
 8017290:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8017292:	2300      	movs	r3, #0
 8017294:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8017296:	7bfb      	ldrb	r3, [r7, #15]
 8017298:	3b01      	subs	r3, #1
 801729a:	2b03      	cmp	r3, #3
 801729c:	d828      	bhi.n	80172f0 <SPI_WriteInFlash+0x70>
 801729e:	a201      	add	r2, pc, #4	; (adr r2, 80172a4 <SPI_WriteInFlash+0x24>)
 80172a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172a4:	080172b5 	.word	0x080172b5
 80172a8:	080172c5 	.word	0x080172c5
 80172ac:	080172d3 	.word	0x080172d3
 80172b0:	080172e1 	.word	0x080172e1
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 80172b4:	4b75      	ldr	r3, [pc, #468]	; (801748c <SPI_WriteInFlash+0x20c>)
 80172b6:	4a76      	ldr	r2, [pc, #472]	; (8017490 <SPI_WriteInFlash+0x210>)
 80172b8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80172ba:	4b76      	ldr	r3, [pc, #472]	; (8017494 <SPI_WriteInFlash+0x214>)
 80172bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80172c0:	601a      	str	r2, [r3, #0]
		break;
 80172c2:	e018      	b.n	80172f6 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 80172c4:	4b71      	ldr	r3, [pc, #452]	; (801748c <SPI_WriteInFlash+0x20c>)
 80172c6:	4a74      	ldr	r2, [pc, #464]	; (8017498 <SPI_WriteInFlash+0x218>)
 80172c8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80172ca:	4b72      	ldr	r3, [pc, #456]	; (8017494 <SPI_WriteInFlash+0x214>)
 80172cc:	2220      	movs	r2, #32
 80172ce:	601a      	str	r2, [r3, #0]
		break;
 80172d0:	e011      	b.n	80172f6 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 80172d2:	4b6e      	ldr	r3, [pc, #440]	; (801748c <SPI_WriteInFlash+0x20c>)
 80172d4:	4a70      	ldr	r2, [pc, #448]	; (8017498 <SPI_WriteInFlash+0x218>)
 80172d6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80172d8:	4b6e      	ldr	r3, [pc, #440]	; (8017494 <SPI_WriteInFlash+0x214>)
 80172da:	2240      	movs	r2, #64	; 0x40
 80172dc:	601a      	str	r2, [r3, #0]
		break;
 80172de:	e00a      	b.n	80172f6 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 80172e0:	4b6a      	ldr	r3, [pc, #424]	; (801748c <SPI_WriteInFlash+0x20c>)
 80172e2:	4a6e      	ldr	r2, [pc, #440]	; (801749c <SPI_WriteInFlash+0x21c>)
 80172e4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80172e6:	4b6b      	ldr	r3, [pc, #428]	; (8017494 <SPI_WriteInFlash+0x214>)
 80172e8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80172ec:	601a      	str	r2, [r3, #0]
		break;
 80172ee:	e002      	b.n	80172f6 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 80172f0:	486b      	ldr	r0, [pc, #428]	; (80174a0 <SPI_WriteInFlash+0x220>)
 80172f2:	f00e fc4f 	bl	8025b94 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80172f6:	4b65      	ldr	r3, [pc, #404]	; (801748c <SPI_WriteInFlash+0x20c>)
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	4a66      	ldr	r2, [pc, #408]	; (8017494 <SPI_WriteInFlash+0x214>)
 80172fc:	6812      	ldr	r2, [r2, #0]
 80172fe:	b291      	uxth	r1, r2
 8017300:	2201      	movs	r2, #1
 8017302:	4618      	mov	r0, r3
 8017304:	f004 f870 	bl	801b3e8 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017308:	4b60      	ldr	r3, [pc, #384]	; (801748c <SPI_WriteInFlash+0x20c>)
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	4a61      	ldr	r2, [pc, #388]	; (8017494 <SPI_WriteInFlash+0x214>)
 801730e:	6812      	ldr	r2, [r2, #0]
 8017310:	b291      	uxth	r1, r2
 8017312:	2200      	movs	r2, #0
 8017314:	4618      	mov	r0, r3
 8017316:	f004 f867 	bl	801b3e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 801731a:	2364      	movs	r3, #100	; 0x64
 801731c:	2201      	movs	r2, #1
 801731e:	4961      	ldr	r1, [pc, #388]	; (80174a4 <SPI_WriteInFlash+0x224>)
 8017320:	4861      	ldr	r0, [pc, #388]	; (80174a8 <SPI_WriteInFlash+0x228>)
 8017322:	f006 f903 	bl	801d52c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017326:	4b59      	ldr	r3, [pc, #356]	; (801748c <SPI_WriteInFlash+0x20c>)
 8017328:	681b      	ldr	r3, [r3, #0]
 801732a:	4a5a      	ldr	r2, [pc, #360]	; (8017494 <SPI_WriteInFlash+0x214>)
 801732c:	6812      	ldr	r2, [r2, #0]
 801732e:	b291      	uxth	r1, r2
 8017330:	2201      	movs	r2, #1
 8017332:	4618      	mov	r0, r3
 8017334:	f004 f858 	bl	801b3e8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017338:	4b54      	ldr	r3, [pc, #336]	; (801748c <SPI_WriteInFlash+0x20c>)
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	4a55      	ldr	r2, [pc, #340]	; (8017494 <SPI_WriteInFlash+0x214>)
 801733e:	6812      	ldr	r2, [r2, #0]
 8017340:	b291      	uxth	r1, r2
 8017342:	2200      	movs	r2, #0
 8017344:	4618      	mov	r0, r3
 8017346:	f004 f84f 	bl	801b3e8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 801734a:	2364      	movs	r3, #100	; 0x64
 801734c:	2201      	movs	r2, #1
 801734e:	4957      	ldr	r1, [pc, #348]	; (80174ac <SPI_WriteInFlash+0x22c>)
 8017350:	4855      	ldr	r0, [pc, #340]	; (80174a8 <SPI_WriteInFlash+0x228>)
 8017352:	f006 f8eb 	bl	801d52c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017356:	2364      	movs	r3, #100	; 0x64
 8017358:	2201      	movs	r2, #1
 801735a:	4955      	ldr	r1, [pc, #340]	; (80174b0 <SPI_WriteInFlash+0x230>)
 801735c:	4852      	ldr	r0, [pc, #328]	; (80174a8 <SPI_WriteInFlash+0x228>)
 801735e:	f006 fa53 	bl	801d808 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017362:	4b4a      	ldr	r3, [pc, #296]	; (801748c <SPI_WriteInFlash+0x20c>)
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	4a4b      	ldr	r2, [pc, #300]	; (8017494 <SPI_WriteInFlash+0x214>)
 8017368:	6812      	ldr	r2, [r2, #0]
 801736a:	b291      	uxth	r1, r2
 801736c:	2201      	movs	r2, #1
 801736e:	4618      	mov	r0, r3
 8017370:	f004 f83a 	bl	801b3e8 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8017374:	4b4e      	ldr	r3, [pc, #312]	; (80174b0 <SPI_WriteInFlash+0x230>)
 8017376:	781b      	ldrb	r3, [r3, #0]
 8017378:	f003 0302 	and.w	r3, r3, #2
 801737c:	2b00      	cmp	r3, #0
 801737e:	d103      	bne.n	8017388 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8017380:	484c      	ldr	r0, [pc, #304]	; (80174b4 <SPI_WriteInFlash+0x234>)
 8017382:	f00e fb6b 	bl	8025a5c <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017386:	e7d7      	b.n	8017338 <SPI_WriteInFlash+0xb8>
			break;
 8017388:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801738a:	4b40      	ldr	r3, [pc, #256]	; (801748c <SPI_WriteInFlash+0x20c>)
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	4a41      	ldr	r2, [pc, #260]	; (8017494 <SPI_WriteInFlash+0x214>)
 8017390:	6812      	ldr	r2, [r2, #0]
 8017392:	b291      	uxth	r1, r2
 8017394:	2200      	movs	r2, #0
 8017396:	4618      	mov	r0, r3
 8017398:	f004 f826 	bl	801b3e8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 801739c:	2202      	movs	r2, #2
 801739e:	4b46      	ldr	r3, [pc, #280]	; (80174b8 <SPI_WriteInFlash+0x238>)
 80173a0:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	0c1b      	lsrs	r3, r3, #16
 80173a6:	b2da      	uxtb	r2, r3
 80173a8:	4b43      	ldr	r3, [pc, #268]	; (80174b8 <SPI_WriteInFlash+0x238>)
 80173aa:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80173ac:	68bb      	ldr	r3, [r7, #8]
 80173ae:	0a1b      	lsrs	r3, r3, #8
 80173b0:	b2da      	uxtb	r2, r3
 80173b2:	4b41      	ldr	r3, [pc, #260]	; (80174b8 <SPI_WriteInFlash+0x238>)
 80173b4:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	b2da      	uxtb	r2, r3
 80173ba:	4b3f      	ldr	r3, [pc, #252]	; (80174b8 <SPI_WriteInFlash+0x238>)
 80173bc:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80173be:	2364      	movs	r3, #100	; 0x64
 80173c0:	2204      	movs	r2, #4
 80173c2:	493d      	ldr	r1, [pc, #244]	; (80174b8 <SPI_WriteInFlash+0x238>)
 80173c4:	4838      	ldr	r0, [pc, #224]	; (80174a8 <SPI_WriteInFlash+0x228>)
 80173c6:	f006 f8b1 	bl	801d52c <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 80173ca:	89ba      	ldrh	r2, [r7, #12]
 80173cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80173d0:	6879      	ldr	r1, [r7, #4]
 80173d2:	4835      	ldr	r0, [pc, #212]	; (80174a8 <SPI_WriteInFlash+0x228>)
 80173d4:	f006 f8aa 	bl	801d52c <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80173d8:	4b2c      	ldr	r3, [pc, #176]	; (801748c <SPI_WriteInFlash+0x20c>)
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	4a2d      	ldr	r2, [pc, #180]	; (8017494 <SPI_WriteInFlash+0x214>)
 80173de:	6812      	ldr	r2, [r2, #0]
 80173e0:	b291      	uxth	r1, r2
 80173e2:	2201      	movs	r2, #1
 80173e4:	4618      	mov	r0, r3
 80173e6:	f003 ffff 	bl	801b3e8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80173ea:	4b28      	ldr	r3, [pc, #160]	; (801748c <SPI_WriteInFlash+0x20c>)
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	4a29      	ldr	r2, [pc, #164]	; (8017494 <SPI_WriteInFlash+0x214>)
 80173f0:	6812      	ldr	r2, [r2, #0]
 80173f2:	b291      	uxth	r1, r2
 80173f4:	2200      	movs	r2, #0
 80173f6:	4618      	mov	r0, r3
 80173f8:	f003 fff6 	bl	801b3e8 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80173fc:	2205      	movs	r2, #5
 80173fe:	4b2e      	ldr	r3, [pc, #184]	; (80174b8 <SPI_WriteInFlash+0x238>)
 8017400:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017402:	2364      	movs	r3, #100	; 0x64
 8017404:	2201      	movs	r2, #1
 8017406:	492c      	ldr	r1, [pc, #176]	; (80174b8 <SPI_WriteInFlash+0x238>)
 8017408:	4827      	ldr	r0, [pc, #156]	; (80174a8 <SPI_WriteInFlash+0x228>)
 801740a:	f006 f88f 	bl	801d52c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801740e:	2364      	movs	r3, #100	; 0x64
 8017410:	2201      	movs	r2, #1
 8017412:	4927      	ldr	r1, [pc, #156]	; (80174b0 <SPI_WriteInFlash+0x230>)
 8017414:	4824      	ldr	r0, [pc, #144]	; (80174a8 <SPI_WriteInFlash+0x228>)
 8017416:	f006 f9f7 	bl	801d808 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801741a:	4b1c      	ldr	r3, [pc, #112]	; (801748c <SPI_WriteInFlash+0x20c>)
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	4a1d      	ldr	r2, [pc, #116]	; (8017494 <SPI_WriteInFlash+0x214>)
 8017420:	6812      	ldr	r2, [r2, #0]
 8017422:	b291      	uxth	r1, r2
 8017424:	2201      	movs	r2, #1
 8017426:	4618      	mov	r0, r3
 8017428:	f003 ffde 	bl	801b3e8 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 801742c:	4b20      	ldr	r3, [pc, #128]	; (80174b0 <SPI_WriteInFlash+0x230>)
 801742e:	781b      	ldrb	r3, [r3, #0]
 8017430:	f003 0301 	and.w	r3, r3, #1
 8017434:	2b00      	cmp	r3, #0
 8017436:	d1d8      	bne.n	80173ea <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8017438:	2301      	movs	r3, #1
 801743a:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 801743c:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801743e:	4b13      	ldr	r3, [pc, #76]	; (801748c <SPI_WriteInFlash+0x20c>)
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	4a14      	ldr	r2, [pc, #80]	; (8017494 <SPI_WriteInFlash+0x214>)
 8017444:	6812      	ldr	r2, [r2, #0]
 8017446:	b291      	uxth	r1, r2
 8017448:	2200      	movs	r2, #0
 801744a:	4618      	mov	r0, r3
 801744c:	f003 ffcc 	bl	801b3e8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8017450:	2204      	movs	r2, #4
 8017452:	4b19      	ldr	r3, [pc, #100]	; (80174b8 <SPI_WriteInFlash+0x238>)
 8017454:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017456:	2364      	movs	r3, #100	; 0x64
 8017458:	2201      	movs	r2, #1
 801745a:	4917      	ldr	r1, [pc, #92]	; (80174b8 <SPI_WriteInFlash+0x238>)
 801745c:	4812      	ldr	r0, [pc, #72]	; (80174a8 <SPI_WriteInFlash+0x228>)
 801745e:	f006 f865 	bl	801d52c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017462:	2364      	movs	r3, #100	; 0x64
 8017464:	2201      	movs	r2, #1
 8017466:	4912      	ldr	r1, [pc, #72]	; (80174b0 <SPI_WriteInFlash+0x230>)
 8017468:	480f      	ldr	r0, [pc, #60]	; (80174a8 <SPI_WriteInFlash+0x228>)
 801746a:	f006 f9cd 	bl	801d808 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801746e:	4b07      	ldr	r3, [pc, #28]	; (801748c <SPI_WriteInFlash+0x20c>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	4a08      	ldr	r2, [pc, #32]	; (8017494 <SPI_WriteInFlash+0x214>)
 8017474:	6812      	ldr	r2, [r2, #0]
 8017476:	b291      	uxth	r1, r2
 8017478:	2201      	movs	r2, #1
 801747a:	4618      	mov	r0, r3
 801747c:	f003 ffb4 	bl	801b3e8 <HAL_GPIO_WritePin>

	return Return_Value;
 8017480:	7dfb      	ldrb	r3, [r7, #23]
}
 8017482:	4618      	mov	r0, r3
 8017484:	3718      	adds	r7, #24
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	2000bbc8 	.word	0x2000bbc8
 8017490:	40021800 	.word	0x40021800
 8017494:	2000bbcc 	.word	0x2000bbcc
 8017498:	40020c00 	.word	0x40020c00
 801749c:	40021000 	.word	0x40021000
 80174a0:	0802af00 	.word	0x0802af00
 80174a4:	0802cec8 	.word	0x0802cec8
 80174a8:	2000bbd4 	.word	0x2000bbd4
 80174ac:	0802cec9 	.word	0x0802cec9
 80174b0:	2000bbc4 	.word	0x2000bbc4
 80174b4:	0802af18 	.word	0x0802af18
 80174b8:	2000bbc0 	.word	0x2000bbc0

080174bc <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	4603      	mov	r3, r0
 80174c4:	6039      	str	r1, [r7, #0]
 80174c6:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 80174c8:	2300      	movs	r3, #0
 80174ca:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 80174cc:	79fb      	ldrb	r3, [r7, #7]
 80174ce:	3b01      	subs	r3, #1
 80174d0:	2b03      	cmp	r3, #3
 80174d2:	d829      	bhi.n	8017528 <SPI_MemoryEraseBySector+0x6c>
 80174d4:	a201      	add	r2, pc, #4	; (adr r2, 80174dc <SPI_MemoryEraseBySector+0x20>)
 80174d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80174da:	bf00      	nop
 80174dc:	080174ed 	.word	0x080174ed
 80174e0:	080174fd 	.word	0x080174fd
 80174e4:	0801750b 	.word	0x0801750b
 80174e8:	08017519 	.word	0x08017519
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80174ec:	4b6d      	ldr	r3, [pc, #436]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 80174ee:	4a6e      	ldr	r2, [pc, #440]	; (80176a8 <SPI_MemoryEraseBySector+0x1ec>)
 80174f0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80174f2:	4b6e      	ldr	r3, [pc, #440]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 80174f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80174f8:	601a      	str	r2, [r3, #0]
		break;
 80174fa:	e018      	b.n	801752e <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80174fc:	4b69      	ldr	r3, [pc, #420]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 80174fe:	4a6c      	ldr	r2, [pc, #432]	; (80176b0 <SPI_MemoryEraseBySector+0x1f4>)
 8017500:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017502:	4b6a      	ldr	r3, [pc, #424]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017504:	2220      	movs	r2, #32
 8017506:	601a      	str	r2, [r3, #0]
		break;
 8017508:	e011      	b.n	801752e <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 801750a:	4b66      	ldr	r3, [pc, #408]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 801750c:	4a68      	ldr	r2, [pc, #416]	; (80176b0 <SPI_MemoryEraseBySector+0x1f4>)
 801750e:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017510:	4b66      	ldr	r3, [pc, #408]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017512:	2240      	movs	r2, #64	; 0x40
 8017514:	601a      	str	r2, [r3, #0]
		break;
 8017516:	e00a      	b.n	801752e <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017518:	4b62      	ldr	r3, [pc, #392]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 801751a:	4a66      	ldr	r2, [pc, #408]	; (80176b4 <SPI_MemoryEraseBySector+0x1f8>)
 801751c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801751e:	4b63      	ldr	r3, [pc, #396]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017520:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017524:	601a      	str	r2, [r3, #0]
		break;
 8017526:	e002      	b.n	801752e <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8017528:	4863      	ldr	r0, [pc, #396]	; (80176b8 <SPI_MemoryEraseBySector+0x1fc>)
 801752a:	f00e fb33 	bl	8025b94 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801752e:	4b5d      	ldr	r3, [pc, #372]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017530:	681b      	ldr	r3, [r3, #0]
 8017532:	4a5e      	ldr	r2, [pc, #376]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017534:	6812      	ldr	r2, [r2, #0]
 8017536:	b291      	uxth	r1, r2
 8017538:	2200      	movs	r2, #0
 801753a:	4618      	mov	r0, r3
 801753c:	f003 ff54 	bl	801b3e8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8017540:	2364      	movs	r3, #100	; 0x64
 8017542:	2201      	movs	r2, #1
 8017544:	495d      	ldr	r1, [pc, #372]	; (80176bc <SPI_MemoryEraseBySector+0x200>)
 8017546:	485e      	ldr	r0, [pc, #376]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017548:	f005 fff0 	bl	801d52c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801754c:	4b55      	ldr	r3, [pc, #340]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	4a56      	ldr	r2, [pc, #344]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017552:	6812      	ldr	r2, [r2, #0]
 8017554:	b291      	uxth	r1, r2
 8017556:	2201      	movs	r2, #1
 8017558:	4618      	mov	r0, r3
 801755a:	f003 ff45 	bl	801b3e8 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801755e:	4b51      	ldr	r3, [pc, #324]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017560:	681b      	ldr	r3, [r3, #0]
 8017562:	4a52      	ldr	r2, [pc, #328]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017564:	6812      	ldr	r2, [r2, #0]
 8017566:	b291      	uxth	r1, r2
 8017568:	2200      	movs	r2, #0
 801756a:	4618      	mov	r0, r3
 801756c:	f003 ff3c 	bl	801b3e8 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8017570:	2364      	movs	r3, #100	; 0x64
 8017572:	2201      	movs	r2, #1
 8017574:	4953      	ldr	r1, [pc, #332]	; (80176c4 <SPI_MemoryEraseBySector+0x208>)
 8017576:	4852      	ldr	r0, [pc, #328]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017578:	f005 ffd8 	bl	801d52c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801757c:	2364      	movs	r3, #100	; 0x64
 801757e:	2201      	movs	r2, #1
 8017580:	4951      	ldr	r1, [pc, #324]	; (80176c8 <SPI_MemoryEraseBySector+0x20c>)
 8017582:	484f      	ldr	r0, [pc, #316]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017584:	f006 f940 	bl	801d808 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017588:	4b46      	ldr	r3, [pc, #280]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	4a47      	ldr	r2, [pc, #284]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 801758e:	6812      	ldr	r2, [r2, #0]
 8017590:	b291      	uxth	r1, r2
 8017592:	2201      	movs	r2, #1
 8017594:	4618      	mov	r0, r3
 8017596:	f003 ff27 	bl	801b3e8 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 801759a:	4b4b      	ldr	r3, [pc, #300]	; (80176c8 <SPI_MemoryEraseBySector+0x20c>)
 801759c:	781b      	ldrb	r3, [r3, #0]
 801759e:	f003 0302 	and.w	r3, r3, #2
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d103      	bne.n	80175ae <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 80175a6:	4849      	ldr	r0, [pc, #292]	; (80176cc <SPI_MemoryEraseBySector+0x210>)
 80175a8:	f00e fa58 	bl	8025a5c <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80175ac:	e7d7      	b.n	801755e <SPI_MemoryEraseBySector+0xa2>
			break;
 80175ae:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80175b0:	4b3c      	ldr	r3, [pc, #240]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	4a3d      	ldr	r2, [pc, #244]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 80175b6:	6812      	ldr	r2, [r2, #0]
 80175b8:	b291      	uxth	r1, r2
 80175ba:	2200      	movs	r2, #0
 80175bc:	4618      	mov	r0, r3
 80175be:	f003 ff13 	bl	801b3e8 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 80175c2:	4b43      	ldr	r3, [pc, #268]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 80175c4:	2220      	movs	r2, #32
 80175c6:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	0c1b      	lsrs	r3, r3, #16
 80175cc:	b2da      	uxtb	r2, r3
 80175ce:	4b40      	ldr	r3, [pc, #256]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 80175d0:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80175d2:	683b      	ldr	r3, [r7, #0]
 80175d4:	0a1b      	lsrs	r3, r3, #8
 80175d6:	b2da      	uxtb	r2, r3
 80175d8:	4b3d      	ldr	r3, [pc, #244]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 80175da:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	b2da      	uxtb	r2, r3
 80175e0:	4b3b      	ldr	r3, [pc, #236]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 80175e2:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80175e4:	2364      	movs	r3, #100	; 0x64
 80175e6:	2204      	movs	r2, #4
 80175e8:	4939      	ldr	r1, [pc, #228]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 80175ea:	4835      	ldr	r0, [pc, #212]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 80175ec:	f005 ff9e 	bl	801d52c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80175f0:	4b2c      	ldr	r3, [pc, #176]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 80175f2:	681b      	ldr	r3, [r3, #0]
 80175f4:	4a2d      	ldr	r2, [pc, #180]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 80175f6:	6812      	ldr	r2, [r2, #0]
 80175f8:	b291      	uxth	r1, r2
 80175fa:	2201      	movs	r2, #1
 80175fc:	4618      	mov	r0, r3
 80175fe:	f003 fef3 	bl	801b3e8 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017602:	4b28      	ldr	r3, [pc, #160]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	4a29      	ldr	r2, [pc, #164]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017608:	6812      	ldr	r2, [r2, #0]
 801760a:	b291      	uxth	r1, r2
 801760c:	2200      	movs	r2, #0
 801760e:	4618      	mov	r0, r3
 8017610:	f003 feea 	bl	801b3e8 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8017614:	2205      	movs	r2, #5
 8017616:	4b2e      	ldr	r3, [pc, #184]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 8017618:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801761a:	2364      	movs	r3, #100	; 0x64
 801761c:	2201      	movs	r2, #1
 801761e:	492c      	ldr	r1, [pc, #176]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 8017620:	4827      	ldr	r0, [pc, #156]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017622:	f005 ff83 	bl	801d52c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017626:	2364      	movs	r3, #100	; 0x64
 8017628:	2201      	movs	r2, #1
 801762a:	4927      	ldr	r1, [pc, #156]	; (80176c8 <SPI_MemoryEraseBySector+0x20c>)
 801762c:	4824      	ldr	r0, [pc, #144]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 801762e:	f006 f8eb 	bl	801d808 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017632:	4b1c      	ldr	r3, [pc, #112]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	4a1d      	ldr	r2, [pc, #116]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 8017638:	6812      	ldr	r2, [r2, #0]
 801763a:	b291      	uxth	r1, r2
 801763c:	2201      	movs	r2, #1
 801763e:	4618      	mov	r0, r3
 8017640:	f003 fed2 	bl	801b3e8 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8017644:	4b20      	ldr	r3, [pc, #128]	; (80176c8 <SPI_MemoryEraseBySector+0x20c>)
 8017646:	781b      	ldrb	r3, [r3, #0]
 8017648:	f003 0301 	and.w	r3, r3, #1
 801764c:	2b00      	cmp	r3, #0
 801764e:	d1d8      	bne.n	8017602 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8017650:	2301      	movs	r3, #1
 8017652:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8017654:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017656:	4b13      	ldr	r3, [pc, #76]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	4a14      	ldr	r2, [pc, #80]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 801765c:	6812      	ldr	r2, [r2, #0]
 801765e:	b291      	uxth	r1, r2
 8017660:	2200      	movs	r2, #0
 8017662:	4618      	mov	r0, r3
 8017664:	f003 fec0 	bl	801b3e8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8017668:	2204      	movs	r2, #4
 801766a:	4b19      	ldr	r3, [pc, #100]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 801766c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801766e:	2364      	movs	r3, #100	; 0x64
 8017670:	2201      	movs	r2, #1
 8017672:	4917      	ldr	r1, [pc, #92]	; (80176d0 <SPI_MemoryEraseBySector+0x214>)
 8017674:	4812      	ldr	r0, [pc, #72]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017676:	f005 ff59 	bl	801d52c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801767a:	2364      	movs	r3, #100	; 0x64
 801767c:	2201      	movs	r2, #1
 801767e:	4912      	ldr	r1, [pc, #72]	; (80176c8 <SPI_MemoryEraseBySector+0x20c>)
 8017680:	480f      	ldr	r0, [pc, #60]	; (80176c0 <SPI_MemoryEraseBySector+0x204>)
 8017682:	f006 f8c1 	bl	801d808 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017686:	4b07      	ldr	r3, [pc, #28]	; (80176a4 <SPI_MemoryEraseBySector+0x1e8>)
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	4a08      	ldr	r2, [pc, #32]	; (80176ac <SPI_MemoryEraseBySector+0x1f0>)
 801768c:	6812      	ldr	r2, [r2, #0]
 801768e:	b291      	uxth	r1, r2
 8017690:	2201      	movs	r2, #1
 8017692:	4618      	mov	r0, r3
 8017694:	f003 fea8 	bl	801b3e8 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8017698:	68fb      	ldr	r3, [r7, #12]

}
 801769a:	4618      	mov	r0, r3
 801769c:	3710      	adds	r7, #16
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	2000bbc8 	.word	0x2000bbc8
 80176a8:	40021800 	.word	0x40021800
 80176ac:	2000bbcc 	.word	0x2000bbcc
 80176b0:	40020c00 	.word	0x40020c00
 80176b4:	40021000 	.word	0x40021000
 80176b8:	0802af00 	.word	0x0802af00
 80176bc:	0802cec8 	.word	0x0802cec8
 80176c0:	2000bbd4 	.word	0x2000bbd4
 80176c4:	0802cec9 	.word	0x0802cec9
 80176c8:	2000bbc4 	.word	0x2000bbc4
 80176cc:	0802af3c 	.word	0x0802af3c
 80176d0:	2000bbc0 	.word	0x2000bbc0

080176d4 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80176d4:	b580      	push	{r7, lr}
 80176d6:	b084      	sub	sp, #16
 80176d8:	af00      	add	r7, sp, #0
 80176da:	60b9      	str	r1, [r7, #8]
 80176dc:	607b      	str	r3, [r7, #4]
 80176de:	4603      	mov	r3, r0
 80176e0:	73fb      	strb	r3, [r7, #15]
 80176e2:	4613      	mov	r3, r2
 80176e4:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 80176e6:	7bfb      	ldrb	r3, [r7, #15]
 80176e8:	3b01      	subs	r3, #1
 80176ea:	2b03      	cmp	r3, #3
 80176ec:	d828      	bhi.n	8017740 <SPI_ReadFromFlash+0x6c>
 80176ee:	a201      	add	r2, pc, #4	; (adr r2, 80176f4 <SPI_ReadFromFlash+0x20>)
 80176f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176f4:	08017705 	.word	0x08017705
 80176f8:	08017715 	.word	0x08017715
 80176fc:	08017723 	.word	0x08017723
 8017700:	08017731 	.word	0x08017731
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8017704:	4b2d      	ldr	r3, [pc, #180]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 8017706:	4a2e      	ldr	r2, [pc, #184]	; (80177c0 <SPI_ReadFromFlash+0xec>)
 8017708:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801770a:	4b2e      	ldr	r3, [pc, #184]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 801770c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017710:	601a      	str	r2, [r3, #0]
		break;
 8017712:	e018      	b.n	8017746 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8017714:	4b29      	ldr	r3, [pc, #164]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 8017716:	4a2c      	ldr	r2, [pc, #176]	; (80177c8 <SPI_ReadFromFlash+0xf4>)
 8017718:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801771a:	4b2a      	ldr	r3, [pc, #168]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 801771c:	2220      	movs	r2, #32
 801771e:	601a      	str	r2, [r3, #0]
		break;
 8017720:	e011      	b.n	8017746 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8017722:	4b26      	ldr	r3, [pc, #152]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 8017724:	4a28      	ldr	r2, [pc, #160]	; (80177c8 <SPI_ReadFromFlash+0xf4>)
 8017726:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017728:	4b26      	ldr	r3, [pc, #152]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 801772a:	2240      	movs	r2, #64	; 0x40
 801772c:	601a      	str	r2, [r3, #0]
		break;
 801772e:	e00a      	b.n	8017746 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017730:	4b22      	ldr	r3, [pc, #136]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 8017732:	4a26      	ldr	r2, [pc, #152]	; (80177cc <SPI_ReadFromFlash+0xf8>)
 8017734:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017736:	4b23      	ldr	r3, [pc, #140]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 8017738:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801773c:	601a      	str	r2, [r3, #0]
		break;
 801773e:	e002      	b.n	8017746 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8017740:	4823      	ldr	r0, [pc, #140]	; (80177d0 <SPI_ReadFromFlash+0xfc>)
 8017742:	f00e fa27 	bl	8025b94 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8017746:	89bb      	ldrh	r3, [r7, #12]
 8017748:	461a      	mov	r2, r3
 801774a:	2100      	movs	r1, #0
 801774c:	6878      	ldr	r0, [r7, #4]
 801774e:	f00e f89d 	bl	802588c <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017752:	4b1a      	ldr	r3, [pc, #104]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	4a1b      	ldr	r2, [pc, #108]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 8017758:	6812      	ldr	r2, [r2, #0]
 801775a:	b291      	uxth	r1, r2
 801775c:	2200      	movs	r2, #0
 801775e:	4618      	mov	r0, r3
 8017760:	f003 fe42 	bl	801b3e8 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8017764:	2203      	movs	r2, #3
 8017766:	4b1b      	ldr	r3, [pc, #108]	; (80177d4 <SPI_ReadFromFlash+0x100>)
 8017768:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 801776a:	68bb      	ldr	r3, [r7, #8]
 801776c:	0c1b      	lsrs	r3, r3, #16
 801776e:	b2da      	uxtb	r2, r3
 8017770:	4b18      	ldr	r3, [pc, #96]	; (80177d4 <SPI_ReadFromFlash+0x100>)
 8017772:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017774:	68bb      	ldr	r3, [r7, #8]
 8017776:	0a1b      	lsrs	r3, r3, #8
 8017778:	b2da      	uxtb	r2, r3
 801777a:	4b16      	ldr	r3, [pc, #88]	; (80177d4 <SPI_ReadFromFlash+0x100>)
 801777c:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801777e:	68bb      	ldr	r3, [r7, #8]
 8017780:	b2da      	uxtb	r2, r3
 8017782:	4b14      	ldr	r3, [pc, #80]	; (80177d4 <SPI_ReadFromFlash+0x100>)
 8017784:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017786:	2364      	movs	r3, #100	; 0x64
 8017788:	2204      	movs	r2, #4
 801778a:	4912      	ldr	r1, [pc, #72]	; (80177d4 <SPI_ReadFromFlash+0x100>)
 801778c:	4812      	ldr	r0, [pc, #72]	; (80177d8 <SPI_ReadFromFlash+0x104>)
 801778e:	f005 fecd 	bl	801d52c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8017792:	89ba      	ldrh	r2, [r7, #12]
 8017794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017798:	6879      	ldr	r1, [r7, #4]
 801779a:	480f      	ldr	r0, [pc, #60]	; (80177d8 <SPI_ReadFromFlash+0x104>)
 801779c:	f006 f834 	bl	801d808 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80177a0:	4b06      	ldr	r3, [pc, #24]	; (80177bc <SPI_ReadFromFlash+0xe8>)
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	4a07      	ldr	r2, [pc, #28]	; (80177c4 <SPI_ReadFromFlash+0xf0>)
 80177a6:	6812      	ldr	r2, [r2, #0]
 80177a8:	b291      	uxth	r1, r2
 80177aa:	2201      	movs	r2, #1
 80177ac:	4618      	mov	r0, r3
 80177ae:	f003 fe1b 	bl	801b3e8 <HAL_GPIO_WritePin>

}
 80177b2:	bf00      	nop
 80177b4:	3710      	adds	r7, #16
 80177b6:	46bd      	mov	sp, r7
 80177b8:	bd80      	pop	{r7, pc}
 80177ba:	bf00      	nop
 80177bc:	2000bbc8 	.word	0x2000bbc8
 80177c0:	40021800 	.word	0x40021800
 80177c4:	2000bbcc 	.word	0x2000bbcc
 80177c8:	40020c00 	.word	0x40020c00
 80177cc:	40021000 	.word	0x40021000
 80177d0:	0802af00 	.word	0x0802af00
 80177d4:	2000bbc0 	.word	0x2000bbc0
 80177d8:	2000bbd4 	.word	0x2000bbd4

080177dc <Get_Config>:




void Get_Config(void)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b084      	sub	sp, #16
 80177e0:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80177e2:	2300      	movs	r3, #0
 80177e4:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 80177e6:	f240 335e 	movw	r3, #862	; 0x35e
 80177ea:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80177f0:	2300      	movs	r3, #0
 80177f2:	60fb      	str	r3, [r7, #12]
 80177f4:	e01d      	b.n	8017832 <Get_Config+0x56>
	{
		HAL_Delay(20);
 80177f6:	2014      	movs	r0, #20
 80177f8:	f001 fa26 	bl	8018c48 <HAL_Delay>
		if(SIZE_VAR <32)
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	2b1f      	cmp	r3, #31
 8017800:	d809      	bhi.n	8017816 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8017802:	68bb      	ldr	r3, [r7, #8]
 8017804:	b29a      	uxth	r2, r3
 8017806:	68fb      	ldr	r3, [r7, #12]
 8017808:	4938      	ldr	r1, [pc, #224]	; (80178ec <Get_Config+0x110>)
 801780a:	440b      	add	r3, r1
 801780c:	68f9      	ldr	r1, [r7, #12]
 801780e:	2001      	movs	r0, #1
 8017810:	f7ff ff60 	bl	80176d4 <SPI_ReadFromFlash>
 8017814:	e00a      	b.n	801782c <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	4a34      	ldr	r2, [pc, #208]	; (80178ec <Get_Config+0x110>)
 801781a:	4413      	add	r3, r2
 801781c:	2220      	movs	r2, #32
 801781e:	68f9      	ldr	r1, [r7, #12]
 8017820:	2001      	movs	r0, #1
 8017822:	f7ff ff57 	bl	80176d4 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	3b20      	subs	r3, #32
 801782a:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	3320      	adds	r3, #32
 8017830:	60fb      	str	r3, [r7, #12]
 8017832:	68fa      	ldr	r2, [r7, #12]
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	429a      	cmp	r2, r3
 8017838:	d3dd      	bcc.n	80177f6 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 801783a:	f44f 7157 	mov.w	r1, #860	; 0x35c
 801783e:	482b      	ldr	r0, [pc, #172]	; (80178ec <Get_Config+0x110>)
 8017840:	f7fd fbba 	bl	8014fb8 <CheckCRC>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d02a      	beq.n	80178a0 <Get_Config+0xc4>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 801784a:	f44f 7256 	mov.w	r2, #856	; 0x358
 801784e:	4928      	ldr	r1, [pc, #160]	; (80178f0 <Get_Config+0x114>)
 8017850:	4828      	ldr	r0, [pc, #160]	; (80178f4 <Get_Config+0x118>)
 8017852:	f00d fff3 	bl	802583c <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8017856:	4a28      	ldr	r2, [pc, #160]	; (80178f8 <Get_Config+0x11c>)
 8017858:	2110      	movs	r1, #16
 801785a:	2000      	movs	r0, #0
 801785c:	f7e8 feda 	bl	8000614 <ExtractBits>
 8017860:	4603      	mov	r3, r0
 8017862:	b29a      	uxth	r2, r3
 8017864:	4b25      	ldr	r3, [pc, #148]	; (80178fc <Get_Config+0x120>)
 8017866:	801a      	strh	r2, [r3, #0]
		DatCrcXchangeSelf_st.App_CRC = EI_Dat_CRC;
 8017868:	4b24      	ldr	r3, [pc, #144]	; (80178fc <Get_Config+0x120>)
 801786a:	881a      	ldrh	r2, [r3, #0]
 801786c:	4b24      	ldr	r3, [pc, #144]	; (8017900 <Get_Config+0x124>)
 801786e:	801a      	strh	r2, [r3, #0]

		printf("\n___________________BUILD DETAILS___________________\n");
 8017870:	4824      	ldr	r0, [pc, #144]	; (8017904 <Get_Config+0x128>)
 8017872:	f00e f98f 	bl	8025b94 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8017876:	4924      	ldr	r1, [pc, #144]	; (8017908 <Get_Config+0x12c>)
 8017878:	4824      	ldr	r0, [pc, #144]	; (801790c <Get_Config+0x130>)
 801787a:	f00e f8ef 	bl	8025a5c <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 801787e:	4b1f      	ldr	r3, [pc, #124]	; (80178fc <Get_Config+0x120>)
 8017880:	881b      	ldrh	r3, [r3, #0]
 8017882:	4619      	mov	r1, r3
 8017884:	4822      	ldr	r0, [pc, #136]	; (8017910 <Get_Config+0x134>)
 8017886:	f00e f8e9 	bl	8025a5c <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 801788a:	4b22      	ldr	r3, [pc, #136]	; (8017914 <Get_Config+0x138>)
 801788c:	881b      	ldrh	r3, [r3, #0]
 801788e:	4619      	mov	r1, r3
 8017890:	4821      	ldr	r0, [pc, #132]	; (8017918 <Get_Config+0x13c>)
 8017892:	f00e f8e3 	bl	8025a5c <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8017896:	4b21      	ldr	r3, [pc, #132]	; (801791c <Get_Config+0x140>)
 8017898:	781b      	ldrb	r3, [r3, #0]
 801789a:	2b00      	cmp	r3, #0
 801789c:	d121      	bne.n	80178e2 <Get_Config+0x106>
 801789e:	e01e      	b.n	80178de <Get_Config+0x102>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 80178a0:	f44f 7156 	mov.w	r1, #856	; 0x358
 80178a4:	481e      	ldr	r0, [pc, #120]	; (8017920 <Get_Config+0x144>)
 80178a6:	f00e f8d9 	bl	8025a5c <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80178aa:	4b1e      	ldr	r3, [pc, #120]	; (8017924 <Get_Config+0x148>)
 80178ac:	4a10      	ldr	r2, [pc, #64]	; (80178f0 <Get_Config+0x114>)
 80178ae:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 80178b0:	4b0e      	ldr	r3, [pc, #56]	; (80178ec <Get_Config+0x110>)
 80178b2:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 80178b6:	4619      	mov	r1, r3
 80178b8:	4b0c      	ldr	r3, [pc, #48]	; (80178ec <Get_Config+0x110>)
 80178ba:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 80178be:	461a      	mov	r2, r3
 80178c0:	4819      	ldr	r0, [pc, #100]	; (8017928 <Get_Config+0x14c>)
 80178c2:	f00e f8cb 	bl	8025a5c <iprintf>
		printf("\nCheck for CRC:");
 80178c6:	4819      	ldr	r0, [pc, #100]	; (801792c <Get_Config+0x150>)
 80178c8:	f00e f8c8 	bl	8025a5c <iprintf>
		gucFlagUpdate =3;
 80178cc:	4b18      	ldr	r3, [pc, #96]	; (8017930 <Get_Config+0x154>)
 80178ce:	2203      	movs	r2, #3
 80178d0:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 80178d2:	4818      	ldr	r0, [pc, #96]	; (8017934 <Get_Config+0x158>)
 80178d4:	f00e f95e 	bl	8025b94 <puts>
			Data_Processing();
 80178d8:	f000 f82e 	bl	8017938 <Data_Processing>
 80178dc:	e7fc      	b.n	80178d8 <Get_Config+0xfc>
	{
		readCanToStructs();
 80178de:	f7f9 fa75 	bl	8010dcc <readCanToStructs>
	}
}
 80178e2:	bf00      	nop
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
 80178ea:	bf00      	nop
 80178ec:	20000bbc 	.word	0x20000bbc
 80178f0:	20000bc0 	.word	0x20000bc0
 80178f4:	20000504 	.word	0x20000504
 80178f8:	20000f18 	.word	0x20000f18
 80178fc:	2000bbd2 	.word	0x2000bbd2
 8017900:	20000bb4 	.word	0x20000bb4
 8017904:	0802af6c 	.word	0x0802af6c
 8017908:	20000505 	.word	0x20000505
 801790c:	0802afa4 	.word	0x0802afa4
 8017910:	0802afb8 	.word	0x0802afb8
 8017914:	2000bbd0 	.word	0x2000bbd0
 8017918:	0802afc8 	.word	0x0802afc8
 801791c:	20000fbf 	.word	0x20000fbf
 8017920:	0802afdc 	.word	0x0802afdc
 8017924:	20000500 	.word	0x20000500
 8017928:	0802b004 	.word	0x0802b004
 801792c:	0802b018 	.word	0x0802b018
 8017930:	20000fbd 	.word	0x20000fbd
 8017934:	0802b028 	.word	0x0802b028

08017938 <Data_Processing>:


void Data_Processing(void)
{
 8017938:	b580      	push	{r7, lr}
 801793a:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 801793c:	4b0b      	ldr	r3, [pc, #44]	; (801796c <Data_Processing+0x34>)
 801793e:	781b      	ldrb	r3, [r3, #0]
 8017940:	2b03      	cmp	r3, #3
 8017942:	d10e      	bne.n	8017962 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8017944:	2000      	movs	r0, #0
 8017946:	f7f4 fb67 	bl	800c018 <CheckForRqst>
 801794a:	4603      	mov	r3, r0
 801794c:	461a      	mov	r2, r3
 801794e:	4b08      	ldr	r3, [pc, #32]	; (8017970 <Data_Processing+0x38>)
 8017950:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8017952:	4b07      	ldr	r3, [pc, #28]	; (8017970 <Data_Processing+0x38>)
 8017954:	781b      	ldrb	r3, [r3, #0]
 8017956:	2b01      	cmp	r3, #1
 8017958:	d105      	bne.n	8017966 <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 801795a:	2000      	movs	r0, #0
 801795c:	f000 f80a 	bl	8017974 <AutoLoadDat>
		}
		break;
 8017960:	e001      	b.n	8017966 <Data_Processing+0x2e>
	default:
		break;
 8017962:	bf00      	nop
 8017964:	e000      	b.n	8017968 <Data_Processing+0x30>
		break;
 8017966:	bf00      	nop
	}
}
 8017968:	bf00      	nop
 801796a:	bd80      	pop	{r7, pc}
 801796c:	20000fbd 	.word	0x20000fbd
 8017970:	20000fbe 	.word	0x20000fbe

08017974 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	b084      	sub	sp, #16
 8017978:	af00      	add	r7, sp, #0
 801797a:	4603      	mov	r3, r0
 801797c:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 801797e:	2300      	movs	r3, #0
 8017980:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8017982:	79fb      	ldrb	r3, [r7, #7]
 8017984:	b29b      	uxth	r3, r3
 8017986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801798a:	4934      	ldr	r1, [pc, #208]	; (8017a5c <AutoLoadDat+0xe8>)
 801798c:	4618      	mov	r0, r3
 801798e:	f7f4 fceb 	bl	800c368 <ReadAndFormConfig>
 8017992:	4603      	mov	r3, r0
 8017994:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8017996:	4832      	ldr	r0, [pc, #200]	; (8017a60 <AutoLoadDat+0xec>)
 8017998:	f004 fbbc 	bl	801c114 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 801799c:	7bbb      	ldrb	r3, [r7, #14]
 801799e:	2b01      	cmp	r3, #1
 80179a0:	d921      	bls.n	80179e6 <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 80179a2:	4b30      	ldr	r3, [pc, #192]	; (8017a64 <AutoLoadDat+0xf0>)
 80179a4:	2200      	movs	r2, #0
 80179a6:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 80179a8:	4b2c      	ldr	r3, [pc, #176]	; (8017a5c <AutoLoadDat+0xe8>)
 80179aa:	785b      	ldrb	r3, [r3, #1]
 80179ac:	2b00      	cmp	r3, #0
 80179ae:	d107      	bne.n	80179c0 <AutoLoadDat+0x4c>
 80179b0:	4b2a      	ldr	r3, [pc, #168]	; (8017a5c <AutoLoadDat+0xe8>)
 80179b2:	789b      	ldrb	r3, [r3, #2]
 80179b4:	2b01      	cmp	r3, #1
 80179b6:	d103      	bne.n	80179c0 <AutoLoadDat+0x4c>
 80179b8:	4b28      	ldr	r3, [pc, #160]	; (8017a5c <AutoLoadDat+0xe8>)
 80179ba:	78db      	ldrb	r3, [r3, #3]
 80179bc:	2b04      	cmp	r3, #4
 80179be:	d003      	beq.n	80179c8 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 80179c0:	4829      	ldr	r0, [pc, #164]	; (8017a68 <AutoLoadDat+0xf4>)
 80179c2:	f00e f8e7 	bl	8025b94 <puts>
				return;
 80179c6:	e046      	b.n	8017a56 <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80179c8:	4b28      	ldr	r3, [pc, #160]	; (8017a6c <AutoLoadDat+0xf8>)
 80179ca:	4a29      	ldr	r2, [pc, #164]	; (8017a70 <AutoLoadDat+0xfc>)
 80179cc:	601a      	str	r2, [r3, #0]
			saveConfig();
 80179ce:	f000 f85b 	bl	8017a88 <saveConfig>
			gucFlagCheck =1;
 80179d2:	4b28      	ldr	r3, [pc, #160]	; (8017a74 <AutoLoadDat+0x100>)
 80179d4:	2201      	movs	r2, #1
 80179d6:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 80179d8:	4b27      	ldr	r3, [pc, #156]	; (8017a78 <AutoLoadDat+0x104>)
 80179da:	2201      	movs	r2, #1
 80179dc:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 80179de:	4827      	ldr	r0, [pc, #156]	; (8017a7c <AutoLoadDat+0x108>)
 80179e0:	f00e f8d8 	bl	8025b94 <puts>
			break;
 80179e4:	e037      	b.n	8017a56 <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 80179e6:	7bbb      	ldrb	r3, [r7, #14]
 80179e8:	2b01      	cmp	r3, #1
 80179ea:	d11b      	bne.n	8017a24 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 80179ec:	7bfb      	ldrb	r3, [r7, #15]
 80179ee:	2b03      	cmp	r3, #3
 80179f0:	d109      	bne.n	8017a06 <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80179f2:	4b1c      	ldr	r3, [pc, #112]	; (8017a64 <AutoLoadDat+0xf0>)
 80179f4:	2200      	movs	r2, #0
 80179f6:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80179f8:	79fb      	ldrb	r3, [r7, #7]
 80179fa:	2203      	movs	r2, #3
 80179fc:	2101      	movs	r1, #1
 80179fe:	4618      	mov	r0, r3
 8017a00:	f7f4 fc66 	bl	800c2d0 <SendAck>
				break;
 8017a04:	e027      	b.n	8017a56 <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 8017a06:	79fb      	ldrb	r3, [r7, #7]
 8017a08:	2202      	movs	r2, #2
 8017a0a:	2101      	movs	r1, #1
 8017a0c:	4618      	mov	r0, r3
 8017a0e:	f7f4 fc5f 	bl	800c2d0 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8017a12:	f001 f90d 	bl	8018c30 <HAL_GetTick>
 8017a16:	4603      	mov	r3, r0
 8017a18:	4a19      	ldr	r2, [pc, #100]	; (8017a80 <AutoLoadDat+0x10c>)
 8017a1a:	6013      	str	r3, [r2, #0]
			AckCount++;
 8017a1c:	7bfb      	ldrb	r3, [r7, #15]
 8017a1e:	3301      	adds	r3, #1
 8017a20:	73fb      	strb	r3, [r7, #15]
 8017a22:	e7ae      	b.n	8017982 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 8017a24:	f001 f904 	bl	8018c30 <HAL_GetTick>
 8017a28:	4602      	mov	r2, r0
 8017a2a:	4b15      	ldr	r3, [pc, #84]	; (8017a80 <AutoLoadDat+0x10c>)
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	bfb8      	it	lt
 8017a34:	425b      	neglt	r3, r3
 8017a36:	f247 5230 	movw	r2, #30000	; 0x7530
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	dda1      	ble.n	8017982 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8017a3e:	4b09      	ldr	r3, [pc, #36]	; (8017a64 <AutoLoadDat+0xf0>)
 8017a40:	2200      	movs	r2, #0
 8017a42:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8017a44:	480f      	ldr	r0, [pc, #60]	; (8017a84 <AutoLoadDat+0x110>)
 8017a46:	f00e f8a5 	bl	8025b94 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 8017a4a:	79fb      	ldrb	r3, [r7, #7]
 8017a4c:	2205      	movs	r2, #5
 8017a4e:	2101      	movs	r1, #1
 8017a50:	4618      	mov	r0, r3
 8017a52:	f7f4 fc3d 	bl	800c2d0 <SendAck>
				break;
			}
		}
	}
}
 8017a56:	3710      	adds	r7, #16
 8017a58:	46bd      	mov	sp, r7
 8017a5a:	bd80      	pop	{r7, pc}
 8017a5c:	20000bbc 	.word	0x20000bbc
 8017a60:	2000b370 	.word	0x2000b370
 8017a64:	20000fbe 	.word	0x20000fbe
 8017a68:	0802b068 	.word	0x0802b068
 8017a6c:	20000500 	.word	0x20000500
 8017a70:	20000bc0 	.word	0x20000bc0
 8017a74:	2000bbbc 	.word	0x2000bbbc
 8017a78:	2000bbbd 	.word	0x2000bbbd
 8017a7c:	0802b080 	.word	0x0802b080
 8017a80:	20000fc0 	.word	0x20000fc0
 8017a84:	0802b090 	.word	0x0802b090

08017a88 <saveConfig>:

unsigned char saveConfig(void)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b084      	sub	sp, #16
 8017a8c:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8017a8e:	2300      	movs	r3, #0
 8017a90:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8017a92:	4825      	ldr	r0, [pc, #148]	; (8017b28 <saveConfig+0xa0>)
 8017a94:	f00e f87e 	bl	8025b94 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8017a98:	2300      	movs	r3, #0
 8017a9a:	60fb      	str	r3, [r7, #12]
 8017a9c:	e011      	b.n	8017ac2 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8017a9e:	68fb      	ldr	r3, [r7, #12]
 8017aa0:	031b      	lsls	r3, r3, #12
 8017aa2:	4619      	mov	r1, r3
 8017aa4:	2001      	movs	r0, #1
 8017aa6:	f7ff fd09 	bl	80174bc <SPI_MemoryEraseBySector>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d005      	beq.n	8017abc <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8017ab0:	481e      	ldr	r0, [pc, #120]	; (8017b2c <saveConfig+0xa4>)
 8017ab2:	f004 fb2f 	bl	801c114 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 8017ab6:	481e      	ldr	r0, [pc, #120]	; (8017b30 <saveConfig+0xa8>)
 8017ab8:	f00e f86c 	bl	8025b94 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	3301      	adds	r3, #1
 8017ac0:	60fb      	str	r3, [r7, #12]
 8017ac2:	68fb      	ldr	r3, [r7, #12]
 8017ac4:	2b05      	cmp	r3, #5
 8017ac6:	d9ea      	bls.n	8017a9e <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 8017ac8:	f240 335f 	movw	r3, #863	; 0x35f
 8017acc:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	60fb      	str	r3, [r7, #12]
 8017ad6:	e01d      	b.n	8017b14 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 8017ad8:	4814      	ldr	r0, [pc, #80]	; (8017b2c <saveConfig+0xa4>)
 8017ada:	f004 fb1b 	bl	801c114 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	2b1f      	cmp	r3, #31
 8017ae2:	d809      	bhi.n	8017af8 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8017ae4:	68bb      	ldr	r3, [r7, #8]
 8017ae6:	b29a      	uxth	r2, r3
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	4912      	ldr	r1, [pc, #72]	; (8017b34 <saveConfig+0xac>)
 8017aec:	440b      	add	r3, r1
 8017aee:	68f9      	ldr	r1, [r7, #12]
 8017af0:	2001      	movs	r0, #1
 8017af2:	f7ff fbc5 	bl	8017280 <SPI_WriteInFlash>
 8017af6:	e00a      	b.n	8017b0e <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 8017af8:	68fb      	ldr	r3, [r7, #12]
 8017afa:	4a0e      	ldr	r2, [pc, #56]	; (8017b34 <saveConfig+0xac>)
 8017afc:	4413      	add	r3, r2
 8017afe:	2220      	movs	r2, #32
 8017b00:	68f9      	ldr	r1, [r7, #12]
 8017b02:	2001      	movs	r0, #1
 8017b04:	f7ff fbbc 	bl	8017280 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	3b20      	subs	r3, #32
 8017b0c:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8017b0e:	68fb      	ldr	r3, [r7, #12]
 8017b10:	3320      	adds	r3, #32
 8017b12:	60fb      	str	r3, [r7, #12]
 8017b14:	68fa      	ldr	r2, [r7, #12]
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	429a      	cmp	r2, r3
 8017b1a:	d3dd      	bcc.n	8017ad8 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8017b1c:	4806      	ldr	r0, [pc, #24]	; (8017b38 <saveConfig+0xb0>)
 8017b1e:	f00d ff9d 	bl	8025a5c <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8017b22:	f7ff fad9 	bl	80170d8 <__NVIC_SystemReset>
 8017b26:	bf00      	nop
 8017b28:	0802b0ac 	.word	0x0802b0ac
 8017b2c:	2000b370 	.word	0x2000b370
 8017b30:	0802b0b8 	.word	0x0802b0b8
 8017b34:	20000bbc 	.word	0x20000bbc
 8017b38:	0802b0cc 	.word	0x0802b0cc

08017b3c <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8017b40:	4b14      	ldr	r3, [pc, #80]	; (8017b94 <Print_BuildDat_Details+0x58>)
 8017b42:	781b      	ldrb	r3, [r3, #0]
 8017b44:	2b00      	cmp	r3, #0
 8017b46:	d022      	beq.n	8017b8e <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8017b48:	4b13      	ldr	r3, [pc, #76]	; (8017b98 <Print_BuildDat_Details+0x5c>)
 8017b4a:	681b      	ldr	r3, [r3, #0]
 8017b4c:	4618      	mov	r0, r3
 8017b4e:	f7f8 fa37 	bl	800ffc0 <HAL_Elaps_Ticks>
 8017b52:	4603      	mov	r3, r0
 8017b54:	f242 720f 	movw	r2, #9999	; 0x270f
 8017b58:	4293      	cmp	r3, r2
 8017b5a:	d919      	bls.n	8017b90 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 8017b5c:	480f      	ldr	r0, [pc, #60]	; (8017b9c <Print_BuildDat_Details+0x60>)
 8017b5e:	f00e f819 	bl	8025b94 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8017b62:	490f      	ldr	r1, [pc, #60]	; (8017ba0 <Print_BuildDat_Details+0x64>)
 8017b64:	480f      	ldr	r0, [pc, #60]	; (8017ba4 <Print_BuildDat_Details+0x68>)
 8017b66:	f00d ff79 	bl	8025a5c <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8017b6a:	4b0f      	ldr	r3, [pc, #60]	; (8017ba8 <Print_BuildDat_Details+0x6c>)
 8017b6c:	881b      	ldrh	r3, [r3, #0]
 8017b6e:	4619      	mov	r1, r3
 8017b70:	480e      	ldr	r0, [pc, #56]	; (8017bac <Print_BuildDat_Details+0x70>)
 8017b72:	f00d ff73 	bl	8025a5c <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8017b76:	4b0e      	ldr	r3, [pc, #56]	; (8017bb0 <Print_BuildDat_Details+0x74>)
 8017b78:	881b      	ldrh	r3, [r3, #0]
 8017b7a:	4619      	mov	r1, r3
 8017b7c:	480d      	ldr	r0, [pc, #52]	; (8017bb4 <Print_BuildDat_Details+0x78>)
 8017b7e:	f00d ff6d 	bl	8025a5c <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8017b82:	f001 f855 	bl	8018c30 <HAL_GetTick>
 8017b86:	4603      	mov	r3, r0
 8017b88:	4a03      	ldr	r2, [pc, #12]	; (8017b98 <Print_BuildDat_Details+0x5c>)
 8017b8a:	6013      	str	r3, [r2, #0]
 8017b8c:	e000      	b.n	8017b90 <Print_BuildDat_Details+0x54>
		return;
 8017b8e:	bf00      	nop
	}
}
 8017b90:	bd80      	pop	{r7, pc}
 8017b92:	bf00      	nop
 8017b94:	20000bbb 	.word	0x20000bbb
 8017b98:	2000bc38 	.word	0x2000bc38
 8017b9c:	0802b0e8 	.word	0x0802b0e8
 8017ba0:	20000505 	.word	0x20000505
 8017ba4:	0802afa4 	.word	0x0802afa4
 8017ba8:	2000bbd2 	.word	0x2000bbd2
 8017bac:	0802afb8 	.word	0x0802afb8
 8017bb0:	2000bbd0 	.word	0x2000bbd0
 8017bb4:	0802afc8 	.word	0x0802afc8

08017bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017bb8:	b580      	push	{r7, lr}
 8017bba:	b082      	sub	sp, #8
 8017bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8017bbe:	4b0f      	ldr	r3, [pc, #60]	; (8017bfc <HAL_MspInit+0x44>)
 8017bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bc2:	4a0e      	ldr	r2, [pc, #56]	; (8017bfc <HAL_MspInit+0x44>)
 8017bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8017bca:	4b0c      	ldr	r3, [pc, #48]	; (8017bfc <HAL_MspInit+0x44>)
 8017bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017bd2:	607b      	str	r3, [r7, #4]
 8017bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017bd6:	4b09      	ldr	r3, [pc, #36]	; (8017bfc <HAL_MspInit+0x44>)
 8017bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bda:	4a08      	ldr	r2, [pc, #32]	; (8017bfc <HAL_MspInit+0x44>)
 8017bdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017be0:	6453      	str	r3, [r2, #68]	; 0x44
 8017be2:	4b06      	ldr	r3, [pc, #24]	; (8017bfc <HAL_MspInit+0x44>)
 8017be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017bea:	603b      	str	r3, [r7, #0]
 8017bec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8017bee:	2004      	movs	r0, #4
 8017bf0:	f001 ff00 	bl	80199f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017bf4:	bf00      	nop
 8017bf6:	3708      	adds	r7, #8
 8017bf8:	46bd      	mov	sp, r7
 8017bfa:	bd80      	pop	{r7, pc}
 8017bfc:	40023800 	.word	0x40023800

08017c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017c00:	b480      	push	{r7}
 8017c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8017c04:	e7fe      	b.n	8017c04 <NMI_Handler+0x4>

08017c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017c06:	b480      	push	{r7}
 8017c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017c0a:	e7fe      	b.n	8017c0a <HardFault_Handler+0x4>

08017c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017c0c:	b480      	push	{r7}
 8017c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017c10:	e7fe      	b.n	8017c10 <MemManage_Handler+0x4>

08017c12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017c12:	b480      	push	{r7}
 8017c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017c16:	e7fe      	b.n	8017c16 <BusFault_Handler+0x4>

08017c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017c18:	b480      	push	{r7}
 8017c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017c1c:	e7fe      	b.n	8017c1c <UsageFault_Handler+0x4>

08017c1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8017c1e:	b480      	push	{r7}
 8017c20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8017c22:	bf00      	nop
 8017c24:	46bd      	mov	sp, r7
 8017c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c2a:	4770      	bx	lr

08017c2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017c2c:	b480      	push	{r7}
 8017c2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017c30:	bf00      	nop
 8017c32:	46bd      	mov	sp, r7
 8017c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c38:	4770      	bx	lr

08017c3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8017c3a:	b480      	push	{r7}
 8017c3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8017c3e:	bf00      	nop
 8017c40:	46bd      	mov	sp, r7
 8017c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c46:	4770      	bx	lr

08017c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8017c4c:	f000 ffdc 	bl	8018c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8017c50:	bf00      	nop
 8017c52:	bd80      	pop	{r7, pc}

08017c54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8017c54:	b580      	push	{r7, lr}
 8017c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8017c58:	2001      	movs	r0, #1
 8017c5a:	f003 fbf9 	bl	801b450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8017c5e:	bf00      	nop
 8017c60:	bd80      	pop	{r7, pc}

08017c62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8017c62:	b580      	push	{r7, lr}
 8017c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 8017c66:	2002      	movs	r0, #2
 8017c68:	f003 fbf2 	bl	801b450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8017c6c:	bf00      	nop
 8017c6e:	bd80      	pop	{r7, pc}

08017c70 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8017c74:	4802      	ldr	r0, [pc, #8]	; (8017c80 <TIM4_IRQHandler+0x10>)
 8017c76:	f006 fb0f 	bl	801e298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8017c7a:	bf00      	nop
 8017c7c:	bd80      	pop	{r7, pc}
 8017c7e:	bf00      	nop
 8017c80:	2000bc40 	.word	0x2000bc40

08017c84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8017c84:	b580      	push	{r7, lr}
 8017c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8017c88:	4802      	ldr	r0, [pc, #8]	; (8017c94 <USART1_IRQHandler+0x10>)
 8017c8a:	f006 fd29 	bl	801e6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8017c8e:	bf00      	nop
 8017c90:	bd80      	pop	{r7, pc}
 8017c92:	bf00      	nop
 8017c94:	2000db78 	.word	0x2000db78

08017c98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8017c9c:	4802      	ldr	r0, [pc, #8]	; (8017ca8 <TIM5_IRQHandler+0x10>)
 8017c9e:	f006 fafb 	bl	801e298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8017ca2:	bf00      	nop
 8017ca4:	bd80      	pop	{r7, pc}
 8017ca6:	bf00      	nop
 8017ca8:	2000bcfc 	.word	0x2000bcfc

08017cac <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8017cac:	b580      	push	{r7, lr}
 8017cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8017cb0:	4802      	ldr	r0, [pc, #8]	; (8017cbc <UART4_IRQHandler+0x10>)
 8017cb2:	f006 fd15 	bl	801e6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8017cb6:	bf00      	nop
 8017cb8:	bd80      	pop	{r7, pc}
 8017cba:	bf00      	nop
 8017cbc:	2000d950 	.word	0x2000d950

08017cc0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8017cc4:	4802      	ldr	r0, [pc, #8]	; (8017cd0 <UART5_IRQHandler+0x10>)
 8017cc6:	f006 fd0b 	bl	801e6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8017cca:	bf00      	nop
 8017ccc:	bd80      	pop	{r7, pc}
 8017cce:	bf00      	nop
 8017cd0:	2000da08 	.word	0x2000da08

08017cd4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017cd8:	4802      	ldr	r0, [pc, #8]	; (8017ce4 <TIM6_DAC_IRQHandler+0x10>)
 8017cda:	f006 fadd 	bl	801e298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017cde:	bf00      	nop
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	2000bdb8 	.word	0x2000bdb8

08017ce8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8017cec:	4802      	ldr	r0, [pc, #8]	; (8017cf8 <TIM7_IRQHandler+0x10>)
 8017cee:	f006 fad3 	bl	801e298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8017cf2:	bf00      	nop
 8017cf4:	bd80      	pop	{r7, pc}
 8017cf6:	bf00      	nop
 8017cf8:	2000be74 	.word	0x2000be74

08017cfc <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8017cfc:	b580      	push	{r7, lr}
 8017cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8017d00:	4802      	ldr	r0, [pc, #8]	; (8017d0c <ETH_IRQHandler+0x10>)
 8017d02:	f002 fac7 	bl	801a294 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8017d06:	bf00      	nop
 8017d08:	bd80      	pop	{r7, pc}
 8017d0a:	bf00      	nop
 8017d0c:	2001258c 	.word	0x2001258c

08017d10 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017d14:	4802      	ldr	r0, [pc, #8]	; (8017d20 <CAN2_RX0_IRQHandler+0x10>)
 8017d16:	f001 fb69 	bl	80193ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8017d1a:	bf00      	nop
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	2000b1ec 	.word	0x2000b1ec

08017d24 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8017d24:	b580      	push	{r7, lr}
 8017d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8017d28:	4802      	ldr	r0, [pc, #8]	; (8017d34 <CAN2_RX1_IRQHandler+0x10>)
 8017d2a:	f001 fb5f 	bl	80193ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8017d2e:	bf00      	nop
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	2000b1ec 	.word	0x2000b1ec

08017d38 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8017d38:	b580      	push	{r7, lr}
 8017d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8017d3c:	4802      	ldr	r0, [pc, #8]	; (8017d48 <UART7_IRQHandler+0x10>)
 8017d3e:	f006 fccf 	bl	801e6e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8017d42:	bf00      	nop
 8017d44:	bd80      	pop	{r7, pc}
 8017d46:	bf00      	nop
 8017d48:	2000dac0 	.word	0x2000dac0

08017d4c <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8017d50:	4802      	ldr	r0, [pc, #8]	; (8017d5c <CAN3_RX0_IRQHandler+0x10>)
 8017d52:	f001 fb4b 	bl	80193ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 8017d56:	bf00      	nop
 8017d58:	bd80      	pop	{r7, pc}
 8017d5a:	bf00      	nop
 8017d5c:	2000b250 	.word	0x2000b250

08017d60 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8017d64:	4802      	ldr	r0, [pc, #8]	; (8017d70 <CAN3_RX1_IRQHandler+0x10>)
 8017d66:	f001 fb41 	bl	80193ec <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8017d6a:	bf00      	nop
 8017d6c:	bd80      	pop	{r7, pc}
 8017d6e:	bf00      	nop
 8017d70:	2000b250 	.word	0x2000b250

08017d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8017d74:	b480      	push	{r7}
 8017d76:	af00      	add	r7, sp, #0
	return 1;
 8017d78:	2301      	movs	r3, #1
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	46bd      	mov	sp, r7
 8017d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d82:	4770      	bx	lr

08017d84 <_kill>:

int _kill(int pid, int sig)
{
 8017d84:	b480      	push	{r7}
 8017d86:	b083      	sub	sp, #12
 8017d88:	af00      	add	r7, sp, #0
 8017d8a:	6078      	str	r0, [r7, #4]
 8017d8c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8017d8e:	4b05      	ldr	r3, [pc, #20]	; (8017da4 <_kill+0x20>)
 8017d90:	2216      	movs	r2, #22
 8017d92:	601a      	str	r2, [r3, #0]
	return -1;
 8017d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	370c      	adds	r7, #12
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017da2:	4770      	bx	lr
 8017da4:	200161d0 	.word	0x200161d0

08017da8 <_exit>:

void _exit (int status)
{
 8017da8:	b580      	push	{r7, lr}
 8017daa:	b082      	sub	sp, #8
 8017dac:	af00      	add	r7, sp, #0
 8017dae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8017db0:	f04f 31ff 	mov.w	r1, #4294967295
 8017db4:	6878      	ldr	r0, [r7, #4]
 8017db6:	f7ff ffe5 	bl	8017d84 <_kill>
	while (1) {}		/* Make sure we hang here */
 8017dba:	e7fe      	b.n	8017dba <_exit+0x12>

08017dbc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b086      	sub	sp, #24
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	60f8      	str	r0, [r7, #12]
 8017dc4:	60b9      	str	r1, [r7, #8]
 8017dc6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017dc8:	2300      	movs	r3, #0
 8017dca:	617b      	str	r3, [r7, #20]
 8017dcc:	e00a      	b.n	8017de4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017dce:	f3af 8000 	nop.w
 8017dd2:	4601      	mov	r1, r0
 8017dd4:	68bb      	ldr	r3, [r7, #8]
 8017dd6:	1c5a      	adds	r2, r3, #1
 8017dd8:	60ba      	str	r2, [r7, #8]
 8017dda:	b2ca      	uxtb	r2, r1
 8017ddc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017dde:	697b      	ldr	r3, [r7, #20]
 8017de0:	3301      	adds	r3, #1
 8017de2:	617b      	str	r3, [r7, #20]
 8017de4:	697a      	ldr	r2, [r7, #20]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	dbf0      	blt.n	8017dce <_read+0x12>
	}

return len;
 8017dec:	687b      	ldr	r3, [r7, #4]
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3718      	adds	r7, #24
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}

08017df6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8017df6:	b580      	push	{r7, lr}
 8017df8:	b086      	sub	sp, #24
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	60f8      	str	r0, [r7, #12]
 8017dfe:	60b9      	str	r1, [r7, #8]
 8017e00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e02:	2300      	movs	r3, #0
 8017e04:	617b      	str	r3, [r7, #20]
 8017e06:	e009      	b.n	8017e1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8017e08:	68bb      	ldr	r3, [r7, #8]
 8017e0a:	1c5a      	adds	r2, r3, #1
 8017e0c:	60ba      	str	r2, [r7, #8]
 8017e0e:	781b      	ldrb	r3, [r3, #0]
 8017e10:	4618      	mov	r0, r3
 8017e12:	f7e8 fe3f 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017e16:	697b      	ldr	r3, [r7, #20]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	617b      	str	r3, [r7, #20]
 8017e1c:	697a      	ldr	r2, [r7, #20]
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	dbf1      	blt.n	8017e08 <_write+0x12>
	}
	return len;
 8017e24:	687b      	ldr	r3, [r7, #4]
}
 8017e26:	4618      	mov	r0, r3
 8017e28:	3718      	adds	r7, #24
 8017e2a:	46bd      	mov	sp, r7
 8017e2c:	bd80      	pop	{r7, pc}

08017e2e <_close>:

int _close(int file)
{
 8017e2e:	b480      	push	{r7}
 8017e30:	b083      	sub	sp, #12
 8017e32:	af00      	add	r7, sp, #0
 8017e34:	6078      	str	r0, [r7, #4]
	return -1;
 8017e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e3a:	4618      	mov	r0, r3
 8017e3c:	370c      	adds	r7, #12
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e44:	4770      	bx	lr

08017e46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017e46:	b480      	push	{r7}
 8017e48:	b083      	sub	sp, #12
 8017e4a:	af00      	add	r7, sp, #0
 8017e4c:	6078      	str	r0, [r7, #4]
 8017e4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017e50:	683b      	ldr	r3, [r7, #0]
 8017e52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017e56:	605a      	str	r2, [r3, #4]
	return 0;
 8017e58:	2300      	movs	r3, #0
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	370c      	adds	r7, #12
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e64:	4770      	bx	lr

08017e66 <_isatty>:

int _isatty(int file)
{
 8017e66:	b480      	push	{r7}
 8017e68:	b083      	sub	sp, #12
 8017e6a:	af00      	add	r7, sp, #0
 8017e6c:	6078      	str	r0, [r7, #4]
	return 1;
 8017e6e:	2301      	movs	r3, #1
}
 8017e70:	4618      	mov	r0, r3
 8017e72:	370c      	adds	r7, #12
 8017e74:	46bd      	mov	sp, r7
 8017e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7a:	4770      	bx	lr

08017e7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	60f8      	str	r0, [r7, #12]
 8017e84:	60b9      	str	r1, [r7, #8]
 8017e86:	607a      	str	r2, [r7, #4]
	return 0;
 8017e88:	2300      	movs	r3, #0
}
 8017e8a:	4618      	mov	r0, r3
 8017e8c:	3714      	adds	r7, #20
 8017e8e:	46bd      	mov	sp, r7
 8017e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e94:	4770      	bx	lr
	...

08017e98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8017e98:	b480      	push	{r7}
 8017e9a:	b087      	sub	sp, #28
 8017e9c:	af00      	add	r7, sp, #0
 8017e9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8017ea0:	4a14      	ldr	r2, [pc, #80]	; (8017ef4 <_sbrk+0x5c>)
 8017ea2:	4b15      	ldr	r3, [pc, #84]	; (8017ef8 <_sbrk+0x60>)
 8017ea4:	1ad3      	subs	r3, r2, r3
 8017ea6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8017ea8:	697b      	ldr	r3, [r7, #20]
 8017eaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8017eac:	4b13      	ldr	r3, [pc, #76]	; (8017efc <_sbrk+0x64>)
 8017eae:	681b      	ldr	r3, [r3, #0]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d102      	bne.n	8017eba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8017eb4:	4b11      	ldr	r3, [pc, #68]	; (8017efc <_sbrk+0x64>)
 8017eb6:	4a12      	ldr	r2, [pc, #72]	; (8017f00 <_sbrk+0x68>)
 8017eb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8017eba:	4b10      	ldr	r3, [pc, #64]	; (8017efc <_sbrk+0x64>)
 8017ebc:	681a      	ldr	r2, [r3, #0]
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	4413      	add	r3, r2
 8017ec2:	693a      	ldr	r2, [r7, #16]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d205      	bcs.n	8017ed4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8017ec8:	4b0e      	ldr	r3, [pc, #56]	; (8017f04 <_sbrk+0x6c>)
 8017eca:	220c      	movs	r2, #12
 8017ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8017ece:	f04f 33ff 	mov.w	r3, #4294967295
 8017ed2:	e009      	b.n	8017ee8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8017ed4:	4b09      	ldr	r3, [pc, #36]	; (8017efc <_sbrk+0x64>)
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8017eda:	4b08      	ldr	r3, [pc, #32]	; (8017efc <_sbrk+0x64>)
 8017edc:	681a      	ldr	r2, [r3, #0]
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	4413      	add	r3, r2
 8017ee2:	4a06      	ldr	r2, [pc, #24]	; (8017efc <_sbrk+0x64>)
 8017ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8017ee6:	68fb      	ldr	r3, [r7, #12]
}
 8017ee8:	4618      	mov	r0, r3
 8017eea:	371c      	adds	r7, #28
 8017eec:	46bd      	mov	sp, r7
 8017eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ef2:	4770      	bx	lr
 8017ef4:	20080000 	.word	0x20080000
 8017ef8:	00000400 	.word	0x00000400
 8017efc:	2000bc3c 	.word	0x2000bc3c
 8017f00:	200161d8 	.word	0x200161d8
 8017f04:	200161d0 	.word	0x200161d0

08017f08 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017f08:	b480      	push	{r7}
 8017f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017f0c:	4b06      	ldr	r3, [pc, #24]	; (8017f28 <SystemInit+0x20>)
 8017f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017f12:	4a05      	ldr	r2, [pc, #20]	; (8017f28 <SystemInit+0x20>)
 8017f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8017f1c:	bf00      	nop
 8017f1e:	46bd      	mov	sp, r7
 8017f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f24:	4770      	bx	lr
 8017f26:	bf00      	nop
 8017f28:	e000ed00 	.word	0xe000ed00

08017f2c <MX_UART7_Init>:
  /* USER CODE END UART5_Init 2 */

}
/* UART7 init function */
void MX_UART7_Init(void)
{
 8017f2c:	b580      	push	{r7, lr}
 8017f2e:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8017f30:	4b16      	ldr	r3, [pc, #88]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f32:	4a17      	ldr	r2, [pc, #92]	; (8017f90 <MX_UART7_Init+0x64>)
 8017f34:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8017f36:	4b15      	ldr	r3, [pc, #84]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8017f3c:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8017f3e:	4b13      	ldr	r3, [pc, #76]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8017f44:	4b11      	ldr	r3, [pc, #68]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f46:	2200      	movs	r2, #0
 8017f48:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8017f4a:	4b10      	ldr	r3, [pc, #64]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8017f50:	4b0e      	ldr	r3, [pc, #56]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f52:	220c      	movs	r2, #12
 8017f54:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017f56:	4b0d      	ldr	r3, [pc, #52]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8017f5c:	4b0b      	ldr	r3, [pc, #44]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017f62:	4b0a      	ldr	r3, [pc, #40]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f64:	2200      	movs	r2, #0
 8017f66:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017f68:	4b08      	ldr	r3, [pc, #32]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f6a:	2200      	movs	r2, #0
 8017f6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8017f6e:	4807      	ldr	r0, [pc, #28]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f70:	f006 fad4 	bl	801e51c <HAL_UART_Init>
 8017f74:	4603      	mov	r3, r0
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d001      	beq.n	8017f7e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8017f7a:	f7ff f85f 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017f7e:	2280      	movs	r2, #128	; 0x80
 8017f80:	4904      	ldr	r1, [pc, #16]	; (8017f94 <MX_UART7_Init+0x68>)
 8017f82:	4802      	ldr	r0, [pc, #8]	; (8017f8c <MX_UART7_Init+0x60>)
 8017f84:	f007 fe36 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END UART7_Init 2 */

}
 8017f88:	bf00      	nop
 8017f8a:	bd80      	pop	{r7, pc}
 8017f8c:	2000dac0 	.word	0x2000dac0
 8017f90:	40007800 	.word	0x40007800
 8017f94:	2000d850 	.word	0x2000d850

08017f98 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8017f9c:	4b16      	ldr	r3, [pc, #88]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017f9e:	4a17      	ldr	r2, [pc, #92]	; (8017ffc <MX_USART1_UART_Init+0x64>)
 8017fa0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8017fa2:	4b15      	ldr	r3, [pc, #84]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fa4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017fa8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8017faa:	4b13      	ldr	r3, [pc, #76]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fac:	2200      	movs	r2, #0
 8017fae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8017fb0:	4b11      	ldr	r3, [pc, #68]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fb2:	2200      	movs	r2, #0
 8017fb4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8017fb6:	4b10      	ldr	r3, [pc, #64]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fb8:	2200      	movs	r2, #0
 8017fba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017fbc:	4b0e      	ldr	r3, [pc, #56]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fbe:	220c      	movs	r2, #12
 8017fc0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017fc2:	4b0d      	ldr	r3, [pc, #52]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fc4:	2200      	movs	r2, #0
 8017fc6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017fc8:	4b0b      	ldr	r3, [pc, #44]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fca:	2200      	movs	r2, #0
 8017fcc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017fce:	4b0a      	ldr	r3, [pc, #40]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017fd4:	4b08      	ldr	r3, [pc, #32]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fd6:	2200      	movs	r2, #0
 8017fd8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017fda:	4807      	ldr	r0, [pc, #28]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017fdc:	f006 fa9e 	bl	801e51c <HAL_UART_Init>
 8017fe0:	4603      	mov	r3, r0
 8017fe2:	2b00      	cmp	r3, #0
 8017fe4:	d001      	beq.n	8017fea <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8017fe6:	f7ff f829 	bl	801703c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8017fea:	2280      	movs	r2, #128	; 0x80
 8017fec:	4904      	ldr	r1, [pc, #16]	; (8018000 <MX_USART1_UART_Init+0x68>)
 8017fee:	4802      	ldr	r0, [pc, #8]	; (8017ff8 <MX_USART1_UART_Init+0x60>)
 8017ff0:	f007 fe00 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8017ff4:	bf00      	nop
 8017ff6:	bd80      	pop	{r7, pc}
 8017ff8:	2000db78 	.word	0x2000db78
 8017ffc:	40011000 	.word	0x40011000
 8018000:	2000d750 	.word	0x2000d750

08018004 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018004:	b580      	push	{r7, lr}
 8018006:	b0b4      	sub	sp, #208	; 0xd0
 8018008:	af00      	add	r7, sp, #0
 801800a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801800c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018010:	2200      	movs	r2, #0
 8018012:	601a      	str	r2, [r3, #0]
 8018014:	605a      	str	r2, [r3, #4]
 8018016:	609a      	str	r2, [r3, #8]
 8018018:	60da      	str	r2, [r3, #12]
 801801a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801801c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018020:	2290      	movs	r2, #144	; 0x90
 8018022:	2100      	movs	r1, #0
 8018024:	4618      	mov	r0, r3
 8018026:	f00d fc31 	bl	802588c <memset>
  if(uartHandle->Instance==UART4)
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	4aa7      	ldr	r2, [pc, #668]	; (80182cc <HAL_UART_MspInit+0x2c8>)
 8018030:	4293      	cmp	r3, r2
 8018032:	d145      	bne.n	80180c0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8018034:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018038:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801803a:	2300      	movs	r3, #0
 801803c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801803e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018042:	4618      	mov	r0, r3
 8018044:	f004 fd0a 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 8018048:	4603      	mov	r3, r0
 801804a:	2b00      	cmp	r3, #0
 801804c:	d001      	beq.n	8018052 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 801804e:	f7fe fff5 	bl	801703c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8018052:	4b9f      	ldr	r3, [pc, #636]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018056:	4a9e      	ldr	r2, [pc, #632]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801805c:	6413      	str	r3, [r2, #64]	; 0x40
 801805e:	4b9c      	ldr	r3, [pc, #624]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018062:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018066:	62bb      	str	r3, [r7, #40]	; 0x28
 8018068:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 801806a:	4b99      	ldr	r3, [pc, #612]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 801806c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801806e:	4a98      	ldr	r2, [pc, #608]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018074:	6313      	str	r3, [r2, #48]	; 0x30
 8018076:	4b96      	ldr	r3, [pc, #600]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801807a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801807e:	627b      	str	r3, [r7, #36]	; 0x24
 8018080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8018082:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8018086:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801808a:	2302      	movs	r3, #2
 801808c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018090:	2300      	movs	r3, #0
 8018092:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018096:	2303      	movs	r3, #3
 8018098:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 801809c:	2308      	movs	r3, #8
 801809e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80180a2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80180a6:	4619      	mov	r1, r3
 80180a8:	488a      	ldr	r0, [pc, #552]	; (80182d4 <HAL_UART_MspInit+0x2d0>)
 80180aa:	f002 ffd9 	bl	801b060 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80180ae:	2200      	movs	r2, #0
 80180b0:	2105      	movs	r1, #5
 80180b2:	2034      	movs	r0, #52	; 0x34
 80180b4:	f001 fca9 	bl	8019a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80180b8:	2034      	movs	r0, #52	; 0x34
 80180ba:	f001 fcc2 	bl	8019a42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80180be:	e100      	b.n	80182c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 80180c0:	687b      	ldr	r3, [r7, #4]
 80180c2:	681b      	ldr	r3, [r3, #0]
 80180c4:	4a84      	ldr	r2, [pc, #528]	; (80182d8 <HAL_UART_MspInit+0x2d4>)
 80180c6:	4293      	cmp	r3, r2
 80180c8:	d167      	bne.n	801819a <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80180ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80180ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80180d0:	2300      	movs	r3, #0
 80180d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80180d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80180da:	4618      	mov	r0, r3
 80180dc:	f004 fcbe 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 80180e0:	4603      	mov	r3, r0
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	d001      	beq.n	80180ea <HAL_UART_MspInit+0xe6>
      Error_Handler();
 80180e6:	f7fe ffa9 	bl	801703c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80180ea:	4b79      	ldr	r3, [pc, #484]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80180ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180ee:	4a78      	ldr	r2, [pc, #480]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80180f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80180f4:	6413      	str	r3, [r2, #64]	; 0x40
 80180f6:	4b76      	ldr	r3, [pc, #472]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80180f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80180fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80180fe:	623b      	str	r3, [r7, #32]
 8018100:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018102:	4b73      	ldr	r3, [pc, #460]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018106:	4a72      	ldr	r2, [pc, #456]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018108:	f043 0308 	orr.w	r3, r3, #8
 801810c:	6313      	str	r3, [r2, #48]	; 0x30
 801810e:	4b70      	ldr	r3, [pc, #448]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018112:	f003 0308 	and.w	r3, r3, #8
 8018116:	61fb      	str	r3, [r7, #28]
 8018118:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801811a:	4b6d      	ldr	r3, [pc, #436]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 801811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801811e:	4a6c      	ldr	r2, [pc, #432]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018120:	f043 0302 	orr.w	r3, r3, #2
 8018124:	6313      	str	r3, [r2, #48]	; 0x30
 8018126:	4b6a      	ldr	r3, [pc, #424]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801812a:	f003 0302 	and.w	r3, r3, #2
 801812e:	61bb      	str	r3, [r7, #24]
 8018130:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8018132:	2304      	movs	r3, #4
 8018134:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018138:	2302      	movs	r3, #2
 801813a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801813e:	2300      	movs	r3, #0
 8018140:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018144:	2303      	movs	r3, #3
 8018146:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 801814a:	2308      	movs	r3, #8
 801814c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8018150:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018154:	4619      	mov	r1, r3
 8018156:	4861      	ldr	r0, [pc, #388]	; (80182dc <HAL_UART_MspInit+0x2d8>)
 8018158:	f002 ff82 	bl	801b060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 801815c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018160:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018164:	2302      	movs	r3, #2
 8018166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801816a:	2300      	movs	r3, #0
 801816c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018170:	2303      	movs	r3, #3
 8018172:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8018176:	2307      	movs	r3, #7
 8018178:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 801817c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018180:	4619      	mov	r1, r3
 8018182:	4857      	ldr	r0, [pc, #348]	; (80182e0 <HAL_UART_MspInit+0x2dc>)
 8018184:	f002 ff6c 	bl	801b060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8018188:	2200      	movs	r2, #0
 801818a:	2105      	movs	r1, #5
 801818c:	2035      	movs	r0, #53	; 0x35
 801818e:	f001 fc3c 	bl	8019a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8018192:	2035      	movs	r0, #53	; 0x35
 8018194:	f001 fc55 	bl	8019a42 <HAL_NVIC_EnableIRQ>
}
 8018198:	e093      	b.n	80182c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	681b      	ldr	r3, [r3, #0]
 801819e:	4a51      	ldr	r2, [pc, #324]	; (80182e4 <HAL_UART_MspInit+0x2e0>)
 80181a0:	4293      	cmp	r3, r2
 80181a2:	d145      	bne.n	8018230 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80181a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80181a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80181aa:	2300      	movs	r3, #0
 80181ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80181b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80181b4:	4618      	mov	r0, r3
 80181b6:	f004 fc51 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 80181ba:	4603      	mov	r3, r0
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d001      	beq.n	80181c4 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 80181c0:	f7fe ff3c 	bl	801703c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80181c4:	4b42      	ldr	r3, [pc, #264]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181c8:	4a41      	ldr	r2, [pc, #260]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80181ce:	6413      	str	r3, [r2, #64]	; 0x40
 80181d0:	4b3f      	ldr	r3, [pc, #252]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80181d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80181d8:	617b      	str	r3, [r7, #20]
 80181da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80181dc:	4b3c      	ldr	r3, [pc, #240]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181e0:	4a3b      	ldr	r2, [pc, #236]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181e2:	f043 0320 	orr.w	r3, r3, #32
 80181e6:	6313      	str	r3, [r2, #48]	; 0x30
 80181e8:	4b39      	ldr	r3, [pc, #228]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 80181ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ec:	f003 0320 	and.w	r3, r3, #32
 80181f0:	613b      	str	r3, [r7, #16]
 80181f2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 80181f4:	23c0      	movs	r3, #192	; 0xc0
 80181f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80181fa:	2302      	movs	r3, #2
 80181fc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018200:	2300      	movs	r3, #0
 8018202:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018206:	2303      	movs	r3, #3
 8018208:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 801820c:	2308      	movs	r3, #8
 801820e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018212:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018216:	4619      	mov	r1, r3
 8018218:	4833      	ldr	r0, [pc, #204]	; (80182e8 <HAL_UART_MspInit+0x2e4>)
 801821a:	f002 ff21 	bl	801b060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 801821e:	2200      	movs	r2, #0
 8018220:	2105      	movs	r1, #5
 8018222:	2052      	movs	r0, #82	; 0x52
 8018224:	f001 fbf1 	bl	8019a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8018228:	2052      	movs	r0, #82	; 0x52
 801822a:	f001 fc0a 	bl	8019a42 <HAL_NVIC_EnableIRQ>
}
 801822e:	e048      	b.n	80182c2 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	681b      	ldr	r3, [r3, #0]
 8018234:	4a2d      	ldr	r2, [pc, #180]	; (80182ec <HAL_UART_MspInit+0x2e8>)
 8018236:	4293      	cmp	r3, r2
 8018238:	d143      	bne.n	80182c2 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801823a:	2340      	movs	r3, #64	; 0x40
 801823c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 801823e:	2300      	movs	r3, #0
 8018240:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018246:	4618      	mov	r0, r3
 8018248:	f004 fc08 	bl	801ca5c <HAL_RCCEx_PeriphCLKConfig>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	d001      	beq.n	8018256 <HAL_UART_MspInit+0x252>
      Error_Handler();
 8018252:	f7fe fef3 	bl	801703c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8018256:	4b1e      	ldr	r3, [pc, #120]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801825a:	4a1d      	ldr	r2, [pc, #116]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 801825c:	f043 0310 	orr.w	r3, r3, #16
 8018260:	6453      	str	r3, [r2, #68]	; 0x44
 8018262:	4b1b      	ldr	r3, [pc, #108]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018266:	f003 0310 	and.w	r3, r3, #16
 801826a:	60fb      	str	r3, [r7, #12]
 801826c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801826e:	4b18      	ldr	r3, [pc, #96]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018272:	4a17      	ldr	r2, [pc, #92]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 8018274:	f043 0301 	orr.w	r3, r3, #1
 8018278:	6313      	str	r3, [r2, #48]	; 0x30
 801827a:	4b15      	ldr	r3, [pc, #84]	; (80182d0 <HAL_UART_MspInit+0x2cc>)
 801827c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801827e:	f003 0301 	and.w	r3, r3, #1
 8018282:	60bb      	str	r3, [r7, #8]
 8018284:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8018286:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 801828a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801828e:	2302      	movs	r3, #2
 8018290:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018294:	2300      	movs	r3, #0
 8018296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801829a:	2303      	movs	r3, #3
 801829c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80182a0:	2307      	movs	r3, #7
 80182a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80182a6:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80182aa:	4619      	mov	r1, r3
 80182ac:	4810      	ldr	r0, [pc, #64]	; (80182f0 <HAL_UART_MspInit+0x2ec>)
 80182ae:	f002 fed7 	bl	801b060 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80182b2:	2200      	movs	r2, #0
 80182b4:	2107      	movs	r1, #7
 80182b6:	2025      	movs	r0, #37	; 0x25
 80182b8:	f001 fba7 	bl	8019a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80182bc:	2025      	movs	r0, #37	; 0x25
 80182be:	f001 fbc0 	bl	8019a42 <HAL_NVIC_EnableIRQ>
}
 80182c2:	bf00      	nop
 80182c4:	37d0      	adds	r7, #208	; 0xd0
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	bf00      	nop
 80182cc:	40004c00 	.word	0x40004c00
 80182d0:	40023800 	.word	0x40023800
 80182d4:	40021c00 	.word	0x40021c00
 80182d8:	40005000 	.word	0x40005000
 80182dc:	40020c00 	.word	0x40020c00
 80182e0:	40020400 	.word	0x40020400
 80182e4:	40007800 	.word	0x40007800
 80182e8:	40021400 	.word	0x40021400
 80182ec:	40011000 	.word	0x40011000
 80182f0:	40020000 	.word	0x40020000

080182f4 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 80182f4:	b580      	push	{r7, lr}
 80182f6:	b082      	sub	sp, #8
 80182f8:	af00      	add	r7, sp, #0
 80182fa:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 80182fc:	4b17      	ldr	r3, [pc, #92]	; (801835c <UART4_Init+0x68>)
 80182fe:	4a18      	ldr	r2, [pc, #96]	; (8018360 <UART4_Init+0x6c>)
 8018300:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8018302:	4a16      	ldr	r2, [pc, #88]	; (801835c <UART4_Init+0x68>)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8018308:	4b14      	ldr	r3, [pc, #80]	; (801835c <UART4_Init+0x68>)
 801830a:	2200      	movs	r2, #0
 801830c:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 801830e:	4b13      	ldr	r3, [pc, #76]	; (801835c <UART4_Init+0x68>)
 8018310:	2200      	movs	r2, #0
 8018312:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8018314:	4b11      	ldr	r3, [pc, #68]	; (801835c <UART4_Init+0x68>)
 8018316:	2200      	movs	r2, #0
 8018318:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 801831a:	4b10      	ldr	r3, [pc, #64]	; (801835c <UART4_Init+0x68>)
 801831c:	220c      	movs	r2, #12
 801831e:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018320:	4b0e      	ldr	r3, [pc, #56]	; (801835c <UART4_Init+0x68>)
 8018322:	2200      	movs	r2, #0
 8018324:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8018326:	4b0d      	ldr	r3, [pc, #52]	; (801835c <UART4_Init+0x68>)
 8018328:	2200      	movs	r2, #0
 801832a:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801832c:	4b0b      	ldr	r3, [pc, #44]	; (801835c <UART4_Init+0x68>)
 801832e:	2200      	movs	r2, #0
 8018330:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018332:	4b0a      	ldr	r3, [pc, #40]	; (801835c <UART4_Init+0x68>)
 8018334:	2200      	movs	r2, #0
 8018336:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8018338:	4808      	ldr	r0, [pc, #32]	; (801835c <UART4_Init+0x68>)
 801833a:	f006 f8ef 	bl	801e51c <HAL_UART_Init>
 801833e:	4603      	mov	r3, r0
 8018340:	2b00      	cmp	r3, #0
 8018342:	d001      	beq.n	8018348 <UART4_Init+0x54>
	{
		Error_Handler();
 8018344:	f7fe fe7a 	bl	801703c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018348:	2280      	movs	r2, #128	; 0x80
 801834a:	4906      	ldr	r1, [pc, #24]	; (8018364 <UART4_Init+0x70>)
 801834c:	4803      	ldr	r0, [pc, #12]	; (801835c <UART4_Init+0x68>)
 801834e:	f007 fc51 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8018352:	bf00      	nop
 8018354:	3708      	adds	r7, #8
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	2000d950 	.word	0x2000d950
 8018360:	40004c00 	.word	0x40004c00
 8018364:	2000d8d0 	.word	0x2000d8d0

08018368 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8018368:	b580      	push	{r7, lr}
 801836a:	b084      	sub	sp, #16
 801836c:	af00      	add	r7, sp, #0
 801836e:	6078      	str	r0, [r7, #4]
 8018370:	460b      	mov	r3, r1
 8018372:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4a68      	ldr	r2, [pc, #416]	; (801851c <HAL_UARTEx_RxEventCallback+0x1b4>)
 801837a:	4293      	cmp	r3, r2
 801837c:	d129      	bne.n	80183d2 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801837e:	2280      	movs	r2, #128	; 0x80
 8018380:	4967      	ldr	r1, [pc, #412]	; (8018520 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8018382:	4868      	ldr	r0, [pc, #416]	; (8018524 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8018384:	f007 fc36 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018388:	2300      	movs	r3, #0
 801838a:	81fb      	strh	r3, [r7, #14]
 801838c:	e017      	b.n	80183be <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 801838e:	89fa      	ldrh	r2, [r7, #14]
 8018390:	4b65      	ldr	r3, [pc, #404]	; (8018528 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018392:	881b      	ldrh	r3, [r3, #0]
 8018394:	1c59      	adds	r1, r3, #1
 8018396:	b288      	uxth	r0, r1
 8018398:	4963      	ldr	r1, [pc, #396]	; (8018528 <HAL_UARTEx_RxEventCallback+0x1c0>)
 801839a:	8008      	strh	r0, [r1, #0]
 801839c:	4619      	mov	r1, r3
 801839e:	4b60      	ldr	r3, [pc, #384]	; (8018520 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80183a0:	5c9a      	ldrb	r2, [r3, r2]
 80183a2:	4b61      	ldr	r3, [pc, #388]	; (8018528 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80183a4:	440b      	add	r3, r1
 80183a6:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 80183a8:	4b5f      	ldr	r3, [pc, #380]	; (8018528 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80183aa:	881b      	ldrh	r3, [r3, #0]
 80183ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80183b0:	d302      	bcc.n	80183b8 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 80183b2:	4b5d      	ldr	r3, [pc, #372]	; (8018528 <HAL_UARTEx_RxEventCallback+0x1c0>)
 80183b4:	2200      	movs	r2, #0
 80183b6:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 80183b8:	89fb      	ldrh	r3, [r7, #14]
 80183ba:	3301      	adds	r3, #1
 80183bc:	81fb      	strh	r3, [r7, #14]
 80183be:	89fa      	ldrh	r2, [r7, #14]
 80183c0:	887b      	ldrh	r3, [r7, #2]
 80183c2:	429a      	cmp	r2, r3
 80183c4:	d3e3      	bcc.n	801838e <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 80183c6:	f000 fc33 	bl	8018c30 <HAL_GetTick>
 80183ca:	4603      	mov	r3, r0
 80183cc:	4a57      	ldr	r2, [pc, #348]	; (801852c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80183ce:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 80183d0:	e0a0      	b.n	8018514 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	4a56      	ldr	r2, [pc, #344]	; (8018530 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80183d8:	4293      	cmp	r3, r2
 80183da:	d129      	bne.n	8018430 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80183dc:	2280      	movs	r2, #128	; 0x80
 80183de:	4955      	ldr	r1, [pc, #340]	; (8018534 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80183e0:	4855      	ldr	r0, [pc, #340]	; (8018538 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80183e2:	f007 fc07 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80183e6:	2300      	movs	r3, #0
 80183e8:	81bb      	strh	r3, [r7, #12]
 80183ea:	e01c      	b.n	8018426 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 80183ec:	89ba      	ldrh	r2, [r7, #12]
 80183ee:	4b53      	ldr	r3, [pc, #332]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80183f0:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 80183f4:	1c59      	adds	r1, r3, #1
 80183f6:	b288      	uxth	r0, r1
 80183f8:	4950      	ldr	r1, [pc, #320]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80183fa:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 80183fe:	4619      	mov	r1, r3
 8018400:	4b4c      	ldr	r3, [pc, #304]	; (8018534 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8018402:	5c9a      	ldrb	r2, [r3, r2]
 8018404:	4b4d      	ldr	r3, [pc, #308]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018406:	440b      	add	r3, r1
 8018408:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 801840c:	4b4b      	ldr	r3, [pc, #300]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801840e:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8018412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018416:	d303      	bcc.n	8018420 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8018418:	4b48      	ldr	r3, [pc, #288]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801841a:	2200      	movs	r2, #0
 801841c:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8018420:	89bb      	ldrh	r3, [r7, #12]
 8018422:	3301      	adds	r3, #1
 8018424:	81bb      	strh	r3, [r7, #12]
 8018426:	89ba      	ldrh	r2, [r7, #12]
 8018428:	887b      	ldrh	r3, [r7, #2]
 801842a:	429a      	cmp	r2, r3
 801842c:	d3de      	bcc.n	80183ec <HAL_UARTEx_RxEventCallback+0x84>
}
 801842e:	e071      	b.n	8018514 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8018430:	687b      	ldr	r3, [r7, #4]
 8018432:	681b      	ldr	r3, [r3, #0]
 8018434:	4a42      	ldr	r2, [pc, #264]	; (8018540 <HAL_UARTEx_RxEventCallback+0x1d8>)
 8018436:	4293      	cmp	r3, r2
 8018438:	d129      	bne.n	801848e <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801843a:	2280      	movs	r2, #128	; 0x80
 801843c:	4941      	ldr	r1, [pc, #260]	; (8018544 <HAL_UARTEx_RxEventCallback+0x1dc>)
 801843e:	4842      	ldr	r0, [pc, #264]	; (8018548 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8018440:	f007 fbd8 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018444:	2300      	movs	r3, #0
 8018446:	817b      	strh	r3, [r7, #10]
 8018448:	e01c      	b.n	8018484 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 801844a:	897a      	ldrh	r2, [r7, #10]
 801844c:	4b3b      	ldr	r3, [pc, #236]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801844e:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8018452:	1c59      	adds	r1, r3, #1
 8018454:	b288      	uxth	r0, r1
 8018456:	4939      	ldr	r1, [pc, #228]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018458:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 801845c:	4619      	mov	r1, r3
 801845e:	4b39      	ldr	r3, [pc, #228]	; (8018544 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8018460:	5c9a      	ldrb	r2, [r3, r2]
 8018462:	4b36      	ldr	r3, [pc, #216]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018464:	440b      	add	r3, r1
 8018466:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 801846a:	4b34      	ldr	r3, [pc, #208]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 801846c:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8018470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018474:	d303      	bcc.n	801847e <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8018476:	4b31      	ldr	r3, [pc, #196]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018478:	2200      	movs	r2, #0
 801847a:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 801847e:	897b      	ldrh	r3, [r7, #10]
 8018480:	3301      	adds	r3, #1
 8018482:	817b      	strh	r3, [r7, #10]
 8018484:	897a      	ldrh	r2, [r7, #10]
 8018486:	887b      	ldrh	r3, [r7, #2]
 8018488:	429a      	cmp	r2, r3
 801848a:	d3de      	bcc.n	801844a <HAL_UARTEx_RxEventCallback+0xe2>
}
 801848c:	e042      	b.n	8018514 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	681b      	ldr	r3, [r3, #0]
 8018492:	4a2e      	ldr	r2, [pc, #184]	; (801854c <HAL_UARTEx_RxEventCallback+0x1e4>)
 8018494:	4293      	cmp	r3, r2
 8018496:	d13d      	bne.n	8018514 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018498:	2280      	movs	r2, #128	; 0x80
 801849a:	492d      	ldr	r1, [pc, #180]	; (8018550 <HAL_UARTEx_RxEventCallback+0x1e8>)
 801849c:	482d      	ldr	r0, [pc, #180]	; (8018554 <HAL_UARTEx_RxEventCallback+0x1ec>)
 801849e:	f007 fba9 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80184a2:	2300      	movs	r3, #0
 80184a4:	813b      	strh	r3, [r7, #8]
 80184a6:	e01c      	b.n	80184e2 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 80184a8:	893a      	ldrh	r2, [r7, #8]
 80184aa:	4b24      	ldr	r3, [pc, #144]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80184ac:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80184b0:	1c59      	adds	r1, r3, #1
 80184b2:	b288      	uxth	r0, r1
 80184b4:	4921      	ldr	r1, [pc, #132]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80184b6:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 80184ba:	4619      	mov	r1, r3
 80184bc:	4b24      	ldr	r3, [pc, #144]	; (8018550 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80184be:	5c9a      	ldrb	r2, [r3, r2]
 80184c0:	4b1e      	ldr	r3, [pc, #120]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80184c2:	440b      	add	r3, r1
 80184c4:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 80184c8:	4b1c      	ldr	r3, [pc, #112]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80184ca:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80184ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80184d2:	d303      	bcc.n	80184dc <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 80184d4:	4b19      	ldr	r3, [pc, #100]	; (801853c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80184d6:	2200      	movs	r2, #0
 80184d8:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 80184dc:	893b      	ldrh	r3, [r7, #8]
 80184de:	3301      	adds	r3, #1
 80184e0:	813b      	strh	r3, [r7, #8]
 80184e2:	893a      	ldrh	r2, [r7, #8]
 80184e4:	887b      	ldrh	r3, [r7, #2]
 80184e6:	429a      	cmp	r2, r3
 80184e8:	d3de      	bcc.n	80184a8 <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 80184ea:	4b1b      	ldr	r3, [pc, #108]	; (8018558 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7f7 fd66 	bl	800ffc0 <HAL_Elaps_Ticks>
 80184f4:	4603      	mov	r3, r0
 80184f6:	2b32      	cmp	r3, #50	; 0x32
 80184f8:	d907      	bls.n	801850a <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 80184fa:	4b17      	ldr	r3, [pc, #92]	; (8018558 <HAL_UARTEx_RxEventCallback+0x1f0>)
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4618      	mov	r0, r3
 8018500:	f7f7 fd5e 	bl	800ffc0 <HAL_Elaps_Ticks>
 8018504:	4603      	mov	r3, r0
 8018506:	4a15      	ldr	r2, [pc, #84]	; (801855c <HAL_UARTEx_RxEventCallback+0x1f4>)
 8018508:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 801850a:	f000 fb91 	bl	8018c30 <HAL_GetTick>
 801850e:	4603      	mov	r3, r0
 8018510:	4a11      	ldr	r2, [pc, #68]	; (8018558 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018512:	6013      	str	r3, [r2, #0]
}
 8018514:	bf00      	nop
 8018516:	3710      	adds	r7, #16
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}
 801851c:	40011000 	.word	0x40011000
 8018520:	2000d750 	.word	0x2000d750
 8018524:	2000db78 	.word	0x2000db78
 8018528:	2000cf4c 	.word	0x2000cf4c
 801852c:	2000bf34 	.word	0x2000bf34
 8018530:	40005000 	.word	0x40005000
 8018534:	2000d7d0 	.word	0x2000d7d0
 8018538:	2000da08 	.word	0x2000da08
 801853c:	2000bf3c 	.word	0x2000bf3c
 8018540:	40007800 	.word	0x40007800
 8018544:	2000d850 	.word	0x2000d850
 8018548:	2000dac0 	.word	0x2000dac0
 801854c:	40004c00 	.word	0x40004c00
 8018550:	2000d8d0 	.word	0x2000d8d0
 8018554:	2000d950 	.word	0x2000d950
 8018558:	2000bf30 	.word	0x2000bf30
 801855c:	2000bf38 	.word	0x2000bf38

08018560 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8018560:	b480      	push	{r7}
 8018562:	b085      	sub	sp, #20
 8018564:	af00      	add	r7, sp, #0
 8018566:	4603      	mov	r3, r0
 8018568:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 801856a:	2300      	movs	r3, #0
 801856c:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 801856e:	79fb      	ldrb	r3, [r7, #7]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d115      	bne.n	80185a0 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8018574:	79fa      	ldrb	r2, [r7, #7]
 8018576:	4918      	ldr	r1, [pc, #96]	; (80185d8 <Com_DataReady+0x78>)
 8018578:	4613      	mov	r3, r2
 801857a:	025b      	lsls	r3, r3, #9
 801857c:	4413      	add	r3, r2
 801857e:	009b      	lsls	r3, r3, #2
 8018580:	440b      	add	r3, r1
 8018582:	8819      	ldrh	r1, [r3, #0]
 8018584:	79fa      	ldrb	r2, [r7, #7]
 8018586:	4814      	ldr	r0, [pc, #80]	; (80185d8 <Com_DataReady+0x78>)
 8018588:	4613      	mov	r3, r2
 801858a:	025b      	lsls	r3, r3, #9
 801858c:	4413      	add	r3, r2
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	4403      	add	r3, r0
 8018592:	3302      	adds	r3, #2
 8018594:	881b      	ldrh	r3, [r3, #0]
 8018596:	4299      	cmp	r1, r3
 8018598:	d017      	beq.n	80185ca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801859a:	2301      	movs	r3, #1
 801859c:	73fb      	strb	r3, [r7, #15]
 801859e:	e014      	b.n	80185ca <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 80185a0:	79fa      	ldrb	r2, [r7, #7]
 80185a2:	490e      	ldr	r1, [pc, #56]	; (80185dc <Com_DataReady+0x7c>)
 80185a4:	4613      	mov	r3, r2
 80185a6:	021b      	lsls	r3, r3, #8
 80185a8:	4413      	add	r3, r2
 80185aa:	009b      	lsls	r3, r3, #2
 80185ac:	440b      	add	r3, r1
 80185ae:	8819      	ldrh	r1, [r3, #0]
 80185b0:	79fa      	ldrb	r2, [r7, #7]
 80185b2:	480a      	ldr	r0, [pc, #40]	; (80185dc <Com_DataReady+0x7c>)
 80185b4:	4613      	mov	r3, r2
 80185b6:	021b      	lsls	r3, r3, #8
 80185b8:	4413      	add	r3, r2
 80185ba:	009b      	lsls	r3, r3, #2
 80185bc:	4403      	add	r3, r0
 80185be:	3302      	adds	r3, #2
 80185c0:	881b      	ldrh	r3, [r3, #0]
 80185c2:	4299      	cmp	r1, r3
 80185c4:	d001      	beq.n	80185ca <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80185c6:	2301      	movs	r3, #1
 80185c8:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 80185ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80185cc:	4618      	mov	r0, r3
 80185ce:	3714      	adds	r7, #20
 80185d0:	46bd      	mov	sp, r7
 80185d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185d6:	4770      	bx	lr
 80185d8:	2000cf4c 	.word	0x2000cf4c
 80185dc:	2000bf3c 	.word	0x2000bf3c

080185e0 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 80185e0:	b4b0      	push	{r4, r5, r7}
 80185e2:	b085      	sub	sp, #20
 80185e4:	af00      	add	r7, sp, #0
 80185e6:	4603      	mov	r3, r0
 80185e8:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 80185ea:	2300      	movs	r3, #0
 80185ec:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 80185ee:	79fb      	ldrb	r3, [r7, #7]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d135      	bne.n	8018660 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 80185f4:	79f9      	ldrb	r1, [r7, #7]
 80185f6:	79fa      	ldrb	r2, [r7, #7]
 80185f8:	4837      	ldr	r0, [pc, #220]	; (80186d8 <Com_Get_Byte+0xf8>)
 80185fa:	4613      	mov	r3, r2
 80185fc:	025b      	lsls	r3, r3, #9
 80185fe:	4413      	add	r3, r2
 8018600:	009b      	lsls	r3, r3, #2
 8018602:	4403      	add	r3, r0
 8018604:	3302      	adds	r3, #2
 8018606:	8818      	ldrh	r0, [r3, #0]
 8018608:	1c43      	adds	r3, r0, #1
 801860a:	b29d      	uxth	r5, r3
 801860c:	4c32      	ldr	r4, [pc, #200]	; (80186d8 <Com_Get_Byte+0xf8>)
 801860e:	4613      	mov	r3, r2
 8018610:	025b      	lsls	r3, r3, #9
 8018612:	4413      	add	r3, r2
 8018614:	009b      	lsls	r3, r3, #2
 8018616:	4423      	add	r3, r4
 8018618:	3302      	adds	r3, #2
 801861a:	462a      	mov	r2, r5
 801861c:	801a      	strh	r2, [r3, #0]
 801861e:	4a2e      	ldr	r2, [pc, #184]	; (80186d8 <Com_Get_Byte+0xf8>)
 8018620:	460b      	mov	r3, r1
 8018622:	025b      	lsls	r3, r3, #9
 8018624:	440b      	add	r3, r1
 8018626:	009b      	lsls	r3, r3, #2
 8018628:	4413      	add	r3, r2
 801862a:	4403      	add	r3, r0
 801862c:	3304      	adds	r3, #4
 801862e:	781b      	ldrb	r3, [r3, #0]
 8018630:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8018632:	79fa      	ldrb	r2, [r7, #7]
 8018634:	4928      	ldr	r1, [pc, #160]	; (80186d8 <Com_Get_Byte+0xf8>)
 8018636:	4613      	mov	r3, r2
 8018638:	025b      	lsls	r3, r3, #9
 801863a:	4413      	add	r3, r2
 801863c:	009b      	lsls	r3, r3, #2
 801863e:	440b      	add	r3, r1
 8018640:	3302      	adds	r3, #2
 8018642:	881b      	ldrh	r3, [r3, #0]
 8018644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018648:	d33f      	bcc.n	80186ca <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 801864a:	79fa      	ldrb	r2, [r7, #7]
 801864c:	4922      	ldr	r1, [pc, #136]	; (80186d8 <Com_Get_Byte+0xf8>)
 801864e:	4613      	mov	r3, r2
 8018650:	025b      	lsls	r3, r3, #9
 8018652:	4413      	add	r3, r2
 8018654:	009b      	lsls	r3, r3, #2
 8018656:	440b      	add	r3, r1
 8018658:	3302      	adds	r3, #2
 801865a:	2200      	movs	r2, #0
 801865c:	801a      	strh	r2, [r3, #0]
 801865e:	e034      	b.n	80186ca <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8018660:	79f9      	ldrb	r1, [r7, #7]
 8018662:	79fa      	ldrb	r2, [r7, #7]
 8018664:	481d      	ldr	r0, [pc, #116]	; (80186dc <Com_Get_Byte+0xfc>)
 8018666:	4613      	mov	r3, r2
 8018668:	021b      	lsls	r3, r3, #8
 801866a:	4413      	add	r3, r2
 801866c:	009b      	lsls	r3, r3, #2
 801866e:	4403      	add	r3, r0
 8018670:	3302      	adds	r3, #2
 8018672:	8818      	ldrh	r0, [r3, #0]
 8018674:	1c43      	adds	r3, r0, #1
 8018676:	b29d      	uxth	r5, r3
 8018678:	4c18      	ldr	r4, [pc, #96]	; (80186dc <Com_Get_Byte+0xfc>)
 801867a:	4613      	mov	r3, r2
 801867c:	021b      	lsls	r3, r3, #8
 801867e:	4413      	add	r3, r2
 8018680:	009b      	lsls	r3, r3, #2
 8018682:	4423      	add	r3, r4
 8018684:	3302      	adds	r3, #2
 8018686:	462a      	mov	r2, r5
 8018688:	801a      	strh	r2, [r3, #0]
 801868a:	4a14      	ldr	r2, [pc, #80]	; (80186dc <Com_Get_Byte+0xfc>)
 801868c:	460b      	mov	r3, r1
 801868e:	021b      	lsls	r3, r3, #8
 8018690:	440b      	add	r3, r1
 8018692:	009b      	lsls	r3, r3, #2
 8018694:	4413      	add	r3, r2
 8018696:	4403      	add	r3, r0
 8018698:	3304      	adds	r3, #4
 801869a:	781b      	ldrb	r3, [r3, #0]
 801869c:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 801869e:	79fa      	ldrb	r2, [r7, #7]
 80186a0:	490e      	ldr	r1, [pc, #56]	; (80186dc <Com_Get_Byte+0xfc>)
 80186a2:	4613      	mov	r3, r2
 80186a4:	021b      	lsls	r3, r3, #8
 80186a6:	4413      	add	r3, r2
 80186a8:	009b      	lsls	r3, r3, #2
 80186aa:	440b      	add	r3, r1
 80186ac:	3302      	adds	r3, #2
 80186ae:	881b      	ldrh	r3, [r3, #0]
 80186b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80186b4:	d309      	bcc.n	80186ca <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 80186b6:	79fa      	ldrb	r2, [r7, #7]
 80186b8:	4908      	ldr	r1, [pc, #32]	; (80186dc <Com_Get_Byte+0xfc>)
 80186ba:	4613      	mov	r3, r2
 80186bc:	021b      	lsls	r3, r3, #8
 80186be:	4413      	add	r3, r2
 80186c0:	009b      	lsls	r3, r3, #2
 80186c2:	440b      	add	r3, r1
 80186c4:	3302      	adds	r3, #2
 80186c6:	2200      	movs	r2, #0
 80186c8:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 80186ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	3714      	adds	r7, #20
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bcb0      	pop	{r4, r5, r7}
 80186d4:	4770      	bx	lr
 80186d6:	bf00      	nop
 80186d8:	2000cf4c 	.word	0x2000cf4c
 80186dc:	2000bf3c 	.word	0x2000bf3c

080186e0 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b084      	sub	sp, #16
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	4603      	mov	r3, r0
 80186e8:	6039      	str	r1, [r7, #0]
 80186ea:	71fb      	strb	r3, [r7, #7]
 80186ec:	4613      	mov	r3, r2
 80186ee:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 80186f0:	2300      	movs	r3, #0
 80186f2:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80186f4:	2300      	movs	r3, #0
 80186f6:	81fb      	strh	r3, [r7, #14]
 80186f8:	e03a      	b.n	8018770 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 80186fa:	89fb      	ldrh	r3, [r7, #14]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d00a      	beq.n	8018716 <CommTransmitMessage+0x36>
 8018700:	89fb      	ldrh	r3, [r7, #14]
 8018702:	683a      	ldr	r2, [r7, #0]
 8018704:	4413      	add	r3, r2
 8018706:	781b      	ldrb	r3, [r3, #0]
 8018708:	2b24      	cmp	r3, #36	; 0x24
 801870a:	d104      	bne.n	8018716 <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 801870c:	79fb      	ldrb	r3, [r7, #7]
 801870e:	2105      	movs	r1, #5
 8018710:	4618      	mov	r0, r3
 8018712:	f000 f835 	bl	8018780 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8018716:	89fb      	ldrh	r3, [r7, #14]
 8018718:	2b00      	cmp	r3, #0
 801871a:	d00e      	beq.n	801873a <CommTransmitMessage+0x5a>
 801871c:	89fa      	ldrh	r2, [r7, #14]
 801871e:	88bb      	ldrh	r3, [r7, #4]
 8018720:	429a      	cmp	r2, r3
 8018722:	d20a      	bcs.n	801873a <CommTransmitMessage+0x5a>
 8018724:	89fb      	ldrh	r3, [r7, #14]
 8018726:	683a      	ldr	r2, [r7, #0]
 8018728:	4413      	add	r3, r2
 801872a:	781b      	ldrb	r3, [r3, #0]
 801872c:	2b05      	cmp	r3, #5
 801872e:	d104      	bne.n	801873a <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8018730:	79fb      	ldrb	r3, [r7, #7]
 8018732:	2105      	movs	r1, #5
 8018734:	4618      	mov	r0, r3
 8018736:	f000 f823 	bl	8018780 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801873a:	89fb      	ldrh	r3, [r7, #14]
 801873c:	683a      	ldr	r2, [r7, #0]
 801873e:	4413      	add	r3, r2
 8018740:	781b      	ldrb	r3, [r3, #0]
 8018742:	2b26      	cmp	r3, #38	; 0x26
 8018744:	d108      	bne.n	8018758 <CommTransmitMessage+0x78>
 8018746:	89fa      	ldrh	r2, [r7, #14]
 8018748:	88bb      	ldrh	r3, [r7, #4]
 801874a:	429a      	cmp	r2, r3
 801874c:	d004      	beq.n	8018758 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 801874e:	79fb      	ldrb	r3, [r7, #7]
 8018750:	2105      	movs	r1, #5
 8018752:	4618      	mov	r0, r3
 8018754:	f000 f814 	bl	8018780 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8018758:	89fb      	ldrh	r3, [r7, #14]
 801875a:	683a      	ldr	r2, [r7, #0]
 801875c:	4413      	add	r3, r2
 801875e:	781a      	ldrb	r2, [r3, #0]
 8018760:	79fb      	ldrb	r3, [r7, #7]
 8018762:	4611      	mov	r1, r2
 8018764:	4618      	mov	r0, r3
 8018766:	f000 f80b 	bl	8018780 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801876a:	89fb      	ldrh	r3, [r7, #14]
 801876c:	3301      	adds	r3, #1
 801876e:	81fb      	strh	r3, [r7, #14]
 8018770:	89fa      	ldrh	r2, [r7, #14]
 8018772:	88bb      	ldrh	r3, [r7, #4]
 8018774:	429a      	cmp	r2, r3
 8018776:	d9c0      	bls.n	80186fa <CommTransmitMessage+0x1a>
	}

	return;
 8018778:	bf00      	nop
}
 801877a:	3710      	adds	r7, #16
 801877c:	46bd      	mov	sp, r7
 801877e:	bd80      	pop	{r7, pc}

08018780 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b084      	sub	sp, #16
 8018784:	af00      	add	r7, sp, #0
 8018786:	4603      	mov	r3, r0
 8018788:	460a      	mov	r2, r1
 801878a:	71fb      	strb	r3, [r7, #7]
 801878c:	4613      	mov	r3, r2
 801878e:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8018790:	1dbb      	adds	r3, r7, #6
 8018792:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8018794:	79fb      	ldrb	r3, [r7, #7]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d107      	bne.n	80187aa <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 801879a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801879e:	2201      	movs	r2, #1
 80187a0:	68f9      	ldr	r1, [r7, #12]
 80187a2:	4816      	ldr	r0, [pc, #88]	; (80187fc <Com_SendByte+0x7c>)
 80187a4:	f005 ff18 	bl	801e5d8 <HAL_UART_Transmit>
 80187a8:	e01f      	b.n	80187ea <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 80187aa:	79fb      	ldrb	r3, [r7, #7]
 80187ac:	2b01      	cmp	r3, #1
 80187ae:	d107      	bne.n	80187c0 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80187b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187b4:	2201      	movs	r2, #1
 80187b6:	68f9      	ldr	r1, [r7, #12]
 80187b8:	4811      	ldr	r0, [pc, #68]	; (8018800 <Com_SendByte+0x80>)
 80187ba:	f005 ff0d 	bl	801e5d8 <HAL_UART_Transmit>
 80187be:	e014      	b.n	80187ea <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 80187c0:	79fb      	ldrb	r3, [r7, #7]
 80187c2:	2b02      	cmp	r3, #2
 80187c4:	d107      	bne.n	80187d6 <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 80187c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187ca:	2201      	movs	r2, #1
 80187cc:	68f9      	ldr	r1, [r7, #12]
 80187ce:	480d      	ldr	r0, [pc, #52]	; (8018804 <Com_SendByte+0x84>)
 80187d0:	f005 ff02 	bl	801e5d8 <HAL_UART_Transmit>
 80187d4:	e009      	b.n	80187ea <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 80187d6:	79fb      	ldrb	r3, [r7, #7]
 80187d8:	2b03      	cmp	r3, #3
 80187da:	d106      	bne.n	80187ea <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 80187dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80187e0:	2201      	movs	r2, #1
 80187e2:	68f9      	ldr	r1, [r7, #12]
 80187e4:	4808      	ldr	r0, [pc, #32]	; (8018808 <Com_SendByte+0x88>)
 80187e6:	f005 fef7 	bl	801e5d8 <HAL_UART_Transmit>
	}

	ptr=NULL;
 80187ea:	2300      	movs	r3, #0
 80187ec:	60fb      	str	r3, [r7, #12]
	free(ptr);
 80187ee:	68f8      	ldr	r0, [r7, #12]
 80187f0:	f00d f80c 	bl	802580c <free>
}
 80187f4:	bf00      	nop
 80187f6:	3710      	adds	r7, #16
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}
 80187fc:	2000db78 	.word	0x2000db78
 8018800:	2000da08 	.word	0x2000da08
 8018804:	2000dac0 	.word	0x2000dac0
 8018808:	2000d950 	.word	0x2000d950

0801880c <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018810:	2280      	movs	r2, #128	; 0x80
 8018812:	490a      	ldr	r1, [pc, #40]	; (801883c <Enable_UART_Interrupts+0x30>)
 8018814:	480a      	ldr	r0, [pc, #40]	; (8018840 <Enable_UART_Interrupts+0x34>)
 8018816:	f007 f9ed 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801881a:	2280      	movs	r2, #128	; 0x80
 801881c:	4909      	ldr	r1, [pc, #36]	; (8018844 <Enable_UART_Interrupts+0x38>)
 801881e:	480a      	ldr	r0, [pc, #40]	; (8018848 <Enable_UART_Interrupts+0x3c>)
 8018820:	f007 f9e8 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018824:	2280      	movs	r2, #128	; 0x80
 8018826:	4909      	ldr	r1, [pc, #36]	; (801884c <Enable_UART_Interrupts+0x40>)
 8018828:	4809      	ldr	r0, [pc, #36]	; (8018850 <Enable_UART_Interrupts+0x44>)
 801882a:	f007 f9e3 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801882e:	2280      	movs	r2, #128	; 0x80
 8018830:	4908      	ldr	r1, [pc, #32]	; (8018854 <Enable_UART_Interrupts+0x48>)
 8018832:	4809      	ldr	r0, [pc, #36]	; (8018858 <Enable_UART_Interrupts+0x4c>)
 8018834:	f007 f9de 	bl	801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8018838:	bf00      	nop
 801883a:	bd80      	pop	{r7, pc}
 801883c:	2000d750 	.word	0x2000d750
 8018840:	2000db78 	.word	0x2000db78
 8018844:	2000d7d0 	.word	0x2000d7d0
 8018848:	2000da08 	.word	0x2000da08
 801884c:	2000d850 	.word	0x2000d850
 8018850:	2000dac0 	.word	0x2000dac0
 8018854:	2000d8d0 	.word	0x2000d8d0
 8018858:	2000d950 	.word	0x2000d950

0801885c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801885c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018894 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8018860:	480d      	ldr	r0, [pc, #52]	; (8018898 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8018862:	490e      	ldr	r1, [pc, #56]	; (801889c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8018864:	4a0e      	ldr	r2, [pc, #56]	; (80188a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8018866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018868:	e002      	b.n	8018870 <LoopCopyDataInit>

0801886a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801886a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 801886c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801886e:	3304      	adds	r3, #4

08018870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018874:	d3f9      	bcc.n	801886a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018876:	4a0b      	ldr	r2, [pc, #44]	; (80188a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8018878:	4c0b      	ldr	r4, [pc, #44]	; (80188a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 801887a:	2300      	movs	r3, #0
  b LoopFillZerobss
 801887c:	e001      	b.n	8018882 <LoopFillZerobss>

0801887e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801887e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018880:	3204      	adds	r2, #4

08018882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018884:	d3fb      	bcc.n	801887e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018886:	f7ff fb3f 	bl	8017f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801888a:	f00c ff93 	bl	80257b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801888e:	f7fe f9e9 	bl	8016c64 <main>
  bx  lr    
 8018892:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018894:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8018898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 801889c:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 80188a0:	0802d0cc 	.word	0x0802d0cc
  ldr r2, =_sbss
 80188a4:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 80188a8:	200161d8 	.word	0x200161d8

080188ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80188ac:	e7fe      	b.n	80188ac <ADC_IRQHandler>

080188ae <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80188ae:	b480      	push	{r7}
 80188b0:	b083      	sub	sp, #12
 80188b2:	af00      	add	r7, sp, #0
 80188b4:	6078      	str	r0, [r7, #4]
 80188b6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80188b8:	687b      	ldr	r3, [r7, #4]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d00b      	beq.n	80188d6 <DP83848_RegisterBusIO+0x28>
 80188be:	683b      	ldr	r3, [r7, #0]
 80188c0:	68db      	ldr	r3, [r3, #12]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d007      	beq.n	80188d6 <DP83848_RegisterBusIO+0x28>
 80188c6:	683b      	ldr	r3, [r7, #0]
 80188c8:	689b      	ldr	r3, [r3, #8]
 80188ca:	2b00      	cmp	r3, #0
 80188cc:	d003      	beq.n	80188d6 <DP83848_RegisterBusIO+0x28>
 80188ce:	683b      	ldr	r3, [r7, #0]
 80188d0:	691b      	ldr	r3, [r3, #16]
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d102      	bne.n	80188dc <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80188d6:	f04f 33ff 	mov.w	r3, #4294967295
 80188da:	e014      	b.n	8018906 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80188dc:	683b      	ldr	r3, [r7, #0]
 80188de:	681a      	ldr	r2, [r3, #0]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80188e4:	683b      	ldr	r3, [r7, #0]
 80188e6:	685a      	ldr	r2, [r3, #4]
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80188ec:	683b      	ldr	r3, [r7, #0]
 80188ee:	68da      	ldr	r2, [r3, #12]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80188f4:	683b      	ldr	r3, [r7, #0]
 80188f6:	689a      	ldr	r2, [r3, #8]
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	691a      	ldr	r2, [r3, #16]
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8018904:	2300      	movs	r3, #0
}
 8018906:	4618      	mov	r0, r3
 8018908:	370c      	adds	r7, #12
 801890a:	46bd      	mov	sp, r7
 801890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018910:	4770      	bx	lr

08018912 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8018912:	b580      	push	{r7, lr}
 8018914:	b086      	sub	sp, #24
 8018916:	af00      	add	r7, sp, #0
 8018918:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801891a:	2300      	movs	r3, #0
 801891c:	60fb      	str	r3, [r7, #12]
 801891e:	2300      	movs	r3, #0
 8018920:	60bb      	str	r3, [r7, #8]
 8018922:	2300      	movs	r3, #0
 8018924:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8018926:	2300      	movs	r3, #0
 8018928:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	685b      	ldr	r3, [r3, #4]
 801892e:	2b00      	cmp	r3, #0
 8018930:	d17c      	bne.n	8018a2c <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	689b      	ldr	r3, [r3, #8]
 8018936:	2b00      	cmp	r3, #0
 8018938:	d002      	beq.n	8018940 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	689b      	ldr	r3, [r3, #8]
 801893e:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8018940:	687b      	ldr	r3, [r7, #4]
 8018942:	2220      	movs	r2, #32
 8018944:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8018946:	2300      	movs	r3, #0
 8018948:	617b      	str	r3, [r7, #20]
 801894a:	e01c      	b.n	8018986 <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 801894c:	687b      	ldr	r3, [r7, #4]
 801894e:	695b      	ldr	r3, [r3, #20]
 8018950:	f107 0208 	add.w	r2, r7, #8
 8018954:	2119      	movs	r1, #25
 8018956:	6978      	ldr	r0, [r7, #20]
 8018958:	4798      	blx	r3
 801895a:	4603      	mov	r3, r0
 801895c:	2b00      	cmp	r3, #0
 801895e:	da03      	bge.n	8018968 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8018960:	f06f 0304 	mvn.w	r3, #4
 8018964:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8018966:	e00b      	b.n	8018980 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8018968:	68bb      	ldr	r3, [r7, #8]
 801896a:	f003 031f 	and.w	r3, r3, #31
 801896e:	697a      	ldr	r2, [r7, #20]
 8018970:	429a      	cmp	r2, r3
 8018972:	d105      	bne.n	8018980 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8018974:	687b      	ldr	r3, [r7, #4]
 8018976:	697a      	ldr	r2, [r7, #20]
 8018978:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801897a:	2300      	movs	r3, #0
 801897c:	613b      	str	r3, [r7, #16]
         break;
 801897e:	e005      	b.n	801898c <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8018980:	697b      	ldr	r3, [r7, #20]
 8018982:	3301      	adds	r3, #1
 8018984:	617b      	str	r3, [r7, #20]
 8018986:	697b      	ldr	r3, [r7, #20]
 8018988:	2b1f      	cmp	r3, #31
 801898a:	d9df      	bls.n	801894c <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	681b      	ldr	r3, [r3, #0]
 8018990:	2b1f      	cmp	r3, #31
 8018992:	d902      	bls.n	801899a <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8018994:	f06f 0302 	mvn.w	r3, #2
 8018998:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	2b00      	cmp	r3, #0
 801899e:	d145      	bne.n	8018a2c <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	691b      	ldr	r3, [r3, #16]
 80189a4:	687a      	ldr	r2, [r7, #4]
 80189a6:	6810      	ldr	r0, [r2, #0]
 80189a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80189ac:	2100      	movs	r1, #0
 80189ae:	4798      	blx	r3
 80189b0:	4603      	mov	r3, r0
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	db37      	blt.n	8018a26 <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	695b      	ldr	r3, [r3, #20]
 80189ba:	687a      	ldr	r2, [r7, #4]
 80189bc:	6810      	ldr	r0, [r2, #0]
 80189be:	f107 0208 	add.w	r2, r7, #8
 80189c2:	2100      	movs	r1, #0
 80189c4:	4798      	blx	r3
 80189c6:	4603      	mov	r3, r0
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	db28      	blt.n	8018a1e <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80189cc:	687b      	ldr	r3, [r7, #4]
 80189ce:	699b      	ldr	r3, [r3, #24]
 80189d0:	4798      	blx	r3
 80189d2:	4603      	mov	r3, r0
 80189d4:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80189d6:	e01c      	b.n	8018a12 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	699b      	ldr	r3, [r3, #24]
 80189dc:	4798      	blx	r3
 80189de:	4603      	mov	r3, r0
 80189e0:	461a      	mov	r2, r3
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	1ad3      	subs	r3, r2, r3
 80189e6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80189ea:	d80e      	bhi.n	8018a0a <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	695b      	ldr	r3, [r3, #20]
 80189f0:	687a      	ldr	r2, [r7, #4]
 80189f2:	6810      	ldr	r0, [r2, #0]
 80189f4:	f107 0208 	add.w	r2, r7, #8
 80189f8:	2100      	movs	r1, #0
 80189fa:	4798      	blx	r3
 80189fc:	4603      	mov	r3, r0
 80189fe:	2b00      	cmp	r3, #0
 8018a00:	da07      	bge.n	8018a12 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8018a02:	f06f 0304 	mvn.w	r3, #4
 8018a06:	613b      	str	r3, [r7, #16]
                 break;
 8018a08:	e010      	b.n	8018a2c <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8018a0a:	f06f 0301 	mvn.w	r3, #1
 8018a0e:	613b      	str	r3, [r7, #16]
               break;
 8018a10:	e00c      	b.n	8018a2c <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8018a12:	68bb      	ldr	r3, [r7, #8]
 8018a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d1dd      	bne.n	80189d8 <DP83848_Init+0xc6>
 8018a1c:	e006      	b.n	8018a2c <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8018a1e:	f06f 0304 	mvn.w	r3, #4
 8018a22:	613b      	str	r3, [r7, #16]
 8018a24:	e002      	b.n	8018a2c <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8018a26:	f06f 0303 	mvn.w	r3, #3
 8018a2a:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8018a2c:	693b      	ldr	r3, [r7, #16]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d112      	bne.n	8018a58 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	699b      	ldr	r3, [r3, #24]
 8018a36:	4798      	blx	r3
 8018a38:	4603      	mov	r3, r0
 8018a3a:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8018a3c:	bf00      	nop
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	699b      	ldr	r3, [r3, #24]
 8018a42:	4798      	blx	r3
 8018a44:	4603      	mov	r3, r0
 8018a46:	461a      	mov	r2, r3
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	1ad3      	subs	r3, r2, r3
 8018a4c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8018a50:	d9f5      	bls.n	8018a3e <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8018a52:	687b      	ldr	r3, [r7, #4]
 8018a54:	2201      	movs	r2, #1
 8018a56:	605a      	str	r2, [r3, #4]
   }

   return status;
 8018a58:	693b      	ldr	r3, [r7, #16]
 }
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	3718      	adds	r7, #24
 8018a5e:	46bd      	mov	sp, r7
 8018a60:	bd80      	pop	{r7, pc}

08018a62 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8018a62:	b580      	push	{r7, lr}
 8018a64:	b084      	sub	sp, #16
 8018a66:	af00      	add	r7, sp, #0
 8018a68:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8018a6a:	2300      	movs	r3, #0
 8018a6c:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	695b      	ldr	r3, [r3, #20]
 8018a72:	687a      	ldr	r2, [r7, #4]
 8018a74:	6810      	ldr	r0, [r2, #0]
 8018a76:	f107 020c 	add.w	r2, r7, #12
 8018a7a:	2101      	movs	r1, #1
 8018a7c:	4798      	blx	r3
 8018a7e:	4603      	mov	r3, r0
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	da02      	bge.n	8018a8a <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8018a84:	f06f 0304 	mvn.w	r3, #4
 8018a88:	e06e      	b.n	8018b68 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	695b      	ldr	r3, [r3, #20]
 8018a8e:	687a      	ldr	r2, [r7, #4]
 8018a90:	6810      	ldr	r0, [r2, #0]
 8018a92:	f107 020c 	add.w	r2, r7, #12
 8018a96:	2101      	movs	r1, #1
 8018a98:	4798      	blx	r3
 8018a9a:	4603      	mov	r3, r0
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	da02      	bge.n	8018aa6 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8018aa0:	f06f 0304 	mvn.w	r3, #4
 8018aa4:	e060      	b.n	8018b68 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8018aa6:	68fb      	ldr	r3, [r7, #12]
 8018aa8:	f003 0304 	and.w	r3, r3, #4
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	d101      	bne.n	8018ab4 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8018ab0:	2301      	movs	r3, #1
 8018ab2:	e059      	b.n	8018b68 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	695b      	ldr	r3, [r3, #20]
 8018ab8:	687a      	ldr	r2, [r7, #4]
 8018aba:	6810      	ldr	r0, [r2, #0]
 8018abc:	f107 020c 	add.w	r2, r7, #12
 8018ac0:	2100      	movs	r1, #0
 8018ac2:	4798      	blx	r3
 8018ac4:	4603      	mov	r3, r0
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	da02      	bge.n	8018ad0 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8018aca:	f06f 0304 	mvn.w	r3, #4
 8018ace:	e04b      	b.n	8018b68 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d11b      	bne.n	8018b12 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d006      	beq.n	8018af2 <DP83848_GetLinkState+0x90>
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018aea:	2b00      	cmp	r3, #0
 8018aec:	d001      	beq.n	8018af2 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8018aee:	2302      	movs	r3, #2
 8018af0:	e03a      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d001      	beq.n	8018b00 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8018afc:	2303      	movs	r3, #3
 8018afe:	e033      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d001      	beq.n	8018b0e <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8018b0a:	2304      	movs	r3, #4
 8018b0c:	e02c      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8018b0e:	2305      	movs	r3, #5
 8018b10:	e02a      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8018b12:	687b      	ldr	r3, [r7, #4]
 8018b14:	695b      	ldr	r3, [r3, #20]
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	6810      	ldr	r0, [r2, #0]
 8018b1a:	f107 020c 	add.w	r2, r7, #12
 8018b1e:	2110      	movs	r1, #16
 8018b20:	4798      	blx	r3
 8018b22:	4603      	mov	r3, r0
 8018b24:	2b00      	cmp	r3, #0
 8018b26:	da02      	bge.n	8018b2e <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8018b28:	f06f 0304 	mvn.w	r3, #4
 8018b2c:	e01c      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	d101      	bne.n	8018b3c <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8018b38:	2306      	movs	r3, #6
 8018b3a:	e015      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	f003 0306 	and.w	r3, r3, #6
 8018b42:	2b04      	cmp	r3, #4
 8018b44:	d101      	bne.n	8018b4a <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8018b46:	2302      	movs	r3, #2
 8018b48:	e00e      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	f003 0306 	and.w	r3, r3, #6
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d101      	bne.n	8018b58 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8018b54:	2303      	movs	r3, #3
 8018b56:	e007      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	f003 0306 	and.w	r3, r3, #6
 8018b5e:	2b06      	cmp	r3, #6
 8018b60:	d101      	bne.n	8018b66 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8018b62:	2304      	movs	r3, #4
 8018b64:	e000      	b.n	8018b68 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8018b66:	2305      	movs	r3, #5
    }
  }
}
 8018b68:	4618      	mov	r0, r3
 8018b6a:	3710      	adds	r7, #16
 8018b6c:	46bd      	mov	sp, r7
 8018b6e:	bd80      	pop	{r7, pc}

08018b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8018b74:	4b0b      	ldr	r3, [pc, #44]	; (8018ba4 <HAL_Init+0x34>)
 8018b76:	681b      	ldr	r3, [r3, #0]
 8018b78:	4a0a      	ldr	r2, [pc, #40]	; (8018ba4 <HAL_Init+0x34>)
 8018b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018b7e:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8018b80:	4b08      	ldr	r3, [pc, #32]	; (8018ba4 <HAL_Init+0x34>)
 8018b82:	681b      	ldr	r3, [r3, #0]
 8018b84:	4a07      	ldr	r2, [pc, #28]	; (8018ba4 <HAL_Init+0x34>)
 8018b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018b8c:	2003      	movs	r0, #3
 8018b8e:	f000 ff31 	bl	80199f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8018b92:	2007      	movs	r0, #7
 8018b94:	f000 f808 	bl	8018ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8018b98:	f7ff f80e 	bl	8017bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8018b9c:	2300      	movs	r3, #0
}
 8018b9e:	4618      	mov	r0, r3
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	40023c00 	.word	0x40023c00

08018ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8018ba8:	b580      	push	{r7, lr}
 8018baa:	b082      	sub	sp, #8
 8018bac:	af00      	add	r7, sp, #0
 8018bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8018bb0:	4b12      	ldr	r3, [pc, #72]	; (8018bfc <HAL_InitTick+0x54>)
 8018bb2:	681a      	ldr	r2, [r3, #0]
 8018bb4:	4b12      	ldr	r3, [pc, #72]	; (8018c00 <HAL_InitTick+0x58>)
 8018bb6:	781b      	ldrb	r3, [r3, #0]
 8018bb8:	4619      	mov	r1, r3
 8018bba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8018bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8018bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8018bc6:	4618      	mov	r0, r3
 8018bc8:	f000 ff49 	bl	8019a5e <HAL_SYSTICK_Config>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	2b00      	cmp	r3, #0
 8018bd0:	d001      	beq.n	8018bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8018bd2:	2301      	movs	r3, #1
 8018bd4:	e00e      	b.n	8018bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	2b0f      	cmp	r3, #15
 8018bda:	d80a      	bhi.n	8018bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8018bdc:	2200      	movs	r2, #0
 8018bde:	6879      	ldr	r1, [r7, #4]
 8018be0:	f04f 30ff 	mov.w	r0, #4294967295
 8018be4:	f000 ff11 	bl	8019a0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8018be8:	4a06      	ldr	r2, [pc, #24]	; (8018c04 <HAL_InitTick+0x5c>)
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8018bee:	2300      	movs	r3, #0
 8018bf0:	e000      	b.n	8018bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8018bf2:	2301      	movs	r3, #1
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}
 8018bfc:	2000031c 	.word	0x2000031c
 8018c00:	20000324 	.word	0x20000324
 8018c04:	20000320 	.word	0x20000320

08018c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8018c08:	b480      	push	{r7}
 8018c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8018c0c:	4b06      	ldr	r3, [pc, #24]	; (8018c28 <HAL_IncTick+0x20>)
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	461a      	mov	r2, r3
 8018c12:	4b06      	ldr	r3, [pc, #24]	; (8018c2c <HAL_IncTick+0x24>)
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	4413      	add	r3, r2
 8018c18:	4a04      	ldr	r2, [pc, #16]	; (8018c2c <HAL_IncTick+0x24>)
 8018c1a:	6013      	str	r3, [r2, #0]
}
 8018c1c:	bf00      	nop
 8018c1e:	46bd      	mov	sp, r7
 8018c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c24:	4770      	bx	lr
 8018c26:	bf00      	nop
 8018c28:	20000324 	.word	0x20000324
 8018c2c:	2000dc30 	.word	0x2000dc30

08018c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8018c30:	b480      	push	{r7}
 8018c32:	af00      	add	r7, sp, #0
  return uwTick;
 8018c34:	4b03      	ldr	r3, [pc, #12]	; (8018c44 <HAL_GetTick+0x14>)
 8018c36:	681b      	ldr	r3, [r3, #0]
}
 8018c38:	4618      	mov	r0, r3
 8018c3a:	46bd      	mov	sp, r7
 8018c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c40:	4770      	bx	lr
 8018c42:	bf00      	nop
 8018c44:	2000dc30 	.word	0x2000dc30

08018c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8018c50:	f7ff ffee 	bl	8018c30 <HAL_GetTick>
 8018c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018c60:	d005      	beq.n	8018c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8018c62:	4b0a      	ldr	r3, [pc, #40]	; (8018c8c <HAL_Delay+0x44>)
 8018c64:	781b      	ldrb	r3, [r3, #0]
 8018c66:	461a      	mov	r2, r3
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	4413      	add	r3, r2
 8018c6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8018c6e:	bf00      	nop
 8018c70:	f7ff ffde 	bl	8018c30 <HAL_GetTick>
 8018c74:	4602      	mov	r2, r0
 8018c76:	68bb      	ldr	r3, [r7, #8]
 8018c78:	1ad3      	subs	r3, r2, r3
 8018c7a:	68fa      	ldr	r2, [r7, #12]
 8018c7c:	429a      	cmp	r2, r3
 8018c7e:	d8f7      	bhi.n	8018c70 <HAL_Delay+0x28>
  {
  }
}
 8018c80:	bf00      	nop
 8018c82:	bf00      	nop
 8018c84:	3710      	adds	r7, #16
 8018c86:	46bd      	mov	sp, r7
 8018c88:	bd80      	pop	{r7, pc}
 8018c8a:	bf00      	nop
 8018c8c:	20000324 	.word	0x20000324

08018c90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8018c90:	b580      	push	{r7, lr}
 8018c92:	b084      	sub	sp, #16
 8018c94:	af00      	add	r7, sp, #0
 8018c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	2b00      	cmp	r3, #0
 8018c9c:	d101      	bne.n	8018ca2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	e11c      	b.n	8018edc <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018ca8:	b2db      	uxtb	r3, r3
 8018caa:	2b00      	cmp	r3, #0
 8018cac:	d131      	bne.n	8018d12 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	4a8c      	ldr	r2, [pc, #560]	; (8018ee4 <HAL_CAN_Init+0x254>)
 8018cb2:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	4a8c      	ldr	r2, [pc, #560]	; (8018ee8 <HAL_CAN_Init+0x258>)
 8018cb8:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	4a8b      	ldr	r2, [pc, #556]	; (8018eec <HAL_CAN_Init+0x25c>)
 8018cbe:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	4a8b      	ldr	r2, [pc, #556]	; (8018ef0 <HAL_CAN_Init+0x260>)
 8018cc4:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8018cc6:	687b      	ldr	r3, [r7, #4]
 8018cc8:	4a8a      	ldr	r2, [pc, #552]	; (8018ef4 <HAL_CAN_Init+0x264>)
 8018cca:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	4a8a      	ldr	r2, [pc, #552]	; (8018ef8 <HAL_CAN_Init+0x268>)
 8018cd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	4a89      	ldr	r2, [pc, #548]	; (8018efc <HAL_CAN_Init+0x26c>)
 8018cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	4a89      	ldr	r2, [pc, #548]	; (8018f00 <HAL_CAN_Init+0x270>)
 8018cdc:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	4a88      	ldr	r2, [pc, #544]	; (8018f04 <HAL_CAN_Init+0x274>)
 8018ce2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	4a88      	ldr	r2, [pc, #544]	; (8018f08 <HAL_CAN_Init+0x278>)
 8018ce8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	4a87      	ldr	r2, [pc, #540]	; (8018f0c <HAL_CAN_Init+0x27c>)
 8018cee:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	4a87      	ldr	r2, [pc, #540]	; (8018f10 <HAL_CAN_Init+0x280>)
 8018cf4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	4a86      	ldr	r2, [pc, #536]	; (8018f14 <HAL_CAN_Init+0x284>)
 8018cfa:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d102      	bne.n	8018d0a <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8018d04:	687b      	ldr	r3, [r7, #4]
 8018d06:	4a84      	ldr	r2, [pc, #528]	; (8018f18 <HAL_CAN_Init+0x288>)
 8018d08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d0e:	6878      	ldr	r0, [r7, #4]
 8018d10:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	681a      	ldr	r2, [r3, #0]
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	681b      	ldr	r3, [r3, #0]
 8018d1c:	f042 0201 	orr.w	r2, r2, #1
 8018d20:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018d22:	f7ff ff85 	bl	8018c30 <HAL_GetTick>
 8018d26:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8018d28:	e012      	b.n	8018d50 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8018d2a:	f7ff ff81 	bl	8018c30 <HAL_GetTick>
 8018d2e:	4602      	mov	r2, r0
 8018d30:	68fb      	ldr	r3, [r7, #12]
 8018d32:	1ad3      	subs	r3, r2, r3
 8018d34:	2b0a      	cmp	r3, #10
 8018d36:	d90b      	bls.n	8018d50 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d3c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2205      	movs	r2, #5
 8018d48:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8018d4c:	2301      	movs	r3, #1
 8018d4e:	e0c5      	b.n	8018edc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	681b      	ldr	r3, [r3, #0]
 8018d54:	685b      	ldr	r3, [r3, #4]
 8018d56:	f003 0301 	and.w	r3, r3, #1
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d0e5      	beq.n	8018d2a <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	681a      	ldr	r2, [r3, #0]
 8018d64:	687b      	ldr	r3, [r7, #4]
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	f022 0202 	bic.w	r2, r2, #2
 8018d6c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8018d6e:	f7ff ff5f 	bl	8018c30 <HAL_GetTick>
 8018d72:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8018d74:	e012      	b.n	8018d9c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8018d76:	f7ff ff5b 	bl	8018c30 <HAL_GetTick>
 8018d7a:	4602      	mov	r2, r0
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	1ad3      	subs	r3, r2, r3
 8018d80:	2b0a      	cmp	r3, #10
 8018d82:	d90b      	bls.n	8018d9c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d88:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2205      	movs	r2, #5
 8018d94:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8018d98:	2301      	movs	r3, #1
 8018d9a:	e09f      	b.n	8018edc <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	685b      	ldr	r3, [r3, #4]
 8018da2:	f003 0302 	and.w	r3, r3, #2
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d1e5      	bne.n	8018d76 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	7e1b      	ldrb	r3, [r3, #24]
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d108      	bne.n	8018dc4 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	681b      	ldr	r3, [r3, #0]
 8018db6:	681a      	ldr	r2, [r3, #0]
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8018dc0:	601a      	str	r2, [r3, #0]
 8018dc2:	e007      	b.n	8018dd4 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	681a      	ldr	r2, [r3, #0]
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018dd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	7e5b      	ldrb	r3, [r3, #25]
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d108      	bne.n	8018dee <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	681b      	ldr	r3, [r3, #0]
 8018de0:	681a      	ldr	r2, [r3, #0]
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8018dea:	601a      	str	r2, [r3, #0]
 8018dec:	e007      	b.n	8018dfe <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	681a      	ldr	r2, [r3, #0]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018dfc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	7e9b      	ldrb	r3, [r3, #26]
 8018e02:	2b01      	cmp	r3, #1
 8018e04:	d108      	bne.n	8018e18 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8018e06:	687b      	ldr	r3, [r7, #4]
 8018e08:	681b      	ldr	r3, [r3, #0]
 8018e0a:	681a      	ldr	r2, [r3, #0]
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	f042 0220 	orr.w	r2, r2, #32
 8018e14:	601a      	str	r2, [r3, #0]
 8018e16:	e007      	b.n	8018e28 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	681a      	ldr	r2, [r3, #0]
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	f022 0220 	bic.w	r2, r2, #32
 8018e26:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	7edb      	ldrb	r3, [r3, #27]
 8018e2c:	2b01      	cmp	r3, #1
 8018e2e:	d108      	bne.n	8018e42 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	681a      	ldr	r2, [r3, #0]
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	f022 0210 	bic.w	r2, r2, #16
 8018e3e:	601a      	str	r2, [r3, #0]
 8018e40:	e007      	b.n	8018e52 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8018e42:	687b      	ldr	r3, [r7, #4]
 8018e44:	681b      	ldr	r3, [r3, #0]
 8018e46:	681a      	ldr	r2, [r3, #0]
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	681b      	ldr	r3, [r3, #0]
 8018e4c:	f042 0210 	orr.w	r2, r2, #16
 8018e50:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	7f1b      	ldrb	r3, [r3, #28]
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	d108      	bne.n	8018e6c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	681a      	ldr	r2, [r3, #0]
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	681b      	ldr	r3, [r3, #0]
 8018e64:	f042 0208 	orr.w	r2, r2, #8
 8018e68:	601a      	str	r2, [r3, #0]
 8018e6a:	e007      	b.n	8018e7c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	681a      	ldr	r2, [r3, #0]
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	681b      	ldr	r3, [r3, #0]
 8018e76:	f022 0208 	bic.w	r2, r2, #8
 8018e7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	7f5b      	ldrb	r3, [r3, #29]
 8018e80:	2b01      	cmp	r3, #1
 8018e82:	d108      	bne.n	8018e96 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	681b      	ldr	r3, [r3, #0]
 8018e88:	681a      	ldr	r2, [r3, #0]
 8018e8a:	687b      	ldr	r3, [r7, #4]
 8018e8c:	681b      	ldr	r3, [r3, #0]
 8018e8e:	f042 0204 	orr.w	r2, r2, #4
 8018e92:	601a      	str	r2, [r3, #0]
 8018e94:	e007      	b.n	8018ea6 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	681b      	ldr	r3, [r3, #0]
 8018e9a:	681a      	ldr	r2, [r3, #0]
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	f022 0204 	bic.w	r2, r2, #4
 8018ea4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	689a      	ldr	r2, [r3, #8]
 8018eaa:	687b      	ldr	r3, [r7, #4]
 8018eac:	68db      	ldr	r3, [r3, #12]
 8018eae:	431a      	orrs	r2, r3
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	691b      	ldr	r3, [r3, #16]
 8018eb4:	431a      	orrs	r2, r3
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	695b      	ldr	r3, [r3, #20]
 8018eba:	ea42 0103 	orr.w	r1, r2, r3
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	685b      	ldr	r3, [r3, #4]
 8018ec2:	1e5a      	subs	r2, r3, #1
 8018ec4:	687b      	ldr	r3, [r7, #4]
 8018ec6:	681b      	ldr	r3, [r3, #0]
 8018ec8:	430a      	orrs	r2, r1
 8018eca:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8018ecc:	687b      	ldr	r3, [r7, #4]
 8018ece:	2200      	movs	r2, #0
 8018ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	2201      	movs	r2, #1
 8018ed6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8018eda:	2300      	movs	r3, #0
}
 8018edc:	4618      	mov	r0, r3
 8018ede:	3710      	adds	r7, #16
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	08010ad9 	.word	0x08010ad9
 8018ee8:	080197ef 	.word	0x080197ef
 8018eec:	08010bf5 	.word	0x08010bf5
 8018ef0:	08019803 	.word	0x08019803
 8018ef4:	08019777 	.word	0x08019777
 8018ef8:	0801978b 	.word	0x0801978b
 8018efc:	0801979f 	.word	0x0801979f
 8018f00:	080197b3 	.word	0x080197b3
 8018f04:	080197c7 	.word	0x080197c7
 8018f08:	080197db 	.word	0x080197db
 8018f0c:	08019817 	.word	0x08019817
 8018f10:	0801982b 	.word	0x0801982b
 8018f14:	0801983f 	.word	0x0801983f
 8018f18:	08010975 	.word	0x08010975

08018f1c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8018f1c:	b480      	push	{r7}
 8018f1e:	b087      	sub	sp, #28
 8018f20:	af00      	add	r7, sp, #0
 8018f22:	6078      	str	r0, [r7, #4]
 8018f24:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8018f32:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8018f34:	7cfb      	ldrb	r3, [r7, #19]
 8018f36:	2b01      	cmp	r3, #1
 8018f38:	d003      	beq.n	8018f42 <HAL_CAN_ConfigFilter+0x26>
 8018f3a:	7cfb      	ldrb	r3, [r7, #19]
 8018f3c:	2b02      	cmp	r3, #2
 8018f3e:	f040 80c7 	bne.w	80190d0 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	681b      	ldr	r3, [r3, #0]
 8018f46:	4a69      	ldr	r2, [pc, #420]	; (80190ec <HAL_CAN_ConfigFilter+0x1d0>)
 8018f48:	4293      	cmp	r3, r2
 8018f4a:	d001      	beq.n	8018f50 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8018f4c:	4b68      	ldr	r3, [pc, #416]	; (80190f0 <HAL_CAN_ConfigFilter+0x1d4>)
 8018f4e:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8018f50:	697b      	ldr	r3, [r7, #20]
 8018f52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8018f56:	f043 0201 	orr.w	r2, r3, #1
 8018f5a:	697b      	ldr	r3, [r7, #20]
 8018f5c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8018f60:	697b      	ldr	r3, [r7, #20]
 8018f62:	4a63      	ldr	r2, [pc, #396]	; (80190f0 <HAL_CAN_ConfigFilter+0x1d4>)
 8018f64:	4293      	cmp	r3, r2
 8018f66:	d111      	bne.n	8018f8c <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8018f68:	697b      	ldr	r3, [r7, #20]
 8018f6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8018f6e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8018f72:	697b      	ldr	r3, [r7, #20]
 8018f74:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8018f78:	697b      	ldr	r3, [r7, #20]
 8018f7a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8018f7e:	683b      	ldr	r3, [r7, #0]
 8018f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f82:	021b      	lsls	r3, r3, #8
 8018f84:	431a      	orrs	r2, r3
 8018f86:	697b      	ldr	r3, [r7, #20]
 8018f88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8018f8c:	683b      	ldr	r3, [r7, #0]
 8018f8e:	695b      	ldr	r3, [r3, #20]
 8018f90:	f003 031f 	and.w	r3, r3, #31
 8018f94:	2201      	movs	r2, #1
 8018f96:	fa02 f303 	lsl.w	r3, r2, r3
 8018f9a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8018f9c:	697b      	ldr	r3, [r7, #20]
 8018f9e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8018fa2:	68fb      	ldr	r3, [r7, #12]
 8018fa4:	43db      	mvns	r3, r3
 8018fa6:	401a      	ands	r2, r3
 8018fa8:	697b      	ldr	r3, [r7, #20]
 8018faa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8018fae:	683b      	ldr	r3, [r7, #0]
 8018fb0:	69db      	ldr	r3, [r3, #28]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d123      	bne.n	8018ffe <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8018fb6:	697b      	ldr	r3, [r7, #20]
 8018fb8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	43db      	mvns	r3, r3
 8018fc0:	401a      	ands	r2, r3
 8018fc2:	697b      	ldr	r3, [r7, #20]
 8018fc4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8018fc8:	683b      	ldr	r3, [r7, #0]
 8018fca:	68db      	ldr	r3, [r3, #12]
 8018fcc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	685b      	ldr	r3, [r3, #4]
 8018fd2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8018fd4:	683a      	ldr	r2, [r7, #0]
 8018fd6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8018fd8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8018fda:	697b      	ldr	r3, [r7, #20]
 8018fdc:	3248      	adds	r2, #72	; 0x48
 8018fde:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	689b      	ldr	r3, [r3, #8]
 8018fe6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	681b      	ldr	r3, [r3, #0]
 8018fec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8018fee:	683b      	ldr	r3, [r7, #0]
 8018ff0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8018ff2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8018ff4:	6979      	ldr	r1, [r7, #20]
 8018ff6:	3348      	adds	r3, #72	; 0x48
 8018ff8:	00db      	lsls	r3, r3, #3
 8018ffa:	440b      	add	r3, r1
 8018ffc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8018ffe:	683b      	ldr	r3, [r7, #0]
 8019000:	69db      	ldr	r3, [r3, #28]
 8019002:	2b01      	cmp	r3, #1
 8019004:	d122      	bne.n	801904c <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8019006:	697b      	ldr	r3, [r7, #20]
 8019008:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	431a      	orrs	r2, r3
 8019010:	697b      	ldr	r3, [r7, #20]
 8019012:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019016:	683b      	ldr	r3, [r7, #0]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	685b      	ldr	r3, [r3, #4]
 8019020:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019022:	683a      	ldr	r2, [r7, #0]
 8019024:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8019026:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019028:	697b      	ldr	r3, [r7, #20]
 801902a:	3248      	adds	r2, #72	; 0x48
 801902c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019030:	683b      	ldr	r3, [r7, #0]
 8019032:	689b      	ldr	r3, [r3, #8]
 8019034:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8019036:	683b      	ldr	r3, [r7, #0]
 8019038:	68db      	ldr	r3, [r3, #12]
 801903a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801903c:	683b      	ldr	r3, [r7, #0]
 801903e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019040:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019042:	6979      	ldr	r1, [r7, #20]
 8019044:	3348      	adds	r3, #72	; 0x48
 8019046:	00db      	lsls	r3, r3, #3
 8019048:	440b      	add	r3, r1
 801904a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 801904c:	683b      	ldr	r3, [r7, #0]
 801904e:	699b      	ldr	r3, [r3, #24]
 8019050:	2b00      	cmp	r3, #0
 8019052:	d109      	bne.n	8019068 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8019054:	697b      	ldr	r3, [r7, #20]
 8019056:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	43db      	mvns	r3, r3
 801905e:	401a      	ands	r2, r3
 8019060:	697b      	ldr	r3, [r7, #20]
 8019062:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8019066:	e007      	b.n	8019078 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8019068:	697b      	ldr	r3, [r7, #20]
 801906a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	431a      	orrs	r2, r3
 8019072:	697b      	ldr	r3, [r7, #20]
 8019074:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8019078:	683b      	ldr	r3, [r7, #0]
 801907a:	691b      	ldr	r3, [r3, #16]
 801907c:	2b00      	cmp	r3, #0
 801907e:	d109      	bne.n	8019094 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8019080:	697b      	ldr	r3, [r7, #20]
 8019082:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	43db      	mvns	r3, r3
 801908a:	401a      	ands	r2, r3
 801908c:	697b      	ldr	r3, [r7, #20]
 801908e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8019092:	e007      	b.n	80190a4 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8019094:	697b      	ldr	r3, [r7, #20]
 8019096:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 801909a:	68fb      	ldr	r3, [r7, #12]
 801909c:	431a      	orrs	r2, r3
 801909e:	697b      	ldr	r3, [r7, #20]
 80190a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80190a4:	683b      	ldr	r3, [r7, #0]
 80190a6:	6a1b      	ldr	r3, [r3, #32]
 80190a8:	2b01      	cmp	r3, #1
 80190aa:	d107      	bne.n	80190bc <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80190ac:	697b      	ldr	r3, [r7, #20]
 80190ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80190b2:	68fb      	ldr	r3, [r7, #12]
 80190b4:	431a      	orrs	r2, r3
 80190b6:	697b      	ldr	r3, [r7, #20]
 80190b8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80190bc:	697b      	ldr	r3, [r7, #20]
 80190be:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80190c2:	f023 0201 	bic.w	r2, r3, #1
 80190c6:	697b      	ldr	r3, [r7, #20]
 80190c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80190cc:	2300      	movs	r3, #0
 80190ce:	e006      	b.n	80190de <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80190d8:	687b      	ldr	r3, [r7, #4]
 80190da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80190dc:	2301      	movs	r3, #1
  }
}
 80190de:	4618      	mov	r0, r3
 80190e0:	371c      	adds	r7, #28
 80190e2:	46bd      	mov	sp, r7
 80190e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190e8:	4770      	bx	lr
 80190ea:	bf00      	nop
 80190ec:	40003400 	.word	0x40003400
 80190f0:	40006400 	.word	0x40006400

080190f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80190f4:	b580      	push	{r7, lr}
 80190f6:	b084      	sub	sp, #16
 80190f8:	af00      	add	r7, sp, #0
 80190fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019102:	b2db      	uxtb	r3, r3
 8019104:	2b01      	cmp	r3, #1
 8019106:	d12e      	bne.n	8019166 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	2202      	movs	r2, #2
 801910c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	681a      	ldr	r2, [r3, #0]
 8019116:	687b      	ldr	r3, [r7, #4]
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	f022 0201 	bic.w	r2, r2, #1
 801911e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019120:	f7ff fd86 	bl	8018c30 <HAL_GetTick>
 8019124:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8019126:	e012      	b.n	801914e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8019128:	f7ff fd82 	bl	8018c30 <HAL_GetTick>
 801912c:	4602      	mov	r2, r0
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	1ad3      	subs	r3, r2, r3
 8019132:	2b0a      	cmp	r3, #10
 8019134:	d90b      	bls.n	801914e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8019136:	687b      	ldr	r3, [r7, #4]
 8019138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801913a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2205      	movs	r2, #5
 8019146:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 801914a:	2301      	movs	r3, #1
 801914c:	e012      	b.n	8019174 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	681b      	ldr	r3, [r3, #0]
 8019152:	685b      	ldr	r3, [r3, #4]
 8019154:	f003 0301 	and.w	r3, r3, #1
 8019158:	2b00      	cmp	r3, #0
 801915a:	d1e5      	bne.n	8019128 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	2200      	movs	r2, #0
 8019160:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8019162:	2300      	movs	r3, #0
 8019164:	e006      	b.n	8019174 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801916a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 801916e:	687b      	ldr	r3, [r7, #4]
 8019170:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019172:	2301      	movs	r3, #1
  }
}
 8019174:	4618      	mov	r0, r3
 8019176:	3710      	adds	r7, #16
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}

0801917c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 801917c:	b480      	push	{r7}
 801917e:	b087      	sub	sp, #28
 8019180:	af00      	add	r7, sp, #0
 8019182:	60f8      	str	r0, [r7, #12]
 8019184:	60b9      	str	r1, [r7, #8]
 8019186:	607a      	str	r2, [r7, #4]
 8019188:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801918a:	68fb      	ldr	r3, [r7, #12]
 801918c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019190:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8019192:	7dfb      	ldrb	r3, [r7, #23]
 8019194:	2b01      	cmp	r3, #1
 8019196:	d003      	beq.n	80191a0 <HAL_CAN_GetRxMessage+0x24>
 8019198:	7dfb      	ldrb	r3, [r7, #23]
 801919a:	2b02      	cmp	r3, #2
 801919c:	f040 80f3 	bne.w	8019386 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80191a0:	68bb      	ldr	r3, [r7, #8]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d10e      	bne.n	80191c4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80191a6:	68fb      	ldr	r3, [r7, #12]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	68db      	ldr	r3, [r3, #12]
 80191ac:	f003 0303 	and.w	r3, r3, #3
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d116      	bne.n	80191e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80191b4:	68fb      	ldr	r3, [r7, #12]
 80191b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80191bc:	68fb      	ldr	r3, [r7, #12]
 80191be:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80191c0:	2301      	movs	r3, #1
 80191c2:	e0e7      	b.n	8019394 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	691b      	ldr	r3, [r3, #16]
 80191ca:	f003 0303 	and.w	r3, r3, #3
 80191ce:	2b00      	cmp	r3, #0
 80191d0:	d107      	bne.n	80191e2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80191d2:	68fb      	ldr	r3, [r7, #12]
 80191d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80191de:	2301      	movs	r3, #1
 80191e0:	e0d8      	b.n	8019394 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80191e2:	68fb      	ldr	r3, [r7, #12]
 80191e4:	681a      	ldr	r2, [r3, #0]
 80191e6:	68bb      	ldr	r3, [r7, #8]
 80191e8:	331b      	adds	r3, #27
 80191ea:	011b      	lsls	r3, r3, #4
 80191ec:	4413      	add	r3, r2
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	f003 0204 	and.w	r2, r3, #4
 80191f4:	687b      	ldr	r3, [r7, #4]
 80191f6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	689b      	ldr	r3, [r3, #8]
 80191fc:	2b00      	cmp	r3, #0
 80191fe:	d10c      	bne.n	801921a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8019200:	68fb      	ldr	r3, [r7, #12]
 8019202:	681a      	ldr	r2, [r3, #0]
 8019204:	68bb      	ldr	r3, [r7, #8]
 8019206:	331b      	adds	r3, #27
 8019208:	011b      	lsls	r3, r3, #4
 801920a:	4413      	add	r3, r2
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	0d5b      	lsrs	r3, r3, #21
 8019210:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	601a      	str	r2, [r3, #0]
 8019218:	e00b      	b.n	8019232 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	68bb      	ldr	r3, [r7, #8]
 8019220:	331b      	adds	r3, #27
 8019222:	011b      	lsls	r3, r3, #4
 8019224:	4413      	add	r3, r2
 8019226:	681b      	ldr	r3, [r3, #0]
 8019228:	08db      	lsrs	r3, r3, #3
 801922a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801922e:	687b      	ldr	r3, [r7, #4]
 8019230:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8019232:	68fb      	ldr	r3, [r7, #12]
 8019234:	681a      	ldr	r2, [r3, #0]
 8019236:	68bb      	ldr	r3, [r7, #8]
 8019238:	331b      	adds	r3, #27
 801923a:	011b      	lsls	r3, r3, #4
 801923c:	4413      	add	r3, r2
 801923e:	681b      	ldr	r3, [r3, #0]
 8019240:	f003 0202 	and.w	r2, r3, #2
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	681a      	ldr	r2, [r3, #0]
 801924c:	68bb      	ldr	r3, [r7, #8]
 801924e:	331b      	adds	r3, #27
 8019250:	011b      	lsls	r3, r3, #4
 8019252:	4413      	add	r3, r2
 8019254:	3304      	adds	r3, #4
 8019256:	681b      	ldr	r3, [r3, #0]
 8019258:	f003 020f 	and.w	r2, r3, #15
 801925c:	687b      	ldr	r3, [r7, #4]
 801925e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8019260:	68fb      	ldr	r3, [r7, #12]
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	331b      	adds	r3, #27
 8019268:	011b      	lsls	r3, r3, #4
 801926a:	4413      	add	r3, r2
 801926c:	3304      	adds	r3, #4
 801926e:	681b      	ldr	r3, [r3, #0]
 8019270:	0a1b      	lsrs	r3, r3, #8
 8019272:	b2da      	uxtb	r2, r3
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	68bb      	ldr	r3, [r7, #8]
 801927e:	331b      	adds	r3, #27
 8019280:	011b      	lsls	r3, r3, #4
 8019282:	4413      	add	r3, r2
 8019284:	3304      	adds	r3, #4
 8019286:	681b      	ldr	r3, [r3, #0]
 8019288:	0c1b      	lsrs	r3, r3, #16
 801928a:	b29a      	uxth	r2, r3
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8019290:	68fb      	ldr	r3, [r7, #12]
 8019292:	681a      	ldr	r2, [r3, #0]
 8019294:	68bb      	ldr	r3, [r7, #8]
 8019296:	011b      	lsls	r3, r3, #4
 8019298:	4413      	add	r3, r2
 801929a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	b2da      	uxtb	r2, r3
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80192a6:	68fb      	ldr	r3, [r7, #12]
 80192a8:	681a      	ldr	r2, [r3, #0]
 80192aa:	68bb      	ldr	r3, [r7, #8]
 80192ac:	011b      	lsls	r3, r3, #4
 80192ae:	4413      	add	r3, r2
 80192b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	0a1a      	lsrs	r2, r3, #8
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	3301      	adds	r3, #1
 80192bc:	b2d2      	uxtb	r2, r2
 80192be:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80192c0:	68fb      	ldr	r3, [r7, #12]
 80192c2:	681a      	ldr	r2, [r3, #0]
 80192c4:	68bb      	ldr	r3, [r7, #8]
 80192c6:	011b      	lsls	r3, r3, #4
 80192c8:	4413      	add	r3, r2
 80192ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80192ce:	681b      	ldr	r3, [r3, #0]
 80192d0:	0c1a      	lsrs	r2, r3, #16
 80192d2:	683b      	ldr	r3, [r7, #0]
 80192d4:	3302      	adds	r3, #2
 80192d6:	b2d2      	uxtb	r2, r2
 80192d8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	681a      	ldr	r2, [r3, #0]
 80192de:	68bb      	ldr	r3, [r7, #8]
 80192e0:	011b      	lsls	r3, r3, #4
 80192e2:	4413      	add	r3, r2
 80192e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80192e8:	681b      	ldr	r3, [r3, #0]
 80192ea:	0e1a      	lsrs	r2, r3, #24
 80192ec:	683b      	ldr	r3, [r7, #0]
 80192ee:	3303      	adds	r3, #3
 80192f0:	b2d2      	uxtb	r2, r2
 80192f2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681a      	ldr	r2, [r3, #0]
 80192f8:	68bb      	ldr	r3, [r7, #8]
 80192fa:	011b      	lsls	r3, r3, #4
 80192fc:	4413      	add	r3, r2
 80192fe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019302:	681a      	ldr	r2, [r3, #0]
 8019304:	683b      	ldr	r3, [r7, #0]
 8019306:	3304      	adds	r3, #4
 8019308:	b2d2      	uxtb	r2, r2
 801930a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681a      	ldr	r2, [r3, #0]
 8019310:	68bb      	ldr	r3, [r7, #8]
 8019312:	011b      	lsls	r3, r3, #4
 8019314:	4413      	add	r3, r2
 8019316:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	0a1a      	lsrs	r2, r3, #8
 801931e:	683b      	ldr	r3, [r7, #0]
 8019320:	3305      	adds	r3, #5
 8019322:	b2d2      	uxtb	r2, r2
 8019324:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	681a      	ldr	r2, [r3, #0]
 801932a:	68bb      	ldr	r3, [r7, #8]
 801932c:	011b      	lsls	r3, r3, #4
 801932e:	4413      	add	r3, r2
 8019330:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	0c1a      	lsrs	r2, r3, #16
 8019338:	683b      	ldr	r3, [r7, #0]
 801933a:	3306      	adds	r3, #6
 801933c:	b2d2      	uxtb	r2, r2
 801933e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	681a      	ldr	r2, [r3, #0]
 8019344:	68bb      	ldr	r3, [r7, #8]
 8019346:	011b      	lsls	r3, r3, #4
 8019348:	4413      	add	r3, r2
 801934a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801934e:	681b      	ldr	r3, [r3, #0]
 8019350:	0e1a      	lsrs	r2, r3, #24
 8019352:	683b      	ldr	r3, [r7, #0]
 8019354:	3307      	adds	r3, #7
 8019356:	b2d2      	uxtb	r2, r2
 8019358:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 801935a:	68bb      	ldr	r3, [r7, #8]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d108      	bne.n	8019372 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8019360:	68fb      	ldr	r3, [r7, #12]
 8019362:	681b      	ldr	r3, [r3, #0]
 8019364:	68da      	ldr	r2, [r3, #12]
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	f042 0220 	orr.w	r2, r2, #32
 801936e:	60da      	str	r2, [r3, #12]
 8019370:	e007      	b.n	8019382 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8019372:	68fb      	ldr	r3, [r7, #12]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	691a      	ldr	r2, [r3, #16]
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	f042 0220 	orr.w	r2, r2, #32
 8019380:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8019382:	2300      	movs	r3, #0
 8019384:	e006      	b.n	8019394 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801938a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019392:	2301      	movs	r3, #1
  }
}
 8019394:	4618      	mov	r0, r3
 8019396:	371c      	adds	r7, #28
 8019398:	46bd      	mov	sp, r7
 801939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939e:	4770      	bx	lr

080193a0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80193a0:	b480      	push	{r7}
 80193a2:	b085      	sub	sp, #20
 80193a4:	af00      	add	r7, sp, #0
 80193a6:	6078      	str	r0, [r7, #4]
 80193a8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80193aa:	687b      	ldr	r3, [r7, #4]
 80193ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80193b0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80193b2:	7bfb      	ldrb	r3, [r7, #15]
 80193b4:	2b01      	cmp	r3, #1
 80193b6:	d002      	beq.n	80193be <HAL_CAN_ActivateNotification+0x1e>
 80193b8:	7bfb      	ldrb	r3, [r7, #15]
 80193ba:	2b02      	cmp	r3, #2
 80193bc:	d109      	bne.n	80193d2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	6959      	ldr	r1, [r3, #20]
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	683a      	ldr	r2, [r7, #0]
 80193ca:	430a      	orrs	r2, r1
 80193cc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80193ce:	2300      	movs	r3, #0
 80193d0:	e006      	b.n	80193e0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80193de:	2301      	movs	r3, #1
  }
}
 80193e0:	4618      	mov	r0, r3
 80193e2:	3714      	adds	r7, #20
 80193e4:	46bd      	mov	sp, r7
 80193e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193ea:	4770      	bx	lr

080193ec <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b08a      	sub	sp, #40	; 0x28
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80193f4:	2300      	movs	r3, #0
 80193f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80193f8:	687b      	ldr	r3, [r7, #4]
 80193fa:	681b      	ldr	r3, [r3, #0]
 80193fc:	695b      	ldr	r3, [r3, #20]
 80193fe:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	685b      	ldr	r3, [r3, #4]
 8019406:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	681b      	ldr	r3, [r3, #0]
 801940c:	689b      	ldr	r3, [r3, #8]
 801940e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	68db      	ldr	r3, [r3, #12]
 8019416:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8019418:	687b      	ldr	r3, [r7, #4]
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	691b      	ldr	r3, [r3, #16]
 801941e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	699b      	ldr	r3, [r3, #24]
 8019426:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8019428:	6a3b      	ldr	r3, [r7, #32]
 801942a:	f003 0301 	and.w	r3, r3, #1
 801942e:	2b00      	cmp	r3, #0
 8019430:	f000 8083 	beq.w	801953a <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8019434:	69bb      	ldr	r3, [r7, #24]
 8019436:	f003 0301 	and.w	r3, r3, #1
 801943a:	2b00      	cmp	r3, #0
 801943c:	d025      	beq.n	801948a <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	681b      	ldr	r3, [r3, #0]
 8019442:	2201      	movs	r2, #1
 8019444:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8019446:	69bb      	ldr	r3, [r7, #24]
 8019448:	f003 0302 	and.w	r3, r3, #2
 801944c:	2b00      	cmp	r3, #0
 801944e:	d004      	beq.n	801945a <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019454:	6878      	ldr	r0, [r7, #4]
 8019456:	4798      	blx	r3
 8019458:	e017      	b.n	801948a <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 801945a:	69bb      	ldr	r3, [r7, #24]
 801945c:	f003 0304 	and.w	r3, r3, #4
 8019460:	2b00      	cmp	r3, #0
 8019462:	d004      	beq.n	801946e <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8019464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019466:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801946a:	627b      	str	r3, [r7, #36]	; 0x24
 801946c:	e00d      	b.n	801948a <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801946e:	69bb      	ldr	r3, [r7, #24]
 8019470:	f003 0308 	and.w	r3, r3, #8
 8019474:	2b00      	cmp	r3, #0
 8019476:	d004      	beq.n	8019482 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8019478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801947e:	627b      	str	r3, [r7, #36]	; 0x24
 8019480:	e003      	b.n	801948a <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8019482:	687b      	ldr	r3, [r7, #4]
 8019484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019486:	6878      	ldr	r0, [r7, #4]
 8019488:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 801948a:	69bb      	ldr	r3, [r7, #24]
 801948c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019490:	2b00      	cmp	r3, #0
 8019492:	d026      	beq.n	80194e2 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8019494:	687b      	ldr	r3, [r7, #4]
 8019496:	681b      	ldr	r3, [r3, #0]
 8019498:	f44f 7280 	mov.w	r2, #256	; 0x100
 801949c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801949e:	69bb      	ldr	r3, [r7, #24]
 80194a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d004      	beq.n	80194b2 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 80194a8:	687b      	ldr	r3, [r7, #4]
 80194aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194ac:	6878      	ldr	r0, [r7, #4]
 80194ae:	4798      	blx	r3
 80194b0:	e017      	b.n	80194e2 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80194b2:	69bb      	ldr	r3, [r7, #24]
 80194b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d004      	beq.n	80194c6 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80194bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80194c2:	627b      	str	r3, [r7, #36]	; 0x24
 80194c4:	e00d      	b.n	80194e2 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80194c6:	69bb      	ldr	r3, [r7, #24]
 80194c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80194cc:	2b00      	cmp	r3, #0
 80194ce:	d004      	beq.n	80194da <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80194d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80194d6:	627b      	str	r3, [r7, #36]	; 0x24
 80194d8:	e003      	b.n	80194e2 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194de:	6878      	ldr	r0, [r7, #4]
 80194e0:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80194e2:	69bb      	ldr	r3, [r7, #24]
 80194e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80194e8:	2b00      	cmp	r3, #0
 80194ea:	d026      	beq.n	801953a <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80194f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80194f6:	69bb      	ldr	r3, [r7, #24]
 80194f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d004      	beq.n	801950a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019504:	6878      	ldr	r0, [r7, #4]
 8019506:	4798      	blx	r3
 8019508:	e017      	b.n	801953a <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 801950a:	69bb      	ldr	r3, [r7, #24]
 801950c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019510:	2b00      	cmp	r3, #0
 8019512:	d004      	beq.n	801951e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8019514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801951a:	627b      	str	r3, [r7, #36]	; 0x24
 801951c:	e00d      	b.n	801953a <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 801951e:	69bb      	ldr	r3, [r7, #24]
 8019520:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019524:	2b00      	cmp	r3, #0
 8019526:	d004      	beq.n	8019532 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8019528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801952a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801952e:	627b      	str	r3, [r7, #36]	; 0x24
 8019530:	e003      	b.n	801953a <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019536:	6878      	ldr	r0, [r7, #4]
 8019538:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 801953a:	6a3b      	ldr	r3, [r7, #32]
 801953c:	f003 0308 	and.w	r3, r3, #8
 8019540:	2b00      	cmp	r3, #0
 8019542:	d00c      	beq.n	801955e <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8019544:	697b      	ldr	r3, [r7, #20]
 8019546:	f003 0310 	and.w	r3, r3, #16
 801954a:	2b00      	cmp	r3, #0
 801954c:	d007      	beq.n	801955e <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801954e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019550:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019554:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	2210      	movs	r2, #16
 801955c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801955e:	6a3b      	ldr	r3, [r7, #32]
 8019560:	f003 0304 	and.w	r3, r3, #4
 8019564:	2b00      	cmp	r3, #0
 8019566:	d00c      	beq.n	8019582 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	f003 0308 	and.w	r3, r3, #8
 801956e:	2b00      	cmp	r3, #0
 8019570:	d007      	beq.n	8019582 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	2208      	movs	r2, #8
 8019578:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801957e:	6878      	ldr	r0, [r7, #4]
 8019580:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8019582:	6a3b      	ldr	r3, [r7, #32]
 8019584:	f003 0302 	and.w	r3, r3, #2
 8019588:	2b00      	cmp	r3, #0
 801958a:	d00a      	beq.n	80195a2 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 801958c:	687b      	ldr	r3, [r7, #4]
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	68db      	ldr	r3, [r3, #12]
 8019592:	f003 0303 	and.w	r3, r3, #3
 8019596:	2b00      	cmp	r3, #0
 8019598:	d003      	beq.n	80195a2 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801959e:	6878      	ldr	r0, [r7, #4]
 80195a0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80195a2:	6a3b      	ldr	r3, [r7, #32]
 80195a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d00c      	beq.n	80195c6 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80195ac:	693b      	ldr	r3, [r7, #16]
 80195ae:	f003 0310 	and.w	r3, r3, #16
 80195b2:	2b00      	cmp	r3, #0
 80195b4:	d007      	beq.n	80195c6 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80195b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80195b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80195bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	2210      	movs	r2, #16
 80195c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80195c6:	6a3b      	ldr	r3, [r7, #32]
 80195c8:	f003 0320 	and.w	r3, r3, #32
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d00c      	beq.n	80195ea <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80195d0:	693b      	ldr	r3, [r7, #16]
 80195d2:	f003 0308 	and.w	r3, r3, #8
 80195d6:	2b00      	cmp	r3, #0
 80195d8:	d007      	beq.n	80195ea <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	2208      	movs	r2, #8
 80195e0:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80195ea:	6a3b      	ldr	r3, [r7, #32]
 80195ec:	f003 0310 	and.w	r3, r3, #16
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d00a      	beq.n	801960a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	691b      	ldr	r3, [r3, #16]
 80195fa:	f003 0303 	and.w	r3, r3, #3
 80195fe:	2b00      	cmp	r3, #0
 8019600:	d003      	beq.n	801960a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8019602:	687b      	ldr	r3, [r7, #4]
 8019604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019606:	6878      	ldr	r0, [r7, #4]
 8019608:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 801960a:	6a3b      	ldr	r3, [r7, #32]
 801960c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019610:	2b00      	cmp	r3, #0
 8019612:	d00c      	beq.n	801962e <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8019614:	69fb      	ldr	r3, [r7, #28]
 8019616:	f003 0310 	and.w	r3, r3, #16
 801961a:	2b00      	cmp	r3, #0
 801961c:	d007      	beq.n	801962e <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 801961e:	687b      	ldr	r3, [r7, #4]
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	2210      	movs	r2, #16
 8019624:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8019626:	687b      	ldr	r3, [r7, #4]
 8019628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801962a:	6878      	ldr	r0, [r7, #4]
 801962c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801962e:	6a3b      	ldr	r3, [r7, #32]
 8019630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019634:	2b00      	cmp	r3, #0
 8019636:	d00c      	beq.n	8019652 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8019638:	69fb      	ldr	r3, [r7, #28]
 801963a:	f003 0308 	and.w	r3, r3, #8
 801963e:	2b00      	cmp	r3, #0
 8019640:	d007      	beq.n	8019652 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	2208      	movs	r2, #8
 8019648:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801964e:	6878      	ldr	r0, [r7, #4]
 8019650:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8019652:	6a3b      	ldr	r3, [r7, #32]
 8019654:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019658:	2b00      	cmp	r3, #0
 801965a:	d07b      	beq.n	8019754 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 801965c:	69fb      	ldr	r3, [r7, #28]
 801965e:	f003 0304 	and.w	r3, r3, #4
 8019662:	2b00      	cmp	r3, #0
 8019664:	d072      	beq.n	801974c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8019666:	6a3b      	ldr	r3, [r7, #32]
 8019668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801966c:	2b00      	cmp	r3, #0
 801966e:	d008      	beq.n	8019682 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8019676:	2b00      	cmp	r3, #0
 8019678:	d003      	beq.n	8019682 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 801967a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801967c:	f043 0301 	orr.w	r3, r3, #1
 8019680:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8019682:	6a3b      	ldr	r3, [r7, #32]
 8019684:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019688:	2b00      	cmp	r3, #0
 801968a:	d008      	beq.n	801969e <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 801968c:	68fb      	ldr	r3, [r7, #12]
 801968e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8019692:	2b00      	cmp	r3, #0
 8019694:	d003      	beq.n	801969e <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8019696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019698:	f043 0302 	orr.w	r3, r3, #2
 801969c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801969e:	6a3b      	ldr	r3, [r7, #32]
 80196a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d008      	beq.n	80196ba <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	d003      	beq.n	80196ba <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80196b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196b4:	f043 0304 	orr.w	r3, r3, #4
 80196b8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80196ba:	6a3b      	ldr	r3, [r7, #32]
 80196bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80196c0:	2b00      	cmp	r3, #0
 80196c2:	d043      	beq.n	801974c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80196c4:	68fb      	ldr	r3, [r7, #12]
 80196c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d03e      	beq.n	801974c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80196ce:	68fb      	ldr	r3, [r7, #12]
 80196d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80196d4:	2b60      	cmp	r3, #96	; 0x60
 80196d6:	d02b      	beq.n	8019730 <HAL_CAN_IRQHandler+0x344>
 80196d8:	2b60      	cmp	r3, #96	; 0x60
 80196da:	d82e      	bhi.n	801973a <HAL_CAN_IRQHandler+0x34e>
 80196dc:	2b50      	cmp	r3, #80	; 0x50
 80196de:	d022      	beq.n	8019726 <HAL_CAN_IRQHandler+0x33a>
 80196e0:	2b50      	cmp	r3, #80	; 0x50
 80196e2:	d82a      	bhi.n	801973a <HAL_CAN_IRQHandler+0x34e>
 80196e4:	2b40      	cmp	r3, #64	; 0x40
 80196e6:	d019      	beq.n	801971c <HAL_CAN_IRQHandler+0x330>
 80196e8:	2b40      	cmp	r3, #64	; 0x40
 80196ea:	d826      	bhi.n	801973a <HAL_CAN_IRQHandler+0x34e>
 80196ec:	2b30      	cmp	r3, #48	; 0x30
 80196ee:	d010      	beq.n	8019712 <HAL_CAN_IRQHandler+0x326>
 80196f0:	2b30      	cmp	r3, #48	; 0x30
 80196f2:	d822      	bhi.n	801973a <HAL_CAN_IRQHandler+0x34e>
 80196f4:	2b10      	cmp	r3, #16
 80196f6:	d002      	beq.n	80196fe <HAL_CAN_IRQHandler+0x312>
 80196f8:	2b20      	cmp	r3, #32
 80196fa:	d005      	beq.n	8019708 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80196fc:	e01d      	b.n	801973a <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80196fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019700:	f043 0308 	orr.w	r3, r3, #8
 8019704:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019706:	e019      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8019708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801970a:	f043 0310 	orr.w	r3, r3, #16
 801970e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019710:	e014      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8019712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019714:	f043 0320 	orr.w	r3, r3, #32
 8019718:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801971a:	e00f      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 801971c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801971e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019722:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019724:	e00a      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8019726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801972c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801972e:	e005      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8019730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019738:	e000      	b.n	801973c <HAL_CAN_IRQHandler+0x350>
            break;
 801973a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	699a      	ldr	r2, [r3, #24]
 8019742:	687b      	ldr	r3, [r7, #4]
 8019744:	681b      	ldr	r3, [r3, #0]
 8019746:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 801974a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	2204      	movs	r2, #4
 8019752:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8019754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019756:	2b00      	cmp	r3, #0
 8019758:	d009      	beq.n	801976e <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019760:	431a      	orrs	r2, r3
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801976a:	6878      	ldr	r0, [r7, #4]
 801976c:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801976e:	bf00      	nop
 8019770:	3728      	adds	r7, #40	; 0x28
 8019772:	46bd      	mov	sp, r7
 8019774:	bd80      	pop	{r7, pc}

08019776 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8019776:	b480      	push	{r7}
 8019778:	b083      	sub	sp, #12
 801977a:	af00      	add	r7, sp, #0
 801977c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801977e:	bf00      	nop
 8019780:	370c      	adds	r7, #12
 8019782:	46bd      	mov	sp, r7
 8019784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019788:	4770      	bx	lr

0801978a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801978a:	b480      	push	{r7}
 801978c:	b083      	sub	sp, #12
 801978e:	af00      	add	r7, sp, #0
 8019790:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8019792:	bf00      	nop
 8019794:	370c      	adds	r7, #12
 8019796:	46bd      	mov	sp, r7
 8019798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979c:	4770      	bx	lr

0801979e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801979e:	b480      	push	{r7}
 80197a0:	b083      	sub	sp, #12
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80197a6:	bf00      	nop
 80197a8:	370c      	adds	r7, #12
 80197aa:	46bd      	mov	sp, r7
 80197ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197b0:	4770      	bx	lr

080197b2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80197b2:	b480      	push	{r7}
 80197b4:	b083      	sub	sp, #12
 80197b6:	af00      	add	r7, sp, #0
 80197b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80197ba:	bf00      	nop
 80197bc:	370c      	adds	r7, #12
 80197be:	46bd      	mov	sp, r7
 80197c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c4:	4770      	bx	lr

080197c6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80197c6:	b480      	push	{r7}
 80197c8:	b083      	sub	sp, #12
 80197ca:	af00      	add	r7, sp, #0
 80197cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80197ce:	bf00      	nop
 80197d0:	370c      	adds	r7, #12
 80197d2:	46bd      	mov	sp, r7
 80197d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197d8:	4770      	bx	lr

080197da <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80197da:	b480      	push	{r7}
 80197dc:	b083      	sub	sp, #12
 80197de:	af00      	add	r7, sp, #0
 80197e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80197e2:	bf00      	nop
 80197e4:	370c      	adds	r7, #12
 80197e6:	46bd      	mov	sp, r7
 80197e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ec:	4770      	bx	lr

080197ee <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80197ee:	b480      	push	{r7}
 80197f0:	b083      	sub	sp, #12
 80197f2:	af00      	add	r7, sp, #0
 80197f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80197f6:	bf00      	nop
 80197f8:	370c      	adds	r7, #12
 80197fa:	46bd      	mov	sp, r7
 80197fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019800:	4770      	bx	lr

08019802 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8019802:	b480      	push	{r7}
 8019804:	b083      	sub	sp, #12
 8019806:	af00      	add	r7, sp, #0
 8019808:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801980a:	bf00      	nop
 801980c:	370c      	adds	r7, #12
 801980e:	46bd      	mov	sp, r7
 8019810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019814:	4770      	bx	lr

08019816 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8019816:	b480      	push	{r7}
 8019818:	b083      	sub	sp, #12
 801981a:	af00      	add	r7, sp, #0
 801981c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801981e:	bf00      	nop
 8019820:	370c      	adds	r7, #12
 8019822:	46bd      	mov	sp, r7
 8019824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019828:	4770      	bx	lr

0801982a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801982a:	b480      	push	{r7}
 801982c:	b083      	sub	sp, #12
 801982e:	af00      	add	r7, sp, #0
 8019830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8019832:	bf00      	nop
 8019834:	370c      	adds	r7, #12
 8019836:	46bd      	mov	sp, r7
 8019838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801983c:	4770      	bx	lr

0801983e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801983e:	b480      	push	{r7}
 8019840:	b083      	sub	sp, #12
 8019842:	af00      	add	r7, sp, #0
 8019844:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8019846:	bf00      	nop
 8019848:	370c      	adds	r7, #12
 801984a:	46bd      	mov	sp, r7
 801984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019850:	4770      	bx	lr
	...

08019854 <__NVIC_SetPriorityGrouping>:
{
 8019854:	b480      	push	{r7}
 8019856:	b085      	sub	sp, #20
 8019858:	af00      	add	r7, sp, #0
 801985a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	f003 0307 	and.w	r3, r3, #7
 8019862:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019864:	4b0b      	ldr	r3, [pc, #44]	; (8019894 <__NVIC_SetPriorityGrouping+0x40>)
 8019866:	68db      	ldr	r3, [r3, #12]
 8019868:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801986a:	68ba      	ldr	r2, [r7, #8]
 801986c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019870:	4013      	ands	r3, r2
 8019872:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019874:	68fb      	ldr	r3, [r7, #12]
 8019876:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019878:	68bb      	ldr	r3, [r7, #8]
 801987a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801987c:	4b06      	ldr	r3, [pc, #24]	; (8019898 <__NVIC_SetPriorityGrouping+0x44>)
 801987e:	4313      	orrs	r3, r2
 8019880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019882:	4a04      	ldr	r2, [pc, #16]	; (8019894 <__NVIC_SetPriorityGrouping+0x40>)
 8019884:	68bb      	ldr	r3, [r7, #8]
 8019886:	60d3      	str	r3, [r2, #12]
}
 8019888:	bf00      	nop
 801988a:	3714      	adds	r7, #20
 801988c:	46bd      	mov	sp, r7
 801988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019892:	4770      	bx	lr
 8019894:	e000ed00 	.word	0xe000ed00
 8019898:	05fa0000 	.word	0x05fa0000

0801989c <__NVIC_GetPriorityGrouping>:
{
 801989c:	b480      	push	{r7}
 801989e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80198a0:	4b04      	ldr	r3, [pc, #16]	; (80198b4 <__NVIC_GetPriorityGrouping+0x18>)
 80198a2:	68db      	ldr	r3, [r3, #12]
 80198a4:	0a1b      	lsrs	r3, r3, #8
 80198a6:	f003 0307 	and.w	r3, r3, #7
}
 80198aa:	4618      	mov	r0, r3
 80198ac:	46bd      	mov	sp, r7
 80198ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b2:	4770      	bx	lr
 80198b4:	e000ed00 	.word	0xe000ed00

080198b8 <__NVIC_EnableIRQ>:
{
 80198b8:	b480      	push	{r7}
 80198ba:	b083      	sub	sp, #12
 80198bc:	af00      	add	r7, sp, #0
 80198be:	4603      	mov	r3, r0
 80198c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80198c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	db0b      	blt.n	80198e2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80198ca:	79fb      	ldrb	r3, [r7, #7]
 80198cc:	f003 021f 	and.w	r2, r3, #31
 80198d0:	4907      	ldr	r1, [pc, #28]	; (80198f0 <__NVIC_EnableIRQ+0x38>)
 80198d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80198d6:	095b      	lsrs	r3, r3, #5
 80198d8:	2001      	movs	r0, #1
 80198da:	fa00 f202 	lsl.w	r2, r0, r2
 80198de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80198e2:	bf00      	nop
 80198e4:	370c      	adds	r7, #12
 80198e6:	46bd      	mov	sp, r7
 80198e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ec:	4770      	bx	lr
 80198ee:	bf00      	nop
 80198f0:	e000e100 	.word	0xe000e100

080198f4 <__NVIC_SetPriority>:
{
 80198f4:	b480      	push	{r7}
 80198f6:	b083      	sub	sp, #12
 80198f8:	af00      	add	r7, sp, #0
 80198fa:	4603      	mov	r3, r0
 80198fc:	6039      	str	r1, [r7, #0]
 80198fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019904:	2b00      	cmp	r3, #0
 8019906:	db0a      	blt.n	801991e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019908:	683b      	ldr	r3, [r7, #0]
 801990a:	b2da      	uxtb	r2, r3
 801990c:	490c      	ldr	r1, [pc, #48]	; (8019940 <__NVIC_SetPriority+0x4c>)
 801990e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019912:	0112      	lsls	r2, r2, #4
 8019914:	b2d2      	uxtb	r2, r2
 8019916:	440b      	add	r3, r1
 8019918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801991c:	e00a      	b.n	8019934 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801991e:	683b      	ldr	r3, [r7, #0]
 8019920:	b2da      	uxtb	r2, r3
 8019922:	4908      	ldr	r1, [pc, #32]	; (8019944 <__NVIC_SetPriority+0x50>)
 8019924:	79fb      	ldrb	r3, [r7, #7]
 8019926:	f003 030f 	and.w	r3, r3, #15
 801992a:	3b04      	subs	r3, #4
 801992c:	0112      	lsls	r2, r2, #4
 801992e:	b2d2      	uxtb	r2, r2
 8019930:	440b      	add	r3, r1
 8019932:	761a      	strb	r2, [r3, #24]
}
 8019934:	bf00      	nop
 8019936:	370c      	adds	r7, #12
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr
 8019940:	e000e100 	.word	0xe000e100
 8019944:	e000ed00 	.word	0xe000ed00

08019948 <NVIC_EncodePriority>:
{
 8019948:	b480      	push	{r7}
 801994a:	b089      	sub	sp, #36	; 0x24
 801994c:	af00      	add	r7, sp, #0
 801994e:	60f8      	str	r0, [r7, #12]
 8019950:	60b9      	str	r1, [r7, #8]
 8019952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019954:	68fb      	ldr	r3, [r7, #12]
 8019956:	f003 0307 	and.w	r3, r3, #7
 801995a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	f1c3 0307 	rsb	r3, r3, #7
 8019962:	2b04      	cmp	r3, #4
 8019964:	bf28      	it	cs
 8019966:	2304      	movcs	r3, #4
 8019968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	3304      	adds	r3, #4
 801996e:	2b06      	cmp	r3, #6
 8019970:	d902      	bls.n	8019978 <NVIC_EncodePriority+0x30>
 8019972:	69fb      	ldr	r3, [r7, #28]
 8019974:	3b03      	subs	r3, #3
 8019976:	e000      	b.n	801997a <NVIC_EncodePriority+0x32>
 8019978:	2300      	movs	r3, #0
 801997a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801997c:	f04f 32ff 	mov.w	r2, #4294967295
 8019980:	69bb      	ldr	r3, [r7, #24]
 8019982:	fa02 f303 	lsl.w	r3, r2, r3
 8019986:	43da      	mvns	r2, r3
 8019988:	68bb      	ldr	r3, [r7, #8]
 801998a:	401a      	ands	r2, r3
 801998c:	697b      	ldr	r3, [r7, #20]
 801998e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019990:	f04f 31ff 	mov.w	r1, #4294967295
 8019994:	697b      	ldr	r3, [r7, #20]
 8019996:	fa01 f303 	lsl.w	r3, r1, r3
 801999a:	43d9      	mvns	r1, r3
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80199a0:	4313      	orrs	r3, r2
}
 80199a2:	4618      	mov	r0, r3
 80199a4:	3724      	adds	r7, #36	; 0x24
 80199a6:	46bd      	mov	sp, r7
 80199a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199ac:	4770      	bx	lr
	...

080199b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80199b0:	b580      	push	{r7, lr}
 80199b2:	b082      	sub	sp, #8
 80199b4:	af00      	add	r7, sp, #0
 80199b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	3b01      	subs	r3, #1
 80199bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80199c0:	d301      	bcc.n	80199c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80199c2:	2301      	movs	r3, #1
 80199c4:	e00f      	b.n	80199e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80199c6:	4a0a      	ldr	r2, [pc, #40]	; (80199f0 <SysTick_Config+0x40>)
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	3b01      	subs	r3, #1
 80199cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80199ce:	210f      	movs	r1, #15
 80199d0:	f04f 30ff 	mov.w	r0, #4294967295
 80199d4:	f7ff ff8e 	bl	80198f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80199d8:	4b05      	ldr	r3, [pc, #20]	; (80199f0 <SysTick_Config+0x40>)
 80199da:	2200      	movs	r2, #0
 80199dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80199de:	4b04      	ldr	r3, [pc, #16]	; (80199f0 <SysTick_Config+0x40>)
 80199e0:	2207      	movs	r2, #7
 80199e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80199e4:	2300      	movs	r3, #0
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3708      	adds	r7, #8
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
 80199ee:	bf00      	nop
 80199f0:	e000e010 	.word	0xe000e010

080199f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b082      	sub	sp, #8
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80199fc:	6878      	ldr	r0, [r7, #4]
 80199fe:	f7ff ff29 	bl	8019854 <__NVIC_SetPriorityGrouping>
}
 8019a02:	bf00      	nop
 8019a04:	3708      	adds	r7, #8
 8019a06:	46bd      	mov	sp, r7
 8019a08:	bd80      	pop	{r7, pc}

08019a0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8019a0a:	b580      	push	{r7, lr}
 8019a0c:	b086      	sub	sp, #24
 8019a0e:	af00      	add	r7, sp, #0
 8019a10:	4603      	mov	r3, r0
 8019a12:	60b9      	str	r1, [r7, #8]
 8019a14:	607a      	str	r2, [r7, #4]
 8019a16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8019a18:	2300      	movs	r3, #0
 8019a1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8019a1c:	f7ff ff3e 	bl	801989c <__NVIC_GetPriorityGrouping>
 8019a20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019a22:	687a      	ldr	r2, [r7, #4]
 8019a24:	68b9      	ldr	r1, [r7, #8]
 8019a26:	6978      	ldr	r0, [r7, #20]
 8019a28:	f7ff ff8e 	bl	8019948 <NVIC_EncodePriority>
 8019a2c:	4602      	mov	r2, r0
 8019a2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019a32:	4611      	mov	r1, r2
 8019a34:	4618      	mov	r0, r3
 8019a36:	f7ff ff5d 	bl	80198f4 <__NVIC_SetPriority>
}
 8019a3a:	bf00      	nop
 8019a3c:	3718      	adds	r7, #24
 8019a3e:	46bd      	mov	sp, r7
 8019a40:	bd80      	pop	{r7, pc}

08019a42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019a42:	b580      	push	{r7, lr}
 8019a44:	b082      	sub	sp, #8
 8019a46:	af00      	add	r7, sp, #0
 8019a48:	4603      	mov	r3, r0
 8019a4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019a50:	4618      	mov	r0, r3
 8019a52:	f7ff ff31 	bl	80198b8 <__NVIC_EnableIRQ>
}
 8019a56:	bf00      	nop
 8019a58:	3708      	adds	r7, #8
 8019a5a:	46bd      	mov	sp, r7
 8019a5c:	bd80      	pop	{r7, pc}

08019a5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019a5e:	b580      	push	{r7, lr}
 8019a60:	b082      	sub	sp, #8
 8019a62:	af00      	add	r7, sp, #0
 8019a64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019a66:	6878      	ldr	r0, [r7, #4]
 8019a68:	f7ff ffa2 	bl	80199b0 <SysTick_Config>
 8019a6c:	4603      	mov	r3, r0
}
 8019a6e:	4618      	mov	r0, r3
 8019a70:	3708      	adds	r7, #8
 8019a72:	46bd      	mov	sp, r7
 8019a74:	bd80      	pop	{r7, pc}
	...

08019a78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019a78:	b480      	push	{r7}
 8019a7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019a7c:	f3bf 8f5f 	dmb	sy
}
 8019a80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019a82:	4b07      	ldr	r3, [pc, #28]	; (8019aa0 <HAL_MPU_Disable+0x28>)
 8019a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a86:	4a06      	ldr	r2, [pc, #24]	; (8019aa0 <HAL_MPU_Disable+0x28>)
 8019a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019a8c:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019a8e:	4b05      	ldr	r3, [pc, #20]	; (8019aa4 <HAL_MPU_Disable+0x2c>)
 8019a90:	2200      	movs	r2, #0
 8019a92:	605a      	str	r2, [r3, #4]
}
 8019a94:	bf00      	nop
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr
 8019a9e:	bf00      	nop
 8019aa0:	e000ed00 	.word	0xe000ed00
 8019aa4:	e000ed90 	.word	0xe000ed90

08019aa8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019aa8:	b480      	push	{r7}
 8019aaa:	b083      	sub	sp, #12
 8019aac:	af00      	add	r7, sp, #0
 8019aae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019ab0:	4a0b      	ldr	r2, [pc, #44]	; (8019ae0 <HAL_MPU_Enable+0x38>)
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	f043 0301 	orr.w	r3, r3, #1
 8019ab8:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8019aba:	4b0a      	ldr	r3, [pc, #40]	; (8019ae4 <HAL_MPU_Enable+0x3c>)
 8019abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019abe:	4a09      	ldr	r2, [pc, #36]	; (8019ae4 <HAL_MPU_Enable+0x3c>)
 8019ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019ac4:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019ac6:	f3bf 8f4f 	dsb	sy
}
 8019aca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8019acc:	f3bf 8f6f 	isb	sy
}
 8019ad0:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019ad2:	bf00      	nop
 8019ad4:	370c      	adds	r7, #12
 8019ad6:	46bd      	mov	sp, r7
 8019ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019adc:	4770      	bx	lr
 8019ade:	bf00      	nop
 8019ae0:	e000ed90 	.word	0xe000ed90
 8019ae4:	e000ed00 	.word	0xe000ed00

08019ae8 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019ae8:	b480      	push	{r7}
 8019aea:	b083      	sub	sp, #12
 8019aec:	af00      	add	r7, sp, #0
 8019aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	785a      	ldrb	r2, [r3, #1]
 8019af4:	4b1d      	ldr	r3, [pc, #116]	; (8019b6c <HAL_MPU_ConfigRegion+0x84>)
 8019af6:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	781b      	ldrb	r3, [r3, #0]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d029      	beq.n	8019b54 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8019b00:	4a1a      	ldr	r2, [pc, #104]	; (8019b6c <HAL_MPU_ConfigRegion+0x84>)
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	685b      	ldr	r3, [r3, #4]
 8019b06:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	7b1b      	ldrb	r3, [r3, #12]
 8019b0c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	7adb      	ldrb	r3, [r3, #11]
 8019b12:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019b14:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	7a9b      	ldrb	r3, [r3, #10]
 8019b1a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019b1c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	7b5b      	ldrb	r3, [r3, #13]
 8019b22:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019b24:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	7b9b      	ldrb	r3, [r3, #14]
 8019b2a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019b2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019b2e:	687b      	ldr	r3, [r7, #4]
 8019b30:	7bdb      	ldrb	r3, [r3, #15]
 8019b32:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019b34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	7a5b      	ldrb	r3, [r3, #9]
 8019b3a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019b3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	7a1b      	ldrb	r3, [r3, #8]
 8019b42:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019b44:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019b46:	687a      	ldr	r2, [r7, #4]
 8019b48:	7812      	ldrb	r2, [r2, #0]
 8019b4a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019b4c:	4a07      	ldr	r2, [pc, #28]	; (8019b6c <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019b4e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019b50:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8019b52:	e005      	b.n	8019b60 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8019b54:	4b05      	ldr	r3, [pc, #20]	; (8019b6c <HAL_MPU_ConfigRegion+0x84>)
 8019b56:	2200      	movs	r2, #0
 8019b58:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8019b5a:	4b04      	ldr	r3, [pc, #16]	; (8019b6c <HAL_MPU_ConfigRegion+0x84>)
 8019b5c:	2200      	movs	r2, #0
 8019b5e:	611a      	str	r2, [r3, #16]
}
 8019b60:	bf00      	nop
 8019b62:	370c      	adds	r7, #12
 8019b64:	46bd      	mov	sp, r7
 8019b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b6a:	4770      	bx	lr
 8019b6c:	e000ed90 	.word	0xe000ed90

08019b70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b084      	sub	sp, #16
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019b78:	687b      	ldr	r3, [r7, #4]
 8019b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019b7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8019b7e:	f7ff f857 	bl	8018c30 <HAL_GetTick>
 8019b82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019b8a:	b2db      	uxtb	r3, r3
 8019b8c:	2b02      	cmp	r3, #2
 8019b8e:	d008      	beq.n	8019ba2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	2280      	movs	r2, #128	; 0x80
 8019b94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	2200      	movs	r2, #0
 8019b9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8019b9e:	2301      	movs	r3, #1
 8019ba0:	e052      	b.n	8019c48 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	681b      	ldr	r3, [r3, #0]
 8019ba6:	681a      	ldr	r2, [r3, #0]
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	f022 0216 	bic.w	r2, r2, #22
 8019bb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	695a      	ldr	r2, [r3, #20]
 8019bb8:	687b      	ldr	r3, [r7, #4]
 8019bba:	681b      	ldr	r3, [r3, #0]
 8019bbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019bc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d103      	bne.n	8019bd2 <HAL_DMA_Abort+0x62>
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019bce:	2b00      	cmp	r3, #0
 8019bd0:	d007      	beq.n	8019be2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	681b      	ldr	r3, [r3, #0]
 8019bd6:	681a      	ldr	r2, [r3, #0]
 8019bd8:	687b      	ldr	r3, [r7, #4]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	f022 0208 	bic.w	r2, r2, #8
 8019be0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	681a      	ldr	r2, [r3, #0]
 8019be8:	687b      	ldr	r3, [r7, #4]
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	f022 0201 	bic.w	r2, r2, #1
 8019bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8019bf2:	e013      	b.n	8019c1c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019bf4:	f7ff f81c 	bl	8018c30 <HAL_GetTick>
 8019bf8:	4602      	mov	r2, r0
 8019bfa:	68bb      	ldr	r3, [r7, #8]
 8019bfc:	1ad3      	subs	r3, r2, r3
 8019bfe:	2b05      	cmp	r3, #5
 8019c00:	d90c      	bls.n	8019c1c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	2220      	movs	r2, #32
 8019c06:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	2203      	movs	r2, #3
 8019c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	2200      	movs	r2, #0
 8019c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8019c18:	2303      	movs	r3, #3
 8019c1a:	e015      	b.n	8019c48 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	f003 0301 	and.w	r3, r3, #1
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d1e4      	bne.n	8019bf4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019c2e:	223f      	movs	r2, #63	; 0x3f
 8019c30:	409a      	lsls	r2, r3
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	2201      	movs	r2, #1
 8019c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	2200      	movs	r2, #0
 8019c42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8019c46:	2300      	movs	r3, #0
}
 8019c48:	4618      	mov	r0, r3
 8019c4a:	3710      	adds	r7, #16
 8019c4c:	46bd      	mov	sp, r7
 8019c4e:	bd80      	pop	{r7, pc}

08019c50 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019c50:	b480      	push	{r7}
 8019c52:	b083      	sub	sp, #12
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8019c5e:	b2db      	uxtb	r3, r3
 8019c60:	2b02      	cmp	r3, #2
 8019c62:	d004      	beq.n	8019c6e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	2280      	movs	r2, #128	; 0x80
 8019c68:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8019c6a:	2301      	movs	r3, #1
 8019c6c:	e00c      	b.n	8019c88 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	2205      	movs	r2, #5
 8019c72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	681b      	ldr	r3, [r3, #0]
 8019c7a:	681a      	ldr	r2, [r3, #0]
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f022 0201 	bic.w	r2, r2, #1
 8019c84:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8019c86:	2300      	movs	r3, #0
}
 8019c88:	4618      	mov	r0, r3
 8019c8a:	370c      	adds	r7, #12
 8019c8c:	46bd      	mov	sp, r7
 8019c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c92:	4770      	bx	lr

08019c94 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8019c94:	b580      	push	{r7, lr}
 8019c96:	b084      	sub	sp, #16
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d101      	bne.n	8019ca6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	e06a      	b.n	8019d7c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019cac:	2b00      	cmp	r3, #0
 8019cae:	d106      	bne.n	8019cbe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	2223      	movs	r2, #35	; 0x23
 8019cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8019cb8:	6878      	ldr	r0, [r7, #4]
 8019cba:	f006 fbaf 	bl	802041c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8019cbe:	4b31      	ldr	r3, [pc, #196]	; (8019d84 <HAL_ETH_Init+0xf0>)
 8019cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cc2:	4a30      	ldr	r2, [pc, #192]	; (8019d84 <HAL_ETH_Init+0xf0>)
 8019cc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019cc8:	6453      	str	r3, [r2, #68]	; 0x44
 8019cca:	4b2e      	ldr	r3, [pc, #184]	; (8019d84 <HAL_ETH_Init+0xf0>)
 8019ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019cce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019cd2:	60bb      	str	r3, [r7, #8]
 8019cd4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8019cd6:	4b2c      	ldr	r3, [pc, #176]	; (8019d88 <HAL_ETH_Init+0xf4>)
 8019cd8:	685b      	ldr	r3, [r3, #4]
 8019cda:	4a2b      	ldr	r2, [pc, #172]	; (8019d88 <HAL_ETH_Init+0xf4>)
 8019cdc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8019ce0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8019ce2:	4b29      	ldr	r3, [pc, #164]	; (8019d88 <HAL_ETH_Init+0xf4>)
 8019ce4:	685a      	ldr	r2, [r3, #4]
 8019ce6:	687b      	ldr	r3, [r7, #4]
 8019ce8:	689b      	ldr	r3, [r3, #8]
 8019cea:	4927      	ldr	r1, [pc, #156]	; (8019d88 <HAL_ETH_Init+0xf4>)
 8019cec:	4313      	orrs	r3, r2
 8019cee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8019cf0:	4b25      	ldr	r3, [pc, #148]	; (8019d88 <HAL_ETH_Init+0xf4>)
 8019cf2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	6812      	ldr	r2, [r2, #0]
 8019d02:	f043 0301 	orr.w	r3, r3, #1
 8019d06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019d0c:	f7fe ff90 	bl	8018c30 <HAL_GetTick>
 8019d10:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8019d12:	e011      	b.n	8019d38 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8019d14:	f7fe ff8c 	bl	8018c30 <HAL_GetTick>
 8019d18:	4602      	mov	r2, r0
 8019d1a:	68fb      	ldr	r3, [r7, #12]
 8019d1c:	1ad3      	subs	r3, r2, r3
 8019d1e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8019d22:	d909      	bls.n	8019d38 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	2204      	movs	r2, #4
 8019d28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	22e0      	movs	r2, #224	; 0xe0
 8019d30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8019d34:	2301      	movs	r3, #1
 8019d36:	e021      	b.n	8019d7c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	f003 0301 	and.w	r3, r3, #1
 8019d46:	2b00      	cmp	r3, #0
 8019d48:	d1e4      	bne.n	8019d14 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8019d4a:	6878      	ldr	r0, [r7, #4]
 8019d4c:	f000 fee4 	bl	801ab18 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f000 ff8b 	bl	801ac6c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f000 ffe1 	bl	801ad1e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	685b      	ldr	r3, [r3, #4]
 8019d60:	461a      	mov	r2, r3
 8019d62:	2100      	movs	r1, #0
 8019d64:	6878      	ldr	r0, [r7, #4]
 8019d66:	f000 ff49 	bl	801abfc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2200      	movs	r2, #0
 8019d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2210      	movs	r2, #16
 8019d76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8019d7a:	2300      	movs	r3, #0
}
 8019d7c:	4618      	mov	r0, r3
 8019d7e:	3710      	adds	r7, #16
 8019d80:	46bd      	mov	sp, r7
 8019d82:	bd80      	pop	{r7, pc}
 8019d84:	40023800 	.word	0x40023800
 8019d88:	40013800 	.word	0x40013800

08019d8c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8019d8c:	b580      	push	{r7, lr}
 8019d8e:	b084      	sub	sp, #16
 8019d90:	af00      	add	r7, sp, #0
 8019d92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019d9a:	2b10      	cmp	r3, #16
 8019d9c:	d150      	bne.n	8019e40 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	2223      	movs	r2, #35	; 0x23
 8019da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	2204      	movs	r2, #4
 8019daa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8019dac:	6878      	ldr	r0, [r7, #4]
 8019dae:	f000 f9fd 	bl	801a1ac <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8019db2:	687b      	ldr	r3, [r7, #4]
 8019db4:	681b      	ldr	r3, [r3, #0]
 8019db6:	681a      	ldr	r2, [r3, #0]
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	f042 0208 	orr.w	r2, r2, #8
 8019dc0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8019dc2:	687b      	ldr	r3, [r7, #4]
 8019dc4:	681b      	ldr	r3, [r3, #0]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8019dca:	2001      	movs	r0, #1
 8019dcc:	f7fe ff3c 	bl	8018c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	68fa      	ldr	r2, [r7, #12]
 8019dd6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	681a      	ldr	r2, [r3, #0]
 8019dde:	687b      	ldr	r3, [r7, #4]
 8019de0:	681b      	ldr	r3, [r3, #0]
 8019de2:	f042 0204 	orr.w	r2, r2, #4
 8019de6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	681b      	ldr	r3, [r3, #0]
 8019dee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8019df0:	2001      	movs	r0, #1
 8019df2:	f7fe ff29 	bl	8018c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	68fa      	ldr	r2, [r7, #12]
 8019dfc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8019dfe:	6878      	ldr	r0, [r7, #4]
 8019e00:	f000 fd2a 	bl	801a858 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e0c:	699b      	ldr	r3, [r3, #24]
 8019e0e:	687a      	ldr	r2, [r7, #4]
 8019e10:	6812      	ldr	r2, [r2, #0]
 8019e12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019e16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019e1a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	681b      	ldr	r3, [r3, #0]
 8019e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e24:	699b      	ldr	r3, [r3, #24]
 8019e26:	687a      	ldr	r2, [r7, #4]
 8019e28:	6812      	ldr	r2, [r2, #0]
 8019e2a:	f043 0302 	orr.w	r3, r3, #2
 8019e2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019e32:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	2223      	movs	r2, #35	; 0x23
 8019e38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8019e3c:	2300      	movs	r3, #0
 8019e3e:	e000      	b.n	8019e42 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8019e40:	2301      	movs	r3, #1
  }
}
 8019e42:	4618      	mov	r0, r3
 8019e44:	3710      	adds	r7, #16
 8019e46:	46bd      	mov	sp, r7
 8019e48:	bd80      	pop	{r7, pc}

08019e4a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8019e4a:	b580      	push	{r7, lr}
 8019e4c:	b084      	sub	sp, #16
 8019e4e:	af00      	add	r7, sp, #0
 8019e50:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e58:	2b23      	cmp	r3, #35	; 0x23
 8019e5a:	d14a      	bne.n	8019ef2 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2223      	movs	r2, #35	; 0x23
 8019e60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e6c:	699b      	ldr	r3, [r3, #24]
 8019e6e:	687a      	ldr	r2, [r7, #4]
 8019e70:	6812      	ldr	r2, [r2, #0]
 8019e72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8019e76:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019e7a:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019e84:	699b      	ldr	r3, [r3, #24]
 8019e86:	687a      	ldr	r2, [r7, #4]
 8019e88:	6812      	ldr	r2, [r2, #0]
 8019e8a:	f023 0302 	bic.w	r3, r3, #2
 8019e8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019e92:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	681b      	ldr	r3, [r3, #0]
 8019e98:	681a      	ldr	r2, [r3, #0]
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	681b      	ldr	r3, [r3, #0]
 8019e9e:	f022 0204 	bic.w	r2, r2, #4
 8019ea2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8019eac:	2001      	movs	r0, #1
 8019eae:	f7fe fecb 	bl	8018c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	68fa      	ldr	r2, [r7, #12]
 8019eb8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8019eba:	6878      	ldr	r0, [r7, #4]
 8019ebc:	f000 fccc 	bl	801a858 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	681b      	ldr	r3, [r3, #0]
 8019ec4:	681a      	ldr	r2, [r3, #0]
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	f022 0208 	bic.w	r2, r2, #8
 8019ece:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	681b      	ldr	r3, [r3, #0]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8019ed8:	2001      	movs	r0, #1
 8019eda:	f7fe feb5 	bl	8018c48 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	681b      	ldr	r3, [r3, #0]
 8019ee2:	68fa      	ldr	r2, [r7, #12]
 8019ee4:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	2210      	movs	r2, #16
 8019eea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	e000      	b.n	8019ef4 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8019ef2:	2301      	movs	r3, #1
  }
}
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	3710      	adds	r7, #16
 8019ef8:	46bd      	mov	sp, r7
 8019efa:	bd80      	pop	{r7, pc}

08019efc <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8019efc:	b580      	push	{r7, lr}
 8019efe:	b086      	sub	sp, #24
 8019f00:	af00      	add	r7, sp, #0
 8019f02:	60f8      	str	r0, [r7, #12]
 8019f04:	60b9      	str	r1, [r7, #8]
 8019f06:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d109      	bne.n	8019f22 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f14:	f043 0201 	orr.w	r2, r3, #1
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8019f1e:	2301      	movs	r3, #1
 8019f20:	e07c      	b.n	801a01c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019f28:	2b23      	cmp	r3, #35	; 0x23
 8019f2a:	d176      	bne.n	801a01a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8019f2c:	2200      	movs	r2, #0
 8019f2e:	68b9      	ldr	r1, [r7, #8]
 8019f30:	68f8      	ldr	r0, [r7, #12]
 8019f32:	f000 ff61 	bl	801adf8 <ETH_Prepare_Tx_Descriptors>
 8019f36:	4603      	mov	r3, r0
 8019f38:	2b00      	cmp	r3, #0
 8019f3a:	d009      	beq.n	8019f50 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8019f3c:	68fb      	ldr	r3, [r7, #12]
 8019f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f42:	f043 0202 	orr.w	r2, r3, #2
 8019f46:	68fb      	ldr	r3, [r7, #12]
 8019f48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8019f4c:	2301      	movs	r3, #1
 8019f4e:	e065      	b.n	801a01c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8019f50:	f3bf 8f4f 	dsb	sy
}
 8019f54:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8019f5a:	68fb      	ldr	r3, [r7, #12]
 8019f5c:	3206      	adds	r2, #6
 8019f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019f62:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8019f64:	68fb      	ldr	r3, [r7, #12]
 8019f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f68:	1c5a      	adds	r2, r3, #1
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	629a      	str	r2, [r3, #40]	; 0x28
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f72:	2b03      	cmp	r3, #3
 8019f74:	d904      	bls.n	8019f80 <HAL_ETH_Transmit+0x84>
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f7a:	1f1a      	subs	r2, r3, #4
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8019f80:	68fb      	ldr	r3, [r7, #12]
 8019f82:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681a      	ldr	r2, [r3, #0]
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	3106      	adds	r1, #6
 8019f8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019f90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8019f94:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8019f96:	f7fe fe4b 	bl	8018c30 <HAL_GetTick>
 8019f9a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8019f9c:	e037      	b.n	801a00e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019fa6:	695b      	ldr	r3, [r3, #20]
 8019fa8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019fac:	2b00      	cmp	r3, #0
 8019fae:	d011      	beq.n	8019fd4 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019fb6:	f043 0208 	orr.w	r2, r3, #8
 8019fba:	68fb      	ldr	r3, [r7, #12]
 8019fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8019fc8:	695a      	ldr	r2, [r3, #20]
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8019fd0:	2301      	movs	r3, #1
 8019fd2:	e023      	b.n	801a01c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fda:	d018      	beq.n	801a00e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8019fdc:	f7fe fe28 	bl	8018c30 <HAL_GetTick>
 8019fe0:	4602      	mov	r2, r0
 8019fe2:	693b      	ldr	r3, [r7, #16]
 8019fe4:	1ad3      	subs	r3, r2, r3
 8019fe6:	687a      	ldr	r2, [r7, #4]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	d302      	bcc.n	8019ff2 <HAL_ETH_Transmit+0xf6>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d10d      	bne.n	801a00e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8019ff2:	68fb      	ldr	r3, [r7, #12]
 8019ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019ff8:	f043 0204 	orr.w	r2, r3, #4
 8019ffc:	68fb      	ldr	r3, [r7, #12]
 8019ffe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 801a002:	697b      	ldr	r3, [r7, #20]
 801a004:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801a008:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801a00a:	2301      	movs	r3, #1
 801a00c:	e006      	b.n	801a01c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801a00e:	697b      	ldr	r3, [r7, #20]
 801a010:	681b      	ldr	r3, [r3, #0]
 801a012:	2b00      	cmp	r3, #0
 801a014:	dbc3      	blt.n	8019f9e <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801a016:	2300      	movs	r3, #0
 801a018:	e000      	b.n	801a01c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801a01a:	2301      	movs	r3, #1
  }
}
 801a01c:	4618      	mov	r0, r3
 801a01e:	3718      	adds	r7, #24
 801a020:	46bd      	mov	sp, r7
 801a022:	bd80      	pop	{r7, pc}

0801a024 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 801a024:	b580      	push	{r7, lr}
 801a026:	b088      	sub	sp, #32
 801a028:	af00      	add	r7, sp, #0
 801a02a:	6078      	str	r0, [r7, #4]
 801a02c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801a02e:	2300      	movs	r3, #0
 801a030:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 801a032:	2300      	movs	r3, #0
 801a034:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d109      	bne.n	801a050 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a042:	f043 0201 	orr.w	r2, r3, #1
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801a04c:	2301      	movs	r3, #1
 801a04e:	e0a8      	b.n	801a1a2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a056:	2b23      	cmp	r3, #35	; 0x23
 801a058:	d001      	beq.n	801a05e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801a05a:	2301      	movs	r3, #1
 801a05c:	e0a1      	b.n	801a1a2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a062:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	69fa      	ldr	r2, [r7, #28]
 801a068:	3212      	adds	r2, #18
 801a06a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a06e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a074:	f1c3 0304 	rsb	r3, r3, #4
 801a078:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801a07a:	e06a      	b.n	801a152 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801a07c:	69bb      	ldr	r3, [r7, #24]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a084:	2b00      	cmp	r3, #0
 801a086:	d007      	beq.n	801a098 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801a088:	69bb      	ldr	r3, [r7, #24]
 801a08a:	699a      	ldr	r2, [r3, #24]
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 801a090:	69bb      	ldr	r3, [r7, #24]
 801a092:	69da      	ldr	r2, [r3, #28]
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801a098:	69bb      	ldr	r3, [r7, #24]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d103      	bne.n	801a0ac <HAL_ETH_ReadData+0x88>
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d040      	beq.n	801a12e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801a0ac:	69bb      	ldr	r3, [r7, #24]
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d005      	beq.n	801a0c4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	695b      	ldr	r3, [r3, #20]
 801a0c8:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801a0ca:	69bb      	ldr	r3, [r7, #24]
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d00c      	beq.n	801a0f0 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801a0d6:	69bb      	ldr	r3, [r7, #24]
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	0c1b      	lsrs	r3, r3, #16
 801a0dc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a0e0:	3b04      	subs	r3, #4
 801a0e2:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 801a0e4:	69bb      	ldr	r3, [r7, #24]
 801a0e6:	681a      	ldr	r2, [r3, #0]
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801a0ec:	2301      	movs	r3, #1
 801a0ee:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801a0f0:	69bb      	ldr	r3, [r7, #24]
 801a0f2:	689a      	ldr	r2, [r3, #8]
 801a0f4:	69bb      	ldr	r3, [r7, #24]
 801a0f6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 801a104:	69bb      	ldr	r3, [r7, #24]
 801a106:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801a108:	461a      	mov	r2, r3
 801a10a:	693b      	ldr	r3, [r7, #16]
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	f006 fb4f 	bl	80207b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801a112:	687b      	ldr	r3, [r7, #4]
 801a114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a116:	1c5a      	adds	r2, r3, #1
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801a120:	693b      	ldr	r3, [r7, #16]
 801a122:	441a      	add	r2, r3
 801a124:	687b      	ldr	r3, [r7, #4]
 801a126:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 801a128:	69bb      	ldr	r3, [r7, #24]
 801a12a:	2200      	movs	r2, #0
 801a12c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801a12e:	69fb      	ldr	r3, [r7, #28]
 801a130:	3301      	adds	r3, #1
 801a132:	61fb      	str	r3, [r7, #28]
 801a134:	69fb      	ldr	r3, [r7, #28]
 801a136:	2b03      	cmp	r3, #3
 801a138:	d902      	bls.n	801a140 <HAL_ETH_ReadData+0x11c>
 801a13a:	69fb      	ldr	r3, [r7, #28]
 801a13c:	3b04      	subs	r3, #4
 801a13e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	69fa      	ldr	r2, [r7, #28]
 801a144:	3212      	adds	r2, #18
 801a146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a14a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801a14c:	697b      	ldr	r3, [r7, #20]
 801a14e:	3301      	adds	r3, #1
 801a150:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801a152:	69bb      	ldr	r3, [r7, #24]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	2b00      	cmp	r3, #0
 801a158:	db06      	blt.n	801a168 <HAL_ETH_ReadData+0x144>
 801a15a:	697a      	ldr	r2, [r7, #20]
 801a15c:	68bb      	ldr	r3, [r7, #8]
 801a15e:	429a      	cmp	r2, r3
 801a160:	d202      	bcs.n	801a168 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801a162:	7bfb      	ldrb	r3, [r7, #15]
 801a164:	2b00      	cmp	r3, #0
 801a166:	d089      	beq.n	801a07c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a16c:	697b      	ldr	r3, [r7, #20]
 801a16e:	441a      	add	r2, r3
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d002      	beq.n	801a182 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801a17c:	6878      	ldr	r0, [r7, #4]
 801a17e:	f000 f815 	bl	801a1ac <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	69fa      	ldr	r2, [r7, #28]
 801a186:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 801a188:	7bfb      	ldrb	r3, [r7, #15]
 801a18a:	2b01      	cmp	r3, #1
 801a18c:	d108      	bne.n	801a1a0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a192:	683b      	ldr	r3, [r7, #0]
 801a194:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	2200      	movs	r2, #0
 801a19a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801a19c:	2300      	movs	r3, #0
 801a19e:	e000      	b.n	801a1a2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801a1a0:	2301      	movs	r3, #1
}
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	3720      	adds	r7, #32
 801a1a6:	46bd      	mov	sp, r7
 801a1a8:	bd80      	pop	{r7, pc}
	...

0801a1ac <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b088      	sub	sp, #32
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 801a1b8:	2301      	movs	r3, #1
 801a1ba:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a1c0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	69fa      	ldr	r2, [r7, #28]
 801a1c6:	3212      	adds	r2, #18
 801a1c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a1cc:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a1d2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 801a1d4:	e040      	b.n	801a258 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801a1d6:	697b      	ldr	r3, [r7, #20]
 801a1d8:	6a1b      	ldr	r3, [r3, #32]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d112      	bne.n	801a204 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801a1de:	f107 030c 	add.w	r3, r7, #12
 801a1e2:	4618      	mov	r0, r3
 801a1e4:	f006 fab4 	bl	8020750 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d102      	bne.n	801a1f4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	74fb      	strb	r3, [r7, #19]
 801a1f2:	e007      	b.n	801a204 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801a1f4:	68fb      	ldr	r3, [r7, #12]
 801a1f6:	461a      	mov	r2, r3
 801a1f8:	697b      	ldr	r3, [r7, #20]
 801a1fa:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	461a      	mov	r2, r3
 801a200:	697b      	ldr	r3, [r7, #20]
 801a202:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 801a204:	7cfb      	ldrb	r3, [r7, #19]
 801a206:	2b00      	cmp	r3, #0
 801a208:	d026      	beq.n	801a258 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d103      	bne.n	801a21a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801a212:	697b      	ldr	r3, [r7, #20]
 801a214:	4a1e      	ldr	r2, [pc, #120]	; (801a290 <ETH_UpdateDescriptor+0xe4>)
 801a216:	605a      	str	r2, [r3, #4]
 801a218:	e003      	b.n	801a222 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801a21a:	697b      	ldr	r3, [r7, #20]
 801a21c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801a220:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801a222:	f3bf 8f5f 	dmb	sy
}
 801a226:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 801a228:	697b      	ldr	r3, [r7, #20]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a230:	697b      	ldr	r3, [r7, #20]
 801a232:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 801a234:	69fb      	ldr	r3, [r7, #28]
 801a236:	3301      	adds	r3, #1
 801a238:	61fb      	str	r3, [r7, #28]
 801a23a:	69fb      	ldr	r3, [r7, #28]
 801a23c:	2b03      	cmp	r3, #3
 801a23e:	d902      	bls.n	801a246 <ETH_UpdateDescriptor+0x9a>
 801a240:	69fb      	ldr	r3, [r7, #28]
 801a242:	3b04      	subs	r3, #4
 801a244:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	69fa      	ldr	r2, [r7, #28]
 801a24a:	3212      	adds	r2, #18
 801a24c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a250:	617b      	str	r3, [r7, #20]
      desccount--;
 801a252:	69bb      	ldr	r3, [r7, #24]
 801a254:	3b01      	subs	r3, #1
 801a256:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 801a258:	69bb      	ldr	r3, [r7, #24]
 801a25a:	2b00      	cmp	r3, #0
 801a25c:	d002      	beq.n	801a264 <ETH_UpdateDescriptor+0xb8>
 801a25e:	7cfb      	ldrb	r3, [r7, #19]
 801a260:	2b00      	cmp	r3, #0
 801a262:	d1b8      	bne.n	801a1d6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a268:	69ba      	ldr	r2, [r7, #24]
 801a26a:	429a      	cmp	r2, r3
 801a26c:	d00c      	beq.n	801a288 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a276:	461a      	mov	r2, r3
 801a278:	2300      	movs	r3, #0
 801a27a:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801a27c:	687b      	ldr	r3, [r7, #4]
 801a27e:	69fa      	ldr	r2, [r7, #28]
 801a280:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	69ba      	ldr	r2, [r7, #24]
 801a286:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 801a288:	bf00      	nop
 801a28a:	3720      	adds	r7, #32
 801a28c:	46bd      	mov	sp, r7
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	800045f8 	.word	0x800045f8

0801a294 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2a4:	695b      	ldr	r3, [r3, #20]
 801a2a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a2aa:	2b40      	cmp	r3, #64	; 0x40
 801a2ac:	d112      	bne.n	801a2d4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	681b      	ldr	r3, [r3, #0]
 801a2b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2b6:	69db      	ldr	r3, [r3, #28]
 801a2b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a2bc:	2b40      	cmp	r3, #64	; 0x40
 801a2be:	d109      	bne.n	801a2d4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	681b      	ldr	r3, [r3, #0]
 801a2c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2c8:	461a      	mov	r2, r3
 801a2ca:	4b50      	ldr	r3, [pc, #320]	; (801a40c <HAL_ETH_IRQHandler+0x178>)
 801a2cc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801a2ce:	6878      	ldr	r0, [r7, #4]
 801a2d0:	f000 f8ac 	bl	801a42c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2dc:	695b      	ldr	r3, [r3, #20]
 801a2de:	f003 0301 	and.w	r3, r3, #1
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	d113      	bne.n	801a30e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2ee:	69db      	ldr	r3, [r3, #28]
 801a2f0:	f003 0301 	and.w	r3, r3, #1
 801a2f4:	2b01      	cmp	r3, #1
 801a2f6:	d10a      	bne.n	801a30e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a300:	461a      	mov	r2, r3
 801a302:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801a306:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 801a308:	6878      	ldr	r0, [r7, #4]
 801a30a:	f000 f885 	bl	801a418 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a316:	695b      	ldr	r3, [r3, #20]
 801a318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a31c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a320:	d14c      	bne.n	801a3bc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	681b      	ldr	r3, [r3, #0]
 801a326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a32a:	69db      	ldr	r3, [r3, #28]
 801a32c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a334:	d142      	bne.n	801a3bc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a33c:	f043 0208 	orr.w	r2, r3, #8
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	681b      	ldr	r3, [r3, #0]
 801a34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a34e:	695b      	ldr	r3, [r3, #20]
 801a350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a354:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a358:	d11a      	bne.n	801a390 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a362:	695a      	ldr	r2, [r3, #20]
 801a364:	4b2a      	ldr	r3, [pc, #168]	; (801a410 <HAL_ETH_IRQHandler+0x17c>)
 801a366:	4013      	ands	r3, r2
 801a368:	687a      	ldr	r2, [r7, #4]
 801a36a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	681b      	ldr	r3, [r3, #0]
 801a372:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a376:	69db      	ldr	r3, [r3, #28]
 801a378:	687a      	ldr	r2, [r7, #4]
 801a37a:	6812      	ldr	r2, [r2, #0]
 801a37c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801a380:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a384:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	22e0      	movs	r2, #224	; 0xe0
 801a38a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801a38e:	e012      	b.n	801a3b6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	681b      	ldr	r3, [r3, #0]
 801a394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a398:	695a      	ldr	r2, [r3, #20]
 801a39a:	f248 6380 	movw	r3, #34432	; 0x8680
 801a39e:	4013      	ands	r3, r2
 801a3a0:	687a      	ldr	r2, [r7, #4]
 801a3a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	681b      	ldr	r3, [r3, #0]
 801a3aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3ae:	461a      	mov	r2, r3
 801a3b0:	f248 6380 	movw	r3, #34432	; 0x8680
 801a3b4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 801a3b6:	6878      	ldr	r0, [r7, #4]
 801a3b8:	f000 f842 	bl	801a440 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3c2:	f003 0308 	and.w	r3, r3, #8
 801a3c6:	2b08      	cmp	r3, #8
 801a3c8:	d10e      	bne.n	801a3e8 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3d0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801a3da:	6878      	ldr	r0, [r7, #4]
 801a3dc:	f000 f83a 	bl	801a454 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801a3e8:	4b0a      	ldr	r3, [pc, #40]	; (801a414 <HAL_ETH_IRQHandler+0x180>)
 801a3ea:	695b      	ldr	r3, [r3, #20]
 801a3ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	d006      	beq.n	801a402 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801a3f4:	4b07      	ldr	r3, [pc, #28]	; (801a414 <HAL_ETH_IRQHandler+0x180>)
 801a3f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a3fa:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801a3fc:	6878      	ldr	r0, [r7, #4]
 801a3fe:	f000 f833 	bl	801a468 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801a402:	bf00      	nop
 801a404:	3708      	adds	r7, #8
 801a406:	46bd      	mov	sp, r7
 801a408:	bd80      	pop	{r7, pc}
 801a40a:	bf00      	nop
 801a40c:	00010040 	.word	0x00010040
 801a410:	007e2000 	.word	0x007e2000
 801a414:	40013c00 	.word	0x40013c00

0801a418 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 801a418:	b480      	push	{r7}
 801a41a:	b083      	sub	sp, #12
 801a41c:	af00      	add	r7, sp, #0
 801a41e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801a420:	bf00      	nop
 801a422:	370c      	adds	r7, #12
 801a424:	46bd      	mov	sp, r7
 801a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a42a:	4770      	bx	lr

0801a42c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801a42c:	b480      	push	{r7}
 801a42e:	b083      	sub	sp, #12
 801a430:	af00      	add	r7, sp, #0
 801a432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 801a434:	bf00      	nop
 801a436:	370c      	adds	r7, #12
 801a438:	46bd      	mov	sp, r7
 801a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a43e:	4770      	bx	lr

0801a440 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801a440:	b480      	push	{r7}
 801a442:	b083      	sub	sp, #12
 801a444:	af00      	add	r7, sp, #0
 801a446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 801a448:	bf00      	nop
 801a44a:	370c      	adds	r7, #12
 801a44c:	46bd      	mov	sp, r7
 801a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a452:	4770      	bx	lr

0801a454 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 801a454:	b480      	push	{r7}
 801a456:	b083      	sub	sp, #12
 801a458:	af00      	add	r7, sp, #0
 801a45a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 801a45c:	bf00      	nop
 801a45e:	370c      	adds	r7, #12
 801a460:	46bd      	mov	sp, r7
 801a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a466:	4770      	bx	lr

0801a468 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 801a468:	b480      	push	{r7}
 801a46a:	b083      	sub	sp, #12
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801a470:	bf00      	nop
 801a472:	370c      	adds	r7, #12
 801a474:	46bd      	mov	sp, r7
 801a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a47a:	4770      	bx	lr

0801a47c <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801a47c:	b580      	push	{r7, lr}
 801a47e:	b086      	sub	sp, #24
 801a480:	af00      	add	r7, sp, #0
 801a482:	60f8      	str	r0, [r7, #12]
 801a484:	60b9      	str	r1, [r7, #8]
 801a486:	607a      	str	r2, [r7, #4]
 801a488:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	691b      	ldr	r3, [r3, #16]
 801a490:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801a492:	697b      	ldr	r3, [r7, #20]
 801a494:	f003 031c 	and.w	r3, r3, #28
 801a498:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801a49a:	68bb      	ldr	r3, [r7, #8]
 801a49c:	02db      	lsls	r3, r3, #11
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	697a      	ldr	r2, [r7, #20]
 801a4a2:	4313      	orrs	r3, r2
 801a4a4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	019b      	lsls	r3, r3, #6
 801a4aa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801a4ae:	697a      	ldr	r2, [r7, #20]
 801a4b0:	4313      	orrs	r3, r2
 801a4b2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	f023 0302 	bic.w	r3, r3, #2
 801a4ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801a4bc:	697b      	ldr	r3, [r7, #20]
 801a4be:	f043 0301 	orr.w	r3, r3, #1
 801a4c2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	697a      	ldr	r2, [r7, #20]
 801a4ca:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801a4cc:	f7fe fbb0 	bl	8018c30 <HAL_GetTick>
 801a4d0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801a4d2:	e00d      	b.n	801a4f0 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801a4d4:	f7fe fbac 	bl	8018c30 <HAL_GetTick>
 801a4d8:	4602      	mov	r2, r0
 801a4da:	693b      	ldr	r3, [r7, #16]
 801a4dc:	1ad3      	subs	r3, r2, r3
 801a4de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4e2:	d301      	bcc.n	801a4e8 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801a4e4:	2301      	movs	r3, #1
 801a4e6:	e010      	b.n	801a50a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	691b      	ldr	r3, [r3, #16]
 801a4ee:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801a4f0:	697b      	ldr	r3, [r7, #20]
 801a4f2:	f003 0301 	and.w	r3, r3, #1
 801a4f6:	2b00      	cmp	r3, #0
 801a4f8:	d1ec      	bne.n	801a4d4 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801a4fa:	68fb      	ldr	r3, [r7, #12]
 801a4fc:	681b      	ldr	r3, [r3, #0]
 801a4fe:	695b      	ldr	r3, [r3, #20]
 801a500:	b29b      	uxth	r3, r3
 801a502:	461a      	mov	r2, r3
 801a504:	683b      	ldr	r3, [r7, #0]
 801a506:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801a508:	2300      	movs	r3, #0
}
 801a50a:	4618      	mov	r0, r3
 801a50c:	3718      	adds	r7, #24
 801a50e:	46bd      	mov	sp, r7
 801a510:	bd80      	pop	{r7, pc}

0801a512 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801a512:	b580      	push	{r7, lr}
 801a514:	b086      	sub	sp, #24
 801a516:	af00      	add	r7, sp, #0
 801a518:	60f8      	str	r0, [r7, #12]
 801a51a:	60b9      	str	r1, [r7, #8]
 801a51c:	607a      	str	r2, [r7, #4]
 801a51e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	681b      	ldr	r3, [r3, #0]
 801a524:	691b      	ldr	r3, [r3, #16]
 801a526:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801a528:	697b      	ldr	r3, [r7, #20]
 801a52a:	f003 031c 	and.w	r3, r3, #28
 801a52e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801a530:	68bb      	ldr	r3, [r7, #8]
 801a532:	02db      	lsls	r3, r3, #11
 801a534:	b29b      	uxth	r3, r3
 801a536:	697a      	ldr	r2, [r7, #20]
 801a538:	4313      	orrs	r3, r2
 801a53a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	019b      	lsls	r3, r3, #6
 801a540:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801a544:	697a      	ldr	r2, [r7, #20]
 801a546:	4313      	orrs	r3, r2
 801a548:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801a54a:	697b      	ldr	r3, [r7, #20]
 801a54c:	f043 0302 	orr.w	r3, r3, #2
 801a550:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801a552:	697b      	ldr	r3, [r7, #20]
 801a554:	f043 0301 	orr.w	r3, r3, #1
 801a558:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801a55a:	683b      	ldr	r3, [r7, #0]
 801a55c:	b29a      	uxth	r2, r3
 801a55e:	68fb      	ldr	r3, [r7, #12]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801a564:	68fb      	ldr	r3, [r7, #12]
 801a566:	681b      	ldr	r3, [r3, #0]
 801a568:	697a      	ldr	r2, [r7, #20]
 801a56a:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801a56c:	f7fe fb60 	bl	8018c30 <HAL_GetTick>
 801a570:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801a572:	e00d      	b.n	801a590 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801a574:	f7fe fb5c 	bl	8018c30 <HAL_GetTick>
 801a578:	4602      	mov	r2, r0
 801a57a:	693b      	ldr	r3, [r7, #16]
 801a57c:	1ad3      	subs	r3, r2, r3
 801a57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a582:	d301      	bcc.n	801a588 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801a584:	2301      	movs	r3, #1
 801a586:	e009      	b.n	801a59c <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	691b      	ldr	r3, [r3, #16]
 801a58e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801a590:	697b      	ldr	r3, [r7, #20]
 801a592:	f003 0301 	and.w	r3, r3, #1
 801a596:	2b00      	cmp	r3, #0
 801a598:	d1ec      	bne.n	801a574 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801a59a:	2300      	movs	r3, #0
}
 801a59c:	4618      	mov	r0, r3
 801a59e:	3718      	adds	r7, #24
 801a5a0:	46bd      	mov	sp, r7
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b083      	sub	sp, #12
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	6078      	str	r0, [r7, #4]
 801a5ac:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801a5ae:	683b      	ldr	r3, [r7, #0]
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d101      	bne.n	801a5b8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801a5b4:	2301      	movs	r3, #1
 801a5b6:	e0d9      	b.n	801a76c <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	f003 0310 	and.w	r3, r3, #16
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	bf14      	ite	ne
 801a5c6:	2301      	movne	r3, #1
 801a5c8:	2300      	moveq	r3, #0
 801a5ca:	b2db      	uxtb	r3, r3
 801a5cc:	461a      	mov	r2, r3
 801a5ce:	683b      	ldr	r3, [r7, #0]
 801a5d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801a5de:	683b      	ldr	r3, [r7, #0]
 801a5e0:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	bf0c      	ite	eq
 801a5f0:	2301      	moveq	r3, #1
 801a5f2:	2300      	movne	r3, #0
 801a5f4:	b2db      	uxtb	r3, r3
 801a5f6:	461a      	mov	r2, r3
 801a5f8:	683b      	ldr	r3, [r7, #0]
 801a5fa:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	681b      	ldr	r3, [r3, #0]
 801a604:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 801a608:	2b00      	cmp	r3, #0
 801a60a:	bf14      	ite	ne
 801a60c:	2301      	movne	r3, #1
 801a60e:	2300      	moveq	r3, #0
 801a610:	b2db      	uxtb	r3, r3
 801a612:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801a614:	683b      	ldr	r3, [r7, #0]
 801a616:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	681b      	ldr	r3, [r3, #0]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a622:	2b00      	cmp	r3, #0
 801a624:	bf0c      	ite	eq
 801a626:	2301      	moveq	r3, #1
 801a628:	2300      	movne	r3, #0
 801a62a:	b2db      	uxtb	r3, r3
 801a62c:	461a      	mov	r2, r3
 801a62e:	683b      	ldr	r3, [r7, #0]
 801a630:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	681b      	ldr	r3, [r3, #0]
 801a638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	bf14      	ite	ne
 801a640:	2301      	movne	r3, #1
 801a642:	2300      	moveq	r3, #0
 801a644:	b2db      	uxtb	r3, r3
 801a646:	461a      	mov	r2, r3
 801a648:	683b      	ldr	r3, [r7, #0]
 801a64a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801a656:	683b      	ldr	r3, [r7, #0]
 801a658:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	681b      	ldr	r3, [r3, #0]
 801a660:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801a664:	683b      	ldr	r3, [r7, #0]
 801a666:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	681b      	ldr	r3, [r3, #0]
 801a66c:	681b      	ldr	r3, [r3, #0]
 801a66e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801a672:	2b00      	cmp	r3, #0
 801a674:	bf0c      	ite	eq
 801a676:	2301      	moveq	r3, #1
 801a678:	2300      	movne	r3, #0
 801a67a:	b2db      	uxtb	r3, r3
 801a67c:	461a      	mov	r2, r3
 801a67e:	683b      	ldr	r3, [r7, #0]
 801a680:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801a682:	687b      	ldr	r3, [r7, #4]
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	681b      	ldr	r3, [r3, #0]
 801a688:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801a68c:	2b00      	cmp	r3, #0
 801a68e:	bf0c      	ite	eq
 801a690:	2301      	moveq	r3, #1
 801a692:	2300      	movne	r3, #0
 801a694:	b2db      	uxtb	r3, r3
 801a696:	461a      	mov	r2, r3
 801a698:	683b      	ldr	r3, [r7, #0]
 801a69a:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801a69c:	687b      	ldr	r3, [r7, #4]
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	bf14      	ite	ne
 801a6aa:	2301      	movne	r3, #1
 801a6ac:	2300      	moveq	r3, #0
 801a6ae:	b2db      	uxtb	r3, r3
 801a6b0:	461a      	mov	r2, r3
 801a6b2:	683b      	ldr	r3, [r7, #0]
 801a6b4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	681b      	ldr	r3, [r3, #0]
 801a6bc:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801a6c0:	683b      	ldr	r3, [r7, #0]
 801a6c2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801a6c4:	687b      	ldr	r3, [r7, #4]
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	bf14      	ite	ne
 801a6d2:	2301      	movne	r3, #1
 801a6d4:	2300      	moveq	r3, #0
 801a6d6:	b2db      	uxtb	r3, r3
 801a6d8:	461a      	mov	r2, r3
 801a6da:	683b      	ldr	r3, [r7, #0]
 801a6dc:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	681b      	ldr	r3, [r3, #0]
 801a6e2:	699b      	ldr	r3, [r3, #24]
 801a6e4:	f003 0302 	and.w	r3, r3, #2
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	bf14      	ite	ne
 801a6ec:	2301      	movne	r3, #1
 801a6ee:	2300      	moveq	r3, #0
 801a6f0:	b2db      	uxtb	r3, r3
 801a6f2:	461a      	mov	r2, r3
 801a6f4:	683b      	ldr	r3, [r7, #0]
 801a6f6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	699b      	ldr	r3, [r3, #24]
 801a700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a704:	2b00      	cmp	r3, #0
 801a706:	bf0c      	ite	eq
 801a708:	2301      	moveq	r3, #1
 801a70a:	2300      	movne	r3, #0
 801a70c:	b2db      	uxtb	r3, r3
 801a70e:	461a      	mov	r2, r3
 801a710:	683b      	ldr	r3, [r7, #0]
 801a712:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	699b      	ldr	r3, [r3, #24]
 801a71c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801a720:	683b      	ldr	r3, [r7, #0]
 801a722:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	681b      	ldr	r3, [r3, #0]
 801a728:	699b      	ldr	r3, [r3, #24]
 801a72a:	0c1b      	lsrs	r3, r3, #16
 801a72c:	b29a      	uxth	r2, r3
 801a72e:	683b      	ldr	r3, [r7, #0]
 801a730:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	699b      	ldr	r3, [r3, #24]
 801a738:	f003 0304 	and.w	r3, r3, #4
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	bf14      	ite	ne
 801a740:	2301      	movne	r3, #1
 801a742:	2300      	moveq	r3, #0
 801a744:	b2db      	uxtb	r3, r3
 801a746:	461a      	mov	r2, r3
 801a748:	683b      	ldr	r3, [r7, #0]
 801a74a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	699b      	ldr	r3, [r3, #24]
 801a754:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801a758:	2b00      	cmp	r3, #0
 801a75a:	bf14      	ite	ne
 801a75c:	2301      	movne	r3, #1
 801a75e:	2300      	moveq	r3, #0
 801a760:	b2db      	uxtb	r3, r3
 801a762:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801a764:	683b      	ldr	r3, [r7, #0]
 801a766:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801a76a:	2300      	movs	r3, #0
}
 801a76c:	4618      	mov	r0, r3
 801a76e:	370c      	adds	r7, #12
 801a770:	46bd      	mov	sp, r7
 801a772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a776:	4770      	bx	lr

0801a778 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801a778:	b580      	push	{r7, lr}
 801a77a:	b082      	sub	sp, #8
 801a77c:	af00      	add	r7, sp, #0
 801a77e:	6078      	str	r0, [r7, #4]
 801a780:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801a782:	683b      	ldr	r3, [r7, #0]
 801a784:	2b00      	cmp	r3, #0
 801a786:	d101      	bne.n	801a78c <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801a788:	2301      	movs	r3, #1
 801a78a:	e00b      	b.n	801a7a4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a792:	2b10      	cmp	r3, #16
 801a794:	d105      	bne.n	801a7a2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801a796:	6839      	ldr	r1, [r7, #0]
 801a798:	6878      	ldr	r0, [r7, #4]
 801a79a:	f000 f883 	bl	801a8a4 <ETH_SetMACConfig>

    return HAL_OK;
 801a79e:	2300      	movs	r3, #0
 801a7a0:	e000      	b.n	801a7a4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801a7a2:	2301      	movs	r3, #1
  }
}
 801a7a4:	4618      	mov	r0, r3
 801a7a6:	3708      	adds	r7, #8
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bd80      	pop	{r7, pc}

0801a7ac <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801a7ac:	b580      	push	{r7, lr}
 801a7ae:	b084      	sub	sp, #16
 801a7b0:	af00      	add	r7, sp, #0
 801a7b2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801a7b4:	687b      	ldr	r3, [r7, #4]
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	691b      	ldr	r3, [r3, #16]
 801a7ba:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	f023 031c 	bic.w	r3, r3, #28
 801a7c2:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801a7c4:	f002 f916 	bl	801c9f4 <HAL_RCC_GetHCLKFreq>
 801a7c8:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	4a1d      	ldr	r2, [pc, #116]	; (801a844 <HAL_ETH_SetMDIOClockRange+0x98>)
 801a7ce:	4293      	cmp	r3, r2
 801a7d0:	d908      	bls.n	801a7e4 <HAL_ETH_SetMDIOClockRange+0x38>
 801a7d2:	68bb      	ldr	r3, [r7, #8]
 801a7d4:	4a1c      	ldr	r2, [pc, #112]	; (801a848 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801a7d6:	4293      	cmp	r3, r2
 801a7d8:	d804      	bhi.n	801a7e4 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801a7da:	68fb      	ldr	r3, [r7, #12]
 801a7dc:	f043 0308 	orr.w	r3, r3, #8
 801a7e0:	60fb      	str	r3, [r7, #12]
 801a7e2:	e027      	b.n	801a834 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801a7e4:	68bb      	ldr	r3, [r7, #8]
 801a7e6:	4a18      	ldr	r2, [pc, #96]	; (801a848 <HAL_ETH_SetMDIOClockRange+0x9c>)
 801a7e8:	4293      	cmp	r3, r2
 801a7ea:	d908      	bls.n	801a7fe <HAL_ETH_SetMDIOClockRange+0x52>
 801a7ec:	68bb      	ldr	r3, [r7, #8]
 801a7ee:	4a17      	ldr	r2, [pc, #92]	; (801a84c <HAL_ETH_SetMDIOClockRange+0xa0>)
 801a7f0:	4293      	cmp	r3, r2
 801a7f2:	d204      	bcs.n	801a7fe <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801a7f4:	68fb      	ldr	r3, [r7, #12]
 801a7f6:	f043 030c 	orr.w	r3, r3, #12
 801a7fa:	60fb      	str	r3, [r7, #12]
 801a7fc:	e01a      	b.n	801a834 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801a7fe:	68bb      	ldr	r3, [r7, #8]
 801a800:	4a12      	ldr	r2, [pc, #72]	; (801a84c <HAL_ETH_SetMDIOClockRange+0xa0>)
 801a802:	4293      	cmp	r3, r2
 801a804:	d303      	bcc.n	801a80e <HAL_ETH_SetMDIOClockRange+0x62>
 801a806:	68bb      	ldr	r3, [r7, #8]
 801a808:	4a11      	ldr	r2, [pc, #68]	; (801a850 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801a80a:	4293      	cmp	r3, r2
 801a80c:	d911      	bls.n	801a832 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801a80e:	68bb      	ldr	r3, [r7, #8]
 801a810:	4a0f      	ldr	r2, [pc, #60]	; (801a850 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801a812:	4293      	cmp	r3, r2
 801a814:	d908      	bls.n	801a828 <HAL_ETH_SetMDIOClockRange+0x7c>
 801a816:	68bb      	ldr	r3, [r7, #8]
 801a818:	4a0e      	ldr	r2, [pc, #56]	; (801a854 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801a81a:	4293      	cmp	r3, r2
 801a81c:	d804      	bhi.n	801a828 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	f043 0304 	orr.w	r3, r3, #4
 801a824:	60fb      	str	r3, [r7, #12]
 801a826:	e005      	b.n	801a834 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801a828:	68fb      	ldr	r3, [r7, #12]
 801a82a:	f043 0310 	orr.w	r3, r3, #16
 801a82e:	60fb      	str	r3, [r7, #12]
 801a830:	e000      	b.n	801a834 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801a832:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	68fa      	ldr	r2, [r7, #12]
 801a83a:	611a      	str	r2, [r3, #16]
}
 801a83c:	bf00      	nop
 801a83e:	3710      	adds	r7, #16
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}
 801a844:	01312cff 	.word	0x01312cff
 801a848:	02160ebf 	.word	0x02160ebf
 801a84c:	03938700 	.word	0x03938700
 801a850:	05f5e0ff 	.word	0x05f5e0ff
 801a854:	08f0d17f 	.word	0x08f0d17f

0801a858 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801a858:	b580      	push	{r7, lr}
 801a85a:	b084      	sub	sp, #16
 801a85c:	af00      	add	r7, sp, #0
 801a85e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801a860:	2300      	movs	r3, #0
 801a862:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a86c:	699b      	ldr	r3, [r3, #24]
 801a86e:	687a      	ldr	r2, [r7, #4]
 801a870:	6812      	ldr	r2, [r2, #0]
 801a872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a87a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a884:	699b      	ldr	r3, [r3, #24]
 801a886:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a888:	2001      	movs	r0, #1
 801a88a:	f7fe f9dd 	bl	8018c48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801a88e:	687b      	ldr	r3, [r7, #4]
 801a890:	681a      	ldr	r2, [r3, #0]
 801a892:	68fb      	ldr	r3, [r7, #12]
 801a894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a898:	6193      	str	r3, [r2, #24]
}
 801a89a:	bf00      	nop
 801a89c:	3710      	adds	r7, #16
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	bd80      	pop	{r7, pc}
	...

0801a8a4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801a8a4:	b580      	push	{r7, lr}
 801a8a6:	b084      	sub	sp, #16
 801a8a8:	af00      	add	r7, sp, #0
 801a8aa:	6078      	str	r0, [r7, #4]
 801a8ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801a8b6:	68fa      	ldr	r2, [r7, #12]
 801a8b8:	4b51      	ldr	r3, [pc, #324]	; (801aa00 <ETH_SetMACConfig+0x15c>)
 801a8ba:	4013      	ands	r3, r2
 801a8bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a8be:	683b      	ldr	r3, [r7, #0]
 801a8c0:	7c1b      	ldrb	r3, [r3, #16]
 801a8c2:	2b00      	cmp	r3, #0
 801a8c4:	d102      	bne.n	801a8cc <ETH_SetMACConfig+0x28>
 801a8c6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801a8ca:	e000      	b.n	801a8ce <ETH_SetMACConfig+0x2a>
 801a8cc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801a8ce:	683b      	ldr	r3, [r7, #0]
 801a8d0:	7c5b      	ldrb	r3, [r3, #17]
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d102      	bne.n	801a8dc <ETH_SetMACConfig+0x38>
 801a8d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801a8da:	e000      	b.n	801a8de <ETH_SetMACConfig+0x3a>
 801a8dc:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a8de:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801a8e4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801a8e6:	683b      	ldr	r3, [r7, #0]
 801a8e8:	7fdb      	ldrb	r3, [r3, #31]
 801a8ea:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801a8ec:	431a      	orrs	r2, r3
                        macconf->Speed |
 801a8ee:	683b      	ldr	r3, [r7, #0]
 801a8f0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801a8f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801a8f4:	683a      	ldr	r2, [r7, #0]
 801a8f6:	7f92      	ldrb	r2, [r2, #30]
 801a8f8:	2a00      	cmp	r2, #0
 801a8fa:	d102      	bne.n	801a902 <ETH_SetMACConfig+0x5e>
 801a8fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801a900:	e000      	b.n	801a904 <ETH_SetMACConfig+0x60>
 801a902:	2200      	movs	r2, #0
                        macconf->Speed |
 801a904:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801a906:	683b      	ldr	r3, [r7, #0]
 801a908:	7f1b      	ldrb	r3, [r3, #28]
 801a90a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801a90c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801a90e:	683b      	ldr	r3, [r7, #0]
 801a910:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801a912:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801a914:	683b      	ldr	r3, [r7, #0]
 801a916:	791b      	ldrb	r3, [r3, #4]
 801a918:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801a91a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801a91c:	683a      	ldr	r2, [r7, #0]
 801a91e:	f892 2020 	ldrb.w	r2, [r2, #32]
 801a922:	2a00      	cmp	r2, #0
 801a924:	d102      	bne.n	801a92c <ETH_SetMACConfig+0x88>
 801a926:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a92a:	e000      	b.n	801a92e <ETH_SetMACConfig+0x8a>
 801a92c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801a92e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801a930:	683b      	ldr	r3, [r7, #0]
 801a932:	7bdb      	ldrb	r3, [r3, #15]
 801a934:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801a936:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801a938:	683b      	ldr	r3, [r7, #0]
 801a93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801a93c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801a93e:	683b      	ldr	r3, [r7, #0]
 801a940:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a944:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801a946:	4313      	orrs	r3, r2
 801a948:	68fa      	ldr	r2, [r7, #12]
 801a94a:	4313      	orrs	r3, r2
 801a94c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	68fa      	ldr	r2, [r7, #12]
 801a954:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	681b      	ldr	r3, [r3, #0]
 801a95c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a95e:	2001      	movs	r0, #1
 801a960:	f7fe f972 	bl	8018c48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	681b      	ldr	r3, [r3, #0]
 801a968:	68fa      	ldr	r2, [r7, #12]
 801a96a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801a96c:	687b      	ldr	r3, [r7, #4]
 801a96e:	681b      	ldr	r3, [r3, #0]
 801a970:	699b      	ldr	r3, [r3, #24]
 801a972:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801a974:	68fa      	ldr	r2, [r7, #12]
 801a976:	f64f 7341 	movw	r3, #65345	; 0xff41
 801a97a:	4013      	ands	r3, r2
 801a97c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a97e:	683b      	ldr	r3, [r7, #0]
 801a980:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a982:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801a984:	683a      	ldr	r2, [r7, #0]
 801a986:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801a98a:	2a00      	cmp	r2, #0
 801a98c:	d101      	bne.n	801a992 <ETH_SetMACConfig+0xee>
 801a98e:	2280      	movs	r2, #128	; 0x80
 801a990:	e000      	b.n	801a994 <ETH_SetMACConfig+0xf0>
 801a992:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a994:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801a996:	683b      	ldr	r3, [r7, #0]
 801a998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801a99a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801a99c:	683a      	ldr	r2, [r7, #0]
 801a99e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801a9a2:	2a01      	cmp	r2, #1
 801a9a4:	d101      	bne.n	801a9aa <ETH_SetMACConfig+0x106>
 801a9a6:	2208      	movs	r2, #8
 801a9a8:	e000      	b.n	801a9ac <ETH_SetMACConfig+0x108>
 801a9aa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801a9ac:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801a9ae:	683a      	ldr	r2, [r7, #0]
 801a9b0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801a9b4:	2a01      	cmp	r2, #1
 801a9b6:	d101      	bne.n	801a9bc <ETH_SetMACConfig+0x118>
 801a9b8:	2204      	movs	r2, #4
 801a9ba:	e000      	b.n	801a9be <ETH_SetMACConfig+0x11a>
 801a9bc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801a9be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801a9c0:	683a      	ldr	r2, [r7, #0]
 801a9c2:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801a9c6:	2a01      	cmp	r2, #1
 801a9c8:	d101      	bne.n	801a9ce <ETH_SetMACConfig+0x12a>
 801a9ca:	2202      	movs	r2, #2
 801a9cc:	e000      	b.n	801a9d0 <ETH_SetMACConfig+0x12c>
 801a9ce:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801a9d0:	4313      	orrs	r3, r2
 801a9d2:	68fa      	ldr	r2, [r7, #12]
 801a9d4:	4313      	orrs	r3, r2
 801a9d6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	68fa      	ldr	r2, [r7, #12]
 801a9de:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	681b      	ldr	r3, [r3, #0]
 801a9e4:	699b      	ldr	r3, [r3, #24]
 801a9e6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801a9e8:	2001      	movs	r0, #1
 801a9ea:	f7fe f92d 	bl	8018c48 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801a9ee:	687b      	ldr	r3, [r7, #4]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	68fa      	ldr	r2, [r7, #12]
 801a9f4:	619a      	str	r2, [r3, #24]
}
 801a9f6:	bf00      	nop
 801a9f8:	3710      	adds	r7, #16
 801a9fa:	46bd      	mov	sp, r7
 801a9fc:	bd80      	pop	{r7, pc}
 801a9fe:	bf00      	nop
 801aa00:	ff20810f 	.word	0xff20810f

0801aa04 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b084      	sub	sp, #16
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	681b      	ldr	r3, [r3, #0]
 801aa12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa16:	699b      	ldr	r3, [r3, #24]
 801aa18:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801aa1a:	68fa      	ldr	r2, [r7, #12]
 801aa1c:	4b3d      	ldr	r3, [pc, #244]	; (801ab14 <ETH_SetDMAConfig+0x110>)
 801aa1e:	4013      	ands	r3, r2
 801aa20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801aa22:	683b      	ldr	r3, [r7, #0]
 801aa24:	7b1b      	ldrb	r3, [r3, #12]
 801aa26:	2b00      	cmp	r3, #0
 801aa28:	d102      	bne.n	801aa30 <ETH_SetDMAConfig+0x2c>
 801aa2a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801aa2e:	e000      	b.n	801aa32 <ETH_SetDMAConfig+0x2e>
 801aa30:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801aa32:	683b      	ldr	r3, [r7, #0]
 801aa34:	7b5b      	ldrb	r3, [r3, #13]
 801aa36:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801aa38:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801aa3a:	683a      	ldr	r2, [r7, #0]
 801aa3c:	7f52      	ldrb	r2, [r2, #29]
 801aa3e:	2a00      	cmp	r2, #0
 801aa40:	d102      	bne.n	801aa48 <ETH_SetDMAConfig+0x44>
 801aa42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801aa46:	e000      	b.n	801aa4a <ETH_SetDMAConfig+0x46>
 801aa48:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801aa4a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801aa4c:	683b      	ldr	r3, [r7, #0]
 801aa4e:	7b9b      	ldrb	r3, [r3, #14]
 801aa50:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801aa52:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801aa54:	683b      	ldr	r3, [r7, #0]
 801aa56:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801aa58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801aa5a:	683b      	ldr	r3, [r7, #0]
 801aa5c:	7f1b      	ldrb	r3, [r3, #28]
 801aa5e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801aa60:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801aa62:	683b      	ldr	r3, [r7, #0]
 801aa64:	7f9b      	ldrb	r3, [r3, #30]
 801aa66:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801aa68:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801aa6a:	683b      	ldr	r3, [r7, #0]
 801aa6c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801aa6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801aa70:	683b      	ldr	r3, [r7, #0]
 801aa72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801aa76:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801aa78:	4313      	orrs	r3, r2
 801aa7a:	68fa      	ldr	r2, [r7, #12]
 801aa7c:	4313      	orrs	r3, r2
 801aa7e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa88:	461a      	mov	r2, r3
 801aa8a:	68fb      	ldr	r3, [r7, #12]
 801aa8c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801aa8e:	687b      	ldr	r3, [r7, #4]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aa96:	699b      	ldr	r3, [r3, #24]
 801aa98:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801aa9a:	2001      	movs	r0, #1
 801aa9c:	f7fe f8d4 	bl	8018c48 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	681b      	ldr	r3, [r3, #0]
 801aaa4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aaa8:	461a      	mov	r2, r3
 801aaaa:	68fb      	ldr	r3, [r7, #12]
 801aaac:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801aaae:	683b      	ldr	r3, [r7, #0]
 801aab0:	791b      	ldrb	r3, [r3, #4]
 801aab2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801aab4:	683b      	ldr	r3, [r7, #0]
 801aab6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801aab8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801aaba:	683b      	ldr	r3, [r7, #0]
 801aabc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801aabe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801aac0:	683b      	ldr	r3, [r7, #0]
 801aac2:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801aac4:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801aacc:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801aace:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801aad0:	683b      	ldr	r3, [r7, #0]
 801aad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aad4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801aad6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801aad8:	683b      	ldr	r3, [r7, #0]
 801aada:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801aadc:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801aade:	687a      	ldr	r2, [r7, #4]
 801aae0:	6812      	ldr	r2, [r2, #0]
 801aae2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801aae6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801aaea:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801aaec:	687b      	ldr	r3, [r7, #4]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801aaf8:	2001      	movs	r0, #1
 801aafa:	f7fe f8a5 	bl	8018c48 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ab06:	461a      	mov	r2, r3
 801ab08:	68fb      	ldr	r3, [r7, #12]
 801ab0a:	6013      	str	r3, [r2, #0]
}
 801ab0c:	bf00      	nop
 801ab0e:	3710      	adds	r7, #16
 801ab10:	46bd      	mov	sp, r7
 801ab12:	bd80      	pop	{r7, pc}
 801ab14:	f8de3f23 	.word	0xf8de3f23

0801ab18 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801ab18:	b580      	push	{r7, lr}
 801ab1a:	b0a6      	sub	sp, #152	; 0x98
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801ab20:	2301      	movs	r3, #1
 801ab22:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801ab26:	2301      	movs	r3, #1
 801ab28:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801ab30:	2300      	movs	r3, #0
 801ab32:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801ab36:	2301      	movs	r3, #1
 801ab38:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801ab3c:	2300      	movs	r3, #0
 801ab3e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801ab42:	2301      	movs	r3, #1
 801ab44:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801ab4e:	2300      	movs	r3, #0
 801ab50:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801ab54:	2300      	movs	r3, #0
 801ab56:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801ab58:	2300      	movs	r3, #0
 801ab5a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801ab5e:	2300      	movs	r3, #0
 801ab60:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801ab62:	2300      	movs	r3, #0
 801ab64:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801ab68:	2300      	movs	r3, #0
 801ab6a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801ab6e:	2300      	movs	r3, #0
 801ab70:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801ab74:	2300      	movs	r3, #0
 801ab76:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801ab7a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801ab7e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801ab80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ab84:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801ab86:	2300      	movs	r3, #0
 801ab88:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801ab8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801ab90:	4619      	mov	r1, r3
 801ab92:	6878      	ldr	r0, [r7, #4]
 801ab94:	f7ff fe86 	bl	801a8a4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801ab98:	2301      	movs	r3, #1
 801ab9a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801ab9c:	2301      	movs	r3, #1
 801ab9e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801aba0:	2301      	movs	r3, #1
 801aba2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801aba6:	2301      	movs	r3, #1
 801aba8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801abaa:	2300      	movs	r3, #0
 801abac:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801abae:	2300      	movs	r3, #0
 801abb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801abb4:	2300      	movs	r3, #0
 801abb6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801abba:	2300      	movs	r3, #0
 801abbc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801abbe:	2301      	movs	r3, #1
 801abc0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801abc4:	2301      	movs	r3, #1
 801abc6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801abc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801abcc:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801abce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801abd2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801abd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801abd8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801abda:	2301      	movs	r3, #1
 801abdc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801abe0:	2300      	movs	r3, #0
 801abe2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801abe4:	2300      	movs	r3, #0
 801abe6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801abe8:	f107 0308 	add.w	r3, r7, #8
 801abec:	4619      	mov	r1, r3
 801abee:	6878      	ldr	r0, [r7, #4]
 801abf0:	f7ff ff08 	bl	801aa04 <ETH_SetDMAConfig>
}
 801abf4:	bf00      	nop
 801abf6:	3798      	adds	r7, #152	; 0x98
 801abf8:	46bd      	mov	sp, r7
 801abfa:	bd80      	pop	{r7, pc}

0801abfc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b087      	sub	sp, #28
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801ac08:	687b      	ldr	r3, [r7, #4]
 801ac0a:	3305      	adds	r3, #5
 801ac0c:	781b      	ldrb	r3, [r3, #0]
 801ac0e:	021b      	lsls	r3, r3, #8
 801ac10:	687a      	ldr	r2, [r7, #4]
 801ac12:	3204      	adds	r2, #4
 801ac14:	7812      	ldrb	r2, [r2, #0]
 801ac16:	4313      	orrs	r3, r2
 801ac18:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801ac1a:	68ba      	ldr	r2, [r7, #8]
 801ac1c:	4b11      	ldr	r3, [pc, #68]	; (801ac64 <ETH_MACAddressConfig+0x68>)
 801ac1e:	4413      	add	r3, r2
 801ac20:	461a      	mov	r2, r3
 801ac22:	697b      	ldr	r3, [r7, #20]
 801ac24:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	3303      	adds	r3, #3
 801ac2a:	781b      	ldrb	r3, [r3, #0]
 801ac2c:	061a      	lsls	r2, r3, #24
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	3302      	adds	r3, #2
 801ac32:	781b      	ldrb	r3, [r3, #0]
 801ac34:	041b      	lsls	r3, r3, #16
 801ac36:	431a      	orrs	r2, r3
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	3301      	adds	r3, #1
 801ac3c:	781b      	ldrb	r3, [r3, #0]
 801ac3e:	021b      	lsls	r3, r3, #8
 801ac40:	4313      	orrs	r3, r2
 801ac42:	687a      	ldr	r2, [r7, #4]
 801ac44:	7812      	ldrb	r2, [r2, #0]
 801ac46:	4313      	orrs	r3, r2
 801ac48:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801ac4a:	68ba      	ldr	r2, [r7, #8]
 801ac4c:	4b06      	ldr	r3, [pc, #24]	; (801ac68 <ETH_MACAddressConfig+0x6c>)
 801ac4e:	4413      	add	r3, r2
 801ac50:	461a      	mov	r2, r3
 801ac52:	697b      	ldr	r3, [r7, #20]
 801ac54:	6013      	str	r3, [r2, #0]
}
 801ac56:	bf00      	nop
 801ac58:	371c      	adds	r7, #28
 801ac5a:	46bd      	mov	sp, r7
 801ac5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac60:	4770      	bx	lr
 801ac62:	bf00      	nop
 801ac64:	40028040 	.word	0x40028040
 801ac68:	40028044 	.word	0x40028044

0801ac6c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801ac6c:	b480      	push	{r7}
 801ac6e:	b085      	sub	sp, #20
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801ac74:	2300      	movs	r3, #0
 801ac76:	60fb      	str	r3, [r7, #12]
 801ac78:	e03e      	b.n	801acf8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	68d9      	ldr	r1, [r3, #12]
 801ac7e:	68fa      	ldr	r2, [r7, #12]
 801ac80:	4613      	mov	r3, r2
 801ac82:	009b      	lsls	r3, r3, #2
 801ac84:	4413      	add	r3, r2
 801ac86:	00db      	lsls	r3, r3, #3
 801ac88:	440b      	add	r3, r1
 801ac8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801ac8c:	68bb      	ldr	r3, [r7, #8]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801ac92:	68bb      	ldr	r3, [r7, #8]
 801ac94:	2200      	movs	r2, #0
 801ac96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801ac98:	68bb      	ldr	r3, [r7, #8]
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801ac9e:	68bb      	ldr	r3, [r7, #8]
 801aca0:	2200      	movs	r2, #0
 801aca2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801aca4:	68b9      	ldr	r1, [r7, #8]
 801aca6:	687b      	ldr	r3, [r7, #4]
 801aca8:	68fa      	ldr	r2, [r7, #12]
 801acaa:	3206      	adds	r2, #6
 801acac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801acb0:	68bb      	ldr	r3, [r7, #8]
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801acb8:	68bb      	ldr	r3, [r7, #8]
 801acba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801acbc:	68fb      	ldr	r3, [r7, #12]
 801acbe:	2b02      	cmp	r3, #2
 801acc0:	d80c      	bhi.n	801acdc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	68d9      	ldr	r1, [r3, #12]
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	1c5a      	adds	r2, r3, #1
 801acca:	4613      	mov	r3, r2
 801accc:	009b      	lsls	r3, r3, #2
 801acce:	4413      	add	r3, r2
 801acd0:	00db      	lsls	r3, r3, #3
 801acd2:	440b      	add	r3, r1
 801acd4:	461a      	mov	r2, r3
 801acd6:	68bb      	ldr	r3, [r7, #8]
 801acd8:	60da      	str	r2, [r3, #12]
 801acda:	e004      	b.n	801ace6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801acdc:	687b      	ldr	r3, [r7, #4]
 801acde:	68db      	ldr	r3, [r3, #12]
 801ace0:	461a      	mov	r2, r3
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801ace6:	68bb      	ldr	r3, [r7, #8]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801acee:	68bb      	ldr	r3, [r7, #8]
 801acf0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801acf2:	68fb      	ldr	r3, [r7, #12]
 801acf4:	3301      	adds	r3, #1
 801acf6:	60fb      	str	r3, [r7, #12]
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	2b03      	cmp	r3, #3
 801acfc:	d9bd      	bls.n	801ac7a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	2200      	movs	r2, #0
 801ad02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	68da      	ldr	r2, [r3, #12]
 801ad08:	687b      	ldr	r3, [r7, #4]
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ad10:	611a      	str	r2, [r3, #16]
}
 801ad12:	bf00      	nop
 801ad14:	3714      	adds	r7, #20
 801ad16:	46bd      	mov	sp, r7
 801ad18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad1c:	4770      	bx	lr

0801ad1e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801ad1e:	b480      	push	{r7}
 801ad20:	b085      	sub	sp, #20
 801ad22:	af00      	add	r7, sp, #0
 801ad24:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801ad26:	2300      	movs	r3, #0
 801ad28:	60fb      	str	r3, [r7, #12]
 801ad2a:	e046      	b.n	801adba <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801ad2c:	687b      	ldr	r3, [r7, #4]
 801ad2e:	6919      	ldr	r1, [r3, #16]
 801ad30:	68fa      	ldr	r2, [r7, #12]
 801ad32:	4613      	mov	r3, r2
 801ad34:	009b      	lsls	r3, r3, #2
 801ad36:	4413      	add	r3, r2
 801ad38:	00db      	lsls	r3, r3, #3
 801ad3a:	440b      	add	r3, r1
 801ad3c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801ad3e:	68bb      	ldr	r3, [r7, #8]
 801ad40:	2200      	movs	r2, #0
 801ad42:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801ad44:	68bb      	ldr	r3, [r7, #8]
 801ad46:	2200      	movs	r2, #0
 801ad48:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801ad4a:	68bb      	ldr	r3, [r7, #8]
 801ad4c:	2200      	movs	r2, #0
 801ad4e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	2200      	movs	r2, #0
 801ad54:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801ad56:	68bb      	ldr	r3, [r7, #8]
 801ad58:	2200      	movs	r2, #0
 801ad5a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801ad5c:	68bb      	ldr	r3, [r7, #8]
 801ad5e:	2200      	movs	r2, #0
 801ad60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801ad62:	68bb      	ldr	r3, [r7, #8]
 801ad64:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801ad68:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801ad70:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	685b      	ldr	r3, [r3, #4]
 801ad76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801ad7e:	68b9      	ldr	r1, [r7, #8]
 801ad80:	687b      	ldr	r3, [r7, #4]
 801ad82:	68fa      	ldr	r2, [r7, #12]
 801ad84:	3212      	adds	r2, #18
 801ad86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801ad8a:	68fb      	ldr	r3, [r7, #12]
 801ad8c:	2b02      	cmp	r3, #2
 801ad8e:	d80c      	bhi.n	801adaa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	6919      	ldr	r1, [r3, #16]
 801ad94:	68fb      	ldr	r3, [r7, #12]
 801ad96:	1c5a      	adds	r2, r3, #1
 801ad98:	4613      	mov	r3, r2
 801ad9a:	009b      	lsls	r3, r3, #2
 801ad9c:	4413      	add	r3, r2
 801ad9e:	00db      	lsls	r3, r3, #3
 801ada0:	440b      	add	r3, r1
 801ada2:	461a      	mov	r2, r3
 801ada4:	68bb      	ldr	r3, [r7, #8]
 801ada6:	60da      	str	r2, [r3, #12]
 801ada8:	e004      	b.n	801adb4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	691b      	ldr	r3, [r3, #16]
 801adae:	461a      	mov	r2, r3
 801adb0:	68bb      	ldr	r3, [r7, #8]
 801adb2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801adb4:	68fb      	ldr	r3, [r7, #12]
 801adb6:	3301      	adds	r3, #1
 801adb8:	60fb      	str	r3, [r7, #12]
 801adba:	68fb      	ldr	r3, [r7, #12]
 801adbc:	2b03      	cmp	r3, #3
 801adbe:	d9b5      	bls.n	801ad2c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	2200      	movs	r2, #0
 801adc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801adc6:	687b      	ldr	r3, [r7, #4]
 801adc8:	2200      	movs	r2, #0
 801adca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801adcc:	687b      	ldr	r3, [r7, #4]
 801adce:	2200      	movs	r2, #0
 801add0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801add2:	687b      	ldr	r3, [r7, #4]
 801add4:	2200      	movs	r2, #0
 801add6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801add8:	687b      	ldr	r3, [r7, #4]
 801adda:	2200      	movs	r2, #0
 801addc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	691a      	ldr	r2, [r3, #16]
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	681b      	ldr	r3, [r3, #0]
 801ade6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801adea:	60da      	str	r2, [r3, #12]
}
 801adec:	bf00      	nop
 801adee:	3714      	adds	r7, #20
 801adf0:	46bd      	mov	sp, r7
 801adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adf6:	4770      	bx	lr

0801adf8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801adf8:	b480      	push	{r7}
 801adfa:	b08d      	sub	sp, #52	; 0x34
 801adfc:	af00      	add	r7, sp, #0
 801adfe:	60f8      	str	r0, [r7, #12]
 801ae00:	60b9      	str	r1, [r7, #8]
 801ae02:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	3318      	adds	r3, #24
 801ae08:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801ae0a:	697b      	ldr	r3, [r7, #20]
 801ae0c:	691b      	ldr	r3, [r3, #16]
 801ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801ae10:	697b      	ldr	r3, [r7, #20]
 801ae12:	691b      	ldr	r3, [r3, #16]
 801ae14:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801ae16:	2300      	movs	r3, #0
 801ae18:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ae22:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801ae24:	68bb      	ldr	r3, [r7, #8]
 801ae26:	689b      	ldr	r3, [r3, #8]
 801ae28:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801ae2e:	6a3b      	ldr	r3, [r7, #32]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ae36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ae3a:	d007      	beq.n	801ae4c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801ae3c:	697a      	ldr	r2, [r7, #20]
 801ae3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae40:	3304      	adds	r3, #4
 801ae42:	009b      	lsls	r3, r3, #2
 801ae44:	4413      	add	r3, r2
 801ae46:	685b      	ldr	r3, [r3, #4]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d001      	beq.n	801ae50 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801ae4c:	2302      	movs	r3, #2
 801ae4e:	e0ff      	b.n	801b050 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801ae50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae52:	3301      	adds	r3, #1
 801ae54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801ae56:	69fb      	ldr	r3, [r7, #28]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	461a      	mov	r2, r3
 801ae5c:	6a3b      	ldr	r3, [r7, #32]
 801ae5e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801ae60:	6a3b      	ldr	r3, [r7, #32]
 801ae62:	685a      	ldr	r2, [r3, #4]
 801ae64:	4b7d      	ldr	r3, [pc, #500]	; (801b05c <ETH_Prepare_Tx_Descriptors+0x264>)
 801ae66:	4013      	ands	r3, r2
 801ae68:	69fa      	ldr	r2, [r7, #28]
 801ae6a:	6852      	ldr	r2, [r2, #4]
 801ae6c:	431a      	orrs	r2, r3
 801ae6e:	6a3b      	ldr	r3, [r7, #32]
 801ae70:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801ae72:	68bb      	ldr	r3, [r7, #8]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	f003 0301 	and.w	r3, r3, #1
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d008      	beq.n	801ae90 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801ae7e:	6a3b      	ldr	r3, [r7, #32]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801ae86:	68bb      	ldr	r3, [r7, #8]
 801ae88:	695b      	ldr	r3, [r3, #20]
 801ae8a:	431a      	orrs	r2, r3
 801ae8c:	6a3b      	ldr	r3, [r7, #32]
 801ae8e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	f003 0320 	and.w	r3, r3, #32
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d008      	beq.n	801aeae <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801ae9c:	6a3b      	ldr	r3, [r7, #32]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801aea4:	68bb      	ldr	r3, [r7, #8]
 801aea6:	691b      	ldr	r3, [r3, #16]
 801aea8:	431a      	orrs	r2, r3
 801aeaa:	6a3b      	ldr	r3, [r7, #32]
 801aeac:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801aeae:	68bb      	ldr	r3, [r7, #8]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	f003 0304 	and.w	r3, r3, #4
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d005      	beq.n	801aec6 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801aeba:	6a3b      	ldr	r3, [r7, #32]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801aec2:	6a3b      	ldr	r3, [r7, #32]
 801aec4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801aec6:	6a3b      	ldr	r3, [r7, #32]
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801aece:	6a3b      	ldr	r3, [r7, #32]
 801aed0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801aed2:	f3bf 8f5f 	dmb	sy
}
 801aed6:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801aed8:	6a3b      	ldr	r3, [r7, #32]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801aee0:	6a3b      	ldr	r3, [r7, #32]
 801aee2:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801aee4:	e082      	b.n	801afec <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801aee6:	6a3b      	ldr	r3, [r7, #32]
 801aee8:	681b      	ldr	r3, [r3, #0]
 801aeea:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801aeee:	6a3b      	ldr	r3, [r7, #32]
 801aef0:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801aef2:	687b      	ldr	r3, [r7, #4]
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	d006      	beq.n	801af06 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801aef8:	6a3b      	ldr	r3, [r7, #32]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801af00:	6a3b      	ldr	r3, [r7, #32]
 801af02:	601a      	str	r2, [r3, #0]
 801af04:	e005      	b.n	801af12 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801af06:	6a3b      	ldr	r3, [r7, #32]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801af0e:	6a3b      	ldr	r3, [r7, #32]
 801af10:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af14:	3301      	adds	r3, #1
 801af16:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af1a:	2b03      	cmp	r3, #3
 801af1c:	d902      	bls.n	801af24 <ETH_Prepare_Tx_Descriptors+0x12c>
 801af1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af20:	3b04      	subs	r3, #4
 801af22:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801af24:	697b      	ldr	r3, [r7, #20]
 801af26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af2c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801af2e:	6a3b      	ldr	r3, [r7, #32]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801af36:	6a3b      	ldr	r3, [r7, #32]
 801af38:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801af3a:	6a3b      	ldr	r3, [r7, #32]
 801af3c:	681b      	ldr	r3, [r3, #0]
 801af3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801af46:	d007      	beq.n	801af58 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801af48:	697a      	ldr	r2, [r7, #20]
 801af4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af4c:	3304      	adds	r3, #4
 801af4e:	009b      	lsls	r3, r3, #2
 801af50:	4413      	add	r3, r2
 801af52:	685b      	ldr	r3, [r3, #4]
 801af54:	2b00      	cmp	r3, #0
 801af56:	d029      	beq.n	801afac <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801af58:	693b      	ldr	r3, [r7, #16]
 801af5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801af5c:	697b      	ldr	r3, [r7, #20]
 801af5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af64:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801af66:	2300      	movs	r3, #0
 801af68:	62bb      	str	r3, [r7, #40]	; 0x28
 801af6a:	e019      	b.n	801afa0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801af6c:	f3bf 8f5f 	dmb	sy
}
 801af70:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801af72:	6a3b      	ldr	r3, [r7, #32]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801af7a:	6a3b      	ldr	r3, [r7, #32]
 801af7c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af80:	3301      	adds	r3, #1
 801af82:	62fb      	str	r3, [r7, #44]	; 0x2c
 801af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af86:	2b03      	cmp	r3, #3
 801af88:	d902      	bls.n	801af90 <ETH_Prepare_Tx_Descriptors+0x198>
 801af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af8c:	3b04      	subs	r3, #4
 801af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801af90:	697b      	ldr	r3, [r7, #20]
 801af92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801af94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801af98:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af9c:	3301      	adds	r3, #1
 801af9e:	62bb      	str	r3, [r7, #40]	; 0x28
 801afa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801afa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa4:	429a      	cmp	r2, r3
 801afa6:	d3e1      	bcc.n	801af6c <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801afa8:	2302      	movs	r3, #2
 801afaa:	e051      	b.n	801b050 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801afac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afae:	3301      	adds	r3, #1
 801afb0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801afb2:	69fb      	ldr	r3, [r7, #28]
 801afb4:	689b      	ldr	r3, [r3, #8]
 801afb6:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801afb8:	69fb      	ldr	r3, [r7, #28]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	461a      	mov	r2, r3
 801afbe:	6a3b      	ldr	r3, [r7, #32]
 801afc0:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801afc2:	6a3b      	ldr	r3, [r7, #32]
 801afc4:	685a      	ldr	r2, [r3, #4]
 801afc6:	4b25      	ldr	r3, [pc, #148]	; (801b05c <ETH_Prepare_Tx_Descriptors+0x264>)
 801afc8:	4013      	ands	r3, r2
 801afca:	69fa      	ldr	r2, [r7, #28]
 801afcc:	6852      	ldr	r2, [r2, #4]
 801afce:	431a      	orrs	r2, r3
 801afd0:	6a3b      	ldr	r3, [r7, #32]
 801afd2:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801afd4:	69bb      	ldr	r3, [r7, #24]
 801afd6:	3301      	adds	r3, #1
 801afd8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801afda:	f3bf 8f5f 	dmb	sy
}
 801afde:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801afe0:	6a3b      	ldr	r3, [r7, #32]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801afe8:	6a3b      	ldr	r3, [r7, #32]
 801afea:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801afec:	69fb      	ldr	r3, [r7, #28]
 801afee:	689b      	ldr	r3, [r3, #8]
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	f47f af78 	bne.w	801aee6 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d006      	beq.n	801b00a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801affc:	6a3b      	ldr	r3, [r7, #32]
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b004:	6a3b      	ldr	r3, [r7, #32]
 801b006:	601a      	str	r2, [r3, #0]
 801b008:	e005      	b.n	801b016 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b00a:	6a3b      	ldr	r3, [r7, #32]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801b012:	6a3b      	ldr	r3, [r7, #32]
 801b014:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801b016:	6a3b      	ldr	r3, [r7, #32]
 801b018:	681b      	ldr	r3, [r3, #0]
 801b01a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b01e:	6a3b      	ldr	r3, [r7, #32]
 801b020:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b026:	6979      	ldr	r1, [r7, #20]
 801b028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b02a:	3304      	adds	r3, #4
 801b02c:	009b      	lsls	r3, r3, #2
 801b02e:	440b      	add	r3, r1
 801b030:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801b032:	697b      	ldr	r3, [r7, #20]
 801b034:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b036:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b038:	b672      	cpsid	i
}
 801b03a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801b03c:	697b      	ldr	r3, [r7, #20]
 801b03e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b040:	69bb      	ldr	r3, [r7, #24]
 801b042:	4413      	add	r3, r2
 801b044:	1c5a      	adds	r2, r3, #1
 801b046:	697b      	ldr	r3, [r7, #20]
 801b048:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801b04a:	b662      	cpsie	i
}
 801b04c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801b04e:	2300      	movs	r3, #0
}
 801b050:	4618      	mov	r0, r3
 801b052:	3734      	adds	r7, #52	; 0x34
 801b054:	46bd      	mov	sp, r7
 801b056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b05a:	4770      	bx	lr
 801b05c:	ffffe000 	.word	0xffffe000

0801b060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b060:	b480      	push	{r7}
 801b062:	b089      	sub	sp, #36	; 0x24
 801b064:	af00      	add	r7, sp, #0
 801b066:	6078      	str	r0, [r7, #4]
 801b068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801b06a:	2300      	movs	r3, #0
 801b06c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801b06e:	2300      	movs	r3, #0
 801b070:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801b072:	2300      	movs	r3, #0
 801b074:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801b076:	2300      	movs	r3, #0
 801b078:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801b07a:	2300      	movs	r3, #0
 801b07c:	61fb      	str	r3, [r7, #28]
 801b07e:	e175      	b.n	801b36c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801b080:	2201      	movs	r2, #1
 801b082:	69fb      	ldr	r3, [r7, #28]
 801b084:	fa02 f303 	lsl.w	r3, r2, r3
 801b088:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801b08a:	683b      	ldr	r3, [r7, #0]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	697a      	ldr	r2, [r7, #20]
 801b090:	4013      	ands	r3, r2
 801b092:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801b094:	693a      	ldr	r2, [r7, #16]
 801b096:	697b      	ldr	r3, [r7, #20]
 801b098:	429a      	cmp	r2, r3
 801b09a:	f040 8164 	bne.w	801b366 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b09e:	683b      	ldr	r3, [r7, #0]
 801b0a0:	685b      	ldr	r3, [r3, #4]
 801b0a2:	f003 0303 	and.w	r3, r3, #3
 801b0a6:	2b01      	cmp	r3, #1
 801b0a8:	d005      	beq.n	801b0b6 <HAL_GPIO_Init+0x56>
 801b0aa:	683b      	ldr	r3, [r7, #0]
 801b0ac:	685b      	ldr	r3, [r3, #4]
 801b0ae:	f003 0303 	and.w	r3, r3, #3
 801b0b2:	2b02      	cmp	r3, #2
 801b0b4:	d130      	bne.n	801b118 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	689b      	ldr	r3, [r3, #8]
 801b0ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801b0bc:	69fb      	ldr	r3, [r7, #28]
 801b0be:	005b      	lsls	r3, r3, #1
 801b0c0:	2203      	movs	r2, #3
 801b0c2:	fa02 f303 	lsl.w	r3, r2, r3
 801b0c6:	43db      	mvns	r3, r3
 801b0c8:	69ba      	ldr	r2, [r7, #24]
 801b0ca:	4013      	ands	r3, r2
 801b0cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	68da      	ldr	r2, [r3, #12]
 801b0d2:	69fb      	ldr	r3, [r7, #28]
 801b0d4:	005b      	lsls	r3, r3, #1
 801b0d6:	fa02 f303 	lsl.w	r3, r2, r3
 801b0da:	69ba      	ldr	r2, [r7, #24]
 801b0dc:	4313      	orrs	r3, r2
 801b0de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b0e0:	687b      	ldr	r3, [r7, #4]
 801b0e2:	69ba      	ldr	r2, [r7, #24]
 801b0e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	685b      	ldr	r3, [r3, #4]
 801b0ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801b0ec:	2201      	movs	r2, #1
 801b0ee:	69fb      	ldr	r3, [r7, #28]
 801b0f0:	fa02 f303 	lsl.w	r3, r2, r3
 801b0f4:	43db      	mvns	r3, r3
 801b0f6:	69ba      	ldr	r2, [r7, #24]
 801b0f8:	4013      	ands	r3, r2
 801b0fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	685b      	ldr	r3, [r3, #4]
 801b100:	091b      	lsrs	r3, r3, #4
 801b102:	f003 0201 	and.w	r2, r3, #1
 801b106:	69fb      	ldr	r3, [r7, #28]
 801b108:	fa02 f303 	lsl.w	r3, r2, r3
 801b10c:	69ba      	ldr	r2, [r7, #24]
 801b10e:	4313      	orrs	r3, r2
 801b110:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b112:	687b      	ldr	r3, [r7, #4]
 801b114:	69ba      	ldr	r2, [r7, #24]
 801b116:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b118:	683b      	ldr	r3, [r7, #0]
 801b11a:	685b      	ldr	r3, [r3, #4]
 801b11c:	f003 0303 	and.w	r3, r3, #3
 801b120:	2b03      	cmp	r3, #3
 801b122:	d017      	beq.n	801b154 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	68db      	ldr	r3, [r3, #12]
 801b128:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801b12a:	69fb      	ldr	r3, [r7, #28]
 801b12c:	005b      	lsls	r3, r3, #1
 801b12e:	2203      	movs	r2, #3
 801b130:	fa02 f303 	lsl.w	r3, r2, r3
 801b134:	43db      	mvns	r3, r3
 801b136:	69ba      	ldr	r2, [r7, #24]
 801b138:	4013      	ands	r3, r2
 801b13a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801b13c:	683b      	ldr	r3, [r7, #0]
 801b13e:	689a      	ldr	r2, [r3, #8]
 801b140:	69fb      	ldr	r3, [r7, #28]
 801b142:	005b      	lsls	r3, r3, #1
 801b144:	fa02 f303 	lsl.w	r3, r2, r3
 801b148:	69ba      	ldr	r2, [r7, #24]
 801b14a:	4313      	orrs	r3, r2
 801b14c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	69ba      	ldr	r2, [r7, #24]
 801b152:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b154:	683b      	ldr	r3, [r7, #0]
 801b156:	685b      	ldr	r3, [r3, #4]
 801b158:	f003 0303 	and.w	r3, r3, #3
 801b15c:	2b02      	cmp	r3, #2
 801b15e:	d123      	bne.n	801b1a8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801b160:	69fb      	ldr	r3, [r7, #28]
 801b162:	08da      	lsrs	r2, r3, #3
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	3208      	adds	r2, #8
 801b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b16c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b16e:	69fb      	ldr	r3, [r7, #28]
 801b170:	f003 0307 	and.w	r3, r3, #7
 801b174:	009b      	lsls	r3, r3, #2
 801b176:	220f      	movs	r2, #15
 801b178:	fa02 f303 	lsl.w	r3, r2, r3
 801b17c:	43db      	mvns	r3, r3
 801b17e:	69ba      	ldr	r2, [r7, #24]
 801b180:	4013      	ands	r3, r2
 801b182:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801b184:	683b      	ldr	r3, [r7, #0]
 801b186:	691a      	ldr	r2, [r3, #16]
 801b188:	69fb      	ldr	r3, [r7, #28]
 801b18a:	f003 0307 	and.w	r3, r3, #7
 801b18e:	009b      	lsls	r3, r3, #2
 801b190:	fa02 f303 	lsl.w	r3, r2, r3
 801b194:	69ba      	ldr	r2, [r7, #24]
 801b196:	4313      	orrs	r3, r2
 801b198:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801b19a:	69fb      	ldr	r3, [r7, #28]
 801b19c:	08da      	lsrs	r2, r3, #3
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	3208      	adds	r2, #8
 801b1a2:	69b9      	ldr	r1, [r7, #24]
 801b1a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801b1ae:	69fb      	ldr	r3, [r7, #28]
 801b1b0:	005b      	lsls	r3, r3, #1
 801b1b2:	2203      	movs	r2, #3
 801b1b4:	fa02 f303 	lsl.w	r3, r2, r3
 801b1b8:	43db      	mvns	r3, r3
 801b1ba:	69ba      	ldr	r2, [r7, #24]
 801b1bc:	4013      	ands	r3, r2
 801b1be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801b1c0:	683b      	ldr	r3, [r7, #0]
 801b1c2:	685b      	ldr	r3, [r3, #4]
 801b1c4:	f003 0203 	and.w	r2, r3, #3
 801b1c8:	69fb      	ldr	r3, [r7, #28]
 801b1ca:	005b      	lsls	r3, r3, #1
 801b1cc:	fa02 f303 	lsl.w	r3, r2, r3
 801b1d0:	69ba      	ldr	r2, [r7, #24]
 801b1d2:	4313      	orrs	r3, r2
 801b1d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	69ba      	ldr	r2, [r7, #24]
 801b1da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801b1dc:	683b      	ldr	r3, [r7, #0]
 801b1de:	685b      	ldr	r3, [r3, #4]
 801b1e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	f000 80be 	beq.w	801b366 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b1ea:	4b66      	ldr	r3, [pc, #408]	; (801b384 <HAL_GPIO_Init+0x324>)
 801b1ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1ee:	4a65      	ldr	r2, [pc, #404]	; (801b384 <HAL_GPIO_Init+0x324>)
 801b1f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b1f4:	6453      	str	r3, [r2, #68]	; 0x44
 801b1f6:	4b63      	ldr	r3, [pc, #396]	; (801b384 <HAL_GPIO_Init+0x324>)
 801b1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b1fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b1fe:	60fb      	str	r3, [r7, #12]
 801b200:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801b202:	4a61      	ldr	r2, [pc, #388]	; (801b388 <HAL_GPIO_Init+0x328>)
 801b204:	69fb      	ldr	r3, [r7, #28]
 801b206:	089b      	lsrs	r3, r3, #2
 801b208:	3302      	adds	r3, #2
 801b20a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b20e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b210:	69fb      	ldr	r3, [r7, #28]
 801b212:	f003 0303 	and.w	r3, r3, #3
 801b216:	009b      	lsls	r3, r3, #2
 801b218:	220f      	movs	r2, #15
 801b21a:	fa02 f303 	lsl.w	r3, r2, r3
 801b21e:	43db      	mvns	r3, r3
 801b220:	69ba      	ldr	r2, [r7, #24]
 801b222:	4013      	ands	r3, r2
 801b224:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	4a58      	ldr	r2, [pc, #352]	; (801b38c <HAL_GPIO_Init+0x32c>)
 801b22a:	4293      	cmp	r3, r2
 801b22c:	d037      	beq.n	801b29e <HAL_GPIO_Init+0x23e>
 801b22e:	687b      	ldr	r3, [r7, #4]
 801b230:	4a57      	ldr	r2, [pc, #348]	; (801b390 <HAL_GPIO_Init+0x330>)
 801b232:	4293      	cmp	r3, r2
 801b234:	d031      	beq.n	801b29a <HAL_GPIO_Init+0x23a>
 801b236:	687b      	ldr	r3, [r7, #4]
 801b238:	4a56      	ldr	r2, [pc, #344]	; (801b394 <HAL_GPIO_Init+0x334>)
 801b23a:	4293      	cmp	r3, r2
 801b23c:	d02b      	beq.n	801b296 <HAL_GPIO_Init+0x236>
 801b23e:	687b      	ldr	r3, [r7, #4]
 801b240:	4a55      	ldr	r2, [pc, #340]	; (801b398 <HAL_GPIO_Init+0x338>)
 801b242:	4293      	cmp	r3, r2
 801b244:	d025      	beq.n	801b292 <HAL_GPIO_Init+0x232>
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	4a54      	ldr	r2, [pc, #336]	; (801b39c <HAL_GPIO_Init+0x33c>)
 801b24a:	4293      	cmp	r3, r2
 801b24c:	d01f      	beq.n	801b28e <HAL_GPIO_Init+0x22e>
 801b24e:	687b      	ldr	r3, [r7, #4]
 801b250:	4a53      	ldr	r2, [pc, #332]	; (801b3a0 <HAL_GPIO_Init+0x340>)
 801b252:	4293      	cmp	r3, r2
 801b254:	d019      	beq.n	801b28a <HAL_GPIO_Init+0x22a>
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	4a52      	ldr	r2, [pc, #328]	; (801b3a4 <HAL_GPIO_Init+0x344>)
 801b25a:	4293      	cmp	r3, r2
 801b25c:	d013      	beq.n	801b286 <HAL_GPIO_Init+0x226>
 801b25e:	687b      	ldr	r3, [r7, #4]
 801b260:	4a51      	ldr	r2, [pc, #324]	; (801b3a8 <HAL_GPIO_Init+0x348>)
 801b262:	4293      	cmp	r3, r2
 801b264:	d00d      	beq.n	801b282 <HAL_GPIO_Init+0x222>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	4a50      	ldr	r2, [pc, #320]	; (801b3ac <HAL_GPIO_Init+0x34c>)
 801b26a:	4293      	cmp	r3, r2
 801b26c:	d007      	beq.n	801b27e <HAL_GPIO_Init+0x21e>
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	4a4f      	ldr	r2, [pc, #316]	; (801b3b0 <HAL_GPIO_Init+0x350>)
 801b272:	4293      	cmp	r3, r2
 801b274:	d101      	bne.n	801b27a <HAL_GPIO_Init+0x21a>
 801b276:	2309      	movs	r3, #9
 801b278:	e012      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b27a:	230a      	movs	r3, #10
 801b27c:	e010      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b27e:	2308      	movs	r3, #8
 801b280:	e00e      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b282:	2307      	movs	r3, #7
 801b284:	e00c      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b286:	2306      	movs	r3, #6
 801b288:	e00a      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b28a:	2305      	movs	r3, #5
 801b28c:	e008      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b28e:	2304      	movs	r3, #4
 801b290:	e006      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b292:	2303      	movs	r3, #3
 801b294:	e004      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b296:	2302      	movs	r3, #2
 801b298:	e002      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b29a:	2301      	movs	r3, #1
 801b29c:	e000      	b.n	801b2a0 <HAL_GPIO_Init+0x240>
 801b29e:	2300      	movs	r3, #0
 801b2a0:	69fa      	ldr	r2, [r7, #28]
 801b2a2:	f002 0203 	and.w	r2, r2, #3
 801b2a6:	0092      	lsls	r2, r2, #2
 801b2a8:	4093      	lsls	r3, r2
 801b2aa:	69ba      	ldr	r2, [r7, #24]
 801b2ac:	4313      	orrs	r3, r2
 801b2ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801b2b0:	4935      	ldr	r1, [pc, #212]	; (801b388 <HAL_GPIO_Init+0x328>)
 801b2b2:	69fb      	ldr	r3, [r7, #28]
 801b2b4:	089b      	lsrs	r3, r3, #2
 801b2b6:	3302      	adds	r3, #2
 801b2b8:	69ba      	ldr	r2, [r7, #24]
 801b2ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801b2be:	4b3d      	ldr	r3, [pc, #244]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b2c0:	689b      	ldr	r3, [r3, #8]
 801b2c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b2c4:	693b      	ldr	r3, [r7, #16]
 801b2c6:	43db      	mvns	r3, r3
 801b2c8:	69ba      	ldr	r2, [r7, #24]
 801b2ca:	4013      	ands	r3, r2
 801b2cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	685b      	ldr	r3, [r3, #4]
 801b2d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	d003      	beq.n	801b2e2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801b2da:	69ba      	ldr	r2, [r7, #24]
 801b2dc:	693b      	ldr	r3, [r7, #16]
 801b2de:	4313      	orrs	r3, r2
 801b2e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801b2e2:	4a34      	ldr	r2, [pc, #208]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b2e4:	69bb      	ldr	r3, [r7, #24]
 801b2e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801b2e8:	4b32      	ldr	r3, [pc, #200]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b2ea:	68db      	ldr	r3, [r3, #12]
 801b2ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	43db      	mvns	r3, r3
 801b2f2:	69ba      	ldr	r2, [r7, #24]
 801b2f4:	4013      	ands	r3, r2
 801b2f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	685b      	ldr	r3, [r3, #4]
 801b2fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b300:	2b00      	cmp	r3, #0
 801b302:	d003      	beq.n	801b30c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801b304:	69ba      	ldr	r2, [r7, #24]
 801b306:	693b      	ldr	r3, [r7, #16]
 801b308:	4313      	orrs	r3, r2
 801b30a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801b30c:	4a29      	ldr	r2, [pc, #164]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b30e:	69bb      	ldr	r3, [r7, #24]
 801b310:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801b312:	4b28      	ldr	r3, [pc, #160]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b314:	685b      	ldr	r3, [r3, #4]
 801b316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b318:	693b      	ldr	r3, [r7, #16]
 801b31a:	43db      	mvns	r3, r3
 801b31c:	69ba      	ldr	r2, [r7, #24]
 801b31e:	4013      	ands	r3, r2
 801b320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	685b      	ldr	r3, [r3, #4]
 801b326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b32a:	2b00      	cmp	r3, #0
 801b32c:	d003      	beq.n	801b336 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801b32e:	69ba      	ldr	r2, [r7, #24]
 801b330:	693b      	ldr	r3, [r7, #16]
 801b332:	4313      	orrs	r3, r2
 801b334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801b336:	4a1f      	ldr	r2, [pc, #124]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b338:	69bb      	ldr	r3, [r7, #24]
 801b33a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801b33c:	4b1d      	ldr	r3, [pc, #116]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b342:	693b      	ldr	r3, [r7, #16]
 801b344:	43db      	mvns	r3, r3
 801b346:	69ba      	ldr	r2, [r7, #24]
 801b348:	4013      	ands	r3, r2
 801b34a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801b34c:	683b      	ldr	r3, [r7, #0]
 801b34e:	685b      	ldr	r3, [r3, #4]
 801b350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b354:	2b00      	cmp	r3, #0
 801b356:	d003      	beq.n	801b360 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801b358:	69ba      	ldr	r2, [r7, #24]
 801b35a:	693b      	ldr	r3, [r7, #16]
 801b35c:	4313      	orrs	r3, r2
 801b35e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801b360:	4a14      	ldr	r2, [pc, #80]	; (801b3b4 <HAL_GPIO_Init+0x354>)
 801b362:	69bb      	ldr	r3, [r7, #24]
 801b364:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801b366:	69fb      	ldr	r3, [r7, #28]
 801b368:	3301      	adds	r3, #1
 801b36a:	61fb      	str	r3, [r7, #28]
 801b36c:	69fb      	ldr	r3, [r7, #28]
 801b36e:	2b0f      	cmp	r3, #15
 801b370:	f67f ae86 	bls.w	801b080 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801b374:	bf00      	nop
 801b376:	bf00      	nop
 801b378:	3724      	adds	r7, #36	; 0x24
 801b37a:	46bd      	mov	sp, r7
 801b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b380:	4770      	bx	lr
 801b382:	bf00      	nop
 801b384:	40023800 	.word	0x40023800
 801b388:	40013800 	.word	0x40013800
 801b38c:	40020000 	.word	0x40020000
 801b390:	40020400 	.word	0x40020400
 801b394:	40020800 	.word	0x40020800
 801b398:	40020c00 	.word	0x40020c00
 801b39c:	40021000 	.word	0x40021000
 801b3a0:	40021400 	.word	0x40021400
 801b3a4:	40021800 	.word	0x40021800
 801b3a8:	40021c00 	.word	0x40021c00
 801b3ac:	40022000 	.word	0x40022000
 801b3b0:	40022400 	.word	0x40022400
 801b3b4:	40013c00 	.word	0x40013c00

0801b3b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	b085      	sub	sp, #20
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
 801b3c0:	460b      	mov	r3, r1
 801b3c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	691a      	ldr	r2, [r3, #16]
 801b3c8:	887b      	ldrh	r3, [r7, #2]
 801b3ca:	4013      	ands	r3, r2
 801b3cc:	2b00      	cmp	r3, #0
 801b3ce:	d002      	beq.n	801b3d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801b3d0:	2301      	movs	r3, #1
 801b3d2:	73fb      	strb	r3, [r7, #15]
 801b3d4:	e001      	b.n	801b3da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801b3da:	7bfb      	ldrb	r3, [r7, #15]
}
 801b3dc:	4618      	mov	r0, r3
 801b3de:	3714      	adds	r7, #20
 801b3e0:	46bd      	mov	sp, r7
 801b3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3e6:	4770      	bx	lr

0801b3e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801b3e8:	b480      	push	{r7}
 801b3ea:	b083      	sub	sp, #12
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]
 801b3f0:	460b      	mov	r3, r1
 801b3f2:	807b      	strh	r3, [r7, #2]
 801b3f4:	4613      	mov	r3, r2
 801b3f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801b3f8:	787b      	ldrb	r3, [r7, #1]
 801b3fa:	2b00      	cmp	r3, #0
 801b3fc:	d003      	beq.n	801b406 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801b3fe:	887a      	ldrh	r2, [r7, #2]
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801b404:	e003      	b.n	801b40e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801b406:	887b      	ldrh	r3, [r7, #2]
 801b408:	041a      	lsls	r2, r3, #16
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	619a      	str	r2, [r3, #24]
}
 801b40e:	bf00      	nop
 801b410:	370c      	adds	r7, #12
 801b412:	46bd      	mov	sp, r7
 801b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b418:	4770      	bx	lr

0801b41a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801b41a:	b480      	push	{r7}
 801b41c:	b085      	sub	sp, #20
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
 801b422:	460b      	mov	r3, r1
 801b424:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801b426:	687b      	ldr	r3, [r7, #4]
 801b428:	695b      	ldr	r3, [r3, #20]
 801b42a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801b42c:	887a      	ldrh	r2, [r7, #2]
 801b42e:	68fb      	ldr	r3, [r7, #12]
 801b430:	4013      	ands	r3, r2
 801b432:	041a      	lsls	r2, r3, #16
 801b434:	68fb      	ldr	r3, [r7, #12]
 801b436:	43d9      	mvns	r1, r3
 801b438:	887b      	ldrh	r3, [r7, #2]
 801b43a:	400b      	ands	r3, r1
 801b43c:	431a      	orrs	r2, r3
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	619a      	str	r2, [r3, #24]
}
 801b442:	bf00      	nop
 801b444:	3714      	adds	r7, #20
 801b446:	46bd      	mov	sp, r7
 801b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b44c:	4770      	bx	lr
	...

0801b450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b082      	sub	sp, #8
 801b454:	af00      	add	r7, sp, #0
 801b456:	4603      	mov	r3, r0
 801b458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801b45a:	4b08      	ldr	r3, [pc, #32]	; (801b47c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b45c:	695a      	ldr	r2, [r3, #20]
 801b45e:	88fb      	ldrh	r3, [r7, #6]
 801b460:	4013      	ands	r3, r2
 801b462:	2b00      	cmp	r3, #0
 801b464:	d006      	beq.n	801b474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801b466:	4a05      	ldr	r2, [pc, #20]	; (801b47c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b468:	88fb      	ldrh	r3, [r7, #6]
 801b46a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801b46c:	88fb      	ldrh	r3, [r7, #6]
 801b46e:	4618      	mov	r0, r3
 801b470:	f000 f806 	bl	801b480 <HAL_GPIO_EXTI_Callback>
  }
}
 801b474:	bf00      	nop
 801b476:	3708      	adds	r7, #8
 801b478:	46bd      	mov	sp, r7
 801b47a:	bd80      	pop	{r7, pc}
 801b47c:	40013c00 	.word	0x40013c00

0801b480 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801b480:	b480      	push	{r7}
 801b482:	b083      	sub	sp, #12
 801b484:	af00      	add	r7, sp, #0
 801b486:	4603      	mov	r3, r0
 801b488:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801b48a:	bf00      	nop
 801b48c:	370c      	adds	r7, #12
 801b48e:	46bd      	mov	sp, r7
 801b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b494:	4770      	bx	lr
	...

0801b498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801b498:	b580      	push	{r7, lr}
 801b49a:	b082      	sub	sp, #8
 801b49c:	af00      	add	r7, sp, #0
 801b49e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	2b00      	cmp	r3, #0
 801b4a4:	d101      	bne.n	801b4aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801b4a6:	2301      	movs	r3, #1
 801b4a8:	e07f      	b.n	801b5aa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b4b0:	b2db      	uxtb	r3, r3
 801b4b2:	2b00      	cmp	r3, #0
 801b4b4:	d106      	bne.n	801b4c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801b4b6:	687b      	ldr	r3, [r7, #4]
 801b4b8:	2200      	movs	r2, #0
 801b4ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801b4be:	6878      	ldr	r0, [r7, #4]
 801b4c0:	f7fa f9d2 	bl	8015868 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	2224      	movs	r2, #36	; 0x24
 801b4c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	681b      	ldr	r3, [r3, #0]
 801b4d0:	681a      	ldr	r2, [r3, #0]
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	f022 0201 	bic.w	r2, r2, #1
 801b4da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	685a      	ldr	r2, [r3, #4]
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801b4e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	689a      	ldr	r2, [r3, #8]
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b4f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	68db      	ldr	r3, [r3, #12]
 801b4fe:	2b01      	cmp	r3, #1
 801b500:	d107      	bne.n	801b512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801b502:	687b      	ldr	r3, [r7, #4]
 801b504:	689a      	ldr	r2, [r3, #8]
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	681b      	ldr	r3, [r3, #0]
 801b50a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801b50e:	609a      	str	r2, [r3, #8]
 801b510:	e006      	b.n	801b520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	689a      	ldr	r2, [r3, #8]
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	681b      	ldr	r3, [r3, #0]
 801b51a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801b51e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	68db      	ldr	r3, [r3, #12]
 801b524:	2b02      	cmp	r3, #2
 801b526:	d104      	bne.n	801b532 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801b528:	687b      	ldr	r3, [r7, #4]
 801b52a:	681b      	ldr	r3, [r3, #0]
 801b52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b530:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	681b      	ldr	r3, [r3, #0]
 801b536:	6859      	ldr	r1, [r3, #4]
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	681a      	ldr	r2, [r3, #0]
 801b53c:	4b1d      	ldr	r3, [pc, #116]	; (801b5b4 <HAL_I2C_Init+0x11c>)
 801b53e:	430b      	orrs	r3, r1
 801b540:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801b542:	687b      	ldr	r3, [r7, #4]
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	68da      	ldr	r2, [r3, #12]
 801b548:	687b      	ldr	r3, [r7, #4]
 801b54a:	681b      	ldr	r3, [r3, #0]
 801b54c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801b550:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801b552:	687b      	ldr	r3, [r7, #4]
 801b554:	691a      	ldr	r2, [r3, #16]
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	695b      	ldr	r3, [r3, #20]
 801b55a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801b55e:	687b      	ldr	r3, [r7, #4]
 801b560:	699b      	ldr	r3, [r3, #24]
 801b562:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	430a      	orrs	r2, r1
 801b56a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	69d9      	ldr	r1, [r3, #28]
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	6a1a      	ldr	r2, [r3, #32]
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	681b      	ldr	r3, [r3, #0]
 801b578:	430a      	orrs	r2, r1
 801b57a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	681a      	ldr	r2, [r3, #0]
 801b582:	687b      	ldr	r3, [r7, #4]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	f042 0201 	orr.w	r2, r2, #1
 801b58a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	2200      	movs	r2, #0
 801b590:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801b592:	687b      	ldr	r3, [r7, #4]
 801b594:	2220      	movs	r2, #32
 801b596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	2200      	movs	r2, #0
 801b59e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2200      	movs	r2, #0
 801b5a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801b5a8:	2300      	movs	r3, #0
}
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	3708      	adds	r7, #8
 801b5ae:	46bd      	mov	sp, r7
 801b5b0:	bd80      	pop	{r7, pc}
 801b5b2:	bf00      	nop
 801b5b4:	02008000 	.word	0x02008000

0801b5b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b5b8:	b580      	push	{r7, lr}
 801b5ba:	b088      	sub	sp, #32
 801b5bc:	af02      	add	r7, sp, #8
 801b5be:	60f8      	str	r0, [r7, #12]
 801b5c0:	4608      	mov	r0, r1
 801b5c2:	4611      	mov	r1, r2
 801b5c4:	461a      	mov	r2, r3
 801b5c6:	4603      	mov	r3, r0
 801b5c8:	817b      	strh	r3, [r7, #10]
 801b5ca:	460b      	mov	r3, r1
 801b5cc:	813b      	strh	r3, [r7, #8]
 801b5ce:	4613      	mov	r3, r2
 801b5d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b5d8:	b2db      	uxtb	r3, r3
 801b5da:	2b20      	cmp	r3, #32
 801b5dc:	f040 80f9 	bne.w	801b7d2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801b5e0:	6a3b      	ldr	r3, [r7, #32]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d002      	beq.n	801b5ec <HAL_I2C_Mem_Write+0x34>
 801b5e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d105      	bne.n	801b5f8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801b5ec:	68fb      	ldr	r3, [r7, #12]
 801b5ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b5f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	e0ed      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b5f8:	68fb      	ldr	r3, [r7, #12]
 801b5fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b5fe:	2b01      	cmp	r3, #1
 801b600:	d101      	bne.n	801b606 <HAL_I2C_Mem_Write+0x4e>
 801b602:	2302      	movs	r3, #2
 801b604:	e0e6      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	2201      	movs	r2, #1
 801b60a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801b60e:	f7fd fb0f 	bl	8018c30 <HAL_GetTick>
 801b612:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801b614:	697b      	ldr	r3, [r7, #20]
 801b616:	9300      	str	r3, [sp, #0]
 801b618:	2319      	movs	r3, #25
 801b61a:	2201      	movs	r2, #1
 801b61c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801b620:	68f8      	ldr	r0, [r7, #12]
 801b622:	f000 fac3 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801b626:	4603      	mov	r3, r0
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d001      	beq.n	801b630 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801b62c:	2301      	movs	r3, #1
 801b62e:	e0d1      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801b630:	68fb      	ldr	r3, [r7, #12]
 801b632:	2221      	movs	r2, #33	; 0x21
 801b634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801b638:	68fb      	ldr	r3, [r7, #12]
 801b63a:	2240      	movs	r2, #64	; 0x40
 801b63c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b640:	68fb      	ldr	r3, [r7, #12]
 801b642:	2200      	movs	r2, #0
 801b644:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	6a3a      	ldr	r2, [r7, #32]
 801b64a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b650:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801b652:	68fb      	ldr	r3, [r7, #12]
 801b654:	2200      	movs	r2, #0
 801b656:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801b658:	88f8      	ldrh	r0, [r7, #6]
 801b65a:	893a      	ldrh	r2, [r7, #8]
 801b65c:	8979      	ldrh	r1, [r7, #10]
 801b65e:	697b      	ldr	r3, [r7, #20]
 801b660:	9301      	str	r3, [sp, #4]
 801b662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b664:	9300      	str	r3, [sp, #0]
 801b666:	4603      	mov	r3, r0
 801b668:	68f8      	ldr	r0, [r7, #12]
 801b66a:	f000 f9d3 	bl	801ba14 <I2C_RequestMemoryWrite>
 801b66e:	4603      	mov	r3, r0
 801b670:	2b00      	cmp	r3, #0
 801b672:	d005      	beq.n	801b680 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b674:	68fb      	ldr	r3, [r7, #12]
 801b676:	2200      	movs	r2, #0
 801b678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801b67c:	2301      	movs	r3, #1
 801b67e:	e0a9      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b680:	68fb      	ldr	r3, [r7, #12]
 801b682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b684:	b29b      	uxth	r3, r3
 801b686:	2bff      	cmp	r3, #255	; 0xff
 801b688:	d90e      	bls.n	801b6a8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	22ff      	movs	r2, #255	; 0xff
 801b68e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801b690:	68fb      	ldr	r3, [r7, #12]
 801b692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b694:	b2da      	uxtb	r2, r3
 801b696:	8979      	ldrh	r1, [r7, #10]
 801b698:	2300      	movs	r3, #0
 801b69a:	9300      	str	r3, [sp, #0]
 801b69c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b6a0:	68f8      	ldr	r0, [r7, #12]
 801b6a2:	f000 fc1f 	bl	801bee4 <I2C_TransferConfig>
 801b6a6:	e00f      	b.n	801b6c8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b6ac:	b29a      	uxth	r2, r3
 801b6ae:	68fb      	ldr	r3, [r7, #12]
 801b6b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801b6b2:	68fb      	ldr	r3, [r7, #12]
 801b6b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b6b6:	b2da      	uxtb	r2, r3
 801b6b8:	8979      	ldrh	r1, [r7, #10]
 801b6ba:	2300      	movs	r3, #0
 801b6bc:	9300      	str	r3, [sp, #0]
 801b6be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b6c2:	68f8      	ldr	r0, [r7, #12]
 801b6c4:	f000 fc0e 	bl	801bee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b6c8:	697a      	ldr	r2, [r7, #20]
 801b6ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b6cc:	68f8      	ldr	r0, [r7, #12]
 801b6ce:	f000 faad 	bl	801bc2c <I2C_WaitOnTXISFlagUntilTimeout>
 801b6d2:	4603      	mov	r3, r0
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	d001      	beq.n	801b6dc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801b6d8:	2301      	movs	r3, #1
 801b6da:	e07b      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801b6dc:	68fb      	ldr	r3, [r7, #12]
 801b6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6e0:	781a      	ldrb	r2, [r3, #0]
 801b6e2:	68fb      	ldr	r3, [r7, #12]
 801b6e4:	681b      	ldr	r3, [r3, #0]
 801b6e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801b6e8:	68fb      	ldr	r3, [r7, #12]
 801b6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b6ec:	1c5a      	adds	r2, r3, #1
 801b6ee:	68fb      	ldr	r3, [r7, #12]
 801b6f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b6f6:	b29b      	uxth	r3, r3
 801b6f8:	3b01      	subs	r3, #1
 801b6fa:	b29a      	uxth	r2, r3
 801b6fc:	68fb      	ldr	r3, [r7, #12]
 801b6fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801b700:	68fb      	ldr	r3, [r7, #12]
 801b702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b704:	3b01      	subs	r3, #1
 801b706:	b29a      	uxth	r2, r3
 801b708:	68fb      	ldr	r3, [r7, #12]
 801b70a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b70c:	68fb      	ldr	r3, [r7, #12]
 801b70e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b710:	b29b      	uxth	r3, r3
 801b712:	2b00      	cmp	r3, #0
 801b714:	d034      	beq.n	801b780 <HAL_I2C_Mem_Write+0x1c8>
 801b716:	68fb      	ldr	r3, [r7, #12]
 801b718:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d130      	bne.n	801b780 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b71e:	697b      	ldr	r3, [r7, #20]
 801b720:	9300      	str	r3, [sp, #0]
 801b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b724:	2200      	movs	r2, #0
 801b726:	2180      	movs	r1, #128	; 0x80
 801b728:	68f8      	ldr	r0, [r7, #12]
 801b72a:	f000 fa3f 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801b72e:	4603      	mov	r3, r0
 801b730:	2b00      	cmp	r3, #0
 801b732:	d001      	beq.n	801b738 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801b734:	2301      	movs	r3, #1
 801b736:	e04d      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b738:	68fb      	ldr	r3, [r7, #12]
 801b73a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b73c:	b29b      	uxth	r3, r3
 801b73e:	2bff      	cmp	r3, #255	; 0xff
 801b740:	d90e      	bls.n	801b760 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	22ff      	movs	r2, #255	; 0xff
 801b746:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b74c:	b2da      	uxtb	r2, r3
 801b74e:	8979      	ldrh	r1, [r7, #10]
 801b750:	2300      	movs	r3, #0
 801b752:	9300      	str	r3, [sp, #0]
 801b754:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b758:	68f8      	ldr	r0, [r7, #12]
 801b75a:	f000 fbc3 	bl	801bee4 <I2C_TransferConfig>
 801b75e:	e00f      	b.n	801b780 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b760:	68fb      	ldr	r3, [r7, #12]
 801b762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b764:	b29a      	uxth	r2, r3
 801b766:	68fb      	ldr	r3, [r7, #12]
 801b768:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b76a:	68fb      	ldr	r3, [r7, #12]
 801b76c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b76e:	b2da      	uxtb	r2, r3
 801b770:	8979      	ldrh	r1, [r7, #10]
 801b772:	2300      	movs	r3, #0
 801b774:	9300      	str	r3, [sp, #0]
 801b776:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b77a:	68f8      	ldr	r0, [r7, #12]
 801b77c:	f000 fbb2 	bl	801bee4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801b780:	68fb      	ldr	r3, [r7, #12]
 801b782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b784:	b29b      	uxth	r3, r3
 801b786:	2b00      	cmp	r3, #0
 801b788:	d19e      	bne.n	801b6c8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b78a:	697a      	ldr	r2, [r7, #20]
 801b78c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b78e:	68f8      	ldr	r0, [r7, #12]
 801b790:	f000 fa8c 	bl	801bcac <I2C_WaitOnSTOPFlagUntilTimeout>
 801b794:	4603      	mov	r3, r0
 801b796:	2b00      	cmp	r3, #0
 801b798:	d001      	beq.n	801b79e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801b79a:	2301      	movs	r3, #1
 801b79c:	e01a      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	2220      	movs	r2, #32
 801b7a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	681b      	ldr	r3, [r3, #0]
 801b7aa:	6859      	ldr	r1, [r3, #4]
 801b7ac:	68fb      	ldr	r3, [r7, #12]
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	4b0a      	ldr	r3, [pc, #40]	; (801b7dc <HAL_I2C_Mem_Write+0x224>)
 801b7b2:	400b      	ands	r3, r1
 801b7b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b7b6:	68fb      	ldr	r3, [r7, #12]
 801b7b8:	2220      	movs	r2, #32
 801b7ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b7be:	68fb      	ldr	r3, [r7, #12]
 801b7c0:	2200      	movs	r2, #0
 801b7c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b7c6:	68fb      	ldr	r3, [r7, #12]
 801b7c8:	2200      	movs	r2, #0
 801b7ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b7ce:	2300      	movs	r3, #0
 801b7d0:	e000      	b.n	801b7d4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801b7d2:	2302      	movs	r3, #2
  }
}
 801b7d4:	4618      	mov	r0, r3
 801b7d6:	3718      	adds	r7, #24
 801b7d8:	46bd      	mov	sp, r7
 801b7da:	bd80      	pop	{r7, pc}
 801b7dc:	fe00e800 	.word	0xfe00e800

0801b7e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b7e0:	b580      	push	{r7, lr}
 801b7e2:	b088      	sub	sp, #32
 801b7e4:	af02      	add	r7, sp, #8
 801b7e6:	60f8      	str	r0, [r7, #12]
 801b7e8:	4608      	mov	r0, r1
 801b7ea:	4611      	mov	r1, r2
 801b7ec:	461a      	mov	r2, r3
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	817b      	strh	r3, [r7, #10]
 801b7f2:	460b      	mov	r3, r1
 801b7f4:	813b      	strh	r3, [r7, #8]
 801b7f6:	4613      	mov	r3, r2
 801b7f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801b7fa:	68fb      	ldr	r3, [r7, #12]
 801b7fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801b800:	b2db      	uxtb	r3, r3
 801b802:	2b20      	cmp	r3, #32
 801b804:	f040 80fd 	bne.w	801ba02 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801b808:	6a3b      	ldr	r3, [r7, #32]
 801b80a:	2b00      	cmp	r3, #0
 801b80c:	d002      	beq.n	801b814 <HAL_I2C_Mem_Read+0x34>
 801b80e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b810:	2b00      	cmp	r3, #0
 801b812:	d105      	bne.n	801b820 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801b814:	68fb      	ldr	r3, [r7, #12]
 801b816:	f44f 7200 	mov.w	r2, #512	; 0x200
 801b81a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801b81c:	2301      	movs	r3, #1
 801b81e:	e0f1      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801b820:	68fb      	ldr	r3, [r7, #12]
 801b822:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801b826:	2b01      	cmp	r3, #1
 801b828:	d101      	bne.n	801b82e <HAL_I2C_Mem_Read+0x4e>
 801b82a:	2302      	movs	r3, #2
 801b82c:	e0ea      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	2201      	movs	r2, #1
 801b832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801b836:	f7fd f9fb 	bl	8018c30 <HAL_GetTick>
 801b83a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801b83c:	697b      	ldr	r3, [r7, #20]
 801b83e:	9300      	str	r3, [sp, #0]
 801b840:	2319      	movs	r3, #25
 801b842:	2201      	movs	r2, #1
 801b844:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801b848:	68f8      	ldr	r0, [r7, #12]
 801b84a:	f000 f9af 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801b84e:	4603      	mov	r3, r0
 801b850:	2b00      	cmp	r3, #0
 801b852:	d001      	beq.n	801b858 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801b854:	2301      	movs	r3, #1
 801b856:	e0d5      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801b858:	68fb      	ldr	r3, [r7, #12]
 801b85a:	2222      	movs	r2, #34	; 0x22
 801b85c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801b860:	68fb      	ldr	r3, [r7, #12]
 801b862:	2240      	movs	r2, #64	; 0x40
 801b864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801b868:	68fb      	ldr	r3, [r7, #12]
 801b86a:	2200      	movs	r2, #0
 801b86c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801b86e:	68fb      	ldr	r3, [r7, #12]
 801b870:	6a3a      	ldr	r2, [r7, #32]
 801b872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801b874:	68fb      	ldr	r3, [r7, #12]
 801b876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801b87a:	68fb      	ldr	r3, [r7, #12]
 801b87c:	2200      	movs	r2, #0
 801b87e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801b880:	88f8      	ldrh	r0, [r7, #6]
 801b882:	893a      	ldrh	r2, [r7, #8]
 801b884:	8979      	ldrh	r1, [r7, #10]
 801b886:	697b      	ldr	r3, [r7, #20]
 801b888:	9301      	str	r3, [sp, #4]
 801b88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b88c:	9300      	str	r3, [sp, #0]
 801b88e:	4603      	mov	r3, r0
 801b890:	68f8      	ldr	r0, [r7, #12]
 801b892:	f000 f913 	bl	801babc <I2C_RequestMemoryRead>
 801b896:	4603      	mov	r3, r0
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d005      	beq.n	801b8a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801b89c:	68fb      	ldr	r3, [r7, #12]
 801b89e:	2200      	movs	r2, #0
 801b8a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801b8a4:	2301      	movs	r3, #1
 801b8a6:	e0ad      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b8a8:	68fb      	ldr	r3, [r7, #12]
 801b8aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b8ac:	b29b      	uxth	r3, r3
 801b8ae:	2bff      	cmp	r3, #255	; 0xff
 801b8b0:	d90e      	bls.n	801b8d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	22ff      	movs	r2, #255	; 0xff
 801b8b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801b8b8:	68fb      	ldr	r3, [r7, #12]
 801b8ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b8bc:	b2da      	uxtb	r2, r3
 801b8be:	8979      	ldrh	r1, [r7, #10]
 801b8c0:	4b52      	ldr	r3, [pc, #328]	; (801ba0c <HAL_I2C_Mem_Read+0x22c>)
 801b8c2:	9300      	str	r3, [sp, #0]
 801b8c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b8c8:	68f8      	ldr	r0, [r7, #12]
 801b8ca:	f000 fb0b 	bl	801bee4 <I2C_TransferConfig>
 801b8ce:	e00f      	b.n	801b8f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801b8d0:	68fb      	ldr	r3, [r7, #12]
 801b8d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b8d4:	b29a      	uxth	r2, r3
 801b8d6:	68fb      	ldr	r3, [r7, #12]
 801b8d8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b8da:	68fb      	ldr	r3, [r7, #12]
 801b8dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b8de:	b2da      	uxtb	r2, r3
 801b8e0:	8979      	ldrh	r1, [r7, #10]
 801b8e2:	4b4a      	ldr	r3, [pc, #296]	; (801ba0c <HAL_I2C_Mem_Read+0x22c>)
 801b8e4:	9300      	str	r3, [sp, #0]
 801b8e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b8ea:	68f8      	ldr	r0, [r7, #12]
 801b8ec:	f000 fafa 	bl	801bee4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801b8f0:	697b      	ldr	r3, [r7, #20]
 801b8f2:	9300      	str	r3, [sp, #0]
 801b8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b8f6:	2200      	movs	r2, #0
 801b8f8:	2104      	movs	r1, #4
 801b8fa:	68f8      	ldr	r0, [r7, #12]
 801b8fc:	f000 f956 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801b900:	4603      	mov	r3, r0
 801b902:	2b00      	cmp	r3, #0
 801b904:	d001      	beq.n	801b90a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801b906:	2301      	movs	r3, #1
 801b908:	e07c      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801b90a:	68fb      	ldr	r3, [r7, #12]
 801b90c:	681b      	ldr	r3, [r3, #0]
 801b90e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b910:	68fb      	ldr	r3, [r7, #12]
 801b912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b914:	b2d2      	uxtb	r2, r2
 801b916:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b91c:	1c5a      	adds	r2, r3, #1
 801b91e:	68fb      	ldr	r3, [r7, #12]
 801b920:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801b922:	68fb      	ldr	r3, [r7, #12]
 801b924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b926:	3b01      	subs	r3, #1
 801b928:	b29a      	uxth	r2, r3
 801b92a:	68fb      	ldr	r3, [r7, #12]
 801b92c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801b92e:	68fb      	ldr	r3, [r7, #12]
 801b930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b932:	b29b      	uxth	r3, r3
 801b934:	3b01      	subs	r3, #1
 801b936:	b29a      	uxth	r2, r3
 801b938:	68fb      	ldr	r3, [r7, #12]
 801b93a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801b93c:	68fb      	ldr	r3, [r7, #12]
 801b93e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b940:	b29b      	uxth	r3, r3
 801b942:	2b00      	cmp	r3, #0
 801b944:	d034      	beq.n	801b9b0 <HAL_I2C_Mem_Read+0x1d0>
 801b946:	68fb      	ldr	r3, [r7, #12]
 801b948:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b94a:	2b00      	cmp	r3, #0
 801b94c:	d130      	bne.n	801b9b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801b94e:	697b      	ldr	r3, [r7, #20]
 801b950:	9300      	str	r3, [sp, #0]
 801b952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b954:	2200      	movs	r2, #0
 801b956:	2180      	movs	r1, #128	; 0x80
 801b958:	68f8      	ldr	r0, [r7, #12]
 801b95a:	f000 f927 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801b95e:	4603      	mov	r3, r0
 801b960:	2b00      	cmp	r3, #0
 801b962:	d001      	beq.n	801b968 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801b964:	2301      	movs	r3, #1
 801b966:	e04d      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801b968:	68fb      	ldr	r3, [r7, #12]
 801b96a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b96c:	b29b      	uxth	r3, r3
 801b96e:	2bff      	cmp	r3, #255	; 0xff
 801b970:	d90e      	bls.n	801b990 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	22ff      	movs	r2, #255	; 0xff
 801b976:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b97c:	b2da      	uxtb	r2, r3
 801b97e:	8979      	ldrh	r1, [r7, #10]
 801b980:	2300      	movs	r3, #0
 801b982:	9300      	str	r3, [sp, #0]
 801b984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801b988:	68f8      	ldr	r0, [r7, #12]
 801b98a:	f000 faab 	bl	801bee4 <I2C_TransferConfig>
 801b98e:	e00f      	b.n	801b9b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801b990:	68fb      	ldr	r3, [r7, #12]
 801b992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b994:	b29a      	uxth	r2, r3
 801b996:	68fb      	ldr	r3, [r7, #12]
 801b998:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b99e:	b2da      	uxtb	r2, r3
 801b9a0:	8979      	ldrh	r1, [r7, #10]
 801b9a2:	2300      	movs	r3, #0
 801b9a4:	9300      	str	r3, [sp, #0]
 801b9a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801b9aa:	68f8      	ldr	r0, [r7, #12]
 801b9ac:	f000 fa9a 	bl	801bee4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801b9b0:	68fb      	ldr	r3, [r7, #12]
 801b9b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b9b4:	b29b      	uxth	r3, r3
 801b9b6:	2b00      	cmp	r3, #0
 801b9b8:	d19a      	bne.n	801b8f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801b9ba:	697a      	ldr	r2, [r7, #20]
 801b9bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b9be:	68f8      	ldr	r0, [r7, #12]
 801b9c0:	f000 f974 	bl	801bcac <I2C_WaitOnSTOPFlagUntilTimeout>
 801b9c4:	4603      	mov	r3, r0
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d001      	beq.n	801b9ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801b9ca:	2301      	movs	r3, #1
 801b9cc:	e01a      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801b9ce:	68fb      	ldr	r3, [r7, #12]
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	2220      	movs	r2, #32
 801b9d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801b9d6:	68fb      	ldr	r3, [r7, #12]
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	6859      	ldr	r1, [r3, #4]
 801b9dc:	68fb      	ldr	r3, [r7, #12]
 801b9de:	681a      	ldr	r2, [r3, #0]
 801b9e0:	4b0b      	ldr	r3, [pc, #44]	; (801ba10 <HAL_I2C_Mem_Read+0x230>)
 801b9e2:	400b      	ands	r3, r1
 801b9e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801b9e6:	68fb      	ldr	r3, [r7, #12]
 801b9e8:	2220      	movs	r2, #32
 801b9ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801b9ee:	68fb      	ldr	r3, [r7, #12]
 801b9f0:	2200      	movs	r2, #0
 801b9f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801b9f6:	68fb      	ldr	r3, [r7, #12]
 801b9f8:	2200      	movs	r2, #0
 801b9fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	e000      	b.n	801ba04 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801ba02:	2302      	movs	r3, #2
  }
}
 801ba04:	4618      	mov	r0, r3
 801ba06:	3718      	adds	r7, #24
 801ba08:	46bd      	mov	sp, r7
 801ba0a:	bd80      	pop	{r7, pc}
 801ba0c:	80002400 	.word	0x80002400
 801ba10:	fe00e800 	.word	0xfe00e800

0801ba14 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801ba14:	b580      	push	{r7, lr}
 801ba16:	b086      	sub	sp, #24
 801ba18:	af02      	add	r7, sp, #8
 801ba1a:	60f8      	str	r0, [r7, #12]
 801ba1c:	4608      	mov	r0, r1
 801ba1e:	4611      	mov	r1, r2
 801ba20:	461a      	mov	r2, r3
 801ba22:	4603      	mov	r3, r0
 801ba24:	817b      	strh	r3, [r7, #10]
 801ba26:	460b      	mov	r3, r1
 801ba28:	813b      	strh	r3, [r7, #8]
 801ba2a:	4613      	mov	r3, r2
 801ba2c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801ba2e:	88fb      	ldrh	r3, [r7, #6]
 801ba30:	b2da      	uxtb	r2, r3
 801ba32:	8979      	ldrh	r1, [r7, #10]
 801ba34:	4b20      	ldr	r3, [pc, #128]	; (801bab8 <I2C_RequestMemoryWrite+0xa4>)
 801ba36:	9300      	str	r3, [sp, #0]
 801ba38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801ba3c:	68f8      	ldr	r0, [r7, #12]
 801ba3e:	f000 fa51 	bl	801bee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ba42:	69fa      	ldr	r2, [r7, #28]
 801ba44:	69b9      	ldr	r1, [r7, #24]
 801ba46:	68f8      	ldr	r0, [r7, #12]
 801ba48:	f000 f8f0 	bl	801bc2c <I2C_WaitOnTXISFlagUntilTimeout>
 801ba4c:	4603      	mov	r3, r0
 801ba4e:	2b00      	cmp	r3, #0
 801ba50:	d001      	beq.n	801ba56 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801ba52:	2301      	movs	r3, #1
 801ba54:	e02c      	b.n	801bab0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801ba56:	88fb      	ldrh	r3, [r7, #6]
 801ba58:	2b01      	cmp	r3, #1
 801ba5a:	d105      	bne.n	801ba68 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801ba5c:	893b      	ldrh	r3, [r7, #8]
 801ba5e:	b2da      	uxtb	r2, r3
 801ba60:	68fb      	ldr	r3, [r7, #12]
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	629a      	str	r2, [r3, #40]	; 0x28
 801ba66:	e015      	b.n	801ba94 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801ba68:	893b      	ldrh	r3, [r7, #8]
 801ba6a:	0a1b      	lsrs	r3, r3, #8
 801ba6c:	b29b      	uxth	r3, r3
 801ba6e:	b2da      	uxtb	r2, r3
 801ba70:	68fb      	ldr	r3, [r7, #12]
 801ba72:	681b      	ldr	r3, [r3, #0]
 801ba74:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801ba76:	69fa      	ldr	r2, [r7, #28]
 801ba78:	69b9      	ldr	r1, [r7, #24]
 801ba7a:	68f8      	ldr	r0, [r7, #12]
 801ba7c:	f000 f8d6 	bl	801bc2c <I2C_WaitOnTXISFlagUntilTimeout>
 801ba80:	4603      	mov	r3, r0
 801ba82:	2b00      	cmp	r3, #0
 801ba84:	d001      	beq.n	801ba8a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801ba86:	2301      	movs	r3, #1
 801ba88:	e012      	b.n	801bab0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801ba8a:	893b      	ldrh	r3, [r7, #8]
 801ba8c:	b2da      	uxtb	r2, r3
 801ba8e:	68fb      	ldr	r3, [r7, #12]
 801ba90:	681b      	ldr	r3, [r3, #0]
 801ba92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801ba94:	69fb      	ldr	r3, [r7, #28]
 801ba96:	9300      	str	r3, [sp, #0]
 801ba98:	69bb      	ldr	r3, [r7, #24]
 801ba9a:	2200      	movs	r2, #0
 801ba9c:	2180      	movs	r1, #128	; 0x80
 801ba9e:	68f8      	ldr	r0, [r7, #12]
 801baa0:	f000 f884 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801baa4:	4603      	mov	r3, r0
 801baa6:	2b00      	cmp	r3, #0
 801baa8:	d001      	beq.n	801baae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801baaa:	2301      	movs	r3, #1
 801baac:	e000      	b.n	801bab0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801baae:	2300      	movs	r3, #0
}
 801bab0:	4618      	mov	r0, r3
 801bab2:	3710      	adds	r7, #16
 801bab4:	46bd      	mov	sp, r7
 801bab6:	bd80      	pop	{r7, pc}
 801bab8:	80002000 	.word	0x80002000

0801babc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801babc:	b580      	push	{r7, lr}
 801babe:	b086      	sub	sp, #24
 801bac0:	af02      	add	r7, sp, #8
 801bac2:	60f8      	str	r0, [r7, #12]
 801bac4:	4608      	mov	r0, r1
 801bac6:	4611      	mov	r1, r2
 801bac8:	461a      	mov	r2, r3
 801baca:	4603      	mov	r3, r0
 801bacc:	817b      	strh	r3, [r7, #10]
 801bace:	460b      	mov	r3, r1
 801bad0:	813b      	strh	r3, [r7, #8]
 801bad2:	4613      	mov	r3, r2
 801bad4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801bad6:	88fb      	ldrh	r3, [r7, #6]
 801bad8:	b2da      	uxtb	r2, r3
 801bada:	8979      	ldrh	r1, [r7, #10]
 801badc:	4b20      	ldr	r3, [pc, #128]	; (801bb60 <I2C_RequestMemoryRead+0xa4>)
 801bade:	9300      	str	r3, [sp, #0]
 801bae0:	2300      	movs	r3, #0
 801bae2:	68f8      	ldr	r0, [r7, #12]
 801bae4:	f000 f9fe 	bl	801bee4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bae8:	69fa      	ldr	r2, [r7, #28]
 801baea:	69b9      	ldr	r1, [r7, #24]
 801baec:	68f8      	ldr	r0, [r7, #12]
 801baee:	f000 f89d 	bl	801bc2c <I2C_WaitOnTXISFlagUntilTimeout>
 801baf2:	4603      	mov	r3, r0
 801baf4:	2b00      	cmp	r3, #0
 801baf6:	d001      	beq.n	801bafc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801baf8:	2301      	movs	r3, #1
 801bafa:	e02c      	b.n	801bb56 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801bafc:	88fb      	ldrh	r3, [r7, #6]
 801bafe:	2b01      	cmp	r3, #1
 801bb00:	d105      	bne.n	801bb0e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801bb02:	893b      	ldrh	r3, [r7, #8]
 801bb04:	b2da      	uxtb	r2, r3
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	681b      	ldr	r3, [r3, #0]
 801bb0a:	629a      	str	r2, [r3, #40]	; 0x28
 801bb0c:	e015      	b.n	801bb3a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801bb0e:	893b      	ldrh	r3, [r7, #8]
 801bb10:	0a1b      	lsrs	r3, r3, #8
 801bb12:	b29b      	uxth	r3, r3
 801bb14:	b2da      	uxtb	r2, r3
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	681b      	ldr	r3, [r3, #0]
 801bb1a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bb1c:	69fa      	ldr	r2, [r7, #28]
 801bb1e:	69b9      	ldr	r1, [r7, #24]
 801bb20:	68f8      	ldr	r0, [r7, #12]
 801bb22:	f000 f883 	bl	801bc2c <I2C_WaitOnTXISFlagUntilTimeout>
 801bb26:	4603      	mov	r3, r0
 801bb28:	2b00      	cmp	r3, #0
 801bb2a:	d001      	beq.n	801bb30 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801bb2c:	2301      	movs	r3, #1
 801bb2e:	e012      	b.n	801bb56 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801bb30:	893b      	ldrh	r3, [r7, #8]
 801bb32:	b2da      	uxtb	r2, r3
 801bb34:	68fb      	ldr	r3, [r7, #12]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801bb3a:	69fb      	ldr	r3, [r7, #28]
 801bb3c:	9300      	str	r3, [sp, #0]
 801bb3e:	69bb      	ldr	r3, [r7, #24]
 801bb40:	2200      	movs	r2, #0
 801bb42:	2140      	movs	r1, #64	; 0x40
 801bb44:	68f8      	ldr	r0, [r7, #12]
 801bb46:	f000 f831 	bl	801bbac <I2C_WaitOnFlagUntilTimeout>
 801bb4a:	4603      	mov	r3, r0
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d001      	beq.n	801bb54 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801bb50:	2301      	movs	r3, #1
 801bb52:	e000      	b.n	801bb56 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801bb54:	2300      	movs	r3, #0
}
 801bb56:	4618      	mov	r0, r3
 801bb58:	3710      	adds	r7, #16
 801bb5a:	46bd      	mov	sp, r7
 801bb5c:	bd80      	pop	{r7, pc}
 801bb5e:	bf00      	nop
 801bb60:	80002000 	.word	0x80002000

0801bb64 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801bb64:	b480      	push	{r7}
 801bb66:	b083      	sub	sp, #12
 801bb68:	af00      	add	r7, sp, #0
 801bb6a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	681b      	ldr	r3, [r3, #0]
 801bb70:	699b      	ldr	r3, [r3, #24]
 801bb72:	f003 0302 	and.w	r3, r3, #2
 801bb76:	2b02      	cmp	r3, #2
 801bb78:	d103      	bne.n	801bb82 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801bb7a:	687b      	ldr	r3, [r7, #4]
 801bb7c:	681b      	ldr	r3, [r3, #0]
 801bb7e:	2200      	movs	r2, #0
 801bb80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	681b      	ldr	r3, [r3, #0]
 801bb86:	699b      	ldr	r3, [r3, #24]
 801bb88:	f003 0301 	and.w	r3, r3, #1
 801bb8c:	2b01      	cmp	r3, #1
 801bb8e:	d007      	beq.n	801bba0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	681b      	ldr	r3, [r3, #0]
 801bb94:	699a      	ldr	r2, [r3, #24]
 801bb96:	687b      	ldr	r3, [r7, #4]
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	f042 0201 	orr.w	r2, r2, #1
 801bb9e:	619a      	str	r2, [r3, #24]
  }
}
 801bba0:	bf00      	nop
 801bba2:	370c      	adds	r7, #12
 801bba4:	46bd      	mov	sp, r7
 801bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbaa:	4770      	bx	lr

0801bbac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801bbac:	b580      	push	{r7, lr}
 801bbae:	b084      	sub	sp, #16
 801bbb0:	af00      	add	r7, sp, #0
 801bbb2:	60f8      	str	r0, [r7, #12]
 801bbb4:	60b9      	str	r1, [r7, #8]
 801bbb6:	603b      	str	r3, [r7, #0]
 801bbb8:	4613      	mov	r3, r2
 801bbba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801bbbc:	e022      	b.n	801bc04 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bbbe:	683b      	ldr	r3, [r7, #0]
 801bbc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bbc4:	d01e      	beq.n	801bc04 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bbc6:	f7fd f833 	bl	8018c30 <HAL_GetTick>
 801bbca:	4602      	mov	r2, r0
 801bbcc:	69bb      	ldr	r3, [r7, #24]
 801bbce:	1ad3      	subs	r3, r2, r3
 801bbd0:	683a      	ldr	r2, [r7, #0]
 801bbd2:	429a      	cmp	r2, r3
 801bbd4:	d302      	bcc.n	801bbdc <I2C_WaitOnFlagUntilTimeout+0x30>
 801bbd6:	683b      	ldr	r3, [r7, #0]
 801bbd8:	2b00      	cmp	r3, #0
 801bbda:	d113      	bne.n	801bc04 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bbe0:	f043 0220 	orr.w	r2, r3, #32
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801bbe8:	68fb      	ldr	r3, [r7, #12]
 801bbea:	2220      	movs	r2, #32
 801bbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801bbf0:	68fb      	ldr	r3, [r7, #12]
 801bbf2:	2200      	movs	r2, #0
 801bbf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801bbf8:	68fb      	ldr	r3, [r7, #12]
 801bbfa:	2200      	movs	r2, #0
 801bbfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801bc00:	2301      	movs	r3, #1
 801bc02:	e00f      	b.n	801bc24 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801bc04:	68fb      	ldr	r3, [r7, #12]
 801bc06:	681b      	ldr	r3, [r3, #0]
 801bc08:	699a      	ldr	r2, [r3, #24]
 801bc0a:	68bb      	ldr	r3, [r7, #8]
 801bc0c:	4013      	ands	r3, r2
 801bc0e:	68ba      	ldr	r2, [r7, #8]
 801bc10:	429a      	cmp	r2, r3
 801bc12:	bf0c      	ite	eq
 801bc14:	2301      	moveq	r3, #1
 801bc16:	2300      	movne	r3, #0
 801bc18:	b2db      	uxtb	r3, r3
 801bc1a:	461a      	mov	r2, r3
 801bc1c:	79fb      	ldrb	r3, [r7, #7]
 801bc1e:	429a      	cmp	r2, r3
 801bc20:	d0cd      	beq.n	801bbbe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801bc22:	2300      	movs	r3, #0
}
 801bc24:	4618      	mov	r0, r3
 801bc26:	3710      	adds	r7, #16
 801bc28:	46bd      	mov	sp, r7
 801bc2a:	bd80      	pop	{r7, pc}

0801bc2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801bc2c:	b580      	push	{r7, lr}
 801bc2e:	b084      	sub	sp, #16
 801bc30:	af00      	add	r7, sp, #0
 801bc32:	60f8      	str	r0, [r7, #12]
 801bc34:	60b9      	str	r1, [r7, #8]
 801bc36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801bc38:	e02c      	b.n	801bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801bc3a:	687a      	ldr	r2, [r7, #4]
 801bc3c:	68b9      	ldr	r1, [r7, #8]
 801bc3e:	68f8      	ldr	r0, [r7, #12]
 801bc40:	f000 f870 	bl	801bd24 <I2C_IsErrorOccurred>
 801bc44:	4603      	mov	r3, r0
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d001      	beq.n	801bc4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801bc4a:	2301      	movs	r3, #1
 801bc4c:	e02a      	b.n	801bca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bc4e:	68bb      	ldr	r3, [r7, #8]
 801bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bc54:	d01e      	beq.n	801bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bc56:	f7fc ffeb 	bl	8018c30 <HAL_GetTick>
 801bc5a:	4602      	mov	r2, r0
 801bc5c:	687b      	ldr	r3, [r7, #4]
 801bc5e:	1ad3      	subs	r3, r2, r3
 801bc60:	68ba      	ldr	r2, [r7, #8]
 801bc62:	429a      	cmp	r2, r3
 801bc64:	d302      	bcc.n	801bc6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801bc66:	68bb      	ldr	r3, [r7, #8]
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	d113      	bne.n	801bc94 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bc70:	f043 0220 	orr.w	r2, r3, #32
 801bc74:	68fb      	ldr	r3, [r7, #12]
 801bc76:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801bc78:	68fb      	ldr	r3, [r7, #12]
 801bc7a:	2220      	movs	r2, #32
 801bc7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801bc80:	68fb      	ldr	r3, [r7, #12]
 801bc82:	2200      	movs	r2, #0
 801bc84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801bc88:	68fb      	ldr	r3, [r7, #12]
 801bc8a:	2200      	movs	r2, #0
 801bc8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801bc90:	2301      	movs	r3, #1
 801bc92:	e007      	b.n	801bca4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	699b      	ldr	r3, [r3, #24]
 801bc9a:	f003 0302 	and.w	r3, r3, #2
 801bc9e:	2b02      	cmp	r3, #2
 801bca0:	d1cb      	bne.n	801bc3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801bca2:	2300      	movs	r3, #0
}
 801bca4:	4618      	mov	r0, r3
 801bca6:	3710      	adds	r7, #16
 801bca8:	46bd      	mov	sp, r7
 801bcaa:	bd80      	pop	{r7, pc}

0801bcac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801bcac:	b580      	push	{r7, lr}
 801bcae:	b084      	sub	sp, #16
 801bcb0:	af00      	add	r7, sp, #0
 801bcb2:	60f8      	str	r0, [r7, #12]
 801bcb4:	60b9      	str	r1, [r7, #8]
 801bcb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801bcb8:	e028      	b.n	801bd0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801bcba:	687a      	ldr	r2, [r7, #4]
 801bcbc:	68b9      	ldr	r1, [r7, #8]
 801bcbe:	68f8      	ldr	r0, [r7, #12]
 801bcc0:	f000 f830 	bl	801bd24 <I2C_IsErrorOccurred>
 801bcc4:	4603      	mov	r3, r0
 801bcc6:	2b00      	cmp	r3, #0
 801bcc8:	d001      	beq.n	801bcce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801bcca:	2301      	movs	r3, #1
 801bccc:	e026      	b.n	801bd1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bcce:	f7fc ffaf 	bl	8018c30 <HAL_GetTick>
 801bcd2:	4602      	mov	r2, r0
 801bcd4:	687b      	ldr	r3, [r7, #4]
 801bcd6:	1ad3      	subs	r3, r2, r3
 801bcd8:	68ba      	ldr	r2, [r7, #8]
 801bcda:	429a      	cmp	r2, r3
 801bcdc:	d302      	bcc.n	801bce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801bcde:	68bb      	ldr	r3, [r7, #8]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	d113      	bne.n	801bd0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bce8:	f043 0220 	orr.w	r2, r3, #32
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801bcf0:	68fb      	ldr	r3, [r7, #12]
 801bcf2:	2220      	movs	r2, #32
 801bcf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801bcf8:	68fb      	ldr	r3, [r7, #12]
 801bcfa:	2200      	movs	r2, #0
 801bcfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	2200      	movs	r2, #0
 801bd04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801bd08:	2301      	movs	r3, #1
 801bd0a:	e007      	b.n	801bd1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801bd0c:	68fb      	ldr	r3, [r7, #12]
 801bd0e:	681b      	ldr	r3, [r3, #0]
 801bd10:	699b      	ldr	r3, [r3, #24]
 801bd12:	f003 0320 	and.w	r3, r3, #32
 801bd16:	2b20      	cmp	r3, #32
 801bd18:	d1cf      	bne.n	801bcba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801bd1a:	2300      	movs	r3, #0
}
 801bd1c:	4618      	mov	r0, r3
 801bd1e:	3710      	adds	r7, #16
 801bd20:	46bd      	mov	sp, r7
 801bd22:	bd80      	pop	{r7, pc}

0801bd24 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b08a      	sub	sp, #40	; 0x28
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	60f8      	str	r0, [r7, #12]
 801bd2c:	60b9      	str	r1, [r7, #8]
 801bd2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801bd30:	2300      	movs	r3, #0
 801bd32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801bd36:	68fb      	ldr	r3, [r7, #12]
 801bd38:	681b      	ldr	r3, [r3, #0]
 801bd3a:	699b      	ldr	r3, [r3, #24]
 801bd3c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801bd3e:	2300      	movs	r3, #0
 801bd40:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801bd42:	687b      	ldr	r3, [r7, #4]
 801bd44:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801bd46:	69bb      	ldr	r3, [r7, #24]
 801bd48:	f003 0310 	and.w	r3, r3, #16
 801bd4c:	2b00      	cmp	r3, #0
 801bd4e:	d068      	beq.n	801be22 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801bd50:	68fb      	ldr	r3, [r7, #12]
 801bd52:	681b      	ldr	r3, [r3, #0]
 801bd54:	2210      	movs	r2, #16
 801bd56:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801bd58:	e049      	b.n	801bdee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801bd5a:	68bb      	ldr	r3, [r7, #8]
 801bd5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd60:	d045      	beq.n	801bdee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801bd62:	f7fc ff65 	bl	8018c30 <HAL_GetTick>
 801bd66:	4602      	mov	r2, r0
 801bd68:	69fb      	ldr	r3, [r7, #28]
 801bd6a:	1ad3      	subs	r3, r2, r3
 801bd6c:	68ba      	ldr	r2, [r7, #8]
 801bd6e:	429a      	cmp	r2, r3
 801bd70:	d302      	bcc.n	801bd78 <I2C_IsErrorOccurred+0x54>
 801bd72:	68bb      	ldr	r3, [r7, #8]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d13a      	bne.n	801bdee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	685b      	ldr	r3, [r3, #4]
 801bd7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801bd82:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801bd8a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801bd8c:	68fb      	ldr	r3, [r7, #12]
 801bd8e:	681b      	ldr	r3, [r3, #0]
 801bd90:	699b      	ldr	r3, [r3, #24]
 801bd92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801bd96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bd9a:	d121      	bne.n	801bde0 <I2C_IsErrorOccurred+0xbc>
 801bd9c:	697b      	ldr	r3, [r7, #20]
 801bd9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bda2:	d01d      	beq.n	801bde0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801bda4:	7cfb      	ldrb	r3, [r7, #19]
 801bda6:	2b20      	cmp	r3, #32
 801bda8:	d01a      	beq.n	801bde0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	685a      	ldr	r2, [r3, #4]
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801bdb8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801bdba:	f7fc ff39 	bl	8018c30 <HAL_GetTick>
 801bdbe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801bdc0:	e00e      	b.n	801bde0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801bdc2:	f7fc ff35 	bl	8018c30 <HAL_GetTick>
 801bdc6:	4602      	mov	r2, r0
 801bdc8:	69fb      	ldr	r3, [r7, #28]
 801bdca:	1ad3      	subs	r3, r2, r3
 801bdcc:	2b19      	cmp	r3, #25
 801bdce:	d907      	bls.n	801bde0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801bdd0:	6a3b      	ldr	r3, [r7, #32]
 801bdd2:	f043 0320 	orr.w	r3, r3, #32
 801bdd6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801bdd8:	2301      	movs	r3, #1
 801bdda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801bdde:	e006      	b.n	801bdee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801bde0:	68fb      	ldr	r3, [r7, #12]
 801bde2:	681b      	ldr	r3, [r3, #0]
 801bde4:	699b      	ldr	r3, [r3, #24]
 801bde6:	f003 0320 	and.w	r3, r3, #32
 801bdea:	2b20      	cmp	r3, #32
 801bdec:	d1e9      	bne.n	801bdc2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	699b      	ldr	r3, [r3, #24]
 801bdf4:	f003 0320 	and.w	r3, r3, #32
 801bdf8:	2b20      	cmp	r3, #32
 801bdfa:	d003      	beq.n	801be04 <I2C_IsErrorOccurred+0xe0>
 801bdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be00:	2b00      	cmp	r3, #0
 801be02:	d0aa      	beq.n	801bd5a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801be04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be08:	2b00      	cmp	r3, #0
 801be0a:	d103      	bne.n	801be14 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	681b      	ldr	r3, [r3, #0]
 801be10:	2220      	movs	r2, #32
 801be12:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801be14:	6a3b      	ldr	r3, [r7, #32]
 801be16:	f043 0304 	orr.w	r3, r3, #4
 801be1a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801be1c:	2301      	movs	r3, #1
 801be1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	699b      	ldr	r3, [r3, #24]
 801be28:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801be2a:	69bb      	ldr	r3, [r7, #24]
 801be2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801be30:	2b00      	cmp	r3, #0
 801be32:	d00b      	beq.n	801be4c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801be34:	6a3b      	ldr	r3, [r7, #32]
 801be36:	f043 0301 	orr.w	r3, r3, #1
 801be3a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	f44f 7280 	mov.w	r2, #256	; 0x100
 801be44:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801be46:	2301      	movs	r3, #1
 801be48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801be4c:	69bb      	ldr	r3, [r7, #24]
 801be4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801be52:	2b00      	cmp	r3, #0
 801be54:	d00b      	beq.n	801be6e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801be56:	6a3b      	ldr	r3, [r7, #32]
 801be58:	f043 0308 	orr.w	r3, r3, #8
 801be5c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801be5e:	68fb      	ldr	r3, [r7, #12]
 801be60:	681b      	ldr	r3, [r3, #0]
 801be62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801be66:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801be68:	2301      	movs	r3, #1
 801be6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801be6e:	69bb      	ldr	r3, [r7, #24]
 801be70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801be74:	2b00      	cmp	r3, #0
 801be76:	d00b      	beq.n	801be90 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801be78:	6a3b      	ldr	r3, [r7, #32]
 801be7a:	f043 0302 	orr.w	r3, r3, #2
 801be7e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	681b      	ldr	r3, [r3, #0]
 801be84:	f44f 7200 	mov.w	r2, #512	; 0x200
 801be88:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801be8a:	2301      	movs	r3, #1
 801be8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801be90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801be94:	2b00      	cmp	r3, #0
 801be96:	d01c      	beq.n	801bed2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801be98:	68f8      	ldr	r0, [r7, #12]
 801be9a:	f7ff fe63 	bl	801bb64 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	681b      	ldr	r3, [r3, #0]
 801bea2:	6859      	ldr	r1, [r3, #4]
 801bea4:	68fb      	ldr	r3, [r7, #12]
 801bea6:	681a      	ldr	r2, [r3, #0]
 801bea8:	4b0d      	ldr	r3, [pc, #52]	; (801bee0 <I2C_IsErrorOccurred+0x1bc>)
 801beaa:	400b      	ands	r3, r1
 801beac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801beae:	68fb      	ldr	r3, [r7, #12]
 801beb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801beb2:	6a3b      	ldr	r3, [r7, #32]
 801beb4:	431a      	orrs	r2, r3
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801beba:	68fb      	ldr	r3, [r7, #12]
 801bebc:	2220      	movs	r2, #32
 801bebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801bec2:	68fb      	ldr	r3, [r7, #12]
 801bec4:	2200      	movs	r2, #0
 801bec6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801beca:	68fb      	ldr	r3, [r7, #12]
 801becc:	2200      	movs	r2, #0
 801bece:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801bed2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801bed6:	4618      	mov	r0, r3
 801bed8:	3728      	adds	r7, #40	; 0x28
 801beda:	46bd      	mov	sp, r7
 801bedc:	bd80      	pop	{r7, pc}
 801bede:	bf00      	nop
 801bee0:	fe00e800 	.word	0xfe00e800

0801bee4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801bee4:	b480      	push	{r7}
 801bee6:	b087      	sub	sp, #28
 801bee8:	af00      	add	r7, sp, #0
 801beea:	60f8      	str	r0, [r7, #12]
 801beec:	607b      	str	r3, [r7, #4]
 801beee:	460b      	mov	r3, r1
 801bef0:	817b      	strh	r3, [r7, #10]
 801bef2:	4613      	mov	r3, r2
 801bef4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bef6:	897b      	ldrh	r3, [r7, #10]
 801bef8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801befc:	7a7b      	ldrb	r3, [r7, #9]
 801befe:	041b      	lsls	r3, r3, #16
 801bf00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bf04:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801bf0a:	6a3b      	ldr	r3, [r7, #32]
 801bf0c:	4313      	orrs	r3, r2
 801bf0e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801bf12:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	685a      	ldr	r2, [r3, #4]
 801bf1a:	6a3b      	ldr	r3, [r7, #32]
 801bf1c:	0d5b      	lsrs	r3, r3, #21
 801bf1e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801bf22:	4b08      	ldr	r3, [pc, #32]	; (801bf44 <I2C_TransferConfig+0x60>)
 801bf24:	430b      	orrs	r3, r1
 801bf26:	43db      	mvns	r3, r3
 801bf28:	ea02 0103 	and.w	r1, r2, r3
 801bf2c:	68fb      	ldr	r3, [r7, #12]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	697a      	ldr	r2, [r7, #20]
 801bf32:	430a      	orrs	r2, r1
 801bf34:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801bf36:	bf00      	nop
 801bf38:	371c      	adds	r7, #28
 801bf3a:	46bd      	mov	sp, r7
 801bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf40:	4770      	bx	lr
 801bf42:	bf00      	nop
 801bf44:	03ff63ff 	.word	0x03ff63ff

0801bf48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801bf48:	b480      	push	{r7}
 801bf4a:	b083      	sub	sp, #12
 801bf4c:	af00      	add	r7, sp, #0
 801bf4e:	6078      	str	r0, [r7, #4]
 801bf50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bf52:	687b      	ldr	r3, [r7, #4]
 801bf54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bf58:	b2db      	uxtb	r3, r3
 801bf5a:	2b20      	cmp	r3, #32
 801bf5c:	d138      	bne.n	801bfd0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bf5e:	687b      	ldr	r3, [r7, #4]
 801bf60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bf64:	2b01      	cmp	r3, #1
 801bf66:	d101      	bne.n	801bf6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801bf68:	2302      	movs	r3, #2
 801bf6a:	e032      	b.n	801bfd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801bf6c:	687b      	ldr	r3, [r7, #4]
 801bf6e:	2201      	movs	r2, #1
 801bf70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bf74:	687b      	ldr	r3, [r7, #4]
 801bf76:	2224      	movs	r2, #36	; 0x24
 801bf78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bf7c:	687b      	ldr	r3, [r7, #4]
 801bf7e:	681b      	ldr	r3, [r3, #0]
 801bf80:	681a      	ldr	r2, [r3, #0]
 801bf82:	687b      	ldr	r3, [r7, #4]
 801bf84:	681b      	ldr	r3, [r3, #0]
 801bf86:	f022 0201 	bic.w	r2, r2, #1
 801bf8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801bf8c:	687b      	ldr	r3, [r7, #4]
 801bf8e:	681b      	ldr	r3, [r3, #0]
 801bf90:	681a      	ldr	r2, [r3, #0]
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	681b      	ldr	r3, [r3, #0]
 801bf96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801bf9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801bf9c:	687b      	ldr	r3, [r7, #4]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	6819      	ldr	r1, [r3, #0]
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	683a      	ldr	r2, [r7, #0]
 801bfa8:	430a      	orrs	r2, r1
 801bfaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	681b      	ldr	r3, [r3, #0]
 801bfb0:	681a      	ldr	r2, [r3, #0]
 801bfb2:	687b      	ldr	r3, [r7, #4]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	f042 0201 	orr.w	r2, r2, #1
 801bfba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	2220      	movs	r2, #32
 801bfc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	2200      	movs	r2, #0
 801bfc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801bfcc:	2300      	movs	r3, #0
 801bfce:	e000      	b.n	801bfd2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801bfd0:	2302      	movs	r3, #2
  }
}
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	370c      	adds	r7, #12
 801bfd6:	46bd      	mov	sp, r7
 801bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfdc:	4770      	bx	lr

0801bfde <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801bfde:	b480      	push	{r7}
 801bfe0:	b085      	sub	sp, #20
 801bfe2:	af00      	add	r7, sp, #0
 801bfe4:	6078      	str	r0, [r7, #4]
 801bfe6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bfee:	b2db      	uxtb	r3, r3
 801bff0:	2b20      	cmp	r3, #32
 801bff2:	d139      	bne.n	801c068 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bffa:	2b01      	cmp	r3, #1
 801bffc:	d101      	bne.n	801c002 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801bffe:	2302      	movs	r3, #2
 801c000:	e033      	b.n	801c06a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c002:	687b      	ldr	r3, [r7, #4]
 801c004:	2201      	movs	r2, #1
 801c006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	2224      	movs	r2, #36	; 0x24
 801c00e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	681a      	ldr	r2, [r3, #0]
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	681b      	ldr	r3, [r3, #0]
 801c01c:	f022 0201 	bic.w	r2, r2, #1
 801c020:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	681b      	ldr	r3, [r3, #0]
 801c028:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801c030:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c032:	683b      	ldr	r3, [r7, #0]
 801c034:	021b      	lsls	r3, r3, #8
 801c036:	68fa      	ldr	r2, [r7, #12]
 801c038:	4313      	orrs	r3, r2
 801c03a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	681b      	ldr	r3, [r3, #0]
 801c040:	68fa      	ldr	r2, [r7, #12]
 801c042:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	681a      	ldr	r2, [r3, #0]
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	681b      	ldr	r3, [r3, #0]
 801c04e:	f042 0201 	orr.w	r2, r2, #1
 801c052:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	2220      	movs	r2, #32
 801c058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	2200      	movs	r2, #0
 801c060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c064:	2300      	movs	r3, #0
 801c066:	e000      	b.n	801c06a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c068:	2302      	movs	r3, #2
  }
}
 801c06a:	4618      	mov	r0, r3
 801c06c:	3714      	adds	r7, #20
 801c06e:	46bd      	mov	sp, r7
 801c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c074:	4770      	bx	lr

0801c076 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801c076:	b580      	push	{r7, lr}
 801c078:	b084      	sub	sp, #16
 801c07a:	af00      	add	r7, sp, #0
 801c07c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801c07e:	687b      	ldr	r3, [r7, #4]
 801c080:	2b00      	cmp	r3, #0
 801c082:	d101      	bne.n	801c088 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801c084:	2301      	movs	r3, #1
 801c086:	e041      	b.n	801c10c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	681b      	ldr	r3, [r3, #0]
 801c08c:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801c090:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801c092:	687b      	ldr	r3, [r7, #4]
 801c094:	681b      	ldr	r3, [r3, #0]
 801c096:	f245 5255 	movw	r2, #21845	; 0x5555
 801c09a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	687a      	ldr	r2, [r7, #4]
 801c0a2:	6852      	ldr	r2, [r2, #4]
 801c0a4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801c0a6:	687b      	ldr	r3, [r7, #4]
 801c0a8:	681b      	ldr	r3, [r3, #0]
 801c0aa:	687a      	ldr	r2, [r7, #4]
 801c0ac:	6892      	ldr	r2, [r2, #8]
 801c0ae:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801c0b0:	f7fc fdbe 	bl	8018c30 <HAL_GetTick>
 801c0b4:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c0b6:	e00f      	b.n	801c0d8 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801c0b8:	f7fc fdba 	bl	8018c30 <HAL_GetTick>
 801c0bc:	4602      	mov	r2, r0
 801c0be:	68fb      	ldr	r3, [r7, #12]
 801c0c0:	1ad3      	subs	r3, r2, r3
 801c0c2:	2b31      	cmp	r3, #49	; 0x31
 801c0c4:	d908      	bls.n	801c0d8 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c0c6:	687b      	ldr	r3, [r7, #4]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	68db      	ldr	r3, [r3, #12]
 801c0cc:	f003 0307 	and.w	r3, r3, #7
 801c0d0:	2b00      	cmp	r3, #0
 801c0d2:	d001      	beq.n	801c0d8 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801c0d4:	2303      	movs	r3, #3
 801c0d6:	e019      	b.n	801c10c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c0d8:	687b      	ldr	r3, [r7, #4]
 801c0da:	681b      	ldr	r3, [r3, #0]
 801c0dc:	68db      	ldr	r3, [r3, #12]
 801c0de:	f003 0307 	and.w	r3, r3, #7
 801c0e2:	2b00      	cmp	r3, #0
 801c0e4:	d1e8      	bne.n	801c0b8 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	691a      	ldr	r2, [r3, #16]
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	68db      	ldr	r3, [r3, #12]
 801c0f0:	429a      	cmp	r2, r3
 801c0f2:	d005      	beq.n	801c100 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	687a      	ldr	r2, [r7, #4]
 801c0fa:	68d2      	ldr	r2, [r2, #12]
 801c0fc:	611a      	str	r2, [r3, #16]
 801c0fe:	e004      	b.n	801c10a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801c100:	687b      	ldr	r3, [r7, #4]
 801c102:	681b      	ldr	r3, [r3, #0]
 801c104:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801c108:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c10a:	2300      	movs	r3, #0
}
 801c10c:	4618      	mov	r0, r3
 801c10e:	3710      	adds	r7, #16
 801c110:	46bd      	mov	sp, r7
 801c112:	bd80      	pop	{r7, pc}

0801c114 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801c114:	b480      	push	{r7}
 801c116:	b083      	sub	sp, #12
 801c118:	af00      	add	r7, sp, #0
 801c11a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	681b      	ldr	r3, [r3, #0]
 801c120:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801c124:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801c126:	2300      	movs	r3, #0
}
 801c128:	4618      	mov	r0, r3
 801c12a:	370c      	adds	r7, #12
 801c12c:	46bd      	mov	sp, r7
 801c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c132:	4770      	bx	lr

0801c134 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c134:	b580      	push	{r7, lr}
 801c136:	b086      	sub	sp, #24
 801c138:	af00      	add	r7, sp, #0
 801c13a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801c13c:	2300      	movs	r3, #0
 801c13e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c140:	687b      	ldr	r3, [r7, #4]
 801c142:	2b00      	cmp	r3, #0
 801c144:	d101      	bne.n	801c14a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801c146:	2301      	movs	r3, #1
 801c148:	e29b      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	f003 0301 	and.w	r3, r3, #1
 801c152:	2b00      	cmp	r3, #0
 801c154:	f000 8087 	beq.w	801c266 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801c158:	4b96      	ldr	r3, [pc, #600]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c15a:	689b      	ldr	r3, [r3, #8]
 801c15c:	f003 030c 	and.w	r3, r3, #12
 801c160:	2b04      	cmp	r3, #4
 801c162:	d00c      	beq.n	801c17e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801c164:	4b93      	ldr	r3, [pc, #588]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c166:	689b      	ldr	r3, [r3, #8]
 801c168:	f003 030c 	and.w	r3, r3, #12
 801c16c:	2b08      	cmp	r3, #8
 801c16e:	d112      	bne.n	801c196 <HAL_RCC_OscConfig+0x62>
 801c170:	4b90      	ldr	r3, [pc, #576]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c172:	685b      	ldr	r3, [r3, #4]
 801c174:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c17c:	d10b      	bne.n	801c196 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c17e:	4b8d      	ldr	r3, [pc, #564]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c180:	681b      	ldr	r3, [r3, #0]
 801c182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c186:	2b00      	cmp	r3, #0
 801c188:	d06c      	beq.n	801c264 <HAL_RCC_OscConfig+0x130>
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	685b      	ldr	r3, [r3, #4]
 801c18e:	2b00      	cmp	r3, #0
 801c190:	d168      	bne.n	801c264 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c192:	2301      	movs	r3, #1
 801c194:	e275      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	685b      	ldr	r3, [r3, #4]
 801c19a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c19e:	d106      	bne.n	801c1ae <HAL_RCC_OscConfig+0x7a>
 801c1a0:	4b84      	ldr	r3, [pc, #528]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1a2:	681b      	ldr	r3, [r3, #0]
 801c1a4:	4a83      	ldr	r2, [pc, #524]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c1aa:	6013      	str	r3, [r2, #0]
 801c1ac:	e02e      	b.n	801c20c <HAL_RCC_OscConfig+0xd8>
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	685b      	ldr	r3, [r3, #4]
 801c1b2:	2b00      	cmp	r3, #0
 801c1b4:	d10c      	bne.n	801c1d0 <HAL_RCC_OscConfig+0x9c>
 801c1b6:	4b7f      	ldr	r3, [pc, #508]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	4a7e      	ldr	r2, [pc, #504]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c1c0:	6013      	str	r3, [r2, #0]
 801c1c2:	4b7c      	ldr	r3, [pc, #496]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	4a7b      	ldr	r2, [pc, #492]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c1cc:	6013      	str	r3, [r2, #0]
 801c1ce:	e01d      	b.n	801c20c <HAL_RCC_OscConfig+0xd8>
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c1d8:	d10c      	bne.n	801c1f4 <HAL_RCC_OscConfig+0xc0>
 801c1da:	4b76      	ldr	r3, [pc, #472]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1dc:	681b      	ldr	r3, [r3, #0]
 801c1de:	4a75      	ldr	r2, [pc, #468]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c1e4:	6013      	str	r3, [r2, #0]
 801c1e6:	4b73      	ldr	r3, [pc, #460]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1e8:	681b      	ldr	r3, [r3, #0]
 801c1ea:	4a72      	ldr	r2, [pc, #456]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c1f0:	6013      	str	r3, [r2, #0]
 801c1f2:	e00b      	b.n	801c20c <HAL_RCC_OscConfig+0xd8>
 801c1f4:	4b6f      	ldr	r3, [pc, #444]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1f6:	681b      	ldr	r3, [r3, #0]
 801c1f8:	4a6e      	ldr	r2, [pc, #440]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c1fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c1fe:	6013      	str	r3, [r2, #0]
 801c200:	4b6c      	ldr	r3, [pc, #432]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	4a6b      	ldr	r2, [pc, #428]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c206:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c20a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c20c:	687b      	ldr	r3, [r7, #4]
 801c20e:	685b      	ldr	r3, [r3, #4]
 801c210:	2b00      	cmp	r3, #0
 801c212:	d013      	beq.n	801c23c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c214:	f7fc fd0c 	bl	8018c30 <HAL_GetTick>
 801c218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c21a:	e008      	b.n	801c22e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c21c:	f7fc fd08 	bl	8018c30 <HAL_GetTick>
 801c220:	4602      	mov	r2, r0
 801c222:	693b      	ldr	r3, [r7, #16]
 801c224:	1ad3      	subs	r3, r2, r3
 801c226:	2b64      	cmp	r3, #100	; 0x64
 801c228:	d901      	bls.n	801c22e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c22a:	2303      	movs	r3, #3
 801c22c:	e229      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c22e:	4b61      	ldr	r3, [pc, #388]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c230:	681b      	ldr	r3, [r3, #0]
 801c232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c236:	2b00      	cmp	r3, #0
 801c238:	d0f0      	beq.n	801c21c <HAL_RCC_OscConfig+0xe8>
 801c23a:	e014      	b.n	801c266 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c23c:	f7fc fcf8 	bl	8018c30 <HAL_GetTick>
 801c240:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c242:	e008      	b.n	801c256 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c244:	f7fc fcf4 	bl	8018c30 <HAL_GetTick>
 801c248:	4602      	mov	r2, r0
 801c24a:	693b      	ldr	r3, [r7, #16]
 801c24c:	1ad3      	subs	r3, r2, r3
 801c24e:	2b64      	cmp	r3, #100	; 0x64
 801c250:	d901      	bls.n	801c256 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c252:	2303      	movs	r3, #3
 801c254:	e215      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c256:	4b57      	ldr	r3, [pc, #348]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d1f0      	bne.n	801c244 <HAL_RCC_OscConfig+0x110>
 801c262:	e000      	b.n	801c266 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c264:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c266:	687b      	ldr	r3, [r7, #4]
 801c268:	681b      	ldr	r3, [r3, #0]
 801c26a:	f003 0302 	and.w	r3, r3, #2
 801c26e:	2b00      	cmp	r3, #0
 801c270:	d069      	beq.n	801c346 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801c272:	4b50      	ldr	r3, [pc, #320]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c274:	689b      	ldr	r3, [r3, #8]
 801c276:	f003 030c 	and.w	r3, r3, #12
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d00b      	beq.n	801c296 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c27e:	4b4d      	ldr	r3, [pc, #308]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c280:	689b      	ldr	r3, [r3, #8]
 801c282:	f003 030c 	and.w	r3, r3, #12
 801c286:	2b08      	cmp	r3, #8
 801c288:	d11c      	bne.n	801c2c4 <HAL_RCC_OscConfig+0x190>
 801c28a:	4b4a      	ldr	r3, [pc, #296]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c28c:	685b      	ldr	r3, [r3, #4]
 801c28e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c292:	2b00      	cmp	r3, #0
 801c294:	d116      	bne.n	801c2c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c296:	4b47      	ldr	r3, [pc, #284]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	f003 0302 	and.w	r3, r3, #2
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d005      	beq.n	801c2ae <HAL_RCC_OscConfig+0x17a>
 801c2a2:	687b      	ldr	r3, [r7, #4]
 801c2a4:	68db      	ldr	r3, [r3, #12]
 801c2a6:	2b01      	cmp	r3, #1
 801c2a8:	d001      	beq.n	801c2ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801c2aa:	2301      	movs	r3, #1
 801c2ac:	e1e9      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2ae:	4b41      	ldr	r3, [pc, #260]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c2b0:	681b      	ldr	r3, [r3, #0]
 801c2b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c2b6:	687b      	ldr	r3, [r7, #4]
 801c2b8:	691b      	ldr	r3, [r3, #16]
 801c2ba:	00db      	lsls	r3, r3, #3
 801c2bc:	493d      	ldr	r1, [pc, #244]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c2be:	4313      	orrs	r3, r2
 801c2c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c2c2:	e040      	b.n	801c346 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	68db      	ldr	r3, [r3, #12]
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	d023      	beq.n	801c314 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c2cc:	4b39      	ldr	r3, [pc, #228]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c2ce:	681b      	ldr	r3, [r3, #0]
 801c2d0:	4a38      	ldr	r2, [pc, #224]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c2d2:	f043 0301 	orr.w	r3, r3, #1
 801c2d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c2d8:	f7fc fcaa 	bl	8018c30 <HAL_GetTick>
 801c2dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c2de:	e008      	b.n	801c2f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c2e0:	f7fc fca6 	bl	8018c30 <HAL_GetTick>
 801c2e4:	4602      	mov	r2, r0
 801c2e6:	693b      	ldr	r3, [r7, #16]
 801c2e8:	1ad3      	subs	r3, r2, r3
 801c2ea:	2b02      	cmp	r3, #2
 801c2ec:	d901      	bls.n	801c2f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801c2ee:	2303      	movs	r3, #3
 801c2f0:	e1c7      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c2f2:	4b30      	ldr	r3, [pc, #192]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	f003 0302 	and.w	r3, r3, #2
 801c2fa:	2b00      	cmp	r3, #0
 801c2fc:	d0f0      	beq.n	801c2e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c2fe:	4b2d      	ldr	r3, [pc, #180]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c300:	681b      	ldr	r3, [r3, #0]
 801c302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c306:	687b      	ldr	r3, [r7, #4]
 801c308:	691b      	ldr	r3, [r3, #16]
 801c30a:	00db      	lsls	r3, r3, #3
 801c30c:	4929      	ldr	r1, [pc, #164]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c30e:	4313      	orrs	r3, r2
 801c310:	600b      	str	r3, [r1, #0]
 801c312:	e018      	b.n	801c346 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c314:	4b27      	ldr	r3, [pc, #156]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	4a26      	ldr	r2, [pc, #152]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c31a:	f023 0301 	bic.w	r3, r3, #1
 801c31e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c320:	f7fc fc86 	bl	8018c30 <HAL_GetTick>
 801c324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c326:	e008      	b.n	801c33a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c328:	f7fc fc82 	bl	8018c30 <HAL_GetTick>
 801c32c:	4602      	mov	r2, r0
 801c32e:	693b      	ldr	r3, [r7, #16]
 801c330:	1ad3      	subs	r3, r2, r3
 801c332:	2b02      	cmp	r3, #2
 801c334:	d901      	bls.n	801c33a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801c336:	2303      	movs	r3, #3
 801c338:	e1a3      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c33a:	4b1e      	ldr	r3, [pc, #120]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c33c:	681b      	ldr	r3, [r3, #0]
 801c33e:	f003 0302 	and.w	r3, r3, #2
 801c342:	2b00      	cmp	r3, #0
 801c344:	d1f0      	bne.n	801c328 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c346:	687b      	ldr	r3, [r7, #4]
 801c348:	681b      	ldr	r3, [r3, #0]
 801c34a:	f003 0308 	and.w	r3, r3, #8
 801c34e:	2b00      	cmp	r3, #0
 801c350:	d038      	beq.n	801c3c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	695b      	ldr	r3, [r3, #20]
 801c356:	2b00      	cmp	r3, #0
 801c358:	d019      	beq.n	801c38e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c35a:	4b16      	ldr	r3, [pc, #88]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c35e:	4a15      	ldr	r2, [pc, #84]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c360:	f043 0301 	orr.w	r3, r3, #1
 801c364:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c366:	f7fc fc63 	bl	8018c30 <HAL_GetTick>
 801c36a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c36c:	e008      	b.n	801c380 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c36e:	f7fc fc5f 	bl	8018c30 <HAL_GetTick>
 801c372:	4602      	mov	r2, r0
 801c374:	693b      	ldr	r3, [r7, #16]
 801c376:	1ad3      	subs	r3, r2, r3
 801c378:	2b02      	cmp	r3, #2
 801c37a:	d901      	bls.n	801c380 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801c37c:	2303      	movs	r3, #3
 801c37e:	e180      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c380:	4b0c      	ldr	r3, [pc, #48]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c384:	f003 0302 	and.w	r3, r3, #2
 801c388:	2b00      	cmp	r3, #0
 801c38a:	d0f0      	beq.n	801c36e <HAL_RCC_OscConfig+0x23a>
 801c38c:	e01a      	b.n	801c3c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c38e:	4b09      	ldr	r3, [pc, #36]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c392:	4a08      	ldr	r2, [pc, #32]	; (801c3b4 <HAL_RCC_OscConfig+0x280>)
 801c394:	f023 0301 	bic.w	r3, r3, #1
 801c398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c39a:	f7fc fc49 	bl	8018c30 <HAL_GetTick>
 801c39e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c3a0:	e00a      	b.n	801c3b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c3a2:	f7fc fc45 	bl	8018c30 <HAL_GetTick>
 801c3a6:	4602      	mov	r2, r0
 801c3a8:	693b      	ldr	r3, [r7, #16]
 801c3aa:	1ad3      	subs	r3, r2, r3
 801c3ac:	2b02      	cmp	r3, #2
 801c3ae:	d903      	bls.n	801c3b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c3b0:	2303      	movs	r3, #3
 801c3b2:	e166      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
 801c3b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c3b8:	4b92      	ldr	r3, [pc, #584]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c3bc:	f003 0302 	and.w	r3, r3, #2
 801c3c0:	2b00      	cmp	r3, #0
 801c3c2:	d1ee      	bne.n	801c3a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	f003 0304 	and.w	r3, r3, #4
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	f000 80a4 	beq.w	801c51a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c3d2:	4b8c      	ldr	r3, [pc, #560]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d10d      	bne.n	801c3fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801c3de:	4b89      	ldr	r3, [pc, #548]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3e2:	4a88      	ldr	r2, [pc, #544]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c3e8:	6413      	str	r3, [r2, #64]	; 0x40
 801c3ea:	4b86      	ldr	r3, [pc, #536]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c3f2:	60bb      	str	r3, [r7, #8]
 801c3f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c3f6:	2301      	movs	r3, #1
 801c3f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c3fa:	4b83      	ldr	r3, [pc, #524]	; (801c608 <HAL_RCC_OscConfig+0x4d4>)
 801c3fc:	681b      	ldr	r3, [r3, #0]
 801c3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c402:	2b00      	cmp	r3, #0
 801c404:	d118      	bne.n	801c438 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801c406:	4b80      	ldr	r3, [pc, #512]	; (801c608 <HAL_RCC_OscConfig+0x4d4>)
 801c408:	681b      	ldr	r3, [r3, #0]
 801c40a:	4a7f      	ldr	r2, [pc, #508]	; (801c608 <HAL_RCC_OscConfig+0x4d4>)
 801c40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c412:	f7fc fc0d 	bl	8018c30 <HAL_GetTick>
 801c416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c418:	e008      	b.n	801c42c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c41a:	f7fc fc09 	bl	8018c30 <HAL_GetTick>
 801c41e:	4602      	mov	r2, r0
 801c420:	693b      	ldr	r3, [r7, #16]
 801c422:	1ad3      	subs	r3, r2, r3
 801c424:	2b64      	cmp	r3, #100	; 0x64
 801c426:	d901      	bls.n	801c42c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801c428:	2303      	movs	r3, #3
 801c42a:	e12a      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c42c:	4b76      	ldr	r3, [pc, #472]	; (801c608 <HAL_RCC_OscConfig+0x4d4>)
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c434:	2b00      	cmp	r3, #0
 801c436:	d0f0      	beq.n	801c41a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	689b      	ldr	r3, [r3, #8]
 801c43c:	2b01      	cmp	r3, #1
 801c43e:	d106      	bne.n	801c44e <HAL_RCC_OscConfig+0x31a>
 801c440:	4b70      	ldr	r3, [pc, #448]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c444:	4a6f      	ldr	r2, [pc, #444]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c446:	f043 0301 	orr.w	r3, r3, #1
 801c44a:	6713      	str	r3, [r2, #112]	; 0x70
 801c44c:	e02d      	b.n	801c4aa <HAL_RCC_OscConfig+0x376>
 801c44e:	687b      	ldr	r3, [r7, #4]
 801c450:	689b      	ldr	r3, [r3, #8]
 801c452:	2b00      	cmp	r3, #0
 801c454:	d10c      	bne.n	801c470 <HAL_RCC_OscConfig+0x33c>
 801c456:	4b6b      	ldr	r3, [pc, #428]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c45a:	4a6a      	ldr	r2, [pc, #424]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c45c:	f023 0301 	bic.w	r3, r3, #1
 801c460:	6713      	str	r3, [r2, #112]	; 0x70
 801c462:	4b68      	ldr	r3, [pc, #416]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c466:	4a67      	ldr	r2, [pc, #412]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c468:	f023 0304 	bic.w	r3, r3, #4
 801c46c:	6713      	str	r3, [r2, #112]	; 0x70
 801c46e:	e01c      	b.n	801c4aa <HAL_RCC_OscConfig+0x376>
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	689b      	ldr	r3, [r3, #8]
 801c474:	2b05      	cmp	r3, #5
 801c476:	d10c      	bne.n	801c492 <HAL_RCC_OscConfig+0x35e>
 801c478:	4b62      	ldr	r3, [pc, #392]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c47a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c47c:	4a61      	ldr	r2, [pc, #388]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c47e:	f043 0304 	orr.w	r3, r3, #4
 801c482:	6713      	str	r3, [r2, #112]	; 0x70
 801c484:	4b5f      	ldr	r3, [pc, #380]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c488:	4a5e      	ldr	r2, [pc, #376]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c48a:	f043 0301 	orr.w	r3, r3, #1
 801c48e:	6713      	str	r3, [r2, #112]	; 0x70
 801c490:	e00b      	b.n	801c4aa <HAL_RCC_OscConfig+0x376>
 801c492:	4b5c      	ldr	r3, [pc, #368]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c496:	4a5b      	ldr	r2, [pc, #364]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c498:	f023 0301 	bic.w	r3, r3, #1
 801c49c:	6713      	str	r3, [r2, #112]	; 0x70
 801c49e:	4b59      	ldr	r3, [pc, #356]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c4a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4a2:	4a58      	ldr	r2, [pc, #352]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c4a4:	f023 0304 	bic.w	r3, r3, #4
 801c4a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c4aa:	687b      	ldr	r3, [r7, #4]
 801c4ac:	689b      	ldr	r3, [r3, #8]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d015      	beq.n	801c4de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4b2:	f7fc fbbd 	bl	8018c30 <HAL_GetTick>
 801c4b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c4b8:	e00a      	b.n	801c4d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c4ba:	f7fc fbb9 	bl	8018c30 <HAL_GetTick>
 801c4be:	4602      	mov	r2, r0
 801c4c0:	693b      	ldr	r3, [r7, #16]
 801c4c2:	1ad3      	subs	r3, r2, r3
 801c4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 801c4c8:	4293      	cmp	r3, r2
 801c4ca:	d901      	bls.n	801c4d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801c4cc:	2303      	movs	r3, #3
 801c4ce:	e0d8      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801c4d0:	4b4c      	ldr	r3, [pc, #304]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4d4:	f003 0302 	and.w	r3, r3, #2
 801c4d8:	2b00      	cmp	r3, #0
 801c4da:	d0ee      	beq.n	801c4ba <HAL_RCC_OscConfig+0x386>
 801c4dc:	e014      	b.n	801c508 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c4de:	f7fc fba7 	bl	8018c30 <HAL_GetTick>
 801c4e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c4e4:	e00a      	b.n	801c4fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c4e6:	f7fc fba3 	bl	8018c30 <HAL_GetTick>
 801c4ea:	4602      	mov	r2, r0
 801c4ec:	693b      	ldr	r3, [r7, #16]
 801c4ee:	1ad3      	subs	r3, r2, r3
 801c4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 801c4f4:	4293      	cmp	r3, r2
 801c4f6:	d901      	bls.n	801c4fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801c4f8:	2303      	movs	r3, #3
 801c4fa:	e0c2      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801c4fc:	4b41      	ldr	r3, [pc, #260]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c500:	f003 0302 	and.w	r3, r3, #2
 801c504:	2b00      	cmp	r3, #0
 801c506:	d1ee      	bne.n	801c4e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801c508:	7dfb      	ldrb	r3, [r7, #23]
 801c50a:	2b01      	cmp	r3, #1
 801c50c:	d105      	bne.n	801c51a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801c50e:	4b3d      	ldr	r3, [pc, #244]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c512:	4a3c      	ldr	r2, [pc, #240]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801c518:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	699b      	ldr	r3, [r3, #24]
 801c51e:	2b00      	cmp	r3, #0
 801c520:	f000 80ae 	beq.w	801c680 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801c524:	4b37      	ldr	r3, [pc, #220]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c526:	689b      	ldr	r3, [r3, #8]
 801c528:	f003 030c 	and.w	r3, r3, #12
 801c52c:	2b08      	cmp	r3, #8
 801c52e:	d06d      	beq.n	801c60c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	699b      	ldr	r3, [r3, #24]
 801c534:	2b02      	cmp	r3, #2
 801c536:	d14b      	bne.n	801c5d0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c538:	4b32      	ldr	r3, [pc, #200]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c53a:	681b      	ldr	r3, [r3, #0]
 801c53c:	4a31      	ldr	r2, [pc, #196]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c53e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c544:	f7fc fb74 	bl	8018c30 <HAL_GetTick>
 801c548:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c54a:	e008      	b.n	801c55e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c54c:	f7fc fb70 	bl	8018c30 <HAL_GetTick>
 801c550:	4602      	mov	r2, r0
 801c552:	693b      	ldr	r3, [r7, #16]
 801c554:	1ad3      	subs	r3, r2, r3
 801c556:	2b02      	cmp	r3, #2
 801c558:	d901      	bls.n	801c55e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801c55a:	2303      	movs	r3, #3
 801c55c:	e091      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c55e:	4b29      	ldr	r3, [pc, #164]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c566:	2b00      	cmp	r3, #0
 801c568:	d1f0      	bne.n	801c54c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	69da      	ldr	r2, [r3, #28]
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	6a1b      	ldr	r3, [r3, #32]
 801c572:	431a      	orrs	r2, r3
 801c574:	687b      	ldr	r3, [r7, #4]
 801c576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c578:	019b      	lsls	r3, r3, #6
 801c57a:	431a      	orrs	r2, r3
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c580:	085b      	lsrs	r3, r3, #1
 801c582:	3b01      	subs	r3, #1
 801c584:	041b      	lsls	r3, r3, #16
 801c586:	431a      	orrs	r2, r3
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c58c:	061b      	lsls	r3, r3, #24
 801c58e:	431a      	orrs	r2, r3
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c594:	071b      	lsls	r3, r3, #28
 801c596:	491b      	ldr	r1, [pc, #108]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c598:	4313      	orrs	r3, r2
 801c59a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c59c:	4b19      	ldr	r3, [pc, #100]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c59e:	681b      	ldr	r3, [r3, #0]
 801c5a0:	4a18      	ldr	r2, [pc, #96]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c5a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801c5a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5a8:	f7fc fb42 	bl	8018c30 <HAL_GetTick>
 801c5ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c5ae:	e008      	b.n	801c5c2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c5b0:	f7fc fb3e 	bl	8018c30 <HAL_GetTick>
 801c5b4:	4602      	mov	r2, r0
 801c5b6:	693b      	ldr	r3, [r7, #16]
 801c5b8:	1ad3      	subs	r3, r2, r3
 801c5ba:	2b02      	cmp	r3, #2
 801c5bc:	d901      	bls.n	801c5c2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801c5be:	2303      	movs	r3, #3
 801c5c0:	e05f      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c5c2:	4b10      	ldr	r3, [pc, #64]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d0f0      	beq.n	801c5b0 <HAL_RCC_OscConfig+0x47c>
 801c5ce:	e057      	b.n	801c680 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c5d0:	4b0c      	ldr	r3, [pc, #48]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c5d2:	681b      	ldr	r3, [r3, #0]
 801c5d4:	4a0b      	ldr	r2, [pc, #44]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c5d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801c5da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5dc:	f7fc fb28 	bl	8018c30 <HAL_GetTick>
 801c5e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c5e2:	e008      	b.n	801c5f6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c5e4:	f7fc fb24 	bl	8018c30 <HAL_GetTick>
 801c5e8:	4602      	mov	r2, r0
 801c5ea:	693b      	ldr	r3, [r7, #16]
 801c5ec:	1ad3      	subs	r3, r2, r3
 801c5ee:	2b02      	cmp	r3, #2
 801c5f0:	d901      	bls.n	801c5f6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801c5f2:	2303      	movs	r3, #3
 801c5f4:	e045      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801c5f6:	4b03      	ldr	r3, [pc, #12]	; (801c604 <HAL_RCC_OscConfig+0x4d0>)
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d1f0      	bne.n	801c5e4 <HAL_RCC_OscConfig+0x4b0>
 801c602:	e03d      	b.n	801c680 <HAL_RCC_OscConfig+0x54c>
 801c604:	40023800 	.word	0x40023800
 801c608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801c60c:	4b1f      	ldr	r3, [pc, #124]	; (801c68c <HAL_RCC_OscConfig+0x558>)
 801c60e:	685b      	ldr	r3, [r3, #4]
 801c610:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	699b      	ldr	r3, [r3, #24]
 801c616:	2b01      	cmp	r3, #1
 801c618:	d030      	beq.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c624:	429a      	cmp	r2, r3
 801c626:	d129      	bne.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801c628:	68fb      	ldr	r3, [r7, #12]
 801c62a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801c62e:	687b      	ldr	r3, [r7, #4]
 801c630:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c632:	429a      	cmp	r2, r3
 801c634:	d122      	bne.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c636:	68fa      	ldr	r2, [r7, #12]
 801c638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801c63c:	4013      	ands	r3, r2
 801c63e:	687a      	ldr	r2, [r7, #4]
 801c640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801c642:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801c644:	4293      	cmp	r3, r2
 801c646:	d119      	bne.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801c648:	68fb      	ldr	r3, [r7, #12]
 801c64a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c652:	085b      	lsrs	r3, r3, #1
 801c654:	3b01      	subs	r3, #1
 801c656:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801c658:	429a      	cmp	r2, r3
 801c65a:	d10f      	bne.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c65c:	68fb      	ldr	r3, [r7, #12]
 801c65e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801c662:	687b      	ldr	r3, [r7, #4]
 801c664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c666:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801c668:	429a      	cmp	r2, r3
 801c66a:	d107      	bne.n	801c67c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801c676:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801c678:	429a      	cmp	r2, r3
 801c67a:	d001      	beq.n	801c680 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801c67c:	2301      	movs	r3, #1
 801c67e:	e000      	b.n	801c682 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801c680:	2300      	movs	r3, #0
}
 801c682:	4618      	mov	r0, r3
 801c684:	3718      	adds	r7, #24
 801c686:	46bd      	mov	sp, r7
 801c688:	bd80      	pop	{r7, pc}
 801c68a:	bf00      	nop
 801c68c:	40023800 	.word	0x40023800

0801c690 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c690:	b580      	push	{r7, lr}
 801c692:	b084      	sub	sp, #16
 801c694:	af00      	add	r7, sp, #0
 801c696:	6078      	str	r0, [r7, #4]
 801c698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801c69a:	2300      	movs	r3, #0
 801c69c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	2b00      	cmp	r3, #0
 801c6a2:	d101      	bne.n	801c6a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801c6a4:	2301      	movs	r3, #1
 801c6a6:	e0d0      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c6a8:	4b6a      	ldr	r3, [pc, #424]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c6aa:	681b      	ldr	r3, [r3, #0]
 801c6ac:	f003 030f 	and.w	r3, r3, #15
 801c6b0:	683a      	ldr	r2, [r7, #0]
 801c6b2:	429a      	cmp	r2, r3
 801c6b4:	d910      	bls.n	801c6d8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c6b6:	4b67      	ldr	r3, [pc, #412]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c6b8:	681b      	ldr	r3, [r3, #0]
 801c6ba:	f023 020f 	bic.w	r2, r3, #15
 801c6be:	4965      	ldr	r1, [pc, #404]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c6c0:	683b      	ldr	r3, [r7, #0]
 801c6c2:	4313      	orrs	r3, r2
 801c6c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c6c6:	4b63      	ldr	r3, [pc, #396]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c6c8:	681b      	ldr	r3, [r3, #0]
 801c6ca:	f003 030f 	and.w	r3, r3, #15
 801c6ce:	683a      	ldr	r2, [r7, #0]
 801c6d0:	429a      	cmp	r2, r3
 801c6d2:	d001      	beq.n	801c6d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801c6d4:	2301      	movs	r3, #1
 801c6d6:	e0b8      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	f003 0302 	and.w	r3, r3, #2
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d020      	beq.n	801c726 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	f003 0304 	and.w	r3, r3, #4
 801c6ec:	2b00      	cmp	r3, #0
 801c6ee:	d005      	beq.n	801c6fc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801c6f0:	4b59      	ldr	r3, [pc, #356]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c6f2:	689b      	ldr	r3, [r3, #8]
 801c6f4:	4a58      	ldr	r2, [pc, #352]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c6f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801c6fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	681b      	ldr	r3, [r3, #0]
 801c700:	f003 0308 	and.w	r3, r3, #8
 801c704:	2b00      	cmp	r3, #0
 801c706:	d005      	beq.n	801c714 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801c708:	4b53      	ldr	r3, [pc, #332]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c70a:	689b      	ldr	r3, [r3, #8]
 801c70c:	4a52      	ldr	r2, [pc, #328]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c70e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801c712:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c714:	4b50      	ldr	r3, [pc, #320]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c716:	689b      	ldr	r3, [r3, #8]
 801c718:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801c71c:	687b      	ldr	r3, [r7, #4]
 801c71e:	689b      	ldr	r3, [r3, #8]
 801c720:	494d      	ldr	r1, [pc, #308]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c722:	4313      	orrs	r3, r2
 801c724:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c726:	687b      	ldr	r3, [r7, #4]
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	f003 0301 	and.w	r3, r3, #1
 801c72e:	2b00      	cmp	r3, #0
 801c730:	d040      	beq.n	801c7b4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	685b      	ldr	r3, [r3, #4]
 801c736:	2b01      	cmp	r3, #1
 801c738:	d107      	bne.n	801c74a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c73a:	4b47      	ldr	r3, [pc, #284]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c73c:	681b      	ldr	r3, [r3, #0]
 801c73e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c742:	2b00      	cmp	r3, #0
 801c744:	d115      	bne.n	801c772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c746:	2301      	movs	r3, #1
 801c748:	e07f      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c74a:	687b      	ldr	r3, [r7, #4]
 801c74c:	685b      	ldr	r3, [r3, #4]
 801c74e:	2b02      	cmp	r3, #2
 801c750:	d107      	bne.n	801c762 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801c752:	4b41      	ldr	r3, [pc, #260]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c754:	681b      	ldr	r3, [r3, #0]
 801c756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801c75a:	2b00      	cmp	r3, #0
 801c75c:	d109      	bne.n	801c772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c75e:	2301      	movs	r3, #1
 801c760:	e073      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c762:	4b3d      	ldr	r3, [pc, #244]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c764:	681b      	ldr	r3, [r3, #0]
 801c766:	f003 0302 	and.w	r3, r3, #2
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d101      	bne.n	801c772 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801c76e:	2301      	movs	r3, #1
 801c770:	e06b      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801c772:	4b39      	ldr	r3, [pc, #228]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c774:	689b      	ldr	r3, [r3, #8]
 801c776:	f023 0203 	bic.w	r2, r3, #3
 801c77a:	687b      	ldr	r3, [r7, #4]
 801c77c:	685b      	ldr	r3, [r3, #4]
 801c77e:	4936      	ldr	r1, [pc, #216]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c780:	4313      	orrs	r3, r2
 801c782:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c784:	f7fc fa54 	bl	8018c30 <HAL_GetTick>
 801c788:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c78a:	e00a      	b.n	801c7a2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c78c:	f7fc fa50 	bl	8018c30 <HAL_GetTick>
 801c790:	4602      	mov	r2, r0
 801c792:	68fb      	ldr	r3, [r7, #12]
 801c794:	1ad3      	subs	r3, r2, r3
 801c796:	f241 3288 	movw	r2, #5000	; 0x1388
 801c79a:	4293      	cmp	r3, r2
 801c79c:	d901      	bls.n	801c7a2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801c79e:	2303      	movs	r3, #3
 801c7a0:	e053      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c7a2:	4b2d      	ldr	r3, [pc, #180]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c7a4:	689b      	ldr	r3, [r3, #8]
 801c7a6:	f003 020c 	and.w	r2, r3, #12
 801c7aa:	687b      	ldr	r3, [r7, #4]
 801c7ac:	685b      	ldr	r3, [r3, #4]
 801c7ae:	009b      	lsls	r3, r3, #2
 801c7b0:	429a      	cmp	r2, r3
 801c7b2:	d1eb      	bne.n	801c78c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c7b4:	4b27      	ldr	r3, [pc, #156]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c7b6:	681b      	ldr	r3, [r3, #0]
 801c7b8:	f003 030f 	and.w	r3, r3, #15
 801c7bc:	683a      	ldr	r2, [r7, #0]
 801c7be:	429a      	cmp	r2, r3
 801c7c0:	d210      	bcs.n	801c7e4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c7c2:	4b24      	ldr	r3, [pc, #144]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c7c4:	681b      	ldr	r3, [r3, #0]
 801c7c6:	f023 020f 	bic.w	r2, r3, #15
 801c7ca:	4922      	ldr	r1, [pc, #136]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c7cc:	683b      	ldr	r3, [r7, #0]
 801c7ce:	4313      	orrs	r3, r2
 801c7d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c7d2:	4b20      	ldr	r3, [pc, #128]	; (801c854 <HAL_RCC_ClockConfig+0x1c4>)
 801c7d4:	681b      	ldr	r3, [r3, #0]
 801c7d6:	f003 030f 	and.w	r3, r3, #15
 801c7da:	683a      	ldr	r2, [r7, #0]
 801c7dc:	429a      	cmp	r2, r3
 801c7de:	d001      	beq.n	801c7e4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801c7e0:	2301      	movs	r3, #1
 801c7e2:	e032      	b.n	801c84a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c7e4:	687b      	ldr	r3, [r7, #4]
 801c7e6:	681b      	ldr	r3, [r3, #0]
 801c7e8:	f003 0304 	and.w	r3, r3, #4
 801c7ec:	2b00      	cmp	r3, #0
 801c7ee:	d008      	beq.n	801c802 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801c7f0:	4b19      	ldr	r3, [pc, #100]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c7f2:	689b      	ldr	r3, [r3, #8]
 801c7f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	68db      	ldr	r3, [r3, #12]
 801c7fc:	4916      	ldr	r1, [pc, #88]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c7fe:	4313      	orrs	r3, r2
 801c800:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c802:	687b      	ldr	r3, [r7, #4]
 801c804:	681b      	ldr	r3, [r3, #0]
 801c806:	f003 0308 	and.w	r3, r3, #8
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d009      	beq.n	801c822 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801c80e:	4b12      	ldr	r3, [pc, #72]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c810:	689b      	ldr	r3, [r3, #8]
 801c812:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801c816:	687b      	ldr	r3, [r7, #4]
 801c818:	691b      	ldr	r3, [r3, #16]
 801c81a:	00db      	lsls	r3, r3, #3
 801c81c:	490e      	ldr	r1, [pc, #56]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c81e:	4313      	orrs	r3, r2
 801c820:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801c822:	f000 f821 	bl	801c868 <HAL_RCC_GetSysClockFreq>
 801c826:	4602      	mov	r2, r0
 801c828:	4b0b      	ldr	r3, [pc, #44]	; (801c858 <HAL_RCC_ClockConfig+0x1c8>)
 801c82a:	689b      	ldr	r3, [r3, #8]
 801c82c:	091b      	lsrs	r3, r3, #4
 801c82e:	f003 030f 	and.w	r3, r3, #15
 801c832:	490a      	ldr	r1, [pc, #40]	; (801c85c <HAL_RCC_ClockConfig+0x1cc>)
 801c834:	5ccb      	ldrb	r3, [r1, r3]
 801c836:	fa22 f303 	lsr.w	r3, r2, r3
 801c83a:	4a09      	ldr	r2, [pc, #36]	; (801c860 <HAL_RCC_ClockConfig+0x1d0>)
 801c83c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801c83e:	4b09      	ldr	r3, [pc, #36]	; (801c864 <HAL_RCC_ClockConfig+0x1d4>)
 801c840:	681b      	ldr	r3, [r3, #0]
 801c842:	4618      	mov	r0, r3
 801c844:	f7fc f9b0 	bl	8018ba8 <HAL_InitTick>

  return HAL_OK;
 801c848:	2300      	movs	r3, #0
}
 801c84a:	4618      	mov	r0, r3
 801c84c:	3710      	adds	r7, #16
 801c84e:	46bd      	mov	sp, r7
 801c850:	bd80      	pop	{r7, pc}
 801c852:	bf00      	nop
 801c854:	40023c00 	.word	0x40023c00
 801c858:	40023800 	.word	0x40023800
 801c85c:	0802cecc 	.word	0x0802cecc
 801c860:	2000031c 	.word	0x2000031c
 801c864:	20000320 	.word	0x20000320

0801c868 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c86c:	b090      	sub	sp, #64	; 0x40
 801c86e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801c870:	2300      	movs	r3, #0
 801c872:	637b      	str	r3, [r7, #52]	; 0x34
 801c874:	2300      	movs	r3, #0
 801c876:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c878:	2300      	movs	r3, #0
 801c87a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801c87c:	2300      	movs	r3, #0
 801c87e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c880:	4b59      	ldr	r3, [pc, #356]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c882:	689b      	ldr	r3, [r3, #8]
 801c884:	f003 030c 	and.w	r3, r3, #12
 801c888:	2b08      	cmp	r3, #8
 801c88a:	d00d      	beq.n	801c8a8 <HAL_RCC_GetSysClockFreq+0x40>
 801c88c:	2b08      	cmp	r3, #8
 801c88e:	f200 80a1 	bhi.w	801c9d4 <HAL_RCC_GetSysClockFreq+0x16c>
 801c892:	2b00      	cmp	r3, #0
 801c894:	d002      	beq.n	801c89c <HAL_RCC_GetSysClockFreq+0x34>
 801c896:	2b04      	cmp	r3, #4
 801c898:	d003      	beq.n	801c8a2 <HAL_RCC_GetSysClockFreq+0x3a>
 801c89a:	e09b      	b.n	801c9d4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801c89c:	4b53      	ldr	r3, [pc, #332]	; (801c9ec <HAL_RCC_GetSysClockFreq+0x184>)
 801c89e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c8a0:	e09b      	b.n	801c9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801c8a2:	4b53      	ldr	r3, [pc, #332]	; (801c9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 801c8a4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c8a6:	e098      	b.n	801c9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801c8a8:	4b4f      	ldr	r3, [pc, #316]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c8aa:	685b      	ldr	r3, [r3, #4]
 801c8ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c8b0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801c8b2:	4b4d      	ldr	r3, [pc, #308]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c8b4:	685b      	ldr	r3, [r3, #4]
 801c8b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d028      	beq.n	801c910 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c8be:	4b4a      	ldr	r3, [pc, #296]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c8c0:	685b      	ldr	r3, [r3, #4]
 801c8c2:	099b      	lsrs	r3, r3, #6
 801c8c4:	2200      	movs	r2, #0
 801c8c6:	623b      	str	r3, [r7, #32]
 801c8c8:	627a      	str	r2, [r7, #36]	; 0x24
 801c8ca:	6a3b      	ldr	r3, [r7, #32]
 801c8cc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801c8d0:	2100      	movs	r1, #0
 801c8d2:	4b47      	ldr	r3, [pc, #284]	; (801c9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 801c8d4:	fb03 f201 	mul.w	r2, r3, r1
 801c8d8:	2300      	movs	r3, #0
 801c8da:	fb00 f303 	mul.w	r3, r0, r3
 801c8de:	4413      	add	r3, r2
 801c8e0:	4a43      	ldr	r2, [pc, #268]	; (801c9f0 <HAL_RCC_GetSysClockFreq+0x188>)
 801c8e2:	fba0 1202 	umull	r1, r2, r0, r2
 801c8e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c8e8:	460a      	mov	r2, r1
 801c8ea:	62ba      	str	r2, [r7, #40]	; 0x28
 801c8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c8ee:	4413      	add	r3, r2
 801c8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c8f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8f4:	2200      	movs	r2, #0
 801c8f6:	61bb      	str	r3, [r7, #24]
 801c8f8:	61fa      	str	r2, [r7, #28]
 801c8fa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801c8fe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801c902:	f7e3 fd05 	bl	8000310 <__aeabi_uldivmod>
 801c906:	4602      	mov	r2, r0
 801c908:	460b      	mov	r3, r1
 801c90a:	4613      	mov	r3, r2
 801c90c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801c90e:	e053      	b.n	801c9b8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801c910:	4b35      	ldr	r3, [pc, #212]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c912:	685b      	ldr	r3, [r3, #4]
 801c914:	099b      	lsrs	r3, r3, #6
 801c916:	2200      	movs	r2, #0
 801c918:	613b      	str	r3, [r7, #16]
 801c91a:	617a      	str	r2, [r7, #20]
 801c91c:	693b      	ldr	r3, [r7, #16]
 801c91e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801c922:	f04f 0b00 	mov.w	fp, #0
 801c926:	4652      	mov	r2, sl
 801c928:	465b      	mov	r3, fp
 801c92a:	f04f 0000 	mov.w	r0, #0
 801c92e:	f04f 0100 	mov.w	r1, #0
 801c932:	0159      	lsls	r1, r3, #5
 801c934:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801c938:	0150      	lsls	r0, r2, #5
 801c93a:	4602      	mov	r2, r0
 801c93c:	460b      	mov	r3, r1
 801c93e:	ebb2 080a 	subs.w	r8, r2, sl
 801c942:	eb63 090b 	sbc.w	r9, r3, fp
 801c946:	f04f 0200 	mov.w	r2, #0
 801c94a:	f04f 0300 	mov.w	r3, #0
 801c94e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801c952:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801c956:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801c95a:	ebb2 0408 	subs.w	r4, r2, r8
 801c95e:	eb63 0509 	sbc.w	r5, r3, r9
 801c962:	f04f 0200 	mov.w	r2, #0
 801c966:	f04f 0300 	mov.w	r3, #0
 801c96a:	00eb      	lsls	r3, r5, #3
 801c96c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801c970:	00e2      	lsls	r2, r4, #3
 801c972:	4614      	mov	r4, r2
 801c974:	461d      	mov	r5, r3
 801c976:	eb14 030a 	adds.w	r3, r4, sl
 801c97a:	603b      	str	r3, [r7, #0]
 801c97c:	eb45 030b 	adc.w	r3, r5, fp
 801c980:	607b      	str	r3, [r7, #4]
 801c982:	f04f 0200 	mov.w	r2, #0
 801c986:	f04f 0300 	mov.w	r3, #0
 801c98a:	e9d7 4500 	ldrd	r4, r5, [r7]
 801c98e:	4629      	mov	r1, r5
 801c990:	028b      	lsls	r3, r1, #10
 801c992:	4621      	mov	r1, r4
 801c994:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801c998:	4621      	mov	r1, r4
 801c99a:	028a      	lsls	r2, r1, #10
 801c99c:	4610      	mov	r0, r2
 801c99e:	4619      	mov	r1, r3
 801c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c9a2:	2200      	movs	r2, #0
 801c9a4:	60bb      	str	r3, [r7, #8]
 801c9a6:	60fa      	str	r2, [r7, #12]
 801c9a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801c9ac:	f7e3 fcb0 	bl	8000310 <__aeabi_uldivmod>
 801c9b0:	4602      	mov	r2, r0
 801c9b2:	460b      	mov	r3, r1
 801c9b4:	4613      	mov	r3, r2
 801c9b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801c9b8:	4b0b      	ldr	r3, [pc, #44]	; (801c9e8 <HAL_RCC_GetSysClockFreq+0x180>)
 801c9ba:	685b      	ldr	r3, [r3, #4]
 801c9bc:	0c1b      	lsrs	r3, r3, #16
 801c9be:	f003 0303 	and.w	r3, r3, #3
 801c9c2:	3301      	adds	r3, #1
 801c9c4:	005b      	lsls	r3, r3, #1
 801c9c6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801c9c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801c9ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c9cc:	fbb2 f3f3 	udiv	r3, r2, r3
 801c9d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c9d2:	e002      	b.n	801c9da <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801c9d4:	4b05      	ldr	r3, [pc, #20]	; (801c9ec <HAL_RCC_GetSysClockFreq+0x184>)
 801c9d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801c9d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 801c9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801c9dc:	4618      	mov	r0, r3
 801c9de:	3740      	adds	r7, #64	; 0x40
 801c9e0:	46bd      	mov	sp, r7
 801c9e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c9e6:	bf00      	nop
 801c9e8:	40023800 	.word	0x40023800
 801c9ec:	00f42400 	.word	0x00f42400
 801c9f0:	00b71b00 	.word	0x00b71b00

0801c9f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c9f4:	b480      	push	{r7}
 801c9f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801c9f8:	4b03      	ldr	r3, [pc, #12]	; (801ca08 <HAL_RCC_GetHCLKFreq+0x14>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
}
 801c9fc:	4618      	mov	r0, r3
 801c9fe:	46bd      	mov	sp, r7
 801ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca04:	4770      	bx	lr
 801ca06:	bf00      	nop
 801ca08:	2000031c 	.word	0x2000031c

0801ca0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801ca0c:	b580      	push	{r7, lr}
 801ca0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801ca10:	f7ff fff0 	bl	801c9f4 <HAL_RCC_GetHCLKFreq>
 801ca14:	4602      	mov	r2, r0
 801ca16:	4b05      	ldr	r3, [pc, #20]	; (801ca2c <HAL_RCC_GetPCLK1Freq+0x20>)
 801ca18:	689b      	ldr	r3, [r3, #8]
 801ca1a:	0a9b      	lsrs	r3, r3, #10
 801ca1c:	f003 0307 	and.w	r3, r3, #7
 801ca20:	4903      	ldr	r1, [pc, #12]	; (801ca30 <HAL_RCC_GetPCLK1Freq+0x24>)
 801ca22:	5ccb      	ldrb	r3, [r1, r3]
 801ca24:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ca28:	4618      	mov	r0, r3
 801ca2a:	bd80      	pop	{r7, pc}
 801ca2c:	40023800 	.word	0x40023800
 801ca30:	0802cedc 	.word	0x0802cedc

0801ca34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ca34:	b580      	push	{r7, lr}
 801ca36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801ca38:	f7ff ffdc 	bl	801c9f4 <HAL_RCC_GetHCLKFreq>
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	4b05      	ldr	r3, [pc, #20]	; (801ca54 <HAL_RCC_GetPCLK2Freq+0x20>)
 801ca40:	689b      	ldr	r3, [r3, #8]
 801ca42:	0b5b      	lsrs	r3, r3, #13
 801ca44:	f003 0307 	and.w	r3, r3, #7
 801ca48:	4903      	ldr	r1, [pc, #12]	; (801ca58 <HAL_RCC_GetPCLK2Freq+0x24>)
 801ca4a:	5ccb      	ldrb	r3, [r1, r3]
 801ca4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 801ca50:	4618      	mov	r0, r3
 801ca52:	bd80      	pop	{r7, pc}
 801ca54:	40023800 	.word	0x40023800
 801ca58:	0802cedc 	.word	0x0802cedc

0801ca5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ca5c:	b580      	push	{r7, lr}
 801ca5e:	b088      	sub	sp, #32
 801ca60:	af00      	add	r7, sp, #0
 801ca62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801ca64:	2300      	movs	r3, #0
 801ca66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801ca68:	2300      	movs	r3, #0
 801ca6a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801ca6c:	2300      	movs	r3, #0
 801ca6e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801ca70:	2300      	movs	r3, #0
 801ca72:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801ca74:	2300      	movs	r3, #0
 801ca76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801ca78:	687b      	ldr	r3, [r7, #4]
 801ca7a:	681b      	ldr	r3, [r3, #0]
 801ca7c:	f003 0301 	and.w	r3, r3, #1
 801ca80:	2b00      	cmp	r3, #0
 801ca82:	d012      	beq.n	801caaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801ca84:	4b69      	ldr	r3, [pc, #420]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ca86:	689b      	ldr	r3, [r3, #8]
 801ca88:	4a68      	ldr	r2, [pc, #416]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ca8a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801ca8e:	6093      	str	r3, [r2, #8]
 801ca90:	4b66      	ldr	r3, [pc, #408]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ca92:	689a      	ldr	r2, [r3, #8]
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ca98:	4964      	ldr	r1, [pc, #400]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801ca9a:	4313      	orrs	r3, r2
 801ca9c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801caa2:	2b00      	cmp	r3, #0
 801caa4:	d101      	bne.n	801caaa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801caa6:	2301      	movs	r3, #1
 801caa8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	681b      	ldr	r3, [r3, #0]
 801caae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d017      	beq.n	801cae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801cab6:	4b5d      	ldr	r3, [pc, #372]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cabc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801cac0:	687b      	ldr	r3, [r7, #4]
 801cac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cac4:	4959      	ldr	r1, [pc, #356]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cac6:	4313      	orrs	r3, r2
 801cac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801cacc:	687b      	ldr	r3, [r7, #4]
 801cace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cad0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cad4:	d101      	bne.n	801cada <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801cad6:	2301      	movs	r3, #1
 801cad8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801cada:	687b      	ldr	r3, [r7, #4]
 801cadc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cade:	2b00      	cmp	r3, #0
 801cae0:	d101      	bne.n	801cae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801cae2:	2301      	movs	r3, #1
 801cae4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	681b      	ldr	r3, [r3, #0]
 801caea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d017      	beq.n	801cb22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801caf2:	4b4e      	ldr	r3, [pc, #312]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801caf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801caf8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cafc:	687b      	ldr	r3, [r7, #4]
 801cafe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb00:	494a      	ldr	r1, [pc, #296]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cb02:	4313      	orrs	r3, r2
 801cb04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cb10:	d101      	bne.n	801cb16 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801cb12:	2301      	movs	r3, #1
 801cb14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801cb16:	687b      	ldr	r3, [r7, #4]
 801cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d101      	bne.n	801cb22 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801cb1e:	2301      	movs	r3, #1
 801cb20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d001      	beq.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801cb2e:	2301      	movs	r3, #1
 801cb30:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	681b      	ldr	r3, [r3, #0]
 801cb36:	f003 0320 	and.w	r3, r3, #32
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f000 808b 	beq.w	801cc56 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801cb40:	4b3a      	ldr	r3, [pc, #232]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb44:	4a39      	ldr	r2, [pc, #228]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cb46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801cb4a:	6413      	str	r3, [r2, #64]	; 0x40
 801cb4c:	4b37      	ldr	r3, [pc, #220]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cb4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cb50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cb54:	60bb      	str	r3, [r7, #8]
 801cb56:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801cb58:	4b35      	ldr	r3, [pc, #212]	; (801cc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	4a34      	ldr	r2, [pc, #208]	; (801cc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801cb5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801cb62:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cb64:	f7fc f864 	bl	8018c30 <HAL_GetTick>
 801cb68:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801cb6a:	e008      	b.n	801cb7e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cb6c:	f7fc f860 	bl	8018c30 <HAL_GetTick>
 801cb70:	4602      	mov	r2, r0
 801cb72:	697b      	ldr	r3, [r7, #20]
 801cb74:	1ad3      	subs	r3, r2, r3
 801cb76:	2b64      	cmp	r3, #100	; 0x64
 801cb78:	d901      	bls.n	801cb7e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801cb7a:	2303      	movs	r3, #3
 801cb7c:	e38f      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801cb7e:	4b2c      	ldr	r3, [pc, #176]	; (801cc30 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801cb80:	681b      	ldr	r3, [r3, #0]
 801cb82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d0f0      	beq.n	801cb6c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801cb8a:	4b28      	ldr	r3, [pc, #160]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cb8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cb92:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801cb94:	693b      	ldr	r3, [r7, #16]
 801cb96:	2b00      	cmp	r3, #0
 801cb98:	d035      	beq.n	801cc06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cb9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cba2:	693a      	ldr	r2, [r7, #16]
 801cba4:	429a      	cmp	r2, r3
 801cba6:	d02e      	beq.n	801cc06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801cba8:	4b20      	ldr	r3, [pc, #128]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801cbb0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801cbb2:	4b1e      	ldr	r3, [pc, #120]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbb6:	4a1d      	ldr	r2, [pc, #116]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801cbbc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801cbbe:	4b1b      	ldr	r3, [pc, #108]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbc2:	4a1a      	ldr	r2, [pc, #104]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801cbc8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801cbca:	4a18      	ldr	r2, [pc, #96]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbcc:	693b      	ldr	r3, [r7, #16]
 801cbce:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801cbd0:	4b16      	ldr	r3, [pc, #88]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbd4:	f003 0301 	and.w	r3, r3, #1
 801cbd8:	2b01      	cmp	r3, #1
 801cbda:	d114      	bne.n	801cc06 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cbdc:	f7fc f828 	bl	8018c30 <HAL_GetTick>
 801cbe0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801cbe2:	e00a      	b.n	801cbfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801cbe4:	f7fc f824 	bl	8018c30 <HAL_GetTick>
 801cbe8:	4602      	mov	r2, r0
 801cbea:	697b      	ldr	r3, [r7, #20]
 801cbec:	1ad3      	subs	r3, r2, r3
 801cbee:	f241 3288 	movw	r2, #5000	; 0x1388
 801cbf2:	4293      	cmp	r3, r2
 801cbf4:	d901      	bls.n	801cbfa <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801cbf6:	2303      	movs	r3, #3
 801cbf8:	e351      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801cbfa:	4b0c      	ldr	r3, [pc, #48]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cbfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbfe:	f003 0302 	and.w	r3, r3, #2
 801cc02:	2b00      	cmp	r3, #0
 801cc04:	d0ee      	beq.n	801cbe4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801cc06:	687b      	ldr	r3, [r7, #4]
 801cc08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801cc0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cc12:	d111      	bne.n	801cc38 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801cc14:	4b05      	ldr	r3, [pc, #20]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cc16:	689b      	ldr	r3, [r3, #8]
 801cc18:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801cc1c:	687b      	ldr	r3, [r7, #4]
 801cc1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801cc20:	4b04      	ldr	r3, [pc, #16]	; (801cc34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801cc22:	400b      	ands	r3, r1
 801cc24:	4901      	ldr	r1, [pc, #4]	; (801cc2c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cc26:	4313      	orrs	r3, r2
 801cc28:	608b      	str	r3, [r1, #8]
 801cc2a:	e00b      	b.n	801cc44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801cc2c:	40023800 	.word	0x40023800
 801cc30:	40007000 	.word	0x40007000
 801cc34:	0ffffcff 	.word	0x0ffffcff
 801cc38:	4bac      	ldr	r3, [pc, #688]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc3a:	689b      	ldr	r3, [r3, #8]
 801cc3c:	4aab      	ldr	r2, [pc, #684]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801cc42:	6093      	str	r3, [r2, #8]
 801cc44:	4ba9      	ldr	r3, [pc, #676]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cc50:	49a6      	ldr	r1, [pc, #664]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc52:	4313      	orrs	r3, r2
 801cc54:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	f003 0310 	and.w	r3, r3, #16
 801cc5e:	2b00      	cmp	r3, #0
 801cc60:	d010      	beq.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cc62:	4ba2      	ldr	r3, [pc, #648]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cc68:	4aa0      	ldr	r2, [pc, #640]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801cc6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801cc72:	4b9e      	ldr	r3, [pc, #632]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc74:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cc7c:	499b      	ldr	r1, [pc, #620]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc7e:	4313      	orrs	r3, r2
 801cc80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801cc8c:	2b00      	cmp	r3, #0
 801cc8e:	d00a      	beq.n	801cca6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801cc90:	4b96      	ldr	r3, [pc, #600]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cc92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cc96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801cc9a:	687b      	ldr	r3, [r7, #4]
 801cc9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801cc9e:	4993      	ldr	r1, [pc, #588]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cca0:	4313      	orrs	r3, r2
 801cca2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801cca6:	687b      	ldr	r3, [r7, #4]
 801cca8:	681b      	ldr	r3, [r3, #0]
 801ccaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801ccae:	2b00      	cmp	r3, #0
 801ccb0:	d00a      	beq.n	801ccc8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801ccb2:	4b8e      	ldr	r3, [pc, #568]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ccb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ccb8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ccc0:	498a      	ldr	r1, [pc, #552]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ccc2:	4313      	orrs	r3, r2
 801ccc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801ccc8:	687b      	ldr	r3, [r7, #4]
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ccd0:	2b00      	cmp	r3, #0
 801ccd2:	d00a      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801ccd4:	4b85      	ldr	r3, [pc, #532]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ccd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ccda:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cce2:	4982      	ldr	r1, [pc, #520]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cce4:	4313      	orrs	r3, r2
 801cce6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ccea:	687b      	ldr	r3, [r7, #4]
 801ccec:	681b      	ldr	r3, [r3, #0]
 801ccee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ccf2:	2b00      	cmp	r3, #0
 801ccf4:	d00a      	beq.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801ccf6:	4b7d      	ldr	r3, [pc, #500]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ccf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ccfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801cd00:	687b      	ldr	r3, [r7, #4]
 801cd02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd04:	4979      	ldr	r1, [pc, #484]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd06:	4313      	orrs	r3, r2
 801cd08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	681b      	ldr	r3, [r3, #0]
 801cd10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd14:	2b00      	cmp	r3, #0
 801cd16:	d00a      	beq.n	801cd2e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801cd18:	4b74      	ldr	r3, [pc, #464]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd1e:	f023 0203 	bic.w	r2, r3, #3
 801cd22:	687b      	ldr	r3, [r7, #4]
 801cd24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cd26:	4971      	ldr	r1, [pc, #452]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd28:	4313      	orrs	r3, r2
 801cd2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801cd36:	2b00      	cmp	r3, #0
 801cd38:	d00a      	beq.n	801cd50 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801cd3a:	4b6c      	ldr	r3, [pc, #432]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd40:	f023 020c 	bic.w	r2, r3, #12
 801cd44:	687b      	ldr	r3, [r7, #4]
 801cd46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd48:	4968      	ldr	r1, [pc, #416]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd4a:	4313      	orrs	r3, r2
 801cd4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	681b      	ldr	r3, [r3, #0]
 801cd54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801cd58:	2b00      	cmp	r3, #0
 801cd5a:	d00a      	beq.n	801cd72 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801cd5c:	4b63      	ldr	r3, [pc, #396]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd62:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd6a:	4960      	ldr	r1, [pc, #384]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd6c:	4313      	orrs	r3, r2
 801cd6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	681b      	ldr	r3, [r3, #0]
 801cd76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801cd7a:	2b00      	cmp	r3, #0
 801cd7c:	d00a      	beq.n	801cd94 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801cd7e:	4b5b      	ldr	r3, [pc, #364]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cd84:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801cd88:	687b      	ldr	r3, [r7, #4]
 801cd8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd8c:	4957      	ldr	r1, [pc, #348]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cd8e:	4313      	orrs	r3, r2
 801cd90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801cd94:	687b      	ldr	r3, [r7, #4]
 801cd96:	681b      	ldr	r3, [r3, #0]
 801cd98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801cd9c:	2b00      	cmp	r3, #0
 801cd9e:	d00a      	beq.n	801cdb6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801cda0:	4b52      	ldr	r3, [pc, #328]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cda2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cda6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801cdaa:	687b      	ldr	r3, [r7, #4]
 801cdac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cdae:	494f      	ldr	r1, [pc, #316]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cdb0:	4313      	orrs	r3, r2
 801cdb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801cdb6:	687b      	ldr	r3, [r7, #4]
 801cdb8:	681b      	ldr	r3, [r3, #0]
 801cdba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	d00a      	beq.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801cdc2:	4b4a      	ldr	r3, [pc, #296]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdc8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801cdcc:	687b      	ldr	r3, [r7, #4]
 801cdce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cdd0:	4946      	ldr	r1, [pc, #280]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cdd2:	4313      	orrs	r3, r2
 801cdd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	681b      	ldr	r3, [r3, #0]
 801cddc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801cde0:	2b00      	cmp	r3, #0
 801cde2:	d00a      	beq.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801cde4:	4b41      	ldr	r3, [pc, #260]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cde6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cdea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801cdee:	687b      	ldr	r3, [r7, #4]
 801cdf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801cdf2:	493e      	ldr	r1, [pc, #248]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cdf4:	4313      	orrs	r3, r2
 801cdf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801cdfa:	687b      	ldr	r3, [r7, #4]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d00a      	beq.n	801ce1c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801ce06:	4b39      	ldr	r3, [pc, #228]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce0c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce14:	4935      	ldr	r1, [pc, #212]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce16:	4313      	orrs	r3, r2
 801ce18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	681b      	ldr	r3, [r3, #0]
 801ce20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d00a      	beq.n	801ce3e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801ce28:	4b30      	ldr	r3, [pc, #192]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce36:	492d      	ldr	r1, [pc, #180]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce38:	4313      	orrs	r3, r2
 801ce3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	d011      	beq.n	801ce6e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801ce4a:	4b28      	ldr	r3, [pc, #160]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce50:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce58:	4924      	ldr	r1, [pc, #144]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce5a:	4313      	orrs	r3, r2
 801ce5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801ce68:	d101      	bne.n	801ce6e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801ce6a:	2301      	movs	r3, #1
 801ce6c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	681b      	ldr	r3, [r3, #0]
 801ce72:	f003 0308 	and.w	r3, r3, #8
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d001      	beq.n	801ce7e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801ce7a:	2301      	movs	r3, #1
 801ce7c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801ce7e:	687b      	ldr	r3, [r7, #4]
 801ce80:	681b      	ldr	r3, [r3, #0]
 801ce82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801ce86:	2b00      	cmp	r3, #0
 801ce88:	d00a      	beq.n	801cea0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801ce8a:	4b18      	ldr	r3, [pc, #96]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ce90:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801ce94:	687b      	ldr	r3, [r7, #4]
 801ce96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ce98:	4914      	ldr	r1, [pc, #80]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ce9a:	4313      	orrs	r3, r2
 801ce9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	681b      	ldr	r3, [r3, #0]
 801cea4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d00b      	beq.n	801cec4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801ceac:	4b0f      	ldr	r3, [pc, #60]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ceae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ceb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cebc:	490b      	ldr	r1, [pc, #44]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cebe:	4313      	orrs	r3, r2
 801cec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d00f      	beq.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801ced0:	4b06      	ldr	r3, [pc, #24]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801ced2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ced6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cee0:	4902      	ldr	r1, [pc, #8]	; (801ceec <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801cee2:	4313      	orrs	r3, r2
 801cee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801cee8:	e002      	b.n	801cef0 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801ceea:	bf00      	nop
 801ceec:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cef0:	687b      	ldr	r3, [r7, #4]
 801cef2:	681b      	ldr	r3, [r3, #0]
 801cef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801cef8:	2b00      	cmp	r3, #0
 801cefa:	d00b      	beq.n	801cf14 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cefc:	4b8a      	ldr	r3, [pc, #552]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cefe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cf02:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801cf06:	687b      	ldr	r3, [r7, #4]
 801cf08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf0c:	4986      	ldr	r1, [pc, #536]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf0e:	4313      	orrs	r3, r2
 801cf10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801cf14:	687b      	ldr	r3, [r7, #4]
 801cf16:	681b      	ldr	r3, [r3, #0]
 801cf18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801cf1c:	2b00      	cmp	r3, #0
 801cf1e:	d00b      	beq.n	801cf38 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801cf20:	4b81      	ldr	r3, [pc, #516]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cf26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801cf30:	497d      	ldr	r1, [pc, #500]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf32:	4313      	orrs	r3, r2
 801cf34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801cf38:	69fb      	ldr	r3, [r7, #28]
 801cf3a:	2b01      	cmp	r3, #1
 801cf3c:	d006      	beq.n	801cf4c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801cf3e:	687b      	ldr	r3, [r7, #4]
 801cf40:	681b      	ldr	r3, [r3, #0]
 801cf42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cf46:	2b00      	cmp	r3, #0
 801cf48:	f000 80d6 	beq.w	801d0f8 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801cf4c:	4b76      	ldr	r3, [pc, #472]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf4e:	681b      	ldr	r3, [r3, #0]
 801cf50:	4a75      	ldr	r2, [pc, #468]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801cf56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cf58:	f7fb fe6a 	bl	8018c30 <HAL_GetTick>
 801cf5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801cf5e:	e008      	b.n	801cf72 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801cf60:	f7fb fe66 	bl	8018c30 <HAL_GetTick>
 801cf64:	4602      	mov	r2, r0
 801cf66:	697b      	ldr	r3, [r7, #20]
 801cf68:	1ad3      	subs	r3, r2, r3
 801cf6a:	2b64      	cmp	r3, #100	; 0x64
 801cf6c:	d901      	bls.n	801cf72 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801cf6e:	2303      	movs	r3, #3
 801cf70:	e195      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801cf72:	4b6d      	ldr	r3, [pc, #436]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d1f0      	bne.n	801cf60 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	681b      	ldr	r3, [r3, #0]
 801cf82:	f003 0301 	and.w	r3, r3, #1
 801cf86:	2b00      	cmp	r3, #0
 801cf88:	d021      	beq.n	801cfce <HAL_RCCEx_PeriphCLKConfig+0x572>
 801cf8a:	687b      	ldr	r3, [r7, #4]
 801cf8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cf8e:	2b00      	cmp	r3, #0
 801cf90:	d11d      	bne.n	801cfce <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801cf92:	4b65      	ldr	r3, [pc, #404]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cf94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cf98:	0c1b      	lsrs	r3, r3, #16
 801cf9a:	f003 0303 	and.w	r3, r3, #3
 801cf9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801cfa0:	4b61      	ldr	r3, [pc, #388]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cfa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cfa6:	0e1b      	lsrs	r3, r3, #24
 801cfa8:	f003 030f 	and.w	r3, r3, #15
 801cfac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801cfae:	687b      	ldr	r3, [r7, #4]
 801cfb0:	685b      	ldr	r3, [r3, #4]
 801cfb2:	019a      	lsls	r2, r3, #6
 801cfb4:	693b      	ldr	r3, [r7, #16]
 801cfb6:	041b      	lsls	r3, r3, #16
 801cfb8:	431a      	orrs	r2, r3
 801cfba:	68fb      	ldr	r3, [r7, #12]
 801cfbc:	061b      	lsls	r3, r3, #24
 801cfbe:	431a      	orrs	r2, r3
 801cfc0:	687b      	ldr	r3, [r7, #4]
 801cfc2:	689b      	ldr	r3, [r3, #8]
 801cfc4:	071b      	lsls	r3, r3, #28
 801cfc6:	4958      	ldr	r1, [pc, #352]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cfc8:	4313      	orrs	r3, r2
 801cfca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801cfce:	687b      	ldr	r3, [r7, #4]
 801cfd0:	681b      	ldr	r3, [r3, #0]
 801cfd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801cfd6:	2b00      	cmp	r3, #0
 801cfd8:	d004      	beq.n	801cfe4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801cfda:	687b      	ldr	r3, [r7, #4]
 801cfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cfde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cfe2:	d00a      	beq.n	801cffa <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	681b      	ldr	r3, [r3, #0]
 801cfe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801cfec:	2b00      	cmp	r3, #0
 801cfee:	d02e      	beq.n	801d04e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801cff0:	687b      	ldr	r3, [r7, #4]
 801cff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801cff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801cff8:	d129      	bne.n	801d04e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801cffa:	4b4b      	ldr	r3, [pc, #300]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801cffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d000:	0c1b      	lsrs	r3, r3, #16
 801d002:	f003 0303 	and.w	r3, r3, #3
 801d006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d008:	4b47      	ldr	r3, [pc, #284]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d00a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d00e:	0f1b      	lsrs	r3, r3, #28
 801d010:	f003 0307 	and.w	r3, r3, #7
 801d014:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	685b      	ldr	r3, [r3, #4]
 801d01a:	019a      	lsls	r2, r3, #6
 801d01c:	693b      	ldr	r3, [r7, #16]
 801d01e:	041b      	lsls	r3, r3, #16
 801d020:	431a      	orrs	r2, r3
 801d022:	687b      	ldr	r3, [r7, #4]
 801d024:	68db      	ldr	r3, [r3, #12]
 801d026:	061b      	lsls	r3, r3, #24
 801d028:	431a      	orrs	r2, r3
 801d02a:	68fb      	ldr	r3, [r7, #12]
 801d02c:	071b      	lsls	r3, r3, #28
 801d02e:	493e      	ldr	r1, [pc, #248]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d030:	4313      	orrs	r3, r2
 801d032:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801d036:	4b3c      	ldr	r3, [pc, #240]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d03c:	f023 021f 	bic.w	r2, r3, #31
 801d040:	687b      	ldr	r3, [r7, #4]
 801d042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d044:	3b01      	subs	r3, #1
 801d046:	4938      	ldr	r1, [pc, #224]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d048:	4313      	orrs	r3, r2
 801d04a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d056:	2b00      	cmp	r3, #0
 801d058:	d01d      	beq.n	801d096 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d05a:	4b33      	ldr	r3, [pc, #204]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d05c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d060:	0e1b      	lsrs	r3, r3, #24
 801d062:	f003 030f 	and.w	r3, r3, #15
 801d066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d068:	4b2f      	ldr	r3, [pc, #188]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d06e:	0f1b      	lsrs	r3, r3, #28
 801d070:	f003 0307 	and.w	r3, r3, #7
 801d074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801d076:	687b      	ldr	r3, [r7, #4]
 801d078:	685b      	ldr	r3, [r3, #4]
 801d07a:	019a      	lsls	r2, r3, #6
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	691b      	ldr	r3, [r3, #16]
 801d080:	041b      	lsls	r3, r3, #16
 801d082:	431a      	orrs	r2, r3
 801d084:	693b      	ldr	r3, [r7, #16]
 801d086:	061b      	lsls	r3, r3, #24
 801d088:	431a      	orrs	r2, r3
 801d08a:	68fb      	ldr	r3, [r7, #12]
 801d08c:	071b      	lsls	r3, r3, #28
 801d08e:	4926      	ldr	r1, [pc, #152]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d090:	4313      	orrs	r3, r2
 801d092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	d011      	beq.n	801d0c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801d0a2:	687b      	ldr	r3, [r7, #4]
 801d0a4:	685b      	ldr	r3, [r3, #4]
 801d0a6:	019a      	lsls	r2, r3, #6
 801d0a8:	687b      	ldr	r3, [r7, #4]
 801d0aa:	691b      	ldr	r3, [r3, #16]
 801d0ac:	041b      	lsls	r3, r3, #16
 801d0ae:	431a      	orrs	r2, r3
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	68db      	ldr	r3, [r3, #12]
 801d0b4:	061b      	lsls	r3, r3, #24
 801d0b6:	431a      	orrs	r2, r3
 801d0b8:	687b      	ldr	r3, [r7, #4]
 801d0ba:	689b      	ldr	r3, [r3, #8]
 801d0bc:	071b      	lsls	r3, r3, #28
 801d0be:	491a      	ldr	r1, [pc, #104]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d0c0:	4313      	orrs	r3, r2
 801d0c2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801d0c6:	4b18      	ldr	r3, [pc, #96]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d0c8:	681b      	ldr	r3, [r3, #0]
 801d0ca:	4a17      	ldr	r2, [pc, #92]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d0cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d0d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d0d2:	f7fb fdad 	bl	8018c30 <HAL_GetTick>
 801d0d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d0d8:	e008      	b.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d0da:	f7fb fda9 	bl	8018c30 <HAL_GetTick>
 801d0de:	4602      	mov	r2, r0
 801d0e0:	697b      	ldr	r3, [r7, #20]
 801d0e2:	1ad3      	subs	r3, r2, r3
 801d0e4:	2b64      	cmp	r3, #100	; 0x64
 801d0e6:	d901      	bls.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d0e8:	2303      	movs	r3, #3
 801d0ea:	e0d8      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d0ec:	4b0e      	ldr	r3, [pc, #56]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d0ee:	681b      	ldr	r3, [r3, #0]
 801d0f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d0f0      	beq.n	801d0da <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801d0f8:	69bb      	ldr	r3, [r7, #24]
 801d0fa:	2b01      	cmp	r3, #1
 801d0fc:	f040 80ce 	bne.w	801d29c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801d100:	4b09      	ldr	r3, [pc, #36]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	4a08      	ldr	r2, [pc, #32]	; (801d128 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d106:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d10a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d10c:	f7fb fd90 	bl	8018c30 <HAL_GetTick>
 801d110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d112:	e00b      	b.n	801d12c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d114:	f7fb fd8c 	bl	8018c30 <HAL_GetTick>
 801d118:	4602      	mov	r2, r0
 801d11a:	697b      	ldr	r3, [r7, #20]
 801d11c:	1ad3      	subs	r3, r2, r3
 801d11e:	2b64      	cmp	r3, #100	; 0x64
 801d120:	d904      	bls.n	801d12c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d122:	2303      	movs	r3, #3
 801d124:	e0bb      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
 801d126:	bf00      	nop
 801d128:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d12c:	4b5e      	ldr	r3, [pc, #376]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d12e:	681b      	ldr	r3, [r3, #0]
 801d130:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d134:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d138:	d0ec      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d13a:	687b      	ldr	r3, [r7, #4]
 801d13c:	681b      	ldr	r3, [r3, #0]
 801d13e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d142:	2b00      	cmp	r3, #0
 801d144:	d003      	beq.n	801d14e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801d146:	687b      	ldr	r3, [r7, #4]
 801d148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d009      	beq.n	801d162 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801d14e:	687b      	ldr	r3, [r7, #4]
 801d150:	681b      	ldr	r3, [r3, #0]
 801d152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d156:	2b00      	cmp	r3, #0
 801d158:	d02e      	beq.n	801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d15e:	2b00      	cmp	r3, #0
 801d160:	d12a      	bne.n	801d1b8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d162:	4b51      	ldr	r3, [pc, #324]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d164:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d168:	0c1b      	lsrs	r3, r3, #16
 801d16a:	f003 0303 	and.w	r3, r3, #3
 801d16e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d170:	4b4d      	ldr	r3, [pc, #308]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d176:	0f1b      	lsrs	r3, r3, #28
 801d178:	f003 0307 	and.w	r3, r3, #7
 801d17c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801d17e:	687b      	ldr	r3, [r7, #4]
 801d180:	695b      	ldr	r3, [r3, #20]
 801d182:	019a      	lsls	r2, r3, #6
 801d184:	693b      	ldr	r3, [r7, #16]
 801d186:	041b      	lsls	r3, r3, #16
 801d188:	431a      	orrs	r2, r3
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	699b      	ldr	r3, [r3, #24]
 801d18e:	061b      	lsls	r3, r3, #24
 801d190:	431a      	orrs	r2, r3
 801d192:	68fb      	ldr	r3, [r7, #12]
 801d194:	071b      	lsls	r3, r3, #28
 801d196:	4944      	ldr	r1, [pc, #272]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d198:	4313      	orrs	r3, r2
 801d19a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801d19e:	4b42      	ldr	r3, [pc, #264]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d1a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d1a4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d1ac:	3b01      	subs	r3, #1
 801d1ae:	021b      	lsls	r3, r3, #8
 801d1b0:	493d      	ldr	r1, [pc, #244]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d1b2:	4313      	orrs	r3, r2
 801d1b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801d1b8:	687b      	ldr	r3, [r7, #4]
 801d1ba:	681b      	ldr	r3, [r3, #0]
 801d1bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d022      	beq.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801d1c4:	687b      	ldr	r3, [r7, #4]
 801d1c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d1c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d1cc:	d11d      	bne.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d1ce:	4b36      	ldr	r3, [pc, #216]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d1d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1d4:	0e1b      	lsrs	r3, r3, #24
 801d1d6:	f003 030f 	and.w	r3, r3, #15
 801d1da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d1dc:	4b32      	ldr	r3, [pc, #200]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d1de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1e2:	0f1b      	lsrs	r3, r3, #28
 801d1e4:	f003 0307 	and.w	r3, r3, #7
 801d1e8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801d1ea:	687b      	ldr	r3, [r7, #4]
 801d1ec:	695b      	ldr	r3, [r3, #20]
 801d1ee:	019a      	lsls	r2, r3, #6
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	6a1b      	ldr	r3, [r3, #32]
 801d1f4:	041b      	lsls	r3, r3, #16
 801d1f6:	431a      	orrs	r2, r3
 801d1f8:	693b      	ldr	r3, [r7, #16]
 801d1fa:	061b      	lsls	r3, r3, #24
 801d1fc:	431a      	orrs	r2, r3
 801d1fe:	68fb      	ldr	r3, [r7, #12]
 801d200:	071b      	lsls	r3, r3, #28
 801d202:	4929      	ldr	r1, [pc, #164]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d204:	4313      	orrs	r3, r2
 801d206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	f003 0308 	and.w	r3, r3, #8
 801d212:	2b00      	cmp	r3, #0
 801d214:	d028      	beq.n	801d268 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d216:	4b24      	ldr	r3, [pc, #144]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d21c:	0e1b      	lsrs	r3, r3, #24
 801d21e:	f003 030f 	and.w	r3, r3, #15
 801d222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d224:	4b20      	ldr	r3, [pc, #128]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d22a:	0c1b      	lsrs	r3, r3, #16
 801d22c:	f003 0303 	and.w	r3, r3, #3
 801d230:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801d232:	687b      	ldr	r3, [r7, #4]
 801d234:	695b      	ldr	r3, [r3, #20]
 801d236:	019a      	lsls	r2, r3, #6
 801d238:	68fb      	ldr	r3, [r7, #12]
 801d23a:	041b      	lsls	r3, r3, #16
 801d23c:	431a      	orrs	r2, r3
 801d23e:	693b      	ldr	r3, [r7, #16]
 801d240:	061b      	lsls	r3, r3, #24
 801d242:	431a      	orrs	r2, r3
 801d244:	687b      	ldr	r3, [r7, #4]
 801d246:	69db      	ldr	r3, [r3, #28]
 801d248:	071b      	lsls	r3, r3, #28
 801d24a:	4917      	ldr	r1, [pc, #92]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d24c:	4313      	orrs	r3, r2
 801d24e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801d252:	4b15      	ldr	r3, [pc, #84]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d258:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d260:	4911      	ldr	r1, [pc, #68]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d262:	4313      	orrs	r3, r2
 801d264:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801d268:	4b0f      	ldr	r3, [pc, #60]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d26a:	681b      	ldr	r3, [r3, #0]
 801d26c:	4a0e      	ldr	r2, [pc, #56]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d26e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d272:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d274:	f7fb fcdc 	bl	8018c30 <HAL_GetTick>
 801d278:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d27a:	e008      	b.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d27c:	f7fb fcd8 	bl	8018c30 <HAL_GetTick>
 801d280:	4602      	mov	r2, r0
 801d282:	697b      	ldr	r3, [r7, #20]
 801d284:	1ad3      	subs	r3, r2, r3
 801d286:	2b64      	cmp	r3, #100	; 0x64
 801d288:	d901      	bls.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d28a:	2303      	movs	r3, #3
 801d28c:	e007      	b.n	801d29e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d28e:	4b06      	ldr	r3, [pc, #24]	; (801d2a8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d290:	681b      	ldr	r3, [r3, #0]
 801d292:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d296:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d29a:	d1ef      	bne.n	801d27c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801d29c:	2300      	movs	r3, #0
}
 801d29e:	4618      	mov	r0, r3
 801d2a0:	3720      	adds	r7, #32
 801d2a2:	46bd      	mov	sp, r7
 801d2a4:	bd80      	pop	{r7, pc}
 801d2a6:	bf00      	nop
 801d2a8:	40023800 	.word	0x40023800

0801d2ac <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801d2ac:	b580      	push	{r7, lr}
 801d2ae:	b082      	sub	sp, #8
 801d2b0:	af00      	add	r7, sp, #0
 801d2b2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	2b00      	cmp	r3, #0
 801d2b8:	d101      	bne.n	801d2be <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801d2ba:	2301      	movs	r3, #1
 801d2bc:	e01c      	b.n	801d2f8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801d2be:	687b      	ldr	r3, [r7, #4]
 801d2c0:	795b      	ldrb	r3, [r3, #5]
 801d2c2:	b2db      	uxtb	r3, r3
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d105      	bne.n	801d2d4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801d2c8:	687b      	ldr	r3, [r7, #4]
 801d2ca:	2200      	movs	r2, #0
 801d2cc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801d2ce:	6878      	ldr	r0, [r7, #4]
 801d2d0:	f7f9 fece 	bl	8017070 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801d2d4:	687b      	ldr	r3, [r7, #4]
 801d2d6:	2202      	movs	r2, #2
 801d2d8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801d2da:	687b      	ldr	r3, [r7, #4]
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	681a      	ldr	r2, [r3, #0]
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	681b      	ldr	r3, [r3, #0]
 801d2e4:	f042 0204 	orr.w	r2, r2, #4
 801d2e8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	2201      	movs	r2, #1
 801d2ee:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	2200      	movs	r2, #0
 801d2f4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801d2f6:	2300      	movs	r3, #0
}
 801d2f8:	4618      	mov	r0, r3
 801d2fa:	3708      	adds	r7, #8
 801d2fc:	46bd      	mov	sp, r7
 801d2fe:	bd80      	pop	{r7, pc}

0801d300 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801d300:	b580      	push	{r7, lr}
 801d302:	b084      	sub	sp, #16
 801d304:	af00      	add	r7, sp, #0
 801d306:	6078      	str	r0, [r7, #4]
 801d308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d30a:	2300      	movs	r3, #0
 801d30c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	791b      	ldrb	r3, [r3, #4]
 801d312:	2b01      	cmp	r3, #1
 801d314:	d101      	bne.n	801d31a <HAL_RNG_GenerateRandomNumber+0x1a>
 801d316:	2302      	movs	r3, #2
 801d318:	e044      	b.n	801d3a4 <HAL_RNG_GenerateRandomNumber+0xa4>
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	2201      	movs	r2, #1
 801d31e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801d320:	687b      	ldr	r3, [r7, #4]
 801d322:	795b      	ldrb	r3, [r3, #5]
 801d324:	b2db      	uxtb	r3, r3
 801d326:	2b01      	cmp	r3, #1
 801d328:	d133      	bne.n	801d392 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801d32a:	687b      	ldr	r3, [r7, #4]
 801d32c:	2202      	movs	r2, #2
 801d32e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801d330:	f7fb fc7e 	bl	8018c30 <HAL_GetTick>
 801d334:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d336:	e018      	b.n	801d36a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801d338:	f7fb fc7a 	bl	8018c30 <HAL_GetTick>
 801d33c:	4602      	mov	r2, r0
 801d33e:	68bb      	ldr	r3, [r7, #8]
 801d340:	1ad3      	subs	r3, r2, r3
 801d342:	2b02      	cmp	r3, #2
 801d344:	d911      	bls.n	801d36a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	681b      	ldr	r3, [r3, #0]
 801d34a:	685b      	ldr	r3, [r3, #4]
 801d34c:	f003 0301 	and.w	r3, r3, #1
 801d350:	2b01      	cmp	r3, #1
 801d352:	d00a      	beq.n	801d36a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801d354:	687b      	ldr	r3, [r7, #4]
 801d356:	2201      	movs	r2, #1
 801d358:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	2202      	movs	r2, #2
 801d35e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801d360:	687b      	ldr	r3, [r7, #4]
 801d362:	2200      	movs	r2, #0
 801d364:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801d366:	2301      	movs	r3, #1
 801d368:	e01c      	b.n	801d3a4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d36a:	687b      	ldr	r3, [r7, #4]
 801d36c:	681b      	ldr	r3, [r3, #0]
 801d36e:	685b      	ldr	r3, [r3, #4]
 801d370:	f003 0301 	and.w	r3, r3, #1
 801d374:	2b01      	cmp	r3, #1
 801d376:	d1df      	bne.n	801d338 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	681b      	ldr	r3, [r3, #0]
 801d37c:	689a      	ldr	r2, [r3, #8]
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801d382:	687b      	ldr	r3, [r7, #4]
 801d384:	68da      	ldr	r2, [r3, #12]
 801d386:	683b      	ldr	r3, [r7, #0]
 801d388:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801d38a:	687b      	ldr	r3, [r7, #4]
 801d38c:	2201      	movs	r2, #1
 801d38e:	715a      	strb	r2, [r3, #5]
 801d390:	e004      	b.n	801d39c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801d392:	687b      	ldr	r3, [r7, #4]
 801d394:	2204      	movs	r2, #4
 801d396:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801d398:	2301      	movs	r3, #1
 801d39a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801d39c:	687b      	ldr	r3, [r7, #4]
 801d39e:	2200      	movs	r2, #0
 801d3a0:	711a      	strb	r2, [r3, #4]

  return status;
 801d3a2:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3a4:	4618      	mov	r0, r3
 801d3a6:	3710      	adds	r7, #16
 801d3a8:	46bd      	mov	sp, r7
 801d3aa:	bd80      	pop	{r7, pc}

0801d3ac <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801d3ac:	b580      	push	{r7, lr}
 801d3ae:	b082      	sub	sp, #8
 801d3b0:	af00      	add	r7, sp, #0
 801d3b2:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801d3b4:	687b      	ldr	r3, [r7, #4]
 801d3b6:	330c      	adds	r3, #12
 801d3b8:	4619      	mov	r1, r3
 801d3ba:	6878      	ldr	r0, [r7, #4]
 801d3bc:	f7ff ffa0 	bl	801d300 <HAL_RNG_GenerateRandomNumber>
 801d3c0:	4603      	mov	r3, r0
 801d3c2:	2b00      	cmp	r3, #0
 801d3c4:	d102      	bne.n	801d3cc <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	68db      	ldr	r3, [r3, #12]
 801d3ca:	e000      	b.n	801d3ce <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801d3cc:	2300      	movs	r3, #0
  }
}
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	3708      	adds	r7, #8
 801d3d2:	46bd      	mov	sp, r7
 801d3d4:	bd80      	pop	{r7, pc}

0801d3d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d3d6:	b580      	push	{r7, lr}
 801d3d8:	b084      	sub	sp, #16
 801d3da:	af00      	add	r7, sp, #0
 801d3dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d3de:	687b      	ldr	r3, [r7, #4]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d101      	bne.n	801d3e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d3e4:	2301      	movs	r3, #1
 801d3e6:	e09d      	b.n	801d524 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d3e8:	687b      	ldr	r3, [r7, #4]
 801d3ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d108      	bne.n	801d402 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d3f0:	687b      	ldr	r3, [r7, #4]
 801d3f2:	685b      	ldr	r3, [r3, #4]
 801d3f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d3f8:	d009      	beq.n	801d40e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d3fa:	687b      	ldr	r3, [r7, #4]
 801d3fc:	2200      	movs	r2, #0
 801d3fe:	61da      	str	r2, [r3, #28]
 801d400:	e005      	b.n	801d40e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	2200      	movs	r2, #0
 801d406:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d408:	687b      	ldr	r3, [r7, #4]
 801d40a:	2200      	movs	r2, #0
 801d40c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d40e:	687b      	ldr	r3, [r7, #4]
 801d410:	2200      	movs	r2, #0
 801d412:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d41a:	b2db      	uxtb	r3, r3
 801d41c:	2b00      	cmp	r3, #0
 801d41e:	d106      	bne.n	801d42e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d420:	687b      	ldr	r3, [r7, #4]
 801d422:	2200      	movs	r2, #0
 801d424:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d428:	6878      	ldr	r0, [r7, #4]
 801d42a:	f7f9 fea9 	bl	8017180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d42e:	687b      	ldr	r3, [r7, #4]
 801d430:	2202      	movs	r2, #2
 801d432:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d436:	687b      	ldr	r3, [r7, #4]
 801d438:	681b      	ldr	r3, [r3, #0]
 801d43a:	681a      	ldr	r2, [r3, #0]
 801d43c:	687b      	ldr	r3, [r7, #4]
 801d43e:	681b      	ldr	r3, [r3, #0]
 801d440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d444:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d446:	687b      	ldr	r3, [r7, #4]
 801d448:	68db      	ldr	r3, [r3, #12]
 801d44a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d44e:	d902      	bls.n	801d456 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d450:	2300      	movs	r3, #0
 801d452:	60fb      	str	r3, [r7, #12]
 801d454:	e002      	b.n	801d45c <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d456:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d45a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d45c:	687b      	ldr	r3, [r7, #4]
 801d45e:	68db      	ldr	r3, [r3, #12]
 801d460:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d464:	d007      	beq.n	801d476 <HAL_SPI_Init+0xa0>
 801d466:	687b      	ldr	r3, [r7, #4]
 801d468:	68db      	ldr	r3, [r3, #12]
 801d46a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d46e:	d002      	beq.n	801d476 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	2200      	movs	r2, #0
 801d474:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d476:	687b      	ldr	r3, [r7, #4]
 801d478:	685b      	ldr	r3, [r3, #4]
 801d47a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d47e:	687b      	ldr	r3, [r7, #4]
 801d480:	689b      	ldr	r3, [r3, #8]
 801d482:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d486:	431a      	orrs	r2, r3
 801d488:	687b      	ldr	r3, [r7, #4]
 801d48a:	691b      	ldr	r3, [r3, #16]
 801d48c:	f003 0302 	and.w	r3, r3, #2
 801d490:	431a      	orrs	r2, r3
 801d492:	687b      	ldr	r3, [r7, #4]
 801d494:	695b      	ldr	r3, [r3, #20]
 801d496:	f003 0301 	and.w	r3, r3, #1
 801d49a:	431a      	orrs	r2, r3
 801d49c:	687b      	ldr	r3, [r7, #4]
 801d49e:	699b      	ldr	r3, [r3, #24]
 801d4a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d4a4:	431a      	orrs	r2, r3
 801d4a6:	687b      	ldr	r3, [r7, #4]
 801d4a8:	69db      	ldr	r3, [r3, #28]
 801d4aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801d4ae:	431a      	orrs	r2, r3
 801d4b0:	687b      	ldr	r3, [r7, #4]
 801d4b2:	6a1b      	ldr	r3, [r3, #32]
 801d4b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d4b8:	ea42 0103 	orr.w	r1, r2, r3
 801d4bc:	687b      	ldr	r3, [r7, #4]
 801d4be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d4c0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	681b      	ldr	r3, [r3, #0]
 801d4c8:	430a      	orrs	r2, r1
 801d4ca:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801d4cc:	687b      	ldr	r3, [r7, #4]
 801d4ce:	699b      	ldr	r3, [r3, #24]
 801d4d0:	0c1b      	lsrs	r3, r3, #16
 801d4d2:	f003 0204 	and.w	r2, r3, #4
 801d4d6:	687b      	ldr	r3, [r7, #4]
 801d4d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d4da:	f003 0310 	and.w	r3, r3, #16
 801d4de:	431a      	orrs	r2, r3
 801d4e0:	687b      	ldr	r3, [r7, #4]
 801d4e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4e4:	f003 0308 	and.w	r3, r3, #8
 801d4e8:	431a      	orrs	r2, r3
 801d4ea:	687b      	ldr	r3, [r7, #4]
 801d4ec:	68db      	ldr	r3, [r3, #12]
 801d4ee:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801d4f2:	ea42 0103 	orr.w	r1, r2, r3
 801d4f6:	68fb      	ldr	r3, [r7, #12]
 801d4f8:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801d4fc:	687b      	ldr	r3, [r7, #4]
 801d4fe:	681b      	ldr	r3, [r3, #0]
 801d500:	430a      	orrs	r2, r1
 801d502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801d504:	687b      	ldr	r3, [r7, #4]
 801d506:	681b      	ldr	r3, [r3, #0]
 801d508:	69da      	ldr	r2, [r3, #28]
 801d50a:	687b      	ldr	r3, [r7, #4]
 801d50c:	681b      	ldr	r3, [r3, #0]
 801d50e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801d512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	2200      	movs	r2, #0
 801d518:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801d51a:	687b      	ldr	r3, [r7, #4]
 801d51c:	2201      	movs	r2, #1
 801d51e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801d522:	2300      	movs	r3, #0
}
 801d524:	4618      	mov	r0, r3
 801d526:	3710      	adds	r7, #16
 801d528:	46bd      	mov	sp, r7
 801d52a:	bd80      	pop	{r7, pc}

0801d52c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	b088      	sub	sp, #32
 801d530:	af00      	add	r7, sp, #0
 801d532:	60f8      	str	r0, [r7, #12]
 801d534:	60b9      	str	r1, [r7, #8]
 801d536:	603b      	str	r3, [r7, #0]
 801d538:	4613      	mov	r3, r2
 801d53a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d53c:	2300      	movs	r3, #0
 801d53e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d540:	68fb      	ldr	r3, [r7, #12]
 801d542:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d546:	2b01      	cmp	r3, #1
 801d548:	d101      	bne.n	801d54e <HAL_SPI_Transmit+0x22>
 801d54a:	2302      	movs	r3, #2
 801d54c:	e158      	b.n	801d800 <HAL_SPI_Transmit+0x2d4>
 801d54e:	68fb      	ldr	r3, [r7, #12]
 801d550:	2201      	movs	r2, #1
 801d552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d556:	f7fb fb6b 	bl	8018c30 <HAL_GetTick>
 801d55a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801d55c:	88fb      	ldrh	r3, [r7, #6]
 801d55e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d560:	68fb      	ldr	r3, [r7, #12]
 801d562:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d566:	b2db      	uxtb	r3, r3
 801d568:	2b01      	cmp	r3, #1
 801d56a:	d002      	beq.n	801d572 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801d56c:	2302      	movs	r3, #2
 801d56e:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d570:	e13d      	b.n	801d7ee <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801d572:	68bb      	ldr	r3, [r7, #8]
 801d574:	2b00      	cmp	r3, #0
 801d576:	d002      	beq.n	801d57e <HAL_SPI_Transmit+0x52>
 801d578:	88fb      	ldrh	r3, [r7, #6]
 801d57a:	2b00      	cmp	r3, #0
 801d57c:	d102      	bne.n	801d584 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801d57e:	2301      	movs	r3, #1
 801d580:	77fb      	strb	r3, [r7, #31]
    goto error;
 801d582:	e134      	b.n	801d7ee <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801d584:	68fb      	ldr	r3, [r7, #12]
 801d586:	2203      	movs	r2, #3
 801d588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d58c:	68fb      	ldr	r3, [r7, #12]
 801d58e:	2200      	movs	r2, #0
 801d590:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801d592:	68fb      	ldr	r3, [r7, #12]
 801d594:	68ba      	ldr	r2, [r7, #8]
 801d596:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801d598:	68fb      	ldr	r3, [r7, #12]
 801d59a:	88fa      	ldrh	r2, [r7, #6]
 801d59c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801d59e:	68fb      	ldr	r3, [r7, #12]
 801d5a0:	88fa      	ldrh	r2, [r7, #6]
 801d5a2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801d5a4:	68fb      	ldr	r3, [r7, #12]
 801d5a6:	2200      	movs	r2, #0
 801d5a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	2200      	movs	r2, #0
 801d5ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801d5b2:	68fb      	ldr	r3, [r7, #12]
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801d5ba:	68fb      	ldr	r3, [r7, #12]
 801d5bc:	2200      	movs	r2, #0
 801d5be:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801d5c0:	68fb      	ldr	r3, [r7, #12]
 801d5c2:	2200      	movs	r2, #0
 801d5c4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d5c6:	68fb      	ldr	r3, [r7, #12]
 801d5c8:	689b      	ldr	r3, [r3, #8]
 801d5ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d5ce:	d10f      	bne.n	801d5f0 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d5d0:	68fb      	ldr	r3, [r7, #12]
 801d5d2:	681b      	ldr	r3, [r3, #0]
 801d5d4:	681a      	ldr	r2, [r3, #0]
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d5de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801d5e0:	68fb      	ldr	r3, [r7, #12]
 801d5e2:	681b      	ldr	r3, [r3, #0]
 801d5e4:	681a      	ldr	r2, [r3, #0]
 801d5e6:	68fb      	ldr	r3, [r7, #12]
 801d5e8:	681b      	ldr	r3, [r3, #0]
 801d5ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801d5ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d5f0:	68fb      	ldr	r3, [r7, #12]
 801d5f2:	681b      	ldr	r3, [r3, #0]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d5fa:	2b40      	cmp	r3, #64	; 0x40
 801d5fc:	d007      	beq.n	801d60e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d5fe:	68fb      	ldr	r3, [r7, #12]
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	681a      	ldr	r2, [r3, #0]
 801d604:	68fb      	ldr	r3, [r7, #12]
 801d606:	681b      	ldr	r3, [r3, #0]
 801d608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d60c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d60e:	68fb      	ldr	r3, [r7, #12]
 801d610:	68db      	ldr	r3, [r3, #12]
 801d612:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d616:	d94b      	bls.n	801d6b0 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d618:	68fb      	ldr	r3, [r7, #12]
 801d61a:	685b      	ldr	r3, [r3, #4]
 801d61c:	2b00      	cmp	r3, #0
 801d61e:	d002      	beq.n	801d626 <HAL_SPI_Transmit+0xfa>
 801d620:	8afb      	ldrh	r3, [r7, #22]
 801d622:	2b01      	cmp	r3, #1
 801d624:	d13e      	bne.n	801d6a4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d626:	68fb      	ldr	r3, [r7, #12]
 801d628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d62a:	881a      	ldrh	r2, [r3, #0]
 801d62c:	68fb      	ldr	r3, [r7, #12]
 801d62e:	681b      	ldr	r3, [r3, #0]
 801d630:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801d632:	68fb      	ldr	r3, [r7, #12]
 801d634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d636:	1c9a      	adds	r2, r3, #2
 801d638:	68fb      	ldr	r3, [r7, #12]
 801d63a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801d63c:	68fb      	ldr	r3, [r7, #12]
 801d63e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d640:	b29b      	uxth	r3, r3
 801d642:	3b01      	subs	r3, #1
 801d644:	b29a      	uxth	r2, r3
 801d646:	68fb      	ldr	r3, [r7, #12]
 801d648:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801d64a:	e02b      	b.n	801d6a4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d64c:	68fb      	ldr	r3, [r7, #12]
 801d64e:	681b      	ldr	r3, [r3, #0]
 801d650:	689b      	ldr	r3, [r3, #8]
 801d652:	f003 0302 	and.w	r3, r3, #2
 801d656:	2b02      	cmp	r3, #2
 801d658:	d112      	bne.n	801d680 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d65a:	68fb      	ldr	r3, [r7, #12]
 801d65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d65e:	881a      	ldrh	r2, [r3, #0]
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	681b      	ldr	r3, [r3, #0]
 801d664:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d666:	68fb      	ldr	r3, [r7, #12]
 801d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d66a:	1c9a      	adds	r2, r3, #2
 801d66c:	68fb      	ldr	r3, [r7, #12]
 801d66e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d670:	68fb      	ldr	r3, [r7, #12]
 801d672:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d674:	b29b      	uxth	r3, r3
 801d676:	3b01      	subs	r3, #1
 801d678:	b29a      	uxth	r2, r3
 801d67a:	68fb      	ldr	r3, [r7, #12]
 801d67c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d67e:	e011      	b.n	801d6a4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d680:	f7fb fad6 	bl	8018c30 <HAL_GetTick>
 801d684:	4602      	mov	r2, r0
 801d686:	69bb      	ldr	r3, [r7, #24]
 801d688:	1ad3      	subs	r3, r2, r3
 801d68a:	683a      	ldr	r2, [r7, #0]
 801d68c:	429a      	cmp	r2, r3
 801d68e:	d803      	bhi.n	801d698 <HAL_SPI_Transmit+0x16c>
 801d690:	683b      	ldr	r3, [r7, #0]
 801d692:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d696:	d102      	bne.n	801d69e <HAL_SPI_Transmit+0x172>
 801d698:	683b      	ldr	r3, [r7, #0]
 801d69a:	2b00      	cmp	r3, #0
 801d69c:	d102      	bne.n	801d6a4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801d69e:	2303      	movs	r3, #3
 801d6a0:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d6a2:	e0a4      	b.n	801d7ee <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d6a4:	68fb      	ldr	r3, [r7, #12]
 801d6a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6a8:	b29b      	uxth	r3, r3
 801d6aa:	2b00      	cmp	r3, #0
 801d6ac:	d1ce      	bne.n	801d64c <HAL_SPI_Transmit+0x120>
 801d6ae:	e07c      	b.n	801d7aa <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801d6b0:	68fb      	ldr	r3, [r7, #12]
 801d6b2:	685b      	ldr	r3, [r3, #4]
 801d6b4:	2b00      	cmp	r3, #0
 801d6b6:	d002      	beq.n	801d6be <HAL_SPI_Transmit+0x192>
 801d6b8:	8afb      	ldrh	r3, [r7, #22]
 801d6ba:	2b01      	cmp	r3, #1
 801d6bc:	d170      	bne.n	801d7a0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801d6be:	68fb      	ldr	r3, [r7, #12]
 801d6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6c2:	b29b      	uxth	r3, r3
 801d6c4:	2b01      	cmp	r3, #1
 801d6c6:	d912      	bls.n	801d6ee <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d6c8:	68fb      	ldr	r3, [r7, #12]
 801d6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6cc:	881a      	ldrh	r2, [r3, #0]
 801d6ce:	68fb      	ldr	r3, [r7, #12]
 801d6d0:	681b      	ldr	r3, [r3, #0]
 801d6d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801d6d4:	68fb      	ldr	r3, [r7, #12]
 801d6d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6d8:	1c9a      	adds	r2, r3, #2
 801d6da:	68fb      	ldr	r3, [r7, #12]
 801d6dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801d6de:	68fb      	ldr	r3, [r7, #12]
 801d6e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d6e2:	b29b      	uxth	r3, r3
 801d6e4:	3b02      	subs	r3, #2
 801d6e6:	b29a      	uxth	r2, r3
 801d6e8:	68fb      	ldr	r3, [r7, #12]
 801d6ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d6ec:	e058      	b.n	801d7a0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d6ee:	68fb      	ldr	r3, [r7, #12]
 801d6f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d6f2:	68fb      	ldr	r3, [r7, #12]
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	330c      	adds	r3, #12
 801d6f8:	7812      	ldrb	r2, [r2, #0]
 801d6fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801d6fc:	68fb      	ldr	r3, [r7, #12]
 801d6fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d700:	1c5a      	adds	r2, r3, #1
 801d702:	68fb      	ldr	r3, [r7, #12]
 801d704:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801d706:	68fb      	ldr	r3, [r7, #12]
 801d708:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d70a:	b29b      	uxth	r3, r3
 801d70c:	3b01      	subs	r3, #1
 801d70e:	b29a      	uxth	r2, r3
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801d714:	e044      	b.n	801d7a0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801d716:	68fb      	ldr	r3, [r7, #12]
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	689b      	ldr	r3, [r3, #8]
 801d71c:	f003 0302 	and.w	r3, r3, #2
 801d720:	2b02      	cmp	r3, #2
 801d722:	d12b      	bne.n	801d77c <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d728:	b29b      	uxth	r3, r3
 801d72a:	2b01      	cmp	r3, #1
 801d72c:	d912      	bls.n	801d754 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801d72e:	68fb      	ldr	r3, [r7, #12]
 801d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d732:	881a      	ldrh	r2, [r3, #0]
 801d734:	68fb      	ldr	r3, [r7, #12]
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801d73a:	68fb      	ldr	r3, [r7, #12]
 801d73c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d73e:	1c9a      	adds	r2, r3, #2
 801d740:	68fb      	ldr	r3, [r7, #12]
 801d742:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d748:	b29b      	uxth	r3, r3
 801d74a:	3b02      	subs	r3, #2
 801d74c:	b29a      	uxth	r2, r3
 801d74e:	68fb      	ldr	r3, [r7, #12]
 801d750:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d752:	e025      	b.n	801d7a0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801d754:	68fb      	ldr	r3, [r7, #12]
 801d756:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d758:	68fb      	ldr	r3, [r7, #12]
 801d75a:	681b      	ldr	r3, [r3, #0]
 801d75c:	330c      	adds	r3, #12
 801d75e:	7812      	ldrb	r2, [r2, #0]
 801d760:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d766:	1c5a      	adds	r2, r3, #1
 801d768:	68fb      	ldr	r3, [r7, #12]
 801d76a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801d76c:	68fb      	ldr	r3, [r7, #12]
 801d76e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d770:	b29b      	uxth	r3, r3
 801d772:	3b01      	subs	r3, #1
 801d774:	b29a      	uxth	r2, r3
 801d776:	68fb      	ldr	r3, [r7, #12]
 801d778:	87da      	strh	r2, [r3, #62]	; 0x3e
 801d77a:	e011      	b.n	801d7a0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d77c:	f7fb fa58 	bl	8018c30 <HAL_GetTick>
 801d780:	4602      	mov	r2, r0
 801d782:	69bb      	ldr	r3, [r7, #24]
 801d784:	1ad3      	subs	r3, r2, r3
 801d786:	683a      	ldr	r2, [r7, #0]
 801d788:	429a      	cmp	r2, r3
 801d78a:	d803      	bhi.n	801d794 <HAL_SPI_Transmit+0x268>
 801d78c:	683b      	ldr	r3, [r7, #0]
 801d78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d792:	d102      	bne.n	801d79a <HAL_SPI_Transmit+0x26e>
 801d794:	683b      	ldr	r3, [r7, #0]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d102      	bne.n	801d7a0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801d79a:	2303      	movs	r3, #3
 801d79c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801d79e:	e026      	b.n	801d7ee <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801d7a0:	68fb      	ldr	r3, [r7, #12]
 801d7a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801d7a4:	b29b      	uxth	r3, r3
 801d7a6:	2b00      	cmp	r3, #0
 801d7a8:	d1b5      	bne.n	801d716 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801d7aa:	69ba      	ldr	r2, [r7, #24]
 801d7ac:	6839      	ldr	r1, [r7, #0]
 801d7ae:	68f8      	ldr	r0, [r7, #12]
 801d7b0:	f000 fd08 	bl	801e1c4 <SPI_EndRxTxTransaction>
 801d7b4:	4603      	mov	r3, r0
 801d7b6:	2b00      	cmp	r3, #0
 801d7b8:	d002      	beq.n	801d7c0 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801d7ba:	68fb      	ldr	r3, [r7, #12]
 801d7bc:	2220      	movs	r2, #32
 801d7be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801d7c0:	68fb      	ldr	r3, [r7, #12]
 801d7c2:	689b      	ldr	r3, [r3, #8]
 801d7c4:	2b00      	cmp	r3, #0
 801d7c6:	d10a      	bne.n	801d7de <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801d7c8:	2300      	movs	r3, #0
 801d7ca:	613b      	str	r3, [r7, #16]
 801d7cc:	68fb      	ldr	r3, [r7, #12]
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	68db      	ldr	r3, [r3, #12]
 801d7d2:	613b      	str	r3, [r7, #16]
 801d7d4:	68fb      	ldr	r3, [r7, #12]
 801d7d6:	681b      	ldr	r3, [r3, #0]
 801d7d8:	689b      	ldr	r3, [r3, #8]
 801d7da:	613b      	str	r3, [r7, #16]
 801d7dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801d7de:	68fb      	ldr	r3, [r7, #12]
 801d7e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	d002      	beq.n	801d7ec <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801d7e6:	2301      	movs	r3, #1
 801d7e8:	77fb      	strb	r3, [r7, #31]
 801d7ea:	e000      	b.n	801d7ee <HAL_SPI_Transmit+0x2c2>
  }

error:
 801d7ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801d7ee:	68fb      	ldr	r3, [r7, #12]
 801d7f0:	2201      	movs	r2, #1
 801d7f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801d7f6:	68fb      	ldr	r3, [r7, #12]
 801d7f8:	2200      	movs	r2, #0
 801d7fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801d7fe:	7ffb      	ldrb	r3, [r7, #31]
}
 801d800:	4618      	mov	r0, r3
 801d802:	3720      	adds	r7, #32
 801d804:	46bd      	mov	sp, r7
 801d806:	bd80      	pop	{r7, pc}

0801d808 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b088      	sub	sp, #32
 801d80c:	af02      	add	r7, sp, #8
 801d80e:	60f8      	str	r0, [r7, #12]
 801d810:	60b9      	str	r1, [r7, #8]
 801d812:	603b      	str	r3, [r7, #0]
 801d814:	4613      	mov	r3, r2
 801d816:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801d818:	2300      	movs	r3, #0
 801d81a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801d81c:	68fb      	ldr	r3, [r7, #12]
 801d81e:	685b      	ldr	r3, [r3, #4]
 801d820:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d824:	d112      	bne.n	801d84c <HAL_SPI_Receive+0x44>
 801d826:	68fb      	ldr	r3, [r7, #12]
 801d828:	689b      	ldr	r3, [r3, #8]
 801d82a:	2b00      	cmp	r3, #0
 801d82c:	d10e      	bne.n	801d84c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801d82e:	68fb      	ldr	r3, [r7, #12]
 801d830:	2204      	movs	r2, #4
 801d832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801d836:	88fa      	ldrh	r2, [r7, #6]
 801d838:	683b      	ldr	r3, [r7, #0]
 801d83a:	9300      	str	r3, [sp, #0]
 801d83c:	4613      	mov	r3, r2
 801d83e:	68ba      	ldr	r2, [r7, #8]
 801d840:	68b9      	ldr	r1, [r7, #8]
 801d842:	68f8      	ldr	r0, [r7, #12]
 801d844:	f000 f910 	bl	801da68 <HAL_SPI_TransmitReceive>
 801d848:	4603      	mov	r3, r0
 801d84a:	e109      	b.n	801da60 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801d852:	2b01      	cmp	r3, #1
 801d854:	d101      	bne.n	801d85a <HAL_SPI_Receive+0x52>
 801d856:	2302      	movs	r3, #2
 801d858:	e102      	b.n	801da60 <HAL_SPI_Receive+0x258>
 801d85a:	68fb      	ldr	r3, [r7, #12]
 801d85c:	2201      	movs	r2, #1
 801d85e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801d862:	f7fb f9e5 	bl	8018c30 <HAL_GetTick>
 801d866:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801d868:	68fb      	ldr	r3, [r7, #12]
 801d86a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d86e:	b2db      	uxtb	r3, r3
 801d870:	2b01      	cmp	r3, #1
 801d872:	d002      	beq.n	801d87a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801d874:	2302      	movs	r3, #2
 801d876:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d878:	e0e9      	b.n	801da4e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801d87a:	68bb      	ldr	r3, [r7, #8]
 801d87c:	2b00      	cmp	r3, #0
 801d87e:	d002      	beq.n	801d886 <HAL_SPI_Receive+0x7e>
 801d880:	88fb      	ldrh	r3, [r7, #6]
 801d882:	2b00      	cmp	r3, #0
 801d884:	d102      	bne.n	801d88c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801d886:	2301      	movs	r3, #1
 801d888:	75fb      	strb	r3, [r7, #23]
    goto error;
 801d88a:	e0e0      	b.n	801da4e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801d88c:	68fb      	ldr	r3, [r7, #12]
 801d88e:	2204      	movs	r2, #4
 801d890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801d894:	68fb      	ldr	r3, [r7, #12]
 801d896:	2200      	movs	r2, #0
 801d898:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801d89a:	68fb      	ldr	r3, [r7, #12]
 801d89c:	68ba      	ldr	r2, [r7, #8]
 801d89e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	88fa      	ldrh	r2, [r7, #6]
 801d8a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801d8a8:	68fb      	ldr	r3, [r7, #12]
 801d8aa:	88fa      	ldrh	r2, [r7, #6]
 801d8ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801d8b0:	68fb      	ldr	r3, [r7, #12]
 801d8b2:	2200      	movs	r2, #0
 801d8b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801d8b6:	68fb      	ldr	r3, [r7, #12]
 801d8b8:	2200      	movs	r2, #0
 801d8ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801d8bc:	68fb      	ldr	r3, [r7, #12]
 801d8be:	2200      	movs	r2, #0
 801d8c0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801d8c2:	68fb      	ldr	r3, [r7, #12]
 801d8c4:	2200      	movs	r2, #0
 801d8c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801d8c8:	68fb      	ldr	r3, [r7, #12]
 801d8ca:	2200      	movs	r2, #0
 801d8cc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	68db      	ldr	r3, [r3, #12]
 801d8d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d8d6:	d908      	bls.n	801d8ea <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8d8:	68fb      	ldr	r3, [r7, #12]
 801d8da:	681b      	ldr	r3, [r3, #0]
 801d8dc:	685a      	ldr	r2, [r3, #4]
 801d8de:	68fb      	ldr	r3, [r7, #12]
 801d8e0:	681b      	ldr	r3, [r3, #0]
 801d8e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801d8e6:	605a      	str	r2, [r3, #4]
 801d8e8:	e007      	b.n	801d8fa <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801d8ea:	68fb      	ldr	r3, [r7, #12]
 801d8ec:	681b      	ldr	r3, [r3, #0]
 801d8ee:	685a      	ldr	r2, [r3, #4]
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	681b      	ldr	r3, [r3, #0]
 801d8f4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801d8f8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801d8fa:	68fb      	ldr	r3, [r7, #12]
 801d8fc:	689b      	ldr	r3, [r3, #8]
 801d8fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801d902:	d10f      	bne.n	801d924 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801d904:	68fb      	ldr	r3, [r7, #12]
 801d906:	681b      	ldr	r3, [r3, #0]
 801d908:	681a      	ldr	r2, [r3, #0]
 801d90a:	68fb      	ldr	r3, [r7, #12]
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d912:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801d914:	68fb      	ldr	r3, [r7, #12]
 801d916:	681b      	ldr	r3, [r3, #0]
 801d918:	681a      	ldr	r2, [r3, #0]
 801d91a:	68fb      	ldr	r3, [r7, #12]
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801d922:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801d924:	68fb      	ldr	r3, [r7, #12]
 801d926:	681b      	ldr	r3, [r3, #0]
 801d928:	681b      	ldr	r3, [r3, #0]
 801d92a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d92e:	2b40      	cmp	r3, #64	; 0x40
 801d930:	d007      	beq.n	801d942 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	681b      	ldr	r3, [r3, #0]
 801d936:	681a      	ldr	r2, [r3, #0]
 801d938:	68fb      	ldr	r3, [r7, #12]
 801d93a:	681b      	ldr	r3, [r3, #0]
 801d93c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801d940:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801d942:	68fb      	ldr	r3, [r7, #12]
 801d944:	68db      	ldr	r3, [r3, #12]
 801d946:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d94a:	d867      	bhi.n	801da1c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801d94c:	e030      	b.n	801d9b0 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d94e:	68fb      	ldr	r3, [r7, #12]
 801d950:	681b      	ldr	r3, [r3, #0]
 801d952:	689b      	ldr	r3, [r3, #8]
 801d954:	f003 0301 	and.w	r3, r3, #1
 801d958:	2b01      	cmp	r3, #1
 801d95a:	d117      	bne.n	801d98c <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801d95c:	68fb      	ldr	r3, [r7, #12]
 801d95e:	681b      	ldr	r3, [r3, #0]
 801d960:	f103 020c 	add.w	r2, r3, #12
 801d964:	68fb      	ldr	r3, [r7, #12]
 801d966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d968:	7812      	ldrb	r2, [r2, #0]
 801d96a:	b2d2      	uxtb	r2, r2
 801d96c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801d96e:	68fb      	ldr	r3, [r7, #12]
 801d970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d972:	1c5a      	adds	r2, r3, #1
 801d974:	68fb      	ldr	r3, [r7, #12]
 801d976:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d97e:	b29b      	uxth	r3, r3
 801d980:	3b01      	subs	r3, #1
 801d982:	b29a      	uxth	r2, r3
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d98a:	e011      	b.n	801d9b0 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d98c:	f7fb f950 	bl	8018c30 <HAL_GetTick>
 801d990:	4602      	mov	r2, r0
 801d992:	693b      	ldr	r3, [r7, #16]
 801d994:	1ad3      	subs	r3, r2, r3
 801d996:	683a      	ldr	r2, [r7, #0]
 801d998:	429a      	cmp	r2, r3
 801d99a:	d803      	bhi.n	801d9a4 <HAL_SPI_Receive+0x19c>
 801d99c:	683b      	ldr	r3, [r7, #0]
 801d99e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d9a2:	d102      	bne.n	801d9aa <HAL_SPI_Receive+0x1a2>
 801d9a4:	683b      	ldr	r3, [r7, #0]
 801d9a6:	2b00      	cmp	r3, #0
 801d9a8:	d102      	bne.n	801d9b0 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801d9aa:	2303      	movs	r3, #3
 801d9ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 801d9ae:	e04e      	b.n	801da4e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801d9b0:	68fb      	ldr	r3, [r7, #12]
 801d9b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9b6:	b29b      	uxth	r3, r3
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d1c8      	bne.n	801d94e <HAL_SPI_Receive+0x146>
 801d9bc:	e034      	b.n	801da28 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801d9be:	68fb      	ldr	r3, [r7, #12]
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	689b      	ldr	r3, [r3, #8]
 801d9c4:	f003 0301 	and.w	r3, r3, #1
 801d9c8:	2b01      	cmp	r3, #1
 801d9ca:	d115      	bne.n	801d9f8 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801d9cc:	68fb      	ldr	r3, [r7, #12]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	68da      	ldr	r2, [r3, #12]
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9d6:	b292      	uxth	r2, r2
 801d9d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801d9da:	68fb      	ldr	r3, [r7, #12]
 801d9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d9de:	1c9a      	adds	r2, r3, #2
 801d9e0:	68fb      	ldr	r3, [r7, #12]
 801d9e2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801d9e4:	68fb      	ldr	r3, [r7, #12]
 801d9e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801d9ea:	b29b      	uxth	r3, r3
 801d9ec:	3b01      	subs	r3, #1
 801d9ee:	b29a      	uxth	r2, r3
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801d9f6:	e011      	b.n	801da1c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801d9f8:	f7fb f91a 	bl	8018c30 <HAL_GetTick>
 801d9fc:	4602      	mov	r2, r0
 801d9fe:	693b      	ldr	r3, [r7, #16]
 801da00:	1ad3      	subs	r3, r2, r3
 801da02:	683a      	ldr	r2, [r7, #0]
 801da04:	429a      	cmp	r2, r3
 801da06:	d803      	bhi.n	801da10 <HAL_SPI_Receive+0x208>
 801da08:	683b      	ldr	r3, [r7, #0]
 801da0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801da0e:	d102      	bne.n	801da16 <HAL_SPI_Receive+0x20e>
 801da10:	683b      	ldr	r3, [r7, #0]
 801da12:	2b00      	cmp	r3, #0
 801da14:	d102      	bne.n	801da1c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801da16:	2303      	movs	r3, #3
 801da18:	75fb      	strb	r3, [r7, #23]
          goto error;
 801da1a:	e018      	b.n	801da4e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801da1c:	68fb      	ldr	r3, [r7, #12]
 801da1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801da22:	b29b      	uxth	r3, r3
 801da24:	2b00      	cmp	r3, #0
 801da26:	d1ca      	bne.n	801d9be <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801da28:	693a      	ldr	r2, [r7, #16]
 801da2a:	6839      	ldr	r1, [r7, #0]
 801da2c:	68f8      	ldr	r0, [r7, #12]
 801da2e:	f000 fb4d 	bl	801e0cc <SPI_EndRxTransaction>
 801da32:	4603      	mov	r3, r0
 801da34:	2b00      	cmp	r3, #0
 801da36:	d002      	beq.n	801da3e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801da38:	68fb      	ldr	r3, [r7, #12]
 801da3a:	2220      	movs	r2, #32
 801da3c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801da3e:	68fb      	ldr	r3, [r7, #12]
 801da40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801da42:	2b00      	cmp	r3, #0
 801da44:	d002      	beq.n	801da4c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801da46:	2301      	movs	r3, #1
 801da48:	75fb      	strb	r3, [r7, #23]
 801da4a:	e000      	b.n	801da4e <HAL_SPI_Receive+0x246>
  }

error :
 801da4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801da4e:	68fb      	ldr	r3, [r7, #12]
 801da50:	2201      	movs	r2, #1
 801da52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801da56:	68fb      	ldr	r3, [r7, #12]
 801da58:	2200      	movs	r2, #0
 801da5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801da5e:	7dfb      	ldrb	r3, [r7, #23]
}
 801da60:	4618      	mov	r0, r3
 801da62:	3718      	adds	r7, #24
 801da64:	46bd      	mov	sp, r7
 801da66:	bd80      	pop	{r7, pc}

0801da68 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801da68:	b580      	push	{r7, lr}
 801da6a:	b08a      	sub	sp, #40	; 0x28
 801da6c:	af00      	add	r7, sp, #0
 801da6e:	60f8      	str	r0, [r7, #12]
 801da70:	60b9      	str	r1, [r7, #8]
 801da72:	607a      	str	r2, [r7, #4]
 801da74:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801da76:	2301      	movs	r3, #1
 801da78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801da7a:	2300      	movs	r3, #0
 801da7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801da80:	68fb      	ldr	r3, [r7, #12]
 801da82:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801da86:	2b01      	cmp	r3, #1
 801da88:	d101      	bne.n	801da8e <HAL_SPI_TransmitReceive+0x26>
 801da8a:	2302      	movs	r3, #2
 801da8c:	e1fb      	b.n	801de86 <HAL_SPI_TransmitReceive+0x41e>
 801da8e:	68fb      	ldr	r3, [r7, #12]
 801da90:	2201      	movs	r2, #1
 801da92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801da96:	f7fb f8cb 	bl	8018c30 <HAL_GetTick>
 801da9a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801da9c:	68fb      	ldr	r3, [r7, #12]
 801da9e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801daa2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	685b      	ldr	r3, [r3, #4]
 801daa8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801daaa:	887b      	ldrh	r3, [r7, #2]
 801daac:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801daae:	887b      	ldrh	r3, [r7, #2]
 801dab0:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801dab2:	7efb      	ldrb	r3, [r7, #27]
 801dab4:	2b01      	cmp	r3, #1
 801dab6:	d00e      	beq.n	801dad6 <HAL_SPI_TransmitReceive+0x6e>
 801dab8:	697b      	ldr	r3, [r7, #20]
 801daba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dabe:	d106      	bne.n	801dace <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801dac0:	68fb      	ldr	r3, [r7, #12]
 801dac2:	689b      	ldr	r3, [r3, #8]
 801dac4:	2b00      	cmp	r3, #0
 801dac6:	d102      	bne.n	801dace <HAL_SPI_TransmitReceive+0x66>
 801dac8:	7efb      	ldrb	r3, [r7, #27]
 801daca:	2b04      	cmp	r3, #4
 801dacc:	d003      	beq.n	801dad6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801dace:	2302      	movs	r3, #2
 801dad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801dad4:	e1cd      	b.n	801de72 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801dad6:	68bb      	ldr	r3, [r7, #8]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d005      	beq.n	801dae8 <HAL_SPI_TransmitReceive+0x80>
 801dadc:	687b      	ldr	r3, [r7, #4]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d002      	beq.n	801dae8 <HAL_SPI_TransmitReceive+0x80>
 801dae2:	887b      	ldrh	r3, [r7, #2]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	d103      	bne.n	801daf0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801dae8:	2301      	movs	r3, #1
 801daea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801daee:	e1c0      	b.n	801de72 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801daf6:	b2db      	uxtb	r3, r3
 801daf8:	2b04      	cmp	r3, #4
 801dafa:	d003      	beq.n	801db04 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	2205      	movs	r2, #5
 801db00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801db04:	68fb      	ldr	r3, [r7, #12]
 801db06:	2200      	movs	r2, #0
 801db08:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801db0a:	68fb      	ldr	r3, [r7, #12]
 801db0c:	687a      	ldr	r2, [r7, #4]
 801db0e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801db10:	68fb      	ldr	r3, [r7, #12]
 801db12:	887a      	ldrh	r2, [r7, #2]
 801db14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801db18:	68fb      	ldr	r3, [r7, #12]
 801db1a:	887a      	ldrh	r2, [r7, #2]
 801db1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801db20:	68fb      	ldr	r3, [r7, #12]
 801db22:	68ba      	ldr	r2, [r7, #8]
 801db24:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801db26:	68fb      	ldr	r3, [r7, #12]
 801db28:	887a      	ldrh	r2, [r7, #2]
 801db2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801db2c:	68fb      	ldr	r3, [r7, #12]
 801db2e:	887a      	ldrh	r2, [r7, #2]
 801db30:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801db32:	68fb      	ldr	r3, [r7, #12]
 801db34:	2200      	movs	r2, #0
 801db36:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801db38:	68fb      	ldr	r3, [r7, #12]
 801db3a:	2200      	movs	r2, #0
 801db3c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801db3e:	68fb      	ldr	r3, [r7, #12]
 801db40:	68db      	ldr	r3, [r3, #12]
 801db42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db46:	d802      	bhi.n	801db4e <HAL_SPI_TransmitReceive+0xe6>
 801db48:	8a3b      	ldrh	r3, [r7, #16]
 801db4a:	2b01      	cmp	r3, #1
 801db4c:	d908      	bls.n	801db60 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	685a      	ldr	r2, [r3, #4]
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801db5c:	605a      	str	r2, [r3, #4]
 801db5e:	e007      	b.n	801db70 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	681b      	ldr	r3, [r3, #0]
 801db64:	685a      	ldr	r2, [r3, #4]
 801db66:	68fb      	ldr	r3, [r7, #12]
 801db68:	681b      	ldr	r3, [r3, #0]
 801db6a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801db6e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801db70:	68fb      	ldr	r3, [r7, #12]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	681b      	ldr	r3, [r3, #0]
 801db76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db7a:	2b40      	cmp	r3, #64	; 0x40
 801db7c:	d007      	beq.n	801db8e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	681b      	ldr	r3, [r3, #0]
 801db82:	681a      	ldr	r2, [r3, #0]
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	681b      	ldr	r3, [r3, #0]
 801db88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801db8c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801db8e:	68fb      	ldr	r3, [r7, #12]
 801db90:	68db      	ldr	r3, [r3, #12]
 801db92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db96:	d97c      	bls.n	801dc92 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	685b      	ldr	r3, [r3, #4]
 801db9c:	2b00      	cmp	r3, #0
 801db9e:	d002      	beq.n	801dba6 <HAL_SPI_TransmitReceive+0x13e>
 801dba0:	8a7b      	ldrh	r3, [r7, #18]
 801dba2:	2b01      	cmp	r3, #1
 801dba4:	d169      	bne.n	801dc7a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dba6:	68fb      	ldr	r3, [r7, #12]
 801dba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbaa:	881a      	ldrh	r2, [r3, #0]
 801dbac:	68fb      	ldr	r3, [r7, #12]
 801dbae:	681b      	ldr	r3, [r3, #0]
 801dbb0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801dbb2:	68fb      	ldr	r3, [r7, #12]
 801dbb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbb6:	1c9a      	adds	r2, r3, #2
 801dbb8:	68fb      	ldr	r3, [r7, #12]
 801dbba:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801dbbc:	68fb      	ldr	r3, [r7, #12]
 801dbbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dbc0:	b29b      	uxth	r3, r3
 801dbc2:	3b01      	subs	r3, #1
 801dbc4:	b29a      	uxth	r2, r3
 801dbc6:	68fb      	ldr	r3, [r7, #12]
 801dbc8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dbca:	e056      	b.n	801dc7a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801dbcc:	68fb      	ldr	r3, [r7, #12]
 801dbce:	681b      	ldr	r3, [r3, #0]
 801dbd0:	689b      	ldr	r3, [r3, #8]
 801dbd2:	f003 0302 	and.w	r3, r3, #2
 801dbd6:	2b02      	cmp	r3, #2
 801dbd8:	d11b      	bne.n	801dc12 <HAL_SPI_TransmitReceive+0x1aa>
 801dbda:	68fb      	ldr	r3, [r7, #12]
 801dbdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dbde:	b29b      	uxth	r3, r3
 801dbe0:	2b00      	cmp	r3, #0
 801dbe2:	d016      	beq.n	801dc12 <HAL_SPI_TransmitReceive+0x1aa>
 801dbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbe6:	2b01      	cmp	r3, #1
 801dbe8:	d113      	bne.n	801dc12 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dbea:	68fb      	ldr	r3, [r7, #12]
 801dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbee:	881a      	ldrh	r2, [r3, #0]
 801dbf0:	68fb      	ldr	r3, [r7, #12]
 801dbf2:	681b      	ldr	r3, [r3, #0]
 801dbf4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbfa:	1c9a      	adds	r2, r3, #2
 801dbfc:	68fb      	ldr	r3, [r7, #12]
 801dbfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc04:	b29b      	uxth	r3, r3
 801dc06:	3b01      	subs	r3, #1
 801dc08:	b29a      	uxth	r2, r3
 801dc0a:	68fb      	ldr	r3, [r7, #12]
 801dc0c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801dc0e:	2300      	movs	r3, #0
 801dc10:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801dc12:	68fb      	ldr	r3, [r7, #12]
 801dc14:	681b      	ldr	r3, [r3, #0]
 801dc16:	689b      	ldr	r3, [r3, #8]
 801dc18:	f003 0301 	and.w	r3, r3, #1
 801dc1c:	2b01      	cmp	r3, #1
 801dc1e:	d11c      	bne.n	801dc5a <HAL_SPI_TransmitReceive+0x1f2>
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dc26:	b29b      	uxth	r3, r3
 801dc28:	2b00      	cmp	r3, #0
 801dc2a:	d016      	beq.n	801dc5a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	681b      	ldr	r3, [r3, #0]
 801dc30:	68da      	ldr	r2, [r3, #12]
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc36:	b292      	uxth	r2, r2
 801dc38:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801dc3a:	68fb      	ldr	r3, [r7, #12]
 801dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dc3e:	1c9a      	adds	r2, r3, #2
 801dc40:	68fb      	ldr	r3, [r7, #12]
 801dc42:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801dc44:	68fb      	ldr	r3, [r7, #12]
 801dc46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dc4a:	b29b      	uxth	r3, r3
 801dc4c:	3b01      	subs	r3, #1
 801dc4e:	b29a      	uxth	r2, r3
 801dc50:	68fb      	ldr	r3, [r7, #12]
 801dc52:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801dc56:	2301      	movs	r3, #1
 801dc58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801dc5a:	f7fa ffe9 	bl	8018c30 <HAL_GetTick>
 801dc5e:	4602      	mov	r2, r0
 801dc60:	69fb      	ldr	r3, [r7, #28]
 801dc62:	1ad3      	subs	r3, r2, r3
 801dc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc66:	429a      	cmp	r2, r3
 801dc68:	d807      	bhi.n	801dc7a <HAL_SPI_TransmitReceive+0x212>
 801dc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dc70:	d003      	beq.n	801dc7a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801dc72:	2303      	movs	r3, #3
 801dc74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801dc78:	e0fb      	b.n	801de72 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc7e:	b29b      	uxth	r3, r3
 801dc80:	2b00      	cmp	r3, #0
 801dc82:	d1a3      	bne.n	801dbcc <HAL_SPI_TransmitReceive+0x164>
 801dc84:	68fb      	ldr	r3, [r7, #12]
 801dc86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dc8a:	b29b      	uxth	r3, r3
 801dc8c:	2b00      	cmp	r3, #0
 801dc8e:	d19d      	bne.n	801dbcc <HAL_SPI_TransmitReceive+0x164>
 801dc90:	e0df      	b.n	801de52 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	685b      	ldr	r3, [r3, #4]
 801dc96:	2b00      	cmp	r3, #0
 801dc98:	d003      	beq.n	801dca2 <HAL_SPI_TransmitReceive+0x23a>
 801dc9a:	8a7b      	ldrh	r3, [r7, #18]
 801dc9c:	2b01      	cmp	r3, #1
 801dc9e:	f040 80cb 	bne.w	801de38 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801dca2:	68fb      	ldr	r3, [r7, #12]
 801dca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dca6:	b29b      	uxth	r3, r3
 801dca8:	2b01      	cmp	r3, #1
 801dcaa:	d912      	bls.n	801dcd2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dcac:	68fb      	ldr	r3, [r7, #12]
 801dcae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcb0:	881a      	ldrh	r2, [r3, #0]
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	681b      	ldr	r3, [r3, #0]
 801dcb6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcbc:	1c9a      	adds	r2, r3, #2
 801dcbe:	68fb      	ldr	r3, [r7, #12]
 801dcc0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dcc2:	68fb      	ldr	r3, [r7, #12]
 801dcc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcc6:	b29b      	uxth	r3, r3
 801dcc8:	3b02      	subs	r3, #2
 801dcca:	b29a      	uxth	r2, r3
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dcd0:	e0b2      	b.n	801de38 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801dcd2:	68fb      	ldr	r3, [r7, #12]
 801dcd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dcd6:	68fb      	ldr	r3, [r7, #12]
 801dcd8:	681b      	ldr	r3, [r3, #0]
 801dcda:	330c      	adds	r3, #12
 801dcdc:	7812      	ldrb	r2, [r2, #0]
 801dcde:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801dce0:	68fb      	ldr	r3, [r7, #12]
 801dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dce4:	1c5a      	adds	r2, r3, #1
 801dce6:	68fb      	ldr	r3, [r7, #12]
 801dce8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dcea:	68fb      	ldr	r3, [r7, #12]
 801dcec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcee:	b29b      	uxth	r3, r3
 801dcf0:	3b01      	subs	r3, #1
 801dcf2:	b29a      	uxth	r2, r3
 801dcf4:	68fb      	ldr	r3, [r7, #12]
 801dcf6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801dcf8:	e09e      	b.n	801de38 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801dcfa:	68fb      	ldr	r3, [r7, #12]
 801dcfc:	681b      	ldr	r3, [r3, #0]
 801dcfe:	689b      	ldr	r3, [r3, #8]
 801dd00:	f003 0302 	and.w	r3, r3, #2
 801dd04:	2b02      	cmp	r3, #2
 801dd06:	d134      	bne.n	801dd72 <HAL_SPI_TransmitReceive+0x30a>
 801dd08:	68fb      	ldr	r3, [r7, #12]
 801dd0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd0c:	b29b      	uxth	r3, r3
 801dd0e:	2b00      	cmp	r3, #0
 801dd10:	d02f      	beq.n	801dd72 <HAL_SPI_TransmitReceive+0x30a>
 801dd12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd14:	2b01      	cmp	r3, #1
 801dd16:	d12c      	bne.n	801dd72 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801dd18:	68fb      	ldr	r3, [r7, #12]
 801dd1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd1c:	b29b      	uxth	r3, r3
 801dd1e:	2b01      	cmp	r3, #1
 801dd20:	d912      	bls.n	801dd48 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dd22:	68fb      	ldr	r3, [r7, #12]
 801dd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd26:	881a      	ldrh	r2, [r3, #0]
 801dd28:	68fb      	ldr	r3, [r7, #12]
 801dd2a:	681b      	ldr	r3, [r3, #0]
 801dd2c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801dd2e:	68fb      	ldr	r3, [r7, #12]
 801dd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd32:	1c9a      	adds	r2, r3, #2
 801dd34:	68fb      	ldr	r3, [r7, #12]
 801dd36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd3c:	b29b      	uxth	r3, r3
 801dd3e:	3b02      	subs	r3, #2
 801dd40:	b29a      	uxth	r2, r3
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dd46:	e012      	b.n	801dd6e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dd4c:	68fb      	ldr	r3, [r7, #12]
 801dd4e:	681b      	ldr	r3, [r3, #0]
 801dd50:	330c      	adds	r3, #12
 801dd52:	7812      	ldrb	r2, [r2, #0]
 801dd54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801dd56:	68fb      	ldr	r3, [r7, #12]
 801dd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd5a:	1c5a      	adds	r2, r3, #1
 801dd5c:	68fb      	ldr	r3, [r7, #12]
 801dd5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801dd60:	68fb      	ldr	r3, [r7, #12]
 801dd62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd64:	b29b      	uxth	r3, r3
 801dd66:	3b01      	subs	r3, #1
 801dd68:	b29a      	uxth	r2, r3
 801dd6a:	68fb      	ldr	r3, [r7, #12]
 801dd6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801dd6e:	2300      	movs	r3, #0
 801dd70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801dd72:	68fb      	ldr	r3, [r7, #12]
 801dd74:	681b      	ldr	r3, [r3, #0]
 801dd76:	689b      	ldr	r3, [r3, #8]
 801dd78:	f003 0301 	and.w	r3, r3, #1
 801dd7c:	2b01      	cmp	r3, #1
 801dd7e:	d148      	bne.n	801de12 <HAL_SPI_TransmitReceive+0x3aa>
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dd86:	b29b      	uxth	r3, r3
 801dd88:	2b00      	cmp	r3, #0
 801dd8a:	d042      	beq.n	801de12 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801dd8c:	68fb      	ldr	r3, [r7, #12]
 801dd8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dd92:	b29b      	uxth	r3, r3
 801dd94:	2b01      	cmp	r3, #1
 801dd96:	d923      	bls.n	801dde0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801dd98:	68fb      	ldr	r3, [r7, #12]
 801dd9a:	681b      	ldr	r3, [r3, #0]
 801dd9c:	68da      	ldr	r2, [r3, #12]
 801dd9e:	68fb      	ldr	r3, [r7, #12]
 801dda0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dda2:	b292      	uxth	r2, r2
 801dda4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801dda6:	68fb      	ldr	r3, [r7, #12]
 801dda8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddaa:	1c9a      	adds	r2, r3, #2
 801ddac:	68fb      	ldr	r3, [r7, #12]
 801ddae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ddb6:	b29b      	uxth	r3, r3
 801ddb8:	3b02      	subs	r3, #2
 801ddba:	b29a      	uxth	r2, r3
 801ddbc:	68fb      	ldr	r3, [r7, #12]
 801ddbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ddc2:	68fb      	ldr	r3, [r7, #12]
 801ddc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ddc8:	b29b      	uxth	r3, r3
 801ddca:	2b01      	cmp	r3, #1
 801ddcc:	d81f      	bhi.n	801de0e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801ddce:	68fb      	ldr	r3, [r7, #12]
 801ddd0:	681b      	ldr	r3, [r3, #0]
 801ddd2:	685a      	ldr	r2, [r3, #4]
 801ddd4:	68fb      	ldr	r3, [r7, #12]
 801ddd6:	681b      	ldr	r3, [r3, #0]
 801ddd8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801dddc:	605a      	str	r2, [r3, #4]
 801ddde:	e016      	b.n	801de0e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801dde0:	68fb      	ldr	r3, [r7, #12]
 801dde2:	681b      	ldr	r3, [r3, #0]
 801dde4:	f103 020c 	add.w	r2, r3, #12
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddec:	7812      	ldrb	r2, [r2, #0]
 801ddee:	b2d2      	uxtb	r2, r2
 801ddf0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801ddf2:	68fb      	ldr	r3, [r7, #12]
 801ddf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddf6:	1c5a      	adds	r2, r3, #1
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801ddfc:	68fb      	ldr	r3, [r7, #12]
 801ddfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801de02:	b29b      	uxth	r3, r3
 801de04:	3b01      	subs	r3, #1
 801de06:	b29a      	uxth	r2, r3
 801de08:	68fb      	ldr	r3, [r7, #12]
 801de0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801de0e:	2301      	movs	r3, #1
 801de10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801de12:	f7fa ff0d 	bl	8018c30 <HAL_GetTick>
 801de16:	4602      	mov	r2, r0
 801de18:	69fb      	ldr	r3, [r7, #28]
 801de1a:	1ad3      	subs	r3, r2, r3
 801de1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801de1e:	429a      	cmp	r2, r3
 801de20:	d803      	bhi.n	801de2a <HAL_SPI_TransmitReceive+0x3c2>
 801de22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de24:	f1b3 3fff 	cmp.w	r3, #4294967295
 801de28:	d102      	bne.n	801de30 <HAL_SPI_TransmitReceive+0x3c8>
 801de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de2c:	2b00      	cmp	r3, #0
 801de2e:	d103      	bne.n	801de38 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801de30:	2303      	movs	r3, #3
 801de32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801de36:	e01c      	b.n	801de72 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801de38:	68fb      	ldr	r3, [r7, #12]
 801de3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801de3c:	b29b      	uxth	r3, r3
 801de3e:	2b00      	cmp	r3, #0
 801de40:	f47f af5b 	bne.w	801dcfa <HAL_SPI_TransmitReceive+0x292>
 801de44:	68fb      	ldr	r3, [r7, #12]
 801de46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801de4a:	b29b      	uxth	r3, r3
 801de4c:	2b00      	cmp	r3, #0
 801de4e:	f47f af54 	bne.w	801dcfa <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801de52:	69fa      	ldr	r2, [r7, #28]
 801de54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801de56:	68f8      	ldr	r0, [r7, #12]
 801de58:	f000 f9b4 	bl	801e1c4 <SPI_EndRxTxTransaction>
 801de5c:	4603      	mov	r3, r0
 801de5e:	2b00      	cmp	r3, #0
 801de60:	d006      	beq.n	801de70 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801de62:	2301      	movs	r3, #1
 801de64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	2220      	movs	r2, #32
 801de6c:	661a      	str	r2, [r3, #96]	; 0x60
 801de6e:	e000      	b.n	801de72 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801de70:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801de72:	68fb      	ldr	r3, [r7, #12]
 801de74:	2201      	movs	r2, #1
 801de76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801de7a:	68fb      	ldr	r3, [r7, #12]
 801de7c:	2200      	movs	r2, #0
 801de7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801de82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801de86:	4618      	mov	r0, r3
 801de88:	3728      	adds	r7, #40	; 0x28
 801de8a:	46bd      	mov	sp, r7
 801de8c:	bd80      	pop	{r7, pc}
	...

0801de90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b088      	sub	sp, #32
 801de94:	af00      	add	r7, sp, #0
 801de96:	60f8      	str	r0, [r7, #12]
 801de98:	60b9      	str	r1, [r7, #8]
 801de9a:	603b      	str	r3, [r7, #0]
 801de9c:	4613      	mov	r3, r2
 801de9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801dea0:	f7fa fec6 	bl	8018c30 <HAL_GetTick>
 801dea4:	4602      	mov	r2, r0
 801dea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dea8:	1a9b      	subs	r3, r3, r2
 801deaa:	683a      	ldr	r2, [r7, #0]
 801deac:	4413      	add	r3, r2
 801deae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801deb0:	f7fa febe 	bl	8018c30 <HAL_GetTick>
 801deb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801deb6:	4b39      	ldr	r3, [pc, #228]	; (801df9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801deb8:	681b      	ldr	r3, [r3, #0]
 801deba:	015b      	lsls	r3, r3, #5
 801debc:	0d1b      	lsrs	r3, r3, #20
 801debe:	69fa      	ldr	r2, [r7, #28]
 801dec0:	fb02 f303 	mul.w	r3, r2, r3
 801dec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801dec6:	e054      	b.n	801df72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801dec8:	683b      	ldr	r3, [r7, #0]
 801deca:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dece:	d050      	beq.n	801df72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ded0:	f7fa feae 	bl	8018c30 <HAL_GetTick>
 801ded4:	4602      	mov	r2, r0
 801ded6:	69bb      	ldr	r3, [r7, #24]
 801ded8:	1ad3      	subs	r3, r2, r3
 801deda:	69fa      	ldr	r2, [r7, #28]
 801dedc:	429a      	cmp	r2, r3
 801dede:	d902      	bls.n	801dee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 801dee0:	69fb      	ldr	r3, [r7, #28]
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d13d      	bne.n	801df62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801dee6:	68fb      	ldr	r3, [r7, #12]
 801dee8:	681b      	ldr	r3, [r3, #0]
 801deea:	685a      	ldr	r2, [r3, #4]
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	681b      	ldr	r3, [r3, #0]
 801def0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801def4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801def6:	68fb      	ldr	r3, [r7, #12]
 801def8:	685b      	ldr	r3, [r3, #4]
 801defa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801defe:	d111      	bne.n	801df24 <SPI_WaitFlagStateUntilTimeout+0x94>
 801df00:	68fb      	ldr	r3, [r7, #12]
 801df02:	689b      	ldr	r3, [r3, #8]
 801df04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801df08:	d004      	beq.n	801df14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801df0a:	68fb      	ldr	r3, [r7, #12]
 801df0c:	689b      	ldr	r3, [r3, #8]
 801df0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801df12:	d107      	bne.n	801df24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	681b      	ldr	r3, [r3, #0]
 801df18:	681a      	ldr	r2, [r3, #0]
 801df1a:	68fb      	ldr	r3, [r7, #12]
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801df22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801df24:	68fb      	ldr	r3, [r7, #12]
 801df26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801df2c:	d10f      	bne.n	801df4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801df2e:	68fb      	ldr	r3, [r7, #12]
 801df30:	681b      	ldr	r3, [r3, #0]
 801df32:	681a      	ldr	r2, [r3, #0]
 801df34:	68fb      	ldr	r3, [r7, #12]
 801df36:	681b      	ldr	r3, [r3, #0]
 801df38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801df3c:	601a      	str	r2, [r3, #0]
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	681b      	ldr	r3, [r3, #0]
 801df42:	681a      	ldr	r2, [r3, #0]
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801df4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801df4e:	68fb      	ldr	r3, [r7, #12]
 801df50:	2201      	movs	r2, #1
 801df52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801df56:	68fb      	ldr	r3, [r7, #12]
 801df58:	2200      	movs	r2, #0
 801df5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801df5e:	2303      	movs	r3, #3
 801df60:	e017      	b.n	801df92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801df62:	697b      	ldr	r3, [r7, #20]
 801df64:	2b00      	cmp	r3, #0
 801df66:	d101      	bne.n	801df6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801df68:	2300      	movs	r3, #0
 801df6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801df6c:	697b      	ldr	r3, [r7, #20]
 801df6e:	3b01      	subs	r3, #1
 801df70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801df72:	68fb      	ldr	r3, [r7, #12]
 801df74:	681b      	ldr	r3, [r3, #0]
 801df76:	689a      	ldr	r2, [r3, #8]
 801df78:	68bb      	ldr	r3, [r7, #8]
 801df7a:	4013      	ands	r3, r2
 801df7c:	68ba      	ldr	r2, [r7, #8]
 801df7e:	429a      	cmp	r2, r3
 801df80:	bf0c      	ite	eq
 801df82:	2301      	moveq	r3, #1
 801df84:	2300      	movne	r3, #0
 801df86:	b2db      	uxtb	r3, r3
 801df88:	461a      	mov	r2, r3
 801df8a:	79fb      	ldrb	r3, [r7, #7]
 801df8c:	429a      	cmp	r2, r3
 801df8e:	d19b      	bne.n	801dec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801df90:	2300      	movs	r3, #0
}
 801df92:	4618      	mov	r0, r3
 801df94:	3720      	adds	r7, #32
 801df96:	46bd      	mov	sp, r7
 801df98:	bd80      	pop	{r7, pc}
 801df9a:	bf00      	nop
 801df9c:	2000031c 	.word	0x2000031c

0801dfa0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801dfa0:	b580      	push	{r7, lr}
 801dfa2:	b08a      	sub	sp, #40	; 0x28
 801dfa4:	af00      	add	r7, sp, #0
 801dfa6:	60f8      	str	r0, [r7, #12]
 801dfa8:	60b9      	str	r1, [r7, #8]
 801dfaa:	607a      	str	r2, [r7, #4]
 801dfac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801dfae:	2300      	movs	r3, #0
 801dfb0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801dfb2:	f7fa fe3d 	bl	8018c30 <HAL_GetTick>
 801dfb6:	4602      	mov	r2, r0
 801dfb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfba:	1a9b      	subs	r3, r3, r2
 801dfbc:	683a      	ldr	r2, [r7, #0]
 801dfbe:	4413      	add	r3, r2
 801dfc0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801dfc2:	f7fa fe35 	bl	8018c30 <HAL_GetTick>
 801dfc6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801dfc8:	68fb      	ldr	r3, [r7, #12]
 801dfca:	681b      	ldr	r3, [r3, #0]
 801dfcc:	330c      	adds	r3, #12
 801dfce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801dfd0:	4b3d      	ldr	r3, [pc, #244]	; (801e0c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801dfd2:	681a      	ldr	r2, [r3, #0]
 801dfd4:	4613      	mov	r3, r2
 801dfd6:	009b      	lsls	r3, r3, #2
 801dfd8:	4413      	add	r3, r2
 801dfda:	00da      	lsls	r2, r3, #3
 801dfdc:	1ad3      	subs	r3, r2, r3
 801dfde:	0d1b      	lsrs	r3, r3, #20
 801dfe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801dfe2:	fb02 f303 	mul.w	r3, r2, r3
 801dfe6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801dfe8:	e060      	b.n	801e0ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801dfea:	68bb      	ldr	r3, [r7, #8]
 801dfec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801dff0:	d107      	bne.n	801e002 <SPI_WaitFifoStateUntilTimeout+0x62>
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	2b00      	cmp	r3, #0
 801dff6:	d104      	bne.n	801e002 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801dff8:	69fb      	ldr	r3, [r7, #28]
 801dffa:	781b      	ldrb	r3, [r3, #0]
 801dffc:	b2db      	uxtb	r3, r3
 801dffe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e000:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e002:	683b      	ldr	r3, [r7, #0]
 801e004:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e008:	d050      	beq.n	801e0ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e00a:	f7fa fe11 	bl	8018c30 <HAL_GetTick>
 801e00e:	4602      	mov	r2, r0
 801e010:	6a3b      	ldr	r3, [r7, #32]
 801e012:	1ad3      	subs	r3, r2, r3
 801e014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e016:	429a      	cmp	r2, r3
 801e018:	d902      	bls.n	801e020 <SPI_WaitFifoStateUntilTimeout+0x80>
 801e01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d13d      	bne.n	801e09c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e020:	68fb      	ldr	r3, [r7, #12]
 801e022:	681b      	ldr	r3, [r3, #0]
 801e024:	685a      	ldr	r2, [r3, #4]
 801e026:	68fb      	ldr	r3, [r7, #12]
 801e028:	681b      	ldr	r3, [r3, #0]
 801e02a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e02e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e030:	68fb      	ldr	r3, [r7, #12]
 801e032:	685b      	ldr	r3, [r3, #4]
 801e034:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e038:	d111      	bne.n	801e05e <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e03a:	68fb      	ldr	r3, [r7, #12]
 801e03c:	689b      	ldr	r3, [r3, #8]
 801e03e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e042:	d004      	beq.n	801e04e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e044:	68fb      	ldr	r3, [r7, #12]
 801e046:	689b      	ldr	r3, [r3, #8]
 801e048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e04c:	d107      	bne.n	801e05e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e04e:	68fb      	ldr	r3, [r7, #12]
 801e050:	681b      	ldr	r3, [r3, #0]
 801e052:	681a      	ldr	r2, [r3, #0]
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	681b      	ldr	r3, [r3, #0]
 801e058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e05c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e05e:	68fb      	ldr	r3, [r7, #12]
 801e060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e066:	d10f      	bne.n	801e088 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	681b      	ldr	r3, [r3, #0]
 801e06c:	681a      	ldr	r2, [r3, #0]
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	681b      	ldr	r3, [r3, #0]
 801e072:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e076:	601a      	str	r2, [r3, #0]
 801e078:	68fb      	ldr	r3, [r7, #12]
 801e07a:	681b      	ldr	r3, [r3, #0]
 801e07c:	681a      	ldr	r2, [r3, #0]
 801e07e:	68fb      	ldr	r3, [r7, #12]
 801e080:	681b      	ldr	r3, [r3, #0]
 801e082:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e086:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e088:	68fb      	ldr	r3, [r7, #12]
 801e08a:	2201      	movs	r2, #1
 801e08c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	2200      	movs	r2, #0
 801e094:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e098:	2303      	movs	r3, #3
 801e09a:	e010      	b.n	801e0be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e09c:	69bb      	ldr	r3, [r7, #24]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d101      	bne.n	801e0a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e0a2:	2300      	movs	r3, #0
 801e0a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e0a6:	69bb      	ldr	r3, [r7, #24]
 801e0a8:	3b01      	subs	r3, #1
 801e0aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e0ac:	68fb      	ldr	r3, [r7, #12]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	689a      	ldr	r2, [r3, #8]
 801e0b2:	68bb      	ldr	r3, [r7, #8]
 801e0b4:	4013      	ands	r3, r2
 801e0b6:	687a      	ldr	r2, [r7, #4]
 801e0b8:	429a      	cmp	r2, r3
 801e0ba:	d196      	bne.n	801dfea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e0bc:	2300      	movs	r3, #0
}
 801e0be:	4618      	mov	r0, r3
 801e0c0:	3728      	adds	r7, #40	; 0x28
 801e0c2:	46bd      	mov	sp, r7
 801e0c4:	bd80      	pop	{r7, pc}
 801e0c6:	bf00      	nop
 801e0c8:	2000031c 	.word	0x2000031c

0801e0cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e0cc:	b580      	push	{r7, lr}
 801e0ce:	b088      	sub	sp, #32
 801e0d0:	af02      	add	r7, sp, #8
 801e0d2:	60f8      	str	r0, [r7, #12]
 801e0d4:	60b9      	str	r1, [r7, #8]
 801e0d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	685b      	ldr	r3, [r3, #4]
 801e0dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e0e0:	d111      	bne.n	801e106 <SPI_EndRxTransaction+0x3a>
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	689b      	ldr	r3, [r3, #8]
 801e0e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e0ea:	d004      	beq.n	801e0f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e0ec:	68fb      	ldr	r3, [r7, #12]
 801e0ee:	689b      	ldr	r3, [r3, #8]
 801e0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e0f4:	d107      	bne.n	801e106 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801e0f6:	68fb      	ldr	r3, [r7, #12]
 801e0f8:	681b      	ldr	r3, [r3, #0]
 801e0fa:	681a      	ldr	r2, [r3, #0]
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	681b      	ldr	r3, [r3, #0]
 801e100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e104:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e106:	68fb      	ldr	r3, [r7, #12]
 801e108:	685b      	ldr	r3, [r3, #4]
 801e10a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e10e:	d112      	bne.n	801e136 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e110:	687b      	ldr	r3, [r7, #4]
 801e112:	9300      	str	r3, [sp, #0]
 801e114:	68bb      	ldr	r3, [r7, #8]
 801e116:	2200      	movs	r2, #0
 801e118:	2180      	movs	r1, #128	; 0x80
 801e11a:	68f8      	ldr	r0, [r7, #12]
 801e11c:	f7ff feb8 	bl	801de90 <SPI_WaitFlagStateUntilTimeout>
 801e120:	4603      	mov	r3, r0
 801e122:	2b00      	cmp	r3, #0
 801e124:	d021      	beq.n	801e16a <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e126:	68fb      	ldr	r3, [r7, #12]
 801e128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e12a:	f043 0220 	orr.w	r2, r3, #32
 801e12e:	68fb      	ldr	r3, [r7, #12]
 801e130:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e132:	2303      	movs	r3, #3
 801e134:	e03d      	b.n	801e1b2 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801e136:	4b21      	ldr	r3, [pc, #132]	; (801e1bc <SPI_EndRxTransaction+0xf0>)
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	4a21      	ldr	r2, [pc, #132]	; (801e1c0 <SPI_EndRxTransaction+0xf4>)
 801e13c:	fba2 2303 	umull	r2, r3, r2, r3
 801e140:	0d5b      	lsrs	r3, r3, #21
 801e142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e146:	fb02 f303 	mul.w	r3, r2, r3
 801e14a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801e14c:	697b      	ldr	r3, [r7, #20]
 801e14e:	2b00      	cmp	r3, #0
 801e150:	d00a      	beq.n	801e168 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801e152:	697b      	ldr	r3, [r7, #20]
 801e154:	3b01      	subs	r3, #1
 801e156:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801e158:	68fb      	ldr	r3, [r7, #12]
 801e15a:	681b      	ldr	r3, [r3, #0]
 801e15c:	689b      	ldr	r3, [r3, #8]
 801e15e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e162:	2b80      	cmp	r3, #128	; 0x80
 801e164:	d0f2      	beq.n	801e14c <SPI_EndRxTransaction+0x80>
 801e166:	e000      	b.n	801e16a <SPI_EndRxTransaction+0x9e>
        break;
 801e168:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e16a:	68fb      	ldr	r3, [r7, #12]
 801e16c:	685b      	ldr	r3, [r3, #4]
 801e16e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e172:	d11d      	bne.n	801e1b0 <SPI_EndRxTransaction+0xe4>
 801e174:	68fb      	ldr	r3, [r7, #12]
 801e176:	689b      	ldr	r3, [r3, #8]
 801e178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e17c:	d004      	beq.n	801e188 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e17e:	68fb      	ldr	r3, [r7, #12]
 801e180:	689b      	ldr	r3, [r3, #8]
 801e182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e186:	d113      	bne.n	801e1b0 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e188:	687b      	ldr	r3, [r7, #4]
 801e18a:	9300      	str	r3, [sp, #0]
 801e18c:	68bb      	ldr	r3, [r7, #8]
 801e18e:	2200      	movs	r2, #0
 801e190:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e194:	68f8      	ldr	r0, [r7, #12]
 801e196:	f7ff ff03 	bl	801dfa0 <SPI_WaitFifoStateUntilTimeout>
 801e19a:	4603      	mov	r3, r0
 801e19c:	2b00      	cmp	r3, #0
 801e19e:	d007      	beq.n	801e1b0 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e1a0:	68fb      	ldr	r3, [r7, #12]
 801e1a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e1a4:	f043 0220 	orr.w	r2, r3, #32
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e1ac:	2303      	movs	r3, #3
 801e1ae:	e000      	b.n	801e1b2 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801e1b0:	2300      	movs	r3, #0
}
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	3718      	adds	r7, #24
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}
 801e1ba:	bf00      	nop
 801e1bc:	2000031c 	.word	0x2000031c
 801e1c0:	165e9f81 	.word	0x165e9f81

0801e1c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e1c4:	b580      	push	{r7, lr}
 801e1c6:	b088      	sub	sp, #32
 801e1c8:	af02      	add	r7, sp, #8
 801e1ca:	60f8      	str	r0, [r7, #12]
 801e1cc:	60b9      	str	r1, [r7, #8]
 801e1ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e1d0:	687b      	ldr	r3, [r7, #4]
 801e1d2:	9300      	str	r3, [sp, #0]
 801e1d4:	68bb      	ldr	r3, [r7, #8]
 801e1d6:	2200      	movs	r2, #0
 801e1d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801e1dc:	68f8      	ldr	r0, [r7, #12]
 801e1de:	f7ff fedf 	bl	801dfa0 <SPI_WaitFifoStateUntilTimeout>
 801e1e2:	4603      	mov	r3, r0
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d007      	beq.n	801e1f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e1ec:	f043 0220 	orr.w	r2, r3, #32
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e1f4:	2303      	movs	r3, #3
 801e1f6:	e046      	b.n	801e286 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801e1f8:	4b25      	ldr	r3, [pc, #148]	; (801e290 <SPI_EndRxTxTransaction+0xcc>)
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	4a25      	ldr	r2, [pc, #148]	; (801e294 <SPI_EndRxTxTransaction+0xd0>)
 801e1fe:	fba2 2303 	umull	r2, r3, r2, r3
 801e202:	0d5b      	lsrs	r3, r3, #21
 801e204:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e208:	fb02 f303 	mul.w	r3, r2, r3
 801e20c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	685b      	ldr	r3, [r3, #4]
 801e212:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e216:	d112      	bne.n	801e23e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e218:	687b      	ldr	r3, [r7, #4]
 801e21a:	9300      	str	r3, [sp, #0]
 801e21c:	68bb      	ldr	r3, [r7, #8]
 801e21e:	2200      	movs	r2, #0
 801e220:	2180      	movs	r1, #128	; 0x80
 801e222:	68f8      	ldr	r0, [r7, #12]
 801e224:	f7ff fe34 	bl	801de90 <SPI_WaitFlagStateUntilTimeout>
 801e228:	4603      	mov	r3, r0
 801e22a:	2b00      	cmp	r3, #0
 801e22c:	d016      	beq.n	801e25c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e22e:	68fb      	ldr	r3, [r7, #12]
 801e230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e232:	f043 0220 	orr.w	r2, r3, #32
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e23a:	2303      	movs	r3, #3
 801e23c:	e023      	b.n	801e286 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801e23e:	697b      	ldr	r3, [r7, #20]
 801e240:	2b00      	cmp	r3, #0
 801e242:	d00a      	beq.n	801e25a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801e244:	697b      	ldr	r3, [r7, #20]
 801e246:	3b01      	subs	r3, #1
 801e248:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	681b      	ldr	r3, [r3, #0]
 801e24e:	689b      	ldr	r3, [r3, #8]
 801e250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e254:	2b80      	cmp	r3, #128	; 0x80
 801e256:	d0f2      	beq.n	801e23e <SPI_EndRxTxTransaction+0x7a>
 801e258:	e000      	b.n	801e25c <SPI_EndRxTxTransaction+0x98>
        break;
 801e25a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e25c:	687b      	ldr	r3, [r7, #4]
 801e25e:	9300      	str	r3, [sp, #0]
 801e260:	68bb      	ldr	r3, [r7, #8]
 801e262:	2200      	movs	r2, #0
 801e264:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e268:	68f8      	ldr	r0, [r7, #12]
 801e26a:	f7ff fe99 	bl	801dfa0 <SPI_WaitFifoStateUntilTimeout>
 801e26e:	4603      	mov	r3, r0
 801e270:	2b00      	cmp	r3, #0
 801e272:	d007      	beq.n	801e284 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e274:	68fb      	ldr	r3, [r7, #12]
 801e276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e278:	f043 0220 	orr.w	r2, r3, #32
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e280:	2303      	movs	r3, #3
 801e282:	e000      	b.n	801e286 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801e284:	2300      	movs	r3, #0
}
 801e286:	4618      	mov	r0, r3
 801e288:	3718      	adds	r7, #24
 801e28a:	46bd      	mov	sp, r7
 801e28c:	bd80      	pop	{r7, pc}
 801e28e:	bf00      	nop
 801e290:	2000031c 	.word	0x2000031c
 801e294:	165e9f81 	.word	0x165e9f81

0801e298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e298:	b580      	push	{r7, lr}
 801e29a:	b082      	sub	sp, #8
 801e29c:	af00      	add	r7, sp, #0
 801e29e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e2a0:	687b      	ldr	r3, [r7, #4]
 801e2a2:	681b      	ldr	r3, [r3, #0]
 801e2a4:	691b      	ldr	r3, [r3, #16]
 801e2a6:	f003 0302 	and.w	r3, r3, #2
 801e2aa:	2b02      	cmp	r3, #2
 801e2ac:	d128      	bne.n	801e300 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	681b      	ldr	r3, [r3, #0]
 801e2b2:	68db      	ldr	r3, [r3, #12]
 801e2b4:	f003 0302 	and.w	r3, r3, #2
 801e2b8:	2b02      	cmp	r3, #2
 801e2ba:	d121      	bne.n	801e300 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	f06f 0202 	mvn.w	r2, #2
 801e2c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	2201      	movs	r2, #1
 801e2ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	681b      	ldr	r3, [r3, #0]
 801e2d0:	699b      	ldr	r3, [r3, #24]
 801e2d2:	f003 0303 	and.w	r3, r3, #3
 801e2d6:	2b00      	cmp	r3, #0
 801e2d8:	d005      	beq.n	801e2e6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e2e0:	6878      	ldr	r0, [r7, #4]
 801e2e2:	4798      	blx	r3
 801e2e4:	e009      	b.n	801e2fa <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e2ec:	6878      	ldr	r0, [r7, #4]
 801e2ee:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801e2f0:	687b      	ldr	r3, [r7, #4]
 801e2f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e2f6:	6878      	ldr	r0, [r7, #4]
 801e2f8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	691b      	ldr	r3, [r3, #16]
 801e306:	f003 0304 	and.w	r3, r3, #4
 801e30a:	2b04      	cmp	r3, #4
 801e30c:	d128      	bne.n	801e360 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	681b      	ldr	r3, [r3, #0]
 801e312:	68db      	ldr	r3, [r3, #12]
 801e314:	f003 0304 	and.w	r3, r3, #4
 801e318:	2b04      	cmp	r3, #4
 801e31a:	d121      	bne.n	801e360 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e31c:	687b      	ldr	r3, [r7, #4]
 801e31e:	681b      	ldr	r3, [r3, #0]
 801e320:	f06f 0204 	mvn.w	r2, #4
 801e324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e326:	687b      	ldr	r3, [r7, #4]
 801e328:	2202      	movs	r2, #2
 801e32a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	699b      	ldr	r3, [r3, #24]
 801e332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e336:	2b00      	cmp	r3, #0
 801e338:	d005      	beq.n	801e346 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e33a:	687b      	ldr	r3, [r7, #4]
 801e33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e340:	6878      	ldr	r0, [r7, #4]
 801e342:	4798      	blx	r3
 801e344:	e009      	b.n	801e35a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e34c:	6878      	ldr	r0, [r7, #4]
 801e34e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e356:	6878      	ldr	r0, [r7, #4]
 801e358:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	2200      	movs	r2, #0
 801e35e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	691b      	ldr	r3, [r3, #16]
 801e366:	f003 0308 	and.w	r3, r3, #8
 801e36a:	2b08      	cmp	r3, #8
 801e36c:	d128      	bne.n	801e3c0 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	68db      	ldr	r3, [r3, #12]
 801e374:	f003 0308 	and.w	r3, r3, #8
 801e378:	2b08      	cmp	r3, #8
 801e37a:	d121      	bne.n	801e3c0 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	f06f 0208 	mvn.w	r2, #8
 801e384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e386:	687b      	ldr	r3, [r7, #4]
 801e388:	2204      	movs	r2, #4
 801e38a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	69db      	ldr	r3, [r3, #28]
 801e392:	f003 0303 	and.w	r3, r3, #3
 801e396:	2b00      	cmp	r3, #0
 801e398:	d005      	beq.n	801e3a6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e3a0:	6878      	ldr	r0, [r7, #4]
 801e3a2:	4798      	blx	r3
 801e3a4:	e009      	b.n	801e3ba <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e3ac:	6878      	ldr	r0, [r7, #4]
 801e3ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e3b6:	6878      	ldr	r0, [r7, #4]
 801e3b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e3ba:	687b      	ldr	r3, [r7, #4]
 801e3bc:	2200      	movs	r2, #0
 801e3be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	691b      	ldr	r3, [r3, #16]
 801e3c6:	f003 0310 	and.w	r3, r3, #16
 801e3ca:	2b10      	cmp	r3, #16
 801e3cc:	d128      	bne.n	801e420 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e3ce:	687b      	ldr	r3, [r7, #4]
 801e3d0:	681b      	ldr	r3, [r3, #0]
 801e3d2:	68db      	ldr	r3, [r3, #12]
 801e3d4:	f003 0310 	and.w	r3, r3, #16
 801e3d8:	2b10      	cmp	r3, #16
 801e3da:	d121      	bne.n	801e420 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	681b      	ldr	r3, [r3, #0]
 801e3e0:	f06f 0210 	mvn.w	r2, #16
 801e3e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e3e6:	687b      	ldr	r3, [r7, #4]
 801e3e8:	2208      	movs	r2, #8
 801e3ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e3ec:	687b      	ldr	r3, [r7, #4]
 801e3ee:	681b      	ldr	r3, [r3, #0]
 801e3f0:	69db      	ldr	r3, [r3, #28]
 801e3f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e3f6:	2b00      	cmp	r3, #0
 801e3f8:	d005      	beq.n	801e406 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e400:	6878      	ldr	r0, [r7, #4]
 801e402:	4798      	blx	r3
 801e404:	e009      	b.n	801e41a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e406:	687b      	ldr	r3, [r7, #4]
 801e408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e40c:	6878      	ldr	r0, [r7, #4]
 801e40e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e410:	687b      	ldr	r3, [r7, #4]
 801e412:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e416:	6878      	ldr	r0, [r7, #4]
 801e418:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e41a:	687b      	ldr	r3, [r7, #4]
 801e41c:	2200      	movs	r2, #0
 801e41e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e420:	687b      	ldr	r3, [r7, #4]
 801e422:	681b      	ldr	r3, [r3, #0]
 801e424:	691b      	ldr	r3, [r3, #16]
 801e426:	f003 0301 	and.w	r3, r3, #1
 801e42a:	2b01      	cmp	r3, #1
 801e42c:	d110      	bne.n	801e450 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e42e:	687b      	ldr	r3, [r7, #4]
 801e430:	681b      	ldr	r3, [r3, #0]
 801e432:	68db      	ldr	r3, [r3, #12]
 801e434:	f003 0301 	and.w	r3, r3, #1
 801e438:	2b01      	cmp	r3, #1
 801e43a:	d109      	bne.n	801e450 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f06f 0201 	mvn.w	r2, #1
 801e444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e44c:	6878      	ldr	r0, [r7, #4]
 801e44e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	691b      	ldr	r3, [r3, #16]
 801e456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e45a:	2b80      	cmp	r3, #128	; 0x80
 801e45c:	d110      	bne.n	801e480 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	681b      	ldr	r3, [r3, #0]
 801e462:	68db      	ldr	r3, [r3, #12]
 801e464:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e468:	2b80      	cmp	r3, #128	; 0x80
 801e46a:	d109      	bne.n	801e480 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	681b      	ldr	r3, [r3, #0]
 801e470:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e474:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801e476:	687b      	ldr	r3, [r7, #4]
 801e478:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801e47c:	6878      	ldr	r0, [r7, #4]
 801e47e:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	691b      	ldr	r3, [r3, #16]
 801e486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e48a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e48e:	d110      	bne.n	801e4b2 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e490:	687b      	ldr	r3, [r7, #4]
 801e492:	681b      	ldr	r3, [r3, #0]
 801e494:	68db      	ldr	r3, [r3, #12]
 801e496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e49a:	2b80      	cmp	r3, #128	; 0x80
 801e49c:	d109      	bne.n	801e4b2 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801e4a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801e4ae:	6878      	ldr	r0, [r7, #4]
 801e4b0:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801e4b2:	687b      	ldr	r3, [r7, #4]
 801e4b4:	681b      	ldr	r3, [r3, #0]
 801e4b6:	691b      	ldr	r3, [r3, #16]
 801e4b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e4bc:	2b40      	cmp	r3, #64	; 0x40
 801e4be:	d110      	bne.n	801e4e2 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	68db      	ldr	r3, [r3, #12]
 801e4c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e4ca:	2b40      	cmp	r3, #64	; 0x40
 801e4cc:	d109      	bne.n	801e4e2 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	681b      	ldr	r3, [r3, #0]
 801e4d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801e4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801e4de:	6878      	ldr	r0, [r7, #4]
 801e4e0:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	691b      	ldr	r3, [r3, #16]
 801e4e8:	f003 0320 	and.w	r3, r3, #32
 801e4ec:	2b20      	cmp	r3, #32
 801e4ee:	d110      	bne.n	801e512 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	68db      	ldr	r3, [r3, #12]
 801e4f6:	f003 0320 	and.w	r3, r3, #32
 801e4fa:	2b20      	cmp	r3, #32
 801e4fc:	d109      	bne.n	801e512 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	681b      	ldr	r3, [r3, #0]
 801e502:	f06f 0220 	mvn.w	r2, #32
 801e506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801e50e:	6878      	ldr	r0, [r7, #4]
 801e510:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801e512:	bf00      	nop
 801e514:	3708      	adds	r7, #8
 801e516:	46bd      	mov	sp, r7
 801e518:	bd80      	pop	{r7, pc}
	...

0801e51c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801e51c:	b580      	push	{r7, lr}
 801e51e:	b082      	sub	sp, #8
 801e520:	af00      	add	r7, sp, #0
 801e522:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	2b00      	cmp	r3, #0
 801e528:	d101      	bne.n	801e52e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801e52a:	2301      	movs	r3, #1
 801e52c:	e04e      	b.n	801e5cc <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e532:	2b00      	cmp	r3, #0
 801e534:	d114      	bne.n	801e560 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801e536:	687b      	ldr	r3, [r7, #4]
 801e538:	2200      	movs	r2, #0
 801e53a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801e53e:	6878      	ldr	r0, [r7, #4]
 801e540:	f000 fc1c 	bl	801ed7c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801e544:	687b      	ldr	r3, [r7, #4]
 801e546:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d103      	bne.n	801e556 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801e54e:	687b      	ldr	r3, [r7, #4]
 801e550:	4a20      	ldr	r2, [pc, #128]	; (801e5d4 <HAL_UART_Init+0xb8>)
 801e552:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801e55c:	6878      	ldr	r0, [r7, #4]
 801e55e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801e560:	687b      	ldr	r3, [r7, #4]
 801e562:	2224      	movs	r2, #36	; 0x24
 801e564:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	681b      	ldr	r3, [r3, #0]
 801e56a:	681a      	ldr	r2, [r3, #0]
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	681b      	ldr	r3, [r3, #0]
 801e570:	f022 0201 	bic.w	r2, r2, #1
 801e574:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801e576:	6878      	ldr	r0, [r7, #4]
 801e578:	f000 fc46 	bl	801ee08 <UART_SetConfig>
 801e57c:	4603      	mov	r3, r0
 801e57e:	2b01      	cmp	r3, #1
 801e580:	d101      	bne.n	801e586 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801e582:	2301      	movs	r3, #1
 801e584:	e022      	b.n	801e5cc <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e58a:	2b00      	cmp	r3, #0
 801e58c:	d002      	beq.n	801e594 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801e58e:	6878      	ldr	r0, [r7, #4]
 801e590:	f000 fe9e 	bl	801f2d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	685a      	ldr	r2, [r3, #4]
 801e59a:	687b      	ldr	r3, [r7, #4]
 801e59c:	681b      	ldr	r3, [r3, #0]
 801e59e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801e5a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	681b      	ldr	r3, [r3, #0]
 801e5a8:	689a      	ldr	r2, [r3, #8]
 801e5aa:	687b      	ldr	r3, [r7, #4]
 801e5ac:	681b      	ldr	r3, [r3, #0]
 801e5ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801e5b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	681b      	ldr	r3, [r3, #0]
 801e5b8:	681a      	ldr	r2, [r3, #0]
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	f042 0201 	orr.w	r2, r2, #1
 801e5c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801e5c4:	6878      	ldr	r0, [r7, #4]
 801e5c6:	f000 ff25 	bl	801f414 <UART_CheckIdleState>
 801e5ca:	4603      	mov	r3, r0
}
 801e5cc:	4618      	mov	r0, r3
 801e5ce:	3708      	adds	r7, #8
 801e5d0:	46bd      	mov	sp, r7
 801e5d2:	bd80      	pop	{r7, pc}
 801e5d4:	08018005 	.word	0x08018005

0801e5d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801e5d8:	b580      	push	{r7, lr}
 801e5da:	b08a      	sub	sp, #40	; 0x28
 801e5dc:	af02      	add	r7, sp, #8
 801e5de:	60f8      	str	r0, [r7, #12]
 801e5e0:	60b9      	str	r1, [r7, #8]
 801e5e2:	603b      	str	r3, [r7, #0]
 801e5e4:	4613      	mov	r3, r2
 801e5e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801e5e8:	68fb      	ldr	r3, [r7, #12]
 801e5ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801e5ec:	2b20      	cmp	r3, #32
 801e5ee:	d171      	bne.n	801e6d4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801e5f0:	68bb      	ldr	r3, [r7, #8]
 801e5f2:	2b00      	cmp	r3, #0
 801e5f4:	d002      	beq.n	801e5fc <HAL_UART_Transmit+0x24>
 801e5f6:	88fb      	ldrh	r3, [r7, #6]
 801e5f8:	2b00      	cmp	r3, #0
 801e5fa:	d101      	bne.n	801e600 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801e5fc:	2301      	movs	r3, #1
 801e5fe:	e06a      	b.n	801e6d6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	2200      	movs	r2, #0
 801e604:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	2221      	movs	r2, #33	; 0x21
 801e60c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801e60e:	f7fa fb0f 	bl	8018c30 <HAL_GetTick>
 801e612:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801e614:	68fb      	ldr	r3, [r7, #12]
 801e616:	88fa      	ldrh	r2, [r7, #6]
 801e618:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801e61c:	68fb      	ldr	r3, [r7, #12]
 801e61e:	88fa      	ldrh	r2, [r7, #6]
 801e620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801e624:	68fb      	ldr	r3, [r7, #12]
 801e626:	689b      	ldr	r3, [r3, #8]
 801e628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801e62c:	d108      	bne.n	801e640 <HAL_UART_Transmit+0x68>
 801e62e:	68fb      	ldr	r3, [r7, #12]
 801e630:	691b      	ldr	r3, [r3, #16]
 801e632:	2b00      	cmp	r3, #0
 801e634:	d104      	bne.n	801e640 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801e636:	2300      	movs	r3, #0
 801e638:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801e63a:	68bb      	ldr	r3, [r7, #8]
 801e63c:	61bb      	str	r3, [r7, #24]
 801e63e:	e003      	b.n	801e648 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801e640:	68bb      	ldr	r3, [r7, #8]
 801e642:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801e644:	2300      	movs	r3, #0
 801e646:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801e648:	e02c      	b.n	801e6a4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801e64a:	683b      	ldr	r3, [r7, #0]
 801e64c:	9300      	str	r3, [sp, #0]
 801e64e:	697b      	ldr	r3, [r7, #20]
 801e650:	2200      	movs	r2, #0
 801e652:	2180      	movs	r1, #128	; 0x80
 801e654:	68f8      	ldr	r0, [r7, #12]
 801e656:	f000 ff2a 	bl	801f4ae <UART_WaitOnFlagUntilTimeout>
 801e65a:	4603      	mov	r3, r0
 801e65c:	2b00      	cmp	r3, #0
 801e65e:	d001      	beq.n	801e664 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801e660:	2303      	movs	r3, #3
 801e662:	e038      	b.n	801e6d6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801e664:	69fb      	ldr	r3, [r7, #28]
 801e666:	2b00      	cmp	r3, #0
 801e668:	d10b      	bne.n	801e682 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801e66a:	69bb      	ldr	r3, [r7, #24]
 801e66c:	881b      	ldrh	r3, [r3, #0]
 801e66e:	461a      	mov	r2, r3
 801e670:	68fb      	ldr	r3, [r7, #12]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801e678:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801e67a:	69bb      	ldr	r3, [r7, #24]
 801e67c:	3302      	adds	r3, #2
 801e67e:	61bb      	str	r3, [r7, #24]
 801e680:	e007      	b.n	801e692 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801e682:	69fb      	ldr	r3, [r7, #28]
 801e684:	781a      	ldrb	r2, [r3, #0]
 801e686:	68fb      	ldr	r3, [r7, #12]
 801e688:	681b      	ldr	r3, [r3, #0]
 801e68a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801e68c:	69fb      	ldr	r3, [r7, #28]
 801e68e:	3301      	adds	r3, #1
 801e690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801e698:	b29b      	uxth	r3, r3
 801e69a:	3b01      	subs	r3, #1
 801e69c:	b29a      	uxth	r2, r3
 801e69e:	68fb      	ldr	r3, [r7, #12]
 801e6a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801e6a4:	68fb      	ldr	r3, [r7, #12]
 801e6a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801e6aa:	b29b      	uxth	r3, r3
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d1cc      	bne.n	801e64a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801e6b0:	683b      	ldr	r3, [r7, #0]
 801e6b2:	9300      	str	r3, [sp, #0]
 801e6b4:	697b      	ldr	r3, [r7, #20]
 801e6b6:	2200      	movs	r2, #0
 801e6b8:	2140      	movs	r1, #64	; 0x40
 801e6ba:	68f8      	ldr	r0, [r7, #12]
 801e6bc:	f000 fef7 	bl	801f4ae <UART_WaitOnFlagUntilTimeout>
 801e6c0:	4603      	mov	r3, r0
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d001      	beq.n	801e6ca <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801e6c6:	2303      	movs	r3, #3
 801e6c8:	e005      	b.n	801e6d6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801e6ca:	68fb      	ldr	r3, [r7, #12]
 801e6cc:	2220      	movs	r2, #32
 801e6ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801e6d0:	2300      	movs	r3, #0
 801e6d2:	e000      	b.n	801e6d6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801e6d4:	2302      	movs	r3, #2
  }
}
 801e6d6:	4618      	mov	r0, r3
 801e6d8:	3720      	adds	r7, #32
 801e6da:	46bd      	mov	sp, r7
 801e6dc:	bd80      	pop	{r7, pc}
	...

0801e6e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801e6e0:	b580      	push	{r7, lr}
 801e6e2:	b0ba      	sub	sp, #232	; 0xe8
 801e6e4:	af00      	add	r7, sp, #0
 801e6e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	681b      	ldr	r3, [r3, #0]
 801e6ec:	69db      	ldr	r3, [r3, #28]
 801e6ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	681b      	ldr	r3, [r3, #0]
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	681b      	ldr	r3, [r3, #0]
 801e700:	689b      	ldr	r3, [r3, #8]
 801e702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801e706:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801e70a:	f640 030f 	movw	r3, #2063	; 0x80f
 801e70e:	4013      	ands	r3, r2
 801e710:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801e714:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e718:	2b00      	cmp	r3, #0
 801e71a:	d115      	bne.n	801e748 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801e71c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e720:	f003 0320 	and.w	r3, r3, #32
 801e724:	2b00      	cmp	r3, #0
 801e726:	d00f      	beq.n	801e748 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e72c:	f003 0320 	and.w	r3, r3, #32
 801e730:	2b00      	cmp	r3, #0
 801e732:	d009      	beq.n	801e748 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e738:	2b00      	cmp	r3, #0
 801e73a:	f000 82b8 	beq.w	801ecae <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801e73e:	687b      	ldr	r3, [r7, #4]
 801e740:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e742:	6878      	ldr	r0, [r7, #4]
 801e744:	4798      	blx	r3
      }
      return;
 801e746:	e2b2      	b.n	801ecae <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801e748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801e74c:	2b00      	cmp	r3, #0
 801e74e:	f000 811d 	beq.w	801e98c <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801e752:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e756:	f003 0301 	and.w	r3, r3, #1
 801e75a:	2b00      	cmp	r3, #0
 801e75c:	d106      	bne.n	801e76c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801e75e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801e762:	4b88      	ldr	r3, [pc, #544]	; (801e984 <HAL_UART_IRQHandler+0x2a4>)
 801e764:	4013      	ands	r3, r2
 801e766:	2b00      	cmp	r3, #0
 801e768:	f000 8110 	beq.w	801e98c <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801e76c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e770:	f003 0301 	and.w	r3, r3, #1
 801e774:	2b00      	cmp	r3, #0
 801e776:	d011      	beq.n	801e79c <HAL_UART_IRQHandler+0xbc>
 801e778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e780:	2b00      	cmp	r3, #0
 801e782:	d00b      	beq.n	801e79c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	681b      	ldr	r3, [r3, #0]
 801e788:	2201      	movs	r2, #1
 801e78a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e792:	f043 0201 	orr.w	r2, r3, #1
 801e796:	687b      	ldr	r3, [r7, #4]
 801e798:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e79c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e7a0:	f003 0302 	and.w	r3, r3, #2
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d011      	beq.n	801e7cc <HAL_UART_IRQHandler+0xec>
 801e7a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e7ac:	f003 0301 	and.w	r3, r3, #1
 801e7b0:	2b00      	cmp	r3, #0
 801e7b2:	d00b      	beq.n	801e7cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	2202      	movs	r2, #2
 801e7ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801e7bc:	687b      	ldr	r3, [r7, #4]
 801e7be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e7c2:	f043 0204 	orr.w	r2, r3, #4
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801e7cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e7d0:	f003 0304 	and.w	r3, r3, #4
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d011      	beq.n	801e7fc <HAL_UART_IRQHandler+0x11c>
 801e7d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e7dc:	f003 0301 	and.w	r3, r3, #1
 801e7e0:	2b00      	cmp	r3, #0
 801e7e2:	d00b      	beq.n	801e7fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801e7e4:	687b      	ldr	r3, [r7, #4]
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	2204      	movs	r2, #4
 801e7ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e7f2:	f043 0202 	orr.w	r2, r3, #2
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801e7fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e800:	f003 0308 	and.w	r3, r3, #8
 801e804:	2b00      	cmp	r3, #0
 801e806:	d017      	beq.n	801e838 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e80c:	f003 0320 	and.w	r3, r3, #32
 801e810:	2b00      	cmp	r3, #0
 801e812:	d105      	bne.n	801e820 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801e814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801e818:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801e81c:	2b00      	cmp	r3, #0
 801e81e:	d00b      	beq.n	801e838 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	2208      	movs	r2, #8
 801e826:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e82e:	f043 0208 	orr.w	r2, r3, #8
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801e838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e83c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801e840:	2b00      	cmp	r3, #0
 801e842:	d012      	beq.n	801e86a <HAL_UART_IRQHandler+0x18a>
 801e844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d00c      	beq.n	801e86a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801e850:	687b      	ldr	r3, [r7, #4]
 801e852:	681b      	ldr	r3, [r3, #0]
 801e854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801e858:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e860:	f043 0220 	orr.w	r2, r3, #32
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801e86a:	687b      	ldr	r3, [r7, #4]
 801e86c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e870:	2b00      	cmp	r3, #0
 801e872:	f000 821e 	beq.w	801ecb2 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801e876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e87a:	f003 0320 	and.w	r3, r3, #32
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d00d      	beq.n	801e89e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801e882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e886:	f003 0320 	and.w	r3, r3, #32
 801e88a:	2b00      	cmp	r3, #0
 801e88c:	d007      	beq.n	801e89e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801e88e:	687b      	ldr	r3, [r7, #4]
 801e890:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e892:	2b00      	cmp	r3, #0
 801e894:	d003      	beq.n	801e89e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801e89a:	6878      	ldr	r0, [r7, #4]
 801e89c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801e89e:	687b      	ldr	r3, [r7, #4]
 801e8a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e8a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	681b      	ldr	r3, [r3, #0]
 801e8ac:	689b      	ldr	r3, [r3, #8]
 801e8ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e8b2:	2b40      	cmp	r3, #64	; 0x40
 801e8b4:	d005      	beq.n	801e8c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801e8b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801e8ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	d053      	beq.n	801e96a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801e8c2:	6878      	ldr	r0, [r7, #4]
 801e8c4:	f000 ff80 	bl	801f7c8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e8c8:	687b      	ldr	r3, [r7, #4]
 801e8ca:	681b      	ldr	r3, [r3, #0]
 801e8cc:	689b      	ldr	r3, [r3, #8]
 801e8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e8d2:	2b40      	cmp	r3, #64	; 0x40
 801e8d4:	d143      	bne.n	801e95e <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801e8d6:	687b      	ldr	r3, [r7, #4]
 801e8d8:	681b      	ldr	r3, [r3, #0]
 801e8da:	3308      	adds	r3, #8
 801e8dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801e8e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801e8e4:	e853 3f00 	ldrex	r3, [r3]
 801e8e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801e8ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801e8f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801e8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801e8f8:	687b      	ldr	r3, [r7, #4]
 801e8fa:	681b      	ldr	r3, [r3, #0]
 801e8fc:	3308      	adds	r3, #8
 801e8fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801e902:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801e906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801e90a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801e90e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801e912:	e841 2300 	strex	r3, r2, [r1]
 801e916:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801e91a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d1d9      	bne.n	801e8d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e926:	2b00      	cmp	r3, #0
 801e928:	d013      	beq.n	801e952 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e92e:	4a16      	ldr	r2, [pc, #88]	; (801e988 <HAL_UART_IRQHandler+0x2a8>)
 801e930:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e936:	4618      	mov	r0, r3
 801e938:	f7fb f98a 	bl	8019c50 <HAL_DMA_Abort_IT>
 801e93c:	4603      	mov	r3, r0
 801e93e:	2b00      	cmp	r3, #0
 801e940:	d01d      	beq.n	801e97e <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e948:	687a      	ldr	r2, [r7, #4]
 801e94a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801e94c:	4610      	mov	r0, r2
 801e94e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e950:	e015      	b.n	801e97e <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e958:	6878      	ldr	r0, [r7, #4]
 801e95a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e95c:	e00f      	b.n	801e97e <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e968:	e009      	b.n	801e97e <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801e970:	6878      	ldr	r0, [r7, #4]
 801e972:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	2200      	movs	r2, #0
 801e978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801e97c:	e199      	b.n	801ecb2 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e97e:	bf00      	nop
    return;
 801e980:	e197      	b.n	801ecb2 <HAL_UART_IRQHandler+0x5d2>
 801e982:	bf00      	nop
 801e984:	04000120 	.word	0x04000120
 801e988:	0801f891 	.word	0x0801f891

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e990:	2b01      	cmp	r3, #1
 801e992:	f040 8150 	bne.w	801ec36 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801e996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801e99a:	f003 0310 	and.w	r3, r3, #16
 801e99e:	2b00      	cmp	r3, #0
 801e9a0:	f000 8149 	beq.w	801ec36 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801e9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801e9a8:	f003 0310 	and.w	r3, r3, #16
 801e9ac:	2b00      	cmp	r3, #0
 801e9ae:	f000 8142 	beq.w	801ec36 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801e9b2:	687b      	ldr	r3, [r7, #4]
 801e9b4:	681b      	ldr	r3, [r3, #0]
 801e9b6:	2210      	movs	r2, #16
 801e9b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	689b      	ldr	r3, [r3, #8]
 801e9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e9c4:	2b40      	cmp	r3, #64	; 0x40
 801e9c6:	f040 80b8 	bne.w	801eb3a <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e9ce:	681b      	ldr	r3, [r3, #0]
 801e9d0:	685b      	ldr	r3, [r3, #4]
 801e9d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801e9d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801e9da:	2b00      	cmp	r3, #0
 801e9dc:	f000 816b 	beq.w	801ecb6 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801e9e0:	687b      	ldr	r3, [r7, #4]
 801e9e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801e9e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e9ea:	429a      	cmp	r2, r3
 801e9ec:	f080 8163 	bcs.w	801ecb6 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801e9f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801e9fa:	687b      	ldr	r3, [r7, #4]
 801e9fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801e9fe:	69db      	ldr	r3, [r3, #28]
 801ea00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ea04:	f000 8086 	beq.w	801eb14 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ea08:	687b      	ldr	r3, [r7, #4]
 801ea0a:	681b      	ldr	r3, [r3, #0]
 801ea0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ea14:	e853 3f00 	ldrex	r3, [r3]
 801ea18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801ea1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ea20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ea24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ea28:	687b      	ldr	r3, [r7, #4]
 801ea2a:	681b      	ldr	r3, [r3, #0]
 801ea2c:	461a      	mov	r2, r3
 801ea2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ea32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ea36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801ea3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801ea42:	e841 2300 	strex	r3, r2, [r1]
 801ea46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801ea4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d1da      	bne.n	801ea08 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	681b      	ldr	r3, [r3, #0]
 801ea56:	3308      	adds	r3, #8
 801ea58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801ea5c:	e853 3f00 	ldrex	r3, [r3]
 801ea60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801ea62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ea64:	f023 0301 	bic.w	r3, r3, #1
 801ea68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	681b      	ldr	r3, [r3, #0]
 801ea70:	3308      	adds	r3, #8
 801ea72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801ea76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801ea7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ea7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801ea7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801ea82:	e841 2300 	strex	r3, r2, [r1]
 801ea86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801ea88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d1e1      	bne.n	801ea52 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	681b      	ldr	r3, [r3, #0]
 801ea92:	3308      	adds	r3, #8
 801ea94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ea96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ea98:	e853 3f00 	ldrex	r3, [r3]
 801ea9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801ea9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eaa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801eaa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	681b      	ldr	r3, [r3, #0]
 801eaac:	3308      	adds	r3, #8
 801eaae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801eab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 801eab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801eab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801eaba:	e841 2300 	strex	r3, r2, [r1]
 801eabe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801eac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d1e3      	bne.n	801ea8e <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	2220      	movs	r2, #32
 801eaca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	2200      	movs	r2, #0
 801ead2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ead4:	687b      	ldr	r3, [r7, #4]
 801ead6:	681b      	ldr	r3, [r3, #0]
 801ead8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801eadc:	e853 3f00 	ldrex	r3, [r3]
 801eae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801eae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801eae4:	f023 0310 	bic.w	r3, r3, #16
 801eae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801eaec:	687b      	ldr	r3, [r7, #4]
 801eaee:	681b      	ldr	r3, [r3, #0]
 801eaf0:	461a      	mov	r2, r3
 801eaf2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801eaf6:	65bb      	str	r3, [r7, #88]	; 0x58
 801eaf8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eafa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801eafc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801eafe:	e841 2300 	strex	r3, r2, [r1]
 801eb02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801eb04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801eb06:	2b00      	cmp	r3, #0
 801eb08:	d1e4      	bne.n	801ead4 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801eb0e:	4618      	mov	r0, r3
 801eb10:	f7fb f82e 	bl	8019b70 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801eb14:	687b      	ldr	r3, [r7, #4]
 801eb16:	2202      	movs	r2, #2
 801eb18:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801eb1a:	687b      	ldr	r3, [r7, #4]
 801eb1c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801eb20:	687a      	ldr	r2, [r7, #4]
 801eb22:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801eb26:	687a      	ldr	r2, [r7, #4]
 801eb28:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801eb2c:	b292      	uxth	r2, r2
 801eb2e:	1a8a      	subs	r2, r1, r2
 801eb30:	b292      	uxth	r2, r2
 801eb32:	4611      	mov	r1, r2
 801eb34:	6878      	ldr	r0, [r7, #4]
 801eb36:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801eb38:	e0bd      	b.n	801ecb6 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801eb46:	b29b      	uxth	r3, r3
 801eb48:	1ad3      	subs	r3, r2, r3
 801eb4a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801eb4e:	687b      	ldr	r3, [r7, #4]
 801eb50:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801eb54:	b29b      	uxth	r3, r3
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	f000 80af 	beq.w	801ecba <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801eb5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801eb60:	2b00      	cmp	r3, #0
 801eb62:	f000 80aa 	beq.w	801ecba <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801eb66:	687b      	ldr	r3, [r7, #4]
 801eb68:	681b      	ldr	r3, [r3, #0]
 801eb6a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801eb6e:	e853 3f00 	ldrex	r3, [r3]
 801eb72:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801eb74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eb76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801eb7a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	461a      	mov	r2, r3
 801eb84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801eb88:	647b      	str	r3, [r7, #68]	; 0x44
 801eb8a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801eb8c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801eb8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801eb90:	e841 2300 	strex	r3, r2, [r1]
 801eb94:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801eb96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d1e4      	bne.n	801eb66 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	3308      	adds	r3, #8
 801eba2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801eba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba6:	e853 3f00 	ldrex	r3, [r3]
 801ebaa:	623b      	str	r3, [r7, #32]
   return(result);
 801ebac:	6a3b      	ldr	r3, [r7, #32]
 801ebae:	f023 0301 	bic.w	r3, r3, #1
 801ebb2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801ebb6:	687b      	ldr	r3, [r7, #4]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	3308      	adds	r3, #8
 801ebbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801ebc0:	633a      	str	r2, [r7, #48]	; 0x30
 801ebc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ebc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ebc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ebc8:	e841 2300 	strex	r3, r2, [r1]
 801ebcc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801ebce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ebd0:	2b00      	cmp	r3, #0
 801ebd2:	d1e3      	bne.n	801eb9c <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	2220      	movs	r2, #32
 801ebd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	2200      	movs	r2, #0
 801ebe0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	2200      	movs	r2, #0
 801ebe6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ebe8:	687b      	ldr	r3, [r7, #4]
 801ebea:	681b      	ldr	r3, [r3, #0]
 801ebec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ebee:	693b      	ldr	r3, [r7, #16]
 801ebf0:	e853 3f00 	ldrex	r3, [r3]
 801ebf4:	60fb      	str	r3, [r7, #12]
   return(result);
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	f023 0310 	bic.w	r3, r3, #16
 801ebfc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801ec00:	687b      	ldr	r3, [r7, #4]
 801ec02:	681b      	ldr	r3, [r3, #0]
 801ec04:	461a      	mov	r2, r3
 801ec06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801ec0a:	61fb      	str	r3, [r7, #28]
 801ec0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ec0e:	69b9      	ldr	r1, [r7, #24]
 801ec10:	69fa      	ldr	r2, [r7, #28]
 801ec12:	e841 2300 	strex	r3, r2, [r1]
 801ec16:	617b      	str	r3, [r7, #20]
   return(result);
 801ec18:	697b      	ldr	r3, [r7, #20]
 801ec1a:	2b00      	cmp	r3, #0
 801ec1c:	d1e4      	bne.n	801ebe8 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801ec1e:	687b      	ldr	r3, [r7, #4]
 801ec20:	2202      	movs	r2, #2
 801ec22:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ec2a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801ec2e:	4611      	mov	r1, r2
 801ec30:	6878      	ldr	r0, [r7, #4]
 801ec32:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ec34:	e041      	b.n	801ecba <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801ec36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ec3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d010      	beq.n	801ec64 <HAL_UART_IRQHandler+0x584>
 801ec42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ec46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d00a      	beq.n	801ec64 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801ec4e:	687b      	ldr	r3, [r7, #4]
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801ec56:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801ec58:	687b      	ldr	r3, [r7, #4]
 801ec5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ec5e:	6878      	ldr	r0, [r7, #4]
 801ec60:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ec62:	e02d      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801ec64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ec68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d00e      	beq.n	801ec8e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801ec70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ec74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ec78:	2b00      	cmp	r3, #0
 801ec7a:	d008      	beq.n	801ec8e <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801ec7c:	687b      	ldr	r3, [r7, #4]
 801ec7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d01c      	beq.n	801ecbe <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801ec84:	687b      	ldr	r3, [r7, #4]
 801ec86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ec88:	6878      	ldr	r0, [r7, #4]
 801ec8a:	4798      	blx	r3
    }
    return;
 801ec8c:	e017      	b.n	801ecbe <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ec8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ec92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ec96:	2b00      	cmp	r3, #0
 801ec98:	d012      	beq.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
 801ec9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ec9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801eca2:	2b00      	cmp	r3, #0
 801eca4:	d00c      	beq.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801eca6:	6878      	ldr	r0, [r7, #4]
 801eca8:	f000 fe0a 	bl	801f8c0 <UART_EndTransmit_IT>
    return;
 801ecac:	e008      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801ecae:	bf00      	nop
 801ecb0:	e006      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
    return;
 801ecb2:	bf00      	nop
 801ecb4:	e004      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801ecb6:	bf00      	nop
 801ecb8:	e002      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
      return;
 801ecba:	bf00      	nop
 801ecbc:	e000      	b.n	801ecc0 <HAL_UART_IRQHandler+0x5e0>
    return;
 801ecbe:	bf00      	nop
  }

}
 801ecc0:	37e8      	adds	r7, #232	; 0xe8
 801ecc2:	46bd      	mov	sp, r7
 801ecc4:	bd80      	pop	{r7, pc}
 801ecc6:	bf00      	nop

0801ecc8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801ecc8:	b480      	push	{r7}
 801ecca:	b083      	sub	sp, #12
 801eccc:	af00      	add	r7, sp, #0
 801ecce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801ecd0:	bf00      	nop
 801ecd2:	370c      	adds	r7, #12
 801ecd4:	46bd      	mov	sp, r7
 801ecd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecda:	4770      	bx	lr

0801ecdc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ecdc:	b480      	push	{r7}
 801ecde:	b083      	sub	sp, #12
 801ece0:	af00      	add	r7, sp, #0
 801ece2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801ece4:	bf00      	nop
 801ece6:	370c      	adds	r7, #12
 801ece8:	46bd      	mov	sp, r7
 801ecea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ecee:	4770      	bx	lr

0801ecf0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801ecf0:	b480      	push	{r7}
 801ecf2:	b083      	sub	sp, #12
 801ecf4:	af00      	add	r7, sp, #0
 801ecf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801ecf8:	bf00      	nop
 801ecfa:	370c      	adds	r7, #12
 801ecfc:	46bd      	mov	sp, r7
 801ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed02:	4770      	bx	lr

0801ed04 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801ed04:	b480      	push	{r7}
 801ed06:	b083      	sub	sp, #12
 801ed08:	af00      	add	r7, sp, #0
 801ed0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801ed0c:	bf00      	nop
 801ed0e:	370c      	adds	r7, #12
 801ed10:	46bd      	mov	sp, r7
 801ed12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed16:	4770      	bx	lr

0801ed18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801ed18:	b480      	push	{r7}
 801ed1a:	b083      	sub	sp, #12
 801ed1c:	af00      	add	r7, sp, #0
 801ed1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801ed20:	bf00      	nop
 801ed22:	370c      	adds	r7, #12
 801ed24:	46bd      	mov	sp, r7
 801ed26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed2a:	4770      	bx	lr

0801ed2c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801ed2c:	b480      	push	{r7}
 801ed2e:	b083      	sub	sp, #12
 801ed30:	af00      	add	r7, sp, #0
 801ed32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801ed34:	bf00      	nop
 801ed36:	370c      	adds	r7, #12
 801ed38:	46bd      	mov	sp, r7
 801ed3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed3e:	4770      	bx	lr

0801ed40 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801ed40:	b480      	push	{r7}
 801ed42:	b083      	sub	sp, #12
 801ed44:	af00      	add	r7, sp, #0
 801ed46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801ed48:	bf00      	nop
 801ed4a:	370c      	adds	r7, #12
 801ed4c:	46bd      	mov	sp, r7
 801ed4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed52:	4770      	bx	lr

0801ed54 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801ed54:	b480      	push	{r7}
 801ed56:	b083      	sub	sp, #12
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801ed5c:	bf00      	nop
 801ed5e:	370c      	adds	r7, #12
 801ed60:	46bd      	mov	sp, r7
 801ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed66:	4770      	bx	lr

0801ed68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801ed68:	b480      	push	{r7}
 801ed6a:	b083      	sub	sp, #12
 801ed6c:	af00      	add	r7, sp, #0
 801ed6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801ed70:	bf00      	nop
 801ed72:	370c      	adds	r7, #12
 801ed74:	46bd      	mov	sp, r7
 801ed76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ed7a:	4770      	bx	lr

0801ed7c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801ed7c:	b480      	push	{r7}
 801ed7e:	b083      	sub	sp, #12
 801ed80:	af00      	add	r7, sp, #0
 801ed82:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	4a16      	ldr	r2, [pc, #88]	; (801ede0 <UART_InitCallbacksToDefault+0x64>)
 801ed88:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	4a15      	ldr	r2, [pc, #84]	; (801ede4 <UART_InitCallbacksToDefault+0x68>)
 801ed90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801ed94:	687b      	ldr	r3, [r7, #4]
 801ed96:	4a14      	ldr	r2, [pc, #80]	; (801ede8 <UART_InitCallbacksToDefault+0x6c>)
 801ed98:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801ed9c:	687b      	ldr	r3, [r7, #4]
 801ed9e:	4a13      	ldr	r2, [pc, #76]	; (801edec <UART_InitCallbacksToDefault+0x70>)
 801eda0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	4a12      	ldr	r2, [pc, #72]	; (801edf0 <UART_InitCallbacksToDefault+0x74>)
 801eda8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	4a11      	ldr	r2, [pc, #68]	; (801edf4 <UART_InitCallbacksToDefault+0x78>)
 801edb0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	4a10      	ldr	r2, [pc, #64]	; (801edf8 <UART_InitCallbacksToDefault+0x7c>)
 801edb8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	4a0f      	ldr	r2, [pc, #60]	; (801edfc <UART_InitCallbacksToDefault+0x80>)
 801edc0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	4a0e      	ldr	r2, [pc, #56]	; (801ee00 <UART_InitCallbacksToDefault+0x84>)
 801edc8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	4a0d      	ldr	r2, [pc, #52]	; (801ee04 <UART_InitCallbacksToDefault+0x88>)
 801edd0:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801edd4:	bf00      	nop
 801edd6:	370c      	adds	r7, #12
 801edd8:	46bd      	mov	sp, r7
 801edda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801edde:	4770      	bx	lr
 801ede0:	0801ecdd 	.word	0x0801ecdd
 801ede4:	0801ecc9 	.word	0x0801ecc9
 801ede8:	0801ed05 	.word	0x0801ed05
 801edec:	0801ecf1 	.word	0x0801ecf1
 801edf0:	0801ed19 	.word	0x0801ed19
 801edf4:	0801ed2d 	.word	0x0801ed2d
 801edf8:	0801ed41 	.word	0x0801ed41
 801edfc:	0801ed55 	.word	0x0801ed55
 801ee00:	0801ed69 	.word	0x0801ed69
 801ee04:	08018369 	.word	0x08018369

0801ee08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801ee08:	b580      	push	{r7, lr}
 801ee0a:	b088      	sub	sp, #32
 801ee0c:	af00      	add	r7, sp, #0
 801ee0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801ee10:	2300      	movs	r3, #0
 801ee12:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	689a      	ldr	r2, [r3, #8]
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	691b      	ldr	r3, [r3, #16]
 801ee1c:	431a      	orrs	r2, r3
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	695b      	ldr	r3, [r3, #20]
 801ee22:	431a      	orrs	r2, r3
 801ee24:	687b      	ldr	r3, [r7, #4]
 801ee26:	69db      	ldr	r3, [r3, #28]
 801ee28:	4313      	orrs	r3, r2
 801ee2a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	681a      	ldr	r2, [r3, #0]
 801ee32:	4ba6      	ldr	r3, [pc, #664]	; (801f0cc <UART_SetConfig+0x2c4>)
 801ee34:	4013      	ands	r3, r2
 801ee36:	687a      	ldr	r2, [r7, #4]
 801ee38:	6812      	ldr	r2, [r2, #0]
 801ee3a:	6979      	ldr	r1, [r7, #20]
 801ee3c:	430b      	orrs	r3, r1
 801ee3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	681b      	ldr	r3, [r3, #0]
 801ee44:	685b      	ldr	r3, [r3, #4]
 801ee46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	68da      	ldr	r2, [r3, #12]
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	430a      	orrs	r2, r1
 801ee54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	699b      	ldr	r3, [r3, #24]
 801ee5a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	6a1b      	ldr	r3, [r3, #32]
 801ee60:	697a      	ldr	r2, [r7, #20]
 801ee62:	4313      	orrs	r3, r2
 801ee64:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	681b      	ldr	r3, [r3, #0]
 801ee6a:	689b      	ldr	r3, [r3, #8]
 801ee6c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	697a      	ldr	r2, [r7, #20]
 801ee76:	430a      	orrs	r2, r1
 801ee78:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	4a94      	ldr	r2, [pc, #592]	; (801f0d0 <UART_SetConfig+0x2c8>)
 801ee80:	4293      	cmp	r3, r2
 801ee82:	d120      	bne.n	801eec6 <UART_SetConfig+0xbe>
 801ee84:	4b93      	ldr	r3, [pc, #588]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801ee86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ee8a:	f003 0303 	and.w	r3, r3, #3
 801ee8e:	2b03      	cmp	r3, #3
 801ee90:	d816      	bhi.n	801eec0 <UART_SetConfig+0xb8>
 801ee92:	a201      	add	r2, pc, #4	; (adr r2, 801ee98 <UART_SetConfig+0x90>)
 801ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ee98:	0801eea9 	.word	0x0801eea9
 801ee9c:	0801eeb5 	.word	0x0801eeb5
 801eea0:	0801eeaf 	.word	0x0801eeaf
 801eea4:	0801eebb 	.word	0x0801eebb
 801eea8:	2301      	movs	r3, #1
 801eeaa:	77fb      	strb	r3, [r7, #31]
 801eeac:	e150      	b.n	801f150 <UART_SetConfig+0x348>
 801eeae:	2302      	movs	r3, #2
 801eeb0:	77fb      	strb	r3, [r7, #31]
 801eeb2:	e14d      	b.n	801f150 <UART_SetConfig+0x348>
 801eeb4:	2304      	movs	r3, #4
 801eeb6:	77fb      	strb	r3, [r7, #31]
 801eeb8:	e14a      	b.n	801f150 <UART_SetConfig+0x348>
 801eeba:	2308      	movs	r3, #8
 801eebc:	77fb      	strb	r3, [r7, #31]
 801eebe:	e147      	b.n	801f150 <UART_SetConfig+0x348>
 801eec0:	2310      	movs	r3, #16
 801eec2:	77fb      	strb	r3, [r7, #31]
 801eec4:	e144      	b.n	801f150 <UART_SetConfig+0x348>
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	681b      	ldr	r3, [r3, #0]
 801eeca:	4a83      	ldr	r2, [pc, #524]	; (801f0d8 <UART_SetConfig+0x2d0>)
 801eecc:	4293      	cmp	r3, r2
 801eece:	d132      	bne.n	801ef36 <UART_SetConfig+0x12e>
 801eed0:	4b80      	ldr	r3, [pc, #512]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801eed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801eed6:	f003 030c 	and.w	r3, r3, #12
 801eeda:	2b0c      	cmp	r3, #12
 801eedc:	d828      	bhi.n	801ef30 <UART_SetConfig+0x128>
 801eede:	a201      	add	r2, pc, #4	; (adr r2, 801eee4 <UART_SetConfig+0xdc>)
 801eee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eee4:	0801ef19 	.word	0x0801ef19
 801eee8:	0801ef31 	.word	0x0801ef31
 801eeec:	0801ef31 	.word	0x0801ef31
 801eef0:	0801ef31 	.word	0x0801ef31
 801eef4:	0801ef25 	.word	0x0801ef25
 801eef8:	0801ef31 	.word	0x0801ef31
 801eefc:	0801ef31 	.word	0x0801ef31
 801ef00:	0801ef31 	.word	0x0801ef31
 801ef04:	0801ef1f 	.word	0x0801ef1f
 801ef08:	0801ef31 	.word	0x0801ef31
 801ef0c:	0801ef31 	.word	0x0801ef31
 801ef10:	0801ef31 	.word	0x0801ef31
 801ef14:	0801ef2b 	.word	0x0801ef2b
 801ef18:	2300      	movs	r3, #0
 801ef1a:	77fb      	strb	r3, [r7, #31]
 801ef1c:	e118      	b.n	801f150 <UART_SetConfig+0x348>
 801ef1e:	2302      	movs	r3, #2
 801ef20:	77fb      	strb	r3, [r7, #31]
 801ef22:	e115      	b.n	801f150 <UART_SetConfig+0x348>
 801ef24:	2304      	movs	r3, #4
 801ef26:	77fb      	strb	r3, [r7, #31]
 801ef28:	e112      	b.n	801f150 <UART_SetConfig+0x348>
 801ef2a:	2308      	movs	r3, #8
 801ef2c:	77fb      	strb	r3, [r7, #31]
 801ef2e:	e10f      	b.n	801f150 <UART_SetConfig+0x348>
 801ef30:	2310      	movs	r3, #16
 801ef32:	77fb      	strb	r3, [r7, #31]
 801ef34:	e10c      	b.n	801f150 <UART_SetConfig+0x348>
 801ef36:	687b      	ldr	r3, [r7, #4]
 801ef38:	681b      	ldr	r3, [r3, #0]
 801ef3a:	4a68      	ldr	r2, [pc, #416]	; (801f0dc <UART_SetConfig+0x2d4>)
 801ef3c:	4293      	cmp	r3, r2
 801ef3e:	d120      	bne.n	801ef82 <UART_SetConfig+0x17a>
 801ef40:	4b64      	ldr	r3, [pc, #400]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801ef42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ef46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801ef4a:	2b30      	cmp	r3, #48	; 0x30
 801ef4c:	d013      	beq.n	801ef76 <UART_SetConfig+0x16e>
 801ef4e:	2b30      	cmp	r3, #48	; 0x30
 801ef50:	d814      	bhi.n	801ef7c <UART_SetConfig+0x174>
 801ef52:	2b20      	cmp	r3, #32
 801ef54:	d009      	beq.n	801ef6a <UART_SetConfig+0x162>
 801ef56:	2b20      	cmp	r3, #32
 801ef58:	d810      	bhi.n	801ef7c <UART_SetConfig+0x174>
 801ef5a:	2b00      	cmp	r3, #0
 801ef5c:	d002      	beq.n	801ef64 <UART_SetConfig+0x15c>
 801ef5e:	2b10      	cmp	r3, #16
 801ef60:	d006      	beq.n	801ef70 <UART_SetConfig+0x168>
 801ef62:	e00b      	b.n	801ef7c <UART_SetConfig+0x174>
 801ef64:	2300      	movs	r3, #0
 801ef66:	77fb      	strb	r3, [r7, #31]
 801ef68:	e0f2      	b.n	801f150 <UART_SetConfig+0x348>
 801ef6a:	2302      	movs	r3, #2
 801ef6c:	77fb      	strb	r3, [r7, #31]
 801ef6e:	e0ef      	b.n	801f150 <UART_SetConfig+0x348>
 801ef70:	2304      	movs	r3, #4
 801ef72:	77fb      	strb	r3, [r7, #31]
 801ef74:	e0ec      	b.n	801f150 <UART_SetConfig+0x348>
 801ef76:	2308      	movs	r3, #8
 801ef78:	77fb      	strb	r3, [r7, #31]
 801ef7a:	e0e9      	b.n	801f150 <UART_SetConfig+0x348>
 801ef7c:	2310      	movs	r3, #16
 801ef7e:	77fb      	strb	r3, [r7, #31]
 801ef80:	e0e6      	b.n	801f150 <UART_SetConfig+0x348>
 801ef82:	687b      	ldr	r3, [r7, #4]
 801ef84:	681b      	ldr	r3, [r3, #0]
 801ef86:	4a56      	ldr	r2, [pc, #344]	; (801f0e0 <UART_SetConfig+0x2d8>)
 801ef88:	4293      	cmp	r3, r2
 801ef8a:	d120      	bne.n	801efce <UART_SetConfig+0x1c6>
 801ef8c:	4b51      	ldr	r3, [pc, #324]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801ef8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801ef92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801ef96:	2bc0      	cmp	r3, #192	; 0xc0
 801ef98:	d013      	beq.n	801efc2 <UART_SetConfig+0x1ba>
 801ef9a:	2bc0      	cmp	r3, #192	; 0xc0
 801ef9c:	d814      	bhi.n	801efc8 <UART_SetConfig+0x1c0>
 801ef9e:	2b80      	cmp	r3, #128	; 0x80
 801efa0:	d009      	beq.n	801efb6 <UART_SetConfig+0x1ae>
 801efa2:	2b80      	cmp	r3, #128	; 0x80
 801efa4:	d810      	bhi.n	801efc8 <UART_SetConfig+0x1c0>
 801efa6:	2b00      	cmp	r3, #0
 801efa8:	d002      	beq.n	801efb0 <UART_SetConfig+0x1a8>
 801efaa:	2b40      	cmp	r3, #64	; 0x40
 801efac:	d006      	beq.n	801efbc <UART_SetConfig+0x1b4>
 801efae:	e00b      	b.n	801efc8 <UART_SetConfig+0x1c0>
 801efb0:	2300      	movs	r3, #0
 801efb2:	77fb      	strb	r3, [r7, #31]
 801efb4:	e0cc      	b.n	801f150 <UART_SetConfig+0x348>
 801efb6:	2302      	movs	r3, #2
 801efb8:	77fb      	strb	r3, [r7, #31]
 801efba:	e0c9      	b.n	801f150 <UART_SetConfig+0x348>
 801efbc:	2304      	movs	r3, #4
 801efbe:	77fb      	strb	r3, [r7, #31]
 801efc0:	e0c6      	b.n	801f150 <UART_SetConfig+0x348>
 801efc2:	2308      	movs	r3, #8
 801efc4:	77fb      	strb	r3, [r7, #31]
 801efc6:	e0c3      	b.n	801f150 <UART_SetConfig+0x348>
 801efc8:	2310      	movs	r3, #16
 801efca:	77fb      	strb	r3, [r7, #31]
 801efcc:	e0c0      	b.n	801f150 <UART_SetConfig+0x348>
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	4a44      	ldr	r2, [pc, #272]	; (801f0e4 <UART_SetConfig+0x2dc>)
 801efd4:	4293      	cmp	r3, r2
 801efd6:	d125      	bne.n	801f024 <UART_SetConfig+0x21c>
 801efd8:	4b3e      	ldr	r3, [pc, #248]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801efda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801efde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801efe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801efe6:	d017      	beq.n	801f018 <UART_SetConfig+0x210>
 801efe8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801efec:	d817      	bhi.n	801f01e <UART_SetConfig+0x216>
 801efee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eff2:	d00b      	beq.n	801f00c <UART_SetConfig+0x204>
 801eff4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801eff8:	d811      	bhi.n	801f01e <UART_SetConfig+0x216>
 801effa:	2b00      	cmp	r3, #0
 801effc:	d003      	beq.n	801f006 <UART_SetConfig+0x1fe>
 801effe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f002:	d006      	beq.n	801f012 <UART_SetConfig+0x20a>
 801f004:	e00b      	b.n	801f01e <UART_SetConfig+0x216>
 801f006:	2300      	movs	r3, #0
 801f008:	77fb      	strb	r3, [r7, #31]
 801f00a:	e0a1      	b.n	801f150 <UART_SetConfig+0x348>
 801f00c:	2302      	movs	r3, #2
 801f00e:	77fb      	strb	r3, [r7, #31]
 801f010:	e09e      	b.n	801f150 <UART_SetConfig+0x348>
 801f012:	2304      	movs	r3, #4
 801f014:	77fb      	strb	r3, [r7, #31]
 801f016:	e09b      	b.n	801f150 <UART_SetConfig+0x348>
 801f018:	2308      	movs	r3, #8
 801f01a:	77fb      	strb	r3, [r7, #31]
 801f01c:	e098      	b.n	801f150 <UART_SetConfig+0x348>
 801f01e:	2310      	movs	r3, #16
 801f020:	77fb      	strb	r3, [r7, #31]
 801f022:	e095      	b.n	801f150 <UART_SetConfig+0x348>
 801f024:	687b      	ldr	r3, [r7, #4]
 801f026:	681b      	ldr	r3, [r3, #0]
 801f028:	4a2f      	ldr	r2, [pc, #188]	; (801f0e8 <UART_SetConfig+0x2e0>)
 801f02a:	4293      	cmp	r3, r2
 801f02c:	d125      	bne.n	801f07a <UART_SetConfig+0x272>
 801f02e:	4b29      	ldr	r3, [pc, #164]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801f030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f03c:	d017      	beq.n	801f06e <UART_SetConfig+0x266>
 801f03e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f042:	d817      	bhi.n	801f074 <UART_SetConfig+0x26c>
 801f044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f048:	d00b      	beq.n	801f062 <UART_SetConfig+0x25a>
 801f04a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f04e:	d811      	bhi.n	801f074 <UART_SetConfig+0x26c>
 801f050:	2b00      	cmp	r3, #0
 801f052:	d003      	beq.n	801f05c <UART_SetConfig+0x254>
 801f054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f058:	d006      	beq.n	801f068 <UART_SetConfig+0x260>
 801f05a:	e00b      	b.n	801f074 <UART_SetConfig+0x26c>
 801f05c:	2301      	movs	r3, #1
 801f05e:	77fb      	strb	r3, [r7, #31]
 801f060:	e076      	b.n	801f150 <UART_SetConfig+0x348>
 801f062:	2302      	movs	r3, #2
 801f064:	77fb      	strb	r3, [r7, #31]
 801f066:	e073      	b.n	801f150 <UART_SetConfig+0x348>
 801f068:	2304      	movs	r3, #4
 801f06a:	77fb      	strb	r3, [r7, #31]
 801f06c:	e070      	b.n	801f150 <UART_SetConfig+0x348>
 801f06e:	2308      	movs	r3, #8
 801f070:	77fb      	strb	r3, [r7, #31]
 801f072:	e06d      	b.n	801f150 <UART_SetConfig+0x348>
 801f074:	2310      	movs	r3, #16
 801f076:	77fb      	strb	r3, [r7, #31]
 801f078:	e06a      	b.n	801f150 <UART_SetConfig+0x348>
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	681b      	ldr	r3, [r3, #0]
 801f07e:	4a1b      	ldr	r2, [pc, #108]	; (801f0ec <UART_SetConfig+0x2e4>)
 801f080:	4293      	cmp	r3, r2
 801f082:	d138      	bne.n	801f0f6 <UART_SetConfig+0x2ee>
 801f084:	4b13      	ldr	r3, [pc, #76]	; (801f0d4 <UART_SetConfig+0x2cc>)
 801f086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f08a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801f08e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f092:	d017      	beq.n	801f0c4 <UART_SetConfig+0x2bc>
 801f094:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f098:	d82a      	bhi.n	801f0f0 <UART_SetConfig+0x2e8>
 801f09a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f09e:	d00b      	beq.n	801f0b8 <UART_SetConfig+0x2b0>
 801f0a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f0a4:	d824      	bhi.n	801f0f0 <UART_SetConfig+0x2e8>
 801f0a6:	2b00      	cmp	r3, #0
 801f0a8:	d003      	beq.n	801f0b2 <UART_SetConfig+0x2aa>
 801f0aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f0ae:	d006      	beq.n	801f0be <UART_SetConfig+0x2b6>
 801f0b0:	e01e      	b.n	801f0f0 <UART_SetConfig+0x2e8>
 801f0b2:	2300      	movs	r3, #0
 801f0b4:	77fb      	strb	r3, [r7, #31]
 801f0b6:	e04b      	b.n	801f150 <UART_SetConfig+0x348>
 801f0b8:	2302      	movs	r3, #2
 801f0ba:	77fb      	strb	r3, [r7, #31]
 801f0bc:	e048      	b.n	801f150 <UART_SetConfig+0x348>
 801f0be:	2304      	movs	r3, #4
 801f0c0:	77fb      	strb	r3, [r7, #31]
 801f0c2:	e045      	b.n	801f150 <UART_SetConfig+0x348>
 801f0c4:	2308      	movs	r3, #8
 801f0c6:	77fb      	strb	r3, [r7, #31]
 801f0c8:	e042      	b.n	801f150 <UART_SetConfig+0x348>
 801f0ca:	bf00      	nop
 801f0cc:	efff69f3 	.word	0xefff69f3
 801f0d0:	40011000 	.word	0x40011000
 801f0d4:	40023800 	.word	0x40023800
 801f0d8:	40004400 	.word	0x40004400
 801f0dc:	40004800 	.word	0x40004800
 801f0e0:	40004c00 	.word	0x40004c00
 801f0e4:	40005000 	.word	0x40005000
 801f0e8:	40011400 	.word	0x40011400
 801f0ec:	40007800 	.word	0x40007800
 801f0f0:	2310      	movs	r3, #16
 801f0f2:	77fb      	strb	r3, [r7, #31]
 801f0f4:	e02c      	b.n	801f150 <UART_SetConfig+0x348>
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	4a72      	ldr	r2, [pc, #456]	; (801f2c4 <UART_SetConfig+0x4bc>)
 801f0fc:	4293      	cmp	r3, r2
 801f0fe:	d125      	bne.n	801f14c <UART_SetConfig+0x344>
 801f100:	4b71      	ldr	r3, [pc, #452]	; (801f2c8 <UART_SetConfig+0x4c0>)
 801f102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f106:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801f10a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f10e:	d017      	beq.n	801f140 <UART_SetConfig+0x338>
 801f110:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f114:	d817      	bhi.n	801f146 <UART_SetConfig+0x33e>
 801f116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f11a:	d00b      	beq.n	801f134 <UART_SetConfig+0x32c>
 801f11c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f120:	d811      	bhi.n	801f146 <UART_SetConfig+0x33e>
 801f122:	2b00      	cmp	r3, #0
 801f124:	d003      	beq.n	801f12e <UART_SetConfig+0x326>
 801f126:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f12a:	d006      	beq.n	801f13a <UART_SetConfig+0x332>
 801f12c:	e00b      	b.n	801f146 <UART_SetConfig+0x33e>
 801f12e:	2300      	movs	r3, #0
 801f130:	77fb      	strb	r3, [r7, #31]
 801f132:	e00d      	b.n	801f150 <UART_SetConfig+0x348>
 801f134:	2302      	movs	r3, #2
 801f136:	77fb      	strb	r3, [r7, #31]
 801f138:	e00a      	b.n	801f150 <UART_SetConfig+0x348>
 801f13a:	2304      	movs	r3, #4
 801f13c:	77fb      	strb	r3, [r7, #31]
 801f13e:	e007      	b.n	801f150 <UART_SetConfig+0x348>
 801f140:	2308      	movs	r3, #8
 801f142:	77fb      	strb	r3, [r7, #31]
 801f144:	e004      	b.n	801f150 <UART_SetConfig+0x348>
 801f146:	2310      	movs	r3, #16
 801f148:	77fb      	strb	r3, [r7, #31]
 801f14a:	e001      	b.n	801f150 <UART_SetConfig+0x348>
 801f14c:	2310      	movs	r3, #16
 801f14e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	69db      	ldr	r3, [r3, #28]
 801f154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f158:	d15b      	bne.n	801f212 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801f15a:	7ffb      	ldrb	r3, [r7, #31]
 801f15c:	2b08      	cmp	r3, #8
 801f15e:	d828      	bhi.n	801f1b2 <UART_SetConfig+0x3aa>
 801f160:	a201      	add	r2, pc, #4	; (adr r2, 801f168 <UART_SetConfig+0x360>)
 801f162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f166:	bf00      	nop
 801f168:	0801f18d 	.word	0x0801f18d
 801f16c:	0801f195 	.word	0x0801f195
 801f170:	0801f19d 	.word	0x0801f19d
 801f174:	0801f1b3 	.word	0x0801f1b3
 801f178:	0801f1a3 	.word	0x0801f1a3
 801f17c:	0801f1b3 	.word	0x0801f1b3
 801f180:	0801f1b3 	.word	0x0801f1b3
 801f184:	0801f1b3 	.word	0x0801f1b3
 801f188:	0801f1ab 	.word	0x0801f1ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f18c:	f7fd fc3e 	bl	801ca0c <HAL_RCC_GetPCLK1Freq>
 801f190:	61b8      	str	r0, [r7, #24]
        break;
 801f192:	e013      	b.n	801f1bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f194:	f7fd fc4e 	bl	801ca34 <HAL_RCC_GetPCLK2Freq>
 801f198:	61b8      	str	r0, [r7, #24]
        break;
 801f19a:	e00f      	b.n	801f1bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f19c:	4b4b      	ldr	r3, [pc, #300]	; (801f2cc <UART_SetConfig+0x4c4>)
 801f19e:	61bb      	str	r3, [r7, #24]
        break;
 801f1a0:	e00c      	b.n	801f1bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f1a2:	f7fd fb61 	bl	801c868 <HAL_RCC_GetSysClockFreq>
 801f1a6:	61b8      	str	r0, [r7, #24]
        break;
 801f1a8:	e008      	b.n	801f1bc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f1aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f1ae:	61bb      	str	r3, [r7, #24]
        break;
 801f1b0:	e004      	b.n	801f1bc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801f1b2:	2300      	movs	r3, #0
 801f1b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801f1b6:	2301      	movs	r3, #1
 801f1b8:	77bb      	strb	r3, [r7, #30]
        break;
 801f1ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801f1bc:	69bb      	ldr	r3, [r7, #24]
 801f1be:	2b00      	cmp	r3, #0
 801f1c0:	d074      	beq.n	801f2ac <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801f1c2:	69bb      	ldr	r3, [r7, #24]
 801f1c4:	005a      	lsls	r2, r3, #1
 801f1c6:	687b      	ldr	r3, [r7, #4]
 801f1c8:	685b      	ldr	r3, [r3, #4]
 801f1ca:	085b      	lsrs	r3, r3, #1
 801f1cc:	441a      	add	r2, r3
 801f1ce:	687b      	ldr	r3, [r7, #4]
 801f1d0:	685b      	ldr	r3, [r3, #4]
 801f1d2:	fbb2 f3f3 	udiv	r3, r2, r3
 801f1d6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f1d8:	693b      	ldr	r3, [r7, #16]
 801f1da:	2b0f      	cmp	r3, #15
 801f1dc:	d916      	bls.n	801f20c <UART_SetConfig+0x404>
 801f1de:	693b      	ldr	r3, [r7, #16]
 801f1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f1e4:	d212      	bcs.n	801f20c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801f1e6:	693b      	ldr	r3, [r7, #16]
 801f1e8:	b29b      	uxth	r3, r3
 801f1ea:	f023 030f 	bic.w	r3, r3, #15
 801f1ee:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801f1f0:	693b      	ldr	r3, [r7, #16]
 801f1f2:	085b      	lsrs	r3, r3, #1
 801f1f4:	b29b      	uxth	r3, r3
 801f1f6:	f003 0307 	and.w	r3, r3, #7
 801f1fa:	b29a      	uxth	r2, r3
 801f1fc:	89fb      	ldrh	r3, [r7, #14]
 801f1fe:	4313      	orrs	r3, r2
 801f200:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	89fa      	ldrh	r2, [r7, #14]
 801f208:	60da      	str	r2, [r3, #12]
 801f20a:	e04f      	b.n	801f2ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801f20c:	2301      	movs	r3, #1
 801f20e:	77bb      	strb	r3, [r7, #30]
 801f210:	e04c      	b.n	801f2ac <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801f212:	7ffb      	ldrb	r3, [r7, #31]
 801f214:	2b08      	cmp	r3, #8
 801f216:	d828      	bhi.n	801f26a <UART_SetConfig+0x462>
 801f218:	a201      	add	r2, pc, #4	; (adr r2, 801f220 <UART_SetConfig+0x418>)
 801f21a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f21e:	bf00      	nop
 801f220:	0801f245 	.word	0x0801f245
 801f224:	0801f24d 	.word	0x0801f24d
 801f228:	0801f255 	.word	0x0801f255
 801f22c:	0801f26b 	.word	0x0801f26b
 801f230:	0801f25b 	.word	0x0801f25b
 801f234:	0801f26b 	.word	0x0801f26b
 801f238:	0801f26b 	.word	0x0801f26b
 801f23c:	0801f26b 	.word	0x0801f26b
 801f240:	0801f263 	.word	0x0801f263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f244:	f7fd fbe2 	bl	801ca0c <HAL_RCC_GetPCLK1Freq>
 801f248:	61b8      	str	r0, [r7, #24]
        break;
 801f24a:	e013      	b.n	801f274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f24c:	f7fd fbf2 	bl	801ca34 <HAL_RCC_GetPCLK2Freq>
 801f250:	61b8      	str	r0, [r7, #24]
        break;
 801f252:	e00f      	b.n	801f274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f254:	4b1d      	ldr	r3, [pc, #116]	; (801f2cc <UART_SetConfig+0x4c4>)
 801f256:	61bb      	str	r3, [r7, #24]
        break;
 801f258:	e00c      	b.n	801f274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f25a:	f7fd fb05 	bl	801c868 <HAL_RCC_GetSysClockFreq>
 801f25e:	61b8      	str	r0, [r7, #24]
        break;
 801f260:	e008      	b.n	801f274 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f262:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f266:	61bb      	str	r3, [r7, #24]
        break;
 801f268:	e004      	b.n	801f274 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801f26a:	2300      	movs	r3, #0
 801f26c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801f26e:	2301      	movs	r3, #1
 801f270:	77bb      	strb	r3, [r7, #30]
        break;
 801f272:	bf00      	nop
    }

    if (pclk != 0U)
 801f274:	69bb      	ldr	r3, [r7, #24]
 801f276:	2b00      	cmp	r3, #0
 801f278:	d018      	beq.n	801f2ac <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801f27a:	687b      	ldr	r3, [r7, #4]
 801f27c:	685b      	ldr	r3, [r3, #4]
 801f27e:	085a      	lsrs	r2, r3, #1
 801f280:	69bb      	ldr	r3, [r7, #24]
 801f282:	441a      	add	r2, r3
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	685b      	ldr	r3, [r3, #4]
 801f288:	fbb2 f3f3 	udiv	r3, r2, r3
 801f28c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f28e:	693b      	ldr	r3, [r7, #16]
 801f290:	2b0f      	cmp	r3, #15
 801f292:	d909      	bls.n	801f2a8 <UART_SetConfig+0x4a0>
 801f294:	693b      	ldr	r3, [r7, #16]
 801f296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f29a:	d205      	bcs.n	801f2a8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f29c:	693b      	ldr	r3, [r7, #16]
 801f29e:	b29a      	uxth	r2, r3
 801f2a0:	687b      	ldr	r3, [r7, #4]
 801f2a2:	681b      	ldr	r3, [r3, #0]
 801f2a4:	60da      	str	r2, [r3, #12]
 801f2a6:	e001      	b.n	801f2ac <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801f2a8:	2301      	movs	r3, #1
 801f2aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	2200      	movs	r2, #0
 801f2b0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801f2b2:	687b      	ldr	r3, [r7, #4]
 801f2b4:	2200      	movs	r2, #0
 801f2b6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801f2b8:	7fbb      	ldrb	r3, [r7, #30]
}
 801f2ba:	4618      	mov	r0, r3
 801f2bc:	3720      	adds	r7, #32
 801f2be:	46bd      	mov	sp, r7
 801f2c0:	bd80      	pop	{r7, pc}
 801f2c2:	bf00      	nop
 801f2c4:	40007c00 	.word	0x40007c00
 801f2c8:	40023800 	.word	0x40023800
 801f2cc:	00f42400 	.word	0x00f42400

0801f2d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f2d0:	b480      	push	{r7}
 801f2d2:	b083      	sub	sp, #12
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f2d8:	687b      	ldr	r3, [r7, #4]
 801f2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2dc:	f003 0301 	and.w	r3, r3, #1
 801f2e0:	2b00      	cmp	r3, #0
 801f2e2:	d00a      	beq.n	801f2fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f2e4:	687b      	ldr	r3, [r7, #4]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	685b      	ldr	r3, [r3, #4]
 801f2ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f2f2:	687b      	ldr	r3, [r7, #4]
 801f2f4:	681b      	ldr	r3, [r3, #0]
 801f2f6:	430a      	orrs	r2, r1
 801f2f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f2fa:	687b      	ldr	r3, [r7, #4]
 801f2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f2fe:	f003 0302 	and.w	r3, r3, #2
 801f302:	2b00      	cmp	r3, #0
 801f304:	d00a      	beq.n	801f31c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	685b      	ldr	r3, [r3, #4]
 801f30c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	430a      	orrs	r2, r1
 801f31a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f31c:	687b      	ldr	r3, [r7, #4]
 801f31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f320:	f003 0304 	and.w	r3, r3, #4
 801f324:	2b00      	cmp	r3, #0
 801f326:	d00a      	beq.n	801f33e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	685b      	ldr	r3, [r3, #4]
 801f32e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801f332:	687b      	ldr	r3, [r7, #4]
 801f334:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f336:	687b      	ldr	r3, [r7, #4]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	430a      	orrs	r2, r1
 801f33c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f33e:	687b      	ldr	r3, [r7, #4]
 801f340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f342:	f003 0308 	and.w	r3, r3, #8
 801f346:	2b00      	cmp	r3, #0
 801f348:	d00a      	beq.n	801f360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f34a:	687b      	ldr	r3, [r7, #4]
 801f34c:	681b      	ldr	r3, [r3, #0]
 801f34e:	685b      	ldr	r3, [r3, #4]
 801f350:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801f354:	687b      	ldr	r3, [r7, #4]
 801f356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f358:	687b      	ldr	r3, [r7, #4]
 801f35a:	681b      	ldr	r3, [r3, #0]
 801f35c:	430a      	orrs	r2, r1
 801f35e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f364:	f003 0310 	and.w	r3, r3, #16
 801f368:	2b00      	cmp	r3, #0
 801f36a:	d00a      	beq.n	801f382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f36c:	687b      	ldr	r3, [r7, #4]
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	689b      	ldr	r3, [r3, #8]
 801f372:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801f376:	687b      	ldr	r3, [r7, #4]
 801f378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f37a:	687b      	ldr	r3, [r7, #4]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	430a      	orrs	r2, r1
 801f380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f386:	f003 0320 	and.w	r3, r3, #32
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d00a      	beq.n	801f3a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f38e:	687b      	ldr	r3, [r7, #4]
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	689b      	ldr	r3, [r3, #8]
 801f394:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801f398:	687b      	ldr	r3, [r7, #4]
 801f39a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f39c:	687b      	ldr	r3, [r7, #4]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	430a      	orrs	r2, r1
 801f3a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f3ac:	2b00      	cmp	r3, #0
 801f3ae:	d01a      	beq.n	801f3e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f3b0:	687b      	ldr	r3, [r7, #4]
 801f3b2:	681b      	ldr	r3, [r3, #0]
 801f3b4:	685b      	ldr	r3, [r3, #4]
 801f3b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	430a      	orrs	r2, r1
 801f3c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801f3c6:	687b      	ldr	r3, [r7, #4]
 801f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f3ce:	d10a      	bne.n	801f3e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801f3d0:	687b      	ldr	r3, [r7, #4]
 801f3d2:	681b      	ldr	r3, [r3, #0]
 801f3d4:	685b      	ldr	r3, [r3, #4]
 801f3d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801f3da:	687b      	ldr	r3, [r7, #4]
 801f3dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	430a      	orrs	r2, r1
 801f3e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f3ee:	2b00      	cmp	r3, #0
 801f3f0:	d00a      	beq.n	801f408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801f3f2:	687b      	ldr	r3, [r7, #4]
 801f3f4:	681b      	ldr	r3, [r3, #0]
 801f3f6:	685b      	ldr	r3, [r3, #4]
 801f3f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801f3fc:	687b      	ldr	r3, [r7, #4]
 801f3fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	681b      	ldr	r3, [r3, #0]
 801f404:	430a      	orrs	r2, r1
 801f406:	605a      	str	r2, [r3, #4]
  }
}
 801f408:	bf00      	nop
 801f40a:	370c      	adds	r7, #12
 801f40c:	46bd      	mov	sp, r7
 801f40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f412:	4770      	bx	lr

0801f414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801f414:	b580      	push	{r7, lr}
 801f416:	b086      	sub	sp, #24
 801f418:	af02      	add	r7, sp, #8
 801f41a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	2200      	movs	r2, #0
 801f420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801f424:	f7f9 fc04 	bl	8018c30 <HAL_GetTick>
 801f428:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	f003 0308 	and.w	r3, r3, #8
 801f434:	2b08      	cmp	r3, #8
 801f436:	d10e      	bne.n	801f456 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f438:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f43c:	9300      	str	r3, [sp, #0]
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	2200      	movs	r2, #0
 801f442:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f446:	6878      	ldr	r0, [r7, #4]
 801f448:	f000 f831 	bl	801f4ae <UART_WaitOnFlagUntilTimeout>
 801f44c:	4603      	mov	r3, r0
 801f44e:	2b00      	cmp	r3, #0
 801f450:	d001      	beq.n	801f456 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f452:	2303      	movs	r3, #3
 801f454:	e027      	b.n	801f4a6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801f456:	687b      	ldr	r3, [r7, #4]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	f003 0304 	and.w	r3, r3, #4
 801f460:	2b04      	cmp	r3, #4
 801f462:	d10e      	bne.n	801f482 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f464:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f468:	9300      	str	r3, [sp, #0]
 801f46a:	68fb      	ldr	r3, [r7, #12]
 801f46c:	2200      	movs	r2, #0
 801f46e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801f472:	6878      	ldr	r0, [r7, #4]
 801f474:	f000 f81b 	bl	801f4ae <UART_WaitOnFlagUntilTimeout>
 801f478:	4603      	mov	r3, r0
 801f47a:	2b00      	cmp	r3, #0
 801f47c:	d001      	beq.n	801f482 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f47e:	2303      	movs	r3, #3
 801f480:	e011      	b.n	801f4a6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801f482:	687b      	ldr	r3, [r7, #4]
 801f484:	2220      	movs	r2, #32
 801f486:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801f488:	687b      	ldr	r3, [r7, #4]
 801f48a:	2220      	movs	r2, #32
 801f48c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f490:	687b      	ldr	r3, [r7, #4]
 801f492:	2200      	movs	r2, #0
 801f494:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f496:	687b      	ldr	r3, [r7, #4]
 801f498:	2200      	movs	r2, #0
 801f49a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801f49c:	687b      	ldr	r3, [r7, #4]
 801f49e:	2200      	movs	r2, #0
 801f4a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801f4a4:	2300      	movs	r3, #0
}
 801f4a6:	4618      	mov	r0, r3
 801f4a8:	3710      	adds	r7, #16
 801f4aa:	46bd      	mov	sp, r7
 801f4ac:	bd80      	pop	{r7, pc}

0801f4ae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801f4ae:	b580      	push	{r7, lr}
 801f4b0:	b09c      	sub	sp, #112	; 0x70
 801f4b2:	af00      	add	r7, sp, #0
 801f4b4:	60f8      	str	r0, [r7, #12]
 801f4b6:	60b9      	str	r1, [r7, #8]
 801f4b8:	603b      	str	r3, [r7, #0]
 801f4ba:	4613      	mov	r3, r2
 801f4bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f4be:	e0a7      	b.n	801f610 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801f4c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f4c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f4c6:	f000 80a3 	beq.w	801f610 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801f4ca:	f7f9 fbb1 	bl	8018c30 <HAL_GetTick>
 801f4ce:	4602      	mov	r2, r0
 801f4d0:	683b      	ldr	r3, [r7, #0]
 801f4d2:	1ad3      	subs	r3, r2, r3
 801f4d4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801f4d6:	429a      	cmp	r2, r3
 801f4d8:	d302      	bcc.n	801f4e0 <UART_WaitOnFlagUntilTimeout+0x32>
 801f4da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801f4dc:	2b00      	cmp	r3, #0
 801f4de:	d13f      	bne.n	801f560 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801f4e0:	68fb      	ldr	r3, [r7, #12]
 801f4e2:	681b      	ldr	r3, [r3, #0]
 801f4e4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f4e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f4e8:	e853 3f00 	ldrex	r3, [r3]
 801f4ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801f4ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f4f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801f4f4:	667b      	str	r3, [r7, #100]	; 0x64
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	681b      	ldr	r3, [r3, #0]
 801f4fa:	461a      	mov	r2, r3
 801f4fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f4fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 801f500:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f502:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801f504:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801f506:	e841 2300 	strex	r3, r2, [r1]
 801f50a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801f50c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801f50e:	2b00      	cmp	r3, #0
 801f510:	d1e6      	bne.n	801f4e0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f512:	68fb      	ldr	r3, [r7, #12]
 801f514:	681b      	ldr	r3, [r3, #0]
 801f516:	3308      	adds	r3, #8
 801f518:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f51a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f51c:	e853 3f00 	ldrex	r3, [r3]
 801f520:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f522:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f524:	f023 0301 	bic.w	r3, r3, #1
 801f528:	663b      	str	r3, [r7, #96]	; 0x60
 801f52a:	68fb      	ldr	r3, [r7, #12]
 801f52c:	681b      	ldr	r3, [r3, #0]
 801f52e:	3308      	adds	r3, #8
 801f530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801f532:	64ba      	str	r2, [r7, #72]	; 0x48
 801f534:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f536:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801f538:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f53a:	e841 2300 	strex	r3, r2, [r1]
 801f53e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801f540:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f542:	2b00      	cmp	r3, #0
 801f544:	d1e5      	bne.n	801f512 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	2220      	movs	r2, #32
 801f54a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801f54c:	68fb      	ldr	r3, [r7, #12]
 801f54e:	2220      	movs	r2, #32
 801f550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801f554:	68fb      	ldr	r3, [r7, #12]
 801f556:	2200      	movs	r2, #0
 801f558:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801f55c:	2303      	movs	r3, #3
 801f55e:	e068      	b.n	801f632 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801f560:	68fb      	ldr	r3, [r7, #12]
 801f562:	681b      	ldr	r3, [r3, #0]
 801f564:	681b      	ldr	r3, [r3, #0]
 801f566:	f003 0304 	and.w	r3, r3, #4
 801f56a:	2b00      	cmp	r3, #0
 801f56c:	d050      	beq.n	801f610 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801f56e:	68fb      	ldr	r3, [r7, #12]
 801f570:	681b      	ldr	r3, [r3, #0]
 801f572:	69db      	ldr	r3, [r3, #28]
 801f574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801f578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f57c:	d148      	bne.n	801f610 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	681b      	ldr	r3, [r3, #0]
 801f582:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801f586:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801f588:	68fb      	ldr	r3, [r7, #12]
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f590:	e853 3f00 	ldrex	r3, [r3]
 801f594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f598:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801f59c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801f59e:	68fb      	ldr	r3, [r7, #12]
 801f5a0:	681b      	ldr	r3, [r3, #0]
 801f5a2:	461a      	mov	r2, r3
 801f5a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801f5a6:	637b      	str	r3, [r7, #52]	; 0x34
 801f5a8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f5aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f5ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f5ae:	e841 2300 	strex	r3, r2, [r1]
 801f5b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801f5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f5b6:	2b00      	cmp	r3, #0
 801f5b8:	d1e6      	bne.n	801f588 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	681b      	ldr	r3, [r3, #0]
 801f5be:	3308      	adds	r3, #8
 801f5c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f5c2:	697b      	ldr	r3, [r7, #20]
 801f5c4:	e853 3f00 	ldrex	r3, [r3]
 801f5c8:	613b      	str	r3, [r7, #16]
   return(result);
 801f5ca:	693b      	ldr	r3, [r7, #16]
 801f5cc:	f023 0301 	bic.w	r3, r3, #1
 801f5d0:	66bb      	str	r3, [r7, #104]	; 0x68
 801f5d2:	68fb      	ldr	r3, [r7, #12]
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	3308      	adds	r3, #8
 801f5d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801f5da:	623a      	str	r2, [r7, #32]
 801f5dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f5de:	69f9      	ldr	r1, [r7, #28]
 801f5e0:	6a3a      	ldr	r2, [r7, #32]
 801f5e2:	e841 2300 	strex	r3, r2, [r1]
 801f5e6:	61bb      	str	r3, [r7, #24]
   return(result);
 801f5e8:	69bb      	ldr	r3, [r7, #24]
 801f5ea:	2b00      	cmp	r3, #0
 801f5ec:	d1e5      	bne.n	801f5ba <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801f5ee:	68fb      	ldr	r3, [r7, #12]
 801f5f0:	2220      	movs	r2, #32
 801f5f2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801f5f4:	68fb      	ldr	r3, [r7, #12]
 801f5f6:	2220      	movs	r2, #32
 801f5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801f5fc:	68fb      	ldr	r3, [r7, #12]
 801f5fe:	2220      	movs	r2, #32
 801f600:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	2200      	movs	r2, #0
 801f608:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801f60c:	2303      	movs	r3, #3
 801f60e:	e010      	b.n	801f632 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801f610:	68fb      	ldr	r3, [r7, #12]
 801f612:	681b      	ldr	r3, [r3, #0]
 801f614:	69da      	ldr	r2, [r3, #28]
 801f616:	68bb      	ldr	r3, [r7, #8]
 801f618:	4013      	ands	r3, r2
 801f61a:	68ba      	ldr	r2, [r7, #8]
 801f61c:	429a      	cmp	r2, r3
 801f61e:	bf0c      	ite	eq
 801f620:	2301      	moveq	r3, #1
 801f622:	2300      	movne	r3, #0
 801f624:	b2db      	uxtb	r3, r3
 801f626:	461a      	mov	r2, r3
 801f628:	79fb      	ldrb	r3, [r7, #7]
 801f62a:	429a      	cmp	r2, r3
 801f62c:	f43f af48 	beq.w	801f4c0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801f630:	2300      	movs	r3, #0
}
 801f632:	4618      	mov	r0, r3
 801f634:	3770      	adds	r7, #112	; 0x70
 801f636:	46bd      	mov	sp, r7
 801f638:	bd80      	pop	{r7, pc}
	...

0801f63c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801f63c:	b480      	push	{r7}
 801f63e:	b097      	sub	sp, #92	; 0x5c
 801f640:	af00      	add	r7, sp, #0
 801f642:	60f8      	str	r0, [r7, #12]
 801f644:	60b9      	str	r1, [r7, #8]
 801f646:	4613      	mov	r3, r2
 801f648:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801f64a:	68fb      	ldr	r3, [r7, #12]
 801f64c:	68ba      	ldr	r2, [r7, #8]
 801f64e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801f650:	68fb      	ldr	r3, [r7, #12]
 801f652:	88fa      	ldrh	r2, [r7, #6]
 801f654:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801f658:	68fb      	ldr	r3, [r7, #12]
 801f65a:	88fa      	ldrh	r2, [r7, #6]
 801f65c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801f660:	68fb      	ldr	r3, [r7, #12]
 801f662:	2200      	movs	r2, #0
 801f664:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801f666:	68fb      	ldr	r3, [r7, #12]
 801f668:	689b      	ldr	r3, [r3, #8]
 801f66a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f66e:	d10e      	bne.n	801f68e <UART_Start_Receive_IT+0x52>
 801f670:	68fb      	ldr	r3, [r7, #12]
 801f672:	691b      	ldr	r3, [r3, #16]
 801f674:	2b00      	cmp	r3, #0
 801f676:	d105      	bne.n	801f684 <UART_Start_Receive_IT+0x48>
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801f67e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f682:	e02d      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f684:	68fb      	ldr	r3, [r7, #12]
 801f686:	22ff      	movs	r2, #255	; 0xff
 801f688:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f68c:	e028      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f68e:	68fb      	ldr	r3, [r7, #12]
 801f690:	689b      	ldr	r3, [r3, #8]
 801f692:	2b00      	cmp	r3, #0
 801f694:	d10d      	bne.n	801f6b2 <UART_Start_Receive_IT+0x76>
 801f696:	68fb      	ldr	r3, [r7, #12]
 801f698:	691b      	ldr	r3, [r3, #16]
 801f69a:	2b00      	cmp	r3, #0
 801f69c:	d104      	bne.n	801f6a8 <UART_Start_Receive_IT+0x6c>
 801f69e:	68fb      	ldr	r3, [r7, #12]
 801f6a0:	22ff      	movs	r2, #255	; 0xff
 801f6a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f6a6:	e01b      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f6a8:	68fb      	ldr	r3, [r7, #12]
 801f6aa:	227f      	movs	r2, #127	; 0x7f
 801f6ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f6b0:	e016      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f6b2:	68fb      	ldr	r3, [r7, #12]
 801f6b4:	689b      	ldr	r3, [r3, #8]
 801f6b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801f6ba:	d10d      	bne.n	801f6d8 <UART_Start_Receive_IT+0x9c>
 801f6bc:	68fb      	ldr	r3, [r7, #12]
 801f6be:	691b      	ldr	r3, [r3, #16]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d104      	bne.n	801f6ce <UART_Start_Receive_IT+0x92>
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	227f      	movs	r2, #127	; 0x7f
 801f6c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f6cc:	e008      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	223f      	movs	r2, #63	; 0x3f
 801f6d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801f6d6:	e003      	b.n	801f6e0 <UART_Start_Receive_IT+0xa4>
 801f6d8:	68fb      	ldr	r3, [r7, #12]
 801f6da:	2200      	movs	r2, #0
 801f6dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f6e0:	68fb      	ldr	r3, [r7, #12]
 801f6e2:	2200      	movs	r2, #0
 801f6e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801f6e8:	68fb      	ldr	r3, [r7, #12]
 801f6ea:	2222      	movs	r2, #34	; 0x22
 801f6ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f6f0:	68fb      	ldr	r3, [r7, #12]
 801f6f2:	681b      	ldr	r3, [r3, #0]
 801f6f4:	3308      	adds	r3, #8
 801f6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f6fa:	e853 3f00 	ldrex	r3, [r3]
 801f6fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f702:	f043 0301 	orr.w	r3, r3, #1
 801f706:	657b      	str	r3, [r7, #84]	; 0x54
 801f708:	68fb      	ldr	r3, [r7, #12]
 801f70a:	681b      	ldr	r3, [r3, #0]
 801f70c:	3308      	adds	r3, #8
 801f70e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801f710:	64ba      	str	r2, [r7, #72]	; 0x48
 801f712:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801f716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f718:	e841 2300 	strex	r3, r2, [r1]
 801f71c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801f71e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801f720:	2b00      	cmp	r3, #0
 801f722:	d1e5      	bne.n	801f6f0 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	689b      	ldr	r3, [r3, #8]
 801f728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f72c:	d107      	bne.n	801f73e <UART_Start_Receive_IT+0x102>
 801f72e:	68fb      	ldr	r3, [r7, #12]
 801f730:	691b      	ldr	r3, [r3, #16]
 801f732:	2b00      	cmp	r3, #0
 801f734:	d103      	bne.n	801f73e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801f736:	68fb      	ldr	r3, [r7, #12]
 801f738:	4a21      	ldr	r2, [pc, #132]	; (801f7c0 <UART_Start_Receive_IT+0x184>)
 801f73a:	669a      	str	r2, [r3, #104]	; 0x68
 801f73c:	e002      	b.n	801f744 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801f73e:	68fb      	ldr	r3, [r7, #12]
 801f740:	4a20      	ldr	r2, [pc, #128]	; (801f7c4 <UART_Start_Receive_IT+0x188>)
 801f742:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801f744:	68fb      	ldr	r3, [r7, #12]
 801f746:	691b      	ldr	r3, [r3, #16]
 801f748:	2b00      	cmp	r3, #0
 801f74a:	d019      	beq.n	801f780 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801f74c:	68fb      	ldr	r3, [r7, #12]
 801f74e:	681b      	ldr	r3, [r3, #0]
 801f750:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f754:	e853 3f00 	ldrex	r3, [r3]
 801f758:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f75a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f75c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801f760:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f762:	68fb      	ldr	r3, [r7, #12]
 801f764:	681b      	ldr	r3, [r3, #0]
 801f766:	461a      	mov	r2, r3
 801f768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f76a:	637b      	str	r3, [r7, #52]	; 0x34
 801f76c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f76e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801f770:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801f772:	e841 2300 	strex	r3, r2, [r1]
 801f776:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801f778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d1e6      	bne.n	801f74c <UART_Start_Receive_IT+0x110>
 801f77e:	e018      	b.n	801f7b2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801f780:	68fb      	ldr	r3, [r7, #12]
 801f782:	681b      	ldr	r3, [r3, #0]
 801f784:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f786:	697b      	ldr	r3, [r7, #20]
 801f788:	e853 3f00 	ldrex	r3, [r3]
 801f78c:	613b      	str	r3, [r7, #16]
   return(result);
 801f78e:	693b      	ldr	r3, [r7, #16]
 801f790:	f043 0320 	orr.w	r3, r3, #32
 801f794:	653b      	str	r3, [r7, #80]	; 0x50
 801f796:	68fb      	ldr	r3, [r7, #12]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	461a      	mov	r2, r3
 801f79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f79e:	623b      	str	r3, [r7, #32]
 801f7a0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f7a2:	69f9      	ldr	r1, [r7, #28]
 801f7a4:	6a3a      	ldr	r2, [r7, #32]
 801f7a6:	e841 2300 	strex	r3, r2, [r1]
 801f7aa:	61bb      	str	r3, [r7, #24]
   return(result);
 801f7ac:	69bb      	ldr	r3, [r7, #24]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d1e6      	bne.n	801f780 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801f7b2:	2300      	movs	r3, #0
}
 801f7b4:	4618      	mov	r0, r3
 801f7b6:	375c      	adds	r7, #92	; 0x5c
 801f7b8:	46bd      	mov	sp, r7
 801f7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7be:	4770      	bx	lr
 801f7c0:	0801fa87 	.word	0x0801fa87
 801f7c4:	0801f919 	.word	0x0801f919

0801f7c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801f7c8:	b480      	push	{r7}
 801f7ca:	b095      	sub	sp, #84	; 0x54
 801f7cc:	af00      	add	r7, sp, #0
 801f7ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f7d0:	687b      	ldr	r3, [r7, #4]
 801f7d2:	681b      	ldr	r3, [r3, #0]
 801f7d4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f7d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f7d8:	e853 3f00 	ldrex	r3, [r3]
 801f7dc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801f7e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f7e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	681b      	ldr	r3, [r3, #0]
 801f7ea:	461a      	mov	r2, r3
 801f7ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f7ee:	643b      	str	r3, [r7, #64]	; 0x40
 801f7f0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f7f2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801f7f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801f7f6:	e841 2300 	strex	r3, r2, [r1]
 801f7fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801f7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d1e6      	bne.n	801f7d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f802:	687b      	ldr	r3, [r7, #4]
 801f804:	681b      	ldr	r3, [r3, #0]
 801f806:	3308      	adds	r3, #8
 801f808:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f80a:	6a3b      	ldr	r3, [r7, #32]
 801f80c:	e853 3f00 	ldrex	r3, [r3]
 801f810:	61fb      	str	r3, [r7, #28]
   return(result);
 801f812:	69fb      	ldr	r3, [r7, #28]
 801f814:	f023 0301 	bic.w	r3, r3, #1
 801f818:	64bb      	str	r3, [r7, #72]	; 0x48
 801f81a:	687b      	ldr	r3, [r7, #4]
 801f81c:	681b      	ldr	r3, [r3, #0]
 801f81e:	3308      	adds	r3, #8
 801f820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801f822:	62fa      	str	r2, [r7, #44]	; 0x2c
 801f824:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801f828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801f82a:	e841 2300 	strex	r3, r2, [r1]
 801f82e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801f830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f832:	2b00      	cmp	r3, #0
 801f834:	d1e5      	bne.n	801f802 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f83a:	2b01      	cmp	r3, #1
 801f83c:	d118      	bne.n	801f870 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	681b      	ldr	r3, [r3, #0]
 801f842:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f844:	68fb      	ldr	r3, [r7, #12]
 801f846:	e853 3f00 	ldrex	r3, [r3]
 801f84a:	60bb      	str	r3, [r7, #8]
   return(result);
 801f84c:	68bb      	ldr	r3, [r7, #8]
 801f84e:	f023 0310 	bic.w	r3, r3, #16
 801f852:	647b      	str	r3, [r7, #68]	; 0x44
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	681b      	ldr	r3, [r3, #0]
 801f858:	461a      	mov	r2, r3
 801f85a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801f85c:	61bb      	str	r3, [r7, #24]
 801f85e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f860:	6979      	ldr	r1, [r7, #20]
 801f862:	69ba      	ldr	r2, [r7, #24]
 801f864:	e841 2300 	strex	r3, r2, [r1]
 801f868:	613b      	str	r3, [r7, #16]
   return(result);
 801f86a:	693b      	ldr	r3, [r7, #16]
 801f86c:	2b00      	cmp	r3, #0
 801f86e:	d1e6      	bne.n	801f83e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801f870:	687b      	ldr	r3, [r7, #4]
 801f872:	2220      	movs	r2, #32
 801f874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	2200      	movs	r2, #0
 801f87c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	2200      	movs	r2, #0
 801f882:	669a      	str	r2, [r3, #104]	; 0x68
}
 801f884:	bf00      	nop
 801f886:	3754      	adds	r7, #84	; 0x54
 801f888:	46bd      	mov	sp, r7
 801f88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f88e:	4770      	bx	lr

0801f890 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801f890:	b580      	push	{r7, lr}
 801f892:	b084      	sub	sp, #16
 801f894:	af00      	add	r7, sp, #0
 801f896:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801f898:	687b      	ldr	r3, [r7, #4]
 801f89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f89c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	2200      	movs	r2, #0
 801f8a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	2200      	movs	r2, #0
 801f8aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801f8b4:	68f8      	ldr	r0, [r7, #12]
 801f8b6:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f8b8:	bf00      	nop
 801f8ba:	3710      	adds	r7, #16
 801f8bc:	46bd      	mov	sp, r7
 801f8be:	bd80      	pop	{r7, pc}

0801f8c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b088      	sub	sp, #32
 801f8c4:	af00      	add	r7, sp, #0
 801f8c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801f8c8:	687b      	ldr	r3, [r7, #4]
 801f8ca:	681b      	ldr	r3, [r3, #0]
 801f8cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f8ce:	68fb      	ldr	r3, [r7, #12]
 801f8d0:	e853 3f00 	ldrex	r3, [r3]
 801f8d4:	60bb      	str	r3, [r7, #8]
   return(result);
 801f8d6:	68bb      	ldr	r3, [r7, #8]
 801f8d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f8dc:	61fb      	str	r3, [r7, #28]
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	461a      	mov	r2, r3
 801f8e4:	69fb      	ldr	r3, [r7, #28]
 801f8e6:	61bb      	str	r3, [r7, #24]
 801f8e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f8ea:	6979      	ldr	r1, [r7, #20]
 801f8ec:	69ba      	ldr	r2, [r7, #24]
 801f8ee:	e841 2300 	strex	r3, r2, [r1]
 801f8f2:	613b      	str	r3, [r7, #16]
   return(result);
 801f8f4:	693b      	ldr	r3, [r7, #16]
 801f8f6:	2b00      	cmp	r3, #0
 801f8f8:	d1e6      	bne.n	801f8c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2220      	movs	r2, #32
 801f8fe:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	2200      	movs	r2, #0
 801f904:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801f90c:	6878      	ldr	r0, [r7, #4]
 801f90e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801f910:	bf00      	nop
 801f912:	3720      	adds	r7, #32
 801f914:	46bd      	mov	sp, r7
 801f916:	bd80      	pop	{r7, pc}

0801f918 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801f918:	b580      	push	{r7, lr}
 801f91a:	b096      	sub	sp, #88	; 0x58
 801f91c:	af00      	add	r7, sp, #0
 801f91e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801f920:	687b      	ldr	r3, [r7, #4]
 801f922:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801f926:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801f930:	2b22      	cmp	r3, #34	; 0x22
 801f932:	f040 809c 	bne.w	801fa6e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801f936:	687b      	ldr	r3, [r7, #4]
 801f938:	681b      	ldr	r3, [r3, #0]
 801f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f93c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801f940:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801f944:	b2d9      	uxtb	r1, r3
 801f946:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801f94a:	b2da      	uxtb	r2, r3
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f950:	400a      	ands	r2, r1
 801f952:	b2d2      	uxtb	r2, r2
 801f954:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801f95a:	1c5a      	adds	r2, r3, #1
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f966:	b29b      	uxth	r3, r3
 801f968:	3b01      	subs	r3, #1
 801f96a:	b29a      	uxth	r2, r3
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801f972:	687b      	ldr	r3, [r7, #4]
 801f974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f978:	b29b      	uxth	r3, r3
 801f97a:	2b00      	cmp	r3, #0
 801f97c:	d17f      	bne.n	801fa7e <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f986:	e853 3f00 	ldrex	r3, [r3]
 801f98a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f98c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f98e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f992:	653b      	str	r3, [r7, #80]	; 0x50
 801f994:	687b      	ldr	r3, [r7, #4]
 801f996:	681b      	ldr	r3, [r3, #0]
 801f998:	461a      	mov	r2, r3
 801f99a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f99c:	647b      	str	r3, [r7, #68]	; 0x44
 801f99e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f9a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f9a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f9a4:	e841 2300 	strex	r3, r2, [r1]
 801f9a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f9aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	d1e6      	bne.n	801f97e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f9b0:	687b      	ldr	r3, [r7, #4]
 801f9b2:	681b      	ldr	r3, [r3, #0]
 801f9b4:	3308      	adds	r3, #8
 801f9b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f9ba:	e853 3f00 	ldrex	r3, [r3]
 801f9be:	623b      	str	r3, [r7, #32]
   return(result);
 801f9c0:	6a3b      	ldr	r3, [r7, #32]
 801f9c2:	f023 0301 	bic.w	r3, r3, #1
 801f9c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 801f9c8:	687b      	ldr	r3, [r7, #4]
 801f9ca:	681b      	ldr	r3, [r3, #0]
 801f9cc:	3308      	adds	r3, #8
 801f9ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801f9d0:	633a      	str	r2, [r7, #48]	; 0x30
 801f9d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f9d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f9d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f9d8:	e841 2300 	strex	r3, r2, [r1]
 801f9dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f9e0:	2b00      	cmp	r3, #0
 801f9e2:	d1e5      	bne.n	801f9b0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	2220      	movs	r2, #32
 801f9e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	2200      	movs	r2, #0
 801f9f0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f9f2:	687b      	ldr	r3, [r7, #4]
 801f9f4:	2200      	movs	r2, #0
 801f9f6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801f9f8:	687b      	ldr	r3, [r7, #4]
 801f9fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f9fc:	2b01      	cmp	r3, #1
 801f9fe:	d130      	bne.n	801fa62 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2200      	movs	r2, #0
 801fa04:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	681b      	ldr	r3, [r3, #0]
 801fa0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa0c:	693b      	ldr	r3, [r7, #16]
 801fa0e:	e853 3f00 	ldrex	r3, [r3]
 801fa12:	60fb      	str	r3, [r7, #12]
   return(result);
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	f023 0310 	bic.w	r3, r3, #16
 801fa1a:	64bb      	str	r3, [r7, #72]	; 0x48
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	681b      	ldr	r3, [r3, #0]
 801fa20:	461a      	mov	r2, r3
 801fa22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801fa24:	61fb      	str	r3, [r7, #28]
 801fa26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa28:	69b9      	ldr	r1, [r7, #24]
 801fa2a:	69fa      	ldr	r2, [r7, #28]
 801fa2c:	e841 2300 	strex	r3, r2, [r1]
 801fa30:	617b      	str	r3, [r7, #20]
   return(result);
 801fa32:	697b      	ldr	r3, [r7, #20]
 801fa34:	2b00      	cmp	r3, #0
 801fa36:	d1e6      	bne.n	801fa06 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801fa38:	687b      	ldr	r3, [r7, #4]
 801fa3a:	681b      	ldr	r3, [r3, #0]
 801fa3c:	69db      	ldr	r3, [r3, #28]
 801fa3e:	f003 0310 	and.w	r3, r3, #16
 801fa42:	2b10      	cmp	r3, #16
 801fa44:	d103      	bne.n	801fa4e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	681b      	ldr	r3, [r3, #0]
 801fa4a:	2210      	movs	r2, #16
 801fa4c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fa54:	687a      	ldr	r2, [r7, #4]
 801fa56:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801fa5a:	4611      	mov	r1, r2
 801fa5c:	6878      	ldr	r0, [r7, #4]
 801fa5e:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801fa60:	e00d      	b.n	801fa7e <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801fa62:	687b      	ldr	r3, [r7, #4]
 801fa64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801fa68:	6878      	ldr	r0, [r7, #4]
 801fa6a:	4798      	blx	r3
}
 801fa6c:	e007      	b.n	801fa7e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	681b      	ldr	r3, [r3, #0]
 801fa72:	699a      	ldr	r2, [r3, #24]
 801fa74:	687b      	ldr	r3, [r7, #4]
 801fa76:	681b      	ldr	r3, [r3, #0]
 801fa78:	f042 0208 	orr.w	r2, r2, #8
 801fa7c:	619a      	str	r2, [r3, #24]
}
 801fa7e:	bf00      	nop
 801fa80:	3758      	adds	r7, #88	; 0x58
 801fa82:	46bd      	mov	sp, r7
 801fa84:	bd80      	pop	{r7, pc}

0801fa86 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801fa86:	b580      	push	{r7, lr}
 801fa88:	b096      	sub	sp, #88	; 0x58
 801fa8a:	af00      	add	r7, sp, #0
 801fa8c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801fa8e:	687b      	ldr	r3, [r7, #4]
 801fa90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fa94:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801fa98:	687b      	ldr	r3, [r7, #4]
 801fa9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801fa9e:	2b22      	cmp	r3, #34	; 0x22
 801faa0:	f040 809c 	bne.w	801fbdc <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	681b      	ldr	r3, [r3, #0]
 801faa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801faaa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801faae:	687b      	ldr	r3, [r7, #4]
 801fab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fab2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801fab4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801fab8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801fabc:	4013      	ands	r3, r2
 801fabe:	b29a      	uxth	r2, r3
 801fac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fac2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fac8:	1c9a      	adds	r2, r3, #2
 801faca:	687b      	ldr	r3, [r7, #4]
 801facc:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801face:	687b      	ldr	r3, [r7, #4]
 801fad0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fad4:	b29b      	uxth	r3, r3
 801fad6:	3b01      	subs	r3, #1
 801fad8:	b29a      	uxth	r2, r3
 801fada:	687b      	ldr	r3, [r7, #4]
 801fadc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fae6:	b29b      	uxth	r3, r3
 801fae8:	2b00      	cmp	r3, #0
 801faea:	d17f      	bne.n	801fbec <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801faec:	687b      	ldr	r3, [r7, #4]
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801faf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801faf4:	e853 3f00 	ldrex	r3, [r3]
 801faf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801fafa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fafc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801fb00:	64fb      	str	r3, [r7, #76]	; 0x4c
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	461a      	mov	r2, r3
 801fb08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fb0a:	643b      	str	r3, [r7, #64]	; 0x40
 801fb0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801fb10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fb12:	e841 2300 	strex	r3, r2, [r1]
 801fb16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fb18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d1e6      	bne.n	801faec <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fb1e:	687b      	ldr	r3, [r7, #4]
 801fb20:	681b      	ldr	r3, [r3, #0]
 801fb22:	3308      	adds	r3, #8
 801fb24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb26:	6a3b      	ldr	r3, [r7, #32]
 801fb28:	e853 3f00 	ldrex	r3, [r3]
 801fb2c:	61fb      	str	r3, [r7, #28]
   return(result);
 801fb2e:	69fb      	ldr	r3, [r7, #28]
 801fb30:	f023 0301 	bic.w	r3, r3, #1
 801fb34:	64bb      	str	r3, [r7, #72]	; 0x48
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	3308      	adds	r3, #8
 801fb3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fb3e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fb40:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801fb44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fb46:	e841 2300 	strex	r3, r2, [r1]
 801fb4a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d1e5      	bne.n	801fb1e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801fb52:	687b      	ldr	r3, [r7, #4]
 801fb54:	2220      	movs	r2, #32
 801fb56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801fb5a:	687b      	ldr	r3, [r7, #4]
 801fb5c:	2200      	movs	r2, #0
 801fb5e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801fb60:	687b      	ldr	r3, [r7, #4]
 801fb62:	2200      	movs	r2, #0
 801fb64:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fb66:	687b      	ldr	r3, [r7, #4]
 801fb68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fb6a:	2b01      	cmp	r3, #1
 801fb6c:	d130      	bne.n	801fbd0 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fb6e:	687b      	ldr	r3, [r7, #4]
 801fb70:	2200      	movs	r2, #0
 801fb72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb7a:	68fb      	ldr	r3, [r7, #12]
 801fb7c:	e853 3f00 	ldrex	r3, [r3]
 801fb80:	60bb      	str	r3, [r7, #8]
   return(result);
 801fb82:	68bb      	ldr	r3, [r7, #8]
 801fb84:	f023 0310 	bic.w	r3, r3, #16
 801fb88:	647b      	str	r3, [r7, #68]	; 0x44
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	681b      	ldr	r3, [r3, #0]
 801fb8e:	461a      	mov	r2, r3
 801fb90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fb92:	61bb      	str	r3, [r7, #24]
 801fb94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb96:	6979      	ldr	r1, [r7, #20]
 801fb98:	69ba      	ldr	r2, [r7, #24]
 801fb9a:	e841 2300 	strex	r3, r2, [r1]
 801fb9e:	613b      	str	r3, [r7, #16]
   return(result);
 801fba0:	693b      	ldr	r3, [r7, #16]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d1e6      	bne.n	801fb74 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	681b      	ldr	r3, [r3, #0]
 801fbaa:	69db      	ldr	r3, [r3, #28]
 801fbac:	f003 0310 	and.w	r3, r3, #16
 801fbb0:	2b10      	cmp	r3, #16
 801fbb2:	d103      	bne.n	801fbbc <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	681b      	ldr	r3, [r3, #0]
 801fbb8:	2210      	movs	r2, #16
 801fbba:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801fbbc:	687b      	ldr	r3, [r7, #4]
 801fbbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801fbc2:	687a      	ldr	r2, [r7, #4]
 801fbc4:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801fbc8:	4611      	mov	r1, r2
 801fbca:	6878      	ldr	r0, [r7, #4]
 801fbcc:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801fbce:	e00d      	b.n	801fbec <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801fbd0:	687b      	ldr	r3, [r7, #4]
 801fbd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801fbd6:	6878      	ldr	r0, [r7, #4]
 801fbd8:	4798      	blx	r3
}
 801fbda:	e007      	b.n	801fbec <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801fbdc:	687b      	ldr	r3, [r7, #4]
 801fbde:	681b      	ldr	r3, [r3, #0]
 801fbe0:	699a      	ldr	r2, [r3, #24]
 801fbe2:	687b      	ldr	r3, [r7, #4]
 801fbe4:	681b      	ldr	r3, [r3, #0]
 801fbe6:	f042 0208 	orr.w	r2, r2, #8
 801fbea:	619a      	str	r2, [r3, #24]
}
 801fbec:	bf00      	nop
 801fbee:	3758      	adds	r7, #88	; 0x58
 801fbf0:	46bd      	mov	sp, r7
 801fbf2:	bd80      	pop	{r7, pc}

0801fbf4 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801fbf4:	b580      	push	{r7, lr}
 801fbf6:	b08c      	sub	sp, #48	; 0x30
 801fbf8:	af00      	add	r7, sp, #0
 801fbfa:	60f8      	str	r0, [r7, #12]
 801fbfc:	60b9      	str	r1, [r7, #8]
 801fbfe:	4613      	mov	r3, r2
 801fc00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801fc02:	68fb      	ldr	r3, [r7, #12]
 801fc04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801fc08:	2b20      	cmp	r3, #32
 801fc0a:	d142      	bne.n	801fc92 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801fc0c:	68bb      	ldr	r3, [r7, #8]
 801fc0e:	2b00      	cmp	r3, #0
 801fc10:	d002      	beq.n	801fc18 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801fc12:	88fb      	ldrh	r3, [r7, #6]
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	d101      	bne.n	801fc1c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801fc18:	2301      	movs	r3, #1
 801fc1a:	e03b      	b.n	801fc94 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801fc1c:	68fb      	ldr	r3, [r7, #12]
 801fc1e:	2201      	movs	r2, #1
 801fc20:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801fc22:	68fb      	ldr	r3, [r7, #12]
 801fc24:	2200      	movs	r2, #0
 801fc26:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801fc28:	88fb      	ldrh	r3, [r7, #6]
 801fc2a:	461a      	mov	r2, r3
 801fc2c:	68b9      	ldr	r1, [r7, #8]
 801fc2e:	68f8      	ldr	r0, [r7, #12]
 801fc30:	f7ff fd04 	bl	801f63c <UART_Start_Receive_IT>
 801fc34:	4603      	mov	r3, r0
 801fc36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801fc3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fc3e:	2b00      	cmp	r3, #0
 801fc40:	d124      	bne.n	801fc8c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fc42:	68fb      	ldr	r3, [r7, #12]
 801fc44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fc46:	2b01      	cmp	r3, #1
 801fc48:	d11d      	bne.n	801fc86 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801fc4a:	68fb      	ldr	r3, [r7, #12]
 801fc4c:	681b      	ldr	r3, [r3, #0]
 801fc4e:	2210      	movs	r2, #16
 801fc50:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fc52:	68fb      	ldr	r3, [r7, #12]
 801fc54:	681b      	ldr	r3, [r3, #0]
 801fc56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc58:	69bb      	ldr	r3, [r7, #24]
 801fc5a:	e853 3f00 	ldrex	r3, [r3]
 801fc5e:	617b      	str	r3, [r7, #20]
   return(result);
 801fc60:	697b      	ldr	r3, [r7, #20]
 801fc62:	f043 0310 	orr.w	r3, r3, #16
 801fc66:	62bb      	str	r3, [r7, #40]	; 0x28
 801fc68:	68fb      	ldr	r3, [r7, #12]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	461a      	mov	r2, r3
 801fc6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fc70:	627b      	str	r3, [r7, #36]	; 0x24
 801fc72:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc74:	6a39      	ldr	r1, [r7, #32]
 801fc76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801fc78:	e841 2300 	strex	r3, r2, [r1]
 801fc7c:	61fb      	str	r3, [r7, #28]
   return(result);
 801fc7e:	69fb      	ldr	r3, [r7, #28]
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d1e6      	bne.n	801fc52 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801fc84:	e002      	b.n	801fc8c <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801fc86:	2301      	movs	r3, #1
 801fc88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801fc8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801fc90:	e000      	b.n	801fc94 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801fc92:	2302      	movs	r3, #2
  }
}
 801fc94:	4618      	mov	r0, r3
 801fc96:	3730      	adds	r7, #48	; 0x30
 801fc98:	46bd      	mov	sp, r7
 801fc9a:	bd80      	pop	{r7, pc}

0801fc9c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801fc9c:	b580      	push	{r7, lr}
 801fc9e:	b084      	sub	sp, #16
 801fca0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801fca2:	4b2f      	ldr	r3, [pc, #188]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fca4:	22c0      	movs	r2, #192	; 0xc0
 801fca6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801fca8:	4b2d      	ldr	r3, [pc, #180]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fcaa:	22a8      	movs	r2, #168	; 0xa8
 801fcac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801fcae:	4b2c      	ldr	r3, [pc, #176]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fcb0:	220c      	movs	r2, #12
 801fcb2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801fcb4:	4b2a      	ldr	r3, [pc, #168]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fcb6:	2264      	movs	r2, #100	; 0x64
 801fcb8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801fcba:	4b2a      	ldr	r3, [pc, #168]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fcbc:	22ff      	movs	r2, #255	; 0xff
 801fcbe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801fcc0:	4b28      	ldr	r3, [pc, #160]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fcc2:	22ff      	movs	r2, #255	; 0xff
 801fcc4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801fcc6:	4b27      	ldr	r3, [pc, #156]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fcc8:	22ff      	movs	r2, #255	; 0xff
 801fcca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801fccc:	4b25      	ldr	r3, [pc, #148]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fcce:	2200      	movs	r2, #0
 801fcd0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801fcd2:	4b25      	ldr	r3, [pc, #148]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fcd4:	22c0      	movs	r2, #192	; 0xc0
 801fcd6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801fcd8:	4b23      	ldr	r3, [pc, #140]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fcda:	22a8      	movs	r2, #168	; 0xa8
 801fcdc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801fcde:	4b22      	ldr	r3, [pc, #136]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fce0:	220c      	movs	r2, #12
 801fce2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801fce4:	4b20      	ldr	r3, [pc, #128]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fce6:	2201      	movs	r2, #1
 801fce8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801fcea:	4b20      	ldr	r3, [pc, #128]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fcec:	781b      	ldrb	r3, [r3, #0]
 801fcee:	2b01      	cmp	r3, #1
 801fcf0:	d002      	beq.n	801fcf8 <MX_LWIP_Init+0x5c>
 801fcf2:	2b02      	cmp	r3, #2
 801fcf4:	d03c      	beq.n	801fd70 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801fcf6:	e162      	b.n	801ffbe <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801fcf8:	4b1c      	ldr	r3, [pc, #112]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fcfa:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801fcfe:	4b18      	ldr	r3, [pc, #96]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fd00:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801fd02:	4b1a      	ldr	r3, [pc, #104]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd04:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801fd08:	4b15      	ldr	r3, [pc, #84]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fd0a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801fd0c:	4b17      	ldr	r3, [pc, #92]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd0e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801fd12:	4b13      	ldr	r3, [pc, #76]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fd14:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801fd16:	4b15      	ldr	r3, [pc, #84]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd18:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 801fd1c:	4b10      	ldr	r3, [pc, #64]	; (801fd60 <MX_LWIP_Init+0xc4>)
 801fd1e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801fd20:	4b10      	ldr	r3, [pc, #64]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fd22:	22ff      	movs	r2, #255	; 0xff
 801fd24:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801fd26:	4b0f      	ldr	r3, [pc, #60]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fd28:	22ff      	movs	r2, #255	; 0xff
 801fd2a:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801fd2c:	4b0d      	ldr	r3, [pc, #52]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fd2e:	22ff      	movs	r2, #255	; 0xff
 801fd30:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801fd32:	4b0c      	ldr	r3, [pc, #48]	; (801fd64 <MX_LWIP_Init+0xc8>)
 801fd34:	2200      	movs	r2, #0
 801fd36:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801fd38:	4b0c      	ldr	r3, [pc, #48]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd3a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801fd3e:	4b0a      	ldr	r3, [pc, #40]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fd40:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801fd42:	4b0a      	ldr	r3, [pc, #40]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd44:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801fd48:	4b07      	ldr	r3, [pc, #28]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fd4a:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801fd4c:	4b07      	ldr	r3, [pc, #28]	; (801fd6c <MX_LWIP_Init+0xd0>)
 801fd4e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801fd52:	4b05      	ldr	r3, [pc, #20]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fd54:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801fd56:	4b04      	ldr	r3, [pc, #16]	; (801fd68 <MX_LWIP_Init+0xcc>)
 801fd58:	2201      	movs	r2, #1
 801fd5a:	70da      	strb	r2, [r3, #3]
		break;
 801fd5c:	e03b      	b.n	801fdd6 <MX_LWIP_Init+0x13a>
 801fd5e:	bf00      	nop
 801fd60:	2000dc84 	.word	0x2000dc84
 801fd64:	2000dc88 	.word	0x2000dc88
 801fd68:	2000dc8c 	.word	0x2000dc8c
 801fd6c:	20000504 	.word	0x20000504
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801fd70:	4b94      	ldr	r3, [pc, #592]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fd72:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801fd76:	4b94      	ldr	r3, [pc, #592]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fd78:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801fd7a:	4b92      	ldr	r3, [pc, #584]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fd7c:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801fd80:	4b91      	ldr	r3, [pc, #580]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fd82:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801fd84:	4b8f      	ldr	r3, [pc, #572]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fd86:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801fd8a:	4b8f      	ldr	r3, [pc, #572]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fd8c:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801fd8e:	4b8d      	ldr	r3, [pc, #564]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fd90:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 801fd94:	4b8c      	ldr	r3, [pc, #560]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fd96:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801fd98:	4b8c      	ldr	r3, [pc, #560]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fd9a:	22ff      	movs	r2, #255	; 0xff
 801fd9c:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801fd9e:	4b8b      	ldr	r3, [pc, #556]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fda0:	22ff      	movs	r2, #255	; 0xff
 801fda2:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801fda4:	4b89      	ldr	r3, [pc, #548]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fda6:	22ff      	movs	r2, #255	; 0xff
 801fda8:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801fdaa:	4b88      	ldr	r3, [pc, #544]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fdac:	2200      	movs	r2, #0
 801fdae:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801fdb0:	4b84      	ldr	r3, [pc, #528]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fdb2:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801fdb6:	4b86      	ldr	r3, [pc, #536]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fdb8:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801fdba:	4b82      	ldr	r3, [pc, #520]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fdbc:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801fdc0:	4b83      	ldr	r3, [pc, #524]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fdc2:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801fdc4:	4b7f      	ldr	r3, [pc, #508]	; (801ffc4 <MX_LWIP_Init+0x328>)
 801fdc6:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801fdca:	4b81      	ldr	r3, [pc, #516]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fdcc:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801fdce:	4b80      	ldr	r3, [pc, #512]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fdd0:	2201      	movs	r2, #1
 801fdd2:	70da      	strb	r2, [r3, #3]
		break;
 801fdd4:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801fdd6:	f000 fd42 	bl	802085e <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801fdda:	4b7b      	ldr	r3, [pc, #492]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fddc:	781b      	ldrb	r3, [r3, #0]
 801fdde:	061a      	lsls	r2, r3, #24
 801fde0:	4b79      	ldr	r3, [pc, #484]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fde2:	785b      	ldrb	r3, [r3, #1]
 801fde4:	041b      	lsls	r3, r3, #16
 801fde6:	431a      	orrs	r2, r3
 801fde8:	4b77      	ldr	r3, [pc, #476]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fdea:	789b      	ldrb	r3, [r3, #2]
 801fdec:	021b      	lsls	r3, r3, #8
 801fdee:	4313      	orrs	r3, r2
 801fdf0:	4a75      	ldr	r2, [pc, #468]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fdf2:	78d2      	ldrb	r2, [r2, #3]
 801fdf4:	4313      	orrs	r3, r2
 801fdf6:	061a      	lsls	r2, r3, #24
 801fdf8:	4b73      	ldr	r3, [pc, #460]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fdfa:	781b      	ldrb	r3, [r3, #0]
 801fdfc:	0619      	lsls	r1, r3, #24
 801fdfe:	4b72      	ldr	r3, [pc, #456]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe00:	785b      	ldrb	r3, [r3, #1]
 801fe02:	041b      	lsls	r3, r3, #16
 801fe04:	4319      	orrs	r1, r3
 801fe06:	4b70      	ldr	r3, [pc, #448]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe08:	789b      	ldrb	r3, [r3, #2]
 801fe0a:	021b      	lsls	r3, r3, #8
 801fe0c:	430b      	orrs	r3, r1
 801fe0e:	496e      	ldr	r1, [pc, #440]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe10:	78c9      	ldrb	r1, [r1, #3]
 801fe12:	430b      	orrs	r3, r1
 801fe14:	021b      	lsls	r3, r3, #8
 801fe16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801fe1a:	431a      	orrs	r2, r3
 801fe1c:	4b6a      	ldr	r3, [pc, #424]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe1e:	781b      	ldrb	r3, [r3, #0]
 801fe20:	0619      	lsls	r1, r3, #24
 801fe22:	4b69      	ldr	r3, [pc, #420]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe24:	785b      	ldrb	r3, [r3, #1]
 801fe26:	041b      	lsls	r3, r3, #16
 801fe28:	4319      	orrs	r1, r3
 801fe2a:	4b67      	ldr	r3, [pc, #412]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe2c:	789b      	ldrb	r3, [r3, #2]
 801fe2e:	021b      	lsls	r3, r3, #8
 801fe30:	430b      	orrs	r3, r1
 801fe32:	4965      	ldr	r1, [pc, #404]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe34:	78c9      	ldrb	r1, [r1, #3]
 801fe36:	430b      	orrs	r3, r1
 801fe38:	0a1b      	lsrs	r3, r3, #8
 801fe3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fe3e:	431a      	orrs	r2, r3
 801fe40:	4b61      	ldr	r3, [pc, #388]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe42:	781b      	ldrb	r3, [r3, #0]
 801fe44:	0619      	lsls	r1, r3, #24
 801fe46:	4b60      	ldr	r3, [pc, #384]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe48:	785b      	ldrb	r3, [r3, #1]
 801fe4a:	041b      	lsls	r3, r3, #16
 801fe4c:	4319      	orrs	r1, r3
 801fe4e:	4b5e      	ldr	r3, [pc, #376]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe50:	789b      	ldrb	r3, [r3, #2]
 801fe52:	021b      	lsls	r3, r3, #8
 801fe54:	430b      	orrs	r3, r1
 801fe56:	495c      	ldr	r1, [pc, #368]	; (801ffc8 <MX_LWIP_Init+0x32c>)
 801fe58:	78c9      	ldrb	r1, [r1, #3]
 801fe5a:	430b      	orrs	r3, r1
 801fe5c:	0e1b      	lsrs	r3, r3, #24
 801fe5e:	4313      	orrs	r3, r2
 801fe60:	4a5c      	ldr	r2, [pc, #368]	; (801ffd4 <MX_LWIP_Init+0x338>)
 801fe62:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801fe64:	4b59      	ldr	r3, [pc, #356]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe66:	781b      	ldrb	r3, [r3, #0]
 801fe68:	061a      	lsls	r2, r3, #24
 801fe6a:	4b58      	ldr	r3, [pc, #352]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe6c:	785b      	ldrb	r3, [r3, #1]
 801fe6e:	041b      	lsls	r3, r3, #16
 801fe70:	431a      	orrs	r2, r3
 801fe72:	4b56      	ldr	r3, [pc, #344]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe74:	789b      	ldrb	r3, [r3, #2]
 801fe76:	021b      	lsls	r3, r3, #8
 801fe78:	4313      	orrs	r3, r2
 801fe7a:	4a54      	ldr	r2, [pc, #336]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe7c:	78d2      	ldrb	r2, [r2, #3]
 801fe7e:	4313      	orrs	r3, r2
 801fe80:	061a      	lsls	r2, r3, #24
 801fe82:	4b52      	ldr	r3, [pc, #328]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe84:	781b      	ldrb	r3, [r3, #0]
 801fe86:	0619      	lsls	r1, r3, #24
 801fe88:	4b50      	ldr	r3, [pc, #320]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe8a:	785b      	ldrb	r3, [r3, #1]
 801fe8c:	041b      	lsls	r3, r3, #16
 801fe8e:	4319      	orrs	r1, r3
 801fe90:	4b4e      	ldr	r3, [pc, #312]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe92:	789b      	ldrb	r3, [r3, #2]
 801fe94:	021b      	lsls	r3, r3, #8
 801fe96:	430b      	orrs	r3, r1
 801fe98:	494c      	ldr	r1, [pc, #304]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fe9a:	78c9      	ldrb	r1, [r1, #3]
 801fe9c:	430b      	orrs	r3, r1
 801fe9e:	021b      	lsls	r3, r3, #8
 801fea0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801fea4:	431a      	orrs	r2, r3
 801fea6:	4b49      	ldr	r3, [pc, #292]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fea8:	781b      	ldrb	r3, [r3, #0]
 801feaa:	0619      	lsls	r1, r3, #24
 801feac:	4b47      	ldr	r3, [pc, #284]	; (801ffcc <MX_LWIP_Init+0x330>)
 801feae:	785b      	ldrb	r3, [r3, #1]
 801feb0:	041b      	lsls	r3, r3, #16
 801feb2:	4319      	orrs	r1, r3
 801feb4:	4b45      	ldr	r3, [pc, #276]	; (801ffcc <MX_LWIP_Init+0x330>)
 801feb6:	789b      	ldrb	r3, [r3, #2]
 801feb8:	021b      	lsls	r3, r3, #8
 801feba:	430b      	orrs	r3, r1
 801febc:	4943      	ldr	r1, [pc, #268]	; (801ffcc <MX_LWIP_Init+0x330>)
 801febe:	78c9      	ldrb	r1, [r1, #3]
 801fec0:	430b      	orrs	r3, r1
 801fec2:	0a1b      	lsrs	r3, r3, #8
 801fec4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801fec8:	431a      	orrs	r2, r3
 801feca:	4b40      	ldr	r3, [pc, #256]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fecc:	781b      	ldrb	r3, [r3, #0]
 801fece:	0619      	lsls	r1, r3, #24
 801fed0:	4b3e      	ldr	r3, [pc, #248]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fed2:	785b      	ldrb	r3, [r3, #1]
 801fed4:	041b      	lsls	r3, r3, #16
 801fed6:	4319      	orrs	r1, r3
 801fed8:	4b3c      	ldr	r3, [pc, #240]	; (801ffcc <MX_LWIP_Init+0x330>)
 801feda:	789b      	ldrb	r3, [r3, #2]
 801fedc:	021b      	lsls	r3, r3, #8
 801fede:	430b      	orrs	r3, r1
 801fee0:	493a      	ldr	r1, [pc, #232]	; (801ffcc <MX_LWIP_Init+0x330>)
 801fee2:	78c9      	ldrb	r1, [r1, #3]
 801fee4:	430b      	orrs	r3, r1
 801fee6:	0e1b      	lsrs	r3, r3, #24
 801fee8:	4313      	orrs	r3, r2
 801feea:	4a3b      	ldr	r2, [pc, #236]	; (801ffd8 <MX_LWIP_Init+0x33c>)
 801feec:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801feee:	4b38      	ldr	r3, [pc, #224]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fef0:	781b      	ldrb	r3, [r3, #0]
 801fef2:	061a      	lsls	r2, r3, #24
 801fef4:	4b36      	ldr	r3, [pc, #216]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fef6:	785b      	ldrb	r3, [r3, #1]
 801fef8:	041b      	lsls	r3, r3, #16
 801fefa:	431a      	orrs	r2, r3
 801fefc:	4b34      	ldr	r3, [pc, #208]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801fefe:	789b      	ldrb	r3, [r3, #2]
 801ff00:	021b      	lsls	r3, r3, #8
 801ff02:	4313      	orrs	r3, r2
 801ff04:	4a32      	ldr	r2, [pc, #200]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff06:	78d2      	ldrb	r2, [r2, #3]
 801ff08:	4313      	orrs	r3, r2
 801ff0a:	061a      	lsls	r2, r3, #24
 801ff0c:	4b30      	ldr	r3, [pc, #192]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff0e:	781b      	ldrb	r3, [r3, #0]
 801ff10:	0619      	lsls	r1, r3, #24
 801ff12:	4b2f      	ldr	r3, [pc, #188]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff14:	785b      	ldrb	r3, [r3, #1]
 801ff16:	041b      	lsls	r3, r3, #16
 801ff18:	4319      	orrs	r1, r3
 801ff1a:	4b2d      	ldr	r3, [pc, #180]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff1c:	789b      	ldrb	r3, [r3, #2]
 801ff1e:	021b      	lsls	r3, r3, #8
 801ff20:	430b      	orrs	r3, r1
 801ff22:	492b      	ldr	r1, [pc, #172]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff24:	78c9      	ldrb	r1, [r1, #3]
 801ff26:	430b      	orrs	r3, r1
 801ff28:	021b      	lsls	r3, r3, #8
 801ff2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801ff2e:	431a      	orrs	r2, r3
 801ff30:	4b27      	ldr	r3, [pc, #156]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff32:	781b      	ldrb	r3, [r3, #0]
 801ff34:	0619      	lsls	r1, r3, #24
 801ff36:	4b26      	ldr	r3, [pc, #152]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff38:	785b      	ldrb	r3, [r3, #1]
 801ff3a:	041b      	lsls	r3, r3, #16
 801ff3c:	4319      	orrs	r1, r3
 801ff3e:	4b24      	ldr	r3, [pc, #144]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff40:	789b      	ldrb	r3, [r3, #2]
 801ff42:	021b      	lsls	r3, r3, #8
 801ff44:	430b      	orrs	r3, r1
 801ff46:	4922      	ldr	r1, [pc, #136]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff48:	78c9      	ldrb	r1, [r1, #3]
 801ff4a:	430b      	orrs	r3, r1
 801ff4c:	0a1b      	lsrs	r3, r3, #8
 801ff4e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff52:	431a      	orrs	r2, r3
 801ff54:	4b1e      	ldr	r3, [pc, #120]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff56:	781b      	ldrb	r3, [r3, #0]
 801ff58:	0619      	lsls	r1, r3, #24
 801ff5a:	4b1d      	ldr	r3, [pc, #116]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff5c:	785b      	ldrb	r3, [r3, #1]
 801ff5e:	041b      	lsls	r3, r3, #16
 801ff60:	4319      	orrs	r1, r3
 801ff62:	4b1b      	ldr	r3, [pc, #108]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff64:	789b      	ldrb	r3, [r3, #2]
 801ff66:	021b      	lsls	r3, r3, #8
 801ff68:	430b      	orrs	r3, r1
 801ff6a:	4919      	ldr	r1, [pc, #100]	; (801ffd0 <MX_LWIP_Init+0x334>)
 801ff6c:	78c9      	ldrb	r1, [r1, #3]
 801ff6e:	430b      	orrs	r3, r1
 801ff70:	0e1b      	lsrs	r3, r3, #24
 801ff72:	4313      	orrs	r3, r2
 801ff74:	4a19      	ldr	r2, [pc, #100]	; (801ffdc <MX_LWIP_Init+0x340>)
 801ff76:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801ff78:	4b19      	ldr	r3, [pc, #100]	; (801ffe0 <MX_LWIP_Init+0x344>)
 801ff7a:	9302      	str	r3, [sp, #8]
 801ff7c:	4b19      	ldr	r3, [pc, #100]	; (801ffe4 <MX_LWIP_Init+0x348>)
 801ff7e:	9301      	str	r3, [sp, #4]
 801ff80:	2300      	movs	r3, #0
 801ff82:	9300      	str	r3, [sp, #0]
 801ff84:	4b15      	ldr	r3, [pc, #84]	; (801ffdc <MX_LWIP_Init+0x340>)
 801ff86:	4a14      	ldr	r2, [pc, #80]	; (801ffd8 <MX_LWIP_Init+0x33c>)
 801ff88:	4912      	ldr	r1, [pc, #72]	; (801ffd4 <MX_LWIP_Init+0x338>)
 801ff8a:	4817      	ldr	r0, [pc, #92]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ff8c:	f001 f998 	bl	80212c0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801ff90:	4815      	ldr	r0, [pc, #84]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ff92:	f001 fb49 	bl	8021628 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801ff96:	4b14      	ldr	r3, [pc, #80]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ff98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801ff9c:	089b      	lsrs	r3, r3, #2
 801ff9e:	f003 0301 	and.w	r3, r3, #1
 801ffa2:	b2db      	uxtb	r3, r3
 801ffa4:	2b00      	cmp	r3, #0
 801ffa6:	d003      	beq.n	801ffb0 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801ffa8:	480f      	ldr	r0, [pc, #60]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ffaa:	f001 fb4d 	bl	8021648 <netif_set_up>
 801ffae:	e002      	b.n	801ffb6 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801ffb0:	480d      	ldr	r0, [pc, #52]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ffb2:	f001 fbb5 	bl	8021720 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801ffb6:	490d      	ldr	r1, [pc, #52]	; (801ffec <MX_LWIP_Init+0x350>)
 801ffb8:	480b      	ldr	r0, [pc, #44]	; (801ffe8 <MX_LWIP_Init+0x34c>)
 801ffba:	f001 fc47 	bl	802184c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801ffbe:	46bd      	mov	sp, r7
 801ffc0:	bd80      	pop	{r7, pc}
 801ffc2:	bf00      	nop
 801ffc4:	20000504 	.word	0x20000504
 801ffc8:	2000dc84 	.word	0x2000dc84
 801ffcc:	2000dc88 	.word	0x2000dc88
 801ffd0:	2000dc8c 	.word	0x2000dc8c
 801ffd4:	2000dc78 	.word	0x2000dc78
 801ffd8:	2000dc7c 	.word	0x2000dc7c
 801ffdc:	2000dc80 	.word	0x2000dc80
 801ffe0:	08025609 	.word	0x08025609
 801ffe4:	0802037d 	.word	0x0802037d
 801ffe8:	2000dc38 	.word	0x2000dc38
 801ffec:	08020041 	.word	0x08020041

0801fff0 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801fff0:	b580      	push	{r7, lr}
 801fff2:	b082      	sub	sp, #8
 801fff4:	af00      	add	r7, sp, #0
 801fff6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801fff8:	f7f8 fe1a 	bl	8018c30 <HAL_GetTick>
 801fffc:	4602      	mov	r2, r0
 801fffe:	4b08      	ldr	r3, [pc, #32]	; (8020020 <Ethernet_Link_Periodic_Handle+0x30>)
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	1ad3      	subs	r3, r2, r3
 8020004:	2b63      	cmp	r3, #99	; 0x63
 8020006:	d907      	bls.n	8020018 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 8020008:	f7f8 fe12 	bl	8018c30 <HAL_GetTick>
 802000c:	4603      	mov	r3, r0
 802000e:	4a04      	ldr	r2, [pc, #16]	; (8020020 <Ethernet_Link_Periodic_Handle+0x30>)
 8020010:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8020012:	6878      	ldr	r0, [r7, #4]
 8020014:	f000 fb10 	bl	8020638 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 8020018:	bf00      	nop
 802001a:	3708      	adds	r7, #8
 802001c:	46bd      	mov	sp, r7
 802001e:	bd80      	pop	{r7, pc}
 8020020:	2000dc34 	.word	0x2000dc34

08020024 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8020024:	b580      	push	{r7, lr}
 8020026:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8020028:	4804      	ldr	r0, [pc, #16]	; (802003c <MX_LWIP_Process+0x18>)
 802002a:	f000 f987 	bl	802033c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 802002e:	f002 fb83 	bl	8022738 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8020032:	4802      	ldr	r0, [pc, #8]	; (802003c <MX_LWIP_Process+0x18>)
 8020034:	f7ff ffdc 	bl	801fff0 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 8020038:	bf00      	nop
 802003a:	bd80      	pop	{r7, pc}
 802003c:	2000dc38 	.word	0x2000dc38

08020040 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8020040:	b480      	push	{r7}
 8020042:	b083      	sub	sp, #12
 8020044:	af00      	add	r7, sp, #0
 8020046:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8020048:	bf00      	nop
 802004a:	370c      	adds	r7, #12
 802004c:	46bd      	mov	sp, r7
 802004e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020052:	4770      	bx	lr

08020054 <SCB_InvalidateDCache_by_Addr>:
{
 8020054:	b480      	push	{r7}
 8020056:	b087      	sub	sp, #28
 8020058:	af00      	add	r7, sp, #0
 802005a:	6078      	str	r0, [r7, #4]
 802005c:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8020062:	687b      	ldr	r3, [r7, #4]
 8020064:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8020066:	2320      	movs	r3, #32
 8020068:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 802006a:	f3bf 8f4f 	dsb	sy
}
 802006e:	bf00      	nop
    while (op_size > 0) {
 8020070:	e00b      	b.n	802008a <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8020072:	4a0d      	ldr	r2, [pc, #52]	; (80200a8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8020074:	693b      	ldr	r3, [r7, #16]
 8020076:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 802007a:	68fb      	ldr	r3, [r7, #12]
 802007c:	693a      	ldr	r2, [r7, #16]
 802007e:	4413      	add	r3, r2
 8020080:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8020082:	697a      	ldr	r2, [r7, #20]
 8020084:	68fb      	ldr	r3, [r7, #12]
 8020086:	1ad3      	subs	r3, r2, r3
 8020088:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 802008a:	697b      	ldr	r3, [r7, #20]
 802008c:	2b00      	cmp	r3, #0
 802008e:	dcf0      	bgt.n	8020072 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8020090:	f3bf 8f4f 	dsb	sy
}
 8020094:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8020096:	f3bf 8f6f 	isb	sy
}
 802009a:	bf00      	nop
}
 802009c:	bf00      	nop
 802009e:	371c      	adds	r7, #28
 80200a0:	46bd      	mov	sp, r7
 80200a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200a6:	4770      	bx	lr
 80200a8:	e000ed00 	.word	0xe000ed00

080200ac <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80200ac:	b580      	push	{r7, lr}
 80200ae:	b084      	sub	sp, #16
 80200b0:	af00      	add	r7, sp, #0
 80200b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80200b4:	2300      	movs	r3, #0
 80200b6:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80200b8:	4b47      	ldr	r3, [pc, #284]	; (80201d8 <low_level_init+0x12c>)
 80200ba:	4a48      	ldr	r2, [pc, #288]	; (80201dc <low_level_init+0x130>)
 80200bc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80200be:	2300      	movs	r3, #0
 80200c0:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80200c2:	2380      	movs	r3, #128	; 0x80
 80200c4:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80200c6:	23e1      	movs	r3, #225	; 0xe1
 80200c8:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80200ca:	2300      	movs	r3, #0
 80200cc:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80200ce:	2300      	movs	r3, #0
 80200d0:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80200d2:	2300      	movs	r3, #0
 80200d4:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80200d6:	4a40      	ldr	r2, [pc, #256]	; (80201d8 <low_level_init+0x12c>)
 80200d8:	f107 0308 	add.w	r3, r7, #8
 80200dc:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80200de:	4b3e      	ldr	r3, [pc, #248]	; (80201d8 <low_level_init+0x12c>)
 80200e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80200e4:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80200e6:	4b3c      	ldr	r3, [pc, #240]	; (80201d8 <low_level_init+0x12c>)
 80200e8:	4a3d      	ldr	r2, [pc, #244]	; (80201e0 <low_level_init+0x134>)
 80200ea:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80200ec:	4b3a      	ldr	r3, [pc, #232]	; (80201d8 <low_level_init+0x12c>)
 80200ee:	4a3d      	ldr	r2, [pc, #244]	; (80201e4 <low_level_init+0x138>)
 80200f0:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80200f2:	4b39      	ldr	r3, [pc, #228]	; (80201d8 <low_level_init+0x12c>)
 80200f4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80200f8:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 80200fa:	4b3b      	ldr	r3, [pc, #236]	; (80201e8 <low_level_init+0x13c>)
 80200fc:	781b      	ldrb	r3, [r3, #0]
 80200fe:	2b01      	cmp	r3, #1
 8020100:	d002      	beq.n	8020108 <low_level_init+0x5c>
 8020102:	2b02      	cmp	r3, #2
 8020104:	d004      	beq.n	8020110 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 8020106:	e063      	b.n	80201d0 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 8020108:	4b33      	ldr	r3, [pc, #204]	; (80201d8 <low_level_init+0x12c>)
 802010a:	4a38      	ldr	r2, [pc, #224]	; (80201ec <low_level_init+0x140>)
 802010c:	605a      	str	r2, [r3, #4]
		break;
 802010e:	e003      	b.n	8020118 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 8020110:	4b31      	ldr	r3, [pc, #196]	; (80201d8 <low_level_init+0x12c>)
 8020112:	4a37      	ldr	r2, [pc, #220]	; (80201f0 <low_level_init+0x144>)
 8020114:	605a      	str	r2, [r3, #4]
		break;
 8020116:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8020118:	482f      	ldr	r0, [pc, #188]	; (80201d8 <low_level_init+0x12c>)
 802011a:	f7f9 fdbb 	bl	8019c94 <HAL_ETH_Init>
 802011e:	4603      	mov	r3, r0
 8020120:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8020122:	2238      	movs	r2, #56	; 0x38
 8020124:	2100      	movs	r1, #0
 8020126:	4833      	ldr	r0, [pc, #204]	; (80201f4 <low_level_init+0x148>)
 8020128:	f005 fbb0 	bl	802588c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 802012c:	4b31      	ldr	r3, [pc, #196]	; (80201f4 <low_level_init+0x148>)
 802012e:	2221      	movs	r2, #33	; 0x21
 8020130:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8020132:	4b30      	ldr	r3, [pc, #192]	; (80201f4 <low_level_init+0x148>)
 8020134:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8020138:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 802013a:	4b2e      	ldr	r3, [pc, #184]	; (80201f4 <low_level_init+0x148>)
 802013c:	2200      	movs	r2, #0
 802013e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8020140:	482d      	ldr	r0, [pc, #180]	; (80201f8 <low_level_init+0x14c>)
 8020142:	f000 ff3d 	bl	8020fc0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	2206      	movs	r2, #6
 802014a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 802014e:	4b22      	ldr	r3, [pc, #136]	; (80201d8 <low_level_init+0x12c>)
 8020150:	685b      	ldr	r3, [r3, #4]
 8020152:	781a      	ldrb	r2, [r3, #0]
 8020154:	687b      	ldr	r3, [r7, #4]
 8020156:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 802015a:	4b1f      	ldr	r3, [pc, #124]	; (80201d8 <low_level_init+0x12c>)
 802015c:	685b      	ldr	r3, [r3, #4]
 802015e:	785a      	ldrb	r2, [r3, #1]
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8020166:	4b1c      	ldr	r3, [pc, #112]	; (80201d8 <low_level_init+0x12c>)
 8020168:	685b      	ldr	r3, [r3, #4]
 802016a:	789a      	ldrb	r2, [r3, #2]
 802016c:	687b      	ldr	r3, [r7, #4]
 802016e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8020172:	4b19      	ldr	r3, [pc, #100]	; (80201d8 <low_level_init+0x12c>)
 8020174:	685b      	ldr	r3, [r3, #4]
 8020176:	78da      	ldrb	r2, [r3, #3]
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 802017e:	4b16      	ldr	r3, [pc, #88]	; (80201d8 <low_level_init+0x12c>)
 8020180:	685b      	ldr	r3, [r3, #4]
 8020182:	791a      	ldrb	r2, [r3, #4]
 8020184:	687b      	ldr	r3, [r7, #4]
 8020186:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 802018a:	4b13      	ldr	r3, [pc, #76]	; (80201d8 <low_level_init+0x12c>)
 802018c:	685b      	ldr	r3, [r3, #4]
 802018e:	795a      	ldrb	r2, [r3, #5]
 8020190:	687b      	ldr	r3, [r7, #4]
 8020192:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8020196:	687b      	ldr	r3, [r7, #4]
 8020198:	f240 52dc 	movw	r2, #1500	; 0x5dc
 802019c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80201a4:	f043 030a 	orr.w	r3, r3, #10
 80201a8:	b2da      	uxtb	r2, r3
 80201aa:	687b      	ldr	r3, [r7, #4]
 80201ac:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 80201b0:	4912      	ldr	r1, [pc, #72]	; (80201fc <low_level_init+0x150>)
 80201b2:	4813      	ldr	r0, [pc, #76]	; (8020200 <low_level_init+0x154>)
 80201b4:	f7f8 fb7b 	bl	80188ae <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 80201b8:	4811      	ldr	r0, [pc, #68]	; (8020200 <low_level_init+0x154>)
 80201ba:	f7f8 fbaa 	bl	8018912 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 80201be:	7bfb      	ldrb	r3, [r7, #15]
 80201c0:	2b00      	cmp	r3, #0
 80201c2:	d103      	bne.n	80201cc <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 80201c4:	6878      	ldr	r0, [r7, #4]
 80201c6:	f000 fa37 	bl	8020638 <ethernet_link_check_state>
 80201ca:	e001      	b.n	80201d0 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 80201cc:	f7f6 ff36 	bl	801703c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80201d0:	3710      	adds	r7, #16
 80201d2:	46bd      	mov	sp, r7
 80201d4:	bd80      	pop	{r7, pc}
 80201d6:	bf00      	nop
 80201d8:	2001258c 	.word	0x2001258c
 80201dc:	40028000 	.word	0x40028000
 80201e0:	20000444 	.word	0x20000444
 80201e4:	200003a4 	.word	0x200003a4
 80201e8:	20000504 	.word	0x20000504
 80201ec:	20000549 	.word	0x20000549
 80201f0:	200007b7 	.word	0x200007b7
 80201f4:	2001263c 	.word	0x2001263c
 80201f8:	0802cee4 	.word	0x0802cee4
 80201fc:	20000328 	.word	0x20000328
 8020200:	20012674 	.word	0x20012674

08020204 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8020204:	b580      	push	{r7, lr}
 8020206:	b092      	sub	sp, #72	; 0x48
 8020208:	af00      	add	r7, sp, #0
 802020a:	6078      	str	r0, [r7, #4]
 802020c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 802020e:	2300      	movs	r3, #0
 8020210:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8020212:	2300      	movs	r3, #0
 8020214:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8020216:	2300      	movs	r3, #0
 8020218:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 802021c:	f107 030c 	add.w	r3, r7, #12
 8020220:	2230      	movs	r2, #48	; 0x30
 8020222:	2100      	movs	r1, #0
 8020224:	4618      	mov	r0, r3
 8020226:	f005 fb31 	bl	802588c <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 802022a:	f107 030c 	add.w	r3, r7, #12
 802022e:	2230      	movs	r2, #48	; 0x30
 8020230:	2100      	movs	r1, #0
 8020232:	4618      	mov	r0, r3
 8020234:	f005 fb2a 	bl	802588c <memset>

  for(q = p; q != NULL; q = q->next)
 8020238:	683b      	ldr	r3, [r7, #0]
 802023a:	643b      	str	r3, [r7, #64]	; 0x40
 802023c:	e045      	b.n	80202ca <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 802023e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020240:	2b03      	cmp	r3, #3
 8020242:	d902      	bls.n	802024a <low_level_output+0x46>
      return ERR_IF;
 8020244:	f06f 030b 	mvn.w	r3, #11
 8020248:	e055      	b.n	80202f6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 802024a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802024c:	6859      	ldr	r1, [r3, #4]
 802024e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020250:	4613      	mov	r3, r2
 8020252:	005b      	lsls	r3, r3, #1
 8020254:	4413      	add	r3, r2
 8020256:	009b      	lsls	r3, r3, #2
 8020258:	3348      	adds	r3, #72	; 0x48
 802025a:	443b      	add	r3, r7
 802025c:	3b3c      	subs	r3, #60	; 0x3c
 802025e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8020260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020262:	895b      	ldrh	r3, [r3, #10]
 8020264:	4619      	mov	r1, r3
 8020266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020268:	4613      	mov	r3, r2
 802026a:	005b      	lsls	r3, r3, #1
 802026c:	4413      	add	r3, r2
 802026e:	009b      	lsls	r3, r3, #2
 8020270:	3348      	adds	r3, #72	; 0x48
 8020272:	443b      	add	r3, r7
 8020274:	3b38      	subs	r3, #56	; 0x38
 8020276:	6019      	str	r1, [r3, #0]

    if(i>0)
 8020278:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802027a:	2b00      	cmp	r3, #0
 802027c:	d011      	beq.n	80202a2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 802027e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020280:	1e5a      	subs	r2, r3, #1
 8020282:	f107 000c 	add.w	r0, r7, #12
 8020286:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8020288:	460b      	mov	r3, r1
 802028a:	005b      	lsls	r3, r3, #1
 802028c:	440b      	add	r3, r1
 802028e:	009b      	lsls	r3, r3, #2
 8020290:	18c1      	adds	r1, r0, r3
 8020292:	4613      	mov	r3, r2
 8020294:	005b      	lsls	r3, r3, #1
 8020296:	4413      	add	r3, r2
 8020298:	009b      	lsls	r3, r3, #2
 802029a:	3348      	adds	r3, #72	; 0x48
 802029c:	443b      	add	r3, r7
 802029e:	3b34      	subs	r3, #52	; 0x34
 80202a0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80202a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	d109      	bne.n	80202be <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80202aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80202ac:	4613      	mov	r3, r2
 80202ae:	005b      	lsls	r3, r3, #1
 80202b0:	4413      	add	r3, r2
 80202b2:	009b      	lsls	r3, r3, #2
 80202b4:	3348      	adds	r3, #72	; 0x48
 80202b6:	443b      	add	r3, r7
 80202b8:	3b34      	subs	r3, #52	; 0x34
 80202ba:	2200      	movs	r2, #0
 80202bc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80202be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80202c0:	3301      	adds	r3, #1
 80202c2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 80202c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80202c6:	681b      	ldr	r3, [r3, #0]
 80202c8:	643b      	str	r3, [r7, #64]	; 0x40
 80202ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80202cc:	2b00      	cmp	r3, #0
 80202ce:	d1b6      	bne.n	802023e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 80202d0:	683b      	ldr	r3, [r7, #0]
 80202d2:	891b      	ldrh	r3, [r3, #8]
 80202d4:	461a      	mov	r2, r3
 80202d6:	4b0a      	ldr	r3, [pc, #40]	; (8020300 <low_level_output+0xfc>)
 80202d8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 80202da:	4a09      	ldr	r2, [pc, #36]	; (8020300 <low_level_output+0xfc>)
 80202dc:	f107 030c 	add.w	r3, r7, #12
 80202e0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 80202e2:	4a07      	ldr	r2, [pc, #28]	; (8020300 <low_level_output+0xfc>)
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 80202e8:	2214      	movs	r2, #20
 80202ea:	4905      	ldr	r1, [pc, #20]	; (8020300 <low_level_output+0xfc>)
 80202ec:	4805      	ldr	r0, [pc, #20]	; (8020304 <low_level_output+0x100>)
 80202ee:	f7f9 fe05 	bl	8019efc <HAL_ETH_Transmit>

  return errval;
 80202f2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80202f6:	4618      	mov	r0, r3
 80202f8:	3748      	adds	r7, #72	; 0x48
 80202fa:	46bd      	mov	sp, r7
 80202fc:	bd80      	pop	{r7, pc}
 80202fe:	bf00      	nop
 8020300:	2001263c 	.word	0x2001263c
 8020304:	2001258c 	.word	0x2001258c

08020308 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8020308:	b580      	push	{r7, lr}
 802030a:	b084      	sub	sp, #16
 802030c:	af00      	add	r7, sp, #0
 802030e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8020310:	2300      	movs	r3, #0
 8020312:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8020314:	4b07      	ldr	r3, [pc, #28]	; (8020334 <low_level_input+0x2c>)
 8020316:	781b      	ldrb	r3, [r3, #0]
 8020318:	2b00      	cmp	r3, #0
 802031a:	d105      	bne.n	8020328 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 802031c:	f107 030c 	add.w	r3, r7, #12
 8020320:	4619      	mov	r1, r3
 8020322:	4805      	ldr	r0, [pc, #20]	; (8020338 <low_level_input+0x30>)
 8020324:	f7f9 fe7e 	bl	801a024 <HAL_ETH_ReadData>
  }

  return p;
 8020328:	68fb      	ldr	r3, [r7, #12]
}
 802032a:	4618      	mov	r0, r3
 802032c:	3710      	adds	r7, #16
 802032e:	46bd      	mov	sp, r7
 8020330:	bd80      	pop	{r7, pc}
 8020332:	bf00      	nop
 8020334:	20012588 	.word	0x20012588
 8020338:	2001258c 	.word	0x2001258c

0802033c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 802033c:	b580      	push	{r7, lr}
 802033e:	b084      	sub	sp, #16
 8020340:	af00      	add	r7, sp, #0
 8020342:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8020344:	2300      	movs	r3, #0
 8020346:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8020348:	6878      	ldr	r0, [r7, #4]
 802034a:	f7ff ffdd 	bl	8020308 <low_level_input>
 802034e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8020350:	68fb      	ldr	r3, [r7, #12]
 8020352:	2b00      	cmp	r3, #0
 8020354:	d00a      	beq.n	802036c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 8020356:	687b      	ldr	r3, [r7, #4]
 8020358:	691b      	ldr	r3, [r3, #16]
 802035a:	6879      	ldr	r1, [r7, #4]
 802035c:	68f8      	ldr	r0, [r7, #12]
 802035e:	4798      	blx	r3
 8020360:	4603      	mov	r3, r0
 8020362:	2b00      	cmp	r3, #0
 8020364:	d002      	beq.n	802036c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 8020366:	68f8      	ldr	r0, [r7, #12]
 8020368:	f001 fe40 	bl	8021fec <pbuf_free>
      }
    }
  } while(p!=NULL);
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	2b00      	cmp	r3, #0
 8020370:	d1ea      	bne.n	8020348 <ethernetif_input+0xc>
}
 8020372:	bf00      	nop
 8020374:	bf00      	nop
 8020376:	3710      	adds	r7, #16
 8020378:	46bd      	mov	sp, r7
 802037a:	bd80      	pop	{r7, pc}

0802037c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 802037c:	b580      	push	{r7, lr}
 802037e:	b082      	sub	sp, #8
 8020380:	af00      	add	r7, sp, #0
 8020382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8020384:	687b      	ldr	r3, [r7, #4]
 8020386:	2b00      	cmp	r3, #0
 8020388:	d106      	bne.n	8020398 <ethernetif_init+0x1c>
 802038a:	4b0e      	ldr	r3, [pc, #56]	; (80203c4 <ethernetif_init+0x48>)
 802038c:	f240 1287 	movw	r2, #391	; 0x187
 8020390:	490d      	ldr	r1, [pc, #52]	; (80203c8 <ethernetif_init+0x4c>)
 8020392:	480e      	ldr	r0, [pc, #56]	; (80203cc <ethernetif_init+0x50>)
 8020394:	f005 fb62 	bl	8025a5c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	2273      	movs	r2, #115	; 0x73
 802039c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80203a0:	687b      	ldr	r3, [r7, #4]
 80203a2:	2274      	movs	r2, #116	; 0x74
 80203a4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80203a8:	687b      	ldr	r3, [r7, #4]
 80203aa:	4a09      	ldr	r2, [pc, #36]	; (80203d0 <ethernetif_init+0x54>)
 80203ac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80203ae:	687b      	ldr	r3, [r7, #4]
 80203b0:	4a08      	ldr	r2, [pc, #32]	; (80203d4 <ethernetif_init+0x58>)
 80203b2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80203b4:	6878      	ldr	r0, [r7, #4]
 80203b6:	f7ff fe79 	bl	80200ac <low_level_init>

  return ERR_OK;
 80203ba:	2300      	movs	r3, #0
}
 80203bc:	4618      	mov	r0, r3
 80203be:	3708      	adds	r7, #8
 80203c0:	46bd      	mov	sp, r7
 80203c2:	bd80      	pop	{r7, pc}
 80203c4:	0802b11c 	.word	0x0802b11c
 80203c8:	0802b17c 	.word	0x0802b17c
 80203cc:	0802b18c 	.word	0x0802b18c
 80203d0:	08023999 	.word	0x08023999
 80203d4:	08020205 	.word	0x08020205

080203d8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80203d8:	b580      	push	{r7, lr}
 80203da:	b084      	sub	sp, #16
 80203dc:	af00      	add	r7, sp, #0
 80203de:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80203e0:	687b      	ldr	r3, [r7, #4]
 80203e2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80203e4:	68f9      	ldr	r1, [r7, #12]
 80203e6:	4807      	ldr	r0, [pc, #28]	; (8020404 <pbuf_free_custom+0x2c>)
 80203e8:	f000 fecc 	bl	8021184 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80203ec:	4b06      	ldr	r3, [pc, #24]	; (8020408 <pbuf_free_custom+0x30>)
 80203ee:	781b      	ldrb	r3, [r3, #0]
 80203f0:	2b01      	cmp	r3, #1
 80203f2:	d102      	bne.n	80203fa <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80203f4:	4b04      	ldr	r3, [pc, #16]	; (8020408 <pbuf_free_custom+0x30>)
 80203f6:	2200      	movs	r2, #0
 80203f8:	701a      	strb	r2, [r3, #0]
  }
}
 80203fa:	bf00      	nop
 80203fc:	3710      	adds	r7, #16
 80203fe:	46bd      	mov	sp, r7
 8020400:	bd80      	pop	{r7, pc}
 8020402:	bf00      	nop
 8020404:	0802cee4 	.word	0x0802cee4
 8020408:	20012588 	.word	0x20012588

0802040c <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 802040c:	b580      	push	{r7, lr}
 802040e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8020410:	f7f8 fc0e 	bl	8018c30 <HAL_GetTick>
 8020414:	4603      	mov	r3, r0
}
 8020416:	4618      	mov	r0, r3
 8020418:	bd80      	pop	{r7, pc}
	...

0802041c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 802041c:	b580      	push	{r7, lr}
 802041e:	b08e      	sub	sp, #56	; 0x38
 8020420:	af00      	add	r7, sp, #0
 8020422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020428:	2200      	movs	r2, #0
 802042a:	601a      	str	r2, [r3, #0]
 802042c:	605a      	str	r2, [r3, #4]
 802042e:	609a      	str	r2, [r3, #8]
 8020430:	60da      	str	r2, [r3, #12]
 8020432:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8020434:	687b      	ldr	r3, [r7, #4]
 8020436:	681b      	ldr	r3, [r3, #0]
 8020438:	4a52      	ldr	r2, [pc, #328]	; (8020584 <HAL_ETH_MspInit+0x168>)
 802043a:	4293      	cmp	r3, r2
 802043c:	f040 809e 	bne.w	802057c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8020440:	4b51      	ldr	r3, [pc, #324]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020444:	4a50      	ldr	r2, [pc, #320]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020446:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 802044a:	6313      	str	r3, [r2, #48]	; 0x30
 802044c:	4b4e      	ldr	r3, [pc, #312]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8020454:	623b      	str	r3, [r7, #32]
 8020456:	6a3b      	ldr	r3, [r7, #32]
 8020458:	4b4b      	ldr	r3, [pc, #300]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802045a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802045c:	4a4a      	ldr	r2, [pc, #296]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802045e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8020462:	6313      	str	r3, [r2, #48]	; 0x30
 8020464:	4b48      	ldr	r3, [pc, #288]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020468:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 802046c:	61fb      	str	r3, [r7, #28]
 802046e:	69fb      	ldr	r3, [r7, #28]
 8020470:	4b45      	ldr	r3, [pc, #276]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020474:	4a44      	ldr	r2, [pc, #272]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 802047a:	6313      	str	r3, [r2, #48]	; 0x30
 802047c:	4b42      	ldr	r3, [pc, #264]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802047e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8020484:	61bb      	str	r3, [r7, #24]
 8020486:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8020488:	4b3f      	ldr	r3, [pc, #252]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802048a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802048c:	4a3e      	ldr	r2, [pc, #248]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 802048e:	f043 0304 	orr.w	r3, r3, #4
 8020492:	6313      	str	r3, [r2, #48]	; 0x30
 8020494:	4b3c      	ldr	r3, [pc, #240]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 8020496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020498:	f003 0304 	and.w	r3, r3, #4
 802049c:	617b      	str	r3, [r7, #20]
 802049e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80204a0:	4b39      	ldr	r3, [pc, #228]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204a4:	4a38      	ldr	r2, [pc, #224]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204a6:	f043 0301 	orr.w	r3, r3, #1
 80204aa:	6313      	str	r3, [r2, #48]	; 0x30
 80204ac:	4b36      	ldr	r3, [pc, #216]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204b0:	f003 0301 	and.w	r3, r3, #1
 80204b4:	613b      	str	r3, [r7, #16]
 80204b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80204b8:	4b33      	ldr	r3, [pc, #204]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204bc:	4a32      	ldr	r2, [pc, #200]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204be:	f043 0302 	orr.w	r3, r3, #2
 80204c2:	6313      	str	r3, [r2, #48]	; 0x30
 80204c4:	4b30      	ldr	r3, [pc, #192]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204c8:	f003 0302 	and.w	r3, r3, #2
 80204cc:	60fb      	str	r3, [r7, #12]
 80204ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80204d0:	4b2d      	ldr	r3, [pc, #180]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204d4:	4a2c      	ldr	r2, [pc, #176]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80204da:	6313      	str	r3, [r2, #48]	; 0x30
 80204dc:	4b2a      	ldr	r3, [pc, #168]	; (8020588 <HAL_ETH_MspInit+0x16c>)
 80204de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80204e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80204e4:	60bb      	str	r3, [r7, #8]
 80204e6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 80204e8:	2332      	movs	r3, #50	; 0x32
 80204ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80204ec:	2302      	movs	r3, #2
 80204ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80204f0:	2300      	movs	r3, #0
 80204f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80204f4:	2303      	movs	r3, #3
 80204f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80204f8:	230b      	movs	r3, #11
 80204fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80204fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020500:	4619      	mov	r1, r3
 8020502:	4822      	ldr	r0, [pc, #136]	; (802058c <HAL_ETH_MspInit+0x170>)
 8020504:	f7fa fdac 	bl	801b060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 8020508:	2386      	movs	r3, #134	; 0x86
 802050a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802050c:	2302      	movs	r3, #2
 802050e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020510:	2300      	movs	r3, #0
 8020512:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020514:	2303      	movs	r3, #3
 8020516:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020518:	230b      	movs	r3, #11
 802051a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802051c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020520:	4619      	mov	r1, r3
 8020522:	481b      	ldr	r0, [pc, #108]	; (8020590 <HAL_ETH_MspInit+0x174>)
 8020524:	f7fa fd9c 	bl	801b060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 8020528:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802052c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 802052e:	2302      	movs	r3, #2
 8020530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020532:	2300      	movs	r3, #0
 8020534:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020536:	2303      	movs	r3, #3
 8020538:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802053a:	230b      	movs	r3, #11
 802053c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 802053e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020542:	4619      	mov	r1, r3
 8020544:	4813      	ldr	r0, [pc, #76]	; (8020594 <HAL_ETH_MspInit+0x178>)
 8020546:	f7fa fd8b 	bl	801b060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 802054a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 802054e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020550:	2302      	movs	r3, #2
 8020552:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020554:	2300      	movs	r3, #0
 8020556:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020558:	2303      	movs	r3, #3
 802055a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 802055c:	230b      	movs	r3, #11
 802055e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020564:	4619      	mov	r1, r3
 8020566:	480c      	ldr	r0, [pc, #48]	; (8020598 <HAL_ETH_MspInit+0x17c>)
 8020568:	f7fa fd7a 	bl	801b060 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 802056c:	2200      	movs	r2, #0
 802056e:	2101      	movs	r1, #1
 8020570:	203d      	movs	r0, #61	; 0x3d
 8020572:	f7f9 fa4a 	bl	8019a0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8020576:	203d      	movs	r0, #61	; 0x3d
 8020578:	f7f9 fa63 	bl	8019a42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 802057c:	bf00      	nop
 802057e:	3738      	adds	r7, #56	; 0x38
 8020580:	46bd      	mov	sp, r7
 8020582:	bd80      	pop	{r7, pc}
 8020584:	40028000 	.word	0x40028000
 8020588:	40023800 	.word	0x40023800
 802058c:	40020800 	.word	0x40020800
 8020590:	40020000 	.word	0x40020000
 8020594:	40020400 	.word	0x40020400
 8020598:	40021800 	.word	0x40021800

0802059c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 802059c:	b580      	push	{r7, lr}
 802059e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 80205a0:	4802      	ldr	r0, [pc, #8]	; (80205ac <ETH_PHY_IO_Init+0x10>)
 80205a2:	f7fa f903 	bl	801a7ac <HAL_ETH_SetMDIOClockRange>

  return 0;
 80205a6:	2300      	movs	r3, #0
}
 80205a8:	4618      	mov	r0, r3
 80205aa:	bd80      	pop	{r7, pc}
 80205ac:	2001258c 	.word	0x2001258c

080205b0 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 80205b0:	b480      	push	{r7}
 80205b2:	af00      	add	r7, sp, #0
  return 0;
 80205b4:	2300      	movs	r3, #0
}
 80205b6:	4618      	mov	r0, r3
 80205b8:	46bd      	mov	sp, r7
 80205ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205be:	4770      	bx	lr

080205c0 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80205c0:	b580      	push	{r7, lr}
 80205c2:	b084      	sub	sp, #16
 80205c4:	af00      	add	r7, sp, #0
 80205c6:	60f8      	str	r0, [r7, #12]
 80205c8:	60b9      	str	r1, [r7, #8]
 80205ca:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80205cc:	687b      	ldr	r3, [r7, #4]
 80205ce:	68ba      	ldr	r2, [r7, #8]
 80205d0:	68f9      	ldr	r1, [r7, #12]
 80205d2:	4807      	ldr	r0, [pc, #28]	; (80205f0 <ETH_PHY_IO_ReadReg+0x30>)
 80205d4:	f7f9 ff52 	bl	801a47c <HAL_ETH_ReadPHYRegister>
 80205d8:	4603      	mov	r3, r0
 80205da:	2b00      	cmp	r3, #0
 80205dc:	d002      	beq.n	80205e4 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80205de:	f04f 33ff 	mov.w	r3, #4294967295
 80205e2:	e000      	b.n	80205e6 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80205e4:	2300      	movs	r3, #0
}
 80205e6:	4618      	mov	r0, r3
 80205e8:	3710      	adds	r7, #16
 80205ea:	46bd      	mov	sp, r7
 80205ec:	bd80      	pop	{r7, pc}
 80205ee:	bf00      	nop
 80205f0:	2001258c 	.word	0x2001258c

080205f4 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80205f4:	b580      	push	{r7, lr}
 80205f6:	b084      	sub	sp, #16
 80205f8:	af00      	add	r7, sp, #0
 80205fa:	60f8      	str	r0, [r7, #12]
 80205fc:	60b9      	str	r1, [r7, #8]
 80205fe:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8020600:	687b      	ldr	r3, [r7, #4]
 8020602:	68ba      	ldr	r2, [r7, #8]
 8020604:	68f9      	ldr	r1, [r7, #12]
 8020606:	4807      	ldr	r0, [pc, #28]	; (8020624 <ETH_PHY_IO_WriteReg+0x30>)
 8020608:	f7f9 ff83 	bl	801a512 <HAL_ETH_WritePHYRegister>
 802060c:	4603      	mov	r3, r0
 802060e:	2b00      	cmp	r3, #0
 8020610:	d002      	beq.n	8020618 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8020612:	f04f 33ff 	mov.w	r3, #4294967295
 8020616:	e000      	b.n	802061a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8020618:	2300      	movs	r3, #0
}
 802061a:	4618      	mov	r0, r3
 802061c:	3710      	adds	r7, #16
 802061e:	46bd      	mov	sp, r7
 8020620:	bd80      	pop	{r7, pc}
 8020622:	bf00      	nop
 8020624:	2001258c 	.word	0x2001258c

08020628 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8020628:	b580      	push	{r7, lr}
 802062a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 802062c:	f7f8 fb00 	bl	8018c30 <HAL_GetTick>
 8020630:	4603      	mov	r3, r0
}
 8020632:	4618      	mov	r0, r3
 8020634:	bd80      	pop	{r7, pc}
	...

08020638 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8020638:	b580      	push	{r7, lr}
 802063a:	b0a0      	sub	sp, #128	; 0x80
 802063c:	af00      	add	r7, sp, #0
 802063e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8020640:	f107 030c 	add.w	r3, r7, #12
 8020644:	2264      	movs	r2, #100	; 0x64
 8020646:	2100      	movs	r1, #0
 8020648:	4618      	mov	r0, r3
 802064a:	f005 f91f 	bl	802588c <memset>
  int32_t PHYLinkState = 0;
 802064e:	2300      	movs	r3, #0
 8020650:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8020652:	2300      	movs	r3, #0
 8020654:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020656:	2300      	movs	r3, #0
 8020658:	67bb      	str	r3, [r7, #120]	; 0x78
 802065a:	2300      	movs	r3, #0
 802065c:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 802065e:	483a      	ldr	r0, [pc, #232]	; (8020748 <ethernet_link_check_state+0x110>)
 8020660:	f7f8 f9ff 	bl	8018a62 <DP83848_GetLinkState>
 8020664:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802066c:	089b      	lsrs	r3, r3, #2
 802066e:	f003 0301 	and.w	r3, r3, #1
 8020672:	b2db      	uxtb	r3, r3
 8020674:	2b00      	cmp	r3, #0
 8020676:	d00c      	beq.n	8020692 <ethernet_link_check_state+0x5a>
 8020678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 802067a:	2b01      	cmp	r3, #1
 802067c:	dc09      	bgt.n	8020692 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 802067e:	4833      	ldr	r0, [pc, #204]	; (802074c <ethernet_link_check_state+0x114>)
 8020680:	f7f9 fbe3 	bl	8019e4a <HAL_ETH_Stop>
    netif_set_down(netif);
 8020684:	6878      	ldr	r0, [r7, #4]
 8020686:	f001 f84b 	bl	8021720 <netif_set_down>
    netif_set_link_down(netif);
 802068a:	6878      	ldr	r0, [r7, #4]
 802068c:	f001 f8ae 	bl	80217ec <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8020690:	e055      	b.n	802073e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8020692:	687b      	ldr	r3, [r7, #4]
 8020694:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020698:	f003 0304 	and.w	r3, r3, #4
 802069c:	2b00      	cmp	r3, #0
 802069e:	d14e      	bne.n	802073e <ethernet_link_check_state+0x106>
 80206a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80206a2:	2b01      	cmp	r3, #1
 80206a4:	dd4b      	ble.n	802073e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 80206a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80206a8:	3b02      	subs	r3, #2
 80206aa:	2b03      	cmp	r3, #3
 80206ac:	d82a      	bhi.n	8020704 <ethernet_link_check_state+0xcc>
 80206ae:	a201      	add	r2, pc, #4	; (adr r2, 80206b4 <ethernet_link_check_state+0x7c>)
 80206b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80206b4:	080206c5 	.word	0x080206c5
 80206b8:	080206d7 	.word	0x080206d7
 80206bc:	080206e7 	.word	0x080206e7
 80206c0:	080206f7 	.word	0x080206f7
      duplex = ETH_FULLDUPLEX_MODE;
 80206c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80206c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80206ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80206ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80206d0:	2301      	movs	r3, #1
 80206d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80206d4:	e017      	b.n	8020706 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80206d6:	2300      	movs	r3, #0
 80206d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80206da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80206de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80206e0:	2301      	movs	r3, #1
 80206e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80206e4:	e00f      	b.n	8020706 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 80206e6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80206ea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80206ec:	2300      	movs	r3, #0
 80206ee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80206f0:	2301      	movs	r3, #1
 80206f2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80206f4:	e007      	b.n	8020706 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 80206f6:	2300      	movs	r3, #0
 80206f8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80206fa:	2300      	movs	r3, #0
 80206fc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80206fe:	2301      	movs	r3, #1
 8020700:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020702:	e000      	b.n	8020706 <ethernet_link_check_state+0xce>
      break;
 8020704:	bf00      	nop
    if(linkchanged)
 8020706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020708:	2b00      	cmp	r3, #0
 802070a:	d018      	beq.n	802073e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 802070c:	f107 030c 	add.w	r3, r7, #12
 8020710:	4619      	mov	r1, r3
 8020712:	480e      	ldr	r0, [pc, #56]	; (802074c <ethernet_link_check_state+0x114>)
 8020714:	f7f9 ff46 	bl	801a5a4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8020718:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 802071a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 802071c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 802071e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8020720:	f107 030c 	add.w	r3, r7, #12
 8020724:	4619      	mov	r1, r3
 8020726:	4809      	ldr	r0, [pc, #36]	; (802074c <ethernet_link_check_state+0x114>)
 8020728:	f7fa f826 	bl	801a778 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 802072c:	4807      	ldr	r0, [pc, #28]	; (802074c <ethernet_link_check_state+0x114>)
 802072e:	f7f9 fb2d 	bl	8019d8c <HAL_ETH_Start>
      netif_set_up(netif);
 8020732:	6878      	ldr	r0, [r7, #4]
 8020734:	f000 ff88 	bl	8021648 <netif_set_up>
      netif_set_link_up(netif);
 8020738:	6878      	ldr	r0, [r7, #4]
 802073a:	f001 f823 	bl	8021784 <netif_set_link_up>
}
 802073e:	bf00      	nop
 8020740:	3780      	adds	r7, #128	; 0x80
 8020742:	46bd      	mov	sp, r7
 8020744:	bd80      	pop	{r7, pc}
 8020746:	bf00      	nop
 8020748:	20012674 	.word	0x20012674
 802074c:	2001258c 	.word	0x2001258c

08020750 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8020750:	b580      	push	{r7, lr}
 8020752:	b086      	sub	sp, #24
 8020754:	af02      	add	r7, sp, #8
 8020756:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8020758:	4812      	ldr	r0, [pc, #72]	; (80207a4 <HAL_ETH_RxAllocateCallback+0x54>)
 802075a:	f000 fca5 	bl	80210a8 <memp_malloc_pool>
 802075e:	60f8      	str	r0, [r7, #12]
	if (p)
 8020760:	68fb      	ldr	r3, [r7, #12]
 8020762:	2b00      	cmp	r3, #0
 8020764:	d014      	beq.n	8020790 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8020766:	68fb      	ldr	r3, [r7, #12]
 8020768:	f103 0214 	add.w	r2, r3, #20
 802076c:	687b      	ldr	r3, [r7, #4]
 802076e:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 8020770:	68fb      	ldr	r3, [r7, #12]
 8020772:	4a0d      	ldr	r2, [pc, #52]	; (80207a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8020774:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8020776:	687b      	ldr	r3, [r7, #4]
 8020778:	681b      	ldr	r3, [r3, #0]
 802077a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 802077e:	9201      	str	r2, [sp, #4]
 8020780:	9300      	str	r3, [sp, #0]
 8020782:	68fb      	ldr	r3, [r7, #12]
 8020784:	2241      	movs	r2, #65	; 0x41
 8020786:	2100      	movs	r1, #0
 8020788:	2000      	movs	r0, #0
 802078a:	f001 fa75 	bl	8021c78 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 802078e:	e005      	b.n	802079c <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 8020790:	4b06      	ldr	r3, [pc, #24]	; (80207ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8020792:	2201      	movs	r2, #1
 8020794:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 8020796:	687b      	ldr	r3, [r7, #4]
 8020798:	2200      	movs	r2, #0
 802079a:	601a      	str	r2, [r3, #0]
}
 802079c:	bf00      	nop
 802079e:	3710      	adds	r7, #16
 80207a0:	46bd      	mov	sp, r7
 80207a2:	bd80      	pop	{r7, pc}
 80207a4:	0802cee4 	.word	0x0802cee4
 80207a8:	080203d9 	.word	0x080203d9
 80207ac:	20012588 	.word	0x20012588

080207b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80207b0:	b580      	push	{r7, lr}
 80207b2:	b088      	sub	sp, #32
 80207b4:	af00      	add	r7, sp, #0
 80207b6:	60f8      	str	r0, [r7, #12]
 80207b8:	60b9      	str	r1, [r7, #8]
 80207ba:	607a      	str	r2, [r7, #4]
 80207bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 80207be:	68fb      	ldr	r3, [r7, #12]
 80207c0:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80207c2:	68bb      	ldr	r3, [r7, #8]
 80207c4:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 80207c6:	2300      	movs	r3, #0
 80207c8:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	3b14      	subs	r3, #20
 80207ce:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 80207d0:	69fb      	ldr	r3, [r7, #28]
 80207d2:	2200      	movs	r2, #0
 80207d4:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 80207d6:	69fb      	ldr	r3, [r7, #28]
 80207d8:	2200      	movs	r2, #0
 80207da:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 80207dc:	69fb      	ldr	r3, [r7, #28]
 80207de:	887a      	ldrh	r2, [r7, #2]
 80207e0:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 80207e2:	69bb      	ldr	r3, [r7, #24]
 80207e4:	681b      	ldr	r3, [r3, #0]
 80207e6:	2b00      	cmp	r3, #0
 80207e8:	d103      	bne.n	80207f2 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 80207ea:	69bb      	ldr	r3, [r7, #24]
 80207ec:	69fa      	ldr	r2, [r7, #28]
 80207ee:	601a      	str	r2, [r3, #0]
 80207f0:	e003      	b.n	80207fa <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 80207f2:	697b      	ldr	r3, [r7, #20]
 80207f4:	681b      	ldr	r3, [r3, #0]
 80207f6:	69fa      	ldr	r2, [r7, #28]
 80207f8:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 80207fa:	697b      	ldr	r3, [r7, #20]
 80207fc:	69fa      	ldr	r2, [r7, #28]
 80207fe:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 8020800:	69bb      	ldr	r3, [r7, #24]
 8020802:	681b      	ldr	r3, [r3, #0]
 8020804:	61fb      	str	r3, [r7, #28]
 8020806:	e009      	b.n	802081c <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 8020808:	69fb      	ldr	r3, [r7, #28]
 802080a:	891a      	ldrh	r2, [r3, #8]
 802080c:	887b      	ldrh	r3, [r7, #2]
 802080e:	4413      	add	r3, r2
 8020810:	b29a      	uxth	r2, r3
 8020812:	69fb      	ldr	r3, [r7, #28]
 8020814:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 8020816:	69fb      	ldr	r3, [r7, #28]
 8020818:	681b      	ldr	r3, [r3, #0]
 802081a:	61fb      	str	r3, [r7, #28]
 802081c:	69fb      	ldr	r3, [r7, #28]
 802081e:	2b00      	cmp	r3, #0
 8020820:	d1f2      	bne.n	8020808 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8020822:	887b      	ldrh	r3, [r7, #2]
 8020824:	4619      	mov	r1, r3
 8020826:	6878      	ldr	r0, [r7, #4]
 8020828:	f7ff fc14 	bl	8020054 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 802082c:	bf00      	nop
 802082e:	3720      	adds	r7, #32
 8020830:	46bd      	mov	sp, r7
 8020832:	bd80      	pop	{r7, pc}

08020834 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8020834:	b480      	push	{r7}
 8020836:	b083      	sub	sp, #12
 8020838:	af00      	add	r7, sp, #0
 802083a:	4603      	mov	r3, r0
 802083c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 802083e:	88fb      	ldrh	r3, [r7, #6]
 8020840:	021b      	lsls	r3, r3, #8
 8020842:	b21a      	sxth	r2, r3
 8020844:	88fb      	ldrh	r3, [r7, #6]
 8020846:	0a1b      	lsrs	r3, r3, #8
 8020848:	b29b      	uxth	r3, r3
 802084a:	b21b      	sxth	r3, r3
 802084c:	4313      	orrs	r3, r2
 802084e:	b21b      	sxth	r3, r3
 8020850:	b29b      	uxth	r3, r3
}
 8020852:	4618      	mov	r0, r3
 8020854:	370c      	adds	r7, #12
 8020856:	46bd      	mov	sp, r7
 8020858:	f85d 7b04 	ldr.w	r7, [sp], #4
 802085c:	4770      	bx	lr

0802085e <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 802085e:	b580      	push	{r7, lr}
 8020860:	b082      	sub	sp, #8
 8020862:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8020864:	2300      	movs	r3, #0
 8020866:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8020868:	f000 f8d2 	bl	8020a10 <mem_init>
  memp_init();
 802086c:	f000 fbd8 	bl	8021020 <memp_init>
  pbuf_init();
  netif_init();
 8020870:	f000 fcfc 	bl	802126c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8020874:	f001 ff9a 	bl	80227ac <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8020878:	f001 ff16 	bl	80226a8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 802087c:	bf00      	nop
 802087e:	3708      	adds	r7, #8
 8020880:	46bd      	mov	sp, r7
 8020882:	bd80      	pop	{r7, pc}

08020884 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8020884:	b480      	push	{r7}
 8020886:	b083      	sub	sp, #12
 8020888:	af00      	add	r7, sp, #0
 802088a:	4603      	mov	r3, r0
 802088c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 802088e:	4b05      	ldr	r3, [pc, #20]	; (80208a4 <ptr_to_mem+0x20>)
 8020890:	681a      	ldr	r2, [r3, #0]
 8020892:	88fb      	ldrh	r3, [r7, #6]
 8020894:	4413      	add	r3, r2
}
 8020896:	4618      	mov	r0, r3
 8020898:	370c      	adds	r7, #12
 802089a:	46bd      	mov	sp, r7
 802089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208a0:	4770      	bx	lr
 80208a2:	bf00      	nop
 80208a4:	20012d00 	.word	0x20012d00

080208a8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80208a8:	b480      	push	{r7}
 80208aa:	b083      	sub	sp, #12
 80208ac:	af00      	add	r7, sp, #0
 80208ae:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80208b0:	4b05      	ldr	r3, [pc, #20]	; (80208c8 <mem_to_ptr+0x20>)
 80208b2:	681b      	ldr	r3, [r3, #0]
 80208b4:	687a      	ldr	r2, [r7, #4]
 80208b6:	1ad3      	subs	r3, r2, r3
 80208b8:	b29b      	uxth	r3, r3
}
 80208ba:	4618      	mov	r0, r3
 80208bc:	370c      	adds	r7, #12
 80208be:	46bd      	mov	sp, r7
 80208c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80208c4:	4770      	bx	lr
 80208c6:	bf00      	nop
 80208c8:	20012d00 	.word	0x20012d00

080208cc <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80208cc:	b590      	push	{r4, r7, lr}
 80208ce:	b085      	sub	sp, #20
 80208d0:	af00      	add	r7, sp, #0
 80208d2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80208d4:	4b45      	ldr	r3, [pc, #276]	; (80209ec <plug_holes+0x120>)
 80208d6:	681b      	ldr	r3, [r3, #0]
 80208d8:	687a      	ldr	r2, [r7, #4]
 80208da:	429a      	cmp	r2, r3
 80208dc:	d206      	bcs.n	80208ec <plug_holes+0x20>
 80208de:	4b44      	ldr	r3, [pc, #272]	; (80209f0 <plug_holes+0x124>)
 80208e0:	f240 12df 	movw	r2, #479	; 0x1df
 80208e4:	4943      	ldr	r1, [pc, #268]	; (80209f4 <plug_holes+0x128>)
 80208e6:	4844      	ldr	r0, [pc, #272]	; (80209f8 <plug_holes+0x12c>)
 80208e8:	f005 f8b8 	bl	8025a5c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80208ec:	4b43      	ldr	r3, [pc, #268]	; (80209fc <plug_holes+0x130>)
 80208ee:	681b      	ldr	r3, [r3, #0]
 80208f0:	687a      	ldr	r2, [r7, #4]
 80208f2:	429a      	cmp	r2, r3
 80208f4:	d306      	bcc.n	8020904 <plug_holes+0x38>
 80208f6:	4b3e      	ldr	r3, [pc, #248]	; (80209f0 <plug_holes+0x124>)
 80208f8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80208fc:	4940      	ldr	r1, [pc, #256]	; (8020a00 <plug_holes+0x134>)
 80208fe:	483e      	ldr	r0, [pc, #248]	; (80209f8 <plug_holes+0x12c>)
 8020900:	f005 f8ac 	bl	8025a5c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	791b      	ldrb	r3, [r3, #4]
 8020908:	2b00      	cmp	r3, #0
 802090a:	d006      	beq.n	802091a <plug_holes+0x4e>
 802090c:	4b38      	ldr	r3, [pc, #224]	; (80209f0 <plug_holes+0x124>)
 802090e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8020912:	493c      	ldr	r1, [pc, #240]	; (8020a04 <plug_holes+0x138>)
 8020914:	4838      	ldr	r0, [pc, #224]	; (80209f8 <plug_holes+0x12c>)
 8020916:	f005 f8a1 	bl	8025a5c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 802091a:	687b      	ldr	r3, [r7, #4]
 802091c:	881b      	ldrh	r3, [r3, #0]
 802091e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020922:	d906      	bls.n	8020932 <plug_holes+0x66>
 8020924:	4b32      	ldr	r3, [pc, #200]	; (80209f0 <plug_holes+0x124>)
 8020926:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 802092a:	4937      	ldr	r1, [pc, #220]	; (8020a08 <plug_holes+0x13c>)
 802092c:	4832      	ldr	r0, [pc, #200]	; (80209f8 <plug_holes+0x12c>)
 802092e:	f005 f895 	bl	8025a5c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	881b      	ldrh	r3, [r3, #0]
 8020936:	4618      	mov	r0, r3
 8020938:	f7ff ffa4 	bl	8020884 <ptr_to_mem>
 802093c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 802093e:	687a      	ldr	r2, [r7, #4]
 8020940:	68fb      	ldr	r3, [r7, #12]
 8020942:	429a      	cmp	r2, r3
 8020944:	d024      	beq.n	8020990 <plug_holes+0xc4>
 8020946:	68fb      	ldr	r3, [r7, #12]
 8020948:	791b      	ldrb	r3, [r3, #4]
 802094a:	2b00      	cmp	r3, #0
 802094c:	d120      	bne.n	8020990 <plug_holes+0xc4>
 802094e:	4b2b      	ldr	r3, [pc, #172]	; (80209fc <plug_holes+0x130>)
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	68fa      	ldr	r2, [r7, #12]
 8020954:	429a      	cmp	r2, r3
 8020956:	d01b      	beq.n	8020990 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8020958:	4b2c      	ldr	r3, [pc, #176]	; (8020a0c <plug_holes+0x140>)
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	68fa      	ldr	r2, [r7, #12]
 802095e:	429a      	cmp	r2, r3
 8020960:	d102      	bne.n	8020968 <plug_holes+0x9c>
      lfree = mem;
 8020962:	4a2a      	ldr	r2, [pc, #168]	; (8020a0c <plug_holes+0x140>)
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8020968:	68fb      	ldr	r3, [r7, #12]
 802096a:	881a      	ldrh	r2, [r3, #0]
 802096c:	687b      	ldr	r3, [r7, #4]
 802096e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8020970:	68fb      	ldr	r3, [r7, #12]
 8020972:	881b      	ldrh	r3, [r3, #0]
 8020974:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020978:	d00a      	beq.n	8020990 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 802097a:	68fb      	ldr	r3, [r7, #12]
 802097c:	881b      	ldrh	r3, [r3, #0]
 802097e:	4618      	mov	r0, r3
 8020980:	f7ff ff80 	bl	8020884 <ptr_to_mem>
 8020984:	4604      	mov	r4, r0
 8020986:	6878      	ldr	r0, [r7, #4]
 8020988:	f7ff ff8e 	bl	80208a8 <mem_to_ptr>
 802098c:	4603      	mov	r3, r0
 802098e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8020990:	687b      	ldr	r3, [r7, #4]
 8020992:	885b      	ldrh	r3, [r3, #2]
 8020994:	4618      	mov	r0, r3
 8020996:	f7ff ff75 	bl	8020884 <ptr_to_mem>
 802099a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 802099c:	68ba      	ldr	r2, [r7, #8]
 802099e:	687b      	ldr	r3, [r7, #4]
 80209a0:	429a      	cmp	r2, r3
 80209a2:	d01f      	beq.n	80209e4 <plug_holes+0x118>
 80209a4:	68bb      	ldr	r3, [r7, #8]
 80209a6:	791b      	ldrb	r3, [r3, #4]
 80209a8:	2b00      	cmp	r3, #0
 80209aa:	d11b      	bne.n	80209e4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80209ac:	4b17      	ldr	r3, [pc, #92]	; (8020a0c <plug_holes+0x140>)
 80209ae:	681b      	ldr	r3, [r3, #0]
 80209b0:	687a      	ldr	r2, [r7, #4]
 80209b2:	429a      	cmp	r2, r3
 80209b4:	d102      	bne.n	80209bc <plug_holes+0xf0>
      lfree = pmem;
 80209b6:	4a15      	ldr	r2, [pc, #84]	; (8020a0c <plug_holes+0x140>)
 80209b8:	68bb      	ldr	r3, [r7, #8]
 80209ba:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 80209bc:	687b      	ldr	r3, [r7, #4]
 80209be:	881a      	ldrh	r2, [r3, #0]
 80209c0:	68bb      	ldr	r3, [r7, #8]
 80209c2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80209c4:	687b      	ldr	r3, [r7, #4]
 80209c6:	881b      	ldrh	r3, [r3, #0]
 80209c8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80209cc:	d00a      	beq.n	80209e4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80209ce:	687b      	ldr	r3, [r7, #4]
 80209d0:	881b      	ldrh	r3, [r3, #0]
 80209d2:	4618      	mov	r0, r3
 80209d4:	f7ff ff56 	bl	8020884 <ptr_to_mem>
 80209d8:	4604      	mov	r4, r0
 80209da:	68b8      	ldr	r0, [r7, #8]
 80209dc:	f7ff ff64 	bl	80208a8 <mem_to_ptr>
 80209e0:	4603      	mov	r3, r0
 80209e2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80209e4:	bf00      	nop
 80209e6:	3714      	adds	r7, #20
 80209e8:	46bd      	mov	sp, r7
 80209ea:	bd90      	pop	{r4, r7, pc}
 80209ec:	20012d00 	.word	0x20012d00
 80209f0:	0802b1b4 	.word	0x0802b1b4
 80209f4:	0802b228 	.word	0x0802b228
 80209f8:	0802b240 	.word	0x0802b240
 80209fc:	20012d04 	.word	0x20012d04
 8020a00:	0802b268 	.word	0x0802b268
 8020a04:	0802b284 	.word	0x0802b284
 8020a08:	0802b2a0 	.word	0x0802b2a0
 8020a0c:	20012d08 	.word	0x20012d08

08020a10 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b082      	sub	sp, #8
 8020a14:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8020a16:	4b18      	ldr	r3, [pc, #96]	; (8020a78 <mem_init+0x68>)
 8020a18:	3303      	adds	r3, #3
 8020a1a:	f023 0303 	bic.w	r3, r3, #3
 8020a1e:	461a      	mov	r2, r3
 8020a20:	4b16      	ldr	r3, [pc, #88]	; (8020a7c <mem_init+0x6c>)
 8020a22:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8020a24:	4b15      	ldr	r3, [pc, #84]	; (8020a7c <mem_init+0x6c>)
 8020a26:	681b      	ldr	r3, [r3, #0]
 8020a28:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8020a2a:	687b      	ldr	r3, [r7, #4]
 8020a2c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020a30:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8020a32:	687b      	ldr	r3, [r7, #4]
 8020a34:	2200      	movs	r2, #0
 8020a36:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8020a38:	687b      	ldr	r3, [r7, #4]
 8020a3a:	2200      	movs	r2, #0
 8020a3c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8020a3e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8020a42:	f7ff ff1f 	bl	8020884 <ptr_to_mem>
 8020a46:	4603      	mov	r3, r0
 8020a48:	4a0d      	ldr	r2, [pc, #52]	; (8020a80 <mem_init+0x70>)
 8020a4a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8020a4c:	4b0c      	ldr	r3, [pc, #48]	; (8020a80 <mem_init+0x70>)
 8020a4e:	681b      	ldr	r3, [r3, #0]
 8020a50:	2201      	movs	r2, #1
 8020a52:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8020a54:	4b0a      	ldr	r3, [pc, #40]	; (8020a80 <mem_init+0x70>)
 8020a56:	681b      	ldr	r3, [r3, #0]
 8020a58:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020a5c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8020a5e:	4b08      	ldr	r3, [pc, #32]	; (8020a80 <mem_init+0x70>)
 8020a60:	681b      	ldr	r3, [r3, #0]
 8020a62:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020a66:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8020a68:	4b04      	ldr	r3, [pc, #16]	; (8020a7c <mem_init+0x6c>)
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	4a05      	ldr	r2, [pc, #20]	; (8020a84 <mem_init+0x74>)
 8020a6e:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8020a70:	bf00      	nop
 8020a72:	3708      	adds	r7, #8
 8020a74:	46bd      	mov	sp, r7
 8020a76:	bd80      	pop	{r7, pc}
 8020a78:	200126ac 	.word	0x200126ac
 8020a7c:	20012d00 	.word	0x20012d00
 8020a80:	20012d04 	.word	0x20012d04
 8020a84:	20012d08 	.word	0x20012d08

08020a88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8020a88:	b580      	push	{r7, lr}
 8020a8a:	b086      	sub	sp, #24
 8020a8c:	af00      	add	r7, sp, #0
 8020a8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8020a90:	6878      	ldr	r0, [r7, #4]
 8020a92:	f7ff ff09 	bl	80208a8 <mem_to_ptr>
 8020a96:	4603      	mov	r3, r0
 8020a98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8020a9a:	687b      	ldr	r3, [r7, #4]
 8020a9c:	881b      	ldrh	r3, [r3, #0]
 8020a9e:	4618      	mov	r0, r3
 8020aa0:	f7ff fef0 	bl	8020884 <ptr_to_mem>
 8020aa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8020aa6:	687b      	ldr	r3, [r7, #4]
 8020aa8:	885b      	ldrh	r3, [r3, #2]
 8020aaa:	4618      	mov	r0, r3
 8020aac:	f7ff feea 	bl	8020884 <ptr_to_mem>
 8020ab0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8020ab2:	687b      	ldr	r3, [r7, #4]
 8020ab4:	881b      	ldrh	r3, [r3, #0]
 8020ab6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020aba:	d818      	bhi.n	8020aee <mem_link_valid+0x66>
 8020abc:	687b      	ldr	r3, [r7, #4]
 8020abe:	885b      	ldrh	r3, [r3, #2]
 8020ac0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020ac4:	d813      	bhi.n	8020aee <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8020aca:	8afa      	ldrh	r2, [r7, #22]
 8020acc:	429a      	cmp	r2, r3
 8020ace:	d004      	beq.n	8020ada <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8020ad0:	68fb      	ldr	r3, [r7, #12]
 8020ad2:	881b      	ldrh	r3, [r3, #0]
 8020ad4:	8afa      	ldrh	r2, [r7, #22]
 8020ad6:	429a      	cmp	r2, r3
 8020ad8:	d109      	bne.n	8020aee <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8020ada:	4b08      	ldr	r3, [pc, #32]	; (8020afc <mem_link_valid+0x74>)
 8020adc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8020ade:	693a      	ldr	r2, [r7, #16]
 8020ae0:	429a      	cmp	r2, r3
 8020ae2:	d006      	beq.n	8020af2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8020ae4:	693b      	ldr	r3, [r7, #16]
 8020ae6:	885b      	ldrh	r3, [r3, #2]
 8020ae8:	8afa      	ldrh	r2, [r7, #22]
 8020aea:	429a      	cmp	r2, r3
 8020aec:	d001      	beq.n	8020af2 <mem_link_valid+0x6a>
    return 0;
 8020aee:	2300      	movs	r3, #0
 8020af0:	e000      	b.n	8020af4 <mem_link_valid+0x6c>
  }
  return 1;
 8020af2:	2301      	movs	r3, #1
}
 8020af4:	4618      	mov	r0, r3
 8020af6:	3718      	adds	r7, #24
 8020af8:	46bd      	mov	sp, r7
 8020afa:	bd80      	pop	{r7, pc}
 8020afc:	20012d04 	.word	0x20012d04

08020b00 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	b084      	sub	sp, #16
 8020b04:	af00      	add	r7, sp, #0
 8020b06:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	2b00      	cmp	r3, #0
 8020b0c:	d04c      	beq.n	8020ba8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8020b0e:	687b      	ldr	r3, [r7, #4]
 8020b10:	f003 0303 	and.w	r3, r3, #3
 8020b14:	2b00      	cmp	r3, #0
 8020b16:	d007      	beq.n	8020b28 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8020b18:	4b25      	ldr	r3, [pc, #148]	; (8020bb0 <mem_free+0xb0>)
 8020b1a:	f240 2273 	movw	r2, #627	; 0x273
 8020b1e:	4925      	ldr	r1, [pc, #148]	; (8020bb4 <mem_free+0xb4>)
 8020b20:	4825      	ldr	r0, [pc, #148]	; (8020bb8 <mem_free+0xb8>)
 8020b22:	f004 ff9b 	bl	8025a5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020b26:	e040      	b.n	8020baa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8020b28:	687b      	ldr	r3, [r7, #4]
 8020b2a:	3b08      	subs	r3, #8
 8020b2c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8020b2e:	4b23      	ldr	r3, [pc, #140]	; (8020bbc <mem_free+0xbc>)
 8020b30:	681b      	ldr	r3, [r3, #0]
 8020b32:	68fa      	ldr	r2, [r7, #12]
 8020b34:	429a      	cmp	r2, r3
 8020b36:	d306      	bcc.n	8020b46 <mem_free+0x46>
 8020b38:	687b      	ldr	r3, [r7, #4]
 8020b3a:	f103 020c 	add.w	r2, r3, #12
 8020b3e:	4b20      	ldr	r3, [pc, #128]	; (8020bc0 <mem_free+0xc0>)
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	429a      	cmp	r2, r3
 8020b44:	d907      	bls.n	8020b56 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8020b46:	4b1a      	ldr	r3, [pc, #104]	; (8020bb0 <mem_free+0xb0>)
 8020b48:	f240 227f 	movw	r2, #639	; 0x27f
 8020b4c:	491d      	ldr	r1, [pc, #116]	; (8020bc4 <mem_free+0xc4>)
 8020b4e:	481a      	ldr	r0, [pc, #104]	; (8020bb8 <mem_free+0xb8>)
 8020b50:	f004 ff84 	bl	8025a5c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020b54:	e029      	b.n	8020baa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8020b56:	68fb      	ldr	r3, [r7, #12]
 8020b58:	791b      	ldrb	r3, [r3, #4]
 8020b5a:	2b00      	cmp	r3, #0
 8020b5c:	d107      	bne.n	8020b6e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8020b5e:	4b14      	ldr	r3, [pc, #80]	; (8020bb0 <mem_free+0xb0>)
 8020b60:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8020b64:	4918      	ldr	r1, [pc, #96]	; (8020bc8 <mem_free+0xc8>)
 8020b66:	4814      	ldr	r0, [pc, #80]	; (8020bb8 <mem_free+0xb8>)
 8020b68:	f004 ff78 	bl	8025a5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020b6c:	e01d      	b.n	8020baa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8020b6e:	68f8      	ldr	r0, [r7, #12]
 8020b70:	f7ff ff8a 	bl	8020a88 <mem_link_valid>
 8020b74:	4603      	mov	r3, r0
 8020b76:	2b00      	cmp	r3, #0
 8020b78:	d107      	bne.n	8020b8a <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8020b7a:	4b0d      	ldr	r3, [pc, #52]	; (8020bb0 <mem_free+0xb0>)
 8020b7c:	f240 2295 	movw	r2, #661	; 0x295
 8020b80:	4912      	ldr	r1, [pc, #72]	; (8020bcc <mem_free+0xcc>)
 8020b82:	480d      	ldr	r0, [pc, #52]	; (8020bb8 <mem_free+0xb8>)
 8020b84:	f004 ff6a 	bl	8025a5c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8020b88:	e00f      	b.n	8020baa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8020b8a:	68fb      	ldr	r3, [r7, #12]
 8020b8c:	2200      	movs	r2, #0
 8020b8e:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8020b90:	4b0f      	ldr	r3, [pc, #60]	; (8020bd0 <mem_free+0xd0>)
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	68fa      	ldr	r2, [r7, #12]
 8020b96:	429a      	cmp	r2, r3
 8020b98:	d202      	bcs.n	8020ba0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8020b9a:	4a0d      	ldr	r2, [pc, #52]	; (8020bd0 <mem_free+0xd0>)
 8020b9c:	68fb      	ldr	r3, [r7, #12]
 8020b9e:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8020ba0:	68f8      	ldr	r0, [r7, #12]
 8020ba2:	f7ff fe93 	bl	80208cc <plug_holes>
 8020ba6:	e000      	b.n	8020baa <mem_free+0xaa>
    return;
 8020ba8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8020baa:	3710      	adds	r7, #16
 8020bac:	46bd      	mov	sp, r7
 8020bae:	bd80      	pop	{r7, pc}
 8020bb0:	0802b1b4 	.word	0x0802b1b4
 8020bb4:	0802b2cc 	.word	0x0802b2cc
 8020bb8:	0802b240 	.word	0x0802b240
 8020bbc:	20012d00 	.word	0x20012d00
 8020bc0:	20012d04 	.word	0x20012d04
 8020bc4:	0802b2f0 	.word	0x0802b2f0
 8020bc8:	0802b30c 	.word	0x0802b30c
 8020bcc:	0802b334 	.word	0x0802b334
 8020bd0:	20012d08 	.word	0x20012d08

08020bd4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8020bd4:	b580      	push	{r7, lr}
 8020bd6:	b088      	sub	sp, #32
 8020bd8:	af00      	add	r7, sp, #0
 8020bda:	6078      	str	r0, [r7, #4]
 8020bdc:	460b      	mov	r3, r1
 8020bde:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8020be0:	887b      	ldrh	r3, [r7, #2]
 8020be2:	3303      	adds	r3, #3
 8020be4:	b29b      	uxth	r3, r3
 8020be6:	f023 0303 	bic.w	r3, r3, #3
 8020bea:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8020bec:	8bfb      	ldrh	r3, [r7, #30]
 8020bee:	2b0b      	cmp	r3, #11
 8020bf0:	d801      	bhi.n	8020bf6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8020bf2:	230c      	movs	r3, #12
 8020bf4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8020bf6:	8bfb      	ldrh	r3, [r7, #30]
 8020bf8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020bfc:	d803      	bhi.n	8020c06 <mem_trim+0x32>
 8020bfe:	8bfa      	ldrh	r2, [r7, #30]
 8020c00:	887b      	ldrh	r3, [r7, #2]
 8020c02:	429a      	cmp	r2, r3
 8020c04:	d201      	bcs.n	8020c0a <mem_trim+0x36>
    return NULL;
 8020c06:	2300      	movs	r3, #0
 8020c08:	e0cc      	b.n	8020da4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8020c0a:	4b68      	ldr	r3, [pc, #416]	; (8020dac <mem_trim+0x1d8>)
 8020c0c:	681b      	ldr	r3, [r3, #0]
 8020c0e:	687a      	ldr	r2, [r7, #4]
 8020c10:	429a      	cmp	r2, r3
 8020c12:	d304      	bcc.n	8020c1e <mem_trim+0x4a>
 8020c14:	4b66      	ldr	r3, [pc, #408]	; (8020db0 <mem_trim+0x1dc>)
 8020c16:	681b      	ldr	r3, [r3, #0]
 8020c18:	687a      	ldr	r2, [r7, #4]
 8020c1a:	429a      	cmp	r2, r3
 8020c1c:	d306      	bcc.n	8020c2c <mem_trim+0x58>
 8020c1e:	4b65      	ldr	r3, [pc, #404]	; (8020db4 <mem_trim+0x1e0>)
 8020c20:	f240 22d1 	movw	r2, #721	; 0x2d1
 8020c24:	4964      	ldr	r1, [pc, #400]	; (8020db8 <mem_trim+0x1e4>)
 8020c26:	4865      	ldr	r0, [pc, #404]	; (8020dbc <mem_trim+0x1e8>)
 8020c28:	f004 ff18 	bl	8025a5c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8020c2c:	4b5f      	ldr	r3, [pc, #380]	; (8020dac <mem_trim+0x1d8>)
 8020c2e:	681b      	ldr	r3, [r3, #0]
 8020c30:	687a      	ldr	r2, [r7, #4]
 8020c32:	429a      	cmp	r2, r3
 8020c34:	d304      	bcc.n	8020c40 <mem_trim+0x6c>
 8020c36:	4b5e      	ldr	r3, [pc, #376]	; (8020db0 <mem_trim+0x1dc>)
 8020c38:	681b      	ldr	r3, [r3, #0]
 8020c3a:	687a      	ldr	r2, [r7, #4]
 8020c3c:	429a      	cmp	r2, r3
 8020c3e:	d301      	bcc.n	8020c44 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8020c40:	687b      	ldr	r3, [r7, #4]
 8020c42:	e0af      	b.n	8020da4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8020c44:	687b      	ldr	r3, [r7, #4]
 8020c46:	3b08      	subs	r3, #8
 8020c48:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8020c4a:	69b8      	ldr	r0, [r7, #24]
 8020c4c:	f7ff fe2c 	bl	80208a8 <mem_to_ptr>
 8020c50:	4603      	mov	r3, r0
 8020c52:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8020c54:	69bb      	ldr	r3, [r7, #24]
 8020c56:	881a      	ldrh	r2, [r3, #0]
 8020c58:	8afb      	ldrh	r3, [r7, #22]
 8020c5a:	1ad3      	subs	r3, r2, r3
 8020c5c:	b29b      	uxth	r3, r3
 8020c5e:	3b08      	subs	r3, #8
 8020c60:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8020c62:	8bfa      	ldrh	r2, [r7, #30]
 8020c64:	8abb      	ldrh	r3, [r7, #20]
 8020c66:	429a      	cmp	r2, r3
 8020c68:	d906      	bls.n	8020c78 <mem_trim+0xa4>
 8020c6a:	4b52      	ldr	r3, [pc, #328]	; (8020db4 <mem_trim+0x1e0>)
 8020c6c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8020c70:	4953      	ldr	r1, [pc, #332]	; (8020dc0 <mem_trim+0x1ec>)
 8020c72:	4852      	ldr	r0, [pc, #328]	; (8020dbc <mem_trim+0x1e8>)
 8020c74:	f004 fef2 	bl	8025a5c <iprintf>
  if (newsize > size) {
 8020c78:	8bfa      	ldrh	r2, [r7, #30]
 8020c7a:	8abb      	ldrh	r3, [r7, #20]
 8020c7c:	429a      	cmp	r2, r3
 8020c7e:	d901      	bls.n	8020c84 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8020c80:	2300      	movs	r3, #0
 8020c82:	e08f      	b.n	8020da4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8020c84:	8bfa      	ldrh	r2, [r7, #30]
 8020c86:	8abb      	ldrh	r3, [r7, #20]
 8020c88:	429a      	cmp	r2, r3
 8020c8a:	d101      	bne.n	8020c90 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8020c8c:	687b      	ldr	r3, [r7, #4]
 8020c8e:	e089      	b.n	8020da4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8020c90:	69bb      	ldr	r3, [r7, #24]
 8020c92:	881b      	ldrh	r3, [r3, #0]
 8020c94:	4618      	mov	r0, r3
 8020c96:	f7ff fdf5 	bl	8020884 <ptr_to_mem>
 8020c9a:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8020c9c:	693b      	ldr	r3, [r7, #16]
 8020c9e:	791b      	ldrb	r3, [r3, #4]
 8020ca0:	2b00      	cmp	r3, #0
 8020ca2:	d13f      	bne.n	8020d24 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8020ca4:	69bb      	ldr	r3, [r7, #24]
 8020ca6:	881b      	ldrh	r3, [r3, #0]
 8020ca8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020cac:	d106      	bne.n	8020cbc <mem_trim+0xe8>
 8020cae:	4b41      	ldr	r3, [pc, #260]	; (8020db4 <mem_trim+0x1e0>)
 8020cb0:	f240 22f5 	movw	r2, #757	; 0x2f5
 8020cb4:	4943      	ldr	r1, [pc, #268]	; (8020dc4 <mem_trim+0x1f0>)
 8020cb6:	4841      	ldr	r0, [pc, #260]	; (8020dbc <mem_trim+0x1e8>)
 8020cb8:	f004 fed0 	bl	8025a5c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8020cbc:	693b      	ldr	r3, [r7, #16]
 8020cbe:	881b      	ldrh	r3, [r3, #0]
 8020cc0:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8020cc2:	8afa      	ldrh	r2, [r7, #22]
 8020cc4:	8bfb      	ldrh	r3, [r7, #30]
 8020cc6:	4413      	add	r3, r2
 8020cc8:	b29b      	uxth	r3, r3
 8020cca:	3308      	adds	r3, #8
 8020ccc:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8020cce:	4b3e      	ldr	r3, [pc, #248]	; (8020dc8 <mem_trim+0x1f4>)
 8020cd0:	681b      	ldr	r3, [r3, #0]
 8020cd2:	693a      	ldr	r2, [r7, #16]
 8020cd4:	429a      	cmp	r2, r3
 8020cd6:	d106      	bne.n	8020ce6 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8020cd8:	89fb      	ldrh	r3, [r7, #14]
 8020cda:	4618      	mov	r0, r3
 8020cdc:	f7ff fdd2 	bl	8020884 <ptr_to_mem>
 8020ce0:	4603      	mov	r3, r0
 8020ce2:	4a39      	ldr	r2, [pc, #228]	; (8020dc8 <mem_trim+0x1f4>)
 8020ce4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8020ce6:	89fb      	ldrh	r3, [r7, #14]
 8020ce8:	4618      	mov	r0, r3
 8020cea:	f7ff fdcb 	bl	8020884 <ptr_to_mem>
 8020cee:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8020cf0:	693b      	ldr	r3, [r7, #16]
 8020cf2:	2200      	movs	r2, #0
 8020cf4:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8020cf6:	693b      	ldr	r3, [r7, #16]
 8020cf8:	89ba      	ldrh	r2, [r7, #12]
 8020cfa:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8020cfc:	693b      	ldr	r3, [r7, #16]
 8020cfe:	8afa      	ldrh	r2, [r7, #22]
 8020d00:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8020d02:	69bb      	ldr	r3, [r7, #24]
 8020d04:	89fa      	ldrh	r2, [r7, #14]
 8020d06:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8020d08:	693b      	ldr	r3, [r7, #16]
 8020d0a:	881b      	ldrh	r3, [r3, #0]
 8020d0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020d10:	d047      	beq.n	8020da2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8020d12:	693b      	ldr	r3, [r7, #16]
 8020d14:	881b      	ldrh	r3, [r3, #0]
 8020d16:	4618      	mov	r0, r3
 8020d18:	f7ff fdb4 	bl	8020884 <ptr_to_mem>
 8020d1c:	4602      	mov	r2, r0
 8020d1e:	89fb      	ldrh	r3, [r7, #14]
 8020d20:	8053      	strh	r3, [r2, #2]
 8020d22:	e03e      	b.n	8020da2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8020d24:	8bfb      	ldrh	r3, [r7, #30]
 8020d26:	f103 0214 	add.w	r2, r3, #20
 8020d2a:	8abb      	ldrh	r3, [r7, #20]
 8020d2c:	429a      	cmp	r2, r3
 8020d2e:	d838      	bhi.n	8020da2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8020d30:	8afa      	ldrh	r2, [r7, #22]
 8020d32:	8bfb      	ldrh	r3, [r7, #30]
 8020d34:	4413      	add	r3, r2
 8020d36:	b29b      	uxth	r3, r3
 8020d38:	3308      	adds	r3, #8
 8020d3a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8020d3c:	69bb      	ldr	r3, [r7, #24]
 8020d3e:	881b      	ldrh	r3, [r3, #0]
 8020d40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020d44:	d106      	bne.n	8020d54 <mem_trim+0x180>
 8020d46:	4b1b      	ldr	r3, [pc, #108]	; (8020db4 <mem_trim+0x1e0>)
 8020d48:	f240 3216 	movw	r2, #790	; 0x316
 8020d4c:	491d      	ldr	r1, [pc, #116]	; (8020dc4 <mem_trim+0x1f0>)
 8020d4e:	481b      	ldr	r0, [pc, #108]	; (8020dbc <mem_trim+0x1e8>)
 8020d50:	f004 fe84 	bl	8025a5c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8020d54:	89fb      	ldrh	r3, [r7, #14]
 8020d56:	4618      	mov	r0, r3
 8020d58:	f7ff fd94 	bl	8020884 <ptr_to_mem>
 8020d5c:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8020d5e:	4b1a      	ldr	r3, [pc, #104]	; (8020dc8 <mem_trim+0x1f4>)
 8020d60:	681b      	ldr	r3, [r3, #0]
 8020d62:	693a      	ldr	r2, [r7, #16]
 8020d64:	429a      	cmp	r2, r3
 8020d66:	d202      	bcs.n	8020d6e <mem_trim+0x19a>
      lfree = mem2;
 8020d68:	4a17      	ldr	r2, [pc, #92]	; (8020dc8 <mem_trim+0x1f4>)
 8020d6a:	693b      	ldr	r3, [r7, #16]
 8020d6c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8020d6e:	693b      	ldr	r3, [r7, #16]
 8020d70:	2200      	movs	r2, #0
 8020d72:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8020d74:	69bb      	ldr	r3, [r7, #24]
 8020d76:	881a      	ldrh	r2, [r3, #0]
 8020d78:	693b      	ldr	r3, [r7, #16]
 8020d7a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8020d7c:	693b      	ldr	r3, [r7, #16]
 8020d7e:	8afa      	ldrh	r2, [r7, #22]
 8020d80:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8020d82:	69bb      	ldr	r3, [r7, #24]
 8020d84:	89fa      	ldrh	r2, [r7, #14]
 8020d86:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8020d88:	693b      	ldr	r3, [r7, #16]
 8020d8a:	881b      	ldrh	r3, [r3, #0]
 8020d8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020d90:	d007      	beq.n	8020da2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8020d92:	693b      	ldr	r3, [r7, #16]
 8020d94:	881b      	ldrh	r3, [r3, #0]
 8020d96:	4618      	mov	r0, r3
 8020d98:	f7ff fd74 	bl	8020884 <ptr_to_mem>
 8020d9c:	4602      	mov	r2, r0
 8020d9e:	89fb      	ldrh	r3, [r7, #14]
 8020da0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8020da2:	687b      	ldr	r3, [r7, #4]
}
 8020da4:	4618      	mov	r0, r3
 8020da6:	3720      	adds	r7, #32
 8020da8:	46bd      	mov	sp, r7
 8020daa:	bd80      	pop	{r7, pc}
 8020dac:	20012d00 	.word	0x20012d00
 8020db0:	20012d04 	.word	0x20012d04
 8020db4:	0802b1b4 	.word	0x0802b1b4
 8020db8:	0802b368 	.word	0x0802b368
 8020dbc:	0802b240 	.word	0x0802b240
 8020dc0:	0802b380 	.word	0x0802b380
 8020dc4:	0802b3a0 	.word	0x0802b3a0
 8020dc8:	20012d08 	.word	0x20012d08

08020dcc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8020dcc:	b580      	push	{r7, lr}
 8020dce:	b088      	sub	sp, #32
 8020dd0:	af00      	add	r7, sp, #0
 8020dd2:	4603      	mov	r3, r0
 8020dd4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8020dd6:	88fb      	ldrh	r3, [r7, #6]
 8020dd8:	2b00      	cmp	r3, #0
 8020dda:	d101      	bne.n	8020de0 <mem_malloc+0x14>
    return NULL;
 8020ddc:	2300      	movs	r3, #0
 8020dde:	e0d9      	b.n	8020f94 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8020de0:	88fb      	ldrh	r3, [r7, #6]
 8020de2:	3303      	adds	r3, #3
 8020de4:	b29b      	uxth	r3, r3
 8020de6:	f023 0303 	bic.w	r3, r3, #3
 8020dea:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8020dec:	8bbb      	ldrh	r3, [r7, #28]
 8020dee:	2b0b      	cmp	r3, #11
 8020df0:	d801      	bhi.n	8020df6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8020df2:	230c      	movs	r3, #12
 8020df4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8020df6:	8bbb      	ldrh	r3, [r7, #28]
 8020df8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020dfc:	d803      	bhi.n	8020e06 <mem_malloc+0x3a>
 8020dfe:	8bba      	ldrh	r2, [r7, #28]
 8020e00:	88fb      	ldrh	r3, [r7, #6]
 8020e02:	429a      	cmp	r2, r3
 8020e04:	d201      	bcs.n	8020e0a <mem_malloc+0x3e>
    return NULL;
 8020e06:	2300      	movs	r3, #0
 8020e08:	e0c4      	b.n	8020f94 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8020e0a:	4b64      	ldr	r3, [pc, #400]	; (8020f9c <mem_malloc+0x1d0>)
 8020e0c:	681b      	ldr	r3, [r3, #0]
 8020e0e:	4618      	mov	r0, r3
 8020e10:	f7ff fd4a 	bl	80208a8 <mem_to_ptr>
 8020e14:	4603      	mov	r3, r0
 8020e16:	83fb      	strh	r3, [r7, #30]
 8020e18:	e0b4      	b.n	8020f84 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8020e1a:	8bfb      	ldrh	r3, [r7, #30]
 8020e1c:	4618      	mov	r0, r3
 8020e1e:	f7ff fd31 	bl	8020884 <ptr_to_mem>
 8020e22:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8020e24:	697b      	ldr	r3, [r7, #20]
 8020e26:	791b      	ldrb	r3, [r3, #4]
 8020e28:	2b00      	cmp	r3, #0
 8020e2a:	f040 80a4 	bne.w	8020f76 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8020e2e:	697b      	ldr	r3, [r7, #20]
 8020e30:	881b      	ldrh	r3, [r3, #0]
 8020e32:	461a      	mov	r2, r3
 8020e34:	8bfb      	ldrh	r3, [r7, #30]
 8020e36:	1ad3      	subs	r3, r2, r3
 8020e38:	f1a3 0208 	sub.w	r2, r3, #8
 8020e3c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8020e3e:	429a      	cmp	r2, r3
 8020e40:	f0c0 8099 	bcc.w	8020f76 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8020e44:	697b      	ldr	r3, [r7, #20]
 8020e46:	881b      	ldrh	r3, [r3, #0]
 8020e48:	461a      	mov	r2, r3
 8020e4a:	8bfb      	ldrh	r3, [r7, #30]
 8020e4c:	1ad3      	subs	r3, r2, r3
 8020e4e:	f1a3 0208 	sub.w	r2, r3, #8
 8020e52:	8bbb      	ldrh	r3, [r7, #28]
 8020e54:	3314      	adds	r3, #20
 8020e56:	429a      	cmp	r2, r3
 8020e58:	d333      	bcc.n	8020ec2 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8020e5a:	8bfa      	ldrh	r2, [r7, #30]
 8020e5c:	8bbb      	ldrh	r3, [r7, #28]
 8020e5e:	4413      	add	r3, r2
 8020e60:	b29b      	uxth	r3, r3
 8020e62:	3308      	adds	r3, #8
 8020e64:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8020e66:	8a7b      	ldrh	r3, [r7, #18]
 8020e68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020e6c:	d106      	bne.n	8020e7c <mem_malloc+0xb0>
 8020e6e:	4b4c      	ldr	r3, [pc, #304]	; (8020fa0 <mem_malloc+0x1d4>)
 8020e70:	f240 3287 	movw	r2, #903	; 0x387
 8020e74:	494b      	ldr	r1, [pc, #300]	; (8020fa4 <mem_malloc+0x1d8>)
 8020e76:	484c      	ldr	r0, [pc, #304]	; (8020fa8 <mem_malloc+0x1dc>)
 8020e78:	f004 fdf0 	bl	8025a5c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8020e7c:	8a7b      	ldrh	r3, [r7, #18]
 8020e7e:	4618      	mov	r0, r3
 8020e80:	f7ff fd00 	bl	8020884 <ptr_to_mem>
 8020e84:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8020e86:	68fb      	ldr	r3, [r7, #12]
 8020e88:	2200      	movs	r2, #0
 8020e8a:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8020e8c:	697b      	ldr	r3, [r7, #20]
 8020e8e:	881a      	ldrh	r2, [r3, #0]
 8020e90:	68fb      	ldr	r3, [r7, #12]
 8020e92:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8020e94:	68fb      	ldr	r3, [r7, #12]
 8020e96:	8bfa      	ldrh	r2, [r7, #30]
 8020e98:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8020e9a:	697b      	ldr	r3, [r7, #20]
 8020e9c:	8a7a      	ldrh	r2, [r7, #18]
 8020e9e:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8020ea0:	697b      	ldr	r3, [r7, #20]
 8020ea2:	2201      	movs	r2, #1
 8020ea4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8020ea6:	68fb      	ldr	r3, [r7, #12]
 8020ea8:	881b      	ldrh	r3, [r3, #0]
 8020eaa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020eae:	d00b      	beq.n	8020ec8 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8020eb0:	68fb      	ldr	r3, [r7, #12]
 8020eb2:	881b      	ldrh	r3, [r3, #0]
 8020eb4:	4618      	mov	r0, r3
 8020eb6:	f7ff fce5 	bl	8020884 <ptr_to_mem>
 8020eba:	4602      	mov	r2, r0
 8020ebc:	8a7b      	ldrh	r3, [r7, #18]
 8020ebe:	8053      	strh	r3, [r2, #2]
 8020ec0:	e002      	b.n	8020ec8 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8020ec2:	697b      	ldr	r3, [r7, #20]
 8020ec4:	2201      	movs	r2, #1
 8020ec6:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8020ec8:	4b34      	ldr	r3, [pc, #208]	; (8020f9c <mem_malloc+0x1d0>)
 8020eca:	681b      	ldr	r3, [r3, #0]
 8020ecc:	697a      	ldr	r2, [r7, #20]
 8020ece:	429a      	cmp	r2, r3
 8020ed0:	d127      	bne.n	8020f22 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8020ed2:	4b32      	ldr	r3, [pc, #200]	; (8020f9c <mem_malloc+0x1d0>)
 8020ed4:	681b      	ldr	r3, [r3, #0]
 8020ed6:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8020ed8:	e005      	b.n	8020ee6 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8020eda:	69bb      	ldr	r3, [r7, #24]
 8020edc:	881b      	ldrh	r3, [r3, #0]
 8020ede:	4618      	mov	r0, r3
 8020ee0:	f7ff fcd0 	bl	8020884 <ptr_to_mem>
 8020ee4:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8020ee6:	69bb      	ldr	r3, [r7, #24]
 8020ee8:	791b      	ldrb	r3, [r3, #4]
 8020eea:	2b00      	cmp	r3, #0
 8020eec:	d004      	beq.n	8020ef8 <mem_malloc+0x12c>
 8020eee:	4b2f      	ldr	r3, [pc, #188]	; (8020fac <mem_malloc+0x1e0>)
 8020ef0:	681b      	ldr	r3, [r3, #0]
 8020ef2:	69ba      	ldr	r2, [r7, #24]
 8020ef4:	429a      	cmp	r2, r3
 8020ef6:	d1f0      	bne.n	8020eda <mem_malloc+0x10e>
          }
          lfree = cur;
 8020ef8:	4a28      	ldr	r2, [pc, #160]	; (8020f9c <mem_malloc+0x1d0>)
 8020efa:	69bb      	ldr	r3, [r7, #24]
 8020efc:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8020efe:	4b27      	ldr	r3, [pc, #156]	; (8020f9c <mem_malloc+0x1d0>)
 8020f00:	681a      	ldr	r2, [r3, #0]
 8020f02:	4b2a      	ldr	r3, [pc, #168]	; (8020fac <mem_malloc+0x1e0>)
 8020f04:	681b      	ldr	r3, [r3, #0]
 8020f06:	429a      	cmp	r2, r3
 8020f08:	d00b      	beq.n	8020f22 <mem_malloc+0x156>
 8020f0a:	4b24      	ldr	r3, [pc, #144]	; (8020f9c <mem_malloc+0x1d0>)
 8020f0c:	681b      	ldr	r3, [r3, #0]
 8020f0e:	791b      	ldrb	r3, [r3, #4]
 8020f10:	2b00      	cmp	r3, #0
 8020f12:	d006      	beq.n	8020f22 <mem_malloc+0x156>
 8020f14:	4b22      	ldr	r3, [pc, #136]	; (8020fa0 <mem_malloc+0x1d4>)
 8020f16:	f240 32b5 	movw	r2, #949	; 0x3b5
 8020f1a:	4925      	ldr	r1, [pc, #148]	; (8020fb0 <mem_malloc+0x1e4>)
 8020f1c:	4822      	ldr	r0, [pc, #136]	; (8020fa8 <mem_malloc+0x1dc>)
 8020f1e:	f004 fd9d 	bl	8025a5c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8020f22:	8bba      	ldrh	r2, [r7, #28]
 8020f24:	697b      	ldr	r3, [r7, #20]
 8020f26:	4413      	add	r3, r2
 8020f28:	3308      	adds	r3, #8
 8020f2a:	4a20      	ldr	r2, [pc, #128]	; (8020fac <mem_malloc+0x1e0>)
 8020f2c:	6812      	ldr	r2, [r2, #0]
 8020f2e:	4293      	cmp	r3, r2
 8020f30:	d906      	bls.n	8020f40 <mem_malloc+0x174>
 8020f32:	4b1b      	ldr	r3, [pc, #108]	; (8020fa0 <mem_malloc+0x1d4>)
 8020f34:	f240 32b9 	movw	r2, #953	; 0x3b9
 8020f38:	491e      	ldr	r1, [pc, #120]	; (8020fb4 <mem_malloc+0x1e8>)
 8020f3a:	481b      	ldr	r0, [pc, #108]	; (8020fa8 <mem_malloc+0x1dc>)
 8020f3c:	f004 fd8e 	bl	8025a5c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8020f40:	697b      	ldr	r3, [r7, #20]
 8020f42:	f003 0303 	and.w	r3, r3, #3
 8020f46:	2b00      	cmp	r3, #0
 8020f48:	d006      	beq.n	8020f58 <mem_malloc+0x18c>
 8020f4a:	4b15      	ldr	r3, [pc, #84]	; (8020fa0 <mem_malloc+0x1d4>)
 8020f4c:	f240 32bb 	movw	r2, #955	; 0x3bb
 8020f50:	4919      	ldr	r1, [pc, #100]	; (8020fb8 <mem_malloc+0x1ec>)
 8020f52:	4815      	ldr	r0, [pc, #84]	; (8020fa8 <mem_malloc+0x1dc>)
 8020f54:	f004 fd82 	bl	8025a5c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8020f58:	697b      	ldr	r3, [r7, #20]
 8020f5a:	f003 0303 	and.w	r3, r3, #3
 8020f5e:	2b00      	cmp	r3, #0
 8020f60:	d006      	beq.n	8020f70 <mem_malloc+0x1a4>
 8020f62:	4b0f      	ldr	r3, [pc, #60]	; (8020fa0 <mem_malloc+0x1d4>)
 8020f64:	f240 32bd 	movw	r2, #957	; 0x3bd
 8020f68:	4914      	ldr	r1, [pc, #80]	; (8020fbc <mem_malloc+0x1f0>)
 8020f6a:	480f      	ldr	r0, [pc, #60]	; (8020fa8 <mem_malloc+0x1dc>)
 8020f6c:	f004 fd76 	bl	8025a5c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8020f70:	697b      	ldr	r3, [r7, #20]
 8020f72:	3308      	adds	r3, #8
 8020f74:	e00e      	b.n	8020f94 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8020f76:	8bfb      	ldrh	r3, [r7, #30]
 8020f78:	4618      	mov	r0, r3
 8020f7a:	f7ff fc83 	bl	8020884 <ptr_to_mem>
 8020f7e:	4603      	mov	r3, r0
 8020f80:	881b      	ldrh	r3, [r3, #0]
 8020f82:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8020f84:	8bfa      	ldrh	r2, [r7, #30]
 8020f86:	8bbb      	ldrh	r3, [r7, #28]
 8020f88:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8020f8c:	429a      	cmp	r2, r3
 8020f8e:	f4ff af44 	bcc.w	8020e1a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8020f92:	2300      	movs	r3, #0
}
 8020f94:	4618      	mov	r0, r3
 8020f96:	3720      	adds	r7, #32
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}
 8020f9c:	20012d08 	.word	0x20012d08
 8020fa0:	0802b1b4 	.word	0x0802b1b4
 8020fa4:	0802b3a0 	.word	0x0802b3a0
 8020fa8:	0802b240 	.word	0x0802b240
 8020fac:	20012d04 	.word	0x20012d04
 8020fb0:	0802b3b4 	.word	0x0802b3b4
 8020fb4:	0802b3d0 	.word	0x0802b3d0
 8020fb8:	0802b400 	.word	0x0802b400
 8020fbc:	0802b430 	.word	0x0802b430

08020fc0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8020fc0:	b480      	push	{r7}
 8020fc2:	b085      	sub	sp, #20
 8020fc4:	af00      	add	r7, sp, #0
 8020fc6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8020fc8:	687b      	ldr	r3, [r7, #4]
 8020fca:	689b      	ldr	r3, [r3, #8]
 8020fcc:	2200      	movs	r2, #0
 8020fce:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8020fd0:	687b      	ldr	r3, [r7, #4]
 8020fd2:	685b      	ldr	r3, [r3, #4]
 8020fd4:	3303      	adds	r3, #3
 8020fd6:	f023 0303 	bic.w	r3, r3, #3
 8020fda:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8020fdc:	2300      	movs	r3, #0
 8020fde:	60fb      	str	r3, [r7, #12]
 8020fe0:	e011      	b.n	8021006 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8020fe2:	687b      	ldr	r3, [r7, #4]
 8020fe4:	689b      	ldr	r3, [r3, #8]
 8020fe6:	681a      	ldr	r2, [r3, #0]
 8020fe8:	68bb      	ldr	r3, [r7, #8]
 8020fea:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8020fec:	687b      	ldr	r3, [r7, #4]
 8020fee:	689b      	ldr	r3, [r3, #8]
 8020ff0:	68ba      	ldr	r2, [r7, #8]
 8020ff2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	881b      	ldrh	r3, [r3, #0]
 8020ff8:	461a      	mov	r2, r3
 8020ffa:	68bb      	ldr	r3, [r7, #8]
 8020ffc:	4413      	add	r3, r2
 8020ffe:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8021000:	68fb      	ldr	r3, [r7, #12]
 8021002:	3301      	adds	r3, #1
 8021004:	60fb      	str	r3, [r7, #12]
 8021006:	687b      	ldr	r3, [r7, #4]
 8021008:	885b      	ldrh	r3, [r3, #2]
 802100a:	461a      	mov	r2, r3
 802100c:	68fb      	ldr	r3, [r7, #12]
 802100e:	4293      	cmp	r3, r2
 8021010:	dbe7      	blt.n	8020fe2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8021012:	bf00      	nop
 8021014:	bf00      	nop
 8021016:	3714      	adds	r7, #20
 8021018:	46bd      	mov	sp, r7
 802101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802101e:	4770      	bx	lr

08021020 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8021020:	b580      	push	{r7, lr}
 8021022:	b082      	sub	sp, #8
 8021024:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8021026:	2300      	movs	r3, #0
 8021028:	80fb      	strh	r3, [r7, #6]
 802102a:	e009      	b.n	8021040 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 802102c:	88fb      	ldrh	r3, [r7, #6]
 802102e:	4a08      	ldr	r2, [pc, #32]	; (8021050 <memp_init+0x30>)
 8021030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021034:	4618      	mov	r0, r3
 8021036:	f7ff ffc3 	bl	8020fc0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802103a:	88fb      	ldrh	r3, [r7, #6]
 802103c:	3301      	adds	r3, #1
 802103e:	80fb      	strh	r3, [r7, #6]
 8021040:	88fb      	ldrh	r3, [r7, #6]
 8021042:	2b05      	cmp	r3, #5
 8021044:	d9f2      	bls.n	802102c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8021046:	bf00      	nop
 8021048:	bf00      	nop
 802104a:	3708      	adds	r7, #8
 802104c:	46bd      	mov	sp, r7
 802104e:	bd80      	pop	{r7, pc}
 8021050:	0802cf38 	.word	0x0802cf38

08021054 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8021054:	b580      	push	{r7, lr}
 8021056:	b084      	sub	sp, #16
 8021058:	af00      	add	r7, sp, #0
 802105a:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 802105c:	687b      	ldr	r3, [r7, #4]
 802105e:	689b      	ldr	r3, [r3, #8]
 8021060:	681b      	ldr	r3, [r3, #0]
 8021062:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8021064:	68fb      	ldr	r3, [r7, #12]
 8021066:	2b00      	cmp	r3, #0
 8021068:	d012      	beq.n	8021090 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 802106a:	687b      	ldr	r3, [r7, #4]
 802106c:	689b      	ldr	r3, [r3, #8]
 802106e:	68fa      	ldr	r2, [r7, #12]
 8021070:	6812      	ldr	r2, [r2, #0]
 8021072:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8021074:	68fb      	ldr	r3, [r7, #12]
 8021076:	f003 0303 	and.w	r3, r3, #3
 802107a:	2b00      	cmp	r3, #0
 802107c:	d006      	beq.n	802108c <do_memp_malloc_pool+0x38>
 802107e:	4b07      	ldr	r3, [pc, #28]	; (802109c <do_memp_malloc_pool+0x48>)
 8021080:	f44f 728c 	mov.w	r2, #280	; 0x118
 8021084:	4906      	ldr	r1, [pc, #24]	; (80210a0 <do_memp_malloc_pool+0x4c>)
 8021086:	4807      	ldr	r0, [pc, #28]	; (80210a4 <do_memp_malloc_pool+0x50>)
 8021088:	f004 fce8 	bl	8025a5c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 802108c:	68fb      	ldr	r3, [r7, #12]
 802108e:	e000      	b.n	8021092 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8021090:	2300      	movs	r3, #0
}
 8021092:	4618      	mov	r0, r3
 8021094:	3710      	adds	r7, #16
 8021096:	46bd      	mov	sp, r7
 8021098:	bd80      	pop	{r7, pc}
 802109a:	bf00      	nop
 802109c:	0802b454 	.word	0x0802b454
 80210a0:	0802b4c8 	.word	0x0802b4c8
 80210a4:	0802b4ec 	.word	0x0802b4ec

080210a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80210a8:	b580      	push	{r7, lr}
 80210aa:	b082      	sub	sp, #8
 80210ac:	af00      	add	r7, sp, #0
 80210ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	2b00      	cmp	r3, #0
 80210b4:	d106      	bne.n	80210c4 <memp_malloc_pool+0x1c>
 80210b6:	4b0a      	ldr	r3, [pc, #40]	; (80210e0 <memp_malloc_pool+0x38>)
 80210b8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80210bc:	4909      	ldr	r1, [pc, #36]	; (80210e4 <memp_malloc_pool+0x3c>)
 80210be:	480a      	ldr	r0, [pc, #40]	; (80210e8 <memp_malloc_pool+0x40>)
 80210c0:	f004 fccc 	bl	8025a5c <iprintf>
  if (desc == NULL) {
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d101      	bne.n	80210ce <memp_malloc_pool+0x26>
    return NULL;
 80210ca:	2300      	movs	r3, #0
 80210cc:	e003      	b.n	80210d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80210ce:	6878      	ldr	r0, [r7, #4]
 80210d0:	f7ff ffc0 	bl	8021054 <do_memp_malloc_pool>
 80210d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80210d6:	4618      	mov	r0, r3
 80210d8:	3708      	adds	r7, #8
 80210da:	46bd      	mov	sp, r7
 80210dc:	bd80      	pop	{r7, pc}
 80210de:	bf00      	nop
 80210e0:	0802b454 	.word	0x0802b454
 80210e4:	0802b514 	.word	0x0802b514
 80210e8:	0802b4ec 	.word	0x0802b4ec

080210ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80210ec:	b580      	push	{r7, lr}
 80210ee:	b084      	sub	sp, #16
 80210f0:	af00      	add	r7, sp, #0
 80210f2:	4603      	mov	r3, r0
 80210f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80210f6:	79fb      	ldrb	r3, [r7, #7]
 80210f8:	2b05      	cmp	r3, #5
 80210fa:	d908      	bls.n	802110e <memp_malloc+0x22>
 80210fc:	4b0a      	ldr	r3, [pc, #40]	; (8021128 <memp_malloc+0x3c>)
 80210fe:	f240 1257 	movw	r2, #343	; 0x157
 8021102:	490a      	ldr	r1, [pc, #40]	; (802112c <memp_malloc+0x40>)
 8021104:	480a      	ldr	r0, [pc, #40]	; (8021130 <memp_malloc+0x44>)
 8021106:	f004 fca9 	bl	8025a5c <iprintf>
 802110a:	2300      	movs	r3, #0
 802110c:	e008      	b.n	8021120 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 802110e:	79fb      	ldrb	r3, [r7, #7]
 8021110:	4a08      	ldr	r2, [pc, #32]	; (8021134 <memp_malloc+0x48>)
 8021112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021116:	4618      	mov	r0, r3
 8021118:	f7ff ff9c 	bl	8021054 <do_memp_malloc_pool>
 802111c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 802111e:	68fb      	ldr	r3, [r7, #12]
}
 8021120:	4618      	mov	r0, r3
 8021122:	3710      	adds	r7, #16
 8021124:	46bd      	mov	sp, r7
 8021126:	bd80      	pop	{r7, pc}
 8021128:	0802b454 	.word	0x0802b454
 802112c:	0802b528 	.word	0x0802b528
 8021130:	0802b4ec 	.word	0x0802b4ec
 8021134:	0802cf38 	.word	0x0802cf38

08021138 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b084      	sub	sp, #16
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8021142:	683b      	ldr	r3, [r7, #0]
 8021144:	f003 0303 	and.w	r3, r3, #3
 8021148:	2b00      	cmp	r3, #0
 802114a:	d006      	beq.n	802115a <do_memp_free_pool+0x22>
 802114c:	4b0a      	ldr	r3, [pc, #40]	; (8021178 <do_memp_free_pool+0x40>)
 802114e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8021152:	490a      	ldr	r1, [pc, #40]	; (802117c <do_memp_free_pool+0x44>)
 8021154:	480a      	ldr	r0, [pc, #40]	; (8021180 <do_memp_free_pool+0x48>)
 8021156:	f004 fc81 	bl	8025a5c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 802115a:	683b      	ldr	r3, [r7, #0]
 802115c:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 802115e:	687b      	ldr	r3, [r7, #4]
 8021160:	689b      	ldr	r3, [r3, #8]
 8021162:	681a      	ldr	r2, [r3, #0]
 8021164:	68fb      	ldr	r3, [r7, #12]
 8021166:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8021168:	687b      	ldr	r3, [r7, #4]
 802116a:	689b      	ldr	r3, [r3, #8]
 802116c:	68fa      	ldr	r2, [r7, #12]
 802116e:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8021170:	bf00      	nop
 8021172:	3710      	adds	r7, #16
 8021174:	46bd      	mov	sp, r7
 8021176:	bd80      	pop	{r7, pc}
 8021178:	0802b454 	.word	0x0802b454
 802117c:	0802b548 	.word	0x0802b548
 8021180:	0802b4ec 	.word	0x0802b4ec

08021184 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8021184:	b580      	push	{r7, lr}
 8021186:	b082      	sub	sp, #8
 8021188:	af00      	add	r7, sp, #0
 802118a:	6078      	str	r0, [r7, #4]
 802118c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 802118e:	687b      	ldr	r3, [r7, #4]
 8021190:	2b00      	cmp	r3, #0
 8021192:	d106      	bne.n	80211a2 <memp_free_pool+0x1e>
 8021194:	4b0a      	ldr	r3, [pc, #40]	; (80211c0 <memp_free_pool+0x3c>)
 8021196:	f240 1295 	movw	r2, #405	; 0x195
 802119a:	490a      	ldr	r1, [pc, #40]	; (80211c4 <memp_free_pool+0x40>)
 802119c:	480a      	ldr	r0, [pc, #40]	; (80211c8 <memp_free_pool+0x44>)
 802119e:	f004 fc5d 	bl	8025a5c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80211a2:	687b      	ldr	r3, [r7, #4]
 80211a4:	2b00      	cmp	r3, #0
 80211a6:	d007      	beq.n	80211b8 <memp_free_pool+0x34>
 80211a8:	683b      	ldr	r3, [r7, #0]
 80211aa:	2b00      	cmp	r3, #0
 80211ac:	d004      	beq.n	80211b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80211ae:	6839      	ldr	r1, [r7, #0]
 80211b0:	6878      	ldr	r0, [r7, #4]
 80211b2:	f7ff ffc1 	bl	8021138 <do_memp_free_pool>
 80211b6:	e000      	b.n	80211ba <memp_free_pool+0x36>
    return;
 80211b8:	bf00      	nop
}
 80211ba:	3708      	adds	r7, #8
 80211bc:	46bd      	mov	sp, r7
 80211be:	bd80      	pop	{r7, pc}
 80211c0:	0802b454 	.word	0x0802b454
 80211c4:	0802b514 	.word	0x0802b514
 80211c8:	0802b4ec 	.word	0x0802b4ec

080211cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80211cc:	b580      	push	{r7, lr}
 80211ce:	b082      	sub	sp, #8
 80211d0:	af00      	add	r7, sp, #0
 80211d2:	4603      	mov	r3, r0
 80211d4:	6039      	str	r1, [r7, #0]
 80211d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80211d8:	79fb      	ldrb	r3, [r7, #7]
 80211da:	2b05      	cmp	r3, #5
 80211dc:	d907      	bls.n	80211ee <memp_free+0x22>
 80211de:	4b0c      	ldr	r3, [pc, #48]	; (8021210 <memp_free+0x44>)
 80211e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80211e4:	490b      	ldr	r1, [pc, #44]	; (8021214 <memp_free+0x48>)
 80211e6:	480c      	ldr	r0, [pc, #48]	; (8021218 <memp_free+0x4c>)
 80211e8:	f004 fc38 	bl	8025a5c <iprintf>
 80211ec:	e00c      	b.n	8021208 <memp_free+0x3c>

  if (mem == NULL) {
 80211ee:	683b      	ldr	r3, [r7, #0]
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	d008      	beq.n	8021206 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80211f4:	79fb      	ldrb	r3, [r7, #7]
 80211f6:	4a09      	ldr	r2, [pc, #36]	; (802121c <memp_free+0x50>)
 80211f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80211fc:	6839      	ldr	r1, [r7, #0]
 80211fe:	4618      	mov	r0, r3
 8021200:	f7ff ff9a 	bl	8021138 <do_memp_free_pool>
 8021204:	e000      	b.n	8021208 <memp_free+0x3c>
    return;
 8021206:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8021208:	3708      	adds	r7, #8
 802120a:	46bd      	mov	sp, r7
 802120c:	bd80      	pop	{r7, pc}
 802120e:	bf00      	nop
 8021210:	0802b454 	.word	0x0802b454
 8021214:	0802b568 	.word	0x0802b568
 8021218:	0802b4ec 	.word	0x0802b4ec
 802121c:	0802cf38 	.word	0x0802cf38

08021220 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8021220:	b580      	push	{r7, lr}
 8021222:	b082      	sub	sp, #8
 8021224:	af00      	add	r7, sp, #0
 8021226:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	2b00      	cmp	r3, #0
 802122c:	d105      	bne.n	802123a <netif_loopif_init+0x1a>
 802122e:	4b0b      	ldr	r3, [pc, #44]	; (802125c <netif_loopif_init+0x3c>)
 8021230:	2299      	movs	r2, #153	; 0x99
 8021232:	490b      	ldr	r1, [pc, #44]	; (8021260 <netif_loopif_init+0x40>)
 8021234:	480b      	ldr	r0, [pc, #44]	; (8021264 <netif_loopif_init+0x44>)
 8021236:	f004 fc11 	bl	8025a5c <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 802123a:	687b      	ldr	r3, [r7, #4]
 802123c:	226c      	movs	r2, #108	; 0x6c
 802123e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	226f      	movs	r2, #111	; 0x6f
 8021246:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 802124a:	687b      	ldr	r3, [r7, #4]
 802124c:	4a06      	ldr	r2, [pc, #24]	; (8021268 <netif_loopif_init+0x48>)
 802124e:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 8021250:	2300      	movs	r3, #0
}
 8021252:	4618      	mov	r0, r3
 8021254:	3708      	adds	r7, #8
 8021256:	46bd      	mov	sp, r7
 8021258:	bd80      	pop	{r7, pc}
 802125a:	bf00      	nop
 802125c:	0802b584 	.word	0x0802b584
 8021260:	0802b5f8 	.word	0x0802b5f8
 8021264:	0802b61c 	.word	0x0802b61c
 8021268:	0802194d 	.word	0x0802194d

0802126c <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 802126c:	b580      	push	{r7, lr}
 802126e:	b088      	sub	sp, #32
 8021270:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 8021272:	4b0f      	ldr	r3, [pc, #60]	; (80212b0 <netif_init+0x44>)
 8021274:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 8021276:	4b0e      	ldr	r3, [pc, #56]	; (80212b0 <netif_init+0x44>)
 8021278:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 802127a:	23ff      	movs	r3, #255	; 0xff
 802127c:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 802127e:	1d3b      	adds	r3, r7, #4
 8021280:	f107 0208 	add.w	r2, r7, #8
 8021284:	f107 010c 	add.w	r1, r7, #12
 8021288:	480a      	ldr	r0, [pc, #40]	; (80212b4 <netif_init+0x48>)
 802128a:	9002      	str	r0, [sp, #8]
 802128c:	480a      	ldr	r0, [pc, #40]	; (80212b8 <netif_init+0x4c>)
 802128e:	9001      	str	r0, [sp, #4]
 8021290:	2000      	movs	r0, #0
 8021292:	9000      	str	r0, [sp, #0]
 8021294:	4809      	ldr	r0, [pc, #36]	; (80212bc <netif_init+0x50>)
 8021296:	f000 f813 	bl	80212c0 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 802129a:	4808      	ldr	r0, [pc, #32]	; (80212bc <netif_init+0x50>)
 802129c:	f000 fa72 	bl	8021784 <netif_set_link_up>
  netif_set_up(&loop_netif);
 80212a0:	4806      	ldr	r0, [pc, #24]	; (80212bc <netif_init+0x50>)
 80212a2:	f000 f9d1 	bl	8021648 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 80212a6:	bf00      	nop
 80212a8:	3710      	adds	r7, #16
 80212aa:	46bd      	mov	sp, r7
 80212ac:	bd80      	pop	{r7, pc}
 80212ae:	bf00      	nop
 80212b0:	0100007f 	.word	0x0100007f
 80212b4:	080243e9 	.word	0x080243e9
 80212b8:	08021221 	.word	0x08021221
 80212bc:	20015cb0 	.word	0x20015cb0

080212c0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80212c0:	b580      	push	{r7, lr}
 80212c2:	b086      	sub	sp, #24
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	60f8      	str	r0, [r7, #12]
 80212c8:	60b9      	str	r1, [r7, #8]
 80212ca:	607a      	str	r2, [r7, #4]
 80212cc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80212ce:	68fb      	ldr	r3, [r7, #12]
 80212d0:	2b00      	cmp	r3, #0
 80212d2:	d108      	bne.n	80212e6 <netif_add+0x26>
 80212d4:	4b5a      	ldr	r3, [pc, #360]	; (8021440 <netif_add+0x180>)
 80212d6:	f240 1227 	movw	r2, #295	; 0x127
 80212da:	495a      	ldr	r1, [pc, #360]	; (8021444 <netif_add+0x184>)
 80212dc:	485a      	ldr	r0, [pc, #360]	; (8021448 <netif_add+0x188>)
 80212de:	f004 fbbd 	bl	8025a5c <iprintf>
 80212e2:	2300      	movs	r3, #0
 80212e4:	e0a8      	b.n	8021438 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80212e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	d108      	bne.n	80212fe <netif_add+0x3e>
 80212ec:	4b54      	ldr	r3, [pc, #336]	; (8021440 <netif_add+0x180>)
 80212ee:	f44f 7294 	mov.w	r2, #296	; 0x128
 80212f2:	4956      	ldr	r1, [pc, #344]	; (802144c <netif_add+0x18c>)
 80212f4:	4854      	ldr	r0, [pc, #336]	; (8021448 <netif_add+0x188>)
 80212f6:	f004 fbb1 	bl	8025a5c <iprintf>
 80212fa:	2300      	movs	r3, #0
 80212fc:	e09c      	b.n	8021438 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80212fe:	68bb      	ldr	r3, [r7, #8]
 8021300:	2b00      	cmp	r3, #0
 8021302:	d101      	bne.n	8021308 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8021304:	4b52      	ldr	r3, [pc, #328]	; (8021450 <netif_add+0x190>)
 8021306:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8021308:	687b      	ldr	r3, [r7, #4]
 802130a:	2b00      	cmp	r3, #0
 802130c:	d101      	bne.n	8021312 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 802130e:	4b50      	ldr	r3, [pc, #320]	; (8021450 <netif_add+0x190>)
 8021310:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8021312:	683b      	ldr	r3, [r7, #0]
 8021314:	2b00      	cmp	r3, #0
 8021316:	d101      	bne.n	802131c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8021318:	4b4d      	ldr	r3, [pc, #308]	; (8021450 <netif_add+0x190>)
 802131a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 802131c:	68fb      	ldr	r3, [r7, #12]
 802131e:	2200      	movs	r2, #0
 8021320:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8021322:	68fb      	ldr	r3, [r7, #12]
 8021324:	2200      	movs	r2, #0
 8021326:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8021328:	68fb      	ldr	r3, [r7, #12]
 802132a:	2200      	movs	r2, #0
 802132c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 802132e:	68fb      	ldr	r3, [r7, #12]
 8021330:	4a48      	ldr	r2, [pc, #288]	; (8021454 <netif_add+0x194>)
 8021332:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8021334:	68fb      	ldr	r3, [r7, #12]
 8021336:	2200      	movs	r2, #0
 8021338:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 802133a:	68fb      	ldr	r3, [r7, #12]
 802133c:	2200      	movs	r2, #0
 802133e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8021342:	68fb      	ldr	r3, [r7, #12]
 8021344:	2200      	movs	r2, #0
 8021346:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 8021348:	68fb      	ldr	r3, [r7, #12]
 802134a:	2200      	movs	r2, #0
 802134c:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 802134e:	68fb      	ldr	r3, [r7, #12]
 8021350:	2200      	movs	r2, #0
 8021352:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	6a3a      	ldr	r2, [r7, #32]
 8021358:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 802135a:	4b3f      	ldr	r3, [pc, #252]	; (8021458 <netif_add+0x198>)
 802135c:	781a      	ldrb	r2, [r3, #0]
 802135e:	68fb      	ldr	r3, [r7, #12]
 8021360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8021364:	68fb      	ldr	r3, [r7, #12]
 8021366:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021368:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 802136a:	683b      	ldr	r3, [r7, #0]
 802136c:	687a      	ldr	r2, [r7, #4]
 802136e:	68b9      	ldr	r1, [r7, #8]
 8021370:	68f8      	ldr	r0, [r7, #12]
 8021372:	f000 f90f 	bl	8021594 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8021376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021378:	68f8      	ldr	r0, [r7, #12]
 802137a:	4798      	blx	r3
 802137c:	4603      	mov	r3, r0
 802137e:	2b00      	cmp	r3, #0
 8021380:	d001      	beq.n	8021386 <netif_add+0xc6>
    return NULL;
 8021382:	2300      	movs	r3, #0
 8021384:	e058      	b.n	8021438 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8021386:	68fb      	ldr	r3, [r7, #12]
 8021388:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802138c:	2bff      	cmp	r3, #255	; 0xff
 802138e:	d103      	bne.n	8021398 <netif_add+0xd8>
        netif->num = 0;
 8021390:	68fb      	ldr	r3, [r7, #12]
 8021392:	2200      	movs	r2, #0
 8021394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8021398:	2300      	movs	r3, #0
 802139a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802139c:	4b2f      	ldr	r3, [pc, #188]	; (802145c <netif_add+0x19c>)
 802139e:	681b      	ldr	r3, [r3, #0]
 80213a0:	617b      	str	r3, [r7, #20]
 80213a2:	e02b      	b.n	80213fc <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80213a4:	697a      	ldr	r2, [r7, #20]
 80213a6:	68fb      	ldr	r3, [r7, #12]
 80213a8:	429a      	cmp	r2, r3
 80213aa:	d106      	bne.n	80213ba <netif_add+0xfa>
 80213ac:	4b24      	ldr	r3, [pc, #144]	; (8021440 <netif_add+0x180>)
 80213ae:	f240 128b 	movw	r2, #395	; 0x18b
 80213b2:	492b      	ldr	r1, [pc, #172]	; (8021460 <netif_add+0x1a0>)
 80213b4:	4824      	ldr	r0, [pc, #144]	; (8021448 <netif_add+0x188>)
 80213b6:	f004 fb51 	bl	8025a5c <iprintf>
        num_netifs++;
 80213ba:	693b      	ldr	r3, [r7, #16]
 80213bc:	3301      	adds	r3, #1
 80213be:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80213c0:	693b      	ldr	r3, [r7, #16]
 80213c2:	2bff      	cmp	r3, #255	; 0xff
 80213c4:	dd06      	ble.n	80213d4 <netif_add+0x114>
 80213c6:	4b1e      	ldr	r3, [pc, #120]	; (8021440 <netif_add+0x180>)
 80213c8:	f240 128d 	movw	r2, #397	; 0x18d
 80213cc:	4925      	ldr	r1, [pc, #148]	; (8021464 <netif_add+0x1a4>)
 80213ce:	481e      	ldr	r0, [pc, #120]	; (8021448 <netif_add+0x188>)
 80213d0:	f004 fb44 	bl	8025a5c <iprintf>
        if (netif2->num == netif->num) {
 80213d4:	697b      	ldr	r3, [r7, #20]
 80213d6:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80213da:	68fb      	ldr	r3, [r7, #12]
 80213dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80213e0:	429a      	cmp	r2, r3
 80213e2:	d108      	bne.n	80213f6 <netif_add+0x136>
          netif->num++;
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80213ea:	3301      	adds	r3, #1
 80213ec:	b2da      	uxtb	r2, r3
 80213ee:	68fb      	ldr	r3, [r7, #12]
 80213f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80213f4:	e005      	b.n	8021402 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80213f6:	697b      	ldr	r3, [r7, #20]
 80213f8:	681b      	ldr	r3, [r3, #0]
 80213fa:	617b      	str	r3, [r7, #20]
 80213fc:	697b      	ldr	r3, [r7, #20]
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d1d0      	bne.n	80213a4 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 8021402:	697b      	ldr	r3, [r7, #20]
 8021404:	2b00      	cmp	r3, #0
 8021406:	d1be      	bne.n	8021386 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 8021408:	68fb      	ldr	r3, [r7, #12]
 802140a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802140e:	2bfe      	cmp	r3, #254	; 0xfe
 8021410:	d103      	bne.n	802141a <netif_add+0x15a>
    netif_num = 0;
 8021412:	4b11      	ldr	r3, [pc, #68]	; (8021458 <netif_add+0x198>)
 8021414:	2200      	movs	r2, #0
 8021416:	701a      	strb	r2, [r3, #0]
 8021418:	e006      	b.n	8021428 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 802141a:	68fb      	ldr	r3, [r7, #12]
 802141c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021420:	3301      	adds	r3, #1
 8021422:	b2da      	uxtb	r2, r3
 8021424:	4b0c      	ldr	r3, [pc, #48]	; (8021458 <netif_add+0x198>)
 8021426:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8021428:	4b0c      	ldr	r3, [pc, #48]	; (802145c <netif_add+0x19c>)
 802142a:	681a      	ldr	r2, [r3, #0]
 802142c:	68fb      	ldr	r3, [r7, #12]
 802142e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8021430:	4a0a      	ldr	r2, [pc, #40]	; (802145c <netif_add+0x19c>)
 8021432:	68fb      	ldr	r3, [r7, #12]
 8021434:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8021436:	68fb      	ldr	r3, [r7, #12]
}
 8021438:	4618      	mov	r0, r3
 802143a:	3718      	adds	r7, #24
 802143c:	46bd      	mov	sp, r7
 802143e:	bd80      	pop	{r7, pc}
 8021440:	0802b584 	.word	0x0802b584
 8021444:	0802b67c 	.word	0x0802b67c
 8021448:	0802b61c 	.word	0x0802b61c
 802144c:	0802b698 	.word	0x0802b698
 8021450:	0802cf60 	.word	0x0802cf60
 8021454:	0802196b 	.word	0x0802196b
 8021458:	20015cac 	.word	0x20015cac
 802145c:	20015ca4 	.word	0x20015ca4
 8021460:	0802b6bc 	.word	0x0802b6bc
 8021464:	0802b6d0 	.word	0x0802b6d0

08021468 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8021468:	b580      	push	{r7, lr}
 802146a:	b082      	sub	sp, #8
 802146c:	af00      	add	r7, sp, #0
 802146e:	6078      	str	r0, [r7, #4]
 8021470:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8021472:	6839      	ldr	r1, [r7, #0]
 8021474:	6878      	ldr	r0, [r7, #4]
 8021476:	f001 fe13 	bl	80230a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 802147a:	bf00      	nop
 802147c:	3708      	adds	r7, #8
 802147e:	46bd      	mov	sp, r7
 8021480:	bd80      	pop	{r7, pc}
	...

08021484 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8021484:	b580      	push	{r7, lr}
 8021486:	b086      	sub	sp, #24
 8021488:	af00      	add	r7, sp, #0
 802148a:	60f8      	str	r0, [r7, #12]
 802148c:	60b9      	str	r1, [r7, #8]
 802148e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8021490:	68bb      	ldr	r3, [r7, #8]
 8021492:	2b00      	cmp	r3, #0
 8021494:	d106      	bne.n	80214a4 <netif_do_set_ipaddr+0x20>
 8021496:	4b1d      	ldr	r3, [pc, #116]	; (802150c <netif_do_set_ipaddr+0x88>)
 8021498:	f240 12cb 	movw	r2, #459	; 0x1cb
 802149c:	491c      	ldr	r1, [pc, #112]	; (8021510 <netif_do_set_ipaddr+0x8c>)
 802149e:	481d      	ldr	r0, [pc, #116]	; (8021514 <netif_do_set_ipaddr+0x90>)
 80214a0:	f004 fadc 	bl	8025a5c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80214a4:	687b      	ldr	r3, [r7, #4]
 80214a6:	2b00      	cmp	r3, #0
 80214a8:	d106      	bne.n	80214b8 <netif_do_set_ipaddr+0x34>
 80214aa:	4b18      	ldr	r3, [pc, #96]	; (802150c <netif_do_set_ipaddr+0x88>)
 80214ac:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80214b0:	4917      	ldr	r1, [pc, #92]	; (8021510 <netif_do_set_ipaddr+0x8c>)
 80214b2:	4818      	ldr	r0, [pc, #96]	; (8021514 <netif_do_set_ipaddr+0x90>)
 80214b4:	f004 fad2 	bl	8025a5c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80214b8:	68bb      	ldr	r3, [r7, #8]
 80214ba:	681a      	ldr	r2, [r3, #0]
 80214bc:	68fb      	ldr	r3, [r7, #12]
 80214be:	3304      	adds	r3, #4
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	429a      	cmp	r2, r3
 80214c4:	d01c      	beq.n	8021500 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80214c6:	68bb      	ldr	r3, [r7, #8]
 80214c8:	681b      	ldr	r3, [r3, #0]
 80214ca:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80214cc:	68fb      	ldr	r3, [r7, #12]
 80214ce:	3304      	adds	r3, #4
 80214d0:	681a      	ldr	r2, [r3, #0]
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80214d6:	f107 0314 	add.w	r3, r7, #20
 80214da:	4619      	mov	r1, r3
 80214dc:	6878      	ldr	r0, [r7, #4]
 80214de:	f7ff ffc3 	bl	8021468 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80214e2:	68bb      	ldr	r3, [r7, #8]
 80214e4:	2b00      	cmp	r3, #0
 80214e6:	d002      	beq.n	80214ee <netif_do_set_ipaddr+0x6a>
 80214e8:	68bb      	ldr	r3, [r7, #8]
 80214ea:	681b      	ldr	r3, [r3, #0]
 80214ec:	e000      	b.n	80214f0 <netif_do_set_ipaddr+0x6c>
 80214ee:	2300      	movs	r3, #0
 80214f0:	68fa      	ldr	r2, [r7, #12]
 80214f2:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80214f4:	2101      	movs	r1, #1
 80214f6:	68f8      	ldr	r0, [r7, #12]
 80214f8:	f000 f8d2 	bl	80216a0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80214fc:	2301      	movs	r3, #1
 80214fe:	e000      	b.n	8021502 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8021500:	2300      	movs	r3, #0
}
 8021502:	4618      	mov	r0, r3
 8021504:	3718      	adds	r7, #24
 8021506:	46bd      	mov	sp, r7
 8021508:	bd80      	pop	{r7, pc}
 802150a:	bf00      	nop
 802150c:	0802b584 	.word	0x0802b584
 8021510:	0802b700 	.word	0x0802b700
 8021514:	0802b61c 	.word	0x0802b61c

08021518 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8021518:	b480      	push	{r7}
 802151a:	b085      	sub	sp, #20
 802151c:	af00      	add	r7, sp, #0
 802151e:	60f8      	str	r0, [r7, #12]
 8021520:	60b9      	str	r1, [r7, #8]
 8021522:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8021524:	68bb      	ldr	r3, [r7, #8]
 8021526:	681a      	ldr	r2, [r3, #0]
 8021528:	68fb      	ldr	r3, [r7, #12]
 802152a:	3308      	adds	r3, #8
 802152c:	681b      	ldr	r3, [r3, #0]
 802152e:	429a      	cmp	r2, r3
 8021530:	d00a      	beq.n	8021548 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8021532:	68bb      	ldr	r3, [r7, #8]
 8021534:	2b00      	cmp	r3, #0
 8021536:	d002      	beq.n	802153e <netif_do_set_netmask+0x26>
 8021538:	68bb      	ldr	r3, [r7, #8]
 802153a:	681b      	ldr	r3, [r3, #0]
 802153c:	e000      	b.n	8021540 <netif_do_set_netmask+0x28>
 802153e:	2300      	movs	r3, #0
 8021540:	68fa      	ldr	r2, [r7, #12]
 8021542:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8021544:	2301      	movs	r3, #1
 8021546:	e000      	b.n	802154a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8021548:	2300      	movs	r3, #0
}
 802154a:	4618      	mov	r0, r3
 802154c:	3714      	adds	r7, #20
 802154e:	46bd      	mov	sp, r7
 8021550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021554:	4770      	bx	lr

08021556 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8021556:	b480      	push	{r7}
 8021558:	b085      	sub	sp, #20
 802155a:	af00      	add	r7, sp, #0
 802155c:	60f8      	str	r0, [r7, #12]
 802155e:	60b9      	str	r1, [r7, #8]
 8021560:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8021562:	68bb      	ldr	r3, [r7, #8]
 8021564:	681a      	ldr	r2, [r3, #0]
 8021566:	68fb      	ldr	r3, [r7, #12]
 8021568:	330c      	adds	r3, #12
 802156a:	681b      	ldr	r3, [r3, #0]
 802156c:	429a      	cmp	r2, r3
 802156e:	d00a      	beq.n	8021586 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8021570:	68bb      	ldr	r3, [r7, #8]
 8021572:	2b00      	cmp	r3, #0
 8021574:	d002      	beq.n	802157c <netif_do_set_gw+0x26>
 8021576:	68bb      	ldr	r3, [r7, #8]
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	e000      	b.n	802157e <netif_do_set_gw+0x28>
 802157c:	2300      	movs	r3, #0
 802157e:	68fa      	ldr	r2, [r7, #12]
 8021580:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8021582:	2301      	movs	r3, #1
 8021584:	e000      	b.n	8021588 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8021586:	2300      	movs	r3, #0
}
 8021588:	4618      	mov	r0, r3
 802158a:	3714      	adds	r7, #20
 802158c:	46bd      	mov	sp, r7
 802158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021592:	4770      	bx	lr

08021594 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8021594:	b580      	push	{r7, lr}
 8021596:	b088      	sub	sp, #32
 8021598:	af00      	add	r7, sp, #0
 802159a:	60f8      	str	r0, [r7, #12]
 802159c:	60b9      	str	r1, [r7, #8]
 802159e:	607a      	str	r2, [r7, #4]
 80215a0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80215a2:	2300      	movs	r3, #0
 80215a4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80215a6:	2300      	movs	r3, #0
 80215a8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80215aa:	68bb      	ldr	r3, [r7, #8]
 80215ac:	2b00      	cmp	r3, #0
 80215ae:	d101      	bne.n	80215b4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80215b0:	4b1c      	ldr	r3, [pc, #112]	; (8021624 <netif_set_addr+0x90>)
 80215b2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80215b4:	687b      	ldr	r3, [r7, #4]
 80215b6:	2b00      	cmp	r3, #0
 80215b8:	d101      	bne.n	80215be <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80215ba:	4b1a      	ldr	r3, [pc, #104]	; (8021624 <netif_set_addr+0x90>)
 80215bc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80215be:	683b      	ldr	r3, [r7, #0]
 80215c0:	2b00      	cmp	r3, #0
 80215c2:	d101      	bne.n	80215c8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80215c4:	4b17      	ldr	r3, [pc, #92]	; (8021624 <netif_set_addr+0x90>)
 80215c6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80215c8:	68bb      	ldr	r3, [r7, #8]
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d003      	beq.n	80215d6 <netif_set_addr+0x42>
 80215ce:	68bb      	ldr	r3, [r7, #8]
 80215d0:	681b      	ldr	r3, [r3, #0]
 80215d2:	2b00      	cmp	r3, #0
 80215d4:	d101      	bne.n	80215da <netif_set_addr+0x46>
 80215d6:	2301      	movs	r3, #1
 80215d8:	e000      	b.n	80215dc <netif_set_addr+0x48>
 80215da:	2300      	movs	r3, #0
 80215dc:	617b      	str	r3, [r7, #20]
  if (remove) {
 80215de:	697b      	ldr	r3, [r7, #20]
 80215e0:	2b00      	cmp	r3, #0
 80215e2:	d006      	beq.n	80215f2 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80215e4:	f107 0310 	add.w	r3, r7, #16
 80215e8:	461a      	mov	r2, r3
 80215ea:	68b9      	ldr	r1, [r7, #8]
 80215ec:	68f8      	ldr	r0, [r7, #12]
 80215ee:	f7ff ff49 	bl	8021484 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80215f2:	69fa      	ldr	r2, [r7, #28]
 80215f4:	6879      	ldr	r1, [r7, #4]
 80215f6:	68f8      	ldr	r0, [r7, #12]
 80215f8:	f7ff ff8e 	bl	8021518 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80215fc:	69ba      	ldr	r2, [r7, #24]
 80215fe:	6839      	ldr	r1, [r7, #0]
 8021600:	68f8      	ldr	r0, [r7, #12]
 8021602:	f7ff ffa8 	bl	8021556 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8021606:	697b      	ldr	r3, [r7, #20]
 8021608:	2b00      	cmp	r3, #0
 802160a:	d106      	bne.n	802161a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 802160c:	f107 0310 	add.w	r3, r7, #16
 8021610:	461a      	mov	r2, r3
 8021612:	68b9      	ldr	r1, [r7, #8]
 8021614:	68f8      	ldr	r0, [r7, #12]
 8021616:	f7ff ff35 	bl	8021484 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 802161a:	bf00      	nop
 802161c:	3720      	adds	r7, #32
 802161e:	46bd      	mov	sp, r7
 8021620:	bd80      	pop	{r7, pc}
 8021622:	bf00      	nop
 8021624:	0802cf60 	.word	0x0802cf60

08021628 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8021628:	b480      	push	{r7}
 802162a:	b083      	sub	sp, #12
 802162c:	af00      	add	r7, sp, #0
 802162e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8021630:	4a04      	ldr	r2, [pc, #16]	; (8021644 <netif_set_default+0x1c>)
 8021632:	687b      	ldr	r3, [r7, #4]
 8021634:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8021636:	bf00      	nop
 8021638:	370c      	adds	r7, #12
 802163a:	46bd      	mov	sp, r7
 802163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021640:	4770      	bx	lr
 8021642:	bf00      	nop
 8021644:	20015ca8 	.word	0x20015ca8

08021648 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8021648:	b580      	push	{r7, lr}
 802164a:	b082      	sub	sp, #8
 802164c:	af00      	add	r7, sp, #0
 802164e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8021650:	687b      	ldr	r3, [r7, #4]
 8021652:	2b00      	cmp	r3, #0
 8021654:	d107      	bne.n	8021666 <netif_set_up+0x1e>
 8021656:	4b0f      	ldr	r3, [pc, #60]	; (8021694 <netif_set_up+0x4c>)
 8021658:	f44f 7254 	mov.w	r2, #848	; 0x350
 802165c:	490e      	ldr	r1, [pc, #56]	; (8021698 <netif_set_up+0x50>)
 802165e:	480f      	ldr	r0, [pc, #60]	; (802169c <netif_set_up+0x54>)
 8021660:	f004 f9fc 	bl	8025a5c <iprintf>
 8021664:	e013      	b.n	802168e <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8021666:	687b      	ldr	r3, [r7, #4]
 8021668:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802166c:	f003 0301 	and.w	r3, r3, #1
 8021670:	2b00      	cmp	r3, #0
 8021672:	d10c      	bne.n	802168e <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802167a:	f043 0301 	orr.w	r3, r3, #1
 802167e:	b2da      	uxtb	r2, r3
 8021680:	687b      	ldr	r3, [r7, #4]
 8021682:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8021686:	2103      	movs	r1, #3
 8021688:	6878      	ldr	r0, [r7, #4]
 802168a:	f000 f809 	bl	80216a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 802168e:	3708      	adds	r7, #8
 8021690:	46bd      	mov	sp, r7
 8021692:	bd80      	pop	{r7, pc}
 8021694:	0802b584 	.word	0x0802b584
 8021698:	0802b770 	.word	0x0802b770
 802169c:	0802b61c 	.word	0x0802b61c

080216a0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80216a0:	b580      	push	{r7, lr}
 80216a2:	b082      	sub	sp, #8
 80216a4:	af00      	add	r7, sp, #0
 80216a6:	6078      	str	r0, [r7, #4]
 80216a8:	460b      	mov	r3, r1
 80216aa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	2b00      	cmp	r3, #0
 80216b0:	d106      	bne.n	80216c0 <netif_issue_reports+0x20>
 80216b2:	4b18      	ldr	r3, [pc, #96]	; (8021714 <netif_issue_reports+0x74>)
 80216b4:	f240 326d 	movw	r2, #877	; 0x36d
 80216b8:	4917      	ldr	r1, [pc, #92]	; (8021718 <netif_issue_reports+0x78>)
 80216ba:	4818      	ldr	r0, [pc, #96]	; (802171c <netif_issue_reports+0x7c>)
 80216bc:	f004 f9ce 	bl	8025a5c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80216c6:	f003 0304 	and.w	r3, r3, #4
 80216ca:	2b00      	cmp	r3, #0
 80216cc:	d01e      	beq.n	802170c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80216ce:	687b      	ldr	r3, [r7, #4]
 80216d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80216d4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80216d8:	2b00      	cmp	r3, #0
 80216da:	d017      	beq.n	802170c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80216dc:	78fb      	ldrb	r3, [r7, #3]
 80216de:	f003 0301 	and.w	r3, r3, #1
 80216e2:	2b00      	cmp	r3, #0
 80216e4:	d013      	beq.n	802170e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80216e6:	687b      	ldr	r3, [r7, #4]
 80216e8:	3304      	adds	r3, #4
 80216ea:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	d00e      	beq.n	802170e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80216f6:	f003 0308 	and.w	r3, r3, #8
 80216fa:	2b00      	cmp	r3, #0
 80216fc:	d007      	beq.n	802170e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80216fe:	687b      	ldr	r3, [r7, #4]
 8021700:	3304      	adds	r3, #4
 8021702:	4619      	mov	r1, r3
 8021704:	6878      	ldr	r0, [r7, #4]
 8021706:	f002 fc35 	bl	8023f74 <etharp_request>
 802170a:	e000      	b.n	802170e <netif_issue_reports+0x6e>
    return;
 802170c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 802170e:	3708      	adds	r7, #8
 8021710:	46bd      	mov	sp, r7
 8021712:	bd80      	pop	{r7, pc}
 8021714:	0802b584 	.word	0x0802b584
 8021718:	0802b78c 	.word	0x0802b78c
 802171c:	0802b61c 	.word	0x0802b61c

08021720 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8021720:	b580      	push	{r7, lr}
 8021722:	b082      	sub	sp, #8
 8021724:	af00      	add	r7, sp, #0
 8021726:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8021728:	687b      	ldr	r3, [r7, #4]
 802172a:	2b00      	cmp	r3, #0
 802172c:	d107      	bne.n	802173e <netif_set_down+0x1e>
 802172e:	4b12      	ldr	r3, [pc, #72]	; (8021778 <netif_set_down+0x58>)
 8021730:	f240 329b 	movw	r2, #923	; 0x39b
 8021734:	4911      	ldr	r1, [pc, #68]	; (802177c <netif_set_down+0x5c>)
 8021736:	4812      	ldr	r0, [pc, #72]	; (8021780 <netif_set_down+0x60>)
 8021738:	f004 f990 	bl	8025a5c <iprintf>
 802173c:	e019      	b.n	8021772 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 802173e:	687b      	ldr	r3, [r7, #4]
 8021740:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021744:	f003 0301 	and.w	r3, r3, #1
 8021748:	2b00      	cmp	r3, #0
 802174a:	d012      	beq.n	8021772 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021752:	f023 0301 	bic.w	r3, r3, #1
 8021756:	b2da      	uxtb	r2, r3
 8021758:	687b      	ldr	r3, [r7, #4]
 802175a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021764:	f003 0308 	and.w	r3, r3, #8
 8021768:	2b00      	cmp	r3, #0
 802176a:	d002      	beq.n	8021772 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 802176c:	6878      	ldr	r0, [r7, #4]
 802176e:	f001 ffbf 	bl	80236f0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8021772:	3708      	adds	r7, #8
 8021774:	46bd      	mov	sp, r7
 8021776:	bd80      	pop	{r7, pc}
 8021778:	0802b584 	.word	0x0802b584
 802177c:	0802b7b0 	.word	0x0802b7b0
 8021780:	0802b61c 	.word	0x0802b61c

08021784 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8021784:	b580      	push	{r7, lr}
 8021786:	b082      	sub	sp, #8
 8021788:	af00      	add	r7, sp, #0
 802178a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 802178c:	687b      	ldr	r3, [r7, #4]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d107      	bne.n	80217a2 <netif_set_link_up+0x1e>
 8021792:	4b13      	ldr	r3, [pc, #76]	; (80217e0 <netif_set_link_up+0x5c>)
 8021794:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8021798:	4912      	ldr	r1, [pc, #72]	; (80217e4 <netif_set_link_up+0x60>)
 802179a:	4813      	ldr	r0, [pc, #76]	; (80217e8 <netif_set_link_up+0x64>)
 802179c:	f004 f95e 	bl	8025a5c <iprintf>
 80217a0:	e01b      	b.n	80217da <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80217a8:	f003 0304 	and.w	r3, r3, #4
 80217ac:	2b00      	cmp	r3, #0
 80217ae:	d114      	bne.n	80217da <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80217b0:	687b      	ldr	r3, [r7, #4]
 80217b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80217b6:	f043 0304 	orr.w	r3, r3, #4
 80217ba:	b2da      	uxtb	r2, r3
 80217bc:	687b      	ldr	r3, [r7, #4]
 80217be:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80217c2:	2103      	movs	r1, #3
 80217c4:	6878      	ldr	r0, [r7, #4]
 80217c6:	f7ff ff6b 	bl	80216a0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80217ca:	687b      	ldr	r3, [r7, #4]
 80217cc:	69db      	ldr	r3, [r3, #28]
 80217ce:	2b00      	cmp	r3, #0
 80217d0:	d003      	beq.n	80217da <netif_set_link_up+0x56>
 80217d2:	687b      	ldr	r3, [r7, #4]
 80217d4:	69db      	ldr	r3, [r3, #28]
 80217d6:	6878      	ldr	r0, [r7, #4]
 80217d8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80217da:	3708      	adds	r7, #8
 80217dc:	46bd      	mov	sp, r7
 80217de:	bd80      	pop	{r7, pc}
 80217e0:	0802b584 	.word	0x0802b584
 80217e4:	0802b7d0 	.word	0x0802b7d0
 80217e8:	0802b61c 	.word	0x0802b61c

080217ec <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80217ec:	b580      	push	{r7, lr}
 80217ee:	b082      	sub	sp, #8
 80217f0:	af00      	add	r7, sp, #0
 80217f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80217f4:	687b      	ldr	r3, [r7, #4]
 80217f6:	2b00      	cmp	r3, #0
 80217f8:	d107      	bne.n	802180a <netif_set_link_down+0x1e>
 80217fa:	4b11      	ldr	r3, [pc, #68]	; (8021840 <netif_set_link_down+0x54>)
 80217fc:	f240 4206 	movw	r2, #1030	; 0x406
 8021800:	4910      	ldr	r1, [pc, #64]	; (8021844 <netif_set_link_down+0x58>)
 8021802:	4811      	ldr	r0, [pc, #68]	; (8021848 <netif_set_link_down+0x5c>)
 8021804:	f004 f92a 	bl	8025a5c <iprintf>
 8021808:	e017      	b.n	802183a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 802180a:	687b      	ldr	r3, [r7, #4]
 802180c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021810:	f003 0304 	and.w	r3, r3, #4
 8021814:	2b00      	cmp	r3, #0
 8021816:	d010      	beq.n	802183a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8021818:	687b      	ldr	r3, [r7, #4]
 802181a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802181e:	f023 0304 	bic.w	r3, r3, #4
 8021822:	b2da      	uxtb	r2, r3
 8021824:	687b      	ldr	r3, [r7, #4]
 8021826:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 802182a:	687b      	ldr	r3, [r7, #4]
 802182c:	69db      	ldr	r3, [r3, #28]
 802182e:	2b00      	cmp	r3, #0
 8021830:	d003      	beq.n	802183a <netif_set_link_down+0x4e>
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	69db      	ldr	r3, [r3, #28]
 8021836:	6878      	ldr	r0, [r7, #4]
 8021838:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 802183a:	3708      	adds	r7, #8
 802183c:	46bd      	mov	sp, r7
 802183e:	bd80      	pop	{r7, pc}
 8021840:	0802b584 	.word	0x0802b584
 8021844:	0802b7f4 	.word	0x0802b7f4
 8021848:	0802b61c 	.word	0x0802b61c

0802184c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 802184c:	b480      	push	{r7}
 802184e:	b083      	sub	sp, #12
 8021850:	af00      	add	r7, sp, #0
 8021852:	6078      	str	r0, [r7, #4]
 8021854:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8021856:	687b      	ldr	r3, [r7, #4]
 8021858:	2b00      	cmp	r3, #0
 802185a:	d002      	beq.n	8021862 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 802185c:	687b      	ldr	r3, [r7, #4]
 802185e:	683a      	ldr	r2, [r7, #0]
 8021860:	61da      	str	r2, [r3, #28]
  }
}
 8021862:	bf00      	nop
 8021864:	370c      	adds	r7, #12
 8021866:	46bd      	mov	sp, r7
 8021868:	f85d 7b04 	ldr.w	r7, [sp], #4
 802186c:	4770      	bx	lr
	...

08021870 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8021870:	b580      	push	{r7, lr}
 8021872:	b086      	sub	sp, #24
 8021874:	af00      	add	r7, sp, #0
 8021876:	6078      	str	r0, [r7, #4]
 8021878:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	2b00      	cmp	r3, #0
 802187e:	d106      	bne.n	802188e <netif_loop_output+0x1e>
 8021880:	4b2d      	ldr	r3, [pc, #180]	; (8021938 <netif_loop_output+0xc8>)
 8021882:	f240 424b 	movw	r2, #1099	; 0x44b
 8021886:	492d      	ldr	r1, [pc, #180]	; (802193c <netif_loop_output+0xcc>)
 8021888:	482d      	ldr	r0, [pc, #180]	; (8021940 <netif_loop_output+0xd0>)
 802188a:	f004 f8e7 	bl	8025a5c <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 802188e:	683b      	ldr	r3, [r7, #0]
 8021890:	2b00      	cmp	r3, #0
 8021892:	d106      	bne.n	80218a2 <netif_loop_output+0x32>
 8021894:	4b28      	ldr	r3, [pc, #160]	; (8021938 <netif_loop_output+0xc8>)
 8021896:	f240 424c 	movw	r2, #1100	; 0x44c
 802189a:	492a      	ldr	r1, [pc, #168]	; (8021944 <netif_loop_output+0xd4>)
 802189c:	4828      	ldr	r0, [pc, #160]	; (8021940 <netif_loop_output+0xd0>)
 802189e:	f004 f8dd 	bl	8025a5c <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80218a2:	683b      	ldr	r3, [r7, #0]
 80218a4:	891b      	ldrh	r3, [r3, #8]
 80218a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80218aa:	4619      	mov	r1, r3
 80218ac:	200e      	movs	r0, #14
 80218ae:	f000 f8bb 	bl	8021a28 <pbuf_alloc>
 80218b2:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 80218b4:	693b      	ldr	r3, [r7, #16]
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d102      	bne.n	80218c0 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 80218ba:	f04f 33ff 	mov.w	r3, #4294967295
 80218be:	e037      	b.n	8021930 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 80218c0:	6839      	ldr	r1, [r7, #0]
 80218c2:	6938      	ldr	r0, [r7, #16]
 80218c4:	f000 fcba 	bl	802223c <pbuf_copy>
 80218c8:	4603      	mov	r3, r0
 80218ca:	73fb      	strb	r3, [r7, #15]
 80218cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80218d0:	2b00      	cmp	r3, #0
 80218d2:	d005      	beq.n	80218e0 <netif_loop_output+0x70>
    pbuf_free(r);
 80218d4:	6938      	ldr	r0, [r7, #16]
 80218d6:	f000 fb89 	bl	8021fec <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 80218da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80218de:	e027      	b.n	8021930 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 80218e0:	693b      	ldr	r3, [r7, #16]
 80218e2:	617b      	str	r3, [r7, #20]
 80218e4:	e002      	b.n	80218ec <netif_loop_output+0x7c>
 80218e6:	697b      	ldr	r3, [r7, #20]
 80218e8:	681b      	ldr	r3, [r3, #0]
 80218ea:	617b      	str	r3, [r7, #20]
 80218ec:	697b      	ldr	r3, [r7, #20]
 80218ee:	681b      	ldr	r3, [r3, #0]
 80218f0:	2b00      	cmp	r3, #0
 80218f2:	d1f8      	bne.n	80218e6 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 80218f4:	687b      	ldr	r3, [r7, #4]
 80218f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218f8:	2b00      	cmp	r3, #0
 80218fa:	d012      	beq.n	8021922 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 80218fc:	687b      	ldr	r3, [r7, #4]
 80218fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021900:	2b00      	cmp	r3, #0
 8021902:	d106      	bne.n	8021912 <netif_loop_output+0xa2>
 8021904:	4b0c      	ldr	r3, [pc, #48]	; (8021938 <netif_loop_output+0xc8>)
 8021906:	f240 4277 	movw	r2, #1143	; 0x477
 802190a:	490f      	ldr	r1, [pc, #60]	; (8021948 <netif_loop_output+0xd8>)
 802190c:	480c      	ldr	r0, [pc, #48]	; (8021940 <netif_loop_output+0xd0>)
 802190e:	f004 f8a5 	bl	8025a5c <iprintf>
    netif->loop_last->next = r;
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021916:	693a      	ldr	r2, [r7, #16]
 8021918:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 802191a:	687b      	ldr	r3, [r7, #4]
 802191c:	697a      	ldr	r2, [r7, #20]
 802191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8021920:	e005      	b.n	802192e <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 8021922:	687b      	ldr	r3, [r7, #4]
 8021924:	693a      	ldr	r2, [r7, #16]
 8021926:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8021928:	687b      	ldr	r3, [r7, #4]
 802192a:	697a      	ldr	r2, [r7, #20]
 802192c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 802192e:	2300      	movs	r3, #0
}
 8021930:	4618      	mov	r0, r3
 8021932:	3718      	adds	r7, #24
 8021934:	46bd      	mov	sp, r7
 8021936:	bd80      	pop	{r7, pc}
 8021938:	0802b584 	.word	0x0802b584
 802193c:	0802b818 	.word	0x0802b818
 8021940:	0802b61c 	.word	0x0802b61c
 8021944:	0802b83c 	.word	0x0802b83c
 8021948:	0802b85c 	.word	0x0802b85c

0802194c <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 802194c:	b580      	push	{r7, lr}
 802194e:	b084      	sub	sp, #16
 8021950:	af00      	add	r7, sp, #0
 8021952:	60f8      	str	r0, [r7, #12]
 8021954:	60b9      	str	r1, [r7, #8]
 8021956:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8021958:	68b9      	ldr	r1, [r7, #8]
 802195a:	68f8      	ldr	r0, [r7, #12]
 802195c:	f7ff ff88 	bl	8021870 <netif_loop_output>
 8021960:	4603      	mov	r3, r0
}
 8021962:	4618      	mov	r0, r3
 8021964:	3710      	adds	r7, #16
 8021966:	46bd      	mov	sp, r7
 8021968:	bd80      	pop	{r7, pc}

0802196a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 802196a:	b480      	push	{r7}
 802196c:	b085      	sub	sp, #20
 802196e:	af00      	add	r7, sp, #0
 8021970:	60f8      	str	r0, [r7, #12]
 8021972:	60b9      	str	r1, [r7, #8]
 8021974:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8021976:	f06f 030b 	mvn.w	r3, #11
}
 802197a:	4618      	mov	r0, r3
 802197c:	3714      	adds	r7, #20
 802197e:	46bd      	mov	sp, r7
 8021980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021984:	4770      	bx	lr
	...

08021988 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8021988:	b480      	push	{r7}
 802198a:	b085      	sub	sp, #20
 802198c:	af00      	add	r7, sp, #0
 802198e:	4603      	mov	r3, r0
 8021990:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8021992:	79fb      	ldrb	r3, [r7, #7]
 8021994:	2b00      	cmp	r3, #0
 8021996:	d013      	beq.n	80219c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8021998:	4b0d      	ldr	r3, [pc, #52]	; (80219d0 <netif_get_by_index+0x48>)
 802199a:	681b      	ldr	r3, [r3, #0]
 802199c:	60fb      	str	r3, [r7, #12]
 802199e:	e00c      	b.n	80219ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80219a0:	68fb      	ldr	r3, [r7, #12]
 80219a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80219a6:	3301      	adds	r3, #1
 80219a8:	b2db      	uxtb	r3, r3
 80219aa:	79fa      	ldrb	r2, [r7, #7]
 80219ac:	429a      	cmp	r2, r3
 80219ae:	d101      	bne.n	80219b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80219b0:	68fb      	ldr	r3, [r7, #12]
 80219b2:	e006      	b.n	80219c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80219b4:	68fb      	ldr	r3, [r7, #12]
 80219b6:	681b      	ldr	r3, [r3, #0]
 80219b8:	60fb      	str	r3, [r7, #12]
 80219ba:	68fb      	ldr	r3, [r7, #12]
 80219bc:	2b00      	cmp	r3, #0
 80219be:	d1ef      	bne.n	80219a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80219c0:	2300      	movs	r3, #0
}
 80219c2:	4618      	mov	r0, r3
 80219c4:	3714      	adds	r7, #20
 80219c6:	46bd      	mov	sp, r7
 80219c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219cc:	4770      	bx	lr
 80219ce:	bf00      	nop
 80219d0:	20015ca4 	.word	0x20015ca4

080219d4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80219d4:	b480      	push	{r7}
 80219d6:	b085      	sub	sp, #20
 80219d8:	af00      	add	r7, sp, #0
 80219da:	60f8      	str	r0, [r7, #12]
 80219dc:	60b9      	str	r1, [r7, #8]
 80219de:	4611      	mov	r1, r2
 80219e0:	461a      	mov	r2, r3
 80219e2:	460b      	mov	r3, r1
 80219e4:	80fb      	strh	r3, [r7, #6]
 80219e6:	4613      	mov	r3, r2
 80219e8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80219ea:	68fb      	ldr	r3, [r7, #12]
 80219ec:	2200      	movs	r2, #0
 80219ee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	68ba      	ldr	r2, [r7, #8]
 80219f4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80219f6:	68fb      	ldr	r3, [r7, #12]
 80219f8:	88fa      	ldrh	r2, [r7, #6]
 80219fa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80219fc:	68fb      	ldr	r3, [r7, #12]
 80219fe:	88ba      	ldrh	r2, [r7, #4]
 8021a00:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8021a02:	8b3b      	ldrh	r3, [r7, #24]
 8021a04:	b2da      	uxtb	r2, r3
 8021a06:	68fb      	ldr	r3, [r7, #12]
 8021a08:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8021a0a:	68fb      	ldr	r3, [r7, #12]
 8021a0c:	7f3a      	ldrb	r2, [r7, #28]
 8021a0e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8021a10:	68fb      	ldr	r3, [r7, #12]
 8021a12:	2201      	movs	r2, #1
 8021a14:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8021a16:	68fb      	ldr	r3, [r7, #12]
 8021a18:	2200      	movs	r2, #0
 8021a1a:	73da      	strb	r2, [r3, #15]
}
 8021a1c:	bf00      	nop
 8021a1e:	3714      	adds	r7, #20
 8021a20:	46bd      	mov	sp, r7
 8021a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a26:	4770      	bx	lr

08021a28 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8021a28:	b580      	push	{r7, lr}
 8021a2a:	b08c      	sub	sp, #48	; 0x30
 8021a2c:	af02      	add	r7, sp, #8
 8021a2e:	4603      	mov	r3, r0
 8021a30:	71fb      	strb	r3, [r7, #7]
 8021a32:	460b      	mov	r3, r1
 8021a34:	80bb      	strh	r3, [r7, #4]
 8021a36:	4613      	mov	r3, r2
 8021a38:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8021a3a:	79fb      	ldrb	r3, [r7, #7]
 8021a3c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8021a3e:	887b      	ldrh	r3, [r7, #2]
 8021a40:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8021a44:	d07d      	beq.n	8021b42 <pbuf_alloc+0x11a>
 8021a46:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8021a4a:	f300 80c6 	bgt.w	8021bda <pbuf_alloc+0x1b2>
 8021a4e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8021a52:	d010      	beq.n	8021a76 <pbuf_alloc+0x4e>
 8021a54:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8021a58:	f300 80bf 	bgt.w	8021bda <pbuf_alloc+0x1b2>
 8021a5c:	2b01      	cmp	r3, #1
 8021a5e:	d002      	beq.n	8021a66 <pbuf_alloc+0x3e>
 8021a60:	2b41      	cmp	r3, #65	; 0x41
 8021a62:	f040 80ba 	bne.w	8021bda <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8021a66:	887a      	ldrh	r2, [r7, #2]
 8021a68:	88bb      	ldrh	r3, [r7, #4]
 8021a6a:	4619      	mov	r1, r3
 8021a6c:	2000      	movs	r0, #0
 8021a6e:	f000 f8cf 	bl	8021c10 <pbuf_alloc_reference>
 8021a72:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8021a74:	e0bb      	b.n	8021bee <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8021a76:	2300      	movs	r3, #0
 8021a78:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8021a7a:	2300      	movs	r3, #0
 8021a7c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8021a7e:	88bb      	ldrh	r3, [r7, #4]
 8021a80:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8021a82:	2005      	movs	r0, #5
 8021a84:	f7ff fb32 	bl	80210ec <memp_malloc>
 8021a88:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8021a8a:	693b      	ldr	r3, [r7, #16]
 8021a8c:	2b00      	cmp	r3, #0
 8021a8e:	d107      	bne.n	8021aa0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8021a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021a92:	2b00      	cmp	r3, #0
 8021a94:	d002      	beq.n	8021a9c <pbuf_alloc+0x74>
            pbuf_free(p);
 8021a96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021a98:	f000 faa8 	bl	8021fec <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8021a9c:	2300      	movs	r3, #0
 8021a9e:	e0a7      	b.n	8021bf0 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8021aa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021aa2:	3303      	adds	r3, #3
 8021aa4:	b29b      	uxth	r3, r3
 8021aa6:	f023 0303 	bic.w	r3, r3, #3
 8021aaa:	b29b      	uxth	r3, r3
 8021aac:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8021ab0:	b29b      	uxth	r3, r3
 8021ab2:	8b7a      	ldrh	r2, [r7, #26]
 8021ab4:	4293      	cmp	r3, r2
 8021ab6:	bf28      	it	cs
 8021ab8:	4613      	movcs	r3, r2
 8021aba:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8021abc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021abe:	3310      	adds	r3, #16
 8021ac0:	693a      	ldr	r2, [r7, #16]
 8021ac2:	4413      	add	r3, r2
 8021ac4:	3303      	adds	r3, #3
 8021ac6:	f023 0303 	bic.w	r3, r3, #3
 8021aca:	4618      	mov	r0, r3
 8021acc:	89f9      	ldrh	r1, [r7, #14]
 8021ace:	8b7a      	ldrh	r2, [r7, #26]
 8021ad0:	2300      	movs	r3, #0
 8021ad2:	9301      	str	r3, [sp, #4]
 8021ad4:	887b      	ldrh	r3, [r7, #2]
 8021ad6:	9300      	str	r3, [sp, #0]
 8021ad8:	460b      	mov	r3, r1
 8021ada:	4601      	mov	r1, r0
 8021adc:	6938      	ldr	r0, [r7, #16]
 8021ade:	f7ff ff79 	bl	80219d4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8021ae2:	693b      	ldr	r3, [r7, #16]
 8021ae4:	685b      	ldr	r3, [r3, #4]
 8021ae6:	f003 0303 	and.w	r3, r3, #3
 8021aea:	2b00      	cmp	r3, #0
 8021aec:	d006      	beq.n	8021afc <pbuf_alloc+0xd4>
 8021aee:	4b42      	ldr	r3, [pc, #264]	; (8021bf8 <pbuf_alloc+0x1d0>)
 8021af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8021af4:	4941      	ldr	r1, [pc, #260]	; (8021bfc <pbuf_alloc+0x1d4>)
 8021af6:	4842      	ldr	r0, [pc, #264]	; (8021c00 <pbuf_alloc+0x1d8>)
 8021af8:	f003 ffb0 	bl	8025a5c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8021afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021afe:	3303      	adds	r3, #3
 8021b00:	f023 0303 	bic.w	r3, r3, #3
 8021b04:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8021b08:	d106      	bne.n	8021b18 <pbuf_alloc+0xf0>
 8021b0a:	4b3b      	ldr	r3, [pc, #236]	; (8021bf8 <pbuf_alloc+0x1d0>)
 8021b0c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8021b10:	493c      	ldr	r1, [pc, #240]	; (8021c04 <pbuf_alloc+0x1dc>)
 8021b12:	483b      	ldr	r0, [pc, #236]	; (8021c00 <pbuf_alloc+0x1d8>)
 8021b14:	f003 ffa2 	bl	8025a5c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8021b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d102      	bne.n	8021b24 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8021b1e:	693b      	ldr	r3, [r7, #16]
 8021b20:	627b      	str	r3, [r7, #36]	; 0x24
 8021b22:	e002      	b.n	8021b2a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8021b24:	69fb      	ldr	r3, [r7, #28]
 8021b26:	693a      	ldr	r2, [r7, #16]
 8021b28:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8021b2a:	693b      	ldr	r3, [r7, #16]
 8021b2c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8021b2e:	8b7a      	ldrh	r2, [r7, #26]
 8021b30:	89fb      	ldrh	r3, [r7, #14]
 8021b32:	1ad3      	subs	r3, r2, r3
 8021b34:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8021b36:	2300      	movs	r3, #0
 8021b38:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8021b3a:	8b7b      	ldrh	r3, [r7, #26]
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	d1a0      	bne.n	8021a82 <pbuf_alloc+0x5a>
      break;
 8021b40:	e055      	b.n	8021bee <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8021b42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b44:	3303      	adds	r3, #3
 8021b46:	b29b      	uxth	r3, r3
 8021b48:	f023 0303 	bic.w	r3, r3, #3
 8021b4c:	b29a      	uxth	r2, r3
 8021b4e:	88bb      	ldrh	r3, [r7, #4]
 8021b50:	3303      	adds	r3, #3
 8021b52:	b29b      	uxth	r3, r3
 8021b54:	f023 0303 	bic.w	r3, r3, #3
 8021b58:	b29b      	uxth	r3, r3
 8021b5a:	4413      	add	r3, r2
 8021b5c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8021b5e:	8b3b      	ldrh	r3, [r7, #24]
 8021b60:	3310      	adds	r3, #16
 8021b62:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8021b64:	8b3a      	ldrh	r2, [r7, #24]
 8021b66:	88bb      	ldrh	r3, [r7, #4]
 8021b68:	3303      	adds	r3, #3
 8021b6a:	f023 0303 	bic.w	r3, r3, #3
 8021b6e:	429a      	cmp	r2, r3
 8021b70:	d306      	bcc.n	8021b80 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8021b72:	8afa      	ldrh	r2, [r7, #22]
 8021b74:	88bb      	ldrh	r3, [r7, #4]
 8021b76:	3303      	adds	r3, #3
 8021b78:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8021b7c:	429a      	cmp	r2, r3
 8021b7e:	d201      	bcs.n	8021b84 <pbuf_alloc+0x15c>
        return NULL;
 8021b80:	2300      	movs	r3, #0
 8021b82:	e035      	b.n	8021bf0 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8021b84:	8afb      	ldrh	r3, [r7, #22]
 8021b86:	4618      	mov	r0, r3
 8021b88:	f7ff f920 	bl	8020dcc <mem_malloc>
 8021b8c:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8021b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b90:	2b00      	cmp	r3, #0
 8021b92:	d101      	bne.n	8021b98 <pbuf_alloc+0x170>
        return NULL;
 8021b94:	2300      	movs	r3, #0
 8021b96:	e02b      	b.n	8021bf0 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8021b98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021b9a:	3310      	adds	r3, #16
 8021b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021b9e:	4413      	add	r3, r2
 8021ba0:	3303      	adds	r3, #3
 8021ba2:	f023 0303 	bic.w	r3, r3, #3
 8021ba6:	4618      	mov	r0, r3
 8021ba8:	88b9      	ldrh	r1, [r7, #4]
 8021baa:	88ba      	ldrh	r2, [r7, #4]
 8021bac:	2300      	movs	r3, #0
 8021bae:	9301      	str	r3, [sp, #4]
 8021bb0:	887b      	ldrh	r3, [r7, #2]
 8021bb2:	9300      	str	r3, [sp, #0]
 8021bb4:	460b      	mov	r3, r1
 8021bb6:	4601      	mov	r1, r0
 8021bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021bba:	f7ff ff0b 	bl	80219d4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8021bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021bc0:	685b      	ldr	r3, [r3, #4]
 8021bc2:	f003 0303 	and.w	r3, r3, #3
 8021bc6:	2b00      	cmp	r3, #0
 8021bc8:	d010      	beq.n	8021bec <pbuf_alloc+0x1c4>
 8021bca:	4b0b      	ldr	r3, [pc, #44]	; (8021bf8 <pbuf_alloc+0x1d0>)
 8021bcc:	f44f 7291 	mov.w	r2, #290	; 0x122
 8021bd0:	490d      	ldr	r1, [pc, #52]	; (8021c08 <pbuf_alloc+0x1e0>)
 8021bd2:	480b      	ldr	r0, [pc, #44]	; (8021c00 <pbuf_alloc+0x1d8>)
 8021bd4:	f003 ff42 	bl	8025a5c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8021bd8:	e008      	b.n	8021bec <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8021bda:	4b07      	ldr	r3, [pc, #28]	; (8021bf8 <pbuf_alloc+0x1d0>)
 8021bdc:	f240 1227 	movw	r2, #295	; 0x127
 8021be0:	490a      	ldr	r1, [pc, #40]	; (8021c0c <pbuf_alloc+0x1e4>)
 8021be2:	4807      	ldr	r0, [pc, #28]	; (8021c00 <pbuf_alloc+0x1d8>)
 8021be4:	f003 ff3a 	bl	8025a5c <iprintf>
      return NULL;
 8021be8:	2300      	movs	r3, #0
 8021bea:	e001      	b.n	8021bf0 <pbuf_alloc+0x1c8>
      break;
 8021bec:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8021bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8021bf0:	4618      	mov	r0, r3
 8021bf2:	3728      	adds	r7, #40	; 0x28
 8021bf4:	46bd      	mov	sp, r7
 8021bf6:	bd80      	pop	{r7, pc}
 8021bf8:	0802b8fc 	.word	0x0802b8fc
 8021bfc:	0802b970 	.word	0x0802b970
 8021c00:	0802b9a0 	.word	0x0802b9a0
 8021c04:	0802b9c8 	.word	0x0802b9c8
 8021c08:	0802b9fc 	.word	0x0802b9fc
 8021c0c:	0802ba28 	.word	0x0802ba28

08021c10 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b086      	sub	sp, #24
 8021c14:	af02      	add	r7, sp, #8
 8021c16:	6078      	str	r0, [r7, #4]
 8021c18:	460b      	mov	r3, r1
 8021c1a:	807b      	strh	r3, [r7, #2]
 8021c1c:	4613      	mov	r3, r2
 8021c1e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8021c20:	883b      	ldrh	r3, [r7, #0]
 8021c22:	2b41      	cmp	r3, #65	; 0x41
 8021c24:	d009      	beq.n	8021c3a <pbuf_alloc_reference+0x2a>
 8021c26:	883b      	ldrh	r3, [r7, #0]
 8021c28:	2b01      	cmp	r3, #1
 8021c2a:	d006      	beq.n	8021c3a <pbuf_alloc_reference+0x2a>
 8021c2c:	4b0f      	ldr	r3, [pc, #60]	; (8021c6c <pbuf_alloc_reference+0x5c>)
 8021c2e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8021c32:	490f      	ldr	r1, [pc, #60]	; (8021c70 <pbuf_alloc_reference+0x60>)
 8021c34:	480f      	ldr	r0, [pc, #60]	; (8021c74 <pbuf_alloc_reference+0x64>)
 8021c36:	f003 ff11 	bl	8025a5c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8021c3a:	2004      	movs	r0, #4
 8021c3c:	f7ff fa56 	bl	80210ec <memp_malloc>
 8021c40:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8021c42:	68fb      	ldr	r3, [r7, #12]
 8021c44:	2b00      	cmp	r3, #0
 8021c46:	d101      	bne.n	8021c4c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8021c48:	2300      	movs	r3, #0
 8021c4a:	e00b      	b.n	8021c64 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8021c4c:	8879      	ldrh	r1, [r7, #2]
 8021c4e:	887a      	ldrh	r2, [r7, #2]
 8021c50:	2300      	movs	r3, #0
 8021c52:	9301      	str	r3, [sp, #4]
 8021c54:	883b      	ldrh	r3, [r7, #0]
 8021c56:	9300      	str	r3, [sp, #0]
 8021c58:	460b      	mov	r3, r1
 8021c5a:	6879      	ldr	r1, [r7, #4]
 8021c5c:	68f8      	ldr	r0, [r7, #12]
 8021c5e:	f7ff feb9 	bl	80219d4 <pbuf_init_alloced_pbuf>
  return p;
 8021c62:	68fb      	ldr	r3, [r7, #12]
}
 8021c64:	4618      	mov	r0, r3
 8021c66:	3710      	adds	r7, #16
 8021c68:	46bd      	mov	sp, r7
 8021c6a:	bd80      	pop	{r7, pc}
 8021c6c:	0802b8fc 	.word	0x0802b8fc
 8021c70:	0802ba44 	.word	0x0802ba44
 8021c74:	0802b9a0 	.word	0x0802b9a0

08021c78 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8021c78:	b580      	push	{r7, lr}
 8021c7a:	b088      	sub	sp, #32
 8021c7c:	af02      	add	r7, sp, #8
 8021c7e:	607b      	str	r3, [r7, #4]
 8021c80:	4603      	mov	r3, r0
 8021c82:	73fb      	strb	r3, [r7, #15]
 8021c84:	460b      	mov	r3, r1
 8021c86:	81bb      	strh	r3, [r7, #12]
 8021c88:	4613      	mov	r3, r2
 8021c8a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8021c8c:	7bfb      	ldrb	r3, [r7, #15]
 8021c8e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8021c90:	8a7b      	ldrh	r3, [r7, #18]
 8021c92:	3303      	adds	r3, #3
 8021c94:	f023 0203 	bic.w	r2, r3, #3
 8021c98:	89bb      	ldrh	r3, [r7, #12]
 8021c9a:	441a      	add	r2, r3
 8021c9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021c9e:	429a      	cmp	r2, r3
 8021ca0:	d901      	bls.n	8021ca6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8021ca2:	2300      	movs	r3, #0
 8021ca4:	e018      	b.n	8021cd8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8021ca6:	6a3b      	ldr	r3, [r7, #32]
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	d007      	beq.n	8021cbc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8021cac:	8a7b      	ldrh	r3, [r7, #18]
 8021cae:	3303      	adds	r3, #3
 8021cb0:	f023 0303 	bic.w	r3, r3, #3
 8021cb4:	6a3a      	ldr	r2, [r7, #32]
 8021cb6:	4413      	add	r3, r2
 8021cb8:	617b      	str	r3, [r7, #20]
 8021cba:	e001      	b.n	8021cc0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8021cbc:	2300      	movs	r3, #0
 8021cbe:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8021cc0:	6878      	ldr	r0, [r7, #4]
 8021cc2:	89b9      	ldrh	r1, [r7, #12]
 8021cc4:	89ba      	ldrh	r2, [r7, #12]
 8021cc6:	2302      	movs	r3, #2
 8021cc8:	9301      	str	r3, [sp, #4]
 8021cca:	897b      	ldrh	r3, [r7, #10]
 8021ccc:	9300      	str	r3, [sp, #0]
 8021cce:	460b      	mov	r3, r1
 8021cd0:	6979      	ldr	r1, [r7, #20]
 8021cd2:	f7ff fe7f 	bl	80219d4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8021cd6:	687b      	ldr	r3, [r7, #4]
}
 8021cd8:	4618      	mov	r0, r3
 8021cda:	3718      	adds	r7, #24
 8021cdc:	46bd      	mov	sp, r7
 8021cde:	bd80      	pop	{r7, pc}

08021ce0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8021ce0:	b580      	push	{r7, lr}
 8021ce2:	b084      	sub	sp, #16
 8021ce4:	af00      	add	r7, sp, #0
 8021ce6:	6078      	str	r0, [r7, #4]
 8021ce8:	460b      	mov	r3, r1
 8021cea:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8021cec:	687b      	ldr	r3, [r7, #4]
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d106      	bne.n	8021d00 <pbuf_realloc+0x20>
 8021cf2:	4b3a      	ldr	r3, [pc, #232]	; (8021ddc <pbuf_realloc+0xfc>)
 8021cf4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8021cf8:	4939      	ldr	r1, [pc, #228]	; (8021de0 <pbuf_realloc+0x100>)
 8021cfa:	483a      	ldr	r0, [pc, #232]	; (8021de4 <pbuf_realloc+0x104>)
 8021cfc:	f003 feae 	bl	8025a5c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8021d00:	687b      	ldr	r3, [r7, #4]
 8021d02:	891b      	ldrh	r3, [r3, #8]
 8021d04:	887a      	ldrh	r2, [r7, #2]
 8021d06:	429a      	cmp	r2, r3
 8021d08:	d263      	bcs.n	8021dd2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8021d0a:	687b      	ldr	r3, [r7, #4]
 8021d0c:	891a      	ldrh	r2, [r3, #8]
 8021d0e:	887b      	ldrh	r3, [r7, #2]
 8021d10:	1ad3      	subs	r3, r2, r3
 8021d12:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8021d14:	887b      	ldrh	r3, [r7, #2]
 8021d16:	817b      	strh	r3, [r7, #10]
  q = p;
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8021d1c:	e018      	b.n	8021d50 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8021d1e:	68fb      	ldr	r3, [r7, #12]
 8021d20:	895b      	ldrh	r3, [r3, #10]
 8021d22:	897a      	ldrh	r2, [r7, #10]
 8021d24:	1ad3      	subs	r3, r2, r3
 8021d26:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8021d28:	68fb      	ldr	r3, [r7, #12]
 8021d2a:	891a      	ldrh	r2, [r3, #8]
 8021d2c:	893b      	ldrh	r3, [r7, #8]
 8021d2e:	1ad3      	subs	r3, r2, r3
 8021d30:	b29a      	uxth	r2, r3
 8021d32:	68fb      	ldr	r3, [r7, #12]
 8021d34:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8021d36:	68fb      	ldr	r3, [r7, #12]
 8021d38:	681b      	ldr	r3, [r3, #0]
 8021d3a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8021d3c:	68fb      	ldr	r3, [r7, #12]
 8021d3e:	2b00      	cmp	r3, #0
 8021d40:	d106      	bne.n	8021d50 <pbuf_realloc+0x70>
 8021d42:	4b26      	ldr	r3, [pc, #152]	; (8021ddc <pbuf_realloc+0xfc>)
 8021d44:	f240 12af 	movw	r2, #431	; 0x1af
 8021d48:	4927      	ldr	r1, [pc, #156]	; (8021de8 <pbuf_realloc+0x108>)
 8021d4a:	4826      	ldr	r0, [pc, #152]	; (8021de4 <pbuf_realloc+0x104>)
 8021d4c:	f003 fe86 	bl	8025a5c <iprintf>
  while (rem_len > q->len) {
 8021d50:	68fb      	ldr	r3, [r7, #12]
 8021d52:	895b      	ldrh	r3, [r3, #10]
 8021d54:	897a      	ldrh	r2, [r7, #10]
 8021d56:	429a      	cmp	r2, r3
 8021d58:	d8e1      	bhi.n	8021d1e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8021d5a:	68fb      	ldr	r3, [r7, #12]
 8021d5c:	7b1b      	ldrb	r3, [r3, #12]
 8021d5e:	f003 030f 	and.w	r3, r3, #15
 8021d62:	2b00      	cmp	r3, #0
 8021d64:	d121      	bne.n	8021daa <pbuf_realloc+0xca>
 8021d66:	68fb      	ldr	r3, [r7, #12]
 8021d68:	895b      	ldrh	r3, [r3, #10]
 8021d6a:	897a      	ldrh	r2, [r7, #10]
 8021d6c:	429a      	cmp	r2, r3
 8021d6e:	d01c      	beq.n	8021daa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8021d70:	68fb      	ldr	r3, [r7, #12]
 8021d72:	7b5b      	ldrb	r3, [r3, #13]
 8021d74:	f003 0302 	and.w	r3, r3, #2
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d116      	bne.n	8021daa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8021d7c:	68fb      	ldr	r3, [r7, #12]
 8021d7e:	685a      	ldr	r2, [r3, #4]
 8021d80:	68fb      	ldr	r3, [r7, #12]
 8021d82:	1ad3      	subs	r3, r2, r3
 8021d84:	b29a      	uxth	r2, r3
 8021d86:	897b      	ldrh	r3, [r7, #10]
 8021d88:	4413      	add	r3, r2
 8021d8a:	b29b      	uxth	r3, r3
 8021d8c:	4619      	mov	r1, r3
 8021d8e:	68f8      	ldr	r0, [r7, #12]
 8021d90:	f7fe ff20 	bl	8020bd4 <mem_trim>
 8021d94:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8021d96:	68fb      	ldr	r3, [r7, #12]
 8021d98:	2b00      	cmp	r3, #0
 8021d9a:	d106      	bne.n	8021daa <pbuf_realloc+0xca>
 8021d9c:	4b0f      	ldr	r3, [pc, #60]	; (8021ddc <pbuf_realloc+0xfc>)
 8021d9e:	f240 12bd 	movw	r2, #445	; 0x1bd
 8021da2:	4912      	ldr	r1, [pc, #72]	; (8021dec <pbuf_realloc+0x10c>)
 8021da4:	480f      	ldr	r0, [pc, #60]	; (8021de4 <pbuf_realloc+0x104>)
 8021da6:	f003 fe59 	bl	8025a5c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8021daa:	68fb      	ldr	r3, [r7, #12]
 8021dac:	897a      	ldrh	r2, [r7, #10]
 8021dae:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8021db0:	68fb      	ldr	r3, [r7, #12]
 8021db2:	895a      	ldrh	r2, [r3, #10]
 8021db4:	68fb      	ldr	r3, [r7, #12]
 8021db6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8021db8:	68fb      	ldr	r3, [r7, #12]
 8021dba:	681b      	ldr	r3, [r3, #0]
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	d004      	beq.n	8021dca <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8021dc0:	68fb      	ldr	r3, [r7, #12]
 8021dc2:	681b      	ldr	r3, [r3, #0]
 8021dc4:	4618      	mov	r0, r3
 8021dc6:	f000 f911 	bl	8021fec <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8021dca:	68fb      	ldr	r3, [r7, #12]
 8021dcc:	2200      	movs	r2, #0
 8021dce:	601a      	str	r2, [r3, #0]
 8021dd0:	e000      	b.n	8021dd4 <pbuf_realloc+0xf4>
    return;
 8021dd2:	bf00      	nop

}
 8021dd4:	3710      	adds	r7, #16
 8021dd6:	46bd      	mov	sp, r7
 8021dd8:	bd80      	pop	{r7, pc}
 8021dda:	bf00      	nop
 8021ddc:	0802b8fc 	.word	0x0802b8fc
 8021de0:	0802ba58 	.word	0x0802ba58
 8021de4:	0802b9a0 	.word	0x0802b9a0
 8021de8:	0802ba70 	.word	0x0802ba70
 8021dec:	0802ba88 	.word	0x0802ba88

08021df0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8021df0:	b580      	push	{r7, lr}
 8021df2:	b086      	sub	sp, #24
 8021df4:	af00      	add	r7, sp, #0
 8021df6:	60f8      	str	r0, [r7, #12]
 8021df8:	60b9      	str	r1, [r7, #8]
 8021dfa:	4613      	mov	r3, r2
 8021dfc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8021dfe:	68fb      	ldr	r3, [r7, #12]
 8021e00:	2b00      	cmp	r3, #0
 8021e02:	d106      	bne.n	8021e12 <pbuf_add_header_impl+0x22>
 8021e04:	4b2b      	ldr	r3, [pc, #172]	; (8021eb4 <pbuf_add_header_impl+0xc4>)
 8021e06:	f240 12df 	movw	r2, #479	; 0x1df
 8021e0a:	492b      	ldr	r1, [pc, #172]	; (8021eb8 <pbuf_add_header_impl+0xc8>)
 8021e0c:	482b      	ldr	r0, [pc, #172]	; (8021ebc <pbuf_add_header_impl+0xcc>)
 8021e0e:	f003 fe25 	bl	8025a5c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8021e12:	68fb      	ldr	r3, [r7, #12]
 8021e14:	2b00      	cmp	r3, #0
 8021e16:	d003      	beq.n	8021e20 <pbuf_add_header_impl+0x30>
 8021e18:	68bb      	ldr	r3, [r7, #8]
 8021e1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021e1e:	d301      	bcc.n	8021e24 <pbuf_add_header_impl+0x34>
    return 1;
 8021e20:	2301      	movs	r3, #1
 8021e22:	e043      	b.n	8021eac <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8021e24:	68bb      	ldr	r3, [r7, #8]
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	d101      	bne.n	8021e2e <pbuf_add_header_impl+0x3e>
    return 0;
 8021e2a:	2300      	movs	r3, #0
 8021e2c:	e03e      	b.n	8021eac <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8021e2e:	68bb      	ldr	r3, [r7, #8]
 8021e30:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8021e32:	68fb      	ldr	r3, [r7, #12]
 8021e34:	891a      	ldrh	r2, [r3, #8]
 8021e36:	8a7b      	ldrh	r3, [r7, #18]
 8021e38:	4413      	add	r3, r2
 8021e3a:	b29b      	uxth	r3, r3
 8021e3c:	8a7a      	ldrh	r2, [r7, #18]
 8021e3e:	429a      	cmp	r2, r3
 8021e40:	d901      	bls.n	8021e46 <pbuf_add_header_impl+0x56>
    return 1;
 8021e42:	2301      	movs	r3, #1
 8021e44:	e032      	b.n	8021eac <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8021e46:	68fb      	ldr	r3, [r7, #12]
 8021e48:	7b1b      	ldrb	r3, [r3, #12]
 8021e4a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8021e4c:	8a3b      	ldrh	r3, [r7, #16]
 8021e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021e52:	2b00      	cmp	r3, #0
 8021e54:	d00c      	beq.n	8021e70 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8021e56:	68fb      	ldr	r3, [r7, #12]
 8021e58:	685a      	ldr	r2, [r3, #4]
 8021e5a:	68bb      	ldr	r3, [r7, #8]
 8021e5c:	425b      	negs	r3, r3
 8021e5e:	4413      	add	r3, r2
 8021e60:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8021e62:	68fb      	ldr	r3, [r7, #12]
 8021e64:	3310      	adds	r3, #16
 8021e66:	697a      	ldr	r2, [r7, #20]
 8021e68:	429a      	cmp	r2, r3
 8021e6a:	d20d      	bcs.n	8021e88 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8021e6c:	2301      	movs	r3, #1
 8021e6e:	e01d      	b.n	8021eac <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8021e70:	79fb      	ldrb	r3, [r7, #7]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d006      	beq.n	8021e84 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8021e76:	68fb      	ldr	r3, [r7, #12]
 8021e78:	685a      	ldr	r2, [r3, #4]
 8021e7a:	68bb      	ldr	r3, [r7, #8]
 8021e7c:	425b      	negs	r3, r3
 8021e7e:	4413      	add	r3, r2
 8021e80:	617b      	str	r3, [r7, #20]
 8021e82:	e001      	b.n	8021e88 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8021e84:	2301      	movs	r3, #1
 8021e86:	e011      	b.n	8021eac <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8021e88:	68fb      	ldr	r3, [r7, #12]
 8021e8a:	697a      	ldr	r2, [r7, #20]
 8021e8c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8021e8e:	68fb      	ldr	r3, [r7, #12]
 8021e90:	895a      	ldrh	r2, [r3, #10]
 8021e92:	8a7b      	ldrh	r3, [r7, #18]
 8021e94:	4413      	add	r3, r2
 8021e96:	b29a      	uxth	r2, r3
 8021e98:	68fb      	ldr	r3, [r7, #12]
 8021e9a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8021e9c:	68fb      	ldr	r3, [r7, #12]
 8021e9e:	891a      	ldrh	r2, [r3, #8]
 8021ea0:	8a7b      	ldrh	r3, [r7, #18]
 8021ea2:	4413      	add	r3, r2
 8021ea4:	b29a      	uxth	r2, r3
 8021ea6:	68fb      	ldr	r3, [r7, #12]
 8021ea8:	811a      	strh	r2, [r3, #8]


  return 0;
 8021eaa:	2300      	movs	r3, #0
}
 8021eac:	4618      	mov	r0, r3
 8021eae:	3718      	adds	r7, #24
 8021eb0:	46bd      	mov	sp, r7
 8021eb2:	bd80      	pop	{r7, pc}
 8021eb4:	0802b8fc 	.word	0x0802b8fc
 8021eb8:	0802baa4 	.word	0x0802baa4
 8021ebc:	0802b9a0 	.word	0x0802b9a0

08021ec0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8021ec0:	b580      	push	{r7, lr}
 8021ec2:	b082      	sub	sp, #8
 8021ec4:	af00      	add	r7, sp, #0
 8021ec6:	6078      	str	r0, [r7, #4]
 8021ec8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8021eca:	2200      	movs	r2, #0
 8021ecc:	6839      	ldr	r1, [r7, #0]
 8021ece:	6878      	ldr	r0, [r7, #4]
 8021ed0:	f7ff ff8e 	bl	8021df0 <pbuf_add_header_impl>
 8021ed4:	4603      	mov	r3, r0
}
 8021ed6:	4618      	mov	r0, r3
 8021ed8:	3708      	adds	r7, #8
 8021eda:	46bd      	mov	sp, r7
 8021edc:	bd80      	pop	{r7, pc}
	...

08021ee0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8021ee0:	b580      	push	{r7, lr}
 8021ee2:	b084      	sub	sp, #16
 8021ee4:	af00      	add	r7, sp, #0
 8021ee6:	6078      	str	r0, [r7, #4]
 8021ee8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8021eea:	687b      	ldr	r3, [r7, #4]
 8021eec:	2b00      	cmp	r3, #0
 8021eee:	d106      	bne.n	8021efe <pbuf_remove_header+0x1e>
 8021ef0:	4b20      	ldr	r3, [pc, #128]	; (8021f74 <pbuf_remove_header+0x94>)
 8021ef2:	f240 224b 	movw	r2, #587	; 0x24b
 8021ef6:	4920      	ldr	r1, [pc, #128]	; (8021f78 <pbuf_remove_header+0x98>)
 8021ef8:	4820      	ldr	r0, [pc, #128]	; (8021f7c <pbuf_remove_header+0x9c>)
 8021efa:	f003 fdaf 	bl	8025a5c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	2b00      	cmp	r3, #0
 8021f02:	d003      	beq.n	8021f0c <pbuf_remove_header+0x2c>
 8021f04:	683b      	ldr	r3, [r7, #0]
 8021f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021f0a:	d301      	bcc.n	8021f10 <pbuf_remove_header+0x30>
    return 1;
 8021f0c:	2301      	movs	r3, #1
 8021f0e:	e02c      	b.n	8021f6a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8021f10:	683b      	ldr	r3, [r7, #0]
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d101      	bne.n	8021f1a <pbuf_remove_header+0x3a>
    return 0;
 8021f16:	2300      	movs	r3, #0
 8021f18:	e027      	b.n	8021f6a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8021f1a:	683b      	ldr	r3, [r7, #0]
 8021f1c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8021f1e:	687b      	ldr	r3, [r7, #4]
 8021f20:	895b      	ldrh	r3, [r3, #10]
 8021f22:	89fa      	ldrh	r2, [r7, #14]
 8021f24:	429a      	cmp	r2, r3
 8021f26:	d908      	bls.n	8021f3a <pbuf_remove_header+0x5a>
 8021f28:	4b12      	ldr	r3, [pc, #72]	; (8021f74 <pbuf_remove_header+0x94>)
 8021f2a:	f240 2255 	movw	r2, #597	; 0x255
 8021f2e:	4914      	ldr	r1, [pc, #80]	; (8021f80 <pbuf_remove_header+0xa0>)
 8021f30:	4812      	ldr	r0, [pc, #72]	; (8021f7c <pbuf_remove_header+0x9c>)
 8021f32:	f003 fd93 	bl	8025a5c <iprintf>
 8021f36:	2301      	movs	r3, #1
 8021f38:	e017      	b.n	8021f6a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8021f3a:	687b      	ldr	r3, [r7, #4]
 8021f3c:	685b      	ldr	r3, [r3, #4]
 8021f3e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8021f40:	687b      	ldr	r3, [r7, #4]
 8021f42:	685a      	ldr	r2, [r3, #4]
 8021f44:	683b      	ldr	r3, [r7, #0]
 8021f46:	441a      	add	r2, r3
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8021f4c:	687b      	ldr	r3, [r7, #4]
 8021f4e:	895a      	ldrh	r2, [r3, #10]
 8021f50:	89fb      	ldrh	r3, [r7, #14]
 8021f52:	1ad3      	subs	r3, r2, r3
 8021f54:	b29a      	uxth	r2, r3
 8021f56:	687b      	ldr	r3, [r7, #4]
 8021f58:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8021f5a:	687b      	ldr	r3, [r7, #4]
 8021f5c:	891a      	ldrh	r2, [r3, #8]
 8021f5e:	89fb      	ldrh	r3, [r7, #14]
 8021f60:	1ad3      	subs	r3, r2, r3
 8021f62:	b29a      	uxth	r2, r3
 8021f64:	687b      	ldr	r3, [r7, #4]
 8021f66:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8021f68:	2300      	movs	r3, #0
}
 8021f6a:	4618      	mov	r0, r3
 8021f6c:	3710      	adds	r7, #16
 8021f6e:	46bd      	mov	sp, r7
 8021f70:	bd80      	pop	{r7, pc}
 8021f72:	bf00      	nop
 8021f74:	0802b8fc 	.word	0x0802b8fc
 8021f78:	0802baa4 	.word	0x0802baa4
 8021f7c:	0802b9a0 	.word	0x0802b9a0
 8021f80:	0802bab0 	.word	0x0802bab0

08021f84 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8021f84:	b580      	push	{r7, lr}
 8021f86:	b082      	sub	sp, #8
 8021f88:	af00      	add	r7, sp, #0
 8021f8a:	6078      	str	r0, [r7, #4]
 8021f8c:	460b      	mov	r3, r1
 8021f8e:	807b      	strh	r3, [r7, #2]
 8021f90:	4613      	mov	r3, r2
 8021f92:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8021f94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	da08      	bge.n	8021fae <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8021f9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021fa0:	425b      	negs	r3, r3
 8021fa2:	4619      	mov	r1, r3
 8021fa4:	6878      	ldr	r0, [r7, #4]
 8021fa6:	f7ff ff9b 	bl	8021ee0 <pbuf_remove_header>
 8021faa:	4603      	mov	r3, r0
 8021fac:	e007      	b.n	8021fbe <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8021fae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021fb2:	787a      	ldrb	r2, [r7, #1]
 8021fb4:	4619      	mov	r1, r3
 8021fb6:	6878      	ldr	r0, [r7, #4]
 8021fb8:	f7ff ff1a 	bl	8021df0 <pbuf_add_header_impl>
 8021fbc:	4603      	mov	r3, r0
  }
}
 8021fbe:	4618      	mov	r0, r3
 8021fc0:	3708      	adds	r7, #8
 8021fc2:	46bd      	mov	sp, r7
 8021fc4:	bd80      	pop	{r7, pc}

08021fc6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8021fc6:	b580      	push	{r7, lr}
 8021fc8:	b082      	sub	sp, #8
 8021fca:	af00      	add	r7, sp, #0
 8021fcc:	6078      	str	r0, [r7, #4]
 8021fce:	460b      	mov	r3, r1
 8021fd0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8021fd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8021fd6:	2201      	movs	r2, #1
 8021fd8:	4619      	mov	r1, r3
 8021fda:	6878      	ldr	r0, [r7, #4]
 8021fdc:	f7ff ffd2 	bl	8021f84 <pbuf_header_impl>
 8021fe0:	4603      	mov	r3, r0
}
 8021fe2:	4618      	mov	r0, r3
 8021fe4:	3708      	adds	r7, #8
 8021fe6:	46bd      	mov	sp, r7
 8021fe8:	bd80      	pop	{r7, pc}
	...

08021fec <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8021fec:	b580      	push	{r7, lr}
 8021fee:	b086      	sub	sp, #24
 8021ff0:	af00      	add	r7, sp, #0
 8021ff2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d10b      	bne.n	8022012 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8021ffa:	687b      	ldr	r3, [r7, #4]
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	d106      	bne.n	802200e <pbuf_free+0x22>
 8022000:	4b38      	ldr	r3, [pc, #224]	; (80220e4 <pbuf_free+0xf8>)
 8022002:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8022006:	4938      	ldr	r1, [pc, #224]	; (80220e8 <pbuf_free+0xfc>)
 8022008:	4838      	ldr	r0, [pc, #224]	; (80220ec <pbuf_free+0x100>)
 802200a:	f003 fd27 	bl	8025a5c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 802200e:	2300      	movs	r3, #0
 8022010:	e063      	b.n	80220da <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8022012:	2300      	movs	r3, #0
 8022014:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8022016:	e05c      	b.n	80220d2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8022018:	687b      	ldr	r3, [r7, #4]
 802201a:	7b9b      	ldrb	r3, [r3, #14]
 802201c:	2b00      	cmp	r3, #0
 802201e:	d106      	bne.n	802202e <pbuf_free+0x42>
 8022020:	4b30      	ldr	r3, [pc, #192]	; (80220e4 <pbuf_free+0xf8>)
 8022022:	f240 22f1 	movw	r2, #753	; 0x2f1
 8022026:	4932      	ldr	r1, [pc, #200]	; (80220f0 <pbuf_free+0x104>)
 8022028:	4830      	ldr	r0, [pc, #192]	; (80220ec <pbuf_free+0x100>)
 802202a:	f003 fd17 	bl	8025a5c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 802202e:	687b      	ldr	r3, [r7, #4]
 8022030:	7b9b      	ldrb	r3, [r3, #14]
 8022032:	3b01      	subs	r3, #1
 8022034:	b2da      	uxtb	r2, r3
 8022036:	687b      	ldr	r3, [r7, #4]
 8022038:	739a      	strb	r2, [r3, #14]
 802203a:	687b      	ldr	r3, [r7, #4]
 802203c:	7b9b      	ldrb	r3, [r3, #14]
 802203e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8022040:	7dbb      	ldrb	r3, [r7, #22]
 8022042:	2b00      	cmp	r3, #0
 8022044:	d143      	bne.n	80220ce <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8022046:	687b      	ldr	r3, [r7, #4]
 8022048:	681b      	ldr	r3, [r3, #0]
 802204a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 802204c:	687b      	ldr	r3, [r7, #4]
 802204e:	7b1b      	ldrb	r3, [r3, #12]
 8022050:	f003 030f 	and.w	r3, r3, #15
 8022054:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8022056:	687b      	ldr	r3, [r7, #4]
 8022058:	7b5b      	ldrb	r3, [r3, #13]
 802205a:	f003 0302 	and.w	r3, r3, #2
 802205e:	2b00      	cmp	r3, #0
 8022060:	d011      	beq.n	8022086 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8022062:	687b      	ldr	r3, [r7, #4]
 8022064:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8022066:	68bb      	ldr	r3, [r7, #8]
 8022068:	691b      	ldr	r3, [r3, #16]
 802206a:	2b00      	cmp	r3, #0
 802206c:	d106      	bne.n	802207c <pbuf_free+0x90>
 802206e:	4b1d      	ldr	r3, [pc, #116]	; (80220e4 <pbuf_free+0xf8>)
 8022070:	f240 22ff 	movw	r2, #767	; 0x2ff
 8022074:	491f      	ldr	r1, [pc, #124]	; (80220f4 <pbuf_free+0x108>)
 8022076:	481d      	ldr	r0, [pc, #116]	; (80220ec <pbuf_free+0x100>)
 8022078:	f003 fcf0 	bl	8025a5c <iprintf>
        pc->custom_free_function(p);
 802207c:	68bb      	ldr	r3, [r7, #8]
 802207e:	691b      	ldr	r3, [r3, #16]
 8022080:	6878      	ldr	r0, [r7, #4]
 8022082:	4798      	blx	r3
 8022084:	e01d      	b.n	80220c2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8022086:	7bfb      	ldrb	r3, [r7, #15]
 8022088:	2b02      	cmp	r3, #2
 802208a:	d104      	bne.n	8022096 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 802208c:	6879      	ldr	r1, [r7, #4]
 802208e:	2005      	movs	r0, #5
 8022090:	f7ff f89c 	bl	80211cc <memp_free>
 8022094:	e015      	b.n	80220c2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8022096:	7bfb      	ldrb	r3, [r7, #15]
 8022098:	2b01      	cmp	r3, #1
 802209a:	d104      	bne.n	80220a6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 802209c:	6879      	ldr	r1, [r7, #4]
 802209e:	2004      	movs	r0, #4
 80220a0:	f7ff f894 	bl	80211cc <memp_free>
 80220a4:	e00d      	b.n	80220c2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80220a6:	7bfb      	ldrb	r3, [r7, #15]
 80220a8:	2b00      	cmp	r3, #0
 80220aa:	d103      	bne.n	80220b4 <pbuf_free+0xc8>
          mem_free(p);
 80220ac:	6878      	ldr	r0, [r7, #4]
 80220ae:	f7fe fd27 	bl	8020b00 <mem_free>
 80220b2:	e006      	b.n	80220c2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80220b4:	4b0b      	ldr	r3, [pc, #44]	; (80220e4 <pbuf_free+0xf8>)
 80220b6:	f240 320f 	movw	r2, #783	; 0x30f
 80220ba:	490f      	ldr	r1, [pc, #60]	; (80220f8 <pbuf_free+0x10c>)
 80220bc:	480b      	ldr	r0, [pc, #44]	; (80220ec <pbuf_free+0x100>)
 80220be:	f003 fccd 	bl	8025a5c <iprintf>
        }
      }
      count++;
 80220c2:	7dfb      	ldrb	r3, [r7, #23]
 80220c4:	3301      	adds	r3, #1
 80220c6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80220c8:	693b      	ldr	r3, [r7, #16]
 80220ca:	607b      	str	r3, [r7, #4]
 80220cc:	e001      	b.n	80220d2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80220ce:	2300      	movs	r3, #0
 80220d0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80220d2:	687b      	ldr	r3, [r7, #4]
 80220d4:	2b00      	cmp	r3, #0
 80220d6:	d19f      	bne.n	8022018 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80220d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80220da:	4618      	mov	r0, r3
 80220dc:	3718      	adds	r7, #24
 80220de:	46bd      	mov	sp, r7
 80220e0:	bd80      	pop	{r7, pc}
 80220e2:	bf00      	nop
 80220e4:	0802b8fc 	.word	0x0802b8fc
 80220e8:	0802baa4 	.word	0x0802baa4
 80220ec:	0802b9a0 	.word	0x0802b9a0
 80220f0:	0802bad0 	.word	0x0802bad0
 80220f4:	0802bae8 	.word	0x0802bae8
 80220f8:	0802bb0c 	.word	0x0802bb0c

080220fc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80220fc:	b480      	push	{r7}
 80220fe:	b085      	sub	sp, #20
 8022100:	af00      	add	r7, sp, #0
 8022102:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8022104:	2300      	movs	r3, #0
 8022106:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8022108:	e005      	b.n	8022116 <pbuf_clen+0x1a>
    ++len;
 802210a:	89fb      	ldrh	r3, [r7, #14]
 802210c:	3301      	adds	r3, #1
 802210e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8022110:	687b      	ldr	r3, [r7, #4]
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8022116:	687b      	ldr	r3, [r7, #4]
 8022118:	2b00      	cmp	r3, #0
 802211a:	d1f6      	bne.n	802210a <pbuf_clen+0xe>
  }
  return len;
 802211c:	89fb      	ldrh	r3, [r7, #14]
}
 802211e:	4618      	mov	r0, r3
 8022120:	3714      	adds	r7, #20
 8022122:	46bd      	mov	sp, r7
 8022124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022128:	4770      	bx	lr
	...

0802212c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 802212c:	b580      	push	{r7, lr}
 802212e:	b082      	sub	sp, #8
 8022130:	af00      	add	r7, sp, #0
 8022132:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8022134:	687b      	ldr	r3, [r7, #4]
 8022136:	2b00      	cmp	r3, #0
 8022138:	d010      	beq.n	802215c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 802213a:	687b      	ldr	r3, [r7, #4]
 802213c:	7b9b      	ldrb	r3, [r3, #14]
 802213e:	3301      	adds	r3, #1
 8022140:	b2da      	uxtb	r2, r3
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8022146:	687b      	ldr	r3, [r7, #4]
 8022148:	7b9b      	ldrb	r3, [r3, #14]
 802214a:	2b00      	cmp	r3, #0
 802214c:	d106      	bne.n	802215c <pbuf_ref+0x30>
 802214e:	4b05      	ldr	r3, [pc, #20]	; (8022164 <pbuf_ref+0x38>)
 8022150:	f240 3242 	movw	r2, #834	; 0x342
 8022154:	4904      	ldr	r1, [pc, #16]	; (8022168 <pbuf_ref+0x3c>)
 8022156:	4805      	ldr	r0, [pc, #20]	; (802216c <pbuf_ref+0x40>)
 8022158:	f003 fc80 	bl	8025a5c <iprintf>
  }
}
 802215c:	bf00      	nop
 802215e:	3708      	adds	r7, #8
 8022160:	46bd      	mov	sp, r7
 8022162:	bd80      	pop	{r7, pc}
 8022164:	0802b8fc 	.word	0x0802b8fc
 8022168:	0802bb20 	.word	0x0802bb20
 802216c:	0802b9a0 	.word	0x0802b9a0

08022170 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8022170:	b580      	push	{r7, lr}
 8022172:	b084      	sub	sp, #16
 8022174:	af00      	add	r7, sp, #0
 8022176:	6078      	str	r0, [r7, #4]
 8022178:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 802217a:	687b      	ldr	r3, [r7, #4]
 802217c:	2b00      	cmp	r3, #0
 802217e:	d002      	beq.n	8022186 <pbuf_cat+0x16>
 8022180:	683b      	ldr	r3, [r7, #0]
 8022182:	2b00      	cmp	r3, #0
 8022184:	d107      	bne.n	8022196 <pbuf_cat+0x26>
 8022186:	4b20      	ldr	r3, [pc, #128]	; (8022208 <pbuf_cat+0x98>)
 8022188:	f240 3259 	movw	r2, #857	; 0x359
 802218c:	491f      	ldr	r1, [pc, #124]	; (802220c <pbuf_cat+0x9c>)
 802218e:	4820      	ldr	r0, [pc, #128]	; (8022210 <pbuf_cat+0xa0>)
 8022190:	f003 fc64 	bl	8025a5c <iprintf>
 8022194:	e034      	b.n	8022200 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8022196:	687b      	ldr	r3, [r7, #4]
 8022198:	60fb      	str	r3, [r7, #12]
 802219a:	e00a      	b.n	80221b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802219c:	68fb      	ldr	r3, [r7, #12]
 802219e:	891a      	ldrh	r2, [r3, #8]
 80221a0:	683b      	ldr	r3, [r7, #0]
 80221a2:	891b      	ldrh	r3, [r3, #8]
 80221a4:	4413      	add	r3, r2
 80221a6:	b29a      	uxth	r2, r3
 80221a8:	68fb      	ldr	r3, [r7, #12]
 80221aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80221ac:	68fb      	ldr	r3, [r7, #12]
 80221ae:	681b      	ldr	r3, [r3, #0]
 80221b0:	60fb      	str	r3, [r7, #12]
 80221b2:	68fb      	ldr	r3, [r7, #12]
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	d1f0      	bne.n	802219c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80221ba:	68fb      	ldr	r3, [r7, #12]
 80221bc:	891a      	ldrh	r2, [r3, #8]
 80221be:	68fb      	ldr	r3, [r7, #12]
 80221c0:	895b      	ldrh	r3, [r3, #10]
 80221c2:	429a      	cmp	r2, r3
 80221c4:	d006      	beq.n	80221d4 <pbuf_cat+0x64>
 80221c6:	4b10      	ldr	r3, [pc, #64]	; (8022208 <pbuf_cat+0x98>)
 80221c8:	f240 3262 	movw	r2, #866	; 0x362
 80221cc:	4911      	ldr	r1, [pc, #68]	; (8022214 <pbuf_cat+0xa4>)
 80221ce:	4810      	ldr	r0, [pc, #64]	; (8022210 <pbuf_cat+0xa0>)
 80221d0:	f003 fc44 	bl	8025a5c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80221d4:	68fb      	ldr	r3, [r7, #12]
 80221d6:	681b      	ldr	r3, [r3, #0]
 80221d8:	2b00      	cmp	r3, #0
 80221da:	d006      	beq.n	80221ea <pbuf_cat+0x7a>
 80221dc:	4b0a      	ldr	r3, [pc, #40]	; (8022208 <pbuf_cat+0x98>)
 80221de:	f240 3263 	movw	r2, #867	; 0x363
 80221e2:	490d      	ldr	r1, [pc, #52]	; (8022218 <pbuf_cat+0xa8>)
 80221e4:	480a      	ldr	r0, [pc, #40]	; (8022210 <pbuf_cat+0xa0>)
 80221e6:	f003 fc39 	bl	8025a5c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80221ea:	68fb      	ldr	r3, [r7, #12]
 80221ec:	891a      	ldrh	r2, [r3, #8]
 80221ee:	683b      	ldr	r3, [r7, #0]
 80221f0:	891b      	ldrh	r3, [r3, #8]
 80221f2:	4413      	add	r3, r2
 80221f4:	b29a      	uxth	r2, r3
 80221f6:	68fb      	ldr	r3, [r7, #12]
 80221f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80221fa:	68fb      	ldr	r3, [r7, #12]
 80221fc:	683a      	ldr	r2, [r7, #0]
 80221fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8022200:	3710      	adds	r7, #16
 8022202:	46bd      	mov	sp, r7
 8022204:	bd80      	pop	{r7, pc}
 8022206:	bf00      	nop
 8022208:	0802b8fc 	.word	0x0802b8fc
 802220c:	0802bb34 	.word	0x0802bb34
 8022210:	0802b9a0 	.word	0x0802b9a0
 8022214:	0802bb6c 	.word	0x0802bb6c
 8022218:	0802bb9c 	.word	0x0802bb9c

0802221c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 802221c:	b580      	push	{r7, lr}
 802221e:	b082      	sub	sp, #8
 8022220:	af00      	add	r7, sp, #0
 8022222:	6078      	str	r0, [r7, #4]
 8022224:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8022226:	6839      	ldr	r1, [r7, #0]
 8022228:	6878      	ldr	r0, [r7, #4]
 802222a:	f7ff ffa1 	bl	8022170 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 802222e:	6838      	ldr	r0, [r7, #0]
 8022230:	f7ff ff7c 	bl	802212c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8022234:	bf00      	nop
 8022236:	3708      	adds	r7, #8
 8022238:	46bd      	mov	sp, r7
 802223a:	bd80      	pop	{r7, pc}

0802223c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 802223c:	b580      	push	{r7, lr}
 802223e:	b086      	sub	sp, #24
 8022240:	af00      	add	r7, sp, #0
 8022242:	6078      	str	r0, [r7, #4]
 8022244:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8022246:	2300      	movs	r3, #0
 8022248:	617b      	str	r3, [r7, #20]
 802224a:	2300      	movs	r3, #0
 802224c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 802224e:	687b      	ldr	r3, [r7, #4]
 8022250:	2b00      	cmp	r3, #0
 8022252:	d008      	beq.n	8022266 <pbuf_copy+0x2a>
 8022254:	683b      	ldr	r3, [r7, #0]
 8022256:	2b00      	cmp	r3, #0
 8022258:	d005      	beq.n	8022266 <pbuf_copy+0x2a>
 802225a:	687b      	ldr	r3, [r7, #4]
 802225c:	891a      	ldrh	r2, [r3, #8]
 802225e:	683b      	ldr	r3, [r7, #0]
 8022260:	891b      	ldrh	r3, [r3, #8]
 8022262:	429a      	cmp	r2, r3
 8022264:	d209      	bcs.n	802227a <pbuf_copy+0x3e>
 8022266:	4b57      	ldr	r3, [pc, #348]	; (80223c4 <pbuf_copy+0x188>)
 8022268:	f240 32c9 	movw	r2, #969	; 0x3c9
 802226c:	4956      	ldr	r1, [pc, #344]	; (80223c8 <pbuf_copy+0x18c>)
 802226e:	4857      	ldr	r0, [pc, #348]	; (80223cc <pbuf_copy+0x190>)
 8022270:	f003 fbf4 	bl	8025a5c <iprintf>
 8022274:	f06f 030f 	mvn.w	r3, #15
 8022278:	e09f      	b.n	80223ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 802227a:	687b      	ldr	r3, [r7, #4]
 802227c:	895b      	ldrh	r3, [r3, #10]
 802227e:	461a      	mov	r2, r3
 8022280:	697b      	ldr	r3, [r7, #20]
 8022282:	1ad2      	subs	r2, r2, r3
 8022284:	683b      	ldr	r3, [r7, #0]
 8022286:	895b      	ldrh	r3, [r3, #10]
 8022288:	4619      	mov	r1, r3
 802228a:	693b      	ldr	r3, [r7, #16]
 802228c:	1acb      	subs	r3, r1, r3
 802228e:	429a      	cmp	r2, r3
 8022290:	d306      	bcc.n	80222a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8022292:	683b      	ldr	r3, [r7, #0]
 8022294:	895b      	ldrh	r3, [r3, #10]
 8022296:	461a      	mov	r2, r3
 8022298:	693b      	ldr	r3, [r7, #16]
 802229a:	1ad3      	subs	r3, r2, r3
 802229c:	60fb      	str	r3, [r7, #12]
 802229e:	e005      	b.n	80222ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80222a0:	687b      	ldr	r3, [r7, #4]
 80222a2:	895b      	ldrh	r3, [r3, #10]
 80222a4:	461a      	mov	r2, r3
 80222a6:	697b      	ldr	r3, [r7, #20]
 80222a8:	1ad3      	subs	r3, r2, r3
 80222aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80222ac:	687b      	ldr	r3, [r7, #4]
 80222ae:	685a      	ldr	r2, [r3, #4]
 80222b0:	697b      	ldr	r3, [r7, #20]
 80222b2:	18d0      	adds	r0, r2, r3
 80222b4:	683b      	ldr	r3, [r7, #0]
 80222b6:	685a      	ldr	r2, [r3, #4]
 80222b8:	693b      	ldr	r3, [r7, #16]
 80222ba:	4413      	add	r3, r2
 80222bc:	68fa      	ldr	r2, [r7, #12]
 80222be:	4619      	mov	r1, r3
 80222c0:	f003 fabc 	bl	802583c <memcpy>
    offset_to += len;
 80222c4:	697a      	ldr	r2, [r7, #20]
 80222c6:	68fb      	ldr	r3, [r7, #12]
 80222c8:	4413      	add	r3, r2
 80222ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80222cc:	693a      	ldr	r2, [r7, #16]
 80222ce:	68fb      	ldr	r3, [r7, #12]
 80222d0:	4413      	add	r3, r2
 80222d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80222d4:	687b      	ldr	r3, [r7, #4]
 80222d6:	895b      	ldrh	r3, [r3, #10]
 80222d8:	461a      	mov	r2, r3
 80222da:	697b      	ldr	r3, [r7, #20]
 80222dc:	4293      	cmp	r3, r2
 80222de:	d906      	bls.n	80222ee <pbuf_copy+0xb2>
 80222e0:	4b38      	ldr	r3, [pc, #224]	; (80223c4 <pbuf_copy+0x188>)
 80222e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80222e6:	493a      	ldr	r1, [pc, #232]	; (80223d0 <pbuf_copy+0x194>)
 80222e8:	4838      	ldr	r0, [pc, #224]	; (80223cc <pbuf_copy+0x190>)
 80222ea:	f003 fbb7 	bl	8025a5c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80222ee:	683b      	ldr	r3, [r7, #0]
 80222f0:	895b      	ldrh	r3, [r3, #10]
 80222f2:	461a      	mov	r2, r3
 80222f4:	693b      	ldr	r3, [r7, #16]
 80222f6:	4293      	cmp	r3, r2
 80222f8:	d906      	bls.n	8022308 <pbuf_copy+0xcc>
 80222fa:	4b32      	ldr	r3, [pc, #200]	; (80223c4 <pbuf_copy+0x188>)
 80222fc:	f240 32da 	movw	r2, #986	; 0x3da
 8022300:	4934      	ldr	r1, [pc, #208]	; (80223d4 <pbuf_copy+0x198>)
 8022302:	4832      	ldr	r0, [pc, #200]	; (80223cc <pbuf_copy+0x190>)
 8022304:	f003 fbaa 	bl	8025a5c <iprintf>
    if (offset_from >= p_from->len) {
 8022308:	683b      	ldr	r3, [r7, #0]
 802230a:	895b      	ldrh	r3, [r3, #10]
 802230c:	461a      	mov	r2, r3
 802230e:	693b      	ldr	r3, [r7, #16]
 8022310:	4293      	cmp	r3, r2
 8022312:	d304      	bcc.n	802231e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8022314:	2300      	movs	r3, #0
 8022316:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8022318:	683b      	ldr	r3, [r7, #0]
 802231a:	681b      	ldr	r3, [r3, #0]
 802231c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 802231e:	687b      	ldr	r3, [r7, #4]
 8022320:	895b      	ldrh	r3, [r3, #10]
 8022322:	461a      	mov	r2, r3
 8022324:	697b      	ldr	r3, [r7, #20]
 8022326:	4293      	cmp	r3, r2
 8022328:	d114      	bne.n	8022354 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 802232a:	2300      	movs	r3, #0
 802232c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 802232e:	687b      	ldr	r3, [r7, #4]
 8022330:	681b      	ldr	r3, [r3, #0]
 8022332:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8022334:	687b      	ldr	r3, [r7, #4]
 8022336:	2b00      	cmp	r3, #0
 8022338:	d10c      	bne.n	8022354 <pbuf_copy+0x118>
 802233a:	683b      	ldr	r3, [r7, #0]
 802233c:	2b00      	cmp	r3, #0
 802233e:	d009      	beq.n	8022354 <pbuf_copy+0x118>
 8022340:	4b20      	ldr	r3, [pc, #128]	; (80223c4 <pbuf_copy+0x188>)
 8022342:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8022346:	4924      	ldr	r1, [pc, #144]	; (80223d8 <pbuf_copy+0x19c>)
 8022348:	4820      	ldr	r0, [pc, #128]	; (80223cc <pbuf_copy+0x190>)
 802234a:	f003 fb87 	bl	8025a5c <iprintf>
 802234e:	f06f 030f 	mvn.w	r3, #15
 8022352:	e032      	b.n	80223ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8022354:	683b      	ldr	r3, [r7, #0]
 8022356:	2b00      	cmp	r3, #0
 8022358:	d013      	beq.n	8022382 <pbuf_copy+0x146>
 802235a:	683b      	ldr	r3, [r7, #0]
 802235c:	895a      	ldrh	r2, [r3, #10]
 802235e:	683b      	ldr	r3, [r7, #0]
 8022360:	891b      	ldrh	r3, [r3, #8]
 8022362:	429a      	cmp	r2, r3
 8022364:	d10d      	bne.n	8022382 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8022366:	683b      	ldr	r3, [r7, #0]
 8022368:	681b      	ldr	r3, [r3, #0]
 802236a:	2b00      	cmp	r3, #0
 802236c:	d009      	beq.n	8022382 <pbuf_copy+0x146>
 802236e:	4b15      	ldr	r3, [pc, #84]	; (80223c4 <pbuf_copy+0x188>)
 8022370:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8022374:	4919      	ldr	r1, [pc, #100]	; (80223dc <pbuf_copy+0x1a0>)
 8022376:	4815      	ldr	r0, [pc, #84]	; (80223cc <pbuf_copy+0x190>)
 8022378:	f003 fb70 	bl	8025a5c <iprintf>
 802237c:	f06f 0305 	mvn.w	r3, #5
 8022380:	e01b      	b.n	80223ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8022382:	687b      	ldr	r3, [r7, #4]
 8022384:	2b00      	cmp	r3, #0
 8022386:	d013      	beq.n	80223b0 <pbuf_copy+0x174>
 8022388:	687b      	ldr	r3, [r7, #4]
 802238a:	895a      	ldrh	r2, [r3, #10]
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	891b      	ldrh	r3, [r3, #8]
 8022390:	429a      	cmp	r2, r3
 8022392:	d10d      	bne.n	80223b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8022394:	687b      	ldr	r3, [r7, #4]
 8022396:	681b      	ldr	r3, [r3, #0]
 8022398:	2b00      	cmp	r3, #0
 802239a:	d009      	beq.n	80223b0 <pbuf_copy+0x174>
 802239c:	4b09      	ldr	r3, [pc, #36]	; (80223c4 <pbuf_copy+0x188>)
 802239e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80223a2:	490e      	ldr	r1, [pc, #56]	; (80223dc <pbuf_copy+0x1a0>)
 80223a4:	4809      	ldr	r0, [pc, #36]	; (80223cc <pbuf_copy+0x190>)
 80223a6:	f003 fb59 	bl	8025a5c <iprintf>
 80223aa:	f06f 0305 	mvn.w	r3, #5
 80223ae:	e004      	b.n	80223ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80223b0:	683b      	ldr	r3, [r7, #0]
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	f47f af61 	bne.w	802227a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80223b8:	2300      	movs	r3, #0
}
 80223ba:	4618      	mov	r0, r3
 80223bc:	3718      	adds	r7, #24
 80223be:	46bd      	mov	sp, r7
 80223c0:	bd80      	pop	{r7, pc}
 80223c2:	bf00      	nop
 80223c4:	0802b8fc 	.word	0x0802b8fc
 80223c8:	0802bbe8 	.word	0x0802bbe8
 80223cc:	0802b9a0 	.word	0x0802b9a0
 80223d0:	0802bc18 	.word	0x0802bc18
 80223d4:	0802bc30 	.word	0x0802bc30
 80223d8:	0802bc4c 	.word	0x0802bc4c
 80223dc:	0802bc5c 	.word	0x0802bc5c

080223e0 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 80223e0:	b580      	push	{r7, lr}
 80223e2:	b088      	sub	sp, #32
 80223e4:	af00      	add	r7, sp, #0
 80223e6:	60f8      	str	r0, [r7, #12]
 80223e8:	60b9      	str	r1, [r7, #8]
 80223ea:	4613      	mov	r3, r2
 80223ec:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 80223ee:	88fb      	ldrh	r3, [r7, #6]
 80223f0:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 80223f2:	2300      	movs	r3, #0
 80223f4:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 80223f6:	68fb      	ldr	r3, [r7, #12]
 80223f8:	2b00      	cmp	r3, #0
 80223fa:	d109      	bne.n	8022410 <pbuf_take+0x30>
 80223fc:	4b3a      	ldr	r3, [pc, #232]	; (80224e8 <pbuf_take+0x108>)
 80223fe:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8022402:	493a      	ldr	r1, [pc, #232]	; (80224ec <pbuf_take+0x10c>)
 8022404:	483a      	ldr	r0, [pc, #232]	; (80224f0 <pbuf_take+0x110>)
 8022406:	f003 fb29 	bl	8025a5c <iprintf>
 802240a:	f06f 030f 	mvn.w	r3, #15
 802240e:	e067      	b.n	80224e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8022410:	68bb      	ldr	r3, [r7, #8]
 8022412:	2b00      	cmp	r3, #0
 8022414:	d109      	bne.n	802242a <pbuf_take+0x4a>
 8022416:	4b34      	ldr	r3, [pc, #208]	; (80224e8 <pbuf_take+0x108>)
 8022418:	f240 42b4 	movw	r2, #1204	; 0x4b4
 802241c:	4935      	ldr	r1, [pc, #212]	; (80224f4 <pbuf_take+0x114>)
 802241e:	4834      	ldr	r0, [pc, #208]	; (80224f0 <pbuf_take+0x110>)
 8022420:	f003 fb1c 	bl	8025a5c <iprintf>
 8022424:	f06f 030f 	mvn.w	r3, #15
 8022428:	e05a      	b.n	80224e0 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 802242a:	68fb      	ldr	r3, [r7, #12]
 802242c:	891b      	ldrh	r3, [r3, #8]
 802242e:	88fa      	ldrh	r2, [r7, #6]
 8022430:	429a      	cmp	r2, r3
 8022432:	d909      	bls.n	8022448 <pbuf_take+0x68>
 8022434:	4b2c      	ldr	r3, [pc, #176]	; (80224e8 <pbuf_take+0x108>)
 8022436:	f240 42b5 	movw	r2, #1205	; 0x4b5
 802243a:	492f      	ldr	r1, [pc, #188]	; (80224f8 <pbuf_take+0x118>)
 802243c:	482c      	ldr	r0, [pc, #176]	; (80224f0 <pbuf_take+0x110>)
 802243e:	f003 fb0d 	bl	8025a5c <iprintf>
 8022442:	f04f 33ff 	mov.w	r3, #4294967295
 8022446:	e04b      	b.n	80224e0 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8022448:	68fb      	ldr	r3, [r7, #12]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d007      	beq.n	802245e <pbuf_take+0x7e>
 802244e:	68bb      	ldr	r3, [r7, #8]
 8022450:	2b00      	cmp	r3, #0
 8022452:	d004      	beq.n	802245e <pbuf_take+0x7e>
 8022454:	68fb      	ldr	r3, [r7, #12]
 8022456:	891b      	ldrh	r3, [r3, #8]
 8022458:	88fa      	ldrh	r2, [r7, #6]
 802245a:	429a      	cmp	r2, r3
 802245c:	d902      	bls.n	8022464 <pbuf_take+0x84>
    return ERR_ARG;
 802245e:	f06f 030f 	mvn.w	r3, #15
 8022462:	e03d      	b.n	80224e0 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8022464:	68fb      	ldr	r3, [r7, #12]
 8022466:	61fb      	str	r3, [r7, #28]
 8022468:	e028      	b.n	80224bc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 802246a:	69fb      	ldr	r3, [r7, #28]
 802246c:	2b00      	cmp	r3, #0
 802246e:	d106      	bne.n	802247e <pbuf_take+0x9e>
 8022470:	4b1d      	ldr	r3, [pc, #116]	; (80224e8 <pbuf_take+0x108>)
 8022472:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8022476:	4921      	ldr	r1, [pc, #132]	; (80224fc <pbuf_take+0x11c>)
 8022478:	481d      	ldr	r0, [pc, #116]	; (80224f0 <pbuf_take+0x110>)
 802247a:	f003 faef 	bl	8025a5c <iprintf>
    buf_copy_len = total_copy_len;
 802247e:	697b      	ldr	r3, [r7, #20]
 8022480:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8022482:	69fb      	ldr	r3, [r7, #28]
 8022484:	895b      	ldrh	r3, [r3, #10]
 8022486:	461a      	mov	r2, r3
 8022488:	69bb      	ldr	r3, [r7, #24]
 802248a:	4293      	cmp	r3, r2
 802248c:	d902      	bls.n	8022494 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 802248e:	69fb      	ldr	r3, [r7, #28]
 8022490:	895b      	ldrh	r3, [r3, #10]
 8022492:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8022494:	69fb      	ldr	r3, [r7, #28]
 8022496:	6858      	ldr	r0, [r3, #4]
 8022498:	68ba      	ldr	r2, [r7, #8]
 802249a:	693b      	ldr	r3, [r7, #16]
 802249c:	4413      	add	r3, r2
 802249e:	69ba      	ldr	r2, [r7, #24]
 80224a0:	4619      	mov	r1, r3
 80224a2:	f003 f9cb 	bl	802583c <memcpy>
    total_copy_len -= buf_copy_len;
 80224a6:	697a      	ldr	r2, [r7, #20]
 80224a8:	69bb      	ldr	r3, [r7, #24]
 80224aa:	1ad3      	subs	r3, r2, r3
 80224ac:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80224ae:	693a      	ldr	r2, [r7, #16]
 80224b0:	69bb      	ldr	r3, [r7, #24]
 80224b2:	4413      	add	r3, r2
 80224b4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80224b6:	69fb      	ldr	r3, [r7, #28]
 80224b8:	681b      	ldr	r3, [r3, #0]
 80224ba:	61fb      	str	r3, [r7, #28]
 80224bc:	697b      	ldr	r3, [r7, #20]
 80224be:	2b00      	cmp	r3, #0
 80224c0:	d1d3      	bne.n	802246a <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80224c2:	697b      	ldr	r3, [r7, #20]
 80224c4:	2b00      	cmp	r3, #0
 80224c6:	d103      	bne.n	80224d0 <pbuf_take+0xf0>
 80224c8:	88fb      	ldrh	r3, [r7, #6]
 80224ca:	693a      	ldr	r2, [r7, #16]
 80224cc:	429a      	cmp	r2, r3
 80224ce:	d006      	beq.n	80224de <pbuf_take+0xfe>
 80224d0:	4b05      	ldr	r3, [pc, #20]	; (80224e8 <pbuf_take+0x108>)
 80224d2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80224d6:	490a      	ldr	r1, [pc, #40]	; (8022500 <pbuf_take+0x120>)
 80224d8:	4805      	ldr	r0, [pc, #20]	; (80224f0 <pbuf_take+0x110>)
 80224da:	f003 fabf 	bl	8025a5c <iprintf>
  return ERR_OK;
 80224de:	2300      	movs	r3, #0
}
 80224e0:	4618      	mov	r0, r3
 80224e2:	3720      	adds	r7, #32
 80224e4:	46bd      	mov	sp, r7
 80224e6:	bd80      	pop	{r7, pc}
 80224e8:	0802b8fc 	.word	0x0802b8fc
 80224ec:	0802bd18 	.word	0x0802bd18
 80224f0:	0802b9a0 	.word	0x0802b9a0
 80224f4:	0802bd30 	.word	0x0802bd30
 80224f8:	0802bd4c 	.word	0x0802bd4c
 80224fc:	0802bd6c 	.word	0x0802bd6c
 8022500:	0802bd84 	.word	0x0802bd84

08022504 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8022504:	b580      	push	{r7, lr}
 8022506:	b084      	sub	sp, #16
 8022508:	af00      	add	r7, sp, #0
 802250a:	4603      	mov	r3, r0
 802250c:	603a      	str	r2, [r7, #0]
 802250e:	71fb      	strb	r3, [r7, #7]
 8022510:	460b      	mov	r3, r1
 8022512:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8022514:	683b      	ldr	r3, [r7, #0]
 8022516:	8919      	ldrh	r1, [r3, #8]
 8022518:	88ba      	ldrh	r2, [r7, #4]
 802251a:	79fb      	ldrb	r3, [r7, #7]
 802251c:	4618      	mov	r0, r3
 802251e:	f7ff fa83 	bl	8021a28 <pbuf_alloc>
 8022522:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8022524:	68fb      	ldr	r3, [r7, #12]
 8022526:	2b00      	cmp	r3, #0
 8022528:	d101      	bne.n	802252e <pbuf_clone+0x2a>
    return NULL;
 802252a:	2300      	movs	r3, #0
 802252c:	e011      	b.n	8022552 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 802252e:	6839      	ldr	r1, [r7, #0]
 8022530:	68f8      	ldr	r0, [r7, #12]
 8022532:	f7ff fe83 	bl	802223c <pbuf_copy>
 8022536:	4603      	mov	r3, r0
 8022538:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 802253a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 802253e:	2b00      	cmp	r3, #0
 8022540:	d006      	beq.n	8022550 <pbuf_clone+0x4c>
 8022542:	4b06      	ldr	r3, [pc, #24]	; (802255c <pbuf_clone+0x58>)
 8022544:	f240 5224 	movw	r2, #1316	; 0x524
 8022548:	4905      	ldr	r1, [pc, #20]	; (8022560 <pbuf_clone+0x5c>)
 802254a:	4806      	ldr	r0, [pc, #24]	; (8022564 <pbuf_clone+0x60>)
 802254c:	f003 fa86 	bl	8025a5c <iprintf>
  return q;
 8022550:	68fb      	ldr	r3, [r7, #12]
}
 8022552:	4618      	mov	r0, r3
 8022554:	3710      	adds	r7, #16
 8022556:	46bd      	mov	sp, r7
 8022558:	bd80      	pop	{r7, pc}
 802255a:	bf00      	nop
 802255c:	0802b8fc 	.word	0x0802b8fc
 8022560:	0802bdb4 	.word	0x0802bdb4
 8022564:	0802b9a0 	.word	0x0802b9a0

08022568 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8022568:	b580      	push	{r7, lr}
 802256a:	b086      	sub	sp, #24
 802256c:	af00      	add	r7, sp, #0
 802256e:	60f8      	str	r0, [r7, #12]
 8022570:	60b9      	str	r1, [r7, #8]
 8022572:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022574:	2003      	movs	r0, #3
 8022576:	f7fe fdb9 	bl	80210ec <memp_malloc>
 802257a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 802257c:	693b      	ldr	r3, [r7, #16]
 802257e:	2b00      	cmp	r3, #0
 8022580:	d109      	bne.n	8022596 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022582:	693b      	ldr	r3, [r7, #16]
 8022584:	2b00      	cmp	r3, #0
 8022586:	d151      	bne.n	802262c <sys_timeout_abs+0xc4>
 8022588:	4b2a      	ldr	r3, [pc, #168]	; (8022634 <sys_timeout_abs+0xcc>)
 802258a:	22be      	movs	r2, #190	; 0xbe
 802258c:	492a      	ldr	r1, [pc, #168]	; (8022638 <sys_timeout_abs+0xd0>)
 802258e:	482b      	ldr	r0, [pc, #172]	; (802263c <sys_timeout_abs+0xd4>)
 8022590:	f003 fa64 	bl	8025a5c <iprintf>
    return;
 8022594:	e04a      	b.n	802262c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8022596:	693b      	ldr	r3, [r7, #16]
 8022598:	2200      	movs	r2, #0
 802259a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 802259c:	693b      	ldr	r3, [r7, #16]
 802259e:	68ba      	ldr	r2, [r7, #8]
 80225a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80225a2:	693b      	ldr	r3, [r7, #16]
 80225a4:	687a      	ldr	r2, [r7, #4]
 80225a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80225a8:	693b      	ldr	r3, [r7, #16]
 80225aa:	68fa      	ldr	r2, [r7, #12]
 80225ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80225ae:	4b24      	ldr	r3, [pc, #144]	; (8022640 <sys_timeout_abs+0xd8>)
 80225b0:	681b      	ldr	r3, [r3, #0]
 80225b2:	2b00      	cmp	r3, #0
 80225b4:	d103      	bne.n	80225be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80225b6:	4a22      	ldr	r2, [pc, #136]	; (8022640 <sys_timeout_abs+0xd8>)
 80225b8:	693b      	ldr	r3, [r7, #16]
 80225ba:	6013      	str	r3, [r2, #0]
    return;
 80225bc:	e037      	b.n	802262e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80225be:	693b      	ldr	r3, [r7, #16]
 80225c0:	685a      	ldr	r2, [r3, #4]
 80225c2:	4b1f      	ldr	r3, [pc, #124]	; (8022640 <sys_timeout_abs+0xd8>)
 80225c4:	681b      	ldr	r3, [r3, #0]
 80225c6:	685b      	ldr	r3, [r3, #4]
 80225c8:	1ad3      	subs	r3, r2, r3
 80225ca:	0fdb      	lsrs	r3, r3, #31
 80225cc:	f003 0301 	and.w	r3, r3, #1
 80225d0:	b2db      	uxtb	r3, r3
 80225d2:	2b00      	cmp	r3, #0
 80225d4:	d007      	beq.n	80225e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80225d6:	4b1a      	ldr	r3, [pc, #104]	; (8022640 <sys_timeout_abs+0xd8>)
 80225d8:	681a      	ldr	r2, [r3, #0]
 80225da:	693b      	ldr	r3, [r7, #16]
 80225dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80225de:	4a18      	ldr	r2, [pc, #96]	; (8022640 <sys_timeout_abs+0xd8>)
 80225e0:	693b      	ldr	r3, [r7, #16]
 80225e2:	6013      	str	r3, [r2, #0]
 80225e4:	e023      	b.n	802262e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80225e6:	4b16      	ldr	r3, [pc, #88]	; (8022640 <sys_timeout_abs+0xd8>)
 80225e8:	681b      	ldr	r3, [r3, #0]
 80225ea:	617b      	str	r3, [r7, #20]
 80225ec:	e01a      	b.n	8022624 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80225ee:	697b      	ldr	r3, [r7, #20]
 80225f0:	681b      	ldr	r3, [r3, #0]
 80225f2:	2b00      	cmp	r3, #0
 80225f4:	d00b      	beq.n	802260e <sys_timeout_abs+0xa6>
 80225f6:	693b      	ldr	r3, [r7, #16]
 80225f8:	685a      	ldr	r2, [r3, #4]
 80225fa:	697b      	ldr	r3, [r7, #20]
 80225fc:	681b      	ldr	r3, [r3, #0]
 80225fe:	685b      	ldr	r3, [r3, #4]
 8022600:	1ad3      	subs	r3, r2, r3
 8022602:	0fdb      	lsrs	r3, r3, #31
 8022604:	f003 0301 	and.w	r3, r3, #1
 8022608:	b2db      	uxtb	r3, r3
 802260a:	2b00      	cmp	r3, #0
 802260c:	d007      	beq.n	802261e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 802260e:	697b      	ldr	r3, [r7, #20]
 8022610:	681a      	ldr	r2, [r3, #0]
 8022612:	693b      	ldr	r3, [r7, #16]
 8022614:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8022616:	697b      	ldr	r3, [r7, #20]
 8022618:	693a      	ldr	r2, [r7, #16]
 802261a:	601a      	str	r2, [r3, #0]
        break;
 802261c:	e007      	b.n	802262e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 802261e:	697b      	ldr	r3, [r7, #20]
 8022620:	681b      	ldr	r3, [r3, #0]
 8022622:	617b      	str	r3, [r7, #20]
 8022624:	697b      	ldr	r3, [r7, #20]
 8022626:	2b00      	cmp	r3, #0
 8022628:	d1e1      	bne.n	80225ee <sys_timeout_abs+0x86>
 802262a:	e000      	b.n	802262e <sys_timeout_abs+0xc6>
    return;
 802262c:	bf00      	nop
      }
    }
  }
}
 802262e:	3718      	adds	r7, #24
 8022630:	46bd      	mov	sp, r7
 8022632:	bd80      	pop	{r7, pc}
 8022634:	0802bdc8 	.word	0x0802bdc8
 8022638:	0802be40 	.word	0x0802be40
 802263c:	0802be80 	.word	0x0802be80
 8022640:	20015cf0 	.word	0x20015cf0

08022644 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8022644:	b580      	push	{r7, lr}
 8022646:	b086      	sub	sp, #24
 8022648:	af00      	add	r7, sp, #0
 802264a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 802264c:	687b      	ldr	r3, [r7, #4]
 802264e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8022650:	697b      	ldr	r3, [r7, #20]
 8022652:	685b      	ldr	r3, [r3, #4]
 8022654:	4798      	blx	r3

  now = sys_now();
 8022656:	f7fd fed9 	bl	802040c <sys_now>
 802265a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 802265c:	697b      	ldr	r3, [r7, #20]
 802265e:	681a      	ldr	r2, [r3, #0]
 8022660:	4b0f      	ldr	r3, [pc, #60]	; (80226a0 <lwip_cyclic_timer+0x5c>)
 8022662:	681b      	ldr	r3, [r3, #0]
 8022664:	4413      	add	r3, r2
 8022666:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8022668:	68fa      	ldr	r2, [r7, #12]
 802266a:	693b      	ldr	r3, [r7, #16]
 802266c:	1ad3      	subs	r3, r2, r3
 802266e:	0fdb      	lsrs	r3, r3, #31
 8022670:	f003 0301 	and.w	r3, r3, #1
 8022674:	b2db      	uxtb	r3, r3
 8022676:	2b00      	cmp	r3, #0
 8022678:	d009      	beq.n	802268e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 802267a:	697b      	ldr	r3, [r7, #20]
 802267c:	681a      	ldr	r2, [r3, #0]
 802267e:	693b      	ldr	r3, [r7, #16]
 8022680:	4413      	add	r3, r2
 8022682:	687a      	ldr	r2, [r7, #4]
 8022684:	4907      	ldr	r1, [pc, #28]	; (80226a4 <lwip_cyclic_timer+0x60>)
 8022686:	4618      	mov	r0, r3
 8022688:	f7ff ff6e 	bl	8022568 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 802268c:	e004      	b.n	8022698 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 802268e:	687a      	ldr	r2, [r7, #4]
 8022690:	4904      	ldr	r1, [pc, #16]	; (80226a4 <lwip_cyclic_timer+0x60>)
 8022692:	68f8      	ldr	r0, [r7, #12]
 8022694:	f7ff ff68 	bl	8022568 <sys_timeout_abs>
}
 8022698:	bf00      	nop
 802269a:	3718      	adds	r7, #24
 802269c:	46bd      	mov	sp, r7
 802269e:	bd80      	pop	{r7, pc}
 80226a0:	20015cf4 	.word	0x20015cf4
 80226a4:	08022645 	.word	0x08022645

080226a8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80226a8:	b580      	push	{r7, lr}
 80226aa:	b082      	sub	sp, #8
 80226ac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80226ae:	2300      	movs	r3, #0
 80226b0:	607b      	str	r3, [r7, #4]
 80226b2:	e00e      	b.n	80226d2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80226b4:	4a0b      	ldr	r2, [pc, #44]	; (80226e4 <sys_timeouts_init+0x3c>)
 80226b6:	687b      	ldr	r3, [r7, #4]
 80226b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80226bc:	687b      	ldr	r3, [r7, #4]
 80226be:	00db      	lsls	r3, r3, #3
 80226c0:	4a08      	ldr	r2, [pc, #32]	; (80226e4 <sys_timeouts_init+0x3c>)
 80226c2:	4413      	add	r3, r2
 80226c4:	461a      	mov	r2, r3
 80226c6:	4908      	ldr	r1, [pc, #32]	; (80226e8 <sys_timeouts_init+0x40>)
 80226c8:	f000 f810 	bl	80226ec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80226cc:	687b      	ldr	r3, [r7, #4]
 80226ce:	3301      	adds	r3, #1
 80226d0:	607b      	str	r3, [r7, #4]
 80226d2:	687b      	ldr	r3, [r7, #4]
 80226d4:	2b01      	cmp	r3, #1
 80226d6:	d9ed      	bls.n	80226b4 <sys_timeouts_init+0xc>
  }
}
 80226d8:	bf00      	nop
 80226da:	bf00      	nop
 80226dc:	3708      	adds	r7, #8
 80226de:	46bd      	mov	sp, r7
 80226e0:	bd80      	pop	{r7, pc}
 80226e2:	bf00      	nop
 80226e4:	0802cf50 	.word	0x0802cf50
 80226e8:	08022645 	.word	0x08022645

080226ec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80226ec:	b580      	push	{r7, lr}
 80226ee:	b086      	sub	sp, #24
 80226f0:	af00      	add	r7, sp, #0
 80226f2:	60f8      	str	r0, [r7, #12]
 80226f4:	60b9      	str	r1, [r7, #8]
 80226f6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80226f8:	68fb      	ldr	r3, [r7, #12]
 80226fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80226fe:	d306      	bcc.n	802270e <sys_timeout+0x22>
 8022700:	4b0a      	ldr	r3, [pc, #40]	; (802272c <sys_timeout+0x40>)
 8022702:	f240 1229 	movw	r2, #297	; 0x129
 8022706:	490a      	ldr	r1, [pc, #40]	; (8022730 <sys_timeout+0x44>)
 8022708:	480a      	ldr	r0, [pc, #40]	; (8022734 <sys_timeout+0x48>)
 802270a:	f003 f9a7 	bl	8025a5c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 802270e:	f7fd fe7d 	bl	802040c <sys_now>
 8022712:	4602      	mov	r2, r0
 8022714:	68fb      	ldr	r3, [r7, #12]
 8022716:	4413      	add	r3, r2
 8022718:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 802271a:	687a      	ldr	r2, [r7, #4]
 802271c:	68b9      	ldr	r1, [r7, #8]
 802271e:	6978      	ldr	r0, [r7, #20]
 8022720:	f7ff ff22 	bl	8022568 <sys_timeout_abs>
#endif
}
 8022724:	bf00      	nop
 8022726:	3718      	adds	r7, #24
 8022728:	46bd      	mov	sp, r7
 802272a:	bd80      	pop	{r7, pc}
 802272c:	0802bdc8 	.word	0x0802bdc8
 8022730:	0802bea8 	.word	0x0802bea8
 8022734:	0802be80 	.word	0x0802be80

08022738 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8022738:	b580      	push	{r7, lr}
 802273a:	b084      	sub	sp, #16
 802273c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 802273e:	f7fd fe65 	bl	802040c <sys_now>
 8022742:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8022744:	4b17      	ldr	r3, [pc, #92]	; (80227a4 <sys_check_timeouts+0x6c>)
 8022746:	681b      	ldr	r3, [r3, #0]
 8022748:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 802274a:	68bb      	ldr	r3, [r7, #8]
 802274c:	2b00      	cmp	r3, #0
 802274e:	d022      	beq.n	8022796 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8022750:	68bb      	ldr	r3, [r7, #8]
 8022752:	685b      	ldr	r3, [r3, #4]
 8022754:	68fa      	ldr	r2, [r7, #12]
 8022756:	1ad3      	subs	r3, r2, r3
 8022758:	0fdb      	lsrs	r3, r3, #31
 802275a:	f003 0301 	and.w	r3, r3, #1
 802275e:	b2db      	uxtb	r3, r3
 8022760:	2b00      	cmp	r3, #0
 8022762:	d11a      	bne.n	802279a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8022764:	68bb      	ldr	r3, [r7, #8]
 8022766:	681b      	ldr	r3, [r3, #0]
 8022768:	4a0e      	ldr	r2, [pc, #56]	; (80227a4 <sys_check_timeouts+0x6c>)
 802276a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 802276c:	68bb      	ldr	r3, [r7, #8]
 802276e:	689b      	ldr	r3, [r3, #8]
 8022770:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8022772:	68bb      	ldr	r3, [r7, #8]
 8022774:	68db      	ldr	r3, [r3, #12]
 8022776:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8022778:	68bb      	ldr	r3, [r7, #8]
 802277a:	685b      	ldr	r3, [r3, #4]
 802277c:	4a0a      	ldr	r2, [pc, #40]	; (80227a8 <sys_check_timeouts+0x70>)
 802277e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8022780:	68b9      	ldr	r1, [r7, #8]
 8022782:	2003      	movs	r0, #3
 8022784:	f7fe fd22 	bl	80211cc <memp_free>
    if (handler != NULL) {
 8022788:	687b      	ldr	r3, [r7, #4]
 802278a:	2b00      	cmp	r3, #0
 802278c:	d0da      	beq.n	8022744 <sys_check_timeouts+0xc>
      handler(arg);
 802278e:	687b      	ldr	r3, [r7, #4]
 8022790:	6838      	ldr	r0, [r7, #0]
 8022792:	4798      	blx	r3
  do {
 8022794:	e7d6      	b.n	8022744 <sys_check_timeouts+0xc>
      return;
 8022796:	bf00      	nop
 8022798:	e000      	b.n	802279c <sys_check_timeouts+0x64>
      return;
 802279a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 802279c:	3710      	adds	r7, #16
 802279e:	46bd      	mov	sp, r7
 80227a0:	bd80      	pop	{r7, pc}
 80227a2:	bf00      	nop
 80227a4:	20015cf0 	.word	0x20015cf0
 80227a8:	20015cf4 	.word	0x20015cf4

080227ac <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80227ac:	b580      	push	{r7, lr}
 80227ae:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80227b0:	f003 f9f8 	bl	8025ba4 <rand>
 80227b4:	4603      	mov	r3, r0
 80227b6:	b29b      	uxth	r3, r3
 80227b8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80227bc:	b29b      	uxth	r3, r3
 80227be:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80227c2:	b29a      	uxth	r2, r3
 80227c4:	4b01      	ldr	r3, [pc, #4]	; (80227cc <udp_init+0x20>)
 80227c6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80227c8:	bf00      	nop
 80227ca:	bd80      	pop	{r7, pc}
 80227cc:	2000033c 	.word	0x2000033c

080227d0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80227d0:	b480      	push	{r7}
 80227d2:	b083      	sub	sp, #12
 80227d4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80227d6:	2300      	movs	r3, #0
 80227d8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80227da:	4b17      	ldr	r3, [pc, #92]	; (8022838 <udp_new_port+0x68>)
 80227dc:	881b      	ldrh	r3, [r3, #0]
 80227de:	1c5a      	adds	r2, r3, #1
 80227e0:	b291      	uxth	r1, r2
 80227e2:	4a15      	ldr	r2, [pc, #84]	; (8022838 <udp_new_port+0x68>)
 80227e4:	8011      	strh	r1, [r2, #0]
 80227e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80227ea:	4293      	cmp	r3, r2
 80227ec:	d103      	bne.n	80227f6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80227ee:	4b12      	ldr	r3, [pc, #72]	; (8022838 <udp_new_port+0x68>)
 80227f0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80227f4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80227f6:	4b11      	ldr	r3, [pc, #68]	; (802283c <udp_new_port+0x6c>)
 80227f8:	681b      	ldr	r3, [r3, #0]
 80227fa:	603b      	str	r3, [r7, #0]
 80227fc:	e011      	b.n	8022822 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80227fe:	683b      	ldr	r3, [r7, #0]
 8022800:	8a5a      	ldrh	r2, [r3, #18]
 8022802:	4b0d      	ldr	r3, [pc, #52]	; (8022838 <udp_new_port+0x68>)
 8022804:	881b      	ldrh	r3, [r3, #0]
 8022806:	429a      	cmp	r2, r3
 8022808:	d108      	bne.n	802281c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 802280a:	88fb      	ldrh	r3, [r7, #6]
 802280c:	3301      	adds	r3, #1
 802280e:	80fb      	strh	r3, [r7, #6]
 8022810:	88fb      	ldrh	r3, [r7, #6]
 8022812:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022816:	d3e0      	bcc.n	80227da <udp_new_port+0xa>
        return 0;
 8022818:	2300      	movs	r3, #0
 802281a:	e007      	b.n	802282c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 802281c:	683b      	ldr	r3, [r7, #0]
 802281e:	68db      	ldr	r3, [r3, #12]
 8022820:	603b      	str	r3, [r7, #0]
 8022822:	683b      	ldr	r3, [r7, #0]
 8022824:	2b00      	cmp	r3, #0
 8022826:	d1ea      	bne.n	80227fe <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022828:	4b03      	ldr	r3, [pc, #12]	; (8022838 <udp_new_port+0x68>)
 802282a:	881b      	ldrh	r3, [r3, #0]
}
 802282c:	4618      	mov	r0, r3
 802282e:	370c      	adds	r7, #12
 8022830:	46bd      	mov	sp, r7
 8022832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022836:	4770      	bx	lr
 8022838:	2000033c 	.word	0x2000033c
 802283c:	20015cf8 	.word	0x20015cf8

08022840 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8022840:	b580      	push	{r7, lr}
 8022842:	b084      	sub	sp, #16
 8022844:	af00      	add	r7, sp, #0
 8022846:	60f8      	str	r0, [r7, #12]
 8022848:	60b9      	str	r1, [r7, #8]
 802284a:	4613      	mov	r3, r2
 802284c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 802284e:	68fb      	ldr	r3, [r7, #12]
 8022850:	2b00      	cmp	r3, #0
 8022852:	d105      	bne.n	8022860 <udp_input_local_match+0x20>
 8022854:	4b27      	ldr	r3, [pc, #156]	; (80228f4 <udp_input_local_match+0xb4>)
 8022856:	2287      	movs	r2, #135	; 0x87
 8022858:	4927      	ldr	r1, [pc, #156]	; (80228f8 <udp_input_local_match+0xb8>)
 802285a:	4828      	ldr	r0, [pc, #160]	; (80228fc <udp_input_local_match+0xbc>)
 802285c:	f003 f8fe 	bl	8025a5c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8022860:	68bb      	ldr	r3, [r7, #8]
 8022862:	2b00      	cmp	r3, #0
 8022864:	d105      	bne.n	8022872 <udp_input_local_match+0x32>
 8022866:	4b23      	ldr	r3, [pc, #140]	; (80228f4 <udp_input_local_match+0xb4>)
 8022868:	2288      	movs	r2, #136	; 0x88
 802286a:	4925      	ldr	r1, [pc, #148]	; (8022900 <udp_input_local_match+0xc0>)
 802286c:	4823      	ldr	r0, [pc, #140]	; (80228fc <udp_input_local_match+0xbc>)
 802286e:	f003 f8f5 	bl	8025a5c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022872:	68fb      	ldr	r3, [r7, #12]
 8022874:	7a1b      	ldrb	r3, [r3, #8]
 8022876:	2b00      	cmp	r3, #0
 8022878:	d00b      	beq.n	8022892 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 802287a:	68fb      	ldr	r3, [r7, #12]
 802287c:	7a1a      	ldrb	r2, [r3, #8]
 802287e:	4b21      	ldr	r3, [pc, #132]	; (8022904 <udp_input_local_match+0xc4>)
 8022880:	685b      	ldr	r3, [r3, #4]
 8022882:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022886:	3301      	adds	r3, #1
 8022888:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 802288a:	429a      	cmp	r2, r3
 802288c:	d001      	beq.n	8022892 <udp_input_local_match+0x52>
    return 0;
 802288e:	2300      	movs	r3, #0
 8022890:	e02b      	b.n	80228ea <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8022892:	79fb      	ldrb	r3, [r7, #7]
 8022894:	2b00      	cmp	r3, #0
 8022896:	d018      	beq.n	80228ca <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022898:	68fb      	ldr	r3, [r7, #12]
 802289a:	2b00      	cmp	r3, #0
 802289c:	d013      	beq.n	80228c6 <udp_input_local_match+0x86>
 802289e:	68fb      	ldr	r3, [r7, #12]
 80228a0:	681b      	ldr	r3, [r3, #0]
 80228a2:	2b00      	cmp	r3, #0
 80228a4:	d00f      	beq.n	80228c6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80228a6:	4b17      	ldr	r3, [pc, #92]	; (8022904 <udp_input_local_match+0xc4>)
 80228a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80228aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80228ae:	d00a      	beq.n	80228c6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80228b0:	68fb      	ldr	r3, [r7, #12]
 80228b2:	681a      	ldr	r2, [r3, #0]
 80228b4:	4b13      	ldr	r3, [pc, #76]	; (8022904 <udp_input_local_match+0xc4>)
 80228b6:	695b      	ldr	r3, [r3, #20]
 80228b8:	405a      	eors	r2, r3
 80228ba:	68bb      	ldr	r3, [r7, #8]
 80228bc:	3308      	adds	r3, #8
 80228be:	681b      	ldr	r3, [r3, #0]
 80228c0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80228c2:	2b00      	cmp	r3, #0
 80228c4:	d110      	bne.n	80228e8 <udp_input_local_match+0xa8>
          return 1;
 80228c6:	2301      	movs	r3, #1
 80228c8:	e00f      	b.n	80228ea <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80228ca:	68fb      	ldr	r3, [r7, #12]
 80228cc:	2b00      	cmp	r3, #0
 80228ce:	d009      	beq.n	80228e4 <udp_input_local_match+0xa4>
 80228d0:	68fb      	ldr	r3, [r7, #12]
 80228d2:	681b      	ldr	r3, [r3, #0]
 80228d4:	2b00      	cmp	r3, #0
 80228d6:	d005      	beq.n	80228e4 <udp_input_local_match+0xa4>
 80228d8:	68fb      	ldr	r3, [r7, #12]
 80228da:	681a      	ldr	r2, [r3, #0]
 80228dc:	4b09      	ldr	r3, [pc, #36]	; (8022904 <udp_input_local_match+0xc4>)
 80228de:	695b      	ldr	r3, [r3, #20]
 80228e0:	429a      	cmp	r2, r3
 80228e2:	d101      	bne.n	80228e8 <udp_input_local_match+0xa8>
        return 1;
 80228e4:	2301      	movs	r3, #1
 80228e6:	e000      	b.n	80228ea <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80228e8:	2300      	movs	r3, #0
}
 80228ea:	4618      	mov	r0, r3
 80228ec:	3710      	adds	r7, #16
 80228ee:	46bd      	mov	sp, r7
 80228f0:	bd80      	pop	{r7, pc}
 80228f2:	bf00      	nop
 80228f4:	0802bef4 	.word	0x0802bef4
 80228f8:	0802bf68 	.word	0x0802bf68
 80228fc:	0802bf8c 	.word	0x0802bf8c
 8022900:	0802bfb4 	.word	0x0802bfb4
 8022904:	20012694 	.word	0x20012694

08022908 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8022908:	b590      	push	{r4, r7, lr}
 802290a:	b08d      	sub	sp, #52	; 0x34
 802290c:	af02      	add	r7, sp, #8
 802290e:	6078      	str	r0, [r7, #4]
 8022910:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8022912:	2300      	movs	r3, #0
 8022914:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	2b00      	cmp	r3, #0
 802291a:	d105      	bne.n	8022928 <udp_input+0x20>
 802291c:	4b7c      	ldr	r3, [pc, #496]	; (8022b10 <udp_input+0x208>)
 802291e:	22cf      	movs	r2, #207	; 0xcf
 8022920:	497c      	ldr	r1, [pc, #496]	; (8022b14 <udp_input+0x20c>)
 8022922:	487d      	ldr	r0, [pc, #500]	; (8022b18 <udp_input+0x210>)
 8022924:	f003 f89a 	bl	8025a5c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8022928:	683b      	ldr	r3, [r7, #0]
 802292a:	2b00      	cmp	r3, #0
 802292c:	d105      	bne.n	802293a <udp_input+0x32>
 802292e:	4b78      	ldr	r3, [pc, #480]	; (8022b10 <udp_input+0x208>)
 8022930:	22d0      	movs	r2, #208	; 0xd0
 8022932:	497a      	ldr	r1, [pc, #488]	; (8022b1c <udp_input+0x214>)
 8022934:	4878      	ldr	r0, [pc, #480]	; (8022b18 <udp_input+0x210>)
 8022936:	f003 f891 	bl	8025a5c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 802293a:	687b      	ldr	r3, [r7, #4]
 802293c:	895b      	ldrh	r3, [r3, #10]
 802293e:	2b07      	cmp	r3, #7
 8022940:	d803      	bhi.n	802294a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8022942:	6878      	ldr	r0, [r7, #4]
 8022944:	f7ff fb52 	bl	8021fec <pbuf_free>
    goto end;
 8022948:	e0de      	b.n	8022b08 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	685b      	ldr	r3, [r3, #4]
 802294e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8022950:	4b73      	ldr	r3, [pc, #460]	; (8022b20 <udp_input+0x218>)
 8022952:	695b      	ldr	r3, [r3, #20]
 8022954:	4a72      	ldr	r2, [pc, #456]	; (8022b20 <udp_input+0x218>)
 8022956:	6812      	ldr	r2, [r2, #0]
 8022958:	4611      	mov	r1, r2
 802295a:	4618      	mov	r0, r3
 802295c:	f001 ff44 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 8022960:	4603      	mov	r3, r0
 8022962:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8022964:	697b      	ldr	r3, [r7, #20]
 8022966:	881b      	ldrh	r3, [r3, #0]
 8022968:	b29b      	uxth	r3, r3
 802296a:	4618      	mov	r0, r3
 802296c:	f7fd ff62 	bl	8020834 <lwip_htons>
 8022970:	4603      	mov	r3, r0
 8022972:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8022974:	697b      	ldr	r3, [r7, #20]
 8022976:	885b      	ldrh	r3, [r3, #2]
 8022978:	b29b      	uxth	r3, r3
 802297a:	4618      	mov	r0, r3
 802297c:	f7fd ff5a 	bl	8020834 <lwip_htons>
 8022980:	4603      	mov	r3, r0
 8022982:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8022984:	2300      	movs	r3, #0
 8022986:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8022988:	2300      	movs	r3, #0
 802298a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 802298c:	2300      	movs	r3, #0
 802298e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022990:	4b64      	ldr	r3, [pc, #400]	; (8022b24 <udp_input+0x21c>)
 8022992:	681b      	ldr	r3, [r3, #0]
 8022994:	627b      	str	r3, [r7, #36]	; 0x24
 8022996:	e054      	b.n	8022a42 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802299a:	8a5b      	ldrh	r3, [r3, #18]
 802299c:	89fa      	ldrh	r2, [r7, #14]
 802299e:	429a      	cmp	r2, r3
 80229a0:	d14a      	bne.n	8022a38 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80229a2:	7cfb      	ldrb	r3, [r7, #19]
 80229a4:	461a      	mov	r2, r3
 80229a6:	6839      	ldr	r1, [r7, #0]
 80229a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80229aa:	f7ff ff49 	bl	8022840 <udp_input_local_match>
 80229ae:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	d041      	beq.n	8022a38 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80229b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229b6:	7c1b      	ldrb	r3, [r3, #16]
 80229b8:	f003 0304 	and.w	r3, r3, #4
 80229bc:	2b00      	cmp	r3, #0
 80229be:	d11d      	bne.n	80229fc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80229c0:	69fb      	ldr	r3, [r7, #28]
 80229c2:	2b00      	cmp	r3, #0
 80229c4:	d102      	bne.n	80229cc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80229c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229c8:	61fb      	str	r3, [r7, #28]
 80229ca:	e017      	b.n	80229fc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80229cc:	7cfb      	ldrb	r3, [r7, #19]
 80229ce:	2b00      	cmp	r3, #0
 80229d0:	d014      	beq.n	80229fc <udp_input+0xf4>
 80229d2:	4b53      	ldr	r3, [pc, #332]	; (8022b20 <udp_input+0x218>)
 80229d4:	695b      	ldr	r3, [r3, #20]
 80229d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80229da:	d10f      	bne.n	80229fc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80229dc:	69fb      	ldr	r3, [r7, #28]
 80229de:	681a      	ldr	r2, [r3, #0]
 80229e0:	683b      	ldr	r3, [r7, #0]
 80229e2:	3304      	adds	r3, #4
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	429a      	cmp	r2, r3
 80229e8:	d008      	beq.n	80229fc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80229ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229ec:	681a      	ldr	r2, [r3, #0]
 80229ee:	683b      	ldr	r3, [r7, #0]
 80229f0:	3304      	adds	r3, #4
 80229f2:	681b      	ldr	r3, [r3, #0]
 80229f4:	429a      	cmp	r2, r3
 80229f6:	d101      	bne.n	80229fc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80229f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229fa:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80229fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80229fe:	8a9b      	ldrh	r3, [r3, #20]
 8022a00:	8a3a      	ldrh	r2, [r7, #16]
 8022a02:	429a      	cmp	r2, r3
 8022a04:	d118      	bne.n	8022a38 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a08:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022a0a:	2b00      	cmp	r3, #0
 8022a0c:	d005      	beq.n	8022a1a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a10:	685a      	ldr	r2, [r3, #4]
 8022a12:	4b43      	ldr	r3, [pc, #268]	; (8022b20 <udp_input+0x218>)
 8022a14:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022a16:	429a      	cmp	r2, r3
 8022a18:	d10e      	bne.n	8022a38 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022a1a:	6a3b      	ldr	r3, [r7, #32]
 8022a1c:	2b00      	cmp	r3, #0
 8022a1e:	d014      	beq.n	8022a4a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a22:	68da      	ldr	r2, [r3, #12]
 8022a24:	6a3b      	ldr	r3, [r7, #32]
 8022a26:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022a28:	4b3e      	ldr	r3, [pc, #248]	; (8022b24 <udp_input+0x21c>)
 8022a2a:	681a      	ldr	r2, [r3, #0]
 8022a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a2e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022a30:	4a3c      	ldr	r2, [pc, #240]	; (8022b24 <udp_input+0x21c>)
 8022a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a34:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8022a36:	e008      	b.n	8022a4a <udp_input+0x142>
      }
    }

    prev = pcb;
 8022a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a3a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a3e:	68db      	ldr	r3, [r3, #12]
 8022a40:	627b      	str	r3, [r7, #36]	; 0x24
 8022a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	d1a7      	bne.n	8022998 <udp_input+0x90>
 8022a48:	e000      	b.n	8022a4c <udp_input+0x144>
        break;
 8022a4a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a4e:	2b00      	cmp	r3, #0
 8022a50:	d101      	bne.n	8022a56 <udp_input+0x14e>
    pcb = uncon_pcb;
 8022a52:	69fb      	ldr	r3, [r7, #28]
 8022a54:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8022a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022a58:	2b00      	cmp	r3, #0
 8022a5a:	d002      	beq.n	8022a62 <udp_input+0x15a>
    for_us = 1;
 8022a5c:	2301      	movs	r3, #1
 8022a5e:	76fb      	strb	r3, [r7, #27]
 8022a60:	e00a      	b.n	8022a78 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8022a62:	683b      	ldr	r3, [r7, #0]
 8022a64:	3304      	adds	r3, #4
 8022a66:	681a      	ldr	r2, [r3, #0]
 8022a68:	4b2d      	ldr	r3, [pc, #180]	; (8022b20 <udp_input+0x218>)
 8022a6a:	695b      	ldr	r3, [r3, #20]
 8022a6c:	429a      	cmp	r2, r3
 8022a6e:	bf0c      	ite	eq
 8022a70:	2301      	moveq	r3, #1
 8022a72:	2300      	movne	r3, #0
 8022a74:	b2db      	uxtb	r3, r3
 8022a76:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022a78:	7efb      	ldrb	r3, [r7, #27]
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d041      	beq.n	8022b02 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8022a7e:	2108      	movs	r1, #8
 8022a80:	6878      	ldr	r0, [r7, #4]
 8022a82:	f7ff fa2d 	bl	8021ee0 <pbuf_remove_header>
 8022a86:	4603      	mov	r3, r0
 8022a88:	2b00      	cmp	r3, #0
 8022a8a:	d00a      	beq.n	8022aa2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8022a8c:	4b20      	ldr	r3, [pc, #128]	; (8022b10 <udp_input+0x208>)
 8022a8e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8022a92:	4925      	ldr	r1, [pc, #148]	; (8022b28 <udp_input+0x220>)
 8022a94:	4820      	ldr	r0, [pc, #128]	; (8022b18 <udp_input+0x210>)
 8022a96:	f002 ffe1 	bl	8025a5c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022a9a:	6878      	ldr	r0, [r7, #4]
 8022a9c:	f7ff faa6 	bl	8021fec <pbuf_free>
      goto end;
 8022aa0:	e032      	b.n	8022b08 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8022aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aa4:	2b00      	cmp	r3, #0
 8022aa6:	d012      	beq.n	8022ace <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8022aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aaa:	699b      	ldr	r3, [r3, #24]
 8022aac:	2b00      	cmp	r3, #0
 8022aae:	d00a      	beq.n	8022ac6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8022ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ab2:	699c      	ldr	r4, [r3, #24]
 8022ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ab6:	69d8      	ldr	r0, [r3, #28]
 8022ab8:	8a3b      	ldrh	r3, [r7, #16]
 8022aba:	9300      	str	r3, [sp, #0]
 8022abc:	4b1b      	ldr	r3, [pc, #108]	; (8022b2c <udp_input+0x224>)
 8022abe:	687a      	ldr	r2, [r7, #4]
 8022ac0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8022ac2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8022ac4:	e021      	b.n	8022b0a <udp_input+0x202>
        pbuf_free(p);
 8022ac6:	6878      	ldr	r0, [r7, #4]
 8022ac8:	f7ff fa90 	bl	8021fec <pbuf_free>
        goto end;
 8022acc:	e01c      	b.n	8022b08 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8022ace:	7cfb      	ldrb	r3, [r7, #19]
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d112      	bne.n	8022afa <udp_input+0x1f2>
 8022ad4:	4b12      	ldr	r3, [pc, #72]	; (8022b20 <udp_input+0x218>)
 8022ad6:	695b      	ldr	r3, [r3, #20]
 8022ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8022adc:	2be0      	cmp	r3, #224	; 0xe0
 8022ade:	d00c      	beq.n	8022afa <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8022ae0:	4b0f      	ldr	r3, [pc, #60]	; (8022b20 <udp_input+0x218>)
 8022ae2:	899b      	ldrh	r3, [r3, #12]
 8022ae4:	3308      	adds	r3, #8
 8022ae6:	b29b      	uxth	r3, r3
 8022ae8:	b21b      	sxth	r3, r3
 8022aea:	4619      	mov	r1, r3
 8022aec:	6878      	ldr	r0, [r7, #4]
 8022aee:	f7ff fa6a 	bl	8021fc6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8022af2:	2103      	movs	r1, #3
 8022af4:	6878      	ldr	r0, [r7, #4]
 8022af6:	f001 fb53 	bl	80241a0 <icmp_dest_unreach>
      pbuf_free(p);
 8022afa:	6878      	ldr	r0, [r7, #4]
 8022afc:	f7ff fa76 	bl	8021fec <pbuf_free>
  return;
 8022b00:	e003      	b.n	8022b0a <udp_input+0x202>
    pbuf_free(p);
 8022b02:	6878      	ldr	r0, [r7, #4]
 8022b04:	f7ff fa72 	bl	8021fec <pbuf_free>
  return;
 8022b08:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8022b0a:	372c      	adds	r7, #44	; 0x2c
 8022b0c:	46bd      	mov	sp, r7
 8022b0e:	bd90      	pop	{r4, r7, pc}
 8022b10:	0802bef4 	.word	0x0802bef4
 8022b14:	0802bfdc 	.word	0x0802bfdc
 8022b18:	0802bf8c 	.word	0x0802bf8c
 8022b1c:	0802bff4 	.word	0x0802bff4
 8022b20:	20012694 	.word	0x20012694
 8022b24:	20015cf8 	.word	0x20015cf8
 8022b28:	0802c010 	.word	0x0802c010
 8022b2c:	200126a4 	.word	0x200126a4

08022b30 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8022b30:	b580      	push	{r7, lr}
 8022b32:	b088      	sub	sp, #32
 8022b34:	af02      	add	r7, sp, #8
 8022b36:	60f8      	str	r0, [r7, #12]
 8022b38:	60b9      	str	r1, [r7, #8]
 8022b3a:	607a      	str	r2, [r7, #4]
 8022b3c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8022b3e:	68fb      	ldr	r3, [r7, #12]
 8022b40:	2b00      	cmp	r3, #0
 8022b42:	d109      	bne.n	8022b58 <udp_sendto+0x28>
 8022b44:	4b23      	ldr	r3, [pc, #140]	; (8022bd4 <udp_sendto+0xa4>)
 8022b46:	f44f 7206 	mov.w	r2, #536	; 0x218
 8022b4a:	4923      	ldr	r1, [pc, #140]	; (8022bd8 <udp_sendto+0xa8>)
 8022b4c:	4823      	ldr	r0, [pc, #140]	; (8022bdc <udp_sendto+0xac>)
 8022b4e:	f002 ff85 	bl	8025a5c <iprintf>
 8022b52:	f06f 030f 	mvn.w	r3, #15
 8022b56:	e038      	b.n	8022bca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8022b58:	68bb      	ldr	r3, [r7, #8]
 8022b5a:	2b00      	cmp	r3, #0
 8022b5c:	d109      	bne.n	8022b72 <udp_sendto+0x42>
 8022b5e:	4b1d      	ldr	r3, [pc, #116]	; (8022bd4 <udp_sendto+0xa4>)
 8022b60:	f240 2219 	movw	r2, #537	; 0x219
 8022b64:	491e      	ldr	r1, [pc, #120]	; (8022be0 <udp_sendto+0xb0>)
 8022b66:	481d      	ldr	r0, [pc, #116]	; (8022bdc <udp_sendto+0xac>)
 8022b68:	f002 ff78 	bl	8025a5c <iprintf>
 8022b6c:	f06f 030f 	mvn.w	r3, #15
 8022b70:	e02b      	b.n	8022bca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022b72:	687b      	ldr	r3, [r7, #4]
 8022b74:	2b00      	cmp	r3, #0
 8022b76:	d109      	bne.n	8022b8c <udp_sendto+0x5c>
 8022b78:	4b16      	ldr	r3, [pc, #88]	; (8022bd4 <udp_sendto+0xa4>)
 8022b7a:	f240 221a 	movw	r2, #538	; 0x21a
 8022b7e:	4919      	ldr	r1, [pc, #100]	; (8022be4 <udp_sendto+0xb4>)
 8022b80:	4816      	ldr	r0, [pc, #88]	; (8022bdc <udp_sendto+0xac>)
 8022b82:	f002 ff6b 	bl	8025a5c <iprintf>
 8022b86:	f06f 030f 	mvn.w	r3, #15
 8022b8a:	e01e      	b.n	8022bca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8022b8c:	68fb      	ldr	r3, [r7, #12]
 8022b8e:	7a1b      	ldrb	r3, [r3, #8]
 8022b90:	2b00      	cmp	r3, #0
 8022b92:	d006      	beq.n	8022ba2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8022b94:	68fb      	ldr	r3, [r7, #12]
 8022b96:	7a1b      	ldrb	r3, [r3, #8]
 8022b98:	4618      	mov	r0, r3
 8022b9a:	f7fe fef5 	bl	8021988 <netif_get_by_index>
 8022b9e:	6178      	str	r0, [r7, #20]
 8022ba0:	e003      	b.n	8022baa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8022ba2:	6878      	ldr	r0, [r7, #4]
 8022ba4:	f001 fb86 	bl	80242b4 <ip4_route>
 8022ba8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8022baa:	697b      	ldr	r3, [r7, #20]
 8022bac:	2b00      	cmp	r3, #0
 8022bae:	d102      	bne.n	8022bb6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8022bb0:	f06f 0303 	mvn.w	r3, #3
 8022bb4:	e009      	b.n	8022bca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8022bb6:	887a      	ldrh	r2, [r7, #2]
 8022bb8:	697b      	ldr	r3, [r7, #20]
 8022bba:	9300      	str	r3, [sp, #0]
 8022bbc:	4613      	mov	r3, r2
 8022bbe:	687a      	ldr	r2, [r7, #4]
 8022bc0:	68b9      	ldr	r1, [r7, #8]
 8022bc2:	68f8      	ldr	r0, [r7, #12]
 8022bc4:	f000 f810 	bl	8022be8 <udp_sendto_if>
 8022bc8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8022bca:	4618      	mov	r0, r3
 8022bcc:	3718      	adds	r7, #24
 8022bce:	46bd      	mov	sp, r7
 8022bd0:	bd80      	pop	{r7, pc}
 8022bd2:	bf00      	nop
 8022bd4:	0802bef4 	.word	0x0802bef4
 8022bd8:	0802c05c 	.word	0x0802c05c
 8022bdc:	0802bf8c 	.word	0x0802bf8c
 8022be0:	0802c074 	.word	0x0802c074
 8022be4:	0802c090 	.word	0x0802c090

08022be8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8022be8:	b580      	push	{r7, lr}
 8022bea:	b088      	sub	sp, #32
 8022bec:	af02      	add	r7, sp, #8
 8022bee:	60f8      	str	r0, [r7, #12]
 8022bf0:	60b9      	str	r1, [r7, #8]
 8022bf2:	607a      	str	r2, [r7, #4]
 8022bf4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8022bf6:	68fb      	ldr	r3, [r7, #12]
 8022bf8:	2b00      	cmp	r3, #0
 8022bfa:	d109      	bne.n	8022c10 <udp_sendto_if+0x28>
 8022bfc:	4b2e      	ldr	r3, [pc, #184]	; (8022cb8 <udp_sendto_if+0xd0>)
 8022bfe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022c02:	492e      	ldr	r1, [pc, #184]	; (8022cbc <udp_sendto_if+0xd4>)
 8022c04:	482e      	ldr	r0, [pc, #184]	; (8022cc0 <udp_sendto_if+0xd8>)
 8022c06:	f002 ff29 	bl	8025a5c <iprintf>
 8022c0a:	f06f 030f 	mvn.w	r3, #15
 8022c0e:	e04f      	b.n	8022cb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8022c10:	68bb      	ldr	r3, [r7, #8]
 8022c12:	2b00      	cmp	r3, #0
 8022c14:	d109      	bne.n	8022c2a <udp_sendto_if+0x42>
 8022c16:	4b28      	ldr	r3, [pc, #160]	; (8022cb8 <udp_sendto_if+0xd0>)
 8022c18:	f240 2281 	movw	r2, #641	; 0x281
 8022c1c:	4929      	ldr	r1, [pc, #164]	; (8022cc4 <udp_sendto_if+0xdc>)
 8022c1e:	4828      	ldr	r0, [pc, #160]	; (8022cc0 <udp_sendto_if+0xd8>)
 8022c20:	f002 ff1c 	bl	8025a5c <iprintf>
 8022c24:	f06f 030f 	mvn.w	r3, #15
 8022c28:	e042      	b.n	8022cb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022c2a:	687b      	ldr	r3, [r7, #4]
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d109      	bne.n	8022c44 <udp_sendto_if+0x5c>
 8022c30:	4b21      	ldr	r3, [pc, #132]	; (8022cb8 <udp_sendto_if+0xd0>)
 8022c32:	f240 2282 	movw	r2, #642	; 0x282
 8022c36:	4924      	ldr	r1, [pc, #144]	; (8022cc8 <udp_sendto_if+0xe0>)
 8022c38:	4821      	ldr	r0, [pc, #132]	; (8022cc0 <udp_sendto_if+0xd8>)
 8022c3a:	f002 ff0f 	bl	8025a5c <iprintf>
 8022c3e:	f06f 030f 	mvn.w	r3, #15
 8022c42:	e035      	b.n	8022cb0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8022c44:	6a3b      	ldr	r3, [r7, #32]
 8022c46:	2b00      	cmp	r3, #0
 8022c48:	d109      	bne.n	8022c5e <udp_sendto_if+0x76>
 8022c4a:	4b1b      	ldr	r3, [pc, #108]	; (8022cb8 <udp_sendto_if+0xd0>)
 8022c4c:	f240 2283 	movw	r2, #643	; 0x283
 8022c50:	491e      	ldr	r1, [pc, #120]	; (8022ccc <udp_sendto_if+0xe4>)
 8022c52:	481b      	ldr	r0, [pc, #108]	; (8022cc0 <udp_sendto_if+0xd8>)
 8022c54:	f002 ff02 	bl	8025a5c <iprintf>
 8022c58:	f06f 030f 	mvn.w	r3, #15
 8022c5c:	e028      	b.n	8022cb0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022c5e:	68fb      	ldr	r3, [r7, #12]
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d009      	beq.n	8022c78 <udp_sendto_if+0x90>
 8022c64:	68fb      	ldr	r3, [r7, #12]
 8022c66:	681b      	ldr	r3, [r3, #0]
 8022c68:	2b00      	cmp	r3, #0
 8022c6a:	d005      	beq.n	8022c78 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8022c6c:	68fb      	ldr	r3, [r7, #12]
 8022c6e:	681b      	ldr	r3, [r3, #0]
 8022c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022c74:	2be0      	cmp	r3, #224	; 0xe0
 8022c76:	d103      	bne.n	8022c80 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8022c78:	6a3b      	ldr	r3, [r7, #32]
 8022c7a:	3304      	adds	r3, #4
 8022c7c:	617b      	str	r3, [r7, #20]
 8022c7e:	e00b      	b.n	8022c98 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8022c80:	68fb      	ldr	r3, [r7, #12]
 8022c82:	681a      	ldr	r2, [r3, #0]
 8022c84:	6a3b      	ldr	r3, [r7, #32]
 8022c86:	3304      	adds	r3, #4
 8022c88:	681b      	ldr	r3, [r3, #0]
 8022c8a:	429a      	cmp	r2, r3
 8022c8c:	d002      	beq.n	8022c94 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8022c8e:	f06f 0303 	mvn.w	r3, #3
 8022c92:	e00d      	b.n	8022cb0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8022c98:	887a      	ldrh	r2, [r7, #2]
 8022c9a:	697b      	ldr	r3, [r7, #20]
 8022c9c:	9301      	str	r3, [sp, #4]
 8022c9e:	6a3b      	ldr	r3, [r7, #32]
 8022ca0:	9300      	str	r3, [sp, #0]
 8022ca2:	4613      	mov	r3, r2
 8022ca4:	687a      	ldr	r2, [r7, #4]
 8022ca6:	68b9      	ldr	r1, [r7, #8]
 8022ca8:	68f8      	ldr	r0, [r7, #12]
 8022caa:	f000 f811 	bl	8022cd0 <udp_sendto_if_src>
 8022cae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8022cb0:	4618      	mov	r0, r3
 8022cb2:	3718      	adds	r7, #24
 8022cb4:	46bd      	mov	sp, r7
 8022cb6:	bd80      	pop	{r7, pc}
 8022cb8:	0802bef4 	.word	0x0802bef4
 8022cbc:	0802c0ac 	.word	0x0802c0ac
 8022cc0:	0802bf8c 	.word	0x0802bf8c
 8022cc4:	0802c0c8 	.word	0x0802c0c8
 8022cc8:	0802c0e4 	.word	0x0802c0e4
 8022ccc:	0802c104 	.word	0x0802c104

08022cd0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8022cd0:	b580      	push	{r7, lr}
 8022cd2:	b08c      	sub	sp, #48	; 0x30
 8022cd4:	af04      	add	r7, sp, #16
 8022cd6:	60f8      	str	r0, [r7, #12]
 8022cd8:	60b9      	str	r1, [r7, #8]
 8022cda:	607a      	str	r2, [r7, #4]
 8022cdc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8022cde:	68fb      	ldr	r3, [r7, #12]
 8022ce0:	2b00      	cmp	r3, #0
 8022ce2:	d109      	bne.n	8022cf8 <udp_sendto_if_src+0x28>
 8022ce4:	4b65      	ldr	r3, [pc, #404]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022ce6:	f240 22d1 	movw	r2, #721	; 0x2d1
 8022cea:	4965      	ldr	r1, [pc, #404]	; (8022e80 <udp_sendto_if_src+0x1b0>)
 8022cec:	4865      	ldr	r0, [pc, #404]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022cee:	f002 feb5 	bl	8025a5c <iprintf>
 8022cf2:	f06f 030f 	mvn.w	r3, #15
 8022cf6:	e0bc      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8022cf8:	68bb      	ldr	r3, [r7, #8]
 8022cfa:	2b00      	cmp	r3, #0
 8022cfc:	d109      	bne.n	8022d12 <udp_sendto_if_src+0x42>
 8022cfe:	4b5f      	ldr	r3, [pc, #380]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022d00:	f240 22d2 	movw	r2, #722	; 0x2d2
 8022d04:	4960      	ldr	r1, [pc, #384]	; (8022e88 <udp_sendto_if_src+0x1b8>)
 8022d06:	485f      	ldr	r0, [pc, #380]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022d08:	f002 fea8 	bl	8025a5c <iprintf>
 8022d0c:	f06f 030f 	mvn.w	r3, #15
 8022d10:	e0af      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8022d12:	687b      	ldr	r3, [r7, #4]
 8022d14:	2b00      	cmp	r3, #0
 8022d16:	d109      	bne.n	8022d2c <udp_sendto_if_src+0x5c>
 8022d18:	4b58      	ldr	r3, [pc, #352]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022d1a:	f240 22d3 	movw	r2, #723	; 0x2d3
 8022d1e:	495b      	ldr	r1, [pc, #364]	; (8022e8c <udp_sendto_if_src+0x1bc>)
 8022d20:	4858      	ldr	r0, [pc, #352]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022d22:	f002 fe9b 	bl	8025a5c <iprintf>
 8022d26:	f06f 030f 	mvn.w	r3, #15
 8022d2a:	e0a2      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8022d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022d2e:	2b00      	cmp	r3, #0
 8022d30:	d109      	bne.n	8022d46 <udp_sendto_if_src+0x76>
 8022d32:	4b52      	ldr	r3, [pc, #328]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022d34:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8022d38:	4955      	ldr	r1, [pc, #340]	; (8022e90 <udp_sendto_if_src+0x1c0>)
 8022d3a:	4852      	ldr	r0, [pc, #328]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022d3c:	f002 fe8e 	bl	8025a5c <iprintf>
 8022d40:	f06f 030f 	mvn.w	r3, #15
 8022d44:	e095      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8022d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022d48:	2b00      	cmp	r3, #0
 8022d4a:	d109      	bne.n	8022d60 <udp_sendto_if_src+0x90>
 8022d4c:	4b4b      	ldr	r3, [pc, #300]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022d4e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8022d52:	4950      	ldr	r1, [pc, #320]	; (8022e94 <udp_sendto_if_src+0x1c4>)
 8022d54:	484b      	ldr	r0, [pc, #300]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022d56:	f002 fe81 	bl	8025a5c <iprintf>
 8022d5a:	f06f 030f 	mvn.w	r3, #15
 8022d5e:	e088      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8022d60:	68fb      	ldr	r3, [r7, #12]
 8022d62:	8a5b      	ldrh	r3, [r3, #18]
 8022d64:	2b00      	cmp	r3, #0
 8022d66:	d10f      	bne.n	8022d88 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8022d68:	68f9      	ldr	r1, [r7, #12]
 8022d6a:	68fb      	ldr	r3, [r7, #12]
 8022d6c:	8a5b      	ldrh	r3, [r3, #18]
 8022d6e:	461a      	mov	r2, r3
 8022d70:	68f8      	ldr	r0, [r7, #12]
 8022d72:	f000 f893 	bl	8022e9c <udp_bind>
 8022d76:	4603      	mov	r3, r0
 8022d78:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8022d7a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022d7e:	2b00      	cmp	r3, #0
 8022d80:	d002      	beq.n	8022d88 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8022d82:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8022d86:	e074      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8022d88:	68bb      	ldr	r3, [r7, #8]
 8022d8a:	891b      	ldrh	r3, [r3, #8]
 8022d8c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8022d90:	4293      	cmp	r3, r2
 8022d92:	d902      	bls.n	8022d9a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8022d94:	f04f 33ff 	mov.w	r3, #4294967295
 8022d98:	e06b      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8022d9a:	2108      	movs	r1, #8
 8022d9c:	68b8      	ldr	r0, [r7, #8]
 8022d9e:	f7ff f88f 	bl	8021ec0 <pbuf_add_header>
 8022da2:	4603      	mov	r3, r0
 8022da4:	2b00      	cmp	r3, #0
 8022da6:	d015      	beq.n	8022dd4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8022da8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022dac:	2108      	movs	r1, #8
 8022dae:	2022      	movs	r0, #34	; 0x22
 8022db0:	f7fe fe3a 	bl	8021a28 <pbuf_alloc>
 8022db4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8022db6:	69fb      	ldr	r3, [r7, #28]
 8022db8:	2b00      	cmp	r3, #0
 8022dba:	d102      	bne.n	8022dc2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8022dbc:	f04f 33ff 	mov.w	r3, #4294967295
 8022dc0:	e057      	b.n	8022e72 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8022dc2:	68bb      	ldr	r3, [r7, #8]
 8022dc4:	891b      	ldrh	r3, [r3, #8]
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d006      	beq.n	8022dd8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8022dca:	68b9      	ldr	r1, [r7, #8]
 8022dcc:	69f8      	ldr	r0, [r7, #28]
 8022dce:	f7ff fa25 	bl	802221c <pbuf_chain>
 8022dd2:	e001      	b.n	8022dd8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8022dd4:	68bb      	ldr	r3, [r7, #8]
 8022dd6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8022dd8:	69fb      	ldr	r3, [r7, #28]
 8022dda:	895b      	ldrh	r3, [r3, #10]
 8022ddc:	2b07      	cmp	r3, #7
 8022dde:	d806      	bhi.n	8022dee <udp_sendto_if_src+0x11e>
 8022de0:	4b26      	ldr	r3, [pc, #152]	; (8022e7c <udp_sendto_if_src+0x1ac>)
 8022de2:	f240 320d 	movw	r2, #781	; 0x30d
 8022de6:	492c      	ldr	r1, [pc, #176]	; (8022e98 <udp_sendto_if_src+0x1c8>)
 8022de8:	4826      	ldr	r0, [pc, #152]	; (8022e84 <udp_sendto_if_src+0x1b4>)
 8022dea:	f002 fe37 	bl	8025a5c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8022dee:	69fb      	ldr	r3, [r7, #28]
 8022df0:	685b      	ldr	r3, [r3, #4]
 8022df2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8022df4:	68fb      	ldr	r3, [r7, #12]
 8022df6:	8a5b      	ldrh	r3, [r3, #18]
 8022df8:	4618      	mov	r0, r3
 8022dfa:	f7fd fd1b 	bl	8020834 <lwip_htons>
 8022dfe:	4603      	mov	r3, r0
 8022e00:	461a      	mov	r2, r3
 8022e02:	697b      	ldr	r3, [r7, #20]
 8022e04:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8022e06:	887b      	ldrh	r3, [r7, #2]
 8022e08:	4618      	mov	r0, r3
 8022e0a:	f7fd fd13 	bl	8020834 <lwip_htons>
 8022e0e:	4603      	mov	r3, r0
 8022e10:	461a      	mov	r2, r3
 8022e12:	697b      	ldr	r3, [r7, #20]
 8022e14:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8022e16:	697b      	ldr	r3, [r7, #20]
 8022e18:	2200      	movs	r2, #0
 8022e1a:	719a      	strb	r2, [r3, #6]
 8022e1c:	2200      	movs	r2, #0
 8022e1e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8022e20:	69fb      	ldr	r3, [r7, #28]
 8022e22:	891b      	ldrh	r3, [r3, #8]
 8022e24:	4618      	mov	r0, r3
 8022e26:	f7fd fd05 	bl	8020834 <lwip_htons>
 8022e2a:	4603      	mov	r3, r0
 8022e2c:	461a      	mov	r2, r3
 8022e2e:	697b      	ldr	r3, [r7, #20]
 8022e30:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8022e32:	2311      	movs	r3, #17
 8022e34:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8022e36:	68fb      	ldr	r3, [r7, #12]
 8022e38:	7adb      	ldrb	r3, [r3, #11]
 8022e3a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8022e3c:	68fb      	ldr	r3, [r7, #12]
 8022e3e:	7a9b      	ldrb	r3, [r3, #10]
 8022e40:	7cb9      	ldrb	r1, [r7, #18]
 8022e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8022e44:	9202      	str	r2, [sp, #8]
 8022e46:	7cfa      	ldrb	r2, [r7, #19]
 8022e48:	9201      	str	r2, [sp, #4]
 8022e4a:	9300      	str	r3, [sp, #0]
 8022e4c:	460b      	mov	r3, r1
 8022e4e:	687a      	ldr	r2, [r7, #4]
 8022e50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8022e52:	69f8      	ldr	r0, [r7, #28]
 8022e54:	f001 fc0c 	bl	8024670 <ip4_output_if_src>
 8022e58:	4603      	mov	r3, r0
 8022e5a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8022e5c:	69fa      	ldr	r2, [r7, #28]
 8022e5e:	68bb      	ldr	r3, [r7, #8]
 8022e60:	429a      	cmp	r2, r3
 8022e62:	d004      	beq.n	8022e6e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8022e64:	69f8      	ldr	r0, [r7, #28]
 8022e66:	f7ff f8c1 	bl	8021fec <pbuf_free>
    q = NULL;
 8022e6a:	2300      	movs	r3, #0
 8022e6c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8022e6e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8022e72:	4618      	mov	r0, r3
 8022e74:	3720      	adds	r7, #32
 8022e76:	46bd      	mov	sp, r7
 8022e78:	bd80      	pop	{r7, pc}
 8022e7a:	bf00      	nop
 8022e7c:	0802bef4 	.word	0x0802bef4
 8022e80:	0802c124 	.word	0x0802c124
 8022e84:	0802bf8c 	.word	0x0802bf8c
 8022e88:	0802c144 	.word	0x0802c144
 8022e8c:	0802c164 	.word	0x0802c164
 8022e90:	0802c188 	.word	0x0802c188
 8022e94:	0802c1ac 	.word	0x0802c1ac
 8022e98:	0802c1d0 	.word	0x0802c1d0

08022e9c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8022e9c:	b580      	push	{r7, lr}
 8022e9e:	b086      	sub	sp, #24
 8022ea0:	af00      	add	r7, sp, #0
 8022ea2:	60f8      	str	r0, [r7, #12]
 8022ea4:	60b9      	str	r1, [r7, #8]
 8022ea6:	4613      	mov	r3, r2
 8022ea8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8022eaa:	68bb      	ldr	r3, [r7, #8]
 8022eac:	2b00      	cmp	r3, #0
 8022eae:	d101      	bne.n	8022eb4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8022eb0:	4b39      	ldr	r3, [pc, #228]	; (8022f98 <udp_bind+0xfc>)
 8022eb2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8022eb4:	68fb      	ldr	r3, [r7, #12]
 8022eb6:	2b00      	cmp	r3, #0
 8022eb8:	d109      	bne.n	8022ece <udp_bind+0x32>
 8022eba:	4b38      	ldr	r3, [pc, #224]	; (8022f9c <udp_bind+0x100>)
 8022ebc:	f240 32b7 	movw	r2, #951	; 0x3b7
 8022ec0:	4937      	ldr	r1, [pc, #220]	; (8022fa0 <udp_bind+0x104>)
 8022ec2:	4838      	ldr	r0, [pc, #224]	; (8022fa4 <udp_bind+0x108>)
 8022ec4:	f002 fdca 	bl	8025a5c <iprintf>
 8022ec8:	f06f 030f 	mvn.w	r3, #15
 8022ecc:	e060      	b.n	8022f90 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8022ece:	2300      	movs	r3, #0
 8022ed0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022ed2:	4b35      	ldr	r3, [pc, #212]	; (8022fa8 <udp_bind+0x10c>)
 8022ed4:	681b      	ldr	r3, [r3, #0]
 8022ed6:	617b      	str	r3, [r7, #20]
 8022ed8:	e009      	b.n	8022eee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8022eda:	68fa      	ldr	r2, [r7, #12]
 8022edc:	697b      	ldr	r3, [r7, #20]
 8022ede:	429a      	cmp	r2, r3
 8022ee0:	d102      	bne.n	8022ee8 <udp_bind+0x4c>
      rebind = 1;
 8022ee2:	2301      	movs	r3, #1
 8022ee4:	74fb      	strb	r3, [r7, #19]
      break;
 8022ee6:	e005      	b.n	8022ef4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022ee8:	697b      	ldr	r3, [r7, #20]
 8022eea:	68db      	ldr	r3, [r3, #12]
 8022eec:	617b      	str	r3, [r7, #20]
 8022eee:	697b      	ldr	r3, [r7, #20]
 8022ef0:	2b00      	cmp	r3, #0
 8022ef2:	d1f2      	bne.n	8022eda <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8022ef4:	88fb      	ldrh	r3, [r7, #6]
 8022ef6:	2b00      	cmp	r3, #0
 8022ef8:	d109      	bne.n	8022f0e <udp_bind+0x72>
    port = udp_new_port();
 8022efa:	f7ff fc69 	bl	80227d0 <udp_new_port>
 8022efe:	4603      	mov	r3, r0
 8022f00:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8022f02:	88fb      	ldrh	r3, [r7, #6]
 8022f04:	2b00      	cmp	r3, #0
 8022f06:	d12c      	bne.n	8022f62 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8022f08:	f06f 0307 	mvn.w	r3, #7
 8022f0c:	e040      	b.n	8022f90 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022f0e:	4b26      	ldr	r3, [pc, #152]	; (8022fa8 <udp_bind+0x10c>)
 8022f10:	681b      	ldr	r3, [r3, #0]
 8022f12:	617b      	str	r3, [r7, #20]
 8022f14:	e022      	b.n	8022f5c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8022f16:	68fa      	ldr	r2, [r7, #12]
 8022f18:	697b      	ldr	r3, [r7, #20]
 8022f1a:	429a      	cmp	r2, r3
 8022f1c:	d01b      	beq.n	8022f56 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8022f1e:	697b      	ldr	r3, [r7, #20]
 8022f20:	8a5b      	ldrh	r3, [r3, #18]
 8022f22:	88fa      	ldrh	r2, [r7, #6]
 8022f24:	429a      	cmp	r2, r3
 8022f26:	d116      	bne.n	8022f56 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022f28:	697b      	ldr	r3, [r7, #20]
 8022f2a:	681a      	ldr	r2, [r3, #0]
 8022f2c:	68bb      	ldr	r3, [r7, #8]
 8022f2e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8022f30:	429a      	cmp	r2, r3
 8022f32:	d00d      	beq.n	8022f50 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022f34:	68bb      	ldr	r3, [r7, #8]
 8022f36:	2b00      	cmp	r3, #0
 8022f38:	d00a      	beq.n	8022f50 <udp_bind+0xb4>
 8022f3a:	68bb      	ldr	r3, [r7, #8]
 8022f3c:	681b      	ldr	r3, [r3, #0]
 8022f3e:	2b00      	cmp	r3, #0
 8022f40:	d006      	beq.n	8022f50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8022f42:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	d003      	beq.n	8022f50 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8022f48:	697b      	ldr	r3, [r7, #20]
 8022f4a:	681b      	ldr	r3, [r3, #0]
 8022f4c:	2b00      	cmp	r3, #0
 8022f4e:	d102      	bne.n	8022f56 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8022f50:	f06f 0307 	mvn.w	r3, #7
 8022f54:	e01c      	b.n	8022f90 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8022f56:	697b      	ldr	r3, [r7, #20]
 8022f58:	68db      	ldr	r3, [r3, #12]
 8022f5a:	617b      	str	r3, [r7, #20]
 8022f5c:	697b      	ldr	r3, [r7, #20]
 8022f5e:	2b00      	cmp	r3, #0
 8022f60:	d1d9      	bne.n	8022f16 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8022f62:	68bb      	ldr	r3, [r7, #8]
 8022f64:	2b00      	cmp	r3, #0
 8022f66:	d002      	beq.n	8022f6e <udp_bind+0xd2>
 8022f68:	68bb      	ldr	r3, [r7, #8]
 8022f6a:	681b      	ldr	r3, [r3, #0]
 8022f6c:	e000      	b.n	8022f70 <udp_bind+0xd4>
 8022f6e:	2300      	movs	r3, #0
 8022f70:	68fa      	ldr	r2, [r7, #12]
 8022f72:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8022f74:	68fb      	ldr	r3, [r7, #12]
 8022f76:	88fa      	ldrh	r2, [r7, #6]
 8022f78:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8022f7a:	7cfb      	ldrb	r3, [r7, #19]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	d106      	bne.n	8022f8e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8022f80:	4b09      	ldr	r3, [pc, #36]	; (8022fa8 <udp_bind+0x10c>)
 8022f82:	681a      	ldr	r2, [r3, #0]
 8022f84:	68fb      	ldr	r3, [r7, #12]
 8022f86:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8022f88:	4a07      	ldr	r2, [pc, #28]	; (8022fa8 <udp_bind+0x10c>)
 8022f8a:	68fb      	ldr	r3, [r7, #12]
 8022f8c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8022f8e:	2300      	movs	r3, #0
}
 8022f90:	4618      	mov	r0, r3
 8022f92:	3718      	adds	r7, #24
 8022f94:	46bd      	mov	sp, r7
 8022f96:	bd80      	pop	{r7, pc}
 8022f98:	0802cf60 	.word	0x0802cf60
 8022f9c:	0802bef4 	.word	0x0802bef4
 8022fa0:	0802c200 	.word	0x0802c200
 8022fa4:	0802bf8c 	.word	0x0802bf8c
 8022fa8:	20015cf8 	.word	0x20015cf8

08022fac <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8022fac:	b580      	push	{r7, lr}
 8022fae:	b084      	sub	sp, #16
 8022fb0:	af00      	add	r7, sp, #0
 8022fb2:	60f8      	str	r0, [r7, #12]
 8022fb4:	60b9      	str	r1, [r7, #8]
 8022fb6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8022fb8:	68fb      	ldr	r3, [r7, #12]
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d107      	bne.n	8022fce <udp_recv+0x22>
 8022fbe:	4b08      	ldr	r3, [pc, #32]	; (8022fe0 <udp_recv+0x34>)
 8022fc0:	f240 428a 	movw	r2, #1162	; 0x48a
 8022fc4:	4907      	ldr	r1, [pc, #28]	; (8022fe4 <udp_recv+0x38>)
 8022fc6:	4808      	ldr	r0, [pc, #32]	; (8022fe8 <udp_recv+0x3c>)
 8022fc8:	f002 fd48 	bl	8025a5c <iprintf>
 8022fcc:	e005      	b.n	8022fda <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8022fce:	68fb      	ldr	r3, [r7, #12]
 8022fd0:	68ba      	ldr	r2, [r7, #8]
 8022fd2:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8022fd4:	68fb      	ldr	r3, [r7, #12]
 8022fd6:	687a      	ldr	r2, [r7, #4]
 8022fd8:	61da      	str	r2, [r3, #28]
}
 8022fda:	3710      	adds	r7, #16
 8022fdc:	46bd      	mov	sp, r7
 8022fde:	bd80      	pop	{r7, pc}
 8022fe0:	0802bef4 	.word	0x0802bef4
 8022fe4:	0802c26c 	.word	0x0802c26c
 8022fe8:	0802bf8c 	.word	0x0802bf8c

08022fec <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8022fec:	b580      	push	{r7, lr}
 8022fee:	b084      	sub	sp, #16
 8022ff0:	af00      	add	r7, sp, #0
 8022ff2:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8022ff4:	687b      	ldr	r3, [r7, #4]
 8022ff6:	2b00      	cmp	r3, #0
 8022ff8:	d107      	bne.n	802300a <udp_remove+0x1e>
 8022ffa:	4b19      	ldr	r3, [pc, #100]	; (8023060 <udp_remove+0x74>)
 8022ffc:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8023000:	4918      	ldr	r1, [pc, #96]	; (8023064 <udp_remove+0x78>)
 8023002:	4819      	ldr	r0, [pc, #100]	; (8023068 <udp_remove+0x7c>)
 8023004:	f002 fd2a 	bl	8025a5c <iprintf>
 8023008:	e026      	b.n	8023058 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802300a:	4b18      	ldr	r3, [pc, #96]	; (802306c <udp_remove+0x80>)
 802300c:	681b      	ldr	r3, [r3, #0]
 802300e:	687a      	ldr	r2, [r7, #4]
 8023010:	429a      	cmp	r2, r3
 8023012:	d105      	bne.n	8023020 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8023014:	4b15      	ldr	r3, [pc, #84]	; (802306c <udp_remove+0x80>)
 8023016:	681b      	ldr	r3, [r3, #0]
 8023018:	68db      	ldr	r3, [r3, #12]
 802301a:	4a14      	ldr	r2, [pc, #80]	; (802306c <udp_remove+0x80>)
 802301c:	6013      	str	r3, [r2, #0]
 802301e:	e017      	b.n	8023050 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023020:	4b12      	ldr	r3, [pc, #72]	; (802306c <udp_remove+0x80>)
 8023022:	681b      	ldr	r3, [r3, #0]
 8023024:	60fb      	str	r3, [r7, #12]
 8023026:	e010      	b.n	802304a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8023028:	68fb      	ldr	r3, [r7, #12]
 802302a:	68db      	ldr	r3, [r3, #12]
 802302c:	2b00      	cmp	r3, #0
 802302e:	d009      	beq.n	8023044 <udp_remove+0x58>
 8023030:	68fb      	ldr	r3, [r7, #12]
 8023032:	68db      	ldr	r3, [r3, #12]
 8023034:	687a      	ldr	r2, [r7, #4]
 8023036:	429a      	cmp	r2, r3
 8023038:	d104      	bne.n	8023044 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802303a:	687b      	ldr	r3, [r7, #4]
 802303c:	68da      	ldr	r2, [r3, #12]
 802303e:	68fb      	ldr	r3, [r7, #12]
 8023040:	60da      	str	r2, [r3, #12]
        break;
 8023042:	e005      	b.n	8023050 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023044:	68fb      	ldr	r3, [r7, #12]
 8023046:	68db      	ldr	r3, [r3, #12]
 8023048:	60fb      	str	r3, [r7, #12]
 802304a:	68fb      	ldr	r3, [r7, #12]
 802304c:	2b00      	cmp	r3, #0
 802304e:	d1eb      	bne.n	8023028 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8023050:	6879      	ldr	r1, [r7, #4]
 8023052:	2000      	movs	r0, #0
 8023054:	f7fe f8ba 	bl	80211cc <memp_free>
}
 8023058:	3710      	adds	r7, #16
 802305a:	46bd      	mov	sp, r7
 802305c:	bd80      	pop	{r7, pc}
 802305e:	bf00      	nop
 8023060:	0802bef4 	.word	0x0802bef4
 8023064:	0802c284 	.word	0x0802c284
 8023068:	0802bf8c 	.word	0x0802bf8c
 802306c:	20015cf8 	.word	0x20015cf8

08023070 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8023070:	b580      	push	{r7, lr}
 8023072:	b082      	sub	sp, #8
 8023074:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8023076:	2000      	movs	r0, #0
 8023078:	f7fe f838 	bl	80210ec <memp_malloc>
 802307c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 802307e:	687b      	ldr	r3, [r7, #4]
 8023080:	2b00      	cmp	r3, #0
 8023082:	d007      	beq.n	8023094 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8023084:	2220      	movs	r2, #32
 8023086:	2100      	movs	r1, #0
 8023088:	6878      	ldr	r0, [r7, #4]
 802308a:	f002 fbff 	bl	802588c <memset>
    pcb->ttl = UDP_TTL;
 802308e:	687b      	ldr	r3, [r7, #4]
 8023090:	22ff      	movs	r2, #255	; 0xff
 8023092:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8023094:	687b      	ldr	r3, [r7, #4]
}
 8023096:	4618      	mov	r0, r3
 8023098:	3708      	adds	r7, #8
 802309a:	46bd      	mov	sp, r7
 802309c:	bd80      	pop	{r7, pc}
	...

080230a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80230a0:	b480      	push	{r7}
 80230a2:	b085      	sub	sp, #20
 80230a4:	af00      	add	r7, sp, #0
 80230a6:	6078      	str	r0, [r7, #4]
 80230a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80230aa:	687b      	ldr	r3, [r7, #4]
 80230ac:	2b00      	cmp	r3, #0
 80230ae:	d01e      	beq.n	80230ee <udp_netif_ip_addr_changed+0x4e>
 80230b0:	687b      	ldr	r3, [r7, #4]
 80230b2:	681b      	ldr	r3, [r3, #0]
 80230b4:	2b00      	cmp	r3, #0
 80230b6:	d01a      	beq.n	80230ee <udp_netif_ip_addr_changed+0x4e>
 80230b8:	683b      	ldr	r3, [r7, #0]
 80230ba:	2b00      	cmp	r3, #0
 80230bc:	d017      	beq.n	80230ee <udp_netif_ip_addr_changed+0x4e>
 80230be:	683b      	ldr	r3, [r7, #0]
 80230c0:	681b      	ldr	r3, [r3, #0]
 80230c2:	2b00      	cmp	r3, #0
 80230c4:	d013      	beq.n	80230ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80230c6:	4b0d      	ldr	r3, [pc, #52]	; (80230fc <udp_netif_ip_addr_changed+0x5c>)
 80230c8:	681b      	ldr	r3, [r3, #0]
 80230ca:	60fb      	str	r3, [r7, #12]
 80230cc:	e00c      	b.n	80230e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80230ce:	68fb      	ldr	r3, [r7, #12]
 80230d0:	681a      	ldr	r2, [r3, #0]
 80230d2:	687b      	ldr	r3, [r7, #4]
 80230d4:	681b      	ldr	r3, [r3, #0]
 80230d6:	429a      	cmp	r2, r3
 80230d8:	d103      	bne.n	80230e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80230da:	683b      	ldr	r3, [r7, #0]
 80230dc:	681a      	ldr	r2, [r3, #0]
 80230de:	68fb      	ldr	r3, [r7, #12]
 80230e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80230e2:	68fb      	ldr	r3, [r7, #12]
 80230e4:	68db      	ldr	r3, [r3, #12]
 80230e6:	60fb      	str	r3, [r7, #12]
 80230e8:	68fb      	ldr	r3, [r7, #12]
 80230ea:	2b00      	cmp	r3, #0
 80230ec:	d1ef      	bne.n	80230ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80230ee:	bf00      	nop
 80230f0:	3714      	adds	r7, #20
 80230f2:	46bd      	mov	sp, r7
 80230f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80230f8:	4770      	bx	lr
 80230fa:	bf00      	nop
 80230fc:	20015cf8 	.word	0x20015cf8

08023100 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8023100:	b580      	push	{r7, lr}
 8023102:	b082      	sub	sp, #8
 8023104:	af00      	add	r7, sp, #0
 8023106:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8023108:	4915      	ldr	r1, [pc, #84]	; (8023160 <etharp_free_entry+0x60>)
 802310a:	687a      	ldr	r2, [r7, #4]
 802310c:	4613      	mov	r3, r2
 802310e:	005b      	lsls	r3, r3, #1
 8023110:	4413      	add	r3, r2
 8023112:	00db      	lsls	r3, r3, #3
 8023114:	440b      	add	r3, r1
 8023116:	681b      	ldr	r3, [r3, #0]
 8023118:	2b00      	cmp	r3, #0
 802311a:	d013      	beq.n	8023144 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 802311c:	4910      	ldr	r1, [pc, #64]	; (8023160 <etharp_free_entry+0x60>)
 802311e:	687a      	ldr	r2, [r7, #4]
 8023120:	4613      	mov	r3, r2
 8023122:	005b      	lsls	r3, r3, #1
 8023124:	4413      	add	r3, r2
 8023126:	00db      	lsls	r3, r3, #3
 8023128:	440b      	add	r3, r1
 802312a:	681b      	ldr	r3, [r3, #0]
 802312c:	4618      	mov	r0, r3
 802312e:	f7fe ff5d 	bl	8021fec <pbuf_free>
    arp_table[i].q = NULL;
 8023132:	490b      	ldr	r1, [pc, #44]	; (8023160 <etharp_free_entry+0x60>)
 8023134:	687a      	ldr	r2, [r7, #4]
 8023136:	4613      	mov	r3, r2
 8023138:	005b      	lsls	r3, r3, #1
 802313a:	4413      	add	r3, r2
 802313c:	00db      	lsls	r3, r3, #3
 802313e:	440b      	add	r3, r1
 8023140:	2200      	movs	r2, #0
 8023142:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8023144:	4906      	ldr	r1, [pc, #24]	; (8023160 <etharp_free_entry+0x60>)
 8023146:	687a      	ldr	r2, [r7, #4]
 8023148:	4613      	mov	r3, r2
 802314a:	005b      	lsls	r3, r3, #1
 802314c:	4413      	add	r3, r2
 802314e:	00db      	lsls	r3, r3, #3
 8023150:	440b      	add	r3, r1
 8023152:	3314      	adds	r3, #20
 8023154:	2200      	movs	r2, #0
 8023156:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8023158:	bf00      	nop
 802315a:	3708      	adds	r7, #8
 802315c:	46bd      	mov	sp, r7
 802315e:	bd80      	pop	{r7, pc}
 8023160:	20015cfc 	.word	0x20015cfc

08023164 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8023164:	b580      	push	{r7, lr}
 8023166:	b082      	sub	sp, #8
 8023168:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802316a:	2300      	movs	r3, #0
 802316c:	607b      	str	r3, [r7, #4]
 802316e:	e096      	b.n	802329e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8023170:	494f      	ldr	r1, [pc, #316]	; (80232b0 <etharp_tmr+0x14c>)
 8023172:	687a      	ldr	r2, [r7, #4]
 8023174:	4613      	mov	r3, r2
 8023176:	005b      	lsls	r3, r3, #1
 8023178:	4413      	add	r3, r2
 802317a:	00db      	lsls	r3, r3, #3
 802317c:	440b      	add	r3, r1
 802317e:	3314      	adds	r3, #20
 8023180:	781b      	ldrb	r3, [r3, #0]
 8023182:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8023184:	78fb      	ldrb	r3, [r7, #3]
 8023186:	2b00      	cmp	r3, #0
 8023188:	f000 8086 	beq.w	8023298 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 802318c:	4948      	ldr	r1, [pc, #288]	; (80232b0 <etharp_tmr+0x14c>)
 802318e:	687a      	ldr	r2, [r7, #4]
 8023190:	4613      	mov	r3, r2
 8023192:	005b      	lsls	r3, r3, #1
 8023194:	4413      	add	r3, r2
 8023196:	00db      	lsls	r3, r3, #3
 8023198:	440b      	add	r3, r1
 802319a:	3312      	adds	r3, #18
 802319c:	881b      	ldrh	r3, [r3, #0]
 802319e:	3301      	adds	r3, #1
 80231a0:	b298      	uxth	r0, r3
 80231a2:	4943      	ldr	r1, [pc, #268]	; (80232b0 <etharp_tmr+0x14c>)
 80231a4:	687a      	ldr	r2, [r7, #4]
 80231a6:	4613      	mov	r3, r2
 80231a8:	005b      	lsls	r3, r3, #1
 80231aa:	4413      	add	r3, r2
 80231ac:	00db      	lsls	r3, r3, #3
 80231ae:	440b      	add	r3, r1
 80231b0:	3312      	adds	r3, #18
 80231b2:	4602      	mov	r2, r0
 80231b4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80231b6:	493e      	ldr	r1, [pc, #248]	; (80232b0 <etharp_tmr+0x14c>)
 80231b8:	687a      	ldr	r2, [r7, #4]
 80231ba:	4613      	mov	r3, r2
 80231bc:	005b      	lsls	r3, r3, #1
 80231be:	4413      	add	r3, r2
 80231c0:	00db      	lsls	r3, r3, #3
 80231c2:	440b      	add	r3, r1
 80231c4:	3312      	adds	r3, #18
 80231c6:	881b      	ldrh	r3, [r3, #0]
 80231c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80231cc:	d215      	bcs.n	80231fa <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80231ce:	4938      	ldr	r1, [pc, #224]	; (80232b0 <etharp_tmr+0x14c>)
 80231d0:	687a      	ldr	r2, [r7, #4]
 80231d2:	4613      	mov	r3, r2
 80231d4:	005b      	lsls	r3, r3, #1
 80231d6:	4413      	add	r3, r2
 80231d8:	00db      	lsls	r3, r3, #3
 80231da:	440b      	add	r3, r1
 80231dc:	3314      	adds	r3, #20
 80231de:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80231e0:	2b01      	cmp	r3, #1
 80231e2:	d10e      	bne.n	8023202 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80231e4:	4932      	ldr	r1, [pc, #200]	; (80232b0 <etharp_tmr+0x14c>)
 80231e6:	687a      	ldr	r2, [r7, #4]
 80231e8:	4613      	mov	r3, r2
 80231ea:	005b      	lsls	r3, r3, #1
 80231ec:	4413      	add	r3, r2
 80231ee:	00db      	lsls	r3, r3, #3
 80231f0:	440b      	add	r3, r1
 80231f2:	3312      	adds	r3, #18
 80231f4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80231f6:	2b04      	cmp	r3, #4
 80231f8:	d903      	bls.n	8023202 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80231fa:	6878      	ldr	r0, [r7, #4]
 80231fc:	f7ff ff80 	bl	8023100 <etharp_free_entry>
 8023200:	e04a      	b.n	8023298 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023202:	492b      	ldr	r1, [pc, #172]	; (80232b0 <etharp_tmr+0x14c>)
 8023204:	687a      	ldr	r2, [r7, #4]
 8023206:	4613      	mov	r3, r2
 8023208:	005b      	lsls	r3, r3, #1
 802320a:	4413      	add	r3, r2
 802320c:	00db      	lsls	r3, r3, #3
 802320e:	440b      	add	r3, r1
 8023210:	3314      	adds	r3, #20
 8023212:	781b      	ldrb	r3, [r3, #0]
 8023214:	2b03      	cmp	r3, #3
 8023216:	d10a      	bne.n	802322e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8023218:	4925      	ldr	r1, [pc, #148]	; (80232b0 <etharp_tmr+0x14c>)
 802321a:	687a      	ldr	r2, [r7, #4]
 802321c:	4613      	mov	r3, r2
 802321e:	005b      	lsls	r3, r3, #1
 8023220:	4413      	add	r3, r2
 8023222:	00db      	lsls	r3, r3, #3
 8023224:	440b      	add	r3, r1
 8023226:	3314      	adds	r3, #20
 8023228:	2204      	movs	r2, #4
 802322a:	701a      	strb	r2, [r3, #0]
 802322c:	e034      	b.n	8023298 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802322e:	4920      	ldr	r1, [pc, #128]	; (80232b0 <etharp_tmr+0x14c>)
 8023230:	687a      	ldr	r2, [r7, #4]
 8023232:	4613      	mov	r3, r2
 8023234:	005b      	lsls	r3, r3, #1
 8023236:	4413      	add	r3, r2
 8023238:	00db      	lsls	r3, r3, #3
 802323a:	440b      	add	r3, r1
 802323c:	3314      	adds	r3, #20
 802323e:	781b      	ldrb	r3, [r3, #0]
 8023240:	2b04      	cmp	r3, #4
 8023242:	d10a      	bne.n	802325a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8023244:	491a      	ldr	r1, [pc, #104]	; (80232b0 <etharp_tmr+0x14c>)
 8023246:	687a      	ldr	r2, [r7, #4]
 8023248:	4613      	mov	r3, r2
 802324a:	005b      	lsls	r3, r3, #1
 802324c:	4413      	add	r3, r2
 802324e:	00db      	lsls	r3, r3, #3
 8023250:	440b      	add	r3, r1
 8023252:	3314      	adds	r3, #20
 8023254:	2202      	movs	r2, #2
 8023256:	701a      	strb	r2, [r3, #0]
 8023258:	e01e      	b.n	8023298 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802325a:	4915      	ldr	r1, [pc, #84]	; (80232b0 <etharp_tmr+0x14c>)
 802325c:	687a      	ldr	r2, [r7, #4]
 802325e:	4613      	mov	r3, r2
 8023260:	005b      	lsls	r3, r3, #1
 8023262:	4413      	add	r3, r2
 8023264:	00db      	lsls	r3, r3, #3
 8023266:	440b      	add	r3, r1
 8023268:	3314      	adds	r3, #20
 802326a:	781b      	ldrb	r3, [r3, #0]
 802326c:	2b01      	cmp	r3, #1
 802326e:	d113      	bne.n	8023298 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8023270:	490f      	ldr	r1, [pc, #60]	; (80232b0 <etharp_tmr+0x14c>)
 8023272:	687a      	ldr	r2, [r7, #4]
 8023274:	4613      	mov	r3, r2
 8023276:	005b      	lsls	r3, r3, #1
 8023278:	4413      	add	r3, r2
 802327a:	00db      	lsls	r3, r3, #3
 802327c:	440b      	add	r3, r1
 802327e:	3308      	adds	r3, #8
 8023280:	6818      	ldr	r0, [r3, #0]
 8023282:	687a      	ldr	r2, [r7, #4]
 8023284:	4613      	mov	r3, r2
 8023286:	005b      	lsls	r3, r3, #1
 8023288:	4413      	add	r3, r2
 802328a:	00db      	lsls	r3, r3, #3
 802328c:	4a08      	ldr	r2, [pc, #32]	; (80232b0 <etharp_tmr+0x14c>)
 802328e:	4413      	add	r3, r2
 8023290:	3304      	adds	r3, #4
 8023292:	4619      	mov	r1, r3
 8023294:	f000 fe6e 	bl	8023f74 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023298:	687b      	ldr	r3, [r7, #4]
 802329a:	3301      	adds	r3, #1
 802329c:	607b      	str	r3, [r7, #4]
 802329e:	687b      	ldr	r3, [r7, #4]
 80232a0:	2b31      	cmp	r3, #49	; 0x31
 80232a2:	f77f af65 	ble.w	8023170 <etharp_tmr+0xc>
      }
    }
  }
}
 80232a6:	bf00      	nop
 80232a8:	bf00      	nop
 80232aa:	3708      	adds	r7, #8
 80232ac:	46bd      	mov	sp, r7
 80232ae:	bd80      	pop	{r7, pc}
 80232b0:	20015cfc 	.word	0x20015cfc

080232b4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80232b4:	b580      	push	{r7, lr}
 80232b6:	b08a      	sub	sp, #40	; 0x28
 80232b8:	af00      	add	r7, sp, #0
 80232ba:	60f8      	str	r0, [r7, #12]
 80232bc:	460b      	mov	r3, r1
 80232be:	607a      	str	r2, [r7, #4]
 80232c0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80232c2:	2332      	movs	r3, #50	; 0x32
 80232c4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80232c6:	2332      	movs	r3, #50	; 0x32
 80232c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80232ca:	2332      	movs	r3, #50	; 0x32
 80232cc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80232ce:	2300      	movs	r3, #0
 80232d0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80232d2:	2332      	movs	r3, #50	; 0x32
 80232d4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80232d6:	2300      	movs	r3, #0
 80232d8:	83bb      	strh	r3, [r7, #28]
 80232da:	2300      	movs	r3, #0
 80232dc:	837b      	strh	r3, [r7, #26]
 80232de:	2300      	movs	r3, #0
 80232e0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80232e2:	2300      	movs	r3, #0
 80232e4:	843b      	strh	r3, [r7, #32]
 80232e6:	e0ae      	b.n	8023446 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80232e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80232ec:	49a6      	ldr	r1, [pc, #664]	; (8023588 <etharp_find_entry+0x2d4>)
 80232ee:	4613      	mov	r3, r2
 80232f0:	005b      	lsls	r3, r3, #1
 80232f2:	4413      	add	r3, r2
 80232f4:	00db      	lsls	r3, r3, #3
 80232f6:	440b      	add	r3, r1
 80232f8:	3314      	adds	r3, #20
 80232fa:	781b      	ldrb	r3, [r3, #0]
 80232fc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80232fe:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023302:	2b32      	cmp	r3, #50	; 0x32
 8023304:	d105      	bne.n	8023312 <etharp_find_entry+0x5e>
 8023306:	7dfb      	ldrb	r3, [r7, #23]
 8023308:	2b00      	cmp	r3, #0
 802330a:	d102      	bne.n	8023312 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 802330c:	8c3b      	ldrh	r3, [r7, #32]
 802330e:	847b      	strh	r3, [r7, #34]	; 0x22
 8023310:	e095      	b.n	802343e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8023312:	7dfb      	ldrb	r3, [r7, #23]
 8023314:	2b00      	cmp	r3, #0
 8023316:	f000 8092 	beq.w	802343e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802331a:	7dfb      	ldrb	r3, [r7, #23]
 802331c:	2b01      	cmp	r3, #1
 802331e:	d009      	beq.n	8023334 <etharp_find_entry+0x80>
 8023320:	7dfb      	ldrb	r3, [r7, #23]
 8023322:	2b01      	cmp	r3, #1
 8023324:	d806      	bhi.n	8023334 <etharp_find_entry+0x80>
 8023326:	4b99      	ldr	r3, [pc, #612]	; (802358c <etharp_find_entry+0x2d8>)
 8023328:	f240 1223 	movw	r2, #291	; 0x123
 802332c:	4998      	ldr	r1, [pc, #608]	; (8023590 <etharp_find_entry+0x2dc>)
 802332e:	4899      	ldr	r0, [pc, #612]	; (8023594 <etharp_find_entry+0x2e0>)
 8023330:	f002 fb94 	bl	8025a5c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023334:	68fb      	ldr	r3, [r7, #12]
 8023336:	2b00      	cmp	r3, #0
 8023338:	d020      	beq.n	802337c <etharp_find_entry+0xc8>
 802333a:	68fb      	ldr	r3, [r7, #12]
 802333c:	6819      	ldr	r1, [r3, #0]
 802333e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023342:	4891      	ldr	r0, [pc, #580]	; (8023588 <etharp_find_entry+0x2d4>)
 8023344:	4613      	mov	r3, r2
 8023346:	005b      	lsls	r3, r3, #1
 8023348:	4413      	add	r3, r2
 802334a:	00db      	lsls	r3, r3, #3
 802334c:	4403      	add	r3, r0
 802334e:	3304      	adds	r3, #4
 8023350:	681b      	ldr	r3, [r3, #0]
 8023352:	4299      	cmp	r1, r3
 8023354:	d112      	bne.n	802337c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8023356:	687b      	ldr	r3, [r7, #4]
 8023358:	2b00      	cmp	r3, #0
 802335a:	d00c      	beq.n	8023376 <etharp_find_entry+0xc2>
 802335c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023360:	4989      	ldr	r1, [pc, #548]	; (8023588 <etharp_find_entry+0x2d4>)
 8023362:	4613      	mov	r3, r2
 8023364:	005b      	lsls	r3, r3, #1
 8023366:	4413      	add	r3, r2
 8023368:	00db      	lsls	r3, r3, #3
 802336a:	440b      	add	r3, r1
 802336c:	3308      	adds	r3, #8
 802336e:	681b      	ldr	r3, [r3, #0]
 8023370:	687a      	ldr	r2, [r7, #4]
 8023372:	429a      	cmp	r2, r3
 8023374:	d102      	bne.n	802337c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8023376:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802337a:	e100      	b.n	802357e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 802337c:	7dfb      	ldrb	r3, [r7, #23]
 802337e:	2b01      	cmp	r3, #1
 8023380:	d140      	bne.n	8023404 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8023382:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023386:	4980      	ldr	r1, [pc, #512]	; (8023588 <etharp_find_entry+0x2d4>)
 8023388:	4613      	mov	r3, r2
 802338a:	005b      	lsls	r3, r3, #1
 802338c:	4413      	add	r3, r2
 802338e:	00db      	lsls	r3, r3, #3
 8023390:	440b      	add	r3, r1
 8023392:	681b      	ldr	r3, [r3, #0]
 8023394:	2b00      	cmp	r3, #0
 8023396:	d01a      	beq.n	80233ce <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8023398:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802339c:	497a      	ldr	r1, [pc, #488]	; (8023588 <etharp_find_entry+0x2d4>)
 802339e:	4613      	mov	r3, r2
 80233a0:	005b      	lsls	r3, r3, #1
 80233a2:	4413      	add	r3, r2
 80233a4:	00db      	lsls	r3, r3, #3
 80233a6:	440b      	add	r3, r1
 80233a8:	3312      	adds	r3, #18
 80233aa:	881b      	ldrh	r3, [r3, #0]
 80233ac:	8bba      	ldrh	r2, [r7, #28]
 80233ae:	429a      	cmp	r2, r3
 80233b0:	d845      	bhi.n	802343e <etharp_find_entry+0x18a>
            old_queue = i;
 80233b2:	8c3b      	ldrh	r3, [r7, #32]
 80233b4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80233b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80233ba:	4973      	ldr	r1, [pc, #460]	; (8023588 <etharp_find_entry+0x2d4>)
 80233bc:	4613      	mov	r3, r2
 80233be:	005b      	lsls	r3, r3, #1
 80233c0:	4413      	add	r3, r2
 80233c2:	00db      	lsls	r3, r3, #3
 80233c4:	440b      	add	r3, r1
 80233c6:	3312      	adds	r3, #18
 80233c8:	881b      	ldrh	r3, [r3, #0]
 80233ca:	83bb      	strh	r3, [r7, #28]
 80233cc:	e037      	b.n	802343e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80233ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80233d2:	496d      	ldr	r1, [pc, #436]	; (8023588 <etharp_find_entry+0x2d4>)
 80233d4:	4613      	mov	r3, r2
 80233d6:	005b      	lsls	r3, r3, #1
 80233d8:	4413      	add	r3, r2
 80233da:	00db      	lsls	r3, r3, #3
 80233dc:	440b      	add	r3, r1
 80233de:	3312      	adds	r3, #18
 80233e0:	881b      	ldrh	r3, [r3, #0]
 80233e2:	8b7a      	ldrh	r2, [r7, #26]
 80233e4:	429a      	cmp	r2, r3
 80233e6:	d82a      	bhi.n	802343e <etharp_find_entry+0x18a>
            old_pending = i;
 80233e8:	8c3b      	ldrh	r3, [r7, #32]
 80233ea:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80233ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80233f0:	4965      	ldr	r1, [pc, #404]	; (8023588 <etharp_find_entry+0x2d4>)
 80233f2:	4613      	mov	r3, r2
 80233f4:	005b      	lsls	r3, r3, #1
 80233f6:	4413      	add	r3, r2
 80233f8:	00db      	lsls	r3, r3, #3
 80233fa:	440b      	add	r3, r1
 80233fc:	3312      	adds	r3, #18
 80233fe:	881b      	ldrh	r3, [r3, #0]
 8023400:	837b      	strh	r3, [r7, #26]
 8023402:	e01c      	b.n	802343e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8023404:	7dfb      	ldrb	r3, [r7, #23]
 8023406:	2b01      	cmp	r3, #1
 8023408:	d919      	bls.n	802343e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802340a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802340e:	495e      	ldr	r1, [pc, #376]	; (8023588 <etharp_find_entry+0x2d4>)
 8023410:	4613      	mov	r3, r2
 8023412:	005b      	lsls	r3, r3, #1
 8023414:	4413      	add	r3, r2
 8023416:	00db      	lsls	r3, r3, #3
 8023418:	440b      	add	r3, r1
 802341a:	3312      	adds	r3, #18
 802341c:	881b      	ldrh	r3, [r3, #0]
 802341e:	8b3a      	ldrh	r2, [r7, #24]
 8023420:	429a      	cmp	r2, r3
 8023422:	d80c      	bhi.n	802343e <etharp_find_entry+0x18a>
            old_stable = i;
 8023424:	8c3b      	ldrh	r3, [r7, #32]
 8023426:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8023428:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802342c:	4956      	ldr	r1, [pc, #344]	; (8023588 <etharp_find_entry+0x2d4>)
 802342e:	4613      	mov	r3, r2
 8023430:	005b      	lsls	r3, r3, #1
 8023432:	4413      	add	r3, r2
 8023434:	00db      	lsls	r3, r3, #3
 8023436:	440b      	add	r3, r1
 8023438:	3312      	adds	r3, #18
 802343a:	881b      	ldrh	r3, [r3, #0]
 802343c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802343e:	8c3b      	ldrh	r3, [r7, #32]
 8023440:	3301      	adds	r3, #1
 8023442:	b29b      	uxth	r3, r3
 8023444:	843b      	strh	r3, [r7, #32]
 8023446:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802344a:	2b31      	cmp	r3, #49	; 0x31
 802344c:	f77f af4c 	ble.w	80232e8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8023450:	7afb      	ldrb	r3, [r7, #11]
 8023452:	f003 0302 	and.w	r3, r3, #2
 8023456:	2b00      	cmp	r3, #0
 8023458:	d108      	bne.n	802346c <etharp_find_entry+0x1b8>
 802345a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802345e:	2b32      	cmp	r3, #50	; 0x32
 8023460:	d107      	bne.n	8023472 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8023462:	7afb      	ldrb	r3, [r7, #11]
 8023464:	f003 0301 	and.w	r3, r3, #1
 8023468:	2b00      	cmp	r3, #0
 802346a:	d102      	bne.n	8023472 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 802346c:	f04f 33ff 	mov.w	r3, #4294967295
 8023470:	e085      	b.n	802357e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8023472:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023476:	2b31      	cmp	r3, #49	; 0x31
 8023478:	dc02      	bgt.n	8023480 <etharp_find_entry+0x1cc>
    i = empty;
 802347a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802347c:	843b      	strh	r3, [r7, #32]
 802347e:	e039      	b.n	80234f4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8023480:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8023484:	2b31      	cmp	r3, #49	; 0x31
 8023486:	dc14      	bgt.n	80234b2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8023488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802348a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 802348c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023490:	493d      	ldr	r1, [pc, #244]	; (8023588 <etharp_find_entry+0x2d4>)
 8023492:	4613      	mov	r3, r2
 8023494:	005b      	lsls	r3, r3, #1
 8023496:	4413      	add	r3, r2
 8023498:	00db      	lsls	r3, r3, #3
 802349a:	440b      	add	r3, r1
 802349c:	681b      	ldr	r3, [r3, #0]
 802349e:	2b00      	cmp	r3, #0
 80234a0:	d018      	beq.n	80234d4 <etharp_find_entry+0x220>
 80234a2:	4b3a      	ldr	r3, [pc, #232]	; (802358c <etharp_find_entry+0x2d8>)
 80234a4:	f240 126d 	movw	r2, #365	; 0x16d
 80234a8:	493b      	ldr	r1, [pc, #236]	; (8023598 <etharp_find_entry+0x2e4>)
 80234aa:	483a      	ldr	r0, [pc, #232]	; (8023594 <etharp_find_entry+0x2e0>)
 80234ac:	f002 fad6 	bl	8025a5c <iprintf>
 80234b0:	e010      	b.n	80234d4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80234b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80234b6:	2b31      	cmp	r3, #49	; 0x31
 80234b8:	dc02      	bgt.n	80234c0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80234ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80234bc:	843b      	strh	r3, [r7, #32]
 80234be:	e009      	b.n	80234d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80234c0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80234c4:	2b31      	cmp	r3, #49	; 0x31
 80234c6:	dc02      	bgt.n	80234ce <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80234c8:	8bfb      	ldrh	r3, [r7, #30]
 80234ca:	843b      	strh	r3, [r7, #32]
 80234cc:	e002      	b.n	80234d4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80234ce:	f04f 33ff 	mov.w	r3, #4294967295
 80234d2:	e054      	b.n	802357e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80234d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80234d8:	2b31      	cmp	r3, #49	; 0x31
 80234da:	dd06      	ble.n	80234ea <etharp_find_entry+0x236>
 80234dc:	4b2b      	ldr	r3, [pc, #172]	; (802358c <etharp_find_entry+0x2d8>)
 80234de:	f240 127f 	movw	r2, #383	; 0x17f
 80234e2:	492e      	ldr	r1, [pc, #184]	; (802359c <etharp_find_entry+0x2e8>)
 80234e4:	482b      	ldr	r0, [pc, #172]	; (8023594 <etharp_find_entry+0x2e0>)
 80234e6:	f002 fab9 	bl	8025a5c <iprintf>
    etharp_free_entry(i);
 80234ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80234ee:	4618      	mov	r0, r3
 80234f0:	f7ff fe06 	bl	8023100 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80234f4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80234f8:	2b31      	cmp	r3, #49	; 0x31
 80234fa:	dd06      	ble.n	802350a <etharp_find_entry+0x256>
 80234fc:	4b23      	ldr	r3, [pc, #140]	; (802358c <etharp_find_entry+0x2d8>)
 80234fe:	f240 1283 	movw	r2, #387	; 0x183
 8023502:	4926      	ldr	r1, [pc, #152]	; (802359c <etharp_find_entry+0x2e8>)
 8023504:	4823      	ldr	r0, [pc, #140]	; (8023594 <etharp_find_entry+0x2e0>)
 8023506:	f002 faa9 	bl	8025a5c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802350a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802350e:	491e      	ldr	r1, [pc, #120]	; (8023588 <etharp_find_entry+0x2d4>)
 8023510:	4613      	mov	r3, r2
 8023512:	005b      	lsls	r3, r3, #1
 8023514:	4413      	add	r3, r2
 8023516:	00db      	lsls	r3, r3, #3
 8023518:	440b      	add	r3, r1
 802351a:	3314      	adds	r3, #20
 802351c:	781b      	ldrb	r3, [r3, #0]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d006      	beq.n	8023530 <etharp_find_entry+0x27c>
 8023522:	4b1a      	ldr	r3, [pc, #104]	; (802358c <etharp_find_entry+0x2d8>)
 8023524:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8023528:	491d      	ldr	r1, [pc, #116]	; (80235a0 <etharp_find_entry+0x2ec>)
 802352a:	481a      	ldr	r0, [pc, #104]	; (8023594 <etharp_find_entry+0x2e0>)
 802352c:	f002 fa96 	bl	8025a5c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023530:	68fb      	ldr	r3, [r7, #12]
 8023532:	2b00      	cmp	r3, #0
 8023534:	d00b      	beq.n	802354e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802353a:	68fb      	ldr	r3, [r7, #12]
 802353c:	6819      	ldr	r1, [r3, #0]
 802353e:	4812      	ldr	r0, [pc, #72]	; (8023588 <etharp_find_entry+0x2d4>)
 8023540:	4613      	mov	r3, r2
 8023542:	005b      	lsls	r3, r3, #1
 8023544:	4413      	add	r3, r2
 8023546:	00db      	lsls	r3, r3, #3
 8023548:	4403      	add	r3, r0
 802354a:	3304      	adds	r3, #4
 802354c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802354e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023552:	490d      	ldr	r1, [pc, #52]	; (8023588 <etharp_find_entry+0x2d4>)
 8023554:	4613      	mov	r3, r2
 8023556:	005b      	lsls	r3, r3, #1
 8023558:	4413      	add	r3, r2
 802355a:	00db      	lsls	r3, r3, #3
 802355c:	440b      	add	r3, r1
 802355e:	3312      	adds	r3, #18
 8023560:	2200      	movs	r2, #0
 8023562:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023564:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023568:	4907      	ldr	r1, [pc, #28]	; (8023588 <etharp_find_entry+0x2d4>)
 802356a:	4613      	mov	r3, r2
 802356c:	005b      	lsls	r3, r3, #1
 802356e:	4413      	add	r3, r2
 8023570:	00db      	lsls	r3, r3, #3
 8023572:	440b      	add	r3, r1
 8023574:	3308      	adds	r3, #8
 8023576:	687a      	ldr	r2, [r7, #4]
 8023578:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 802357a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802357e:	4618      	mov	r0, r3
 8023580:	3728      	adds	r7, #40	; 0x28
 8023582:	46bd      	mov	sp, r7
 8023584:	bd80      	pop	{r7, pc}
 8023586:	bf00      	nop
 8023588:	20015cfc 	.word	0x20015cfc
 802358c:	0802c29c 	.word	0x0802c29c
 8023590:	0802c318 	.word	0x0802c318
 8023594:	0802c358 	.word	0x0802c358
 8023598:	0802c380 	.word	0x0802c380
 802359c:	0802c398 	.word	0x0802c398
 80235a0:	0802c3ac 	.word	0x0802c3ac

080235a4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80235a4:	b580      	push	{r7, lr}
 80235a6:	b088      	sub	sp, #32
 80235a8:	af02      	add	r7, sp, #8
 80235aa:	60f8      	str	r0, [r7, #12]
 80235ac:	60b9      	str	r1, [r7, #8]
 80235ae:	607a      	str	r2, [r7, #4]
 80235b0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80235b2:	68fb      	ldr	r3, [r7, #12]
 80235b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80235b8:	2b06      	cmp	r3, #6
 80235ba:	d006      	beq.n	80235ca <etharp_update_arp_entry+0x26>
 80235bc:	4b48      	ldr	r3, [pc, #288]	; (80236e0 <etharp_update_arp_entry+0x13c>)
 80235be:	f240 12a9 	movw	r2, #425	; 0x1a9
 80235c2:	4948      	ldr	r1, [pc, #288]	; (80236e4 <etharp_update_arp_entry+0x140>)
 80235c4:	4848      	ldr	r0, [pc, #288]	; (80236e8 <etharp_update_arp_entry+0x144>)
 80235c6:	f002 fa49 	bl	8025a5c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80235ca:	68bb      	ldr	r3, [r7, #8]
 80235cc:	2b00      	cmp	r3, #0
 80235ce:	d012      	beq.n	80235f6 <etharp_update_arp_entry+0x52>
 80235d0:	68bb      	ldr	r3, [r7, #8]
 80235d2:	681b      	ldr	r3, [r3, #0]
 80235d4:	2b00      	cmp	r3, #0
 80235d6:	d00e      	beq.n	80235f6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80235d8:	68bb      	ldr	r3, [r7, #8]
 80235da:	681b      	ldr	r3, [r3, #0]
 80235dc:	68f9      	ldr	r1, [r7, #12]
 80235de:	4618      	mov	r0, r3
 80235e0:	f001 f902 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 80235e4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80235e6:	2b00      	cmp	r3, #0
 80235e8:	d105      	bne.n	80235f6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80235ea:	68bb      	ldr	r3, [r7, #8]
 80235ec:	681b      	ldr	r3, [r3, #0]
 80235ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80235f2:	2be0      	cmp	r3, #224	; 0xe0
 80235f4:	d102      	bne.n	80235fc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80235f6:	f06f 030f 	mvn.w	r3, #15
 80235fa:	e06c      	b.n	80236d6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80235fc:	78fb      	ldrb	r3, [r7, #3]
 80235fe:	68fa      	ldr	r2, [r7, #12]
 8023600:	4619      	mov	r1, r3
 8023602:	68b8      	ldr	r0, [r7, #8]
 8023604:	f7ff fe56 	bl	80232b4 <etharp_find_entry>
 8023608:	4603      	mov	r3, r0
 802360a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 802360c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023610:	2b00      	cmp	r3, #0
 8023612:	da02      	bge.n	802361a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8023614:	8afb      	ldrh	r3, [r7, #22]
 8023616:	b25b      	sxtb	r3, r3
 8023618:	e05d      	b.n	80236d6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802361a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802361e:	4933      	ldr	r1, [pc, #204]	; (80236ec <etharp_update_arp_entry+0x148>)
 8023620:	4613      	mov	r3, r2
 8023622:	005b      	lsls	r3, r3, #1
 8023624:	4413      	add	r3, r2
 8023626:	00db      	lsls	r3, r3, #3
 8023628:	440b      	add	r3, r1
 802362a:	3314      	adds	r3, #20
 802362c:	2202      	movs	r2, #2
 802362e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8023630:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023634:	492d      	ldr	r1, [pc, #180]	; (80236ec <etharp_update_arp_entry+0x148>)
 8023636:	4613      	mov	r3, r2
 8023638:	005b      	lsls	r3, r3, #1
 802363a:	4413      	add	r3, r2
 802363c:	00db      	lsls	r3, r3, #3
 802363e:	440b      	add	r3, r1
 8023640:	3308      	adds	r3, #8
 8023642:	68fa      	ldr	r2, [r7, #12]
 8023644:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023646:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802364a:	4613      	mov	r3, r2
 802364c:	005b      	lsls	r3, r3, #1
 802364e:	4413      	add	r3, r2
 8023650:	00db      	lsls	r3, r3, #3
 8023652:	3308      	adds	r3, #8
 8023654:	4a25      	ldr	r2, [pc, #148]	; (80236ec <etharp_update_arp_entry+0x148>)
 8023656:	4413      	add	r3, r2
 8023658:	3304      	adds	r3, #4
 802365a:	2206      	movs	r2, #6
 802365c:	6879      	ldr	r1, [r7, #4]
 802365e:	4618      	mov	r0, r3
 8023660:	f002 f8ec 	bl	802583c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8023664:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023668:	4920      	ldr	r1, [pc, #128]	; (80236ec <etharp_update_arp_entry+0x148>)
 802366a:	4613      	mov	r3, r2
 802366c:	005b      	lsls	r3, r3, #1
 802366e:	4413      	add	r3, r2
 8023670:	00db      	lsls	r3, r3, #3
 8023672:	440b      	add	r3, r1
 8023674:	3312      	adds	r3, #18
 8023676:	2200      	movs	r2, #0
 8023678:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 802367a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802367e:	491b      	ldr	r1, [pc, #108]	; (80236ec <etharp_update_arp_entry+0x148>)
 8023680:	4613      	mov	r3, r2
 8023682:	005b      	lsls	r3, r3, #1
 8023684:	4413      	add	r3, r2
 8023686:	00db      	lsls	r3, r3, #3
 8023688:	440b      	add	r3, r1
 802368a:	681b      	ldr	r3, [r3, #0]
 802368c:	2b00      	cmp	r3, #0
 802368e:	d021      	beq.n	80236d4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8023690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023694:	4915      	ldr	r1, [pc, #84]	; (80236ec <etharp_update_arp_entry+0x148>)
 8023696:	4613      	mov	r3, r2
 8023698:	005b      	lsls	r3, r3, #1
 802369a:	4413      	add	r3, r2
 802369c:	00db      	lsls	r3, r3, #3
 802369e:	440b      	add	r3, r1
 80236a0:	681b      	ldr	r3, [r3, #0]
 80236a2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80236a4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80236a8:	4910      	ldr	r1, [pc, #64]	; (80236ec <etharp_update_arp_entry+0x148>)
 80236aa:	4613      	mov	r3, r2
 80236ac:	005b      	lsls	r3, r3, #1
 80236ae:	4413      	add	r3, r2
 80236b0:	00db      	lsls	r3, r3, #3
 80236b2:	440b      	add	r3, r1
 80236b4:	2200      	movs	r2, #0
 80236b6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80236b8:	68fb      	ldr	r3, [r7, #12]
 80236ba:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80236be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80236c2:	9300      	str	r3, [sp, #0]
 80236c4:	687b      	ldr	r3, [r7, #4]
 80236c6:	6939      	ldr	r1, [r7, #16]
 80236c8:	68f8      	ldr	r0, [r7, #12]
 80236ca:	f002 f82b 	bl	8025724 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80236ce:	6938      	ldr	r0, [r7, #16]
 80236d0:	f7fe fc8c 	bl	8021fec <pbuf_free>
  }
  return ERR_OK;
 80236d4:	2300      	movs	r3, #0
}
 80236d6:	4618      	mov	r0, r3
 80236d8:	3718      	adds	r7, #24
 80236da:	46bd      	mov	sp, r7
 80236dc:	bd80      	pop	{r7, pc}
 80236de:	bf00      	nop
 80236e0:	0802c29c 	.word	0x0802c29c
 80236e4:	0802c3d8 	.word	0x0802c3d8
 80236e8:	0802c358 	.word	0x0802c358
 80236ec:	20015cfc 	.word	0x20015cfc

080236f0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80236f0:	b580      	push	{r7, lr}
 80236f2:	b084      	sub	sp, #16
 80236f4:	af00      	add	r7, sp, #0
 80236f6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80236f8:	2300      	movs	r3, #0
 80236fa:	60fb      	str	r3, [r7, #12]
 80236fc:	e01e      	b.n	802373c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80236fe:	4913      	ldr	r1, [pc, #76]	; (802374c <etharp_cleanup_netif+0x5c>)
 8023700:	68fa      	ldr	r2, [r7, #12]
 8023702:	4613      	mov	r3, r2
 8023704:	005b      	lsls	r3, r3, #1
 8023706:	4413      	add	r3, r2
 8023708:	00db      	lsls	r3, r3, #3
 802370a:	440b      	add	r3, r1
 802370c:	3314      	adds	r3, #20
 802370e:	781b      	ldrb	r3, [r3, #0]
 8023710:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8023712:	7afb      	ldrb	r3, [r7, #11]
 8023714:	2b00      	cmp	r3, #0
 8023716:	d00e      	beq.n	8023736 <etharp_cleanup_netif+0x46>
 8023718:	490c      	ldr	r1, [pc, #48]	; (802374c <etharp_cleanup_netif+0x5c>)
 802371a:	68fa      	ldr	r2, [r7, #12]
 802371c:	4613      	mov	r3, r2
 802371e:	005b      	lsls	r3, r3, #1
 8023720:	4413      	add	r3, r2
 8023722:	00db      	lsls	r3, r3, #3
 8023724:	440b      	add	r3, r1
 8023726:	3308      	adds	r3, #8
 8023728:	681b      	ldr	r3, [r3, #0]
 802372a:	687a      	ldr	r2, [r7, #4]
 802372c:	429a      	cmp	r2, r3
 802372e:	d102      	bne.n	8023736 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8023730:	68f8      	ldr	r0, [r7, #12]
 8023732:	f7ff fce5 	bl	8023100 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023736:	68fb      	ldr	r3, [r7, #12]
 8023738:	3301      	adds	r3, #1
 802373a:	60fb      	str	r3, [r7, #12]
 802373c:	68fb      	ldr	r3, [r7, #12]
 802373e:	2b31      	cmp	r3, #49	; 0x31
 8023740:	dddd      	ble.n	80236fe <etharp_cleanup_netif+0xe>
    }
  }
}
 8023742:	bf00      	nop
 8023744:	bf00      	nop
 8023746:	3710      	adds	r7, #16
 8023748:	46bd      	mov	sp, r7
 802374a:	bd80      	pop	{r7, pc}
 802374c:	20015cfc 	.word	0x20015cfc

08023750 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8023750:	b5b0      	push	{r4, r5, r7, lr}
 8023752:	b08a      	sub	sp, #40	; 0x28
 8023754:	af04      	add	r7, sp, #16
 8023756:	6078      	str	r0, [r7, #4]
 8023758:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802375a:	683b      	ldr	r3, [r7, #0]
 802375c:	2b00      	cmp	r3, #0
 802375e:	d107      	bne.n	8023770 <etharp_input+0x20>
 8023760:	4b3d      	ldr	r3, [pc, #244]	; (8023858 <etharp_input+0x108>)
 8023762:	f240 228a 	movw	r2, #650	; 0x28a
 8023766:	493d      	ldr	r1, [pc, #244]	; (802385c <etharp_input+0x10c>)
 8023768:	483d      	ldr	r0, [pc, #244]	; (8023860 <etharp_input+0x110>)
 802376a:	f002 f977 	bl	8025a5c <iprintf>
 802376e:	e06f      	b.n	8023850 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8023770:	687b      	ldr	r3, [r7, #4]
 8023772:	685b      	ldr	r3, [r3, #4]
 8023774:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023776:	693b      	ldr	r3, [r7, #16]
 8023778:	881b      	ldrh	r3, [r3, #0]
 802377a:	b29b      	uxth	r3, r3
 802377c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023780:	d10c      	bne.n	802379c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023782:	693b      	ldr	r3, [r7, #16]
 8023784:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023786:	2b06      	cmp	r3, #6
 8023788:	d108      	bne.n	802379c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 802378a:	693b      	ldr	r3, [r7, #16]
 802378c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802378e:	2b04      	cmp	r3, #4
 8023790:	d104      	bne.n	802379c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8023792:	693b      	ldr	r3, [r7, #16]
 8023794:	885b      	ldrh	r3, [r3, #2]
 8023796:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023798:	2b08      	cmp	r3, #8
 802379a:	d003      	beq.n	80237a4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 802379c:	6878      	ldr	r0, [r7, #4]
 802379e:	f7fe fc25 	bl	8021fec <pbuf_free>
    return;
 80237a2:	e055      	b.n	8023850 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80237a4:	693b      	ldr	r3, [r7, #16]
 80237a6:	330e      	adds	r3, #14
 80237a8:	681b      	ldr	r3, [r3, #0]
 80237aa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80237ac:	693b      	ldr	r3, [r7, #16]
 80237ae:	3318      	adds	r3, #24
 80237b0:	681b      	ldr	r3, [r3, #0]
 80237b2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80237b4:	683b      	ldr	r3, [r7, #0]
 80237b6:	3304      	adds	r3, #4
 80237b8:	681b      	ldr	r3, [r3, #0]
 80237ba:	2b00      	cmp	r3, #0
 80237bc:	d102      	bne.n	80237c4 <etharp_input+0x74>
    for_us = 0;
 80237be:	2300      	movs	r3, #0
 80237c0:	75fb      	strb	r3, [r7, #23]
 80237c2:	e009      	b.n	80237d8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80237c4:	68ba      	ldr	r2, [r7, #8]
 80237c6:	683b      	ldr	r3, [r7, #0]
 80237c8:	3304      	adds	r3, #4
 80237ca:	681b      	ldr	r3, [r3, #0]
 80237cc:	429a      	cmp	r2, r3
 80237ce:	bf0c      	ite	eq
 80237d0:	2301      	moveq	r3, #1
 80237d2:	2300      	movne	r3, #0
 80237d4:	b2db      	uxtb	r3, r3
 80237d6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80237d8:	693b      	ldr	r3, [r7, #16]
 80237da:	f103 0208 	add.w	r2, r3, #8
 80237de:	7dfb      	ldrb	r3, [r7, #23]
 80237e0:	2b00      	cmp	r3, #0
 80237e2:	d001      	beq.n	80237e8 <etharp_input+0x98>
 80237e4:	2301      	movs	r3, #1
 80237e6:	e000      	b.n	80237ea <etharp_input+0x9a>
 80237e8:	2302      	movs	r3, #2
 80237ea:	f107 010c 	add.w	r1, r7, #12
 80237ee:	6838      	ldr	r0, [r7, #0]
 80237f0:	f7ff fed8 	bl	80235a4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80237f4:	693b      	ldr	r3, [r7, #16]
 80237f6:	88db      	ldrh	r3, [r3, #6]
 80237f8:	b29b      	uxth	r3, r3
 80237fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80237fe:	d003      	beq.n	8023808 <etharp_input+0xb8>
 8023800:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023804:	d01e      	beq.n	8023844 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8023806:	e020      	b.n	802384a <etharp_input+0xfa>
      if (for_us) {
 8023808:	7dfb      	ldrb	r3, [r7, #23]
 802380a:	2b00      	cmp	r3, #0
 802380c:	d01c      	beq.n	8023848 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802380e:	683b      	ldr	r3, [r7, #0]
 8023810:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8023814:	693b      	ldr	r3, [r7, #16]
 8023816:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802381a:	683b      	ldr	r3, [r7, #0]
 802381c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8023820:	683b      	ldr	r3, [r7, #0]
 8023822:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8023824:	693a      	ldr	r2, [r7, #16]
 8023826:	3208      	adds	r2, #8
        etharp_raw(netif,
 8023828:	2102      	movs	r1, #2
 802382a:	9103      	str	r1, [sp, #12]
 802382c:	f107 010c 	add.w	r1, r7, #12
 8023830:	9102      	str	r1, [sp, #8]
 8023832:	9201      	str	r2, [sp, #4]
 8023834:	9300      	str	r3, [sp, #0]
 8023836:	462b      	mov	r3, r5
 8023838:	4622      	mov	r2, r4
 802383a:	4601      	mov	r1, r0
 802383c:	6838      	ldr	r0, [r7, #0]
 802383e:	f000 faeb 	bl	8023e18 <etharp_raw>
      break;
 8023842:	e001      	b.n	8023848 <etharp_input+0xf8>
      break;
 8023844:	bf00      	nop
 8023846:	e000      	b.n	802384a <etharp_input+0xfa>
      break;
 8023848:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802384a:	6878      	ldr	r0, [r7, #4]
 802384c:	f7fe fbce 	bl	8021fec <pbuf_free>
}
 8023850:	3718      	adds	r7, #24
 8023852:	46bd      	mov	sp, r7
 8023854:	bdb0      	pop	{r4, r5, r7, pc}
 8023856:	bf00      	nop
 8023858:	0802c29c 	.word	0x0802c29c
 802385c:	0802c430 	.word	0x0802c430
 8023860:	0802c358 	.word	0x0802c358

08023864 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8023864:	b580      	push	{r7, lr}
 8023866:	b086      	sub	sp, #24
 8023868:	af02      	add	r7, sp, #8
 802386a:	60f8      	str	r0, [r7, #12]
 802386c:	60b9      	str	r1, [r7, #8]
 802386e:	4613      	mov	r3, r2
 8023870:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023872:	79fa      	ldrb	r2, [r7, #7]
 8023874:	4944      	ldr	r1, [pc, #272]	; (8023988 <etharp_output_to_arp_index+0x124>)
 8023876:	4613      	mov	r3, r2
 8023878:	005b      	lsls	r3, r3, #1
 802387a:	4413      	add	r3, r2
 802387c:	00db      	lsls	r3, r3, #3
 802387e:	440b      	add	r3, r1
 8023880:	3314      	adds	r3, #20
 8023882:	781b      	ldrb	r3, [r3, #0]
 8023884:	2b01      	cmp	r3, #1
 8023886:	d806      	bhi.n	8023896 <etharp_output_to_arp_index+0x32>
 8023888:	4b40      	ldr	r3, [pc, #256]	; (802398c <etharp_output_to_arp_index+0x128>)
 802388a:	f240 22ee 	movw	r2, #750	; 0x2ee
 802388e:	4940      	ldr	r1, [pc, #256]	; (8023990 <etharp_output_to_arp_index+0x12c>)
 8023890:	4840      	ldr	r0, [pc, #256]	; (8023994 <etharp_output_to_arp_index+0x130>)
 8023892:	f002 f8e3 	bl	8025a5c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8023896:	79fa      	ldrb	r2, [r7, #7]
 8023898:	493b      	ldr	r1, [pc, #236]	; (8023988 <etharp_output_to_arp_index+0x124>)
 802389a:	4613      	mov	r3, r2
 802389c:	005b      	lsls	r3, r3, #1
 802389e:	4413      	add	r3, r2
 80238a0:	00db      	lsls	r3, r3, #3
 80238a2:	440b      	add	r3, r1
 80238a4:	3314      	adds	r3, #20
 80238a6:	781b      	ldrb	r3, [r3, #0]
 80238a8:	2b02      	cmp	r3, #2
 80238aa:	d153      	bne.n	8023954 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80238ac:	79fa      	ldrb	r2, [r7, #7]
 80238ae:	4936      	ldr	r1, [pc, #216]	; (8023988 <etharp_output_to_arp_index+0x124>)
 80238b0:	4613      	mov	r3, r2
 80238b2:	005b      	lsls	r3, r3, #1
 80238b4:	4413      	add	r3, r2
 80238b6:	00db      	lsls	r3, r3, #3
 80238b8:	440b      	add	r3, r1
 80238ba:	3312      	adds	r3, #18
 80238bc:	881b      	ldrh	r3, [r3, #0]
 80238be:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80238c2:	d919      	bls.n	80238f8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80238c4:	79fa      	ldrb	r2, [r7, #7]
 80238c6:	4613      	mov	r3, r2
 80238c8:	005b      	lsls	r3, r3, #1
 80238ca:	4413      	add	r3, r2
 80238cc:	00db      	lsls	r3, r3, #3
 80238ce:	4a2e      	ldr	r2, [pc, #184]	; (8023988 <etharp_output_to_arp_index+0x124>)
 80238d0:	4413      	add	r3, r2
 80238d2:	3304      	adds	r3, #4
 80238d4:	4619      	mov	r1, r3
 80238d6:	68f8      	ldr	r0, [r7, #12]
 80238d8:	f000 fb4c 	bl	8023f74 <etharp_request>
 80238dc:	4603      	mov	r3, r0
 80238de:	2b00      	cmp	r3, #0
 80238e0:	d138      	bne.n	8023954 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80238e2:	79fa      	ldrb	r2, [r7, #7]
 80238e4:	4928      	ldr	r1, [pc, #160]	; (8023988 <etharp_output_to_arp_index+0x124>)
 80238e6:	4613      	mov	r3, r2
 80238e8:	005b      	lsls	r3, r3, #1
 80238ea:	4413      	add	r3, r2
 80238ec:	00db      	lsls	r3, r3, #3
 80238ee:	440b      	add	r3, r1
 80238f0:	3314      	adds	r3, #20
 80238f2:	2203      	movs	r2, #3
 80238f4:	701a      	strb	r2, [r3, #0]
 80238f6:	e02d      	b.n	8023954 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80238f8:	79fa      	ldrb	r2, [r7, #7]
 80238fa:	4923      	ldr	r1, [pc, #140]	; (8023988 <etharp_output_to_arp_index+0x124>)
 80238fc:	4613      	mov	r3, r2
 80238fe:	005b      	lsls	r3, r3, #1
 8023900:	4413      	add	r3, r2
 8023902:	00db      	lsls	r3, r3, #3
 8023904:	440b      	add	r3, r1
 8023906:	3312      	adds	r3, #18
 8023908:	881b      	ldrh	r3, [r3, #0]
 802390a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802390e:	d321      	bcc.n	8023954 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023910:	79fa      	ldrb	r2, [r7, #7]
 8023912:	4613      	mov	r3, r2
 8023914:	005b      	lsls	r3, r3, #1
 8023916:	4413      	add	r3, r2
 8023918:	00db      	lsls	r3, r3, #3
 802391a:	4a1b      	ldr	r2, [pc, #108]	; (8023988 <etharp_output_to_arp_index+0x124>)
 802391c:	4413      	add	r3, r2
 802391e:	1d19      	adds	r1, r3, #4
 8023920:	79fa      	ldrb	r2, [r7, #7]
 8023922:	4613      	mov	r3, r2
 8023924:	005b      	lsls	r3, r3, #1
 8023926:	4413      	add	r3, r2
 8023928:	00db      	lsls	r3, r3, #3
 802392a:	3308      	adds	r3, #8
 802392c:	4a16      	ldr	r2, [pc, #88]	; (8023988 <etharp_output_to_arp_index+0x124>)
 802392e:	4413      	add	r3, r2
 8023930:	3304      	adds	r3, #4
 8023932:	461a      	mov	r2, r3
 8023934:	68f8      	ldr	r0, [r7, #12]
 8023936:	f000 fafb 	bl	8023f30 <etharp_request_dst>
 802393a:	4603      	mov	r3, r0
 802393c:	2b00      	cmp	r3, #0
 802393e:	d109      	bne.n	8023954 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023940:	79fa      	ldrb	r2, [r7, #7]
 8023942:	4911      	ldr	r1, [pc, #68]	; (8023988 <etharp_output_to_arp_index+0x124>)
 8023944:	4613      	mov	r3, r2
 8023946:	005b      	lsls	r3, r3, #1
 8023948:	4413      	add	r3, r2
 802394a:	00db      	lsls	r3, r3, #3
 802394c:	440b      	add	r3, r1
 802394e:	3314      	adds	r3, #20
 8023950:	2203      	movs	r2, #3
 8023952:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023954:	68fb      	ldr	r3, [r7, #12]
 8023956:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 802395a:	79fa      	ldrb	r2, [r7, #7]
 802395c:	4613      	mov	r3, r2
 802395e:	005b      	lsls	r3, r3, #1
 8023960:	4413      	add	r3, r2
 8023962:	00db      	lsls	r3, r3, #3
 8023964:	3308      	adds	r3, #8
 8023966:	4a08      	ldr	r2, [pc, #32]	; (8023988 <etharp_output_to_arp_index+0x124>)
 8023968:	4413      	add	r3, r2
 802396a:	3304      	adds	r3, #4
 802396c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023970:	9200      	str	r2, [sp, #0]
 8023972:	460a      	mov	r2, r1
 8023974:	68b9      	ldr	r1, [r7, #8]
 8023976:	68f8      	ldr	r0, [r7, #12]
 8023978:	f001 fed4 	bl	8025724 <ethernet_output>
 802397c:	4603      	mov	r3, r0
}
 802397e:	4618      	mov	r0, r3
 8023980:	3710      	adds	r7, #16
 8023982:	46bd      	mov	sp, r7
 8023984:	bd80      	pop	{r7, pc}
 8023986:	bf00      	nop
 8023988:	20015cfc 	.word	0x20015cfc
 802398c:	0802c29c 	.word	0x0802c29c
 8023990:	0802c450 	.word	0x0802c450
 8023994:	0802c358 	.word	0x0802c358

08023998 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8023998:	b580      	push	{r7, lr}
 802399a:	b08a      	sub	sp, #40	; 0x28
 802399c:	af02      	add	r7, sp, #8
 802399e:	60f8      	str	r0, [r7, #12]
 80239a0:	60b9      	str	r1, [r7, #8]
 80239a2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80239a4:	687b      	ldr	r3, [r7, #4]
 80239a6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80239a8:	68fb      	ldr	r3, [r7, #12]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	d106      	bne.n	80239bc <etharp_output+0x24>
 80239ae:	4b73      	ldr	r3, [pc, #460]	; (8023b7c <etharp_output+0x1e4>)
 80239b0:	f240 321e 	movw	r2, #798	; 0x31e
 80239b4:	4972      	ldr	r1, [pc, #456]	; (8023b80 <etharp_output+0x1e8>)
 80239b6:	4873      	ldr	r0, [pc, #460]	; (8023b84 <etharp_output+0x1ec>)
 80239b8:	f002 f850 	bl	8025a5c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80239bc:	68bb      	ldr	r3, [r7, #8]
 80239be:	2b00      	cmp	r3, #0
 80239c0:	d106      	bne.n	80239d0 <etharp_output+0x38>
 80239c2:	4b6e      	ldr	r3, [pc, #440]	; (8023b7c <etharp_output+0x1e4>)
 80239c4:	f240 321f 	movw	r2, #799	; 0x31f
 80239c8:	496f      	ldr	r1, [pc, #444]	; (8023b88 <etharp_output+0x1f0>)
 80239ca:	486e      	ldr	r0, [pc, #440]	; (8023b84 <etharp_output+0x1ec>)
 80239cc:	f002 f846 	bl	8025a5c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80239d0:	687b      	ldr	r3, [r7, #4]
 80239d2:	2b00      	cmp	r3, #0
 80239d4:	d106      	bne.n	80239e4 <etharp_output+0x4c>
 80239d6:	4b69      	ldr	r3, [pc, #420]	; (8023b7c <etharp_output+0x1e4>)
 80239d8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80239dc:	496b      	ldr	r1, [pc, #428]	; (8023b8c <etharp_output+0x1f4>)
 80239de:	4869      	ldr	r0, [pc, #420]	; (8023b84 <etharp_output+0x1ec>)
 80239e0:	f002 f83c 	bl	8025a5c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80239e4:	687b      	ldr	r3, [r7, #4]
 80239e6:	681b      	ldr	r3, [r3, #0]
 80239e8:	68f9      	ldr	r1, [r7, #12]
 80239ea:	4618      	mov	r0, r3
 80239ec:	f000 fefc 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 80239f0:	4603      	mov	r3, r0
 80239f2:	2b00      	cmp	r3, #0
 80239f4:	d002      	beq.n	80239fc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80239f6:	4b66      	ldr	r3, [pc, #408]	; (8023b90 <etharp_output+0x1f8>)
 80239f8:	61fb      	str	r3, [r7, #28]
 80239fa:	e0af      	b.n	8023b5c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80239fc:	687b      	ldr	r3, [r7, #4]
 80239fe:	681b      	ldr	r3, [r3, #0]
 8023a00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023a04:	2be0      	cmp	r3, #224	; 0xe0
 8023a06:	d118      	bne.n	8023a3a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023a08:	2301      	movs	r3, #1
 8023a0a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023a0c:	2300      	movs	r3, #0
 8023a0e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023a10:	235e      	movs	r3, #94	; 0x5e
 8023a12:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023a14:	687b      	ldr	r3, [r7, #4]
 8023a16:	3301      	adds	r3, #1
 8023a18:	781b      	ldrb	r3, [r3, #0]
 8023a1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023a1e:	b2db      	uxtb	r3, r3
 8023a20:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	3302      	adds	r3, #2
 8023a26:	781b      	ldrb	r3, [r3, #0]
 8023a28:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023a2a:	687b      	ldr	r3, [r7, #4]
 8023a2c:	3303      	adds	r3, #3
 8023a2e:	781b      	ldrb	r3, [r3, #0]
 8023a30:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8023a32:	f107 0310 	add.w	r3, r7, #16
 8023a36:	61fb      	str	r3, [r7, #28]
 8023a38:	e090      	b.n	8023b5c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a3a:	687b      	ldr	r3, [r7, #4]
 8023a3c:	681a      	ldr	r2, [r3, #0]
 8023a3e:	68fb      	ldr	r3, [r7, #12]
 8023a40:	3304      	adds	r3, #4
 8023a42:	681b      	ldr	r3, [r3, #0]
 8023a44:	405a      	eors	r2, r3
 8023a46:	68fb      	ldr	r3, [r7, #12]
 8023a48:	3308      	adds	r3, #8
 8023a4a:	681b      	ldr	r3, [r3, #0]
 8023a4c:	4013      	ands	r3, r2
 8023a4e:	2b00      	cmp	r3, #0
 8023a50:	d012      	beq.n	8023a78 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8023a52:	687b      	ldr	r3, [r7, #4]
 8023a54:	681b      	ldr	r3, [r3, #0]
 8023a56:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023a58:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023a5c:	4293      	cmp	r3, r2
 8023a5e:	d00b      	beq.n	8023a78 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023a60:	68fb      	ldr	r3, [r7, #12]
 8023a62:	330c      	adds	r3, #12
 8023a64:	681b      	ldr	r3, [r3, #0]
 8023a66:	2b00      	cmp	r3, #0
 8023a68:	d003      	beq.n	8023a72 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8023a6a:	68fb      	ldr	r3, [r7, #12]
 8023a6c:	330c      	adds	r3, #12
 8023a6e:	61bb      	str	r3, [r7, #24]
 8023a70:	e002      	b.n	8023a78 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8023a72:	f06f 0303 	mvn.w	r3, #3
 8023a76:	e07d      	b.n	8023b74 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023a78:	4b46      	ldr	r3, [pc, #280]	; (8023b94 <etharp_output+0x1fc>)
 8023a7a:	781b      	ldrb	r3, [r3, #0]
 8023a7c:	4619      	mov	r1, r3
 8023a7e:	4a46      	ldr	r2, [pc, #280]	; (8023b98 <etharp_output+0x200>)
 8023a80:	460b      	mov	r3, r1
 8023a82:	005b      	lsls	r3, r3, #1
 8023a84:	440b      	add	r3, r1
 8023a86:	00db      	lsls	r3, r3, #3
 8023a88:	4413      	add	r3, r2
 8023a8a:	3314      	adds	r3, #20
 8023a8c:	781b      	ldrb	r3, [r3, #0]
 8023a8e:	2b01      	cmp	r3, #1
 8023a90:	d925      	bls.n	8023ade <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023a92:	4b40      	ldr	r3, [pc, #256]	; (8023b94 <etharp_output+0x1fc>)
 8023a94:	781b      	ldrb	r3, [r3, #0]
 8023a96:	4619      	mov	r1, r3
 8023a98:	4a3f      	ldr	r2, [pc, #252]	; (8023b98 <etharp_output+0x200>)
 8023a9a:	460b      	mov	r3, r1
 8023a9c:	005b      	lsls	r3, r3, #1
 8023a9e:	440b      	add	r3, r1
 8023aa0:	00db      	lsls	r3, r3, #3
 8023aa2:	4413      	add	r3, r2
 8023aa4:	3308      	adds	r3, #8
 8023aa6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023aa8:	68fa      	ldr	r2, [r7, #12]
 8023aaa:	429a      	cmp	r2, r3
 8023aac:	d117      	bne.n	8023ade <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8023aae:	69bb      	ldr	r3, [r7, #24]
 8023ab0:	681a      	ldr	r2, [r3, #0]
 8023ab2:	4b38      	ldr	r3, [pc, #224]	; (8023b94 <etharp_output+0x1fc>)
 8023ab4:	781b      	ldrb	r3, [r3, #0]
 8023ab6:	4618      	mov	r0, r3
 8023ab8:	4937      	ldr	r1, [pc, #220]	; (8023b98 <etharp_output+0x200>)
 8023aba:	4603      	mov	r3, r0
 8023abc:	005b      	lsls	r3, r3, #1
 8023abe:	4403      	add	r3, r0
 8023ac0:	00db      	lsls	r3, r3, #3
 8023ac2:	440b      	add	r3, r1
 8023ac4:	3304      	adds	r3, #4
 8023ac6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023ac8:	429a      	cmp	r2, r3
 8023aca:	d108      	bne.n	8023ade <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8023acc:	4b31      	ldr	r3, [pc, #196]	; (8023b94 <etharp_output+0x1fc>)
 8023ace:	781b      	ldrb	r3, [r3, #0]
 8023ad0:	461a      	mov	r2, r3
 8023ad2:	68b9      	ldr	r1, [r7, #8]
 8023ad4:	68f8      	ldr	r0, [r7, #12]
 8023ad6:	f7ff fec5 	bl	8023864 <etharp_output_to_arp_index>
 8023ada:	4603      	mov	r3, r0
 8023adc:	e04a      	b.n	8023b74 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023ade:	2300      	movs	r3, #0
 8023ae0:	75fb      	strb	r3, [r7, #23]
 8023ae2:	e031      	b.n	8023b48 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023ae4:	7dfa      	ldrb	r2, [r7, #23]
 8023ae6:	492c      	ldr	r1, [pc, #176]	; (8023b98 <etharp_output+0x200>)
 8023ae8:	4613      	mov	r3, r2
 8023aea:	005b      	lsls	r3, r3, #1
 8023aec:	4413      	add	r3, r2
 8023aee:	00db      	lsls	r3, r3, #3
 8023af0:	440b      	add	r3, r1
 8023af2:	3314      	adds	r3, #20
 8023af4:	781b      	ldrb	r3, [r3, #0]
 8023af6:	2b01      	cmp	r3, #1
 8023af8:	d923      	bls.n	8023b42 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8023afa:	7dfa      	ldrb	r2, [r7, #23]
 8023afc:	4926      	ldr	r1, [pc, #152]	; (8023b98 <etharp_output+0x200>)
 8023afe:	4613      	mov	r3, r2
 8023b00:	005b      	lsls	r3, r3, #1
 8023b02:	4413      	add	r3, r2
 8023b04:	00db      	lsls	r3, r3, #3
 8023b06:	440b      	add	r3, r1
 8023b08:	3308      	adds	r3, #8
 8023b0a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8023b0c:	68fa      	ldr	r2, [r7, #12]
 8023b0e:	429a      	cmp	r2, r3
 8023b10:	d117      	bne.n	8023b42 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8023b12:	69bb      	ldr	r3, [r7, #24]
 8023b14:	6819      	ldr	r1, [r3, #0]
 8023b16:	7dfa      	ldrb	r2, [r7, #23]
 8023b18:	481f      	ldr	r0, [pc, #124]	; (8023b98 <etharp_output+0x200>)
 8023b1a:	4613      	mov	r3, r2
 8023b1c:	005b      	lsls	r3, r3, #1
 8023b1e:	4413      	add	r3, r2
 8023b20:	00db      	lsls	r3, r3, #3
 8023b22:	4403      	add	r3, r0
 8023b24:	3304      	adds	r3, #4
 8023b26:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8023b28:	4299      	cmp	r1, r3
 8023b2a:	d10a      	bne.n	8023b42 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8023b2c:	4a19      	ldr	r2, [pc, #100]	; (8023b94 <etharp_output+0x1fc>)
 8023b2e:	7dfb      	ldrb	r3, [r7, #23]
 8023b30:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8023b32:	7dfb      	ldrb	r3, [r7, #23]
 8023b34:	461a      	mov	r2, r3
 8023b36:	68b9      	ldr	r1, [r7, #8]
 8023b38:	68f8      	ldr	r0, [r7, #12]
 8023b3a:	f7ff fe93 	bl	8023864 <etharp_output_to_arp_index>
 8023b3e:	4603      	mov	r3, r0
 8023b40:	e018      	b.n	8023b74 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8023b42:	7dfb      	ldrb	r3, [r7, #23]
 8023b44:	3301      	adds	r3, #1
 8023b46:	75fb      	strb	r3, [r7, #23]
 8023b48:	7dfb      	ldrb	r3, [r7, #23]
 8023b4a:	2b31      	cmp	r3, #49	; 0x31
 8023b4c:	d9ca      	bls.n	8023ae4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8023b4e:	68ba      	ldr	r2, [r7, #8]
 8023b50:	69b9      	ldr	r1, [r7, #24]
 8023b52:	68f8      	ldr	r0, [r7, #12]
 8023b54:	f000 f822 	bl	8023b9c <etharp_query>
 8023b58:	4603      	mov	r3, r0
 8023b5a:	e00b      	b.n	8023b74 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8023b5c:	68fb      	ldr	r3, [r7, #12]
 8023b5e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8023b62:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023b66:	9300      	str	r3, [sp, #0]
 8023b68:	69fb      	ldr	r3, [r7, #28]
 8023b6a:	68b9      	ldr	r1, [r7, #8]
 8023b6c:	68f8      	ldr	r0, [r7, #12]
 8023b6e:	f001 fdd9 	bl	8025724 <ethernet_output>
 8023b72:	4603      	mov	r3, r0
}
 8023b74:	4618      	mov	r0, r3
 8023b76:	3720      	adds	r7, #32
 8023b78:	46bd      	mov	sp, r7
 8023b7a:	bd80      	pop	{r7, pc}
 8023b7c:	0802c29c 	.word	0x0802c29c
 8023b80:	0802c430 	.word	0x0802c430
 8023b84:	0802c358 	.word	0x0802c358
 8023b88:	0802c480 	.word	0x0802c480
 8023b8c:	0802c420 	.word	0x0802c420
 8023b90:	0802cf64 	.word	0x0802cf64
 8023b94:	200161ac 	.word	0x200161ac
 8023b98:	20015cfc 	.word	0x20015cfc

08023b9c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8023b9c:	b580      	push	{r7, lr}
 8023b9e:	b08c      	sub	sp, #48	; 0x30
 8023ba0:	af02      	add	r7, sp, #8
 8023ba2:	60f8      	str	r0, [r7, #12]
 8023ba4:	60b9      	str	r1, [r7, #8]
 8023ba6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8023ba8:	68fb      	ldr	r3, [r7, #12]
 8023baa:	332a      	adds	r3, #42	; 0x2a
 8023bac:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8023bae:	23ff      	movs	r3, #255	; 0xff
 8023bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8023bb4:	2300      	movs	r3, #0
 8023bb6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023bb8:	68bb      	ldr	r3, [r7, #8]
 8023bba:	681b      	ldr	r3, [r3, #0]
 8023bbc:	68f9      	ldr	r1, [r7, #12]
 8023bbe:	4618      	mov	r0, r3
 8023bc0:	f000 fe12 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 8023bc4:	4603      	mov	r3, r0
 8023bc6:	2b00      	cmp	r3, #0
 8023bc8:	d10c      	bne.n	8023be4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8023bca:	68bb      	ldr	r3, [r7, #8]
 8023bcc:	681b      	ldr	r3, [r3, #0]
 8023bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8023bd2:	2be0      	cmp	r3, #224	; 0xe0
 8023bd4:	d006      	beq.n	8023be4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8023bd6:	68bb      	ldr	r3, [r7, #8]
 8023bd8:	2b00      	cmp	r3, #0
 8023bda:	d003      	beq.n	8023be4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8023bdc:	68bb      	ldr	r3, [r7, #8]
 8023bde:	681b      	ldr	r3, [r3, #0]
 8023be0:	2b00      	cmp	r3, #0
 8023be2:	d102      	bne.n	8023bea <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023be4:	f06f 030f 	mvn.w	r3, #15
 8023be8:	e101      	b.n	8023dee <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8023bea:	68fa      	ldr	r2, [r7, #12]
 8023bec:	2101      	movs	r1, #1
 8023bee:	68b8      	ldr	r0, [r7, #8]
 8023bf0:	f7ff fb60 	bl	80232b4 <etharp_find_entry>
 8023bf4:	4603      	mov	r3, r0
 8023bf6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8023bf8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8023bfc:	2b00      	cmp	r3, #0
 8023bfe:	da02      	bge.n	8023c06 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8023c00:	8a7b      	ldrh	r3, [r7, #18]
 8023c02:	b25b      	sxtb	r3, r3
 8023c04:	e0f3      	b.n	8023dee <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8023c06:	8a7b      	ldrh	r3, [r7, #18]
 8023c08:	2b7e      	cmp	r3, #126	; 0x7e
 8023c0a:	d906      	bls.n	8023c1a <etharp_query+0x7e>
 8023c0c:	4b7a      	ldr	r3, [pc, #488]	; (8023df8 <etharp_query+0x25c>)
 8023c0e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8023c12:	497a      	ldr	r1, [pc, #488]	; (8023dfc <etharp_query+0x260>)
 8023c14:	487a      	ldr	r0, [pc, #488]	; (8023e00 <etharp_query+0x264>)
 8023c16:	f001 ff21 	bl	8025a5c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8023c1a:	8a7b      	ldrh	r3, [r7, #18]
 8023c1c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8023c1e:	7c7a      	ldrb	r2, [r7, #17]
 8023c20:	4978      	ldr	r1, [pc, #480]	; (8023e04 <etharp_query+0x268>)
 8023c22:	4613      	mov	r3, r2
 8023c24:	005b      	lsls	r3, r3, #1
 8023c26:	4413      	add	r3, r2
 8023c28:	00db      	lsls	r3, r3, #3
 8023c2a:	440b      	add	r3, r1
 8023c2c:	3314      	adds	r3, #20
 8023c2e:	781b      	ldrb	r3, [r3, #0]
 8023c30:	2b00      	cmp	r3, #0
 8023c32:	d115      	bne.n	8023c60 <etharp_query+0xc4>
    is_new_entry = 1;
 8023c34:	2301      	movs	r3, #1
 8023c36:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8023c38:	7c7a      	ldrb	r2, [r7, #17]
 8023c3a:	4972      	ldr	r1, [pc, #456]	; (8023e04 <etharp_query+0x268>)
 8023c3c:	4613      	mov	r3, r2
 8023c3e:	005b      	lsls	r3, r3, #1
 8023c40:	4413      	add	r3, r2
 8023c42:	00db      	lsls	r3, r3, #3
 8023c44:	440b      	add	r3, r1
 8023c46:	3314      	adds	r3, #20
 8023c48:	2201      	movs	r2, #1
 8023c4a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8023c4c:	7c7a      	ldrb	r2, [r7, #17]
 8023c4e:	496d      	ldr	r1, [pc, #436]	; (8023e04 <etharp_query+0x268>)
 8023c50:	4613      	mov	r3, r2
 8023c52:	005b      	lsls	r3, r3, #1
 8023c54:	4413      	add	r3, r2
 8023c56:	00db      	lsls	r3, r3, #3
 8023c58:	440b      	add	r3, r1
 8023c5a:	3308      	adds	r3, #8
 8023c5c:	68fa      	ldr	r2, [r7, #12]
 8023c5e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8023c60:	7c7a      	ldrb	r2, [r7, #17]
 8023c62:	4968      	ldr	r1, [pc, #416]	; (8023e04 <etharp_query+0x268>)
 8023c64:	4613      	mov	r3, r2
 8023c66:	005b      	lsls	r3, r3, #1
 8023c68:	4413      	add	r3, r2
 8023c6a:	00db      	lsls	r3, r3, #3
 8023c6c:	440b      	add	r3, r1
 8023c6e:	3314      	adds	r3, #20
 8023c70:	781b      	ldrb	r3, [r3, #0]
 8023c72:	2b01      	cmp	r3, #1
 8023c74:	d011      	beq.n	8023c9a <etharp_query+0xfe>
 8023c76:	7c7a      	ldrb	r2, [r7, #17]
 8023c78:	4962      	ldr	r1, [pc, #392]	; (8023e04 <etharp_query+0x268>)
 8023c7a:	4613      	mov	r3, r2
 8023c7c:	005b      	lsls	r3, r3, #1
 8023c7e:	4413      	add	r3, r2
 8023c80:	00db      	lsls	r3, r3, #3
 8023c82:	440b      	add	r3, r1
 8023c84:	3314      	adds	r3, #20
 8023c86:	781b      	ldrb	r3, [r3, #0]
 8023c88:	2b01      	cmp	r3, #1
 8023c8a:	d806      	bhi.n	8023c9a <etharp_query+0xfe>
 8023c8c:	4b5a      	ldr	r3, [pc, #360]	; (8023df8 <etharp_query+0x25c>)
 8023c8e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8023c92:	495d      	ldr	r1, [pc, #372]	; (8023e08 <etharp_query+0x26c>)
 8023c94:	485a      	ldr	r0, [pc, #360]	; (8023e00 <etharp_query+0x264>)
 8023c96:	f001 fee1 	bl	8025a5c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8023c9a:	6a3b      	ldr	r3, [r7, #32]
 8023c9c:	2b00      	cmp	r3, #0
 8023c9e:	d102      	bne.n	8023ca6 <etharp_query+0x10a>
 8023ca0:	687b      	ldr	r3, [r7, #4]
 8023ca2:	2b00      	cmp	r3, #0
 8023ca4:	d10c      	bne.n	8023cc0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8023ca6:	68b9      	ldr	r1, [r7, #8]
 8023ca8:	68f8      	ldr	r0, [r7, #12]
 8023caa:	f000 f963 	bl	8023f74 <etharp_request>
 8023cae:	4603      	mov	r3, r0
 8023cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	2b00      	cmp	r3, #0
 8023cb8:	d102      	bne.n	8023cc0 <etharp_query+0x124>
      return result;
 8023cba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8023cbe:	e096      	b.n	8023dee <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8023cc0:	687b      	ldr	r3, [r7, #4]
 8023cc2:	2b00      	cmp	r3, #0
 8023cc4:	d106      	bne.n	8023cd4 <etharp_query+0x138>
 8023cc6:	4b4c      	ldr	r3, [pc, #304]	; (8023df8 <etharp_query+0x25c>)
 8023cc8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8023ccc:	494f      	ldr	r1, [pc, #316]	; (8023e0c <etharp_query+0x270>)
 8023cce:	484c      	ldr	r0, [pc, #304]	; (8023e00 <etharp_query+0x264>)
 8023cd0:	f001 fec4 	bl	8025a5c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8023cd4:	7c7a      	ldrb	r2, [r7, #17]
 8023cd6:	494b      	ldr	r1, [pc, #300]	; (8023e04 <etharp_query+0x268>)
 8023cd8:	4613      	mov	r3, r2
 8023cda:	005b      	lsls	r3, r3, #1
 8023cdc:	4413      	add	r3, r2
 8023cde:	00db      	lsls	r3, r3, #3
 8023ce0:	440b      	add	r3, r1
 8023ce2:	3314      	adds	r3, #20
 8023ce4:	781b      	ldrb	r3, [r3, #0]
 8023ce6:	2b01      	cmp	r3, #1
 8023ce8:	d917      	bls.n	8023d1a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8023cea:	4a49      	ldr	r2, [pc, #292]	; (8023e10 <etharp_query+0x274>)
 8023cec:	7c7b      	ldrb	r3, [r7, #17]
 8023cee:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8023cf0:	7c7a      	ldrb	r2, [r7, #17]
 8023cf2:	4613      	mov	r3, r2
 8023cf4:	005b      	lsls	r3, r3, #1
 8023cf6:	4413      	add	r3, r2
 8023cf8:	00db      	lsls	r3, r3, #3
 8023cfa:	3308      	adds	r3, #8
 8023cfc:	4a41      	ldr	r2, [pc, #260]	; (8023e04 <etharp_query+0x268>)
 8023cfe:	4413      	add	r3, r2
 8023d00:	3304      	adds	r3, #4
 8023d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023d06:	9200      	str	r2, [sp, #0]
 8023d08:	697a      	ldr	r2, [r7, #20]
 8023d0a:	6879      	ldr	r1, [r7, #4]
 8023d0c:	68f8      	ldr	r0, [r7, #12]
 8023d0e:	f001 fd09 	bl	8025724 <ethernet_output>
 8023d12:	4603      	mov	r3, r0
 8023d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023d18:	e067      	b.n	8023dea <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8023d1a:	7c7a      	ldrb	r2, [r7, #17]
 8023d1c:	4939      	ldr	r1, [pc, #228]	; (8023e04 <etharp_query+0x268>)
 8023d1e:	4613      	mov	r3, r2
 8023d20:	005b      	lsls	r3, r3, #1
 8023d22:	4413      	add	r3, r2
 8023d24:	00db      	lsls	r3, r3, #3
 8023d26:	440b      	add	r3, r1
 8023d28:	3314      	adds	r3, #20
 8023d2a:	781b      	ldrb	r3, [r3, #0]
 8023d2c:	2b01      	cmp	r3, #1
 8023d2e:	d15c      	bne.n	8023dea <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8023d30:	2300      	movs	r3, #0
 8023d32:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8023d34:	687b      	ldr	r3, [r7, #4]
 8023d36:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023d38:	e01c      	b.n	8023d74 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8023d3a:	69fb      	ldr	r3, [r7, #28]
 8023d3c:	895a      	ldrh	r2, [r3, #10]
 8023d3e:	69fb      	ldr	r3, [r7, #28]
 8023d40:	891b      	ldrh	r3, [r3, #8]
 8023d42:	429a      	cmp	r2, r3
 8023d44:	d10a      	bne.n	8023d5c <etharp_query+0x1c0>
 8023d46:	69fb      	ldr	r3, [r7, #28]
 8023d48:	681b      	ldr	r3, [r3, #0]
 8023d4a:	2b00      	cmp	r3, #0
 8023d4c:	d006      	beq.n	8023d5c <etharp_query+0x1c0>
 8023d4e:	4b2a      	ldr	r3, [pc, #168]	; (8023df8 <etharp_query+0x25c>)
 8023d50:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8023d54:	492f      	ldr	r1, [pc, #188]	; (8023e14 <etharp_query+0x278>)
 8023d56:	482a      	ldr	r0, [pc, #168]	; (8023e00 <etharp_query+0x264>)
 8023d58:	f001 fe80 	bl	8025a5c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8023d5c:	69fb      	ldr	r3, [r7, #28]
 8023d5e:	7b1b      	ldrb	r3, [r3, #12]
 8023d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023d64:	2b00      	cmp	r3, #0
 8023d66:	d002      	beq.n	8023d6e <etharp_query+0x1d2>
        copy_needed = 1;
 8023d68:	2301      	movs	r3, #1
 8023d6a:	61bb      	str	r3, [r7, #24]
        break;
 8023d6c:	e005      	b.n	8023d7a <etharp_query+0x1de>
      }
      p = p->next;
 8023d6e:	69fb      	ldr	r3, [r7, #28]
 8023d70:	681b      	ldr	r3, [r3, #0]
 8023d72:	61fb      	str	r3, [r7, #28]
    while (p) {
 8023d74:	69fb      	ldr	r3, [r7, #28]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	d1df      	bne.n	8023d3a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8023d7a:	69bb      	ldr	r3, [r7, #24]
 8023d7c:	2b00      	cmp	r3, #0
 8023d7e:	d007      	beq.n	8023d90 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8023d80:	687a      	ldr	r2, [r7, #4]
 8023d82:	f44f 7120 	mov.w	r1, #640	; 0x280
 8023d86:	200e      	movs	r0, #14
 8023d88:	f7fe fbbc 	bl	8022504 <pbuf_clone>
 8023d8c:	61f8      	str	r0, [r7, #28]
 8023d8e:	e004      	b.n	8023d9a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8023d94:	69f8      	ldr	r0, [r7, #28]
 8023d96:	f7fe f9c9 	bl	802212c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8023d9a:	69fb      	ldr	r3, [r7, #28]
 8023d9c:	2b00      	cmp	r3, #0
 8023d9e:	d021      	beq.n	8023de4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8023da0:	7c7a      	ldrb	r2, [r7, #17]
 8023da2:	4918      	ldr	r1, [pc, #96]	; (8023e04 <etharp_query+0x268>)
 8023da4:	4613      	mov	r3, r2
 8023da6:	005b      	lsls	r3, r3, #1
 8023da8:	4413      	add	r3, r2
 8023daa:	00db      	lsls	r3, r3, #3
 8023dac:	440b      	add	r3, r1
 8023dae:	681b      	ldr	r3, [r3, #0]
 8023db0:	2b00      	cmp	r3, #0
 8023db2:	d00a      	beq.n	8023dca <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8023db4:	7c7a      	ldrb	r2, [r7, #17]
 8023db6:	4913      	ldr	r1, [pc, #76]	; (8023e04 <etharp_query+0x268>)
 8023db8:	4613      	mov	r3, r2
 8023dba:	005b      	lsls	r3, r3, #1
 8023dbc:	4413      	add	r3, r2
 8023dbe:	00db      	lsls	r3, r3, #3
 8023dc0:	440b      	add	r3, r1
 8023dc2:	681b      	ldr	r3, [r3, #0]
 8023dc4:	4618      	mov	r0, r3
 8023dc6:	f7fe f911 	bl	8021fec <pbuf_free>
      }
      arp_table[i].q = p;
 8023dca:	7c7a      	ldrb	r2, [r7, #17]
 8023dcc:	490d      	ldr	r1, [pc, #52]	; (8023e04 <etharp_query+0x268>)
 8023dce:	4613      	mov	r3, r2
 8023dd0:	005b      	lsls	r3, r3, #1
 8023dd2:	4413      	add	r3, r2
 8023dd4:	00db      	lsls	r3, r3, #3
 8023dd6:	440b      	add	r3, r1
 8023dd8:	69fa      	ldr	r2, [r7, #28]
 8023dda:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8023ddc:	2300      	movs	r3, #0
 8023dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8023de2:	e002      	b.n	8023dea <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8023de4:	23ff      	movs	r3, #255	; 0xff
 8023de6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8023dea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8023dee:	4618      	mov	r0, r3
 8023df0:	3728      	adds	r7, #40	; 0x28
 8023df2:	46bd      	mov	sp, r7
 8023df4:	bd80      	pop	{r7, pc}
 8023df6:	bf00      	nop
 8023df8:	0802c29c 	.word	0x0802c29c
 8023dfc:	0802c48c 	.word	0x0802c48c
 8023e00:	0802c358 	.word	0x0802c358
 8023e04:	20015cfc 	.word	0x20015cfc
 8023e08:	0802c49c 	.word	0x0802c49c
 8023e0c:	0802c480 	.word	0x0802c480
 8023e10:	200161ac 	.word	0x200161ac
 8023e14:	0802c4c4 	.word	0x0802c4c4

08023e18 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8023e18:	b580      	push	{r7, lr}
 8023e1a:	b08a      	sub	sp, #40	; 0x28
 8023e1c:	af02      	add	r7, sp, #8
 8023e1e:	60f8      	str	r0, [r7, #12]
 8023e20:	60b9      	str	r1, [r7, #8]
 8023e22:	607a      	str	r2, [r7, #4]
 8023e24:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8023e26:	2300      	movs	r3, #0
 8023e28:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023e2a:	68fb      	ldr	r3, [r7, #12]
 8023e2c:	2b00      	cmp	r3, #0
 8023e2e:	d106      	bne.n	8023e3e <etharp_raw+0x26>
 8023e30:	4b3a      	ldr	r3, [pc, #232]	; (8023f1c <etharp_raw+0x104>)
 8023e32:	f240 4257 	movw	r2, #1111	; 0x457
 8023e36:	493a      	ldr	r1, [pc, #232]	; (8023f20 <etharp_raw+0x108>)
 8023e38:	483a      	ldr	r0, [pc, #232]	; (8023f24 <etharp_raw+0x10c>)
 8023e3a:	f001 fe0f 	bl	8025a5c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8023e3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023e42:	211c      	movs	r1, #28
 8023e44:	200e      	movs	r0, #14
 8023e46:	f7fd fdef 	bl	8021a28 <pbuf_alloc>
 8023e4a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8023e4c:	69bb      	ldr	r3, [r7, #24]
 8023e4e:	2b00      	cmp	r3, #0
 8023e50:	d102      	bne.n	8023e58 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8023e52:	f04f 33ff 	mov.w	r3, #4294967295
 8023e56:	e05d      	b.n	8023f14 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8023e58:	69bb      	ldr	r3, [r7, #24]
 8023e5a:	895b      	ldrh	r3, [r3, #10]
 8023e5c:	2b1b      	cmp	r3, #27
 8023e5e:	d806      	bhi.n	8023e6e <etharp_raw+0x56>
 8023e60:	4b2e      	ldr	r3, [pc, #184]	; (8023f1c <etharp_raw+0x104>)
 8023e62:	f240 4262 	movw	r2, #1122	; 0x462
 8023e66:	4930      	ldr	r1, [pc, #192]	; (8023f28 <etharp_raw+0x110>)
 8023e68:	482e      	ldr	r0, [pc, #184]	; (8023f24 <etharp_raw+0x10c>)
 8023e6a:	f001 fdf7 	bl	8025a5c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8023e6e:	69bb      	ldr	r3, [r7, #24]
 8023e70:	685b      	ldr	r3, [r3, #4]
 8023e72:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8023e74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8023e76:	4618      	mov	r0, r3
 8023e78:	f7fc fcdc 	bl	8020834 <lwip_htons>
 8023e7c:	4603      	mov	r3, r0
 8023e7e:	461a      	mov	r2, r3
 8023e80:	697b      	ldr	r3, [r7, #20]
 8023e82:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8023e84:	68fb      	ldr	r3, [r7, #12]
 8023e86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023e8a:	2b06      	cmp	r3, #6
 8023e8c:	d006      	beq.n	8023e9c <etharp_raw+0x84>
 8023e8e:	4b23      	ldr	r3, [pc, #140]	; (8023f1c <etharp_raw+0x104>)
 8023e90:	f240 4269 	movw	r2, #1129	; 0x469
 8023e94:	4925      	ldr	r1, [pc, #148]	; (8023f2c <etharp_raw+0x114>)
 8023e96:	4823      	ldr	r0, [pc, #140]	; (8023f24 <etharp_raw+0x10c>)
 8023e98:	f001 fde0 	bl	8025a5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8023e9c:	697b      	ldr	r3, [r7, #20]
 8023e9e:	3308      	adds	r3, #8
 8023ea0:	2206      	movs	r2, #6
 8023ea2:	6839      	ldr	r1, [r7, #0]
 8023ea4:	4618      	mov	r0, r3
 8023ea6:	f001 fcc9 	bl	802583c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8023eaa:	697b      	ldr	r3, [r7, #20]
 8023eac:	3312      	adds	r3, #18
 8023eae:	2206      	movs	r2, #6
 8023eb0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023eb2:	4618      	mov	r0, r3
 8023eb4:	f001 fcc2 	bl	802583c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8023eb8:	697b      	ldr	r3, [r7, #20]
 8023eba:	330e      	adds	r3, #14
 8023ebc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8023ebe:	6812      	ldr	r2, [r2, #0]
 8023ec0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8023ec2:	697b      	ldr	r3, [r7, #20]
 8023ec4:	3318      	adds	r3, #24
 8023ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023ec8:	6812      	ldr	r2, [r2, #0]
 8023eca:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8023ecc:	697b      	ldr	r3, [r7, #20]
 8023ece:	2200      	movs	r2, #0
 8023ed0:	701a      	strb	r2, [r3, #0]
 8023ed2:	2200      	movs	r2, #0
 8023ed4:	f042 0201 	orr.w	r2, r2, #1
 8023ed8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8023eda:	697b      	ldr	r3, [r7, #20]
 8023edc:	2200      	movs	r2, #0
 8023ede:	f042 0208 	orr.w	r2, r2, #8
 8023ee2:	709a      	strb	r2, [r3, #2]
 8023ee4:	2200      	movs	r2, #0
 8023ee6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8023ee8:	697b      	ldr	r3, [r7, #20]
 8023eea:	2206      	movs	r2, #6
 8023eec:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8023eee:	697b      	ldr	r3, [r7, #20]
 8023ef0:	2204      	movs	r2, #4
 8023ef2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8023ef4:	f640 0306 	movw	r3, #2054	; 0x806
 8023ef8:	9300      	str	r3, [sp, #0]
 8023efa:	687b      	ldr	r3, [r7, #4]
 8023efc:	68ba      	ldr	r2, [r7, #8]
 8023efe:	69b9      	ldr	r1, [r7, #24]
 8023f00:	68f8      	ldr	r0, [r7, #12]
 8023f02:	f001 fc0f 	bl	8025724 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8023f06:	69b8      	ldr	r0, [r7, #24]
 8023f08:	f7fe f870 	bl	8021fec <pbuf_free>
  p = NULL;
 8023f0c:	2300      	movs	r3, #0
 8023f0e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8023f10:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8023f14:	4618      	mov	r0, r3
 8023f16:	3720      	adds	r7, #32
 8023f18:	46bd      	mov	sp, r7
 8023f1a:	bd80      	pop	{r7, pc}
 8023f1c:	0802c29c 	.word	0x0802c29c
 8023f20:	0802c430 	.word	0x0802c430
 8023f24:	0802c358 	.word	0x0802c358
 8023f28:	0802c4e0 	.word	0x0802c4e0
 8023f2c:	0802c514 	.word	0x0802c514

08023f30 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8023f30:	b580      	push	{r7, lr}
 8023f32:	b088      	sub	sp, #32
 8023f34:	af04      	add	r7, sp, #16
 8023f36:	60f8      	str	r0, [r7, #12]
 8023f38:	60b9      	str	r1, [r7, #8]
 8023f3a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023f3c:	68fb      	ldr	r3, [r7, #12]
 8023f3e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8023f42:	68fb      	ldr	r3, [r7, #12]
 8023f44:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8023f48:	68fb      	ldr	r3, [r7, #12]
 8023f4a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8023f4c:	2201      	movs	r2, #1
 8023f4e:	9203      	str	r2, [sp, #12]
 8023f50:	68ba      	ldr	r2, [r7, #8]
 8023f52:	9202      	str	r2, [sp, #8]
 8023f54:	4a06      	ldr	r2, [pc, #24]	; (8023f70 <etharp_request_dst+0x40>)
 8023f56:	9201      	str	r2, [sp, #4]
 8023f58:	9300      	str	r3, [sp, #0]
 8023f5a:	4603      	mov	r3, r0
 8023f5c:	687a      	ldr	r2, [r7, #4]
 8023f5e:	68f8      	ldr	r0, [r7, #12]
 8023f60:	f7ff ff5a 	bl	8023e18 <etharp_raw>
 8023f64:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8023f66:	4618      	mov	r0, r3
 8023f68:	3710      	adds	r7, #16
 8023f6a:	46bd      	mov	sp, r7
 8023f6c:	bd80      	pop	{r7, pc}
 8023f6e:	bf00      	nop
 8023f70:	0802cf6c 	.word	0x0802cf6c

08023f74 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8023f74:	b580      	push	{r7, lr}
 8023f76:	b082      	sub	sp, #8
 8023f78:	af00      	add	r7, sp, #0
 8023f7a:	6078      	str	r0, [r7, #4]
 8023f7c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8023f7e:	4a05      	ldr	r2, [pc, #20]	; (8023f94 <etharp_request+0x20>)
 8023f80:	6839      	ldr	r1, [r7, #0]
 8023f82:	6878      	ldr	r0, [r7, #4]
 8023f84:	f7ff ffd4 	bl	8023f30 <etharp_request_dst>
 8023f88:	4603      	mov	r3, r0
}
 8023f8a:	4618      	mov	r0, r3
 8023f8c:	3708      	adds	r7, #8
 8023f8e:	46bd      	mov	sp, r7
 8023f90:	bd80      	pop	{r7, pc}
 8023f92:	bf00      	nop
 8023f94:	0802cf64 	.word	0x0802cf64

08023f98 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8023f98:	b580      	push	{r7, lr}
 8023f9a:	b08e      	sub	sp, #56	; 0x38
 8023f9c:	af04      	add	r7, sp, #16
 8023f9e:	6078      	str	r0, [r7, #4]
 8023fa0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8023fa2:	4b79      	ldr	r3, [pc, #484]	; (8024188 <icmp_input+0x1f0>)
 8023fa4:	689b      	ldr	r3, [r3, #8]
 8023fa6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8023fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023faa:	781b      	ldrb	r3, [r3, #0]
 8023fac:	f003 030f 	and.w	r3, r3, #15
 8023fb0:	b2db      	uxtb	r3, r3
 8023fb2:	009b      	lsls	r3, r3, #2
 8023fb4:	b2db      	uxtb	r3, r3
 8023fb6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8023fb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8023fba:	2b13      	cmp	r3, #19
 8023fbc:	f240 80cd 	bls.w	802415a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8023fc0:	687b      	ldr	r3, [r7, #4]
 8023fc2:	895b      	ldrh	r3, [r3, #10]
 8023fc4:	2b03      	cmp	r3, #3
 8023fc6:	f240 80ca 	bls.w	802415e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8023fca:	687b      	ldr	r3, [r7, #4]
 8023fcc:	685b      	ldr	r3, [r3, #4]
 8023fce:	781b      	ldrb	r3, [r3, #0]
 8023fd0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8023fd4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8023fd8:	2b00      	cmp	r3, #0
 8023fda:	f000 80b7 	beq.w	802414c <icmp_input+0x1b4>
 8023fde:	2b08      	cmp	r3, #8
 8023fe0:	f040 80b7 	bne.w	8024152 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8023fe4:	4b69      	ldr	r3, [pc, #420]	; (802418c <icmp_input+0x1f4>)
 8023fe6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8023fe8:	4b67      	ldr	r3, [pc, #412]	; (8024188 <icmp_input+0x1f0>)
 8023fea:	695b      	ldr	r3, [r3, #20]
 8023fec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023ff0:	2be0      	cmp	r3, #224	; 0xe0
 8023ff2:	f000 80bb 	beq.w	802416c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8023ff6:	4b64      	ldr	r3, [pc, #400]	; (8024188 <icmp_input+0x1f0>)
 8023ff8:	695b      	ldr	r3, [r3, #20]
 8023ffa:	4a63      	ldr	r2, [pc, #396]	; (8024188 <icmp_input+0x1f0>)
 8023ffc:	6812      	ldr	r2, [r2, #0]
 8023ffe:	4611      	mov	r1, r2
 8024000:	4618      	mov	r0, r3
 8024002:	f000 fbf1 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 8024006:	4603      	mov	r3, r0
 8024008:	2b00      	cmp	r3, #0
 802400a:	f040 80b1 	bne.w	8024170 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802400e:	687b      	ldr	r3, [r7, #4]
 8024010:	891b      	ldrh	r3, [r3, #8]
 8024012:	2b07      	cmp	r3, #7
 8024014:	f240 80a5 	bls.w	8024162 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024018:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802401a:	330e      	adds	r3, #14
 802401c:	4619      	mov	r1, r3
 802401e:	6878      	ldr	r0, [r7, #4]
 8024020:	f7fd ff4e 	bl	8021ec0 <pbuf_add_header>
 8024024:	4603      	mov	r3, r0
 8024026:	2b00      	cmp	r3, #0
 8024028:	d04b      	beq.n	80240c2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802402a:	687b      	ldr	r3, [r7, #4]
 802402c:	891a      	ldrh	r2, [r3, #8]
 802402e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024030:	4413      	add	r3, r2
 8024032:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8024034:	687b      	ldr	r3, [r7, #4]
 8024036:	891b      	ldrh	r3, [r3, #8]
 8024038:	8b7a      	ldrh	r2, [r7, #26]
 802403a:	429a      	cmp	r2, r3
 802403c:	f0c0 809a 	bcc.w	8024174 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8024040:	8b7b      	ldrh	r3, [r7, #26]
 8024042:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024046:	4619      	mov	r1, r3
 8024048:	200e      	movs	r0, #14
 802404a:	f7fd fced 	bl	8021a28 <pbuf_alloc>
 802404e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8024050:	697b      	ldr	r3, [r7, #20]
 8024052:	2b00      	cmp	r3, #0
 8024054:	f000 8090 	beq.w	8024178 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8024058:	697b      	ldr	r3, [r7, #20]
 802405a:	895b      	ldrh	r3, [r3, #10]
 802405c:	461a      	mov	r2, r3
 802405e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024060:	3308      	adds	r3, #8
 8024062:	429a      	cmp	r2, r3
 8024064:	d203      	bcs.n	802406e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8024066:	6978      	ldr	r0, [r7, #20]
 8024068:	f7fd ffc0 	bl	8021fec <pbuf_free>
          goto icmperr;
 802406c:	e085      	b.n	802417a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 802406e:	697b      	ldr	r3, [r7, #20]
 8024070:	685b      	ldr	r3, [r3, #4]
 8024072:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8024074:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8024076:	4618      	mov	r0, r3
 8024078:	f001 fbe0 	bl	802583c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 802407c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802407e:	4619      	mov	r1, r3
 8024080:	6978      	ldr	r0, [r7, #20]
 8024082:	f7fd ff2d 	bl	8021ee0 <pbuf_remove_header>
 8024086:	4603      	mov	r3, r0
 8024088:	2b00      	cmp	r3, #0
 802408a:	d009      	beq.n	80240a0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802408c:	4b40      	ldr	r3, [pc, #256]	; (8024190 <icmp_input+0x1f8>)
 802408e:	22b6      	movs	r2, #182	; 0xb6
 8024090:	4940      	ldr	r1, [pc, #256]	; (8024194 <icmp_input+0x1fc>)
 8024092:	4841      	ldr	r0, [pc, #260]	; (8024198 <icmp_input+0x200>)
 8024094:	f001 fce2 	bl	8025a5c <iprintf>
          pbuf_free(r);
 8024098:	6978      	ldr	r0, [r7, #20]
 802409a:	f7fd ffa7 	bl	8021fec <pbuf_free>
          goto icmperr;
 802409e:	e06c      	b.n	802417a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80240a0:	6879      	ldr	r1, [r7, #4]
 80240a2:	6978      	ldr	r0, [r7, #20]
 80240a4:	f7fe f8ca 	bl	802223c <pbuf_copy>
 80240a8:	4603      	mov	r3, r0
 80240aa:	2b00      	cmp	r3, #0
 80240ac:	d003      	beq.n	80240b6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80240ae:	6978      	ldr	r0, [r7, #20]
 80240b0:	f7fd ff9c 	bl	8021fec <pbuf_free>
          goto icmperr;
 80240b4:	e061      	b.n	802417a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80240b6:	6878      	ldr	r0, [r7, #4]
 80240b8:	f7fd ff98 	bl	8021fec <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80240bc:	697b      	ldr	r3, [r7, #20]
 80240be:	607b      	str	r3, [r7, #4]
 80240c0:	e00f      	b.n	80240e2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80240c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80240c4:	330e      	adds	r3, #14
 80240c6:	4619      	mov	r1, r3
 80240c8:	6878      	ldr	r0, [r7, #4]
 80240ca:	f7fd ff09 	bl	8021ee0 <pbuf_remove_header>
 80240ce:	4603      	mov	r3, r0
 80240d0:	2b00      	cmp	r3, #0
 80240d2:	d006      	beq.n	80240e2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80240d4:	4b2e      	ldr	r3, [pc, #184]	; (8024190 <icmp_input+0x1f8>)
 80240d6:	22c7      	movs	r2, #199	; 0xc7
 80240d8:	4930      	ldr	r1, [pc, #192]	; (802419c <icmp_input+0x204>)
 80240da:	482f      	ldr	r0, [pc, #188]	; (8024198 <icmp_input+0x200>)
 80240dc:	f001 fcbe 	bl	8025a5c <iprintf>
          goto icmperr;
 80240e0:	e04b      	b.n	802417a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80240e2:	687b      	ldr	r3, [r7, #4]
 80240e4:	685b      	ldr	r3, [r3, #4]
 80240e6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80240e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80240ea:	4619      	mov	r1, r3
 80240ec:	6878      	ldr	r0, [r7, #4]
 80240ee:	f7fd fee7 	bl	8021ec0 <pbuf_add_header>
 80240f2:	4603      	mov	r3, r0
 80240f4:	2b00      	cmp	r3, #0
 80240f6:	d12b      	bne.n	8024150 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80240f8:	687b      	ldr	r3, [r7, #4]
 80240fa:	685b      	ldr	r3, [r3, #4]
 80240fc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80240fe:	69fb      	ldr	r3, [r7, #28]
 8024100:	681a      	ldr	r2, [r3, #0]
 8024102:	68fb      	ldr	r3, [r7, #12]
 8024104:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8024106:	4b20      	ldr	r3, [pc, #128]	; (8024188 <icmp_input+0x1f0>)
 8024108:	691a      	ldr	r2, [r3, #16]
 802410a:	68fb      	ldr	r3, [r7, #12]
 802410c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802410e:	693b      	ldr	r3, [r7, #16]
 8024110:	2200      	movs	r2, #0
 8024112:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8024114:	693b      	ldr	r3, [r7, #16]
 8024116:	2200      	movs	r2, #0
 8024118:	709a      	strb	r2, [r3, #2]
 802411a:	2200      	movs	r2, #0
 802411c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802411e:	68fb      	ldr	r3, [r7, #12]
 8024120:	22ff      	movs	r2, #255	; 0xff
 8024122:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8024124:	68fb      	ldr	r3, [r7, #12]
 8024126:	2200      	movs	r2, #0
 8024128:	729a      	strb	r2, [r3, #10]
 802412a:	2200      	movs	r2, #0
 802412c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802412e:	683b      	ldr	r3, [r7, #0]
 8024130:	9302      	str	r3, [sp, #8]
 8024132:	2301      	movs	r3, #1
 8024134:	9301      	str	r3, [sp, #4]
 8024136:	2300      	movs	r3, #0
 8024138:	9300      	str	r3, [sp, #0]
 802413a:	23ff      	movs	r3, #255	; 0xff
 802413c:	2200      	movs	r2, #0
 802413e:	69f9      	ldr	r1, [r7, #28]
 8024140:	6878      	ldr	r0, [r7, #4]
 8024142:	f000 fa6b 	bl	802461c <ip4_output_if>
 8024146:	4603      	mov	r3, r0
 8024148:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802414a:	e001      	b.n	8024150 <icmp_input+0x1b8>
      break;
 802414c:	bf00      	nop
 802414e:	e000      	b.n	8024152 <icmp_input+0x1ba>
      break;
 8024150:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8024152:	6878      	ldr	r0, [r7, #4]
 8024154:	f7fd ff4a 	bl	8021fec <pbuf_free>
  return;
 8024158:	e013      	b.n	8024182 <icmp_input+0x1ea>
    goto lenerr;
 802415a:	bf00      	nop
 802415c:	e002      	b.n	8024164 <icmp_input+0x1cc>
    goto lenerr;
 802415e:	bf00      	nop
 8024160:	e000      	b.n	8024164 <icmp_input+0x1cc>
        goto lenerr;
 8024162:	bf00      	nop
lenerr:
  pbuf_free(p);
 8024164:	6878      	ldr	r0, [r7, #4]
 8024166:	f7fd ff41 	bl	8021fec <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 802416a:	e00a      	b.n	8024182 <icmp_input+0x1ea>
        goto icmperr;
 802416c:	bf00      	nop
 802416e:	e004      	b.n	802417a <icmp_input+0x1e2>
        goto icmperr;
 8024170:	bf00      	nop
 8024172:	e002      	b.n	802417a <icmp_input+0x1e2>
          goto icmperr;
 8024174:	bf00      	nop
 8024176:	e000      	b.n	802417a <icmp_input+0x1e2>
          goto icmperr;
 8024178:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 802417a:	6878      	ldr	r0, [r7, #4]
 802417c:	f7fd ff36 	bl	8021fec <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8024180:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8024182:	3728      	adds	r7, #40	; 0x28
 8024184:	46bd      	mov	sp, r7
 8024186:	bd80      	pop	{r7, pc}
 8024188:	20012694 	.word	0x20012694
 802418c:	200126a8 	.word	0x200126a8
 8024190:	0802c558 	.word	0x0802c558
 8024194:	0802c5d0 	.word	0x0802c5d0
 8024198:	0802c608 	.word	0x0802c608
 802419c:	0802c630 	.word	0x0802c630

080241a0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80241a0:	b580      	push	{r7, lr}
 80241a2:	b082      	sub	sp, #8
 80241a4:	af00      	add	r7, sp, #0
 80241a6:	6078      	str	r0, [r7, #4]
 80241a8:	460b      	mov	r3, r1
 80241aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80241ac:	78fb      	ldrb	r3, [r7, #3]
 80241ae:	461a      	mov	r2, r3
 80241b0:	2103      	movs	r1, #3
 80241b2:	6878      	ldr	r0, [r7, #4]
 80241b4:	f000 f814 	bl	80241e0 <icmp_send_response>
}
 80241b8:	bf00      	nop
 80241ba:	3708      	adds	r7, #8
 80241bc:	46bd      	mov	sp, r7
 80241be:	bd80      	pop	{r7, pc}

080241c0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80241c0:	b580      	push	{r7, lr}
 80241c2:	b082      	sub	sp, #8
 80241c4:	af00      	add	r7, sp, #0
 80241c6:	6078      	str	r0, [r7, #4]
 80241c8:	460b      	mov	r3, r1
 80241ca:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80241cc:	78fb      	ldrb	r3, [r7, #3]
 80241ce:	461a      	mov	r2, r3
 80241d0:	210b      	movs	r1, #11
 80241d2:	6878      	ldr	r0, [r7, #4]
 80241d4:	f000 f804 	bl	80241e0 <icmp_send_response>
}
 80241d8:	bf00      	nop
 80241da:	3708      	adds	r7, #8
 80241dc:	46bd      	mov	sp, r7
 80241de:	bd80      	pop	{r7, pc}

080241e0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80241e0:	b580      	push	{r7, lr}
 80241e2:	b08c      	sub	sp, #48	; 0x30
 80241e4:	af04      	add	r7, sp, #16
 80241e6:	6078      	str	r0, [r7, #4]
 80241e8:	460b      	mov	r3, r1
 80241ea:	70fb      	strb	r3, [r7, #3]
 80241ec:	4613      	mov	r3, r2
 80241ee:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80241f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80241f4:	2124      	movs	r1, #36	; 0x24
 80241f6:	2022      	movs	r0, #34	; 0x22
 80241f8:	f7fd fc16 	bl	8021a28 <pbuf_alloc>
 80241fc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80241fe:	69fb      	ldr	r3, [r7, #28]
 8024200:	2b00      	cmp	r3, #0
 8024202:	d04c      	beq.n	802429e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8024204:	69fb      	ldr	r3, [r7, #28]
 8024206:	895b      	ldrh	r3, [r3, #10]
 8024208:	2b23      	cmp	r3, #35	; 0x23
 802420a:	d806      	bhi.n	802421a <icmp_send_response+0x3a>
 802420c:	4b26      	ldr	r3, [pc, #152]	; (80242a8 <icmp_send_response+0xc8>)
 802420e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8024212:	4926      	ldr	r1, [pc, #152]	; (80242ac <icmp_send_response+0xcc>)
 8024214:	4826      	ldr	r0, [pc, #152]	; (80242b0 <icmp_send_response+0xd0>)
 8024216:	f001 fc21 	bl	8025a5c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802421a:	687b      	ldr	r3, [r7, #4]
 802421c:	685b      	ldr	r3, [r3, #4]
 802421e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8024220:	69fb      	ldr	r3, [r7, #28]
 8024222:	685b      	ldr	r3, [r3, #4]
 8024224:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8024226:	697b      	ldr	r3, [r7, #20]
 8024228:	78fa      	ldrb	r2, [r7, #3]
 802422a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 802422c:	697b      	ldr	r3, [r7, #20]
 802422e:	78ba      	ldrb	r2, [r7, #2]
 8024230:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8024232:	697b      	ldr	r3, [r7, #20]
 8024234:	2200      	movs	r2, #0
 8024236:	711a      	strb	r2, [r3, #4]
 8024238:	2200      	movs	r2, #0
 802423a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 802423c:	697b      	ldr	r3, [r7, #20]
 802423e:	2200      	movs	r2, #0
 8024240:	719a      	strb	r2, [r3, #6]
 8024242:	2200      	movs	r2, #0
 8024244:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8024246:	69fb      	ldr	r3, [r7, #28]
 8024248:	685b      	ldr	r3, [r3, #4]
 802424a:	f103 0008 	add.w	r0, r3, #8
 802424e:	687b      	ldr	r3, [r7, #4]
 8024250:	685b      	ldr	r3, [r3, #4]
 8024252:	221c      	movs	r2, #28
 8024254:	4619      	mov	r1, r3
 8024256:	f001 faf1 	bl	802583c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 802425a:	69bb      	ldr	r3, [r7, #24]
 802425c:	68db      	ldr	r3, [r3, #12]
 802425e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8024260:	f107 030c 	add.w	r3, r7, #12
 8024264:	4618      	mov	r0, r3
 8024266:	f000 f825 	bl	80242b4 <ip4_route>
 802426a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 802426c:	693b      	ldr	r3, [r7, #16]
 802426e:	2b00      	cmp	r3, #0
 8024270:	d011      	beq.n	8024296 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8024272:	697b      	ldr	r3, [r7, #20]
 8024274:	2200      	movs	r2, #0
 8024276:	709a      	strb	r2, [r3, #2]
 8024278:	2200      	movs	r2, #0
 802427a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802427c:	f107 020c 	add.w	r2, r7, #12
 8024280:	693b      	ldr	r3, [r7, #16]
 8024282:	9302      	str	r3, [sp, #8]
 8024284:	2301      	movs	r3, #1
 8024286:	9301      	str	r3, [sp, #4]
 8024288:	2300      	movs	r3, #0
 802428a:	9300      	str	r3, [sp, #0]
 802428c:	23ff      	movs	r3, #255	; 0xff
 802428e:	2100      	movs	r1, #0
 8024290:	69f8      	ldr	r0, [r7, #28]
 8024292:	f000 f9c3 	bl	802461c <ip4_output_if>
  }
  pbuf_free(q);
 8024296:	69f8      	ldr	r0, [r7, #28]
 8024298:	f7fd fea8 	bl	8021fec <pbuf_free>
 802429c:	e000      	b.n	80242a0 <icmp_send_response+0xc0>
    return;
 802429e:	bf00      	nop
}
 80242a0:	3720      	adds	r7, #32
 80242a2:	46bd      	mov	sp, r7
 80242a4:	bd80      	pop	{r7, pc}
 80242a6:	bf00      	nop
 80242a8:	0802c558 	.word	0x0802c558
 80242ac:	0802c664 	.word	0x0802c664
 80242b0:	0802c608 	.word	0x0802c608

080242b4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80242b4:	b480      	push	{r7}
 80242b6:	b085      	sub	sp, #20
 80242b8:	af00      	add	r7, sp, #0
 80242ba:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80242bc:	4b33      	ldr	r3, [pc, #204]	; (802438c <ip4_route+0xd8>)
 80242be:	681b      	ldr	r3, [r3, #0]
 80242c0:	60fb      	str	r3, [r7, #12]
 80242c2:	e036      	b.n	8024332 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80242c4:	68fb      	ldr	r3, [r7, #12]
 80242c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80242ca:	f003 0301 	and.w	r3, r3, #1
 80242ce:	b2db      	uxtb	r3, r3
 80242d0:	2b00      	cmp	r3, #0
 80242d2:	d02b      	beq.n	802432c <ip4_route+0x78>
 80242d4:	68fb      	ldr	r3, [r7, #12]
 80242d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80242da:	089b      	lsrs	r3, r3, #2
 80242dc:	f003 0301 	and.w	r3, r3, #1
 80242e0:	b2db      	uxtb	r3, r3
 80242e2:	2b00      	cmp	r3, #0
 80242e4:	d022      	beq.n	802432c <ip4_route+0x78>
 80242e6:	68fb      	ldr	r3, [r7, #12]
 80242e8:	3304      	adds	r3, #4
 80242ea:	681b      	ldr	r3, [r3, #0]
 80242ec:	2b00      	cmp	r3, #0
 80242ee:	d01d      	beq.n	802432c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80242f0:	687b      	ldr	r3, [r7, #4]
 80242f2:	681a      	ldr	r2, [r3, #0]
 80242f4:	68fb      	ldr	r3, [r7, #12]
 80242f6:	3304      	adds	r3, #4
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	405a      	eors	r2, r3
 80242fc:	68fb      	ldr	r3, [r7, #12]
 80242fe:	3308      	adds	r3, #8
 8024300:	681b      	ldr	r3, [r3, #0]
 8024302:	4013      	ands	r3, r2
 8024304:	2b00      	cmp	r3, #0
 8024306:	d101      	bne.n	802430c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8024308:	68fb      	ldr	r3, [r7, #12]
 802430a:	e038      	b.n	802437e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 802430c:	68fb      	ldr	r3, [r7, #12]
 802430e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024312:	f003 0302 	and.w	r3, r3, #2
 8024316:	2b00      	cmp	r3, #0
 8024318:	d108      	bne.n	802432c <ip4_route+0x78>
 802431a:	687b      	ldr	r3, [r7, #4]
 802431c:	681a      	ldr	r2, [r3, #0]
 802431e:	68fb      	ldr	r3, [r7, #12]
 8024320:	330c      	adds	r3, #12
 8024322:	681b      	ldr	r3, [r3, #0]
 8024324:	429a      	cmp	r2, r3
 8024326:	d101      	bne.n	802432c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8024328:	68fb      	ldr	r3, [r7, #12]
 802432a:	e028      	b.n	802437e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 802432c:	68fb      	ldr	r3, [r7, #12]
 802432e:	681b      	ldr	r3, [r3, #0]
 8024330:	60fb      	str	r3, [r7, #12]
 8024332:	68fb      	ldr	r3, [r7, #12]
 8024334:	2b00      	cmp	r3, #0
 8024336:	d1c5      	bne.n	80242c4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024338:	4b15      	ldr	r3, [pc, #84]	; (8024390 <ip4_route+0xdc>)
 802433a:	681b      	ldr	r3, [r3, #0]
 802433c:	2b00      	cmp	r3, #0
 802433e:	d01a      	beq.n	8024376 <ip4_route+0xc2>
 8024340:	4b13      	ldr	r3, [pc, #76]	; (8024390 <ip4_route+0xdc>)
 8024342:	681b      	ldr	r3, [r3, #0]
 8024344:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024348:	f003 0301 	and.w	r3, r3, #1
 802434c:	2b00      	cmp	r3, #0
 802434e:	d012      	beq.n	8024376 <ip4_route+0xc2>
 8024350:	4b0f      	ldr	r3, [pc, #60]	; (8024390 <ip4_route+0xdc>)
 8024352:	681b      	ldr	r3, [r3, #0]
 8024354:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024358:	f003 0304 	and.w	r3, r3, #4
 802435c:	2b00      	cmp	r3, #0
 802435e:	d00a      	beq.n	8024376 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8024360:	4b0b      	ldr	r3, [pc, #44]	; (8024390 <ip4_route+0xdc>)
 8024362:	681b      	ldr	r3, [r3, #0]
 8024364:	3304      	adds	r3, #4
 8024366:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8024368:	2b00      	cmp	r3, #0
 802436a:	d004      	beq.n	8024376 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	681b      	ldr	r3, [r3, #0]
 8024370:	b2db      	uxtb	r3, r3
 8024372:	2b7f      	cmp	r3, #127	; 0x7f
 8024374:	d101      	bne.n	802437a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8024376:	2300      	movs	r3, #0
 8024378:	e001      	b.n	802437e <ip4_route+0xca>
  }

  return netif_default;
 802437a:	4b05      	ldr	r3, [pc, #20]	; (8024390 <ip4_route+0xdc>)
 802437c:	681b      	ldr	r3, [r3, #0]
}
 802437e:	4618      	mov	r0, r3
 8024380:	3714      	adds	r7, #20
 8024382:	46bd      	mov	sp, r7
 8024384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024388:	4770      	bx	lr
 802438a:	bf00      	nop
 802438c:	20015ca4 	.word	0x20015ca4
 8024390:	20015ca8 	.word	0x20015ca8

08024394 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8024394:	b580      	push	{r7, lr}
 8024396:	b082      	sub	sp, #8
 8024398:	af00      	add	r7, sp, #0
 802439a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802439c:	687b      	ldr	r3, [r7, #4]
 802439e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80243a2:	f003 0301 	and.w	r3, r3, #1
 80243a6:	b2db      	uxtb	r3, r3
 80243a8:	2b00      	cmp	r3, #0
 80243aa:	d016      	beq.n	80243da <ip4_input_accept+0x46>
 80243ac:	687b      	ldr	r3, [r7, #4]
 80243ae:	3304      	adds	r3, #4
 80243b0:	681b      	ldr	r3, [r3, #0]
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d011      	beq.n	80243da <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80243b6:	4b0b      	ldr	r3, [pc, #44]	; (80243e4 <ip4_input_accept+0x50>)
 80243b8:	695a      	ldr	r2, [r3, #20]
 80243ba:	687b      	ldr	r3, [r7, #4]
 80243bc:	3304      	adds	r3, #4
 80243be:	681b      	ldr	r3, [r3, #0]
 80243c0:	429a      	cmp	r2, r3
 80243c2:	d008      	beq.n	80243d6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80243c4:	4b07      	ldr	r3, [pc, #28]	; (80243e4 <ip4_input_accept+0x50>)
 80243c6:	695b      	ldr	r3, [r3, #20]
 80243c8:	6879      	ldr	r1, [r7, #4]
 80243ca:	4618      	mov	r0, r3
 80243cc:	f000 fa0c 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 80243d0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80243d2:	2b00      	cmp	r3, #0
 80243d4:	d001      	beq.n	80243da <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80243d6:	2301      	movs	r3, #1
 80243d8:	e000      	b.n	80243dc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80243da:	2300      	movs	r3, #0
}
 80243dc:	4618      	mov	r0, r3
 80243de:	3708      	adds	r7, #8
 80243e0:	46bd      	mov	sp, r7
 80243e2:	bd80      	pop	{r7, pc}
 80243e4:	20012694 	.word	0x20012694

080243e8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80243e8:	b580      	push	{r7, lr}
 80243ea:	b086      	sub	sp, #24
 80243ec:	af00      	add	r7, sp, #0
 80243ee:	6078      	str	r0, [r7, #4]
 80243f0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80243f2:	687b      	ldr	r3, [r7, #4]
 80243f4:	685b      	ldr	r3, [r3, #4]
 80243f6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80243f8:	697b      	ldr	r3, [r7, #20]
 80243fa:	781b      	ldrb	r3, [r3, #0]
 80243fc:	091b      	lsrs	r3, r3, #4
 80243fe:	b2db      	uxtb	r3, r3
 8024400:	2b04      	cmp	r3, #4
 8024402:	d004      	beq.n	802440e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8024404:	6878      	ldr	r0, [r7, #4]
 8024406:	f7fd fdf1 	bl	8021fec <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802440a:	2300      	movs	r3, #0
 802440c:	e0fd      	b.n	802460a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802440e:	697b      	ldr	r3, [r7, #20]
 8024410:	781b      	ldrb	r3, [r3, #0]
 8024412:	f003 030f 	and.w	r3, r3, #15
 8024416:	b2db      	uxtb	r3, r3
 8024418:	009b      	lsls	r3, r3, #2
 802441a:	b2db      	uxtb	r3, r3
 802441c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802441e:	697b      	ldr	r3, [r7, #20]
 8024420:	885b      	ldrh	r3, [r3, #2]
 8024422:	b29b      	uxth	r3, r3
 8024424:	4618      	mov	r0, r3
 8024426:	f7fc fa05 	bl	8020834 <lwip_htons>
 802442a:	4603      	mov	r3, r0
 802442c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802442e:	687b      	ldr	r3, [r7, #4]
 8024430:	891b      	ldrh	r3, [r3, #8]
 8024432:	89ba      	ldrh	r2, [r7, #12]
 8024434:	429a      	cmp	r2, r3
 8024436:	d204      	bcs.n	8024442 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8024438:	89bb      	ldrh	r3, [r7, #12]
 802443a:	4619      	mov	r1, r3
 802443c:	6878      	ldr	r0, [r7, #4]
 802443e:	f7fd fc4f 	bl	8021ce0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8024442:	687b      	ldr	r3, [r7, #4]
 8024444:	895b      	ldrh	r3, [r3, #10]
 8024446:	89fa      	ldrh	r2, [r7, #14]
 8024448:	429a      	cmp	r2, r3
 802444a:	d807      	bhi.n	802445c <ip4_input+0x74>
 802444c:	687b      	ldr	r3, [r7, #4]
 802444e:	891b      	ldrh	r3, [r3, #8]
 8024450:	89ba      	ldrh	r2, [r7, #12]
 8024452:	429a      	cmp	r2, r3
 8024454:	d802      	bhi.n	802445c <ip4_input+0x74>
 8024456:	89fb      	ldrh	r3, [r7, #14]
 8024458:	2b13      	cmp	r3, #19
 802445a:	d804      	bhi.n	8024466 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 802445c:	6878      	ldr	r0, [r7, #4]
 802445e:	f7fd fdc5 	bl	8021fec <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8024462:	2300      	movs	r3, #0
 8024464:	e0d1      	b.n	802460a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8024466:	697b      	ldr	r3, [r7, #20]
 8024468:	691b      	ldr	r3, [r3, #16]
 802446a:	4a6a      	ldr	r2, [pc, #424]	; (8024614 <ip4_input+0x22c>)
 802446c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802446e:	697b      	ldr	r3, [r7, #20]
 8024470:	68db      	ldr	r3, [r3, #12]
 8024472:	4a68      	ldr	r2, [pc, #416]	; (8024614 <ip4_input+0x22c>)
 8024474:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024476:	4b67      	ldr	r3, [pc, #412]	; (8024614 <ip4_input+0x22c>)
 8024478:	695b      	ldr	r3, [r3, #20]
 802447a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802447e:	2be0      	cmp	r3, #224	; 0xe0
 8024480:	d112      	bne.n	80244a8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8024482:	683b      	ldr	r3, [r7, #0]
 8024484:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024488:	f003 0301 	and.w	r3, r3, #1
 802448c:	b2db      	uxtb	r3, r3
 802448e:	2b00      	cmp	r3, #0
 8024490:	d007      	beq.n	80244a2 <ip4_input+0xba>
 8024492:	683b      	ldr	r3, [r7, #0]
 8024494:	3304      	adds	r3, #4
 8024496:	681b      	ldr	r3, [r3, #0]
 8024498:	2b00      	cmp	r3, #0
 802449a:	d002      	beq.n	80244a2 <ip4_input+0xba>
      netif = inp;
 802449c:	683b      	ldr	r3, [r7, #0]
 802449e:	613b      	str	r3, [r7, #16]
 80244a0:	e02a      	b.n	80244f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80244a2:	2300      	movs	r3, #0
 80244a4:	613b      	str	r3, [r7, #16]
 80244a6:	e027      	b.n	80244f8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80244a8:	6838      	ldr	r0, [r7, #0]
 80244aa:	f7ff ff73 	bl	8024394 <ip4_input_accept>
 80244ae:	4603      	mov	r3, r0
 80244b0:	2b00      	cmp	r3, #0
 80244b2:	d002      	beq.n	80244ba <ip4_input+0xd2>
      netif = inp;
 80244b4:	683b      	ldr	r3, [r7, #0]
 80244b6:	613b      	str	r3, [r7, #16]
 80244b8:	e01e      	b.n	80244f8 <ip4_input+0x110>
    } else {
      netif = NULL;
 80244ba:	2300      	movs	r3, #0
 80244bc:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80244be:	4b55      	ldr	r3, [pc, #340]	; (8024614 <ip4_input+0x22c>)
 80244c0:	695b      	ldr	r3, [r3, #20]
 80244c2:	b2db      	uxtb	r3, r3
 80244c4:	2b7f      	cmp	r3, #127	; 0x7f
 80244c6:	d017      	beq.n	80244f8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80244c8:	4b53      	ldr	r3, [pc, #332]	; (8024618 <ip4_input+0x230>)
 80244ca:	681b      	ldr	r3, [r3, #0]
 80244cc:	613b      	str	r3, [r7, #16]
 80244ce:	e00e      	b.n	80244ee <ip4_input+0x106>
          if (netif == inp) {
 80244d0:	693a      	ldr	r2, [r7, #16]
 80244d2:	683b      	ldr	r3, [r7, #0]
 80244d4:	429a      	cmp	r2, r3
 80244d6:	d006      	beq.n	80244e6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80244d8:	6938      	ldr	r0, [r7, #16]
 80244da:	f7ff ff5b 	bl	8024394 <ip4_input_accept>
 80244de:	4603      	mov	r3, r0
 80244e0:	2b00      	cmp	r3, #0
 80244e2:	d108      	bne.n	80244f6 <ip4_input+0x10e>
 80244e4:	e000      	b.n	80244e8 <ip4_input+0x100>
            continue;
 80244e6:	bf00      	nop
        NETIF_FOREACH(netif) {
 80244e8:	693b      	ldr	r3, [r7, #16]
 80244ea:	681b      	ldr	r3, [r3, #0]
 80244ec:	613b      	str	r3, [r7, #16]
 80244ee:	693b      	ldr	r3, [r7, #16]
 80244f0:	2b00      	cmp	r3, #0
 80244f2:	d1ed      	bne.n	80244d0 <ip4_input+0xe8>
 80244f4:	e000      	b.n	80244f8 <ip4_input+0x110>
            break;
 80244f6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80244f8:	4b46      	ldr	r3, [pc, #280]	; (8024614 <ip4_input+0x22c>)
 80244fa:	691b      	ldr	r3, [r3, #16]
 80244fc:	6839      	ldr	r1, [r7, #0]
 80244fe:	4618      	mov	r0, r3
 8024500:	f000 f972 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 8024504:	4603      	mov	r3, r0
 8024506:	2b00      	cmp	r3, #0
 8024508:	d105      	bne.n	8024516 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802450a:	4b42      	ldr	r3, [pc, #264]	; (8024614 <ip4_input+0x22c>)
 802450c:	691b      	ldr	r3, [r3, #16]
 802450e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024512:	2be0      	cmp	r3, #224	; 0xe0
 8024514:	d104      	bne.n	8024520 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8024516:	6878      	ldr	r0, [r7, #4]
 8024518:	f7fd fd68 	bl	8021fec <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 802451c:	2300      	movs	r3, #0
 802451e:	e074      	b.n	802460a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8024520:	693b      	ldr	r3, [r7, #16]
 8024522:	2b00      	cmp	r3, #0
 8024524:	d104      	bne.n	8024530 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8024526:	6878      	ldr	r0, [r7, #4]
 8024528:	f7fd fd60 	bl	8021fec <pbuf_free>
    return ERR_OK;
 802452c:	2300      	movs	r3, #0
 802452e:	e06c      	b.n	802460a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8024530:	697b      	ldr	r3, [r7, #20]
 8024532:	88db      	ldrh	r3, [r3, #6]
 8024534:	b29b      	uxth	r3, r3
 8024536:	461a      	mov	r2, r3
 8024538:	f64f 733f 	movw	r3, #65343	; 0xff3f
 802453c:	4013      	ands	r3, r2
 802453e:	2b00      	cmp	r3, #0
 8024540:	d00b      	beq.n	802455a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024542:	6878      	ldr	r0, [r7, #4]
 8024544:	f000 fd26 	bl	8024f94 <ip4_reass>
 8024548:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802454a:	687b      	ldr	r3, [r7, #4]
 802454c:	2b00      	cmp	r3, #0
 802454e:	d101      	bne.n	8024554 <ip4_input+0x16c>
      return ERR_OK;
 8024550:	2300      	movs	r3, #0
 8024552:	e05a      	b.n	802460a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024554:	687b      	ldr	r3, [r7, #4]
 8024556:	685b      	ldr	r3, [r3, #4]
 8024558:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 802455a:	4a2e      	ldr	r2, [pc, #184]	; (8024614 <ip4_input+0x22c>)
 802455c:	693b      	ldr	r3, [r7, #16]
 802455e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024560:	4a2c      	ldr	r2, [pc, #176]	; (8024614 <ip4_input+0x22c>)
 8024562:	683b      	ldr	r3, [r7, #0]
 8024564:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8024566:	4a2b      	ldr	r2, [pc, #172]	; (8024614 <ip4_input+0x22c>)
 8024568:	697b      	ldr	r3, [r7, #20]
 802456a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 802456c:	697b      	ldr	r3, [r7, #20]
 802456e:	781b      	ldrb	r3, [r3, #0]
 8024570:	f003 030f 	and.w	r3, r3, #15
 8024574:	b2db      	uxtb	r3, r3
 8024576:	009b      	lsls	r3, r3, #2
 8024578:	b2db      	uxtb	r3, r3
 802457a:	b29a      	uxth	r2, r3
 802457c:	4b25      	ldr	r3, [pc, #148]	; (8024614 <ip4_input+0x22c>)
 802457e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024580:	89fb      	ldrh	r3, [r7, #14]
 8024582:	4619      	mov	r1, r3
 8024584:	6878      	ldr	r0, [r7, #4]
 8024586:	f7fd fcab 	bl	8021ee0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 802458a:	697b      	ldr	r3, [r7, #20]
 802458c:	7a5b      	ldrb	r3, [r3, #9]
 802458e:	2b01      	cmp	r3, #1
 8024590:	d006      	beq.n	80245a0 <ip4_input+0x1b8>
 8024592:	2b11      	cmp	r3, #17
 8024594:	d109      	bne.n	80245aa <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8024596:	6839      	ldr	r1, [r7, #0]
 8024598:	6878      	ldr	r0, [r7, #4]
 802459a:	f7fe f9b5 	bl	8022908 <udp_input>
        break;
 802459e:	e021      	b.n	80245e4 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80245a0:	6839      	ldr	r1, [r7, #0]
 80245a2:	6878      	ldr	r0, [r7, #4]
 80245a4:	f7ff fcf8 	bl	8023f98 <icmp_input>
        break;
 80245a8:	e01c      	b.n	80245e4 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80245aa:	4b1a      	ldr	r3, [pc, #104]	; (8024614 <ip4_input+0x22c>)
 80245ac:	695b      	ldr	r3, [r3, #20]
 80245ae:	6939      	ldr	r1, [r7, #16]
 80245b0:	4618      	mov	r0, r3
 80245b2:	f000 f919 	bl	80247e8 <ip4_addr_isbroadcast_u32>
 80245b6:	4603      	mov	r3, r0
 80245b8:	2b00      	cmp	r3, #0
 80245ba:	d10f      	bne.n	80245dc <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80245bc:	4b15      	ldr	r3, [pc, #84]	; (8024614 <ip4_input+0x22c>)
 80245be:	695b      	ldr	r3, [r3, #20]
 80245c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80245c4:	2be0      	cmp	r3, #224	; 0xe0
 80245c6:	d009      	beq.n	80245dc <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80245c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80245cc:	4619      	mov	r1, r3
 80245ce:	6878      	ldr	r0, [r7, #4]
 80245d0:	f7fd fcf9 	bl	8021fc6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80245d4:	2102      	movs	r1, #2
 80245d6:	6878      	ldr	r0, [r7, #4]
 80245d8:	f7ff fde2 	bl	80241a0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80245dc:	6878      	ldr	r0, [r7, #4]
 80245de:	f7fd fd05 	bl	8021fec <pbuf_free>
        break;
 80245e2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80245e4:	4b0b      	ldr	r3, [pc, #44]	; (8024614 <ip4_input+0x22c>)
 80245e6:	2200      	movs	r2, #0
 80245e8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80245ea:	4b0a      	ldr	r3, [pc, #40]	; (8024614 <ip4_input+0x22c>)
 80245ec:	2200      	movs	r2, #0
 80245ee:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80245f0:	4b08      	ldr	r3, [pc, #32]	; (8024614 <ip4_input+0x22c>)
 80245f2:	2200      	movs	r2, #0
 80245f4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80245f6:	4b07      	ldr	r3, [pc, #28]	; (8024614 <ip4_input+0x22c>)
 80245f8:	2200      	movs	r2, #0
 80245fa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80245fc:	4b05      	ldr	r3, [pc, #20]	; (8024614 <ip4_input+0x22c>)
 80245fe:	2200      	movs	r2, #0
 8024600:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8024602:	4b04      	ldr	r3, [pc, #16]	; (8024614 <ip4_input+0x22c>)
 8024604:	2200      	movs	r2, #0
 8024606:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8024608:	2300      	movs	r3, #0
}
 802460a:	4618      	mov	r0, r3
 802460c:	3718      	adds	r7, #24
 802460e:	46bd      	mov	sp, r7
 8024610:	bd80      	pop	{r7, pc}
 8024612:	bf00      	nop
 8024614:	20012694 	.word	0x20012694
 8024618:	20015ca4 	.word	0x20015ca4

0802461c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 802461c:	b580      	push	{r7, lr}
 802461e:	b08a      	sub	sp, #40	; 0x28
 8024620:	af04      	add	r7, sp, #16
 8024622:	60f8      	str	r0, [r7, #12]
 8024624:	60b9      	str	r1, [r7, #8]
 8024626:	607a      	str	r2, [r7, #4]
 8024628:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 802462a:	68bb      	ldr	r3, [r7, #8]
 802462c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802462e:	687b      	ldr	r3, [r7, #4]
 8024630:	2b00      	cmp	r3, #0
 8024632:	d009      	beq.n	8024648 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8024634:	68bb      	ldr	r3, [r7, #8]
 8024636:	2b00      	cmp	r3, #0
 8024638:	d003      	beq.n	8024642 <ip4_output_if+0x26>
 802463a:	68bb      	ldr	r3, [r7, #8]
 802463c:	681b      	ldr	r3, [r3, #0]
 802463e:	2b00      	cmp	r3, #0
 8024640:	d102      	bne.n	8024648 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8024642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024644:	3304      	adds	r3, #4
 8024646:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024648:	78fa      	ldrb	r2, [r7, #3]
 802464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802464c:	9302      	str	r3, [sp, #8]
 802464e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024652:	9301      	str	r3, [sp, #4]
 8024654:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024658:	9300      	str	r3, [sp, #0]
 802465a:	4613      	mov	r3, r2
 802465c:	687a      	ldr	r2, [r7, #4]
 802465e:	6979      	ldr	r1, [r7, #20]
 8024660:	68f8      	ldr	r0, [r7, #12]
 8024662:	f000 f805 	bl	8024670 <ip4_output_if_src>
 8024666:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8024668:	4618      	mov	r0, r3
 802466a:	3718      	adds	r7, #24
 802466c:	46bd      	mov	sp, r7
 802466e:	bd80      	pop	{r7, pc}

08024670 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024670:	b580      	push	{r7, lr}
 8024672:	b088      	sub	sp, #32
 8024674:	af00      	add	r7, sp, #0
 8024676:	60f8      	str	r0, [r7, #12]
 8024678:	60b9      	str	r1, [r7, #8]
 802467a:	607a      	str	r2, [r7, #4]
 802467c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802467e:	68fb      	ldr	r3, [r7, #12]
 8024680:	7b9b      	ldrb	r3, [r3, #14]
 8024682:	2b01      	cmp	r3, #1
 8024684:	d006      	beq.n	8024694 <ip4_output_if_src+0x24>
 8024686:	4b52      	ldr	r3, [pc, #328]	; (80247d0 <ip4_output_if_src+0x160>)
 8024688:	f44f 7255 	mov.w	r2, #852	; 0x354
 802468c:	4951      	ldr	r1, [pc, #324]	; (80247d4 <ip4_output_if_src+0x164>)
 802468e:	4852      	ldr	r0, [pc, #328]	; (80247d8 <ip4_output_if_src+0x168>)
 8024690:	f001 f9e4 	bl	8025a5c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8024694:	687b      	ldr	r3, [r7, #4]
 8024696:	2b00      	cmp	r3, #0
 8024698:	d060      	beq.n	802475c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 802469a:	2314      	movs	r3, #20
 802469c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802469e:	2114      	movs	r1, #20
 80246a0:	68f8      	ldr	r0, [r7, #12]
 80246a2:	f7fd fc0d 	bl	8021ec0 <pbuf_add_header>
 80246a6:	4603      	mov	r3, r0
 80246a8:	2b00      	cmp	r3, #0
 80246aa:	d002      	beq.n	80246b2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80246ac:	f06f 0301 	mvn.w	r3, #1
 80246b0:	e089      	b.n	80247c6 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80246b2:	68fb      	ldr	r3, [r7, #12]
 80246b4:	685b      	ldr	r3, [r3, #4]
 80246b6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80246b8:	68fb      	ldr	r3, [r7, #12]
 80246ba:	895b      	ldrh	r3, [r3, #10]
 80246bc:	2b13      	cmp	r3, #19
 80246be:	d806      	bhi.n	80246ce <ip4_output_if_src+0x5e>
 80246c0:	4b43      	ldr	r3, [pc, #268]	; (80247d0 <ip4_output_if_src+0x160>)
 80246c2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80246c6:	4945      	ldr	r1, [pc, #276]	; (80247dc <ip4_output_if_src+0x16c>)
 80246c8:	4843      	ldr	r0, [pc, #268]	; (80247d8 <ip4_output_if_src+0x168>)
 80246ca:	f001 f9c7 	bl	8025a5c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80246ce:	69fb      	ldr	r3, [r7, #28]
 80246d0:	78fa      	ldrb	r2, [r7, #3]
 80246d2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80246d4:	69fb      	ldr	r3, [r7, #28]
 80246d6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80246da:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80246dc:	687b      	ldr	r3, [r7, #4]
 80246de:	681a      	ldr	r2, [r3, #0]
 80246e0:	69fb      	ldr	r3, [r7, #28]
 80246e2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80246e4:	8b7b      	ldrh	r3, [r7, #26]
 80246e6:	089b      	lsrs	r3, r3, #2
 80246e8:	b29b      	uxth	r3, r3
 80246ea:	b2db      	uxtb	r3, r3
 80246ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80246f0:	b2da      	uxtb	r2, r3
 80246f2:	69fb      	ldr	r3, [r7, #28]
 80246f4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80246f6:	69fb      	ldr	r3, [r7, #28]
 80246f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80246fc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80246fe:	68fb      	ldr	r3, [r7, #12]
 8024700:	891b      	ldrh	r3, [r3, #8]
 8024702:	4618      	mov	r0, r3
 8024704:	f7fc f896 	bl	8020834 <lwip_htons>
 8024708:	4603      	mov	r3, r0
 802470a:	461a      	mov	r2, r3
 802470c:	69fb      	ldr	r3, [r7, #28]
 802470e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8024710:	69fb      	ldr	r3, [r7, #28]
 8024712:	2200      	movs	r2, #0
 8024714:	719a      	strb	r2, [r3, #6]
 8024716:	2200      	movs	r2, #0
 8024718:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802471a:	4b31      	ldr	r3, [pc, #196]	; (80247e0 <ip4_output_if_src+0x170>)
 802471c:	881b      	ldrh	r3, [r3, #0]
 802471e:	4618      	mov	r0, r3
 8024720:	f7fc f888 	bl	8020834 <lwip_htons>
 8024724:	4603      	mov	r3, r0
 8024726:	461a      	mov	r2, r3
 8024728:	69fb      	ldr	r3, [r7, #28]
 802472a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 802472c:	4b2c      	ldr	r3, [pc, #176]	; (80247e0 <ip4_output_if_src+0x170>)
 802472e:	881b      	ldrh	r3, [r3, #0]
 8024730:	3301      	adds	r3, #1
 8024732:	b29a      	uxth	r2, r3
 8024734:	4b2a      	ldr	r3, [pc, #168]	; (80247e0 <ip4_output_if_src+0x170>)
 8024736:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8024738:	68bb      	ldr	r3, [r7, #8]
 802473a:	2b00      	cmp	r3, #0
 802473c:	d104      	bne.n	8024748 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802473e:	4b29      	ldr	r3, [pc, #164]	; (80247e4 <ip4_output_if_src+0x174>)
 8024740:	681a      	ldr	r2, [r3, #0]
 8024742:	69fb      	ldr	r3, [r7, #28]
 8024744:	60da      	str	r2, [r3, #12]
 8024746:	e003      	b.n	8024750 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8024748:	68bb      	ldr	r3, [r7, #8]
 802474a:	681a      	ldr	r2, [r3, #0]
 802474c:	69fb      	ldr	r3, [r7, #28]
 802474e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024750:	69fb      	ldr	r3, [r7, #28]
 8024752:	2200      	movs	r2, #0
 8024754:	729a      	strb	r2, [r3, #10]
 8024756:	2200      	movs	r2, #0
 8024758:	72da      	strb	r2, [r3, #11]
 802475a:	e00f      	b.n	802477c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 802475c:	68fb      	ldr	r3, [r7, #12]
 802475e:	895b      	ldrh	r3, [r3, #10]
 8024760:	2b13      	cmp	r3, #19
 8024762:	d802      	bhi.n	802476a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024764:	f06f 0301 	mvn.w	r3, #1
 8024768:	e02d      	b.n	80247c6 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 802476a:	68fb      	ldr	r3, [r7, #12]
 802476c:	685b      	ldr	r3, [r3, #4]
 802476e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024770:	69fb      	ldr	r3, [r7, #28]
 8024772:	691b      	ldr	r3, [r3, #16]
 8024774:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8024776:	f107 0314 	add.w	r3, r7, #20
 802477a:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 802477c:	687b      	ldr	r3, [r7, #4]
 802477e:	681a      	ldr	r2, [r3, #0]
 8024780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024782:	3304      	adds	r3, #4
 8024784:	681b      	ldr	r3, [r3, #0]
 8024786:	429a      	cmp	r2, r3
 8024788:	d105      	bne.n	8024796 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 802478a:	68f9      	ldr	r1, [r7, #12]
 802478c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802478e:	f7fd f86f 	bl	8021870 <netif_loop_output>
 8024792:	4603      	mov	r3, r0
 8024794:	e017      	b.n	80247c6 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802479a:	2b00      	cmp	r3, #0
 802479c:	d00c      	beq.n	80247b8 <ip4_output_if_src+0x148>
 802479e:	68fb      	ldr	r3, [r7, #12]
 80247a0:	891a      	ldrh	r2, [r3, #8]
 80247a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80247a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80247a6:	429a      	cmp	r2, r3
 80247a8:	d906      	bls.n	80247b8 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 80247aa:	687a      	ldr	r2, [r7, #4]
 80247ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80247ae:	68f8      	ldr	r0, [r7, #12]
 80247b0:	f000 fde4 	bl	802537c <ip4_frag>
 80247b4:	4603      	mov	r3, r0
 80247b6:	e006      	b.n	80247c6 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80247b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80247ba:	695b      	ldr	r3, [r3, #20]
 80247bc:	687a      	ldr	r2, [r7, #4]
 80247be:	68f9      	ldr	r1, [r7, #12]
 80247c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80247c2:	4798      	blx	r3
 80247c4:	4603      	mov	r3, r0
}
 80247c6:	4618      	mov	r0, r3
 80247c8:	3720      	adds	r7, #32
 80247ca:	46bd      	mov	sp, r7
 80247cc:	bd80      	pop	{r7, pc}
 80247ce:	bf00      	nop
 80247d0:	0802c690 	.word	0x0802c690
 80247d4:	0802c708 	.word	0x0802c708
 80247d8:	0802c714 	.word	0x0802c714
 80247dc:	0802c73c 	.word	0x0802c73c
 80247e0:	200161ae 	.word	0x200161ae
 80247e4:	0802cf60 	.word	0x0802cf60

080247e8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80247e8:	b480      	push	{r7}
 80247ea:	b085      	sub	sp, #20
 80247ec:	af00      	add	r7, sp, #0
 80247ee:	6078      	str	r0, [r7, #4]
 80247f0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80247f2:	687b      	ldr	r3, [r7, #4]
 80247f4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80247f6:	687b      	ldr	r3, [r7, #4]
 80247f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80247fc:	d002      	beq.n	8024804 <ip4_addr_isbroadcast_u32+0x1c>
 80247fe:	687b      	ldr	r3, [r7, #4]
 8024800:	2b00      	cmp	r3, #0
 8024802:	d101      	bne.n	8024808 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8024804:	2301      	movs	r3, #1
 8024806:	e02a      	b.n	802485e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8024808:	683b      	ldr	r3, [r7, #0]
 802480a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802480e:	f003 0302 	and.w	r3, r3, #2
 8024812:	2b00      	cmp	r3, #0
 8024814:	d101      	bne.n	802481a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8024816:	2300      	movs	r3, #0
 8024818:	e021      	b.n	802485e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802481a:	683b      	ldr	r3, [r7, #0]
 802481c:	3304      	adds	r3, #4
 802481e:	681b      	ldr	r3, [r3, #0]
 8024820:	687a      	ldr	r2, [r7, #4]
 8024822:	429a      	cmp	r2, r3
 8024824:	d101      	bne.n	802482a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8024826:	2300      	movs	r3, #0
 8024828:	e019      	b.n	802485e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802482a:	68fa      	ldr	r2, [r7, #12]
 802482c:	683b      	ldr	r3, [r7, #0]
 802482e:	3304      	adds	r3, #4
 8024830:	681b      	ldr	r3, [r3, #0]
 8024832:	405a      	eors	r2, r3
 8024834:	683b      	ldr	r3, [r7, #0]
 8024836:	3308      	adds	r3, #8
 8024838:	681b      	ldr	r3, [r3, #0]
 802483a:	4013      	ands	r3, r2
 802483c:	2b00      	cmp	r3, #0
 802483e:	d10d      	bne.n	802485c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024840:	683b      	ldr	r3, [r7, #0]
 8024842:	3308      	adds	r3, #8
 8024844:	681b      	ldr	r3, [r3, #0]
 8024846:	43da      	mvns	r2, r3
 8024848:	687b      	ldr	r3, [r7, #4]
 802484a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 802484c:	683b      	ldr	r3, [r7, #0]
 802484e:	3308      	adds	r3, #8
 8024850:	681b      	ldr	r3, [r3, #0]
 8024852:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024854:	429a      	cmp	r2, r3
 8024856:	d101      	bne.n	802485c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8024858:	2301      	movs	r3, #1
 802485a:	e000      	b.n	802485e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 802485c:	2300      	movs	r3, #0
  }
}
 802485e:	4618      	mov	r0, r3
 8024860:	3714      	adds	r7, #20
 8024862:	46bd      	mov	sp, r7
 8024864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024868:	4770      	bx	lr
	...

0802486c <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 802486c:	b580      	push	{r7, lr}
 802486e:	b082      	sub	sp, #8
 8024870:	af00      	add	r7, sp, #0
 8024872:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8024874:	2210      	movs	r2, #16
 8024876:	4904      	ldr	r1, [pc, #16]	; (8024888 <ip4addr_ntoa+0x1c>)
 8024878:	6878      	ldr	r0, [r7, #4]
 802487a:	f000 f807 	bl	802488c <ip4addr_ntoa_r>
 802487e:	4603      	mov	r3, r0
}
 8024880:	4618      	mov	r0, r3
 8024882:	3708      	adds	r7, #8
 8024884:	46bd      	mov	sp, r7
 8024886:	bd80      	pop	{r7, pc}
 8024888:	200161b0 	.word	0x200161b0

0802488c <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 802488c:	b480      	push	{r7}
 802488e:	b08d      	sub	sp, #52	; 0x34
 8024890:	af00      	add	r7, sp, #0
 8024892:	60f8      	str	r0, [r7, #12]
 8024894:	60b9      	str	r1, [r7, #8]
 8024896:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8024898:	2300      	movs	r3, #0
 802489a:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 802489c:	68fb      	ldr	r3, [r7, #12]
 802489e:	681b      	ldr	r3, [r3, #0]
 80248a0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80248a2:	68bb      	ldr	r3, [r7, #8]
 80248a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80248a6:	f107 0318 	add.w	r3, r7, #24
 80248aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80248ac:	2300      	movs	r3, #0
 80248ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80248b2:	e058      	b.n	8024966 <ip4addr_ntoa_r+0xda>
    i = 0;
 80248b4:	2300      	movs	r3, #0
 80248b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 80248ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248bc:	781a      	ldrb	r2, [r3, #0]
 80248be:	4b32      	ldr	r3, [pc, #200]	; (8024988 <ip4addr_ntoa_r+0xfc>)
 80248c0:	fba3 1302 	umull	r1, r3, r3, r2
 80248c4:	08d9      	lsrs	r1, r3, #3
 80248c6:	460b      	mov	r3, r1
 80248c8:	009b      	lsls	r3, r3, #2
 80248ca:	440b      	add	r3, r1
 80248cc:	005b      	lsls	r3, r3, #1
 80248ce:	1ad3      	subs	r3, r2, r3
 80248d0:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80248d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248d4:	781b      	ldrb	r3, [r3, #0]
 80248d6:	4a2c      	ldr	r2, [pc, #176]	; (8024988 <ip4addr_ntoa_r+0xfc>)
 80248d8:	fba2 2303 	umull	r2, r3, r2, r3
 80248dc:	08db      	lsrs	r3, r3, #3
 80248de:	b2da      	uxtb	r2, r3
 80248e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80248e2:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80248e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80248e8:	1c5a      	adds	r2, r3, #1
 80248ea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80248ee:	4619      	mov	r1, r3
 80248f0:	7ffb      	ldrb	r3, [r7, #31]
 80248f2:	3330      	adds	r3, #48	; 0x30
 80248f4:	b2da      	uxtb	r2, r3
 80248f6:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80248fa:	443b      	add	r3, r7
 80248fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8024900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024902:	781b      	ldrb	r3, [r3, #0]
 8024904:	2b00      	cmp	r3, #0
 8024906:	d1d8      	bne.n	80248ba <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8024908:	e011      	b.n	802492e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802490a:	6a3b      	ldr	r3, [r7, #32]
 802490c:	1c5a      	adds	r2, r3, #1
 802490e:	623a      	str	r2, [r7, #32]
 8024910:	687a      	ldr	r2, [r7, #4]
 8024912:	429a      	cmp	r2, r3
 8024914:	dc01      	bgt.n	802491a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8024916:	2300      	movs	r3, #0
 8024918:	e030      	b.n	802497c <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802491a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024920:	1c59      	adds	r1, r3, #1
 8024922:	62f9      	str	r1, [r7, #44]	; 0x2c
 8024924:	3230      	adds	r2, #48	; 0x30
 8024926:	443a      	add	r2, r7
 8024928:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 802492c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802492e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8024932:	1e5a      	subs	r2, r3, #1
 8024934:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8024938:	2b00      	cmp	r3, #0
 802493a:	d1e6      	bne.n	802490a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 802493c:	6a3b      	ldr	r3, [r7, #32]
 802493e:	1c5a      	adds	r2, r3, #1
 8024940:	623a      	str	r2, [r7, #32]
 8024942:	687a      	ldr	r2, [r7, #4]
 8024944:	429a      	cmp	r2, r3
 8024946:	dc01      	bgt.n	802494c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8024948:	2300      	movs	r3, #0
 802494a:	e017      	b.n	802497c <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 802494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802494e:	1c5a      	adds	r2, r3, #1
 8024950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024952:	222e      	movs	r2, #46	; 0x2e
 8024954:	701a      	strb	r2, [r3, #0]
    ap++;
 8024956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024958:	3301      	adds	r3, #1
 802495a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 802495c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024960:	3301      	adds	r3, #1
 8024962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024966:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802496a:	2b03      	cmp	r3, #3
 802496c:	d9a2      	bls.n	80248b4 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 802496e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024970:	3b01      	subs	r3, #1
 8024972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024976:	2200      	movs	r2, #0
 8024978:	701a      	strb	r2, [r3, #0]
  return buf;
 802497a:	68bb      	ldr	r3, [r7, #8]
}
 802497c:	4618      	mov	r0, r3
 802497e:	3734      	adds	r7, #52	; 0x34
 8024980:	46bd      	mov	sp, r7
 8024982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024986:	4770      	bx	lr
 8024988:	cccccccd 	.word	0xcccccccd

0802498c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 802498c:	b580      	push	{r7, lr}
 802498e:	b084      	sub	sp, #16
 8024990:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8024992:	2300      	movs	r3, #0
 8024994:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8024996:	4b12      	ldr	r3, [pc, #72]	; (80249e0 <ip_reass_tmr+0x54>)
 8024998:	681b      	ldr	r3, [r3, #0]
 802499a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 802499c:	e018      	b.n	80249d0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802499e:	68fb      	ldr	r3, [r7, #12]
 80249a0:	7fdb      	ldrb	r3, [r3, #31]
 80249a2:	2b00      	cmp	r3, #0
 80249a4:	d00b      	beq.n	80249be <ip_reass_tmr+0x32>
      r->timer--;
 80249a6:	68fb      	ldr	r3, [r7, #12]
 80249a8:	7fdb      	ldrb	r3, [r3, #31]
 80249aa:	3b01      	subs	r3, #1
 80249ac:	b2da      	uxtb	r2, r3
 80249ae:	68fb      	ldr	r3, [r7, #12]
 80249b0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80249b2:	68fb      	ldr	r3, [r7, #12]
 80249b4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80249b6:	68fb      	ldr	r3, [r7, #12]
 80249b8:	681b      	ldr	r3, [r3, #0]
 80249ba:	60fb      	str	r3, [r7, #12]
 80249bc:	e008      	b.n	80249d0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80249be:	68fb      	ldr	r3, [r7, #12]
 80249c0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80249c2:	68fb      	ldr	r3, [r7, #12]
 80249c4:	681b      	ldr	r3, [r3, #0]
 80249c6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80249c8:	68b9      	ldr	r1, [r7, #8]
 80249ca:	6878      	ldr	r0, [r7, #4]
 80249cc:	f000 f80a 	bl	80249e4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80249d0:	68fb      	ldr	r3, [r7, #12]
 80249d2:	2b00      	cmp	r3, #0
 80249d4:	d1e3      	bne.n	802499e <ip_reass_tmr+0x12>
    }
  }
}
 80249d6:	bf00      	nop
 80249d8:	bf00      	nop
 80249da:	3710      	adds	r7, #16
 80249dc:	46bd      	mov	sp, r7
 80249de:	bd80      	pop	{r7, pc}
 80249e0:	200161c0 	.word	0x200161c0

080249e4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80249e4:	b580      	push	{r7, lr}
 80249e6:	b088      	sub	sp, #32
 80249e8:	af00      	add	r7, sp, #0
 80249ea:	6078      	str	r0, [r7, #4]
 80249ec:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80249ee:	2300      	movs	r3, #0
 80249f0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80249f2:	683a      	ldr	r2, [r7, #0]
 80249f4:	687b      	ldr	r3, [r7, #4]
 80249f6:	429a      	cmp	r2, r3
 80249f8:	d105      	bne.n	8024a06 <ip_reass_free_complete_datagram+0x22>
 80249fa:	4b45      	ldr	r3, [pc, #276]	; (8024b10 <ip_reass_free_complete_datagram+0x12c>)
 80249fc:	22ab      	movs	r2, #171	; 0xab
 80249fe:	4945      	ldr	r1, [pc, #276]	; (8024b14 <ip_reass_free_complete_datagram+0x130>)
 8024a00:	4845      	ldr	r0, [pc, #276]	; (8024b18 <ip_reass_free_complete_datagram+0x134>)
 8024a02:	f001 f82b 	bl	8025a5c <iprintf>
  if (prev != NULL) {
 8024a06:	683b      	ldr	r3, [r7, #0]
 8024a08:	2b00      	cmp	r3, #0
 8024a0a:	d00a      	beq.n	8024a22 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024a0c:	683b      	ldr	r3, [r7, #0]
 8024a0e:	681b      	ldr	r3, [r3, #0]
 8024a10:	687a      	ldr	r2, [r7, #4]
 8024a12:	429a      	cmp	r2, r3
 8024a14:	d005      	beq.n	8024a22 <ip_reass_free_complete_datagram+0x3e>
 8024a16:	4b3e      	ldr	r3, [pc, #248]	; (8024b10 <ip_reass_free_complete_datagram+0x12c>)
 8024a18:	22ad      	movs	r2, #173	; 0xad
 8024a1a:	4940      	ldr	r1, [pc, #256]	; (8024b1c <ip_reass_free_complete_datagram+0x138>)
 8024a1c:	483e      	ldr	r0, [pc, #248]	; (8024b18 <ip_reass_free_complete_datagram+0x134>)
 8024a1e:	f001 f81d 	bl	8025a5c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024a22:	687b      	ldr	r3, [r7, #4]
 8024a24:	685b      	ldr	r3, [r3, #4]
 8024a26:	685b      	ldr	r3, [r3, #4]
 8024a28:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8024a2a:	697b      	ldr	r3, [r7, #20]
 8024a2c:	889b      	ldrh	r3, [r3, #4]
 8024a2e:	b29b      	uxth	r3, r3
 8024a30:	2b00      	cmp	r3, #0
 8024a32:	d12a      	bne.n	8024a8a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8024a34:	687b      	ldr	r3, [r7, #4]
 8024a36:	685b      	ldr	r3, [r3, #4]
 8024a38:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8024a3a:	697b      	ldr	r3, [r7, #20]
 8024a3c:	681a      	ldr	r2, [r3, #0]
 8024a3e:	687b      	ldr	r3, [r7, #4]
 8024a40:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024a42:	69bb      	ldr	r3, [r7, #24]
 8024a44:	6858      	ldr	r0, [r3, #4]
 8024a46:	687b      	ldr	r3, [r7, #4]
 8024a48:	3308      	adds	r3, #8
 8024a4a:	2214      	movs	r2, #20
 8024a4c:	4619      	mov	r1, r3
 8024a4e:	f000 fef5 	bl	802583c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024a52:	2101      	movs	r1, #1
 8024a54:	69b8      	ldr	r0, [r7, #24]
 8024a56:	f7ff fbb3 	bl	80241c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024a5a:	69b8      	ldr	r0, [r7, #24]
 8024a5c:	f7fd fb4e 	bl	80220fc <pbuf_clen>
 8024a60:	4603      	mov	r3, r0
 8024a62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024a64:	8bfa      	ldrh	r2, [r7, #30]
 8024a66:	8a7b      	ldrh	r3, [r7, #18]
 8024a68:	4413      	add	r3, r2
 8024a6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024a6e:	db05      	blt.n	8024a7c <ip_reass_free_complete_datagram+0x98>
 8024a70:	4b27      	ldr	r3, [pc, #156]	; (8024b10 <ip_reass_free_complete_datagram+0x12c>)
 8024a72:	22bc      	movs	r2, #188	; 0xbc
 8024a74:	492a      	ldr	r1, [pc, #168]	; (8024b20 <ip_reass_free_complete_datagram+0x13c>)
 8024a76:	4828      	ldr	r0, [pc, #160]	; (8024b18 <ip_reass_free_complete_datagram+0x134>)
 8024a78:	f000 fff0 	bl	8025a5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024a7c:	8bfa      	ldrh	r2, [r7, #30]
 8024a7e:	8a7b      	ldrh	r3, [r7, #18]
 8024a80:	4413      	add	r3, r2
 8024a82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024a84:	69b8      	ldr	r0, [r7, #24]
 8024a86:	f7fd fab1 	bl	8021fec <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8024a8a:	687b      	ldr	r3, [r7, #4]
 8024a8c:	685b      	ldr	r3, [r3, #4]
 8024a8e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8024a90:	e01f      	b.n	8024ad2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8024a92:	69bb      	ldr	r3, [r7, #24]
 8024a94:	685b      	ldr	r3, [r3, #4]
 8024a96:	617b      	str	r3, [r7, #20]
    pcur = p;
 8024a98:	69bb      	ldr	r3, [r7, #24]
 8024a9a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8024a9c:	697b      	ldr	r3, [r7, #20]
 8024a9e:	681b      	ldr	r3, [r3, #0]
 8024aa0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8024aa2:	68f8      	ldr	r0, [r7, #12]
 8024aa4:	f7fd fb2a 	bl	80220fc <pbuf_clen>
 8024aa8:	4603      	mov	r3, r0
 8024aaa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024aac:	8bfa      	ldrh	r2, [r7, #30]
 8024aae:	8a7b      	ldrh	r3, [r7, #18]
 8024ab0:	4413      	add	r3, r2
 8024ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024ab6:	db05      	blt.n	8024ac4 <ip_reass_free_complete_datagram+0xe0>
 8024ab8:	4b15      	ldr	r3, [pc, #84]	; (8024b10 <ip_reass_free_complete_datagram+0x12c>)
 8024aba:	22cc      	movs	r2, #204	; 0xcc
 8024abc:	4918      	ldr	r1, [pc, #96]	; (8024b20 <ip_reass_free_complete_datagram+0x13c>)
 8024abe:	4816      	ldr	r0, [pc, #88]	; (8024b18 <ip_reass_free_complete_datagram+0x134>)
 8024ac0:	f000 ffcc 	bl	8025a5c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024ac4:	8bfa      	ldrh	r2, [r7, #30]
 8024ac6:	8a7b      	ldrh	r3, [r7, #18]
 8024ac8:	4413      	add	r3, r2
 8024aca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8024acc:	68f8      	ldr	r0, [r7, #12]
 8024ace:	f7fd fa8d 	bl	8021fec <pbuf_free>
  while (p != NULL) {
 8024ad2:	69bb      	ldr	r3, [r7, #24]
 8024ad4:	2b00      	cmp	r3, #0
 8024ad6:	d1dc      	bne.n	8024a92 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8024ad8:	6839      	ldr	r1, [r7, #0]
 8024ada:	6878      	ldr	r0, [r7, #4]
 8024adc:	f000 f8c2 	bl	8024c64 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8024ae0:	4b10      	ldr	r3, [pc, #64]	; (8024b24 <ip_reass_free_complete_datagram+0x140>)
 8024ae2:	881b      	ldrh	r3, [r3, #0]
 8024ae4:	8bfa      	ldrh	r2, [r7, #30]
 8024ae6:	429a      	cmp	r2, r3
 8024ae8:	d905      	bls.n	8024af6 <ip_reass_free_complete_datagram+0x112>
 8024aea:	4b09      	ldr	r3, [pc, #36]	; (8024b10 <ip_reass_free_complete_datagram+0x12c>)
 8024aec:	22d2      	movs	r2, #210	; 0xd2
 8024aee:	490e      	ldr	r1, [pc, #56]	; (8024b28 <ip_reass_free_complete_datagram+0x144>)
 8024af0:	4809      	ldr	r0, [pc, #36]	; (8024b18 <ip_reass_free_complete_datagram+0x134>)
 8024af2:	f000 ffb3 	bl	8025a5c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8024af6:	4b0b      	ldr	r3, [pc, #44]	; (8024b24 <ip_reass_free_complete_datagram+0x140>)
 8024af8:	881a      	ldrh	r2, [r3, #0]
 8024afa:	8bfb      	ldrh	r3, [r7, #30]
 8024afc:	1ad3      	subs	r3, r2, r3
 8024afe:	b29a      	uxth	r2, r3
 8024b00:	4b08      	ldr	r3, [pc, #32]	; (8024b24 <ip_reass_free_complete_datagram+0x140>)
 8024b02:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8024b04:	8bfb      	ldrh	r3, [r7, #30]
}
 8024b06:	4618      	mov	r0, r3
 8024b08:	3720      	adds	r7, #32
 8024b0a:	46bd      	mov	sp, r7
 8024b0c:	bd80      	pop	{r7, pc}
 8024b0e:	bf00      	nop
 8024b10:	0802c76c 	.word	0x0802c76c
 8024b14:	0802c7e8 	.word	0x0802c7e8
 8024b18:	0802c7f4 	.word	0x0802c7f4
 8024b1c:	0802c81c 	.word	0x0802c81c
 8024b20:	0802c830 	.word	0x0802c830
 8024b24:	200161c4 	.word	0x200161c4
 8024b28:	0802c850 	.word	0x0802c850

08024b2c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8024b2c:	b580      	push	{r7, lr}
 8024b2e:	b08a      	sub	sp, #40	; 0x28
 8024b30:	af00      	add	r7, sp, #0
 8024b32:	6078      	str	r0, [r7, #4]
 8024b34:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8024b36:	2300      	movs	r3, #0
 8024b38:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8024b3a:	2300      	movs	r3, #0
 8024b3c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8024b3e:	2300      	movs	r3, #0
 8024b40:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8024b42:	2300      	movs	r3, #0
 8024b44:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8024b46:	2300      	movs	r3, #0
 8024b48:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8024b4a:	4b28      	ldr	r3, [pc, #160]	; (8024bec <ip_reass_remove_oldest_datagram+0xc0>)
 8024b4c:	681b      	ldr	r3, [r3, #0]
 8024b4e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024b50:	e030      	b.n	8024bb4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8024b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b54:	695a      	ldr	r2, [r3, #20]
 8024b56:	687b      	ldr	r3, [r7, #4]
 8024b58:	68db      	ldr	r3, [r3, #12]
 8024b5a:	429a      	cmp	r2, r3
 8024b5c:	d10c      	bne.n	8024b78 <ip_reass_remove_oldest_datagram+0x4c>
 8024b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b60:	699a      	ldr	r2, [r3, #24]
 8024b62:	687b      	ldr	r3, [r7, #4]
 8024b64:	691b      	ldr	r3, [r3, #16]
 8024b66:	429a      	cmp	r2, r3
 8024b68:	d106      	bne.n	8024b78 <ip_reass_remove_oldest_datagram+0x4c>
 8024b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b6c:	899a      	ldrh	r2, [r3, #12]
 8024b6e:	687b      	ldr	r3, [r7, #4]
 8024b70:	889b      	ldrh	r3, [r3, #4]
 8024b72:	b29b      	uxth	r3, r3
 8024b74:	429a      	cmp	r2, r3
 8024b76:	d014      	beq.n	8024ba2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8024b78:	693b      	ldr	r3, [r7, #16]
 8024b7a:	3301      	adds	r3, #1
 8024b7c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8024b7e:	6a3b      	ldr	r3, [r7, #32]
 8024b80:	2b00      	cmp	r3, #0
 8024b82:	d104      	bne.n	8024b8e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8024b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b86:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024b88:	69fb      	ldr	r3, [r7, #28]
 8024b8a:	61bb      	str	r3, [r7, #24]
 8024b8c:	e009      	b.n	8024ba2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8024b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b90:	7fda      	ldrb	r2, [r3, #31]
 8024b92:	6a3b      	ldr	r3, [r7, #32]
 8024b94:	7fdb      	ldrb	r3, [r3, #31]
 8024b96:	429a      	cmp	r2, r3
 8024b98:	d803      	bhi.n	8024ba2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8024b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024b9c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8024b9e:	69fb      	ldr	r3, [r7, #28]
 8024ba0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8024ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024ba4:	681b      	ldr	r3, [r3, #0]
 8024ba6:	2b00      	cmp	r3, #0
 8024ba8:	d001      	beq.n	8024bae <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8024baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bac:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8024bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bb0:	681b      	ldr	r3, [r3, #0]
 8024bb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8024bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024bb6:	2b00      	cmp	r3, #0
 8024bb8:	d1cb      	bne.n	8024b52 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8024bba:	6a3b      	ldr	r3, [r7, #32]
 8024bbc:	2b00      	cmp	r3, #0
 8024bbe:	d008      	beq.n	8024bd2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8024bc0:	69b9      	ldr	r1, [r7, #24]
 8024bc2:	6a38      	ldr	r0, [r7, #32]
 8024bc4:	f7ff ff0e 	bl	80249e4 <ip_reass_free_complete_datagram>
 8024bc8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8024bca:	697a      	ldr	r2, [r7, #20]
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	4413      	add	r3, r2
 8024bd0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8024bd2:	697a      	ldr	r2, [r7, #20]
 8024bd4:	683b      	ldr	r3, [r7, #0]
 8024bd6:	429a      	cmp	r2, r3
 8024bd8:	da02      	bge.n	8024be0 <ip_reass_remove_oldest_datagram+0xb4>
 8024bda:	693b      	ldr	r3, [r7, #16]
 8024bdc:	2b01      	cmp	r3, #1
 8024bde:	dcac      	bgt.n	8024b3a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8024be0:	697b      	ldr	r3, [r7, #20]
}
 8024be2:	4618      	mov	r0, r3
 8024be4:	3728      	adds	r7, #40	; 0x28
 8024be6:	46bd      	mov	sp, r7
 8024be8:	bd80      	pop	{r7, pc}
 8024bea:	bf00      	nop
 8024bec:	200161c0 	.word	0x200161c0

08024bf0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8024bf0:	b580      	push	{r7, lr}
 8024bf2:	b084      	sub	sp, #16
 8024bf4:	af00      	add	r7, sp, #0
 8024bf6:	6078      	str	r0, [r7, #4]
 8024bf8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024bfa:	2001      	movs	r0, #1
 8024bfc:	f7fc fa76 	bl	80210ec <memp_malloc>
 8024c00:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8024c02:	68fb      	ldr	r3, [r7, #12]
 8024c04:	2b00      	cmp	r3, #0
 8024c06:	d110      	bne.n	8024c2a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8024c08:	6839      	ldr	r1, [r7, #0]
 8024c0a:	6878      	ldr	r0, [r7, #4]
 8024c0c:	f7ff ff8e 	bl	8024b2c <ip_reass_remove_oldest_datagram>
 8024c10:	4602      	mov	r2, r0
 8024c12:	683b      	ldr	r3, [r7, #0]
 8024c14:	4293      	cmp	r3, r2
 8024c16:	dc03      	bgt.n	8024c20 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8024c18:	2001      	movs	r0, #1
 8024c1a:	f7fc fa67 	bl	80210ec <memp_malloc>
 8024c1e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8024c20:	68fb      	ldr	r3, [r7, #12]
 8024c22:	2b00      	cmp	r3, #0
 8024c24:	d101      	bne.n	8024c2a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8024c26:	2300      	movs	r3, #0
 8024c28:	e016      	b.n	8024c58 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8024c2a:	2220      	movs	r2, #32
 8024c2c:	2100      	movs	r1, #0
 8024c2e:	68f8      	ldr	r0, [r7, #12]
 8024c30:	f000 fe2c 	bl	802588c <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8024c34:	68fb      	ldr	r3, [r7, #12]
 8024c36:	220f      	movs	r2, #15
 8024c38:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8024c3a:	4b09      	ldr	r3, [pc, #36]	; (8024c60 <ip_reass_enqueue_new_datagram+0x70>)
 8024c3c:	681a      	ldr	r2, [r3, #0]
 8024c3e:	68fb      	ldr	r3, [r7, #12]
 8024c40:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8024c42:	4a07      	ldr	r2, [pc, #28]	; (8024c60 <ip_reass_enqueue_new_datagram+0x70>)
 8024c44:	68fb      	ldr	r3, [r7, #12]
 8024c46:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8024c48:	68fb      	ldr	r3, [r7, #12]
 8024c4a:	3308      	adds	r3, #8
 8024c4c:	2214      	movs	r2, #20
 8024c4e:	6879      	ldr	r1, [r7, #4]
 8024c50:	4618      	mov	r0, r3
 8024c52:	f000 fdf3 	bl	802583c <memcpy>
  return ipr;
 8024c56:	68fb      	ldr	r3, [r7, #12]
}
 8024c58:	4618      	mov	r0, r3
 8024c5a:	3710      	adds	r7, #16
 8024c5c:	46bd      	mov	sp, r7
 8024c5e:	bd80      	pop	{r7, pc}
 8024c60:	200161c0 	.word	0x200161c0

08024c64 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024c64:	b580      	push	{r7, lr}
 8024c66:	b082      	sub	sp, #8
 8024c68:	af00      	add	r7, sp, #0
 8024c6a:	6078      	str	r0, [r7, #4]
 8024c6c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8024c6e:	4b10      	ldr	r3, [pc, #64]	; (8024cb0 <ip_reass_dequeue_datagram+0x4c>)
 8024c70:	681b      	ldr	r3, [r3, #0]
 8024c72:	687a      	ldr	r2, [r7, #4]
 8024c74:	429a      	cmp	r2, r3
 8024c76:	d104      	bne.n	8024c82 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8024c78:	687b      	ldr	r3, [r7, #4]
 8024c7a:	681b      	ldr	r3, [r3, #0]
 8024c7c:	4a0c      	ldr	r2, [pc, #48]	; (8024cb0 <ip_reass_dequeue_datagram+0x4c>)
 8024c7e:	6013      	str	r3, [r2, #0]
 8024c80:	e00d      	b.n	8024c9e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8024c82:	683b      	ldr	r3, [r7, #0]
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	d106      	bne.n	8024c96 <ip_reass_dequeue_datagram+0x32>
 8024c88:	4b0a      	ldr	r3, [pc, #40]	; (8024cb4 <ip_reass_dequeue_datagram+0x50>)
 8024c8a:	f240 1245 	movw	r2, #325	; 0x145
 8024c8e:	490a      	ldr	r1, [pc, #40]	; (8024cb8 <ip_reass_dequeue_datagram+0x54>)
 8024c90:	480a      	ldr	r0, [pc, #40]	; (8024cbc <ip_reass_dequeue_datagram+0x58>)
 8024c92:	f000 fee3 	bl	8025a5c <iprintf>
    prev->next = ipr->next;
 8024c96:	687b      	ldr	r3, [r7, #4]
 8024c98:	681a      	ldr	r2, [r3, #0]
 8024c9a:	683b      	ldr	r3, [r7, #0]
 8024c9c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8024c9e:	6879      	ldr	r1, [r7, #4]
 8024ca0:	2001      	movs	r0, #1
 8024ca2:	f7fc fa93 	bl	80211cc <memp_free>
}
 8024ca6:	bf00      	nop
 8024ca8:	3708      	adds	r7, #8
 8024caa:	46bd      	mov	sp, r7
 8024cac:	bd80      	pop	{r7, pc}
 8024cae:	bf00      	nop
 8024cb0:	200161c0 	.word	0x200161c0
 8024cb4:	0802c76c 	.word	0x0802c76c
 8024cb8:	0802c874 	.word	0x0802c874
 8024cbc:	0802c7f4 	.word	0x0802c7f4

08024cc0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8024cc0:	b580      	push	{r7, lr}
 8024cc2:	b08c      	sub	sp, #48	; 0x30
 8024cc4:	af00      	add	r7, sp, #0
 8024cc6:	60f8      	str	r0, [r7, #12]
 8024cc8:	60b9      	str	r1, [r7, #8]
 8024cca:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8024ccc:	2300      	movs	r3, #0
 8024cce:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8024cd0:	2301      	movs	r3, #1
 8024cd2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8024cd4:	68bb      	ldr	r3, [r7, #8]
 8024cd6:	685b      	ldr	r3, [r3, #4]
 8024cd8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024cda:	69fb      	ldr	r3, [r7, #28]
 8024cdc:	885b      	ldrh	r3, [r3, #2]
 8024cde:	b29b      	uxth	r3, r3
 8024ce0:	4618      	mov	r0, r3
 8024ce2:	f7fb fda7 	bl	8020834 <lwip_htons>
 8024ce6:	4603      	mov	r3, r0
 8024ce8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8024cea:	69fb      	ldr	r3, [r7, #28]
 8024cec:	781b      	ldrb	r3, [r3, #0]
 8024cee:	f003 030f 	and.w	r3, r3, #15
 8024cf2:	b2db      	uxtb	r3, r3
 8024cf4:	009b      	lsls	r3, r3, #2
 8024cf6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8024cf8:	7e7b      	ldrb	r3, [r7, #25]
 8024cfa:	b29b      	uxth	r3, r3
 8024cfc:	8b7a      	ldrh	r2, [r7, #26]
 8024cfe:	429a      	cmp	r2, r3
 8024d00:	d202      	bcs.n	8024d08 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024d02:	f04f 33ff 	mov.w	r3, #4294967295
 8024d06:	e135      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8024d08:	7e7b      	ldrb	r3, [r7, #25]
 8024d0a:	b29b      	uxth	r3, r3
 8024d0c:	8b7a      	ldrh	r2, [r7, #26]
 8024d0e:	1ad3      	subs	r3, r2, r3
 8024d10:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8024d12:	69fb      	ldr	r3, [r7, #28]
 8024d14:	88db      	ldrh	r3, [r3, #6]
 8024d16:	b29b      	uxth	r3, r3
 8024d18:	4618      	mov	r0, r3
 8024d1a:	f7fb fd8b 	bl	8020834 <lwip_htons>
 8024d1e:	4603      	mov	r3, r0
 8024d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024d24:	b29b      	uxth	r3, r3
 8024d26:	00db      	lsls	r3, r3, #3
 8024d28:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8024d2a:	68bb      	ldr	r3, [r7, #8]
 8024d2c:	685b      	ldr	r3, [r3, #4]
 8024d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8024d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d32:	2200      	movs	r2, #0
 8024d34:	701a      	strb	r2, [r3, #0]
 8024d36:	2200      	movs	r2, #0
 8024d38:	705a      	strb	r2, [r3, #1]
 8024d3a:	2200      	movs	r2, #0
 8024d3c:	709a      	strb	r2, [r3, #2]
 8024d3e:	2200      	movs	r2, #0
 8024d40:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8024d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d44:	8afa      	ldrh	r2, [r7, #22]
 8024d46:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8024d48:	8afa      	ldrh	r2, [r7, #22]
 8024d4a:	8b7b      	ldrh	r3, [r7, #26]
 8024d4c:	4413      	add	r3, r2
 8024d4e:	b29a      	uxth	r2, r3
 8024d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d52:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8024d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d56:	88db      	ldrh	r3, [r3, #6]
 8024d58:	b29b      	uxth	r3, r3
 8024d5a:	8afa      	ldrh	r2, [r7, #22]
 8024d5c:	429a      	cmp	r2, r3
 8024d5e:	d902      	bls.n	8024d66 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024d60:	f04f 33ff 	mov.w	r3, #4294967295
 8024d64:	e106      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8024d66:	68fb      	ldr	r3, [r7, #12]
 8024d68:	685b      	ldr	r3, [r3, #4]
 8024d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8024d6c:	e068      	b.n	8024e40 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8024d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024d70:	685b      	ldr	r3, [r3, #4]
 8024d72:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8024d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d76:	889b      	ldrh	r3, [r3, #4]
 8024d78:	b29a      	uxth	r2, r3
 8024d7a:	693b      	ldr	r3, [r7, #16]
 8024d7c:	889b      	ldrh	r3, [r3, #4]
 8024d7e:	b29b      	uxth	r3, r3
 8024d80:	429a      	cmp	r2, r3
 8024d82:	d235      	bcs.n	8024df0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8024d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8024d88:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8024d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d8c:	2b00      	cmp	r3, #0
 8024d8e:	d020      	beq.n	8024dd2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8024d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024d92:	889b      	ldrh	r3, [r3, #4]
 8024d94:	b29a      	uxth	r2, r3
 8024d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024d98:	88db      	ldrh	r3, [r3, #6]
 8024d9a:	b29b      	uxth	r3, r3
 8024d9c:	429a      	cmp	r2, r3
 8024d9e:	d307      	bcc.n	8024db0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8024da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024da2:	88db      	ldrh	r3, [r3, #6]
 8024da4:	b29a      	uxth	r2, r3
 8024da6:	693b      	ldr	r3, [r7, #16]
 8024da8:	889b      	ldrh	r3, [r3, #4]
 8024daa:	b29b      	uxth	r3, r3
 8024dac:	429a      	cmp	r2, r3
 8024dae:	d902      	bls.n	8024db6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024db0:	f04f 33ff 	mov.w	r3, #4294967295
 8024db4:	e0de      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8024db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024db8:	68ba      	ldr	r2, [r7, #8]
 8024dba:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8024dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024dbe:	88db      	ldrh	r3, [r3, #6]
 8024dc0:	b29a      	uxth	r2, r3
 8024dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024dc4:	889b      	ldrh	r3, [r3, #4]
 8024dc6:	b29b      	uxth	r3, r3
 8024dc8:	429a      	cmp	r2, r3
 8024dca:	d03d      	beq.n	8024e48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024dcc:	2300      	movs	r3, #0
 8024dce:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8024dd0:	e03a      	b.n	8024e48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8024dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024dd4:	88db      	ldrh	r3, [r3, #6]
 8024dd6:	b29a      	uxth	r2, r3
 8024dd8:	693b      	ldr	r3, [r7, #16]
 8024dda:	889b      	ldrh	r3, [r3, #4]
 8024ddc:	b29b      	uxth	r3, r3
 8024dde:	429a      	cmp	r2, r3
 8024de0:	d902      	bls.n	8024de8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024de2:	f04f 33ff 	mov.w	r3, #4294967295
 8024de6:	e0c5      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8024de8:	68fb      	ldr	r3, [r7, #12]
 8024dea:	68ba      	ldr	r2, [r7, #8]
 8024dec:	605a      	str	r2, [r3, #4]
      break;
 8024dee:	e02b      	b.n	8024e48 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8024df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024df2:	889b      	ldrh	r3, [r3, #4]
 8024df4:	b29a      	uxth	r2, r3
 8024df6:	693b      	ldr	r3, [r7, #16]
 8024df8:	889b      	ldrh	r3, [r3, #4]
 8024dfa:	b29b      	uxth	r3, r3
 8024dfc:	429a      	cmp	r2, r3
 8024dfe:	d102      	bne.n	8024e06 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024e00:	f04f 33ff 	mov.w	r3, #4294967295
 8024e04:	e0b6      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8024e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e08:	889b      	ldrh	r3, [r3, #4]
 8024e0a:	b29a      	uxth	r2, r3
 8024e0c:	693b      	ldr	r3, [r7, #16]
 8024e0e:	88db      	ldrh	r3, [r3, #6]
 8024e10:	b29b      	uxth	r3, r3
 8024e12:	429a      	cmp	r2, r3
 8024e14:	d202      	bcs.n	8024e1c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8024e16:	f04f 33ff 	mov.w	r3, #4294967295
 8024e1a:	e0ab      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8024e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e1e:	2b00      	cmp	r3, #0
 8024e20:	d009      	beq.n	8024e36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8024e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e24:	88db      	ldrh	r3, [r3, #6]
 8024e26:	b29a      	uxth	r2, r3
 8024e28:	693b      	ldr	r3, [r7, #16]
 8024e2a:	889b      	ldrh	r3, [r3, #4]
 8024e2c:	b29b      	uxth	r3, r3
 8024e2e:	429a      	cmp	r2, r3
 8024e30:	d001      	beq.n	8024e36 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8024e32:	2300      	movs	r3, #0
 8024e34:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8024e36:	693b      	ldr	r3, [r7, #16]
 8024e38:	681b      	ldr	r3, [r3, #0]
 8024e3a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8024e3c:	693b      	ldr	r3, [r7, #16]
 8024e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8024e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e42:	2b00      	cmp	r3, #0
 8024e44:	d193      	bne.n	8024d6e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8024e46:	e000      	b.n	8024e4a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8024e48:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8024e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024e4c:	2b00      	cmp	r3, #0
 8024e4e:	d12d      	bne.n	8024eac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8024e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e52:	2b00      	cmp	r3, #0
 8024e54:	d01c      	beq.n	8024e90 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8024e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e58:	88db      	ldrh	r3, [r3, #6]
 8024e5a:	b29a      	uxth	r2, r3
 8024e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e5e:	889b      	ldrh	r3, [r3, #4]
 8024e60:	b29b      	uxth	r3, r3
 8024e62:	429a      	cmp	r2, r3
 8024e64:	d906      	bls.n	8024e74 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8024e66:	4b45      	ldr	r3, [pc, #276]	; (8024f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024e68:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8024e6c:	4944      	ldr	r1, [pc, #272]	; (8024f80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8024e6e:	4845      	ldr	r0, [pc, #276]	; (8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024e70:	f000 fdf4 	bl	8025a5c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8024e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e76:	68ba      	ldr	r2, [r7, #8]
 8024e78:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8024e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e7c:	88db      	ldrh	r3, [r3, #6]
 8024e7e:	b29a      	uxth	r2, r3
 8024e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e82:	889b      	ldrh	r3, [r3, #4]
 8024e84:	b29b      	uxth	r3, r3
 8024e86:	429a      	cmp	r2, r3
 8024e88:	d010      	beq.n	8024eac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8024e8a:	2300      	movs	r3, #0
 8024e8c:	623b      	str	r3, [r7, #32]
 8024e8e:	e00d      	b.n	8024eac <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8024e90:	68fb      	ldr	r3, [r7, #12]
 8024e92:	685b      	ldr	r3, [r3, #4]
 8024e94:	2b00      	cmp	r3, #0
 8024e96:	d006      	beq.n	8024ea6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8024e98:	4b38      	ldr	r3, [pc, #224]	; (8024f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024e9a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8024e9e:	493a      	ldr	r1, [pc, #232]	; (8024f88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8024ea0:	4838      	ldr	r0, [pc, #224]	; (8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024ea2:	f000 fddb 	bl	8025a5c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8024ea6:	68fb      	ldr	r3, [r7, #12]
 8024ea8:	68ba      	ldr	r2, [r7, #8]
 8024eaa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8024eac:	687b      	ldr	r3, [r7, #4]
 8024eae:	2b00      	cmp	r3, #0
 8024eb0:	d105      	bne.n	8024ebe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8024eb2:	68fb      	ldr	r3, [r7, #12]
 8024eb4:	7f9b      	ldrb	r3, [r3, #30]
 8024eb6:	f003 0301 	and.w	r3, r3, #1
 8024eba:	2b00      	cmp	r3, #0
 8024ebc:	d059      	beq.n	8024f72 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8024ebe:	6a3b      	ldr	r3, [r7, #32]
 8024ec0:	2b00      	cmp	r3, #0
 8024ec2:	d04f      	beq.n	8024f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8024ec4:	68fb      	ldr	r3, [r7, #12]
 8024ec6:	685b      	ldr	r3, [r3, #4]
 8024ec8:	2b00      	cmp	r3, #0
 8024eca:	d006      	beq.n	8024eda <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8024ecc:	68fb      	ldr	r3, [r7, #12]
 8024ece:	685b      	ldr	r3, [r3, #4]
 8024ed0:	685b      	ldr	r3, [r3, #4]
 8024ed2:	889b      	ldrh	r3, [r3, #4]
 8024ed4:	b29b      	uxth	r3, r3
 8024ed6:	2b00      	cmp	r3, #0
 8024ed8:	d002      	beq.n	8024ee0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8024eda:	2300      	movs	r3, #0
 8024edc:	623b      	str	r3, [r7, #32]
 8024ede:	e041      	b.n	8024f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8024ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ee2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8024ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ee6:	681b      	ldr	r3, [r3, #0]
 8024ee8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024eea:	e012      	b.n	8024f12 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8024eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024eee:	685b      	ldr	r3, [r3, #4]
 8024ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8024ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ef4:	88db      	ldrh	r3, [r3, #6]
 8024ef6:	b29a      	uxth	r2, r3
 8024ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024efa:	889b      	ldrh	r3, [r3, #4]
 8024efc:	b29b      	uxth	r3, r3
 8024efe:	429a      	cmp	r2, r3
 8024f00:	d002      	beq.n	8024f08 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8024f02:	2300      	movs	r3, #0
 8024f04:	623b      	str	r3, [r7, #32]
            break;
 8024f06:	e007      	b.n	8024f18 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8024f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f0a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8024f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f0e:	681b      	ldr	r3, [r3, #0]
 8024f10:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8024f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024f14:	2b00      	cmp	r3, #0
 8024f16:	d1e9      	bne.n	8024eec <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8024f18:	6a3b      	ldr	r3, [r7, #32]
 8024f1a:	2b00      	cmp	r3, #0
 8024f1c:	d022      	beq.n	8024f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8024f1e:	68fb      	ldr	r3, [r7, #12]
 8024f20:	685b      	ldr	r3, [r3, #4]
 8024f22:	2b00      	cmp	r3, #0
 8024f24:	d106      	bne.n	8024f34 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8024f26:	4b15      	ldr	r3, [pc, #84]	; (8024f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024f28:	f240 12df 	movw	r2, #479	; 0x1df
 8024f2c:	4917      	ldr	r1, [pc, #92]	; (8024f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8024f2e:	4815      	ldr	r0, [pc, #84]	; (8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024f30:	f000 fd94 	bl	8025a5c <iprintf>
          LWIP_ASSERT("sanity check",
 8024f34:	68fb      	ldr	r3, [r7, #12]
 8024f36:	685b      	ldr	r3, [r3, #4]
 8024f38:	685b      	ldr	r3, [r3, #4]
 8024f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024f3c:	429a      	cmp	r2, r3
 8024f3e:	d106      	bne.n	8024f4e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8024f40:	4b0e      	ldr	r3, [pc, #56]	; (8024f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024f42:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8024f46:	4911      	ldr	r1, [pc, #68]	; (8024f8c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8024f48:	480e      	ldr	r0, [pc, #56]	; (8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024f4a:	f000 fd87 	bl	8025a5c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8024f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024f50:	681b      	ldr	r3, [r3, #0]
 8024f52:	2b00      	cmp	r3, #0
 8024f54:	d006      	beq.n	8024f64 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8024f56:	4b09      	ldr	r3, [pc, #36]	; (8024f7c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8024f58:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8024f5c:	490c      	ldr	r1, [pc, #48]	; (8024f90 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8024f5e:	4809      	ldr	r0, [pc, #36]	; (8024f84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8024f60:	f000 fd7c 	bl	8025a5c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8024f64:	6a3b      	ldr	r3, [r7, #32]
 8024f66:	2b00      	cmp	r3, #0
 8024f68:	bf14      	ite	ne
 8024f6a:	2301      	movne	r3, #1
 8024f6c:	2300      	moveq	r3, #0
 8024f6e:	b2db      	uxtb	r3, r3
 8024f70:	e000      	b.n	8024f74 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8024f72:	2300      	movs	r3, #0
}
 8024f74:	4618      	mov	r0, r3
 8024f76:	3730      	adds	r7, #48	; 0x30
 8024f78:	46bd      	mov	sp, r7
 8024f7a:	bd80      	pop	{r7, pc}
 8024f7c:	0802c76c 	.word	0x0802c76c
 8024f80:	0802c890 	.word	0x0802c890
 8024f84:	0802c7f4 	.word	0x0802c7f4
 8024f88:	0802c8b0 	.word	0x0802c8b0
 8024f8c:	0802c8e8 	.word	0x0802c8e8
 8024f90:	0802c8f8 	.word	0x0802c8f8

08024f94 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8024f94:	b580      	push	{r7, lr}
 8024f96:	b08e      	sub	sp, #56	; 0x38
 8024f98:	af00      	add	r7, sp, #0
 8024f9a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8024f9c:	687b      	ldr	r3, [r7, #4]
 8024f9e:	685b      	ldr	r3, [r3, #4]
 8024fa0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8024fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fa4:	781b      	ldrb	r3, [r3, #0]
 8024fa6:	f003 030f 	and.w	r3, r3, #15
 8024faa:	b2db      	uxtb	r3, r3
 8024fac:	009b      	lsls	r3, r3, #2
 8024fae:	b2db      	uxtb	r3, r3
 8024fb0:	2b14      	cmp	r3, #20
 8024fb2:	f040 8171 	bne.w	8025298 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8024fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fb8:	88db      	ldrh	r3, [r3, #6]
 8024fba:	b29b      	uxth	r3, r3
 8024fbc:	4618      	mov	r0, r3
 8024fbe:	f7fb fc39 	bl	8020834 <lwip_htons>
 8024fc2:	4603      	mov	r3, r0
 8024fc4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8024fc8:	b29b      	uxth	r3, r3
 8024fca:	00db      	lsls	r3, r3, #3
 8024fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8024fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fd0:	885b      	ldrh	r3, [r3, #2]
 8024fd2:	b29b      	uxth	r3, r3
 8024fd4:	4618      	mov	r0, r3
 8024fd6:	f7fb fc2d 	bl	8020834 <lwip_htons>
 8024fda:	4603      	mov	r3, r0
 8024fdc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8024fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024fe0:	781b      	ldrb	r3, [r3, #0]
 8024fe2:	f003 030f 	and.w	r3, r3, #15
 8024fe6:	b2db      	uxtb	r3, r3
 8024fe8:	009b      	lsls	r3, r3, #2
 8024fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8024fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8024ff2:	b29b      	uxth	r3, r3
 8024ff4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8024ff6:	429a      	cmp	r2, r3
 8024ff8:	f0c0 8150 	bcc.w	802529c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8024ffc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025000:	b29b      	uxth	r3, r3
 8025002:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025004:	1ad3      	subs	r3, r2, r3
 8025006:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8025008:	6878      	ldr	r0, [r7, #4]
 802500a:	f7fd f877 	bl	80220fc <pbuf_clen>
 802500e:	4603      	mov	r3, r0
 8025010:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8025012:	4b8c      	ldr	r3, [pc, #560]	; (8025244 <ip4_reass+0x2b0>)
 8025014:	881b      	ldrh	r3, [r3, #0]
 8025016:	461a      	mov	r2, r3
 8025018:	8c3b      	ldrh	r3, [r7, #32]
 802501a:	4413      	add	r3, r2
 802501c:	2b0a      	cmp	r3, #10
 802501e:	dd10      	ble.n	8025042 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025020:	8c3b      	ldrh	r3, [r7, #32]
 8025022:	4619      	mov	r1, r3
 8025024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8025026:	f7ff fd81 	bl	8024b2c <ip_reass_remove_oldest_datagram>
 802502a:	4603      	mov	r3, r0
 802502c:	2b00      	cmp	r3, #0
 802502e:	f000 8137 	beq.w	80252a0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8025032:	4b84      	ldr	r3, [pc, #528]	; (8025244 <ip4_reass+0x2b0>)
 8025034:	881b      	ldrh	r3, [r3, #0]
 8025036:	461a      	mov	r2, r3
 8025038:	8c3b      	ldrh	r3, [r7, #32]
 802503a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802503c:	2b0a      	cmp	r3, #10
 802503e:	f300 812f 	bgt.w	80252a0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025042:	4b81      	ldr	r3, [pc, #516]	; (8025248 <ip4_reass+0x2b4>)
 8025044:	681b      	ldr	r3, [r3, #0]
 8025046:	633b      	str	r3, [r7, #48]	; 0x30
 8025048:	e015      	b.n	8025076 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802504c:	695a      	ldr	r2, [r3, #20]
 802504e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025050:	68db      	ldr	r3, [r3, #12]
 8025052:	429a      	cmp	r2, r3
 8025054:	d10c      	bne.n	8025070 <ip4_reass+0xdc>
 8025056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025058:	699a      	ldr	r2, [r3, #24]
 802505a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802505c:	691b      	ldr	r3, [r3, #16]
 802505e:	429a      	cmp	r2, r3
 8025060:	d106      	bne.n	8025070 <ip4_reass+0xdc>
 8025062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025064:	899a      	ldrh	r2, [r3, #12]
 8025066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025068:	889b      	ldrh	r3, [r3, #4]
 802506a:	b29b      	uxth	r3, r3
 802506c:	429a      	cmp	r2, r3
 802506e:	d006      	beq.n	802507e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8025070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025072:	681b      	ldr	r3, [r3, #0]
 8025074:	633b      	str	r3, [r7, #48]	; 0x30
 8025076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025078:	2b00      	cmp	r3, #0
 802507a:	d1e6      	bne.n	802504a <ip4_reass+0xb6>
 802507c:	e000      	b.n	8025080 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 802507e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8025080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025082:	2b00      	cmp	r3, #0
 8025084:	d109      	bne.n	802509a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8025086:	8c3b      	ldrh	r3, [r7, #32]
 8025088:	4619      	mov	r1, r3
 802508a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802508c:	f7ff fdb0 	bl	8024bf0 <ip_reass_enqueue_new_datagram>
 8025090:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8025092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025094:	2b00      	cmp	r3, #0
 8025096:	d11c      	bne.n	80250d2 <ip4_reass+0x13e>
      goto nullreturn;
 8025098:	e105      	b.n	80252a6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 802509a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802509c:	88db      	ldrh	r3, [r3, #6]
 802509e:	b29b      	uxth	r3, r3
 80250a0:	4618      	mov	r0, r3
 80250a2:	f7fb fbc7 	bl	8020834 <lwip_htons>
 80250a6:	4603      	mov	r3, r0
 80250a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80250ac:	2b00      	cmp	r3, #0
 80250ae:	d110      	bne.n	80250d2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80250b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80250b2:	89db      	ldrh	r3, [r3, #14]
 80250b4:	4618      	mov	r0, r3
 80250b6:	f7fb fbbd 	bl	8020834 <lwip_htons>
 80250ba:	4603      	mov	r3, r0
 80250bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80250c0:	2b00      	cmp	r3, #0
 80250c2:	d006      	beq.n	80250d2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80250c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80250c6:	3308      	adds	r3, #8
 80250c8:	2214      	movs	r2, #20
 80250ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80250cc:	4618      	mov	r0, r3
 80250ce:	f000 fbb5 	bl	802583c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80250d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80250d4:	88db      	ldrh	r3, [r3, #6]
 80250d6:	b29b      	uxth	r3, r3
 80250d8:	f003 0320 	and.w	r3, r3, #32
 80250dc:	2b00      	cmp	r3, #0
 80250de:	bf0c      	ite	eq
 80250e0:	2301      	moveq	r3, #1
 80250e2:	2300      	movne	r3, #0
 80250e4:	b2db      	uxtb	r3, r3
 80250e6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80250e8:	69fb      	ldr	r3, [r7, #28]
 80250ea:	2b00      	cmp	r3, #0
 80250ec:	d00e      	beq.n	802510c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80250ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80250f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80250f2:	4413      	add	r3, r2
 80250f4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80250f6:	8b7a      	ldrh	r2, [r7, #26]
 80250f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80250fa:	429a      	cmp	r2, r3
 80250fc:	f0c0 80a0 	bcc.w	8025240 <ip4_reass+0x2ac>
 8025100:	8b7b      	ldrh	r3, [r7, #26]
 8025102:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8025106:	4293      	cmp	r3, r2
 8025108:	f200 809a 	bhi.w	8025240 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802510c:	69fa      	ldr	r2, [r7, #28]
 802510e:	6879      	ldr	r1, [r7, #4]
 8025110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025112:	f7ff fdd5 	bl	8024cc0 <ip_reass_chain_frag_into_datagram_and_validate>
 8025116:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8025118:	697b      	ldr	r3, [r7, #20]
 802511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802511e:	f000 809b 	beq.w	8025258 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8025122:	4b48      	ldr	r3, [pc, #288]	; (8025244 <ip4_reass+0x2b0>)
 8025124:	881a      	ldrh	r2, [r3, #0]
 8025126:	8c3b      	ldrh	r3, [r7, #32]
 8025128:	4413      	add	r3, r2
 802512a:	b29a      	uxth	r2, r3
 802512c:	4b45      	ldr	r3, [pc, #276]	; (8025244 <ip4_reass+0x2b0>)
 802512e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025130:	69fb      	ldr	r3, [r7, #28]
 8025132:	2b00      	cmp	r3, #0
 8025134:	d00d      	beq.n	8025152 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8025136:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802513a:	4413      	add	r3, r2
 802513c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025140:	8a7a      	ldrh	r2, [r7, #18]
 8025142:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8025144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025146:	7f9b      	ldrb	r3, [r3, #30]
 8025148:	f043 0301 	orr.w	r3, r3, #1
 802514c:	b2da      	uxtb	r2, r3
 802514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025150:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8025152:	697b      	ldr	r3, [r7, #20]
 8025154:	2b01      	cmp	r3, #1
 8025156:	d171      	bne.n	802523c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8025158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802515a:	8b9b      	ldrh	r3, [r3, #28]
 802515c:	3314      	adds	r3, #20
 802515e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8025160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025162:	685b      	ldr	r3, [r3, #4]
 8025164:	685b      	ldr	r3, [r3, #4]
 8025166:	681b      	ldr	r3, [r3, #0]
 8025168:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 802516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802516c:	685b      	ldr	r3, [r3, #4]
 802516e:	685b      	ldr	r3, [r3, #4]
 8025170:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8025172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025174:	3308      	adds	r3, #8
 8025176:	2214      	movs	r2, #20
 8025178:	4619      	mov	r1, r3
 802517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802517c:	f000 fb5e 	bl	802583c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8025180:	8a3b      	ldrh	r3, [r7, #16]
 8025182:	4618      	mov	r0, r3
 8025184:	f7fb fb56 	bl	8020834 <lwip_htons>
 8025188:	4603      	mov	r3, r0
 802518a:	461a      	mov	r2, r3
 802518c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802518e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8025190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025192:	2200      	movs	r2, #0
 8025194:	719a      	strb	r2, [r3, #6]
 8025196:	2200      	movs	r2, #0
 8025198:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 802519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802519c:	2200      	movs	r2, #0
 802519e:	729a      	strb	r2, [r3, #10]
 80251a0:	2200      	movs	r2, #0
 80251a2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80251a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80251a6:	685b      	ldr	r3, [r3, #4]
 80251a8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80251aa:	e00d      	b.n	80251c8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80251ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80251ae:	685b      	ldr	r3, [r3, #4]
 80251b0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80251b2:	2114      	movs	r1, #20
 80251b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80251b6:	f7fc fe93 	bl	8021ee0 <pbuf_remove_header>
      pbuf_cat(p, r);
 80251ba:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80251bc:	6878      	ldr	r0, [r7, #4]
 80251be:	f7fc ffd7 	bl	8022170 <pbuf_cat>
      r = iprh->next_pbuf;
 80251c2:	68fb      	ldr	r3, [r7, #12]
 80251c4:	681b      	ldr	r3, [r3, #0]
 80251c6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80251c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80251ca:	2b00      	cmp	r3, #0
 80251cc:	d1ee      	bne.n	80251ac <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80251ce:	4b1e      	ldr	r3, [pc, #120]	; (8025248 <ip4_reass+0x2b4>)
 80251d0:	681b      	ldr	r3, [r3, #0]
 80251d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80251d4:	429a      	cmp	r2, r3
 80251d6:	d102      	bne.n	80251de <ip4_reass+0x24a>
      ipr_prev = NULL;
 80251d8:	2300      	movs	r3, #0
 80251da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80251dc:	e010      	b.n	8025200 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80251de:	4b1a      	ldr	r3, [pc, #104]	; (8025248 <ip4_reass+0x2b4>)
 80251e0:	681b      	ldr	r3, [r3, #0]
 80251e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80251e4:	e007      	b.n	80251f6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80251e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80251e8:	681b      	ldr	r3, [r3, #0]
 80251ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80251ec:	429a      	cmp	r2, r3
 80251ee:	d006      	beq.n	80251fe <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80251f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80251f2:	681b      	ldr	r3, [r3, #0]
 80251f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80251f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	d1f4      	bne.n	80251e6 <ip4_reass+0x252>
 80251fc:	e000      	b.n	8025200 <ip4_reass+0x26c>
          break;
 80251fe:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8025200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025202:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025204:	f7ff fd2e 	bl	8024c64 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8025208:	6878      	ldr	r0, [r7, #4]
 802520a:	f7fc ff77 	bl	80220fc <pbuf_clen>
 802520e:	4603      	mov	r3, r0
 8025210:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8025212:	4b0c      	ldr	r3, [pc, #48]	; (8025244 <ip4_reass+0x2b0>)
 8025214:	881b      	ldrh	r3, [r3, #0]
 8025216:	8c3a      	ldrh	r2, [r7, #32]
 8025218:	429a      	cmp	r2, r3
 802521a:	d906      	bls.n	802522a <ip4_reass+0x296>
 802521c:	4b0b      	ldr	r3, [pc, #44]	; (802524c <ip4_reass+0x2b8>)
 802521e:	f240 229b 	movw	r2, #667	; 0x29b
 8025222:	490b      	ldr	r1, [pc, #44]	; (8025250 <ip4_reass+0x2bc>)
 8025224:	480b      	ldr	r0, [pc, #44]	; (8025254 <ip4_reass+0x2c0>)
 8025226:	f000 fc19 	bl	8025a5c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802522a:	4b06      	ldr	r3, [pc, #24]	; (8025244 <ip4_reass+0x2b0>)
 802522c:	881a      	ldrh	r2, [r3, #0]
 802522e:	8c3b      	ldrh	r3, [r7, #32]
 8025230:	1ad3      	subs	r3, r2, r3
 8025232:	b29a      	uxth	r2, r3
 8025234:	4b03      	ldr	r3, [pc, #12]	; (8025244 <ip4_reass+0x2b0>)
 8025236:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8025238:	687b      	ldr	r3, [r7, #4]
 802523a:	e038      	b.n	80252ae <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 802523c:	2300      	movs	r3, #0
 802523e:	e036      	b.n	80252ae <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8025240:	bf00      	nop
 8025242:	e00a      	b.n	802525a <ip4_reass+0x2c6>
 8025244:	200161c4 	.word	0x200161c4
 8025248:	200161c0 	.word	0x200161c0
 802524c:	0802c76c 	.word	0x0802c76c
 8025250:	0802c91c 	.word	0x0802c91c
 8025254:	0802c7f4 	.word	0x0802c7f4
    goto nullreturn_ipr;
 8025258:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 802525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802525c:	2b00      	cmp	r3, #0
 802525e:	d106      	bne.n	802526e <ip4_reass+0x2da>
 8025260:	4b15      	ldr	r3, [pc, #84]	; (80252b8 <ip4_reass+0x324>)
 8025262:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8025266:	4915      	ldr	r1, [pc, #84]	; (80252bc <ip4_reass+0x328>)
 8025268:	4815      	ldr	r0, [pc, #84]	; (80252c0 <ip4_reass+0x32c>)
 802526a:	f000 fbf7 	bl	8025a5c <iprintf>
  if (ipr->p == NULL) {
 802526e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025270:	685b      	ldr	r3, [r3, #4]
 8025272:	2b00      	cmp	r3, #0
 8025274:	d116      	bne.n	80252a4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8025276:	4b13      	ldr	r3, [pc, #76]	; (80252c4 <ip4_reass+0x330>)
 8025278:	681b      	ldr	r3, [r3, #0]
 802527a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802527c:	429a      	cmp	r2, r3
 802527e:	d006      	beq.n	802528e <ip4_reass+0x2fa>
 8025280:	4b0d      	ldr	r3, [pc, #52]	; (80252b8 <ip4_reass+0x324>)
 8025282:	f240 22ab 	movw	r2, #683	; 0x2ab
 8025286:	4910      	ldr	r1, [pc, #64]	; (80252c8 <ip4_reass+0x334>)
 8025288:	480d      	ldr	r0, [pc, #52]	; (80252c0 <ip4_reass+0x32c>)
 802528a:	f000 fbe7 	bl	8025a5c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802528e:	2100      	movs	r1, #0
 8025290:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025292:	f7ff fce7 	bl	8024c64 <ip_reass_dequeue_datagram>
 8025296:	e006      	b.n	80252a6 <ip4_reass+0x312>
    goto nullreturn;
 8025298:	bf00      	nop
 802529a:	e004      	b.n	80252a6 <ip4_reass+0x312>
    goto nullreturn;
 802529c:	bf00      	nop
 802529e:	e002      	b.n	80252a6 <ip4_reass+0x312>
      goto nullreturn;
 80252a0:	bf00      	nop
 80252a2:	e000      	b.n	80252a6 <ip4_reass+0x312>
  }

nullreturn:
 80252a4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80252a6:	6878      	ldr	r0, [r7, #4]
 80252a8:	f7fc fea0 	bl	8021fec <pbuf_free>
  return NULL;
 80252ac:	2300      	movs	r3, #0
}
 80252ae:	4618      	mov	r0, r3
 80252b0:	3738      	adds	r7, #56	; 0x38
 80252b2:	46bd      	mov	sp, r7
 80252b4:	bd80      	pop	{r7, pc}
 80252b6:	bf00      	nop
 80252b8:	0802c76c 	.word	0x0802c76c
 80252bc:	0802c938 	.word	0x0802c938
 80252c0:	0802c7f4 	.word	0x0802c7f4
 80252c4:	200161c0 	.word	0x200161c0
 80252c8:	0802c944 	.word	0x0802c944

080252cc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80252cc:	b580      	push	{r7, lr}
 80252ce:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80252d0:	2002      	movs	r0, #2
 80252d2:	f7fb ff0b 	bl	80210ec <memp_malloc>
 80252d6:	4603      	mov	r3, r0
}
 80252d8:	4618      	mov	r0, r3
 80252da:	bd80      	pop	{r7, pc}

080252dc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80252dc:	b580      	push	{r7, lr}
 80252de:	b082      	sub	sp, #8
 80252e0:	af00      	add	r7, sp, #0
 80252e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80252e4:	687b      	ldr	r3, [r7, #4]
 80252e6:	2b00      	cmp	r3, #0
 80252e8:	d106      	bne.n	80252f8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80252ea:	4b07      	ldr	r3, [pc, #28]	; (8025308 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80252ec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80252f0:	4906      	ldr	r1, [pc, #24]	; (802530c <ip_frag_free_pbuf_custom_ref+0x30>)
 80252f2:	4807      	ldr	r0, [pc, #28]	; (8025310 <ip_frag_free_pbuf_custom_ref+0x34>)
 80252f4:	f000 fbb2 	bl	8025a5c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80252f8:	6879      	ldr	r1, [r7, #4]
 80252fa:	2002      	movs	r0, #2
 80252fc:	f7fb ff66 	bl	80211cc <memp_free>
}
 8025300:	bf00      	nop
 8025302:	3708      	adds	r7, #8
 8025304:	46bd      	mov	sp, r7
 8025306:	bd80      	pop	{r7, pc}
 8025308:	0802c76c 	.word	0x0802c76c
 802530c:	0802c964 	.word	0x0802c964
 8025310:	0802c7f4 	.word	0x0802c7f4

08025314 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8025314:	b580      	push	{r7, lr}
 8025316:	b084      	sub	sp, #16
 8025318:	af00      	add	r7, sp, #0
 802531a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 802531c:	687b      	ldr	r3, [r7, #4]
 802531e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8025320:	68fb      	ldr	r3, [r7, #12]
 8025322:	2b00      	cmp	r3, #0
 8025324:	d106      	bne.n	8025334 <ipfrag_free_pbuf_custom+0x20>
 8025326:	4b11      	ldr	r3, [pc, #68]	; (802536c <ipfrag_free_pbuf_custom+0x58>)
 8025328:	f240 22ce 	movw	r2, #718	; 0x2ce
 802532c:	4910      	ldr	r1, [pc, #64]	; (8025370 <ipfrag_free_pbuf_custom+0x5c>)
 802532e:	4811      	ldr	r0, [pc, #68]	; (8025374 <ipfrag_free_pbuf_custom+0x60>)
 8025330:	f000 fb94 	bl	8025a5c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8025334:	68fa      	ldr	r2, [r7, #12]
 8025336:	687b      	ldr	r3, [r7, #4]
 8025338:	429a      	cmp	r2, r3
 802533a:	d006      	beq.n	802534a <ipfrag_free_pbuf_custom+0x36>
 802533c:	4b0b      	ldr	r3, [pc, #44]	; (802536c <ipfrag_free_pbuf_custom+0x58>)
 802533e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8025342:	490d      	ldr	r1, [pc, #52]	; (8025378 <ipfrag_free_pbuf_custom+0x64>)
 8025344:	480b      	ldr	r0, [pc, #44]	; (8025374 <ipfrag_free_pbuf_custom+0x60>)
 8025346:	f000 fb89 	bl	8025a5c <iprintf>
  if (pcr->original != NULL) {
 802534a:	68fb      	ldr	r3, [r7, #12]
 802534c:	695b      	ldr	r3, [r3, #20]
 802534e:	2b00      	cmp	r3, #0
 8025350:	d004      	beq.n	802535c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8025352:	68fb      	ldr	r3, [r7, #12]
 8025354:	695b      	ldr	r3, [r3, #20]
 8025356:	4618      	mov	r0, r3
 8025358:	f7fc fe48 	bl	8021fec <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 802535c:	68f8      	ldr	r0, [r7, #12]
 802535e:	f7ff ffbd 	bl	80252dc <ip_frag_free_pbuf_custom_ref>
}
 8025362:	bf00      	nop
 8025364:	3710      	adds	r7, #16
 8025366:	46bd      	mov	sp, r7
 8025368:	bd80      	pop	{r7, pc}
 802536a:	bf00      	nop
 802536c:	0802c76c 	.word	0x0802c76c
 8025370:	0802c970 	.word	0x0802c970
 8025374:	0802c7f4 	.word	0x0802c7f4
 8025378:	0802c97c 	.word	0x0802c97c

0802537c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 802537c:	b580      	push	{r7, lr}
 802537e:	b094      	sub	sp, #80	; 0x50
 8025380:	af02      	add	r7, sp, #8
 8025382:	60f8      	str	r0, [r7, #12]
 8025384:	60b9      	str	r1, [r7, #8]
 8025386:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8025388:	2300      	movs	r3, #0
 802538a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802538e:	68bb      	ldr	r3, [r7, #8]
 8025390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025392:	3b14      	subs	r3, #20
 8025394:	2b00      	cmp	r3, #0
 8025396:	da00      	bge.n	802539a <ip4_frag+0x1e>
 8025398:	3307      	adds	r3, #7
 802539a:	10db      	asrs	r3, r3, #3
 802539c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802539e:	2314      	movs	r3, #20
 80253a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80253a2:	68fb      	ldr	r3, [r7, #12]
 80253a4:	685b      	ldr	r3, [r3, #4]
 80253a6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80253a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80253aa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80253ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253ae:	781b      	ldrb	r3, [r3, #0]
 80253b0:	f003 030f 	and.w	r3, r3, #15
 80253b4:	b2db      	uxtb	r3, r3
 80253b6:	009b      	lsls	r3, r3, #2
 80253b8:	b2db      	uxtb	r3, r3
 80253ba:	2b14      	cmp	r3, #20
 80253bc:	d002      	beq.n	80253c4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80253be:	f06f 0305 	mvn.w	r3, #5
 80253c2:	e110      	b.n	80255e6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80253c4:	68fb      	ldr	r3, [r7, #12]
 80253c6:	895b      	ldrh	r3, [r3, #10]
 80253c8:	2b13      	cmp	r3, #19
 80253ca:	d809      	bhi.n	80253e0 <ip4_frag+0x64>
 80253cc:	4b88      	ldr	r3, [pc, #544]	; (80255f0 <ip4_frag+0x274>)
 80253ce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80253d2:	4988      	ldr	r1, [pc, #544]	; (80255f4 <ip4_frag+0x278>)
 80253d4:	4888      	ldr	r0, [pc, #544]	; (80255f8 <ip4_frag+0x27c>)
 80253d6:	f000 fb41 	bl	8025a5c <iprintf>
 80253da:	f06f 0305 	mvn.w	r3, #5
 80253de:	e102      	b.n	80255e6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80253e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80253e2:	88db      	ldrh	r3, [r3, #6]
 80253e4:	b29b      	uxth	r3, r3
 80253e6:	4618      	mov	r0, r3
 80253e8:	f7fb fa24 	bl	8020834 <lwip_htons>
 80253ec:	4603      	mov	r3, r0
 80253ee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80253f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80253f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80253f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80253fa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80253fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025400:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8025402:	68fb      	ldr	r3, [r7, #12]
 8025404:	891b      	ldrh	r3, [r3, #8]
 8025406:	3b14      	subs	r3, #20
 8025408:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 802540c:	e0e1      	b.n	80255d2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802540e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025410:	00db      	lsls	r3, r3, #3
 8025412:	b29b      	uxth	r3, r3
 8025414:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025418:	4293      	cmp	r3, r2
 802541a:	bf28      	it	cs
 802541c:	4613      	movcs	r3, r2
 802541e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8025420:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025424:	2114      	movs	r1, #20
 8025426:	200e      	movs	r0, #14
 8025428:	f7fc fafe 	bl	8021a28 <pbuf_alloc>
 802542c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802542e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025430:	2b00      	cmp	r3, #0
 8025432:	f000 80d5 	beq.w	80255e0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8025436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025438:	895b      	ldrh	r3, [r3, #10]
 802543a:	2b13      	cmp	r3, #19
 802543c:	d806      	bhi.n	802544c <ip4_frag+0xd0>
 802543e:	4b6c      	ldr	r3, [pc, #432]	; (80255f0 <ip4_frag+0x274>)
 8025440:	f44f 7249 	mov.w	r2, #804	; 0x324
 8025444:	496d      	ldr	r1, [pc, #436]	; (80255fc <ip4_frag+0x280>)
 8025446:	486c      	ldr	r0, [pc, #432]	; (80255f8 <ip4_frag+0x27c>)
 8025448:	f000 fb08 	bl	8025a5c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802544e:	685b      	ldr	r3, [r3, #4]
 8025450:	2214      	movs	r2, #20
 8025452:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025454:	4618      	mov	r0, r3
 8025456:	f000 f9f1 	bl	802583c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 802545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802545c:	685b      	ldr	r3, [r3, #4]
 802545e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8025460:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025462:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8025466:	e064      	b.n	8025532 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8025468:	68fb      	ldr	r3, [r7, #12]
 802546a:	895a      	ldrh	r2, [r3, #10]
 802546c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802546e:	1ad3      	subs	r3, r2, r3
 8025470:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8025472:	68fb      	ldr	r3, [r7, #12]
 8025474:	895b      	ldrh	r3, [r3, #10]
 8025476:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025478:	429a      	cmp	r2, r3
 802547a:	d906      	bls.n	802548a <ip4_frag+0x10e>
 802547c:	4b5c      	ldr	r3, [pc, #368]	; (80255f0 <ip4_frag+0x274>)
 802547e:	f240 322d 	movw	r2, #813	; 0x32d
 8025482:	495f      	ldr	r1, [pc, #380]	; (8025600 <ip4_frag+0x284>)
 8025484:	485c      	ldr	r0, [pc, #368]	; (80255f8 <ip4_frag+0x27c>)
 8025486:	f000 fae9 	bl	8025a5c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802548a:	8bfa      	ldrh	r2, [r7, #30]
 802548c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025490:	4293      	cmp	r3, r2
 8025492:	bf28      	it	cs
 8025494:	4613      	movcs	r3, r2
 8025496:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 802549a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802549e:	2b00      	cmp	r3, #0
 80254a0:	d105      	bne.n	80254ae <ip4_frag+0x132>
        poff = 0;
 80254a2:	2300      	movs	r3, #0
 80254a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80254a6:	68fb      	ldr	r3, [r7, #12]
 80254a8:	681b      	ldr	r3, [r3, #0]
 80254aa:	60fb      	str	r3, [r7, #12]
        continue;
 80254ac:	e041      	b.n	8025532 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80254ae:	f7ff ff0d 	bl	80252cc <ip_frag_alloc_pbuf_custom_ref>
 80254b2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80254b4:	69bb      	ldr	r3, [r7, #24]
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	d103      	bne.n	80254c2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80254ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80254bc:	f7fc fd96 	bl	8021fec <pbuf_free>
        goto memerr;
 80254c0:	e08f      	b.n	80255e2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80254c2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80254c4:	68fb      	ldr	r3, [r7, #12]
 80254c6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80254c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80254ca:	4413      	add	r3, r2
 80254cc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80254d0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80254d4:	9201      	str	r2, [sp, #4]
 80254d6:	9300      	str	r3, [sp, #0]
 80254d8:	4603      	mov	r3, r0
 80254da:	2241      	movs	r2, #65	; 0x41
 80254dc:	2000      	movs	r0, #0
 80254de:	f7fc fbcb 	bl	8021c78 <pbuf_alloced_custom>
 80254e2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80254e4:	697b      	ldr	r3, [r7, #20]
 80254e6:	2b00      	cmp	r3, #0
 80254e8:	d106      	bne.n	80254f8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80254ea:	69b8      	ldr	r0, [r7, #24]
 80254ec:	f7ff fef6 	bl	80252dc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80254f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80254f2:	f7fc fd7b 	bl	8021fec <pbuf_free>
        goto memerr;
 80254f6:	e074      	b.n	80255e2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80254f8:	68f8      	ldr	r0, [r7, #12]
 80254fa:	f7fc fe17 	bl	802212c <pbuf_ref>
      pcr->original = p;
 80254fe:	69bb      	ldr	r3, [r7, #24]
 8025500:	68fa      	ldr	r2, [r7, #12]
 8025502:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8025504:	69bb      	ldr	r3, [r7, #24]
 8025506:	4a3f      	ldr	r2, [pc, #252]	; (8025604 <ip4_frag+0x288>)
 8025508:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 802550a:	6979      	ldr	r1, [r7, #20]
 802550c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802550e:	f7fc fe2f 	bl	8022170 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8025512:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8025516:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802551a:	1ad3      	subs	r3, r2, r3
 802551c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8025520:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025524:	2b00      	cmp	r3, #0
 8025526:	d004      	beq.n	8025532 <ip4_frag+0x1b6>
        poff = 0;
 8025528:	2300      	movs	r3, #0
 802552a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 802552c:	68fb      	ldr	r3, [r7, #12]
 802552e:	681b      	ldr	r3, [r3, #0]
 8025530:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8025532:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025536:	2b00      	cmp	r3, #0
 8025538:	d196      	bne.n	8025468 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 802553a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 802553c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025540:	4413      	add	r3, r2
 8025542:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8025544:	68bb      	ldr	r3, [r7, #8]
 8025546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025548:	f1a3 0213 	sub.w	r2, r3, #19
 802554c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025550:	429a      	cmp	r2, r3
 8025552:	bfcc      	ite	gt
 8025554:	2301      	movgt	r3, #1
 8025556:	2300      	movle	r3, #0
 8025558:	b2db      	uxtb	r3, r3
 802555a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 802555c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8025560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025564:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8025566:	6a3b      	ldr	r3, [r7, #32]
 8025568:	2b00      	cmp	r3, #0
 802556a:	d002      	beq.n	8025572 <ip4_frag+0x1f6>
 802556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802556e:	2b00      	cmp	r3, #0
 8025570:	d003      	beq.n	802557a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8025572:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025574:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025578:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802557a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802557c:	4618      	mov	r0, r3
 802557e:	f7fb f959 	bl	8020834 <lwip_htons>
 8025582:	4603      	mov	r3, r0
 8025584:	461a      	mov	r2, r3
 8025586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025588:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802558a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802558c:	3314      	adds	r3, #20
 802558e:	b29b      	uxth	r3, r3
 8025590:	4618      	mov	r0, r3
 8025592:	f7fb f94f 	bl	8020834 <lwip_htons>
 8025596:	4603      	mov	r3, r0
 8025598:	461a      	mov	r2, r3
 802559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802559c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255a0:	2200      	movs	r2, #0
 80255a2:	729a      	strb	r2, [r3, #10]
 80255a4:	2200      	movs	r2, #0
 80255a6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80255a8:	68bb      	ldr	r3, [r7, #8]
 80255aa:	695b      	ldr	r3, [r3, #20]
 80255ac:	687a      	ldr	r2, [r7, #4]
 80255ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80255b0:	68b8      	ldr	r0, [r7, #8]
 80255b2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80255b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80255b6:	f7fc fd19 	bl	8021fec <pbuf_free>
    left = (u16_t)(left - fragsize);
 80255ba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80255be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80255c0:	1ad3      	subs	r3, r2, r3
 80255c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80255c6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80255ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80255cc:	4413      	add	r3, r2
 80255ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80255d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	f47f af19 	bne.w	802540e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80255dc:	2300      	movs	r3, #0
 80255de:	e002      	b.n	80255e6 <ip4_frag+0x26a>
      goto memerr;
 80255e0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80255e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80255e6:	4618      	mov	r0, r3
 80255e8:	3748      	adds	r7, #72	; 0x48
 80255ea:	46bd      	mov	sp, r7
 80255ec:	bd80      	pop	{r7, pc}
 80255ee:	bf00      	nop
 80255f0:	0802c76c 	.word	0x0802c76c
 80255f4:	0802c988 	.word	0x0802c988
 80255f8:	0802c7f4 	.word	0x0802c7f4
 80255fc:	0802c9a4 	.word	0x0802c9a4
 8025600:	0802c9c4 	.word	0x0802c9c4
 8025604:	08025315 	.word	0x08025315

08025608 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8025608:	b580      	push	{r7, lr}
 802560a:	b086      	sub	sp, #24
 802560c:	af00      	add	r7, sp, #0
 802560e:	6078      	str	r0, [r7, #4]
 8025610:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8025612:	230e      	movs	r3, #14
 8025614:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8025616:	687b      	ldr	r3, [r7, #4]
 8025618:	895b      	ldrh	r3, [r3, #10]
 802561a:	2b0e      	cmp	r3, #14
 802561c:	d96e      	bls.n	80256fc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802561e:	687b      	ldr	r3, [r7, #4]
 8025620:	7bdb      	ldrb	r3, [r3, #15]
 8025622:	2b00      	cmp	r3, #0
 8025624:	d106      	bne.n	8025634 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8025626:	683b      	ldr	r3, [r7, #0]
 8025628:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802562c:	3301      	adds	r3, #1
 802562e:	b2da      	uxtb	r2, r3
 8025630:	687b      	ldr	r3, [r7, #4]
 8025632:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8025634:	687b      	ldr	r3, [r7, #4]
 8025636:	685b      	ldr	r3, [r3, #4]
 8025638:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 802563a:	693b      	ldr	r3, [r7, #16]
 802563c:	7b1a      	ldrb	r2, [r3, #12]
 802563e:	7b5b      	ldrb	r3, [r3, #13]
 8025640:	021b      	lsls	r3, r3, #8
 8025642:	4313      	orrs	r3, r2
 8025644:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8025646:	693b      	ldr	r3, [r7, #16]
 8025648:	781b      	ldrb	r3, [r3, #0]
 802564a:	f003 0301 	and.w	r3, r3, #1
 802564e:	2b00      	cmp	r3, #0
 8025650:	d023      	beq.n	802569a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8025652:	693b      	ldr	r3, [r7, #16]
 8025654:	781b      	ldrb	r3, [r3, #0]
 8025656:	2b01      	cmp	r3, #1
 8025658:	d10f      	bne.n	802567a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 802565a:	693b      	ldr	r3, [r7, #16]
 802565c:	785b      	ldrb	r3, [r3, #1]
 802565e:	2b00      	cmp	r3, #0
 8025660:	d11b      	bne.n	802569a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8025662:	693b      	ldr	r3, [r7, #16]
 8025664:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025666:	2b5e      	cmp	r3, #94	; 0x5e
 8025668:	d117      	bne.n	802569a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 802566a:	687b      	ldr	r3, [r7, #4]
 802566c:	7b5b      	ldrb	r3, [r3, #13]
 802566e:	f043 0310 	orr.w	r3, r3, #16
 8025672:	b2da      	uxtb	r2, r3
 8025674:	687b      	ldr	r3, [r7, #4]
 8025676:	735a      	strb	r2, [r3, #13]
 8025678:	e00f      	b.n	802569a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 802567a:	693b      	ldr	r3, [r7, #16]
 802567c:	2206      	movs	r2, #6
 802567e:	4928      	ldr	r1, [pc, #160]	; (8025720 <ethernet_input+0x118>)
 8025680:	4618      	mov	r0, r3
 8025682:	f000 f8cb 	bl	802581c <memcmp>
 8025686:	4603      	mov	r3, r0
 8025688:	2b00      	cmp	r3, #0
 802568a:	d106      	bne.n	802569a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802568c:	687b      	ldr	r3, [r7, #4]
 802568e:	7b5b      	ldrb	r3, [r3, #13]
 8025690:	f043 0308 	orr.w	r3, r3, #8
 8025694:	b2da      	uxtb	r2, r3
 8025696:	687b      	ldr	r3, [r7, #4]
 8025698:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 802569a:	89fb      	ldrh	r3, [r7, #14]
 802569c:	2b08      	cmp	r3, #8
 802569e:	d003      	beq.n	80256a8 <ethernet_input+0xa0>
 80256a0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80256a4:	d014      	beq.n	80256d0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80256a6:	e032      	b.n	802570e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80256a8:	683b      	ldr	r3, [r7, #0]
 80256aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80256ae:	f003 0308 	and.w	r3, r3, #8
 80256b2:	2b00      	cmp	r3, #0
 80256b4:	d024      	beq.n	8025700 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80256b6:	8afb      	ldrh	r3, [r7, #22]
 80256b8:	4619      	mov	r1, r3
 80256ba:	6878      	ldr	r0, [r7, #4]
 80256bc:	f7fc fc10 	bl	8021ee0 <pbuf_remove_header>
 80256c0:	4603      	mov	r3, r0
 80256c2:	2b00      	cmp	r3, #0
 80256c4:	d11e      	bne.n	8025704 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80256c6:	6839      	ldr	r1, [r7, #0]
 80256c8:	6878      	ldr	r0, [r7, #4]
 80256ca:	f7fe fe8d 	bl	80243e8 <ip4_input>
      break;
 80256ce:	e013      	b.n	80256f8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80256d0:	683b      	ldr	r3, [r7, #0]
 80256d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80256d6:	f003 0308 	and.w	r3, r3, #8
 80256da:	2b00      	cmp	r3, #0
 80256dc:	d014      	beq.n	8025708 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80256de:	8afb      	ldrh	r3, [r7, #22]
 80256e0:	4619      	mov	r1, r3
 80256e2:	6878      	ldr	r0, [r7, #4]
 80256e4:	f7fc fbfc 	bl	8021ee0 <pbuf_remove_header>
 80256e8:	4603      	mov	r3, r0
 80256ea:	2b00      	cmp	r3, #0
 80256ec:	d10e      	bne.n	802570c <ethernet_input+0x104>
        etharp_input(p, netif);
 80256ee:	6839      	ldr	r1, [r7, #0]
 80256f0:	6878      	ldr	r0, [r7, #4]
 80256f2:	f7fe f82d 	bl	8023750 <etharp_input>
      break;
 80256f6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80256f8:	2300      	movs	r3, #0
 80256fa:	e00c      	b.n	8025716 <ethernet_input+0x10e>
    goto free_and_return;
 80256fc:	bf00      	nop
 80256fe:	e006      	b.n	802570e <ethernet_input+0x106>
        goto free_and_return;
 8025700:	bf00      	nop
 8025702:	e004      	b.n	802570e <ethernet_input+0x106>
        goto free_and_return;
 8025704:	bf00      	nop
 8025706:	e002      	b.n	802570e <ethernet_input+0x106>
        goto free_and_return;
 8025708:	bf00      	nop
 802570a:	e000      	b.n	802570e <ethernet_input+0x106>
        goto free_and_return;
 802570c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802570e:	6878      	ldr	r0, [r7, #4]
 8025710:	f7fc fc6c 	bl	8021fec <pbuf_free>
  return ERR_OK;
 8025714:	2300      	movs	r3, #0
}
 8025716:	4618      	mov	r0, r3
 8025718:	3718      	adds	r7, #24
 802571a:	46bd      	mov	sp, r7
 802571c:	bd80      	pop	{r7, pc}
 802571e:	bf00      	nop
 8025720:	0802cf64 	.word	0x0802cf64

08025724 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8025724:	b580      	push	{r7, lr}
 8025726:	b086      	sub	sp, #24
 8025728:	af00      	add	r7, sp, #0
 802572a:	60f8      	str	r0, [r7, #12]
 802572c:	60b9      	str	r1, [r7, #8]
 802572e:	607a      	str	r2, [r7, #4]
 8025730:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8025732:	8c3b      	ldrh	r3, [r7, #32]
 8025734:	4618      	mov	r0, r3
 8025736:	f7fb f87d 	bl	8020834 <lwip_htons>
 802573a:	4603      	mov	r3, r0
 802573c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802573e:	210e      	movs	r1, #14
 8025740:	68b8      	ldr	r0, [r7, #8]
 8025742:	f7fc fbbd 	bl	8021ec0 <pbuf_add_header>
 8025746:	4603      	mov	r3, r0
 8025748:	2b00      	cmp	r3, #0
 802574a:	d125      	bne.n	8025798 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 802574c:	68bb      	ldr	r3, [r7, #8]
 802574e:	685b      	ldr	r3, [r3, #4]
 8025750:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8025752:	693b      	ldr	r3, [r7, #16]
 8025754:	8afa      	ldrh	r2, [r7, #22]
 8025756:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8025758:	693b      	ldr	r3, [r7, #16]
 802575a:	2206      	movs	r2, #6
 802575c:	6839      	ldr	r1, [r7, #0]
 802575e:	4618      	mov	r0, r3
 8025760:	f000 f86c 	bl	802583c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025764:	693b      	ldr	r3, [r7, #16]
 8025766:	3306      	adds	r3, #6
 8025768:	2206      	movs	r2, #6
 802576a:	6879      	ldr	r1, [r7, #4]
 802576c:	4618      	mov	r0, r3
 802576e:	f000 f865 	bl	802583c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8025772:	68fb      	ldr	r3, [r7, #12]
 8025774:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025778:	2b06      	cmp	r3, #6
 802577a:	d006      	beq.n	802578a <ethernet_output+0x66>
 802577c:	4b0a      	ldr	r3, [pc, #40]	; (80257a8 <ethernet_output+0x84>)
 802577e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8025782:	490a      	ldr	r1, [pc, #40]	; (80257ac <ethernet_output+0x88>)
 8025784:	480a      	ldr	r0, [pc, #40]	; (80257b0 <ethernet_output+0x8c>)
 8025786:	f000 f969 	bl	8025a5c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802578a:	68fb      	ldr	r3, [r7, #12]
 802578c:	699b      	ldr	r3, [r3, #24]
 802578e:	68b9      	ldr	r1, [r7, #8]
 8025790:	68f8      	ldr	r0, [r7, #12]
 8025792:	4798      	blx	r3
 8025794:	4603      	mov	r3, r0
 8025796:	e002      	b.n	802579e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025798:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 802579a:	f06f 0301 	mvn.w	r3, #1
}
 802579e:	4618      	mov	r0, r3
 80257a0:	3718      	adds	r7, #24
 80257a2:	46bd      	mov	sp, r7
 80257a4:	bd80      	pop	{r7, pc}
 80257a6:	bf00      	nop
 80257a8:	0802c9d4 	.word	0x0802c9d4
 80257ac:	0802ca4c 	.word	0x0802ca4c
 80257b0:	0802ca80 	.word	0x0802ca80

080257b4 <__libc_init_array>:
 80257b4:	b570      	push	{r4, r5, r6, lr}
 80257b6:	4d0d      	ldr	r5, [pc, #52]	; (80257ec <__libc_init_array+0x38>)
 80257b8:	4c0d      	ldr	r4, [pc, #52]	; (80257f0 <__libc_init_array+0x3c>)
 80257ba:	1b64      	subs	r4, r4, r5
 80257bc:	10a4      	asrs	r4, r4, #2
 80257be:	2600      	movs	r6, #0
 80257c0:	42a6      	cmp	r6, r4
 80257c2:	d109      	bne.n	80257d8 <__libc_init_array+0x24>
 80257c4:	4d0b      	ldr	r5, [pc, #44]	; (80257f4 <__libc_init_array+0x40>)
 80257c6:	4c0c      	ldr	r4, [pc, #48]	; (80257f8 <__libc_init_array+0x44>)
 80257c8:	f001 fbfe 	bl	8026fc8 <_init>
 80257cc:	1b64      	subs	r4, r4, r5
 80257ce:	10a4      	asrs	r4, r4, #2
 80257d0:	2600      	movs	r6, #0
 80257d2:	42a6      	cmp	r6, r4
 80257d4:	d105      	bne.n	80257e2 <__libc_init_array+0x2e>
 80257d6:	bd70      	pop	{r4, r5, r6, pc}
 80257d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80257dc:	4798      	blx	r3
 80257de:	3601      	adds	r6, #1
 80257e0:	e7ee      	b.n	80257c0 <__libc_init_array+0xc>
 80257e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80257e6:	4798      	blx	r3
 80257e8:	3601      	adds	r6, #1
 80257ea:	e7f2      	b.n	80257d2 <__libc_init_array+0x1e>
 80257ec:	0802d0c4 	.word	0x0802d0c4
 80257f0:	0802d0c4 	.word	0x0802d0c4
 80257f4:	0802d0c4 	.word	0x0802d0c4
 80257f8:	0802d0c8 	.word	0x0802d0c8

080257fc <malloc>:
 80257fc:	4b02      	ldr	r3, [pc, #8]	; (8025808 <malloc+0xc>)
 80257fe:	4601      	mov	r1, r0
 8025800:	6818      	ldr	r0, [r3, #0]
 8025802:	f000 b8b7 	b.w	8025974 <_malloc_r>
 8025806:	bf00      	nop
 8025808:	20000340 	.word	0x20000340

0802580c <free>:
 802580c:	4b02      	ldr	r3, [pc, #8]	; (8025818 <free+0xc>)
 802580e:	4601      	mov	r1, r0
 8025810:	6818      	ldr	r0, [r3, #0]
 8025812:	f000 b843 	b.w	802589c <_free_r>
 8025816:	bf00      	nop
 8025818:	20000340 	.word	0x20000340

0802581c <memcmp>:
 802581c:	b510      	push	{r4, lr}
 802581e:	3901      	subs	r1, #1
 8025820:	4402      	add	r2, r0
 8025822:	4290      	cmp	r0, r2
 8025824:	d101      	bne.n	802582a <memcmp+0xe>
 8025826:	2000      	movs	r0, #0
 8025828:	e005      	b.n	8025836 <memcmp+0x1a>
 802582a:	7803      	ldrb	r3, [r0, #0]
 802582c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025830:	42a3      	cmp	r3, r4
 8025832:	d001      	beq.n	8025838 <memcmp+0x1c>
 8025834:	1b18      	subs	r0, r3, r4
 8025836:	bd10      	pop	{r4, pc}
 8025838:	3001      	adds	r0, #1
 802583a:	e7f2      	b.n	8025822 <memcmp+0x6>

0802583c <memcpy>:
 802583c:	440a      	add	r2, r1
 802583e:	4291      	cmp	r1, r2
 8025840:	f100 33ff 	add.w	r3, r0, #4294967295
 8025844:	d100      	bne.n	8025848 <memcpy+0xc>
 8025846:	4770      	bx	lr
 8025848:	b510      	push	{r4, lr}
 802584a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802584e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025852:	4291      	cmp	r1, r2
 8025854:	d1f9      	bne.n	802584a <memcpy+0xe>
 8025856:	bd10      	pop	{r4, pc}

08025858 <memmove>:
 8025858:	4288      	cmp	r0, r1
 802585a:	b510      	push	{r4, lr}
 802585c:	eb01 0402 	add.w	r4, r1, r2
 8025860:	d902      	bls.n	8025868 <memmove+0x10>
 8025862:	4284      	cmp	r4, r0
 8025864:	4623      	mov	r3, r4
 8025866:	d807      	bhi.n	8025878 <memmove+0x20>
 8025868:	1e43      	subs	r3, r0, #1
 802586a:	42a1      	cmp	r1, r4
 802586c:	d008      	beq.n	8025880 <memmove+0x28>
 802586e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025876:	e7f8      	b.n	802586a <memmove+0x12>
 8025878:	4402      	add	r2, r0
 802587a:	4601      	mov	r1, r0
 802587c:	428a      	cmp	r2, r1
 802587e:	d100      	bne.n	8025882 <memmove+0x2a>
 8025880:	bd10      	pop	{r4, pc}
 8025882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802588a:	e7f7      	b.n	802587c <memmove+0x24>

0802588c <memset>:
 802588c:	4402      	add	r2, r0
 802588e:	4603      	mov	r3, r0
 8025890:	4293      	cmp	r3, r2
 8025892:	d100      	bne.n	8025896 <memset+0xa>
 8025894:	4770      	bx	lr
 8025896:	f803 1b01 	strb.w	r1, [r3], #1
 802589a:	e7f9      	b.n	8025890 <memset+0x4>

0802589c <_free_r>:
 802589c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802589e:	2900      	cmp	r1, #0
 80258a0:	d044      	beq.n	802592c <_free_r+0x90>
 80258a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80258a6:	9001      	str	r0, [sp, #4]
 80258a8:	2b00      	cmp	r3, #0
 80258aa:	f1a1 0404 	sub.w	r4, r1, #4
 80258ae:	bfb8      	it	lt
 80258b0:	18e4      	addlt	r4, r4, r3
 80258b2:	f000 fdbb 	bl	802642c <__malloc_lock>
 80258b6:	4a1e      	ldr	r2, [pc, #120]	; (8025930 <_free_r+0x94>)
 80258b8:	9801      	ldr	r0, [sp, #4]
 80258ba:	6813      	ldr	r3, [r2, #0]
 80258bc:	b933      	cbnz	r3, 80258cc <_free_r+0x30>
 80258be:	6063      	str	r3, [r4, #4]
 80258c0:	6014      	str	r4, [r2, #0]
 80258c2:	b003      	add	sp, #12
 80258c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80258c8:	f000 bdb6 	b.w	8026438 <__malloc_unlock>
 80258cc:	42a3      	cmp	r3, r4
 80258ce:	d908      	bls.n	80258e2 <_free_r+0x46>
 80258d0:	6825      	ldr	r5, [r4, #0]
 80258d2:	1961      	adds	r1, r4, r5
 80258d4:	428b      	cmp	r3, r1
 80258d6:	bf01      	itttt	eq
 80258d8:	6819      	ldreq	r1, [r3, #0]
 80258da:	685b      	ldreq	r3, [r3, #4]
 80258dc:	1949      	addeq	r1, r1, r5
 80258de:	6021      	streq	r1, [r4, #0]
 80258e0:	e7ed      	b.n	80258be <_free_r+0x22>
 80258e2:	461a      	mov	r2, r3
 80258e4:	685b      	ldr	r3, [r3, #4]
 80258e6:	b10b      	cbz	r3, 80258ec <_free_r+0x50>
 80258e8:	42a3      	cmp	r3, r4
 80258ea:	d9fa      	bls.n	80258e2 <_free_r+0x46>
 80258ec:	6811      	ldr	r1, [r2, #0]
 80258ee:	1855      	adds	r5, r2, r1
 80258f0:	42a5      	cmp	r5, r4
 80258f2:	d10b      	bne.n	802590c <_free_r+0x70>
 80258f4:	6824      	ldr	r4, [r4, #0]
 80258f6:	4421      	add	r1, r4
 80258f8:	1854      	adds	r4, r2, r1
 80258fa:	42a3      	cmp	r3, r4
 80258fc:	6011      	str	r1, [r2, #0]
 80258fe:	d1e0      	bne.n	80258c2 <_free_r+0x26>
 8025900:	681c      	ldr	r4, [r3, #0]
 8025902:	685b      	ldr	r3, [r3, #4]
 8025904:	6053      	str	r3, [r2, #4]
 8025906:	4421      	add	r1, r4
 8025908:	6011      	str	r1, [r2, #0]
 802590a:	e7da      	b.n	80258c2 <_free_r+0x26>
 802590c:	d902      	bls.n	8025914 <_free_r+0x78>
 802590e:	230c      	movs	r3, #12
 8025910:	6003      	str	r3, [r0, #0]
 8025912:	e7d6      	b.n	80258c2 <_free_r+0x26>
 8025914:	6825      	ldr	r5, [r4, #0]
 8025916:	1961      	adds	r1, r4, r5
 8025918:	428b      	cmp	r3, r1
 802591a:	bf04      	itt	eq
 802591c:	6819      	ldreq	r1, [r3, #0]
 802591e:	685b      	ldreq	r3, [r3, #4]
 8025920:	6063      	str	r3, [r4, #4]
 8025922:	bf04      	itt	eq
 8025924:	1949      	addeq	r1, r1, r5
 8025926:	6021      	streq	r1, [r4, #0]
 8025928:	6054      	str	r4, [r2, #4]
 802592a:	e7ca      	b.n	80258c2 <_free_r+0x26>
 802592c:	b003      	add	sp, #12
 802592e:	bd30      	pop	{r4, r5, pc}
 8025930:	200161c8 	.word	0x200161c8

08025934 <sbrk_aligned>:
 8025934:	b570      	push	{r4, r5, r6, lr}
 8025936:	4e0e      	ldr	r6, [pc, #56]	; (8025970 <sbrk_aligned+0x3c>)
 8025938:	460c      	mov	r4, r1
 802593a:	6831      	ldr	r1, [r6, #0]
 802593c:	4605      	mov	r5, r0
 802593e:	b911      	cbnz	r1, 8025946 <sbrk_aligned+0x12>
 8025940:	f000 f96e 	bl	8025c20 <_sbrk_r>
 8025944:	6030      	str	r0, [r6, #0]
 8025946:	4621      	mov	r1, r4
 8025948:	4628      	mov	r0, r5
 802594a:	f000 f969 	bl	8025c20 <_sbrk_r>
 802594e:	1c43      	adds	r3, r0, #1
 8025950:	d00a      	beq.n	8025968 <sbrk_aligned+0x34>
 8025952:	1cc4      	adds	r4, r0, #3
 8025954:	f024 0403 	bic.w	r4, r4, #3
 8025958:	42a0      	cmp	r0, r4
 802595a:	d007      	beq.n	802596c <sbrk_aligned+0x38>
 802595c:	1a21      	subs	r1, r4, r0
 802595e:	4628      	mov	r0, r5
 8025960:	f000 f95e 	bl	8025c20 <_sbrk_r>
 8025964:	3001      	adds	r0, #1
 8025966:	d101      	bne.n	802596c <sbrk_aligned+0x38>
 8025968:	f04f 34ff 	mov.w	r4, #4294967295
 802596c:	4620      	mov	r0, r4
 802596e:	bd70      	pop	{r4, r5, r6, pc}
 8025970:	200161cc 	.word	0x200161cc

08025974 <_malloc_r>:
 8025974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025978:	1ccd      	adds	r5, r1, #3
 802597a:	f025 0503 	bic.w	r5, r5, #3
 802597e:	3508      	adds	r5, #8
 8025980:	2d0c      	cmp	r5, #12
 8025982:	bf38      	it	cc
 8025984:	250c      	movcc	r5, #12
 8025986:	2d00      	cmp	r5, #0
 8025988:	4607      	mov	r7, r0
 802598a:	db01      	blt.n	8025990 <_malloc_r+0x1c>
 802598c:	42a9      	cmp	r1, r5
 802598e:	d905      	bls.n	802599c <_malloc_r+0x28>
 8025990:	230c      	movs	r3, #12
 8025992:	603b      	str	r3, [r7, #0]
 8025994:	2600      	movs	r6, #0
 8025996:	4630      	mov	r0, r6
 8025998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802599c:	4e2e      	ldr	r6, [pc, #184]	; (8025a58 <_malloc_r+0xe4>)
 802599e:	f000 fd45 	bl	802642c <__malloc_lock>
 80259a2:	6833      	ldr	r3, [r6, #0]
 80259a4:	461c      	mov	r4, r3
 80259a6:	bb34      	cbnz	r4, 80259f6 <_malloc_r+0x82>
 80259a8:	4629      	mov	r1, r5
 80259aa:	4638      	mov	r0, r7
 80259ac:	f7ff ffc2 	bl	8025934 <sbrk_aligned>
 80259b0:	1c43      	adds	r3, r0, #1
 80259b2:	4604      	mov	r4, r0
 80259b4:	d14d      	bne.n	8025a52 <_malloc_r+0xde>
 80259b6:	6834      	ldr	r4, [r6, #0]
 80259b8:	4626      	mov	r6, r4
 80259ba:	2e00      	cmp	r6, #0
 80259bc:	d140      	bne.n	8025a40 <_malloc_r+0xcc>
 80259be:	6823      	ldr	r3, [r4, #0]
 80259c0:	4631      	mov	r1, r6
 80259c2:	4638      	mov	r0, r7
 80259c4:	eb04 0803 	add.w	r8, r4, r3
 80259c8:	f000 f92a 	bl	8025c20 <_sbrk_r>
 80259cc:	4580      	cmp	r8, r0
 80259ce:	d13a      	bne.n	8025a46 <_malloc_r+0xd2>
 80259d0:	6821      	ldr	r1, [r4, #0]
 80259d2:	3503      	adds	r5, #3
 80259d4:	1a6d      	subs	r5, r5, r1
 80259d6:	f025 0503 	bic.w	r5, r5, #3
 80259da:	3508      	adds	r5, #8
 80259dc:	2d0c      	cmp	r5, #12
 80259de:	bf38      	it	cc
 80259e0:	250c      	movcc	r5, #12
 80259e2:	4629      	mov	r1, r5
 80259e4:	4638      	mov	r0, r7
 80259e6:	f7ff ffa5 	bl	8025934 <sbrk_aligned>
 80259ea:	3001      	adds	r0, #1
 80259ec:	d02b      	beq.n	8025a46 <_malloc_r+0xd2>
 80259ee:	6823      	ldr	r3, [r4, #0]
 80259f0:	442b      	add	r3, r5
 80259f2:	6023      	str	r3, [r4, #0]
 80259f4:	e00e      	b.n	8025a14 <_malloc_r+0xa0>
 80259f6:	6822      	ldr	r2, [r4, #0]
 80259f8:	1b52      	subs	r2, r2, r5
 80259fa:	d41e      	bmi.n	8025a3a <_malloc_r+0xc6>
 80259fc:	2a0b      	cmp	r2, #11
 80259fe:	d916      	bls.n	8025a2e <_malloc_r+0xba>
 8025a00:	1961      	adds	r1, r4, r5
 8025a02:	42a3      	cmp	r3, r4
 8025a04:	6025      	str	r5, [r4, #0]
 8025a06:	bf18      	it	ne
 8025a08:	6059      	strne	r1, [r3, #4]
 8025a0a:	6863      	ldr	r3, [r4, #4]
 8025a0c:	bf08      	it	eq
 8025a0e:	6031      	streq	r1, [r6, #0]
 8025a10:	5162      	str	r2, [r4, r5]
 8025a12:	604b      	str	r3, [r1, #4]
 8025a14:	4638      	mov	r0, r7
 8025a16:	f104 060b 	add.w	r6, r4, #11
 8025a1a:	f000 fd0d 	bl	8026438 <__malloc_unlock>
 8025a1e:	f026 0607 	bic.w	r6, r6, #7
 8025a22:	1d23      	adds	r3, r4, #4
 8025a24:	1af2      	subs	r2, r6, r3
 8025a26:	d0b6      	beq.n	8025996 <_malloc_r+0x22>
 8025a28:	1b9b      	subs	r3, r3, r6
 8025a2a:	50a3      	str	r3, [r4, r2]
 8025a2c:	e7b3      	b.n	8025996 <_malloc_r+0x22>
 8025a2e:	6862      	ldr	r2, [r4, #4]
 8025a30:	42a3      	cmp	r3, r4
 8025a32:	bf0c      	ite	eq
 8025a34:	6032      	streq	r2, [r6, #0]
 8025a36:	605a      	strne	r2, [r3, #4]
 8025a38:	e7ec      	b.n	8025a14 <_malloc_r+0xa0>
 8025a3a:	4623      	mov	r3, r4
 8025a3c:	6864      	ldr	r4, [r4, #4]
 8025a3e:	e7b2      	b.n	80259a6 <_malloc_r+0x32>
 8025a40:	4634      	mov	r4, r6
 8025a42:	6876      	ldr	r6, [r6, #4]
 8025a44:	e7b9      	b.n	80259ba <_malloc_r+0x46>
 8025a46:	230c      	movs	r3, #12
 8025a48:	603b      	str	r3, [r7, #0]
 8025a4a:	4638      	mov	r0, r7
 8025a4c:	f000 fcf4 	bl	8026438 <__malloc_unlock>
 8025a50:	e7a1      	b.n	8025996 <_malloc_r+0x22>
 8025a52:	6025      	str	r5, [r4, #0]
 8025a54:	e7de      	b.n	8025a14 <_malloc_r+0xa0>
 8025a56:	bf00      	nop
 8025a58:	200161c8 	.word	0x200161c8

08025a5c <iprintf>:
 8025a5c:	b40f      	push	{r0, r1, r2, r3}
 8025a5e:	4b0a      	ldr	r3, [pc, #40]	; (8025a88 <iprintf+0x2c>)
 8025a60:	b513      	push	{r0, r1, r4, lr}
 8025a62:	681c      	ldr	r4, [r3, #0]
 8025a64:	b124      	cbz	r4, 8025a70 <iprintf+0x14>
 8025a66:	69a3      	ldr	r3, [r4, #24]
 8025a68:	b913      	cbnz	r3, 8025a70 <iprintf+0x14>
 8025a6a:	4620      	mov	r0, r4
 8025a6c:	f000 fbc6 	bl	80261fc <__sinit>
 8025a70:	ab05      	add	r3, sp, #20
 8025a72:	9a04      	ldr	r2, [sp, #16]
 8025a74:	68a1      	ldr	r1, [r4, #8]
 8025a76:	9301      	str	r3, [sp, #4]
 8025a78:	4620      	mov	r0, r4
 8025a7a:	f000 fe69 	bl	8026750 <_vfiprintf_r>
 8025a7e:	b002      	add	sp, #8
 8025a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025a84:	b004      	add	sp, #16
 8025a86:	4770      	bx	lr
 8025a88:	20000340 	.word	0x20000340

08025a8c <putchar>:
 8025a8c:	4b09      	ldr	r3, [pc, #36]	; (8025ab4 <putchar+0x28>)
 8025a8e:	b513      	push	{r0, r1, r4, lr}
 8025a90:	681c      	ldr	r4, [r3, #0]
 8025a92:	4601      	mov	r1, r0
 8025a94:	b134      	cbz	r4, 8025aa4 <putchar+0x18>
 8025a96:	69a3      	ldr	r3, [r4, #24]
 8025a98:	b923      	cbnz	r3, 8025aa4 <putchar+0x18>
 8025a9a:	9001      	str	r0, [sp, #4]
 8025a9c:	4620      	mov	r0, r4
 8025a9e:	f000 fbad 	bl	80261fc <__sinit>
 8025aa2:	9901      	ldr	r1, [sp, #4]
 8025aa4:	68a2      	ldr	r2, [r4, #8]
 8025aa6:	4620      	mov	r0, r4
 8025aa8:	b002      	add	sp, #8
 8025aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025aae:	f001 b913 	b.w	8026cd8 <_putc_r>
 8025ab2:	bf00      	nop
 8025ab4:	20000340 	.word	0x20000340

08025ab8 <_puts_r>:
 8025ab8:	b570      	push	{r4, r5, r6, lr}
 8025aba:	460e      	mov	r6, r1
 8025abc:	4605      	mov	r5, r0
 8025abe:	b118      	cbz	r0, 8025ac8 <_puts_r+0x10>
 8025ac0:	6983      	ldr	r3, [r0, #24]
 8025ac2:	b90b      	cbnz	r3, 8025ac8 <_puts_r+0x10>
 8025ac4:	f000 fb9a 	bl	80261fc <__sinit>
 8025ac8:	69ab      	ldr	r3, [r5, #24]
 8025aca:	68ac      	ldr	r4, [r5, #8]
 8025acc:	b913      	cbnz	r3, 8025ad4 <_puts_r+0x1c>
 8025ace:	4628      	mov	r0, r5
 8025ad0:	f000 fb94 	bl	80261fc <__sinit>
 8025ad4:	4b2c      	ldr	r3, [pc, #176]	; (8025b88 <_puts_r+0xd0>)
 8025ad6:	429c      	cmp	r4, r3
 8025ad8:	d120      	bne.n	8025b1c <_puts_r+0x64>
 8025ada:	686c      	ldr	r4, [r5, #4]
 8025adc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025ade:	07db      	lsls	r3, r3, #31
 8025ae0:	d405      	bmi.n	8025aee <_puts_r+0x36>
 8025ae2:	89a3      	ldrh	r3, [r4, #12]
 8025ae4:	0598      	lsls	r0, r3, #22
 8025ae6:	d402      	bmi.n	8025aee <_puts_r+0x36>
 8025ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025aea:	f000 fc37 	bl	802635c <__retarget_lock_acquire_recursive>
 8025aee:	89a3      	ldrh	r3, [r4, #12]
 8025af0:	0719      	lsls	r1, r3, #28
 8025af2:	d51d      	bpl.n	8025b30 <_puts_r+0x78>
 8025af4:	6923      	ldr	r3, [r4, #16]
 8025af6:	b1db      	cbz	r3, 8025b30 <_puts_r+0x78>
 8025af8:	3e01      	subs	r6, #1
 8025afa:	68a3      	ldr	r3, [r4, #8]
 8025afc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8025b00:	3b01      	subs	r3, #1
 8025b02:	60a3      	str	r3, [r4, #8]
 8025b04:	bb39      	cbnz	r1, 8025b56 <_puts_r+0x9e>
 8025b06:	2b00      	cmp	r3, #0
 8025b08:	da38      	bge.n	8025b7c <_puts_r+0xc4>
 8025b0a:	4622      	mov	r2, r4
 8025b0c:	210a      	movs	r1, #10
 8025b0e:	4628      	mov	r0, r5
 8025b10:	f000 f97c 	bl	8025e0c <__swbuf_r>
 8025b14:	3001      	adds	r0, #1
 8025b16:	d011      	beq.n	8025b3c <_puts_r+0x84>
 8025b18:	250a      	movs	r5, #10
 8025b1a:	e011      	b.n	8025b40 <_puts_r+0x88>
 8025b1c:	4b1b      	ldr	r3, [pc, #108]	; (8025b8c <_puts_r+0xd4>)
 8025b1e:	429c      	cmp	r4, r3
 8025b20:	d101      	bne.n	8025b26 <_puts_r+0x6e>
 8025b22:	68ac      	ldr	r4, [r5, #8]
 8025b24:	e7da      	b.n	8025adc <_puts_r+0x24>
 8025b26:	4b1a      	ldr	r3, [pc, #104]	; (8025b90 <_puts_r+0xd8>)
 8025b28:	429c      	cmp	r4, r3
 8025b2a:	bf08      	it	eq
 8025b2c:	68ec      	ldreq	r4, [r5, #12]
 8025b2e:	e7d5      	b.n	8025adc <_puts_r+0x24>
 8025b30:	4621      	mov	r1, r4
 8025b32:	4628      	mov	r0, r5
 8025b34:	f000 f9bc 	bl	8025eb0 <__swsetup_r>
 8025b38:	2800      	cmp	r0, #0
 8025b3a:	d0dd      	beq.n	8025af8 <_puts_r+0x40>
 8025b3c:	f04f 35ff 	mov.w	r5, #4294967295
 8025b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025b42:	07da      	lsls	r2, r3, #31
 8025b44:	d405      	bmi.n	8025b52 <_puts_r+0x9a>
 8025b46:	89a3      	ldrh	r3, [r4, #12]
 8025b48:	059b      	lsls	r3, r3, #22
 8025b4a:	d402      	bmi.n	8025b52 <_puts_r+0x9a>
 8025b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025b4e:	f000 fc06 	bl	802635e <__retarget_lock_release_recursive>
 8025b52:	4628      	mov	r0, r5
 8025b54:	bd70      	pop	{r4, r5, r6, pc}
 8025b56:	2b00      	cmp	r3, #0
 8025b58:	da04      	bge.n	8025b64 <_puts_r+0xac>
 8025b5a:	69a2      	ldr	r2, [r4, #24]
 8025b5c:	429a      	cmp	r2, r3
 8025b5e:	dc06      	bgt.n	8025b6e <_puts_r+0xb6>
 8025b60:	290a      	cmp	r1, #10
 8025b62:	d004      	beq.n	8025b6e <_puts_r+0xb6>
 8025b64:	6823      	ldr	r3, [r4, #0]
 8025b66:	1c5a      	adds	r2, r3, #1
 8025b68:	6022      	str	r2, [r4, #0]
 8025b6a:	7019      	strb	r1, [r3, #0]
 8025b6c:	e7c5      	b.n	8025afa <_puts_r+0x42>
 8025b6e:	4622      	mov	r2, r4
 8025b70:	4628      	mov	r0, r5
 8025b72:	f000 f94b 	bl	8025e0c <__swbuf_r>
 8025b76:	3001      	adds	r0, #1
 8025b78:	d1bf      	bne.n	8025afa <_puts_r+0x42>
 8025b7a:	e7df      	b.n	8025b3c <_puts_r+0x84>
 8025b7c:	6823      	ldr	r3, [r4, #0]
 8025b7e:	250a      	movs	r5, #10
 8025b80:	1c5a      	adds	r2, r3, #1
 8025b82:	6022      	str	r2, [r4, #0]
 8025b84:	701d      	strb	r5, [r3, #0]
 8025b86:	e7db      	b.n	8025b40 <_puts_r+0x88>
 8025b88:	0802d048 	.word	0x0802d048
 8025b8c:	0802d068 	.word	0x0802d068
 8025b90:	0802d028 	.word	0x0802d028

08025b94 <puts>:
 8025b94:	4b02      	ldr	r3, [pc, #8]	; (8025ba0 <puts+0xc>)
 8025b96:	4601      	mov	r1, r0
 8025b98:	6818      	ldr	r0, [r3, #0]
 8025b9a:	f7ff bf8d 	b.w	8025ab8 <_puts_r>
 8025b9e:	bf00      	nop
 8025ba0:	20000340 	.word	0x20000340

08025ba4 <rand>:
 8025ba4:	4b16      	ldr	r3, [pc, #88]	; (8025c00 <rand+0x5c>)
 8025ba6:	b510      	push	{r4, lr}
 8025ba8:	681c      	ldr	r4, [r3, #0]
 8025baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8025bac:	b9b3      	cbnz	r3, 8025bdc <rand+0x38>
 8025bae:	2018      	movs	r0, #24
 8025bb0:	f7ff fe24 	bl	80257fc <malloc>
 8025bb4:	63a0      	str	r0, [r4, #56]	; 0x38
 8025bb6:	b928      	cbnz	r0, 8025bc4 <rand+0x20>
 8025bb8:	4602      	mov	r2, r0
 8025bba:	4b12      	ldr	r3, [pc, #72]	; (8025c04 <rand+0x60>)
 8025bbc:	4812      	ldr	r0, [pc, #72]	; (8025c08 <rand+0x64>)
 8025bbe:	214e      	movs	r1, #78	; 0x4e
 8025bc0:	f000 f9e4 	bl	8025f8c <__assert_func>
 8025bc4:	4a11      	ldr	r2, [pc, #68]	; (8025c0c <rand+0x68>)
 8025bc6:	4b12      	ldr	r3, [pc, #72]	; (8025c10 <rand+0x6c>)
 8025bc8:	e9c0 2300 	strd	r2, r3, [r0]
 8025bcc:	4b11      	ldr	r3, [pc, #68]	; (8025c14 <rand+0x70>)
 8025bce:	6083      	str	r3, [r0, #8]
 8025bd0:	230b      	movs	r3, #11
 8025bd2:	8183      	strh	r3, [r0, #12]
 8025bd4:	2201      	movs	r2, #1
 8025bd6:	2300      	movs	r3, #0
 8025bd8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8025bdc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8025bde:	4a0e      	ldr	r2, [pc, #56]	; (8025c18 <rand+0x74>)
 8025be0:	6920      	ldr	r0, [r4, #16]
 8025be2:	6963      	ldr	r3, [r4, #20]
 8025be4:	490d      	ldr	r1, [pc, #52]	; (8025c1c <rand+0x78>)
 8025be6:	4342      	muls	r2, r0
 8025be8:	fb01 2203 	mla	r2, r1, r3, r2
 8025bec:	fba0 0101 	umull	r0, r1, r0, r1
 8025bf0:	1c43      	adds	r3, r0, #1
 8025bf2:	eb42 0001 	adc.w	r0, r2, r1
 8025bf6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8025bfa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8025bfe:	bd10      	pop	{r4, pc}
 8025c00:	20000340 	.word	0x20000340
 8025c04:	0802cf78 	.word	0x0802cf78
 8025c08:	0802cf8f 	.word	0x0802cf8f
 8025c0c:	abcd330e 	.word	0xabcd330e
 8025c10:	e66d1234 	.word	0xe66d1234
 8025c14:	0005deec 	.word	0x0005deec
 8025c18:	5851f42d 	.word	0x5851f42d
 8025c1c:	4c957f2d 	.word	0x4c957f2d

08025c20 <_sbrk_r>:
 8025c20:	b538      	push	{r3, r4, r5, lr}
 8025c22:	4d06      	ldr	r5, [pc, #24]	; (8025c3c <_sbrk_r+0x1c>)
 8025c24:	2300      	movs	r3, #0
 8025c26:	4604      	mov	r4, r0
 8025c28:	4608      	mov	r0, r1
 8025c2a:	602b      	str	r3, [r5, #0]
 8025c2c:	f7f2 f934 	bl	8017e98 <_sbrk>
 8025c30:	1c43      	adds	r3, r0, #1
 8025c32:	d102      	bne.n	8025c3a <_sbrk_r+0x1a>
 8025c34:	682b      	ldr	r3, [r5, #0]
 8025c36:	b103      	cbz	r3, 8025c3a <_sbrk_r+0x1a>
 8025c38:	6023      	str	r3, [r4, #0]
 8025c3a:	bd38      	pop	{r3, r4, r5, pc}
 8025c3c:	200161d0 	.word	0x200161d0

08025c40 <setvbuf>:
 8025c40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8025c44:	461d      	mov	r5, r3
 8025c46:	4b5d      	ldr	r3, [pc, #372]	; (8025dbc <setvbuf+0x17c>)
 8025c48:	681f      	ldr	r7, [r3, #0]
 8025c4a:	4604      	mov	r4, r0
 8025c4c:	460e      	mov	r6, r1
 8025c4e:	4690      	mov	r8, r2
 8025c50:	b127      	cbz	r7, 8025c5c <setvbuf+0x1c>
 8025c52:	69bb      	ldr	r3, [r7, #24]
 8025c54:	b913      	cbnz	r3, 8025c5c <setvbuf+0x1c>
 8025c56:	4638      	mov	r0, r7
 8025c58:	f000 fad0 	bl	80261fc <__sinit>
 8025c5c:	4b58      	ldr	r3, [pc, #352]	; (8025dc0 <setvbuf+0x180>)
 8025c5e:	429c      	cmp	r4, r3
 8025c60:	d167      	bne.n	8025d32 <setvbuf+0xf2>
 8025c62:	687c      	ldr	r4, [r7, #4]
 8025c64:	f1b8 0f02 	cmp.w	r8, #2
 8025c68:	d006      	beq.n	8025c78 <setvbuf+0x38>
 8025c6a:	f1b8 0f01 	cmp.w	r8, #1
 8025c6e:	f200 809f 	bhi.w	8025db0 <setvbuf+0x170>
 8025c72:	2d00      	cmp	r5, #0
 8025c74:	f2c0 809c 	blt.w	8025db0 <setvbuf+0x170>
 8025c78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025c7a:	07db      	lsls	r3, r3, #31
 8025c7c:	d405      	bmi.n	8025c8a <setvbuf+0x4a>
 8025c7e:	89a3      	ldrh	r3, [r4, #12]
 8025c80:	0598      	lsls	r0, r3, #22
 8025c82:	d402      	bmi.n	8025c8a <setvbuf+0x4a>
 8025c84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025c86:	f000 fb69 	bl	802635c <__retarget_lock_acquire_recursive>
 8025c8a:	4621      	mov	r1, r4
 8025c8c:	4638      	mov	r0, r7
 8025c8e:	f000 fa21 	bl	80260d4 <_fflush_r>
 8025c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025c94:	b141      	cbz	r1, 8025ca8 <setvbuf+0x68>
 8025c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025c9a:	4299      	cmp	r1, r3
 8025c9c:	d002      	beq.n	8025ca4 <setvbuf+0x64>
 8025c9e:	4638      	mov	r0, r7
 8025ca0:	f7ff fdfc 	bl	802589c <_free_r>
 8025ca4:	2300      	movs	r3, #0
 8025ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8025ca8:	2300      	movs	r3, #0
 8025caa:	61a3      	str	r3, [r4, #24]
 8025cac:	6063      	str	r3, [r4, #4]
 8025cae:	89a3      	ldrh	r3, [r4, #12]
 8025cb0:	0619      	lsls	r1, r3, #24
 8025cb2:	d503      	bpl.n	8025cbc <setvbuf+0x7c>
 8025cb4:	6921      	ldr	r1, [r4, #16]
 8025cb6:	4638      	mov	r0, r7
 8025cb8:	f7ff fdf0 	bl	802589c <_free_r>
 8025cbc:	89a3      	ldrh	r3, [r4, #12]
 8025cbe:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8025cc2:	f023 0303 	bic.w	r3, r3, #3
 8025cc6:	f1b8 0f02 	cmp.w	r8, #2
 8025cca:	81a3      	strh	r3, [r4, #12]
 8025ccc:	d06c      	beq.n	8025da8 <setvbuf+0x168>
 8025cce:	ab01      	add	r3, sp, #4
 8025cd0:	466a      	mov	r2, sp
 8025cd2:	4621      	mov	r1, r4
 8025cd4:	4638      	mov	r0, r7
 8025cd6:	f000 fb43 	bl	8026360 <__swhatbuf_r>
 8025cda:	89a3      	ldrh	r3, [r4, #12]
 8025cdc:	4318      	orrs	r0, r3
 8025cde:	81a0      	strh	r0, [r4, #12]
 8025ce0:	2d00      	cmp	r5, #0
 8025ce2:	d130      	bne.n	8025d46 <setvbuf+0x106>
 8025ce4:	9d00      	ldr	r5, [sp, #0]
 8025ce6:	4628      	mov	r0, r5
 8025ce8:	f7ff fd88 	bl	80257fc <malloc>
 8025cec:	4606      	mov	r6, r0
 8025cee:	2800      	cmp	r0, #0
 8025cf0:	d155      	bne.n	8025d9e <setvbuf+0x15e>
 8025cf2:	f8dd 9000 	ldr.w	r9, [sp]
 8025cf6:	45a9      	cmp	r9, r5
 8025cf8:	d14a      	bne.n	8025d90 <setvbuf+0x150>
 8025cfa:	f04f 35ff 	mov.w	r5, #4294967295
 8025cfe:	2200      	movs	r2, #0
 8025d00:	60a2      	str	r2, [r4, #8]
 8025d02:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8025d06:	6022      	str	r2, [r4, #0]
 8025d08:	6122      	str	r2, [r4, #16]
 8025d0a:	2201      	movs	r2, #1
 8025d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025d10:	6162      	str	r2, [r4, #20]
 8025d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8025d14:	f043 0302 	orr.w	r3, r3, #2
 8025d18:	07d2      	lsls	r2, r2, #31
 8025d1a:	81a3      	strh	r3, [r4, #12]
 8025d1c:	d405      	bmi.n	8025d2a <setvbuf+0xea>
 8025d1e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8025d22:	d102      	bne.n	8025d2a <setvbuf+0xea>
 8025d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025d26:	f000 fb1a 	bl	802635e <__retarget_lock_release_recursive>
 8025d2a:	4628      	mov	r0, r5
 8025d2c:	b003      	add	sp, #12
 8025d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025d32:	4b24      	ldr	r3, [pc, #144]	; (8025dc4 <setvbuf+0x184>)
 8025d34:	429c      	cmp	r4, r3
 8025d36:	d101      	bne.n	8025d3c <setvbuf+0xfc>
 8025d38:	68bc      	ldr	r4, [r7, #8]
 8025d3a:	e793      	b.n	8025c64 <setvbuf+0x24>
 8025d3c:	4b22      	ldr	r3, [pc, #136]	; (8025dc8 <setvbuf+0x188>)
 8025d3e:	429c      	cmp	r4, r3
 8025d40:	bf08      	it	eq
 8025d42:	68fc      	ldreq	r4, [r7, #12]
 8025d44:	e78e      	b.n	8025c64 <setvbuf+0x24>
 8025d46:	2e00      	cmp	r6, #0
 8025d48:	d0cd      	beq.n	8025ce6 <setvbuf+0xa6>
 8025d4a:	69bb      	ldr	r3, [r7, #24]
 8025d4c:	b913      	cbnz	r3, 8025d54 <setvbuf+0x114>
 8025d4e:	4638      	mov	r0, r7
 8025d50:	f000 fa54 	bl	80261fc <__sinit>
 8025d54:	f1b8 0f01 	cmp.w	r8, #1
 8025d58:	bf08      	it	eq
 8025d5a:	89a3      	ldrheq	r3, [r4, #12]
 8025d5c:	6026      	str	r6, [r4, #0]
 8025d5e:	bf04      	itt	eq
 8025d60:	f043 0301 	orreq.w	r3, r3, #1
 8025d64:	81a3      	strheq	r3, [r4, #12]
 8025d66:	89a2      	ldrh	r2, [r4, #12]
 8025d68:	f012 0308 	ands.w	r3, r2, #8
 8025d6c:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8025d70:	d01c      	beq.n	8025dac <setvbuf+0x16c>
 8025d72:	07d3      	lsls	r3, r2, #31
 8025d74:	bf41      	itttt	mi
 8025d76:	2300      	movmi	r3, #0
 8025d78:	426d      	negmi	r5, r5
 8025d7a:	60a3      	strmi	r3, [r4, #8]
 8025d7c:	61a5      	strmi	r5, [r4, #24]
 8025d7e:	bf58      	it	pl
 8025d80:	60a5      	strpl	r5, [r4, #8]
 8025d82:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8025d84:	f015 0501 	ands.w	r5, r5, #1
 8025d88:	d115      	bne.n	8025db6 <setvbuf+0x176>
 8025d8a:	f412 7f00 	tst.w	r2, #512	; 0x200
 8025d8e:	e7c8      	b.n	8025d22 <setvbuf+0xe2>
 8025d90:	4648      	mov	r0, r9
 8025d92:	f7ff fd33 	bl	80257fc <malloc>
 8025d96:	4606      	mov	r6, r0
 8025d98:	2800      	cmp	r0, #0
 8025d9a:	d0ae      	beq.n	8025cfa <setvbuf+0xba>
 8025d9c:	464d      	mov	r5, r9
 8025d9e:	89a3      	ldrh	r3, [r4, #12]
 8025da0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025da4:	81a3      	strh	r3, [r4, #12]
 8025da6:	e7d0      	b.n	8025d4a <setvbuf+0x10a>
 8025da8:	2500      	movs	r5, #0
 8025daa:	e7a8      	b.n	8025cfe <setvbuf+0xbe>
 8025dac:	60a3      	str	r3, [r4, #8]
 8025dae:	e7e8      	b.n	8025d82 <setvbuf+0x142>
 8025db0:	f04f 35ff 	mov.w	r5, #4294967295
 8025db4:	e7b9      	b.n	8025d2a <setvbuf+0xea>
 8025db6:	2500      	movs	r5, #0
 8025db8:	e7b7      	b.n	8025d2a <setvbuf+0xea>
 8025dba:	bf00      	nop
 8025dbc:	20000340 	.word	0x20000340
 8025dc0:	0802d048 	.word	0x0802d048
 8025dc4:	0802d068 	.word	0x0802d068
 8025dc8:	0802d028 	.word	0x0802d028

08025dcc <siprintf>:
 8025dcc:	b40e      	push	{r1, r2, r3}
 8025dce:	b500      	push	{lr}
 8025dd0:	b09c      	sub	sp, #112	; 0x70
 8025dd2:	ab1d      	add	r3, sp, #116	; 0x74
 8025dd4:	9002      	str	r0, [sp, #8]
 8025dd6:	9006      	str	r0, [sp, #24]
 8025dd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025ddc:	4809      	ldr	r0, [pc, #36]	; (8025e04 <siprintf+0x38>)
 8025dde:	9107      	str	r1, [sp, #28]
 8025de0:	9104      	str	r1, [sp, #16]
 8025de2:	4909      	ldr	r1, [pc, #36]	; (8025e08 <siprintf+0x3c>)
 8025de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8025de8:	9105      	str	r1, [sp, #20]
 8025dea:	6800      	ldr	r0, [r0, #0]
 8025dec:	9301      	str	r3, [sp, #4]
 8025dee:	a902      	add	r1, sp, #8
 8025df0:	f000 fb84 	bl	80264fc <_svfiprintf_r>
 8025df4:	9b02      	ldr	r3, [sp, #8]
 8025df6:	2200      	movs	r2, #0
 8025df8:	701a      	strb	r2, [r3, #0]
 8025dfa:	b01c      	add	sp, #112	; 0x70
 8025dfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8025e00:	b003      	add	sp, #12
 8025e02:	4770      	bx	lr
 8025e04:	20000340 	.word	0x20000340
 8025e08:	ffff0208 	.word	0xffff0208

08025e0c <__swbuf_r>:
 8025e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025e0e:	460e      	mov	r6, r1
 8025e10:	4614      	mov	r4, r2
 8025e12:	4605      	mov	r5, r0
 8025e14:	b118      	cbz	r0, 8025e1e <__swbuf_r+0x12>
 8025e16:	6983      	ldr	r3, [r0, #24]
 8025e18:	b90b      	cbnz	r3, 8025e1e <__swbuf_r+0x12>
 8025e1a:	f000 f9ef 	bl	80261fc <__sinit>
 8025e1e:	4b21      	ldr	r3, [pc, #132]	; (8025ea4 <__swbuf_r+0x98>)
 8025e20:	429c      	cmp	r4, r3
 8025e22:	d12b      	bne.n	8025e7c <__swbuf_r+0x70>
 8025e24:	686c      	ldr	r4, [r5, #4]
 8025e26:	69a3      	ldr	r3, [r4, #24]
 8025e28:	60a3      	str	r3, [r4, #8]
 8025e2a:	89a3      	ldrh	r3, [r4, #12]
 8025e2c:	071a      	lsls	r2, r3, #28
 8025e2e:	d52f      	bpl.n	8025e90 <__swbuf_r+0x84>
 8025e30:	6923      	ldr	r3, [r4, #16]
 8025e32:	b36b      	cbz	r3, 8025e90 <__swbuf_r+0x84>
 8025e34:	6923      	ldr	r3, [r4, #16]
 8025e36:	6820      	ldr	r0, [r4, #0]
 8025e38:	1ac0      	subs	r0, r0, r3
 8025e3a:	6963      	ldr	r3, [r4, #20]
 8025e3c:	b2f6      	uxtb	r6, r6
 8025e3e:	4283      	cmp	r3, r0
 8025e40:	4637      	mov	r7, r6
 8025e42:	dc04      	bgt.n	8025e4e <__swbuf_r+0x42>
 8025e44:	4621      	mov	r1, r4
 8025e46:	4628      	mov	r0, r5
 8025e48:	f000 f944 	bl	80260d4 <_fflush_r>
 8025e4c:	bb30      	cbnz	r0, 8025e9c <__swbuf_r+0x90>
 8025e4e:	68a3      	ldr	r3, [r4, #8]
 8025e50:	3b01      	subs	r3, #1
 8025e52:	60a3      	str	r3, [r4, #8]
 8025e54:	6823      	ldr	r3, [r4, #0]
 8025e56:	1c5a      	adds	r2, r3, #1
 8025e58:	6022      	str	r2, [r4, #0]
 8025e5a:	701e      	strb	r6, [r3, #0]
 8025e5c:	6963      	ldr	r3, [r4, #20]
 8025e5e:	3001      	adds	r0, #1
 8025e60:	4283      	cmp	r3, r0
 8025e62:	d004      	beq.n	8025e6e <__swbuf_r+0x62>
 8025e64:	89a3      	ldrh	r3, [r4, #12]
 8025e66:	07db      	lsls	r3, r3, #31
 8025e68:	d506      	bpl.n	8025e78 <__swbuf_r+0x6c>
 8025e6a:	2e0a      	cmp	r6, #10
 8025e6c:	d104      	bne.n	8025e78 <__swbuf_r+0x6c>
 8025e6e:	4621      	mov	r1, r4
 8025e70:	4628      	mov	r0, r5
 8025e72:	f000 f92f 	bl	80260d4 <_fflush_r>
 8025e76:	b988      	cbnz	r0, 8025e9c <__swbuf_r+0x90>
 8025e78:	4638      	mov	r0, r7
 8025e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025e7c:	4b0a      	ldr	r3, [pc, #40]	; (8025ea8 <__swbuf_r+0x9c>)
 8025e7e:	429c      	cmp	r4, r3
 8025e80:	d101      	bne.n	8025e86 <__swbuf_r+0x7a>
 8025e82:	68ac      	ldr	r4, [r5, #8]
 8025e84:	e7cf      	b.n	8025e26 <__swbuf_r+0x1a>
 8025e86:	4b09      	ldr	r3, [pc, #36]	; (8025eac <__swbuf_r+0xa0>)
 8025e88:	429c      	cmp	r4, r3
 8025e8a:	bf08      	it	eq
 8025e8c:	68ec      	ldreq	r4, [r5, #12]
 8025e8e:	e7ca      	b.n	8025e26 <__swbuf_r+0x1a>
 8025e90:	4621      	mov	r1, r4
 8025e92:	4628      	mov	r0, r5
 8025e94:	f000 f80c 	bl	8025eb0 <__swsetup_r>
 8025e98:	2800      	cmp	r0, #0
 8025e9a:	d0cb      	beq.n	8025e34 <__swbuf_r+0x28>
 8025e9c:	f04f 37ff 	mov.w	r7, #4294967295
 8025ea0:	e7ea      	b.n	8025e78 <__swbuf_r+0x6c>
 8025ea2:	bf00      	nop
 8025ea4:	0802d048 	.word	0x0802d048
 8025ea8:	0802d068 	.word	0x0802d068
 8025eac:	0802d028 	.word	0x0802d028

08025eb0 <__swsetup_r>:
 8025eb0:	4b32      	ldr	r3, [pc, #200]	; (8025f7c <__swsetup_r+0xcc>)
 8025eb2:	b570      	push	{r4, r5, r6, lr}
 8025eb4:	681d      	ldr	r5, [r3, #0]
 8025eb6:	4606      	mov	r6, r0
 8025eb8:	460c      	mov	r4, r1
 8025eba:	b125      	cbz	r5, 8025ec6 <__swsetup_r+0x16>
 8025ebc:	69ab      	ldr	r3, [r5, #24]
 8025ebe:	b913      	cbnz	r3, 8025ec6 <__swsetup_r+0x16>
 8025ec0:	4628      	mov	r0, r5
 8025ec2:	f000 f99b 	bl	80261fc <__sinit>
 8025ec6:	4b2e      	ldr	r3, [pc, #184]	; (8025f80 <__swsetup_r+0xd0>)
 8025ec8:	429c      	cmp	r4, r3
 8025eca:	d10f      	bne.n	8025eec <__swsetup_r+0x3c>
 8025ecc:	686c      	ldr	r4, [r5, #4]
 8025ece:	89a3      	ldrh	r3, [r4, #12]
 8025ed0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025ed4:	0719      	lsls	r1, r3, #28
 8025ed6:	d42c      	bmi.n	8025f32 <__swsetup_r+0x82>
 8025ed8:	06dd      	lsls	r5, r3, #27
 8025eda:	d411      	bmi.n	8025f00 <__swsetup_r+0x50>
 8025edc:	2309      	movs	r3, #9
 8025ede:	6033      	str	r3, [r6, #0]
 8025ee0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025ee4:	81a3      	strh	r3, [r4, #12]
 8025ee6:	f04f 30ff 	mov.w	r0, #4294967295
 8025eea:	e03e      	b.n	8025f6a <__swsetup_r+0xba>
 8025eec:	4b25      	ldr	r3, [pc, #148]	; (8025f84 <__swsetup_r+0xd4>)
 8025eee:	429c      	cmp	r4, r3
 8025ef0:	d101      	bne.n	8025ef6 <__swsetup_r+0x46>
 8025ef2:	68ac      	ldr	r4, [r5, #8]
 8025ef4:	e7eb      	b.n	8025ece <__swsetup_r+0x1e>
 8025ef6:	4b24      	ldr	r3, [pc, #144]	; (8025f88 <__swsetup_r+0xd8>)
 8025ef8:	429c      	cmp	r4, r3
 8025efa:	bf08      	it	eq
 8025efc:	68ec      	ldreq	r4, [r5, #12]
 8025efe:	e7e6      	b.n	8025ece <__swsetup_r+0x1e>
 8025f00:	0758      	lsls	r0, r3, #29
 8025f02:	d512      	bpl.n	8025f2a <__swsetup_r+0x7a>
 8025f04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025f06:	b141      	cbz	r1, 8025f1a <__swsetup_r+0x6a>
 8025f08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025f0c:	4299      	cmp	r1, r3
 8025f0e:	d002      	beq.n	8025f16 <__swsetup_r+0x66>
 8025f10:	4630      	mov	r0, r6
 8025f12:	f7ff fcc3 	bl	802589c <_free_r>
 8025f16:	2300      	movs	r3, #0
 8025f18:	6363      	str	r3, [r4, #52]	; 0x34
 8025f1a:	89a3      	ldrh	r3, [r4, #12]
 8025f1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025f20:	81a3      	strh	r3, [r4, #12]
 8025f22:	2300      	movs	r3, #0
 8025f24:	6063      	str	r3, [r4, #4]
 8025f26:	6923      	ldr	r3, [r4, #16]
 8025f28:	6023      	str	r3, [r4, #0]
 8025f2a:	89a3      	ldrh	r3, [r4, #12]
 8025f2c:	f043 0308 	orr.w	r3, r3, #8
 8025f30:	81a3      	strh	r3, [r4, #12]
 8025f32:	6923      	ldr	r3, [r4, #16]
 8025f34:	b94b      	cbnz	r3, 8025f4a <__swsetup_r+0x9a>
 8025f36:	89a3      	ldrh	r3, [r4, #12]
 8025f38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025f3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025f40:	d003      	beq.n	8025f4a <__swsetup_r+0x9a>
 8025f42:	4621      	mov	r1, r4
 8025f44:	4630      	mov	r0, r6
 8025f46:	f000 fa31 	bl	80263ac <__smakebuf_r>
 8025f4a:	89a0      	ldrh	r0, [r4, #12]
 8025f4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025f50:	f010 0301 	ands.w	r3, r0, #1
 8025f54:	d00a      	beq.n	8025f6c <__swsetup_r+0xbc>
 8025f56:	2300      	movs	r3, #0
 8025f58:	60a3      	str	r3, [r4, #8]
 8025f5a:	6963      	ldr	r3, [r4, #20]
 8025f5c:	425b      	negs	r3, r3
 8025f5e:	61a3      	str	r3, [r4, #24]
 8025f60:	6923      	ldr	r3, [r4, #16]
 8025f62:	b943      	cbnz	r3, 8025f76 <__swsetup_r+0xc6>
 8025f64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025f68:	d1ba      	bne.n	8025ee0 <__swsetup_r+0x30>
 8025f6a:	bd70      	pop	{r4, r5, r6, pc}
 8025f6c:	0781      	lsls	r1, r0, #30
 8025f6e:	bf58      	it	pl
 8025f70:	6963      	ldrpl	r3, [r4, #20]
 8025f72:	60a3      	str	r3, [r4, #8]
 8025f74:	e7f4      	b.n	8025f60 <__swsetup_r+0xb0>
 8025f76:	2000      	movs	r0, #0
 8025f78:	e7f7      	b.n	8025f6a <__swsetup_r+0xba>
 8025f7a:	bf00      	nop
 8025f7c:	20000340 	.word	0x20000340
 8025f80:	0802d048 	.word	0x0802d048
 8025f84:	0802d068 	.word	0x0802d068
 8025f88:	0802d028 	.word	0x0802d028

08025f8c <__assert_func>:
 8025f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025f8e:	4614      	mov	r4, r2
 8025f90:	461a      	mov	r2, r3
 8025f92:	4b09      	ldr	r3, [pc, #36]	; (8025fb8 <__assert_func+0x2c>)
 8025f94:	681b      	ldr	r3, [r3, #0]
 8025f96:	4605      	mov	r5, r0
 8025f98:	68d8      	ldr	r0, [r3, #12]
 8025f9a:	b14c      	cbz	r4, 8025fb0 <__assert_func+0x24>
 8025f9c:	4b07      	ldr	r3, [pc, #28]	; (8025fbc <__assert_func+0x30>)
 8025f9e:	9100      	str	r1, [sp, #0]
 8025fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025fa4:	4906      	ldr	r1, [pc, #24]	; (8025fc0 <__assert_func+0x34>)
 8025fa6:	462b      	mov	r3, r5
 8025fa8:	f000 f9a6 	bl	80262f8 <fiprintf>
 8025fac:	f000 ff32 	bl	8026e14 <abort>
 8025fb0:	4b04      	ldr	r3, [pc, #16]	; (8025fc4 <__assert_func+0x38>)
 8025fb2:	461c      	mov	r4, r3
 8025fb4:	e7f3      	b.n	8025f9e <__assert_func+0x12>
 8025fb6:	bf00      	nop
 8025fb8:	20000340 	.word	0x20000340
 8025fbc:	0802cfea 	.word	0x0802cfea
 8025fc0:	0802cff7 	.word	0x0802cff7
 8025fc4:	0802d025 	.word	0x0802d025

08025fc8 <__sflush_r>:
 8025fc8:	898a      	ldrh	r2, [r1, #12]
 8025fca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025fce:	4605      	mov	r5, r0
 8025fd0:	0710      	lsls	r0, r2, #28
 8025fd2:	460c      	mov	r4, r1
 8025fd4:	d458      	bmi.n	8026088 <__sflush_r+0xc0>
 8025fd6:	684b      	ldr	r3, [r1, #4]
 8025fd8:	2b00      	cmp	r3, #0
 8025fda:	dc05      	bgt.n	8025fe8 <__sflush_r+0x20>
 8025fdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8025fde:	2b00      	cmp	r3, #0
 8025fe0:	dc02      	bgt.n	8025fe8 <__sflush_r+0x20>
 8025fe2:	2000      	movs	r0, #0
 8025fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025fe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8025fea:	2e00      	cmp	r6, #0
 8025fec:	d0f9      	beq.n	8025fe2 <__sflush_r+0x1a>
 8025fee:	2300      	movs	r3, #0
 8025ff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8025ff4:	682f      	ldr	r7, [r5, #0]
 8025ff6:	602b      	str	r3, [r5, #0]
 8025ff8:	d032      	beq.n	8026060 <__sflush_r+0x98>
 8025ffa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8025ffc:	89a3      	ldrh	r3, [r4, #12]
 8025ffe:	075a      	lsls	r2, r3, #29
 8026000:	d505      	bpl.n	802600e <__sflush_r+0x46>
 8026002:	6863      	ldr	r3, [r4, #4]
 8026004:	1ac0      	subs	r0, r0, r3
 8026006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026008:	b10b      	cbz	r3, 802600e <__sflush_r+0x46>
 802600a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802600c:	1ac0      	subs	r0, r0, r3
 802600e:	2300      	movs	r3, #0
 8026010:	4602      	mov	r2, r0
 8026012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026014:	6a21      	ldr	r1, [r4, #32]
 8026016:	4628      	mov	r0, r5
 8026018:	47b0      	blx	r6
 802601a:	1c43      	adds	r3, r0, #1
 802601c:	89a3      	ldrh	r3, [r4, #12]
 802601e:	d106      	bne.n	802602e <__sflush_r+0x66>
 8026020:	6829      	ldr	r1, [r5, #0]
 8026022:	291d      	cmp	r1, #29
 8026024:	d82c      	bhi.n	8026080 <__sflush_r+0xb8>
 8026026:	4a2a      	ldr	r2, [pc, #168]	; (80260d0 <__sflush_r+0x108>)
 8026028:	40ca      	lsrs	r2, r1
 802602a:	07d6      	lsls	r6, r2, #31
 802602c:	d528      	bpl.n	8026080 <__sflush_r+0xb8>
 802602e:	2200      	movs	r2, #0
 8026030:	6062      	str	r2, [r4, #4]
 8026032:	04d9      	lsls	r1, r3, #19
 8026034:	6922      	ldr	r2, [r4, #16]
 8026036:	6022      	str	r2, [r4, #0]
 8026038:	d504      	bpl.n	8026044 <__sflush_r+0x7c>
 802603a:	1c42      	adds	r2, r0, #1
 802603c:	d101      	bne.n	8026042 <__sflush_r+0x7a>
 802603e:	682b      	ldr	r3, [r5, #0]
 8026040:	b903      	cbnz	r3, 8026044 <__sflush_r+0x7c>
 8026042:	6560      	str	r0, [r4, #84]	; 0x54
 8026044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026046:	602f      	str	r7, [r5, #0]
 8026048:	2900      	cmp	r1, #0
 802604a:	d0ca      	beq.n	8025fe2 <__sflush_r+0x1a>
 802604c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026050:	4299      	cmp	r1, r3
 8026052:	d002      	beq.n	802605a <__sflush_r+0x92>
 8026054:	4628      	mov	r0, r5
 8026056:	f7ff fc21 	bl	802589c <_free_r>
 802605a:	2000      	movs	r0, #0
 802605c:	6360      	str	r0, [r4, #52]	; 0x34
 802605e:	e7c1      	b.n	8025fe4 <__sflush_r+0x1c>
 8026060:	6a21      	ldr	r1, [r4, #32]
 8026062:	2301      	movs	r3, #1
 8026064:	4628      	mov	r0, r5
 8026066:	47b0      	blx	r6
 8026068:	1c41      	adds	r1, r0, #1
 802606a:	d1c7      	bne.n	8025ffc <__sflush_r+0x34>
 802606c:	682b      	ldr	r3, [r5, #0]
 802606e:	2b00      	cmp	r3, #0
 8026070:	d0c4      	beq.n	8025ffc <__sflush_r+0x34>
 8026072:	2b1d      	cmp	r3, #29
 8026074:	d001      	beq.n	802607a <__sflush_r+0xb2>
 8026076:	2b16      	cmp	r3, #22
 8026078:	d101      	bne.n	802607e <__sflush_r+0xb6>
 802607a:	602f      	str	r7, [r5, #0]
 802607c:	e7b1      	b.n	8025fe2 <__sflush_r+0x1a>
 802607e:	89a3      	ldrh	r3, [r4, #12]
 8026080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026084:	81a3      	strh	r3, [r4, #12]
 8026086:	e7ad      	b.n	8025fe4 <__sflush_r+0x1c>
 8026088:	690f      	ldr	r7, [r1, #16]
 802608a:	2f00      	cmp	r7, #0
 802608c:	d0a9      	beq.n	8025fe2 <__sflush_r+0x1a>
 802608e:	0793      	lsls	r3, r2, #30
 8026090:	680e      	ldr	r6, [r1, #0]
 8026092:	bf08      	it	eq
 8026094:	694b      	ldreq	r3, [r1, #20]
 8026096:	600f      	str	r7, [r1, #0]
 8026098:	bf18      	it	ne
 802609a:	2300      	movne	r3, #0
 802609c:	eba6 0807 	sub.w	r8, r6, r7
 80260a0:	608b      	str	r3, [r1, #8]
 80260a2:	f1b8 0f00 	cmp.w	r8, #0
 80260a6:	dd9c      	ble.n	8025fe2 <__sflush_r+0x1a>
 80260a8:	6a21      	ldr	r1, [r4, #32]
 80260aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80260ac:	4643      	mov	r3, r8
 80260ae:	463a      	mov	r2, r7
 80260b0:	4628      	mov	r0, r5
 80260b2:	47b0      	blx	r6
 80260b4:	2800      	cmp	r0, #0
 80260b6:	dc06      	bgt.n	80260c6 <__sflush_r+0xfe>
 80260b8:	89a3      	ldrh	r3, [r4, #12]
 80260ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80260be:	81a3      	strh	r3, [r4, #12]
 80260c0:	f04f 30ff 	mov.w	r0, #4294967295
 80260c4:	e78e      	b.n	8025fe4 <__sflush_r+0x1c>
 80260c6:	4407      	add	r7, r0
 80260c8:	eba8 0800 	sub.w	r8, r8, r0
 80260cc:	e7e9      	b.n	80260a2 <__sflush_r+0xda>
 80260ce:	bf00      	nop
 80260d0:	20400001 	.word	0x20400001

080260d4 <_fflush_r>:
 80260d4:	b538      	push	{r3, r4, r5, lr}
 80260d6:	690b      	ldr	r3, [r1, #16]
 80260d8:	4605      	mov	r5, r0
 80260da:	460c      	mov	r4, r1
 80260dc:	b913      	cbnz	r3, 80260e4 <_fflush_r+0x10>
 80260de:	2500      	movs	r5, #0
 80260e0:	4628      	mov	r0, r5
 80260e2:	bd38      	pop	{r3, r4, r5, pc}
 80260e4:	b118      	cbz	r0, 80260ee <_fflush_r+0x1a>
 80260e6:	6983      	ldr	r3, [r0, #24]
 80260e8:	b90b      	cbnz	r3, 80260ee <_fflush_r+0x1a>
 80260ea:	f000 f887 	bl	80261fc <__sinit>
 80260ee:	4b14      	ldr	r3, [pc, #80]	; (8026140 <_fflush_r+0x6c>)
 80260f0:	429c      	cmp	r4, r3
 80260f2:	d11b      	bne.n	802612c <_fflush_r+0x58>
 80260f4:	686c      	ldr	r4, [r5, #4]
 80260f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80260fa:	2b00      	cmp	r3, #0
 80260fc:	d0ef      	beq.n	80260de <_fflush_r+0xa>
 80260fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026100:	07d0      	lsls	r0, r2, #31
 8026102:	d404      	bmi.n	802610e <_fflush_r+0x3a>
 8026104:	0599      	lsls	r1, r3, #22
 8026106:	d402      	bmi.n	802610e <_fflush_r+0x3a>
 8026108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802610a:	f000 f927 	bl	802635c <__retarget_lock_acquire_recursive>
 802610e:	4628      	mov	r0, r5
 8026110:	4621      	mov	r1, r4
 8026112:	f7ff ff59 	bl	8025fc8 <__sflush_r>
 8026116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026118:	07da      	lsls	r2, r3, #31
 802611a:	4605      	mov	r5, r0
 802611c:	d4e0      	bmi.n	80260e0 <_fflush_r+0xc>
 802611e:	89a3      	ldrh	r3, [r4, #12]
 8026120:	059b      	lsls	r3, r3, #22
 8026122:	d4dd      	bmi.n	80260e0 <_fflush_r+0xc>
 8026124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026126:	f000 f91a 	bl	802635e <__retarget_lock_release_recursive>
 802612a:	e7d9      	b.n	80260e0 <_fflush_r+0xc>
 802612c:	4b05      	ldr	r3, [pc, #20]	; (8026144 <_fflush_r+0x70>)
 802612e:	429c      	cmp	r4, r3
 8026130:	d101      	bne.n	8026136 <_fflush_r+0x62>
 8026132:	68ac      	ldr	r4, [r5, #8]
 8026134:	e7df      	b.n	80260f6 <_fflush_r+0x22>
 8026136:	4b04      	ldr	r3, [pc, #16]	; (8026148 <_fflush_r+0x74>)
 8026138:	429c      	cmp	r4, r3
 802613a:	bf08      	it	eq
 802613c:	68ec      	ldreq	r4, [r5, #12]
 802613e:	e7da      	b.n	80260f6 <_fflush_r+0x22>
 8026140:	0802d048 	.word	0x0802d048
 8026144:	0802d068 	.word	0x0802d068
 8026148:	0802d028 	.word	0x0802d028

0802614c <std>:
 802614c:	2300      	movs	r3, #0
 802614e:	b510      	push	{r4, lr}
 8026150:	4604      	mov	r4, r0
 8026152:	e9c0 3300 	strd	r3, r3, [r0]
 8026156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 802615a:	6083      	str	r3, [r0, #8]
 802615c:	8181      	strh	r1, [r0, #12]
 802615e:	6643      	str	r3, [r0, #100]	; 0x64
 8026160:	81c2      	strh	r2, [r0, #14]
 8026162:	6183      	str	r3, [r0, #24]
 8026164:	4619      	mov	r1, r3
 8026166:	2208      	movs	r2, #8
 8026168:	305c      	adds	r0, #92	; 0x5c
 802616a:	f7ff fb8f 	bl	802588c <memset>
 802616e:	4b05      	ldr	r3, [pc, #20]	; (8026184 <std+0x38>)
 8026170:	6263      	str	r3, [r4, #36]	; 0x24
 8026172:	4b05      	ldr	r3, [pc, #20]	; (8026188 <std+0x3c>)
 8026174:	62a3      	str	r3, [r4, #40]	; 0x28
 8026176:	4b05      	ldr	r3, [pc, #20]	; (802618c <std+0x40>)
 8026178:	62e3      	str	r3, [r4, #44]	; 0x2c
 802617a:	4b05      	ldr	r3, [pc, #20]	; (8026190 <std+0x44>)
 802617c:	6224      	str	r4, [r4, #32]
 802617e:	6323      	str	r3, [r4, #48]	; 0x30
 8026180:	bd10      	pop	{r4, pc}
 8026182:	bf00      	nop
 8026184:	08026d69 	.word	0x08026d69
 8026188:	08026d8b 	.word	0x08026d8b
 802618c:	08026dc3 	.word	0x08026dc3
 8026190:	08026de7 	.word	0x08026de7

08026194 <_cleanup_r>:
 8026194:	4901      	ldr	r1, [pc, #4]	; (802619c <_cleanup_r+0x8>)
 8026196:	f000 b8c1 	b.w	802631c <_fwalk_reent>
 802619a:	bf00      	nop
 802619c:	080260d5 	.word	0x080260d5

080261a0 <__sfmoreglue>:
 80261a0:	b570      	push	{r4, r5, r6, lr}
 80261a2:	2268      	movs	r2, #104	; 0x68
 80261a4:	1e4d      	subs	r5, r1, #1
 80261a6:	4355      	muls	r5, r2
 80261a8:	460e      	mov	r6, r1
 80261aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80261ae:	f7ff fbe1 	bl	8025974 <_malloc_r>
 80261b2:	4604      	mov	r4, r0
 80261b4:	b140      	cbz	r0, 80261c8 <__sfmoreglue+0x28>
 80261b6:	2100      	movs	r1, #0
 80261b8:	e9c0 1600 	strd	r1, r6, [r0]
 80261bc:	300c      	adds	r0, #12
 80261be:	60a0      	str	r0, [r4, #8]
 80261c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80261c4:	f7ff fb62 	bl	802588c <memset>
 80261c8:	4620      	mov	r0, r4
 80261ca:	bd70      	pop	{r4, r5, r6, pc}

080261cc <__sfp_lock_acquire>:
 80261cc:	4801      	ldr	r0, [pc, #4]	; (80261d4 <__sfp_lock_acquire+0x8>)
 80261ce:	f000 b8c5 	b.w	802635c <__retarget_lock_acquire_recursive>
 80261d2:	bf00      	nop
 80261d4:	200161d5 	.word	0x200161d5

080261d8 <__sfp_lock_release>:
 80261d8:	4801      	ldr	r0, [pc, #4]	; (80261e0 <__sfp_lock_release+0x8>)
 80261da:	f000 b8c0 	b.w	802635e <__retarget_lock_release_recursive>
 80261de:	bf00      	nop
 80261e0:	200161d5 	.word	0x200161d5

080261e4 <__sinit_lock_acquire>:
 80261e4:	4801      	ldr	r0, [pc, #4]	; (80261ec <__sinit_lock_acquire+0x8>)
 80261e6:	f000 b8b9 	b.w	802635c <__retarget_lock_acquire_recursive>
 80261ea:	bf00      	nop
 80261ec:	200161d6 	.word	0x200161d6

080261f0 <__sinit_lock_release>:
 80261f0:	4801      	ldr	r0, [pc, #4]	; (80261f8 <__sinit_lock_release+0x8>)
 80261f2:	f000 b8b4 	b.w	802635e <__retarget_lock_release_recursive>
 80261f6:	bf00      	nop
 80261f8:	200161d6 	.word	0x200161d6

080261fc <__sinit>:
 80261fc:	b510      	push	{r4, lr}
 80261fe:	4604      	mov	r4, r0
 8026200:	f7ff fff0 	bl	80261e4 <__sinit_lock_acquire>
 8026204:	69a3      	ldr	r3, [r4, #24]
 8026206:	b11b      	cbz	r3, 8026210 <__sinit+0x14>
 8026208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802620c:	f7ff bff0 	b.w	80261f0 <__sinit_lock_release>
 8026210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026214:	6523      	str	r3, [r4, #80]	; 0x50
 8026216:	4b13      	ldr	r3, [pc, #76]	; (8026264 <__sinit+0x68>)
 8026218:	4a13      	ldr	r2, [pc, #76]	; (8026268 <__sinit+0x6c>)
 802621a:	681b      	ldr	r3, [r3, #0]
 802621c:	62a2      	str	r2, [r4, #40]	; 0x28
 802621e:	42a3      	cmp	r3, r4
 8026220:	bf04      	itt	eq
 8026222:	2301      	moveq	r3, #1
 8026224:	61a3      	streq	r3, [r4, #24]
 8026226:	4620      	mov	r0, r4
 8026228:	f000 f820 	bl	802626c <__sfp>
 802622c:	6060      	str	r0, [r4, #4]
 802622e:	4620      	mov	r0, r4
 8026230:	f000 f81c 	bl	802626c <__sfp>
 8026234:	60a0      	str	r0, [r4, #8]
 8026236:	4620      	mov	r0, r4
 8026238:	f000 f818 	bl	802626c <__sfp>
 802623c:	2200      	movs	r2, #0
 802623e:	60e0      	str	r0, [r4, #12]
 8026240:	2104      	movs	r1, #4
 8026242:	6860      	ldr	r0, [r4, #4]
 8026244:	f7ff ff82 	bl	802614c <std>
 8026248:	68a0      	ldr	r0, [r4, #8]
 802624a:	2201      	movs	r2, #1
 802624c:	2109      	movs	r1, #9
 802624e:	f7ff ff7d 	bl	802614c <std>
 8026252:	68e0      	ldr	r0, [r4, #12]
 8026254:	2202      	movs	r2, #2
 8026256:	2112      	movs	r1, #18
 8026258:	f7ff ff78 	bl	802614c <std>
 802625c:	2301      	movs	r3, #1
 802625e:	61a3      	str	r3, [r4, #24]
 8026260:	e7d2      	b.n	8026208 <__sinit+0xc>
 8026262:	bf00      	nop
 8026264:	0802cf74 	.word	0x0802cf74
 8026268:	08026195 	.word	0x08026195

0802626c <__sfp>:
 802626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802626e:	4607      	mov	r7, r0
 8026270:	f7ff ffac 	bl	80261cc <__sfp_lock_acquire>
 8026274:	4b1e      	ldr	r3, [pc, #120]	; (80262f0 <__sfp+0x84>)
 8026276:	681e      	ldr	r6, [r3, #0]
 8026278:	69b3      	ldr	r3, [r6, #24]
 802627a:	b913      	cbnz	r3, 8026282 <__sfp+0x16>
 802627c:	4630      	mov	r0, r6
 802627e:	f7ff ffbd 	bl	80261fc <__sinit>
 8026282:	3648      	adds	r6, #72	; 0x48
 8026284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026288:	3b01      	subs	r3, #1
 802628a:	d503      	bpl.n	8026294 <__sfp+0x28>
 802628c:	6833      	ldr	r3, [r6, #0]
 802628e:	b30b      	cbz	r3, 80262d4 <__sfp+0x68>
 8026290:	6836      	ldr	r6, [r6, #0]
 8026292:	e7f7      	b.n	8026284 <__sfp+0x18>
 8026294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026298:	b9d5      	cbnz	r5, 80262d0 <__sfp+0x64>
 802629a:	4b16      	ldr	r3, [pc, #88]	; (80262f4 <__sfp+0x88>)
 802629c:	60e3      	str	r3, [r4, #12]
 802629e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80262a2:	6665      	str	r5, [r4, #100]	; 0x64
 80262a4:	f000 f859 	bl	802635a <__retarget_lock_init_recursive>
 80262a8:	f7ff ff96 	bl	80261d8 <__sfp_lock_release>
 80262ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80262b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80262b4:	6025      	str	r5, [r4, #0]
 80262b6:	61a5      	str	r5, [r4, #24]
 80262b8:	2208      	movs	r2, #8
 80262ba:	4629      	mov	r1, r5
 80262bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80262c0:	f7ff fae4 	bl	802588c <memset>
 80262c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80262c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80262cc:	4620      	mov	r0, r4
 80262ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80262d0:	3468      	adds	r4, #104	; 0x68
 80262d2:	e7d9      	b.n	8026288 <__sfp+0x1c>
 80262d4:	2104      	movs	r1, #4
 80262d6:	4638      	mov	r0, r7
 80262d8:	f7ff ff62 	bl	80261a0 <__sfmoreglue>
 80262dc:	4604      	mov	r4, r0
 80262de:	6030      	str	r0, [r6, #0]
 80262e0:	2800      	cmp	r0, #0
 80262e2:	d1d5      	bne.n	8026290 <__sfp+0x24>
 80262e4:	f7ff ff78 	bl	80261d8 <__sfp_lock_release>
 80262e8:	230c      	movs	r3, #12
 80262ea:	603b      	str	r3, [r7, #0]
 80262ec:	e7ee      	b.n	80262cc <__sfp+0x60>
 80262ee:	bf00      	nop
 80262f0:	0802cf74 	.word	0x0802cf74
 80262f4:	ffff0001 	.word	0xffff0001

080262f8 <fiprintf>:
 80262f8:	b40e      	push	{r1, r2, r3}
 80262fa:	b503      	push	{r0, r1, lr}
 80262fc:	4601      	mov	r1, r0
 80262fe:	ab03      	add	r3, sp, #12
 8026300:	4805      	ldr	r0, [pc, #20]	; (8026318 <fiprintf+0x20>)
 8026302:	f853 2b04 	ldr.w	r2, [r3], #4
 8026306:	6800      	ldr	r0, [r0, #0]
 8026308:	9301      	str	r3, [sp, #4]
 802630a:	f000 fa21 	bl	8026750 <_vfiprintf_r>
 802630e:	b002      	add	sp, #8
 8026310:	f85d eb04 	ldr.w	lr, [sp], #4
 8026314:	b003      	add	sp, #12
 8026316:	4770      	bx	lr
 8026318:	20000340 	.word	0x20000340

0802631c <_fwalk_reent>:
 802631c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026320:	4606      	mov	r6, r0
 8026322:	4688      	mov	r8, r1
 8026324:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026328:	2700      	movs	r7, #0
 802632a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802632e:	f1b9 0901 	subs.w	r9, r9, #1
 8026332:	d505      	bpl.n	8026340 <_fwalk_reent+0x24>
 8026334:	6824      	ldr	r4, [r4, #0]
 8026336:	2c00      	cmp	r4, #0
 8026338:	d1f7      	bne.n	802632a <_fwalk_reent+0xe>
 802633a:	4638      	mov	r0, r7
 802633c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026340:	89ab      	ldrh	r3, [r5, #12]
 8026342:	2b01      	cmp	r3, #1
 8026344:	d907      	bls.n	8026356 <_fwalk_reent+0x3a>
 8026346:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802634a:	3301      	adds	r3, #1
 802634c:	d003      	beq.n	8026356 <_fwalk_reent+0x3a>
 802634e:	4629      	mov	r1, r5
 8026350:	4630      	mov	r0, r6
 8026352:	47c0      	blx	r8
 8026354:	4307      	orrs	r7, r0
 8026356:	3568      	adds	r5, #104	; 0x68
 8026358:	e7e9      	b.n	802632e <_fwalk_reent+0x12>

0802635a <__retarget_lock_init_recursive>:
 802635a:	4770      	bx	lr

0802635c <__retarget_lock_acquire_recursive>:
 802635c:	4770      	bx	lr

0802635e <__retarget_lock_release_recursive>:
 802635e:	4770      	bx	lr

08026360 <__swhatbuf_r>:
 8026360:	b570      	push	{r4, r5, r6, lr}
 8026362:	460e      	mov	r6, r1
 8026364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026368:	2900      	cmp	r1, #0
 802636a:	b096      	sub	sp, #88	; 0x58
 802636c:	4614      	mov	r4, r2
 802636e:	461d      	mov	r5, r3
 8026370:	da08      	bge.n	8026384 <__swhatbuf_r+0x24>
 8026372:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026376:	2200      	movs	r2, #0
 8026378:	602a      	str	r2, [r5, #0]
 802637a:	061a      	lsls	r2, r3, #24
 802637c:	d410      	bmi.n	80263a0 <__swhatbuf_r+0x40>
 802637e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026382:	e00e      	b.n	80263a2 <__swhatbuf_r+0x42>
 8026384:	466a      	mov	r2, sp
 8026386:	f000 fd5d 	bl	8026e44 <_fstat_r>
 802638a:	2800      	cmp	r0, #0
 802638c:	dbf1      	blt.n	8026372 <__swhatbuf_r+0x12>
 802638e:	9a01      	ldr	r2, [sp, #4]
 8026390:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026394:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026398:	425a      	negs	r2, r3
 802639a:	415a      	adcs	r2, r3
 802639c:	602a      	str	r2, [r5, #0]
 802639e:	e7ee      	b.n	802637e <__swhatbuf_r+0x1e>
 80263a0:	2340      	movs	r3, #64	; 0x40
 80263a2:	2000      	movs	r0, #0
 80263a4:	6023      	str	r3, [r4, #0]
 80263a6:	b016      	add	sp, #88	; 0x58
 80263a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080263ac <__smakebuf_r>:
 80263ac:	898b      	ldrh	r3, [r1, #12]
 80263ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80263b0:	079d      	lsls	r5, r3, #30
 80263b2:	4606      	mov	r6, r0
 80263b4:	460c      	mov	r4, r1
 80263b6:	d507      	bpl.n	80263c8 <__smakebuf_r+0x1c>
 80263b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80263bc:	6023      	str	r3, [r4, #0]
 80263be:	6123      	str	r3, [r4, #16]
 80263c0:	2301      	movs	r3, #1
 80263c2:	6163      	str	r3, [r4, #20]
 80263c4:	b002      	add	sp, #8
 80263c6:	bd70      	pop	{r4, r5, r6, pc}
 80263c8:	ab01      	add	r3, sp, #4
 80263ca:	466a      	mov	r2, sp
 80263cc:	f7ff ffc8 	bl	8026360 <__swhatbuf_r>
 80263d0:	9900      	ldr	r1, [sp, #0]
 80263d2:	4605      	mov	r5, r0
 80263d4:	4630      	mov	r0, r6
 80263d6:	f7ff facd 	bl	8025974 <_malloc_r>
 80263da:	b948      	cbnz	r0, 80263f0 <__smakebuf_r+0x44>
 80263dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80263e0:	059a      	lsls	r2, r3, #22
 80263e2:	d4ef      	bmi.n	80263c4 <__smakebuf_r+0x18>
 80263e4:	f023 0303 	bic.w	r3, r3, #3
 80263e8:	f043 0302 	orr.w	r3, r3, #2
 80263ec:	81a3      	strh	r3, [r4, #12]
 80263ee:	e7e3      	b.n	80263b8 <__smakebuf_r+0xc>
 80263f0:	4b0d      	ldr	r3, [pc, #52]	; (8026428 <__smakebuf_r+0x7c>)
 80263f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80263f4:	89a3      	ldrh	r3, [r4, #12]
 80263f6:	6020      	str	r0, [r4, #0]
 80263f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80263fc:	81a3      	strh	r3, [r4, #12]
 80263fe:	9b00      	ldr	r3, [sp, #0]
 8026400:	6163      	str	r3, [r4, #20]
 8026402:	9b01      	ldr	r3, [sp, #4]
 8026404:	6120      	str	r0, [r4, #16]
 8026406:	b15b      	cbz	r3, 8026420 <__smakebuf_r+0x74>
 8026408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802640c:	4630      	mov	r0, r6
 802640e:	f000 fd2b 	bl	8026e68 <_isatty_r>
 8026412:	b128      	cbz	r0, 8026420 <__smakebuf_r+0x74>
 8026414:	89a3      	ldrh	r3, [r4, #12]
 8026416:	f023 0303 	bic.w	r3, r3, #3
 802641a:	f043 0301 	orr.w	r3, r3, #1
 802641e:	81a3      	strh	r3, [r4, #12]
 8026420:	89a0      	ldrh	r0, [r4, #12]
 8026422:	4305      	orrs	r5, r0
 8026424:	81a5      	strh	r5, [r4, #12]
 8026426:	e7cd      	b.n	80263c4 <__smakebuf_r+0x18>
 8026428:	08026195 	.word	0x08026195

0802642c <__malloc_lock>:
 802642c:	4801      	ldr	r0, [pc, #4]	; (8026434 <__malloc_lock+0x8>)
 802642e:	f7ff bf95 	b.w	802635c <__retarget_lock_acquire_recursive>
 8026432:	bf00      	nop
 8026434:	200161d4 	.word	0x200161d4

08026438 <__malloc_unlock>:
 8026438:	4801      	ldr	r0, [pc, #4]	; (8026440 <__malloc_unlock+0x8>)
 802643a:	f7ff bf90 	b.w	802635e <__retarget_lock_release_recursive>
 802643e:	bf00      	nop
 8026440:	200161d4 	.word	0x200161d4

08026444 <__ssputs_r>:
 8026444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026448:	688e      	ldr	r6, [r1, #8]
 802644a:	429e      	cmp	r6, r3
 802644c:	4682      	mov	sl, r0
 802644e:	460c      	mov	r4, r1
 8026450:	4690      	mov	r8, r2
 8026452:	461f      	mov	r7, r3
 8026454:	d838      	bhi.n	80264c8 <__ssputs_r+0x84>
 8026456:	898a      	ldrh	r2, [r1, #12]
 8026458:	f412 6f90 	tst.w	r2, #1152	; 0x480
 802645c:	d032      	beq.n	80264c4 <__ssputs_r+0x80>
 802645e:	6825      	ldr	r5, [r4, #0]
 8026460:	6909      	ldr	r1, [r1, #16]
 8026462:	eba5 0901 	sub.w	r9, r5, r1
 8026466:	6965      	ldr	r5, [r4, #20]
 8026468:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 802646c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026470:	3301      	adds	r3, #1
 8026472:	444b      	add	r3, r9
 8026474:	106d      	asrs	r5, r5, #1
 8026476:	429d      	cmp	r5, r3
 8026478:	bf38      	it	cc
 802647a:	461d      	movcc	r5, r3
 802647c:	0553      	lsls	r3, r2, #21
 802647e:	d531      	bpl.n	80264e4 <__ssputs_r+0xa0>
 8026480:	4629      	mov	r1, r5
 8026482:	f7ff fa77 	bl	8025974 <_malloc_r>
 8026486:	4606      	mov	r6, r0
 8026488:	b950      	cbnz	r0, 80264a0 <__ssputs_r+0x5c>
 802648a:	230c      	movs	r3, #12
 802648c:	f8ca 3000 	str.w	r3, [sl]
 8026490:	89a3      	ldrh	r3, [r4, #12]
 8026492:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026496:	81a3      	strh	r3, [r4, #12]
 8026498:	f04f 30ff 	mov.w	r0, #4294967295
 802649c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80264a0:	6921      	ldr	r1, [r4, #16]
 80264a2:	464a      	mov	r2, r9
 80264a4:	f7ff f9ca 	bl	802583c <memcpy>
 80264a8:	89a3      	ldrh	r3, [r4, #12]
 80264aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80264ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80264b2:	81a3      	strh	r3, [r4, #12]
 80264b4:	6126      	str	r6, [r4, #16]
 80264b6:	6165      	str	r5, [r4, #20]
 80264b8:	444e      	add	r6, r9
 80264ba:	eba5 0509 	sub.w	r5, r5, r9
 80264be:	6026      	str	r6, [r4, #0]
 80264c0:	60a5      	str	r5, [r4, #8]
 80264c2:	463e      	mov	r6, r7
 80264c4:	42be      	cmp	r6, r7
 80264c6:	d900      	bls.n	80264ca <__ssputs_r+0x86>
 80264c8:	463e      	mov	r6, r7
 80264ca:	6820      	ldr	r0, [r4, #0]
 80264cc:	4632      	mov	r2, r6
 80264ce:	4641      	mov	r1, r8
 80264d0:	f7ff f9c2 	bl	8025858 <memmove>
 80264d4:	68a3      	ldr	r3, [r4, #8]
 80264d6:	1b9b      	subs	r3, r3, r6
 80264d8:	60a3      	str	r3, [r4, #8]
 80264da:	6823      	ldr	r3, [r4, #0]
 80264dc:	4433      	add	r3, r6
 80264de:	6023      	str	r3, [r4, #0]
 80264e0:	2000      	movs	r0, #0
 80264e2:	e7db      	b.n	802649c <__ssputs_r+0x58>
 80264e4:	462a      	mov	r2, r5
 80264e6:	f000 fce1 	bl	8026eac <_realloc_r>
 80264ea:	4606      	mov	r6, r0
 80264ec:	2800      	cmp	r0, #0
 80264ee:	d1e1      	bne.n	80264b4 <__ssputs_r+0x70>
 80264f0:	6921      	ldr	r1, [r4, #16]
 80264f2:	4650      	mov	r0, sl
 80264f4:	f7ff f9d2 	bl	802589c <_free_r>
 80264f8:	e7c7      	b.n	802648a <__ssputs_r+0x46>
	...

080264fc <_svfiprintf_r>:
 80264fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026500:	4698      	mov	r8, r3
 8026502:	898b      	ldrh	r3, [r1, #12]
 8026504:	061b      	lsls	r3, r3, #24
 8026506:	b09d      	sub	sp, #116	; 0x74
 8026508:	4607      	mov	r7, r0
 802650a:	460d      	mov	r5, r1
 802650c:	4614      	mov	r4, r2
 802650e:	d50e      	bpl.n	802652e <_svfiprintf_r+0x32>
 8026510:	690b      	ldr	r3, [r1, #16]
 8026512:	b963      	cbnz	r3, 802652e <_svfiprintf_r+0x32>
 8026514:	2140      	movs	r1, #64	; 0x40
 8026516:	f7ff fa2d 	bl	8025974 <_malloc_r>
 802651a:	6028      	str	r0, [r5, #0]
 802651c:	6128      	str	r0, [r5, #16]
 802651e:	b920      	cbnz	r0, 802652a <_svfiprintf_r+0x2e>
 8026520:	230c      	movs	r3, #12
 8026522:	603b      	str	r3, [r7, #0]
 8026524:	f04f 30ff 	mov.w	r0, #4294967295
 8026528:	e0d1      	b.n	80266ce <_svfiprintf_r+0x1d2>
 802652a:	2340      	movs	r3, #64	; 0x40
 802652c:	616b      	str	r3, [r5, #20]
 802652e:	2300      	movs	r3, #0
 8026530:	9309      	str	r3, [sp, #36]	; 0x24
 8026532:	2320      	movs	r3, #32
 8026534:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026538:	f8cd 800c 	str.w	r8, [sp, #12]
 802653c:	2330      	movs	r3, #48	; 0x30
 802653e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80266e8 <_svfiprintf_r+0x1ec>
 8026542:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026546:	f04f 0901 	mov.w	r9, #1
 802654a:	4623      	mov	r3, r4
 802654c:	469a      	mov	sl, r3
 802654e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026552:	b10a      	cbz	r2, 8026558 <_svfiprintf_r+0x5c>
 8026554:	2a25      	cmp	r2, #37	; 0x25
 8026556:	d1f9      	bne.n	802654c <_svfiprintf_r+0x50>
 8026558:	ebba 0b04 	subs.w	fp, sl, r4
 802655c:	d00b      	beq.n	8026576 <_svfiprintf_r+0x7a>
 802655e:	465b      	mov	r3, fp
 8026560:	4622      	mov	r2, r4
 8026562:	4629      	mov	r1, r5
 8026564:	4638      	mov	r0, r7
 8026566:	f7ff ff6d 	bl	8026444 <__ssputs_r>
 802656a:	3001      	adds	r0, #1
 802656c:	f000 80aa 	beq.w	80266c4 <_svfiprintf_r+0x1c8>
 8026570:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026572:	445a      	add	r2, fp
 8026574:	9209      	str	r2, [sp, #36]	; 0x24
 8026576:	f89a 3000 	ldrb.w	r3, [sl]
 802657a:	2b00      	cmp	r3, #0
 802657c:	f000 80a2 	beq.w	80266c4 <_svfiprintf_r+0x1c8>
 8026580:	2300      	movs	r3, #0
 8026582:	f04f 32ff 	mov.w	r2, #4294967295
 8026586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802658a:	f10a 0a01 	add.w	sl, sl, #1
 802658e:	9304      	str	r3, [sp, #16]
 8026590:	9307      	str	r3, [sp, #28]
 8026592:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026596:	931a      	str	r3, [sp, #104]	; 0x68
 8026598:	4654      	mov	r4, sl
 802659a:	2205      	movs	r2, #5
 802659c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265a0:	4851      	ldr	r0, [pc, #324]	; (80266e8 <_svfiprintf_r+0x1ec>)
 80265a2:	f7d9 fe65 	bl	8000270 <memchr>
 80265a6:	9a04      	ldr	r2, [sp, #16]
 80265a8:	b9d8      	cbnz	r0, 80265e2 <_svfiprintf_r+0xe6>
 80265aa:	06d0      	lsls	r0, r2, #27
 80265ac:	bf44      	itt	mi
 80265ae:	2320      	movmi	r3, #32
 80265b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80265b4:	0711      	lsls	r1, r2, #28
 80265b6:	bf44      	itt	mi
 80265b8:	232b      	movmi	r3, #43	; 0x2b
 80265ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80265be:	f89a 3000 	ldrb.w	r3, [sl]
 80265c2:	2b2a      	cmp	r3, #42	; 0x2a
 80265c4:	d015      	beq.n	80265f2 <_svfiprintf_r+0xf6>
 80265c6:	9a07      	ldr	r2, [sp, #28]
 80265c8:	4654      	mov	r4, sl
 80265ca:	2000      	movs	r0, #0
 80265cc:	f04f 0c0a 	mov.w	ip, #10
 80265d0:	4621      	mov	r1, r4
 80265d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80265d6:	3b30      	subs	r3, #48	; 0x30
 80265d8:	2b09      	cmp	r3, #9
 80265da:	d94e      	bls.n	802667a <_svfiprintf_r+0x17e>
 80265dc:	b1b0      	cbz	r0, 802660c <_svfiprintf_r+0x110>
 80265de:	9207      	str	r2, [sp, #28]
 80265e0:	e014      	b.n	802660c <_svfiprintf_r+0x110>
 80265e2:	eba0 0308 	sub.w	r3, r0, r8
 80265e6:	fa09 f303 	lsl.w	r3, r9, r3
 80265ea:	4313      	orrs	r3, r2
 80265ec:	9304      	str	r3, [sp, #16]
 80265ee:	46a2      	mov	sl, r4
 80265f0:	e7d2      	b.n	8026598 <_svfiprintf_r+0x9c>
 80265f2:	9b03      	ldr	r3, [sp, #12]
 80265f4:	1d19      	adds	r1, r3, #4
 80265f6:	681b      	ldr	r3, [r3, #0]
 80265f8:	9103      	str	r1, [sp, #12]
 80265fa:	2b00      	cmp	r3, #0
 80265fc:	bfbb      	ittet	lt
 80265fe:	425b      	neglt	r3, r3
 8026600:	f042 0202 	orrlt.w	r2, r2, #2
 8026604:	9307      	strge	r3, [sp, #28]
 8026606:	9307      	strlt	r3, [sp, #28]
 8026608:	bfb8      	it	lt
 802660a:	9204      	strlt	r2, [sp, #16]
 802660c:	7823      	ldrb	r3, [r4, #0]
 802660e:	2b2e      	cmp	r3, #46	; 0x2e
 8026610:	d10c      	bne.n	802662c <_svfiprintf_r+0x130>
 8026612:	7863      	ldrb	r3, [r4, #1]
 8026614:	2b2a      	cmp	r3, #42	; 0x2a
 8026616:	d135      	bne.n	8026684 <_svfiprintf_r+0x188>
 8026618:	9b03      	ldr	r3, [sp, #12]
 802661a:	1d1a      	adds	r2, r3, #4
 802661c:	681b      	ldr	r3, [r3, #0]
 802661e:	9203      	str	r2, [sp, #12]
 8026620:	2b00      	cmp	r3, #0
 8026622:	bfb8      	it	lt
 8026624:	f04f 33ff 	movlt.w	r3, #4294967295
 8026628:	3402      	adds	r4, #2
 802662a:	9305      	str	r3, [sp, #20]
 802662c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80266f8 <_svfiprintf_r+0x1fc>
 8026630:	7821      	ldrb	r1, [r4, #0]
 8026632:	2203      	movs	r2, #3
 8026634:	4650      	mov	r0, sl
 8026636:	f7d9 fe1b 	bl	8000270 <memchr>
 802663a:	b140      	cbz	r0, 802664e <_svfiprintf_r+0x152>
 802663c:	2340      	movs	r3, #64	; 0x40
 802663e:	eba0 000a 	sub.w	r0, r0, sl
 8026642:	fa03 f000 	lsl.w	r0, r3, r0
 8026646:	9b04      	ldr	r3, [sp, #16]
 8026648:	4303      	orrs	r3, r0
 802664a:	3401      	adds	r4, #1
 802664c:	9304      	str	r3, [sp, #16]
 802664e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026652:	4826      	ldr	r0, [pc, #152]	; (80266ec <_svfiprintf_r+0x1f0>)
 8026654:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026658:	2206      	movs	r2, #6
 802665a:	f7d9 fe09 	bl	8000270 <memchr>
 802665e:	2800      	cmp	r0, #0
 8026660:	d038      	beq.n	80266d4 <_svfiprintf_r+0x1d8>
 8026662:	4b23      	ldr	r3, [pc, #140]	; (80266f0 <_svfiprintf_r+0x1f4>)
 8026664:	bb1b      	cbnz	r3, 80266ae <_svfiprintf_r+0x1b2>
 8026666:	9b03      	ldr	r3, [sp, #12]
 8026668:	3307      	adds	r3, #7
 802666a:	f023 0307 	bic.w	r3, r3, #7
 802666e:	3308      	adds	r3, #8
 8026670:	9303      	str	r3, [sp, #12]
 8026672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026674:	4433      	add	r3, r6
 8026676:	9309      	str	r3, [sp, #36]	; 0x24
 8026678:	e767      	b.n	802654a <_svfiprintf_r+0x4e>
 802667a:	fb0c 3202 	mla	r2, ip, r2, r3
 802667e:	460c      	mov	r4, r1
 8026680:	2001      	movs	r0, #1
 8026682:	e7a5      	b.n	80265d0 <_svfiprintf_r+0xd4>
 8026684:	2300      	movs	r3, #0
 8026686:	3401      	adds	r4, #1
 8026688:	9305      	str	r3, [sp, #20]
 802668a:	4619      	mov	r1, r3
 802668c:	f04f 0c0a 	mov.w	ip, #10
 8026690:	4620      	mov	r0, r4
 8026692:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026696:	3a30      	subs	r2, #48	; 0x30
 8026698:	2a09      	cmp	r2, #9
 802669a:	d903      	bls.n	80266a4 <_svfiprintf_r+0x1a8>
 802669c:	2b00      	cmp	r3, #0
 802669e:	d0c5      	beq.n	802662c <_svfiprintf_r+0x130>
 80266a0:	9105      	str	r1, [sp, #20]
 80266a2:	e7c3      	b.n	802662c <_svfiprintf_r+0x130>
 80266a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80266a8:	4604      	mov	r4, r0
 80266aa:	2301      	movs	r3, #1
 80266ac:	e7f0      	b.n	8026690 <_svfiprintf_r+0x194>
 80266ae:	ab03      	add	r3, sp, #12
 80266b0:	9300      	str	r3, [sp, #0]
 80266b2:	462a      	mov	r2, r5
 80266b4:	4b0f      	ldr	r3, [pc, #60]	; (80266f4 <_svfiprintf_r+0x1f8>)
 80266b6:	a904      	add	r1, sp, #16
 80266b8:	4638      	mov	r0, r7
 80266ba:	f3af 8000 	nop.w
 80266be:	1c42      	adds	r2, r0, #1
 80266c0:	4606      	mov	r6, r0
 80266c2:	d1d6      	bne.n	8026672 <_svfiprintf_r+0x176>
 80266c4:	89ab      	ldrh	r3, [r5, #12]
 80266c6:	065b      	lsls	r3, r3, #25
 80266c8:	f53f af2c 	bmi.w	8026524 <_svfiprintf_r+0x28>
 80266cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80266ce:	b01d      	add	sp, #116	; 0x74
 80266d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80266d4:	ab03      	add	r3, sp, #12
 80266d6:	9300      	str	r3, [sp, #0]
 80266d8:	462a      	mov	r2, r5
 80266da:	4b06      	ldr	r3, [pc, #24]	; (80266f4 <_svfiprintf_r+0x1f8>)
 80266dc:	a904      	add	r1, sp, #16
 80266de:	4638      	mov	r0, r7
 80266e0:	f000 f9d4 	bl	8026a8c <_printf_i>
 80266e4:	e7eb      	b.n	80266be <_svfiprintf_r+0x1c2>
 80266e6:	bf00      	nop
 80266e8:	0802d088 	.word	0x0802d088
 80266ec:	0802d092 	.word	0x0802d092
 80266f0:	00000000 	.word	0x00000000
 80266f4:	08026445 	.word	0x08026445
 80266f8:	0802d08e 	.word	0x0802d08e

080266fc <__sfputc_r>:
 80266fc:	6893      	ldr	r3, [r2, #8]
 80266fe:	3b01      	subs	r3, #1
 8026700:	2b00      	cmp	r3, #0
 8026702:	b410      	push	{r4}
 8026704:	6093      	str	r3, [r2, #8]
 8026706:	da08      	bge.n	802671a <__sfputc_r+0x1e>
 8026708:	6994      	ldr	r4, [r2, #24]
 802670a:	42a3      	cmp	r3, r4
 802670c:	db01      	blt.n	8026712 <__sfputc_r+0x16>
 802670e:	290a      	cmp	r1, #10
 8026710:	d103      	bne.n	802671a <__sfputc_r+0x1e>
 8026712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026716:	f7ff bb79 	b.w	8025e0c <__swbuf_r>
 802671a:	6813      	ldr	r3, [r2, #0]
 802671c:	1c58      	adds	r0, r3, #1
 802671e:	6010      	str	r0, [r2, #0]
 8026720:	7019      	strb	r1, [r3, #0]
 8026722:	4608      	mov	r0, r1
 8026724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026728:	4770      	bx	lr

0802672a <__sfputs_r>:
 802672a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802672c:	4606      	mov	r6, r0
 802672e:	460f      	mov	r7, r1
 8026730:	4614      	mov	r4, r2
 8026732:	18d5      	adds	r5, r2, r3
 8026734:	42ac      	cmp	r4, r5
 8026736:	d101      	bne.n	802673c <__sfputs_r+0x12>
 8026738:	2000      	movs	r0, #0
 802673a:	e007      	b.n	802674c <__sfputs_r+0x22>
 802673c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026740:	463a      	mov	r2, r7
 8026742:	4630      	mov	r0, r6
 8026744:	f7ff ffda 	bl	80266fc <__sfputc_r>
 8026748:	1c43      	adds	r3, r0, #1
 802674a:	d1f3      	bne.n	8026734 <__sfputs_r+0xa>
 802674c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026750 <_vfiprintf_r>:
 8026750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026754:	460d      	mov	r5, r1
 8026756:	b09d      	sub	sp, #116	; 0x74
 8026758:	4614      	mov	r4, r2
 802675a:	4698      	mov	r8, r3
 802675c:	4606      	mov	r6, r0
 802675e:	b118      	cbz	r0, 8026768 <_vfiprintf_r+0x18>
 8026760:	6983      	ldr	r3, [r0, #24]
 8026762:	b90b      	cbnz	r3, 8026768 <_vfiprintf_r+0x18>
 8026764:	f7ff fd4a 	bl	80261fc <__sinit>
 8026768:	4b89      	ldr	r3, [pc, #548]	; (8026990 <_vfiprintf_r+0x240>)
 802676a:	429d      	cmp	r5, r3
 802676c:	d11b      	bne.n	80267a6 <_vfiprintf_r+0x56>
 802676e:	6875      	ldr	r5, [r6, #4]
 8026770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026772:	07d9      	lsls	r1, r3, #31
 8026774:	d405      	bmi.n	8026782 <_vfiprintf_r+0x32>
 8026776:	89ab      	ldrh	r3, [r5, #12]
 8026778:	059a      	lsls	r2, r3, #22
 802677a:	d402      	bmi.n	8026782 <_vfiprintf_r+0x32>
 802677c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802677e:	f7ff fded 	bl	802635c <__retarget_lock_acquire_recursive>
 8026782:	89ab      	ldrh	r3, [r5, #12]
 8026784:	071b      	lsls	r3, r3, #28
 8026786:	d501      	bpl.n	802678c <_vfiprintf_r+0x3c>
 8026788:	692b      	ldr	r3, [r5, #16]
 802678a:	b9eb      	cbnz	r3, 80267c8 <_vfiprintf_r+0x78>
 802678c:	4629      	mov	r1, r5
 802678e:	4630      	mov	r0, r6
 8026790:	f7ff fb8e 	bl	8025eb0 <__swsetup_r>
 8026794:	b1c0      	cbz	r0, 80267c8 <_vfiprintf_r+0x78>
 8026796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026798:	07dc      	lsls	r4, r3, #31
 802679a:	d50e      	bpl.n	80267ba <_vfiprintf_r+0x6a>
 802679c:	f04f 30ff 	mov.w	r0, #4294967295
 80267a0:	b01d      	add	sp, #116	; 0x74
 80267a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267a6:	4b7b      	ldr	r3, [pc, #492]	; (8026994 <_vfiprintf_r+0x244>)
 80267a8:	429d      	cmp	r5, r3
 80267aa:	d101      	bne.n	80267b0 <_vfiprintf_r+0x60>
 80267ac:	68b5      	ldr	r5, [r6, #8]
 80267ae:	e7df      	b.n	8026770 <_vfiprintf_r+0x20>
 80267b0:	4b79      	ldr	r3, [pc, #484]	; (8026998 <_vfiprintf_r+0x248>)
 80267b2:	429d      	cmp	r5, r3
 80267b4:	bf08      	it	eq
 80267b6:	68f5      	ldreq	r5, [r6, #12]
 80267b8:	e7da      	b.n	8026770 <_vfiprintf_r+0x20>
 80267ba:	89ab      	ldrh	r3, [r5, #12]
 80267bc:	0598      	lsls	r0, r3, #22
 80267be:	d4ed      	bmi.n	802679c <_vfiprintf_r+0x4c>
 80267c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80267c2:	f7ff fdcc 	bl	802635e <__retarget_lock_release_recursive>
 80267c6:	e7e9      	b.n	802679c <_vfiprintf_r+0x4c>
 80267c8:	2300      	movs	r3, #0
 80267ca:	9309      	str	r3, [sp, #36]	; 0x24
 80267cc:	2320      	movs	r3, #32
 80267ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80267d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80267d6:	2330      	movs	r3, #48	; 0x30
 80267d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 802699c <_vfiprintf_r+0x24c>
 80267dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80267e0:	f04f 0901 	mov.w	r9, #1
 80267e4:	4623      	mov	r3, r4
 80267e6:	469a      	mov	sl, r3
 80267e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80267ec:	b10a      	cbz	r2, 80267f2 <_vfiprintf_r+0xa2>
 80267ee:	2a25      	cmp	r2, #37	; 0x25
 80267f0:	d1f9      	bne.n	80267e6 <_vfiprintf_r+0x96>
 80267f2:	ebba 0b04 	subs.w	fp, sl, r4
 80267f6:	d00b      	beq.n	8026810 <_vfiprintf_r+0xc0>
 80267f8:	465b      	mov	r3, fp
 80267fa:	4622      	mov	r2, r4
 80267fc:	4629      	mov	r1, r5
 80267fe:	4630      	mov	r0, r6
 8026800:	f7ff ff93 	bl	802672a <__sfputs_r>
 8026804:	3001      	adds	r0, #1
 8026806:	f000 80aa 	beq.w	802695e <_vfiprintf_r+0x20e>
 802680a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802680c:	445a      	add	r2, fp
 802680e:	9209      	str	r2, [sp, #36]	; 0x24
 8026810:	f89a 3000 	ldrb.w	r3, [sl]
 8026814:	2b00      	cmp	r3, #0
 8026816:	f000 80a2 	beq.w	802695e <_vfiprintf_r+0x20e>
 802681a:	2300      	movs	r3, #0
 802681c:	f04f 32ff 	mov.w	r2, #4294967295
 8026820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026824:	f10a 0a01 	add.w	sl, sl, #1
 8026828:	9304      	str	r3, [sp, #16]
 802682a:	9307      	str	r3, [sp, #28]
 802682c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026830:	931a      	str	r3, [sp, #104]	; 0x68
 8026832:	4654      	mov	r4, sl
 8026834:	2205      	movs	r2, #5
 8026836:	f814 1b01 	ldrb.w	r1, [r4], #1
 802683a:	4858      	ldr	r0, [pc, #352]	; (802699c <_vfiprintf_r+0x24c>)
 802683c:	f7d9 fd18 	bl	8000270 <memchr>
 8026840:	9a04      	ldr	r2, [sp, #16]
 8026842:	b9d8      	cbnz	r0, 802687c <_vfiprintf_r+0x12c>
 8026844:	06d1      	lsls	r1, r2, #27
 8026846:	bf44      	itt	mi
 8026848:	2320      	movmi	r3, #32
 802684a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802684e:	0713      	lsls	r3, r2, #28
 8026850:	bf44      	itt	mi
 8026852:	232b      	movmi	r3, #43	; 0x2b
 8026854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026858:	f89a 3000 	ldrb.w	r3, [sl]
 802685c:	2b2a      	cmp	r3, #42	; 0x2a
 802685e:	d015      	beq.n	802688c <_vfiprintf_r+0x13c>
 8026860:	9a07      	ldr	r2, [sp, #28]
 8026862:	4654      	mov	r4, sl
 8026864:	2000      	movs	r0, #0
 8026866:	f04f 0c0a 	mov.w	ip, #10
 802686a:	4621      	mov	r1, r4
 802686c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026870:	3b30      	subs	r3, #48	; 0x30
 8026872:	2b09      	cmp	r3, #9
 8026874:	d94e      	bls.n	8026914 <_vfiprintf_r+0x1c4>
 8026876:	b1b0      	cbz	r0, 80268a6 <_vfiprintf_r+0x156>
 8026878:	9207      	str	r2, [sp, #28]
 802687a:	e014      	b.n	80268a6 <_vfiprintf_r+0x156>
 802687c:	eba0 0308 	sub.w	r3, r0, r8
 8026880:	fa09 f303 	lsl.w	r3, r9, r3
 8026884:	4313      	orrs	r3, r2
 8026886:	9304      	str	r3, [sp, #16]
 8026888:	46a2      	mov	sl, r4
 802688a:	e7d2      	b.n	8026832 <_vfiprintf_r+0xe2>
 802688c:	9b03      	ldr	r3, [sp, #12]
 802688e:	1d19      	adds	r1, r3, #4
 8026890:	681b      	ldr	r3, [r3, #0]
 8026892:	9103      	str	r1, [sp, #12]
 8026894:	2b00      	cmp	r3, #0
 8026896:	bfbb      	ittet	lt
 8026898:	425b      	neglt	r3, r3
 802689a:	f042 0202 	orrlt.w	r2, r2, #2
 802689e:	9307      	strge	r3, [sp, #28]
 80268a0:	9307      	strlt	r3, [sp, #28]
 80268a2:	bfb8      	it	lt
 80268a4:	9204      	strlt	r2, [sp, #16]
 80268a6:	7823      	ldrb	r3, [r4, #0]
 80268a8:	2b2e      	cmp	r3, #46	; 0x2e
 80268aa:	d10c      	bne.n	80268c6 <_vfiprintf_r+0x176>
 80268ac:	7863      	ldrb	r3, [r4, #1]
 80268ae:	2b2a      	cmp	r3, #42	; 0x2a
 80268b0:	d135      	bne.n	802691e <_vfiprintf_r+0x1ce>
 80268b2:	9b03      	ldr	r3, [sp, #12]
 80268b4:	1d1a      	adds	r2, r3, #4
 80268b6:	681b      	ldr	r3, [r3, #0]
 80268b8:	9203      	str	r2, [sp, #12]
 80268ba:	2b00      	cmp	r3, #0
 80268bc:	bfb8      	it	lt
 80268be:	f04f 33ff 	movlt.w	r3, #4294967295
 80268c2:	3402      	adds	r4, #2
 80268c4:	9305      	str	r3, [sp, #20]
 80268c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80269ac <_vfiprintf_r+0x25c>
 80268ca:	7821      	ldrb	r1, [r4, #0]
 80268cc:	2203      	movs	r2, #3
 80268ce:	4650      	mov	r0, sl
 80268d0:	f7d9 fcce 	bl	8000270 <memchr>
 80268d4:	b140      	cbz	r0, 80268e8 <_vfiprintf_r+0x198>
 80268d6:	2340      	movs	r3, #64	; 0x40
 80268d8:	eba0 000a 	sub.w	r0, r0, sl
 80268dc:	fa03 f000 	lsl.w	r0, r3, r0
 80268e0:	9b04      	ldr	r3, [sp, #16]
 80268e2:	4303      	orrs	r3, r0
 80268e4:	3401      	adds	r4, #1
 80268e6:	9304      	str	r3, [sp, #16]
 80268e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80268ec:	482c      	ldr	r0, [pc, #176]	; (80269a0 <_vfiprintf_r+0x250>)
 80268ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80268f2:	2206      	movs	r2, #6
 80268f4:	f7d9 fcbc 	bl	8000270 <memchr>
 80268f8:	2800      	cmp	r0, #0
 80268fa:	d03f      	beq.n	802697c <_vfiprintf_r+0x22c>
 80268fc:	4b29      	ldr	r3, [pc, #164]	; (80269a4 <_vfiprintf_r+0x254>)
 80268fe:	bb1b      	cbnz	r3, 8026948 <_vfiprintf_r+0x1f8>
 8026900:	9b03      	ldr	r3, [sp, #12]
 8026902:	3307      	adds	r3, #7
 8026904:	f023 0307 	bic.w	r3, r3, #7
 8026908:	3308      	adds	r3, #8
 802690a:	9303      	str	r3, [sp, #12]
 802690c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802690e:	443b      	add	r3, r7
 8026910:	9309      	str	r3, [sp, #36]	; 0x24
 8026912:	e767      	b.n	80267e4 <_vfiprintf_r+0x94>
 8026914:	fb0c 3202 	mla	r2, ip, r2, r3
 8026918:	460c      	mov	r4, r1
 802691a:	2001      	movs	r0, #1
 802691c:	e7a5      	b.n	802686a <_vfiprintf_r+0x11a>
 802691e:	2300      	movs	r3, #0
 8026920:	3401      	adds	r4, #1
 8026922:	9305      	str	r3, [sp, #20]
 8026924:	4619      	mov	r1, r3
 8026926:	f04f 0c0a 	mov.w	ip, #10
 802692a:	4620      	mov	r0, r4
 802692c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026930:	3a30      	subs	r2, #48	; 0x30
 8026932:	2a09      	cmp	r2, #9
 8026934:	d903      	bls.n	802693e <_vfiprintf_r+0x1ee>
 8026936:	2b00      	cmp	r3, #0
 8026938:	d0c5      	beq.n	80268c6 <_vfiprintf_r+0x176>
 802693a:	9105      	str	r1, [sp, #20]
 802693c:	e7c3      	b.n	80268c6 <_vfiprintf_r+0x176>
 802693e:	fb0c 2101 	mla	r1, ip, r1, r2
 8026942:	4604      	mov	r4, r0
 8026944:	2301      	movs	r3, #1
 8026946:	e7f0      	b.n	802692a <_vfiprintf_r+0x1da>
 8026948:	ab03      	add	r3, sp, #12
 802694a:	9300      	str	r3, [sp, #0]
 802694c:	462a      	mov	r2, r5
 802694e:	4b16      	ldr	r3, [pc, #88]	; (80269a8 <_vfiprintf_r+0x258>)
 8026950:	a904      	add	r1, sp, #16
 8026952:	4630      	mov	r0, r6
 8026954:	f3af 8000 	nop.w
 8026958:	4607      	mov	r7, r0
 802695a:	1c78      	adds	r0, r7, #1
 802695c:	d1d6      	bne.n	802690c <_vfiprintf_r+0x1bc>
 802695e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026960:	07d9      	lsls	r1, r3, #31
 8026962:	d405      	bmi.n	8026970 <_vfiprintf_r+0x220>
 8026964:	89ab      	ldrh	r3, [r5, #12]
 8026966:	059a      	lsls	r2, r3, #22
 8026968:	d402      	bmi.n	8026970 <_vfiprintf_r+0x220>
 802696a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802696c:	f7ff fcf7 	bl	802635e <__retarget_lock_release_recursive>
 8026970:	89ab      	ldrh	r3, [r5, #12]
 8026972:	065b      	lsls	r3, r3, #25
 8026974:	f53f af12 	bmi.w	802679c <_vfiprintf_r+0x4c>
 8026978:	9809      	ldr	r0, [sp, #36]	; 0x24
 802697a:	e711      	b.n	80267a0 <_vfiprintf_r+0x50>
 802697c:	ab03      	add	r3, sp, #12
 802697e:	9300      	str	r3, [sp, #0]
 8026980:	462a      	mov	r2, r5
 8026982:	4b09      	ldr	r3, [pc, #36]	; (80269a8 <_vfiprintf_r+0x258>)
 8026984:	a904      	add	r1, sp, #16
 8026986:	4630      	mov	r0, r6
 8026988:	f000 f880 	bl	8026a8c <_printf_i>
 802698c:	e7e4      	b.n	8026958 <_vfiprintf_r+0x208>
 802698e:	bf00      	nop
 8026990:	0802d048 	.word	0x0802d048
 8026994:	0802d068 	.word	0x0802d068
 8026998:	0802d028 	.word	0x0802d028
 802699c:	0802d088 	.word	0x0802d088
 80269a0:	0802d092 	.word	0x0802d092
 80269a4:	00000000 	.word	0x00000000
 80269a8:	0802672b 	.word	0x0802672b
 80269ac:	0802d08e 	.word	0x0802d08e

080269b0 <_printf_common>:
 80269b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80269b4:	4616      	mov	r6, r2
 80269b6:	4699      	mov	r9, r3
 80269b8:	688a      	ldr	r2, [r1, #8]
 80269ba:	690b      	ldr	r3, [r1, #16]
 80269bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80269c0:	4293      	cmp	r3, r2
 80269c2:	bfb8      	it	lt
 80269c4:	4613      	movlt	r3, r2
 80269c6:	6033      	str	r3, [r6, #0]
 80269c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80269cc:	4607      	mov	r7, r0
 80269ce:	460c      	mov	r4, r1
 80269d0:	b10a      	cbz	r2, 80269d6 <_printf_common+0x26>
 80269d2:	3301      	adds	r3, #1
 80269d4:	6033      	str	r3, [r6, #0]
 80269d6:	6823      	ldr	r3, [r4, #0]
 80269d8:	0699      	lsls	r1, r3, #26
 80269da:	bf42      	ittt	mi
 80269dc:	6833      	ldrmi	r3, [r6, #0]
 80269de:	3302      	addmi	r3, #2
 80269e0:	6033      	strmi	r3, [r6, #0]
 80269e2:	6825      	ldr	r5, [r4, #0]
 80269e4:	f015 0506 	ands.w	r5, r5, #6
 80269e8:	d106      	bne.n	80269f8 <_printf_common+0x48>
 80269ea:	f104 0a19 	add.w	sl, r4, #25
 80269ee:	68e3      	ldr	r3, [r4, #12]
 80269f0:	6832      	ldr	r2, [r6, #0]
 80269f2:	1a9b      	subs	r3, r3, r2
 80269f4:	42ab      	cmp	r3, r5
 80269f6:	dc26      	bgt.n	8026a46 <_printf_common+0x96>
 80269f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80269fc:	1e13      	subs	r3, r2, #0
 80269fe:	6822      	ldr	r2, [r4, #0]
 8026a00:	bf18      	it	ne
 8026a02:	2301      	movne	r3, #1
 8026a04:	0692      	lsls	r2, r2, #26
 8026a06:	d42b      	bmi.n	8026a60 <_printf_common+0xb0>
 8026a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026a0c:	4649      	mov	r1, r9
 8026a0e:	4638      	mov	r0, r7
 8026a10:	47c0      	blx	r8
 8026a12:	3001      	adds	r0, #1
 8026a14:	d01e      	beq.n	8026a54 <_printf_common+0xa4>
 8026a16:	6823      	ldr	r3, [r4, #0]
 8026a18:	68e5      	ldr	r5, [r4, #12]
 8026a1a:	6832      	ldr	r2, [r6, #0]
 8026a1c:	f003 0306 	and.w	r3, r3, #6
 8026a20:	2b04      	cmp	r3, #4
 8026a22:	bf08      	it	eq
 8026a24:	1aad      	subeq	r5, r5, r2
 8026a26:	68a3      	ldr	r3, [r4, #8]
 8026a28:	6922      	ldr	r2, [r4, #16]
 8026a2a:	bf0c      	ite	eq
 8026a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026a30:	2500      	movne	r5, #0
 8026a32:	4293      	cmp	r3, r2
 8026a34:	bfc4      	itt	gt
 8026a36:	1a9b      	subgt	r3, r3, r2
 8026a38:	18ed      	addgt	r5, r5, r3
 8026a3a:	2600      	movs	r6, #0
 8026a3c:	341a      	adds	r4, #26
 8026a3e:	42b5      	cmp	r5, r6
 8026a40:	d11a      	bne.n	8026a78 <_printf_common+0xc8>
 8026a42:	2000      	movs	r0, #0
 8026a44:	e008      	b.n	8026a58 <_printf_common+0xa8>
 8026a46:	2301      	movs	r3, #1
 8026a48:	4652      	mov	r2, sl
 8026a4a:	4649      	mov	r1, r9
 8026a4c:	4638      	mov	r0, r7
 8026a4e:	47c0      	blx	r8
 8026a50:	3001      	adds	r0, #1
 8026a52:	d103      	bne.n	8026a5c <_printf_common+0xac>
 8026a54:	f04f 30ff 	mov.w	r0, #4294967295
 8026a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a5c:	3501      	adds	r5, #1
 8026a5e:	e7c6      	b.n	80269ee <_printf_common+0x3e>
 8026a60:	18e1      	adds	r1, r4, r3
 8026a62:	1c5a      	adds	r2, r3, #1
 8026a64:	2030      	movs	r0, #48	; 0x30
 8026a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026a6a:	4422      	add	r2, r4
 8026a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026a74:	3302      	adds	r3, #2
 8026a76:	e7c7      	b.n	8026a08 <_printf_common+0x58>
 8026a78:	2301      	movs	r3, #1
 8026a7a:	4622      	mov	r2, r4
 8026a7c:	4649      	mov	r1, r9
 8026a7e:	4638      	mov	r0, r7
 8026a80:	47c0      	blx	r8
 8026a82:	3001      	adds	r0, #1
 8026a84:	d0e6      	beq.n	8026a54 <_printf_common+0xa4>
 8026a86:	3601      	adds	r6, #1
 8026a88:	e7d9      	b.n	8026a3e <_printf_common+0x8e>
	...

08026a8c <_printf_i>:
 8026a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026a90:	7e0f      	ldrb	r7, [r1, #24]
 8026a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026a94:	2f78      	cmp	r7, #120	; 0x78
 8026a96:	4691      	mov	r9, r2
 8026a98:	4680      	mov	r8, r0
 8026a9a:	460c      	mov	r4, r1
 8026a9c:	469a      	mov	sl, r3
 8026a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8026aa2:	d807      	bhi.n	8026ab4 <_printf_i+0x28>
 8026aa4:	2f62      	cmp	r7, #98	; 0x62
 8026aa6:	d80a      	bhi.n	8026abe <_printf_i+0x32>
 8026aa8:	2f00      	cmp	r7, #0
 8026aaa:	f000 80d8 	beq.w	8026c5e <_printf_i+0x1d2>
 8026aae:	2f58      	cmp	r7, #88	; 0x58
 8026ab0:	f000 80a3 	beq.w	8026bfa <_printf_i+0x16e>
 8026ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8026abc:	e03a      	b.n	8026b34 <_printf_i+0xa8>
 8026abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8026ac2:	2b15      	cmp	r3, #21
 8026ac4:	d8f6      	bhi.n	8026ab4 <_printf_i+0x28>
 8026ac6:	a101      	add	r1, pc, #4	; (adr r1, 8026acc <_printf_i+0x40>)
 8026ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8026acc:	08026b25 	.word	0x08026b25
 8026ad0:	08026b39 	.word	0x08026b39
 8026ad4:	08026ab5 	.word	0x08026ab5
 8026ad8:	08026ab5 	.word	0x08026ab5
 8026adc:	08026ab5 	.word	0x08026ab5
 8026ae0:	08026ab5 	.word	0x08026ab5
 8026ae4:	08026b39 	.word	0x08026b39
 8026ae8:	08026ab5 	.word	0x08026ab5
 8026aec:	08026ab5 	.word	0x08026ab5
 8026af0:	08026ab5 	.word	0x08026ab5
 8026af4:	08026ab5 	.word	0x08026ab5
 8026af8:	08026c45 	.word	0x08026c45
 8026afc:	08026b69 	.word	0x08026b69
 8026b00:	08026c27 	.word	0x08026c27
 8026b04:	08026ab5 	.word	0x08026ab5
 8026b08:	08026ab5 	.word	0x08026ab5
 8026b0c:	08026c67 	.word	0x08026c67
 8026b10:	08026ab5 	.word	0x08026ab5
 8026b14:	08026b69 	.word	0x08026b69
 8026b18:	08026ab5 	.word	0x08026ab5
 8026b1c:	08026ab5 	.word	0x08026ab5
 8026b20:	08026c2f 	.word	0x08026c2f
 8026b24:	682b      	ldr	r3, [r5, #0]
 8026b26:	1d1a      	adds	r2, r3, #4
 8026b28:	681b      	ldr	r3, [r3, #0]
 8026b2a:	602a      	str	r2, [r5, #0]
 8026b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8026b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8026b34:	2301      	movs	r3, #1
 8026b36:	e0a3      	b.n	8026c80 <_printf_i+0x1f4>
 8026b38:	6820      	ldr	r0, [r4, #0]
 8026b3a:	6829      	ldr	r1, [r5, #0]
 8026b3c:	0606      	lsls	r6, r0, #24
 8026b3e:	f101 0304 	add.w	r3, r1, #4
 8026b42:	d50a      	bpl.n	8026b5a <_printf_i+0xce>
 8026b44:	680e      	ldr	r6, [r1, #0]
 8026b46:	602b      	str	r3, [r5, #0]
 8026b48:	2e00      	cmp	r6, #0
 8026b4a:	da03      	bge.n	8026b54 <_printf_i+0xc8>
 8026b4c:	232d      	movs	r3, #45	; 0x2d
 8026b4e:	4276      	negs	r6, r6
 8026b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026b54:	485e      	ldr	r0, [pc, #376]	; (8026cd0 <_printf_i+0x244>)
 8026b56:	230a      	movs	r3, #10
 8026b58:	e019      	b.n	8026b8e <_printf_i+0x102>
 8026b5a:	680e      	ldr	r6, [r1, #0]
 8026b5c:	602b      	str	r3, [r5, #0]
 8026b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8026b62:	bf18      	it	ne
 8026b64:	b236      	sxthne	r6, r6
 8026b66:	e7ef      	b.n	8026b48 <_printf_i+0xbc>
 8026b68:	682b      	ldr	r3, [r5, #0]
 8026b6a:	6820      	ldr	r0, [r4, #0]
 8026b6c:	1d19      	adds	r1, r3, #4
 8026b6e:	6029      	str	r1, [r5, #0]
 8026b70:	0601      	lsls	r1, r0, #24
 8026b72:	d501      	bpl.n	8026b78 <_printf_i+0xec>
 8026b74:	681e      	ldr	r6, [r3, #0]
 8026b76:	e002      	b.n	8026b7e <_printf_i+0xf2>
 8026b78:	0646      	lsls	r6, r0, #25
 8026b7a:	d5fb      	bpl.n	8026b74 <_printf_i+0xe8>
 8026b7c:	881e      	ldrh	r6, [r3, #0]
 8026b7e:	4854      	ldr	r0, [pc, #336]	; (8026cd0 <_printf_i+0x244>)
 8026b80:	2f6f      	cmp	r7, #111	; 0x6f
 8026b82:	bf0c      	ite	eq
 8026b84:	2308      	moveq	r3, #8
 8026b86:	230a      	movne	r3, #10
 8026b88:	2100      	movs	r1, #0
 8026b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8026b8e:	6865      	ldr	r5, [r4, #4]
 8026b90:	60a5      	str	r5, [r4, #8]
 8026b92:	2d00      	cmp	r5, #0
 8026b94:	bfa2      	ittt	ge
 8026b96:	6821      	ldrge	r1, [r4, #0]
 8026b98:	f021 0104 	bicge.w	r1, r1, #4
 8026b9c:	6021      	strge	r1, [r4, #0]
 8026b9e:	b90e      	cbnz	r6, 8026ba4 <_printf_i+0x118>
 8026ba0:	2d00      	cmp	r5, #0
 8026ba2:	d04d      	beq.n	8026c40 <_printf_i+0x1b4>
 8026ba4:	4615      	mov	r5, r2
 8026ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8026baa:	fb03 6711 	mls	r7, r3, r1, r6
 8026bae:	5dc7      	ldrb	r7, [r0, r7]
 8026bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8026bb4:	4637      	mov	r7, r6
 8026bb6:	42bb      	cmp	r3, r7
 8026bb8:	460e      	mov	r6, r1
 8026bba:	d9f4      	bls.n	8026ba6 <_printf_i+0x11a>
 8026bbc:	2b08      	cmp	r3, #8
 8026bbe:	d10b      	bne.n	8026bd8 <_printf_i+0x14c>
 8026bc0:	6823      	ldr	r3, [r4, #0]
 8026bc2:	07de      	lsls	r6, r3, #31
 8026bc4:	d508      	bpl.n	8026bd8 <_printf_i+0x14c>
 8026bc6:	6923      	ldr	r3, [r4, #16]
 8026bc8:	6861      	ldr	r1, [r4, #4]
 8026bca:	4299      	cmp	r1, r3
 8026bcc:	bfde      	ittt	le
 8026bce:	2330      	movle	r3, #48	; 0x30
 8026bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8026bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8026bd8:	1b52      	subs	r2, r2, r5
 8026bda:	6122      	str	r2, [r4, #16]
 8026bdc:	f8cd a000 	str.w	sl, [sp]
 8026be0:	464b      	mov	r3, r9
 8026be2:	aa03      	add	r2, sp, #12
 8026be4:	4621      	mov	r1, r4
 8026be6:	4640      	mov	r0, r8
 8026be8:	f7ff fee2 	bl	80269b0 <_printf_common>
 8026bec:	3001      	adds	r0, #1
 8026bee:	d14c      	bne.n	8026c8a <_printf_i+0x1fe>
 8026bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8026bf4:	b004      	add	sp, #16
 8026bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026bfa:	4835      	ldr	r0, [pc, #212]	; (8026cd0 <_printf_i+0x244>)
 8026bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8026c00:	6829      	ldr	r1, [r5, #0]
 8026c02:	6823      	ldr	r3, [r4, #0]
 8026c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8026c08:	6029      	str	r1, [r5, #0]
 8026c0a:	061d      	lsls	r5, r3, #24
 8026c0c:	d514      	bpl.n	8026c38 <_printf_i+0x1ac>
 8026c0e:	07df      	lsls	r7, r3, #31
 8026c10:	bf44      	itt	mi
 8026c12:	f043 0320 	orrmi.w	r3, r3, #32
 8026c16:	6023      	strmi	r3, [r4, #0]
 8026c18:	b91e      	cbnz	r6, 8026c22 <_printf_i+0x196>
 8026c1a:	6823      	ldr	r3, [r4, #0]
 8026c1c:	f023 0320 	bic.w	r3, r3, #32
 8026c20:	6023      	str	r3, [r4, #0]
 8026c22:	2310      	movs	r3, #16
 8026c24:	e7b0      	b.n	8026b88 <_printf_i+0xfc>
 8026c26:	6823      	ldr	r3, [r4, #0]
 8026c28:	f043 0320 	orr.w	r3, r3, #32
 8026c2c:	6023      	str	r3, [r4, #0]
 8026c2e:	2378      	movs	r3, #120	; 0x78
 8026c30:	4828      	ldr	r0, [pc, #160]	; (8026cd4 <_printf_i+0x248>)
 8026c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8026c36:	e7e3      	b.n	8026c00 <_printf_i+0x174>
 8026c38:	0659      	lsls	r1, r3, #25
 8026c3a:	bf48      	it	mi
 8026c3c:	b2b6      	uxthmi	r6, r6
 8026c3e:	e7e6      	b.n	8026c0e <_printf_i+0x182>
 8026c40:	4615      	mov	r5, r2
 8026c42:	e7bb      	b.n	8026bbc <_printf_i+0x130>
 8026c44:	682b      	ldr	r3, [r5, #0]
 8026c46:	6826      	ldr	r6, [r4, #0]
 8026c48:	6961      	ldr	r1, [r4, #20]
 8026c4a:	1d18      	adds	r0, r3, #4
 8026c4c:	6028      	str	r0, [r5, #0]
 8026c4e:	0635      	lsls	r5, r6, #24
 8026c50:	681b      	ldr	r3, [r3, #0]
 8026c52:	d501      	bpl.n	8026c58 <_printf_i+0x1cc>
 8026c54:	6019      	str	r1, [r3, #0]
 8026c56:	e002      	b.n	8026c5e <_printf_i+0x1d2>
 8026c58:	0670      	lsls	r0, r6, #25
 8026c5a:	d5fb      	bpl.n	8026c54 <_printf_i+0x1c8>
 8026c5c:	8019      	strh	r1, [r3, #0]
 8026c5e:	2300      	movs	r3, #0
 8026c60:	6123      	str	r3, [r4, #16]
 8026c62:	4615      	mov	r5, r2
 8026c64:	e7ba      	b.n	8026bdc <_printf_i+0x150>
 8026c66:	682b      	ldr	r3, [r5, #0]
 8026c68:	1d1a      	adds	r2, r3, #4
 8026c6a:	602a      	str	r2, [r5, #0]
 8026c6c:	681d      	ldr	r5, [r3, #0]
 8026c6e:	6862      	ldr	r2, [r4, #4]
 8026c70:	2100      	movs	r1, #0
 8026c72:	4628      	mov	r0, r5
 8026c74:	f7d9 fafc 	bl	8000270 <memchr>
 8026c78:	b108      	cbz	r0, 8026c7e <_printf_i+0x1f2>
 8026c7a:	1b40      	subs	r0, r0, r5
 8026c7c:	6060      	str	r0, [r4, #4]
 8026c7e:	6863      	ldr	r3, [r4, #4]
 8026c80:	6123      	str	r3, [r4, #16]
 8026c82:	2300      	movs	r3, #0
 8026c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8026c88:	e7a8      	b.n	8026bdc <_printf_i+0x150>
 8026c8a:	6923      	ldr	r3, [r4, #16]
 8026c8c:	462a      	mov	r2, r5
 8026c8e:	4649      	mov	r1, r9
 8026c90:	4640      	mov	r0, r8
 8026c92:	47d0      	blx	sl
 8026c94:	3001      	adds	r0, #1
 8026c96:	d0ab      	beq.n	8026bf0 <_printf_i+0x164>
 8026c98:	6823      	ldr	r3, [r4, #0]
 8026c9a:	079b      	lsls	r3, r3, #30
 8026c9c:	d413      	bmi.n	8026cc6 <_printf_i+0x23a>
 8026c9e:	68e0      	ldr	r0, [r4, #12]
 8026ca0:	9b03      	ldr	r3, [sp, #12]
 8026ca2:	4298      	cmp	r0, r3
 8026ca4:	bfb8      	it	lt
 8026ca6:	4618      	movlt	r0, r3
 8026ca8:	e7a4      	b.n	8026bf4 <_printf_i+0x168>
 8026caa:	2301      	movs	r3, #1
 8026cac:	4632      	mov	r2, r6
 8026cae:	4649      	mov	r1, r9
 8026cb0:	4640      	mov	r0, r8
 8026cb2:	47d0      	blx	sl
 8026cb4:	3001      	adds	r0, #1
 8026cb6:	d09b      	beq.n	8026bf0 <_printf_i+0x164>
 8026cb8:	3501      	adds	r5, #1
 8026cba:	68e3      	ldr	r3, [r4, #12]
 8026cbc:	9903      	ldr	r1, [sp, #12]
 8026cbe:	1a5b      	subs	r3, r3, r1
 8026cc0:	42ab      	cmp	r3, r5
 8026cc2:	dcf2      	bgt.n	8026caa <_printf_i+0x21e>
 8026cc4:	e7eb      	b.n	8026c9e <_printf_i+0x212>
 8026cc6:	2500      	movs	r5, #0
 8026cc8:	f104 0619 	add.w	r6, r4, #25
 8026ccc:	e7f5      	b.n	8026cba <_printf_i+0x22e>
 8026cce:	bf00      	nop
 8026cd0:	0802d099 	.word	0x0802d099
 8026cd4:	0802d0aa 	.word	0x0802d0aa

08026cd8 <_putc_r>:
 8026cd8:	b570      	push	{r4, r5, r6, lr}
 8026cda:	460d      	mov	r5, r1
 8026cdc:	4614      	mov	r4, r2
 8026cde:	4606      	mov	r6, r0
 8026ce0:	b118      	cbz	r0, 8026cea <_putc_r+0x12>
 8026ce2:	6983      	ldr	r3, [r0, #24]
 8026ce4:	b90b      	cbnz	r3, 8026cea <_putc_r+0x12>
 8026ce6:	f7ff fa89 	bl	80261fc <__sinit>
 8026cea:	4b1c      	ldr	r3, [pc, #112]	; (8026d5c <_putc_r+0x84>)
 8026cec:	429c      	cmp	r4, r3
 8026cee:	d124      	bne.n	8026d3a <_putc_r+0x62>
 8026cf0:	6874      	ldr	r4, [r6, #4]
 8026cf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026cf4:	07d8      	lsls	r0, r3, #31
 8026cf6:	d405      	bmi.n	8026d04 <_putc_r+0x2c>
 8026cf8:	89a3      	ldrh	r3, [r4, #12]
 8026cfa:	0599      	lsls	r1, r3, #22
 8026cfc:	d402      	bmi.n	8026d04 <_putc_r+0x2c>
 8026cfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026d00:	f7ff fb2c 	bl	802635c <__retarget_lock_acquire_recursive>
 8026d04:	68a3      	ldr	r3, [r4, #8]
 8026d06:	3b01      	subs	r3, #1
 8026d08:	2b00      	cmp	r3, #0
 8026d0a:	60a3      	str	r3, [r4, #8]
 8026d0c:	da05      	bge.n	8026d1a <_putc_r+0x42>
 8026d0e:	69a2      	ldr	r2, [r4, #24]
 8026d10:	4293      	cmp	r3, r2
 8026d12:	db1c      	blt.n	8026d4e <_putc_r+0x76>
 8026d14:	b2eb      	uxtb	r3, r5
 8026d16:	2b0a      	cmp	r3, #10
 8026d18:	d019      	beq.n	8026d4e <_putc_r+0x76>
 8026d1a:	6823      	ldr	r3, [r4, #0]
 8026d1c:	1c5a      	adds	r2, r3, #1
 8026d1e:	6022      	str	r2, [r4, #0]
 8026d20:	701d      	strb	r5, [r3, #0]
 8026d22:	b2ed      	uxtb	r5, r5
 8026d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026d26:	07da      	lsls	r2, r3, #31
 8026d28:	d405      	bmi.n	8026d36 <_putc_r+0x5e>
 8026d2a:	89a3      	ldrh	r3, [r4, #12]
 8026d2c:	059b      	lsls	r3, r3, #22
 8026d2e:	d402      	bmi.n	8026d36 <_putc_r+0x5e>
 8026d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026d32:	f7ff fb14 	bl	802635e <__retarget_lock_release_recursive>
 8026d36:	4628      	mov	r0, r5
 8026d38:	bd70      	pop	{r4, r5, r6, pc}
 8026d3a:	4b09      	ldr	r3, [pc, #36]	; (8026d60 <_putc_r+0x88>)
 8026d3c:	429c      	cmp	r4, r3
 8026d3e:	d101      	bne.n	8026d44 <_putc_r+0x6c>
 8026d40:	68b4      	ldr	r4, [r6, #8]
 8026d42:	e7d6      	b.n	8026cf2 <_putc_r+0x1a>
 8026d44:	4b07      	ldr	r3, [pc, #28]	; (8026d64 <_putc_r+0x8c>)
 8026d46:	429c      	cmp	r4, r3
 8026d48:	bf08      	it	eq
 8026d4a:	68f4      	ldreq	r4, [r6, #12]
 8026d4c:	e7d1      	b.n	8026cf2 <_putc_r+0x1a>
 8026d4e:	4629      	mov	r1, r5
 8026d50:	4622      	mov	r2, r4
 8026d52:	4630      	mov	r0, r6
 8026d54:	f7ff f85a 	bl	8025e0c <__swbuf_r>
 8026d58:	4605      	mov	r5, r0
 8026d5a:	e7e3      	b.n	8026d24 <_putc_r+0x4c>
 8026d5c:	0802d048 	.word	0x0802d048
 8026d60:	0802d068 	.word	0x0802d068
 8026d64:	0802d028 	.word	0x0802d028

08026d68 <__sread>:
 8026d68:	b510      	push	{r4, lr}
 8026d6a:	460c      	mov	r4, r1
 8026d6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026d70:	f000 f8cc 	bl	8026f0c <_read_r>
 8026d74:	2800      	cmp	r0, #0
 8026d76:	bfab      	itete	ge
 8026d78:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8026d7a:	89a3      	ldrhlt	r3, [r4, #12]
 8026d7c:	181b      	addge	r3, r3, r0
 8026d7e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8026d82:	bfac      	ite	ge
 8026d84:	6563      	strge	r3, [r4, #84]	; 0x54
 8026d86:	81a3      	strhlt	r3, [r4, #12]
 8026d88:	bd10      	pop	{r4, pc}

08026d8a <__swrite>:
 8026d8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026d8e:	461f      	mov	r7, r3
 8026d90:	898b      	ldrh	r3, [r1, #12]
 8026d92:	05db      	lsls	r3, r3, #23
 8026d94:	4605      	mov	r5, r0
 8026d96:	460c      	mov	r4, r1
 8026d98:	4616      	mov	r6, r2
 8026d9a:	d505      	bpl.n	8026da8 <__swrite+0x1e>
 8026d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026da0:	2302      	movs	r3, #2
 8026da2:	2200      	movs	r2, #0
 8026da4:	f000 f870 	bl	8026e88 <_lseek_r>
 8026da8:	89a3      	ldrh	r3, [r4, #12]
 8026daa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026dae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8026db2:	81a3      	strh	r3, [r4, #12]
 8026db4:	4632      	mov	r2, r6
 8026db6:	463b      	mov	r3, r7
 8026db8:	4628      	mov	r0, r5
 8026dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026dbe:	f000 b817 	b.w	8026df0 <_write_r>

08026dc2 <__sseek>:
 8026dc2:	b510      	push	{r4, lr}
 8026dc4:	460c      	mov	r4, r1
 8026dc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026dca:	f000 f85d 	bl	8026e88 <_lseek_r>
 8026dce:	1c43      	adds	r3, r0, #1
 8026dd0:	89a3      	ldrh	r3, [r4, #12]
 8026dd2:	bf15      	itete	ne
 8026dd4:	6560      	strne	r0, [r4, #84]	; 0x54
 8026dd6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8026dda:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8026dde:	81a3      	strheq	r3, [r4, #12]
 8026de0:	bf18      	it	ne
 8026de2:	81a3      	strhne	r3, [r4, #12]
 8026de4:	bd10      	pop	{r4, pc}

08026de6 <__sclose>:
 8026de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026dea:	f000 b81b 	b.w	8026e24 <_close_r>
	...

08026df0 <_write_r>:
 8026df0:	b538      	push	{r3, r4, r5, lr}
 8026df2:	4d07      	ldr	r5, [pc, #28]	; (8026e10 <_write_r+0x20>)
 8026df4:	4604      	mov	r4, r0
 8026df6:	4608      	mov	r0, r1
 8026df8:	4611      	mov	r1, r2
 8026dfa:	2200      	movs	r2, #0
 8026dfc:	602a      	str	r2, [r5, #0]
 8026dfe:	461a      	mov	r2, r3
 8026e00:	f7f0 fff9 	bl	8017df6 <_write>
 8026e04:	1c43      	adds	r3, r0, #1
 8026e06:	d102      	bne.n	8026e0e <_write_r+0x1e>
 8026e08:	682b      	ldr	r3, [r5, #0]
 8026e0a:	b103      	cbz	r3, 8026e0e <_write_r+0x1e>
 8026e0c:	6023      	str	r3, [r4, #0]
 8026e0e:	bd38      	pop	{r3, r4, r5, pc}
 8026e10:	200161d0 	.word	0x200161d0

08026e14 <abort>:
 8026e14:	b508      	push	{r3, lr}
 8026e16:	2006      	movs	r0, #6
 8026e18:	f000 f8b2 	bl	8026f80 <raise>
 8026e1c:	2001      	movs	r0, #1
 8026e1e:	f7f0 ffc3 	bl	8017da8 <_exit>
	...

08026e24 <_close_r>:
 8026e24:	b538      	push	{r3, r4, r5, lr}
 8026e26:	4d06      	ldr	r5, [pc, #24]	; (8026e40 <_close_r+0x1c>)
 8026e28:	2300      	movs	r3, #0
 8026e2a:	4604      	mov	r4, r0
 8026e2c:	4608      	mov	r0, r1
 8026e2e:	602b      	str	r3, [r5, #0]
 8026e30:	f7f0 fffd 	bl	8017e2e <_close>
 8026e34:	1c43      	adds	r3, r0, #1
 8026e36:	d102      	bne.n	8026e3e <_close_r+0x1a>
 8026e38:	682b      	ldr	r3, [r5, #0]
 8026e3a:	b103      	cbz	r3, 8026e3e <_close_r+0x1a>
 8026e3c:	6023      	str	r3, [r4, #0]
 8026e3e:	bd38      	pop	{r3, r4, r5, pc}
 8026e40:	200161d0 	.word	0x200161d0

08026e44 <_fstat_r>:
 8026e44:	b538      	push	{r3, r4, r5, lr}
 8026e46:	4d07      	ldr	r5, [pc, #28]	; (8026e64 <_fstat_r+0x20>)
 8026e48:	2300      	movs	r3, #0
 8026e4a:	4604      	mov	r4, r0
 8026e4c:	4608      	mov	r0, r1
 8026e4e:	4611      	mov	r1, r2
 8026e50:	602b      	str	r3, [r5, #0]
 8026e52:	f7f0 fff8 	bl	8017e46 <_fstat>
 8026e56:	1c43      	adds	r3, r0, #1
 8026e58:	d102      	bne.n	8026e60 <_fstat_r+0x1c>
 8026e5a:	682b      	ldr	r3, [r5, #0]
 8026e5c:	b103      	cbz	r3, 8026e60 <_fstat_r+0x1c>
 8026e5e:	6023      	str	r3, [r4, #0]
 8026e60:	bd38      	pop	{r3, r4, r5, pc}
 8026e62:	bf00      	nop
 8026e64:	200161d0 	.word	0x200161d0

08026e68 <_isatty_r>:
 8026e68:	b538      	push	{r3, r4, r5, lr}
 8026e6a:	4d06      	ldr	r5, [pc, #24]	; (8026e84 <_isatty_r+0x1c>)
 8026e6c:	2300      	movs	r3, #0
 8026e6e:	4604      	mov	r4, r0
 8026e70:	4608      	mov	r0, r1
 8026e72:	602b      	str	r3, [r5, #0]
 8026e74:	f7f0 fff7 	bl	8017e66 <_isatty>
 8026e78:	1c43      	adds	r3, r0, #1
 8026e7a:	d102      	bne.n	8026e82 <_isatty_r+0x1a>
 8026e7c:	682b      	ldr	r3, [r5, #0]
 8026e7e:	b103      	cbz	r3, 8026e82 <_isatty_r+0x1a>
 8026e80:	6023      	str	r3, [r4, #0]
 8026e82:	bd38      	pop	{r3, r4, r5, pc}
 8026e84:	200161d0 	.word	0x200161d0

08026e88 <_lseek_r>:
 8026e88:	b538      	push	{r3, r4, r5, lr}
 8026e8a:	4d07      	ldr	r5, [pc, #28]	; (8026ea8 <_lseek_r+0x20>)
 8026e8c:	4604      	mov	r4, r0
 8026e8e:	4608      	mov	r0, r1
 8026e90:	4611      	mov	r1, r2
 8026e92:	2200      	movs	r2, #0
 8026e94:	602a      	str	r2, [r5, #0]
 8026e96:	461a      	mov	r2, r3
 8026e98:	f7f0 fff0 	bl	8017e7c <_lseek>
 8026e9c:	1c43      	adds	r3, r0, #1
 8026e9e:	d102      	bne.n	8026ea6 <_lseek_r+0x1e>
 8026ea0:	682b      	ldr	r3, [r5, #0]
 8026ea2:	b103      	cbz	r3, 8026ea6 <_lseek_r+0x1e>
 8026ea4:	6023      	str	r3, [r4, #0]
 8026ea6:	bd38      	pop	{r3, r4, r5, pc}
 8026ea8:	200161d0 	.word	0x200161d0

08026eac <_realloc_r>:
 8026eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026eb0:	4680      	mov	r8, r0
 8026eb2:	4614      	mov	r4, r2
 8026eb4:	460e      	mov	r6, r1
 8026eb6:	b921      	cbnz	r1, 8026ec2 <_realloc_r+0x16>
 8026eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026ebc:	4611      	mov	r1, r2
 8026ebe:	f7fe bd59 	b.w	8025974 <_malloc_r>
 8026ec2:	b92a      	cbnz	r2, 8026ed0 <_realloc_r+0x24>
 8026ec4:	f7fe fcea 	bl	802589c <_free_r>
 8026ec8:	4625      	mov	r5, r4
 8026eca:	4628      	mov	r0, r5
 8026ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026ed0:	f000 f872 	bl	8026fb8 <_malloc_usable_size_r>
 8026ed4:	4284      	cmp	r4, r0
 8026ed6:	4607      	mov	r7, r0
 8026ed8:	d802      	bhi.n	8026ee0 <_realloc_r+0x34>
 8026eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8026ede:	d812      	bhi.n	8026f06 <_realloc_r+0x5a>
 8026ee0:	4621      	mov	r1, r4
 8026ee2:	4640      	mov	r0, r8
 8026ee4:	f7fe fd46 	bl	8025974 <_malloc_r>
 8026ee8:	4605      	mov	r5, r0
 8026eea:	2800      	cmp	r0, #0
 8026eec:	d0ed      	beq.n	8026eca <_realloc_r+0x1e>
 8026eee:	42bc      	cmp	r4, r7
 8026ef0:	4622      	mov	r2, r4
 8026ef2:	4631      	mov	r1, r6
 8026ef4:	bf28      	it	cs
 8026ef6:	463a      	movcs	r2, r7
 8026ef8:	f7fe fca0 	bl	802583c <memcpy>
 8026efc:	4631      	mov	r1, r6
 8026efe:	4640      	mov	r0, r8
 8026f00:	f7fe fccc 	bl	802589c <_free_r>
 8026f04:	e7e1      	b.n	8026eca <_realloc_r+0x1e>
 8026f06:	4635      	mov	r5, r6
 8026f08:	e7df      	b.n	8026eca <_realloc_r+0x1e>
	...

08026f0c <_read_r>:
 8026f0c:	b538      	push	{r3, r4, r5, lr}
 8026f0e:	4d07      	ldr	r5, [pc, #28]	; (8026f2c <_read_r+0x20>)
 8026f10:	4604      	mov	r4, r0
 8026f12:	4608      	mov	r0, r1
 8026f14:	4611      	mov	r1, r2
 8026f16:	2200      	movs	r2, #0
 8026f18:	602a      	str	r2, [r5, #0]
 8026f1a:	461a      	mov	r2, r3
 8026f1c:	f7f0 ff4e 	bl	8017dbc <_read>
 8026f20:	1c43      	adds	r3, r0, #1
 8026f22:	d102      	bne.n	8026f2a <_read_r+0x1e>
 8026f24:	682b      	ldr	r3, [r5, #0]
 8026f26:	b103      	cbz	r3, 8026f2a <_read_r+0x1e>
 8026f28:	6023      	str	r3, [r4, #0]
 8026f2a:	bd38      	pop	{r3, r4, r5, pc}
 8026f2c:	200161d0 	.word	0x200161d0

08026f30 <_raise_r>:
 8026f30:	291f      	cmp	r1, #31
 8026f32:	b538      	push	{r3, r4, r5, lr}
 8026f34:	4604      	mov	r4, r0
 8026f36:	460d      	mov	r5, r1
 8026f38:	d904      	bls.n	8026f44 <_raise_r+0x14>
 8026f3a:	2316      	movs	r3, #22
 8026f3c:	6003      	str	r3, [r0, #0]
 8026f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8026f42:	bd38      	pop	{r3, r4, r5, pc}
 8026f44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8026f46:	b112      	cbz	r2, 8026f4e <_raise_r+0x1e>
 8026f48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026f4c:	b94b      	cbnz	r3, 8026f62 <_raise_r+0x32>
 8026f4e:	4620      	mov	r0, r4
 8026f50:	f000 f830 	bl	8026fb4 <_getpid_r>
 8026f54:	462a      	mov	r2, r5
 8026f56:	4601      	mov	r1, r0
 8026f58:	4620      	mov	r0, r4
 8026f5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026f5e:	f000 b817 	b.w	8026f90 <_kill_r>
 8026f62:	2b01      	cmp	r3, #1
 8026f64:	d00a      	beq.n	8026f7c <_raise_r+0x4c>
 8026f66:	1c59      	adds	r1, r3, #1
 8026f68:	d103      	bne.n	8026f72 <_raise_r+0x42>
 8026f6a:	2316      	movs	r3, #22
 8026f6c:	6003      	str	r3, [r0, #0]
 8026f6e:	2001      	movs	r0, #1
 8026f70:	e7e7      	b.n	8026f42 <_raise_r+0x12>
 8026f72:	2400      	movs	r4, #0
 8026f74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8026f78:	4628      	mov	r0, r5
 8026f7a:	4798      	blx	r3
 8026f7c:	2000      	movs	r0, #0
 8026f7e:	e7e0      	b.n	8026f42 <_raise_r+0x12>

08026f80 <raise>:
 8026f80:	4b02      	ldr	r3, [pc, #8]	; (8026f8c <raise+0xc>)
 8026f82:	4601      	mov	r1, r0
 8026f84:	6818      	ldr	r0, [r3, #0]
 8026f86:	f7ff bfd3 	b.w	8026f30 <_raise_r>
 8026f8a:	bf00      	nop
 8026f8c:	20000340 	.word	0x20000340

08026f90 <_kill_r>:
 8026f90:	b538      	push	{r3, r4, r5, lr}
 8026f92:	4d07      	ldr	r5, [pc, #28]	; (8026fb0 <_kill_r+0x20>)
 8026f94:	2300      	movs	r3, #0
 8026f96:	4604      	mov	r4, r0
 8026f98:	4608      	mov	r0, r1
 8026f9a:	4611      	mov	r1, r2
 8026f9c:	602b      	str	r3, [r5, #0]
 8026f9e:	f7f0 fef1 	bl	8017d84 <_kill>
 8026fa2:	1c43      	adds	r3, r0, #1
 8026fa4:	d102      	bne.n	8026fac <_kill_r+0x1c>
 8026fa6:	682b      	ldr	r3, [r5, #0]
 8026fa8:	b103      	cbz	r3, 8026fac <_kill_r+0x1c>
 8026faa:	6023      	str	r3, [r4, #0]
 8026fac:	bd38      	pop	{r3, r4, r5, pc}
 8026fae:	bf00      	nop
 8026fb0:	200161d0 	.word	0x200161d0

08026fb4 <_getpid_r>:
 8026fb4:	f7f0 bede 	b.w	8017d74 <_getpid>

08026fb8 <_malloc_usable_size_r>:
 8026fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026fbc:	1f18      	subs	r0, r3, #4
 8026fbe:	2b00      	cmp	r3, #0
 8026fc0:	bfbc      	itt	lt
 8026fc2:	580b      	ldrlt	r3, [r1, r0]
 8026fc4:	18c0      	addlt	r0, r0, r3
 8026fc6:	4770      	bx	lr

08026fc8 <_init>:
 8026fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026fca:	bf00      	nop
 8026fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026fce:	bc08      	pop	{r3}
 8026fd0:	469e      	mov	lr, r3
 8026fd2:	4770      	bx	lr

08026fd4 <_fini>:
 8026fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026fd6:	bf00      	nop
 8026fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8026fda:	bc08      	pop	{r3}
 8026fdc:	469e      	mov	lr, r3
 8026fde:	4770      	bx	lr
