
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027344  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005e08  08027544  08027544  00037544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d34c  0802d34c  000404e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802d34c  0802d34c  0003d34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d354  0802d354  000404e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d354  0802d354  0003d354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802d358  0802d358  0003d358  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003a4  20000000  0802d35c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200003a4  0802d700  000403a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000444  0802d7a0  00040444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00015d9c  200004e4  0802d840  000404e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20016280  0802d840  00046280  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a549  00000000  00000000  00040512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008875  00000000  00000000  0007aa5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002560  00000000  00000000  000832d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002270  00000000  00000000  00085830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00044171  00000000  00000000  00087aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0004916a  00000000  00000000  000cbc11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c559  00000000  00000000  00114d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002512d4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a37c  00000000  00000000  00251324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200004e4 	.word	0x200004e4
 800021c:	00000000 	.word	0x00000000
 8000220:	0802752c 	.word	0x0802752c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200004e8 	.word	0x200004e8
 800023c:	0802752c 	.word	0x0802752c

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000fc4 	.word	0x20000fc4
 8000a70:	08027544 	.word	0x08027544
 8000a74:	08027550 	.word	0x08027550
 8000a78:	08027560 	.word	0x08027560
 8000a7c:	08027570 	.word	0x08027570
 8000a80:	08027584 	.word	0x08027584
 8000a84:	08027598 	.word	0x08027598
 8000a88:	080275ac 	.word	0x080275ac
 8000a8c:	080275b8 	.word	0x080275b8
 8000a90:	200013ac 	.word	0x200013ac

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01e f849 	bl	801eb3c <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f025 fb75 	bl	80261a4 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000dc20 	.word	0x2000dc20
 8000ac8:	20000340 	.word	0x20000340

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f01a ff1d 	bl	801b91c <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f01a ff0d 	bl	801b91c <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f01a fefc 	bl	801b91c <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000fbc 	.word	0x20000fbc
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f025 f938 	bl	8025df0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00f fc37 	bl	80103f8 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f017 ffd5 	bl	8018b44 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f017 ff84 	bl	8018ac4 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f025 f9ee 	bl	8025fc0 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f025 fa62 	bl	80260f8 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f025 f9b8 	bl	8025fc0 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f025 fa33 	bl	80260f8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f025 f986 	bl	8025fc0 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f025 fa1f 	bl	80260f8 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f025 f969 	bl	8025fc0 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f025 f95b 	bl	8025fc0 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f025 f9f4 	bl	80260f8 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f025 f93b 	bl	8025fc0 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f025 f92d 	bl	8025fc0 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f025 f9c6 	bl	80260f8 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f025 f908 	bl	8025fc0 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f025 f8e6 	bl	8025fc0 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f025 f8cd 	bl	8025fc0 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f025 f8bf 	bl	8025fc0 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f025 f8b1 	bl	8025fc0 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f025 f949 	bl	80260f8 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f010 f873 	bl	8010f60 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000bfdc 	.word	0x2000bfdc
 8000e88:	080275c0 	.word	0x080275c0
 8000e8c:	20000bba 	.word	0x20000bba
 8000e90:	080275d8 	.word	0x080275d8
 8000e94:	20000ff6 	.word	0x20000ff6
 8000e98:	08027618 	.word	0x08027618
 8000e9c:	20000bbb 	.word	0x20000bbb
 8000ea0:	0802762c 	.word	0x0802762c
 8000ea4:	20001028 	.word	0x20001028
 8000ea8:	08027648 	.word	0x08027648
 8000eac:	08027664 	.word	0x08027664
 8000eb0:	2000308c 	.word	0x2000308c
 8000eb4:	08027674 	.word	0x08027674
 8000eb8:	2000105a 	.word	0x2000105a
 8000ebc:	08027688 	.word	0x08027688
 8000ec0:	2000108c 	.word	0x2000108c
 8000ec4:	08027698 	.word	0x08027698
 8000ec8:	200010be 	.word	0x200010be
 8000ecc:	200010f0 	.word	0x200010f0
 8000ed0:	20001122 	.word	0x20001122
 8000ed4:	080276b4 	.word	0x080276b4
 8000ed8:	20001154 	.word	0x20001154
 8000edc:	080276c4 	.word	0x080276c4
 8000ee0:	20001186 	.word	0x20001186

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f024 ff30 	bl	8025d80 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000fc4 	.word	0x20000fc4
 8000f48:	200013ac 	.word	0x200013ac

08000f4c <CheckEIPC_DAT_CRC>:
		printf("%s\n",Commands_List[Traverser]);
	}
}

void CheckEIPC_DAT_CRC(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	static uint32_t CheckClk = 0;

	if(HAL_Elaps_Ticks(CheckClk) > FOUR_SEC)
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f00f fa4f 	bl	80103f8 <HAL_Elaps_Ticks>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000f60:	d921      	bls.n	8000fa6 <CheckEIPC_DAT_CRC+0x5a>
	{
		if((DatCrcXchangeSelf_st.App_CRC != DatCrcXchangeOther_st.App_CRC) && (DatCrcXchangeOther_st.App_CRC != 0))
 8000f62:	4b13      	ldr	r3, [pc, #76]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f64:	881a      	ldrh	r2, [r3, #0]
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d012      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f70:	881b      	ldrh	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d00e      	beq.n	8000f94 <CheckEIPC_DAT_CRC+0x48>
		{
			printf("\nEIPC's are not in Sync.....!!!!!\n");
 8000f76:	4810      	ldr	r0, [pc, #64]	; (8000fb8 <CheckEIPC_DAT_CRC+0x6c>)
 8000f78:	f025 f8be 	bl	80260f8 <puts>
			printf("Self CRC:%04X\n",DatCrcXchangeSelf_st.App_CRC);
 8000f7c:	4b0c      	ldr	r3, [pc, #48]	; (8000fb0 <CheckEIPC_DAT_CRC+0x64>)
 8000f7e:	881b      	ldrh	r3, [r3, #0]
 8000f80:	4619      	mov	r1, r3
 8000f82:	480e      	ldr	r0, [pc, #56]	; (8000fbc <CheckEIPC_DAT_CRC+0x70>)
 8000f84:	f025 f81c 	bl	8025fc0 <iprintf>
			printf("Other CRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <CheckEIPC_DAT_CRC+0x68>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <CheckEIPC_DAT_CRC+0x74>)
 8000f90:	f025 f816 	bl	8025fc0 <iprintf>
		}


#ifdef EI_1
		TransmitCanPkt(DAT_CRC_EXCHANGE_1);
 8000f94:	f240 2009 	movw	r0, #521	; 0x209
 8000f98:	f00f ffe2 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(DAT_CRC_EXCHANGE_2);
#endif

		CheckClk = HAL_GetTick();
 8000f9c:	f018 f8fa 	bl	8019194 <HAL_GetTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	4a02      	ldr	r2, [pc, #8]	; (8000fac <CheckEIPC_DAT_CRC+0x60>)
 8000fa4:	6013      	str	r3, [r2, #0]

	}
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200013b0 	.word	0x200013b0
 8000fb0:	20000bb4 	.word	0x20000bb4
 8000fb4:	20000bb8 	.word	0x20000bb8
 8000fb8:	08027700 	.word	0x08027700
 8000fbc:	08027724 	.word	0x08027724
 8000fc0:	08027734 	.word	0x08027734

08000fc4 <Check_OnlineDiag_OFC_Modem>:
		0x40
};


void Check_OnlineDiag_OFC_Modem(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	static unsigned int ui_Online_DigChkTics;
	if(HAL_Elaps_Ticks(ui_Online_DigChkTics) > (SEVEN*ONE_SEC))           // wait for 30 Sec
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00f fa13 	bl	80103f8 <HAL_Elaps_Ticks>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	f641 3258 	movw	r2, #7000	; 0x1b58
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d906      	bls.n	8000fea <Check_OnlineDiag_OFC_Modem+0x26>
	{
		Check_Online_Dignostic_RIU();                                //Checking the online dignostic status of network of OFC modem
 8000fdc:	f000 f80a 	bl	8000ff4 <Check_Online_Dignostic_RIU>
		ui_Online_DigChkTics = HAL_GetTick();
 8000fe0:	f018 f8d8 	bl	8019194 <HAL_GetTick>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	4a02      	ldr	r2, [pc, #8]	; (8000ff0 <Check_OnlineDiag_OFC_Modem+0x2c>)
 8000fe8:	6013      	str	r3, [r2, #0]
	}
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20002370 	.word	0x20002370

08000ff4 <Check_Online_Dignostic_RIU>:

void Check_Online_Dignostic_RIU(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
	//static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Failure_check_flag,Flag = 4,suc_Hold_Flag =1;
	static unsigned char CAN_Trans_flag,temp1,temp2,temp3,Flag = 4,suc_Hold_Flag =1;
	unsigned char index,insert_index = 0,check_index = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71bb      	strb	r3, [r7, #6]
 8000ffe:	2300      	movs	r3, #0
 8001000:	717b      	strb	r3, [r7, #5]
	for(index = 0;index< 31; index++)
 8001002:	2300      	movs	r3, #0
 8001004:	71fb      	strb	r3, [r7, #7]
 8001006:	e069      	b.n	80010dc <Check_Online_Dignostic_RIU+0xe8>
	{
		if(Online_diag_flag[index] == 0)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d108      	bne.n	8001024 <Check_Online_Dignostic_RIU+0x30>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],0);
 8001012:	79bb      	ldrb	r3, [r7, #6]
 8001014:	b298      	uxth	r0, r3
 8001016:	797b      	ldrb	r3, [r7, #5]
 8001018:	4a6c      	ldr	r2, [pc, #432]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800101a:	441a      	add	r2, r3
 800101c:	2300      	movs	r3, #0
 800101e:	2102      	movs	r1, #2
 8001020:	f7ff fb84 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 1)
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a68      	ldr	r2, [pc, #416]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001028:	5cd3      	ldrb	r3, [r2, r3]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d108      	bne.n	8001040 <Check_Online_Dignostic_RIU+0x4c>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],1);
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	b298      	uxth	r0, r3
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	4a65      	ldr	r2, [pc, #404]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001036:	441a      	add	r2, r3
 8001038:	2301      	movs	r3, #1
 800103a:	2102      	movs	r1, #2
 800103c:	f7ff fb76 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 2)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	4a61      	ldr	r2, [pc, #388]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001044:	5cd3      	ldrb	r3, [r2, r3]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d108      	bne.n	800105c <Check_Online_Dignostic_RIU+0x68>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],2);
 800104a:	79bb      	ldrb	r3, [r7, #6]
 800104c:	b298      	uxth	r0, r3
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	4a5e      	ldr	r2, [pc, #376]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 8001052:	441a      	add	r2, r3
 8001054:	2302      	movs	r3, #2
 8001056:	2102      	movs	r1, #2
 8001058:	f7ff fb68 	bl	800072c <InsertBits>
		}
		if(Online_diag_flag[index] == 3)
 800105c:	79fb      	ldrb	r3, [r7, #7]
 800105e:	4a5a      	ldr	r2, [pc, #360]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001060:	5cd3      	ldrb	r3, [r2, r3]
 8001062:	2b03      	cmp	r3, #3
 8001064:	d108      	bne.n	8001078 <Check_Online_Dignostic_RIU+0x84>
		{
			InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b298      	uxth	r0, r3
 800106a:	797b      	ldrb	r3, [r7, #5]
 800106c:	4a57      	ldr	r2, [pc, #348]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800106e:	441a      	add	r2, r3
 8001070:	2303      	movs	r3, #3
 8001072:	2102      	movs	r1, #2
 8001074:	f7ff fb5a 	bl	800072c <InsertBits>

		}
		if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (FIFTEEN*ONE_SEC))
 8001078:	4b55      	ldr	r3, [pc, #340]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f00f f9bb 	bl	80103f8 <HAL_Elaps_Ticks>
 8001082:	4603      	mov	r3, r0
 8001084:	f643 2298 	movw	r2, #15000	; 0x3a98
 8001088:	4293      	cmp	r3, r2
 800108a:	d913      	bls.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
		{
			if(Online_diag_flag[index] > 0)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	4a4e      	ldr	r2, [pc, #312]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 8001090:	5cd3      	ldrb	r3, [r2, r3]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d00e      	beq.n	80010b4 <Check_Online_Dignostic_RIU+0xc0>
			{
				InsertBits(insert_index,2, &Online_Diag_var.Online_Diag_Buf[check_index],3);
 8001096:	79bb      	ldrb	r3, [r7, #6]
 8001098:	b298      	uxth	r0, r3
 800109a:	797b      	ldrb	r3, [r7, #5]
 800109c:	4a4b      	ldr	r2, [pc, #300]	; (80011cc <Check_Online_Dignostic_RIU+0x1d8>)
 800109e:	441a      	add	r2, r3
 80010a0:	2303      	movs	r3, #3
 80010a2:	2102      	movs	r1, #2
 80010a4:	f7ff fb42 	bl	800072c <InsertBits>
				ofc_flag1 = 1;
 80010a8:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]
				//	ofc_flag1 = 1;
				printf("##############################################Both fiber link failure ocuired$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$");
 80010ae:	484a      	ldr	r0, [pc, #296]	; (80011d8 <Check_Online_Dignostic_RIU+0x1e4>)
 80010b0:	f024 ff86 	bl	8025fc0 <iprintf>

			}
		}
		insert_index =	insert_index + 2;
 80010b4:	79bb      	ldrb	r3, [r7, #6]
 80010b6:	3302      	adds	r3, #2
 80010b8:	71bb      	strb	r3, [r7, #6]
		if(insert_index == 8)
 80010ba:	79bb      	ldrb	r3, [r7, #6]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d104      	bne.n	80010ca <Check_Online_Dignostic_RIU+0xd6>
		{
			insert_index = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71bb      	strb	r3, [r7, #6]
			check_index++;
 80010c4:	797b      	ldrb	r3, [r7, #5]
 80010c6:	3301      	adds	r3, #1
 80010c8:	717b      	strb	r3, [r7, #5]
		}
		if((check_index == 7)&&(insert_index == 6))
 80010ca:	797b      	ldrb	r3, [r7, #5]
 80010cc:	2b07      	cmp	r3, #7
 80010ce:	d102      	bne.n	80010d6 <Check_Online_Dignostic_RIU+0xe2>
 80010d0:	79bb      	ldrb	r3, [r7, #6]
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d006      	beq.n	80010e4 <Check_Online_Dignostic_RIU+0xf0>
	for(index = 0;index< 31; index++)
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	3301      	adds	r3, #1
 80010da:	71fb      	strb	r3, [r7, #7]
 80010dc:	79fb      	ldrb	r3, [r7, #7]
 80010de:	2b1e      	cmp	r3, #30
 80010e0:	d992      	bls.n	8001008 <Check_Online_Dignostic_RIU+0x14>
 80010e2:	e000      	b.n	80010e6 <Check_Online_Dignostic_RIU+0xf2>
		{
			break;
 80010e4:	bf00      	nop
		}
	}
	for(index = 0;index< 31; index++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e010      	b.n	800110e <Check_Online_Dignostic_RIU+0x11a>
	{
		if((Online_diag_flag[index] > 0)&&(Online_diag_flag[index] < 4))
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010f0:	5cd3      	ldrb	r3, [r2, r3]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d008      	beq.n	8001108 <Check_Online_Dignostic_RIU+0x114>
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	4a33      	ldr	r2, [pc, #204]	; (80011c8 <Check_Online_Dignostic_RIU+0x1d4>)
 80010fa:	5cd3      	ldrb	r3, [r2, r3]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d803      	bhi.n	8001108 <Check_Online_Dignostic_RIU+0x114>
		{
			temp1 = index;
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	7013      	strb	r3, [r2, #0]
			break;
 8001106:	e005      	b.n	8001114 <Check_Online_Dignostic_RIU+0x120>
	for(index = 0;index< 31; index++)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	3301      	adds	r3, #1
 800110c:	71fb      	strb	r3, [r7, #7]
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b1e      	cmp	r3, #30
 8001112:	d9eb      	bls.n	80010ec <Check_Online_Dignostic_RIU+0xf8>
		}
	}
	temp2 = temp1;
 8001114:	4b31      	ldr	r3, [pc, #196]	; (80011dc <Check_Online_Dignostic_RIU+0x1e8>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b31      	ldr	r3, [pc, #196]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 800111a:	701a      	strb	r2, [r3, #0]
	temp3 = index;
 800111c:	4a31      	ldr	r2, [pc, #196]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800111e:	79fb      	ldrb	r3, [r7, #7]
 8001120:	7013      	strb	r3, [r2, #0]

	if(temp2 != temp3)
 8001122:	4b2f      	ldr	r3, [pc, #188]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b2f      	ldr	r3, [pc, #188]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	429a      	cmp	r2, r3
 800112c:	d019      	beq.n	8001162 <Check_Online_Dignostic_RIU+0x16e>
	{
		printf("\n***********************FIBER LINK OK******************************\n");
 800112e:	482e      	ldr	r0, [pc, #184]	; (80011e8 <Check_Online_Dignostic_RIU+0x1f4>)
 8001130:	f024 ffe2 	bl	80260f8 <puts>

		//	ofc_flag2 =0;
		suc_Hold_Flag = 1;
 8001134:	4b2d      	ldr	r3, [pc, #180]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
		Failure_check_flag++;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	b2da      	uxtb	r2, r3
 8001142:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001144:	701a      	strb	r2, [r3, #0]
		if(ofc_flag1 > 4)
 8001146:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	2b04      	cmp	r3, #4
 800114c:	d90c      	bls.n	8001168 <Check_Online_Dignostic_RIU+0x174>
		{
			ofc_flag1 =0;
 800114e:	4b21      	ldr	r3, [pc, #132]	; (80011d4 <Check_Online_Dignostic_RIU+0x1e0>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
			Failure_check_flag =4;
 8001154:	4b26      	ldr	r3, [pc, #152]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001156:	2204      	movs	r2, #4
 8001158:	701a      	strb	r2, [r3, #0]
			printf("\n****************************ASSIGNED***********************\n");
 800115a:	4826      	ldr	r0, [pc, #152]	; (80011f4 <Check_Online_Dignostic_RIU+0x200>)
 800115c:	f024 ffcc 	bl	80260f8 <puts>
 8001160:	e002      	b.n	8001168 <Check_Online_Dignostic_RIU+0x174>
			 */
		}

	}
	else
		Failure_check_flag = 0;
 8001162:	4b23      	ldr	r3, [pc, #140]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
	if(Failure_check_flag == 250)
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2bfa      	cmp	r3, #250	; 0xfa
 800116e:	d102      	bne.n	8001176 <Check_Online_Dignostic_RIU+0x182>
	{
		Failure_check_flag = 6;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <Check_Online_Dignostic_RIU+0x1fc>)
 8001172:	2206      	movs	r2, #6
 8001174:	701a      	strb	r2, [r3, #0]
	}

	if(temp2 == temp3)
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <Check_Online_Dignostic_RIU+0x1ec>)
 8001178:	781a      	ldrb	r2, [r3, #0]
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <Check_Online_Dignostic_RIU+0x1f0>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	429a      	cmp	r2, r3
 8001180:	d142      	bne.n	8001208 <Check_Online_Dignostic_RIU+0x214>
	{
		CAN_Trans_flag++;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <Check_Online_Dignostic_RIU+0x204>)
 800118c:	701a      	strb	r2, [r3, #0]
		printf("\n************************FIBER LINK FAIL*****************************\n");
 800118e:	481b      	ldr	r0, [pc, #108]	; (80011fc <Check_Online_Dignostic_RIU+0x208>)
 8001190:	f024 ffb2 	bl	80260f8 <puts>
		//		Online_diag_flag[index] = 3; //raviteja

		if((4 == Flag)&&(1 == suc_Hold_Flag))
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <Check_Online_Dignostic_RIU+0x20c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b04      	cmp	r3, #4
 800119a:	d138      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 800119c:	4b13      	ldr	r3, [pc, #76]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d134      	bne.n	800120e <Check_Online_Dignostic_RIU+0x21a>
		{
			if(HAL_Elaps_Ticks(sui_failure_determine_clock) > (12*ONE_SEC))
 80011a4:	4b0a      	ldr	r3, [pc, #40]	; (80011d0 <Check_Online_Dignostic_RIU+0x1dc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4618      	mov	r0, r3
 80011aa:	f00f f925 	bl	80103f8 <HAL_Elaps_Ticks>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f642 62e0 	movw	r2, #12000	; 0x2ee0
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d92a      	bls.n	800120e <Check_Online_Dignostic_RIU+0x21a>
			{
				suc_Hold_Flag = 0;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <Check_Online_Dignostic_RIU+0x1f8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	701a      	strb	r2, [r3, #0]
				printf("\n Sending the packet to MIE 1 and MIE 2");
 80011be:	4811      	ldr	r0, [pc, #68]	; (8001204 <Check_Online_Dignostic_RIU+0x210>)
 80011c0:	f024 fefe 	bl	8025fc0 <iprintf>
 80011c4:	e023      	b.n	800120e <Check_Online_Dignostic_RIU+0x21a>
 80011c6:	bf00      	nop
 80011c8:	20002368 	.word	0x20002368
 80011cc:	200013b4 	.word	0x200013b4
 80011d0:	20002360 	.word	0x20002360
 80011d4:	20002364 	.word	0x20002364
 80011d8:	08027744 	.word	0x08027744
 80011dc:	20002374 	.word	0x20002374
 80011e0:	20002375 	.word	0x20002375
 80011e4:	20002376 	.word	0x20002376
 80011e8:	080277b8 	.word	0x080277b8
 80011ec:	20000308 	.word	0x20000308
 80011f0:	2000235c 	.word	0x2000235c
 80011f4:	080277fc 	.word	0x080277fc
 80011f8:	20002377 	.word	0x20002377
 80011fc:	0802783c 	.word	0x0802783c
 8001200:	20000309 	.word	0x20000309
 8001204:	08027884 	.word	0x08027884

			}
		}
	}
	else
		CAN_Trans_flag = 0;
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800120a:	2200      	movs	r2, #0
 800120c:	701a      	strb	r2, [r3, #0]
	if(CAN_Trans_flag == 250)
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	2bfa      	cmp	r3, #250	; 0xfa
 8001214:	d102      	bne.n	800121c <Check_Online_Dignostic_RIU+0x228>
	{
		CAN_Trans_flag = 6;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001218:	2206      	movs	r2, #6
 800121a:	701a      	strb	r2, [r3, #0]
	}
	if((CAN_Trans_flag > 3) && (CAN_Trans_flag < 6) && (Flag == 2))
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b03      	cmp	r3, #3
 8001222:	d915      	bls.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 8001224:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b05      	cmp	r3, #5
 800122a:	d811      	bhi.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
 800122c:	4b26      	ldr	r3, [pc, #152]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d10d      	bne.n	8001250 <Check_Online_Dignostic_RIU+0x25c>
		//			{
		//
		//			printf("\n222222Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
		//			}

		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN FAILURE\n");
 8001234:	4825      	ldr	r0, [pc, #148]	; (80012cc <Check_Online_Dignostic_RIU+0x2d8>)
 8001236:	f024 ff5f 	bl	80260f8 <puts>
		default:
			printf("ERROR                  \t");
		}
		 */

		Failure_check_flag = 0;
 800123a:	4b25      	ldr	r3, [pc, #148]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
		Flag = 4;
 8001240:	4b21      	ldr	r3, [pc, #132]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001242:	2204      	movs	r2, #4
 8001244:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001246:	2206      	movs	r2, #6
 8001248:	2100      	movs	r1, #0
 800124a:	4822      	ldr	r0, [pc, #136]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800124c:	f024 fdd0 	bl	8025df0 <memset>
		//printf("\n111******************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	if(((Failure_check_flag > 3) && (Failure_check_flag < 6)&&(Flag == 4))
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d907      	bls.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <Check_Online_Dignostic_RIU+0x2dc>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b05      	cmp	r3, #5
 800125e:	d803      	bhi.n	8001268 <Check_Online_Dignostic_RIU+0x274>
 8001260:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b04      	cmp	r3, #4
 8001266:	d003      	beq.n	8001270 <Check_Online_Dignostic_RIU+0x27c>
			||(ofc_flag1 > 1))
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d916      	bls.n	800129e <Check_Online_Dignostic_RIU+0x2aa>
	{
		if(ofc_flag1 >1)
 8001270:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d904      	bls.n	8001282 <Check_Online_Dignostic_RIU+0x28e>
		{
			ofc_flag1++;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	3301      	adds	r3, #1
 800127e:	4a16      	ldr	r2, [pc, #88]	; (80012d8 <Check_Online_Dignostic_RIU+0x2e4>)
 8001280:	6013      	str	r3, [r2, #0]
			//			{
			//
			//			printf("\n3333333Online_Diag_var.Online_Diag_Buf[%d]=%d",i,Online_Diag_var.Online_Diag_Buf[i]);
			//			}
		}
		printf("\nSENT ONLINE DIAG CAN PACKT 2 TIMES WHEN OK\n");
 8001282:	4816      	ldr	r0, [pc, #88]	; (80012dc <Check_Online_Dignostic_RIU+0x2e8>)
 8001284:	f024 ff38 	bl	80260f8 <puts>
			break;
		default:
			printf("ERROR                  \t");
		}
		 */
		CAN_Trans_flag = 0;
 8001288:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <Check_Online_Dignostic_RIU+0x2d0>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		Flag = 2;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <Check_Online_Dignostic_RIU+0x2d4>)
 8001290:	2202      	movs	r2, #2
 8001292:	701a      	strb	r2, [r3, #0]
		memset(Online_diag_flag,'\0',sizeof(Online_diag_flag));
 8001294:	2206      	movs	r2, #6
 8001296:	2100      	movs	r1, #0
 8001298:	480e      	ldr	r0, [pc, #56]	; (80012d4 <Check_Online_Dignostic_RIU+0x2e0>)
 800129a:	f024 fda9 	bl	8025df0 <memset>
		//	printf("\n************************FIBER LINK FAIL*****************************=%d\n",Online_diag_flag[index]);
	}
	memset(suc_ReceivedMessage,'\0',sizeof(suc_ReceivedMessage));
 800129e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80012a2:	2100      	movs	r1, #0
 80012a4:	480e      	ldr	r0, [pc, #56]	; (80012e0 <Check_Online_Dignostic_RIU+0x2ec>)
 80012a6:	f024 fda3 	bl	8025df0 <memset>
	temp2 = 0;
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <Check_Online_Dignostic_RIU+0x2f0>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	701a      	strb	r2, [r3, #0]
	temp3 = 0;
 80012b0:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <Check_Online_Dignostic_RIU+0x2f4>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	701a      	strb	r2, [r3, #0]
	temp1 = 0;
 80012b6:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <Check_Online_Dignostic_RIU+0x2f8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20002377 	.word	0x20002377
 80012c8:	20000309 	.word	0x20000309
 80012cc:	080278ac 	.word	0x080278ac
 80012d0:	2000235c 	.word	0x2000235c
 80012d4:	20002368 	.word	0x20002368
 80012d8:	20002364 	.word	0x20002364
 80012dc:	080278e0 	.word	0x080278e0
 80012e0:	200013bc 	.word	0x200013bc
 80012e4:	20002375 	.word	0x20002375
 80012e8:	20002376 	.word	0x20002376
 80012ec:	20002374 	.word	0x20002374

080012f0 <process_to_comReceived>:

void process_to_comReceived(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0


	unsigned int NoofBuffBytes = 0,Dat_Check;
 80012f6:	2300      	movs	r3, #0
 80012f8:	607b      	str	r3, [r7, #4]
	//	static unsigned int ui_riucmdTxTics;
	static unsigned char EI_Buffer[300];
	NoofBuffBytes= CommReadAndFormMessage_Cmd(TWO_PORT,EI_Buffer,sizeof(EI_Buffer));
 80012fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80012fe:	492f      	ldr	r1, [pc, #188]	; (80013bc <process_to_comReceived+0xcc>)
 8001300:	2002      	movs	r0, #2
 8001302:	f000 f86b 	bl	80013dc <CommReadAndFormMessage_Cmd>
 8001306:	4603      	mov	r3, r0
 8001308:	607b      	str	r3, [r7, #4]

	if(NoofBuffBytes >0)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d051      	beq.n	80013b4 <process_to_comReceived+0xc4>
	{
		if((EI_Buffer[0]>=0x01) &&(EI_Buffer[0] <=0x1F))
 8001310:	4b2a      	ldr	r3, [pc, #168]	; (80013bc <process_to_comReceived+0xcc>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d048      	beq.n	80013aa <process_to_comReceived+0xba>
 8001318:	4b28      	ldr	r3, [pc, #160]	; (80013bc <process_to_comReceived+0xcc>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b1f      	cmp	r3, #31
 800131e:	d844      	bhi.n	80013aa <process_to_comReceived+0xba>
		{
			Dat_Check = (int)(EI_Buffer[0]);
 8001320:	4b26      	ldr	r3, [pc, #152]	; (80013bc <process_to_comReceived+0xcc>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	603b      	str	r3, [r7, #0]
			if(EI_Buffer[22] == 0xFF)
 8001326:	4b25      	ldr	r3, [pc, #148]	; (80013bc <process_to_comReceived+0xcc>)
 8001328:	7d9b      	ldrb	r3, [r3, #22]
 800132a:	2bff      	cmp	r3, #255	; 0xff
 800132c:	d108      	bne.n	8001340 <process_to_comReceived+0x50>
			{
				Online_diag_flag[Dat_Check] =0;
 800132e:	4a24      	ldr	r2, [pc, #144]	; (80013c0 <process_to_comReceived+0xd0>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4413      	add	r3, r2
 8001334:	2200      	movs	r2, #0
 8001336:	701a      	strb	r2, [r3, #0]
				printf("\n*******************************SLAVE_%d OK*****************************\n",Dat_Check);
 8001338:	6839      	ldr	r1, [r7, #0]
 800133a:	4822      	ldr	r0, [pc, #136]	; (80013c4 <process_to_comReceived+0xd4>)
 800133c:	f024 fe40 	bl	8025fc0 <iprintf>
				//ofc_flag1 =0;
			}
			if(EI_Buffer[22] == 0xBF)
 8001340:	4b1e      	ldr	r3, [pc, #120]	; (80013bc <process_to_comReceived+0xcc>)
 8001342:	7d9b      	ldrb	r3, [r3, #22]
 8001344:	2bbf      	cmp	r3, #191	; 0xbf
 8001346:	d10f      	bne.n	8001368 <process_to_comReceived+0x78>
			{
				Online_diag_flag[Dat_Check] = 1;
 8001348:	4a1d      	ldr	r2, [pc, #116]	; (80013c0 <process_to_comReceived+0xd0>)
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
				printf("\n***************************SLAVE_%d FB1_LINK_FAIL*********************\n",Dat_Check);
 8001352:	6839      	ldr	r1, [r7, #0]
 8001354:	481c      	ldr	r0, [pc, #112]	; (80013c8 <process_to_comReceived+0xd8>)
 8001356:	f024 fe33 	bl	8025fc0 <iprintf>
				//	ofc_flag2 =1;
				if(1 == ofc_flag1)
 800135a:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <process_to_comReceived+0xdc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <process_to_comReceived+0x78>
				{
					ofc_flag1 = 2;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <process_to_comReceived+0xdc>)
 8001364:	2202      	movs	r2, #2
 8001366:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x7F)
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <process_to_comReceived+0xcc>)
 800136a:	7d9b      	ldrb	r3, [r3, #22]
 800136c:	2b7f      	cmp	r3, #127	; 0x7f
 800136e:	d10f      	bne.n	8001390 <process_to_comReceived+0xa0>
			{
				Online_diag_flag[Dat_Check] = 2;
 8001370:	4a13      	ldr	r2, [pc, #76]	; (80013c0 <process_to_comReceived+0xd0>)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	2202      	movs	r2, #2
 8001378:	701a      	strb	r2, [r3, #0]
				printf("\n********************************SLAVE_%d FB2_LINK_FAIL*******************\n",Dat_Check);
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <process_to_comReceived+0xe0>)
 800137e:	f024 fe1f 	bl	8025fc0 <iprintf>
				//ofc_flag2 =1;
				if(1 == ofc_flag1)
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <process_to_comReceived+0xdc>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d102      	bne.n	8001390 <process_to_comReceived+0xa0>
				{
					ofc_flag1 = 2;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <process_to_comReceived+0xdc>)
 800138c:	2202      	movs	r2, #2
 800138e:	601a      	str	r2, [r3, #0]
					//Failure_check_flag = 4;

				}
			}
			if(EI_Buffer[22] == 0x3F)
 8001390:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <process_to_comReceived+0xcc>)
 8001392:	7d9b      	ldrb	r3, [r3, #22]
 8001394:	2b3f      	cmp	r3, #63	; 0x3f
 8001396:	d108      	bne.n	80013aa <process_to_comReceived+0xba>
			{
				Online_diag_flag[Dat_Check] = 3;
 8001398:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <process_to_comReceived+0xd0>)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	4413      	add	r3, r2
 800139e:	2203      	movs	r2, #3
 80013a0:	701a      	strb	r2, [r3, #0]
				printf("\n*****************************SLAVE_%d FB1_&FB2_LINK_FAIL****************\n",Dat_Check);
 80013a2:	6839      	ldr	r1, [r7, #0]
 80013a4:	480b      	ldr	r0, [pc, #44]	; (80013d4 <process_to_comReceived+0xe4>)
 80013a6:	f024 fe0b 	bl	8025fc0 <iprintf>
			}
		}
		sui_failure_determine_clock = HAL_GetTick();
 80013aa:	f017 fef3 	bl	8019194 <HAL_GetTick>
 80013ae:	4603      	mov	r3, r0
 80013b0:	4a09      	ldr	r2, [pc, #36]	; (80013d8 <process_to_comReceived+0xe8>)
 80013b2:	6013      	str	r3, [r2, #0]
	}
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20002378 	.word	0x20002378
 80013c0:	20002368 	.word	0x20002368
 80013c4:	0802790c 	.word	0x0802790c
 80013c8:	08027958 	.word	0x08027958
 80013cc:	20002364 	.word	0x20002364
 80013d0:	080279a4 	.word	0x080279a4
 80013d4:	080279f0 	.word	0x080279f0
 80013d8:	20002360 	.word	0x20002360

080013dc <CommReadAndFormMessage_Cmd>:

unsigned short int CommReadAndFormMessage_Cmd(unsigned short int us_Port,
		unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	6039      	str	r1, [r7, #0]
 80013e6:	80fb      	strh	r3, [r7, #6]
 80013e8:	4613      	mov	r3, r2
 80013ea:	80bb      	strh	r3, [r7, #4]
	static  char sign1 = 0,sign2 = 0,sign3 = 0,case_check=0;
	static unsigned long int store_index ;
	unsigned char suc_RByte = 0x00;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]
	static unsigned char suc_RcvStatus = 11;
	while(Com_DataReady(us_Port))
 80013f0:	e0a6      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
	{
		suc_RByte = Com_Get_Byte(us_Port);
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f017 fba4 	bl	8018b44 <Com_Get_Byte>
 80013fc:	4603      	mov	r3, r0
 80013fe:	73fb      	strb	r3, [r7, #15]
			printf("|%02X|",suc_RByte);
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	4619      	mov	r1, r3
 8001404:	4855      	ldr	r0, [pc, #340]	; (800155c <CommReadAndFormMessage_Cmd+0x180>)
 8001406:	f024 fddb 	bl	8025fc0 <iprintf>

		switch(suc_RcvStatus)
 800140a:	4b55      	ldr	r3, [pc, #340]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	3b0b      	subs	r3, #11
 8001410:	2b03      	cmp	r3, #3
 8001412:	f200 8091 	bhi.w	8001538 <CommReadAndFormMessage_Cmd+0x15c>
 8001416:	a201      	add	r2, pc, #4	; (adr r2, 800141c <CommReadAndFormMessage_Cmd+0x40>)
 8001418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141c:	0800142d 	.word	0x0800142d
 8001420:	0800145b 	.word	0x0800145b
 8001424:	08001479 	.word	0x08001479
 8001428:	080014ab 	.word	0x080014ab
		{
		case 11:
			if((suc_RByte >= 0x01) && (suc_RByte <= 0x1F) && (suc_RByte != 0x0E))
 800142c:	7bfb      	ldrb	r3, [r7, #15]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8086 	beq.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	2b1f      	cmp	r3, #31
 8001438:	f200 8082 	bhi.w	8001540 <CommReadAndFormMessage_Cmd+0x164>
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b0e      	cmp	r3, #14
 8001440:	d07e      	beq.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign1 = suc_RByte;
 8001442:	4a48      	ldr	r2, [pc, #288]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	7013      	strb	r3, [r2, #0]
				//	printf("sign11 = %X\n",sign1);
				store_index++;
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a46      	ldr	r2, [pc, #280]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001450:	6013      	str	r3, [r2, #0]
				suc_RcvStatus = 12;
 8001452:	4b43      	ldr	r3, [pc, #268]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001454:	220c      	movs	r2, #12
 8001456:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001458:	e072      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 12:
			if (suc_RByte == FUN_CODE)
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	2b03      	cmp	r3, #3
 800145e:	d16f      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{
				sign2 = suc_RByte;
 8001460:	4a42      	ldr	r2, [pc, #264]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001466:	4b40      	ldr	r3, [pc, #256]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	3301      	adds	r3, #1
 800146c:	4a3e      	ldr	r2, [pc, #248]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800146e:	6013      	str	r3, [r2, #0]
				//	printf("sign12= %X\n ",sign2);
				suc_RcvStatus = 13;
 8001470:	4b3b      	ldr	r3, [pc, #236]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001472:	220d      	movs	r2, #13
 8001474:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001476:	e063      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>

		case 13:
			if(suc_RByte == DBYT_CNT)
 8001478:	7bfb      	ldrb	r3, [r7, #15]
 800147a:	2b1c      	cmp	r3, #28
 800147c:	d10e      	bne.n	800149c <CommReadAndFormMessage_Cmd+0xc0>
			{

				sign3 = suc_RByte;
 800147e:	4a3c      	ldr	r2, [pc, #240]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 8001480:	7bfb      	ldrb	r3, [r7, #15]
 8001482:	7013      	strb	r3, [r2, #0]
				store_index++;
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	3301      	adds	r3, #1
 800148a:	4a37      	ldr	r2, [pc, #220]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800148c:	6013      	str	r3, [r2, #0]
				//	printf("sign13= %X\n ",sign3);
				suc_RcvStatus = 14;
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001490:	220e      	movs	r2, #14
 8001492:	701a      	strb	r2, [r3, #0]
				case_check =1;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 8001496:	2201      	movs	r2, #1
 8001498:	701a      	strb	r2, [r3, #0]
 800149a:	e051      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			}
			else
			{
				store_index = 0;
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
				suc_RcvStatus = 11;
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 80014a4:	220b      	movs	r2, #11
 80014a6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80014a8:	e04a      	b.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
		case 14:
			puc_ReadMsg[0] = sign1;
 80014aa:	4b2e      	ldr	r3, [pc, #184]	; (8001564 <CommReadAndFormMessage_Cmd+0x188>)
 80014ac:	781a      	ldrb	r2, [r3, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	701a      	strb	r2, [r3, #0]
			// printf("BUFF = %X\n", puc_ReadMsg[0]);
			puc_ReadMsg[1] = sign2;
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a2d      	ldr	r2, [pc, #180]	; (800156c <CommReadAndFormMessage_Cmd+0x190>)
 80014b8:	7812      	ldrb	r2, [r2, #0]
 80014ba:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[2] = sign3;
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	3302      	adds	r3, #2
 80014c0:	4a2b      	ldr	r2, [pc, #172]	; (8001570 <CommReadAndFormMessage_Cmd+0x194>)
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	701a      	strb	r2, [r3, #0]
			puc_ReadMsg[store_index] = suc_RByte;
 80014c6:	4b28      	ldr	r3, [pc, #160]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	683a      	ldr	r2, [r7, #0]
 80014cc:	4413      	add	r3, r2
 80014ce:	7bfa      	ldrb	r2, [r7, #15]
 80014d0:	701a      	strb	r2, [r3, #0]
			if(store_index < 33)
 80014d2:	4b25      	ldr	r3, [pc, #148]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b20      	cmp	r3, #32
 80014d8:	d804      	bhi.n	80014e4 <CommReadAndFormMessage_Cmd+0x108>
			{
				store_index++;
 80014da:	4b23      	ldr	r3, [pc, #140]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	4a21      	ldr	r2, [pc, #132]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e2:	6013      	str	r3, [r2, #0]
			}
			if(store_index == 33)
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b21      	cmp	r3, #33	; 0x21
 80014ea:	d129      	bne.n	8001540 <CommReadAndFormMessage_Cmd+0x164>
			{

				if(Cal_Crc_fun(puc_ReadMsg,(store_index-2)))
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	3b02      	subs	r3, #2
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	4619      	mov	r1, r3
 80014f8:	6838      	ldr	r0, [r7, #0]
 80014fa:	f000 f841 	bl	8001580 <Cal_Crc_fun>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00e      	beq.n	8001522 <CommReadAndFormMessage_Cmd+0x146>
				{
					//	printf("CRC OK\n");
					case_check = store_index;
 8001504:	4b18      	ldr	r3, [pc, #96]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	b2da      	uxtb	r2, r3
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800150c:	701a      	strb	r2, [r3, #0]
					suc_RcvStatus = 11;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 8001510:	220b      	movs	r2, #11
 8001512:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
					return case_check;
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <CommReadAndFormMessage_Cmd+0x198>)
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b29b      	uxth	r3, r3
 8001520:	e018      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
				}
				else
				{
					printf("OFC_CRC NOK\n");
 8001522:	4815      	ldr	r0, [pc, #84]	; (8001578 <CommReadAndFormMessage_Cmd+0x19c>)
 8001524:	f024 fde8 	bl	80260f8 <puts>
					suc_RcvStatus = 11;
 8001528:	4b0d      	ldr	r3, [pc, #52]	; (8001560 <CommReadAndFormMessage_Cmd+0x184>)
 800152a:	220b      	movs	r2, #11
 800152c:	701a      	strb	r2, [r3, #0]
					store_index = 0;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <CommReadAndFormMessage_Cmd+0x18c>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
					return 0;
 8001534:	2300      	movs	r3, #0
 8001536:	e00d      	b.n	8001554 <CommReadAndFormMessage_Cmd+0x178>
			}

			break;
		default:

			printf("In default");
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <CommReadAndFormMessage_Cmd+0x1a0>)
 800153a:	f024 fd41 	bl	8025fc0 <iprintf>
			break;
 800153e:	bf00      	nop
	while(Com_DataReady(us_Port))
 8001540:	88fb      	ldrh	r3, [r7, #6]
 8001542:	b2db      	uxtb	r3, r3
 8001544:	4618      	mov	r0, r3
 8001546:	f017 fabd 	bl	8018ac4 <Com_DataReady>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f af50 	bne.w	80013f2 <CommReadAndFormMessage_Cmd+0x16>


		}
	}
	return 0;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	08027a3c 	.word	0x08027a3c
 8001560:	2000030a 	.word	0x2000030a
 8001564:	200024a4 	.word	0x200024a4
 8001568:	200024a8 	.word	0x200024a8
 800156c:	200024ac 	.word	0x200024ac
 8001570:	200024ad 	.word	0x200024ad
 8001574:	200024ae 	.word	0x200024ae
 8001578:	08027a44 	.word	0x08027a44
 800157c:	08027a50 	.word	0x08027a50

08001580 <Cal_Crc_fun>:

unsigned char Cal_Crc_fun(unsigned char * Buffer, unsigned short Length)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
	unsigned short Rec_Crc,Cal_Crc;
	//	for(i=0;i<Length;i++)
	//	printf("RECV = %X ",Buffer[i]);
	Cal_Crc = ModBus_CRC16(Buffer,(Length));
 800158c:	887b      	ldrh	r3, [r7, #2]
 800158e:	4619      	mov	r1, r3
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 f81f 	bl	80015d4 <ModBus_CRC16>
 8001596:	4603      	mov	r3, r0
 8001598:	81fb      	strh	r3, [r7, #14]
	Rec_Crc = (unsigned short int ) (Buffer[Length+1] & 0xff);
 800159a:	887b      	ldrh	r3, [r7, #2]
 800159c:	3301      	adds	r3, #1
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	81bb      	strh	r3, [r7, #12]
	Rec_Crc = (unsigned short int ) (Rec_Crc<<8);
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	81bb      	strh	r3, [r7, #12]
	Rec_Crc |= Buffer[Length] & 0xff;
 80015ac:	887b      	ldrh	r3, [r7, #2]
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	89bb      	ldrh	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	81bb      	strh	r3, [r7, #12]
	//	printf("Cal_Crc = %X Rec_Crc = %X\n",Cal_Crc,Rec_Crc);
	if(Cal_Crc	== Rec_Crc)
 80015bc:	89fa      	ldrh	r2, [r7, #14]
 80015be:	89bb      	ldrh	r3, [r7, #12]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d101      	bne.n	80015c8 <Cal_Crc_fun+0x48>
	{
		return 1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <Cal_Crc_fun+0x4a>
	}
	else
	{
		return 0;
 80015c8:	2300      	movs	r3, #0
	}
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <ModBus_CRC16>:

unsigned short ModBus_CRC16( unsigned char * Buffer, unsigned short Length )
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	807b      	strh	r3, [r7, #2]
	unsigned char CRCHi = 0xFF;
 80015e0:	23ff      	movs	r3, #255	; 0xff
 80015e2:	73fb      	strb	r3, [r7, #15]
	unsigned char CRCLo = 0xFF;
 80015e4:	23ff      	movs	r3, #255	; 0xff
 80015e6:	73bb      	strb	r3, [r7, #14]
	int Index;
	unsigned short ret;
	//	printf("Length=%d",Length);
	//for(Index = 0;Index<Length;Index++)
	//printf("CAL = %X ",Buffer[Index]);
	while( Length--)
 80015e8:	e013      	b.n	8001612 <ModBus_CRC16+0x3e>
	{
		Index = CRCLo ^ *Buffer++ ;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	781a      	ldrb	r2, [r3, #0]
 80015f2:	7bbb      	ldrb	r3, [r7, #14]
 80015f4:	4053      	eors	r3, r2
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	60bb      	str	r3, [r7, #8]
		CRCLo = CRCHi ^ CRC_Table_Hi[Index];
 80015fa:	4a10      	ldr	r2, [pc, #64]	; (800163c <ModBus_CRC16+0x68>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	4413      	add	r3, r2
 8001600:	781a      	ldrb	r2, [r3, #0]
 8001602:	7bfb      	ldrb	r3, [r7, #15]
 8001604:	4053      	eors	r3, r2
 8001606:	73bb      	strb	r3, [r7, #14]
		CRCHi = CRC_Table_Lo[Index];
 8001608:	4a0d      	ldr	r2, [pc, #52]	; (8001640 <ModBus_CRC16+0x6c>)
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	4413      	add	r3, r2
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	73fb      	strb	r3, [r7, #15]
	while( Length--)
 8001612:	887b      	ldrh	r3, [r7, #2]
 8001614:	1e5a      	subs	r2, r3, #1
 8001616:	807a      	strh	r2, [r7, #2]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1e6      	bne.n	80015ea <ModBus_CRC16+0x16>
	}
	//	CRCHi = CRCHi + 0x17;
	//	printf("LOW Byte = %X HIGHER BYTE = %X\n",CRCLo,CRCHi);
	ret=((unsigned short)CRCHi << 8);
 800161c:	7bfb      	ldrb	r3, [r7, #15]
 800161e:	b29b      	uxth	r3, r3
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	81bb      	strh	r3, [r7, #12]
	ret|= (unsigned short)CRCLo;
 8001624:	7bbb      	ldrb	r3, [r7, #14]
 8001626:	b29a      	uxth	r2, r3
 8001628:	89bb      	ldrh	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	81bb      	strh	r3, [r7, #12]
	return ret;
 800162e:	89bb      	ldrh	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	20000108 	.word	0x20000108
 8001640:	20000208 	.word	0x20000208

08001644 <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b0a2      	sub	sp, #136	; 0x88
 8001648:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	f107 0308 	add.w	r3, r7, #8
 8001658:	227c      	movs	r2, #124	; 0x7c
 800165a:	2100      	movs	r1, #0
 800165c:	4618      	mov	r0, r3
 800165e:	f024 fbc7 	bl	8025df0 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001662:	2300      	movs	r3, #0
 8001664:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001668:	2300      	movs	r3, #0
 800166a:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 800166e:	e03a      	b.n	80016e6 <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8001670:	f00f fa84 	bl	8010b7c <Get_Eth_Byte>
 8001674:	4603      	mov	r3, r0
 8001676:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 800167a:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800167e:	2bf4      	cmp	r3, #244	; 0xf4
 8001680:	d002      	beq.n	8001688 <Process_Hitachi_Packets_Eth+0x44>
 8001682:	2bf6      	cmp	r3, #246	; 0xf6
 8001684:	d00c      	beq.n	80016a0 <Process_Hitachi_Packets_Eth+0x5c>
 8001686:	e01b      	b.n	80016c0 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8001688:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800168c:	1c5a      	adds	r2, r3, #1
 800168e:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8001692:	3388      	adds	r3, #136	; 0x88
 8001694:	443b      	add	r3, r7
 8001696:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 800169a:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 800169e:	e01e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80016a0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016aa:	3388      	adds	r3, #136	; 0x88
 80016ac:	443b      	add	r3, r7
 80016ae:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016b2:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80016b6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016ba:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80016be:	e00e      	b.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 80016c0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d00a      	beq.n	80016de <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 80016c8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80016d2:	3388      	adds	r3, #136	; 0x88
 80016d4:	443b      	add	r3, r7
 80016d6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80016da:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80016de:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d105      	bne.n	80016f2 <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 80016e6:	f00f fa35 	bl	8010b54 <Is_There_EI_Data>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1bf      	bne.n	8001670 <Process_Hitachi_Packets_Eth+0x2c>
 80016f0:	e000      	b.n	80016f4 <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 80016f2:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 80016f4:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00d      	beq.n	8001718 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 80016fc:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d906      	bls.n	8001712 <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001704:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001708:	1d3b      	adds	r3, r7, #4
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f8ab 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001718:	bf00      	nop
 800171a:	3788      	adds	r7, #136	; 0x88
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0a2      	sub	sp, #136	; 0x88
 8001724:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8001726:	2300      	movs	r3, #0
 8001728:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	227c      	movs	r2, #124	; 0x7c
 8001736:	2100      	movs	r1, #0
 8001738:	4618      	mov	r0, r3
 800173a:	f024 fb59 	bl	8025df0 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8001744:	2300      	movs	r3, #0
 8001746:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 800174a:	4b43      	ldr	r3, [pc, #268]	; (8001858 <Process_Hitachi_Packets_Com+0x138>)
 800174c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07a      	beq.n	800184a <Process_Hitachi_Packets_Com+0x12a>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 8001754:	4b41      	ldr	r3, [pc, #260]	; (800185c <Process_Hitachi_Packets_Com+0x13c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f00e fe4d 	bl	80103f8 <HAL_Elaps_Ticks>
 800175e:	4603      	mov	r3, r0
 8001760:	2b13      	cmp	r3, #19
 8001762:	d974      	bls.n	800184e <Process_Hitachi_Packets_Com+0x12e>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 8001764:	e050      	b.n	8001808 <Process_Hitachi_Packets_Com+0xe8>
	{
		Data = Com_Get_Byte(THREE_PORT);
 8001766:	2003      	movs	r0, #3
 8001768:	f017 f9ec 	bl	8018b44 <Com_Get_Byte>
 800176c:	4603      	mov	r3, r0
 800176e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		printf("*%02X*",Data);
 8001772:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8001776:	4619      	mov	r1, r3
 8001778:	4839      	ldr	r0, [pc, #228]	; (8001860 <Process_Hitachi_Packets_Com+0x140>)
 800177a:	f024 fc21 	bl	8025fc0 <iprintf>
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800177e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001782:	2b7e      	cmp	r3, #126	; 0x7e
 8001784:	d90a      	bls.n	800179c <Process_Hitachi_Packets_Com+0x7c>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001786:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800178a:	2280      	movs	r2, #128	; 0x80
 800178c:	4619      	mov	r1, r3
 800178e:	4835      	ldr	r0, [pc, #212]	; (8001864 <Process_Hitachi_Packets_Com+0x144>)
 8001790:	f024 fc16 	bl	8025fc0 <iprintf>
			Traverser = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 800179a:	e03d      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		}
		//printf("%02X ",Data);
		switch(Data)
 800179c:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 80017a0:	2bf4      	cmp	r3, #244	; 0xf4
 80017a2:	d002      	beq.n	80017aa <Process_Hitachi_Packets_Com+0x8a>
 80017a4:	2bf6      	cmp	r3, #246	; 0xf6
 80017a6:	d00c      	beq.n	80017c2 <Process_Hitachi_Packets_Com+0xa2>
 80017a8:	e01b      	b.n	80017e2 <Process_Hitachi_Packets_Com+0xc2>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80017aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017b4:	3388      	adds	r3, #136	; 0x88
 80017b6:	443b      	add	r3, r7
 80017b8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017bc:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80017c0:	e01e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80017c2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017c6:	1c5a      	adds	r2, r3, #1
 80017c8:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017cc:	3388      	adds	r3, #136	; 0x88
 80017ce:	443b      	add	r3, r7
 80017d0:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017d4:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80017d8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017dc:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80017e0:	e00e      	b.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
		default:
			if(Traverser >0)
 80017e2:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d00a      	beq.n	8001800 <Process_Hitachi_Packets_Com+0xe0>
			{
				Temp_array[Traverser++] = Data;
 80017ea:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80017ee:	1c5a      	adds	r2, r3, #1
 80017f0:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80017f4:	3388      	adds	r3, #136	; 0x88
 80017f6:	443b      	add	r3, r7
 80017f8:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80017fc:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8001800:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001804:	2b00      	cmp	r3, #0
 8001806:	d106      	bne.n	8001816 <Process_Hitachi_Packets_Com+0xf6>
	while(Com_DataReady(THREE_PORT))
 8001808:	2003      	movs	r0, #3
 800180a:	f017 f95b 	bl	8018ac4 <Com_DataReady>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1a8      	bne.n	8001766 <Process_Hitachi_Packets_Com+0x46>
 8001814:	e000      	b.n	8001818 <Process_Hitachi_Packets_Com+0xf8>
		{
			break;
 8001816:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001818:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 800181c:	2b00      	cmp	r3, #0
 800181e:	d017      	beq.n	8001850 <Process_Hitachi_Packets_Com+0x130>
	{
		if(Traverser>15)
 8001820:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001824:	2b0f      	cmp	r3, #15
 8001826:	d906      	bls.n	8001836 <Process_Hitachi_Packets_Com+0x116>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001828:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	4611      	mov	r1, r2
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f819 	bl	8001868 <Convert_Data_format>
		}
		Traverser = 0;
 8001836:	2300      	movs	r3, #0
 8001838:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2280      	movs	r2, #128	; 0x80
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f024 fad4 	bl	8025df0 <memset>
 8001848:	e002      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184a:	bf00      	nop
 800184c:	e000      	b.n	8001850 <Process_Hitachi_Packets_Com+0x130>
		return;
 800184e:	bf00      	nop
	}
}
 8001850:	3788      	adds	r7, #136	; 0x88
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000504 	.word	0x20000504
 800185c:	2000bfd8 	.word	0x2000bfd8
 8001860:	08027a5c 	.word	0x08027a5c
 8001864:	08027a64 	.word	0x08027a64

08001868 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b0a4      	sub	sp, #144	; 0x90
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 8001874:	2300      	movs	r3, #0
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	f107 0310 	add.w	r3, r7, #16
 800187c:	227c      	movs	r2, #124	; 0x7c
 800187e:	2100      	movs	r1, #0
 8001880:	4618      	mov	r0, r3
 8001882:	f024 fab5 	bl	8025df0 <memset>
	uint16_t des_index=0,src_index=0;
 8001886:	2300      	movs	r3, #0
 8001888:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 800188c:	2300      	movs	r3, #0
 800188e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 8001892:	2300      	movs	r3, #0
 8001894:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001898:	2300      	movs	r3, #0
 800189a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800189e:	e034      	b.n	800190a <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 80018a0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2bf0      	cmp	r3, #240	; 0xf0
 80018ac:	d118      	bne.n	80018e0 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80018ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	7819      	ldrb	r1, [r3, #0]
 80018b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018bc:	3301      	adds	r3, #1
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	781a      	ldrb	r2, [r3, #0]
 80018c4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018c8:	430a      	orrs	r2, r1
 80018ca:	b2d2      	uxtb	r2, r2
 80018cc:	3390      	adds	r3, #144	; 0x90
 80018ce:	443b      	add	r3, r7
 80018d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80018d4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018d8:	3301      	adds	r3, #1
 80018da:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80018de:	e00a      	b.n	80018f6 <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80018e0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	441a      	add	r2, r3
 80018e8:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018ec:	7812      	ldrb	r2, [r2, #0]
 80018ee:	3390      	adds	r3, #144	; 0x90
 80018f0:	443b      	add	r3, r7
 80018f2:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80018f6:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80018fa:	3301      	adds	r3, #1
 80018fc:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001900:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8001904:	3301      	adds	r3, #1
 8001906:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	b29b      	uxth	r3, r3
 800190e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8001912:	429a      	cmp	r2, r3
 8001914:	d3c4      	bcc.n	80018a0 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 8001916:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800191a:	f107 030c 	add.w	r3, r7, #12
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f000 f805 	bl	8001930 <EI_Data_Analyzer>
}
 8001926:	bf00      	nop
 8001928:	3790      	adds	r7, #144	; 0x90
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
	...

08001930 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001940:	2300      	movs	r3, #0
 8001942:	77fb      	strb	r3, [r7, #31]
 8001944:	2300      	movs	r3, #0
 8001946:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001950:	f017 fc20 	bl	8019194 <HAL_GetTick>
 8001954:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 8001956:	4ba7      	ldr	r3, [pc, #668]	; (8001bf4 <EI_Data_Analyzer+0x2c4>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d111      	bne.n	8001982 <EI_Data_Analyzer+0x52>
 800195e:	f017 fc19 	bl	8019194 <HAL_GetTick>
 8001962:	4603      	mov	r3, r0
 8001964:	f242 720f 	movw	r2, #9999	; 0x270f
 8001968:	4293      	cmp	r3, r2
 800196a:	d90a      	bls.n	8001982 <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 800196c:	48a2      	ldr	r0, [pc, #648]	; (8001bf8 <EI_Data_Analyzer+0x2c8>)
 800196e:	f024 fbc3 	bl	80260f8 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001972:	49a2      	ldr	r1, [pc, #648]	; (8001bfc <EI_Data_Analyzer+0x2cc>)
 8001974:	48a2      	ldr	r0, [pc, #648]	; (8001c00 <EI_Data_Analyzer+0x2d0>)
 8001976:	f7fe fc63 	bl	8000240 <strcmp>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	f040 81a1 	bne.w	8001cc4 <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	3303      	adds	r3, #3
 8001986:	461a      	mov	r2, r3
 8001988:	2110      	movs	r1, #16
 800198a:	2000      	movs	r0, #0
 800198c:	f7fe fe42 	bl	8000614 <ExtractBits>
 8001990:	4603      	mov	r3, r0
 8001992:	b29b      	uxth	r3, r3
 8001994:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 8001996:	e00b      	b.n	80019b0 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001998:	7ffb      	ldrb	r3, [r7, #31]
 800199a:	4a9a      	ldr	r2, [pc, #616]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 800199c:	3366      	adds	r3, #102	; 0x66
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d009      	beq.n	80019be <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	3301      	adds	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	4b94      	ldr	r3, [pc, #592]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019b6:	7ffa      	ldrb	r2, [r7, #31]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d3ed      	bcc.n	8001998 <EI_Data_Analyzer+0x68>
 80019bc:	e000      	b.n	80019c0 <EI_Data_Analyzer+0x90>
		{
			break;
 80019be:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80019c0:	4b90      	ldr	r3, [pc, #576]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	7ffa      	ldrb	r2, [r7, #31]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d309      	bcc.n	80019e0 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80019cc:	4b8e      	ldr	r3, [pc, #568]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	f040 8179 	bne.w	8001cc8 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80019d6:	6939      	ldr	r1, [r7, #16]
 80019d8:	488c      	ldr	r0, [pc, #560]	; (8001c0c <EI_Data_Analyzer+0x2dc>)
 80019da:	f024 faf1 	bl	8025fc0 <iprintf>
		}
		return;
 80019de:	e173      	b.n	8001cc8 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3301      	adds	r3, #1
 80019e4:	461a      	mov	r2, r3
 80019e6:	2110      	movs	r1, #16
 80019e8:	2000      	movs	r0, #0
 80019ea:	f7fe fe13 	bl	8000614 <ExtractBits>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80019f4:	7ffb      	ldrb	r3, [r7, #31]
 80019f6:	4a83      	ldr	r2, [pc, #524]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 80019f8:	3370      	adds	r3, #112	; 0x70
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	4413      	add	r3, r2
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d012      	beq.n	8001a2c <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 8001a06:	4882      	ldr	r0, [pc, #520]	; (8001c10 <EI_Data_Analyzer+0x2e0>)
 8001a08:	f024 fb76 	bl	80260f8 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001a0c:	69b9      	ldr	r1, [r7, #24]
 8001a0e:	4881      	ldr	r0, [pc, #516]	; (8001c14 <EI_Data_Analyzer+0x2e4>)
 8001a10:	f024 fad6 	bl	8025fc0 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8001a14:	7ffb      	ldrb	r3, [r7, #31]
 8001a16:	4a7b      	ldr	r2, [pc, #492]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a18:	3370      	adds	r3, #112	; 0x70
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	461a      	mov	r2, r3
 8001a22:	6939      	ldr	r1, [r7, #16]
 8001a24:	487c      	ldr	r0, [pc, #496]	; (8001c18 <EI_Data_Analyzer+0x2e8>)
 8001a26:	f024 facb 	bl	8025fc0 <iprintf>
		return;
 8001a2a:	e14e      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001a30:	4b7a      	ldr	r3, [pc, #488]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d016      	beq.n	8001a6c <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001a3e:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <EI_Data_Analyzer+0x2ec>)
 8001a40:	791b      	ldrb	r3, [r3, #4]
 8001a42:	7fba      	ldrb	r2, [r7, #30]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d111      	bne.n	8001a6c <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001a48:	4875      	ldr	r0, [pc, #468]	; (8001c20 <EI_Data_Analyzer+0x2f0>)
 8001a4a:	f024 fb55 	bl	80260f8 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	4874      	ldr	r0, [pc, #464]	; (8001c24 <EI_Data_Analyzer+0x2f4>)
 8001a52:	f024 fab5 	bl	8025fc0 <iprintf>
			Destin_Address = 333;
 8001a56:	f240 134d 	movw	r3, #333	; 0x14d
 8001a5a:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001a5c:	4b69      	ldr	r3, [pc, #420]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a62:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	4870      	ldr	r0, [pc, #448]	; (8001c28 <EI_Data_Analyzer+0x2f8>)
 8001a68:	f024 faaa 	bl	8025fc0 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001a6c:	4b65      	ldr	r3, [pc, #404]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001a6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a72:	7fba      	ldrb	r2, [r7, #30]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d307      	bcc.n	8001a88 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001a78:	486c      	ldr	r0, [pc, #432]	; (8001c2c <EI_Data_Analyzer+0x2fc>)
 8001a7a:	f024 fb3d 	bl	80260f8 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	486b      	ldr	r0, [pc, #428]	; (8001c30 <EI_Data_Analyzer+0x300>)
 8001a82:	f024 fa9d 	bl	8025fc0 <iprintf>
		return;
 8001a86:	e120      	b.n	8001cca <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001a88:	4b5f      	ldr	r3, [pc, #380]	; (8001c08 <EI_Data_Analyzer+0x2d8>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d121      	bne.n	8001ad4 <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
 8001a92:	4a68      	ldr	r2, [pc, #416]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001a94:	5cd3      	ldrb	r3, [r2, r3]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d002      	beq.n	8001aa0 <EI_Data_Analyzer+0x170>
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d004      	beq.n	8001aa8 <EI_Data_Analyzer+0x178>
 8001a9e:	e007      	b.n	8001ab0 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001aa0:	4865      	ldr	r0, [pc, #404]	; (8001c38 <EI_Data_Analyzer+0x308>)
 8001aa2:	f024 fb29 	bl	80260f8 <puts>
			break;
 8001aa6:	e015      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 8001aa8:	4864      	ldr	r0, [pc, #400]	; (8001c3c <EI_Data_Analyzer+0x30c>)
 8001aaa:	f024 fb25 	bl	80260f8 <puts>
			break;
 8001aae:	e011      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8001ab0:	7ffb      	ldrb	r3, [r7, #31]
 8001ab2:	4a54      	ldr	r2, [pc, #336]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d103      	bne.n	8001ac6 <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 8001abe:	4860      	ldr	r0, [pc, #384]	; (8001c40 <EI_Data_Analyzer+0x310>)
 8001ac0:	f024 fb1a 	bl	80260f8 <puts>
 8001ac4:	e006      	b.n	8001ad4 <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 8001ac6:	7ffb      	ldrb	r3, [r7, #31]
 8001ac8:	4a5a      	ldr	r2, [pc, #360]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001aca:	5cd3      	ldrb	r3, [r2, r3]
 8001acc:	4619      	mov	r1, r3
 8001ace:	485d      	ldr	r0, [pc, #372]	; (8001c44 <EI_Data_Analyzer+0x314>)
 8001ad0:	f024 fa76 	bl	8025fc0 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 8001ad4:	7ffb      	ldrb	r3, [r7, #31]
 8001ad6:	4a5c      	ldr	r2, [pc, #368]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001ad8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001adc:	7ffa      	ldrb	r2, [r7, #31]
 8001ade:	4955      	ldr	r1, [pc, #340]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001ae0:	5c8a      	ldrb	r2, [r1, r2]
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d014      	beq.n	8001b10 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001ae6:	7ffb      	ldrb	r3, [r7, #31]
 8001ae8:	4958      	ldr	r1, [pc, #352]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001af0:	7ffb      	ldrb	r3, [r7, #31]
 8001af2:	4957      	ldr	r1, [pc, #348]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001af4:	68fa      	ldr	r2, [r7, #12]
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	4a4d      	ldr	r2, [pc, #308]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001afe:	5cd2      	ldrb	r2, [r2, r3]
 8001b00:	7ffb      	ldrb	r3, [r7, #31]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <EI_Data_Analyzer+0x318>)
 8001b06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001b0a:	4852      	ldr	r0, [pc, #328]	; (8001c54 <EI_Data_Analyzer+0x324>)
 8001b0c:	f024 faf4 	bl	80260f8 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001b10:	7ffa      	ldrb	r2, [r7, #31]
 8001b12:	7ffb      	ldrb	r3, [r7, #31]
 8001b14:	4947      	ldr	r1, [pc, #284]	; (8001c34 <EI_Data_Analyzer+0x304>)
 8001b16:	5c89      	ldrb	r1, [r1, r2]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <EI_Data_Analyzer+0x328>)
 8001b1a:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001b1c:	7ffb      	ldrb	r3, [r7, #31]
 8001b1e:	4a4f      	ldr	r2, [pc, #316]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f00e fc67 	bl	80103f8 <HAL_Elaps_Ticks>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	7ffb      	ldrb	r3, [r7, #31]
 8001b2e:	4935      	ldr	r1, [pc, #212]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b30:	338a      	adds	r3, #138	; 0x8a
 8001b32:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d318      	bcc.n	8001b6c <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001b3a:	7ffb      	ldrb	r3, [r7, #31]
 8001b3c:	4947      	ldr	r1, [pc, #284]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001b44:	7ffb      	ldrb	r3, [r7, #31]
 8001b46:	4941      	ldr	r1, [pc, #260]	; (8001c4c <EI_Data_Analyzer+0x31c>)
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001b4e:	7ffb      	ldrb	r3, [r7, #31]
 8001b50:	493f      	ldr	r1, [pc, #252]	; (8001c50 <EI_Data_Analyzer+0x320>)
 8001b52:	68fa      	ldr	r2, [r7, #12]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	4a2a      	ldr	r2, [pc, #168]	; (8001c04 <EI_Data_Analyzer+0x2d4>)
 8001b5c:	3366      	adds	r3, #102	; 0x66
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4619      	mov	r1, r3
 8001b66:	483e      	ldr	r0, [pc, #248]	; (8001c60 <EI_Data_Analyzer+0x330>)
 8001b68:	f024 fa2a 	bl	8025fc0 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001b6c:	7ffb      	ldrb	r3, [r7, #31]
 8001b6e:	493b      	ldr	r1, [pc, #236]	; (8001c5c <EI_Data_Analyzer+0x32c>)
 8001b70:	68fa      	ldr	r2, [r7, #12]
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 8001b76:	2281      	movs	r2, #129	; 0x81
 8001b78:	2100      	movs	r1, #0
 8001b7a:	483a      	ldr	r0, [pc, #232]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b7c:	f024 f938 	bl	8025df0 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001b80:	887b      	ldrh	r3, [r7, #2]
 8001b82:	461a      	mov	r2, r3
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	4837      	ldr	r0, [pc, #220]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b88:	f024 f90a 	bl	8025da0 <memcpy>
	Rx_Print_st.Size = Size;
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <EI_Data_Analyzer+0x334>)
 8001b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 8001ba8:	7ffa      	ldrb	r2, [r7, #31]
 8001baa:	492f      	ldr	r1, [pc, #188]	; (8001c68 <EI_Data_Analyzer+0x338>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3303      	adds	r3, #3
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
 8001bbe:	492b      	ldr	r1, [pc, #172]	; (8001c6c <EI_Data_Analyzer+0x33c>)
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 8001bc6:	7ffb      	ldrb	r3, [r7, #31]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f006 fde5 	bl	8008798 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 8001bce:	7dfb      	ldrb	r3, [r7, #23]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d870      	bhi.n	8001cb8 <EI_Data_Analyzer+0x388>
 8001bd6:	a201      	add	r2, pc, #4	; (adr r2, 8001bdc <EI_Data_Analyzer+0x2ac>)
 8001bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bdc:	08001c71 	.word	0x08001c71
 8001be0:	08001c81 	.word	0x08001c81
 8001be4:	08001c91 	.word	0x08001c91
 8001be8:	08001c99 	.word	0x08001c99
 8001bec:	08001cb9 	.word	0x08001cb9
 8001bf0:	08001ca9 	.word	0x08001ca9
 8001bf4:	2000030b 	.word	0x2000030b
 8001bf8:	08027a90 	.word	0x08027a90
 8001bfc:	08027ad0 	.word	0x08027ad0
 8001c00:	20000505 	.word	0x20000505
 8001c04:	20000504 	.word	0x20000504
 8001c08:	20000bbb 	.word	0x20000bbb
 8001c0c:	08027adc 	.word	0x08027adc
 8001c10:	08027b18 	.word	0x08027b18
 8001c14:	08027b34 	.word	0x08027b34
 8001c18:	08027b58 	.word	0x08027b58
 8001c1c:	2000308c 	.word	0x2000308c
 8001c20:	08027b90 	.word	0x08027b90
 8001c24:	08027bb4 	.word	0x08027bb4
 8001c28:	08027bc4 	.word	0x08027bc4
 8001c2c:	08027bd4 	.word	0x08027bd4
 8001c30:	08027c08 	.word	0x08027c08
 8001c34:	2000270c 	.word	0x2000270c
 8001c38:	08027c28 	.word	0x08027c28
 8001c3c:	08027c38 	.word	0x08027c38
 8001c40:	08027c48 	.word	0x08027c48
 8001c44:	08027c60 	.word	0x08027c60
 8001c48:	20002608 	.word	0x20002608
 8001c4c:	20002630 	.word	0x20002630
 8001c50:	20002658 	.word	0x20002658
 8001c54:	08027c84 	.word	0x08027c84
 8001c58:	200026b0 	.word	0x200026b0
 8001c5c:	200026bc 	.word	0x200026bc
 8001c60:	08027c9c 	.word	0x08027c9c
 8001c64:	20003328 	.word	0x20003328
 8001c68:	20002da4 	.word	0x20002da4
 8001c6c:	200024e8 	.word	0x200024e8
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	b2d9      	uxtb	r1, r3
 8001c74:	7fbb      	ldrb	r3, [r7, #30]
 8001c76:	7ffa      	ldrb	r2, [r7, #31]
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f82d 	bl	8001cd8 <Init_Msg_extr>
		break;
 8001c7e:	e024      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001c80:	887b      	ldrh	r3, [r7, #2]
 8001c82:	b2d9      	uxtb	r1, r3
 8001c84:	7fbb      	ldrb	r3, [r7, #30]
 8001c86:	7ffa      	ldrb	r2, [r7, #31]
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f001 fbc3 	bl	8003414 <Vital_Msg_extr>
		break;
 8001c8e:	e01c      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <EI_Data_Analyzer+0x3a0>)
 8001c92:	f024 fa31 	bl	80260f8 <puts>
		break;
 8001c96:	e018      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001c98:	887b      	ldrh	r3, [r7, #2]
 8001c9a:	b2d9      	uxtb	r1, r3
 8001c9c:	7fbb      	ldrb	r3, [r7, #30]
 8001c9e:	7ffa      	ldrb	r2, [r7, #31]
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f003 ff3f 	bl	8005b24 <Status_Msg_Extr>
		break;
 8001ca6:	e010      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	b2d9      	uxtb	r1, r3
 8001cac:	7fbb      	ldrb	r3, [r7, #30]
 8001cae:	7ffa      	ldrb	r2, [r7, #31]
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f005 f9b9 	bl	8007028 <Service_Msg_Extr>
		break;
 8001cb6:	e008      	b.n	8001cca <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4805      	ldr	r0, [pc, #20]	; (8001cd4 <EI_Data_Analyzer+0x3a4>)
 8001cbe:	f024 f97f 	bl	8025fc0 <iprintf>
		break;
 8001cc2:	e002      	b.n	8001cca <EI_Data_Analyzer+0x39a>
			return;
 8001cc4:	bf00      	nop
 8001cc6:	e000      	b.n	8001cca <EI_Data_Analyzer+0x39a>
		return;
 8001cc8:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 8001cca:	3720      	adds	r7, #32
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	08027cb8 	.word	0x08027cb8
 8001cd4:	08027cdc 	.word	0x08027cdc

08001cd8 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b089      	sub	sp, #36	; 0x24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4608      	mov	r0, r1
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	70fb      	strb	r3, [r7, #3]
 8001cea:	460b      	mov	r3, r1
 8001cec:	70bb      	strb	r3, [r7, #2]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001d02:	f017 fa47 	bl	8019194 <HAL_GetTick>
 8001d06:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001d08:	2300      	movs	r3, #0
 8001d0a:	83fb      	strh	r3, [r7, #30]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	3b05      	subs	r3, #5
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f013 fcae 	bl	801567c <CalculateDirectReverseCrc>
 8001d20:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8001d22:	78fb      	ldrb	r3, [r7, #3]
 8001d24:	3b05      	subs	r3, #5
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	441a      	add	r2, r3
 8001d2a:	8bbb      	ldrh	r3, [r7, #28]
 8001d2c:	2120      	movs	r1, #32
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc70 	bl	8000614 <ExtractBits>
 8001d34:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d013      	beq.n	8001d66 <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001d3e:	78bb      	ldrb	r3, [r7, #2]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d42:	3366      	adds	r3, #102	; 0x66
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4827      	ldr	r0, [pc, #156]	; (8001dec <Init_Msg_extr+0x114>)
 8001d4e:	f024 f937 	bl	8025fc0 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 8001d52:	6939      	ldr	r1, [r7, #16]
 8001d54:	4826      	ldr	r0, [pc, #152]	; (8001df0 <Init_Msg_extr+0x118>)
 8001d56:	f024 f933 	bl	8025fc0 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	4825      	ldr	r0, [pc, #148]	; (8001df4 <Init_Msg_extr+0x11c>)
 8001d5e:	f024 f92f 	bl	8025fc0 <iprintf>
		return;
 8001d62:	f000 be32 	b.w	80029ca <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 8001d66:	78bb      	ldrb	r3, [r7, #2]
 8001d68:	4a23      	ldr	r2, [pc, #140]	; (8001df8 <Init_Msg_extr+0x120>)
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001d6e:	78bb      	ldrb	r3, [r7, #2]
 8001d70:	4a22      	ldr	r2, [pc, #136]	; (8001dfc <Init_Msg_extr+0x124>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f103 021d 	add.w	r2, r3, #29
 8001d7c:	8bbb      	ldrh	r3, [r7, #28]
 8001d7e:	2110      	movs	r1, #16
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fc47 	bl	8000614 <ExtractBits>
 8001d86:	4603      	mov	r3, r0
 8001d88:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	4a16      	ldr	r2, [pc, #88]	; (8001de8 <Init_Msg_extr+0x110>)
 8001d8e:	33f4      	adds	r3, #244	; 0xf4
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	889b      	ldrh	r3, [r3, #4]
 8001d96:	8b7a      	ldrh	r2, [r7, #26]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d03d      	beq.n	8001e18 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	; (8001e00 <Init_Msg_extr+0x128>)
 8001da0:	2101      	movs	r1, #1
 8001da2:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <Init_Msg_extr+0x110>)
 8001da8:	3366      	adds	r3, #102	; 0x66
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4814      	ldr	r0, [pc, #80]	; (8001e04 <Init_Msg_extr+0x12c>)
 8001db4:	f024 f904 	bl	8025fc0 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 8001db8:	8b7b      	ldrh	r3, [r7, #26]
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4812      	ldr	r0, [pc, #72]	; (8001e08 <Init_Msg_extr+0x130>)
 8001dbe:	f024 f8ff 	bl	8025fc0 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	; (8001de8 <Init_Msg_extr+0x110>)
 8001dc6:	33f4      	adds	r3, #244	; 0xf4
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	889b      	ldrh	r3, [r3, #4]
 8001dce:	4619      	mov	r1, r3
 8001dd0:	480e      	ldr	r0, [pc, #56]	; (8001e0c <Init_Msg_extr+0x134>)
 8001dd2:	f024 f8f5 	bl	8025fc0 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001dd6:	490e      	ldr	r1, [pc, #56]	; (8001e10 <Init_Msg_extr+0x138>)
 8001dd8:	480e      	ldr	r0, [pc, #56]	; (8001e14 <Init_Msg_extr+0x13c>)
 8001dda:	f7fe fa31 	bl	8000240 <strcmp>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01d      	beq.n	8001e20 <Init_Msg_extr+0x148>
		{
			return;
 8001de4:	f000 bdf1 	b.w	80029ca <Init_Msg_extr+0xcf2>
 8001de8:	20000504 	.word	0x20000504
 8001dec:	08027cf8 	.word	0x08027cf8
 8001df0:	08027d14 	.word	0x08027d14
 8001df4:	08027d24 	.word	0x08027d24
 8001df8:	20002680 	.word	0x20002680
 8001dfc:	20002698 	.word	0x20002698
 8001e00:	2000268c 	.word	0x2000268c
 8001e04:	08027d34 	.word	0x08027d34
 8001e08:	08027d6c 	.word	0x08027d6c
 8001e0c:	08027d90 	.word	0x08027d90
 8001e10:	08027ad0 	.word	0x08027ad0
 8001e14:	20000505 	.word	0x20000505
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001e18:	78bb      	ldrb	r3, [r7, #2]
 8001e1a:	4aab      	ldr	r2, [pc, #684]	; (80020c8 <Init_Msg_extr+0x3f0>)
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001e26:	8bbb      	ldrh	r3, [r7, #28]
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fbf2 	bl	8000614 <ExtractBits>
 8001e30:	4603      	mov	r3, r0
 8001e32:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8001e34:	78bb      	ldrb	r3, [r7, #2]
 8001e36:	4aa5      	ldr	r2, [pc, #660]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e38:	4413      	add	r3, r2
 8001e3a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e3e:	7e7a      	ldrb	r2, [r7, #25]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d01f      	beq.n	8001e84 <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001e44:	78bb      	ldrb	r3, [r7, #2]
 8001e46:	4aa1      	ldr	r2, [pc, #644]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e48:	3366      	adds	r3, #102	; 0x66
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	4619      	mov	r1, r3
 8001e52:	489f      	ldr	r0, [pc, #636]	; (80020d0 <Init_Msg_extr+0x3f8>)
 8001e54:	f024 f8b4 	bl	8025fc0 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001e58:	78bb      	ldrb	r3, [r7, #2]
 8001e5a:	4a9c      	ldr	r2, [pc, #624]	; (80020cc <Init_Msg_extr+0x3f4>)
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001e62:	4619      	mov	r1, r3
 8001e64:	489b      	ldr	r0, [pc, #620]	; (80020d4 <Init_Msg_extr+0x3fc>)
 8001e66:	f024 f8ab 	bl	8025fc0 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001e6a:	7e7b      	ldrb	r3, [r7, #25]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	489a      	ldr	r0, [pc, #616]	; (80020d8 <Init_Msg_extr+0x400>)
 8001e70:	f024 f8a6 	bl	8025fc0 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 8001e74:	4999      	ldr	r1, [pc, #612]	; (80020dc <Init_Msg_extr+0x404>)
 8001e76:	489a      	ldr	r0, [pc, #616]	; (80020e0 <Init_Msg_extr+0x408>)
 8001e78:	f7fe f9e2 	bl	8000240 <strcmp>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	f040 85a2 	bne.w	80029c8 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 8001e84:	78bb      	ldrb	r3, [r7, #2]
 8001e86:	4997      	ldr	r1, [pc, #604]	; (80020e4 <Init_Msg_extr+0x40c>)
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001e8e:	78bb      	ldrb	r3, [r7, #2]
 8001e90:	4a95      	ldr	r2, [pc, #596]	; (80020e8 <Init_Msg_extr+0x410>)
 8001e92:	2101      	movs	r1, #1
 8001e94:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 8001e96:	78bb      	ldrb	r3, [r7, #2]
 8001e98:	4a94      	ldr	r2, [pc, #592]	; (80020ec <Init_Msg_extr+0x414>)
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001e9e:	78bb      	ldrb	r3, [r7, #2]
 8001ea0:	4993      	ldr	r1, [pc, #588]	; (80020f0 <Init_Msg_extr+0x418>)
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 8001ea8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001eac:	3308      	adds	r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	da00      	bge.n	8001eb4 <Init_Msg_extr+0x1dc>
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	10db      	asrs	r3, r3, #3
 8001eb6:	b29a      	uxth	r2, r3
 8001eb8:	8bfb      	ldrh	r3, [r7, #30]
 8001eba:	4413      	add	r3, r2
 8001ebc:	83fb      	strh	r3, [r7, #30]
 8001ebe:	8bbb      	ldrh	r3, [r7, #28]
 8001ec0:	3308      	adds	r3, #8
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	b21b      	sxth	r3, r3
 8001ec6:	425a      	negs	r2, r3
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	bf58      	it	pl
 8001ed2:	4253      	negpl	r3, r2
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001ed8:	8bfb      	ldrh	r3, [r7, #30]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	441a      	add	r2, r3
 8001ede:	8bbb      	ldrh	r3, [r7, #28]
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb96 	bl	8000614 <ExtractBits>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	78bb      	ldrb	r3, [r7, #2]
 8001eec:	b291      	uxth	r1, r2
 8001eee:	4a81      	ldr	r2, [pc, #516]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001ef0:	015b      	lsls	r3, r3, #5
 8001ef2:	4413      	add	r3, r2
 8001ef4:	3310      	adds	r3, #16
 8001ef6:	460a      	mov	r2, r1
 8001ef8:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	4a7d      	ldr	r2, [pc, #500]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	3310      	adds	r3, #16
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	4619      	mov	r1, r3
 8001f08:	487b      	ldr	r0, [pc, #492]	; (80020f8 <Init_Msg_extr+0x420>)
 8001f0a:	f024 f859 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 8001f0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f12:	3310      	adds	r3, #16
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da00      	bge.n	8001f1a <Init_Msg_extr+0x242>
 8001f18:	3307      	adds	r3, #7
 8001f1a:	10db      	asrs	r3, r3, #3
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	8bfb      	ldrh	r3, [r7, #30]
 8001f20:	4413      	add	r3, r2
 8001f22:	83fb      	strh	r3, [r7, #30]
 8001f24:	8bbb      	ldrh	r3, [r7, #28]
 8001f26:	3310      	adds	r3, #16
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b21b      	sxth	r3, r3
 8001f2c:	425a      	negs	r2, r3
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	f002 0207 	and.w	r2, r2, #7
 8001f36:	bf58      	it	pl
 8001f38:	4253      	negpl	r3, r2
 8001f3a:	b21b      	sxth	r3, r3
 8001f3c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001f3e:	8bfb      	ldrh	r3, [r7, #30]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	441a      	add	r2, r3
 8001f44:	8bbb      	ldrh	r3, [r7, #28]
 8001f46:	2110      	movs	r1, #16
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb63 	bl	8000614 <ExtractBits>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	78bb      	ldrb	r3, [r7, #2]
 8001f52:	b291      	uxth	r1, r2
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f56:	015b      	lsls	r3, r3, #5
 8001f58:	4413      	add	r3, r2
 8001f5a:	330e      	adds	r3, #14
 8001f5c:	460a      	mov	r2, r1
 8001f5e:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001f60:	78bb      	ldrb	r3, [r7, #2]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001f64:	015b      	lsls	r3, r3, #5
 8001f66:	4413      	add	r3, r2
 8001f68:	330e      	adds	r3, #14
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4863      	ldr	r0, [pc, #396]	; (80020fc <Init_Msg_extr+0x424>)
 8001f70:	f024 f826 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 8001f74:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f78:	3310      	adds	r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	da00      	bge.n	8001f80 <Init_Msg_extr+0x2a8>
 8001f7e:	3307      	adds	r3, #7
 8001f80:	10db      	asrs	r3, r3, #3
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	8bfb      	ldrh	r3, [r7, #30]
 8001f86:	4413      	add	r3, r2
 8001f88:	83fb      	strh	r3, [r7, #30]
 8001f8a:	8bbb      	ldrh	r3, [r7, #28]
 8001f8c:	3310      	adds	r3, #16
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	b21b      	sxth	r3, r3
 8001f92:	425a      	negs	r2, r3
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	f002 0207 	and.w	r2, r2, #7
 8001f9c:	bf58      	it	pl
 8001f9e:	4253      	negpl	r3, r2
 8001fa0:	b21b      	sxth	r3, r3
 8001fa2:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fa4:	8bfb      	ldrh	r3, [r7, #30]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	441a      	add	r2, r3
 8001faa:	8bbb      	ldrh	r3, [r7, #28]
 8001fac:	2108      	movs	r1, #8
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fb30 	bl	8000614 <ExtractBits>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	b2d1      	uxtb	r1, r2
 8001fba:	4a4e      	ldr	r2, [pc, #312]	; (80020f4 <Init_Msg_extr+0x41c>)
 8001fbc:	015b      	lsls	r3, r3, #5
 8001fbe:	4413      	add	r3, r2
 8001fc0:	460a      	mov	r2, r1
 8001fc2:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8001fc4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fc8:	3308      	adds	r3, #8
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	da00      	bge.n	8001fd0 <Init_Msg_extr+0x2f8>
 8001fce:	3307      	adds	r3, #7
 8001fd0:	10db      	asrs	r3, r3, #3
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	8bfb      	ldrh	r3, [r7, #30]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bbb      	ldrh	r3, [r7, #28]
 8001fdc:	3308      	adds	r3, #8
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b21b      	sxth	r3, r3
 8001fe2:	425a      	negs	r2, r3
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	f002 0207 	and.w	r2, r2, #7
 8001fec:	bf58      	it	pl
 8001fee:	4253      	negpl	r3, r2
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ff4:	8bfb      	ldrh	r3, [r7, #30]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	441a      	add	r2, r3
 8001ffa:	8bbb      	ldrh	r3, [r7, #28]
 8001ffc:	2108      	movs	r1, #8
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fb08 	bl	8000614 <ExtractBits>
 8002004:	4602      	mov	r2, r0
 8002006:	78bb      	ldrb	r3, [r7, #2]
 8002008:	b2d1      	uxtb	r1, r2
 800200a:	4a3a      	ldr	r2, [pc, #232]	; (80020f4 <Init_Msg_extr+0x41c>)
 800200c:	015b      	lsls	r3, r3, #5
 800200e:	4413      	add	r3, r2
 8002010:	3301      	adds	r3, #1
 8002012:	460a      	mov	r2, r1
 8002014:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8002016:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800201a:	3308      	adds	r3, #8
 800201c:	2b00      	cmp	r3, #0
 800201e:	da00      	bge.n	8002022 <Init_Msg_extr+0x34a>
 8002020:	3307      	adds	r3, #7
 8002022:	10db      	asrs	r3, r3, #3
 8002024:	b29a      	uxth	r2, r3
 8002026:	8bfb      	ldrh	r3, [r7, #30]
 8002028:	4413      	add	r3, r2
 800202a:	83fb      	strh	r3, [r7, #30]
 800202c:	8bbb      	ldrh	r3, [r7, #28]
 800202e:	3308      	adds	r3, #8
 8002030:	b29b      	uxth	r3, r3
 8002032:	b21b      	sxth	r3, r3
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	f002 0207 	and.w	r2, r2, #7
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	b21b      	sxth	r3, r3
 8002044:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002046:	8bfb      	ldrh	r3, [r7, #30]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	441a      	add	r2, r3
 800204c:	8bbb      	ldrh	r3, [r7, #28]
 800204e:	2108      	movs	r1, #8
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fadf 	bl	8000614 <ExtractBits>
 8002056:	4602      	mov	r2, r0
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	b2d1      	uxtb	r1, r2
 800205c:	4a25      	ldr	r2, [pc, #148]	; (80020f4 <Init_Msg_extr+0x41c>)
 800205e:	015b      	lsls	r3, r3, #5
 8002060:	4413      	add	r3, r2
 8002062:	3302      	adds	r3, #2
 8002064:	460a      	mov	r2, r1
 8002066:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8002068:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800206c:	3308      	adds	r3, #8
 800206e:	2b00      	cmp	r3, #0
 8002070:	da00      	bge.n	8002074 <Init_Msg_extr+0x39c>
 8002072:	3307      	adds	r3, #7
 8002074:	10db      	asrs	r3, r3, #3
 8002076:	b29a      	uxth	r2, r3
 8002078:	8bfb      	ldrh	r3, [r7, #30]
 800207a:	4413      	add	r3, r2
 800207c:	83fb      	strh	r3, [r7, #30]
 800207e:	8bbb      	ldrh	r3, [r7, #28]
 8002080:	3308      	adds	r3, #8
 8002082:	b29b      	uxth	r3, r3
 8002084:	b21b      	sxth	r3, r3
 8002086:	425a      	negs	r2, r3
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	f002 0207 	and.w	r2, r2, #7
 8002090:	bf58      	it	pl
 8002092:	4253      	negpl	r3, r2
 8002094:	b21b      	sxth	r3, r3
 8002096:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002098:	8bfb      	ldrh	r3, [r7, #30]
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	441a      	add	r2, r3
 800209e:	8bbb      	ldrh	r3, [r7, #28]
 80020a0:	2110      	movs	r1, #16
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fab6 	bl	8000614 <ExtractBits>
 80020a8:	4602      	mov	r2, r0
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	b291      	uxth	r1, r2
 80020ae:	4a14      	ldr	r2, [pc, #80]	; (8002100 <Init_Msg_extr+0x428>)
 80020b0:	011b      	lsls	r3, r3, #4
 80020b2:	4413      	add	r3, r2
 80020b4:	3304      	adds	r3, #4
 80020b6:	460a      	mov	r2, r1
 80020b8:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80020ba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020be:	3310      	adds	r3, #16
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	da1f      	bge.n	8002104 <Init_Msg_extr+0x42c>
 80020c4:	3307      	adds	r3, #7
 80020c6:	e01d      	b.n	8002104 <Init_Msg_extr+0x42c>
 80020c8:	2000268c 	.word	0x2000268c
 80020cc:	20000504 	.word	0x20000504
 80020d0:	08027db4 	.word	0x08027db4
 80020d4:	08027ddc 	.word	0x08027ddc
 80020d8:	08027df0 	.word	0x08027df0
 80020dc:	08027ad0 	.word	0x08027ad0
 80020e0:	20000505 	.word	0x20000505
 80020e4:	20002630 	.word	0x20002630
 80020e8:	20002698 	.word	0x20002698
 80020ec:	20002718 	.word	0x20002718
 80020f0:	20002724 	.word	0x20002724
 80020f4:	20002994 	.word	0x20002994
 80020f8:	08027e04 	.word	0x08027e04
 80020fc:	08027e0c 	.word	0x08027e0c
 8002100:	200028f4 	.word	0x200028f4
 8002104:	10db      	asrs	r3, r3, #3
 8002106:	b29a      	uxth	r2, r3
 8002108:	8bfb      	ldrh	r3, [r7, #30]
 800210a:	4413      	add	r3, r2
 800210c:	83fb      	strh	r3, [r7, #30]
 800210e:	8bbb      	ldrh	r3, [r7, #28]
 8002110:	3310      	adds	r3, #16
 8002112:	b29b      	uxth	r3, r3
 8002114:	b21b      	sxth	r3, r3
 8002116:	425a      	negs	r2, r3
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	f002 0207 	and.w	r2, r2, #7
 8002120:	bf58      	it	pl
 8002122:	4253      	negpl	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8002128:	78bb      	ldrb	r3, [r7, #2]
 800212a:	4a8e      	ldr	r2, [pc, #568]	; (8002364 <Init_Msg_extr+0x68c>)
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 811d 	beq.w	8002378 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800213e:	8bfb      	ldrh	r3, [r7, #30]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	441a      	add	r2, r3
 8002144:	8bbb      	ldrh	r3, [r7, #28]
 8002146:	2108      	movs	r1, #8
 8002148:	4618      	mov	r0, r3
 800214a:	f7fe fa63 	bl	8000614 <ExtractBits>
 800214e:	4603      	mov	r3, r0
 8002150:	78ba      	ldrb	r2, [r7, #2]
 8002152:	b2d8      	uxtb	r0, r3
 8002154:	4984      	ldr	r1, [pc, #528]	; (8002368 <Init_Msg_extr+0x690>)
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	440b      	add	r3, r1
 8002160:	3305      	adds	r3, #5
 8002162:	4602      	mov	r2, r0
 8002164:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8002166:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800216a:	3308      	adds	r3, #8
 800216c:	2b00      	cmp	r3, #0
 800216e:	da00      	bge.n	8002172 <Init_Msg_extr+0x49a>
 8002170:	3307      	adds	r3, #7
 8002172:	10db      	asrs	r3, r3, #3
 8002174:	b29a      	uxth	r2, r3
 8002176:	8bfb      	ldrh	r3, [r7, #30]
 8002178:	4413      	add	r3, r2
 800217a:	83fb      	strh	r3, [r7, #30]
 800217c:	8bbb      	ldrh	r3, [r7, #28]
 800217e:	3308      	adds	r3, #8
 8002180:	b29b      	uxth	r3, r3
 8002182:	b21b      	sxth	r3, r3
 8002184:	425a      	negs	r2, r3
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	f002 0207 	and.w	r2, r2, #7
 800218e:	bf58      	it	pl
 8002190:	4253      	negpl	r3, r2
 8002192:	b21b      	sxth	r3, r3
 8002194:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002196:	8bfb      	ldrh	r3, [r7, #30]
 8002198:	687a      	ldr	r2, [r7, #4]
 800219a:	441a      	add	r2, r3
 800219c:	8bbb      	ldrh	r3, [r7, #28]
 800219e:	2108      	movs	r1, #8
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fa37 	bl	8000614 <ExtractBits>
 80021a6:	4603      	mov	r3, r0
 80021a8:	78ba      	ldrb	r2, [r7, #2]
 80021aa:	b2d8      	uxtb	r0, r3
 80021ac:	496e      	ldr	r1, [pc, #440]	; (8002368 <Init_Msg_extr+0x690>)
 80021ae:	4613      	mov	r3, r2
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	4413      	add	r3, r2
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	440b      	add	r3, r1
 80021b8:	3304      	adds	r3, #4
 80021ba:	4602      	mov	r2, r0
 80021bc:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80021be:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c2:	3308      	adds	r3, #8
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	da00      	bge.n	80021ca <Init_Msg_extr+0x4f2>
 80021c8:	3307      	adds	r3, #7
 80021ca:	10db      	asrs	r3, r3, #3
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	8bfb      	ldrh	r3, [r7, #30]
 80021d0:	4413      	add	r3, r2
 80021d2:	83fb      	strh	r3, [r7, #30]
 80021d4:	8bbb      	ldrh	r3, [r7, #28]
 80021d6:	3308      	adds	r3, #8
 80021d8:	b29b      	uxth	r3, r3
 80021da:	b21b      	sxth	r3, r3
 80021dc:	425a      	negs	r2, r3
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	f002 0207 	and.w	r2, r2, #7
 80021e6:	bf58      	it	pl
 80021e8:	4253      	negpl	r3, r2
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80021ee:	8bfb      	ldrh	r3, [r7, #30]
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	441a      	add	r2, r3
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	2108      	movs	r1, #8
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7fe fa0b 	bl	8000614 <ExtractBits>
 80021fe:	4603      	mov	r3, r0
 8002200:	78ba      	ldrb	r2, [r7, #2]
 8002202:	b2d8      	uxtb	r0, r3
 8002204:	4958      	ldr	r1, [pc, #352]	; (8002368 <Init_Msg_extr+0x690>)
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	005b      	lsls	r3, r3, #1
 800220e:	440b      	add	r3, r1
 8002210:	3303      	adds	r3, #3
 8002212:	4602      	mov	r2, r0
 8002214:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8002216:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800221a:	3308      	adds	r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	da00      	bge.n	8002222 <Init_Msg_extr+0x54a>
 8002220:	3307      	adds	r3, #7
 8002222:	10db      	asrs	r3, r3, #3
 8002224:	b29a      	uxth	r2, r3
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	4413      	add	r3, r2
 800222a:	83fb      	strh	r3, [r7, #30]
 800222c:	8bbb      	ldrh	r3, [r7, #28]
 800222e:	3308      	adds	r3, #8
 8002230:	b29b      	uxth	r3, r3
 8002232:	b21b      	sxth	r3, r3
 8002234:	425a      	negs	r2, r3
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	f002 0207 	and.w	r2, r2, #7
 800223e:	bf58      	it	pl
 8002240:	4253      	negpl	r3, r2
 8002242:	b21b      	sxth	r3, r3
 8002244:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002246:	8bfb      	ldrh	r3, [r7, #30]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	441a      	add	r2, r3
 800224c:	8bbb      	ldrh	r3, [r7, #28]
 800224e:	2108      	movs	r1, #8
 8002250:	4618      	mov	r0, r3
 8002252:	f7fe f9df 	bl	8000614 <ExtractBits>
 8002256:	4603      	mov	r3, r0
 8002258:	78ba      	ldrb	r2, [r7, #2]
 800225a:	b2d8      	uxtb	r0, r3
 800225c:	4942      	ldr	r1, [pc, #264]	; (8002368 <Init_Msg_extr+0x690>)
 800225e:	4613      	mov	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	4413      	add	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	440b      	add	r3, r1
 8002268:	4602      	mov	r2, r0
 800226a:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 800226c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002270:	3308      	adds	r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	da00      	bge.n	8002278 <Init_Msg_extr+0x5a0>
 8002276:	3307      	adds	r3, #7
 8002278:	10db      	asrs	r3, r3, #3
 800227a:	b29a      	uxth	r2, r3
 800227c:	8bfb      	ldrh	r3, [r7, #30]
 800227e:	4413      	add	r3, r2
 8002280:	83fb      	strh	r3, [r7, #30]
 8002282:	8bbb      	ldrh	r3, [r7, #28]
 8002284:	3308      	adds	r3, #8
 8002286:	b29b      	uxth	r3, r3
 8002288:	b21b      	sxth	r3, r3
 800228a:	425a      	negs	r2, r3
 800228c:	f003 0307 	and.w	r3, r3, #7
 8002290:	f002 0207 	and.w	r2, r2, #7
 8002294:	bf58      	it	pl
 8002296:	4253      	negpl	r3, r2
 8002298:	b21b      	sxth	r3, r3
 800229a:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800229c:	8bfb      	ldrh	r3, [r7, #30]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	441a      	add	r2, r3
 80022a2:	8bbb      	ldrh	r3, [r7, #28]
 80022a4:	2108      	movs	r1, #8
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f9b4 	bl	8000614 <ExtractBits>
 80022ac:	4603      	mov	r3, r0
 80022ae:	78ba      	ldrb	r2, [r7, #2]
 80022b0:	b2d8      	uxtb	r0, r3
 80022b2:	492d      	ldr	r1, [pc, #180]	; (8002368 <Init_Msg_extr+0x690>)
 80022b4:	4613      	mov	r3, r2
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	4413      	add	r3, r2
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	3301      	adds	r3, #1
 80022c0:	4602      	mov	r2, r0
 80022c2:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80022c4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80022c8:	3308      	adds	r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	da00      	bge.n	80022d0 <Init_Msg_extr+0x5f8>
 80022ce:	3307      	adds	r3, #7
 80022d0:	10db      	asrs	r3, r3, #3
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	8bfb      	ldrh	r3, [r7, #30]
 80022d6:	4413      	add	r3, r2
 80022d8:	83fb      	strh	r3, [r7, #30]
 80022da:	8bbb      	ldrh	r3, [r7, #28]
 80022dc:	3308      	adds	r3, #8
 80022de:	b29b      	uxth	r3, r3
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	425a      	negs	r2, r3
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	f002 0207 	and.w	r2, r2, #7
 80022ec:	bf58      	it	pl
 80022ee:	4253      	negpl	r3, r2
 80022f0:	b21b      	sxth	r3, r3
 80022f2:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80022f4:	8bfb      	ldrh	r3, [r7, #30]
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	441a      	add	r2, r3
 80022fa:	8bbb      	ldrh	r3, [r7, #28]
 80022fc:	2108      	movs	r1, #8
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f988 	bl	8000614 <ExtractBits>
 8002304:	4603      	mov	r3, r0
 8002306:	78ba      	ldrb	r2, [r7, #2]
 8002308:	b2d8      	uxtb	r0, r3
 800230a:	4917      	ldr	r1, [pc, #92]	; (8002368 <Init_Msg_extr+0x690>)
 800230c:	4613      	mov	r3, r2
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	4413      	add	r3, r2
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	440b      	add	r3, r1
 8002316:	3302      	adds	r3, #2
 8002318:	4602      	mov	r2, r0
 800231a:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 800231c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Init_Msg_extr+0x650>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	8bfb      	ldrh	r3, [r7, #30]
 800232e:	4413      	add	r3, r2
 8002330:	83fb      	strh	r3, [r7, #30]
 8002332:	8bbb      	ldrh	r3, [r7, #28]
 8002334:	3308      	adds	r3, #8
 8002336:	b29b      	uxth	r3, r3
 8002338:	b21b      	sxth	r3, r3
 800233a:	425a      	negs	r2, r3
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	f002 0207 	and.w	r2, r2, #7
 8002344:	bf58      	it	pl
 8002346:	4253      	negpl	r3, r2
 8002348:	b21b      	sxth	r3, r3
 800234a:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800234c:	78bb      	ldrb	r3, [r7, #2]
 800234e:	4618      	mov	r0, r3
 8002350:	f007 fada 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <Init_Msg_extr+0x698>
 800235a:	78bb      	ldrb	r3, [r7, #2]
 800235c:	4a03      	ldr	r2, [pc, #12]	; (800236c <Init_Msg_extr+0x694>)
 800235e:	2100      	movs	r1, #0
 8002360:	54d1      	strb	r1, [r2, r3]
 8002362:	e009      	b.n	8002378 <Init_Msg_extr+0x6a0>
 8002364:	200028f4 	.word	0x200028f4
 8002368:	200028b8 	.word	0x200028b8
 800236c:	20002764 	.word	0x20002764
 8002370:	78bb      	ldrb	r3, [r7, #2]
 8002372:	4aa4      	ldr	r2, [pc, #656]	; (8002604 <Init_Msg_extr+0x92c>)
 8002374:	2101      	movs	r1, #1
 8002376:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002378:	8bfb      	ldrh	r3, [r7, #30]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	441a      	add	r2, r3
 800237e:	8bbb      	ldrh	r3, [r7, #28]
 8002380:	2108      	movs	r1, #8
 8002382:	4618      	mov	r0, r3
 8002384:	f7fe f946 	bl	8000614 <ExtractBits>
 8002388:	4602      	mov	r2, r0
 800238a:	78bb      	ldrb	r3, [r7, #2]
 800238c:	b2d1      	uxtb	r1, r2
 800238e:	4a9e      	ldr	r2, [pc, #632]	; (8002608 <Init_Msg_extr+0x930>)
 8002390:	015b      	lsls	r3, r3, #5
 8002392:	4413      	add	r3, r2
 8002394:	3303      	adds	r3, #3
 8002396:	460a      	mov	r2, r1
 8002398:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 800239a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800239e:	3308      	adds	r3, #8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	da00      	bge.n	80023a6 <Init_Msg_extr+0x6ce>
 80023a4:	3307      	adds	r3, #7
 80023a6:	10db      	asrs	r3, r3, #3
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	8bfb      	ldrh	r3, [r7, #30]
 80023ac:	4413      	add	r3, r2
 80023ae:	83fb      	strh	r3, [r7, #30]
 80023b0:	8bbb      	ldrh	r3, [r7, #28]
 80023b2:	3308      	adds	r3, #8
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	425a      	negs	r2, r3
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	f002 0207 	and.w	r2, r2, #7
 80023c2:	bf58      	it	pl
 80023c4:	4253      	negpl	r3, r2
 80023c6:	b21b      	sxth	r3, r3
 80023c8:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80023ca:	8bfb      	ldrh	r3, [r7, #30]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	441a      	add	r2, r3
 80023d0:	8bbb      	ldrh	r3, [r7, #28]
 80023d2:	2110      	movs	r1, #16
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe f91d 	bl	8000614 <ExtractBits>
 80023da:	4602      	mov	r2, r0
 80023dc:	78bb      	ldrb	r3, [r7, #2]
 80023de:	b291      	uxth	r1, r2
 80023e0:	4a89      	ldr	r2, [pc, #548]	; (8002608 <Init_Msg_extr+0x930>)
 80023e2:	015b      	lsls	r3, r3, #5
 80023e4:	4413      	add	r3, r2
 80023e6:	3312      	adds	r3, #18
 80023e8:	460a      	mov	r2, r1
 80023ea:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 80023ec:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80023f0:	3310      	adds	r3, #16
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	da00      	bge.n	80023f8 <Init_Msg_extr+0x720>
 80023f6:	3307      	adds	r3, #7
 80023f8:	10db      	asrs	r3, r3, #3
 80023fa:	b29a      	uxth	r2, r3
 80023fc:	8bfb      	ldrh	r3, [r7, #30]
 80023fe:	4413      	add	r3, r2
 8002400:	83fb      	strh	r3, [r7, #30]
 8002402:	8bbb      	ldrh	r3, [r7, #28]
 8002404:	3310      	adds	r3, #16
 8002406:	b29b      	uxth	r3, r3
 8002408:	b21b      	sxth	r3, r3
 800240a:	425a      	negs	r2, r3
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	f002 0207 	and.w	r2, r2, #7
 8002414:	bf58      	it	pl
 8002416:	4253      	negpl	r3, r2
 8002418:	b21b      	sxth	r3, r3
 800241a:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 800241c:	78bb      	ldrb	r3, [r7, #2]
 800241e:	015b      	lsls	r3, r3, #5
 8002420:	4a79      	ldr	r2, [pc, #484]	; (8002608 <Init_Msg_extr+0x930>)
 8002422:	4413      	add	r3, r2
 8002424:	1d18      	adds	r0, r3, #4
 8002426:	8bfb      	ldrh	r3, [r7, #30]
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	4413      	add	r3, r2
 800242c:	2206      	movs	r2, #6
 800242e:	4619      	mov	r1, r3
 8002430:	f023 fcb6 	bl	8025da0 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8002434:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002438:	3310      	adds	r3, #16
 800243a:	2b00      	cmp	r3, #0
 800243c:	da00      	bge.n	8002440 <Init_Msg_extr+0x768>
 800243e:	3307      	adds	r3, #7
 8002440:	10db      	asrs	r3, r3, #3
 8002442:	b29a      	uxth	r2, r3
 8002444:	8bfb      	ldrh	r3, [r7, #30]
 8002446:	4413      	add	r3, r2
 8002448:	83fb      	strh	r3, [r7, #30]
 800244a:	8bbb      	ldrh	r3, [r7, #28]
 800244c:	3310      	adds	r3, #16
 800244e:	b29b      	uxth	r3, r3
 8002450:	b21b      	sxth	r3, r3
 8002452:	425a      	negs	r2, r3
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	f002 0207 	and.w	r2, r2, #7
 800245c:	bf58      	it	pl
 800245e:	4253      	negpl	r3, r2
 8002460:	b21b      	sxth	r3, r3
 8002462:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002464:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002468:	3310      	adds	r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	da00      	bge.n	8002470 <Init_Msg_extr+0x798>
 800246e:	3307      	adds	r3, #7
 8002470:	10db      	asrs	r3, r3, #3
 8002472:	b29a      	uxth	r2, r3
 8002474:	8bfb      	ldrh	r3, [r7, #30]
 8002476:	4413      	add	r3, r2
 8002478:	83fb      	strh	r3, [r7, #30]
 800247a:	8bbb      	ldrh	r3, [r7, #28]
 800247c:	3310      	adds	r3, #16
 800247e:	b29b      	uxth	r3, r3
 8002480:	b21b      	sxth	r3, r3
 8002482:	425a      	negs	r2, r3
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	f002 0207 	and.w	r2, r2, #7
 800248c:	bf58      	it	pl
 800248e:	4253      	negpl	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8002494:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002498:	3310      	adds	r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	da00      	bge.n	80024a0 <Init_Msg_extr+0x7c8>
 800249e:	3307      	adds	r3, #7
 80024a0:	10db      	asrs	r3, r3, #3
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	8bfb      	ldrh	r3, [r7, #30]
 80024a6:	4413      	add	r3, r2
 80024a8:	83fb      	strh	r3, [r7, #30]
 80024aa:	8bbb      	ldrh	r3, [r7, #28]
 80024ac:	3310      	adds	r3, #16
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	425a      	negs	r2, r3
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	f002 0207 	and.w	r2, r2, #7
 80024bc:	bf58      	it	pl
 80024be:	4253      	negpl	r3, r2
 80024c0:	b21b      	sxth	r3, r3
 80024c2:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80024c4:	8bfb      	ldrh	r3, [r7, #30]
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	441a      	add	r2, r3
 80024ca:	8bbb      	ldrh	r3, [r7, #28]
 80024cc:	2110      	movs	r1, #16
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7fe f8a0 	bl	8000614 <ExtractBits>
 80024d4:	4602      	mov	r2, r0
 80024d6:	78bb      	ldrb	r3, [r7, #2]
 80024d8:	b291      	uxth	r1, r2
 80024da:	4a4b      	ldr	r2, [pc, #300]	; (8002608 <Init_Msg_extr+0x930>)
 80024dc:	015b      	lsls	r3, r3, #5
 80024de:	4413      	add	r3, r2
 80024e0:	3314      	adds	r3, #20
 80024e2:	460a      	mov	r2, r1
 80024e4:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 80024e6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80024ea:	3310      	adds	r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	da00      	bge.n	80024f2 <Init_Msg_extr+0x81a>
 80024f0:	3307      	adds	r3, #7
 80024f2:	10db      	asrs	r3, r3, #3
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	8bfb      	ldrh	r3, [r7, #30]
 80024f8:	4413      	add	r3, r2
 80024fa:	83fb      	strh	r3, [r7, #30]
 80024fc:	8bbb      	ldrh	r3, [r7, #28]
 80024fe:	3310      	adds	r3, #16
 8002500:	b29b      	uxth	r3, r3
 8002502:	b21b      	sxth	r3, r3
 8002504:	425a      	negs	r2, r3
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	f002 0207 	and.w	r2, r2, #7
 800250e:	bf58      	it	pl
 8002510:	4253      	negpl	r3, r2
 8002512:	b21b      	sxth	r3, r3
 8002514:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002516:	8bfb      	ldrh	r3, [r7, #30]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	441a      	add	r2, r3
 800251c:	8bbb      	ldrh	r3, [r7, #28]
 800251e:	2110      	movs	r1, #16
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe f877 	bl	8000614 <ExtractBits>
 8002526:	4602      	mov	r2, r0
 8002528:	78bb      	ldrb	r3, [r7, #2]
 800252a:	b291      	uxth	r1, r2
 800252c:	4a36      	ldr	r2, [pc, #216]	; (8002608 <Init_Msg_extr+0x930>)
 800252e:	015b      	lsls	r3, r3, #5
 8002530:	4413      	add	r3, r2
 8002532:	3316      	adds	r3, #22
 8002534:	460a      	mov	r2, r1
 8002536:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8002538:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800253c:	3310      	adds	r3, #16
 800253e:	2b00      	cmp	r3, #0
 8002540:	da00      	bge.n	8002544 <Init_Msg_extr+0x86c>
 8002542:	3307      	adds	r3, #7
 8002544:	10db      	asrs	r3, r3, #3
 8002546:	b29a      	uxth	r2, r3
 8002548:	8bfb      	ldrh	r3, [r7, #30]
 800254a:	4413      	add	r3, r2
 800254c:	83fb      	strh	r3, [r7, #30]
 800254e:	8bbb      	ldrh	r3, [r7, #28]
 8002550:	3310      	adds	r3, #16
 8002552:	b29b      	uxth	r3, r3
 8002554:	b21b      	sxth	r3, r3
 8002556:	425a      	negs	r2, r3
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	f002 0207 	and.w	r2, r2, #7
 8002560:	bf58      	it	pl
 8002562:	4253      	negpl	r3, r2
 8002564:	b21b      	sxth	r3, r3
 8002566:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8002568:	8bfb      	ldrh	r3, [r7, #30]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	441a      	add	r2, r3
 800256e:	8bbb      	ldrh	r3, [r7, #28]
 8002570:	2110      	movs	r1, #16
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe f84e 	bl	8000614 <ExtractBits>
 8002578:	4602      	mov	r2, r0
 800257a:	78bb      	ldrb	r3, [r7, #2]
 800257c:	b291      	uxth	r1, r2
 800257e:	4a22      	ldr	r2, [pc, #136]	; (8002608 <Init_Msg_extr+0x930>)
 8002580:	015b      	lsls	r3, r3, #5
 8002582:	4413      	add	r3, r2
 8002584:	3318      	adds	r3, #24
 8002586:	460a      	mov	r2, r1
 8002588:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 800258a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800258e:	3310      	adds	r3, #16
 8002590:	2b00      	cmp	r3, #0
 8002592:	da00      	bge.n	8002596 <Init_Msg_extr+0x8be>
 8002594:	3307      	adds	r3, #7
 8002596:	10db      	asrs	r3, r3, #3
 8002598:	b29a      	uxth	r2, r3
 800259a:	8bfb      	ldrh	r3, [r7, #30]
 800259c:	4413      	add	r3, r2
 800259e:	83fb      	strh	r3, [r7, #30]
 80025a0:	8bbb      	ldrh	r3, [r7, #28]
 80025a2:	3310      	adds	r3, #16
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	b21b      	sxth	r3, r3
 80025a8:	425a      	negs	r2, r3
 80025aa:	f003 0307 	and.w	r3, r3, #7
 80025ae:	f002 0207 	and.w	r2, r2, #7
 80025b2:	bf58      	it	pl
 80025b4:	4253      	negpl	r3, r2
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 80025ba:	8bfb      	ldrh	r3, [r7, #30]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	441a      	add	r2, r3
 80025c0:	78bc      	ldrb	r4, [r7, #2]
 80025c2:	8bbb      	ldrh	r3, [r7, #28]
 80025c4:	2118      	movs	r1, #24
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe f824 	bl	8000614 <ExtractBits>
 80025cc:	4602      	mov	r2, r0
 80025ce:	490f      	ldr	r1, [pc, #60]	; (800260c <Init_Msg_extr+0x934>)
 80025d0:	0123      	lsls	r3, r4, #4
 80025d2:	440b      	add	r3, r1
 80025d4:	3308      	adds	r3, #8
 80025d6:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80025d8:	78bb      	ldrb	r3, [r7, #2]
 80025da:	78ba      	ldrb	r2, [r7, #2]
 80025dc:	490b      	ldr	r1, [pc, #44]	; (800260c <Init_Msg_extr+0x934>)
 80025de:	011b      	lsls	r3, r3, #4
 80025e0:	440b      	add	r3, r1
 80025e2:	3308      	adds	r3, #8
 80025e4:	6819      	ldr	r1, [r3, #0]
 80025e6:	480a      	ldr	r0, [pc, #40]	; (8002610 <Init_Msg_extr+0x938>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	4413      	add	r3, r2
 80025ee:	00db      	lsls	r3, r3, #3
 80025f0:	4403      	add	r3, r0
 80025f2:	3308      	adds	r3, #8
 80025f4:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 80025f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80025fa:	3318      	adds	r3, #24
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da09      	bge.n	8002614 <Init_Msg_extr+0x93c>
 8002600:	3307      	adds	r3, #7
 8002602:	e007      	b.n	8002614 <Init_Msg_extr+0x93c>
 8002604:	20002764 	.word	0x20002764
 8002608:	20002994 	.word	0x20002994
 800260c:	200028f4 	.word	0x200028f4
 8002610:	20002da4 	.word	0x20002da4
 8002614:	10db      	asrs	r3, r3, #3
 8002616:	b29a      	uxth	r2, r3
 8002618:	8bfb      	ldrh	r3, [r7, #30]
 800261a:	4413      	add	r3, r2
 800261c:	83fb      	strh	r3, [r7, #30]
 800261e:	8bbb      	ldrh	r3, [r7, #28]
 8002620:	3318      	adds	r3, #24
 8002622:	b29b      	uxth	r3, r3
 8002624:	b21b      	sxth	r3, r3
 8002626:	425a      	negs	r2, r3
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	f002 0207 	and.w	r2, r2, #7
 8002630:	bf58      	it	pl
 8002632:	4253      	negpl	r3, r2
 8002634:	b21b      	sxth	r3, r3
 8002636:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002638:	8bfb      	ldrh	r3, [r7, #30]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	441a      	add	r2, r3
 800263e:	8bbb      	ldrh	r3, [r7, #28]
 8002640:	2108      	movs	r1, #8
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ffe6 	bl	8000614 <ExtractBits>
 8002648:	4602      	mov	r2, r0
 800264a:	78bb      	ldrb	r3, [r7, #2]
 800264c:	b2d1      	uxtb	r1, r2
 800264e:	4ab1      	ldr	r2, [pc, #708]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002650:	011b      	lsls	r3, r3, #4
 8002652:	4413      	add	r3, r2
 8002654:	460a      	mov	r2, r1
 8002656:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8002658:	78ba      	ldrb	r2, [r7, #2]
 800265a:	78bb      	ldrb	r3, [r7, #2]
 800265c:	49ad      	ldr	r1, [pc, #692]	; (8002914 <Init_Msg_extr+0xc3c>)
 800265e:	0112      	lsls	r2, r2, #4
 8002660:	440a      	add	r2, r1
 8002662:	7811      	ldrb	r1, [r2, #0]
 8002664:	4aab      	ldr	r2, [pc, #684]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	4413      	add	r3, r2
 800266a:	3302      	adds	r3, #2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8002670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002674:	3308      	adds	r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	da00      	bge.n	800267c <Init_Msg_extr+0x9a4>
 800267a:	3307      	adds	r3, #7
 800267c:	10db      	asrs	r3, r3, #3
 800267e:	b29a      	uxth	r2, r3
 8002680:	8bfb      	ldrh	r3, [r7, #30]
 8002682:	4413      	add	r3, r2
 8002684:	83fb      	strh	r3, [r7, #30]
 8002686:	8bbb      	ldrh	r3, [r7, #28]
 8002688:	3308      	adds	r3, #8
 800268a:	b29b      	uxth	r3, r3
 800268c:	b21b      	sxth	r3, r3
 800268e:	425a      	negs	r2, r3
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	f002 0207 	and.w	r2, r2, #7
 8002698:	bf58      	it	pl
 800269a:	4253      	negpl	r3, r2
 800269c:	b21b      	sxth	r3, r3
 800269e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026a0:	8bfb      	ldrh	r3, [r7, #30]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	441a      	add	r2, r3
 80026a6:	8bbb      	ldrh	r3, [r7, #28]
 80026a8:	2108      	movs	r1, #8
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fd ffb2 	bl	8000614 <ExtractBits>
 80026b0:	4602      	mov	r2, r0
 80026b2:	78bb      	ldrb	r3, [r7, #2]
 80026b4:	b2d1      	uxtb	r1, r2
 80026b6:	4a98      	ldr	r2, [pc, #608]	; (8002918 <Init_Msg_extr+0xc40>)
 80026b8:	015b      	lsls	r3, r3, #5
 80026ba:	4413      	add	r3, r2
 80026bc:	330a      	adds	r3, #10
 80026be:	460a      	mov	r2, r1
 80026c0:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 80026c2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026c6:	3308      	adds	r3, #8
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da00      	bge.n	80026ce <Init_Msg_extr+0x9f6>
 80026cc:	3307      	adds	r3, #7
 80026ce:	10db      	asrs	r3, r3, #3
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	8bfb      	ldrh	r3, [r7, #30]
 80026d4:	4413      	add	r3, r2
 80026d6:	83fb      	strh	r3, [r7, #30]
 80026d8:	8bbb      	ldrh	r3, [r7, #28]
 80026da:	3308      	adds	r3, #8
 80026dc:	b29b      	uxth	r3, r3
 80026de:	b21b      	sxth	r3, r3
 80026e0:	425a      	negs	r2, r3
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	f002 0207 	and.w	r2, r2, #7
 80026ea:	bf58      	it	pl
 80026ec:	4253      	negpl	r3, r2
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80026f2:	8bfb      	ldrh	r3, [r7, #30]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	441a      	add	r2, r3
 80026f8:	8bbb      	ldrh	r3, [r7, #28]
 80026fa:	2108      	movs	r1, #8
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff89 	bl	8000614 <ExtractBits>
 8002702:	4602      	mov	r2, r0
 8002704:	78bb      	ldrb	r3, [r7, #2]
 8002706:	b2d1      	uxtb	r1, r2
 8002708:	4a82      	ldr	r2, [pc, #520]	; (8002914 <Init_Msg_extr+0xc3c>)
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	3303      	adds	r3, #3
 8002710:	460a      	mov	r2, r1
 8002712:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 8002714:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002718:	3308      	adds	r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	da00      	bge.n	8002720 <Init_Msg_extr+0xa48>
 800271e:	3307      	adds	r3, #7
 8002720:	10db      	asrs	r3, r3, #3
 8002722:	b29a      	uxth	r2, r3
 8002724:	8bfb      	ldrh	r3, [r7, #30]
 8002726:	4413      	add	r3, r2
 8002728:	83fb      	strh	r3, [r7, #30]
 800272a:	8bbb      	ldrh	r3, [r7, #28]
 800272c:	3308      	adds	r3, #8
 800272e:	b29b      	uxth	r3, r3
 8002730:	b21b      	sxth	r3, r3
 8002732:	425a      	negs	r2, r3
 8002734:	f003 0307 	and.w	r3, r3, #7
 8002738:	f002 0207 	and.w	r2, r2, #7
 800273c:	bf58      	it	pl
 800273e:	4253      	negpl	r3, r2
 8002740:	b21b      	sxth	r3, r3
 8002742:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	4a73      	ldr	r2, [pc, #460]	; (8002914 <Init_Msg_extr+0xc3c>)
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	4413      	add	r3, r2
 800274c:	3303      	adds	r3, #3
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	78bb      	ldrb	r3, [r7, #2]
 8002752:	4972      	ldr	r1, [pc, #456]	; (800291c <Init_Msg_extr+0xc44>)
 8002754:	440b      	add	r3, r1
 8002756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800275a:	429a      	cmp	r2, r3
 800275c:	d015      	beq.n	800278a <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 800275e:	4870      	ldr	r0, [pc, #448]	; (8002920 <Init_Msg_extr+0xc48>)
 8002760:	f023 fcca 	bl	80260f8 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002764:	78bb      	ldrb	r3, [r7, #2]
 8002766:	4a6d      	ldr	r2, [pc, #436]	; (800291c <Init_Msg_extr+0xc44>)
 8002768:	4413      	add	r3, r2
 800276a:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800276e:	4619      	mov	r1, r3
 8002770:	486c      	ldr	r0, [pc, #432]	; (8002924 <Init_Msg_extr+0xc4c>)
 8002772:	f023 fc25 	bl	8025fc0 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002776:	78bb      	ldrb	r3, [r7, #2]
 8002778:	4a66      	ldr	r2, [pc, #408]	; (8002914 <Init_Msg_extr+0xc3c>)
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	4413      	add	r3, r2
 800277e:	3303      	adds	r3, #3
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	4619      	mov	r1, r3
 8002784:	4868      	ldr	r0, [pc, #416]	; (8002928 <Init_Msg_extr+0xc50>)
 8002786:	f023 fc1b 	bl	8025fc0 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800278a:	8bfb      	ldrh	r3, [r7, #30]
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	441a      	add	r2, r3
 8002790:	8bbb      	ldrh	r3, [r7, #28]
 8002792:	2108      	movs	r1, #8
 8002794:	4618      	mov	r0, r3
 8002796:	f7fd ff3d 	bl	8000614 <ExtractBits>
 800279a:	4602      	mov	r2, r0
 800279c:	78bb      	ldrb	r3, [r7, #2]
 800279e:	b2d1      	uxtb	r1, r2
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <Init_Msg_extr+0xc40>)
 80027a2:	015b      	lsls	r3, r3, #5
 80027a4:	4413      	add	r3, r2
 80027a6:	330b      	adds	r3, #11
 80027a8:	460a      	mov	r2, r1
 80027aa:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80027ac:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80027b0:	3308      	adds	r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	da00      	bge.n	80027b8 <Init_Msg_extr+0xae0>
 80027b6:	3307      	adds	r3, #7
 80027b8:	10db      	asrs	r3, r3, #3
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	8bfb      	ldrh	r3, [r7, #30]
 80027be:	4413      	add	r3, r2
 80027c0:	83fb      	strh	r3, [r7, #30]
 80027c2:	8bbb      	ldrh	r3, [r7, #28]
 80027c4:	3308      	adds	r3, #8
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21b      	sxth	r3, r3
 80027ca:	425a      	negs	r2, r3
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	f002 0207 	and.w	r2, r2, #7
 80027d4:	bf58      	it	pl
 80027d6:	4253      	negpl	r3, r2
 80027d8:	b21b      	sxth	r3, r3
 80027da:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80027dc:	8bfb      	ldrh	r3, [r7, #30]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	441a      	add	r2, r3
 80027e2:	8bbb      	ldrh	r3, [r7, #28]
 80027e4:	2108      	movs	r1, #8
 80027e6:	4618      	mov	r0, r3
 80027e8:	f7fd ff14 	bl	8000614 <ExtractBits>
 80027ec:	4602      	mov	r2, r0
 80027ee:	78bb      	ldrb	r3, [r7, #2]
 80027f0:	b2d1      	uxtb	r1, r2
 80027f2:	4a49      	ldr	r2, [pc, #292]	; (8002918 <Init_Msg_extr+0xc40>)
 80027f4:	015b      	lsls	r3, r3, #5
 80027f6:	4413      	add	r3, r2
 80027f8:	330c      	adds	r3, #12
 80027fa:	460a      	mov	r2, r1
 80027fc:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80027fe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002802:	3308      	adds	r3, #8
 8002804:	2b00      	cmp	r3, #0
 8002806:	da00      	bge.n	800280a <Init_Msg_extr+0xb32>
 8002808:	3307      	adds	r3, #7
 800280a:	10db      	asrs	r3, r3, #3
 800280c:	b29a      	uxth	r2, r3
 800280e:	8bfb      	ldrh	r3, [r7, #30]
 8002810:	4413      	add	r3, r2
 8002812:	83fb      	strh	r3, [r7, #30]
 8002814:	8bbb      	ldrh	r3, [r7, #28]
 8002816:	3308      	adds	r3, #8
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21b      	sxth	r3, r3
 800281c:	425a      	negs	r2, r3
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	f002 0207 	and.w	r2, r2, #7
 8002826:	bf58      	it	pl
 8002828:	4253      	negpl	r3, r2
 800282a:	b21b      	sxth	r3, r3
 800282c:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 800282e:	78bb      	ldrb	r3, [r7, #2]
 8002830:	4a39      	ldr	r2, [pc, #228]	; (8002918 <Init_Msg_extr+0xc40>)
 8002832:	015b      	lsls	r3, r3, #5
 8002834:	4413      	add	r3, r2
 8002836:	330c      	adds	r3, #12
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b01      	cmp	r3, #1
 800283c:	d00c      	beq.n	8002858 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 800283e:	78bb      	ldrb	r3, [r7, #2]
 8002840:	4a35      	ldr	r2, [pc, #212]	; (8002918 <Init_Msg_extr+0xc40>)
 8002842:	015b      	lsls	r3, r3, #5
 8002844:	4413      	add	r3, r2
 8002846:	330c      	adds	r3, #12
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	4619      	mov	r1, r3
 800284c:	4837      	ldr	r0, [pc, #220]	; (800292c <Init_Msg_extr+0xc54>)
 800284e:	f023 fbb7 	bl	8025fc0 <iprintf>
		printf("This Value has to be \"1\"\n");
 8002852:	4837      	ldr	r0, [pc, #220]	; (8002930 <Init_Msg_extr+0xc58>)
 8002854:	f023 fc50 	bl	80260f8 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002858:	8bfb      	ldrh	r3, [r7, #30]
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	441a      	add	r2, r3
 800285e:	8bbb      	ldrh	r3, [r7, #28]
 8002860:	2108      	movs	r1, #8
 8002862:	4618      	mov	r0, r3
 8002864:	f7fd fed6 	bl	8000614 <ExtractBits>
 8002868:	4602      	mov	r2, r0
 800286a:	78bb      	ldrb	r3, [r7, #2]
 800286c:	b2d1      	uxtb	r1, r2
 800286e:	4a2a      	ldr	r2, [pc, #168]	; (8002918 <Init_Msg_extr+0xc40>)
 8002870:	015b      	lsls	r3, r3, #5
 8002872:	4413      	add	r3, r2
 8002874:	330d      	adds	r3, #13
 8002876:	460a      	mov	r2, r1
 8002878:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 800287a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800287e:	3308      	adds	r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	da00      	bge.n	8002886 <Init_Msg_extr+0xbae>
 8002884:	3307      	adds	r3, #7
 8002886:	10db      	asrs	r3, r3, #3
 8002888:	b29a      	uxth	r2, r3
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	4413      	add	r3, r2
 800288e:	83fb      	strh	r3, [r7, #30]
 8002890:	8bbb      	ldrh	r3, [r7, #28]
 8002892:	3308      	adds	r3, #8
 8002894:	b29b      	uxth	r3, r3
 8002896:	b21b      	sxth	r3, r3
 8002898:	425a      	negs	r2, r3
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	f002 0207 	and.w	r2, r2, #7
 80028a2:	bf58      	it	pl
 80028a4:	4253      	negpl	r3, r2
 80028a6:	b21b      	sxth	r3, r3
 80028a8:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80028aa:	8bfb      	ldrh	r3, [r7, #30]
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	441a      	add	r2, r3
 80028b0:	78bc      	ldrb	r4, [r7, #2]
 80028b2:	8bbb      	ldrh	r3, [r7, #28]
 80028b4:	2120      	movs	r1, #32
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd feac 	bl	8000614 <ExtractBits>
 80028bc:	4602      	mov	r2, r0
 80028be:	4916      	ldr	r1, [pc, #88]	; (8002918 <Init_Msg_extr+0xc40>)
 80028c0:	0163      	lsls	r3, r4, #5
 80028c2:	440b      	add	r3, r1
 80028c4:	331c      	adds	r3, #28
 80028c6:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80028c8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80028cc:	3320      	adds	r3, #32
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da00      	bge.n	80028d4 <Init_Msg_extr+0xbfc>
 80028d2:	3307      	adds	r3, #7
 80028d4:	10db      	asrs	r3, r3, #3
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	8bfb      	ldrh	r3, [r7, #30]
 80028da:	4413      	add	r3, r2
 80028dc:	83fb      	strh	r3, [r7, #30]
 80028de:	8bbb      	ldrh	r3, [r7, #28]
 80028e0:	3320      	adds	r3, #32
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	b21b      	sxth	r3, r3
 80028e6:	425a      	negs	r2, r3
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	f002 0207 	and.w	r2, r2, #7
 80028f0:	bf58      	it	pl
 80028f2:	4253      	negpl	r3, r2
 80028f4:	b21b      	sxth	r3, r3
 80028f6:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80028f8:	787a      	ldrb	r2, [r7, #1]
 80028fa:	78bb      	ldrb	r3, [r7, #2]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 f86c 	bl	80029dc <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8002904:	78ba      	ldrb	r2, [r7, #2]
 8002906:	490b      	ldr	r1, [pc, #44]	; (8002934 <Init_Msg_extr+0xc5c>)
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	00db      	lsls	r3, r3, #3
 8002910:	e012      	b.n	8002938 <Init_Msg_extr+0xc60>
 8002912:	bf00      	nop
 8002914:	200028f4 	.word	0x200028f4
 8002918:	20002994 	.word	0x20002994
 800291c:	20000504 	.word	0x20000504
 8002920:	08027e14 	.word	0x08027e14
 8002924:	08027ddc 	.word	0x08027ddc
 8002928:	08027df0 	.word	0x08027df0
 800292c:	08027e30 	.word	0x08027e30
 8002930:	08027e5c 	.word	0x08027e5c
 8002934:	20002da4 	.word	0x20002da4
 8002938:	440b      	add	r3, r1
 800293a:	3314      	adds	r3, #20
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002940:	78ba      	ldrb	r2, [r7, #2]
 8002942:	4923      	ldr	r1, [pc, #140]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	440b      	add	r3, r1
 800294e:	3305      	adds	r3, #5
 8002950:	2201      	movs	r2, #1
 8002952:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8002954:	78ba      	ldrb	r2, [r7, #2]
 8002956:	491e      	ldr	r1, [pc, #120]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	78ba      	ldrb	r2, [r7, #2]
 8002964:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8002966:	78ba      	ldrb	r2, [r7, #2]
 8002968:	4919      	ldr	r1, [pc, #100]	; (80029d0 <Init_Msg_extr+0xcf8>)
 800296a:	4613      	mov	r3, r2
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	3301      	adds	r3, #1
 8002976:	2201      	movs	r2, #1
 8002978:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 800297a:	2218      	movs	r2, #24
 800297c:	2100      	movs	r1, #0
 800297e:	4815      	ldr	r0, [pc, #84]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002980:	f023 fa36 	bl	8025df0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8002984:	78ba      	ldrb	r2, [r7, #2]
 8002986:	4613      	mov	r3, r2
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	4413      	add	r3, r2
 800298c:	00db      	lsls	r3, r3, #3
 800298e:	4a10      	ldr	r2, [pc, #64]	; (80029d0 <Init_Msg_extr+0xcf8>)
 8002990:	4413      	add	r3, r2
 8002992:	2218      	movs	r2, #24
 8002994:	4619      	mov	r1, r3
 8002996:	480f      	ldr	r0, [pc, #60]	; (80029d4 <Init_Msg_extr+0xcfc>)
 8002998:	f023 fa02 	bl	8025da0 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 800299c:	f240 2001 	movw	r0, #513	; 0x201
 80029a0:	f00e fade 	bl	8010f60 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80029a4:	78ba      	ldrb	r2, [r7, #2]
 80029a6:	490a      	ldr	r1, [pc, #40]	; (80029d0 <Init_Msg_extr+0xcf8>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	4413      	add	r3, r2
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	440b      	add	r3, r1
 80029b2:	3301      	adds	r3, #1
 80029b4:	2200      	movs	r2, #0
 80029b6:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80029b8:	78bc      	ldrb	r4, [r7, #2]
 80029ba:	f016 fbeb 	bl	8019194 <HAL_GetTick>
 80029be:	4603      	mov	r3, r0
 80029c0:	4a05      	ldr	r2, [pc, #20]	; (80029d8 <Init_Msg_extr+0xd00>)
 80029c2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80029c6:	e000      	b.n	80029ca <Init_Msg_extr+0xcf2>
			return;
 80029c8:	bf00      	nop
}
 80029ca:	3724      	adds	r7, #36	; 0x24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}
 80029d0:	20002da4 	.word	0x20002da4
 80029d4:	20002f84 	.word	0x20002f84
 80029d8:	200024b8 	.word	0x200024b8

080029dc <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80029dc:	b590      	push	{r4, r7, lr}
 80029de:	b097      	sub	sp, #92	; 0x5c
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	4603      	mov	r3, r0
 80029e4:	460a      	mov	r2, r1
 80029e6:	71fb      	strb	r3, [r7, #7]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80029ec:	2300      	movs	r3, #0
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	f107 0310 	add.w	r3, r7, #16
 80029f4:	2238      	movs	r2, #56	; 0x38
 80029f6:	2100      	movs	r1, #0
 80029f8:	4618      	mov	r0, r3
 80029fa:	f023 f9f9 	bl	8025df0 <memset>
	uint32_t Calc_CRC = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a08:	2300      	movs	r3, #0
 8002a0a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002a0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a12:	f107 020c 	add.w	r2, r7, #12
 8002a16:	441a      	add	r2, r3
 8002a18:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a1c:	23f4      	movs	r3, #244	; 0xf4
 8002a1e:	2108      	movs	r1, #8
 8002a20:	f7fd fe84 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a24:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a28:	3308      	adds	r3, #8
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	da00      	bge.n	8002a30 <Send_Init_Msg+0x54>
 8002a2e:	3307      	adds	r3, #7
 8002a30:	10db      	asrs	r3, r3, #3
 8002a32:	b29a      	uxth	r2, r3
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a38:	4413      	add	r3, r2
 8002a3a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a3e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a42:	3308      	adds	r3, #8
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	b21b      	sxth	r3, r3
 8002a48:	425a      	negs	r2, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	f002 0207 	and.w	r2, r2, #7
 8002a52:	bf58      	it	pl
 8002a54:	4253      	negpl	r3, r2
 8002a56:	b21b      	sxth	r3, r3
 8002a58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002a5c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a60:	f107 020c 	add.w	r2, r7, #12
 8002a64:	441a      	add	r2, r3
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4977      	ldr	r1, [pc, #476]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002a6a:	3366      	adds	r3, #102	; 0x66
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a76:	2110      	movs	r1, #16
 8002a78:	f7fd fe58 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002a7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a80:	3310      	adds	r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	da00      	bge.n	8002a88 <Send_Init_Msg+0xac>
 8002a86:	3307      	adds	r3, #7
 8002a88:	10db      	asrs	r3, r3, #3
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a90:	4413      	add	r3, r2
 8002a92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a9a:	3310      	adds	r3, #16
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b21b      	sxth	r3, r3
 8002aa0:	425a      	negs	r2, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	f002 0207 	and.w	r2, r2, #7
 8002aaa:	bf58      	it	pl
 8002aac:	4253      	negpl	r3, r2
 8002aae:	b21b      	sxth	r3, r3
 8002ab0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8002ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab8:	f107 020c 	add.w	r2, r7, #12
 8002abc:	441a      	add	r2, r3
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	4961      	ldr	r1, [pc, #388]	; (8002c48 <Send_Init_Msg+0x26c>)
 8002ac2:	3370      	adds	r3, #112	; 0x70
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	440b      	add	r3, r1
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ace:	2110      	movs	r1, #16
 8002ad0:	f7fd fe2c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002ad4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ad8:	3310      	adds	r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da00      	bge.n	8002ae0 <Send_Init_Msg+0x104>
 8002ade:	3307      	adds	r3, #7
 8002ae0:	10db      	asrs	r3, r3, #3
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ae8:	4413      	add	r3, r2
 8002aea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002aee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002af2:	3310      	adds	r3, #16
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	425a      	negs	r2, r3
 8002afa:	f003 0307 	and.w	r3, r3, #7
 8002afe:	f002 0207 	and.w	r2, r2, #7
 8002b02:	bf58      	it	pl
 8002b04:	4253      	negpl	r3, r2
 8002b06:	b21b      	sxth	r3, r3
 8002b08:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002b0c:	4b4f      	ldr	r3, [pc, #316]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	089b      	lsrs	r3, r3, #2
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d031      	beq.n	8002b7e <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002b1a:	4b4c      	ldr	r3, [pc, #304]	; (8002c4c <Send_Init_Msg+0x270>)
 8002b1c:	791b      	ldrb	r3, [r3, #4]
 8002b1e:	79fa      	ldrb	r2, [r7, #7]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d137      	bne.n	8002b94 <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002b2a:	4849      	ldr	r0, [pc, #292]	; (8002c50 <Send_Init_Msg+0x274>)
 8002b2c:	f01a fef0 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b48      	ldr	r3, [pc, #288]	; (8002c54 <Send_Init_Msg+0x278>)
 8002b34:	fba3 1302 	umull	r1, r3, r3, r2
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	21c8      	movs	r1, #200	; 0xc8
 8002b3c:	fb01 f303 	mul.w	r3, r1, r3
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	3301      	adds	r3, #1
 8002b46:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002b4a:	4843      	ldr	r0, [pc, #268]	; (8002c58 <Send_Init_Msg+0x27c>)
 8002b4c:	f023 fad4 	bl	80260f8 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002b50:	2100      	movs	r1, #0
 8002b52:	4842      	ldr	r0, [pc, #264]	; (8002c5c <Send_Init_Msg+0x280>)
 8002b54:	f023 fa34 	bl	8025fc0 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002b58:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4840      	ldr	r0, [pc, #256]	; (8002c60 <Send_Init_Msg+0x284>)
 8002b60:	f023 fa2e 	bl	8025fc0 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002b64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b68:	f107 020c 	add.w	r2, r7, #12
 8002b6c:	441a      	add	r2, r3
 8002b6e:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002b72:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b76:	2108      	movs	r1, #8
 8002b78:	f7fd fdd8 	bl	800072c <InsertBits>
 8002b7c:	e00a      	b.n	8002b94 <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002b7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b82:	f107 020c 	add.w	r2, r7, #12
 8002b86:	441a      	add	r2, r3
 8002b88:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	2108      	movs	r1, #8
 8002b90:	f7fd fdcc 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002b94:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002b98:	3308      	adds	r3, #8
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	da00      	bge.n	8002ba0 <Send_Init_Msg+0x1c4>
 8002b9e:	3307      	adds	r3, #7
 8002ba0:	10db      	asrs	r3, r3, #3
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ba8:	4413      	add	r3, r2
 8002baa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bb2:	3308      	adds	r3, #8
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	b21b      	sxth	r3, r3
 8002bb8:	425a      	negs	r2, r3
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	f002 0207 	and.w	r2, r2, #7
 8002bc2:	bf58      	it	pl
 8002bc4:	4253      	negpl	r3, r2
 8002bc6:	b21b      	sxth	r3, r3
 8002bc8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002bcc:	4b1f      	ldr	r3, [pc, #124]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	08db      	lsrs	r3, r3, #3
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d04c      	beq.n	8002c74 <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002bda:	4b1c      	ldr	r3, [pc, #112]	; (8002c4c <Send_Init_Msg+0x270>)
 8002bdc:	791b      	ldrb	r3, [r3, #4]
 8002bde:	79fa      	ldrb	r2, [r7, #7]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d165      	bne.n	8002cb0 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8002bea:	4819      	ldr	r0, [pc, #100]	; (8002c50 <Send_Init_Msg+0x274>)
 8002bec:	f01a fe90 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	4b18      	ldr	r3, [pc, #96]	; (8002c54 <Send_Init_Msg+0x278>)
 8002bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	21c8      	movs	r1, #200	; 0xc8
 8002bfc:	fb01 f303 	mul.w	r3, r1, r3
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 8002c06:	4817      	ldr	r0, [pc, #92]	; (8002c64 <Send_Init_Msg+0x288>)
 8002c08:	f023 fa76 	bl	80260f8 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c0c:	79fb      	ldrb	r3, [r7, #7]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <Send_Init_Msg+0x28c>)
 8002c10:	011b      	lsls	r3, r3, #4
 8002c12:	4413      	add	r3, r2
 8002c14:	3302      	adds	r3, #2
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	; (8002c6c <Send_Init_Msg+0x290>)
 8002c1c:	f023 f9d0 	bl	8025fc0 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002c20:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c24:	4619      	mov	r1, r3
 8002c26:	4812      	ldr	r0, [pc, #72]	; (8002c70 <Send_Init_Msg+0x294>)
 8002c28:	f023 f9ca 	bl	8025fc0 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c30:	f107 020c 	add.w	r2, r7, #12
 8002c34:	441a      	add	r2, r3
 8002c36:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002c3a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c3e:	2108      	movs	r1, #8
 8002c40:	f7fd fd74 	bl	800072c <InsertBits>
 8002c44:	e034      	b.n	8002cb0 <Send_Init_Msg+0x2d4>
 8002c46:	bf00      	nop
 8002c48:	20000504 	.word	0x20000504
 8002c4c:	2000308c 	.word	0x2000308c
 8002c50:	2000bc54 	.word	0x2000bc54
 8002c54:	51eb851f 	.word	0x51eb851f
 8002c58:	08027e78 	.word	0x08027e78
 8002c5c:	08027e9c 	.word	0x08027e9c
 8002c60:	08027ebc 	.word	0x08027ebc
 8002c64:	08027edc 	.word	0x08027edc
 8002c68:	200028f4 	.word	0x200028f4
 8002c6c:	08027f00 	.word	0x08027f00
 8002c70:	08027f20 	.word	0x08027f20

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 8002c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c78:	f107 020c 	add.w	r2, r7, #12
 8002c7c:	18d1      	adds	r1, r2, r3
 8002c7e:	79fb      	ldrb	r3, [r7, #7]
 8002c80:	48c4      	ldr	r0, [pc, #784]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c82:	011a      	lsls	r2, r3, #4
 8002c84:	4402      	add	r2, r0
 8002c86:	3202      	adds	r2, #2
 8002c88:	7812      	ldrb	r2, [r2, #0]
 8002c8a:	3201      	adds	r2, #1
 8002c8c:	b2d4      	uxtb	r4, r2
 8002c8e:	48c1      	ldr	r0, [pc, #772]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	4402      	add	r2, r0
 8002c94:	3202      	adds	r2, #2
 8002c96:	4620      	mov	r0, r4
 8002c98:	7010      	strb	r0, [r2, #0]
 8002c9a:	4abe      	ldr	r2, [pc, #760]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ca8:	460a      	mov	r2, r1
 8002caa:	2108      	movs	r1, #8
 8002cac:	f7fd fd3e 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002cb0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002cb4:	3308      	adds	r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	da00      	bge.n	8002cbc <Send_Init_Msg+0x2e0>
 8002cba:	3307      	adds	r3, #7
 8002cbc:	10db      	asrs	r3, r3, #3
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cc4:	4413      	add	r3, r2
 8002cc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002cca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002cce:	3308      	adds	r3, #8
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	425a      	negs	r2, r3
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	f002 0207 	and.w	r2, r2, #7
 8002cde:	bf58      	it	pl
 8002ce0:	4253      	negpl	r3, r2
 8002ce2:	b21b      	sxth	r3, r3
 8002ce4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 8002ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cec:	f107 020c 	add.w	r2, r7, #12
 8002cf0:	441a      	add	r2, r3
 8002cf2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	2108      	movs	r1, #8
 8002cfa:	f7fd fd17 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002cfe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d02:	3308      	adds	r3, #8
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da00      	bge.n	8002d0a <Send_Init_Msg+0x32e>
 8002d08:	3307      	adds	r3, #7
 8002d0a:	10db      	asrs	r3, r3, #3
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d12:	4413      	add	r3, r2
 8002d14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	425a      	negs	r2, r3
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	f002 0207 	and.w	r2, r2, #7
 8002d2c:	bf58      	it	pl
 8002d2e:	4253      	negpl	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4a96      	ldr	r2, [pc, #600]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3306      	adds	r3, #6
 8002d40:	2205      	movs	r2, #5
 8002d42:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 8002d44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	441a      	add	r2, r3
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	4990      	ldr	r1, [pc, #576]	; (8002f94 <Send_Init_Msg+0x5b8>)
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	440b      	add	r3, r1
 8002d56:	3306      	adds	r3, #6
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002d5e:	2110      	movs	r1, #16
 8002d60:	f7fd fce4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002d64:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002d68:	3310      	adds	r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	da00      	bge.n	8002d70 <Send_Init_Msg+0x394>
 8002d6e:	3307      	adds	r3, #7
 8002d70:	10db      	asrs	r3, r3, #3
 8002d72:	b29a      	uxth	r2, r3
 8002d74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d78:	4413      	add	r3, r2
 8002d7a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002d7e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002d82:	3310      	adds	r3, #16
 8002d84:	b29b      	uxth	r3, r3
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	425a      	negs	r2, r3
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	f002 0207 	and.w	r2, r2, #7
 8002d92:	bf58      	it	pl
 8002d94:	4253      	negpl	r3, r2
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002d9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002da0:	f107 020c 	add.w	r2, r7, #12
 8002da4:	441a      	add	r2, r3
 8002da6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002daa:	2317      	movs	r3, #23
 8002dac:	2108      	movs	r1, #8
 8002dae:	f7fd fcbd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002db2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002db6:	3308      	adds	r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da00      	bge.n	8002dbe <Send_Init_Msg+0x3e2>
 8002dbc:	3307      	adds	r3, #7
 8002dbe:	10db      	asrs	r3, r3, #3
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dc6:	4413      	add	r3, r2
 8002dc8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002dcc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002dd0:	3308      	adds	r3, #8
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	b21b      	sxth	r3, r3
 8002dd6:	425a      	negs	r2, r3
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	f002 0207 	and.w	r2, r2, #7
 8002de0:	bf58      	it	pl
 8002de2:	4253      	negpl	r3, r2
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 8002dea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dee:	f107 020c 	add.w	r2, r7, #12
 8002df2:	441a      	add	r2, r3
 8002df4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002df8:	2301      	movs	r3, #1
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	f7fd fc96 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e00:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e04:	3310      	adds	r3, #16
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	da00      	bge.n	8002e0c <Send_Init_Msg+0x430>
 8002e0a:	3307      	adds	r3, #7
 8002e0c:	10db      	asrs	r3, r3, #3
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e14:	4413      	add	r3, r2
 8002e16:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e1a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e1e:	3310      	adds	r3, #16
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	b21b      	sxth	r3, r3
 8002e24:	425a      	negs	r2, r3
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	f002 0207 	and.w	r2, r2, #7
 8002e2e:	bf58      	it	pl
 8002e30:	4253      	negpl	r3, r2
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002e38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e3c:	f107 020c 	add.w	r2, r7, #12
 8002e40:	441a      	add	r2, r3
 8002e42:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e46:	4b54      	ldr	r3, [pc, #336]	; (8002f98 <Send_Init_Msg+0x5bc>)
 8002e48:	2120      	movs	r1, #32
 8002e4a:	f7fd fc6f 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002e4e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002e52:	3320      	adds	r3, #32
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da00      	bge.n	8002e5a <Send_Init_Msg+0x47e>
 8002e58:	3307      	adds	r3, #7
 8002e5a:	10db      	asrs	r3, r3, #3
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e62:	4413      	add	r3, r2
 8002e64:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002e68:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002e6c:	3320      	adds	r3, #32
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	b21b      	sxth	r3, r3
 8002e72:	425a      	negs	r2, r3
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	f002 0207 	and.w	r2, r2, #7
 8002e7c:	bf58      	it	pl
 8002e7e:	4253      	negpl	r3, r2
 8002e80:	b21b      	sxth	r3, r3
 8002e82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 8002e86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e8a:	f107 020c 	add.w	r2, r7, #12
 8002e8e:	441a      	add	r2, r3
 8002e90:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002e94:	2300      	movs	r3, #0
 8002e96:	2110      	movs	r1, #16
 8002e98:	f7fd fc48 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002e9c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ea0:	3310      	adds	r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	da00      	bge.n	8002ea8 <Send_Init_Msg+0x4cc>
 8002ea6:	3307      	adds	r3, #7
 8002ea8:	10db      	asrs	r3, r3, #3
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002eb6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002eba:	3310      	adds	r3, #16
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	b21b      	sxth	r3, r3
 8002ec0:	425a      	negs	r2, r3
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	f002 0207 	and.w	r2, r2, #7
 8002eca:	bf58      	it	pl
 8002ecc:	4253      	negpl	r3, r2
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 8002ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ed8:	f107 020c 	add.w	r2, r7, #12
 8002edc:	441a      	add	r2, r3
 8002ede:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2110      	movs	r1, #16
 8002ee6:	f7fd fc21 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002eea:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002eee:	3310      	adds	r3, #16
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	da00      	bge.n	8002ef6 <Send_Init_Msg+0x51a>
 8002ef4:	3307      	adds	r3, #7
 8002ef6:	10db      	asrs	r3, r3, #3
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002efe:	4413      	add	r3, r2
 8002f00:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f08:	3310      	adds	r3, #16
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	b21b      	sxth	r3, r3
 8002f0e:	425a      	negs	r2, r3
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	f002 0207 	and.w	r2, r2, #7
 8002f18:	bf58      	it	pl
 8002f1a:	4253      	negpl	r3, r2
 8002f1c:	b21b      	sxth	r3, r3
 8002f1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 8002f22:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f26:	f107 020c 	add.w	r2, r7, #12
 8002f2a:	441a      	add	r2, r3
 8002f2c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f30:	2300      	movs	r3, #0
 8002f32:	2110      	movs	r1, #16
 8002f34:	f7fd fbfa 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f38:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	da00      	bge.n	8002f44 <Send_Init_Msg+0x568>
 8002f42:	3307      	adds	r3, #7
 8002f44:	10db      	asrs	r3, r3, #3
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f4c:	4413      	add	r3, r2
 8002f4e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002f52:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f56:	3310      	adds	r3, #16
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	b21b      	sxth	r3, r3
 8002f5c:	425a      	negs	r2, r3
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	f002 0207 	and.w	r2, r2, #7
 8002f66:	bf58      	it	pl
 8002f68:	4253      	negpl	r3, r2
 8002f6a:	b21b      	sxth	r3, r3
 8002f6c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002f70:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f74:	f107 020c 	add.w	r2, r7, #12
 8002f78:	441a      	add	r2, r3
 8002f7a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002f7e:	2300      	movs	r3, #0
 8002f80:	2110      	movs	r1, #16
 8002f82:	f7fd fbd3 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002f86:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002f8a:	3310      	adds	r3, #16
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da05      	bge.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f90:	3307      	adds	r3, #7
 8002f92:	e003      	b.n	8002f9c <Send_Init_Msg+0x5c0>
 8002f94:	200028f4 	.word	0x200028f4
 8002f98:	33e232af 	.word	0x33e232af
 8002f9c:	10db      	asrs	r3, r3, #3
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa4:	4413      	add	r3, r2
 8002fa6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002faa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fae:	3310      	adds	r3, #16
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	b21b      	sxth	r3, r3
 8002fb4:	425a      	negs	r2, r3
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	f002 0207 	and.w	r2, r2, #7
 8002fbe:	bf58      	it	pl
 8002fc0:	4253      	negpl	r3, r2
 8002fc2:	b21b      	sxth	r3, r3
 8002fc4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 8002fc8:	79fb      	ldrb	r3, [r7, #7]
 8002fca:	4ab2      	ldr	r2, [pc, #712]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	4413      	add	r3, r2
 8002fd0:	3308      	adds	r3, #8
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4ab0      	ldr	r2, [pc, #704]	; (8003298 <Send_Init_Msg+0x8bc>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d90d      	bls.n	8002ff6 <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 8002fda:	79fb      	ldrb	r3, [r7, #7]
 8002fdc:	4aad      	ldr	r2, [pc, #692]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	4413      	add	r3, r2
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	3a01      	subs	r2, #1
 8002fea:	49aa      	ldr	r1, [pc, #680]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	440b      	add	r3, r1
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00c      	b.n	8003010 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	4aa6      	ldr	r2, [pc, #664]	; (8003294 <Send_Init_Msg+0x8b8>)
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3308      	adds	r3, #8
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	3201      	adds	r2, #1
 8003006:	49a3      	ldr	r1, [pc, #652]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	440b      	add	r3, r1
 800300c:	330c      	adds	r3, #12
 800300e:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003010:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003014:	f107 020c 	add.w	r2, r7, #12
 8003018:	441a      	add	r2, r3
 800301a:	79fb      	ldrb	r3, [r7, #7]
 800301c:	499d      	ldr	r1, [pc, #628]	; (8003294 <Send_Init_Msg+0x8b8>)
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	440b      	add	r3, r1
 8003022:	330c      	adds	r3, #12
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800302a:	2118      	movs	r1, #24
 800302c:	f7fd fb7e 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003030:	79fb      	ldrb	r3, [r7, #7]
 8003032:	79fa      	ldrb	r2, [r7, #7]
 8003034:	4997      	ldr	r1, [pc, #604]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	440b      	add	r3, r1
 800303a:	330c      	adds	r3, #12
 800303c:	6819      	ldr	r1, [r3, #0]
 800303e:	4897      	ldr	r0, [pc, #604]	; (800329c <Send_Init_Msg+0x8c0>)
 8003040:	4613      	mov	r3, r2
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	4413      	add	r3, r2
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4403      	add	r3, r0
 800304a:	330c      	adds	r3, #12
 800304c:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 800304e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8003052:	3318      	adds	r3, #24
 8003054:	2b00      	cmp	r3, #0
 8003056:	da00      	bge.n	800305a <Send_Init_Msg+0x67e>
 8003058:	3307      	adds	r3, #7
 800305a:	10db      	asrs	r3, r3, #3
 800305c:	b29a      	uxth	r2, r3
 800305e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003062:	4413      	add	r3, r2
 8003064:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003068:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800306c:	3318      	adds	r3, #24
 800306e:	b29b      	uxth	r3, r3
 8003070:	b21b      	sxth	r3, r3
 8003072:	425a      	negs	r2, r3
 8003074:	f003 0307 	and.w	r3, r3, #7
 8003078:	f002 0207 	and.w	r2, r2, #7
 800307c:	bf58      	it	pl
 800307e:	4253      	negpl	r3, r2
 8003080:	b21b      	sxth	r3, r3
 8003082:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 8003086:	79fb      	ldrb	r3, [r7, #7]
 8003088:	4a85      	ldr	r2, [pc, #532]	; (80032a0 <Send_Init_Msg+0x8c4>)
 800308a:	5cd2      	ldrb	r2, [r2, r3]
 800308c:	3201      	adds	r2, #1
 800308e:	b2d1      	uxtb	r1, r2
 8003090:	4a83      	ldr	r2, [pc, #524]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003092:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	4a82      	ldr	r2, [pc, #520]	; (80032a0 <Send_Init_Msg+0x8c4>)
 8003098:	5cd3      	ldrb	r3, [r2, r3]
 800309a:	2bb3      	cmp	r3, #179	; 0xb3
 800309c:	d804      	bhi.n	80030a8 <Send_Init_Msg+0x6cc>
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	4a7f      	ldr	r2, [pc, #508]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d103      	bne.n	80030b0 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	4a7d      	ldr	r2, [pc, #500]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030ac:	210a      	movs	r1, #10
 80030ae:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80030b0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030b4:	f107 020c 	add.w	r2, r7, #12
 80030b8:	441a      	add	r2, r3
 80030ba:	79fb      	ldrb	r3, [r7, #7]
 80030bc:	4978      	ldr	r1, [pc, #480]	; (80032a0 <Send_Init_Msg+0x8c4>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80030c4:	2108      	movs	r1, #8
 80030c6:	f7fd fb31 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80030ca:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80030ce:	3308      	adds	r3, #8
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	da00      	bge.n	80030d6 <Send_Init_Msg+0x6fa>
 80030d4:	3307      	adds	r3, #7
 80030d6:	10db      	asrs	r3, r3, #3
 80030d8:	b29a      	uxth	r2, r3
 80030da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030de:	4413      	add	r3, r2
 80030e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80030e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030e8:	3308      	adds	r3, #8
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	b21b      	sxth	r3, r3
 80030ee:	425a      	negs	r2, r3
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	f002 0207 	and.w	r2, r2, #7
 80030f8:	bf58      	it	pl
 80030fa:	4253      	negpl	r3, r2
 80030fc:	b21b      	sxth	r3, r3
 80030fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 8003102:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003106:	f107 020c 	add.w	r2, r7, #12
 800310a:	441a      	add	r2, r3
 800310c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003110:	2301      	movs	r3, #1
 8003112:	2108      	movs	r1, #8
 8003114:	f7fd fb0a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003118:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800311c:	3308      	adds	r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	da00      	bge.n	8003124 <Send_Init_Msg+0x748>
 8003122:	3307      	adds	r3, #7
 8003124:	10db      	asrs	r3, r3, #3
 8003126:	b29a      	uxth	r2, r3
 8003128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800312c:	4413      	add	r3, r2
 800312e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003132:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003136:	3308      	adds	r3, #8
 8003138:	b29b      	uxth	r3, r3
 800313a:	b21b      	sxth	r3, r3
 800313c:	425a      	negs	r2, r3
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	f002 0207 	and.w	r2, r2, #7
 8003146:	bf58      	it	pl
 8003148:	4253      	negpl	r3, r2
 800314a:	b21b      	sxth	r3, r3
 800314c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8003150:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003154:	f107 020c 	add.w	r2, r7, #12
 8003158:	441a      	add	r2, r3
 800315a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800315e:	2301      	movs	r3, #1
 8003160:	2108      	movs	r1, #8
 8003162:	f7fd fae3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003166:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800316a:	3308      	adds	r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	da00      	bge.n	8003172 <Send_Init_Msg+0x796>
 8003170:	3307      	adds	r3, #7
 8003172:	10db      	asrs	r3, r3, #3
 8003174:	b29a      	uxth	r2, r3
 8003176:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800317a:	4413      	add	r3, r2
 800317c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003180:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003184:	3308      	adds	r3, #8
 8003186:	b29b      	uxth	r3, r3
 8003188:	b21b      	sxth	r3, r3
 800318a:	425a      	negs	r2, r3
 800318c:	f003 0307 	and.w	r3, r3, #7
 8003190:	f002 0207 	and.w	r2, r2, #7
 8003194:	bf58      	it	pl
 8003196:	4253      	negpl	r3, r2
 8003198:	b21b      	sxth	r3, r3
 800319a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 800319e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031a2:	f107 020c 	add.w	r2, r7, #12
 80031a6:	441a      	add	r2, r3
 80031a8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80031ac:	2300      	movs	r3, #0
 80031ae:	2108      	movs	r1, #8
 80031b0:	f7fd fabc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80031b4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80031b8:	3308      	adds	r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da00      	bge.n	80031c0 <Send_Init_Msg+0x7e4>
 80031be:	3307      	adds	r3, #7
 80031c0:	10db      	asrs	r3, r3, #3
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80031c8:	4413      	add	r3, r2
 80031ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80031ce:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80031d2:	3308      	adds	r3, #8
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	b21b      	sxth	r3, r3
 80031d8:	425a      	negs	r2, r3
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	f002 0207 	and.w	r2, r2, #7
 80031e2:	bf58      	it	pl
 80031e4:	4253      	negpl	r3, r2
 80031e6:	b21b      	sxth	r3, r3
 80031e8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80031ec:	4b2d      	ldr	r3, [pc, #180]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d060      	beq.n	80032bc <Send_Init_Msg+0x8e0>
 80031fa:	4b2a      	ldr	r3, [pc, #168]	; (80032a4 <Send_Init_Msg+0x8c8>)
 80031fc:	791b      	ldrb	r3, [r3, #4]
 80031fe:	79fa      	ldrb	r2, [r7, #7]
 8003200:	429a      	cmp	r2, r3
 8003202:	d15b      	bne.n	80032bc <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8003204:	230c      	movs	r3, #12
 8003206:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 800320a:	4827      	ldr	r0, [pc, #156]	; (80032a8 <Send_Init_Msg+0x8cc>)
 800320c:	f01a fb80 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8003210:	4601      	mov	r1, r0
 8003212:	4b26      	ldr	r3, [pc, #152]	; (80032ac <Send_Init_Msg+0x8d0>)
 8003214:	fba3 2301 	umull	r2, r3, r3, r1
 8003218:	08da      	lsrs	r2, r3, #3
 800321a:	4613      	mov	r3, r2
 800321c:	015b      	lsls	r3, r3, #5
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	1aca      	subs	r2, r1, r3
 8003226:	b2d3      	uxtb	r3, r2
 8003228:	3301      	adds	r3, #1
 800322a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 800322e:	4820      	ldr	r0, [pc, #128]	; (80032b0 <Send_Init_Msg+0x8d4>)
 8003230:	f022 ff62 	bl	80260f8 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8003234:	79fb      	ldrb	r3, [r7, #7]
 8003236:	4a17      	ldr	r2, [pc, #92]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	4413      	add	r3, r2
 800323c:	3303      	adds	r3, #3
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	4619      	mov	r1, r3
 8003242:	481c      	ldr	r0, [pc, #112]	; (80032b4 <Send_Init_Msg+0x8d8>)
 8003244:	f022 febc 	bl	8025fc0 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8003248:	79fb      	ldrb	r3, [r7, #7]
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <Send_Init_Msg+0x8b8>)
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	4413      	add	r3, r2
 8003250:	3303      	adds	r3, #3
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003258:	429a      	cmp	r2, r3
 800325a:	d108      	bne.n	800326e <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <Send_Init_Msg+0x8b8>)
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	4413      	add	r3, r2
 8003264:	3303      	adds	r3, #3
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3b02      	subs	r3, #2
 800326a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 800326e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003272:	4619      	mov	r1, r3
 8003274:	4810      	ldr	r0, [pc, #64]	; (80032b8 <Send_Init_Msg+0x8dc>)
 8003276:	f022 fea3 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 800327a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800327e:	f107 020c 	add.w	r2, r7, #12
 8003282:	441a      	add	r2, r3
 8003284:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003288:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800328c:	2108      	movs	r1, #8
 800328e:	f7fd fa4d 	bl	800072c <InsertBits>
	{
 8003292:	e022      	b.n	80032da <Send_Init_Msg+0x8fe>
 8003294:	200028f4 	.word	0x200028f4
 8003298:	00ffffef 	.word	0x00ffffef
 800329c:	20002da4 	.word	0x20002da4
 80032a0:	2000030c 	.word	0x2000030c
 80032a4:	2000308c 	.word	0x2000308c
 80032a8:	2000bc54 	.word	0x2000bc54
 80032ac:	10624dd3 	.word	0x10624dd3
 80032b0:	08027f40 	.word	0x08027f40
 80032b4:	08027f70 	.word	0x08027f70
 80032b8:	08027f8c 	.word	0x08027f8c
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 80032bc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032c0:	f107 020c 	add.w	r2, r7, #12
 80032c4:	441a      	add	r2, r3
 80032c6:	79fb      	ldrb	r3, [r7, #7]
 80032c8:	494e      	ldr	r1, [pc, #312]	; (8003404 <Send_Init_Msg+0xa28>)
 80032ca:	440b      	add	r3, r1
 80032cc:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80032d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80032d4:	2108      	movs	r1, #8
 80032d6:	f7fd fa29 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80032da:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80032de:	3308      	adds	r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da00      	bge.n	80032e6 <Send_Init_Msg+0x90a>
 80032e4:	3307      	adds	r3, #7
 80032e6:	10db      	asrs	r3, r3, #3
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032ee:	4413      	add	r3, r2
 80032f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80032f4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80032f8:	3308      	adds	r3, #8
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	b21b      	sxth	r3, r3
 80032fe:	425a      	negs	r2, r3
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	f002 0207 	and.w	r2, r2, #7
 8003308:	bf58      	it	pl
 800330a:	4253      	negpl	r3, r2
 800330c:	b21b      	sxth	r3, r3
 800330e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8003312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003316:	f107 020c 	add.w	r2, r7, #12
 800331a:	441a      	add	r2, r3
 800331c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003320:	2300      	movs	r3, #0
 8003322:	2108      	movs	r1, #8
 8003324:	f7fd fa02 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003328:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800332c:	3308      	adds	r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	da00      	bge.n	8003334 <Send_Init_Msg+0x958>
 8003332:	3307      	adds	r3, #7
 8003334:	10db      	asrs	r3, r3, #3
 8003336:	b29a      	uxth	r2, r3
 8003338:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800333c:	4413      	add	r3, r2
 800333e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8003342:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003346:	3308      	adds	r3, #8
 8003348:	b29b      	uxth	r3, r3
 800334a:	b21b      	sxth	r3, r3
 800334c:	425a      	negs	r2, r3
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	f002 0207 	and.w	r2, r2, #7
 8003356:	bf58      	it	pl
 8003358:	4253      	negpl	r3, r2
 800335a:	b21b      	sxth	r3, r3
 800335c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8003360:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f012 f986 	bl	801567c <CalculateDirectReverseCrc>
 8003370:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8003372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003376:	f107 020c 	add.w	r2, r7, #12
 800337a:	441a      	add	r2, r3
 800337c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8003380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003382:	2120      	movs	r1, #32
 8003384:	f7fd f9d2 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8003388:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800338c:	3320      	adds	r3, #32
 800338e:	2b00      	cmp	r3, #0
 8003390:	da00      	bge.n	8003394 <Send_Init_Msg+0x9b8>
 8003392:	3307      	adds	r3, #7
 8003394:	10db      	asrs	r3, r3, #3
 8003396:	b29a      	uxth	r2, r3
 8003398:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800339c:	4413      	add	r3, r2
 800339e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80033a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80033a6:	3320      	adds	r3, #32
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	b21b      	sxth	r3, r3
 80033ac:	425a      	negs	r2, r3
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	f002 0207 	and.w	r2, r2, #7
 80033b6:	bf58      	it	pl
 80033b8:	4253      	negpl	r3, r2
 80033ba:	b21b      	sxth	r3, r3
 80033bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80033c0:	4b11      	ldr	r3, [pc, #68]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00b      	beq.n	80033e6 <Send_Init_Msg+0xa0a>
 80033ce:	4b0e      	ldr	r3, [pc, #56]	; (8003408 <Send_Init_Msg+0xa2c>)
 80033d0:	791b      	ldrb	r3, [r3, #4]
 80033d2:	79fa      	ldrb	r2, [r7, #7]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d106      	bne.n	80033e6 <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 80033d8:	480c      	ldr	r0, [pc, #48]	; (800340c <Send_Init_Msg+0xa30>)
 80033da:	f022 fe8d 	bl	80260f8 <puts>
		printf("Not Sending Reply");
 80033de:	480c      	ldr	r0, [pc, #48]	; (8003410 <Send_Init_Msg+0xa34>)
 80033e0:	f022 fdee 	bl	8025fc0 <iprintf>
 80033e4:	e009      	b.n	80033fa <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80033e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80033ea:	b2d9      	uxtb	r1, r3
 80033ec:	79fa      	ldrb	r2, [r7, #7]
 80033ee:	f107 030c 	add.w	r3, r7, #12
 80033f2:	4618      	mov	r0, r3
 80033f4:	f004 fe38 	bl	8008068 <Process_Sending_Reply>
	}
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	375c      	adds	r7, #92	; 0x5c
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd90      	pop	{r4, r7, pc}
 8003402:	bf00      	nop
 8003404:	20000504 	.word	0x20000504
 8003408:	2000308c 	.word	0x2000308c
 800340c:	08027fa8 	.word	0x08027fa8
 8003410:	08027fc0 	.word	0x08027fc0

08003414 <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8003414:	b590      	push	{r4, r7, lr}
 8003416:	b0ab      	sub	sp, #172	; 0xac
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	4608      	mov	r0, r1
 800341e:	4611      	mov	r1, r2
 8003420:	461a      	mov	r2, r3
 8003422:	4603      	mov	r3, r0
 8003424:	70fb      	strb	r3, [r7, #3]
 8003426:	460b      	mov	r3, r1
 8003428:	70bb      	strb	r3, [r7, #2]
 800342a:	4613      	mov	r3, r2
 800342c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	uint32_t Calc_CRC = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	uint32_t Recv_CRC = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint32_t Ticks = HAL_GetTick();
 8003440:	f015 fea8 	bl	8019194 <HAL_GetTick>
 8003444:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint8_t noofIP = 0, uc_index = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800344e:	2300      	movs	r3, #0
 8003450:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
	uint8_t LinkEstablishFlag = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	uint8_t Temp_Vital_Data_Buff[HITACHI_MAX_PAYLOAD] = {0,};
 800345a:	2300      	movs	r3, #0
 800345c:	60fb      	str	r3, [r7, #12]
 800345e:	f107 0310 	add.w	r3, r7, #16
 8003462:	227c      	movs	r2, #124	; 0x7c
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f022 fcc2 	bl	8025df0 <memset>
	BITSTUFFINIT(0, 0);
 800346c:	2300      	movs	r3, #0
 800346e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003472:	2300      	movs	r3, #0
 8003474:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003478:	49a9      	ldr	r1, [pc, #676]	; (8003720 <Vital_Msg_extr+0x30c>)
 800347a:	48aa      	ldr	r0, [pc, #680]	; (8003724 <Vital_Msg_extr+0x310>)
 800347c:	f7fc fee0 	bl	8000240 <strcmp>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8149 	beq.w	800371a <Vital_Msg_extr+0x306>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003488:	4ba7      	ldr	r3, [pc, #668]	; (8003728 <Vital_Msg_extr+0x314>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d031      	beq.n	80034f8 <Vital_Msg_extr+0xe4>
 8003494:	4ba4      	ldr	r3, [pc, #656]	; (8003728 <Vital_Msg_extr+0x314>)
 8003496:	791b      	ldrb	r3, [r3, #4]
 8003498:	78ba      	ldrb	r2, [r7, #2]
 800349a:	429a      	cmp	r2, r3
 800349c:	d12c      	bne.n	80034f8 <Vital_Msg_extr+0xe4>
	{
		uint32_t Rand_Number = 22;
 800349e:	2316      	movs	r3, #22
 80034a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 80034a4:	48a1      	ldr	r0, [pc, #644]	; (800372c <Vital_Msg_extr+0x318>)
 80034a6:	f01a fa33 	bl	801d910 <HAL_RNG_GetRandomNumber>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4ba0      	ldr	r3, [pc, #640]	; (8003730 <Vital_Msg_extr+0x31c>)
 80034ae:	fba3 1302 	umull	r1, r3, r3, r2
 80034b2:	0dd9      	lsrs	r1, r3, #23
 80034b4:	460b      	mov	r3, r1
 80034b6:	041b      	lsls	r3, r3, #16
 80034b8:	1a5b      	subs	r3, r3, r1
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
#endif
		printf("\nInjected RX Vital CRC failure\n");
 80034c2:	489c      	ldr	r0, [pc, #624]	; (8003734 <Vital_Msg_extr+0x320>)
 80034c4:	f022 fe18 	bl	80260f8 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034c8:	78bb      	ldrb	r3, [r7, #2]
 80034ca:	4a9b      	ldr	r2, [pc, #620]	; (8003738 <Vital_Msg_extr+0x324>)
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	4413      	add	r3, r2
 80034d0:	3308      	adds	r3, #8
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4619      	mov	r1, r3
 80034d6:	4899      	ldr	r0, [pc, #612]	; (800373c <Vital_Msg_extr+0x328>)
 80034d8:	f022 fd72 	bl	8025fc0 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80034dc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80034e0:	4897      	ldr	r0, [pc, #604]	; (8003740 <Vital_Msg_extr+0x32c>)
 80034e2:	f022 fd6d 	bl	8025fc0 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 80034e6:	f107 020c 	add.w	r2, r7, #12
 80034ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80034ee:	2118      	movs	r1, #24
 80034f0:	2000      	movs	r0, #0
 80034f2:	f7fd f91b 	bl	800072c <InsertBits>
	{
 80034f6:	e00b      	b.n	8003510 <Vital_Msg_extr+0xfc>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80034f8:	78bb      	ldrb	r3, [r7, #2]
 80034fa:	4a8f      	ldr	r2, [pc, #572]	; (8003738 <Vital_Msg_extr+0x324>)
 80034fc:	011b      	lsls	r3, r3, #4
 80034fe:	4413      	add	r3, r2
 8003500:	3308      	adds	r3, #8
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f107 020c 	add.w	r2, r7, #12
 8003508:	2118      	movs	r1, #24
 800350a:	2000      	movs	r0, #0
 800350c:	f7fd f90e 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003510:	2300      	movs	r3, #0
 8003512:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003516:	e010      	b.n	800353a <Vital_Msg_extr+0x126>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8003518:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	441a      	add	r2, r3
 8003520:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003524:	3303      	adds	r3, #3
 8003526:	7812      	ldrb	r2, [r2, #0]
 8003528:	33a8      	adds	r3, #168	; 0xa8
 800352a:	443b      	add	r3, r7
 800352c:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8003530:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003534:	3301      	adds	r3, #1
 8003536:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 800353a:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	3b05      	subs	r3, #5
 8003542:	429a      	cmp	r2, r3
 8003544:	dbe8      	blt.n	8003518 <Vital_Msg_extr+0x104>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003546:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800354a:	b29b      	uxth	r3, r3
 800354c:	3303      	adds	r3, #3
 800354e:	b29a      	uxth	r2, r3
 8003550:	f107 030c 	add.w	r3, r7, #12
 8003554:	4611      	mov	r1, r2
 8003556:	4618      	mov	r0, r3
 8003558:	f012 f890 	bl	801567c <CalculateDirectReverseCrc>
 800355c:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	3b05      	subs	r3, #5
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	441a      	add	r2, r3
 8003568:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800356c:	2120      	movs	r1, #32
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd f850 	bl	8000614 <ExtractBits>
 8003574:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8003578:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800357c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003580:	429a      	cmp	r2, r3
 8003582:	f000 80f5 	beq.w	8003770 <Vital_Msg_extr+0x35c>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	3305      	adds	r3, #5
 800358a:	461a      	mov	r2, r3
 800358c:	2108      	movs	r1, #8
 800358e:	2000      	movs	r0, #0
 8003590:	f7fd f840 	bl	8000614 <ExtractBits>
 8003594:	4603      	mov	r3, r0
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <Vital_Msg_extr+0x19c>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	3305      	adds	r3, #5
 800359e:	461a      	mov	r2, r3
 80035a0:	2108      	movs	r1, #8
 80035a2:	2000      	movs	r0, #0
 80035a4:	f7fd f836 	bl	8000614 <ExtractBits>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	f040 809f 	bne.w	80036ee <Vital_Msg_extr+0x2da>
		{
			printf("Tx seq Roll over Detected\n");
 80035b0:	4864      	ldr	r0, [pc, #400]	; (8003744 <Vital_Msg_extr+0x330>)
 80035b2:	f022 fda1 	bl	80260f8 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	2100      	movs	r1, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	f022 fc16 	bl	8025df0 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80035c4:	78bb      	ldrb	r3, [r7, #2]
 80035c6:	4a5c      	ldr	r2, [pc, #368]	; (8003738 <Vital_Msg_extr+0x324>)
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	4413      	add	r3, r2
 80035cc:	3308      	adds	r3, #8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3301      	adds	r3, #1
 80035d2:	f107 020c 	add.w	r2, r7, #12
 80035d6:	2118      	movs	r1, #24
 80035d8:	2000      	movs	r0, #0
 80035da:	f7fd f8a7 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035de:	2300      	movs	r3, #0
 80035e0:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80035e4:	e010      	b.n	8003608 <Vital_Msg_extr+0x1f4>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80035e6:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	441a      	add	r2, r3
 80035ee:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80035f2:	3303      	adds	r3, #3
 80035f4:	7812      	ldrb	r2, [r2, #0]
 80035f6:	33a8      	adds	r3, #168	; 0xa8
 80035f8:	443b      	add	r3, r7
 80035fa:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80035fe:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003602:	3301      	adds	r3, #1
 8003604:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8003608:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 800360c:	78fb      	ldrb	r3, [r7, #3]
 800360e:	3b05      	subs	r3, #5
 8003610:	429a      	cmp	r2, r3
 8003612:	dbe8      	blt.n	80035e6 <Vital_Msg_extr+0x1d2>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8003614:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8003618:	b29b      	uxth	r3, r3
 800361a:	3303      	adds	r3, #3
 800361c:	b29a      	uxth	r2, r3
 800361e:	f107 030c 	add.w	r3, r7, #12
 8003622:	4611      	mov	r1, r2
 8003624:	4618      	mov	r0, r3
 8003626:	f012 f829 	bl	801567c <CalculateDirectReverseCrc>
 800362a:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800362e:	78fb      	ldrb	r3, [r7, #3]
 8003630:	3b05      	subs	r3, #5
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	441a      	add	r2, r3
 8003636:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800363a:	2120      	movs	r1, #32
 800363c:	4618      	mov	r0, r3
 800363e:	f7fc ffe9 	bl	8000614 <ExtractBits>
 8003642:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0

			if(Calc_CRC == Recv_CRC)
 8003646:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800364a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800364e:	429a      	cmp	r2, r3
 8003650:	d137      	bne.n	80036c2 <Vital_Msg_extr+0x2ae>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8003652:	483d      	ldr	r0, [pc, #244]	; (8003748 <Vital_Msg_extr+0x334>)
 8003654:	f022 fd50 	bl	80260f8 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8003658:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800365c:	483b      	ldr	r0, [pc, #236]	; (800374c <Vital_Msg_extr+0x338>)
 800365e:	f022 fcaf 	bl	8025fc0 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8003662:	78bb      	ldrb	r3, [r7, #2]
 8003664:	4a34      	ldr	r2, [pc, #208]	; (8003738 <Vital_Msg_extr+0x324>)
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4413      	add	r3, r2
 800366a:	3308      	adds	r3, #8
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	4837      	ldr	r0, [pc, #220]	; (8003750 <Vital_Msg_extr+0x33c>)
 8003672:	f022 fca5 	bl	8025fc0 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8003676:	78bb      	ldrb	r3, [r7, #2]
 8003678:	492f      	ldr	r1, [pc, #188]	; (8003738 <Vital_Msg_extr+0x324>)
 800367a:	011a      	lsls	r2, r3, #4
 800367c:	440a      	add	r2, r1
 800367e:	3208      	adds	r2, #8
 8003680:	6812      	ldr	r2, [r2, #0]
 8003682:	3201      	adds	r2, #1
 8003684:	492c      	ldr	r1, [pc, #176]	; (8003738 <Vital_Msg_extr+0x324>)
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	440b      	add	r3, r1
 800368a:	3308      	adds	r3, #8
 800368c:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	4a29      	ldr	r2, [pc, #164]	; (8003738 <Vital_Msg_extr+0x324>)
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	4413      	add	r3, r2
 8003696:	3308      	adds	r3, #8
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4619      	mov	r1, r3
 800369c:	482d      	ldr	r0, [pc, #180]	; (8003754 <Vital_Msg_extr+0x340>)
 800369e:	f022 fc8f 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80036a2:	78bb      	ldrb	r3, [r7, #2]
 80036a4:	78ba      	ldrb	r2, [r7, #2]
 80036a6:	4924      	ldr	r1, [pc, #144]	; (8003738 <Vital_Msg_extr+0x324>)
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	440b      	add	r3, r1
 80036ac:	3308      	adds	r3, #8
 80036ae:	6819      	ldr	r1, [r3, #0]
 80036b0:	4829      	ldr	r0, [pc, #164]	; (8003758 <Vital_Msg_extr+0x344>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	4403      	add	r3, r0
 80036bc:	3308      	adds	r3, #8
 80036be:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 80036c0:	e057      	b.n	8003772 <Vital_Msg_extr+0x35e>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036c2:	78bb      	ldrb	r3, [r7, #2]
 80036c4:	4a25      	ldr	r2, [pc, #148]	; (800375c <Vital_Msg_extr+0x348>)
 80036c6:	3366      	adds	r3, #102	; 0x66
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	4619      	mov	r1, r3
 80036d0:	4823      	ldr	r0, [pc, #140]	; (8003760 <Vital_Msg_extr+0x34c>)
 80036d2:	f022 fc75 	bl	8025fc0 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80036d6:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80036da:	4822      	ldr	r0, [pc, #136]	; (8003764 <Vital_Msg_extr+0x350>)
 80036dc:	f022 fc70 	bl	8025fc0 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80036e0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 80036e4:	4820      	ldr	r0, [pc, #128]	; (8003768 <Vital_Msg_extr+0x354>)
 80036e6:	f022 fc6b 	bl	8025fc0 <iprintf>
				return;
 80036ea:	f000 bf7a 	b.w	80045e2 <Vital_Msg_extr+0x11ce>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80036ee:	78bb      	ldrb	r3, [r7, #2]
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <Vital_Msg_extr+0x348>)
 80036f2:	3366      	adds	r3, #102	; 0x66
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	4413      	add	r3, r2
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4619      	mov	r1, r3
 80036fc:	481b      	ldr	r0, [pc, #108]	; (800376c <Vital_Msg_extr+0x358>)
 80036fe:	f022 fc5f 	bl	8025fc0 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8003702:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8003706:	4817      	ldr	r0, [pc, #92]	; (8003764 <Vital_Msg_extr+0x350>)
 8003708:	f022 fc5a 	bl	8025fc0 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 800370c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8003710:	4815      	ldr	r0, [pc, #84]	; (8003768 <Vital_Msg_extr+0x354>)
 8003712:	f022 fc55 	bl	8025fc0 <iprintf>
			return;
 8003716:	f000 bf64 	b.w	80045e2 <Vital_Msg_extr+0x11ce>
		goto ROLLOVER_VITAL;
 800371a:	bf00      	nop
 800371c:	e029      	b.n	8003772 <Vital_Msg_extr+0x35e>
 800371e:	bf00      	nop
 8003720:	08027ad0 	.word	0x08027ad0
 8003724:	20000505 	.word	0x20000505
 8003728:	2000308c 	.word	0x2000308c
 800372c:	2000bc54 	.word	0x2000bc54
 8003730:	80008001 	.word	0x80008001
 8003734:	08027fd4 	.word	0x08027fd4
 8003738:	200028f4 	.word	0x200028f4
 800373c:	08027ff4 	.word	0x08027ff4
 8003740:	0802801c 	.word	0x0802801c
 8003744:	08028044 	.word	0x08028044
 8003748:	08028060 	.word	0x08028060
 800374c:	08028078 	.word	0x08028078
 8003750:	08028098 	.word	0x08028098
 8003754:	080280b8 	.word	0x080280b8
 8003758:	20002da4 	.word	0x20002da4
 800375c:	20000504 	.word	0x20000504
 8003760:	080280e4 	.word	0x080280e4
 8003764:	08027d14 	.word	0x08027d14
 8003768:	08027d24 	.word	0x08027d24
 800376c:	08028104 	.word	0x08028104
		}
	}

	ROLLOVER_VITAL:
 8003770:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003772:	78bb      	ldrb	r3, [r7, #2]
 8003774:	49c4      	ldr	r1, [pc, #784]	; (8003a88 <Vital_Msg_extr+0x674>)
 8003776:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800377e:	78bb      	ldrb	r3, [r7, #2]
 8003780:	49c2      	ldr	r1, [pc, #776]	; (8003a8c <Vital_Msg_extr+0x678>)
 8003782:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 800378a:	78bb      	ldrb	r3, [r7, #2]
 800378c:	4ac0      	ldr	r2, [pc, #768]	; (8003a90 <Vital_Msg_extr+0x67c>)
 800378e:	2101      	movs	r1, #1
 8003790:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 8003792:	78ba      	ldrb	r2, [r7, #2]
 8003794:	4613      	mov	r3, r2
 8003796:	015b      	lsls	r3, r3, #5
 8003798:	4413      	add	r3, r2
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4abd      	ldr	r2, [pc, #756]	; (8003a94 <Vital_Msg_extr+0x680>)
 800379e:	4413      	add	r3, r2
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	2100      	movs	r1, #0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f022 fb23 	bl	8025df0 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 80037aa:	78ba      	ldrb	r2, [r7, #2]
 80037ac:	4613      	mov	r3, r2
 80037ae:	015b      	lsls	r3, r3, #5
 80037b0:	4413      	add	r3, r2
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	4ab7      	ldr	r2, [pc, #732]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037b6:	4413      	add	r3, r2
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4618      	mov	r0, r3
 80037be:	f022 faef 	bl	8025da0 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 80037c2:	78ba      	ldrb	r2, [r7, #2]
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	b298      	uxth	r0, r3
 80037c8:	49b2      	ldr	r1, [pc, #712]	; (8003a94 <Vital_Msg_extr+0x680>)
 80037ca:	4613      	mov	r3, r2
 80037cc:	015b      	lsls	r3, r3, #5
 80037ce:	4413      	add	r3, r2
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	440b      	add	r3, r1
 80037d4:	3340      	adds	r3, #64	; 0x40
 80037d6:	4602      	mov	r2, r0
 80037d8:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80037da:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80037de:	3308      	adds	r3, #8
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	da00      	bge.n	80037e6 <Vital_Msg_extr+0x3d2>
 80037e4:	3307      	adds	r3, #7
 80037e6:	10db      	asrs	r3, r3, #3
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80037ee:	4413      	add	r3, r2
 80037f0:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80037f4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80037f8:	3308      	adds	r3, #8
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	b21b      	sxth	r3, r3
 80037fe:	425a      	negs	r2, r3
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	f002 0207 	and.w	r2, r2, #7
 8003808:	bf58      	it	pl
 800380a:	4253      	negpl	r3, r2
 800380c:	b21b      	sxth	r3, r3
 800380e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003812:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	441a      	add	r2, r3
 800381a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800381e:	2110      	movs	r1, #16
 8003820:	4618      	mov	r0, r3
 8003822:	f7fc fef7 	bl	8000614 <ExtractBits>
 8003826:	4603      	mov	r3, r0
 8003828:	78ba      	ldrb	r2, [r7, #2]
 800382a:	b298      	uxth	r0, r3
 800382c:	499a      	ldr	r1, [pc, #616]	; (8003a98 <Vital_Msg_extr+0x684>)
 800382e:	4613      	mov	r3, r2
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	4413      	add	r3, r2
 8003834:	011b      	lsls	r3, r3, #4
 8003836:	440b      	add	r3, r1
 8003838:	3328      	adds	r3, #40	; 0x28
 800383a:	4602      	mov	r2, r0
 800383c:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800383e:	78ba      	ldrb	r2, [r7, #2]
 8003840:	4995      	ldr	r1, [pc, #596]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	440b      	add	r3, r1
 800384c:	3328      	adds	r3, #40	; 0x28
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4892      	ldr	r0, [pc, #584]	; (8003a9c <Vital_Msg_extr+0x688>)
 8003854:	f022 fbb4 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 8003858:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 800385c:	3310      	adds	r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	da00      	bge.n	8003864 <Vital_Msg_extr+0x450>
 8003862:	3307      	adds	r3, #7
 8003864:	10db      	asrs	r3, r3, #3
 8003866:	b29a      	uxth	r2, r3
 8003868:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800386c:	4413      	add	r3, r2
 800386e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003872:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003876:	3310      	adds	r3, #16
 8003878:	b29b      	uxth	r3, r3
 800387a:	b21b      	sxth	r3, r3
 800387c:	425a      	negs	r2, r3
 800387e:	f003 0307 	and.w	r3, r3, #7
 8003882:	f002 0207 	and.w	r2, r2, #7
 8003886:	bf58      	it	pl
 8003888:	4253      	negpl	r3, r2
 800388a:	b21b      	sxth	r3, r3
 800388c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003890:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	441a      	add	r2, r3
 8003898:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800389c:	2110      	movs	r1, #16
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fc feb8 	bl	8000614 <ExtractBits>
 80038a4:	4603      	mov	r3, r0
 80038a6:	78ba      	ldrb	r2, [r7, #2]
 80038a8:	b298      	uxth	r0, r3
 80038aa:	497b      	ldr	r1, [pc, #492]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	; 0x26
 80038b8:	4602      	mov	r2, r0
 80038ba:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 80038bc:	78ba      	ldrb	r2, [r7, #2]
 80038be:	4976      	ldr	r1, [pc, #472]	; (8003a98 <Vital_Msg_extr+0x684>)
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	440b      	add	r3, r1
 80038ca:	3326      	adds	r3, #38	; 0x26
 80038cc:	881b      	ldrh	r3, [r3, #0]
 80038ce:	4619      	mov	r1, r3
 80038d0:	4873      	ldr	r0, [pc, #460]	; (8003aa0 <Vital_Msg_extr+0x68c>)
 80038d2:	f022 fb75 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 80038d6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80038da:	3310      	adds	r3, #16
 80038dc:	2b00      	cmp	r3, #0
 80038de:	da00      	bge.n	80038e2 <Vital_Msg_extr+0x4ce>
 80038e0:	3307      	adds	r3, #7
 80038e2:	10db      	asrs	r3, r3, #3
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80038ea:	4413      	add	r3, r2
 80038ec:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80038f0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80038f4:	3310      	adds	r3, #16
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b21b      	sxth	r3, r3
 80038fa:	425a      	negs	r2, r3
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	f002 0207 	and.w	r2, r2, #7
 8003904:	bf58      	it	pl
 8003906:	4253      	negpl	r3, r2
 8003908:	b21b      	sxth	r3, r3
 800390a:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800390e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	441a      	add	r2, r3
 8003916:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800391a:	2108      	movs	r1, #8
 800391c:	4618      	mov	r0, r3
 800391e:	f7fc fe79 	bl	8000614 <ExtractBits>
 8003922:	4602      	mov	r2, r0
 8003924:	78bb      	ldrb	r3, [r7, #2]
 8003926:	b2d1      	uxtb	r1, r2
 8003928:	4a5e      	ldr	r2, [pc, #376]	; (8003aa4 <Vital_Msg_extr+0x690>)
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	4413      	add	r3, r2
 800392e:	3302      	adds	r3, #2
 8003930:	460a      	mov	r2, r1
 8003932:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003934:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003938:	3308      	adds	r3, #8
 800393a:	2b00      	cmp	r3, #0
 800393c:	da00      	bge.n	8003940 <Vital_Msg_extr+0x52c>
 800393e:	3307      	adds	r3, #7
 8003940:	10db      	asrs	r3, r3, #3
 8003942:	b29a      	uxth	r2, r3
 8003944:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003948:	4413      	add	r3, r2
 800394a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 800394e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003952:	3308      	adds	r3, #8
 8003954:	b29b      	uxth	r3, r3
 8003956:	b21b      	sxth	r3, r3
 8003958:	425a      	negs	r2, r3
 800395a:	f003 0307 	and.w	r3, r3, #7
 800395e:	f002 0207 	and.w	r2, r2, #7
 8003962:	bf58      	it	pl
 8003964:	4253      	negpl	r3, r2
 8003966:	b21b      	sxth	r3, r3
 8003968:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800396c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	441a      	add	r2, r3
 8003974:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003978:	2108      	movs	r1, #8
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fe4a 	bl	8000614 <ExtractBits>
 8003980:	4602      	mov	r2, r0
 8003982:	78bb      	ldrb	r3, [r7, #2]
 8003984:	b2d1      	uxtb	r1, r2
 8003986:	4a47      	ldr	r2, [pc, #284]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	4413      	add	r3, r2
 800398c:	3301      	adds	r3, #1
 800398e:	460a      	mov	r2, r1
 8003990:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8003992:	78bb      	ldrb	r3, [r7, #2]
 8003994:	4a43      	ldr	r2, [pc, #268]	; (8003aa4 <Vital_Msg_extr+0x690>)
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	4413      	add	r3, r2
 800399a:	3301      	adds	r3, #1
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d138      	bne.n	8003a14 <Vital_Msg_extr+0x600>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80039a2:	78bb      	ldrb	r3, [r7, #2]
 80039a4:	4a40      	ldr	r2, [pc, #256]	; (8003aa8 <Vital_Msg_extr+0x694>)
 80039a6:	3366      	adds	r3, #102	; 0x66
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	4619      	mov	r1, r3
 80039b0:	483e      	ldr	r0, [pc, #248]	; (8003aac <Vital_Msg_extr+0x698>)
 80039b2:	f022 fb05 	bl	8025fc0 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039b6:	78bb      	ldrb	r3, [r7, #2]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	4413      	add	r3, r2
 80039be:	330c      	adds	r3, #12
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4619      	mov	r1, r3
 80039c4:	483a      	ldr	r0, [pc, #232]	; (8003ab0 <Vital_Msg_extr+0x69c>)
 80039c6:	f022 fafb 	bl	8025fc0 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039ca:	78bb      	ldrb	r3, [r7, #2]
 80039cc:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039ce:	011a      	lsls	r2, r3, #4
 80039d0:	440a      	add	r2, r1
 80039d2:	320c      	adds	r2, #12
 80039d4:	6812      	ldr	r2, [r2, #0]
 80039d6:	3201      	adds	r2, #1
 80039d8:	4932      	ldr	r1, [pc, #200]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	440b      	add	r3, r1
 80039de:	330c      	adds	r3, #12
 80039e0:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80039e2:	78bb      	ldrb	r3, [r7, #2]
 80039e4:	4a2f      	ldr	r2, [pc, #188]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	4413      	add	r3, r2
 80039ea:	330c      	adds	r3, #12
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4619      	mov	r1, r3
 80039f0:	4830      	ldr	r0, [pc, #192]	; (8003ab4 <Vital_Msg_extr+0x6a0>)
 80039f2:	f022 fae5 	bl	8025fc0 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80039f6:	78bb      	ldrb	r3, [r7, #2]
 80039f8:	78ba      	ldrb	r2, [r7, #2]
 80039fa:	492a      	ldr	r1, [pc, #168]	; (8003aa4 <Vital_Msg_extr+0x690>)
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	440b      	add	r3, r1
 8003a00:	330c      	adds	r3, #12
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	482c      	ldr	r0, [pc, #176]	; (8003ab8 <Vital_Msg_extr+0x6a4>)
 8003a06:	4613      	mov	r3, r2
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	4413      	add	r3, r2
 8003a0c:	00db      	lsls	r3, r3, #3
 8003a0e:	4403      	add	r3, r0
 8003a10:	330c      	adds	r3, #12
 8003a12:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8003a14:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a18:	3308      	adds	r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	da00      	bge.n	8003a20 <Vital_Msg_extr+0x60c>
 8003a1e:	3307      	adds	r3, #7
 8003a20:	10db      	asrs	r3, r3, #3
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a28:	4413      	add	r3, r2
 8003a2a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003a2e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a32:	3308      	adds	r3, #8
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	b21b      	sxth	r3, r3
 8003a38:	425a      	negs	r2, r3
 8003a3a:	f003 0307 	and.w	r3, r3, #7
 8003a3e:	f002 0207 	and.w	r2, r2, #7
 8003a42:	bf58      	it	pl
 8003a44:	4253      	negpl	r3, r2
 8003a46:	b21b      	sxth	r3, r3
 8003a48:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003a4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	441a      	add	r2, r3
 8003a54:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003a58:	2108      	movs	r1, #8
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fc fdda 	bl	8000614 <ExtractBits>
 8003a60:	4603      	mov	r3, r0
 8003a62:	78ba      	ldrb	r2, [r7, #2]
 8003a64:	b2d8      	uxtb	r0, r3
 8003a66:	490c      	ldr	r1, [pc, #48]	; (8003a98 <Vital_Msg_extr+0x684>)
 8003a68:	4613      	mov	r3, r2
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4413      	add	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	440b      	add	r3, r1
 8003a72:	3302      	adds	r3, #2
 8003a74:	4602      	mov	r2, r0
 8003a76:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003a78:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	da1c      	bge.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a82:	3307      	adds	r3, #7
 8003a84:	e01a      	b.n	8003abc <Vital_Msg_extr+0x6a8>
 8003a86:	bf00      	nop
 8003a88:	20002630 	.word	0x20002630
 8003a8c:	20002658 	.word	0x20002658
 8003a90:	200026a4 	.word	0x200026a4
 8003a94:	20003094 	.word	0x20003094
 8003a98:	20002ad4 	.word	0x20002ad4
 8003a9c:	08027e04 	.word	0x08027e04
 8003aa0:	08027e0c 	.word	0x08027e0c
 8003aa4:	200028f4 	.word	0x200028f4
 8003aa8:	20000504 	.word	0x20000504
 8003aac:	08028118 	.word	0x08028118
 8003ab0:	0802815c 	.word	0x0802815c
 8003ab4:	0802816c 	.word	0x0802816c
 8003ab8:	20002da4 	.word	0x20002da4
 8003abc:	10db      	asrs	r3, r3, #3
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003aca:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ace:	3308      	adds	r3, #8
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	b21b      	sxth	r3, r3
 8003ad4:	425a      	negs	r2, r3
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	f002 0207 	and.w	r2, r2, #7
 8003ade:	bf58      	it	pl
 8003ae0:	4253      	negpl	r3, r2
 8003ae2:	b21b      	sxth	r3, r3
 8003ae4:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8003ae8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	441a      	add	r2, r3
 8003af0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003af4:	2110      	movs	r1, #16
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd8c 	bl	8000614 <ExtractBits>
 8003afc:	4602      	mov	r2, r0
 8003afe:	78bb      	ldrb	r3, [r7, #2]
 8003b00:	b291      	uxth	r1, r2
 8003b02:	4abd      	ldr	r2, [pc, #756]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	4413      	add	r3, r2
 8003b08:	3304      	adds	r3, #4
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8003b0e:	49bb      	ldr	r1, [pc, #748]	; (8003dfc <Vital_Msg_extr+0x9e8>)
 8003b10:	48bb      	ldr	r0, [pc, #748]	; (8003e00 <Vital_Msg_extr+0x9ec>)
 8003b12:	f7fc fb95 	bl	8000240 <strcmp>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10f      	bne.n	8003b3c <Vital_Msg_extr+0x728>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8003b1c:	78bb      	ldrb	r3, [r7, #2]
 8003b1e:	4ab6      	ldr	r2, [pc, #728]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	881a      	ldrh	r2, [r3, #0]
 8003b28:	78bb      	ldrb	r3, [r7, #2]
 8003b2a:	f042 0208 	orr.w	r2, r2, #8
 8003b2e:	b291      	uxth	r1, r2
 8003b30:	4ab1      	ldr	r2, [pc, #708]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b32:	011b      	lsls	r3, r3, #4
 8003b34:	4413      	add	r3, r2
 8003b36:	3304      	adds	r3, #4
 8003b38:	460a      	mov	r2, r1
 8003b3a:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003b3c:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003b40:	3310      	adds	r3, #16
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	da00      	bge.n	8003b48 <Vital_Msg_extr+0x734>
 8003b46:	3307      	adds	r3, #7
 8003b48:	10db      	asrs	r3, r3, #3
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b50:	4413      	add	r3, r2
 8003b52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003b56:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b5a:	3310      	adds	r3, #16
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	b21b      	sxth	r3, r3
 8003b60:	425a      	negs	r2, r3
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	f002 0207 	and.w	r2, r2, #7
 8003b6a:	bf58      	it	pl
 8003b6c:	4253      	negpl	r3, r2
 8003b6e:	b21b      	sxth	r3, r3
 8003b70:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003b74:	78bb      	ldrb	r3, [r7, #2]
 8003b76:	4aa0      	ldr	r2, [pc, #640]	; (8003df8 <Vital_Msg_extr+0x9e4>)
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	4413      	add	r3, r2
 8003b7c:	3304      	adds	r3, #4
 8003b7e:	881b      	ldrh	r3, [r3, #0]
 8003b80:	f003 0320 	and.w	r3, r3, #32
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 8145 	beq.w	8003e14 <Vital_Msg_extr+0xa00>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003b8a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	441a      	add	r2, r3
 8003b92:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003b96:	2108      	movs	r1, #8
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fc fd3b 	bl	8000614 <ExtractBits>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	78ba      	ldrb	r2, [r7, #2]
 8003ba2:	b2d8      	uxtb	r0, r3
 8003ba4:	4997      	ldr	r1, [pc, #604]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	440b      	add	r3, r1
 8003bb0:	3305      	adds	r3, #5
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003bb6:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003bba:	3308      	adds	r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	da00      	bge.n	8003bc2 <Vital_Msg_extr+0x7ae>
 8003bc0:	3307      	adds	r3, #7
 8003bc2:	10db      	asrs	r3, r3, #3
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bca:	4413      	add	r3, r2
 8003bcc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003bd0:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	425a      	negs	r2, r3
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	f002 0207 	and.w	r2, r2, #7
 8003be4:	bf58      	it	pl
 8003be6:	4253      	negpl	r3, r2
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003bee:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	441a      	add	r2, r3
 8003bf6:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003bfa:	2108      	movs	r1, #8
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fc fd09 	bl	8000614 <ExtractBits>
 8003c02:	4603      	mov	r3, r0
 8003c04:	78ba      	ldrb	r2, [r7, #2]
 8003c06:	b2d8      	uxtb	r0, r3
 8003c08:	497e      	ldr	r1, [pc, #504]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	440b      	add	r3, r1
 8003c14:	3304      	adds	r3, #4
 8003c16:	4602      	mov	r2, r0
 8003c18:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8003c1a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c1e:	3308      	adds	r3, #8
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	da00      	bge.n	8003c26 <Vital_Msg_extr+0x812>
 8003c24:	3307      	adds	r3, #7
 8003c26:	10db      	asrs	r3, r3, #3
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c2e:	4413      	add	r3, r2
 8003c30:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c34:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c38:	3308      	adds	r3, #8
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	b21b      	sxth	r3, r3
 8003c3e:	425a      	negs	r2, r3
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	f002 0207 	and.w	r2, r2, #7
 8003c48:	bf58      	it	pl
 8003c4a:	4253      	negpl	r3, r2
 8003c4c:	b21b      	sxth	r3, r3
 8003c4e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003c52:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	441a      	add	r2, r3
 8003c5a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c5e:	2108      	movs	r1, #8
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fc fcd7 	bl	8000614 <ExtractBits>
 8003c66:	4603      	mov	r3, r0
 8003c68:	78ba      	ldrb	r2, [r7, #2]
 8003c6a:	b2d8      	uxtb	r0, r3
 8003c6c:	4965      	ldr	r1, [pc, #404]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	440b      	add	r3, r1
 8003c78:	3303      	adds	r3, #3
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8003c7e:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003c82:	3308      	adds	r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	da00      	bge.n	8003c8a <Vital_Msg_extr+0x876>
 8003c88:	3307      	adds	r3, #7
 8003c8a:	10db      	asrs	r3, r3, #3
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003c92:	4413      	add	r3, r2
 8003c94:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003c98:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003c9c:	3308      	adds	r3, #8
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	425a      	negs	r2, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	f002 0207 	and.w	r2, r2, #7
 8003cac:	bf58      	it	pl
 8003cae:	4253      	negpl	r3, r2
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003cb6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	441a      	add	r2, r3
 8003cbe:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cc2:	2108      	movs	r1, #8
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fc fca5 	bl	8000614 <ExtractBits>
 8003cca:	4603      	mov	r3, r0
 8003ccc:	78ba      	ldrb	r2, [r7, #2]
 8003cce:	b2d8      	uxtb	r0, r3
 8003cd0:	494c      	ldr	r1, [pc, #304]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	4413      	add	r3, r2
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	440b      	add	r3, r1
 8003cdc:	4602      	mov	r2, r0
 8003cde:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8003ce0:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da00      	bge.n	8003cec <Vital_Msg_extr+0x8d8>
 8003cea:	3307      	adds	r3, #7
 8003cec:	10db      	asrs	r3, r3, #3
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003cf4:	4413      	add	r3, r2
 8003cf6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003cfa:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003cfe:	3308      	adds	r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b21b      	sxth	r3, r3
 8003d04:	425a      	negs	r2, r3
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	f002 0207 	and.w	r2, r2, #7
 8003d0e:	bf58      	it	pl
 8003d10:	4253      	negpl	r3, r2
 8003d12:	b21b      	sxth	r3, r3
 8003d14:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d18:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	441a      	add	r2, r3
 8003d20:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d24:	2108      	movs	r1, #8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f7fc fc74 	bl	8000614 <ExtractBits>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	78ba      	ldrb	r2, [r7, #2]
 8003d30:	b2d8      	uxtb	r0, r3
 8003d32:	4934      	ldr	r1, [pc, #208]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	005b      	lsls	r3, r3, #1
 8003d3c:	440b      	add	r3, r1
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4602      	mov	r2, r0
 8003d42:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003d44:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	da00      	bge.n	8003d50 <Vital_Msg_extr+0x93c>
 8003d4e:	3307      	adds	r3, #7
 8003d50:	10db      	asrs	r3, r3, #3
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d58:	4413      	add	r3, r2
 8003d5a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003d5e:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d62:	3308      	adds	r3, #8
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	425a      	negs	r2, r3
 8003d6a:	f003 0307 	and.w	r3, r3, #7
 8003d6e:	f002 0207 	and.w	r2, r2, #7
 8003d72:	bf58      	it	pl
 8003d74:	4253      	negpl	r3, r2
 8003d76:	b21b      	sxth	r3, r3
 8003d78:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003d7c:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	441a      	add	r2, r3
 8003d84:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003d88:	2108      	movs	r1, #8
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fc fc42 	bl	8000614 <ExtractBits>
 8003d90:	4603      	mov	r3, r0
 8003d92:	78ba      	ldrb	r2, [r7, #2]
 8003d94:	b2d8      	uxtb	r0, r3
 8003d96:	491b      	ldr	r1, [pc, #108]	; (8003e04 <Vital_Msg_extr+0x9f0>)
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	440b      	add	r3, r1
 8003da2:	3302      	adds	r3, #2
 8003da4:	4602      	mov	r2, r0
 8003da6:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003da8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003dac:	3308      	adds	r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	da00      	bge.n	8003db4 <Vital_Msg_extr+0x9a0>
 8003db2:	3307      	adds	r3, #7
 8003db4:	10db      	asrs	r3, r3, #3
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003dc2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	425a      	negs	r2, r3
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	f002 0207 	and.w	r2, r2, #7
 8003dd6:	bf58      	it	pl
 8003dd8:	4253      	negpl	r3, r2
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8003de0:	78bb      	ldrb	r3, [r7, #2]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f005 fd90 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00e      	beq.n	8003e0c <Vital_Msg_extr+0x9f8>
 8003dee:	78bb      	ldrb	r3, [r7, #2]
 8003df0:	4a05      	ldr	r2, [pc, #20]	; (8003e08 <Vital_Msg_extr+0x9f4>)
 8003df2:	2100      	movs	r1, #0
 8003df4:	54d1      	strb	r1, [r2, r3]
 8003df6:	e00d      	b.n	8003e14 <Vital_Msg_extr+0xa00>
 8003df8:	200028f4 	.word	0x200028f4
 8003dfc:	08027ad0 	.word	0x08027ad0
 8003e00:	20000505 	.word	0x20000505
 8003e04:	200028b8 	.word	0x200028b8
 8003e08:	20002764 	.word	0x20002764
 8003e0c:	78bb      	ldrb	r3, [r7, #2]
 8003e0e:	4a91      	ldr	r2, [pc, #580]	; (8004054 <Vital_Msg_extr+0xc40>)
 8003e10:	2101      	movs	r1, #1
 8003e12:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8003e14:	78bb      	ldrb	r3, [r7, #2]
 8003e16:	4a90      	ldr	r2, [pc, #576]	; (8004058 <Vital_Msg_extr+0xc44>)
 8003e18:	011b      	lsls	r3, r3, #4
 8003e1a:	4413      	add	r3, r2
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	881b      	ldrh	r3, [r3, #0]
 8003e20:	f003 0308 	and.w	r3, r3, #8
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <Vital_Msg_extr+0xa1a>
	{
		LinkEstablishFlag = SET;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003e2e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	441a      	add	r2, r3
 8003e36:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e3a:	2108      	movs	r1, #8
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7fc fbe9 	bl	8000614 <ExtractBits>
 8003e42:	4603      	mov	r3, r0
 8003e44:	78ba      	ldrb	r2, [r7, #2]
 8003e46:	b2d8      	uxtb	r0, r3
 8003e48:	4984      	ldr	r1, [pc, #528]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	440b      	add	r3, r1
 8003e54:	3303      	adds	r3, #3
 8003e56:	4602      	mov	r2, r0
 8003e58:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003e5a:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003e5e:	3308      	adds	r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	da00      	bge.n	8003e66 <Vital_Msg_extr+0xa52>
 8003e64:	3307      	adds	r3, #7
 8003e66:	10db      	asrs	r3, r3, #3
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003e6e:	4413      	add	r3, r2
 8003e70:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003e74:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003e78:	3308      	adds	r3, #8
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	b21b      	sxth	r3, r3
 8003e7e:	425a      	negs	r2, r3
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	f002 0207 	and.w	r2, r2, #7
 8003e88:	bf58      	it	pl
 8003e8a:	4253      	negpl	r3, r2
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 8003e92:	78ba      	ldrb	r2, [r7, #2]
 8003e94:	4971      	ldr	r1, [pc, #452]	; (800405c <Vital_Msg_extr+0xc48>)
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	440b      	add	r3, r1
 8003ea0:	3303      	adds	r3, #3
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	486e      	ldr	r0, [pc, #440]	; (8004060 <Vital_Msg_extr+0xc4c>)
 8003ea8:	f022 f88a 	bl	8025fc0 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003eac:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	441a      	add	r2, r3
 8003eb4:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003eb8:	2108      	movs	r1, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fbaa 	bl	8000614 <ExtractBits>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	78ba      	ldrb	r2, [r7, #2]
 8003ec4:	b2d8      	uxtb	r0, r3
 8003ec6:	4965      	ldr	r1, [pc, #404]	; (800405c <Vital_Msg_extr+0xc48>)
 8003ec8:	4613      	mov	r3, r2
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	4413      	add	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003ed8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003edc:	3308      	adds	r3, #8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	da00      	bge.n	8003ee4 <Vital_Msg_extr+0xad0>
 8003ee2:	3307      	adds	r3, #7
 8003ee4:	10db      	asrs	r3, r3, #3
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003eec:	4413      	add	r3, r2
 8003eee:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003ef2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003ef6:	3308      	adds	r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b21b      	sxth	r3, r3
 8003efc:	425a      	negs	r2, r3
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	f002 0207 	and.w	r2, r2, #7
 8003f06:	bf58      	it	pl
 8003f08:	4253      	negpl	r3, r2
 8003f0a:	b21b      	sxth	r3, r3
 8003f0c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 8003f10:	78ba      	ldrb	r2, [r7, #2]
 8003f12:	4952      	ldr	r1, [pc, #328]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	4413      	add	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	440b      	add	r3, r1
 8003f1e:	3303      	adds	r3, #3
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (noofIP != 0)
 8003f2a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00e      	beq.n	8003f50 <Vital_Msg_extr+0xb3c>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 8003f32:	78ba      	ldrb	r2, [r7, #2]
 8003f34:	4949      	ldr	r1, [pc, #292]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	440b      	add	r3, r1
 8003f40:	3303      	adds	r3, #3
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	08db      	lsrs	r3, r3, #3
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	3301      	adds	r3, #1
 8003f4a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8003f4e:	e00b      	b.n	8003f68 <Vital_Msg_extr+0xb54>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 8003f50:	78ba      	ldrb	r2, [r7, #2]
 8003f52:	4942      	ldr	r1, [pc, #264]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4413      	add	r3, r2
 8003f5a:	011b      	lsls	r3, r3, #4
 8003f5c:	440b      	add	r3, r1
 8003f5e:	3303      	adds	r3, #3
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	08db      	lsrs	r3, r3, #3
 8003f64:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003f68:	2300      	movs	r3, #0
 8003f6a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8003f6e:	e04c      	b.n	800400a <Vital_Msg_extr+0xbf6>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003f70:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	441a      	add	r2, r3
 8003f78:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003f7c:	2108      	movs	r1, #8
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fc fb48 	bl	8000614 <ExtractBits>
 8003f84:	4603      	mov	r3, r0
 8003f86:	78ba      	ldrb	r2, [r7, #2]
 8003f88:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003f8c:	b2dc      	uxtb	r4, r3
 8003f8e:	4833      	ldr	r0, [pc, #204]	; (800405c <Vital_Msg_extr+0xc48>)
 8003f90:	4613      	mov	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4413      	add	r3, r2
 8003f96:	011b      	lsls	r3, r3, #4
 8003f98:	4403      	add	r3, r0
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3305      	adds	r3, #5
 8003f9e:	4622      	mov	r2, r4
 8003fa0:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 8003fa2:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8003fa6:	78ba      	ldrb	r2, [r7, #2]
 8003fa8:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 8003fac:	4c2b      	ldr	r4, [pc, #172]	; (800405c <Vital_Msg_extr+0xc48>)
 8003fae:	4613      	mov	r3, r2
 8003fb0:	005b      	lsls	r3, r3, #1
 8003fb2:	4413      	add	r3, r2
 8003fb4:	011b      	lsls	r3, r3, #4
 8003fb6:	4423      	add	r3, r4
 8003fb8:	440b      	add	r3, r1
 8003fba:	3305      	adds	r3, #5
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	4601      	mov	r1, r0
 8003fc2:	4828      	ldr	r0, [pc, #160]	; (8004064 <Vital_Msg_extr+0xc50>)
 8003fc4:	f021 fffc 	bl	8025fc0 <iprintf>
		BITSTUFFINC(8);
 8003fc8:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 8003fcc:	3308      	adds	r3, #8
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	da00      	bge.n	8003fd4 <Vital_Msg_extr+0xbc0>
 8003fd2:	3307      	adds	r3, #7
 8003fd4:	10db      	asrs	r3, r3, #3
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8003fdc:	4413      	add	r3, r2
 8003fde:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 8003fe2:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	b29b      	uxth	r3, r3
 8003fea:	b21b      	sxth	r3, r3
 8003fec:	425a      	negs	r2, r3
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	f002 0207 	and.w	r2, r2, #7
 8003ff6:	bf58      	it	pl
 8003ff8:	4253      	negpl	r3, r2
 8003ffa:	b21b      	sxth	r3, r3
 8003ffc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004000:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8004004:	3301      	adds	r3, #1
 8004006:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 800400a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800400e:	b29b      	uxth	r3, r3
 8004010:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 8004014:	429a      	cmp	r2, r3
 8004016:	d3ab      	bcc.n	8003f70 <Vital_Msg_extr+0xb5c>
	}
	printf("\n");
 8004018:	200a      	movs	r0, #10
 800401a:	f021 ffe9 	bl	8025ff0 <putchar>
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800401e:	78bb      	ldrb	r3, [r7, #2]
 8004020:	4a11      	ldr	r2, [pc, #68]	; (8004068 <Vital_Msg_extr+0xc54>)
 8004022:	4413      	add	r3, r2
 8004024:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004028:	2b02      	cmp	r3, #2
 800402a:	d10e      	bne.n	800404a <Vital_Msg_extr+0xc36>
	{
		printf("Online Bit Status:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800402c:	78ba      	ldrb	r2, [r7, #2]
 800402e:	490b      	ldr	r1, [pc, #44]	; (800405c <Vital_Msg_extr+0xc48>)
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	440b      	add	r3, r1
 800403a:	3305      	adds	r3, #5
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	4619      	mov	r1, r3
 8004044:	4809      	ldr	r0, [pc, #36]	; (800406c <Vital_Msg_extr+0xc58>)
 8004046:	f021 ffbb 	bl	8025fc0 <iprintf>
	}

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 800404a:	2300      	movs	r3, #0
 800404c:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 8004050:	e048      	b.n	80040e4 <Vital_Msg_extr+0xcd0>
 8004052:	bf00      	nop
 8004054:	20002764 	.word	0x20002764
 8004058:	200028f4 	.word	0x200028f4
 800405c:	20002ad4 	.word	0x20002ad4
 8004060:	0802817c 	.word	0x0802817c
 8004064:	08028184 	.word	0x08028184
 8004068:	20000504 	.word	0x20000504
 800406c:	08028194 	.word	0x08028194
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004070:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	441a      	add	r2, r3
 8004078:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 800407c:	2108      	movs	r1, #8
 800407e:	4618      	mov	r0, r3
 8004080:	f7fc fac8 	bl	8000614 <ExtractBits>
 8004084:	4603      	mov	r3, r0
 8004086:	78ba      	ldrb	r2, [r7, #2]
 8004088:	f8b7 10a6 	ldrh.w	r1, [r7, #166]	; 0xa6
 800408c:	b2dc      	uxtb	r4, r3
 800408e:	486b      	ldr	r0, [pc, #428]	; (800423c <Vital_Msg_extr+0xe28>)
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	011b      	lsls	r3, r3, #4
 8004098:	4403      	add	r3, r0
 800409a:	440b      	add	r3, r1
 800409c:	3315      	adds	r3, #21
 800409e:	4622      	mov	r2, r4
 80040a0:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80040a2:	f9b7 3098 	ldrsh.w	r3, [r7, #152]	; 0x98
 80040a6:	3308      	adds	r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da00      	bge.n	80040ae <Vital_Msg_extr+0xc9a>
 80040ac:	3307      	adds	r3, #7
 80040ae:	10db      	asrs	r3, r3, #3
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80040b6:	4413      	add	r3, r2
 80040b8:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
 80040bc:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 80040c0:	3308      	adds	r3, #8
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	b21b      	sxth	r3, r3
 80040c6:	425a      	negs	r2, r3
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	f002 0207 	and.w	r2, r2, #7
 80040d0:	bf58      	it	pl
 80040d2:	4253      	negpl	r3, r2
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80040da:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80040de:	3301      	adds	r3, #1
 80040e0:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
 80040e4:	78ba      	ldrb	r2, [r7, #2]
 80040e6:	4955      	ldr	r1, [pc, #340]	; (800423c <Vital_Msg_extr+0xe28>)
 80040e8:	4613      	mov	r3, r2
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	4413      	add	r3, r2
 80040ee:	011b      	lsls	r3, r3, #4
 80040f0:	440b      	add	r3, r1
 80040f2:	3304      	adds	r3, #4
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f8b7 20a6 	ldrh.w	r2, [r7, #166]	; 0xa6
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3b7      	bcc.n	8004070 <Vital_Msg_extr+0xc5c>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8004100:	787a      	ldrb	r2, [r7, #1]
 8004102:	78bb      	ldrb	r3, [r7, #2]
 8004104:	4611      	mov	r1, r2
 8004106:	4618      	mov	r0, r3
 8004108:	f003 fc0e 	bl	8007928 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 800410c:	78bb      	ldrb	r3, [r7, #2]
 800410e:	4a4c      	ldr	r2, [pc, #304]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004110:	2101      	movs	r1, #1
 8004112:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 8004114:	78bb      	ldrb	r3, [r7, #2]
 8004116:	4a4a      	ldr	r2, [pc, #296]	; (8004240 <Vital_Msg_extr+0xe2c>)
 8004118:	3302      	adds	r3, #2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004122:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 8004124:	78ba      	ldrb	r2, [r7, #2]
 8004126:	4947      	ldr	r1, [pc, #284]	; (8004244 <Vital_Msg_extr+0xe30>)
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	440b      	add	r3, r1
 8004132:	3304      	adds	r3, #4
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d116      	bne.n	8004168 <Vital_Msg_extr+0xd54>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 800413a:	2246      	movs	r2, #70	; 0x46
 800413c:	2100      	movs	r1, #0
 800413e:	4842      	ldr	r0, [pc, #264]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004140:	f021 fe56 	bl	8025df0 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 8004144:	78bb      	ldrb	r3, [r7, #2]
 8004146:	b29a      	uxth	r2, r3
 8004148:	4b3f      	ldr	r3, [pc, #252]	; (8004248 <Vital_Msg_extr+0xe34>)
 800414a:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 800414c:	78fb      	ldrb	r3, [r7, #3]
 800414e:	b29a      	uxth	r2, r3
 8004150:	4b3d      	ldr	r3, [pc, #244]	; (8004248 <Vital_Msg_extr+0xe34>)
 8004152:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 8004154:	78fb      	ldrb	r3, [r7, #3]
 8004156:	461a      	mov	r2, r3
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	483c      	ldr	r0, [pc, #240]	; (800424c <Vital_Msg_extr+0xe38>)
 800415c:	f021 fe20 	bl	8025da0 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 8004160:	f240 2003 	movw	r0, #515	; 0x203
 8004164:	f00c fefc 	bl	8010f60 <TransmitCanPkt>

	/* To check Whether the Data received is from Active system or Not By checking the 1st bit Vital Data
	 * This checking is Only required for Serial Interface
	 */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET))
 8004168:	78bb      	ldrb	r3, [r7, #2]
 800416a:	4a39      	ldr	r2, [pc, #228]	; (8004250 <Vital_Msg_extr+0xe3c>)
 800416c:	4413      	add	r3, r2
 800416e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004172:	2b02      	cmp	r3, #2
 8004174:	d128      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
 8004176:	78ba      	ldrb	r2, [r7, #2]
 8004178:	4930      	ldr	r1, [pc, #192]	; (800423c <Vital_Msg_extr+0xe28>)
 800417a:	4613      	mov	r3, r2
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	4413      	add	r3, r2
 8004180:	011b      	lsls	r3, r3, #4
 8004182:	440b      	add	r3, r1
 8004184:	3305      	adds	r3, #5
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11b      	bne.n	80041c8 <Vital_Msg_extr+0xdb4>
	{
		printf("Online Bit Drop\n");
 8004190:	4830      	ldr	r0, [pc, #192]	; (8004254 <Vital_Msg_extr+0xe40>)
 8004192:	f021 ffb1 	bl	80260f8 <puts>
		LinkEstablishFlag = RESET;
 8004196:	2300      	movs	r3, #0
 8004198:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		Act_InactiveFlag[Source_Index] = SET;
 800419c:	78bb      	ldrb	r3, [r7, #2]
 800419e:	4a2e      	ldr	r2, [pc, #184]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041a0:	2101      	movs	r1, #1
 80041a2:	54d1      	strb	r1, [r2, r3]
		LastActCount[Source_Index] = RESET;
 80041a4:	78bb      	ldrb	r3, [r7, #2]
 80041a6:	4a2d      	ldr	r2, [pc, #180]	; (800425c <Vital_Msg_extr+0xe48>)
 80041a8:	2100      	movs	r1, #0
 80041aa:	54d1      	strb	r1, [r2, r3]
		memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 80041ac:	78ba      	ldrb	r2, [r7, #2]
 80041ae:	4613      	mov	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	4413      	add	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4a21      	ldr	r2, [pc, #132]	; (800423c <Vital_Msg_extr+0xe28>)
 80041b8:	4413      	add	r3, r2
 80041ba:	3305      	adds	r3, #5
 80041bc:	2210      	movs	r2, #16
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f021 fe15 	bl	8025df0 <memset>
 80041c6:	e05d      	b.n	8004284 <Vital_Msg_extr+0xe70>
	}
	else if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == SET) && (LinkEstablishFlag == SET))
 80041c8:	78bb      	ldrb	r3, [r7, #2]
 80041ca:	4a21      	ldr	r2, [pc, #132]	; (8004250 <Vital_Msg_extr+0xe3c>)
 80041cc:	4413      	add	r3, r2
 80041ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d156      	bne.n	8004284 <Vital_Msg_extr+0xe70>
 80041d6:	78ba      	ldrb	r2, [r7, #2]
 80041d8:	4918      	ldr	r1, [pc, #96]	; (800423c <Vital_Msg_extr+0xe28>)
 80041da:	4613      	mov	r3, r2
 80041dc:	005b      	lsls	r3, r3, #1
 80041de:	4413      	add	r3, r2
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	440b      	add	r3, r1
 80041e4:	3305      	adds	r3, #5
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f003 0301 	and.w	r3, r3, #1
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d049      	beq.n	8004284 <Vital_Msg_extr+0xe70>
 80041f0:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d145      	bne.n	8004284 <Vital_Msg_extr+0xe70>
	{
		if(Act_InactiveFlag[Source_Index] == SET)
 80041f8:	78bb      	ldrb	r3, [r7, #2]
 80041fa:	4a17      	ldr	r2, [pc, #92]	; (8004258 <Vital_Msg_extr+0xe44>)
 80041fc:	5cd3      	ldrb	r3, [r2, r3]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d140      	bne.n	8004284 <Vital_Msg_extr+0xe70>
		{
			++LastActCount[Source_Index];
 8004202:	78bb      	ldrb	r3, [r7, #2]
 8004204:	4a15      	ldr	r2, [pc, #84]	; (800425c <Vital_Msg_extr+0xe48>)
 8004206:	5cd2      	ldrb	r2, [r2, r3]
 8004208:	3201      	adds	r2, #1
 800420a:	b2d1      	uxtb	r1, r2
 800420c:	4a13      	ldr	r2, [pc, #76]	; (800425c <Vital_Msg_extr+0xe48>)
 800420e:	54d1      	strb	r1, [r2, r3]
			printf("Updated Count:%u\n",LastActCount[Source_Index]);
 8004210:	78bb      	ldrb	r3, [r7, #2]
 8004212:	4a12      	ldr	r2, [pc, #72]	; (800425c <Vital_Msg_extr+0xe48>)
 8004214:	5cd3      	ldrb	r3, [r2, r3]
 8004216:	4619      	mov	r1, r3
 8004218:	4811      	ldr	r0, [pc, #68]	; (8004260 <Vital_Msg_extr+0xe4c>)
 800421a:	f021 fed1 	bl	8025fc0 <iprintf>
			if(LastActCount[Source_Index] >= MAX_LAST_ACT_COUNT)
 800421e:	78bb      	ldrb	r3, [r7, #2]
 8004220:	4a0e      	ldr	r2, [pc, #56]	; (800425c <Vital_Msg_extr+0xe48>)
 8004222:	5cd3      	ldrb	r3, [r2, r3]
 8004224:	2b03      	cmp	r3, #3
 8004226:	d91d      	bls.n	8004264 <Vital_Msg_extr+0xe50>
			{
				Act_InactiveFlag[Source_Index] = RESET;
 8004228:	78bb      	ldrb	r3, [r7, #2]
 800422a:	4a0b      	ldr	r2, [pc, #44]	; (8004258 <Vital_Msg_extr+0xe44>)
 800422c:	2100      	movs	r1, #0
 800422e:	54d1      	strb	r1, [r2, r3]
				LastActCount[Source_Index] = MAX_LAST_ACT_COUNT; /* To avoid Overflow of Variable */
 8004230:	78bb      	ldrb	r3, [r7, #2]
 8004232:	4a0a      	ldr	r2, [pc, #40]	; (800425c <Vital_Msg_extr+0xe48>)
 8004234:	2104      	movs	r1, #4
 8004236:	54d1      	strb	r1, [r2, r3]
 8004238:	e024      	b.n	8004284 <Vital_Msg_extr+0xe70>
 800423a:	bf00      	nop
 800423c:	20002ad4 	.word	0x20002ad4
 8004240:	200033ac 	.word	0x200033ac
 8004244:	20002da4 	.word	0x20002da4
 8004248:	20002fb4 	.word	0x20002fb4
 800424c:	20002fba 	.word	0x20002fba
 8004250:	20000504 	.word	0x20000504
 8004254:	080281ac 	.word	0x080281ac
 8004258:	20002538 	.word	0x20002538
 800425c:	20002544 	.word	0x20002544
 8004260:	080281bc 	.word	0x080281bc
			}
			else
			{
				LinkEstablishFlag = RESET;
 8004264:	2300      	movs	r3, #0
 8004266:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
				memset(&Hitachi_Vital_st[Source_Index].Outputs,0,sizeof(Hitachi_Vital_st[Source_Index].Outputs));
 800426a:	78ba      	ldrb	r2, [r7, #2]
 800426c:	4613      	mov	r3, r2
 800426e:	005b      	lsls	r3, r3, #1
 8004270:	4413      	add	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	4ab1      	ldr	r2, [pc, #708]	; (800453c <Vital_Msg_extr+0x1128>)
 8004276:	4413      	add	r3, r2
 8004278:	3305      	adds	r3, #5
 800427a:	2210      	movs	r2, #16
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f021 fdb6 	bl	8025df0 <memset>
		}
	}


	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 8004284:	78ba      	ldrb	r2, [r7, #2]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4aac      	ldr	r2, [pc, #688]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004290:	4413      	add	r3, r2
 8004292:	3301      	adds	r3, #1
 8004294:	2210      	movs	r2, #16
 8004296:	2100      	movs	r1, #0
 8004298:	4618      	mov	r0, r3
 800429a:	f021 fda9 	bl	8025df0 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 800429e:	78ba      	ldrb	r2, [r7, #2]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	009b      	lsls	r3, r3, #2
 80042a8:	4aa5      	ldr	r2, [pc, #660]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042aa:	4413      	add	r3, r2
 80042ac:	1c58      	adds	r0, r3, #1
 80042ae:	78ba      	ldrb	r2, [r7, #2]
 80042b0:	4613      	mov	r3, r2
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	4aa0      	ldr	r2, [pc, #640]	; (800453c <Vital_Msg_extr+0x1128>)
 80042ba:	4413      	add	r3, r2
 80042bc:	3305      	adds	r3, #5
 80042be:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042c2:	4619      	mov	r1, r3
 80042c4:	f021 fd6c 	bl	8025da0 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 80042c8:	78ba      	ldrb	r2, [r7, #2]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a9b      	ldr	r2, [pc, #620]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042d4:	4413      	add	r3, r2
 80042d6:	3301      	adds	r3, #1
 80042d8:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 80042dc:	b212      	sxth	r2, r2
 80042de:	78bc      	ldrb	r4, [r7, #2]
 80042e0:	4619      	mov	r1, r3
 80042e2:	2000      	movs	r0, #0
 80042e4:	f011 f910 	bl	8015508 <GetCRC16>
 80042e8:	4603      	mov	r3, r0
 80042ea:	4619      	mov	r1, r3
 80042ec:	4a94      	ldr	r2, [pc, #592]	; (8004540 <Vital_Msg_extr+0x112c>)
 80042ee:	4623      	mov	r3, r4
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	4423      	add	r3, r4
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	3312      	adds	r3, #18
 80042fa:	460a      	mov	r2, r1
 80042fc:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 80042fe:	78ba      	ldrb	r2, [r7, #2]
 8004300:	498f      	ldr	r1, [pc, #572]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004302:	4613      	mov	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	4413      	add	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	3311      	adds	r3, #17
 800430e:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8004312:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8004314:	78ba      	ldrb	r2, [r7, #2]
 8004316:	498a      	ldr	r1, [pc, #552]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004318:	4613      	mov	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	78ba      	ldrb	r2, [r7, #2]
 8004324:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8004326:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 800432a:	2b01      	cmp	r3, #1
 800432c:	d176      	bne.n	800441c <Vital_Msg_extr+0x1008>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800432e:	78ba      	ldrb	r2, [r7, #2]
 8004330:	4613      	mov	r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	4413      	add	r3, r2
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4a82      	ldr	r2, [pc, #520]	; (8004544 <Vital_Msg_extr+0x1130>)
 800433a:	4413      	add	r3, r2
 800433c:	3301      	adds	r3, #1
 800433e:	2210      	movs	r2, #16
 8004340:	2100      	movs	r1, #0
 8004342:	4618      	mov	r0, r3
 8004344:	f021 fd54 	bl	8025df0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8004348:	78ba      	ldrb	r2, [r7, #2]
 800434a:	4613      	mov	r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4413      	add	r3, r2
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4a7c      	ldr	r2, [pc, #496]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004354:	1898      	adds	r0, r3, r2
 8004356:	78ba      	ldrb	r2, [r7, #2]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4a77      	ldr	r2, [pc, #476]	; (8004540 <Vital_Msg_extr+0x112c>)
 8004362:	4413      	add	r3, r2
 8004364:	2214      	movs	r2, #20
 8004366:	4619      	mov	r1, r3
 8004368:	f021 fd1a 	bl	8025da0 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 800436c:	78bb      	ldrb	r3, [r7, #2]
 800436e:	4976      	ldr	r1, [pc, #472]	; (8004548 <Vital_Msg_extr+0x1134>)
 8004370:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8004378:	78bb      	ldrb	r3, [r7, #2]
 800437a:	4a74      	ldr	r2, [pc, #464]	; (800454c <Vital_Msg_extr+0x1138>)
 800437c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004380:	78ba      	ldrb	r2, [r7, #2]
 8004382:	4870      	ldr	r0, [pc, #448]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4403      	add	r3, r0
 800438e:	3312      	adds	r3, #18
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	4299      	cmp	r1, r3
 8004394:	d042      	beq.n	800441c <Vital_Msg_extr+0x1008>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8004396:	78ba      	ldrb	r2, [r7, #2]
 8004398:	78b9      	ldrb	r1, [r7, #2]
 800439a:	486a      	ldr	r0, [pc, #424]	; (8004544 <Vital_Msg_extr+0x1130>)
 800439c:	4613      	mov	r3, r2
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4403      	add	r3, r0
 80043a6:	3312      	adds	r3, #18
 80043a8:	881a      	ldrh	r2, [r3, #0]
 80043aa:	4b68      	ldr	r3, [pc, #416]	; (800454c <Vital_Msg_extr+0x1138>)
 80043ac:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80043b0:	2214      	movs	r2, #20
 80043b2:	2100      	movs	r1, #0
 80043b4:	4866      	ldr	r0, [pc, #408]	; (8004550 <Vital_Msg_extr+0x113c>)
 80043b6:	f021 fd1b 	bl	8025df0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80043ba:	78ba      	ldrb	r2, [r7, #2]
 80043bc:	4613      	mov	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4413      	add	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4a5f      	ldr	r2, [pc, #380]	; (8004544 <Vital_Msg_extr+0x1130>)
 80043c6:	4413      	add	r3, r2
 80043c8:	2214      	movs	r2, #20
 80043ca:	4619      	mov	r1, r3
 80043cc:	4860      	ldr	r0, [pc, #384]	; (8004550 <Vital_Msg_extr+0x113c>)
 80043ce:	f021 fce7 	bl	8025da0 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 80043d2:	f240 2007 	movw	r0, #519	; 0x207
 80043d6:	f00c fdc3 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	4a5d      	ldr	r2, [pc, #372]	; (8004554 <Vital_Msg_extr+0x1140>)
 80043de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11a      	bne.n	800441c <Vital_Msg_extr+0x1008>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80043e6:	78bb      	ldrb	r3, [r7, #2]
 80043e8:	011b      	lsls	r3, r3, #4
 80043ea:	4a5b      	ldr	r2, [pc, #364]	; (8004558 <Vital_Msg_extr+0x1144>)
 80043ec:	4413      	add	r3, r2
 80043ee:	1c98      	adds	r0, r3, #2
 80043f0:	78ba      	ldrb	r2, [r7, #2]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a52      	ldr	r2, [pc, #328]	; (8004544 <Vital_Msg_extr+0x1130>)
 80043fc:	4413      	add	r3, r2
 80043fe:	3301      	adds	r3, #1
 8004400:	2210      	movs	r2, #16
 8004402:	4619      	mov	r1, r3
 8004404:	f021 fccc 	bl	8025da0 <memcpy>
#ifdef EI_1

#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif
				ReArrangedVitalData();
 8004408:	f006 f97c 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800440c:	f240 1019 	movw	r0, #281	; 0x119
 8004410:	f00c fda6 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8004414:	4a51      	ldr	r2, [pc, #324]	; (800455c <Vital_Msg_extr+0x1148>)
 8004416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800441a:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800441c:	78b9      	ldrb	r1, [r7, #2]
 800441e:	78ba      	ldrb	r2, [r7, #2]
 8004420:	4848      	ldr	r0, [pc, #288]	; (8004544 <Vital_Msg_extr+0x1130>)
 8004422:	460b      	mov	r3, r1
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	440b      	add	r3, r1
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	4403      	add	r3, r0
 800442c:	3312      	adds	r3, #18
 800442e:	8818      	ldrh	r0, [r3, #0]
 8004430:	494b      	ldr	r1, [pc, #300]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004432:	4613      	mov	r3, r2
 8004434:	005b      	lsls	r3, r3, #1
 8004436:	4413      	add	r3, r2
 8004438:	00db      	lsls	r3, r3, #3
 800443a:	440b      	add	r3, r1
 800443c:	3306      	adds	r3, #6
 800443e:	4602      	mov	r2, r0
 8004440:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8004442:	78ba      	ldrb	r2, [r7, #2]
 8004444:	4946      	ldr	r1, [pc, #280]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004446:	4613      	mov	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	4413      	add	r3, r2
 800444c:	00db      	lsls	r3, r3, #3
 800444e:	440b      	add	r3, r1
 8004450:	3314      	adds	r3, #20
 8004452:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8004456:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8004458:	78ba      	ldrb	r2, [r7, #2]
 800445a:	4941      	ldr	r1, [pc, #260]	; (8004560 <Vital_Msg_extr+0x114c>)
 800445c:	4613      	mov	r3, r2
 800445e:	005b      	lsls	r3, r3, #1
 8004460:	4413      	add	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	440b      	add	r3, r1
 8004466:	3305      	adds	r3, #5
 8004468:	2202      	movs	r2, #2
 800446a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800446c:	78ba      	ldrb	r2, [r7, #2]
 800446e:	493c      	ldr	r1, [pc, #240]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004470:	4613      	mov	r3, r2
 8004472:	005b      	lsls	r3, r3, #1
 8004474:	4413      	add	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	440b      	add	r3, r1
 800447a:	78ba      	ldrb	r2, [r7, #2]
 800447c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800447e:	78ba      	ldrb	r2, [r7, #2]
 8004480:	4937      	ldr	r1, [pc, #220]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004482:	4613      	mov	r3, r2
 8004484:	005b      	lsls	r3, r3, #1
 8004486:	4413      	add	r3, r2
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	440b      	add	r3, r1
 800448c:	3301      	adds	r3, #1
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8004492:	78ba      	ldrb	r2, [r7, #2]
 8004494:	4932      	ldr	r1, [pc, #200]	; (8004560 <Vital_Msg_extr+0x114c>)
 8004496:	4613      	mov	r3, r2
 8004498:	005b      	lsls	r3, r3, #1
 800449a:	4413      	add	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	440b      	add	r3, r1
 80044a0:	3302      	adds	r3, #2
 80044a2:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 80044a6:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80044a8:	2218      	movs	r2, #24
 80044aa:	2100      	movs	r1, #0
 80044ac:	482d      	ldr	r0, [pc, #180]	; (8004564 <Vital_Msg_extr+0x1150>)
 80044ae:	f021 fc9f 	bl	8025df0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80044b2:	78ba      	ldrb	r2, [r7, #2]
 80044b4:	4613      	mov	r3, r2
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	4413      	add	r3, r2
 80044ba:	00db      	lsls	r3, r3, #3
 80044bc:	4a28      	ldr	r2, [pc, #160]	; (8004560 <Vital_Msg_extr+0x114c>)
 80044be:	4413      	add	r3, r2
 80044c0:	2218      	movs	r2, #24
 80044c2:	4619      	mov	r1, r3
 80044c4:	4827      	ldr	r0, [pc, #156]	; (8004564 <Vital_Msg_extr+0x1150>)
 80044c6:	f021 fc6b 	bl	8025da0 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80044ca:	f240 2001 	movw	r0, #513	; 0x201
 80044ce:	f00c fd47 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80044d2:	78ba      	ldrb	r2, [r7, #2]
 80044d4:	4922      	ldr	r1, [pc, #136]	; (8004560 <Vital_Msg_extr+0x114c>)
 80044d6:	4613      	mov	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	4413      	add	r3, r2
 80044dc:	00db      	lsls	r3, r3, #3
 80044de:	440b      	add	r3, r1
 80044e0:	3301      	adds	r3, #1
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80044e6:	78bb      	ldrb	r3, [r7, #2]
 80044e8:	491f      	ldr	r1, [pc, #124]	; (8004568 <Vital_Msg_extr+0x1154>)
 80044ea:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80044ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 80044f2:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d13e      	bne.n	8004578 <Vital_Msg_extr+0x1164>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 80044fa:	78bb      	ldrb	r3, [r7, #2]
 80044fc:	491b      	ldr	r1, [pc, #108]	; (800456c <Vital_Msg_extr+0x1158>)
 80044fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8004506:	78ba      	ldrb	r2, [r7, #2]
 8004508:	4919      	ldr	r1, [pc, #100]	; (8004570 <Vital_Msg_extr+0x115c>)
 800450a:	4613      	mov	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	4413      	add	r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	440b      	add	r3, r1
 8004514:	3304      	adds	r3, #4
 8004516:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800451a:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800451c:	78ba      	ldrb	r2, [r7, #2]
 800451e:	4914      	ldr	r1, [pc, #80]	; (8004570 <Vital_Msg_extr+0x115c>)
 8004520:	4613      	mov	r3, r2
 8004522:	005b      	lsls	r3, r3, #1
 8004524:	4413      	add	r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	3301      	adds	r3, #1
 800452c:	2201      	movs	r2, #1
 800452e:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8004530:	78bb      	ldrb	r3, [r7, #2]
 8004532:	4a10      	ldr	r2, [pc, #64]	; (8004574 <Vital_Msg_extr+0x1160>)
 8004534:	2101      	movs	r1, #1
 8004536:	54d1      	strb	r1, [r2, r3]
 8004538:	e04e      	b.n	80045d8 <Vital_Msg_extr+0x11c4>
 800453a:	bf00      	nop
 800453c:	20002ad4 	.word	0x20002ad4
 8004540:	200034d0 	.word	0x200034d0
 8004544:	20003598 	.word	0x20003598
 8004548:	20002564 	.word	0x20002564
 800454c:	2000258c 	.word	0x2000258c
 8004550:	20003728 	.word	0x20003728
 8004554:	20002550 	.word	0x20002550
 8004558:	20002770 	.word	0x20002770
 800455c:	200024e4 	.word	0x200024e4
 8004560:	20002da4 	.word	0x20002da4
 8004564:	20002f84 	.word	0x20002f84
 8004568:	200024b8 	.word	0x200024b8
 800456c:	200025a0 	.word	0x200025a0
 8004570:	200033e0 	.word	0x200033e0
 8004574:	200025f0 	.word	0x200025f0
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8004578:	78bb      	ldrb	r3, [r7, #2]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <Vital_Msg_extr+0x11d4>)
 800457c:	2100      	movs	r1, #0
 800457e:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8004580:	78ba      	ldrb	r2, [r7, #2]
 8004582:	491a      	ldr	r1, [pc, #104]	; (80045ec <Vital_Msg_extr+0x11d8>)
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3308      	adds	r3, #8
 8004590:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8004594:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8004596:	78ba      	ldrb	r2, [r7, #2]
 8004598:	4914      	ldr	r1, [pc, #80]	; (80045ec <Vital_Msg_extr+0x11d8>)
 800459a:	4613      	mov	r3, r2
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3301      	adds	r3, #1
 80045a6:	2200      	movs	r2, #0
 80045a8:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80045aa:	78ba      	ldrb	r2, [r7, #2]
 80045ac:	4613      	mov	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4413      	add	r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4a0e      	ldr	r2, [pc, #56]	; (80045f0 <Vital_Msg_extr+0x11dc>)
 80045b6:	4413      	add	r3, r2
 80045b8:	3301      	adds	r3, #1
 80045ba:	2210      	movs	r2, #16
 80045bc:	2100      	movs	r1, #0
 80045be:	4618      	mov	r0, r3
 80045c0:	f021 fc16 	bl	8025df0 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80045c4:	78ba      	ldrb	r2, [r7, #2]
 80045c6:	490a      	ldr	r1, [pc, #40]	; (80045f0 <Vital_Msg_extr+0x11dc>)
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3312      	adds	r3, #18
 80045d4:	2200      	movs	r2, #0
 80045d6:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80045d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80045dc:	4805      	ldr	r0, [pc, #20]	; (80045f4 <Vital_Msg_extr+0x11e0>)
 80045de:	f017 f9ce 	bl	801b97e <HAL_GPIO_TogglePin>

}
 80045e2:	37ac      	adds	r7, #172	; 0xac
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd90      	pop	{r4, r7, pc}
 80045e8:	200025f0 	.word	0x200025f0
 80045ec:	200033e0 	.word	0x200033e0
 80045f0:	20003598 	.word	0x20003598
 80045f4:	40021c00 	.word	0x40021c00

080045f8 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 80045f8:	b590      	push	{r4, r7, lr}
 80045fa:	b0a5      	sub	sp, #148	; 0x94
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	460a      	mov	r2, r1
 8004602:	71fb      	strb	r3, [r7, #7]
 8004604:	4613      	mov	r3, r2
 8004606:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8004608:	2300      	movs	r3, #0
 800460a:	64bb      	str	r3, [r7, #72]	; 0x48
 800460c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004610:	2238      	movs	r2, #56	; 0x38
 8004612:	2100      	movs	r1, #0
 8004614:	4618      	mov	r0, r3
 8004616:	f021 fbeb 	bl	8025df0 <memset>
	uint8_t Temp_Buff[60] = {0,};
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
 800461e:	f107 0310 	add.w	r3, r7, #16
 8004622:	2238      	movs	r2, #56	; 0x38
 8004624:	2100      	movs	r1, #0
 8004626:	4618      	mov	r0, r3
 8004628:	f021 fbe2 	bl	8025df0 <memset>
	uint8_t uc_index = 0;
 800462c:	2300      	movs	r3, #0
 800462e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8004632:	2300      	movs	r3, #0
 8004634:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004638:	2300      	movs	r3, #0
 800463a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 800463e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004642:	223c      	movs	r2, #60	; 0x3c
 8004644:	2100      	movs	r1, #0
 8004646:	4618      	mov	r0, r3
 8004648:	f021 fbd2 	bl	8025df0 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 800464c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004650:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004654:	441a      	add	r2, r3
 8004656:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800465a:	23f4      	movs	r3, #244	; 0xf4
 800465c:	2108      	movs	r1, #8
 800465e:	f7fc f865 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004662:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004666:	3308      	adds	r3, #8
 8004668:	2b00      	cmp	r3, #0
 800466a:	da00      	bge.n	800466e <Send_Vital_Data_Message+0x76>
 800466c:	3307      	adds	r3, #7
 800466e:	10db      	asrs	r3, r3, #3
 8004670:	b29a      	uxth	r2, r3
 8004672:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004676:	4413      	add	r3, r2
 8004678:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800467c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004680:	3308      	adds	r3, #8
 8004682:	b29b      	uxth	r3, r3
 8004684:	b21b      	sxth	r3, r3
 8004686:	425a      	negs	r2, r3
 8004688:	f003 0307 	and.w	r3, r3, #7
 800468c:	f002 0207 	and.w	r2, r2, #7
 8004690:	bf58      	it	pl
 8004692:	4253      	negpl	r3, r2
 8004694:	b21b      	sxth	r3, r3
 8004696:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800469a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800469e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046a2:	441a      	add	r2, r3
 80046a4:	79fb      	ldrb	r3, [r7, #7]
 80046a6:	49c6      	ldr	r1, [pc, #792]	; (80049c0 <Send_Vital_Data_Message+0x3c8>)
 80046a8:	3366      	adds	r3, #102	; 0x66
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80046b4:	2110      	movs	r1, #16
 80046b6:	f7fc f839 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80046ba:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80046be:	3310      	adds	r3, #16
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	da00      	bge.n	80046c6 <Send_Vital_Data_Message+0xce>
 80046c4:	3307      	adds	r3, #7
 80046c6:	10db      	asrs	r3, r3, #3
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046ce:	4413      	add	r3, r2
 80046d0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80046d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80046d8:	3310      	adds	r3, #16
 80046da:	b29b      	uxth	r3, r3
 80046dc:	b21b      	sxth	r3, r3
 80046de:	425a      	negs	r2, r3
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	f002 0207 	and.w	r2, r2, #7
 80046e8:	bf58      	it	pl
 80046ea:	4253      	negpl	r3, r2
 80046ec:	b21b      	sxth	r3, r3
 80046ee:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80046f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80046f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046fa:	441a      	add	r2, r3
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	49b0      	ldr	r1, [pc, #704]	; (80049c0 <Send_Vital_Data_Message+0x3c8>)
 8004700:	3370      	adds	r3, #112	; 0x70
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800470c:	2110      	movs	r1, #16
 800470e:	f7fc f80d 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8004712:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004716:	3310      	adds	r3, #16
 8004718:	2b00      	cmp	r3, #0
 800471a:	da00      	bge.n	800471e <Send_Vital_Data_Message+0x126>
 800471c:	3307      	adds	r3, #7
 800471e:	10db      	asrs	r3, r3, #3
 8004720:	b29a      	uxth	r2, r3
 8004722:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004726:	4413      	add	r3, r2
 8004728:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800472c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004730:	3310      	adds	r3, #16
 8004732:	b29b      	uxth	r3, r3
 8004734:	b21b      	sxth	r3, r3
 8004736:	425a      	negs	r2, r3
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	f002 0207 	and.w	r2, r2, #7
 8004740:	bf58      	it	pl
 8004742:	4253      	negpl	r3, r2
 8004744:	b21b      	sxth	r3, r3
 8004746:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800474a:	4b9e      	ldr	r3, [pc, #632]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d035      	beq.n	80047c4 <Send_Vital_Data_Message+0x1cc>
 8004758:	4b9a      	ldr	r3, [pc, #616]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800475a:	791b      	ldrb	r3, [r3, #4]
 800475c:	79fa      	ldrb	r2, [r7, #7]
 800475e:	429a      	cmp	r2, r3
 8004760:	d130      	bne.n	80047c4 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8004768:	4897      	ldr	r0, [pc, #604]	; (80049c8 <Send_Vital_Data_Message+0x3d0>)
 800476a:	f019 f8d1 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800476e:	4602      	mov	r2, r0
 8004770:	4b96      	ldr	r3, [pc, #600]	; (80049cc <Send_Vital_Data_Message+0x3d4>)
 8004772:	fba3 1302 	umull	r1, r3, r3, r2
 8004776:	099b      	lsrs	r3, r3, #6
 8004778:	21c8      	movs	r1, #200	; 0xc8
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8004784:	4892      	ldr	r0, [pc, #584]	; (80049d0 <Send_Vital_Data_Message+0x3d8>)
 8004786:	f021 fcb7 	bl	80260f8 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 800478a:	79fb      	ldrb	r3, [r7, #7]
 800478c:	4a91      	ldr	r2, [pc, #580]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	4413      	add	r3, r2
 8004792:	3301      	adds	r3, #1
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	4619      	mov	r1, r3
 8004798:	488f      	ldr	r0, [pc, #572]	; (80049d8 <Send_Vital_Data_Message+0x3e0>)
 800479a:	f021 fc11 	bl	8025fc0 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 800479e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80047a2:	4619      	mov	r1, r3
 80047a4:	488d      	ldr	r0, [pc, #564]	; (80049dc <Send_Vital_Data_Message+0x3e4>)
 80047a6:	f021 fc0b 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 80047aa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047ae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047b2:	441a      	add	r2, r3
 80047b4:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80047b8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047bc:	2108      	movs	r1, #8
 80047be:	f7fb ffb5 	bl	800072c <InsertBits>
	{
 80047c2:	e00f      	b.n	80047e4 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 80047c4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047c8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80047cc:	441a      	add	r2, r3
 80047ce:	79fb      	ldrb	r3, [r7, #7]
 80047d0:	4980      	ldr	r1, [pc, #512]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	440b      	add	r3, r1
 80047d6:	3301      	adds	r3, #1
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80047de:	2108      	movs	r1, #8
 80047e0:	f7fb ffa4 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 80047e4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80047e8:	3308      	adds	r3, #8
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	da00      	bge.n	80047f0 <Send_Vital_Data_Message+0x1f8>
 80047ee:	3307      	adds	r3, #7
 80047f0:	10db      	asrs	r3, r3, #3
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80047f8:	4413      	add	r3, r2
 80047fa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80047fe:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004802:	3308      	adds	r3, #8
 8004804:	b29b      	uxth	r3, r3
 8004806:	b21b      	sxth	r3, r3
 8004808:	425a      	negs	r2, r3
 800480a:	f003 0307 	and.w	r3, r3, #7
 800480e:	f002 0207 	and.w	r2, r2, #7
 8004812:	bf58      	it	pl
 8004814:	4253      	negpl	r3, r2
 8004816:	b21b      	sxth	r3, r3
 8004818:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800481c:	4b69      	ldr	r3, [pc, #420]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	08db      	lsrs	r3, r3, #3
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d035      	beq.n	8004896 <Send_Vital_Data_Message+0x29e>
 800482a:	4b66      	ldr	r3, [pc, #408]	; (80049c4 <Send_Vital_Data_Message+0x3cc>)
 800482c:	791b      	ldrb	r3, [r3, #4]
 800482e:	79fa      	ldrb	r2, [r7, #7]
 8004830:	429a      	cmp	r2, r3
 8004832:	d130      	bne.n	8004896 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8004834:	2300      	movs	r3, #0
 8004836:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 800483a:	4863      	ldr	r0, [pc, #396]	; (80049c8 <Send_Vital_Data_Message+0x3d0>)
 800483c:	f019 f868 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8004840:	4602      	mov	r2, r0
 8004842:	4b62      	ldr	r3, [pc, #392]	; (80049cc <Send_Vital_Data_Message+0x3d4>)
 8004844:	fba3 1302 	umull	r1, r3, r3, r2
 8004848:	099b      	lsrs	r3, r3, #6
 800484a:	21c8      	movs	r1, #200	; 0xc8
 800484c:	fb01 f303 	mul.w	r3, r1, r3
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8004856:	4862      	ldr	r0, [pc, #392]	; (80049e0 <Send_Vital_Data_Message+0x3e8>)
 8004858:	f021 fc4e 	bl	80260f8 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	4a5d      	ldr	r2, [pc, #372]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	4413      	add	r3, r2
 8004864:	3302      	adds	r3, #2
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	4619      	mov	r1, r3
 800486a:	485e      	ldr	r0, [pc, #376]	; (80049e4 <Send_Vital_Data_Message+0x3ec>)
 800486c:	f021 fba8 	bl	8025fc0 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8004870:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8004874:	4619      	mov	r1, r3
 8004876:	485c      	ldr	r0, [pc, #368]	; (80049e8 <Send_Vital_Data_Message+0x3f0>)
 8004878:	f021 fba2 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800487c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004880:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004884:	441a      	add	r2, r3
 8004886:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800488a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800488e:	2108      	movs	r1, #8
 8004890:	f7fb ff4c 	bl	800072c <InsertBits>
	{
 8004894:	e00f      	b.n	80048b6 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8004896:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800489a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800489e:	441a      	add	r2, r3
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	494c      	ldr	r1, [pc, #304]	; (80049d4 <Send_Vital_Data_Message+0x3dc>)
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	440b      	add	r3, r1
 80048a8:	3302      	adds	r3, #2
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048b0:	2108      	movs	r1, #8
 80048b2:	f7fb ff3b 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 80048b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80048ba:	3308      	adds	r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	da00      	bge.n	80048c2 <Send_Vital_Data_Message+0x2ca>
 80048c0:	3307      	adds	r3, #7
 80048c2:	10db      	asrs	r3, r3, #3
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048ca:	4413      	add	r3, r2
 80048cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80048d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80048d4:	3308      	adds	r3, #8
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	b21b      	sxth	r3, r3
 80048da:	425a      	negs	r2, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	f002 0207 	and.w	r2, r2, #7
 80048e4:	bf58      	it	pl
 80048e6:	4253      	negpl	r3, r2
 80048e8:	b21b      	sxth	r3, r3
 80048ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 80048ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80048f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80048f6:	441a      	add	r2, r3
 80048f8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80048fc:	2302      	movs	r3, #2
 80048fe:	2108      	movs	r1, #8
 8004900:	f7fb ff14 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004904:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004908:	3308      	adds	r3, #8
 800490a:	2b00      	cmp	r3, #0
 800490c:	da00      	bge.n	8004910 <Send_Vital_Data_Message+0x318>
 800490e:	3307      	adds	r3, #7
 8004910:	10db      	asrs	r3, r3, #3
 8004912:	b29a      	uxth	r2, r3
 8004914:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004918:	4413      	add	r3, r2
 800491a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800491e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004922:	3308      	adds	r3, #8
 8004924:	b29b      	uxth	r3, r3
 8004926:	b21b      	sxth	r3, r3
 8004928:	425a      	negs	r2, r3
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	f002 0207 	and.w	r2, r2, #7
 8004932:	bf58      	it	pl
 8004934:	4253      	negpl	r3, r2
 8004936:	b21b      	sxth	r3, r3
 8004938:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	4a2b      	ldr	r2, [pc, #172]	; (80049ec <Send_Vital_Data_Message+0x3f4>)
 8004940:	5cd3      	ldrb	r3, [r2, r3]
 8004942:	2b01      	cmp	r3, #1
 8004944:	d15a      	bne.n	80049fc <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004946:	f008 f8d1 	bl	800caec <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800494a:	79fa      	ldrb	r2, [r7, #7]
 800494c:	4613      	mov	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	005b      	lsls	r3, r3, #1
 8004954:	4a26      	ldr	r2, [pc, #152]	; (80049f0 <Send_Vital_Data_Message+0x3f8>)
 8004956:	4413      	add	r3, r2
 8004958:	4a26      	ldr	r2, [pc, #152]	; (80049f4 <Send_Vital_Data_Message+0x3fc>)
 800495a:	6811      	ldr	r1, [r2, #0]
 800495c:	6019      	str	r1, [r3, #0]
 800495e:	8892      	ldrh	r2, [r2, #4]
 8004960:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8004962:	4825      	ldr	r0, [pc, #148]	; (80049f8 <Send_Vital_Data_Message+0x400>)
 8004964:	f021 fbc8 	bl	80260f8 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004968:	79fb      	ldrb	r3, [r7, #7]
 800496a:	4a20      	ldr	r2, [pc, #128]	; (80049ec <Send_Vital_Data_Message+0x3f4>)
 800496c:	2100      	movs	r1, #0
 800496e:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 8004970:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004974:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004978:	441a      	add	r2, r3
 800497a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800497e:	2368      	movs	r3, #104	; 0x68
 8004980:	2110      	movs	r1, #16
 8004982:	f7fb fed3 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004986:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800498a:	3310      	adds	r3, #16
 800498c:	2b00      	cmp	r3, #0
 800498e:	da00      	bge.n	8004992 <Send_Vital_Data_Message+0x39a>
 8004990:	3307      	adds	r3, #7
 8004992:	10db      	asrs	r3, r3, #3
 8004994:	b29a      	uxth	r2, r3
 8004996:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800499a:	4413      	add	r3, r2
 800499c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80049a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80049a4:	3310      	adds	r3, #16
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	b21b      	sxth	r3, r3
 80049aa:	425a      	negs	r2, r3
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	f002 0207 	and.w	r2, r2, #7
 80049b4:	bf58      	it	pl
 80049b6:	4253      	negpl	r3, r2
 80049b8:	b21b      	sxth	r3, r3
 80049ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80049be:	e044      	b.n	8004a4a <Send_Vital_Data_Message+0x452>
 80049c0:	20000504 	.word	0x20000504
 80049c4:	2000308c 	.word	0x2000308c
 80049c8:	2000bc54 	.word	0x2000bc54
 80049cc:	51eb851f 	.word	0x51eb851f
 80049d0:	080281d0 	.word	0x080281d0
 80049d4:	200028f4 	.word	0x200028f4
 80049d8:	080281f4 	.word	0x080281f4
 80049dc:	08028214 	.word	0x08028214
 80049e0:	08027edc 	.word	0x08027edc
 80049e4:	08027f00 	.word	0x08027f00
 80049e8:	08027f20 	.word	0x08027f20
 80049ec:	20002764 	.word	0x20002764
 80049f0:	200028b8 	.word	0x200028b8
 80049f4:	20003fcc 	.word	0x20003fcc
 80049f8:	08028234 	.word	0x08028234
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 80049fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a04:	441a      	add	r2, r3
 8004a06:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a0a:	2328      	movs	r3, #40	; 0x28
 8004a0c:	2110      	movs	r1, #16
 8004a0e:	f7fb fe8d 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004a12:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a16:	3310      	adds	r3, #16
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	da00      	bge.n	8004a1e <Send_Vital_Data_Message+0x426>
 8004a1c:	3307      	adds	r3, #7
 8004a1e:	10db      	asrs	r3, r3, #3
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a26:	4413      	add	r3, r2
 8004a28:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a2c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a30:	3310      	adds	r3, #16
 8004a32:	b29b      	uxth	r3, r3
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	425a      	negs	r2, r3
 8004a38:	f003 0307 	and.w	r3, r3, #7
 8004a3c:	f002 0207 	and.w	r2, r2, #7
 8004a40:	bf58      	it	pl
 8004a42:	4253      	negpl	r3, r2
 8004a44:	b21b      	sxth	r3, r3
 8004a46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004a4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a4e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004a52:	18d1      	adds	r1, r2, r3
 8004a54:	79fa      	ldrb	r2, [r7, #7]
 8004a56:	48cd      	ldr	r0, [pc, #820]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004a58:	4613      	mov	r3, r2
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	4413      	add	r3, r2
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	4403      	add	r3, r0
 8004a62:	3305      	adds	r3, #5
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004a6a:	460a      	mov	r2, r1
 8004a6c:	2108      	movs	r1, #8
 8004a6e:	f7fb fe5d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004a72:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004a76:	3308      	adds	r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	da00      	bge.n	8004a7e <Send_Vital_Data_Message+0x486>
 8004a7c:	3307      	adds	r3, #7
 8004a7e:	10db      	asrs	r3, r3, #3
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004a86:	4413      	add	r3, r2
 8004a88:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004a8c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004a90:	3308      	adds	r3, #8
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	425a      	negs	r2, r3
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	f002 0207 	and.w	r2, r2, #7
 8004aa0:	bf58      	it	pl
 8004aa2:	4253      	negpl	r3, r2
 8004aa4:	b21b      	sxth	r3, r3
 8004aa6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8004aaa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004aae:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004ab2:	18d1      	adds	r1, r2, r3
 8004ab4:	79fa      	ldrb	r2, [r7, #7]
 8004ab6:	48b5      	ldr	r0, [pc, #724]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	4403      	add	r3, r0
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004aca:	460a      	mov	r2, r1
 8004acc:	2108      	movs	r1, #8
 8004ace:	f7fb fe2d 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004ad2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ad6:	3308      	adds	r3, #8
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	da00      	bge.n	8004ade <Send_Vital_Data_Message+0x4e6>
 8004adc:	3307      	adds	r3, #7
 8004ade:	10db      	asrs	r3, r3, #3
 8004ae0:	b29a      	uxth	r2, r3
 8004ae2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004aec:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004af0:	3308      	adds	r3, #8
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	425a      	negs	r2, r3
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	f002 0207 	and.w	r2, r2, #7
 8004b00:	bf58      	it	pl
 8004b02:	4253      	negpl	r3, r2
 8004b04:	b21b      	sxth	r3, r3
 8004b06:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004b0a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b12:	18d1      	adds	r1, r2, r3
 8004b14:	79fa      	ldrb	r2, [r7, #7]
 8004b16:	489d      	ldr	r0, [pc, #628]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004b18:	4613      	mov	r3, r2
 8004b1a:	005b      	lsls	r3, r3, #1
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4403      	add	r3, r0
 8004b22:	3303      	adds	r3, #3
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b2a:	460a      	mov	r2, r1
 8004b2c:	2108      	movs	r1, #8
 8004b2e:	f7fb fdfd 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b32:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b36:	3308      	adds	r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da00      	bge.n	8004b3e <Send_Vital_Data_Message+0x546>
 8004b3c:	3307      	adds	r3, #7
 8004b3e:	10db      	asrs	r3, r3, #3
 8004b40:	b29a      	uxth	r2, r3
 8004b42:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b46:	4413      	add	r3, r2
 8004b48:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004b4c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004b50:	3308      	adds	r3, #8
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	b21b      	sxth	r3, r3
 8004b56:	425a      	negs	r2, r3
 8004b58:	f003 0307 	and.w	r3, r3, #7
 8004b5c:	f002 0207 	and.w	r2, r2, #7
 8004b60:	bf58      	it	pl
 8004b62:	4253      	negpl	r3, r2
 8004b64:	b21b      	sxth	r3, r3
 8004b66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004b6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004b6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004b72:	18d1      	adds	r1, r2, r3
 8004b74:	79fa      	ldrb	r2, [r7, #7]
 8004b76:	4885      	ldr	r0, [pc, #532]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004b78:	4613      	mov	r3, r2
 8004b7a:	005b      	lsls	r3, r3, #1
 8004b7c:	4413      	add	r3, r2
 8004b7e:	005b      	lsls	r3, r3, #1
 8004b80:	4403      	add	r3, r0
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004b88:	460a      	mov	r2, r1
 8004b8a:	2108      	movs	r1, #8
 8004b8c:	f7fb fdce 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004b90:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004b94:	3308      	adds	r3, #8
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	da00      	bge.n	8004b9c <Send_Vital_Data_Message+0x5a4>
 8004b9a:	3307      	adds	r3, #7
 8004b9c:	10db      	asrs	r3, r3, #3
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004baa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004bae:	3308      	adds	r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	b21b      	sxth	r3, r3
 8004bb4:	425a      	negs	r2, r3
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	f002 0207 	and.w	r2, r2, #7
 8004bbe:	bf58      	it	pl
 8004bc0:	4253      	negpl	r3, r2
 8004bc2:	b21b      	sxth	r3, r3
 8004bc4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8004bc8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004bcc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004bd0:	18d1      	adds	r1, r2, r3
 8004bd2:	79fa      	ldrb	r2, [r7, #7]
 8004bd4:	486d      	ldr	r0, [pc, #436]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	4413      	add	r3, r2
 8004bdc:	005b      	lsls	r3, r3, #1
 8004bde:	4403      	add	r3, r0
 8004be0:	3301      	adds	r3, #1
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004be8:	460a      	mov	r2, r1
 8004bea:	2108      	movs	r1, #8
 8004bec:	f7fb fd9e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004bf0:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004bf4:	3308      	adds	r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	da00      	bge.n	8004bfc <Send_Vital_Data_Message+0x604>
 8004bfa:	3307      	adds	r3, #7
 8004bfc:	10db      	asrs	r3, r3, #3
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c04:	4413      	add	r3, r2
 8004c06:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c0a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c0e:	3308      	adds	r3, #8
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	b21b      	sxth	r3, r3
 8004c14:	425a      	negs	r2, r3
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	f002 0207 	and.w	r2, r2, #7
 8004c1e:	bf58      	it	pl
 8004c20:	4253      	negpl	r3, r2
 8004c22:	b21b      	sxth	r3, r3
 8004c24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004c28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c30:	18d1      	adds	r1, r2, r3
 8004c32:	79fa      	ldrb	r2, [r7, #7]
 8004c34:	4855      	ldr	r0, [pc, #340]	; (8004d8c <Send_Vital_Data_Message+0x794>)
 8004c36:	4613      	mov	r3, r2
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4413      	add	r3, r2
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	4403      	add	r3, r0
 8004c40:	3302      	adds	r3, #2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c48:	460a      	mov	r2, r1
 8004c4a:	2108      	movs	r1, #8
 8004c4c:	f7fb fd6e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c50:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004c54:	3308      	adds	r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da00      	bge.n	8004c5c <Send_Vital_Data_Message+0x664>
 8004c5a:	3307      	adds	r3, #7
 8004c5c:	10db      	asrs	r3, r3, #3
 8004c5e:	b29a      	uxth	r2, r3
 8004c60:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c64:	4413      	add	r3, r2
 8004c66:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004c6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004c6e:	3308      	adds	r3, #8
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	b21b      	sxth	r3, r3
 8004c74:	425a      	negs	r2, r3
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	f002 0207 	and.w	r2, r2, #7
 8004c7e:	bf58      	it	pl
 8004c80:	4253      	negpl	r3, r2
 8004c82:	b21b      	sxth	r3, r3
 8004c84:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 8004c88:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004c8c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004c90:	441a      	add	r2, r3
 8004c92:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004c96:	2301      	movs	r3, #1
 8004c98:	2108      	movs	r1, #8
 8004c9a:	f7fb fd47 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004c9e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	da00      	bge.n	8004caa <Send_Vital_Data_Message+0x6b2>
 8004ca8:	3307      	adds	r3, #7
 8004caa:	10db      	asrs	r3, r3, #3
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004cb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	b21b      	sxth	r3, r3
 8004cc2:	425a      	negs	r2, r3
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	f002 0207 	and.w	r2, r2, #7
 8004ccc:	bf58      	it	pl
 8004cce:	4253      	negpl	r3, r2
 8004cd0:	b21b      	sxth	r3, r3
 8004cd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004cd6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004cda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004cde:	441a      	add	r2, r3
 8004ce0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	2108      	movs	r1, #8
 8004ce8:	f7fb fd20 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004cec:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004cf0:	3308      	adds	r3, #8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	da00      	bge.n	8004cf8 <Send_Vital_Data_Message+0x700>
 8004cf6:	3307      	adds	r3, #7
 8004cf8:	10db      	asrs	r3, r3, #3
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d00:	4413      	add	r3, r2
 8004d02:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d06:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d0a:	3308      	adds	r3, #8
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	b21b      	sxth	r3, r3
 8004d10:	425a      	negs	r2, r3
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	f002 0207 	and.w	r2, r2, #7
 8004d1a:	bf58      	it	pl
 8004d1c:	4253      	negpl	r3, r2
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004d24:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d28:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004d2c:	441a      	add	r2, r3
 8004d2e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004d32:	2301      	movs	r3, #1
 8004d34:	2108      	movs	r1, #8
 8004d36:	f7fb fcf9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004d3a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004d3e:	3308      	adds	r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da00      	bge.n	8004d46 <Send_Vital_Data_Message+0x74e>
 8004d44:	3307      	adds	r3, #7
 8004d46:	10db      	asrs	r3, r3, #3
 8004d48:	b29a      	uxth	r2, r3
 8004d4a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004d4e:	4413      	add	r3, r2
 8004d50:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004d54:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004d58:	3308      	adds	r3, #8
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	425a      	negs	r2, r3
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	f002 0207 	and.w	r2, r2, #7
 8004d68:	bf58      	it	pl
 8004d6a:	4253      	negpl	r3, r2
 8004d6c:	b21b      	sxth	r3, r3
 8004d6e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004d72:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <Send_Vital_Data_Message+0x798>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	085b      	lsrs	r3, r3, #1
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d02c      	beq.n	8004dda <Send_Vital_Data_Message+0x7e2>
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <Send_Vital_Data_Message+0x798>)
 8004d82:	791b      	ldrb	r3, [r3, #4]
 8004d84:	79fa      	ldrb	r2, [r7, #7]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d127      	bne.n	8004dda <Send_Vital_Data_Message+0x7e2>
 8004d8a:	e003      	b.n	8004d94 <Send_Vital_Data_Message+0x79c>
 8004d8c:	200028b8 	.word	0x200028b8
 8004d90:	2000308c 	.word	0x2000308c
	{
		uint32_t Rand_Number = 0;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 8004d9a:	484e      	ldr	r0, [pc, #312]	; (8004ed4 <Send_Vital_Data_Message+0x8dc>)
 8004d9c:	f018 fdb8 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8004da0:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8004da4:	484c      	ldr	r0, [pc, #304]	; (8004ed8 <Send_Vital_Data_Message+0x8e0>)
 8004da6:	f021 f9a7 	bl	80260f8 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004daa:	79fb      	ldrb	r3, [r7, #7]
 8004dac:	4a4b      	ldr	r2, [pc, #300]	; (8004edc <Send_Vital_Data_Message+0x8e4>)
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	4413      	add	r3, r2
 8004db2:	330c      	adds	r3, #12
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4849      	ldr	r0, [pc, #292]	; (8004ee0 <Send_Vital_Data_Message+0x8e8>)
 8004dba:	f021 f901 	bl	8025fc0 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004dbe:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004dc2:	4848      	ldr	r0, [pc, #288]	; (8004ee4 <Send_Vital_Data_Message+0x8ec>)
 8004dc4:	f021 f8fc 	bl	8025fc0 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 8004dc8:	f107 020c 	add.w	r2, r7, #12
 8004dcc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd0:	2118      	movs	r1, #24
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f7fb fcaa 	bl	800072c <InsertBits>
	{
 8004dd8:	e00b      	b.n	8004df2 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004dda:	79fb      	ldrb	r3, [r7, #7]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <Send_Vital_Data_Message+0x8e4>)
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	330c      	adds	r3, #12
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f107 020c 	add.w	r2, r7, #12
 8004dea:	2118      	movs	r1, #24
 8004dec:	2000      	movs	r0, #0
 8004dee:	f7fb fc9d 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004df2:	2300      	movs	r3, #0
 8004df4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004df8:	e011      	b.n	8004e1e <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004dfa:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004dfe:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e02:	3303      	adds	r3, #3
 8004e04:	3290      	adds	r2, #144	; 0x90
 8004e06:	443a      	add	r2, r7
 8004e08:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004e0c:	3390      	adds	r3, #144	; 0x90
 8004e0e:	443b      	add	r3, r7
 8004e10:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004e14:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e18:	3301      	adds	r3, #1
 8004e1a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004e1e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d8e6      	bhi.n	8004dfa <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004e2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e34:	18d4      	adds	r4, r2, r3
 8004e36:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	3303      	adds	r3, #3
 8004e3e:	b29a      	uxth	r2, r3
 8004e40:	f107 030c 	add.w	r3, r7, #12
 8004e44:	4611      	mov	r1, r2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f010 fc18 	bl	801567c <CalculateDirectReverseCrc>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004e52:	4622      	mov	r2, r4
 8004e54:	2120      	movs	r1, #32
 8004e56:	f7fb fc69 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004e5a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004e5e:	3320      	adds	r3, #32
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	da00      	bge.n	8004e66 <Send_Vital_Data_Message+0x86e>
 8004e64:	3307      	adds	r3, #7
 8004e66:	10db      	asrs	r3, r3, #3
 8004e68:	b29a      	uxth	r2, r3
 8004e6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004e6e:	4413      	add	r3, r2
 8004e70:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004e74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004e78:	3320      	adds	r3, #32
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	b21b      	sxth	r3, r3
 8004e7e:	425a      	negs	r2, r3
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	f002 0207 	and.w	r2, r2, #7
 8004e88:	bf58      	it	pl
 8004e8a:	4253      	negpl	r3, r2
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004e92:	4b15      	ldr	r3, [pc, #84]	; (8004ee8 <Send_Vital_Data_Message+0x8f0>)
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	0a5b      	lsrs	r3, r3, #9
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00b      	beq.n	8004eb8 <Send_Vital_Data_Message+0x8c0>
 8004ea0:	4b11      	ldr	r3, [pc, #68]	; (8004ee8 <Send_Vital_Data_Message+0x8f0>)
 8004ea2:	791b      	ldrb	r3, [r3, #4]
 8004ea4:	79fa      	ldrb	r2, [r7, #7]
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d106      	bne.n	8004eb8 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 8004eaa:	4810      	ldr	r0, [pc, #64]	; (8004eec <Send_Vital_Data_Message+0x8f4>)
 8004eac:	f021 f924 	bl	80260f8 <puts>
		printf("Not Sending Reply");
 8004eb0:	480f      	ldr	r0, [pc, #60]	; (8004ef0 <Send_Vital_Data_Message+0x8f8>)
 8004eb2:	f021 f885 	bl	8025fc0 <iprintf>
 8004eb6:	e009      	b.n	8004ecc <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8004eb8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004ebc:	b2d9      	uxtb	r1, r3
 8004ebe:	79fa      	ldrb	r2, [r7, #7]
 8004ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f003 f8cf 	bl	8008068 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 8004eca:	bf00      	nop
 8004ecc:	bf00      	nop
 8004ece:	3794      	adds	r7, #148	; 0x94
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd90      	pop	{r4, r7, pc}
 8004ed4:	2000bc54 	.word	0x2000bc54
 8004ed8:	0802824c 	.word	0x0802824c
 8004edc:	200028f4 	.word	0x200028f4
 8004ee0:	08028270 	.word	0x08028270
 8004ee4:	08028294 	.word	0x08028294
 8004ee8:	2000308c 	.word	0x2000308c
 8004eec:	08027fa8 	.word	0x08027fa8
 8004ef0:	08027fc0 	.word	0x08027fc0

08004ef4 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b0c0      	sub	sp, #256	; 0x100
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	4608      	mov	r0, r1
 8004efe:	4611      	mov	r1, r2
 8004f00:	461a      	mov	r2, r3
 8004f02:	4603      	mov	r3, r0
 8004f04:	70fb      	strb	r3, [r7, #3]
 8004f06:	460b      	mov	r3, r1
 8004f08:	70bb      	strb	r3, [r7, #2]
 8004f0a:	4613      	mov	r3, r2
 8004f0c:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004f14:	2300      	movs	r3, #0
 8004f16:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004f20:	f014 f938 	bl	8019194 <HAL_GetTick>
 8004f24:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004f34:	2300      	movs	r3, #0
 8004f36:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f3e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004f42:	227c      	movs	r2, #124	; 0x7c
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f020 ff52 	bl	8025df0 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004f52:	2300      	movs	r3, #0
 8004f54:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	b299      	uxth	r1, r3
 8004f5c:	78ba      	ldrb	r2, [r7, #2]
 8004f5e:	48c3      	ldr	r0, [pc, #780]	; (800526c <Vital_Msg_extr_from_CAN+0x378>)
 8004f60:	4613      	mov	r3, r2
 8004f62:	015b      	lsls	r3, r3, #5
 8004f64:	4413      	add	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4403      	add	r3, r0
 8004f6a:	3340      	adds	r3, #64	; 0x40
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	4299      	cmp	r1, r3
 8004f70:	d11a      	bne.n	8004fa8 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 8004f72:	78ba      	ldrb	r2, [r7, #2]
 8004f74:	4613      	mov	r3, r2
 8004f76:	015b      	lsls	r3, r3, #5
 8004f78:	4413      	add	r3, r2
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4abb      	ldr	r2, [pc, #748]	; (800526c <Vital_Msg_extr_from_CAN+0x378>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	78fa      	ldrb	r2, [r7, #3]
 8004f82:	4619      	mov	r1, r3
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f020 fefb 	bl	8025d80 <memcmp>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d10b      	bne.n	8004fa8 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004f90:	78bb      	ldrb	r3, [r7, #2]
 8004f92:	4ab7      	ldr	r2, [pc, #732]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8004f94:	3366      	adds	r3, #102	; 0x66
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	48b5      	ldr	r0, [pc, #724]	; (8005274 <Vital_Msg_extr_from_CAN+0x380>)
 8004fa0:	f021 f80e 	bl	8025fc0 <iprintf>
			return;
 8004fa4:	f000 bda3 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004fa8:	78fb      	ldrb	r3, [r7, #3]
 8004faa:	3b05      	subs	r3, #5
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	441a      	add	r2, r3
 8004fb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fb4:	2120      	movs	r1, #32
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fb2c 	bl	8000614 <ExtractBits>
 8004fbc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004fc0:	4bad      	ldr	r3, [pc, #692]	; (8005278 <Vital_Msg_extr_from_CAN+0x384>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d034      	beq.n	8005036 <Vital_Msg_extr_from_CAN+0x142>
 8004fcc:	4baa      	ldr	r3, [pc, #680]	; (8005278 <Vital_Msg_extr_from_CAN+0x384>)
 8004fce:	791b      	ldrb	r3, [r3, #4]
 8004fd0:	78ba      	ldrb	r2, [r7, #2]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d12f      	bne.n	8005036 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004fd6:	2316      	movs	r3, #22
 8004fd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004fdc:	48a7      	ldr	r0, [pc, #668]	; (800527c <Vital_Msg_extr_from_CAN+0x388>)
 8004fde:	f018 fc97 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4ba6      	ldr	r3, [pc, #664]	; (8005280 <Vital_Msg_extr_from_CAN+0x38c>)
 8004fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8004fea:	0dd9      	lsrs	r1, r3, #23
 8004fec:	460b      	mov	r3, r1
 8004fee:	041b      	lsls	r3, r3, #16
 8004ff0:	1a5b      	subs	r3, r3, r1
 8004ff2:	021b      	lsls	r3, r3, #8
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 8004ffa:	48a2      	ldr	r0, [pc, #648]	; (8005284 <Vital_Msg_extr_from_CAN+0x390>)
 8004ffc:	f021 f87c 	bl	80260f8 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005000:	78ba      	ldrb	r2, [r7, #2]
 8005002:	49a1      	ldr	r1, [pc, #644]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 8005004:	4613      	mov	r3, r2
 8005006:	005b      	lsls	r3, r3, #1
 8005008:	4413      	add	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	440b      	add	r3, r1
 800500e:	3308      	adds	r3, #8
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4619      	mov	r1, r3
 8005014:	489d      	ldr	r0, [pc, #628]	; (800528c <Vital_Msg_extr_from_CAN+0x398>)
 8005016:	f020 ffd3 	bl	8025fc0 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800501a:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800501e:	489c      	ldr	r0, [pc, #624]	; (8005290 <Vital_Msg_extr_from_CAN+0x39c>)
 8005020:	f020 ffce 	bl	8025fc0 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8005024:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8005028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800502c:	2118      	movs	r1, #24
 800502e:	2000      	movs	r0, #0
 8005030:	f7fb fb7c 	bl	800072c <InsertBits>
	{
 8005034:	e00e      	b.n	8005054 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005036:	78ba      	ldrb	r2, [r7, #2]
 8005038:	4993      	ldr	r1, [pc, #588]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 800503a:	4613      	mov	r3, r2
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	4413      	add	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	440b      	add	r3, r1
 8005044:	3308      	adds	r3, #8
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800504c:	2118      	movs	r1, #24
 800504e:	2000      	movs	r0, #0
 8005050:	f7fb fb6c 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005054:	2300      	movs	r3, #0
 8005056:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800505a:	e011      	b.n	8005080 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800505c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	441a      	add	r2, r3
 8005064:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005068:	3303      	adds	r3, #3
 800506a:	7812      	ldrb	r2, [r2, #0]
 800506c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005070:	443b      	add	r3, r7
 8005072:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005076:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800507a:	3301      	adds	r3, #1
 800507c:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005080:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8005084:	78fb      	ldrb	r3, [r7, #3]
 8005086:	3b05      	subs	r3, #5
 8005088:	429a      	cmp	r2, r3
 800508a:	dbe7      	blt.n	800505c <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800508c:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005090:	b29b      	uxth	r3, r3
 8005092:	3303      	adds	r3, #3
 8005094:	b29a      	uxth	r2, r3
 8005096:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800509a:	4611      	mov	r1, r2
 800509c:	4618      	mov	r0, r3
 800509e:	f010 faed 	bl	801567c <CalculateDirectReverseCrc>
 80050a2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80050a6:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80050aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80050ae:	429a      	cmp	r2, r3
 80050b0:	f000 8104 	beq.w	80052bc <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	3305      	adds	r3, #5
 80050b8:	461a      	mov	r2, r3
 80050ba:	2108      	movs	r1, #8
 80050bc:	2000      	movs	r0, #0
 80050be:	f7fb faa9 	bl	8000614 <ExtractBits>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f040 80ba 	bne.w	800523e <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 80050ca:	4872      	ldr	r0, [pc, #456]	; (8005294 <Vital_Msg_extr_from_CAN+0x3a0>)
 80050cc:	f021 f814 	bl	80260f8 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80050d0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80050d4:	2280      	movs	r2, #128	; 0x80
 80050d6:	2100      	movs	r1, #0
 80050d8:	4618      	mov	r0, r3
 80050da:	f020 fe89 	bl	8025df0 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 80050de:	78ba      	ldrb	r2, [r7, #2]
 80050e0:	4969      	ldr	r1, [pc, #420]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80050e2:	4613      	mov	r3, r2
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	4413      	add	r3, r2
 80050e8:	00db      	lsls	r3, r3, #3
 80050ea:	440b      	add	r3, r1
 80050ec:	3308      	adds	r3, #8
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	3301      	adds	r3, #1
 80050f2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80050f6:	2118      	movs	r1, #24
 80050f8:	2000      	movs	r0, #0
 80050fa:	f7fb fb17 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8005104:	e011      	b.n	800512a <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8005106:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	441a      	add	r2, r3
 800510e:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005112:	3303      	adds	r3, #3
 8005114:	7812      	ldrb	r2, [r2, #0]
 8005116:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800511a:	443b      	add	r3, r7
 800511c:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005120:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8005124:	3301      	adds	r3, #1
 8005126:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800512a:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	3b05      	subs	r3, #5
 8005132:	429a      	cmp	r2, r3
 8005134:	dbe7      	blt.n	8005106 <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8005136:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800513a:	b29b      	uxth	r3, r3
 800513c:	3303      	adds	r3, #3
 800513e:	b29a      	uxth	r2, r3
 8005140:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f010 fa98 	bl	801567c <CalculateDirectReverseCrc>
 800514c:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	3b05      	subs	r3, #5
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	441a      	add	r2, r3
 8005158:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800515c:	2120      	movs	r1, #32
 800515e:	4618      	mov	r0, r3
 8005160:	f7fb fa58 	bl	8000614 <ExtractBits>
 8005164:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 8005168:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800516c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005170:	429a      	cmp	r2, r3
 8005172:	d14e      	bne.n	8005212 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 8005174:	4848      	ldr	r0, [pc, #288]	; (8005298 <Vital_Msg_extr_from_CAN+0x3a4>)
 8005176:	f020 ffbf 	bl	80260f8 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 800517a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800517e:	4847      	ldr	r0, [pc, #284]	; (800529c <Vital_Msg_extr_from_CAN+0x3a8>)
 8005180:	f020 ff1e 	bl	8025fc0 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8005184:	78ba      	ldrb	r2, [r7, #2]
 8005186:	4940      	ldr	r1, [pc, #256]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 8005188:	4613      	mov	r3, r2
 800518a:	005b      	lsls	r3, r3, #1
 800518c:	4413      	add	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	440b      	add	r3, r1
 8005192:	3308      	adds	r3, #8
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4619      	mov	r1, r3
 8005198:	4841      	ldr	r0, [pc, #260]	; (80052a0 <Vital_Msg_extr_from_CAN+0x3ac>)
 800519a:	f020 ff11 	bl	8025fc0 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 800519e:	78ba      	ldrb	r2, [r7, #2]
 80051a0:	4939      	ldr	r1, [pc, #228]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051a2:	4613      	mov	r3, r2
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	4413      	add	r3, r2
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	440b      	add	r3, r1
 80051ac:	3308      	adds	r3, #8
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	1c59      	adds	r1, r3, #1
 80051b2:	4835      	ldr	r0, [pc, #212]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051b4:	4613      	mov	r3, r2
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	4413      	add	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4403      	add	r3, r0
 80051be:	3308      	adds	r3, #8
 80051c0:	6019      	str	r1, [r3, #0]
 80051c2:	78b9      	ldrb	r1, [r7, #2]
 80051c4:	4830      	ldr	r0, [pc, #192]	; (8005288 <Vital_Msg_extr_from_CAN+0x394>)
 80051c6:	4613      	mov	r3, r2
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	4413      	add	r3, r2
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	4403      	add	r3, r0
 80051d0:	3308      	adds	r3, #8
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4833      	ldr	r0, [pc, #204]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051d6:	010b      	lsls	r3, r1, #4
 80051d8:	4403      	add	r3, r0
 80051da:	3308      	adds	r3, #8
 80051dc:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80051de:	78bb      	ldrb	r3, [r7, #2]
 80051e0:	4a30      	ldr	r2, [pc, #192]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	4413      	add	r3, r2
 80051e6:	3308      	adds	r3, #8
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4619      	mov	r1, r3
 80051ec:	482e      	ldr	r0, [pc, #184]	; (80052a8 <Vital_Msg_extr_from_CAN+0x3b4>)
 80051ee:	f020 fee7 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80051f2:	78bb      	ldrb	r3, [r7, #2]
 80051f4:	78ba      	ldrb	r2, [r7, #2]
 80051f6:	492b      	ldr	r1, [pc, #172]	; (80052a4 <Vital_Msg_extr_from_CAN+0x3b0>)
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	440b      	add	r3, r1
 80051fc:	3308      	adds	r3, #8
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	482a      	ldr	r0, [pc, #168]	; (80052ac <Vital_Msg_extr_from_CAN+0x3b8>)
 8005202:	4613      	mov	r3, r2
 8005204:	005b      	lsls	r3, r3, #1
 8005206:	4413      	add	r3, r2
 8005208:	00db      	lsls	r3, r3, #3
 800520a:	4403      	add	r3, r0
 800520c:	3308      	adds	r3, #8
 800520e:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8005210:	e055      	b.n	80052be <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005212:	78bb      	ldrb	r3, [r7, #2]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8005216:	3366      	adds	r3, #102	; 0x66
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	4619      	mov	r1, r3
 8005220:	4823      	ldr	r0, [pc, #140]	; (80052b0 <Vital_Msg_extr_from_CAN+0x3bc>)
 8005222:	f020 fecd 	bl	8025fc0 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005226:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800522a:	4822      	ldr	r0, [pc, #136]	; (80052b4 <Vital_Msg_extr_from_CAN+0x3c0>)
 800522c:	f020 fec8 	bl	8025fc0 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8005230:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005234:	4820      	ldr	r0, [pc, #128]	; (80052b8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8005236:	f020 fec3 	bl	8025fc0 <iprintf>
				return;
 800523a:	f000 bc58 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800523e:	78bb      	ldrb	r3, [r7, #2]
 8005240:	4a0b      	ldr	r2, [pc, #44]	; (8005270 <Vital_Msg_extr_from_CAN+0x37c>)
 8005242:	3366      	adds	r3, #102	; 0x66
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	4619      	mov	r1, r3
 800524c:	4818      	ldr	r0, [pc, #96]	; (80052b0 <Vital_Msg_extr_from_CAN+0x3bc>)
 800524e:	f020 feb7 	bl	8025fc0 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8005252:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8005256:	4817      	ldr	r0, [pc, #92]	; (80052b4 <Vital_Msg_extr_from_CAN+0x3c0>)
 8005258:	f020 feb2 	bl	8025fc0 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 800525c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8005260:	4815      	ldr	r0, [pc, #84]	; (80052b8 <Vital_Msg_extr_from_CAN+0x3c4>)
 8005262:	f020 fead 	bl	8025fc0 <iprintf>
			return;
 8005266:	f000 bc42 	b.w	8005aee <Vital_Msg_extr_from_CAN+0xbfa>
 800526a:	bf00      	nop
 800526c:	20003094 	.word	0x20003094
 8005270:	20000504 	.word	0x20000504
 8005274:	080282b8 	.word	0x080282b8
 8005278:	2000308c 	.word	0x2000308c
 800527c:	2000bc54 	.word	0x2000bc54
 8005280:	80008001 	.word	0x80008001
 8005284:	08027fd4 	.word	0x08027fd4
 8005288:	20002e94 	.word	0x20002e94
 800528c:	08027ff4 	.word	0x08027ff4
 8005290:	0802801c 	.word	0x0802801c
 8005294:	08028044 	.word	0x08028044
 8005298:	080282fc 	.word	0x080282fc
 800529c:	08028078 	.word	0x08028078
 80052a0:	08028320 	.word	0x08028320
 80052a4:	200028f4 	.word	0x200028f4
 80052a8:	080280b8 	.word	0x080280b8
 80052ac:	20002da4 	.word	0x20002da4
 80052b0:	0802833c 	.word	0x0802833c
 80052b4:	08027d14 	.word	0x08027d14
 80052b8:	08027d24 	.word	0x08027d24
		}
	}
	ROLLOVER_VITAL_CAN:
 80052bc:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 80052be:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80052c2:	3308      	adds	r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	da00      	bge.n	80052ca <Vital_Msg_extr_from_CAN+0x3d6>
 80052c8:	3307      	adds	r3, #7
 80052ca:	10db      	asrs	r3, r3, #3
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052d2:	4413      	add	r3, r2
 80052d4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80052d8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80052dc:	3308      	adds	r3, #8
 80052de:	b29b      	uxth	r3, r3
 80052e0:	b21b      	sxth	r3, r3
 80052e2:	425a      	negs	r2, r3
 80052e4:	f003 0307 	and.w	r3, r3, #7
 80052e8:	f002 0207 	and.w	r2, r2, #7
 80052ec:	bf58      	it	pl
 80052ee:	4253      	negpl	r3, r2
 80052f0:	b21b      	sxth	r3, r3
 80052f2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80052f6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	441a      	add	r2, r3
 80052fe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005302:	2110      	movs	r1, #16
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb f985 	bl	8000614 <ExtractBits>
 800530a:	4603      	mov	r3, r0
 800530c:	b29b      	uxth	r3, r3
 800530e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8005312:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8005316:	4619      	mov	r1, r3
 8005318:	48c6      	ldr	r0, [pc, #792]	; (8005634 <Vital_Msg_extr_from_CAN+0x740>)
 800531a:	f020 fe51 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 800531e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005322:	3310      	adds	r3, #16
 8005324:	2b00      	cmp	r3, #0
 8005326:	da00      	bge.n	800532a <Vital_Msg_extr_from_CAN+0x436>
 8005328:	3307      	adds	r3, #7
 800532a:	10db      	asrs	r3, r3, #3
 800532c:	b29a      	uxth	r2, r3
 800532e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005332:	4413      	add	r3, r2
 8005334:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005338:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800533c:	3310      	adds	r3, #16
 800533e:	b29b      	uxth	r3, r3
 8005340:	b21b      	sxth	r3, r3
 8005342:	425a      	negs	r2, r3
 8005344:	f003 0307 	and.w	r3, r3, #7
 8005348:	f002 0207 	and.w	r2, r2, #7
 800534c:	bf58      	it	pl
 800534e:	4253      	negpl	r3, r2
 8005350:	b21b      	sxth	r3, r3
 8005352:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005356:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	441a      	add	r2, r3
 800535e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005362:	2110      	movs	r1, #16
 8005364:	4618      	mov	r0, r3
 8005366:	f7fb f955 	bl	8000614 <ExtractBits>
 800536a:	4603      	mov	r3, r0
 800536c:	b29b      	uxth	r3, r3
 800536e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8005372:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005376:	4619      	mov	r1, r3
 8005378:	48af      	ldr	r0, [pc, #700]	; (8005638 <Vital_Msg_extr_from_CAN+0x744>)
 800537a:	f020 fe21 	bl	8025fc0 <iprintf>
	BITSTUFFINC(16);
 800537e:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005382:	3310      	adds	r3, #16
 8005384:	2b00      	cmp	r3, #0
 8005386:	da00      	bge.n	800538a <Vital_Msg_extr_from_CAN+0x496>
 8005388:	3307      	adds	r3, #7
 800538a:	10db      	asrs	r3, r3, #3
 800538c:	b29a      	uxth	r2, r3
 800538e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005392:	4413      	add	r3, r2
 8005394:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005398:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800539c:	3310      	adds	r3, #16
 800539e:	b29b      	uxth	r3, r3
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	425a      	negs	r2, r3
 80053a4:	f003 0307 	and.w	r3, r3, #7
 80053a8:	f002 0207 	and.w	r2, r2, #7
 80053ac:	bf58      	it	pl
 80053ae:	4253      	negpl	r3, r2
 80053b0:	b21b      	sxth	r3, r3
 80053b2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80053b6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	441a      	add	r2, r3
 80053be:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053c2:	2108      	movs	r1, #8
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fb f925 	bl	8000614 <ExtractBits>
 80053ca:	4603      	mov	r3, r0
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 80053d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80053d6:	3308      	adds	r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	da00      	bge.n	80053de <Vital_Msg_extr_from_CAN+0x4ea>
 80053dc:	3307      	adds	r3, #7
 80053de:	10db      	asrs	r3, r3, #3
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80053e6:	4413      	add	r3, r2
 80053e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80053ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80053f0:	3308      	adds	r3, #8
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	b21b      	sxth	r3, r3
 80053f6:	425a      	negs	r2, r3
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	f002 0207 	and.w	r2, r2, #7
 8005400:	bf58      	it	pl
 8005402:	4253      	negpl	r3, r2
 8005404:	b21b      	sxth	r3, r3
 8005406:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800540a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	441a      	add	r2, r3
 8005412:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005416:	2108      	movs	r1, #8
 8005418:	4618      	mov	r0, r3
 800541a:	f7fb f8fb 	bl	8000614 <ExtractBits>
 800541e:	4603      	mov	r3, r0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8005426:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800542a:	3308      	adds	r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	da00      	bge.n	8005432 <Vital_Msg_extr_from_CAN+0x53e>
 8005430:	3307      	adds	r3, #7
 8005432:	10db      	asrs	r3, r3, #3
 8005434:	b29a      	uxth	r2, r3
 8005436:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800543a:	4413      	add	r3, r2
 800543c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005440:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005444:	3308      	adds	r3, #8
 8005446:	b29b      	uxth	r3, r3
 8005448:	b21b      	sxth	r3, r3
 800544a:	425a      	negs	r2, r3
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	f002 0207 	and.w	r2, r2, #7
 8005454:	bf58      	it	pl
 8005456:	4253      	negpl	r3, r2
 8005458:	b21b      	sxth	r3, r3
 800545a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800545e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	441a      	add	r2, r3
 8005466:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800546a:	2108      	movs	r1, #8
 800546c:	4618      	mov	r0, r3
 800546e:	f7fb f8d1 	bl	8000614 <ExtractBits>
 8005472:	4603      	mov	r3, r0
 8005474:	b2db      	uxtb	r3, r3
 8005476:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",CAN_Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800547a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800547e:	3308      	adds	r3, #8
 8005480:	2b00      	cmp	r3, #0
 8005482:	da00      	bge.n	8005486 <Vital_Msg_extr_from_CAN+0x592>
 8005484:	3307      	adds	r3, #7
 8005486:	10db      	asrs	r3, r3, #3
 8005488:	b29a      	uxth	r2, r3
 800548a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800548e:	4413      	add	r3, r2
 8005490:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005494:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005498:	3308      	adds	r3, #8
 800549a:	b29b      	uxth	r3, r3
 800549c:	b21b      	sxth	r3, r3
 800549e:	425a      	negs	r2, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	f002 0207 	and.w	r2, r2, #7
 80054a8:	bf58      	it	pl
 80054aa:	4253      	negpl	r3, r2
 80054ac:	b21b      	sxth	r3, r3
 80054ae:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80054b2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	441a      	add	r2, r3
 80054ba:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054be:	2110      	movs	r1, #16
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fb f8a7 	bl	8000614 <ExtractBits>
 80054c6:	4603      	mov	r3, r0
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 80054cc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80054d0:	3310      	adds	r3, #16
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	da00      	bge.n	80054d8 <Vital_Msg_extr_from_CAN+0x5e4>
 80054d6:	3307      	adds	r3, #7
 80054d8:	10db      	asrs	r3, r3, #3
 80054da:	b29a      	uxth	r2, r3
 80054dc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80054e0:	4413      	add	r3, r2
 80054e2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80054e6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80054ea:	3310      	adds	r3, #16
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	b21b      	sxth	r3, r3
 80054f0:	425a      	negs	r2, r3
 80054f2:	f003 0307 	and.w	r3, r3, #7
 80054f6:	f002 0207 	and.w	r2, r2, #7
 80054fa:	bf58      	it	pl
 80054fc:	4253      	negpl	r3, r2
 80054fe:	b21b      	sxth	r3, r3
 8005500:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8005504:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005506:	f003 0320 	and.w	r3, r3, #32
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 80fe 	beq.w	800570c <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005510:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005514:	687a      	ldr	r2, [r7, #4]
 8005516:	441a      	add	r2, r3
 8005518:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800551c:	2108      	movs	r1, #8
 800551e:	4618      	mov	r0, r3
 8005520:	f7fb f878 	bl	8000614 <ExtractBits>
 8005524:	4603      	mov	r3, r0
 8005526:	b2db      	uxtb	r3, r3
 8005528:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 800552c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005530:	3308      	adds	r3, #8
 8005532:	2b00      	cmp	r3, #0
 8005534:	da00      	bge.n	8005538 <Vital_Msg_extr_from_CAN+0x644>
 8005536:	3307      	adds	r3, #7
 8005538:	10db      	asrs	r3, r3, #3
 800553a:	b29a      	uxth	r2, r3
 800553c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005540:	4413      	add	r3, r2
 8005542:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005546:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800554a:	3308      	adds	r3, #8
 800554c:	b29b      	uxth	r3, r3
 800554e:	b21b      	sxth	r3, r3
 8005550:	425a      	negs	r2, r3
 8005552:	f003 0307 	and.w	r3, r3, #7
 8005556:	f002 0207 	and.w	r2, r2, #7
 800555a:	bf58      	it	pl
 800555c:	4253      	negpl	r3, r2
 800555e:	b21b      	sxth	r3, r3
 8005560:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005564:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	441a      	add	r2, r3
 800556c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005570:	2108      	movs	r1, #8
 8005572:	4618      	mov	r0, r3
 8005574:	f7fb f84e 	bl	8000614 <ExtractBits>
 8005578:	4603      	mov	r3, r0
 800557a:	b2db      	uxtb	r3, r3
 800557c:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8005580:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005584:	3308      	adds	r3, #8
 8005586:	2b00      	cmp	r3, #0
 8005588:	da00      	bge.n	800558c <Vital_Msg_extr_from_CAN+0x698>
 800558a:	3307      	adds	r3, #7
 800558c:	10db      	asrs	r3, r3, #3
 800558e:	b29a      	uxth	r2, r3
 8005590:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005594:	4413      	add	r3, r2
 8005596:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800559a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800559e:	3308      	adds	r3, #8
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	b21b      	sxth	r3, r3
 80055a4:	425a      	negs	r2, r3
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	f002 0207 	and.w	r2, r2, #7
 80055ae:	bf58      	it	pl
 80055b0:	4253      	negpl	r3, r2
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80055b8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	441a      	add	r2, r3
 80055c0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055c4:	2108      	movs	r1, #8
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fb f824 	bl	8000614 <ExtractBits>
 80055cc:	4603      	mov	r3, r0
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 80055d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80055d6:	3308      	adds	r3, #8
 80055d8:	2b00      	cmp	r3, #0
 80055da:	da00      	bge.n	80055de <Vital_Msg_extr_from_CAN+0x6ea>
 80055dc:	3307      	adds	r3, #7
 80055de:	10db      	asrs	r3, r3, #3
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80055e6:	4413      	add	r3, r2
 80055e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80055ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80055f0:	3308      	adds	r3, #8
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	b21b      	sxth	r3, r3
 80055f6:	425a      	negs	r2, r3
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	f002 0207 	and.w	r2, r2, #7
 8005600:	bf58      	it	pl
 8005602:	4253      	negpl	r3, r2
 8005604:	b21b      	sxth	r3, r3
 8005606:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800560a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	441a      	add	r2, r3
 8005612:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005616:	2108      	movs	r1, #8
 8005618:	4618      	mov	r0, r3
 800561a:	f7fa fffb 	bl	8000614 <ExtractBits>
 800561e:	4603      	mov	r3, r0
 8005620:	b2db      	uxtb	r3, r3
 8005622:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8005624:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005628:	3308      	adds	r3, #8
 800562a:	2b00      	cmp	r3, #0
 800562c:	da06      	bge.n	800563c <Vital_Msg_extr_from_CAN+0x748>
 800562e:	3307      	adds	r3, #7
 8005630:	e004      	b.n	800563c <Vital_Msg_extr_from_CAN+0x748>
 8005632:	bf00      	nop
 8005634:	08027e04 	.word	0x08027e04
 8005638:	08027e0c 	.word	0x08027e0c
 800563c:	10db      	asrs	r3, r3, #3
 800563e:	b29a      	uxth	r2, r3
 8005640:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005644:	4413      	add	r3, r2
 8005646:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800564a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 800564e:	3308      	adds	r3, #8
 8005650:	b29b      	uxth	r3, r3
 8005652:	b21b      	sxth	r3, r3
 8005654:	425a      	negs	r2, r3
 8005656:	f003 0307 	and.w	r3, r3, #7
 800565a:	f002 0207 	and.w	r2, r2, #7
 800565e:	bf58      	it	pl
 8005660:	4253      	negpl	r3, r2
 8005662:	b21b      	sxth	r3, r3
 8005664:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005668:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	441a      	add	r2, r3
 8005670:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005674:	2108      	movs	r1, #8
 8005676:	4618      	mov	r0, r3
 8005678:	f7fa ffcc 	bl	8000614 <ExtractBits>
 800567c:	4603      	mov	r3, r0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8005682:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8005686:	3308      	adds	r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	da00      	bge.n	800568e <Vital_Msg_extr_from_CAN+0x79a>
 800568c:	3307      	adds	r3, #7
 800568e:	10db      	asrs	r3, r3, #3
 8005690:	b29a      	uxth	r2, r3
 8005692:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005696:	4413      	add	r3, r2
 8005698:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 800569c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056a0:	3308      	adds	r3, #8
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	b21b      	sxth	r3, r3
 80056a6:	425a      	negs	r2, r3
 80056a8:	f003 0307 	and.w	r3, r3, #7
 80056ac:	f002 0207 	and.w	r2, r2, #7
 80056b0:	bf58      	it	pl
 80056b2:	4253      	negpl	r3, r2
 80056b4:	b21b      	sxth	r3, r3
 80056b6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056ba:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	441a      	add	r2, r3
 80056c2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056c6:	2108      	movs	r1, #8
 80056c8:	4618      	mov	r0, r3
 80056ca:	f7fa ffa3 	bl	8000614 <ExtractBits>
 80056ce:	4603      	mov	r3, r0
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 80056d4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80056d8:	3308      	adds	r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	da00      	bge.n	80056e0 <Vital_Msg_extr_from_CAN+0x7ec>
 80056de:	3307      	adds	r3, #7
 80056e0:	10db      	asrs	r3, r3, #3
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80056e8:	4413      	add	r3, r2
 80056ea:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80056ee:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80056f2:	3308      	adds	r3, #8
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	b21b      	sxth	r3, r3
 80056f8:	425a      	negs	r2, r3
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	f002 0207 	and.w	r2, r2, #7
 8005702:	bf58      	it	pl
 8005704:	4253      	negpl	r3, r2
 8005706:	b21b      	sxth	r3, r3
 8005708:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 800570c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8005716:	2301      	movs	r3, #1
 8005718:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800571c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	441a      	add	r2, r3
 8005724:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005728:	2108      	movs	r1, #8
 800572a:	4618      	mov	r0, r3
 800572c:	f7fa ff72 	bl	8000614 <ExtractBits>
 8005730:	4603      	mov	r3, r0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8005738:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800573c:	3308      	adds	r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	da00      	bge.n	8005744 <Vital_Msg_extr_from_CAN+0x850>
 8005742:	3307      	adds	r3, #7
 8005744:	10db      	asrs	r3, r3, #3
 8005746:	b29a      	uxth	r2, r3
 8005748:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800574c:	4413      	add	r3, r2
 800574e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005752:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005756:	3308      	adds	r3, #8
 8005758:	b29b      	uxth	r3, r3
 800575a:	b21b      	sxth	r3, r3
 800575c:	425a      	negs	r2, r3
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	f002 0207 	and.w	r2, r2, #7
 8005766:	bf58      	it	pl
 8005768:	4253      	negpl	r3, r2
 800576a:	b21b      	sxth	r3, r3
 800576c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8005770:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005774:	4619      	mov	r1, r3
 8005776:	484b      	ldr	r0, [pc, #300]	; (80058a4 <Vital_Msg_extr_from_CAN+0x9b0>)
 8005778:	f020 fc22 	bl	8025fc0 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800577c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	441a      	add	r2, r3
 8005784:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005788:	2108      	movs	r1, #8
 800578a:	4618      	mov	r0, r3
 800578c:	f7fa ff42 	bl	8000614 <ExtractBits>
 8005790:	4603      	mov	r3, r0
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8005798:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800579c:	3308      	adds	r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	da00      	bge.n	80057a4 <Vital_Msg_extr_from_CAN+0x8b0>
 80057a2:	3307      	adds	r3, #7
 80057a4:	10db      	asrs	r3, r3, #3
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80057ac:	4413      	add	r3, r2
 80057ae:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80057b2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80057b6:	3308      	adds	r3, #8
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	b21b      	sxth	r3, r3
 80057bc:	425a      	negs	r2, r3
 80057be:	f003 0307 	and.w	r3, r3, #7
 80057c2:	f002 0207 	and.w	r2, r2, #7
 80057c6:	bf58      	it	pl
 80057c8:	4253      	negpl	r3, r2
 80057ca:	b21b      	sxth	r3, r3
 80057cc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 80057d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 80057dc:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 80057e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057e8:	08db      	lsrs	r3, r3, #3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	3301      	adds	r3, #1
 80057ee:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 80057f2:	e004      	b.n	80057fe <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 80057f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80057f8:	08db      	lsrs	r3, r3, #3
 80057fa:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80057fe:	2300      	movs	r3, #0
 8005800:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005804:	e040      	b.n	8005888 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005806:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	441a      	add	r2, r3
 800580e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005812:	2108      	movs	r1, #8
 8005814:	4618      	mov	r0, r3
 8005816:	f7fa fefd 	bl	8000614 <ExtractBits>
 800581a:	4602      	mov	r2, r0
 800581c:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005820:	b2d2      	uxtb	r2, r2
 8005822:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005826:	443b      	add	r3, r7
 8005828:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 800582c:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8005830:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005834:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005838:	443b      	add	r3, r7
 800583a:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 800583e:	461a      	mov	r2, r3
 8005840:	4819      	ldr	r0, [pc, #100]	; (80058a8 <Vital_Msg_extr_from_CAN+0x9b4>)
 8005842:	f020 fbbd 	bl	8025fc0 <iprintf>
		BITSTUFFINC(8);
 8005846:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800584a:	3308      	adds	r3, #8
 800584c:	2b00      	cmp	r3, #0
 800584e:	da00      	bge.n	8005852 <Vital_Msg_extr_from_CAN+0x95e>
 8005850:	3307      	adds	r3, #7
 8005852:	10db      	asrs	r3, r3, #3
 8005854:	b29a      	uxth	r2, r3
 8005856:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800585a:	4413      	add	r3, r2
 800585c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005860:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005864:	3308      	adds	r3, #8
 8005866:	b29b      	uxth	r3, r3
 8005868:	b21b      	sxth	r3, r3
 800586a:	425a      	negs	r2, r3
 800586c:	f003 0307 	and.w	r3, r3, #7
 8005870:	f002 0207 	and.w	r2, r2, #7
 8005874:	bf58      	it	pl
 8005876:	4253      	negpl	r3, r2
 8005878:	b21b      	sxth	r3, r3
 800587a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 800587e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005882:	3301      	adds	r3, #1
 8005884:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005888:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800588c:	b29b      	uxth	r3, r3
 800588e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005892:	429a      	cmp	r2, r3
 8005894:	d3b7      	bcc.n	8005806 <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8005896:	200a      	movs	r0, #10
 8005898:	f020 fbaa 	bl	8025ff0 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800589c:	2300      	movs	r3, #0
 800589e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 80058a2:	e037      	b.n	8005914 <Vital_Msg_extr_from_CAN+0xa20>
 80058a4:	08028358 	.word	0x08028358
 80058a8:	08028360 	.word	0x08028360
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058ac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	441a      	add	r2, r3
 80058b4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058b8:	2108      	movs	r1, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa feaa 	bl	8000614 <ExtractBits>
 80058c0:	4602      	mov	r2, r0
 80058c2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80058cc:	443b      	add	r3, r7
 80058ce:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 80058d2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80058d6:	3308      	adds	r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	da00      	bge.n	80058de <Vital_Msg_extr_from_CAN+0x9ea>
 80058dc:	3307      	adds	r3, #7
 80058de:	10db      	asrs	r3, r3, #3
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 80058e6:	4413      	add	r3, r2
 80058e8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 80058ec:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80058f0:	3308      	adds	r3, #8
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	425a      	negs	r2, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	f002 0207 	and.w	r2, r2, #7
 8005900:	bf58      	it	pl
 8005902:	4253      	negpl	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800590a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800590e:	3301      	adds	r3, #1
 8005910:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005914:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8005918:	b29b      	uxth	r3, r3
 800591a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 800591e:	429a      	cmp	r2, r3
 8005920:	d3c4      	bcc.n	80058ac <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005922:	f107 0308 	add.w	r3, r7, #8
 8005926:	3301      	adds	r3, #1
 8005928:	2210      	movs	r2, #16
 800592a:	2100      	movs	r1, #0
 800592c:	4618      	mov	r0, r3
 800592e:	f020 fa5f 	bl	8025df0 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005932:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 8005936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800593a:	1d59      	adds	r1, r3, #5
 800593c:	f107 0308 	add.w	r3, r7, #8
 8005940:	3301      	adds	r3, #1
 8005942:	4618      	mov	r0, r3
 8005944:	f020 fa2c 	bl	8025da0 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005948:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 800594c:	b21a      	sxth	r2, r3
 800594e:	f107 0308 	add.w	r3, r7, #8
 8005952:	3301      	adds	r3, #1
 8005954:	4619      	mov	r1, r3
 8005956:	2000      	movs	r0, #0
 8005958:	f00f fdd6 	bl	8015508 <GetCRC16>
 800595c:	4603      	mov	r3, r0
 800595e:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 8005960:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005964:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005966:	78bb      	ldrb	r3, [r7, #2]
 8005968:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 800596a:	78bb      	ldrb	r3, [r7, #2]
 800596c:	4a62      	ldr	r2, [pc, #392]	; (8005af8 <Vital_Msg_extr_from_CAN+0xc04>)
 800596e:	4413      	add	r3, r2
 8005970:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005974:	2b01      	cmp	r3, #1
 8005976:	f040 8082 	bne.w	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
 800597a:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 800597e:	2b01      	cmp	r3, #1
 8005980:	d17d      	bne.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
 8005982:	8b79      	ldrh	r1, [r7, #26]
 8005984:	78ba      	ldrb	r2, [r7, #2]
 8005986:	485d      	ldr	r0, [pc, #372]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4403      	add	r3, r0
 8005992:	3312      	adds	r3, #18
 8005994:	881b      	ldrh	r3, [r3, #0]
 8005996:	4299      	cmp	r1, r3
 8005998:	d071      	beq.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800599a:	78ba      	ldrb	r2, [r7, #2]
 800599c:	4613      	mov	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4413      	add	r3, r2
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	4a55      	ldr	r2, [pc, #340]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059a6:	4413      	add	r3, r2
 80059a8:	3301      	adds	r3, #1
 80059aa:	2210      	movs	r2, #16
 80059ac:	2100      	movs	r1, #0
 80059ae:	4618      	mov	r0, r3
 80059b0:	f020 fa1e 	bl	8025df0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80059b4:	78ba      	ldrb	r2, [r7, #2]
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4a4f      	ldr	r2, [pc, #316]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059c0:	4413      	add	r3, r2
 80059c2:	f107 0108 	add.w	r1, r7, #8
 80059c6:	2214      	movs	r2, #20
 80059c8:	4618      	mov	r0, r3
 80059ca:	f020 f9e9 	bl	8025da0 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80059ce:	78bb      	ldrb	r3, [r7, #2]
 80059d0:	494b      	ldr	r1, [pc, #300]	; (8005b00 <Vital_Msg_extr_from_CAN+0xc0c>)
 80059d2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80059d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80059da:	78bb      	ldrb	r3, [r7, #2]
 80059dc:	4a49      	ldr	r2, [pc, #292]	; (8005b04 <Vital_Msg_extr_from_CAN+0xc10>)
 80059de:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80059e2:	78ba      	ldrb	r2, [r7, #2]
 80059e4:	4845      	ldr	r0, [pc, #276]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059e6:	4613      	mov	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4403      	add	r3, r0
 80059f0:	3312      	adds	r3, #18
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	4299      	cmp	r1, r3
 80059f6:	d042      	beq.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80059f8:	78ba      	ldrb	r2, [r7, #2]
 80059fa:	78b9      	ldrb	r1, [r7, #2]
 80059fc:	483f      	ldr	r0, [pc, #252]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	4413      	add	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4403      	add	r3, r0
 8005a08:	3312      	adds	r3, #18
 8005a0a:	881a      	ldrh	r2, [r3, #0]
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	; (8005b04 <Vital_Msg_extr_from_CAN+0xc10>)
 8005a0e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005a12:	2214      	movs	r2, #20
 8005a14:	2100      	movs	r1, #0
 8005a16:	483c      	ldr	r0, [pc, #240]	; (8005b08 <Vital_Msg_extr_from_CAN+0xc14>)
 8005a18:	f020 f9ea 	bl	8025df0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005a1c:	78ba      	ldrb	r2, [r7, #2]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a35      	ldr	r2, [pc, #212]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005a28:	4413      	add	r3, r2
 8005a2a:	2214      	movs	r2, #20
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4836      	ldr	r0, [pc, #216]	; (8005b08 <Vital_Msg_extr_from_CAN+0xc14>)
 8005a30:	f020 f9b6 	bl	8025da0 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005a34:	f240 2007 	movw	r0, #519	; 0x207
 8005a38:	f00b fa92 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == RESET)
 8005a3c:	78bb      	ldrb	r3, [r7, #2]
 8005a3e:	4a33      	ldr	r2, [pc, #204]	; (8005b0c <Vital_Msg_extr_from_CAN+0xc18>)
 8005a40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <Vital_Msg_extr_from_CAN+0xb8a>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005a48:	78bb      	ldrb	r3, [r7, #2]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	4a30      	ldr	r2, [pc, #192]	; (8005b10 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005a4e:	4413      	add	r3, r2
 8005a50:	1c98      	adds	r0, r3, #2
 8005a52:	78ba      	ldrb	r2, [r7, #2]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4a27      	ldr	r2, [pc, #156]	; (8005afc <Vital_Msg_extr_from_CAN+0xc08>)
 8005a5e:	4413      	add	r3, r2
 8005a60:	3301      	adds	r3, #1
 8005a62:	2210      	movs	r2, #16
 8005a64:	4619      	mov	r1, r3
 8005a66:	f020 f99b 	bl	8025da0 <memcpy>
#if ENABLE_SIGNAL_PRINT
				PrintSignalsHitachi();
#endif

#ifdef EI_1
				ReArrangedVitalData();
 8005a6a:	f004 fe4b 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 8005a6e:	f240 1019 	movw	r0, #281	; 0x119
 8005a72:	f00b fa75 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005a76:	4a27      	ldr	r2, [pc, #156]	; (8005b14 <Vital_Msg_extr_from_CAN+0xc20>)
 8005a78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a7c:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005a7e:	78ba      	ldrb	r2, [r7, #2]
 8005a80:	4925      	ldr	r1, [pc, #148]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	00db      	lsls	r3, r3, #3
 8005a8a:	440b      	add	r3, r1
 8005a8c:	78ba      	ldrb	r2, [r7, #2]
 8005a8e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005a90:	78ba      	ldrb	r2, [r7, #2]
 8005a92:	4921      	ldr	r1, [pc, #132]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005a94:	4613      	mov	r3, r2
 8005a96:	005b      	lsls	r3, r3, #1
 8005a98:	4413      	add	r3, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3301      	adds	r3, #1
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005aa4:	2218      	movs	r2, #24
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	481c      	ldr	r0, [pc, #112]	; (8005b1c <Vital_Msg_extr_from_CAN+0xc28>)
 8005aaa:	f020 f9a1 	bl	8025df0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005aae:	78ba      	ldrb	r2, [r7, #2]
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	005b      	lsls	r3, r3, #1
 8005ab4:	4413      	add	r3, r2
 8005ab6:	00db      	lsls	r3, r3, #3
 8005ab8:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005aba:	4413      	add	r3, r2
 8005abc:	2218      	movs	r2, #24
 8005abe:	4619      	mov	r1, r3
 8005ac0:	4816      	ldr	r0, [pc, #88]	; (8005b1c <Vital_Msg_extr_from_CAN+0xc28>)
 8005ac2:	f020 f96d 	bl	8025da0 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005ac6:	f240 2001 	movw	r0, #513	; 0x201
 8005aca:	f00b fa49 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005ace:	78ba      	ldrb	r2, [r7, #2]
 8005ad0:	4911      	ldr	r1, [pc, #68]	; (8005b18 <Vital_Msg_extr_from_CAN+0xc24>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	440b      	add	r3, r1
 8005adc:	3301      	adds	r3, #1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005ae2:	78bb      	ldrb	r3, [r7, #2]
 8005ae4:	490e      	ldr	r1, [pc, #56]	; (8005b20 <Vital_Msg_extr_from_CAN+0xc2c>)
 8005ae6:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005aee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20000504 	.word	0x20000504
 8005afc:	20003598 	.word	0x20003598
 8005b00:	20002564 	.word	0x20002564
 8005b04:	2000258c 	.word	0x2000258c
 8005b08:	20003728 	.word	0x20003728
 8005b0c:	20002550 	.word	0x20002550
 8005b10:	20002770 	.word	0x20002770
 8005b14:	200024e4 	.word	0x200024e4
 8005b18:	20002da4 	.word	0x20002da4
 8005b1c:	20002f84 	.word	0x20002f84
 8005b20:	200024b8 	.word	0x200024b8

08005b24 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005b24:	b590      	push	{r4, r7, lr}
 8005b26:	b095      	sub	sp, #84	; 0x54
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	4608      	mov	r0, r1
 8005b2e:	4611      	mov	r1, r2
 8005b30:	461a      	mov	r2, r3
 8005b32:	4603      	mov	r3, r0
 8005b34:	70fb      	strb	r3, [r7, #3]
 8005b36:	460b      	mov	r3, r1
 8005b38:	70bb      	strb	r3, [r7, #2]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 8005b3e:	2300      	movs	r3, #0
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	f107 030c 	add.w	r3, r7, #12
 8005b46:	2224      	movs	r2, #36	; 0x24
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f020 f950 	bl	8025df0 <memset>
	uint8_t uc_index = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005b56:	2300      	movs	r3, #0
 8005b58:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = RESET;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005b64:	f013 fb16 	bl	8019194 <HAL_GetTick>
 8005b68:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 8005b70:	2300      	movs	r3, #0
 8005b72:	873b      	strh	r3, [r7, #56]	; 0x38
 8005b74:	2300      	movs	r3, #0
 8005b76:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005b78:	499a      	ldr	r1, [pc, #616]	; (8005de4 <Status_Msg_Extr+0x2c0>)
 8005b7a:	489b      	ldr	r0, [pc, #620]	; (8005de8 <Status_Msg_Extr+0x2c4>)
 8005b7c:	f7fa fb60 	bl	8000240 <strcmp>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 812c 	beq.w	8005de0 <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005b88:	4b98      	ldr	r3, [pc, #608]	; (8005dec <Status_Msg_Extr+0x2c8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02c      	beq.n	8005bee <Status_Msg_Extr+0xca>
 8005b94:	4b95      	ldr	r3, [pc, #596]	; (8005dec <Status_Msg_Extr+0x2c8>)
 8005b96:	791b      	ldrb	r3, [r3, #4]
 8005b98:	78ba      	ldrb	r2, [r7, #2]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d127      	bne.n	8005bee <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 8005ba2:	4893      	ldr	r0, [pc, #588]	; (8005df0 <Status_Msg_Extr+0x2cc>)
 8005ba4:	f017 feb4 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	4b92      	ldr	r3, [pc, #584]	; (8005df4 <Status_Msg_Extr+0x2d0>)
 8005bac:	fba3 1302 	umull	r1, r3, r3, r2
 8005bb0:	0bd9      	lsrs	r1, r3, #15
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	041b      	lsls	r3, r3, #16
 8005bb6:	1a5b      	subs	r3, r3, r1
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 8005bbc:	488e      	ldr	r0, [pc, #568]	; (8005df8 <Status_Msg_Extr+0x2d4>)
 8005bbe:	f020 fa9b 	bl	80260f8 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bc2:	78bb      	ldrb	r3, [r7, #2]
 8005bc4:	4a8d      	ldr	r2, [pc, #564]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	4413      	add	r3, r2
 8005bca:	3308      	adds	r3, #8
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4619      	mov	r1, r3
 8005bd0:	488b      	ldr	r0, [pc, #556]	; (8005e00 <Status_Msg_Extr+0x2dc>)
 8005bd2:	f020 f9f5 	bl	8025fc0 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005bd6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bd8:	488a      	ldr	r0, [pc, #552]	; (8005e04 <Status_Msg_Extr+0x2e0>)
 8005bda:	f020 f9f1 	bl	8025fc0 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 8005bde:	f107 0208 	add.w	r2, r7, #8
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2118      	movs	r1, #24
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7fa fda0 	bl	800072c <InsertBits>
	{
 8005bec:	e00b      	b.n	8005c06 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005bee:	78bb      	ldrb	r3, [r7, #2]
 8005bf0:	4a82      	ldr	r2, [pc, #520]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005bf2:	011b      	lsls	r3, r3, #4
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3308      	adds	r3, #8
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f107 0208 	add.w	r2, r7, #8
 8005bfe:	2118      	movs	r1, #24
 8005c00:	2000      	movs	r0, #0
 8005c02:	f7fa fd93 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c06:	2300      	movs	r3, #0
 8005c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c0c:	e010      	b.n	8005c30 <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005c0e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	441a      	add	r2, r3
 8005c16:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c1a:	3303      	adds	r3, #3
 8005c1c:	7812      	ldrb	r2, [r2, #0]
 8005c1e:	3350      	adds	r3, #80	; 0x50
 8005c20:	443b      	add	r3, r7
 8005c22:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005c26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005c30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	3b05      	subs	r3, #5
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	dbe8      	blt.n	8005c0e <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005c3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	3303      	adds	r3, #3
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	f107 0308 	add.w	r3, r7, #8
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f00f fd15 	bl	801567c <CalculateDirectReverseCrc>
 8005c52:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005c54:	78fb      	ldrb	r3, [r7, #3]
 8005c56:	3b05      	subs	r3, #5
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	441a      	add	r2, r3
 8005c5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005c5e:	2120      	movs	r1, #32
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fa fcd7 	bl	8000614 <ExtractBits>
 8005c66:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005c68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	f000 80df 	beq.w	8005e30 <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3305      	adds	r3, #5
 8005c76:	461a      	mov	r2, r3
 8005c78:	2108      	movs	r1, #8
 8005c7a:	2000      	movs	r0, #0
 8005c7c:	f7fa fcca 	bl	8000614 <ExtractBits>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005c86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d004      	beq.n	8005c98 <Status_Msg_Extr+0x174>
 8005c8e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	f040 8090 	bne.w	8005db8 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005c98:	78bb      	ldrb	r3, [r7, #2]
 8005c9a:	4a5b      	ldr	r2, [pc, #364]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005c9c:	3366      	adds	r3, #102	; 0x66
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	4859      	ldr	r0, [pc, #356]	; (8005e0c <Status_Msg_Extr+0x2e8>)
 8005ca8:	f020 f98a 	bl	8025fc0 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 8005cac:	f107 0308 	add.w	r3, r7, #8
 8005cb0:	2228      	movs	r2, #40	; 0x28
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f020 f89b 	bl	8025df0 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8005cba:	78bb      	ldrb	r3, [r7, #2]
 8005cbc:	4a4f      	ldr	r2, [pc, #316]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005cbe:	011b      	lsls	r3, r3, #4
 8005cc0:	4413      	add	r3, r2
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	f107 0208 	add.w	r2, r7, #8
 8005ccc:	2118      	movs	r1, #24
 8005cce:	2000      	movs	r0, #0
 8005cd0:	f7fa fd2c 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cda:	e010      	b.n	8005cfe <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005cdc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	441a      	add	r2, r3
 8005ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ce8:	3303      	adds	r3, #3
 8005cea:	7812      	ldrb	r2, [r2, #0]
 8005cec:	3350      	adds	r3, #80	; 0x50
 8005cee:	443b      	add	r3, r7
 8005cf0:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005cf4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005cfe:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005d02:	78fb      	ldrb	r3, [r7, #3]
 8005d04:	3b05      	subs	r3, #5
 8005d06:	429a      	cmp	r2, r3
 8005d08:	dbe8      	blt.n	8005cdc <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005d0a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	3303      	adds	r3, #3
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f107 0308 	add.w	r3, r7, #8
 8005d18:	4611      	mov	r1, r2
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f00f fcae 	bl	801567c <CalculateDirectReverseCrc>
 8005d20:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 8005d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d132      	bne.n	8005d90 <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005d2a:	4839      	ldr	r0, [pc, #228]	; (8005e10 <Status_Msg_Extr+0x2ec>)
 8005d2c:	f020 f9e4 	bl	80260f8 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d30:	78bb      	ldrb	r3, [r7, #2]
 8005d32:	4a32      	ldr	r2, [pc, #200]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	4413      	add	r3, r2
 8005d38:	3308      	adds	r3, #8
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4619      	mov	r1, r3
 8005d3e:	4835      	ldr	r0, [pc, #212]	; (8005e14 <Status_Msg_Extr+0x2f0>)
 8005d40:	f020 f93e 	bl	8025fc0 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d44:	78bb      	ldrb	r3, [r7, #2]
 8005d46:	492d      	ldr	r1, [pc, #180]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d48:	011a      	lsls	r2, r3, #4
 8005d4a:	440a      	add	r2, r1
 8005d4c:	3208      	adds	r2, #8
 8005d4e:	6812      	ldr	r2, [r2, #0]
 8005d50:	3201      	adds	r2, #1
 8005d52:	492a      	ldr	r1, [pc, #168]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d54:	011b      	lsls	r3, r3, #4
 8005d56:	440b      	add	r3, r1
 8005d58:	3308      	adds	r3, #8
 8005d5a:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005d5c:	78bb      	ldrb	r3, [r7, #2]
 8005d5e:	4a27      	ldr	r2, [pc, #156]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d60:	011b      	lsls	r3, r3, #4
 8005d62:	4413      	add	r3, r2
 8005d64:	3308      	adds	r3, #8
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	482b      	ldr	r0, [pc, #172]	; (8005e18 <Status_Msg_Extr+0x2f4>)
 8005d6c:	f020 f928 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005d70:	78bb      	ldrb	r3, [r7, #2]
 8005d72:	78ba      	ldrb	r2, [r7, #2]
 8005d74:	4921      	ldr	r1, [pc, #132]	; (8005dfc <Status_Msg_Extr+0x2d8>)
 8005d76:	011b      	lsls	r3, r3, #4
 8005d78:	440b      	add	r3, r1
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	6819      	ldr	r1, [r3, #0]
 8005d7e:	4827      	ldr	r0, [pc, #156]	; (8005e1c <Status_Msg_Extr+0x2f8>)
 8005d80:	4613      	mov	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	4413      	add	r3, r2
 8005d86:	00db      	lsls	r3, r3, #3
 8005d88:	4403      	add	r3, r0
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 8005d8e:	e050      	b.n	8005e32 <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005d90:	78bb      	ldrb	r3, [r7, #2]
 8005d92:	4a1d      	ldr	r2, [pc, #116]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005d94:	3366      	adds	r3, #102	; 0x66
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	4413      	add	r3, r2
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4820      	ldr	r0, [pc, #128]	; (8005e20 <Status_Msg_Extr+0x2fc>)
 8005da0:	f020 f90e 	bl	8025fc0 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005da4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005da6:	481f      	ldr	r0, [pc, #124]	; (8005e24 <Status_Msg_Extr+0x300>)
 8005da8:	f020 f90a 	bl	8025fc0 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005dac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dae:	481e      	ldr	r0, [pc, #120]	; (8005e28 <Status_Msg_Extr+0x304>)
 8005db0:	f020 f906 	bl	8025fc0 <iprintf>
				return;
 8005db4:	f000 bca7 	b.w	8006706 <Status_Msg_Extr+0xbe2>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005db8:	78bb      	ldrb	r3, [r7, #2]
 8005dba:	4a13      	ldr	r2, [pc, #76]	; (8005e08 <Status_Msg_Extr+0x2e4>)
 8005dbc:	3366      	adds	r3, #102	; 0x66
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4819      	ldr	r0, [pc, #100]	; (8005e2c <Status_Msg_Extr+0x308>)
 8005dc8:	f020 f8fa 	bl	8025fc0 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005dcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005dce:	4815      	ldr	r0, [pc, #84]	; (8005e24 <Status_Msg_Extr+0x300>)
 8005dd0:	f020 f8f6 	bl	8025fc0 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005dd4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dd6:	4814      	ldr	r0, [pc, #80]	; (8005e28 <Status_Msg_Extr+0x304>)
 8005dd8:	f020 f8f2 	bl	8025fc0 <iprintf>
			return;
 8005ddc:	f000 bc93 	b.w	8006706 <Status_Msg_Extr+0xbe2>
		goto ROLLOVER_STATUS;
 8005de0:	bf00      	nop
 8005de2:	e026      	b.n	8005e32 <Status_Msg_Extr+0x30e>
 8005de4:	08027ad0 	.word	0x08027ad0
 8005de8:	20000505 	.word	0x20000505
 8005dec:	2000308c 	.word	0x2000308c
 8005df0:	2000bc54 	.word	0x2000bc54
 8005df4:	80008001 	.word	0x80008001
 8005df8:	08028370 	.word	0x08028370
 8005dfc:	200028f4 	.word	0x200028f4
 8005e00:	08028390 	.word	0x08028390
 8005e04:	0802801c 	.word	0x0802801c
 8005e08:	20000504 	.word	0x20000504
 8005e0c:	080283b4 	.word	0x080283b4
 8005e10:	08028060 	.word	0x08028060
 8005e14:	080283d8 	.word	0x080283d8
 8005e18:	080283f0 	.word	0x080283f0
 8005e1c:	20002da4 	.word	0x20002da4
 8005e20:	08028408 	.word	0x08028408
 8005e24:	08027d14 	.word	0x08027d14
 8005e28:	08027d24 	.word	0x08027d24
 8005e2c:	08028428 	.word	0x08028428
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 8005e30:	bf00      	nop

	BITSTUFFINC(8);
 8005e32:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e36:	3308      	adds	r3, #8
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	da00      	bge.n	8005e3e <Status_Msg_Extr+0x31a>
 8005e3c:	3307      	adds	r3, #7
 8005e3e:	10db      	asrs	r3, r3, #3
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e44:	4413      	add	r3, r2
 8005e46:	873b      	strh	r3, [r7, #56]	; 0x38
 8005e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e4a:	3308      	adds	r3, #8
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	425a      	negs	r2, r3
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	f002 0207 	and.w	r2, r2, #7
 8005e5a:	bf58      	it	pl
 8005e5c:	4253      	negpl	r3, r2
 8005e5e:	b21b      	sxth	r3, r3
 8005e60:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005e62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	441a      	add	r2, r3
 8005e68:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005e6a:	2110      	movs	r1, #16
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f7fa fbd1 	bl	8000614 <ExtractBits>
 8005e72:	4603      	mov	r3, r0
 8005e74:	78ba      	ldrb	r2, [r7, #2]
 8005e76:	b298      	uxth	r0, r3
 8005e78:	49ab      	ldr	r1, [pc, #684]	; (8006128 <Status_Msg_Extr+0x604>)
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	005b      	lsls	r3, r3, #1
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	440b      	add	r3, r1
 8005e84:	3306      	adds	r3, #6
 8005e86:	4602      	mov	r2, r0
 8005e88:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005e8a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005e8e:	3310      	adds	r3, #16
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	da00      	bge.n	8005e96 <Status_Msg_Extr+0x372>
 8005e94:	3307      	adds	r3, #7
 8005e96:	10db      	asrs	r3, r3, #3
 8005e98:	b29a      	uxth	r2, r3
 8005e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005e9c:	4413      	add	r3, r2
 8005e9e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ea0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ea2:	3310      	adds	r3, #16
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	425a      	negs	r2, r3
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	f002 0207 	and.w	r2, r2, #7
 8005eb2:	bf58      	it	pl
 8005eb4:	4253      	negpl	r3, r2
 8005eb6:	b21b      	sxth	r3, r3
 8005eb8:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8005eba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	441a      	add	r2, r3
 8005ec0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005ec2:	2110      	movs	r1, #16
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fa fba5 	bl	8000614 <ExtractBits>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	78ba      	ldrb	r2, [r7, #2]
 8005ece:	b298      	uxth	r0, r3
 8005ed0:	4995      	ldr	r1, [pc, #596]	; (8006128 <Status_Msg_Extr+0x604>)
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3304      	adds	r3, #4
 8005ede:	4602      	mov	r2, r0
 8005ee0:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8005ee2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005ee6:	3310      	adds	r3, #16
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da00      	bge.n	8005eee <Status_Msg_Extr+0x3ca>
 8005eec:	3307      	adds	r3, #7
 8005eee:	10db      	asrs	r3, r3, #3
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005ef4:	4413      	add	r3, r2
 8005ef6:	873b      	strh	r3, [r7, #56]	; 0x38
 8005ef8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005efa:	3310      	adds	r3, #16
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	b21b      	sxth	r3, r3
 8005f00:	425a      	negs	r2, r3
 8005f02:	f003 0307 	and.w	r3, r3, #7
 8005f06:	f002 0207 	and.w	r2, r2, #7
 8005f0a:	bf58      	it	pl
 8005f0c:	4253      	negpl	r3, r2
 8005f0e:	b21b      	sxth	r3, r3
 8005f10:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f12:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	441a      	add	r2, r3
 8005f18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f1a:	2108      	movs	r1, #8
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fa fb79 	bl	8000614 <ExtractBits>
 8005f22:	4602      	mov	r2, r0
 8005f24:	78bb      	ldrb	r3, [r7, #2]
 8005f26:	b2d1      	uxtb	r1, r2
 8005f28:	4a80      	ldr	r2, [pc, #512]	; (800612c <Status_Msg_Extr+0x608>)
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3302      	adds	r3, #2
 8005f30:	460a      	mov	r2, r1
 8005f32:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005f34:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005f38:	3308      	adds	r3, #8
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	da00      	bge.n	8005f40 <Status_Msg_Extr+0x41c>
 8005f3e:	3307      	adds	r3, #7
 8005f40:	10db      	asrs	r3, r3, #3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f46:	4413      	add	r3, r2
 8005f48:	873b      	strh	r3, [r7, #56]	; 0x38
 8005f4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f4c:	3308      	adds	r3, #8
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	b21b      	sxth	r3, r3
 8005f52:	425a      	negs	r2, r3
 8005f54:	f003 0307 	and.w	r3, r3, #7
 8005f58:	f002 0207 	and.w	r2, r2, #7
 8005f5c:	bf58      	it	pl
 8005f5e:	4253      	negpl	r3, r2
 8005f60:	b21b      	sxth	r3, r3
 8005f62:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005f64:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005f66:	687a      	ldr	r2, [r7, #4]
 8005f68:	441a      	add	r2, r3
 8005f6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fa fb50 	bl	8000614 <ExtractBits>
 8005f74:	4602      	mov	r2, r0
 8005f76:	78bb      	ldrb	r3, [r7, #2]
 8005f78:	b2d1      	uxtb	r1, r2
 8005f7a:	4a6c      	ldr	r2, [pc, #432]	; (800612c <Status_Msg_Extr+0x608>)
 8005f7c:	011b      	lsls	r3, r3, #4
 8005f7e:	4413      	add	r3, r2
 8005f80:	3301      	adds	r3, #1
 8005f82:	460a      	mov	r2, r1
 8005f84:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005f86:	78bb      	ldrb	r3, [r7, #2]
 8005f88:	4a68      	ldr	r2, [pc, #416]	; (800612c <Status_Msg_Extr+0x608>)
 8005f8a:	011b      	lsls	r3, r3, #4
 8005f8c:	4413      	add	r3, r2
 8005f8e:	3301      	adds	r3, #1
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d138      	bne.n	8006008 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005f96:	78bb      	ldrb	r3, [r7, #2]
 8005f98:	4a65      	ldr	r2, [pc, #404]	; (8006130 <Status_Msg_Extr+0x60c>)
 8005f9a:	3366      	adds	r3, #102	; 0x66
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4413      	add	r3, r2
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4863      	ldr	r0, [pc, #396]	; (8006134 <Status_Msg_Extr+0x610>)
 8005fa6:	f020 f80b 	bl	8025fc0 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005faa:	78bb      	ldrb	r3, [r7, #2]
 8005fac:	4a5f      	ldr	r2, [pc, #380]	; (800612c <Status_Msg_Extr+0x608>)
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	330c      	adds	r3, #12
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	485f      	ldr	r0, [pc, #380]	; (8006138 <Status_Msg_Extr+0x614>)
 8005fba:	f020 f801 	bl	8025fc0 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fbe:	78bb      	ldrb	r3, [r7, #2]
 8005fc0:	495a      	ldr	r1, [pc, #360]	; (800612c <Status_Msg_Extr+0x608>)
 8005fc2:	011a      	lsls	r2, r3, #4
 8005fc4:	440a      	add	r2, r1
 8005fc6:	320c      	adds	r2, #12
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	3201      	adds	r2, #1
 8005fcc:	4957      	ldr	r1, [pc, #348]	; (800612c <Status_Msg_Extr+0x608>)
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	440b      	add	r3, r1
 8005fd2:	330c      	adds	r3, #12
 8005fd4:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005fd6:	78bb      	ldrb	r3, [r7, #2]
 8005fd8:	4a54      	ldr	r2, [pc, #336]	; (800612c <Status_Msg_Extr+0x608>)
 8005fda:	011b      	lsls	r3, r3, #4
 8005fdc:	4413      	add	r3, r2
 8005fde:	330c      	adds	r3, #12
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	4855      	ldr	r0, [pc, #340]	; (800613c <Status_Msg_Extr+0x618>)
 8005fe6:	f01f ffeb 	bl	8025fc0 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005fea:	78bb      	ldrb	r3, [r7, #2]
 8005fec:	78ba      	ldrb	r2, [r7, #2]
 8005fee:	494f      	ldr	r1, [pc, #316]	; (800612c <Status_Msg_Extr+0x608>)
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	440b      	add	r3, r1
 8005ff4:	330c      	adds	r3, #12
 8005ff6:	6819      	ldr	r1, [r3, #0]
 8005ff8:	4851      	ldr	r0, [pc, #324]	; (8006140 <Status_Msg_Extr+0x61c>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4403      	add	r3, r0
 8006004:	330c      	adds	r3, #12
 8006006:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8006008:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800600c:	3308      	adds	r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	da00      	bge.n	8006014 <Status_Msg_Extr+0x4f0>
 8006012:	3307      	adds	r3, #7
 8006014:	10db      	asrs	r3, r3, #3
 8006016:	b29a      	uxth	r2, r3
 8006018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800601a:	4413      	add	r3, r2
 800601c:	873b      	strh	r3, [r7, #56]	; 0x38
 800601e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006020:	3308      	adds	r3, #8
 8006022:	b29b      	uxth	r3, r3
 8006024:	b21b      	sxth	r3, r3
 8006026:	425a      	negs	r2, r3
 8006028:	f003 0307 	and.w	r3, r3, #7
 800602c:	f002 0207 	and.w	r2, r2, #7
 8006030:	bf58      	it	pl
 8006032:	4253      	negpl	r3, r2
 8006034:	b21b      	sxth	r3, r3
 8006036:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006038:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	441a      	add	r2, r3
 800603e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006040:	2108      	movs	r1, #8
 8006042:	4618      	mov	r0, r3
 8006044:	f7fa fae6 	bl	8000614 <ExtractBits>
 8006048:	4603      	mov	r3, r0
 800604a:	78ba      	ldrb	r2, [r7, #2]
 800604c:	b2d8      	uxtb	r0, r3
 800604e:	4936      	ldr	r1, [pc, #216]	; (8006128 <Status_Msg_Extr+0x604>)
 8006050:	4613      	mov	r3, r2
 8006052:	005b      	lsls	r3, r3, #1
 8006054:	4413      	add	r3, r2
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	440b      	add	r3, r1
 800605a:	3302      	adds	r3, #2
 800605c:	4602      	mov	r2, r0
 800605e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006060:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006064:	3308      	adds	r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	da00      	bge.n	800606c <Status_Msg_Extr+0x548>
 800606a:	3307      	adds	r3, #7
 800606c:	10db      	asrs	r3, r3, #3
 800606e:	b29a      	uxth	r2, r3
 8006070:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006072:	4413      	add	r3, r2
 8006074:	873b      	strh	r3, [r7, #56]	; 0x38
 8006076:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006078:	3308      	adds	r3, #8
 800607a:	b29b      	uxth	r3, r3
 800607c:	b21b      	sxth	r3, r3
 800607e:	425a      	negs	r2, r3
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	f002 0207 	and.w	r2, r2, #7
 8006088:	bf58      	it	pl
 800608a:	4253      	negpl	r3, r2
 800608c:	b21b      	sxth	r3, r3
 800608e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	441a      	add	r2, r3
 8006096:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006098:	2110      	movs	r1, #16
 800609a:	4618      	mov	r0, r3
 800609c:	f7fa faba 	bl	8000614 <ExtractBits>
 80060a0:	4602      	mov	r2, r0
 80060a2:	78bb      	ldrb	r3, [r7, #2]
 80060a4:	b291      	uxth	r1, r2
 80060a6:	4a21      	ldr	r2, [pc, #132]	; (800612c <Status_Msg_Extr+0x608>)
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4413      	add	r3, r2
 80060ac:	3304      	adds	r3, #4
 80060ae:	460a      	mov	r2, r1
 80060b0:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80060b2:	4924      	ldr	r1, [pc, #144]	; (8006144 <Status_Msg_Extr+0x620>)
 80060b4:	4824      	ldr	r0, [pc, #144]	; (8006148 <Status_Msg_Extr+0x624>)
 80060b6:	f7fa f8c3 	bl	8000240 <strcmp>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80060c0:	78bb      	ldrb	r3, [r7, #2]
 80060c2:	4a1a      	ldr	r2, [pc, #104]	; (800612c <Status_Msg_Extr+0x608>)
 80060c4:	011b      	lsls	r3, r3, #4
 80060c6:	4413      	add	r3, r2
 80060c8:	3304      	adds	r3, #4
 80060ca:	881a      	ldrh	r2, [r3, #0]
 80060cc:	78bb      	ldrb	r3, [r7, #2]
 80060ce:	f042 0208 	orr.w	r2, r2, #8
 80060d2:	b291      	uxth	r1, r2
 80060d4:	4a15      	ldr	r2, [pc, #84]	; (800612c <Status_Msg_Extr+0x608>)
 80060d6:	011b      	lsls	r3, r3, #4
 80060d8:	4413      	add	r3, r2
 80060da:	3304      	adds	r3, #4
 80060dc:	460a      	mov	r2, r1
 80060de:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80060e0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80060e4:	3310      	adds	r3, #16
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	da00      	bge.n	80060ec <Status_Msg_Extr+0x5c8>
 80060ea:	3307      	adds	r3, #7
 80060ec:	10db      	asrs	r3, r3, #3
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060f2:	4413      	add	r3, r2
 80060f4:	873b      	strh	r3, [r7, #56]	; 0x38
 80060f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060f8:	3310      	adds	r3, #16
 80060fa:	b29b      	uxth	r3, r3
 80060fc:	b21b      	sxth	r3, r3
 80060fe:	425a      	negs	r2, r3
 8006100:	f003 0307 	and.w	r3, r3, #7
 8006104:	f002 0207 	and.w	r2, r2, #7
 8006108:	bf58      	it	pl
 800610a:	4253      	negpl	r3, r2
 800610c:	b21b      	sxth	r3, r3
 800610e:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 8006110:	78bb      	ldrb	r3, [r7, #2]
 8006112:	4a06      	ldr	r2, [pc, #24]	; (800612c <Status_Msg_Extr+0x608>)
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	4413      	add	r3, r2
 8006118:	3304      	adds	r3, #4
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 812a 	beq.w	800637a <Status_Msg_Extr+0x856>
 8006126:	e011      	b.n	800614c <Status_Msg_Extr+0x628>
 8006128:	20002d2c 	.word	0x20002d2c
 800612c:	200028f4 	.word	0x200028f4
 8006130:	20000504 	.word	0x20000504
 8006134:	08028118 	.word	0x08028118
 8006138:	08028440 	.word	0x08028440
 800613c:	0802844c 	.word	0x0802844c
 8006140:	20002da4 	.word	0x20002da4
 8006144:	08027ad0 	.word	0x08027ad0
 8006148:	20000505 	.word	0x20000505
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800614c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	441a      	add	r2, r3
 8006152:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006154:	2108      	movs	r1, #8
 8006156:	4618      	mov	r0, r3
 8006158:	f7fa fa5c 	bl	8000614 <ExtractBits>
 800615c:	4603      	mov	r3, r0
 800615e:	78ba      	ldrb	r2, [r7, #2]
 8006160:	b2d8      	uxtb	r0, r3
 8006162:	49b0      	ldr	r1, [pc, #704]	; (8006424 <Status_Msg_Extr+0x900>)
 8006164:	4613      	mov	r3, r2
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	4413      	add	r3, r2
 800616a:	005b      	lsls	r3, r3, #1
 800616c:	440b      	add	r3, r1
 800616e:	3305      	adds	r3, #5
 8006170:	4602      	mov	r2, r0
 8006172:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006174:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006178:	3308      	adds	r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	da00      	bge.n	8006180 <Status_Msg_Extr+0x65c>
 800617e:	3307      	adds	r3, #7
 8006180:	10db      	asrs	r3, r3, #3
 8006182:	b29a      	uxth	r2, r3
 8006184:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006186:	4413      	add	r3, r2
 8006188:	873b      	strh	r3, [r7, #56]	; 0x38
 800618a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800618c:	3308      	adds	r3, #8
 800618e:	b29b      	uxth	r3, r3
 8006190:	b21b      	sxth	r3, r3
 8006192:	425a      	negs	r2, r3
 8006194:	f003 0307 	and.w	r3, r3, #7
 8006198:	f002 0207 	and.w	r2, r2, #7
 800619c:	bf58      	it	pl
 800619e:	4253      	negpl	r3, r2
 80061a0:	b21b      	sxth	r3, r3
 80061a2:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	441a      	add	r2, r3
 80061aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061ac:	2108      	movs	r1, #8
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa fa30 	bl	8000614 <ExtractBits>
 80061b4:	4603      	mov	r3, r0
 80061b6:	78ba      	ldrb	r2, [r7, #2]
 80061b8:	b2d8      	uxtb	r0, r3
 80061ba:	499a      	ldr	r1, [pc, #616]	; (8006424 <Status_Msg_Extr+0x900>)
 80061bc:	4613      	mov	r3, r2
 80061be:	005b      	lsls	r3, r3, #1
 80061c0:	4413      	add	r3, r2
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	440b      	add	r3, r1
 80061c6:	3304      	adds	r3, #4
 80061c8:	4602      	mov	r2, r0
 80061ca:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80061cc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80061d0:	3308      	adds	r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da00      	bge.n	80061d8 <Status_Msg_Extr+0x6b4>
 80061d6:	3307      	adds	r3, #7
 80061d8:	10db      	asrs	r3, r3, #3
 80061da:	b29a      	uxth	r2, r3
 80061dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061de:	4413      	add	r3, r2
 80061e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80061e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80061e4:	3308      	adds	r3, #8
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	b21b      	sxth	r3, r3
 80061ea:	425a      	negs	r2, r3
 80061ec:	f003 0307 	and.w	r3, r3, #7
 80061f0:	f002 0207 	and.w	r2, r2, #7
 80061f4:	bf58      	it	pl
 80061f6:	4253      	negpl	r3, r2
 80061f8:	b21b      	sxth	r3, r3
 80061fa:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80061fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	441a      	add	r2, r3
 8006202:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006204:	2108      	movs	r1, #8
 8006206:	4618      	mov	r0, r3
 8006208:	f7fa fa04 	bl	8000614 <ExtractBits>
 800620c:	4603      	mov	r3, r0
 800620e:	78ba      	ldrb	r2, [r7, #2]
 8006210:	b2d8      	uxtb	r0, r3
 8006212:	4984      	ldr	r1, [pc, #528]	; (8006424 <Status_Msg_Extr+0x900>)
 8006214:	4613      	mov	r3, r2
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	4413      	add	r3, r2
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	440b      	add	r3, r1
 800621e:	3303      	adds	r3, #3
 8006220:	4602      	mov	r2, r0
 8006222:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8006224:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8006228:	3308      	adds	r3, #8
 800622a:	2b00      	cmp	r3, #0
 800622c:	da00      	bge.n	8006230 <Status_Msg_Extr+0x70c>
 800622e:	3307      	adds	r3, #7
 8006230:	10db      	asrs	r3, r3, #3
 8006232:	b29a      	uxth	r2, r3
 8006234:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006236:	4413      	add	r3, r2
 8006238:	873b      	strh	r3, [r7, #56]	; 0x38
 800623a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800623c:	3308      	adds	r3, #8
 800623e:	b29b      	uxth	r3, r3
 8006240:	b21b      	sxth	r3, r3
 8006242:	425a      	negs	r2, r3
 8006244:	f003 0307 	and.w	r3, r3, #7
 8006248:	f002 0207 	and.w	r2, r2, #7
 800624c:	bf58      	it	pl
 800624e:	4253      	negpl	r3, r2
 8006250:	b21b      	sxth	r3, r3
 8006252:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006254:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	441a      	add	r2, r3
 800625a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800625c:	2108      	movs	r1, #8
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa f9d8 	bl	8000614 <ExtractBits>
 8006264:	4603      	mov	r3, r0
 8006266:	78ba      	ldrb	r2, [r7, #2]
 8006268:	b2d8      	uxtb	r0, r3
 800626a:	496e      	ldr	r1, [pc, #440]	; (8006424 <Status_Msg_Extr+0x900>)
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	440b      	add	r3, r1
 8006276:	4602      	mov	r2, r0
 8006278:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800627a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800627e:	3308      	adds	r3, #8
 8006280:	2b00      	cmp	r3, #0
 8006282:	da00      	bge.n	8006286 <Status_Msg_Extr+0x762>
 8006284:	3307      	adds	r3, #7
 8006286:	10db      	asrs	r3, r3, #3
 8006288:	b29a      	uxth	r2, r3
 800628a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800628c:	4413      	add	r3, r2
 800628e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006290:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006292:	3308      	adds	r3, #8
 8006294:	b29b      	uxth	r3, r3
 8006296:	b21b      	sxth	r3, r3
 8006298:	425a      	negs	r2, r3
 800629a:	f003 0307 	and.w	r3, r3, #7
 800629e:	f002 0207 	and.w	r2, r2, #7
 80062a2:	bf58      	it	pl
 80062a4:	4253      	negpl	r3, r2
 80062a6:	b21b      	sxth	r3, r3
 80062a8:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80062aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	441a      	add	r2, r3
 80062b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062b2:	2108      	movs	r1, #8
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7fa f9ad 	bl	8000614 <ExtractBits>
 80062ba:	4603      	mov	r3, r0
 80062bc:	78ba      	ldrb	r2, [r7, #2]
 80062be:	b2d8      	uxtb	r0, r3
 80062c0:	4958      	ldr	r1, [pc, #352]	; (8006424 <Status_Msg_Extr+0x900>)
 80062c2:	4613      	mov	r3, r2
 80062c4:	005b      	lsls	r3, r3, #1
 80062c6:	4413      	add	r3, r2
 80062c8:	005b      	lsls	r3, r3, #1
 80062ca:	440b      	add	r3, r1
 80062cc:	3301      	adds	r3, #1
 80062ce:	4602      	mov	r2, r0
 80062d0:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80062d2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80062d6:	3308      	adds	r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da00      	bge.n	80062de <Status_Msg_Extr+0x7ba>
 80062dc:	3307      	adds	r3, #7
 80062de:	10db      	asrs	r3, r3, #3
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80062e4:	4413      	add	r3, r2
 80062e6:	873b      	strh	r3, [r7, #56]	; 0x38
 80062e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80062ea:	3308      	adds	r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	425a      	negs	r2, r3
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	f002 0207 	and.w	r2, r2, #7
 80062fa:	bf58      	it	pl
 80062fc:	4253      	negpl	r3, r2
 80062fe:	b21b      	sxth	r3, r3
 8006300:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006302:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	441a      	add	r2, r3
 8006308:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800630a:	2108      	movs	r1, #8
 800630c:	4618      	mov	r0, r3
 800630e:	f7fa f981 	bl	8000614 <ExtractBits>
 8006312:	4603      	mov	r3, r0
 8006314:	78ba      	ldrb	r2, [r7, #2]
 8006316:	b2d8      	uxtb	r0, r3
 8006318:	4942      	ldr	r1, [pc, #264]	; (8006424 <Status_Msg_Extr+0x900>)
 800631a:	4613      	mov	r3, r2
 800631c:	005b      	lsls	r3, r3, #1
 800631e:	4413      	add	r3, r2
 8006320:	005b      	lsls	r3, r3, #1
 8006322:	440b      	add	r3, r1
 8006324:	3302      	adds	r3, #2
 8006326:	4602      	mov	r2, r0
 8006328:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 800632a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800632e:	3308      	adds	r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	da00      	bge.n	8006336 <Status_Msg_Extr+0x812>
 8006334:	3307      	adds	r3, #7
 8006336:	10db      	asrs	r3, r3, #3
 8006338:	b29a      	uxth	r2, r3
 800633a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800633c:	4413      	add	r3, r2
 800633e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006340:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006342:	3308      	adds	r3, #8
 8006344:	b29b      	uxth	r3, r3
 8006346:	b21b      	sxth	r3, r3
 8006348:	425a      	negs	r2, r3
 800634a:	f003 0307 	and.w	r3, r3, #7
 800634e:	f002 0207 	and.w	r2, r2, #7
 8006352:	bf58      	it	pl
 8006354:	4253      	negpl	r3, r2
 8006356:	b21b      	sxth	r3, r3
 8006358:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 800635a:	78bb      	ldrb	r3, [r7, #2]
 800635c:	4618      	mov	r0, r3
 800635e:	f003 fad3 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d004      	beq.n	8006372 <Status_Msg_Extr+0x84e>
 8006368:	78bb      	ldrb	r3, [r7, #2]
 800636a:	4a2f      	ldr	r2, [pc, #188]	; (8006428 <Status_Msg_Extr+0x904>)
 800636c:	2100      	movs	r1, #0
 800636e:	54d1      	strb	r1, [r2, r3]
 8006370:	e003      	b.n	800637a <Status_Msg_Extr+0x856>
 8006372:	78bb      	ldrb	r3, [r7, #2]
 8006374:	4a2c      	ldr	r2, [pc, #176]	; (8006428 <Status_Msg_Extr+0x904>)
 8006376:	2101      	movs	r1, #1
 8006378:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 800637a:	78bb      	ldrb	r3, [r7, #2]
 800637c:	4a2b      	ldr	r2, [pc, #172]	; (800642c <Status_Msg_Extr+0x908>)
 800637e:	011b      	lsls	r3, r3, #4
 8006380:	4413      	add	r3, r2
 8006382:	3304      	adds	r3, #4
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <Status_Msg_Extr+0x870>
	{
		LinkEstablishFlag = SET;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8006394:	787a      	ldrb	r2, [r7, #1]
 8006396:	78bb      	ldrb	r3, [r7, #2]
 8006398:	4611      	mov	r1, r2
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f9e0 	bl	8006760 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 80063a0:	78bb      	ldrb	r3, [r7, #2]
 80063a2:	4923      	ldr	r1, [pc, #140]	; (8006430 <Status_Msg_Extr+0x90c>)
 80063a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80063aa:	78bb      	ldrb	r3, [r7, #2]
 80063ac:	4921      	ldr	r1, [pc, #132]	; (8006434 <Status_Msg_Extr+0x910>)
 80063ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80063b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 80063b4:	78ba      	ldrb	r2, [r7, #2]
 80063b6:	4920      	ldr	r1, [pc, #128]	; (8006438 <Status_Msg_Extr+0x914>)
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	00db      	lsls	r3, r3, #3
 80063c0:	440b      	add	r3, r1
 80063c2:	3310      	adds	r3, #16
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	78bc      	ldrb	r4, [r7, #2]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f00a f815 	bl	80103f8 <HAL_Elaps_Ticks>
 80063ce:	4602      	mov	r2, r0
 80063d0:	4919      	ldr	r1, [pc, #100]	; (8006438 <Status_Msg_Extr+0x914>)
 80063d2:	4623      	mov	r3, r4
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4423      	add	r3, r4
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	440b      	add	r3, r1
 80063dc:	3310      	adds	r3, #16
 80063de:	601a      	str	r2, [r3, #0]
	/* Updating the Clocks */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80063e0:	78bb      	ldrb	r3, [r7, #2]
 80063e2:	4a16      	ldr	r2, [pc, #88]	; (800643c <Status_Msg_Extr+0x918>)
 80063e4:	4413      	add	r3, r2
 80063e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d12e      	bne.n	800644c <Status_Msg_Extr+0x928>
 80063ee:	78bb      	ldrb	r3, [r7, #2]
 80063f0:	4a13      	ldr	r2, [pc, #76]	; (8006440 <Status_Msg_Extr+0x91c>)
 80063f2:	5cd3      	ldrb	r3, [r2, r3]
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	d829      	bhi.n	800644c <Status_Msg_Extr+0x928>
 80063f8:	78ba      	ldrb	r2, [r7, #2]
 80063fa:	4912      	ldr	r1, [pc, #72]	; (8006444 <Status_Msg_Extr+0x920>)
 80063fc:	4613      	mov	r3, r2
 80063fe:	005b      	lsls	r3, r3, #1
 8006400:	4413      	add	r3, r2
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	440b      	add	r3, r1
 8006406:	3305      	adds	r3, #5
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	f003 0301 	and.w	r3, r3, #1
 800640e:	2b00      	cmp	r3, #0
 8006410:	d11c      	bne.n	800644c <Status_Msg_Extr+0x928>
 8006412:	78bb      	ldrb	r3, [r7, #2]
 8006414:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <Status_Msg_Extr+0x924>)
 8006416:	5cd3      	ldrb	r3, [r2, r3]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d117      	bne.n	800644c <Status_Msg_Extr+0x928>
	{
		LinkEstablishFlag = RESET;
 800641c:	2300      	movs	r3, #0
 800641e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8006422:	e03d      	b.n	80064a0 <Status_Msg_Extr+0x97c>
 8006424:	200028b8 	.word	0x200028b8
 8006428:	20002764 	.word	0x20002764
 800642c:	200028f4 	.word	0x200028f4
 8006430:	20002630 	.word	0x20002630
 8006434:	20002658 	.word	0x20002658
 8006438:	20002da4 	.word	0x20002da4
 800643c:	20000504 	.word	0x20000504
 8006440:	20002544 	.word	0x20002544
 8006444:	20002ad4 	.word	0x20002ad4
 8006448:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800644c:	78bb      	ldrb	r3, [r7, #2]
 800644e:	4aaf      	ldr	r2, [pc, #700]	; (800670c <Status_Msg_Extr+0xbe8>)
 8006450:	4413      	add	r3, r2
 8006452:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006456:	2b02      	cmp	r3, #2
 8006458:	d122      	bne.n	80064a0 <Status_Msg_Extr+0x97c>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 800645a:	78bb      	ldrb	r3, [r7, #2]
 800645c:	4aab      	ldr	r2, [pc, #684]	; (800670c <Status_Msg_Extr+0xbe8>)
 800645e:	3366      	adds	r3, #102	; 0x66
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	6859      	ldr	r1, [r3, #4]
 8006466:	78bb      	ldrb	r3, [r7, #2]
 8006468:	4aa9      	ldr	r2, [pc, #676]	; (8006710 <Status_Msg_Extr+0xbec>)
 800646a:	5cd3      	ldrb	r3, [r2, r3]
 800646c:	461a      	mov	r2, r3
 800646e:	48a9      	ldr	r0, [pc, #676]	; (8006714 <Status_Msg_Extr+0xbf0>)
 8006470:	f01f fda6 	bl	8025fc0 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8006474:	78bb      	ldrb	r3, [r7, #2]
 8006476:	4aa8      	ldr	r2, [pc, #672]	; (8006718 <Status_Msg_Extr+0xbf4>)
 8006478:	5cd3      	ldrb	r3, [r2, r3]
 800647a:	4619      	mov	r1, r3
 800647c:	48a7      	ldr	r0, [pc, #668]	; (800671c <Status_Msg_Extr+0xbf8>)
 800647e:	f01f fd9f 	bl	8025fc0 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 8006482:	78ba      	ldrb	r2, [r7, #2]
 8006484:	49a6      	ldr	r1, [pc, #664]	; (8006720 <Status_Msg_Extr+0xbfc>)
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	011b      	lsls	r3, r3, #4
 800648e:	440b      	add	r3, r1
 8006490:	3305      	adds	r3, #5
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	4619      	mov	r1, r3
 800649a:	48a2      	ldr	r0, [pc, #648]	; (8006724 <Status_Msg_Extr+0xc00>)
 800649c:	f01f fd90 	bl	8025fc0 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 80064a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d16f      	bne.n	8006588 <Status_Msg_Extr+0xa64>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80064a8:	78ba      	ldrb	r2, [r7, #2]
 80064aa:	4613      	mov	r3, r2
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4a9d      	ldr	r2, [pc, #628]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064b4:	4413      	add	r3, r2
 80064b6:	3301      	adds	r3, #1
 80064b8:	2210      	movs	r2, #16
 80064ba:	2100      	movs	r1, #0
 80064bc:	4618      	mov	r0, r3
 80064be:	f01f fc97 	bl	8025df0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 80064c2:	78ba      	ldrb	r2, [r7, #2]
 80064c4:	4613      	mov	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4a96      	ldr	r2, [pc, #600]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064ce:	1898      	adds	r0, r3, r2
 80064d0:	78ba      	ldrb	r2, [r7, #2]
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4a94      	ldr	r2, [pc, #592]	; (800672c <Status_Msg_Extr+0xc08>)
 80064dc:	4413      	add	r3, r2
 80064de:	2214      	movs	r2, #20
 80064e0:	4619      	mov	r1, r3
 80064e2:	f01f fc5d 	bl	8025da0 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80064e6:	78bb      	ldrb	r3, [r7, #2]
 80064e8:	4a91      	ldr	r2, [pc, #580]	; (8006730 <Status_Msg_Extr+0xc0c>)
 80064ea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80064ee:	78ba      	ldrb	r2, [r7, #2]
 80064f0:	488d      	ldr	r0, [pc, #564]	; (8006728 <Status_Msg_Extr+0xc04>)
 80064f2:	4613      	mov	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	4413      	add	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4403      	add	r3, r0
 80064fc:	3312      	adds	r3, #18
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	4299      	cmp	r1, r3
 8006502:	d041      	beq.n	8006588 <Status_Msg_Extr+0xa64>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006504:	78ba      	ldrb	r2, [r7, #2]
 8006506:	78b9      	ldrb	r1, [r7, #2]
 8006508:	4887      	ldr	r0, [pc, #540]	; (8006728 <Status_Msg_Extr+0xc04>)
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4403      	add	r3, r0
 8006514:	3312      	adds	r3, #18
 8006516:	881a      	ldrh	r2, [r3, #0]
 8006518:	4b85      	ldr	r3, [pc, #532]	; (8006730 <Status_Msg_Extr+0xc0c>)
 800651a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800651e:	2214      	movs	r2, #20
 8006520:	2100      	movs	r1, #0
 8006522:	4884      	ldr	r0, [pc, #528]	; (8006734 <Status_Msg_Extr+0xc10>)
 8006524:	f01f fc64 	bl	8025df0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006528:	78ba      	ldrb	r2, [r7, #2]
 800652a:	4613      	mov	r3, r2
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	4413      	add	r3, r2
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4a7d      	ldr	r2, [pc, #500]	; (8006728 <Status_Msg_Extr+0xc04>)
 8006534:	4413      	add	r3, r2
 8006536:	2214      	movs	r2, #20
 8006538:	4619      	mov	r1, r3
 800653a:	487e      	ldr	r0, [pc, #504]	; (8006734 <Status_Msg_Extr+0xc10>)
 800653c:	f01f fc30 	bl	8025da0 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006540:	f240 2007 	movw	r0, #519	; 0x207
 8006544:	f00a fd0c 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8006548:	78bb      	ldrb	r3, [r7, #2]
 800654a:	4a7b      	ldr	r2, [pc, #492]	; (8006738 <Status_Msg_Extr+0xc14>)
 800654c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d119      	bne.n	8006588 <Status_Msg_Extr+0xa64>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006554:	78bb      	ldrb	r3, [r7, #2]
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	4a78      	ldr	r2, [pc, #480]	; (800673c <Status_Msg_Extr+0xc18>)
 800655a:	4413      	add	r3, r2
 800655c:	1c98      	adds	r0, r3, #2
 800655e:	78ba      	ldrb	r2, [r7, #2]
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	4a6f      	ldr	r2, [pc, #444]	; (8006728 <Status_Msg_Extr+0xc04>)
 800656a:	4413      	add	r3, r2
 800656c:	3301      	adds	r3, #1
 800656e:	2210      	movs	r2, #16
 8006570:	4619      	mov	r1, r3
 8006572:	f01f fc15 	bl	8025da0 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8006576:	f004 f8c5 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800657a:	f240 1019 	movw	r0, #281	; 0x119
 800657e:	f00a fcef 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006582:	4a6f      	ldr	r2, [pc, #444]	; (8006740 <Status_Msg_Extr+0xc1c>)
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	6013      	str	r3, [r2, #0]
			}
		}
	}

	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006588:	78b9      	ldrb	r1, [r7, #2]
 800658a:	78ba      	ldrb	r2, [r7, #2]
 800658c:	4866      	ldr	r0, [pc, #408]	; (8006728 <Status_Msg_Extr+0xc04>)
 800658e:	460b      	mov	r3, r1
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4403      	add	r3, r0
 8006598:	3312      	adds	r3, #18
 800659a:	8818      	ldrh	r0, [r3, #0]
 800659c:	4969      	ldr	r1, [pc, #420]	; (8006744 <Status_Msg_Extr+0xc20>)
 800659e:	4613      	mov	r3, r2
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	4413      	add	r3, r2
 80065a4:	00db      	lsls	r3, r3, #3
 80065a6:	440b      	add	r3, r1
 80065a8:	3306      	adds	r3, #6
 80065aa:	4602      	mov	r2, r0
 80065ac:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80065ae:	78ba      	ldrb	r2, [r7, #2]
 80065b0:	4964      	ldr	r1, [pc, #400]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065b2:	4613      	mov	r3, r2
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	4413      	add	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	440b      	add	r3, r1
 80065bc:	3314      	adds	r3, #20
 80065be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065c0:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 80065c2:	78ba      	ldrb	r2, [r7, #2]
 80065c4:	495f      	ldr	r1, [pc, #380]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	00db      	lsls	r3, r3, #3
 80065ce:	440b      	add	r3, r1
 80065d0:	3305      	adds	r3, #5
 80065d2:	2204      	movs	r2, #4
 80065d4:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80065d6:	78ba      	ldrb	r2, [r7, #2]
 80065d8:	495a      	ldr	r1, [pc, #360]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065da:	4613      	mov	r3, r2
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	4413      	add	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	440b      	add	r3, r1
 80065e4:	78ba      	ldrb	r2, [r7, #2]
 80065e6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80065e8:	78ba      	ldrb	r2, [r7, #2]
 80065ea:	4956      	ldr	r1, [pc, #344]	; (8006744 <Status_Msg_Extr+0xc20>)
 80065ec:	4613      	mov	r3, r2
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	4413      	add	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	440b      	add	r3, r1
 80065f6:	3301      	adds	r3, #1
 80065f8:	2201      	movs	r2, #1
 80065fa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80065fc:	78ba      	ldrb	r2, [r7, #2]
 80065fe:	4951      	ldr	r1, [pc, #324]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006600:	4613      	mov	r3, r2
 8006602:	005b      	lsls	r3, r3, #1
 8006604:	4413      	add	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	440b      	add	r3, r1
 800660a:	3302      	adds	r3, #2
 800660c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8006610:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006612:	2218      	movs	r2, #24
 8006614:	2100      	movs	r1, #0
 8006616:	484c      	ldr	r0, [pc, #304]	; (8006748 <Status_Msg_Extr+0xc24>)
 8006618:	f01f fbea 	bl	8025df0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800661c:	78ba      	ldrb	r2, [r7, #2]
 800661e:	4613      	mov	r3, r2
 8006620:	005b      	lsls	r3, r3, #1
 8006622:	4413      	add	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4a47      	ldr	r2, [pc, #284]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006628:	4413      	add	r3, r2
 800662a:	2218      	movs	r2, #24
 800662c:	4619      	mov	r1, r3
 800662e:	4846      	ldr	r0, [pc, #280]	; (8006748 <Status_Msg_Extr+0xc24>)
 8006630:	f01f fbb6 	bl	8025da0 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006634:	f240 2001 	movw	r0, #513	; 0x201
 8006638:	f00a fc92 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800663c:	78ba      	ldrb	r2, [r7, #2]
 800663e:	4941      	ldr	r1, [pc, #260]	; (8006744 <Status_Msg_Extr+0xc20>)
 8006640:	4613      	mov	r3, r2
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	4413      	add	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	440b      	add	r3, r1
 800664a:	3301      	adds	r3, #1
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006650:	78bb      	ldrb	r3, [r7, #2]
 8006652:	493e      	ldr	r1, [pc, #248]	; (800674c <Status_Msg_Extr+0xc28>)
 8006654:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 800665a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800665e:	2b01      	cmp	r3, #1
 8006660:	d11d      	bne.n	800669e <Status_Msg_Extr+0xb7a>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006662:	78bb      	ldrb	r3, [r7, #2]
 8006664:	493a      	ldr	r1, [pc, #232]	; (8006750 <Status_Msg_Extr+0xc2c>)
 8006666:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006668:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 800666c:	78ba      	ldrb	r2, [r7, #2]
 800666e:	4939      	ldr	r1, [pc, #228]	; (8006754 <Status_Msg_Extr+0xc30>)
 8006670:	4613      	mov	r3, r2
 8006672:	005b      	lsls	r3, r3, #1
 8006674:	4413      	add	r3, r2
 8006676:	009b      	lsls	r3, r3, #2
 8006678:	440b      	add	r3, r1
 800667a:	3304      	adds	r3, #4
 800667c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800667e:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006680:	78ba      	ldrb	r2, [r7, #2]
 8006682:	4934      	ldr	r1, [pc, #208]	; (8006754 <Status_Msg_Extr+0xc30>)
 8006684:	4613      	mov	r3, r2
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	4413      	add	r3, r2
 800668a:	009b      	lsls	r3, r3, #2
 800668c:	440b      	add	r3, r1
 800668e:	3301      	adds	r3, #1
 8006690:	2201      	movs	r2, #1
 8006692:	701a      	strb	r2, [r3, #0]
		SelfLinkFlag[Source_Index] = SET;
 8006694:	78bb      	ldrb	r3, [r7, #2]
 8006696:	4a30      	ldr	r2, [pc, #192]	; (8006758 <Status_Msg_Extr+0xc34>)
 8006698:	2101      	movs	r1, #1
 800669a:	54d1      	strb	r1, [r2, r3]
 800669c:	e02e      	b.n	80066fc <Status_Msg_Extr+0xbd8>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 800669e:	78bb      	ldrb	r3, [r7, #2]
 80066a0:	4a2d      	ldr	r2, [pc, #180]	; (8006758 <Status_Msg_Extr+0xc34>)
 80066a2:	2100      	movs	r1, #0
 80066a4:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 80066a6:	78ba      	ldrb	r2, [r7, #2]
 80066a8:	492a      	ldr	r1, [pc, #168]	; (8006754 <Status_Msg_Extr+0xc30>)
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	3308      	adds	r3, #8
 80066b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066b8:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 80066ba:	78ba      	ldrb	r2, [r7, #2]
 80066bc:	4925      	ldr	r1, [pc, #148]	; (8006754 <Status_Msg_Extr+0xc30>)
 80066be:	4613      	mov	r3, r2
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	3301      	adds	r3, #1
 80066ca:	2200      	movs	r2, #0
 80066cc:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80066ce:	78ba      	ldrb	r2, [r7, #2]
 80066d0:	4613      	mov	r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	4413      	add	r3, r2
 80066d6:	009b      	lsls	r3, r3, #2
 80066d8:	4a13      	ldr	r2, [pc, #76]	; (8006728 <Status_Msg_Extr+0xc04>)
 80066da:	4413      	add	r3, r2
 80066dc:	3301      	adds	r3, #1
 80066de:	2210      	movs	r2, #16
 80066e0:	2100      	movs	r1, #0
 80066e2:	4618      	mov	r0, r3
 80066e4:	f01f fb84 	bl	8025df0 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80066e8:	78ba      	ldrb	r2, [r7, #2]
 80066ea:	490f      	ldr	r1, [pc, #60]	; (8006728 <Status_Msg_Extr+0xc04>)
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	440b      	add	r3, r1
 80066f6:	3312      	adds	r3, #18
 80066f8:	2200      	movs	r2, #0
 80066fa:	801a      	strh	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80066fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006700:	4816      	ldr	r0, [pc, #88]	; (800675c <Status_Msg_Extr+0xc38>)
 8006702:	f015 f93c 	bl	801b97e <HAL_GPIO_TogglePin>

}
 8006706:	3754      	adds	r7, #84	; 0x54
 8006708:	46bd      	mov	sp, r7
 800670a:	bd90      	pop	{r4, r7, pc}
 800670c:	20000504 	.word	0x20000504
 8006710:	20002544 	.word	0x20002544
 8006714:	08028458 	.word	0x08028458
 8006718:	20002538 	.word	0x20002538
 800671c:	08028468 	.word	0x08028468
 8006720:	20002ad4 	.word	0x20002ad4
 8006724:	08028480 	.word	0x08028480
 8006728:	20003598 	.word	0x20003598
 800672c:	200034d0 	.word	0x200034d0
 8006730:	2000258c 	.word	0x2000258c
 8006734:	20003728 	.word	0x20003728
 8006738:	20002550 	.word	0x20002550
 800673c:	20002770 	.word	0x20002770
 8006740:	200024e4 	.word	0x200024e4
 8006744:	20002da4 	.word	0x20002da4
 8006748:	20002f84 	.word	0x20002f84
 800674c:	200024b8 	.word	0x200024b8
 8006750:	200025a0 	.word	0x200025a0
 8006754:	200033e0 	.word	0x200033e0
 8006758:	200025f0 	.word	0x200025f0
 800675c:	40021c00 	.word	0x40021c00

08006760 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006760:	b590      	push	{r4, r7, lr}
 8006762:	b0a5      	sub	sp, #148	; 0x94
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	460a      	mov	r2, r1
 800676a:	71fb      	strb	r3, [r7, #7]
 800676c:	4613      	mov	r3, r2
 800676e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006770:	2300      	movs	r3, #0
 8006772:	64bb      	str	r3, [r7, #72]	; 0x48
 8006774:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006778:	2238      	movs	r2, #56	; 0x38
 800677a:	2100      	movs	r1, #0
 800677c:	4618      	mov	r0, r3
 800677e:	f01f fb37 	bl	8025df0 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8006782:	2300      	movs	r3, #0
 8006784:	60fb      	str	r3, [r7, #12]
 8006786:	f107 0310 	add.w	r3, r7, #16
 800678a:	2238      	movs	r2, #56	; 0x38
 800678c:	2100      	movs	r1, #0
 800678e:	4618      	mov	r0, r3
 8006790:	f01f fb2e 	bl	8025df0 <memset>
	uint8_t uc_index = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 800679a:	2300      	movs	r3, #0
 800679c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067a0:	2300      	movs	r3, #0
 80067a2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 80067a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067ae:	441a      	add	r2, r3
 80067b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80067b4:	23f4      	movs	r3, #244	; 0xf4
 80067b6:	2108      	movs	r1, #8
 80067b8:	f7f9 ffb8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80067bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80067c0:	3308      	adds	r3, #8
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	da00      	bge.n	80067c8 <Send_Status_Message+0x68>
 80067c6:	3307      	adds	r3, #7
 80067c8:	10db      	asrs	r3, r3, #3
 80067ca:	b29a      	uxth	r2, r3
 80067cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067d0:	4413      	add	r3, r2
 80067d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80067d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80067da:	3308      	adds	r3, #8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	b21b      	sxth	r3, r3
 80067e0:	425a      	negs	r2, r3
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	f002 0207 	and.w	r2, r2, #7
 80067ea:	bf58      	it	pl
 80067ec:	4253      	negpl	r3, r2
 80067ee:	b21b      	sxth	r3, r3
 80067f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80067f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80067f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80067fc:	441a      	add	r2, r3
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	49bc      	ldr	r1, [pc, #752]	; (8006af4 <Send_Status_Message+0x394>)
 8006802:	3366      	adds	r3, #102	; 0x66
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	440b      	add	r3, r1
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800680e:	2110      	movs	r1, #16
 8006810:	f7f9 ff8c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006814:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006818:	3310      	adds	r3, #16
 800681a:	2b00      	cmp	r3, #0
 800681c:	da00      	bge.n	8006820 <Send_Status_Message+0xc0>
 800681e:	3307      	adds	r3, #7
 8006820:	10db      	asrs	r3, r3, #3
 8006822:	b29a      	uxth	r2, r3
 8006824:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006828:	4413      	add	r3, r2
 800682a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800682e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006832:	3310      	adds	r3, #16
 8006834:	b29b      	uxth	r3, r3
 8006836:	b21b      	sxth	r3, r3
 8006838:	425a      	negs	r2, r3
 800683a:	f003 0307 	and.w	r3, r3, #7
 800683e:	f002 0207 	and.w	r2, r2, #7
 8006842:	bf58      	it	pl
 8006844:	4253      	negpl	r3, r2
 8006846:	b21b      	sxth	r3, r3
 8006848:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800684c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006850:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006854:	441a      	add	r2, r3
 8006856:	79fb      	ldrb	r3, [r7, #7]
 8006858:	49a6      	ldr	r1, [pc, #664]	; (8006af4 <Send_Status_Message+0x394>)
 800685a:	3370      	adds	r3, #112	; 0x70
 800685c:	009b      	lsls	r3, r3, #2
 800685e:	440b      	add	r3, r1
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006866:	2110      	movs	r1, #16
 8006868:	f7f9 ff60 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800686c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006870:	3310      	adds	r3, #16
 8006872:	2b00      	cmp	r3, #0
 8006874:	da00      	bge.n	8006878 <Send_Status_Message+0x118>
 8006876:	3307      	adds	r3, #7
 8006878:	10db      	asrs	r3, r3, #3
 800687a:	b29a      	uxth	r2, r3
 800687c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006880:	4413      	add	r3, r2
 8006882:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006886:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800688a:	3310      	adds	r3, #16
 800688c:	b29b      	uxth	r3, r3
 800688e:	b21b      	sxth	r3, r3
 8006890:	425a      	negs	r2, r3
 8006892:	f003 0307 	and.w	r3, r3, #7
 8006896:	f002 0207 	and.w	r2, r2, #7
 800689a:	bf58      	it	pl
 800689c:	4253      	negpl	r3, r2
 800689e:	b21b      	sxth	r3, r3
 80068a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80068a4:	4b94      	ldr	r3, [pc, #592]	; (8006af8 <Send_Status_Message+0x398>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	089b      	lsrs	r3, r3, #2
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d035      	beq.n	800691e <Send_Status_Message+0x1be>
 80068b2:	4b91      	ldr	r3, [pc, #580]	; (8006af8 <Send_Status_Message+0x398>)
 80068b4:	791b      	ldrb	r3, [r3, #4]
 80068b6:	79fa      	ldrb	r2, [r7, #7]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d130      	bne.n	800691e <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 80068c2:	488e      	ldr	r0, [pc, #568]	; (8006afc <Send_Status_Message+0x39c>)
 80068c4:	f017 f824 	bl	801d910 <HAL_RNG_GetRandomNumber>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b8d      	ldr	r3, [pc, #564]	; (8006b00 <Send_Status_Message+0x3a0>)
 80068cc:	fba3 1302 	umull	r1, r3, r3, r2
 80068d0:	099b      	lsrs	r3, r3, #6
 80068d2:	21c8      	movs	r1, #200	; 0xc8
 80068d4:	fb01 f303 	mul.w	r3, r1, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 80068de:	4889      	ldr	r0, [pc, #548]	; (8006b04 <Send_Status_Message+0x3a4>)
 80068e0:	f01f fc0a 	bl	80260f8 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 80068e4:	79fb      	ldrb	r3, [r7, #7]
 80068e6:	4a88      	ldr	r2, [pc, #544]	; (8006b08 <Send_Status_Message+0x3a8>)
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	4413      	add	r3, r2
 80068ec:	3301      	adds	r3, #1
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	4619      	mov	r1, r3
 80068f2:	4886      	ldr	r0, [pc, #536]	; (8006b0c <Send_Status_Message+0x3ac>)
 80068f4:	f01f fb64 	bl	8025fc0 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 80068f8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 80068fc:	4619      	mov	r1, r3
 80068fe:	4884      	ldr	r0, [pc, #528]	; (8006b10 <Send_Status_Message+0x3b0>)
 8006900:	f01f fb5e 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8006904:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006908:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800690c:	441a      	add	r2, r3
 800690e:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8006912:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006916:	2108      	movs	r1, #8
 8006918:	f7f9 ff08 	bl	800072c <InsertBits>
	{
 800691c:	e00f      	b.n	800693e <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 800691e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006922:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006926:	441a      	add	r2, r3
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	4977      	ldr	r1, [pc, #476]	; (8006b08 <Send_Status_Message+0x3a8>)
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	440b      	add	r3, r1
 8006930:	3301      	adds	r3, #1
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006938:	2108      	movs	r1, #8
 800693a:	f7f9 fef7 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 800693e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006942:	3308      	adds	r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	da00      	bge.n	800694a <Send_Status_Message+0x1ea>
 8006948:	3307      	adds	r3, #7
 800694a:	10db      	asrs	r3, r3, #3
 800694c:	b29a      	uxth	r2, r3
 800694e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006952:	4413      	add	r3, r2
 8006954:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006958:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800695c:	3308      	adds	r3, #8
 800695e:	b29b      	uxth	r3, r3
 8006960:	b21b      	sxth	r3, r3
 8006962:	425a      	negs	r2, r3
 8006964:	f003 0307 	and.w	r3, r3, #7
 8006968:	f002 0207 	and.w	r2, r2, #7
 800696c:	bf58      	it	pl
 800696e:	4253      	negpl	r3, r2
 8006970:	b21b      	sxth	r3, r3
 8006972:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006976:	4b60      	ldr	r3, [pc, #384]	; (8006af8 <Send_Status_Message+0x398>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	08db      	lsrs	r3, r3, #3
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	2b00      	cmp	r3, #0
 8006982:	d038      	beq.n	80069f6 <Send_Status_Message+0x296>
 8006984:	4b5c      	ldr	r3, [pc, #368]	; (8006af8 <Send_Status_Message+0x398>)
 8006986:	791b      	ldrb	r3, [r3, #4]
 8006988:	79fa      	ldrb	r2, [r7, #7]
 800698a:	429a      	cmp	r2, r3
 800698c:	d133      	bne.n	80069f6 <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 800698e:	2300      	movs	r3, #0
 8006990:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006994:	4859      	ldr	r0, [pc, #356]	; (8006afc <Send_Status_Message+0x39c>)
 8006996:	f016 ffbb 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800699a:	4602      	mov	r2, r0
 800699c:	4b58      	ldr	r3, [pc, #352]	; (8006b00 <Send_Status_Message+0x3a0>)
 800699e:	fba3 1302 	umull	r1, r3, r3, r2
 80069a2:	099b      	lsrs	r3, r3, #6
 80069a4:	21c8      	movs	r1, #200	; 0xc8
 80069a6:	fb01 f303 	mul.w	r3, r1, r3
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 80069b0:	4858      	ldr	r0, [pc, #352]	; (8006b14 <Send_Status_Message+0x3b4>)
 80069b2:	f01f fba1 	bl	80260f8 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	4a53      	ldr	r2, [pc, #332]	; (8006b08 <Send_Status_Message+0x3a8>)
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	4413      	add	r3, r2
 80069be:	3302      	adds	r3, #2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	4619      	mov	r1, r3
 80069c4:	4854      	ldr	r0, [pc, #336]	; (8006b18 <Send_Status_Message+0x3b8>)
 80069c6:	f01f fafb 	bl	8025fc0 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80069ca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069ce:	4619      	mov	r1, r3
 80069d0:	4852      	ldr	r0, [pc, #328]	; (8006b1c <Send_Status_Message+0x3bc>)
 80069d2:	f01f faf5 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80069d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80069da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80069de:	441a      	add	r2, r3
 80069e0:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 80069e4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80069e8:	2108      	movs	r1, #8
 80069ea:	f7f9 fe9f 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 80069ee:	4b4c      	ldr	r3, [pc, #304]	; (8006b20 <Send_Status_Message+0x3c0>)
 80069f0:	2201      	movs	r2, #1
 80069f2:	701a      	strb	r2, [r3, #0]
	{
 80069f4:	e020      	b.n	8006a38 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 80069f6:	4b4a      	ldr	r3, [pc, #296]	; (8006b20 <Send_Status_Message+0x3c0>)
 80069f8:	2200      	movs	r2, #0
 80069fa:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80069fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a04:	18d1      	adds	r1, r2, r3
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	483f      	ldr	r0, [pc, #252]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a0a:	011a      	lsls	r2, r3, #4
 8006a0c:	4402      	add	r2, r0
 8006a0e:	3202      	adds	r2, #2
 8006a10:	7812      	ldrb	r2, [r2, #0]
 8006a12:	3201      	adds	r2, #1
 8006a14:	b2d4      	uxtb	r4, r2
 8006a16:	483c      	ldr	r0, [pc, #240]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a18:	011a      	lsls	r2, r3, #4
 8006a1a:	4402      	add	r2, r0
 8006a1c:	3202      	adds	r2, #2
 8006a1e:	4620      	mov	r0, r4
 8006a20:	7010      	strb	r0, [r2, #0]
 8006a22:	4a39      	ldr	r2, [pc, #228]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	4413      	add	r3, r2
 8006a28:	3302      	adds	r3, #2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a30:	460a      	mov	r2, r1
 8006a32:	2108      	movs	r1, #8
 8006a34:	f7f9 fe7a 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006a38:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a3c:	3308      	adds	r3, #8
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	da00      	bge.n	8006a44 <Send_Status_Message+0x2e4>
 8006a42:	3307      	adds	r3, #7
 8006a44:	10db      	asrs	r3, r3, #3
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006a52:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006a56:	3308      	adds	r3, #8
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	b21b      	sxth	r3, r3
 8006a5c:	425a      	negs	r2, r3
 8006a5e:	f003 0307 	and.w	r3, r3, #7
 8006a62:	f002 0207 	and.w	r2, r2, #7
 8006a66:	bf58      	it	pl
 8006a68:	4253      	negpl	r3, r2
 8006a6a:	b21b      	sxth	r3, r3
 8006a6c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006a70:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a74:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006a78:	441a      	add	r2, r3
 8006a7a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006a7e:	2304      	movs	r3, #4
 8006a80:	2108      	movs	r1, #8
 8006a82:	f7f9 fe53 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006a86:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da00      	bge.n	8006a92 <Send_Status_Message+0x332>
 8006a90:	3307      	adds	r3, #7
 8006a92:	10db      	asrs	r3, r3, #3
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006aa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006aa4:	3308      	adds	r3, #8
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	b21b      	sxth	r3, r3
 8006aaa:	425a      	negs	r2, r3
 8006aac:	f003 0307 	and.w	r3, r3, #7
 8006ab0:	f002 0207 	and.w	r2, r2, #7
 8006ab4:	bf58      	it	pl
 8006ab6:	4253      	negpl	r3, r2
 8006ab8:	b21b      	sxth	r3, r3
 8006aba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4a11      	ldr	r2, [pc, #68]	; (8006b08 <Send_Status_Message+0x3a8>)
 8006ac2:	011b      	lsls	r3, r3, #4
 8006ac4:	4413      	add	r3, r2
 8006ac6:	3304      	adds	r3, #4
 8006ac8:	881b      	ldrh	r3, [r3, #0]
 8006aca:	f003 0308 	and.w	r3, r3, #8
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d052      	beq.n	8006b78 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	4a13      	ldr	r2, [pc, #76]	; (8006b24 <Send_Status_Message+0x3c4>)
 8006ad6:	5cd3      	ldrb	r3, [r2, r3]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d125      	bne.n	8006b28 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006adc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ae0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ae4:	441a      	add	r2, r3
 8006ae6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006aea:	2368      	movs	r3, #104	; 0x68
 8006aec:	2110      	movs	r1, #16
 8006aee:	f7f9 fe1d 	bl	800072c <InsertBits>
 8006af2:	e024      	b.n	8006b3e <Send_Status_Message+0x3de>
 8006af4:	20000504 	.word	0x20000504
 8006af8:	2000308c 	.word	0x2000308c
 8006afc:	2000bc54 	.word	0x2000bc54
 8006b00:	51eb851f 	.word	0x51eb851f
 8006b04:	08027e78 	.word	0x08027e78
 8006b08:	200028f4 	.word	0x200028f4
 8006b0c:	08028490 	.word	0x08028490
 8006b10:	080284b0 	.word	0x080284b0
 8006b14:	08027edc 	.word	0x08027edc
 8006b18:	080284d0 	.word	0x080284d0
 8006b1c:	080284f0 	.word	0x080284f0
 8006b20:	200024af 	.word	0x200024af
 8006b24:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006b28:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b2c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b30:	441a      	add	r2, r3
 8006b32:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b36:	2328      	movs	r3, #40	; 0x28
 8006b38:	2110      	movs	r1, #16
 8006b3a:	f7f9 fdf7 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006b3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006b42:	3310      	adds	r3, #16
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	da00      	bge.n	8006b4a <Send_Status_Message+0x3ea>
 8006b48:	3307      	adds	r3, #7
 8006b4a:	10db      	asrs	r3, r3, #3
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b52:	4413      	add	r3, r2
 8006b54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006b58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b5c:	3310      	adds	r3, #16
 8006b5e:	b29b      	uxth	r3, r3
 8006b60:	b21b      	sxth	r3, r3
 8006b62:	425a      	negs	r2, r3
 8006b64:	f003 0307 	and.w	r3, r3, #7
 8006b68:	f002 0207 	and.w	r2, r2, #7
 8006b6c:	bf58      	it	pl
 8006b6e:	4253      	negpl	r3, r2
 8006b70:	b21b      	sxth	r3, r3
 8006b72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8006b76:	e03a      	b.n	8006bee <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006b78:	79fb      	ldrb	r3, [r7, #7]
 8006b7a:	4a08      	ldr	r2, [pc, #32]	; (8006b9c <Send_Status_Message+0x43c>)
 8006b7c:	5cd3      	ldrb	r3, [r2, r3]
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d10e      	bne.n	8006ba0 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 8006b82:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006b86:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006b8a:	441a      	add	r2, r3
 8006b8c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006b90:	2364      	movs	r3, #100	; 0x64
 8006b92:	2110      	movs	r1, #16
 8006b94:	f7f9 fdca 	bl	800072c <InsertBits>
 8006b98:	e00d      	b.n	8006bb6 <Send_Status_Message+0x456>
 8006b9a:	bf00      	nop
 8006b9c:	20002764 	.word	0x20002764
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 8006ba0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ba4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ba8:	441a      	add	r2, r3
 8006baa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006bae:	2324      	movs	r3, #36	; 0x24
 8006bb0:	2110      	movs	r1, #16
 8006bb2:	f7f9 fdbb 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006bb6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006bba:	3310      	adds	r3, #16
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	da00      	bge.n	8006bc2 <Send_Status_Message+0x462>
 8006bc0:	3307      	adds	r3, #7
 8006bc2:	10db      	asrs	r3, r3, #3
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006bca:	4413      	add	r3, r2
 8006bcc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006bd0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006bd4:	3310      	adds	r3, #16
 8006bd6:	b29b      	uxth	r3, r3
 8006bd8:	b21b      	sxth	r3, r3
 8006bda:	425a      	negs	r2, r3
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	f002 0207 	and.w	r2, r2, #7
 8006be4:	bf58      	it	pl
 8006be6:	4253      	negpl	r3, r2
 8006be8:	b21b      	sxth	r3, r3
 8006bea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006bee:	79fb      	ldrb	r3, [r7, #7]
 8006bf0:	4ac6      	ldr	r2, [pc, #792]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3304      	adds	r3, #4
 8006bf8:	881b      	ldrh	r3, [r3, #0]
 8006bfa:	095b      	lsrs	r3, r3, #5
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8139 	beq.w	8006e7a <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	4ac1      	ldr	r2, [pc, #772]	; (8006f10 <Send_Status_Message+0x7b0>)
 8006c0c:	5cd3      	ldrb	r3, [r2, r3]
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d114      	bne.n	8006c3c <Send_Status_Message+0x4dc>
		{
			Get_time();
 8006c12:	f005 ff6b 	bl	800caec <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8006c16:	79fa      	ldrb	r2, [r7, #7]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	005b      	lsls	r3, r3, #1
 8006c1c:	4413      	add	r3, r2
 8006c1e:	005b      	lsls	r3, r3, #1
 8006c20:	4abc      	ldr	r2, [pc, #752]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006c22:	4413      	add	r3, r2
 8006c24:	4abc      	ldr	r2, [pc, #752]	; (8006f18 <Send_Status_Message+0x7b8>)
 8006c26:	6811      	ldr	r1, [r2, #0]
 8006c28:	6019      	str	r1, [r3, #0]
 8006c2a:	8892      	ldrh	r2, [r2, #4]
 8006c2c:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006c2e:	48bb      	ldr	r0, [pc, #748]	; (8006f1c <Send_Status_Message+0x7bc>)
 8006c30:	f01f fa62 	bl	80260f8 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	4ab6      	ldr	r2, [pc, #728]	; (8006f10 <Send_Status_Message+0x7b0>)
 8006c38:	2100      	movs	r1, #0
 8006c3a:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006c3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006c44:	18d1      	adds	r1, r2, r3
 8006c46:	79fa      	ldrb	r2, [r7, #7]
 8006c48:	48b2      	ldr	r0, [pc, #712]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006c4a:	4613      	mov	r3, r2
 8006c4c:	005b      	lsls	r3, r3, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	005b      	lsls	r3, r3, #1
 8006c52:	4403      	add	r3, r0
 8006c54:	3305      	adds	r3, #5
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006c5c:	460a      	mov	r2, r1
 8006c5e:	2108      	movs	r1, #8
 8006c60:	f7f9 fd64 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006c64:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006c68:	3308      	adds	r3, #8
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da00      	bge.n	8006c70 <Send_Status_Message+0x510>
 8006c6e:	3307      	adds	r3, #7
 8006c70:	10db      	asrs	r3, r3, #3
 8006c72:	b29a      	uxth	r2, r3
 8006c74:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006c78:	4413      	add	r3, r2
 8006c7a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006c7e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006c82:	3308      	adds	r3, #8
 8006c84:	b29b      	uxth	r3, r3
 8006c86:	b21b      	sxth	r3, r3
 8006c88:	425a      	negs	r2, r3
 8006c8a:	f003 0307 	and.w	r3, r3, #7
 8006c8e:	f002 0207 	and.w	r2, r2, #7
 8006c92:	bf58      	it	pl
 8006c94:	4253      	negpl	r3, r2
 8006c96:	b21b      	sxth	r3, r3
 8006c98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8006c9c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006ca0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006ca4:	18d1      	adds	r1, r2, r3
 8006ca6:	79fa      	ldrb	r2, [r7, #7]
 8006ca8:	489a      	ldr	r0, [pc, #616]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006caa:	4613      	mov	r3, r2
 8006cac:	005b      	lsls	r3, r3, #1
 8006cae:	4413      	add	r3, r2
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4403      	add	r3, r0
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006cbc:	460a      	mov	r2, r1
 8006cbe:	2108      	movs	r1, #8
 8006cc0:	f7f9 fd34 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006cc4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006cc8:	3308      	adds	r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	da00      	bge.n	8006cd0 <Send_Status_Message+0x570>
 8006cce:	3307      	adds	r3, #7
 8006cd0:	10db      	asrs	r3, r3, #3
 8006cd2:	b29a      	uxth	r2, r3
 8006cd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006cd8:	4413      	add	r3, r2
 8006cda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006cde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006ce2:	3308      	adds	r3, #8
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	b21b      	sxth	r3, r3
 8006ce8:	425a      	negs	r2, r3
 8006cea:	f003 0307 	and.w	r3, r3, #7
 8006cee:	f002 0207 	and.w	r2, r2, #7
 8006cf2:	bf58      	it	pl
 8006cf4:	4253      	negpl	r3, r2
 8006cf6:	b21b      	sxth	r3, r3
 8006cf8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006cfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d04:	18d1      	adds	r1, r2, r3
 8006d06:	79fa      	ldrb	r2, [r7, #7]
 8006d08:	4882      	ldr	r0, [pc, #520]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	005b      	lsls	r3, r3, #1
 8006d0e:	4413      	add	r3, r2
 8006d10:	005b      	lsls	r3, r3, #1
 8006d12:	4403      	add	r3, r0
 8006d14:	3303      	adds	r3, #3
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d1c:	460a      	mov	r2, r1
 8006d1e:	2108      	movs	r1, #8
 8006d20:	f7f9 fd04 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d24:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d28:	3308      	adds	r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	da00      	bge.n	8006d30 <Send_Status_Message+0x5d0>
 8006d2e:	3307      	adds	r3, #7
 8006d30:	10db      	asrs	r3, r3, #3
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d38:	4413      	add	r3, r2
 8006d3a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006d42:	3308      	adds	r3, #8
 8006d44:	b29b      	uxth	r3, r3
 8006d46:	b21b      	sxth	r3, r3
 8006d48:	425a      	negs	r2, r3
 8006d4a:	f003 0307 	and.w	r3, r3, #7
 8006d4e:	f002 0207 	and.w	r2, r2, #7
 8006d52:	bf58      	it	pl
 8006d54:	4253      	negpl	r3, r2
 8006d56:	b21b      	sxth	r3, r3
 8006d58:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006d5c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d60:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006d64:	18d1      	adds	r1, r2, r3
 8006d66:	79fa      	ldrb	r2, [r7, #7]
 8006d68:	486a      	ldr	r0, [pc, #424]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	4413      	add	r3, r2
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4403      	add	r3, r0
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006d7a:	460a      	mov	r2, r1
 8006d7c:	2108      	movs	r1, #8
 8006d7e:	f7f9 fcd5 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006d82:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006d86:	3308      	adds	r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da00      	bge.n	8006d8e <Send_Status_Message+0x62e>
 8006d8c:	3307      	adds	r3, #7
 8006d8e:	10db      	asrs	r3, r3, #3
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006d96:	4413      	add	r3, r2
 8006d98:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006d9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006da0:	3308      	adds	r3, #8
 8006da2:	b29b      	uxth	r3, r3
 8006da4:	b21b      	sxth	r3, r3
 8006da6:	425a      	negs	r2, r3
 8006da8:	f003 0307 	and.w	r3, r3, #7
 8006dac:	f002 0207 	and.w	r2, r2, #7
 8006db0:	bf58      	it	pl
 8006db2:	4253      	negpl	r3, r2
 8006db4:	b21b      	sxth	r3, r3
 8006db6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006dba:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006dbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006dc2:	18d1      	adds	r1, r2, r3
 8006dc4:	79fa      	ldrb	r2, [r7, #7]
 8006dc6:	4853      	ldr	r0, [pc, #332]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006dc8:	4613      	mov	r3, r2
 8006dca:	005b      	lsls	r3, r3, #1
 8006dcc:	4413      	add	r3, r2
 8006dce:	005b      	lsls	r3, r3, #1
 8006dd0:	4403      	add	r3, r0
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006dda:	460a      	mov	r2, r1
 8006ddc:	2108      	movs	r1, #8
 8006dde:	f7f9 fca5 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006de2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006de6:	3308      	adds	r3, #8
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	da00      	bge.n	8006dee <Send_Status_Message+0x68e>
 8006dec:	3307      	adds	r3, #7
 8006dee:	10db      	asrs	r3, r3, #3
 8006df0:	b29a      	uxth	r2, r3
 8006df2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006df6:	4413      	add	r3, r2
 8006df8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006dfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e00:	3308      	adds	r3, #8
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	b21b      	sxth	r3, r3
 8006e06:	425a      	negs	r2, r3
 8006e08:	f003 0307 	and.w	r3, r3, #7
 8006e0c:	f002 0207 	and.w	r2, r2, #7
 8006e10:	bf58      	it	pl
 8006e12:	4253      	negpl	r3, r2
 8006e14:	b21b      	sxth	r3, r3
 8006e16:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006e1a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e1e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006e22:	18d1      	adds	r1, r2, r3
 8006e24:	79fa      	ldrb	r2, [r7, #7]
 8006e26:	483b      	ldr	r0, [pc, #236]	; (8006f14 <Send_Status_Message+0x7b4>)
 8006e28:	4613      	mov	r3, r2
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	4413      	add	r3, r2
 8006e2e:	005b      	lsls	r3, r3, #1
 8006e30:	4403      	add	r3, r0
 8006e32:	3302      	adds	r3, #2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006e3a:	460a      	mov	r2, r1
 8006e3c:	2108      	movs	r1, #8
 8006e3e:	f7f9 fc75 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 8006e42:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006e46:	3308      	adds	r3, #8
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	da00      	bge.n	8006e4e <Send_Status_Message+0x6ee>
 8006e4c:	3307      	adds	r3, #7
 8006e4e:	10db      	asrs	r3, r3, #3
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006e56:	4413      	add	r3, r2
 8006e58:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006e5c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006e60:	3308      	adds	r3, #8
 8006e62:	b29b      	uxth	r3, r3
 8006e64:	b21b      	sxth	r3, r3
 8006e66:	425a      	negs	r2, r3
 8006e68:	f003 0307 	and.w	r3, r3, #7
 8006e6c:	f002 0207 	and.w	r2, r2, #7
 8006e70:	bf58      	it	pl
 8006e72:	4253      	negpl	r3, r2
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006e7a:	4b29      	ldr	r3, [pc, #164]	; (8006f20 <Send_Status_Message+0x7c0>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	085b      	lsrs	r3, r3, #1
 8006e80:	f003 0301 	and.w	r3, r3, #1
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d031      	beq.n	8006eec <Send_Status_Message+0x78c>
 8006e88:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <Send_Status_Message+0x7c0>)
 8006e8a:	791b      	ldrb	r3, [r3, #4]
 8006e8c:	79fa      	ldrb	r2, [r7, #7]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d12c      	bne.n	8006eec <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 8006e98:	4822      	ldr	r0, [pc, #136]	; (8006f24 <Send_Status_Message+0x7c4>)
 8006e9a:	f016 fd39 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	4b21      	ldr	r3, [pc, #132]	; (8006f28 <Send_Status_Message+0x7c8>)
 8006ea2:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea6:	0dd9      	lsrs	r1, r3, #23
 8006ea8:	460b      	mov	r3, r1
 8006eaa:	041b      	lsls	r3, r3, #16
 8006eac:	1a5b      	subs	r3, r3, r1
 8006eae:	021b      	lsls	r3, r3, #8
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 8006eb6:	481d      	ldr	r0, [pc, #116]	; (8006f2c <Send_Status_Message+0x7cc>)
 8006eb8:	f01f f91e 	bl	80260f8 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006ebc:	79fb      	ldrb	r3, [r7, #7]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006ec0:	011b      	lsls	r3, r3, #4
 8006ec2:	4413      	add	r3, r2
 8006ec4:	330c      	adds	r3, #12
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4819      	ldr	r0, [pc, #100]	; (8006f30 <Send_Status_Message+0x7d0>)
 8006ecc:	f01f f878 	bl	8025fc0 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006ed0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8006ed4:	4817      	ldr	r0, [pc, #92]	; (8006f34 <Send_Status_Message+0x7d4>)
 8006ed6:	f01f f873 	bl	8025fc0 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006eda:	f107 020c 	add.w	r2, r7, #12
 8006ede:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ee2:	2118      	movs	r1, #24
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f7f9 fc21 	bl	800072c <InsertBits>
	{
 8006eea:	e00b      	b.n	8006f04 <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4a07      	ldr	r2, [pc, #28]	; (8006f0c <Send_Status_Message+0x7ac>)
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	4413      	add	r3, r2
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f107 020c 	add.w	r2, r7, #12
 8006efc:	2118      	movs	r1, #24
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7f9 fc14 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006f04:	2300      	movs	r3, #0
 8006f06:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f0a:	e027      	b.n	8006f5c <Send_Status_Message+0x7fc>
 8006f0c:	200028f4 	.word	0x200028f4
 8006f10:	20002764 	.word	0x20002764
 8006f14:	200028b8 	.word	0x200028b8
 8006f18:	20003fcc 	.word	0x20003fcc
 8006f1c:	08028234 	.word	0x08028234
 8006f20:	2000308c 	.word	0x2000308c
 8006f24:	2000bc54 	.word	0x2000bc54
 8006f28:	80008001 	.word	0x80008001
 8006f2c:	0802824c 	.word	0x0802824c
 8006f30:	08028270 	.word	0x08028270
 8006f34:	08028294 	.word	0x08028294
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006f38:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006f3c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f40:	3303      	adds	r3, #3
 8006f42:	3290      	adds	r2, #144	; 0x90
 8006f44:	443a      	add	r2, r7
 8006f46:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006f4a:	3390      	adds	r3, #144	; 0x90
 8006f4c:	443b      	add	r3, r7
 8006f4e:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8006f52:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f56:	3301      	adds	r3, #1
 8006f58:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006f5c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d8e6      	bhi.n	8006f38 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006f6a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006f6e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006f72:	18d4      	adds	r4, r2, r3
 8006f74:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006f78:	b29b      	uxth	r3, r3
 8006f7a:	3303      	adds	r3, #3
 8006f7c:	b29a      	uxth	r2, r3
 8006f7e:	f107 030c 	add.w	r3, r7, #12
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f00e fb79 	bl	801567c <CalculateDirectReverseCrc>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006f90:	4622      	mov	r2, r4
 8006f92:	2120      	movs	r1, #32
 8006f94:	f7f9 fbca 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 8006f98:	4b1f      	ldr	r3, [pc, #124]	; (8007018 <Send_Status_Message+0x8b8>)
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 8006f9e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006fa2:	3320      	adds	r3, #32
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	da00      	bge.n	8006faa <Send_Status_Message+0x84a>
 8006fa8:	3307      	adds	r3, #7
 8006faa:	10db      	asrs	r3, r3, #3
 8006fac:	b29a      	uxth	r2, r3
 8006fae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006fb8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006fbc:	3320      	adds	r3, #32
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	b21b      	sxth	r3, r3
 8006fc2:	425a      	negs	r2, r3
 8006fc4:	f003 0307 	and.w	r3, r3, #7
 8006fc8:	f002 0207 	and.w	r2, r2, #7
 8006fcc:	bf58      	it	pl
 8006fce:	4253      	negpl	r3, r2
 8006fd0:	b21b      	sxth	r3, r3
 8006fd2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <Send_Status_Message+0x8bc>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	0a5b      	lsrs	r3, r3, #9
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00b      	beq.n	8006ffc <Send_Status_Message+0x89c>
 8006fe4:	4b0d      	ldr	r3, [pc, #52]	; (800701c <Send_Status_Message+0x8bc>)
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	79fa      	ldrb	r2, [r7, #7]
 8006fea:	429a      	cmp	r2, r3
 8006fec:	d106      	bne.n	8006ffc <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006fee:	480c      	ldr	r0, [pc, #48]	; (8007020 <Send_Status_Message+0x8c0>)
 8006ff0:	f01f f882 	bl	80260f8 <puts>
		printf("Not Sending Reply");
 8006ff4:	480b      	ldr	r0, [pc, #44]	; (8007024 <Send_Status_Message+0x8c4>)
 8006ff6:	f01e ffe3 	bl	8025fc0 <iprintf>
 8006ffa:	e009      	b.n	8007010 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006ffc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8007000:	b2d9      	uxtb	r1, r3
 8007002:	79fa      	ldrb	r2, [r7, #7]
 8007004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f82d 	bl	8008068 <Process_Sending_Reply>
	}
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	3794      	adds	r7, #148	; 0x94
 8007014:	46bd      	mov	sp, r7
 8007016:	bd90      	pop	{r4, r7, pc}
 8007018:	200024af 	.word	0x200024af
 800701c:	2000308c 	.word	0x2000308c
 8007020:	08027fa8 	.word	0x08027fa8
 8007024:	08027fc0 	.word	0x08027fc0

08007028 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
 8007030:	4608      	mov	r0, r1
 8007032:	4611      	mov	r1, r2
 8007034:	461a      	mov	r2, r3
 8007036:	4603      	mov	r3, r0
 8007038:	70fb      	strb	r3, [r7, #3]
 800703a:	460b      	mov	r3, r1
 800703c:	70bb      	strb	r3, [r7, #2]
 800703e:	4613      	mov	r3, r2
 8007040:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = RESET;
 800704a:	2300      	movs	r3, #0
 800704c:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 800704e:	f012 f8a1 	bl	8019194 <HAL_GetTick>
 8007052:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 8007054:	2300      	movs	r3, #0
 8007056:	81fb      	strh	r3, [r7, #14]
 8007058:	2300      	movs	r3, #0
 800705a:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 800705c:	78fb      	ldrb	r3, [r7, #3]
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b05      	subs	r3, #5
 8007062:	b29b      	uxth	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f00e fb08 	bl	801567c <CalculateDirectReverseCrc>
 800706c:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 800706e:	78fb      	ldrb	r3, [r7, #3]
 8007070:	3b05      	subs	r3, #5
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	441a      	add	r2, r3
 8007076:	89bb      	ldrh	r3, [r7, #12]
 8007078:	2120      	movs	r1, #32
 800707a:	4618      	mov	r0, r3
 800707c:	f7f9 faca 	bl	8000614 <ExtractBits>
 8007080:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	69bb      	ldr	r3, [r7, #24]
 8007086:	429a      	cmp	r2, r3
 8007088:	d01c      	beq.n	80070c4 <Service_Msg_Extr+0x9c>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800708a:	78bb      	ldrb	r3, [r7, #2]
 800708c:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <Service_Msg_Extr+0x8c>)
 800708e:	3366      	adds	r3, #102	; 0x66
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	4619      	mov	r1, r3
 8007098:	4807      	ldr	r0, [pc, #28]	; (80070b8 <Service_Msg_Extr+0x90>)
 800709a:	f01e ff91 	bl	8025fc0 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800709e:	6979      	ldr	r1, [r7, #20]
 80070a0:	4806      	ldr	r0, [pc, #24]	; (80070bc <Service_Msg_Extr+0x94>)
 80070a2:	f01e ff8d 	bl	8025fc0 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80070a6:	69b9      	ldr	r1, [r7, #24]
 80070a8:	4805      	ldr	r0, [pc, #20]	; (80070c0 <Service_Msg_Extr+0x98>)
 80070aa:	f01e ff89 	bl	8025fc0 <iprintf>
		return;
 80070ae:	f000 bc0e 	b.w	80078ce <Service_Msg_Extr+0x8a6>
 80070b2:	bf00      	nop
 80070b4:	20000504 	.word	0x20000504
 80070b8:	08028514 	.word	0x08028514
 80070bc:	08027d14 	.word	0x08027d14
 80070c0:	08027d24 	.word	0x08027d24
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80070c4:	78bb      	ldrb	r3, [r7, #2]
 80070c6:	49ae      	ldr	r1, [pc, #696]	; (8007380 <Service_Msg_Extr+0x358>)
 80070c8:	693a      	ldr	r2, [r7, #16]
 80070ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80070ce:	78bb      	ldrb	r3, [r7, #2]
 80070d0:	49ac      	ldr	r1, [pc, #688]	; (8007384 <Service_Msg_Extr+0x35c>)
 80070d2:	693a      	ldr	r2, [r7, #16]
 80070d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80070d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80070dc:	3308      	adds	r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	da00      	bge.n	80070e4 <Service_Msg_Extr+0xbc>
 80070e2:	3307      	adds	r3, #7
 80070e4:	10db      	asrs	r3, r3, #3
 80070e6:	b29a      	uxth	r2, r3
 80070e8:	89fb      	ldrh	r3, [r7, #14]
 80070ea:	4413      	add	r3, r2
 80070ec:	81fb      	strh	r3, [r7, #14]
 80070ee:	89bb      	ldrh	r3, [r7, #12]
 80070f0:	3308      	adds	r3, #8
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	b21b      	sxth	r3, r3
 80070f6:	425a      	negs	r2, r3
 80070f8:	f003 0307 	and.w	r3, r3, #7
 80070fc:	f002 0207 	and.w	r2, r2, #7
 8007100:	bf58      	it	pl
 8007102:	4253      	negpl	r3, r2
 8007104:	b21b      	sxth	r3, r3
 8007106:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	441a      	add	r2, r3
 800710e:	89bb      	ldrh	r3, [r7, #12]
 8007110:	2110      	movs	r1, #16
 8007112:	4618      	mov	r0, r3
 8007114:	f7f9 fa7e 	bl	8000614 <ExtractBits>
 8007118:	4603      	mov	r3, r0
 800711a:	78ba      	ldrb	r2, [r7, #2]
 800711c:	b298      	uxth	r0, r3
 800711e:	499a      	ldr	r1, [pc, #616]	; (8007388 <Service_Msg_Extr+0x360>)
 8007120:	4613      	mov	r3, r2
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3306      	adds	r3, #6
 800712c:	4602      	mov	r2, r0
 800712e:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8007130:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007134:	3310      	adds	r3, #16
 8007136:	2b00      	cmp	r3, #0
 8007138:	da00      	bge.n	800713c <Service_Msg_Extr+0x114>
 800713a:	3307      	adds	r3, #7
 800713c:	10db      	asrs	r3, r3, #3
 800713e:	b29a      	uxth	r2, r3
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	4413      	add	r3, r2
 8007144:	81fb      	strh	r3, [r7, #14]
 8007146:	89bb      	ldrh	r3, [r7, #12]
 8007148:	3310      	adds	r3, #16
 800714a:	b29b      	uxth	r3, r3
 800714c:	b21b      	sxth	r3, r3
 800714e:	425a      	negs	r2, r3
 8007150:	f003 0307 	and.w	r3, r3, #7
 8007154:	f002 0207 	and.w	r2, r2, #7
 8007158:	bf58      	it	pl
 800715a:	4253      	negpl	r3, r2
 800715c:	b21b      	sxth	r3, r3
 800715e:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8007160:	89fb      	ldrh	r3, [r7, #14]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	441a      	add	r2, r3
 8007166:	89bb      	ldrh	r3, [r7, #12]
 8007168:	2110      	movs	r1, #16
 800716a:	4618      	mov	r0, r3
 800716c:	f7f9 fa52 	bl	8000614 <ExtractBits>
 8007170:	4603      	mov	r3, r0
 8007172:	78ba      	ldrb	r2, [r7, #2]
 8007174:	b298      	uxth	r0, r3
 8007176:	4984      	ldr	r1, [pc, #528]	; (8007388 <Service_Msg_Extr+0x360>)
 8007178:	4613      	mov	r3, r2
 800717a:	005b      	lsls	r3, r3, #1
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	3304      	adds	r3, #4
 8007184:	4602      	mov	r2, r0
 8007186:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 8007188:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800718c:	3310      	adds	r3, #16
 800718e:	2b00      	cmp	r3, #0
 8007190:	da00      	bge.n	8007194 <Service_Msg_Extr+0x16c>
 8007192:	3307      	adds	r3, #7
 8007194:	10db      	asrs	r3, r3, #3
 8007196:	b29a      	uxth	r2, r3
 8007198:	89fb      	ldrh	r3, [r7, #14]
 800719a:	4413      	add	r3, r2
 800719c:	81fb      	strh	r3, [r7, #14]
 800719e:	89bb      	ldrh	r3, [r7, #12]
 80071a0:	3310      	adds	r3, #16
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	b21b      	sxth	r3, r3
 80071a6:	425a      	negs	r2, r3
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	f002 0207 	and.w	r2, r2, #7
 80071b0:	bf58      	it	pl
 80071b2:	4253      	negpl	r3, r2
 80071b4:	b21b      	sxth	r3, r3
 80071b6:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80071b8:	89fb      	ldrh	r3, [r7, #14]
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	441a      	add	r2, r3
 80071be:	89bb      	ldrh	r3, [r7, #12]
 80071c0:	2108      	movs	r1, #8
 80071c2:	4618      	mov	r0, r3
 80071c4:	f7f9 fa26 	bl	8000614 <ExtractBits>
 80071c8:	4602      	mov	r2, r0
 80071ca:	78bb      	ldrb	r3, [r7, #2]
 80071cc:	b2d1      	uxtb	r1, r2
 80071ce:	4a6f      	ldr	r2, [pc, #444]	; (800738c <Service_Msg_Extr+0x364>)
 80071d0:	011b      	lsls	r3, r3, #4
 80071d2:	4413      	add	r3, r2
 80071d4:	3302      	adds	r3, #2
 80071d6:	460a      	mov	r2, r1
 80071d8:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80071da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80071de:	3308      	adds	r3, #8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	da00      	bge.n	80071e6 <Service_Msg_Extr+0x1be>
 80071e4:	3307      	adds	r3, #7
 80071e6:	10db      	asrs	r3, r3, #3
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	89fb      	ldrh	r3, [r7, #14]
 80071ec:	4413      	add	r3, r2
 80071ee:	81fb      	strh	r3, [r7, #14]
 80071f0:	89bb      	ldrh	r3, [r7, #12]
 80071f2:	3308      	adds	r3, #8
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	b21b      	sxth	r3, r3
 80071f8:	425a      	negs	r2, r3
 80071fa:	f003 0307 	and.w	r3, r3, #7
 80071fe:	f002 0207 	and.w	r2, r2, #7
 8007202:	bf58      	it	pl
 8007204:	4253      	negpl	r3, r2
 8007206:	b21b      	sxth	r3, r3
 8007208:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800720a:	89fb      	ldrh	r3, [r7, #14]
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	441a      	add	r2, r3
 8007210:	89bb      	ldrh	r3, [r7, #12]
 8007212:	2108      	movs	r1, #8
 8007214:	4618      	mov	r0, r3
 8007216:	f7f9 f9fd 	bl	8000614 <ExtractBits>
 800721a:	4602      	mov	r2, r0
 800721c:	78bb      	ldrb	r3, [r7, #2]
 800721e:	b2d1      	uxtb	r1, r2
 8007220:	4a5a      	ldr	r2, [pc, #360]	; (800738c <Service_Msg_Extr+0x364>)
 8007222:	011b      	lsls	r3, r3, #4
 8007224:	4413      	add	r3, r2
 8007226:	3301      	adds	r3, #1
 8007228:	460a      	mov	r2, r1
 800722a:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 800722c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007230:	3308      	adds	r3, #8
 8007232:	2b00      	cmp	r3, #0
 8007234:	da00      	bge.n	8007238 <Service_Msg_Extr+0x210>
 8007236:	3307      	adds	r3, #7
 8007238:	10db      	asrs	r3, r3, #3
 800723a:	b29a      	uxth	r2, r3
 800723c:	89fb      	ldrh	r3, [r7, #14]
 800723e:	4413      	add	r3, r2
 8007240:	81fb      	strh	r3, [r7, #14]
 8007242:	89bb      	ldrh	r3, [r7, #12]
 8007244:	3308      	adds	r3, #8
 8007246:	b29b      	uxth	r3, r3
 8007248:	b21b      	sxth	r3, r3
 800724a:	425a      	negs	r2, r3
 800724c:	f003 0307 	and.w	r3, r3, #7
 8007250:	f002 0207 	and.w	r2, r2, #7
 8007254:	bf58      	it	pl
 8007256:	4253      	negpl	r3, r2
 8007258:	b21b      	sxth	r3, r3
 800725a:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800725c:	89fb      	ldrh	r3, [r7, #14]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	441a      	add	r2, r3
 8007262:	89bb      	ldrh	r3, [r7, #12]
 8007264:	2108      	movs	r1, #8
 8007266:	4618      	mov	r0, r3
 8007268:	f7f9 f9d4 	bl	8000614 <ExtractBits>
 800726c:	4603      	mov	r3, r0
 800726e:	78ba      	ldrb	r2, [r7, #2]
 8007270:	b2d8      	uxtb	r0, r3
 8007272:	4945      	ldr	r1, [pc, #276]	; (8007388 <Service_Msg_Extr+0x360>)
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	440b      	add	r3, r1
 800727e:	3302      	adds	r3, #2
 8007280:	4602      	mov	r2, r0
 8007282:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8007284:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007288:	3308      	adds	r3, #8
 800728a:	2b00      	cmp	r3, #0
 800728c:	da00      	bge.n	8007290 <Service_Msg_Extr+0x268>
 800728e:	3307      	adds	r3, #7
 8007290:	10db      	asrs	r3, r3, #3
 8007292:	b29a      	uxth	r2, r3
 8007294:	89fb      	ldrh	r3, [r7, #14]
 8007296:	4413      	add	r3, r2
 8007298:	81fb      	strh	r3, [r7, #14]
 800729a:	89bb      	ldrh	r3, [r7, #12]
 800729c:	3308      	adds	r3, #8
 800729e:	b29b      	uxth	r3, r3
 80072a0:	b21b      	sxth	r3, r3
 80072a2:	425a      	negs	r2, r3
 80072a4:	f003 0307 	and.w	r3, r3, #7
 80072a8:	f002 0207 	and.w	r2, r2, #7
 80072ac:	bf58      	it	pl
 80072ae:	4253      	negpl	r3, r2
 80072b0:	b21b      	sxth	r3, r3
 80072b2:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80072b4:	89fb      	ldrh	r3, [r7, #14]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	441a      	add	r2, r3
 80072ba:	89bb      	ldrh	r3, [r7, #12]
 80072bc:	2110      	movs	r1, #16
 80072be:	4618      	mov	r0, r3
 80072c0:	f7f9 f9a8 	bl	8000614 <ExtractBits>
 80072c4:	4602      	mov	r2, r0
 80072c6:	78bb      	ldrb	r3, [r7, #2]
 80072c8:	b291      	uxth	r1, r2
 80072ca:	4a30      	ldr	r2, [pc, #192]	; (800738c <Service_Msg_Extr+0x364>)
 80072cc:	011b      	lsls	r3, r3, #4
 80072ce:	4413      	add	r3, r2
 80072d0:	3304      	adds	r3, #4
 80072d2:	460a      	mov	r2, r1
 80072d4:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80072d6:	492e      	ldr	r1, [pc, #184]	; (8007390 <Service_Msg_Extr+0x368>)
 80072d8:	482e      	ldr	r0, [pc, #184]	; (8007394 <Service_Msg_Extr+0x36c>)
 80072da:	f7f8 ffb1 	bl	8000240 <strcmp>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10f      	bne.n	8007304 <Service_Msg_Extr+0x2dc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80072e4:	78bb      	ldrb	r3, [r7, #2]
 80072e6:	4a29      	ldr	r2, [pc, #164]	; (800738c <Service_Msg_Extr+0x364>)
 80072e8:	011b      	lsls	r3, r3, #4
 80072ea:	4413      	add	r3, r2
 80072ec:	3304      	adds	r3, #4
 80072ee:	881a      	ldrh	r2, [r3, #0]
 80072f0:	78bb      	ldrb	r3, [r7, #2]
 80072f2:	f042 0208 	orr.w	r2, r2, #8
 80072f6:	b291      	uxth	r1, r2
 80072f8:	4a24      	ldr	r2, [pc, #144]	; (800738c <Service_Msg_Extr+0x364>)
 80072fa:	011b      	lsls	r3, r3, #4
 80072fc:	4413      	add	r3, r2
 80072fe:	3304      	adds	r3, #4
 8007300:	460a      	mov	r2, r1
 8007302:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8007304:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007308:	3310      	adds	r3, #16
 800730a:	2b00      	cmp	r3, #0
 800730c:	da00      	bge.n	8007310 <Service_Msg_Extr+0x2e8>
 800730e:	3307      	adds	r3, #7
 8007310:	10db      	asrs	r3, r3, #3
 8007312:	b29a      	uxth	r2, r3
 8007314:	89fb      	ldrh	r3, [r7, #14]
 8007316:	4413      	add	r3, r2
 8007318:	81fb      	strh	r3, [r7, #14]
 800731a:	89bb      	ldrh	r3, [r7, #12]
 800731c:	3310      	adds	r3, #16
 800731e:	b29b      	uxth	r3, r3
 8007320:	b21b      	sxth	r3, r3
 8007322:	425a      	negs	r2, r3
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	f002 0207 	and.w	r2, r2, #7
 800732c:	bf58      	it	pl
 800732e:	4253      	negpl	r3, r2
 8007330:	b21b      	sxth	r3, r3
 8007332:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8007334:	78bb      	ldrb	r3, [r7, #2]
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <Service_Msg_Extr+0x364>)
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	4413      	add	r3, r2
 800733c:	3304      	adds	r3, #4
 800733e:	881b      	ldrh	r3, [r3, #0]
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	f000 8126 	beq.w	8007596 <Service_Msg_Extr+0x56e>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800734a:	89fb      	ldrh	r3, [r7, #14]
 800734c:	687a      	ldr	r2, [r7, #4]
 800734e:	441a      	add	r2, r3
 8007350:	89bb      	ldrh	r3, [r7, #12]
 8007352:	2108      	movs	r1, #8
 8007354:	4618      	mov	r0, r3
 8007356:	f7f9 f95d 	bl	8000614 <ExtractBits>
 800735a:	4603      	mov	r3, r0
 800735c:	78ba      	ldrb	r2, [r7, #2]
 800735e:	b2d8      	uxtb	r0, r3
 8007360:	490d      	ldr	r1, [pc, #52]	; (8007398 <Service_Msg_Extr+0x370>)
 8007362:	4613      	mov	r3, r2
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	440b      	add	r3, r1
 800736c:	3305      	adds	r3, #5
 800736e:	4602      	mov	r2, r0
 8007370:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8007372:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007376:	3308      	adds	r3, #8
 8007378:	2b00      	cmp	r3, #0
 800737a:	da0f      	bge.n	800739c <Service_Msg_Extr+0x374>
 800737c:	3307      	adds	r3, #7
 800737e:	e00d      	b.n	800739c <Service_Msg_Extr+0x374>
 8007380:	20002630 	.word	0x20002630
 8007384:	20002658 	.word	0x20002658
 8007388:	20002cb4 	.word	0x20002cb4
 800738c:	200028f4 	.word	0x200028f4
 8007390:	08027ad0 	.word	0x08027ad0
 8007394:	20000505 	.word	0x20000505
 8007398:	200028b8 	.word	0x200028b8
 800739c:	10db      	asrs	r3, r3, #3
 800739e:	b29a      	uxth	r2, r3
 80073a0:	89fb      	ldrh	r3, [r7, #14]
 80073a2:	4413      	add	r3, r2
 80073a4:	81fb      	strh	r3, [r7, #14]
 80073a6:	89bb      	ldrh	r3, [r7, #12]
 80073a8:	3308      	adds	r3, #8
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	b21b      	sxth	r3, r3
 80073ae:	425a      	negs	r2, r3
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	f002 0207 	and.w	r2, r2, #7
 80073b8:	bf58      	it	pl
 80073ba:	4253      	negpl	r3, r2
 80073bc:	b21b      	sxth	r3, r3
 80073be:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80073c0:	89fb      	ldrh	r3, [r7, #14]
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	441a      	add	r2, r3
 80073c6:	89bb      	ldrh	r3, [r7, #12]
 80073c8:	2108      	movs	r1, #8
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f9 f922 	bl	8000614 <ExtractBits>
 80073d0:	4603      	mov	r3, r0
 80073d2:	78ba      	ldrb	r2, [r7, #2]
 80073d4:	b2d8      	uxtb	r0, r3
 80073d6:	4989      	ldr	r1, [pc, #548]	; (80075fc <Service_Msg_Extr+0x5d4>)
 80073d8:	4613      	mov	r3, r2
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	005b      	lsls	r3, r3, #1
 80073e0:	440b      	add	r3, r1
 80073e2:	3304      	adds	r3, #4
 80073e4:	4602      	mov	r2, r0
 80073e6:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80073e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80073ec:	3308      	adds	r3, #8
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da00      	bge.n	80073f4 <Service_Msg_Extr+0x3cc>
 80073f2:	3307      	adds	r3, #7
 80073f4:	10db      	asrs	r3, r3, #3
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	89fb      	ldrh	r3, [r7, #14]
 80073fa:	4413      	add	r3, r2
 80073fc:	81fb      	strh	r3, [r7, #14]
 80073fe:	89bb      	ldrh	r3, [r7, #12]
 8007400:	3308      	adds	r3, #8
 8007402:	b29b      	uxth	r3, r3
 8007404:	b21b      	sxth	r3, r3
 8007406:	425a      	negs	r2, r3
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	f002 0207 	and.w	r2, r2, #7
 8007410:	bf58      	it	pl
 8007412:	4253      	negpl	r3, r2
 8007414:	b21b      	sxth	r3, r3
 8007416:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007418:	89fb      	ldrh	r3, [r7, #14]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	441a      	add	r2, r3
 800741e:	89bb      	ldrh	r3, [r7, #12]
 8007420:	2108      	movs	r1, #8
 8007422:	4618      	mov	r0, r3
 8007424:	f7f9 f8f6 	bl	8000614 <ExtractBits>
 8007428:	4603      	mov	r3, r0
 800742a:	78ba      	ldrb	r2, [r7, #2]
 800742c:	b2d8      	uxtb	r0, r3
 800742e:	4973      	ldr	r1, [pc, #460]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	440b      	add	r3, r1
 800743a:	3303      	adds	r3, #3
 800743c:	4602      	mov	r2, r0
 800743e:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8007440:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007444:	3308      	adds	r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	da00      	bge.n	800744c <Service_Msg_Extr+0x424>
 800744a:	3307      	adds	r3, #7
 800744c:	10db      	asrs	r3, r3, #3
 800744e:	b29a      	uxth	r2, r3
 8007450:	89fb      	ldrh	r3, [r7, #14]
 8007452:	4413      	add	r3, r2
 8007454:	81fb      	strh	r3, [r7, #14]
 8007456:	89bb      	ldrh	r3, [r7, #12]
 8007458:	3308      	adds	r3, #8
 800745a:	b29b      	uxth	r3, r3
 800745c:	b21b      	sxth	r3, r3
 800745e:	425a      	negs	r2, r3
 8007460:	f003 0307 	and.w	r3, r3, #7
 8007464:	f002 0207 	and.w	r2, r2, #7
 8007468:	bf58      	it	pl
 800746a:	4253      	negpl	r3, r2
 800746c:	b21b      	sxth	r3, r3
 800746e:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8007470:	89fb      	ldrh	r3, [r7, #14]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	441a      	add	r2, r3
 8007476:	89bb      	ldrh	r3, [r7, #12]
 8007478:	2108      	movs	r1, #8
 800747a:	4618      	mov	r0, r3
 800747c:	f7f9 f8ca 	bl	8000614 <ExtractBits>
 8007480:	4603      	mov	r3, r0
 8007482:	78ba      	ldrb	r2, [r7, #2]
 8007484:	b2d8      	uxtb	r0, r3
 8007486:	495d      	ldr	r1, [pc, #372]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	440b      	add	r3, r1
 8007492:	4602      	mov	r2, r0
 8007494:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8007496:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800749a:	3308      	adds	r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	da00      	bge.n	80074a2 <Service_Msg_Extr+0x47a>
 80074a0:	3307      	adds	r3, #7
 80074a2:	10db      	asrs	r3, r3, #3
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	89fb      	ldrh	r3, [r7, #14]
 80074a8:	4413      	add	r3, r2
 80074aa:	81fb      	strh	r3, [r7, #14]
 80074ac:	89bb      	ldrh	r3, [r7, #12]
 80074ae:	3308      	adds	r3, #8
 80074b0:	b29b      	uxth	r3, r3
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	425a      	negs	r2, r3
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	f002 0207 	and.w	r2, r2, #7
 80074be:	bf58      	it	pl
 80074c0:	4253      	negpl	r3, r2
 80074c2:	b21b      	sxth	r3, r3
 80074c4:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80074c6:	89fb      	ldrh	r3, [r7, #14]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	441a      	add	r2, r3
 80074cc:	89bb      	ldrh	r3, [r7, #12]
 80074ce:	2108      	movs	r1, #8
 80074d0:	4618      	mov	r0, r3
 80074d2:	f7f9 f89f 	bl	8000614 <ExtractBits>
 80074d6:	4603      	mov	r3, r0
 80074d8:	78ba      	ldrb	r2, [r7, #2]
 80074da:	b2d8      	uxtb	r0, r3
 80074dc:	4947      	ldr	r1, [pc, #284]	; (80075fc <Service_Msg_Extr+0x5d4>)
 80074de:	4613      	mov	r3, r2
 80074e0:	005b      	lsls	r3, r3, #1
 80074e2:	4413      	add	r3, r2
 80074e4:	005b      	lsls	r3, r3, #1
 80074e6:	440b      	add	r3, r1
 80074e8:	3301      	adds	r3, #1
 80074ea:	4602      	mov	r2, r0
 80074ec:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 80074ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80074f2:	3308      	adds	r3, #8
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	da00      	bge.n	80074fa <Service_Msg_Extr+0x4d2>
 80074f8:	3307      	adds	r3, #7
 80074fa:	10db      	asrs	r3, r3, #3
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	89fb      	ldrh	r3, [r7, #14]
 8007500:	4413      	add	r3, r2
 8007502:	81fb      	strh	r3, [r7, #14]
 8007504:	89bb      	ldrh	r3, [r7, #12]
 8007506:	3308      	adds	r3, #8
 8007508:	b29b      	uxth	r3, r3
 800750a:	b21b      	sxth	r3, r3
 800750c:	425a      	negs	r2, r3
 800750e:	f003 0307 	and.w	r3, r3, #7
 8007512:	f002 0207 	and.w	r2, r2, #7
 8007516:	bf58      	it	pl
 8007518:	4253      	negpl	r3, r2
 800751a:	b21b      	sxth	r3, r3
 800751c:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800751e:	89fb      	ldrh	r3, [r7, #14]
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	441a      	add	r2, r3
 8007524:	89bb      	ldrh	r3, [r7, #12]
 8007526:	2108      	movs	r1, #8
 8007528:	4618      	mov	r0, r3
 800752a:	f7f9 f873 	bl	8000614 <ExtractBits>
 800752e:	4603      	mov	r3, r0
 8007530:	78ba      	ldrb	r2, [r7, #2]
 8007532:	b2d8      	uxtb	r0, r3
 8007534:	4931      	ldr	r1, [pc, #196]	; (80075fc <Service_Msg_Extr+0x5d4>)
 8007536:	4613      	mov	r3, r2
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	005b      	lsls	r3, r3, #1
 800753e:	440b      	add	r3, r1
 8007540:	3302      	adds	r3, #2
 8007542:	4602      	mov	r2, r0
 8007544:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8007546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800754a:	3308      	adds	r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	da00      	bge.n	8007552 <Service_Msg_Extr+0x52a>
 8007550:	3307      	adds	r3, #7
 8007552:	10db      	asrs	r3, r3, #3
 8007554:	b29a      	uxth	r2, r3
 8007556:	89fb      	ldrh	r3, [r7, #14]
 8007558:	4413      	add	r3, r2
 800755a:	81fb      	strh	r3, [r7, #14]
 800755c:	89bb      	ldrh	r3, [r7, #12]
 800755e:	3308      	adds	r3, #8
 8007560:	b29b      	uxth	r3, r3
 8007562:	b21b      	sxth	r3, r3
 8007564:	425a      	negs	r2, r3
 8007566:	f003 0307 	and.w	r3, r3, #7
 800756a:	f002 0207 	and.w	r2, r2, #7
 800756e:	bf58      	it	pl
 8007570:	4253      	negpl	r3, r2
 8007572:	b21b      	sxth	r3, r3
 8007574:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8007576:	78bb      	ldrb	r3, [r7, #2]
 8007578:	4618      	mov	r0, r3
 800757a:	f002 f9c5 	bl	8009908 <IS_MLK_EIPC_TIME_MATCHING>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d004      	beq.n	800758e <Service_Msg_Extr+0x566>
 8007584:	78bb      	ldrb	r3, [r7, #2]
 8007586:	4a1e      	ldr	r2, [pc, #120]	; (8007600 <Service_Msg_Extr+0x5d8>)
 8007588:	2100      	movs	r1, #0
 800758a:	54d1      	strb	r1, [r2, r3]
 800758c:	e003      	b.n	8007596 <Service_Msg_Extr+0x56e>
 800758e:	78bb      	ldrb	r3, [r7, #2]
 8007590:	4a1b      	ldr	r2, [pc, #108]	; (8007600 <Service_Msg_Extr+0x5d8>)
 8007592:	2101      	movs	r1, #1
 8007594:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8007596:	78bb      	ldrb	r3, [r7, #2]
 8007598:	4a1a      	ldr	r2, [pc, #104]	; (8007604 <Service_Msg_Extr+0x5dc>)
 800759a:	011b      	lsls	r3, r3, #4
 800759c:	4413      	add	r3, r2
 800759e:	3304      	adds	r3, #4
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	f003 0308 	and.w	r3, r3, #8
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d001      	beq.n	80075ae <Service_Msg_Extr+0x586>
	{
		LinkEstablishFlag = SET;
 80075aa:	2301      	movs	r3, #1
 80075ac:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 80075ae:	787a      	ldrb	r2, [r7, #1]
 80075b0:	78bb      	ldrb	r3, [r7, #2]
 80075b2:	4611      	mov	r1, r2
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff f8d3 	bl	8006760 <Send_Status_Message>
	/* Preparing and Sending Reply */

	if((EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL) && (LastActCount[Source_Index] < MAX_LAST_ACT_COUNT) && (CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]) == RESET) && (Act_InactiveFlag[Source_Index] == SET))
 80075ba:	78bb      	ldrb	r3, [r7, #2]
 80075bc:	4a12      	ldr	r2, [pc, #72]	; (8007608 <Service_Msg_Extr+0x5e0>)
 80075be:	4413      	add	r3, r2
 80075c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d127      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
 80075c8:	78bb      	ldrb	r3, [r7, #2]
 80075ca:	4a10      	ldr	r2, [pc, #64]	; (800760c <Service_Msg_Extr+0x5e4>)
 80075cc:	5cd3      	ldrb	r3, [r2, r3]
 80075ce:	2b03      	cmp	r3, #3
 80075d0:	d822      	bhi.n	8007618 <Service_Msg_Extr+0x5f0>
 80075d2:	78ba      	ldrb	r2, [r7, #2]
 80075d4:	490e      	ldr	r1, [pc, #56]	; (8007610 <Service_Msg_Extr+0x5e8>)
 80075d6:	4613      	mov	r3, r2
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	4413      	add	r3, r2
 80075dc:	011b      	lsls	r3, r3, #4
 80075de:	440b      	add	r3, r1
 80075e0:	3305      	adds	r3, #5
 80075e2:	781b      	ldrb	r3, [r3, #0]
 80075e4:	f003 0301 	and.w	r3, r3, #1
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d115      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
 80075ec:	78bb      	ldrb	r3, [r7, #2]
 80075ee:	4a09      	ldr	r2, [pc, #36]	; (8007614 <Service_Msg_Extr+0x5ec>)
 80075f0:	5cd3      	ldrb	r3, [r2, r3]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d110      	bne.n	8007618 <Service_Msg_Extr+0x5f0>
	{
		LinkEstablishFlag = RESET;
 80075f6:	2300      	movs	r3, #0
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e037      	b.n	800766c <Service_Msg_Extr+0x644>
 80075fc:	200028b8 	.word	0x200028b8
 8007600:	20002764 	.word	0x20002764
 8007604:	200028f4 	.word	0x200028f4
 8007608:	20000504 	.word	0x20000504
 800760c:	20002544 	.word	0x20002544
 8007610:	20002ad4 	.word	0x20002ad4
 8007614:	20002538 	.word	0x20002538
	}
	else if (EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 8007618:	78bb      	ldrb	r3, [r7, #2]
 800761a:	4aae      	ldr	r2, [pc, #696]	; (80078d4 <Service_Msg_Extr+0x8ac>)
 800761c:	4413      	add	r3, r2
 800761e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007622:	2b02      	cmp	r3, #2
 8007624:	d122      	bne.n	800766c <Service_Msg_Extr+0x644>
	{
		printf("LAC[%lu]:%u\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index],LastActCount[Source_Index]);
 8007626:	78bb      	ldrb	r3, [r7, #2]
 8007628:	4aaa      	ldr	r2, [pc, #680]	; (80078d4 <Service_Msg_Extr+0x8ac>)
 800762a:	3366      	adds	r3, #102	; 0x66
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	6859      	ldr	r1, [r3, #4]
 8007632:	78bb      	ldrb	r3, [r7, #2]
 8007634:	4aa8      	ldr	r2, [pc, #672]	; (80078d8 <Service_Msg_Extr+0x8b0>)
 8007636:	5cd3      	ldrb	r3, [r2, r3]
 8007638:	461a      	mov	r2, r3
 800763a:	48a8      	ldr	r0, [pc, #672]	; (80078dc <Service_Msg_Extr+0x8b4>)
 800763c:	f01e fcc0 	bl	8025fc0 <iprintf>
		printf("Act_InactiveFlag:%u\n",Act_InactiveFlag[Source_Index]);
 8007640:	78bb      	ldrb	r3, [r7, #2]
 8007642:	4aa7      	ldr	r2, [pc, #668]	; (80078e0 <Service_Msg_Extr+0x8b8>)
 8007644:	5cd3      	ldrb	r3, [r2, r3]
 8007646:	4619      	mov	r1, r3
 8007648:	48a6      	ldr	r0, [pc, #664]	; (80078e4 <Service_Msg_Extr+0x8bc>)
 800764a:	f01e fcb9 	bl	8025fc0 <iprintf>
		printf("OnlineBit:%u\n",CHECKFLAG(0,Hitachi_Vital_st[Source_Index].Outputs[0]));
 800764e:	78ba      	ldrb	r2, [r7, #2]
 8007650:	49a5      	ldr	r1, [pc, #660]	; (80078e8 <Service_Msg_Extr+0x8c0>)
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	011b      	lsls	r3, r3, #4
 800765a:	440b      	add	r3, r1
 800765c:	3305      	adds	r3, #5
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	4619      	mov	r1, r3
 8007666:	48a1      	ldr	r0, [pc, #644]	; (80078ec <Service_Msg_Extr+0x8c4>)
 8007668:	f01e fcaa 	bl	8025fc0 <iprintf>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 800766c:	7ffb      	ldrb	r3, [r7, #31]
 800766e:	2b01      	cmp	r3, #1
 8007670:	f040 8083 	bne.w	800777a <Service_Msg_Extr+0x752>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007674:	78ba      	ldrb	r2, [r7, #2]
 8007676:	4613      	mov	r3, r2
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	4413      	add	r3, r2
 800767c:	009b      	lsls	r3, r3, #2
 800767e:	4a9c      	ldr	r2, [pc, #624]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 8007680:	4413      	add	r3, r2
 8007682:	3301      	adds	r3, #1
 8007684:	2210      	movs	r2, #16
 8007686:	2100      	movs	r1, #0
 8007688:	4618      	mov	r0, r3
 800768a:	f01e fbb1 	bl	8025df0 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 800768e:	78ba      	ldrb	r2, [r7, #2]
 8007690:	4613      	mov	r3, r2
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	4413      	add	r3, r2
 8007696:	009b      	lsls	r3, r3, #2
 8007698:	4a95      	ldr	r2, [pc, #596]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800769a:	1898      	adds	r0, r3, r2
 800769c:	78ba      	ldrb	r2, [r7, #2]
 800769e:	4613      	mov	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4413      	add	r3, r2
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4a93      	ldr	r2, [pc, #588]	; (80078f4 <Service_Msg_Extr+0x8cc>)
 80076a8:	4413      	add	r3, r2
 80076aa:	2214      	movs	r2, #20
 80076ac:	4619      	mov	r1, r3
 80076ae:	f01e fb77 	bl	8025da0 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 80076b2:	78bb      	ldrb	r3, [r7, #2]
 80076b4:	4a90      	ldr	r2, [pc, #576]	; (80078f8 <Service_Msg_Extr+0x8d0>)
 80076b6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80076ba:	78ba      	ldrb	r2, [r7, #2]
 80076bc:	488c      	ldr	r0, [pc, #560]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80076be:	4613      	mov	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	4413      	add	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4403      	add	r3, r0
 80076c8:	3312      	adds	r3, #18
 80076ca:	881b      	ldrh	r3, [r3, #0]
 80076cc:	4299      	cmp	r1, r3
 80076ce:	d054      	beq.n	800777a <Service_Msg_Extr+0x752>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 80076d0:	78ba      	ldrb	r2, [r7, #2]
 80076d2:	78b9      	ldrb	r1, [r7, #2]
 80076d4:	4886      	ldr	r0, [pc, #536]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4403      	add	r3, r0
 80076e0:	3312      	adds	r3, #18
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	4b84      	ldr	r3, [pc, #528]	; (80078f8 <Service_Msg_Extr+0x8d0>)
 80076e6:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 80076ea:	2214      	movs	r2, #20
 80076ec:	2100      	movs	r1, #0
 80076ee:	4883      	ldr	r0, [pc, #524]	; (80078fc <Service_Msg_Extr+0x8d4>)
 80076f0:	f01e fb7e 	bl	8025df0 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 80076f4:	78ba      	ldrb	r2, [r7, #2]
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4a7c      	ldr	r2, [pc, #496]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 8007700:	4413      	add	r3, r2
 8007702:	2214      	movs	r2, #20
 8007704:	4619      	mov	r1, r3
 8007706:	487d      	ldr	r0, [pc, #500]	; (80078fc <Service_Msg_Extr+0x8d4>)
 8007708:	f01e fb4a 	bl	8025da0 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800770c:	f240 2007 	movw	r0, #519	; 0x207
 8007710:	f009 fc26 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8007714:	78b9      	ldrb	r1, [r7, #2]
 8007716:	78ba      	ldrb	r2, [r7, #2]
 8007718:	4875      	ldr	r0, [pc, #468]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800771a:	460b      	mov	r3, r1
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	440b      	add	r3, r1
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	4403      	add	r3, r0
 8007724:	3312      	adds	r3, #18
 8007726:	8818      	ldrh	r0, [r3, #0]
 8007728:	4975      	ldr	r1, [pc, #468]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800772a:	4613      	mov	r3, r2
 800772c:	005b      	lsls	r3, r3, #1
 800772e:	4413      	add	r3, r2
 8007730:	00db      	lsls	r3, r3, #3
 8007732:	440b      	add	r3, r1
 8007734:	3306      	adds	r3, #6
 8007736:	4602      	mov	r2, r0
 8007738:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 800773a:	78bb      	ldrb	r3, [r7, #2]
 800773c:	4a71      	ldr	r2, [pc, #452]	; (8007904 <Service_Msg_Extr+0x8dc>)
 800773e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d119      	bne.n	800777a <Service_Msg_Extr+0x752>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007746:	78bb      	ldrb	r3, [r7, #2]
 8007748:	011b      	lsls	r3, r3, #4
 800774a:	4a6f      	ldr	r2, [pc, #444]	; (8007908 <Service_Msg_Extr+0x8e0>)
 800774c:	4413      	add	r3, r2
 800774e:	1c98      	adds	r0, r3, #2
 8007750:	78ba      	ldrb	r2, [r7, #2]
 8007752:	4613      	mov	r3, r2
 8007754:	009b      	lsls	r3, r3, #2
 8007756:	4413      	add	r3, r2
 8007758:	009b      	lsls	r3, r3, #2
 800775a:	4a65      	ldr	r2, [pc, #404]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 800775c:	4413      	add	r3, r2
 800775e:	3301      	adds	r3, #1
 8007760:	2210      	movs	r2, #16
 8007762:	4619      	mov	r1, r3
 8007764:	f01e fb1c 	bl	8025da0 <memcpy>
#ifdef EI_1
				ReArrangedVitalData();
 8007768:	f002 ffcc 	bl	800a704 <ReArrangedVitalData>
				TransmitCanPkt(EI_PROCESS_DATA);
 800776c:	f240 1019 	movw	r0, #281	; 0x119
 8007770:	f009 fbf6 	bl	8010f60 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8007774:	4a65      	ldr	r2, [pc, #404]	; (800790c <Service_Msg_Extr+0x8e4>)
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 800777a:	78ba      	ldrb	r2, [r7, #2]
 800777c:	4960      	ldr	r1, [pc, #384]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800777e:	4613      	mov	r3, r2
 8007780:	005b      	lsls	r3, r3, #1
 8007782:	4413      	add	r3, r2
 8007784:	00db      	lsls	r3, r3, #3
 8007786:	440b      	add	r3, r1
 8007788:	3314      	adds	r3, #20
 800778a:	697a      	ldr	r2, [r7, #20]
 800778c:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 800778e:	78ba      	ldrb	r2, [r7, #2]
 8007790:	495b      	ldr	r1, [pc, #364]	; (8007900 <Service_Msg_Extr+0x8d8>)
 8007792:	4613      	mov	r3, r2
 8007794:	005b      	lsls	r3, r3, #1
 8007796:	4413      	add	r3, r2
 8007798:	00db      	lsls	r3, r3, #3
 800779a:	440b      	add	r3, r1
 800779c:	3305      	adds	r3, #5
 800779e:	2206      	movs	r2, #6
 80077a0:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80077a2:	78ba      	ldrb	r2, [r7, #2]
 80077a4:	4956      	ldr	r1, [pc, #344]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077a6:	4613      	mov	r3, r2
 80077a8:	005b      	lsls	r3, r3, #1
 80077aa:	4413      	add	r3, r2
 80077ac:	00db      	lsls	r3, r3, #3
 80077ae:	440b      	add	r3, r1
 80077b0:	78ba      	ldrb	r2, [r7, #2]
 80077b2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80077b4:	78ba      	ldrb	r2, [r7, #2]
 80077b6:	4952      	ldr	r1, [pc, #328]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077b8:	4613      	mov	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	440b      	add	r3, r1
 80077c2:	3301      	adds	r3, #1
 80077c4:	2201      	movs	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 80077c8:	78ba      	ldrb	r2, [r7, #2]
 80077ca:	494d      	ldr	r1, [pc, #308]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077cc:	4613      	mov	r3, r2
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	440b      	add	r3, r1
 80077d6:	3302      	adds	r3, #2
 80077d8:	7ffa      	ldrb	r2, [r7, #31]
 80077da:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80077dc:	2218      	movs	r2, #24
 80077de:	2100      	movs	r1, #0
 80077e0:	484b      	ldr	r0, [pc, #300]	; (8007910 <Service_Msg_Extr+0x8e8>)
 80077e2:	f01e fb05 	bl	8025df0 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80077e6:	78ba      	ldrb	r2, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	005b      	lsls	r3, r3, #1
 80077ec:	4413      	add	r3, r2
 80077ee:	00db      	lsls	r3, r3, #3
 80077f0:	4a43      	ldr	r2, [pc, #268]	; (8007900 <Service_Msg_Extr+0x8d8>)
 80077f2:	4413      	add	r3, r2
 80077f4:	2218      	movs	r2, #24
 80077f6:	4619      	mov	r1, r3
 80077f8:	4845      	ldr	r0, [pc, #276]	; (8007910 <Service_Msg_Extr+0x8e8>)
 80077fa:	f01e fad1 	bl	8025da0 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 80077fe:	f240 2001 	movw	r0, #513	; 0x201
 8007802:	f009 fbad 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8007806:	78ba      	ldrb	r2, [r7, #2]
 8007808:	493d      	ldr	r1, [pc, #244]	; (8007900 <Service_Msg_Extr+0x8d8>)
 800780a:	4613      	mov	r3, r2
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	440b      	add	r3, r1
 8007814:	3301      	adds	r3, #1
 8007816:	2200      	movs	r2, #0
 8007818:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 800781a:	78bb      	ldrb	r3, [r7, #2]
 800781c:	493d      	ldr	r1, [pc, #244]	; (8007914 <Service_Msg_Extr+0x8ec>)
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8007824:	7ffb      	ldrb	r3, [r7, #31]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d11d      	bne.n	8007866 <Service_Msg_Extr+0x83e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 800782a:	78bb      	ldrb	r3, [r7, #2]
 800782c:	493a      	ldr	r1, [pc, #232]	; (8007918 <Service_Msg_Extr+0x8f0>)
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		SelfLinkFlag[Source_Index] = SET;
 8007834:	78bb      	ldrb	r3, [r7, #2]
 8007836:	4a39      	ldr	r2, [pc, #228]	; (800791c <Service_Msg_Extr+0x8f4>)
 8007838:	2101      	movs	r1, #1
 800783a:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 800783c:	78ba      	ldrb	r2, [r7, #2]
 800783e:	4938      	ldr	r1, [pc, #224]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007840:	4613      	mov	r3, r2
 8007842:	005b      	lsls	r3, r3, #1
 8007844:	4413      	add	r3, r2
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	440b      	add	r3, r1
 800784a:	3301      	adds	r3, #1
 800784c:	2201      	movs	r2, #1
 800784e:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8007850:	78ba      	ldrb	r2, [r7, #2]
 8007852:	4933      	ldr	r1, [pc, #204]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007854:	4613      	mov	r3, r2
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	3304      	adds	r3, #4
 8007860:	693a      	ldr	r2, [r7, #16]
 8007862:	601a      	str	r2, [r3, #0]
 8007864:	e02e      	b.n	80078c4 <Service_Msg_Extr+0x89c>
	}
	else
	{
		SelfLinkFlag[Source_Index] = RESET;
 8007866:	78bb      	ldrb	r3, [r7, #2]
 8007868:	4a2c      	ldr	r2, [pc, #176]	; (800791c <Service_Msg_Extr+0x8f4>)
 800786a:	2100      	movs	r1, #0
 800786c:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 800786e:	78ba      	ldrb	r2, [r7, #2]
 8007870:	492b      	ldr	r1, [pc, #172]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	440b      	add	r3, r1
 800787c:	3308      	adds	r3, #8
 800787e:	693a      	ldr	r2, [r7, #16]
 8007880:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = RESET;
 8007882:	78ba      	ldrb	r2, [r7, #2]
 8007884:	4926      	ldr	r1, [pc, #152]	; (8007920 <Service_Msg_Extr+0x8f8>)
 8007886:	4613      	mov	r3, r2
 8007888:	005b      	lsls	r3, r3, #1
 800788a:	4413      	add	r3, r2
 800788c:	009b      	lsls	r3, r3, #2
 800788e:	440b      	add	r3, r1
 8007890:	3301      	adds	r3, #1
 8007892:	2200      	movs	r2, #0
 8007894:	701a      	strb	r2, [r3, #0]
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8007896:	78ba      	ldrb	r2, [r7, #2]
 8007898:	4613      	mov	r3, r2
 800789a:	009b      	lsls	r3, r3, #2
 800789c:	4413      	add	r3, r2
 800789e:	009b      	lsls	r3, r3, #2
 80078a0:	4a13      	ldr	r2, [pc, #76]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80078a2:	4413      	add	r3, r2
 80078a4:	3301      	adds	r3, #1
 80078a6:	2210      	movs	r2, #16
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f01e faa0 	bl	8025df0 <memset>
		Main_Relays_st[Source_Index].RelayIPS_CRC = 0;
 80078b0:	78ba      	ldrb	r2, [r7, #2]
 80078b2:	490f      	ldr	r1, [pc, #60]	; (80078f0 <Service_Msg_Extr+0x8c8>)
 80078b4:	4613      	mov	r3, r2
 80078b6:	009b      	lsls	r3, r3, #2
 80078b8:	4413      	add	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	440b      	add	r3, r1
 80078be:	3312      	adds	r3, #18
 80078c0:	2200      	movs	r2, #0
 80078c2:	801a      	strh	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80078c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078c8:	4816      	ldr	r0, [pc, #88]	; (8007924 <Service_Msg_Extr+0x8fc>)
 80078ca:	f014 f858 	bl	801b97e <HAL_GPIO_TogglePin>

}
 80078ce:	3720      	adds	r7, #32
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20000504 	.word	0x20000504
 80078d8:	20002544 	.word	0x20002544
 80078dc:	08028458 	.word	0x08028458
 80078e0:	20002538 	.word	0x20002538
 80078e4:	08028468 	.word	0x08028468
 80078e8:	20002ad4 	.word	0x20002ad4
 80078ec:	08028480 	.word	0x08028480
 80078f0:	20003598 	.word	0x20003598
 80078f4:	200034d0 	.word	0x200034d0
 80078f8:	2000258c 	.word	0x2000258c
 80078fc:	20003728 	.word	0x20003728
 8007900:	20002da4 	.word	0x20002da4
 8007904:	20002550 	.word	0x20002550
 8007908:	20002770 	.word	0x20002770
 800790c:	200024e4 	.word	0x200024e4
 8007910:	20002f84 	.word	0x20002f84
 8007914:	200024b8 	.word	0x200024b8
 8007918:	200025a0 	.word	0x200025a0
 800791c:	200025f0 	.word	0x200025f0
 8007920:	200033e0 	.word	0x200033e0
 8007924:	40021c00 	.word	0x40021c00

08007928 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b095      	sub	sp, #84	; 0x54
 800792c:	af00      	add	r7, sp, #0
 800792e:	4603      	mov	r3, r0
 8007930:	460a      	mov	r2, r1
 8007932:	71fb      	strb	r3, [r7, #7]
 8007934:	4613      	mov	r3, r2
 8007936:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8007938:	2300      	movs	r3, #0
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	f107 0310 	add.w	r3, r7, #16
 8007940:	2238      	movs	r2, #56	; 0x38
 8007942:	2100      	movs	r1, #0
 8007944:	4618      	mov	r0, r3
 8007946:	f01e fa53 	bl	8025df0 <memset>

	BITSTUFFINIT(0, 0);
 800794a:	2300      	movs	r3, #0
 800794c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007950:	2300      	movs	r3, #0
 8007952:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8007956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800795a:	f107 020c 	add.w	r2, r7, #12
 800795e:	441a      	add	r2, r3
 8007960:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007964:	23f4      	movs	r3, #244	; 0xf4
 8007966:	2108      	movs	r1, #8
 8007968:	f7f8 fee0 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800796c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007970:	3308      	adds	r3, #8
 8007972:	2b00      	cmp	r3, #0
 8007974:	da00      	bge.n	8007978 <Send_Service_Signal_Message+0x50>
 8007976:	3307      	adds	r3, #7
 8007978:	10db      	asrs	r3, r3, #3
 800797a:	b29a      	uxth	r2, r3
 800797c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007980:	4413      	add	r3, r2
 8007982:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007986:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800798a:	3308      	adds	r3, #8
 800798c:	b29b      	uxth	r3, r3
 800798e:	b21b      	sxth	r3, r3
 8007990:	425a      	negs	r2, r3
 8007992:	f003 0307 	and.w	r3, r3, #7
 8007996:	f002 0207 	and.w	r2, r2, #7
 800799a:	bf58      	it	pl
 800799c:	4253      	negpl	r3, r2
 800799e:	b21b      	sxth	r3, r3
 80079a0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 80079a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079a8:	f107 020c 	add.w	r2, r7, #12
 80079ac:	441a      	add	r2, r3
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	497b      	ldr	r1, [pc, #492]	; (8007ba0 <Send_Service_Signal_Message+0x278>)
 80079b2:	3366      	adds	r3, #102	; 0x66
 80079b4:	009b      	lsls	r3, r3, #2
 80079b6:	440b      	add	r3, r1
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80079be:	2110      	movs	r1, #16
 80079c0:	f7f8 feb4 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80079c4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80079c8:	3310      	adds	r3, #16
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	da00      	bge.n	80079d0 <Send_Service_Signal_Message+0xa8>
 80079ce:	3307      	adds	r3, #7
 80079d0:	10db      	asrs	r3, r3, #3
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079d8:	4413      	add	r3, r2
 80079da:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079de:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80079e2:	3310      	adds	r3, #16
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	b21b      	sxth	r3, r3
 80079e8:	425a      	negs	r2, r3
 80079ea:	f003 0307 	and.w	r3, r3, #7
 80079ee:	f002 0207 	and.w	r2, r2, #7
 80079f2:	bf58      	it	pl
 80079f4:	4253      	negpl	r3, r2
 80079f6:	b21b      	sxth	r3, r3
 80079f8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 80079fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a00:	f107 020c 	add.w	r2, r7, #12
 8007a04:	441a      	add	r2, r3
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	4965      	ldr	r1, [pc, #404]	; (8007ba0 <Send_Service_Signal_Message+0x278>)
 8007a0a:	3370      	adds	r3, #112	; 0x70
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	440b      	add	r3, r1
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007a16:	2110      	movs	r1, #16
 8007a18:	f7f8 fe88 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8007a1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007a20:	3310      	adds	r3, #16
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da00      	bge.n	8007a28 <Send_Service_Signal_Message+0x100>
 8007a26:	3307      	adds	r3, #7
 8007a28:	10db      	asrs	r3, r3, #3
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a30:	4413      	add	r3, r2
 8007a32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a3a:	3310      	adds	r3, #16
 8007a3c:	b29b      	uxth	r3, r3
 8007a3e:	b21b      	sxth	r3, r3
 8007a40:	425a      	negs	r2, r3
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	f002 0207 	and.w	r2, r2, #7
 8007a4a:	bf58      	it	pl
 8007a4c:	4253      	negpl	r3, r2
 8007a4e:	b21b      	sxth	r3, r3
 8007a50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007a54:	4b53      	ldr	r3, [pc, #332]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	089b      	lsrs	r3, r3, #2
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d035      	beq.n	8007ace <Send_Service_Signal_Message+0x1a6>
 8007a62:	4b50      	ldr	r3, [pc, #320]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007a64:	791b      	ldrb	r3, [r3, #4]
 8007a66:	79fa      	ldrb	r2, [r7, #7]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d130      	bne.n	8007ace <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007a72:	484d      	ldr	r0, [pc, #308]	; (8007ba8 <Send_Service_Signal_Message+0x280>)
 8007a74:	f015 ff4c 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	4b4c      	ldr	r3, [pc, #304]	; (8007bac <Send_Service_Signal_Message+0x284>)
 8007a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8007a80:	099b      	lsrs	r3, r3, #6
 8007a82:	21c8      	movs	r1, #200	; 0xc8
 8007a84:	fb01 f303 	mul.w	r3, r1, r3
 8007a88:	1ad3      	subs	r3, r2, r3
 8007a8a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8007a8e:	4848      	ldr	r0, [pc, #288]	; (8007bb0 <Send_Service_Signal_Message+0x288>)
 8007a90:	f01e fb32 	bl	80260f8 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	4a47      	ldr	r2, [pc, #284]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007a98:	011b      	lsls	r3, r3, #4
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	781b      	ldrb	r3, [r3, #0]
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4845      	ldr	r0, [pc, #276]	; (8007bb8 <Send_Service_Signal_Message+0x290>)
 8007aa4:	f01e fa8c 	bl	8025fc0 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007aa8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007aac:	4619      	mov	r1, r3
 8007aae:	4843      	ldr	r0, [pc, #268]	; (8007bbc <Send_Service_Signal_Message+0x294>)
 8007ab0:	f01e fa86 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8007ab4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ab8:	f107 020c 	add.w	r2, r7, #12
 8007abc:	441a      	add	r2, r3
 8007abe:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007ac2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ac6:	2108      	movs	r1, #8
 8007ac8:	f7f8 fe30 	bl	800072c <InsertBits>
	{
 8007acc:	e00f      	b.n	8007aee <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007ace:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ad2:	f107 020c 	add.w	r2, r7, #12
 8007ad6:	441a      	add	r2, r3
 8007ad8:	79fb      	ldrb	r3, [r7, #7]
 8007ada:	4936      	ldr	r1, [pc, #216]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007adc:	011b      	lsls	r3, r3, #4
 8007ade:	440b      	add	r3, r1
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007ae8:	2108      	movs	r1, #8
 8007aea:	f7f8 fe1f 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007aee:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007af2:	3308      	adds	r3, #8
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	da00      	bge.n	8007afa <Send_Service_Signal_Message+0x1d2>
 8007af8:	3307      	adds	r3, #7
 8007afa:	10db      	asrs	r3, r3, #3
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b02:	4413      	add	r3, r2
 8007b04:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007b08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007b0c:	3308      	adds	r3, #8
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	b21b      	sxth	r3, r3
 8007b12:	425a      	negs	r2, r3
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	f002 0207 	and.w	r2, r2, #7
 8007b1c:	bf58      	it	pl
 8007b1e:	4253      	negpl	r3, r2
 8007b20:	b21b      	sxth	r3, r3
 8007b22:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007b26:	4b1f      	ldr	r3, [pc, #124]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	08db      	lsrs	r3, r3, #3
 8007b2c:	f003 0301 	and.w	r3, r3, #1
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d04b      	beq.n	8007bcc <Send_Service_Signal_Message+0x2a4>
 8007b34:	4b1b      	ldr	r3, [pc, #108]	; (8007ba4 <Send_Service_Signal_Message+0x27c>)
 8007b36:	791b      	ldrb	r3, [r3, #4]
 8007b38:	79fa      	ldrb	r2, [r7, #7]
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d146      	bne.n	8007bcc <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007b44:	4818      	ldr	r0, [pc, #96]	; (8007ba8 <Send_Service_Signal_Message+0x280>)
 8007b46:	f015 fee3 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8007b4a:	4602      	mov	r2, r0
 8007b4c:	4b17      	ldr	r3, [pc, #92]	; (8007bac <Send_Service_Signal_Message+0x284>)
 8007b4e:	fba3 1302 	umull	r1, r3, r3, r2
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	21c8      	movs	r1, #200	; 0xc8
 8007b56:	fb01 f303 	mul.w	r3, r1, r3
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007b60:	4817      	ldr	r0, [pc, #92]	; (8007bc0 <Send_Service_Signal_Message+0x298>)
 8007b62:	f01e fac9 	bl	80260f8 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4a12      	ldr	r2, [pc, #72]	; (8007bb4 <Send_Service_Signal_Message+0x28c>)
 8007b6a:	011b      	lsls	r3, r3, #4
 8007b6c:	4413      	add	r3, r2
 8007b6e:	3302      	adds	r3, #2
 8007b70:	781b      	ldrb	r3, [r3, #0]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4813      	ldr	r0, [pc, #76]	; (8007bc4 <Send_Service_Signal_Message+0x29c>)
 8007b76:	f01e fa23 	bl	8025fc0 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8007b7a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4811      	ldr	r0, [pc, #68]	; (8007bc8 <Send_Service_Signal_Message+0x2a0>)
 8007b82:	f01e fa1d 	bl	8025fc0 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8007b86:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007b8a:	f107 020c 	add.w	r2, r7, #12
 8007b8e:	441a      	add	r2, r3
 8007b90:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007b94:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007b98:	2108      	movs	r1, #8
 8007b9a:	f7f8 fdc7 	bl	800072c <InsertBits>
	{
 8007b9e:	e033      	b.n	8007c08 <Send_Service_Signal_Message+0x2e0>
 8007ba0:	20000504 	.word	0x20000504
 8007ba4:	2000308c 	.word	0x2000308c
 8007ba8:	2000bc54 	.word	0x2000bc54
 8007bac:	51eb851f 	.word	0x51eb851f
 8007bb0:	08027e78 	.word	0x08027e78
 8007bb4:	200028f4 	.word	0x200028f4
 8007bb8:	08028490 	.word	0x08028490
 8007bbc:	080284b0 	.word	0x080284b0
 8007bc0:	08027edc 	.word	0x08027edc
 8007bc4:	080284d0 	.word	0x080284d0
 8007bc8:	080284f0 	.word	0x080284f0
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007bcc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007bd0:	f107 020c 	add.w	r2, r7, #12
 8007bd4:	18d1      	adds	r1, r2, r3
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	484e      	ldr	r0, [pc, #312]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007bda:	011a      	lsls	r2, r3, #4
 8007bdc:	4402      	add	r2, r0
 8007bde:	3202      	adds	r2, #2
 8007be0:	7812      	ldrb	r2, [r2, #0]
 8007be2:	3201      	adds	r2, #1
 8007be4:	b2d4      	uxtb	r4, r2
 8007be6:	484b      	ldr	r0, [pc, #300]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007be8:	011a      	lsls	r2, r3, #4
 8007bea:	4402      	add	r2, r0
 8007bec:	3202      	adds	r2, #2
 8007bee:	4620      	mov	r0, r4
 8007bf0:	7010      	strb	r0, [r2, #0]
 8007bf2:	4a48      	ldr	r2, [pc, #288]	; (8007d14 <Send_Service_Signal_Message+0x3ec>)
 8007bf4:	011b      	lsls	r3, r3, #4
 8007bf6:	4413      	add	r3, r2
 8007bf8:	3302      	adds	r3, #2
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c00:	460a      	mov	r2, r1
 8007c02:	2108      	movs	r1, #8
 8007c04:	f7f8 fd92 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007c08:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c0c:	3308      	adds	r3, #8
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	da00      	bge.n	8007c14 <Send_Service_Signal_Message+0x2ec>
 8007c12:	3307      	adds	r3, #7
 8007c14:	10db      	asrs	r3, r3, #3
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c1c:	4413      	add	r3, r2
 8007c1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c26:	3308      	adds	r3, #8
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	b21b      	sxth	r3, r3
 8007c2c:	425a      	negs	r2, r3
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	f002 0207 	and.w	r2, r2, #7
 8007c36:	bf58      	it	pl
 8007c38:	4253      	negpl	r3, r2
 8007c3a:	b21b      	sxth	r3, r3
 8007c3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007c40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c44:	f107 020c 	add.w	r2, r7, #12
 8007c48:	441a      	add	r2, r3
 8007c4a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007c4e:	2306      	movs	r3, #6
 8007c50:	2108      	movs	r1, #8
 8007c52:	f7f8 fd6b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007c56:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007c5a:	3308      	adds	r3, #8
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	da00      	bge.n	8007c62 <Send_Service_Signal_Message+0x33a>
 8007c60:	3307      	adds	r3, #7
 8007c62:	10db      	asrs	r3, r3, #3
 8007c64:	b29a      	uxth	r2, r3
 8007c66:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c74:	3308      	adds	r3, #8
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	b21b      	sxth	r3, r3
 8007c7a:	425a      	negs	r2, r3
 8007c7c:	f003 0307 	and.w	r3, r3, #7
 8007c80:	f002 0207 	and.w	r2, r2, #7
 8007c84:	bf58      	it	pl
 8007c86:	4253      	negpl	r3, r2
 8007c88:	b21b      	sxth	r3, r3
 8007c8a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007c8e:	79fb      	ldrb	r3, [r7, #7]
 8007c90:	4a21      	ldr	r2, [pc, #132]	; (8007d18 <Send_Service_Signal_Message+0x3f0>)
 8007c92:	5cd3      	ldrb	r3, [r2, r3]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d147      	bne.n	8007d28 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 8007c98:	f004 ff28 	bl	800caec <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8007c9c:	79fa      	ldrb	r2, [r7, #7]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	005b      	lsls	r3, r3, #1
 8007ca2:	4413      	add	r3, r2
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	4a1d      	ldr	r2, [pc, #116]	; (8007d1c <Send_Service_Signal_Message+0x3f4>)
 8007ca8:	4413      	add	r3, r2
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <Send_Service_Signal_Message+0x3f8>)
 8007cac:	6811      	ldr	r1, [r2, #0]
 8007cae:	6019      	str	r1, [r3, #0]
 8007cb0:	8892      	ldrh	r2, [r2, #4]
 8007cb2:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 8007cb4:	481b      	ldr	r0, [pc, #108]	; (8007d24 <Send_Service_Signal_Message+0x3fc>)
 8007cb6:	f01e fa1f 	bl	80260f8 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	4a16      	ldr	r2, [pc, #88]	; (8007d18 <Send_Service_Signal_Message+0x3f0>)
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 8007cc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cc6:	f107 020c 	add.w	r2, r7, #12
 8007cca:	441a      	add	r2, r3
 8007ccc:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007cd0:	2369      	movs	r3, #105	; 0x69
 8007cd2:	2110      	movs	r1, #16
 8007cd4:	f7f8 fd2a 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007cd8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007cdc:	3310      	adds	r3, #16
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	da00      	bge.n	8007ce4 <Send_Service_Signal_Message+0x3bc>
 8007ce2:	3307      	adds	r3, #7
 8007ce4:	10db      	asrs	r3, r3, #3
 8007ce6:	b29a      	uxth	r2, r3
 8007ce8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007cec:	4413      	add	r3, r2
 8007cee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007cf2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007cf6:	3310      	adds	r3, #16
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	b21b      	sxth	r3, r3
 8007cfc:	425a      	negs	r2, r3
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	f002 0207 	and.w	r2, r2, #7
 8007d06:	bf58      	it	pl
 8007d08:	4253      	negpl	r3, r2
 8007d0a:	b21b      	sxth	r3, r3
 8007d0c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007d10:	e031      	b.n	8007d76 <Send_Service_Signal_Message+0x44e>
 8007d12:	bf00      	nop
 8007d14:	200028f4 	.word	0x200028f4
 8007d18:	20002764 	.word	0x20002764
 8007d1c:	200028b8 	.word	0x200028b8
 8007d20:	20003fcc 	.word	0x20003fcc
 8007d24:	08028234 	.word	0x08028234
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007d28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d2c:	f107 020c 	add.w	r2, r7, #12
 8007d30:	441a      	add	r2, r3
 8007d32:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d36:	2329      	movs	r3, #41	; 0x29
 8007d38:	2110      	movs	r1, #16
 8007d3a:	f7f8 fcf7 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007d3e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007d42:	3310      	adds	r3, #16
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	da00      	bge.n	8007d4a <Send_Service_Signal_Message+0x422>
 8007d48:	3307      	adds	r3, #7
 8007d4a:	10db      	asrs	r3, r3, #3
 8007d4c:	b29a      	uxth	r2, r3
 8007d4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d52:	4413      	add	r3, r2
 8007d54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007d58:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007d5c:	3310      	adds	r3, #16
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	b21b      	sxth	r3, r3
 8007d62:	425a      	negs	r2, r3
 8007d64:	f003 0307 	and.w	r3, r3, #7
 8007d68:	f002 0207 	and.w	r2, r2, #7
 8007d6c:	bf58      	it	pl
 8007d6e:	4253      	negpl	r3, r2
 8007d70:	b21b      	sxth	r3, r3
 8007d72:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8007d76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007d7a:	f107 020c 	add.w	r2, r7, #12
 8007d7e:	18d1      	adds	r1, r2, r3
 8007d80:	79fa      	ldrb	r2, [r7, #7]
 8007d82:	48b5      	ldr	r0, [pc, #724]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007d84:	4613      	mov	r3, r2
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	4413      	add	r3, r2
 8007d8a:	005b      	lsls	r3, r3, #1
 8007d8c:	4403      	add	r3, r0
 8007d8e:	3305      	adds	r3, #5
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007d96:	460a      	mov	r2, r1
 8007d98:	2108      	movs	r1, #8
 8007d9a:	f7f8 fcc7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007d9e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007da2:	3308      	adds	r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	da00      	bge.n	8007daa <Send_Service_Signal_Message+0x482>
 8007da8:	3307      	adds	r3, #7
 8007daa:	10db      	asrs	r3, r3, #3
 8007dac:	b29a      	uxth	r2, r3
 8007dae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007db2:	4413      	add	r3, r2
 8007db4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007db8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007dbc:	3308      	adds	r3, #8
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	b21b      	sxth	r3, r3
 8007dc2:	425a      	negs	r2, r3
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	f002 0207 	and.w	r2, r2, #7
 8007dcc:	bf58      	it	pl
 8007dce:	4253      	negpl	r3, r2
 8007dd0:	b21b      	sxth	r3, r3
 8007dd2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 8007dd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007dda:	f107 020c 	add.w	r2, r7, #12
 8007dde:	18d1      	adds	r1, r2, r3
 8007de0:	79fa      	ldrb	r2, [r7, #7]
 8007de2:	489d      	ldr	r0, [pc, #628]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007de4:	4613      	mov	r3, r2
 8007de6:	005b      	lsls	r3, r3, #1
 8007de8:	4413      	add	r3, r2
 8007dea:	005b      	lsls	r3, r3, #1
 8007dec:	4403      	add	r3, r0
 8007dee:	3304      	adds	r3, #4
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007df6:	460a      	mov	r2, r1
 8007df8:	2108      	movs	r1, #8
 8007dfa:	f7f8 fc97 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007dfe:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e02:	3308      	adds	r3, #8
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	da00      	bge.n	8007e0a <Send_Service_Signal_Message+0x4e2>
 8007e08:	3307      	adds	r3, #7
 8007e0a:	10db      	asrs	r3, r3, #3
 8007e0c:	b29a      	uxth	r2, r3
 8007e0e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e12:	4413      	add	r3, r2
 8007e14:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e18:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e1c:	3308      	adds	r3, #8
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	b21b      	sxth	r3, r3
 8007e22:	425a      	negs	r2, r3
 8007e24:	f003 0307 	and.w	r3, r3, #7
 8007e28:	f002 0207 	and.w	r2, r2, #7
 8007e2c:	bf58      	it	pl
 8007e2e:	4253      	negpl	r3, r2
 8007e30:	b21b      	sxth	r3, r3
 8007e32:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8007e36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e3a:	f107 020c 	add.w	r2, r7, #12
 8007e3e:	18d1      	adds	r1, r2, r3
 8007e40:	79fa      	ldrb	r2, [r7, #7]
 8007e42:	4885      	ldr	r0, [pc, #532]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007e44:	4613      	mov	r3, r2
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	4413      	add	r3, r2
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	4403      	add	r3, r0
 8007e4e:	3303      	adds	r3, #3
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007e56:	460a      	mov	r2, r1
 8007e58:	2108      	movs	r1, #8
 8007e5a:	f7f8 fc67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007e5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007e62:	3308      	adds	r3, #8
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	da00      	bge.n	8007e6a <Send_Service_Signal_Message+0x542>
 8007e68:	3307      	adds	r3, #7
 8007e6a:	10db      	asrs	r3, r3, #3
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e72:	4413      	add	r3, r2
 8007e74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007e78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e7c:	3308      	adds	r3, #8
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	b21b      	sxth	r3, r3
 8007e82:	425a      	negs	r2, r3
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	f002 0207 	and.w	r2, r2, #7
 8007e8c:	bf58      	it	pl
 8007e8e:	4253      	negpl	r3, r2
 8007e90:	b21b      	sxth	r3, r3
 8007e92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8007e96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e9a:	f107 020c 	add.w	r2, r7, #12
 8007e9e:	18d1      	adds	r1, r2, r3
 8007ea0:	79fa      	ldrb	r2, [r7, #7]
 8007ea2:	486d      	ldr	r0, [pc, #436]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007ea4:	4613      	mov	r3, r2
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	005b      	lsls	r3, r3, #1
 8007eac:	4403      	add	r3, r0
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007eb4:	460a      	mov	r2, r1
 8007eb6:	2108      	movs	r1, #8
 8007eb8:	f7f8 fc38 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007ebc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007ec0:	3308      	adds	r3, #8
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	da00      	bge.n	8007ec8 <Send_Service_Signal_Message+0x5a0>
 8007ec6:	3307      	adds	r3, #7
 8007ec8:	10db      	asrs	r3, r3, #3
 8007eca:	b29a      	uxth	r2, r3
 8007ecc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ed6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007eda:	3308      	adds	r3, #8
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b21b      	sxth	r3, r3
 8007ee0:	425a      	negs	r2, r3
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	f002 0207 	and.w	r2, r2, #7
 8007eea:	bf58      	it	pl
 8007eec:	4253      	negpl	r3, r2
 8007eee:	b21b      	sxth	r3, r3
 8007ef0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8007ef4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ef8:	f107 020c 	add.w	r2, r7, #12
 8007efc:	18d1      	adds	r1, r2, r3
 8007efe:	79fa      	ldrb	r2, [r7, #7]
 8007f00:	4855      	ldr	r0, [pc, #340]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007f02:	4613      	mov	r3, r2
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	4413      	add	r3, r2
 8007f08:	005b      	lsls	r3, r3, #1
 8007f0a:	4403      	add	r3, r0
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f14:	460a      	mov	r2, r1
 8007f16:	2108      	movs	r1, #8
 8007f18:	f7f8 fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f20:	3308      	adds	r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da00      	bge.n	8007f28 <Send_Service_Signal_Message+0x600>
 8007f26:	3307      	adds	r3, #7
 8007f28:	10db      	asrs	r3, r3, #3
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f30:	4413      	add	r3, r2
 8007f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f3a:	3308      	adds	r3, #8
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	b21b      	sxth	r3, r3
 8007f40:	425a      	negs	r2, r3
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	f002 0207 	and.w	r2, r2, #7
 8007f4a:	bf58      	it	pl
 8007f4c:	4253      	negpl	r3, r2
 8007f4e:	b21b      	sxth	r3, r3
 8007f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f58:	f107 020c 	add.w	r2, r7, #12
 8007f5c:	18d1      	adds	r1, r2, r3
 8007f5e:	79fa      	ldrb	r2, [r7, #7]
 8007f60:	483d      	ldr	r0, [pc, #244]	; (8008058 <Send_Service_Signal_Message+0x730>)
 8007f62:	4613      	mov	r3, r2
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	4413      	add	r3, r2
 8007f68:	005b      	lsls	r3, r3, #1
 8007f6a:	4403      	add	r3, r0
 8007f6c:	3302      	adds	r3, #2
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007f74:	460a      	mov	r2, r1
 8007f76:	2108      	movs	r1, #8
 8007f78:	f7f8 fbd8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007f7c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007f80:	3308      	adds	r3, #8
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	da00      	bge.n	8007f88 <Send_Service_Signal_Message+0x660>
 8007f86:	3307      	adds	r3, #7
 8007f88:	10db      	asrs	r3, r3, #3
 8007f8a:	b29a      	uxth	r2, r3
 8007f8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007f90:	4413      	add	r3, r2
 8007f92:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007f96:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	425a      	negs	r2, r3
 8007fa2:	f003 0307 	and.w	r3, r3, #7
 8007fa6:	f002 0207 	and.w	r2, r2, #7
 8007faa:	bf58      	it	pl
 8007fac:	4253      	negpl	r3, r2
 8007fae:	b21b      	sxth	r3, r3
 8007fb0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 8007fb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007fb8:	f107 020c 	add.w	r2, r7, #12
 8007fbc:	18d4      	adds	r4, r2, r3
 8007fbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8007fc2:	f107 030c 	add.w	r3, r7, #12
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f00d fb57 	bl	801567c <CalculateDirectReverseCrc>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007fd4:	4622      	mov	r2, r4
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	f7f8 fba8 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007fdc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007fe0:	3320      	adds	r3, #32
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	da00      	bge.n	8007fe8 <Send_Service_Signal_Message+0x6c0>
 8007fe6:	3307      	adds	r3, #7
 8007fe8:	10db      	asrs	r3, r3, #3
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007ff0:	4413      	add	r3, r2
 8007ff2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007ff6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007ffa:	3320      	adds	r3, #32
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	b21b      	sxth	r3, r3
 8008000:	425a      	negs	r2, r3
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	f002 0207 	and.w	r2, r2, #7
 800800a:	bf58      	it	pl
 800800c:	4253      	negpl	r3, r2
 800800e:	b21b      	sxth	r3, r3
 8008010:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8008014:	4b11      	ldr	r3, [pc, #68]	; (800805c <Send_Service_Signal_Message+0x734>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	0a5b      	lsrs	r3, r3, #9
 800801a:	f003 0301 	and.w	r3, r3, #1
 800801e:	2b00      	cmp	r3, #0
 8008020:	d00b      	beq.n	800803a <Send_Service_Signal_Message+0x712>
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <Send_Service_Signal_Message+0x734>)
 8008024:	791b      	ldrb	r3, [r3, #4]
 8008026:	79fa      	ldrb	r2, [r7, #7]
 8008028:	429a      	cmp	r2, r3
 800802a:	d106      	bne.n	800803a <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 800802c:	480c      	ldr	r0, [pc, #48]	; (8008060 <Send_Service_Signal_Message+0x738>)
 800802e:	f01e f863 	bl	80260f8 <puts>
		printf("Not Sending Reply");
 8008032:	480c      	ldr	r0, [pc, #48]	; (8008064 <Send_Service_Signal_Message+0x73c>)
 8008034:	f01d ffc4 	bl	8025fc0 <iprintf>
 8008038:	e009      	b.n	800804e <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 800803a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800803e:	b2d9      	uxtb	r1, r3
 8008040:	79fa      	ldrb	r2, [r7, #7]
 8008042:	f107 030c 	add.w	r3, r7, #12
 8008046:	4618      	mov	r0, r3
 8008048:	f000 f80e 	bl	8008068 <Process_Sending_Reply>
	}
}
 800804c:	bf00      	nop
 800804e:	bf00      	nop
 8008050:	3754      	adds	r7, #84	; 0x54
 8008052:	46bd      	mov	sp, r7
 8008054:	bd90      	pop	{r4, r7, pc}
 8008056:	bf00      	nop
 8008058:	200028b8 	.word	0x200028b8
 800805c:	2000308c 	.word	0x2000308c
 8008060:	08027fa8 	.word	0x08027fa8
 8008064:	08027fc0 	.word	0x08027fc0

08008068 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b09c      	sub	sp, #112	; 0x70
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
 8008074:	4613      	mov	r3, r2
 8008076:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 8008078:	2300      	movs	r3, #0
 800807a:	60bb      	str	r3, [r7, #8]
 800807c:	f107 030c 	add.w	r3, r7, #12
 8008080:	2260      	movs	r2, #96	; 0x60
 8008082:	2100      	movs	r1, #0
 8008084:	4618      	mov	r0, r3
 8008086:	f01d feb3 	bl	8025df0 <memset>
	uint8_t uc_index = 0;
 800808a:	2300      	movs	r3, #0
 800808c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8008090:	2300      	movs	r3, #0
 8008092:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 8008096:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800809a:	1c5a      	adds	r2, r3, #1
 800809c:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80080a0:	4619      	mov	r1, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	781a      	ldrb	r2, [r3, #0]
 80080a6:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80080aa:	443b      	add	r3, r7
 80080ac:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80080b6:	e03c      	b.n	8008132 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80080b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	4413      	add	r3, r2
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	2bef      	cmp	r3, #239	; 0xef
 80080c4:	d922      	bls.n	800810c <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80080c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080d4:	1c59      	adds	r1, r3, #1
 80080d6:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080da:	f022 020f 	bic.w	r2, r2, #15
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	3370      	adds	r3, #112	; 0x70
 80080e2:	443b      	add	r3, r7
 80080e4:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80080e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	4413      	add	r3, r2
 80080f0:	781a      	ldrb	r2, [r3, #0]
 80080f2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080f6:	1c59      	adds	r1, r3, #1
 80080f8:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80080fc:	f002 020f 	and.w	r2, r2, #15
 8008100:	b2d2      	uxtb	r2, r2
 8008102:	3370      	adds	r3, #112	; 0x70
 8008104:	443b      	add	r3, r7
 8008106:	f803 2c68 	strb.w	r2, [r3, #-104]
 800810a:	e00d      	b.n	8008128 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 800810c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	441a      	add	r2, r3
 8008114:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008118:	1c59      	adds	r1, r3, #1
 800811a:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 800811e:	7812      	ldrb	r2, [r2, #0]
 8008120:	3370      	adds	r3, #112	; 0x70
 8008122:	443b      	add	r3, r7
 8008124:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8008128:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800812c:	3301      	adds	r3, #1
 800812e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008132:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8008136:	78fb      	ldrb	r3, [r7, #3]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3bd      	bcc.n	80080b8 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 800813c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 8008146:	3370      	adds	r3, #112	; 0x70
 8008148:	443b      	add	r3, r7
 800814a:	22f6      	movs	r2, #246	; 0xf6
 800814c:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8008150:	78bb      	ldrb	r3, [r7, #2]
 8008152:	4a37      	ldr	r2, [pc, #220]	; (8008230 <Process_Sending_Reply+0x1c8>)
 8008154:	5cd3      	ldrb	r3, [r2, r3]
 8008156:	2b01      	cmp	r3, #1
 8008158:	d10b      	bne.n	8008172 <Process_Sending_Reply+0x10a>
 800815a:	4b36      	ldr	r3, [pc, #216]	; (8008234 <Process_Sending_Reply+0x1cc>)
 800815c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008160:	2b00      	cmp	r3, #0
 8008162:	d106      	bne.n	8008172 <Process_Sending_Reply+0x10a>
 8008164:	4b34      	ldr	r3, [pc, #208]	; (8008238 <Process_Sending_Reply+0x1d0>)
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d102      	bne.n	8008172 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800816c:	4833      	ldr	r0, [pc, #204]	; (800823c <Process_Sending_Reply+0x1d4>)
 800816e:	f001 f91f 	bl	80093b0 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8008172:	78bb      	ldrb	r3, [r7, #2]
 8008174:	4a32      	ldr	r2, [pc, #200]	; (8008240 <Process_Sending_Reply+0x1d8>)
 8008176:	4413      	add	r3, r2
 8008178:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800817c:	2b01      	cmp	r3, #1
 800817e:	d10d      	bne.n	800819c <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8008180:	78bb      	ldrb	r3, [r7, #2]
 8008182:	4a30      	ldr	r2, [pc, #192]	; (8008244 <Process_Sending_Reply+0x1dc>)
 8008184:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8008188:	f107 0008 	add.w	r0, r7, #8
 800818c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008190:	f008 fca2 	bl	8010ad8 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = RESET;
 8008194:	78bb      	ldrb	r3, [r7, #2]
 8008196:	4a26      	ldr	r2, [pc, #152]	; (8008230 <Process_Sending_Reply+0x1c8>)
 8008198:	2100      	movs	r1, #0
 800819a:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 800819c:	78bb      	ldrb	r3, [r7, #2]
 800819e:	4a28      	ldr	r2, [pc, #160]	; (8008240 <Process_Sending_Reply+0x1d8>)
 80081a0:	4413      	add	r3, r2
 80081a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80081a6:	2b02      	cmp	r3, #2
 80081a8:	d119      	bne.n	80081de <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 80081aa:	2300      	movs	r3, #0
 80081ac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80081b0:	e00e      	b.n	80081d0 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 80081b2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081b6:	3370      	adds	r3, #112	; 0x70
 80081b8:	443b      	add	r3, r7
 80081ba:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80081be:	4619      	mov	r1, r3
 80081c0:	2003      	movs	r0, #3
 80081c2:	f010 fd8f 	bl	8018ce4 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80081c6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081ca:	3301      	adds	r3, #1
 80081cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80081d0:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80081d4:	b29b      	uxth	r3, r3
 80081d6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3e9      	bcc.n	80081b2 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80081de:	4b16      	ldr	r3, [pc, #88]	; (8008238 <Process_Sending_Reply+0x1d0>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	2b01      	cmp	r3, #1
 80081e4:	d102      	bne.n	80081ec <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80081e6:	4815      	ldr	r0, [pc, #84]	; (800823c <Process_Sending_Reply+0x1d4>)
 80081e8:	f001 f8e2 	bl	80093b0 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80081ec:	4b11      	ldr	r3, [pc, #68]	; (8008234 <Process_Sending_Reply+0x1cc>)
 80081ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d00b      	beq.n	800820e <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80081f6:	4b0f      	ldr	r3, [pc, #60]	; (8008234 <Process_Sending_Reply+0x1cc>)
 80081f8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081fc:	461a      	mov	r2, r3
 80081fe:	2101      	movs	r1, #1
 8008200:	480c      	ldr	r0, [pc, #48]	; (8008234 <Process_Sending_Reply+0x1cc>)
 8008202:	f000 ff2f 	bl	8009064 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 8008206:	4b0b      	ldr	r3, [pc, #44]	; (8008234 <Process_Sending_Reply+0x1cc>)
 8008208:	2200      	movs	r2, #0
 800820a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 800820e:	78fb      	ldrb	r3, [r7, #3]
 8008210:	461a      	mov	r2, r3
 8008212:	2100      	movs	r1, #0
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 ff25 	bl	8009064 <Print_EI_DATA>

	if(Debug_flag == 1)
 800821a:	4b07      	ldr	r3, [pc, #28]	; (8008238 <Process_Sending_Reply+0x1d0>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	2b01      	cmp	r3, #1
 8008220:	d102      	bne.n	8008228 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8008222:	4809      	ldr	r0, [pc, #36]	; (8008248 <Process_Sending_Reply+0x1e0>)
 8008224:	f001 f8c4 	bl	80093b0 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8008228:	bf00      	nop
 800822a:	3770      	adds	r7, #112	; 0x70
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	20002758 	.word	0x20002758
 8008234:	20003328 	.word	0x20003328
 8008238:	20000bbb 	.word	0x20000bbb
 800823c:	08028534 	.word	0x08028534
 8008240:	20000504 	.word	0x20000504
 8008244:	200026e4 	.word	0x200026e4
 8008248:	08028594 	.word	0x08028594

0800824c <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	4603      	mov	r3, r0
 8008254:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8008256:	f010 ff9d 	bl	8019194 <HAL_GetTick>
 800825a:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	4a86      	ldr	r2, [pc, #536]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008260:	4413      	add	r3, r2
 8008262:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008266:	2b02      	cmp	r3, #2
 8008268:	f000 8102 	beq.w	8008470 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	4983      	ldr	r1, [pc, #524]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008270:	4613      	mov	r3, r2
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	440b      	add	r3, r1
 800827a:	3303      	adds	r3, #3
 800827c:	781b      	ldrb	r3, [r3, #0]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d12b      	bne.n	80082da <Check_Primary_r_Secondary+0x8e>
 8008282:	79fa      	ldrb	r2, [r7, #7]
 8008284:	497e      	ldr	r1, [pc, #504]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 8008286:	4613      	mov	r3, r2
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	4413      	add	r3, r2
 800828c:	00db      	lsls	r3, r3, #3
 800828e:	440b      	add	r3, r1
 8008290:	3303      	adds	r3, #3
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d120      	bne.n	80082da <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008298:	79fa      	ldrb	r2, [r7, #7]
 800829a:	4978      	ldr	r1, [pc, #480]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800829c:	4613      	mov	r3, r2
 800829e:	005b      	lsls	r3, r3, #1
 80082a0:	4413      	add	r3, r2
 80082a2:	00db      	lsls	r3, r3, #3
 80082a4:	440b      	add	r3, r1
 80082a6:	3304      	adds	r3, #4
 80082a8:	781b      	ldrb	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	f000 80e1 	beq.w	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80082b0:	79fb      	ldrb	r3, [r7, #7]
 80082b2:	4a71      	ldr	r2, [pc, #452]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 80082b4:	3366      	adds	r3, #102	; 0x66
 80082b6:	009b      	lsls	r3, r3, #2
 80082b8:	4413      	add	r3, r2
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	4619      	mov	r1, r3
 80082be:	4871      	ldr	r0, [pc, #452]	; (8008484 <Check_Primary_r_Secondary+0x238>)
 80082c0:	f01d fe7e 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80082c4:	79fa      	ldrb	r2, [r7, #7]
 80082c6:	496d      	ldr	r1, [pc, #436]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80082c8:	4613      	mov	r3, r2
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4413      	add	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	440b      	add	r3, r1
 80082d2:	3304      	adds	r3, #4
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80082d8:	e0cb      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80082da:	79fa      	ldrb	r2, [r7, #7]
 80082dc:	4967      	ldr	r1, [pc, #412]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80082de:	4613      	mov	r3, r2
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	00db      	lsls	r3, r3, #3
 80082e6:	440b      	add	r3, r1
 80082e8:	3303      	adds	r3, #3
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d12b      	bne.n	8008348 <Check_Primary_r_Secondary+0xfc>
 80082f0:	79fa      	ldrb	r2, [r7, #7]
 80082f2:	4963      	ldr	r1, [pc, #396]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 80082f4:	4613      	mov	r3, r2
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	4413      	add	r3, r2
 80082fa:	00db      	lsls	r3, r3, #3
 80082fc:	440b      	add	r3, r1
 80082fe:	3303      	adds	r3, #3
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b01      	cmp	r3, #1
 8008304:	d120      	bne.n	8008348 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008306:	79fa      	ldrb	r2, [r7, #7]
 8008308:	495c      	ldr	r1, [pc, #368]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800830a:	4613      	mov	r3, r2
 800830c:	005b      	lsls	r3, r3, #1
 800830e:	4413      	add	r3, r2
 8008310:	00db      	lsls	r3, r3, #3
 8008312:	440b      	add	r3, r1
 8008314:	3304      	adds	r3, #4
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f000 80aa 	beq.w	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800831e:	79fb      	ldrb	r3, [r7, #7]
 8008320:	4a55      	ldr	r2, [pc, #340]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008322:	3366      	adds	r3, #102	; 0x66
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4619      	mov	r1, r3
 800832c:	4856      	ldr	r0, [pc, #344]	; (8008488 <Check_Primary_r_Secondary+0x23c>)
 800832e:	f01d fe47 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8008332:	79fa      	ldrb	r2, [r7, #7]
 8008334:	4951      	ldr	r1, [pc, #324]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008336:	4613      	mov	r3, r2
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	4413      	add	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	440b      	add	r3, r1
 8008340:	3304      	adds	r3, #4
 8008342:	2200      	movs	r2, #0
 8008344:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8008346:	e094      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8008348:	79fa      	ldrb	r2, [r7, #7]
 800834a:	494c      	ldr	r1, [pc, #304]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800834c:	4613      	mov	r3, r2
 800834e:	005b      	lsls	r3, r3, #1
 8008350:	4413      	add	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	440b      	add	r3, r1
 8008356:	3303      	adds	r3, #3
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d13e      	bne.n	80083dc <Check_Primary_r_Secondary+0x190>
 800835e:	79fa      	ldrb	r2, [r7, #7]
 8008360:	4947      	ldr	r1, [pc, #284]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 8008362:	4613      	mov	r3, r2
 8008364:	005b      	lsls	r3, r3, #1
 8008366:	4413      	add	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	440b      	add	r3, r1
 800836c:	3303      	adds	r3, #3
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d133      	bne.n	80083dc <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008374:	79fa      	ldrb	r2, [r7, #7]
 8008376:	4941      	ldr	r1, [pc, #260]	; (800847c <Check_Primary_r_Secondary+0x230>)
 8008378:	4613      	mov	r3, r2
 800837a:	005b      	lsls	r3, r3, #1
 800837c:	4413      	add	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	440b      	add	r3, r1
 8008382:	3304      	adds	r3, #4
 8008384:	781b      	ldrb	r3, [r3, #0]
 8008386:	2b01      	cmp	r3, #1
 8008388:	d073      	beq.n	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800838a:	79fb      	ldrb	r3, [r7, #7]
 800838c:	4a3a      	ldr	r2, [pc, #232]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 800838e:	3366      	adds	r3, #102	; 0x66
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4413      	add	r3, r2
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	4619      	mov	r1, r3
 8008398:	483c      	ldr	r0, [pc, #240]	; (800848c <Check_Primary_r_Secondary+0x240>)
 800839a:	f01d fe11 	bl	8025fc0 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800839e:	79fb      	ldrb	r3, [r7, #7]
 80083a0:	493b      	ldr	r1, [pc, #236]	; (8008490 <Check_Primary_r_Secondary+0x244>)
 80083a2:	68fa      	ldr	r2, [r7, #12]
 80083a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80083a8:	79fb      	ldrb	r3, [r7, #7]
 80083aa:	493a      	ldr	r1, [pc, #232]	; (8008494 <Check_Primary_r_Secondary+0x248>)
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80083b2:	79fa      	ldrb	r2, [r7, #7]
 80083b4:	4931      	ldr	r1, [pc, #196]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083b6:	4613      	mov	r3, r2
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	4413      	add	r3, r2
 80083bc:	00db      	lsls	r3, r3, #3
 80083be:	440b      	add	r3, r1
 80083c0:	3310      	adds	r3, #16
 80083c2:	2200      	movs	r2, #0
 80083c4:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80083c6:	79fa      	ldrb	r2, [r7, #7]
 80083c8:	492c      	ldr	r1, [pc, #176]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083ca:	4613      	mov	r3, r2
 80083cc:	005b      	lsls	r3, r3, #1
 80083ce:	4413      	add	r3, r2
 80083d0:	00db      	lsls	r3, r3, #3
 80083d2:	440b      	add	r3, r1
 80083d4:	3304      	adds	r3, #4
 80083d6:	2201      	movs	r2, #1
 80083d8:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80083da:	e04a      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80083dc:	79fa      	ldrb	r2, [r7, #7]
 80083de:	4927      	ldr	r1, [pc, #156]	; (800847c <Check_Primary_r_Secondary+0x230>)
 80083e0:	4613      	mov	r3, r2
 80083e2:	005b      	lsls	r3, r3, #1
 80083e4:	4413      	add	r3, r2
 80083e6:	00db      	lsls	r3, r3, #3
 80083e8:	440b      	add	r3, r1
 80083ea:	3303      	adds	r3, #3
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	d13f      	bne.n	8008472 <Check_Primary_r_Secondary+0x226>
 80083f2:	79fa      	ldrb	r2, [r7, #7]
 80083f4:	4922      	ldr	r1, [pc, #136]	; (8008480 <Check_Primary_r_Secondary+0x234>)
 80083f6:	4613      	mov	r3, r2
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	4413      	add	r3, r2
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	440b      	add	r3, r1
 8008400:	3303      	adds	r3, #3
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	2b01      	cmp	r3, #1
 8008406:	d134      	bne.n	8008472 <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8008408:	79fa      	ldrb	r2, [r7, #7]
 800840a:	491c      	ldr	r1, [pc, #112]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800840c:	4613      	mov	r3, r2
 800840e:	005b      	lsls	r3, r3, #1
 8008410:	4413      	add	r3, r2
 8008412:	00db      	lsls	r3, r3, #3
 8008414:	440b      	add	r3, r1
 8008416:	3304      	adds	r3, #4
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	2b01      	cmp	r3, #1
 800841c:	d029      	beq.n	8008472 <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800841e:	79fb      	ldrb	r3, [r7, #7]
 8008420:	4a15      	ldr	r2, [pc, #84]	; (8008478 <Check_Primary_r_Secondary+0x22c>)
 8008422:	3366      	adds	r3, #102	; 0x66
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	4619      	mov	r1, r3
 800842c:	481a      	ldr	r0, [pc, #104]	; (8008498 <Check_Primary_r_Secondary+0x24c>)
 800842e:	f01d fdc7 	bl	8025fc0 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 8008432:	79fb      	ldrb	r3, [r7, #7]
 8008434:	4916      	ldr	r1, [pc, #88]	; (8008490 <Check_Primary_r_Secondary+0x244>)
 8008436:	68fa      	ldr	r2, [r7, #12]
 8008438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 800843c:	79fb      	ldrb	r3, [r7, #7]
 800843e:	4915      	ldr	r1, [pc, #84]	; (8008494 <Check_Primary_r_Secondary+0x248>)
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 8008446:	79fa      	ldrb	r2, [r7, #7]
 8008448:	490c      	ldr	r1, [pc, #48]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800844a:	4613      	mov	r3, r2
 800844c:	005b      	lsls	r3, r3, #1
 800844e:	4413      	add	r3, r2
 8008450:	00db      	lsls	r3, r3, #3
 8008452:	440b      	add	r3, r1
 8008454:	3310      	adds	r3, #16
 8008456:	2200      	movs	r2, #0
 8008458:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800845a:	79fa      	ldrb	r2, [r7, #7]
 800845c:	4907      	ldr	r1, [pc, #28]	; (800847c <Check_Primary_r_Secondary+0x230>)
 800845e:	4613      	mov	r3, r2
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	4413      	add	r3, r2
 8008464:	00db      	lsls	r3, r3, #3
 8008466:	440b      	add	r3, r1
 8008468:	3304      	adds	r3, #4
 800846a:	2201      	movs	r2, #1
 800846c:	701a      	strb	r2, [r3, #0]
 800846e:	e000      	b.n	8008472 <Check_Primary_r_Secondary+0x226>
		return;
 8008470:	bf00      	nop
			}
#endif

		}
	}
}
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	20000504 	.word	0x20000504
 800847c:	20002da4 	.word	0x20002da4
 8008480:	20002e94 	.word	0x20002e94
 8008484:	0802874c 	.word	0x0802874c
 8008488:	08028788 	.word	0x08028788
 800848c:	080287c4 	.word	0x080287c4
 8008490:	20002630 	.word	0x20002630
 8008494:	20002658 	.word	0x20002658
 8008498:	080287fc 	.word	0x080287fc

0800849c <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	4603      	mov	r3, r0
 80084a4:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80084a6:	79fb      	ldrb	r3, [r7, #7]
 80084a8:	4aac      	ldr	r2, [pc, #688]	; (800875c <Check_Vital_CRC+0x2c0>)
 80084aa:	4413      	add	r3, r2
 80084ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	f000 814f 	beq.w	8008754 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 80084b6:	79fa      	ldrb	r2, [r7, #7]
 80084b8:	49a9      	ldr	r1, [pc, #676]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80084ba:	4613      	mov	r3, r2
 80084bc:	005b      	lsls	r3, r3, #1
 80084be:	4413      	add	r3, r2
 80084c0:	00db      	lsls	r3, r3, #3
 80084c2:	440b      	add	r3, r1
 80084c4:	3308      	adds	r3, #8
 80084c6:	6819      	ldr	r1, [r3, #0]
 80084c8:	79fa      	ldrb	r2, [r7, #7]
 80084ca:	48a6      	ldr	r0, [pc, #664]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80084cc:	4613      	mov	r3, r2
 80084ce:	005b      	lsls	r3, r3, #1
 80084d0:	4413      	add	r3, r2
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4403      	add	r3, r0
 80084d6:	3308      	adds	r3, #8
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4299      	cmp	r1, r3
 80084dc:	f000 8092 	beq.w	8008604 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 80084e0:	79fa      	ldrb	r2, [r7, #7]
 80084e2:	49a0      	ldr	r1, [pc, #640]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80084e4:	4613      	mov	r3, r2
 80084e6:	005b      	lsls	r3, r3, #1
 80084e8:	4413      	add	r3, r2
 80084ea:	00db      	lsls	r3, r3, #3
 80084ec:	440b      	add	r3, r1
 80084ee:	3308      	adds	r3, #8
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8086 	beq.w	8008604 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80084f8:	79fa      	ldrb	r2, [r7, #7]
 80084fa:	4999      	ldr	r1, [pc, #612]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80084fc:	4613      	mov	r3, r2
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	440b      	add	r3, r1
 8008506:	3304      	adds	r3, #4
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d104      	bne.n	8008518 <Check_Vital_CRC+0x7c>
 800850e:	79fb      	ldrb	r3, [r7, #7]
 8008510:	4a95      	ldr	r2, [pc, #596]	; (8008768 <Check_Vital_CRC+0x2cc>)
 8008512:	5cd3      	ldrb	r3, [r2, r3]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d175      	bne.n	8008604 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008518:	79fa      	ldrb	r2, [r7, #7]
 800851a:	4991      	ldr	r1, [pc, #580]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800851c:	4613      	mov	r3, r2
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	4413      	add	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	440b      	add	r3, r1
 8008526:	3308      	adds	r3, #8
 8008528:	6819      	ldr	r1, [r3, #0]
 800852a:	79fa      	ldrb	r2, [r7, #7]
 800852c:	488d      	ldr	r0, [pc, #564]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800852e:	4613      	mov	r3, r2
 8008530:	005b      	lsls	r3, r3, #1
 8008532:	4413      	add	r3, r2
 8008534:	00db      	lsls	r3, r3, #3
 8008536:	4403      	add	r3, r0
 8008538:	3308      	adds	r3, #8
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	1acb      	subs	r3, r1, r3
 800853e:	2b00      	cmp	r3, #0
 8008540:	bfb8      	it	lt
 8008542:	425b      	neglt	r3, r3
 8008544:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d104      	bne.n	8008556 <Check_Vital_CRC+0xba>
 800854c:	79fb      	ldrb	r3, [r7, #7]
 800854e:	4a87      	ldr	r2, [pc, #540]	; (800876c <Check_Vital_CRC+0x2d0>)
 8008550:	5cd3      	ldrb	r3, [r2, r3]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d14c      	bne.n	80085f0 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8008556:	79fb      	ldrb	r3, [r7, #7]
 8008558:	4a84      	ldr	r2, [pc, #528]	; (800876c <Check_Vital_CRC+0x2d0>)
 800855a:	2100      	movs	r1, #0
 800855c:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800855e:	79fb      	ldrb	r3, [r7, #7]
 8008560:	4a7e      	ldr	r2, [pc, #504]	; (800875c <Check_Vital_CRC+0x2c0>)
 8008562:	3366      	adds	r3, #102	; 0x66
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	4413      	add	r3, r2
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	4880      	ldr	r0, [pc, #512]	; (8008770 <Check_Vital_CRC+0x2d4>)
 800856e:	f01d fd27 	bl	8025fc0 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8008572:	79fa      	ldrb	r2, [r7, #7]
 8008574:	497a      	ldr	r1, [pc, #488]	; (8008760 <Check_Vital_CRC+0x2c4>)
 8008576:	4613      	mov	r3, r2
 8008578:	005b      	lsls	r3, r3, #1
 800857a:	4413      	add	r3, r2
 800857c:	00db      	lsls	r3, r3, #3
 800857e:	440b      	add	r3, r1
 8008580:	3308      	adds	r3, #8
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4619      	mov	r1, r3
 8008586:	487b      	ldr	r0, [pc, #492]	; (8008774 <Check_Vital_CRC+0x2d8>)
 8008588:	f01d fd1a 	bl	8025fc0 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800858c:	79fa      	ldrb	r2, [r7, #7]
 800858e:	4975      	ldr	r1, [pc, #468]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008590:	4613      	mov	r3, r2
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	4413      	add	r3, r2
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	440b      	add	r3, r1
 800859a:	3308      	adds	r3, #8
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	4875      	ldr	r0, [pc, #468]	; (8008778 <Check_Vital_CRC+0x2dc>)
 80085a2:	f01d fd0d 	bl	8025fc0 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 80085a6:	4875      	ldr	r0, [pc, #468]	; (800877c <Check_Vital_CRC+0x2e0>)
 80085a8:	f01d fda6 	bl	80260f8 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80085ac:	79fa      	ldrb	r2, [r7, #7]
 80085ae:	79f9      	ldrb	r1, [r7, #7]
 80085b0:	486c      	ldr	r0, [pc, #432]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80085b2:	4613      	mov	r3, r2
 80085b4:	005b      	lsls	r3, r3, #1
 80085b6:	4413      	add	r3, r2
 80085b8:	00db      	lsls	r3, r3, #3
 80085ba:	4403      	add	r3, r0
 80085bc:	3308      	adds	r3, #8
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	486f      	ldr	r0, [pc, #444]	; (8008780 <Check_Vital_CRC+0x2e4>)
 80085c2:	010b      	lsls	r3, r1, #4
 80085c4:	4403      	add	r3, r0
 80085c6:	3308      	adds	r3, #8
 80085c8:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80085ca:	79f9      	ldrb	r1, [r7, #7]
 80085cc:	79fa      	ldrb	r2, [r7, #7]
 80085ce:	4865      	ldr	r0, [pc, #404]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80085d0:	460b      	mov	r3, r1
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	440b      	add	r3, r1
 80085d6:	00db      	lsls	r3, r3, #3
 80085d8:	4403      	add	r3, r0
 80085da:	3308      	adds	r3, #8
 80085dc:	6819      	ldr	r1, [r3, #0]
 80085de:	4860      	ldr	r0, [pc, #384]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80085e0:	4613      	mov	r3, r2
 80085e2:	005b      	lsls	r3, r3, #1
 80085e4:	4413      	add	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4403      	add	r3, r0
 80085ea:	3308      	adds	r3, #8
 80085ec:	6019      	str	r1, [r3, #0]
 80085ee:	e009      	b.n	8008604 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d106      	bne.n	8008604 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	4a5c      	ldr	r2, [pc, #368]	; (800876c <Check_Vital_CRC+0x2d0>)
 80085fa:	5cd2      	ldrb	r2, [r2, r3]
 80085fc:	3201      	adds	r2, #1
 80085fe:	b2d1      	uxtb	r1, r2
 8008600:	4a5a      	ldr	r2, [pc, #360]	; (800876c <Check_Vital_CRC+0x2d0>)
 8008602:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	4956      	ldr	r1, [pc, #344]	; (8008760 <Check_Vital_CRC+0x2c4>)
 8008608:	4613      	mov	r3, r2
 800860a:	005b      	lsls	r3, r3, #1
 800860c:	4413      	add	r3, r2
 800860e:	00db      	lsls	r3, r3, #3
 8008610:	440b      	add	r3, r1
 8008612:	330c      	adds	r3, #12
 8008614:	6819      	ldr	r1, [r3, #0]
 8008616:	79fa      	ldrb	r2, [r7, #7]
 8008618:	4852      	ldr	r0, [pc, #328]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800861a:	4613      	mov	r3, r2
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4413      	add	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4403      	add	r3, r0
 8008624:	330c      	adds	r3, #12
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4299      	cmp	r1, r3
 800862a:	f000 8094 	beq.w	8008756 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 800862e:	79fa      	ldrb	r2, [r7, #7]
 8008630:	494c      	ldr	r1, [pc, #304]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008632:	4613      	mov	r3, r2
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	4413      	add	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	440b      	add	r3, r1
 800863c:	330c      	adds	r3, #12
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2b00      	cmp	r3, #0
 8008642:	f000 8088 	beq.w	8008756 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8008646:	79fa      	ldrb	r2, [r7, #7]
 8008648:	4945      	ldr	r1, [pc, #276]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800864a:	4613      	mov	r3, r2
 800864c:	005b      	lsls	r3, r3, #1
 800864e:	4413      	add	r3, r2
 8008650:	00db      	lsls	r3, r3, #3
 8008652:	440b      	add	r3, r1
 8008654:	3304      	adds	r3, #4
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	2b01      	cmp	r3, #1
 800865a:	d104      	bne.n	8008666 <Check_Vital_CRC+0x1ca>
 800865c:	79fb      	ldrb	r3, [r7, #7]
 800865e:	4a42      	ldr	r2, [pc, #264]	; (8008768 <Check_Vital_CRC+0x2cc>)
 8008660:	5cd3      	ldrb	r3, [r2, r3]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d177      	bne.n	8008756 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8008666:	79fa      	ldrb	r2, [r7, #7]
 8008668:	493d      	ldr	r1, [pc, #244]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800866a:	4613      	mov	r3, r2
 800866c:	005b      	lsls	r3, r3, #1
 800866e:	4413      	add	r3, r2
 8008670:	00db      	lsls	r3, r3, #3
 8008672:	440b      	add	r3, r1
 8008674:	330c      	adds	r3, #12
 8008676:	6819      	ldr	r1, [r3, #0]
 8008678:	79fa      	ldrb	r2, [r7, #7]
 800867a:	483a      	ldr	r0, [pc, #232]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800867c:	4613      	mov	r3, r2
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	4413      	add	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4403      	add	r3, r0
 8008686:	330c      	adds	r3, #12
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	1acb      	subs	r3, r1, r3
 800868c:	2b00      	cmp	r3, #0
 800868e:	bfb8      	it	lt
 8008690:	425b      	neglt	r3, r3
 8008692:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	2b01      	cmp	r3, #1
 8008698:	d104      	bne.n	80086a4 <Check_Vital_CRC+0x208>
 800869a:	79fb      	ldrb	r3, [r7, #7]
 800869c:	4a39      	ldr	r2, [pc, #228]	; (8008784 <Check_Vital_CRC+0x2e8>)
 800869e:	5cd3      	ldrb	r3, [r2, r3]
 80086a0:	2b03      	cmp	r3, #3
 80086a2:	d14c      	bne.n	800873e <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 80086a4:	79fb      	ldrb	r3, [r7, #7]
 80086a6:	4a37      	ldr	r2, [pc, #220]	; (8008784 <Check_Vital_CRC+0x2e8>)
 80086a8:	2100      	movs	r1, #0
 80086aa:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80086ac:	79fb      	ldrb	r3, [r7, #7]
 80086ae:	4a2b      	ldr	r2, [pc, #172]	; (800875c <Check_Vital_CRC+0x2c0>)
 80086b0:	3366      	adds	r3, #102	; 0x66
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	4619      	mov	r1, r3
 80086ba:	4833      	ldr	r0, [pc, #204]	; (8008788 <Check_Vital_CRC+0x2ec>)
 80086bc:	f01d fc80 	bl	8025fc0 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086c0:	79fa      	ldrb	r2, [r7, #7]
 80086c2:	4927      	ldr	r1, [pc, #156]	; (8008760 <Check_Vital_CRC+0x2c4>)
 80086c4:	4613      	mov	r3, r2
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	4413      	add	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	440b      	add	r3, r1
 80086ce:	330c      	adds	r3, #12
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4619      	mov	r1, r3
 80086d4:	482d      	ldr	r0, [pc, #180]	; (800878c <Check_Vital_CRC+0x2f0>)
 80086d6:	f01d fc73 	bl	8025fc0 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 80086da:	79fa      	ldrb	r2, [r7, #7]
 80086dc:	4921      	ldr	r1, [pc, #132]	; (8008764 <Check_Vital_CRC+0x2c8>)
 80086de:	4613      	mov	r3, r2
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	4413      	add	r3, r2
 80086e4:	00db      	lsls	r3, r3, #3
 80086e6:	440b      	add	r3, r1
 80086e8:	330c      	adds	r3, #12
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4619      	mov	r1, r3
 80086ee:	4828      	ldr	r0, [pc, #160]	; (8008790 <Check_Vital_CRC+0x2f4>)
 80086f0:	f01d fc66 	bl	8025fc0 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 80086f4:	4827      	ldr	r0, [pc, #156]	; (8008794 <Check_Vital_CRC+0x2f8>)
 80086f6:	f01d fcff 	bl	80260f8 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 80086fa:	79fa      	ldrb	r2, [r7, #7]
 80086fc:	79f9      	ldrb	r1, [r7, #7]
 80086fe:	4819      	ldr	r0, [pc, #100]	; (8008764 <Check_Vital_CRC+0x2c8>)
 8008700:	4613      	mov	r3, r2
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	4413      	add	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4403      	add	r3, r0
 800870a:	330c      	adds	r3, #12
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	481c      	ldr	r0, [pc, #112]	; (8008780 <Check_Vital_CRC+0x2e4>)
 8008710:	010b      	lsls	r3, r1, #4
 8008712:	4403      	add	r3, r0
 8008714:	330c      	adds	r3, #12
 8008716:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8008718:	79f9      	ldrb	r1, [r7, #7]
 800871a:	79fa      	ldrb	r2, [r7, #7]
 800871c:	4811      	ldr	r0, [pc, #68]	; (8008764 <Check_Vital_CRC+0x2c8>)
 800871e:	460b      	mov	r3, r1
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	440b      	add	r3, r1
 8008724:	00db      	lsls	r3, r3, #3
 8008726:	4403      	add	r3, r0
 8008728:	330c      	adds	r3, #12
 800872a:	6819      	ldr	r1, [r3, #0]
 800872c:	480c      	ldr	r0, [pc, #48]	; (8008760 <Check_Vital_CRC+0x2c4>)
 800872e:	4613      	mov	r3, r2
 8008730:	005b      	lsls	r3, r3, #1
 8008732:	4413      	add	r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	4403      	add	r3, r0
 8008738:	330c      	adds	r3, #12
 800873a:	6019      	str	r1, [r3, #0]
 800873c:	e00b      	b.n	8008756 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	2b01      	cmp	r3, #1
 8008742:	d108      	bne.n	8008756 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8008744:	79fb      	ldrb	r3, [r7, #7]
 8008746:	4a0f      	ldr	r2, [pc, #60]	; (8008784 <Check_Vital_CRC+0x2e8>)
 8008748:	5cd2      	ldrb	r2, [r2, r3]
 800874a:	3201      	adds	r2, #1
 800874c:	b2d1      	uxtb	r1, r2
 800874e:	4a0d      	ldr	r2, [pc, #52]	; (8008784 <Check_Vital_CRC+0x2e8>)
 8008750:	54d1      	strb	r1, [r2, r3]
 8008752:	e000      	b.n	8008756 <Check_Vital_CRC+0x2ba>
		return;
 8008754:	bf00      	nop
				}
			}
		}
	}
}
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000504 	.word	0x20000504
 8008760:	20002da4 	.word	0x20002da4
 8008764:	20002e94 	.word	0x20002e94
 8008768:	20002680 	.word	0x20002680
 800876c:	20003750 	.word	0x20003750
 8008770:	08028838 	.word	0x08028838
 8008774:	0802887c 	.word	0x0802887c
 8008778:	080288a0 	.word	0x080288a0
 800877c:	080288c4 	.word	0x080288c4
 8008780:	200028f4 	.word	0x200028f4
 8008784:	2000375c 	.word	0x2000375c
 8008788:	080288ec 	.word	0x080288ec
 800878c:	08028930 	.word	0x08028930
 8008790:	08028954 	.word	0x08028954
 8008794:	08028978 	.word	0x08028978

08008798 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b082      	sub	sp, #8
 800879c:	af00      	add	r7, sp, #0
 800879e:	4603      	mov	r3, r0
 80087a0:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 80087a2:	79fb      	ldrb	r3, [r7, #7]
 80087a4:	4a0a      	ldr	r2, [pc, #40]	; (80087d0 <Check_Other_EiPC_Packet+0x38>)
 80087a6:	4413      	add	r3, r2
 80087a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80087ac:	2b02      	cmp	r3, #2
 80087ae:	d007      	beq.n	80087c0 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 80087b0:	79fb      	ldrb	r3, [r7, #7]
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff fd4a 	bl	800824c <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f7ff fe6e 	bl	800849c <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 80087c0:	79fb      	ldrb	r3, [r7, #7]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f001 fa94 	bl	8009cf0 <CheckOtherLinkStatus>
}
 80087c8:	bf00      	nop
 80087ca:	3708      	adds	r7, #8
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}
 80087d0:	20000504 	.word	0x20000504

080087d4 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80087de:	493c      	ldr	r1, [pc, #240]	; (80088d0 <CheckLinkEstablishTimeout+0xfc>)
 80087e0:	483c      	ldr	r0, [pc, #240]	; (80088d4 <CheckLinkEstablishTimeout+0x100>)
 80087e2:	f7f7 fd2d 	bl	8000240 <strcmp>
 80087e6:	4603      	mov	r3, r0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d06c      	beq.n	80088c6 <CheckLinkEstablishTimeout+0xf2>
	{
		return;
	}

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80087ec:	2300      	movs	r3, #0
 80087ee:	71fb      	strb	r3, [r7, #7]
 80087f0:	e062      	b.n	80088b8 <CheckLinkEstablishTimeout+0xe4>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 80087f2:	79fb      	ldrb	r3, [r7, #7]
 80087f4:	4a38      	ldr	r2, [pc, #224]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 80087f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f007 fdfc 	bl	80103f8 <HAL_Elaps_Ticks>
 8008800:	4602      	mov	r2, r0
 8008802:	79fb      	ldrb	r3, [r7, #7]
 8008804:	4935      	ldr	r1, [pc, #212]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 8008806:	339e      	adds	r3, #158	; 0x9e
 8008808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800880c:	429a      	cmp	r2, r3
 800880e:	d950      	bls.n	80088b2 <CheckLinkEstablishTimeout+0xde>
 8008810:	79fb      	ldrb	r3, [r7, #7]
 8008812:	4a33      	ldr	r2, [pc, #204]	; (80088e0 <CheckLinkEstablishTimeout+0x10c>)
 8008814:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	492f      	ldr	r1, [pc, #188]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 800881c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008820:	429a      	cmp	r2, r3
 8008822:	d046      	beq.n	80088b2 <CheckLinkEstablishTimeout+0xde>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8008824:	79fa      	ldrb	r2, [r7, #7]
 8008826:	79fb      	ldrb	r3, [r7, #7]
 8008828:	492b      	ldr	r1, [pc, #172]	; (80088d8 <CheckLinkEstablishTimeout+0x104>)
 800882a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800882e:	492c      	ldr	r1, [pc, #176]	; (80088e0 <CheckLinkEstablishTimeout+0x10c>)
 8008830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008834:	79fb      	ldrb	r3, [r7, #7]
 8008836:	4a29      	ldr	r2, [pc, #164]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 8008838:	3366      	adds	r3, #102	; 0x66
 800883a:	009b      	lsls	r3, r3, #2
 800883c:	4413      	add	r3, r2
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	4619      	mov	r1, r3
 8008842:	4828      	ldr	r0, [pc, #160]	; (80088e4 <CheckLinkEstablishTimeout+0x110>)
 8008844:	f01d fbbc 	bl	8025fc0 <iprintf>
			SelfLinkFlag[Traverser] = RESET;
 8008848:	79fb      	ldrb	r3, [r7, #7]
 800884a:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <CheckLinkEstablishTimeout+0x114>)
 800884c:	2100      	movs	r1, #0
 800884e:	54d1      	strb	r1, [r2, r3]
			memset(&Main_Relays_st[Traverser].RelayIPS_Buff,0,sizeof(Main_Relays_st[Traverser].RelayIPS_Buff));
 8008850:	79fa      	ldrb	r2, [r7, #7]
 8008852:	4613      	mov	r3, r2
 8008854:	009b      	lsls	r3, r3, #2
 8008856:	4413      	add	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	4a24      	ldr	r2, [pc, #144]	; (80088ec <CheckLinkEstablishTimeout+0x118>)
 800885c:	4413      	add	r3, r2
 800885e:	3301      	adds	r3, #1
 8008860:	2210      	movs	r2, #16
 8008862:	2100      	movs	r1, #0
 8008864:	4618      	mov	r0, r3
 8008866:	f01d fac3 	bl	8025df0 <memset>
			Main_Relays_st[Traverser].RelayIPS_CRC = 0;
 800886a:	79fa      	ldrb	r2, [r7, #7]
 800886c:	491f      	ldr	r1, [pc, #124]	; (80088ec <CheckLinkEstablishTimeout+0x118>)
 800886e:	4613      	mov	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	4413      	add	r3, r2
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	440b      	add	r3, r1
 8008878:	3312      	adds	r3, #18
 800887a:	2200      	movs	r2, #0
 800887c:	801a      	strh	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 800887e:	79fa      	ldrb	r2, [r7, #7]
 8008880:	491b      	ldr	r1, [pc, #108]	; (80088f0 <CheckLinkEstablishTimeout+0x11c>)
 8008882:	4613      	mov	r3, r2
 8008884:	005b      	lsls	r3, r3, #1
 8008886:	4413      	add	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	440b      	add	r3, r1
 800888c:	3310      	adds	r3, #16
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	79fc      	ldrb	r4, [r7, #7]
 8008892:	4618      	mov	r0, r3
 8008894:	f007 fdb0 	bl	80103f8 <HAL_Elaps_Ticks>
 8008898:	4602      	mov	r2, r0
 800889a:	4915      	ldr	r1, [pc, #84]	; (80088f0 <CheckLinkEstablishTimeout+0x11c>)
 800889c:	4623      	mov	r3, r4
 800889e:	005b      	lsls	r3, r3, #1
 80088a0:	4423      	add	r3, r4
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	440b      	add	r3, r1
 80088a6:	3310      	adds	r3, #16
 80088a8:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 80088aa:	79fb      	ldrb	r3, [r7, #7]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f001 fa1f 	bl	8009cf0 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	3301      	adds	r3, #1
 80088b6:	71fb      	strb	r3, [r7, #7]
 80088b8:	4b08      	ldr	r3, [pc, #32]	; (80088dc <CheckLinkEstablishTimeout+0x108>)
 80088ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80088be:	79fa      	ldrb	r2, [r7, #7]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d396      	bcc.n	80087f2 <CheckLinkEstablishTimeout+0x1e>
 80088c4:	e000      	b.n	80088c8 <CheckLinkEstablishTimeout+0xf4>
		return;
 80088c6:	bf00      	nop
		}
	}
}
 80088c8:	370c      	adds	r7, #12
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd90      	pop	{r4, r7, pc}
 80088ce:	bf00      	nop
 80088d0:	08027ad0 	.word	0x08027ad0
 80088d4:	20000505 	.word	0x20000505
 80088d8:	200025a0 	.word	0x200025a0
 80088dc:	20000504 	.word	0x20000504
 80088e0:	20003768 	.word	0x20003768
 80088e4:	080289a0 	.word	0x080289a0
 80088e8:	200025f0 	.word	0x200025f0
 80088ec:	20003598 	.word	0x20003598
 80088f0:	20002da4 	.word	0x20002da4

080088f4 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 80088f4:	b590      	push	{r4, r7, lr}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80088fa:	2300      	movs	r3, #0
 80088fc:	71fb      	strb	r3, [r7, #7]
 80088fe:	e052      	b.n	80089a6 <Send_Self_Sharing+0xb2>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8008900:	79fb      	ldrb	r3, [r7, #7]
 8008902:	4a2d      	ldr	r2, [pc, #180]	; (80089b8 <Send_Self_Sharing+0xc4>)
 8008904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008908:	4618      	mov	r0, r3
 800890a:	f007 fd75 	bl	80103f8 <HAL_Elaps_Ticks>
 800890e:	4602      	mov	r2, r0
 8008910:	4b2a      	ldr	r3, [pc, #168]	; (80089bc <Send_Self_Sharing+0xc8>)
 8008912:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008916:	429a      	cmp	r2, r3
 8008918:	d942      	bls.n	80089a0 <Send_Self_Sharing+0xac>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 800891a:	79fa      	ldrb	r2, [r7, #7]
 800891c:	4928      	ldr	r1, [pc, #160]	; (80089c0 <Send_Self_Sharing+0xcc>)
 800891e:	4613      	mov	r3, r2
 8008920:	005b      	lsls	r3, r3, #1
 8008922:	4413      	add	r3, r2
 8008924:	00db      	lsls	r3, r3, #3
 8008926:	440b      	add	r3, r1
 8008928:	3301      	adds	r3, #1
 800892a:	2200      	movs	r2, #0
 800892c:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 800892e:	79f9      	ldrb	r1, [r7, #7]
 8008930:	79fa      	ldrb	r2, [r7, #7]
 8008932:	4824      	ldr	r0, [pc, #144]	; (80089c4 <Send_Self_Sharing+0xd0>)
 8008934:	460b      	mov	r3, r1
 8008936:	005b      	lsls	r3, r3, #1
 8008938:	440b      	add	r3, r1
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4403      	add	r3, r0
 800893e:	3301      	adds	r3, #1
 8008940:	7818      	ldrb	r0, [r3, #0]
 8008942:	491f      	ldr	r1, [pc, #124]	; (80089c0 <Send_Self_Sharing+0xcc>)
 8008944:	4613      	mov	r3, r2
 8008946:	005b      	lsls	r3, r3, #1
 8008948:	4413      	add	r3, r2
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	440b      	add	r3, r1
 800894e:	3302      	adds	r3, #2
 8008950:	4602      	mov	r2, r0
 8008952:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8008954:	2218      	movs	r2, #24
 8008956:	2100      	movs	r1, #0
 8008958:	481b      	ldr	r0, [pc, #108]	; (80089c8 <Send_Self_Sharing+0xd4>)
 800895a:	f01d fa49 	bl	8025df0 <memset>
			Tx_Ei_self_sharing_st[Traverser].Peer_Index = Traverser;
 800895e:	79fa      	ldrb	r2, [r7, #7]
 8008960:	4917      	ldr	r1, [pc, #92]	; (80089c0 <Send_Self_Sharing+0xcc>)
 8008962:	4613      	mov	r3, r2
 8008964:	005b      	lsls	r3, r3, #1
 8008966:	4413      	add	r3, r2
 8008968:	00db      	lsls	r3, r3, #3
 800896a:	440b      	add	r3, r1
 800896c:	79fa      	ldrb	r2, [r7, #7]
 800896e:	701a      	strb	r2, [r3, #0]
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8008970:	79fa      	ldrb	r2, [r7, #7]
 8008972:	4613      	mov	r3, r2
 8008974:	005b      	lsls	r3, r3, #1
 8008976:	4413      	add	r3, r2
 8008978:	00db      	lsls	r3, r3, #3
 800897a:	4a11      	ldr	r2, [pc, #68]	; (80089c0 <Send_Self_Sharing+0xcc>)
 800897c:	4413      	add	r3, r2
 800897e:	2218      	movs	r2, #24
 8008980:	4619      	mov	r1, r3
 8008982:	4811      	ldr	r0, [pc, #68]	; (80089c8 <Send_Self_Sharing+0xd4>)
 8008984:	f01d fa0c 	bl	8025da0 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8008988:	f240 2001 	movw	r0, #513	; 0x201
 800898c:	f008 fae8 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8008990:	79fc      	ldrb	r4, [r7, #7]
 8008992:	f010 fbff 	bl	8019194 <HAL_GetTick>
 8008996:	4603      	mov	r3, r0
 8008998:	4a07      	ldr	r2, [pc, #28]	; (80089b8 <Send_Self_Sharing+0xc4>)
 800899a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 800899e:	e008      	b.n	80089b2 <Send_Self_Sharing+0xbe>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80089a0:	79fb      	ldrb	r3, [r7, #7]
 80089a2:	3301      	adds	r3, #1
 80089a4:	71fb      	strb	r3, [r7, #7]
 80089a6:	4b05      	ldr	r3, [pc, #20]	; (80089bc <Send_Self_Sharing+0xc8>)
 80089a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089ac:	79fa      	ldrb	r2, [r7, #7]
 80089ae:	429a      	cmp	r2, r3
 80089b0:	d3a6      	bcc.n	8008900 <Send_Self_Sharing+0xc>
		}
	}
}
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd90      	pop	{r4, r7, pc}
 80089b8:	200024b8 	.word	0x200024b8
 80089bc:	20000504 	.word	0x20000504
 80089c0:	20002da4 	.word	0x20002da4
 80089c4:	200033e0 	.word	0x200033e0
 80089c8:	20002f84 	.word	0x20002f84

080089cc <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 80089d0:	4b29      	ldr	r3, [pc, #164]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 80089d2:	781b      	ldrb	r3, [r3, #0]
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 80089d8:	f00d f900 	bl	8015bdc <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80089dc:	4927      	ldr	r1, [pc, #156]	; (8008a7c <Detect_CAN_Xchange_Failure+0xb0>)
 80089de:	4828      	ldr	r0, [pc, #160]	; (8008a80 <Detect_CAN_Xchange_Failure+0xb4>)
 80089e0:	f7f7 fc2e 	bl	8000240 <strcmp>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d103      	bne.n	80089f2 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 80089ea:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	701a      	strb	r2, [r3, #0]
		return;
 80089f0:	e040      	b.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 80089f2:	4b24      	ldr	r3, [pc, #144]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f007 fcfe 	bl	80103f8 <HAL_Elaps_Ticks>
 80089fc:	4602      	mov	r2, r0
 80089fe:	4b22      	ldr	r3, [pc, #136]	; (8008a88 <Detect_CAN_Xchange_Failure+0xbc>)
 8008a00:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8008a04:	429a      	cmp	r2, r3
 8008a06:	d335      	bcc.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8008a08:	4b20      	ldr	r3, [pc, #128]	; (8008a8c <Detect_CAN_Xchange_Failure+0xc0>)
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d02f      	beq.n	8008a74 <Detect_CAN_Xchange_Failure+0xa8>
		{
			Is_CAN_Exchange_happening = NO;
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <Detect_CAN_Xchange_Failure+0xac>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8008a1a:	4b1a      	ldr	r3, [pc, #104]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <Detect_CAN_Xchange_Failure+0xc0>)
 8008a20:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8008a22:	4b18      	ldr	r3, [pc, #96]	; (8008a84 <Detect_CAN_Xchange_Failure+0xb8>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f007 fce6 	bl	80103f8 <HAL_Elaps_Ticks>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	4a18      	ldr	r2, [pc, #96]	; (8008a90 <Detect_CAN_Xchange_Failure+0xc4>)
 8008a30:	fba2 2303 	umull	r2, r3, r2, r3
 8008a34:	099b      	lsrs	r3, r3, #6
 8008a36:	4619      	mov	r1, r3
 8008a38:	4816      	ldr	r0, [pc, #88]	; (8008a94 <Detect_CAN_Xchange_Failure+0xc8>)
 8008a3a:	f01d fac1 	bl	8025fc0 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8008a3e:	4816      	ldr	r0, [pc, #88]	; (8008a98 <Detect_CAN_Xchange_Failure+0xcc>)
 8008a40:	f01d fb5a 	bl	80260f8 <puts>
			memset(&Rx_Ei_self_sharing_st,0,(sizeof(EI_SELF_SHARING_t)* EI_data.Hitachi_st.PeersCnt));
 8008a44:	4b10      	ldr	r3, [pc, #64]	; (8008a88 <Detect_CAN_Xchange_Failure+0xbc>)
 8008a46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a4a:	461a      	mov	r2, r3
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	005b      	lsls	r3, r3, #1
 8008a50:	4413      	add	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	461a      	mov	r2, r3
 8008a56:	2100      	movs	r1, #0
 8008a58:	4810      	ldr	r0, [pc, #64]	; (8008a9c <Detect_CAN_Xchange_Failure+0xd0>)
 8008a5a:	f01d f9c9 	bl	8025df0 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8008a5e:	22a2      	movs	r2, #162	; 0xa2
 8008a60:	2100      	movs	r1, #0
 8008a62:	480f      	ldr	r0, [pc, #60]	; (8008aa0 <Detect_CAN_Xchange_Failure+0xd4>)
 8008a64:	f01d f9c4 	bl	8025df0 <memset>
			ReArrangedVitalData();
 8008a68:	f001 fe4c 	bl	800a704 <ReArrangedVitalData>
			TransmitCanPkt(EI_PROCESS_DATA);
 8008a6c:	f240 1019 	movw	r0, #281	; 0x119
 8008a70:	f008 fa76 	bl	8010f60 <TransmitCanPkt>
		}
	}
}
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	2000030b 	.word	0x2000030b
 8008a7c:	08027ad0 	.word	0x08027ad0
 8008a80:	20000505 	.word	0x20000505
 8008a84:	200024b4 	.word	0x200024b4
 8008a88:	20000504 	.word	0x20000504
 8008a8c:	20003790 	.word	0x20003790
 8008a90:	10624dd3 	.word	0x10624dd3
 8008a94:	080289c0 	.word	0x080289c0
 8008a98:	080289f0 	.word	0x080289f0
 8008a9c:	20002e94 	.word	0x20002e94
 8008aa0:	20002770 	.word	0x20002770

08008aa4 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b0ae      	sub	sp, #184	; 0xb8
 8008aa8:	af00      	add	r7, sp, #0

#ifdef EI_1
	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8008aaa:	2300      	movs	r3, #0
 8008aac:	607b      	str	r3, [r7, #4]
 8008aae:	f107 0308 	add.w	r3, r7, #8
 8008ab2:	22a6      	movs	r2, #166	; 0xa6
 8008ab4:	2100      	movs	r1, #0
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f01d f99a 	bl	8025df0 <memset>
	uint16_t Serial_Byte = RESET;
 8008abc:	2300      	movs	r3, #0
 8008abe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif


	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8008ac2:	4bc9      	ldr	r3, [pc, #804]	; (8008de8 <Process_Send_Signals_2_MIE+0x344>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f007 fc96 	bl	80103f8 <HAL_Elaps_Ticks>
 8008acc:	4602      	mov	r2, r0
 8008ace:	4bc7      	ldr	r3, [pc, #796]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008ad0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	f240 82ad 	bls.w	8009034 <Process_Send_Signals_2_MIE+0x590>
	{
		uint8_t Traverser = RESET;
 8008ada:	2300      	movs	r3, #0
 8008adc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = RESET;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008aec:	e0c6      	b.n	8008c7c <Process_Send_Signals_2_MIE+0x1d8>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8008aee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008af2:	4abf      	ldr	r2, [pc, #764]	; (8008df0 <Process_Send_Signals_2_MIE+0x34c>)
 8008af4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d11d      	bne.n	8008b38 <Process_Send_Signals_2_MIE+0x94>
 8008afc:	49bd      	ldr	r1, [pc, #756]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008afe:	48be      	ldr	r0, [pc, #760]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008b00:	f7f7 fb9e 	bl	8000240 <strcmp>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d016      	beq.n	8008b38 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b0a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b0e:	4ab7      	ldr	r2, [pc, #732]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008b10:	3366      	adds	r3, #102	; 0x66
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	4413      	add	r3, r2
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	48b8      	ldr	r0, [pc, #736]	; (8008dfc <Process_Send_Signals_2_MIE+0x358>)
 8008b1c:	f01d fa50 	bl	8025fc0 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008b20:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b24:	011b      	lsls	r3, r3, #4
 8008b26:	4ab6      	ldr	r2, [pc, #728]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008b28:	4413      	add	r3, r2
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	2210      	movs	r2, #16
 8008b2e:	2100      	movs	r1, #0
 8008b30:	4618      	mov	r0, r3
 8008b32:	f01d f95d 	bl	8025df0 <memset>
				continue;
 8008b36:	e09c      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			}
			Choice = RESET;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8008b3e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b42:	4ab0      	ldr	r2, [pc, #704]	; (8008e04 <Process_Send_Signals_2_MIE+0x360>)
 8008b44:	5cd3      	ldrb	r3, [r2, r3]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d106      	bne.n	8008b58 <Process_Send_Signals_2_MIE+0xb4>
 8008b4a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b4e:	f043 0301 	orr.w	r3, r3, #1
 8008b52:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b56:	e005      	b.n	8008b64 <Process_Send_Signals_2_MIE+0xc0>
 8008b58:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b5c:	f023 0301 	bic.w	r3, r3, #1
 8008b60:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(SelfLinkFlag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008b64:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b68:	4aa7      	ldr	r2, [pc, #668]	; (8008e08 <Process_Send_Signals_2_MIE+0x364>)
 8008b6a:	5cd3      	ldrb	r3, [r2, r3]
 8008b6c:	2b01      	cmp	r3, #1
 8008b6e:	d106      	bne.n	8008b7e <Process_Send_Signals_2_MIE+0xda>
 8008b70:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b74:	f043 0302 	orr.w	r3, r3, #2
 8008b78:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008b7c:	e005      	b.n	8008b8a <Process_Send_Signals_2_MIE+0xe6>
 8008b7e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008b82:	f023 0302 	bic.w	r3, r3, #2
 8008b86:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			if(Debug_flag == 1)
 8008b8a:	4ba0      	ldr	r3, [pc, #640]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d10c      	bne.n	8008bac <Process_Send_Signals_2_MIE+0x108>
			{
				printf("Choice:%02X|%lu\n",Choice,EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008b92:	f897 10b4 	ldrb.w	r1, [r7, #180]	; 0xb4
 8008b96:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008b9a:	4a94      	ldr	r2, [pc, #592]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008b9c:	3366      	adds	r3, #102	; 0x66
 8008b9e:	009b      	lsls	r3, r3, #2
 8008ba0:	4413      	add	r3, r2
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	489a      	ldr	r0, [pc, #616]	; (8008e10 <Process_Send_Signals_2_MIE+0x36c>)
 8008ba8:	f01d fa0a 	bl	8025fc0 <iprintf>
			}

			switch(Choice)
 8008bac:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008bb0:	2b03      	cmp	r3, #3
 8008bb2:	d853      	bhi.n	8008c5c <Process_Send_Signals_2_MIE+0x1b8>
 8008bb4:	a201      	add	r2, pc, #4	; (adr r2, 8008bbc <Process_Send_Signals_2_MIE+0x118>)
 8008bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bba:	bf00      	nop
 8008bbc:	08008bcd 	.word	0x08008bcd
 8008bc0:	08008be5 	.word	0x08008be5
 8008bc4:	08008c0d 	.word	0x08008c0d
 8008bc8:	08008c35 	.word	0x08008c35
			{
			case BOTHCARD_LINK_NOK:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008bcc:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008bd0:	011b      	lsls	r3, r3, #4
 8008bd2:	4a8b      	ldr	r2, [pc, #556]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008bd4:	4413      	add	r3, r2
 8008bd6:	3302      	adds	r3, #2
 8008bd8:	2210      	movs	r2, #16
 8008bda:	2100      	movs	r1, #0
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f01d f907 	bl	8025df0 <memset>
				break;
 8008be2:	e046      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>

			case OTHERCARD_LINK_OK:
				/*printf("\nOtherCard SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008be4:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008be8:	011b      	lsls	r3, r3, #4
 8008bea:	4a85      	ldr	r2, [pc, #532]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008bec:	4413      	add	r3, r2
 8008bee:	1c98      	adds	r0, r3, #2
 8008bf0:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	4a85      	ldr	r2, [pc, #532]	; (8008e14 <Process_Send_Signals_2_MIE+0x370>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	3301      	adds	r3, #1
 8008c02:	2210      	movs	r2, #16
 8008c04:	4619      	mov	r1, r3
 8008c06:	f01d f8cb 	bl	8025da0 <memcpy>
				break;
 8008c0a:	e032      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			case THISCARD_LINK_OK:
				/*printf("\nOnly This Card SET\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008c0c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c10:	011b      	lsls	r3, r3, #4
 8008c12:	4a7b      	ldr	r2, [pc, #492]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c14:	4413      	add	r3, r2
 8008c16:	1c98      	adds	r0, r3, #2
 8008c18:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c1c:	4613      	mov	r3, r2
 8008c1e:	009b      	lsls	r3, r3, #2
 8008c20:	4413      	add	r3, r2
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	4a7c      	ldr	r2, [pc, #496]	; (8008e18 <Process_Send_Signals_2_MIE+0x374>)
 8008c26:	4413      	add	r3, r2
 8008c28:	3301      	adds	r3, #1
 8008c2a:	2210      	movs	r2, #16
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	f01d f8b7 	bl	8025da0 <memcpy>
				break;
 8008c32:	e01e      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>
			case BOTHCARD_LINK_OK:
				/*printf("\nBothCard SET3\n");*/
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8008c34:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c38:	011b      	lsls	r3, r3, #4
 8008c3a:	4a71      	ldr	r2, [pc, #452]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c3c:	4413      	add	r3, r2
 8008c3e:	1c98      	adds	r0, r3, #2
 8008c40:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c44:	4613      	mov	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	009b      	lsls	r3, r3, #2
 8008c4c:	4a72      	ldr	r2, [pc, #456]	; (8008e18 <Process_Send_Signals_2_MIE+0x374>)
 8008c4e:	4413      	add	r3, r2
 8008c50:	3301      	adds	r3, #1
 8008c52:	2210      	movs	r2, #16
 8008c54:	4619      	mov	r1, r3
 8008c56:	f01d f8a3 	bl	8025da0 <memcpy>
				break;
 8008c5a:	e00a      	b.n	8008c72 <Process_Send_Signals_2_MIE+0x1ce>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008c5c:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c60:	011b      	lsls	r3, r3, #4
 8008c62:	4a67      	ldr	r2, [pc, #412]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008c64:	4413      	add	r3, r2
 8008c66:	3302      	adds	r3, #2
 8008c68:	2210      	movs	r2, #16
 8008c6a:	2100      	movs	r1, #0
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f01d f8bf 	bl	8025df0 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c72:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008c76:	3301      	adds	r3, #1
 8008c78:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8008c7c:	4b5b      	ldr	r3, [pc, #364]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008c7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c82:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008c86:	429a      	cmp	r2, r3
 8008c88:	f4ff af31 	bcc.w	8008aee <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008c8c:	4959      	ldr	r1, [pc, #356]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008c8e:	485a      	ldr	r0, [pc, #360]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008c90:	f7f7 fad6 	bl	8000240 <strcmp>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <Process_Send_Signals_2_MIE+0x1fc>
		{
			Is_CAN_Exchange_happening = YES;
 8008c9a:	4b60      	ldr	r3, [pc, #384]	; (8008e1c <Process_Send_Signals_2_MIE+0x378>)
 8008c9c:	2201      	movs	r2, #1
 8008c9e:	701a      	strb	r2, [r3, #0]
		}

		if(Is_CAN_Exchange_happening == NO)
 8008ca0:	4b5e      	ldr	r3, [pc, #376]	; (8008e1c <Process_Send_Signals_2_MIE+0x378>)
 8008ca2:	781b      	ldrb	r3, [r3, #0]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <Process_Send_Signals_2_MIE+0x21a>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008ca8:	485d      	ldr	r0, [pc, #372]	; (8008e20 <Process_Send_Signals_2_MIE+0x37c>)
 8008caa:	f01d fa25 	bl	80260f8 <puts>
			printf("Sending Blank Relay statuses\n");
 8008cae:	485d      	ldr	r0, [pc, #372]	; (8008e24 <Process_Send_Signals_2_MIE+0x380>)
 8008cb0:	f01d fa22 	bl	80260f8 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008cb4:	22a2      	movs	r2, #162	; 0xa2
 8008cb6:	2100      	movs	r1, #0
 8008cb8:	4851      	ldr	r0, [pc, #324]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008cba:	f01d f899 	bl	8025df0 <memset>
		}


		if(Debug_flag == 1)
 8008cbe:	4b53      	ldr	r3, [pc, #332]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008cc0:	781b      	ldrb	r3, [r3, #0]
 8008cc2:	2b01      	cmp	r3, #1
 8008cc4:	d143      	bne.n	8008d4e <Process_Send_Signals_2_MIE+0x2aa>
		{
			Get_time();
 8008cc6:	f003 ff11 	bl	800caec <Get_time>
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008cca:	4b57      	ldr	r3, [pc, #348]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4b55      	ldr	r3, [pc, #340]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008cd2:	785b      	ldrb	r3, [r3, #1]
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b54      	ldr	r3, [pc, #336]	; (8008e28 <Process_Send_Signals_2_MIE+0x384>)
 8008cd8:	789b      	ldrb	r3, [r3, #2]
 8008cda:	4854      	ldr	r0, [pc, #336]	; (8008e2c <Process_Send_Signals_2_MIE+0x388>)
 8008cdc:	f01d f970 	bl	8025fc0 <iprintf>
			ReArrangedVitalData();
 8008ce0:	f001 fd10 	bl	800a704 <ReArrangedVitalData>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008cea:	e025      	b.n	8008d38 <Process_Send_Signals_2_MIE+0x294>
			{
				if(ReorderFlag == RESET)
 8008cec:	4b50      	ldr	r3, [pc, #320]	; (8008e30 <Process_Send_Signals_2_MIE+0x38c>)
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d109      	bne.n	8008d08 <Process_Send_Signals_2_MIE+0x264>
				{
					printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008cf4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008cf8:	4a41      	ldr	r2, [pc, #260]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008cfa:	4413      	add	r3, r2
 8008cfc:	789b      	ldrb	r3, [r3, #2]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	484c      	ldr	r0, [pc, #304]	; (8008e34 <Process_Send_Signals_2_MIE+0x390>)
 8008d02:	f01d f95d 	bl	8025fc0 <iprintf>
 8008d06:	e008      	b.n	8008d1a <Process_Send_Signals_2_MIE+0x276>
				}
				else
				{
					printf("%02X ",HitachiEI_DataReArranged_st.Inputs[Byte]);
 8008d08:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d0c:	4a4a      	ldr	r2, [pc, #296]	; (8008e38 <Process_Send_Signals_2_MIE+0x394>)
 8008d0e:	4413      	add	r3, r2
 8008d10:	789b      	ldrb	r3, [r3, #2]
 8008d12:	4619      	mov	r1, r3
 8008d14:	4847      	ldr	r0, [pc, #284]	; (8008e34 <Process_Send_Signals_2_MIE+0x390>)
 8008d16:	f01d f953 	bl	8025fc0 <iprintf>
				}
				if(((Byte+1)%16)==0)
 8008d1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d1e:	3301      	adds	r3, #1
 8008d20:	f003 030f 	and.w	r3, r3, #15
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d102      	bne.n	8008d2e <Process_Send_Signals_2_MIE+0x28a>
				{
					printf("\n");
 8008d28:	200a      	movs	r0, #10
 8008d2a:	f01d f961 	bl	8025ff0 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8008d2e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008d32:	3301      	adds	r3, #1
 8008d34:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008d38:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 8008d3c:	4b2b      	ldr	r3, [pc, #172]	; (8008dec <Process_Send_Signals_2_MIE+0x348>)
 8008d3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d42:	011b      	lsls	r3, r3, #4
 8008d44:	429a      	cmp	r2, r3
 8008d46:	dbd1      	blt.n	8008cec <Process_Send_Signals_2_MIE+0x248>
				}
			}
			printf("\n");
 8008d48:	200a      	movs	r0, #10
 8008d4a:	f01d f951 	bl	8025ff0 <putchar>
		}

#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif
		ReArrangedVitalData();
 8008d4e:	f001 fcd9 	bl	800a704 <ReArrangedVitalData>
		TransmitCanPkt(EI_PROCESS_DATA);
 8008d52:	f240 1019 	movw	r0, #281	; 0x119
 8008d56:	f008 f903 	bl	8010f60 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008d5a:	4926      	ldr	r1, [pc, #152]	; (8008df4 <Process_Send_Signals_2_MIE+0x350>)
 8008d5c:	4826      	ldr	r0, [pc, #152]	; (8008df8 <Process_Send_Signals_2_MIE+0x354>)
 8008d5e:	f7f7 fa6f 	bl	8000240 <strcmp>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f040 8160 	bne.w	800902a <Process_Send_Signals_2_MIE+0x586>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 8008d6a:	4b34      	ldr	r3, [pc, #208]	; (8008e3c <Process_Send_Signals_2_MIE+0x398>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f007 fb42 	bl	80103f8 <HAL_Elaps_Ticks>
 8008d74:	4603      	mov	r3, r0
 8008d76:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008d7a:	f0c0 80c2 	bcc.w	8008f02 <Process_Send_Signals_2_MIE+0x45e>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008d7e:	4a30      	ldr	r2, [pc, #192]	; (8008e40 <Process_Send_Signals_2_MIE+0x39c>)
 8008d80:	4b1f      	ldr	r3, [pc, #124]	; (8008e00 <Process_Send_Signals_2_MIE+0x35c>)
 8008d82:	4610      	mov	r0, r2
 8008d84:	3302      	adds	r3, #2
 8008d86:	22a0      	movs	r2, #160	; 0xa0
 8008d88:	4619      	mov	r1, r3
 8008d8a:	f01d f809 	bl	8025da0 <memcpy>
				Serial_Byte = 0;
 8008d8e:	2300      	movs	r3, #0
 8008d90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008d94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008d98:	1c5a      	adds	r2, r3, #1
 8008d9a:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008d9e:	33b8      	adds	r3, #184	; 0xb8
 8008da0:	443b      	add	r3, r7
 8008da2:	227e      	movs	r2, #126	; 0x7e
 8008da4:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008da8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008db2:	33b8      	adds	r3, #184	; 0xb8
 8008db4:	443b      	add	r3, r7
 8008db6:	227e      	movs	r2, #126	; 0x7e
 8008db8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008dbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008dc0:	1c5a      	adds	r2, r3, #1
 8008dc2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008dc6:	33b8      	adds	r3, #184	; 0xb8
 8008dc8:	443b      	add	r3, r7
 8008dca:	227e      	movs	r2, #126	; 0x7e
 8008dcc:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008dd0:	4b0e      	ldr	r3, [pc, #56]	; (8008e0c <Process_Send_Signals_2_MIE+0x368>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d102      	bne.n	8008dde <Process_Send_Signals_2_MIE+0x33a>
				{
					printf("Sending Signals over Ethernet:\n");
 8008dd8:	481a      	ldr	r0, [pc, #104]	; (8008e44 <Process_Send_Signals_2_MIE+0x3a0>)
 8008dda:	f01d f98d 	bl	80260f8 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008de4:	e05a      	b.n	8008e9c <Process_Send_Signals_2_MIE+0x3f8>
 8008de6:	bf00      	nop
 8008de8:	200024e4 	.word	0x200024e4
 8008dec:	20000504 	.word	0x20000504
 8008df0:	20002550 	.word	0x20002550
 8008df4:	08027ad0 	.word	0x08027ad0
 8008df8:	20000505 	.word	0x20000505
 8008dfc:	08028a14 	.word	0x08028a14
 8008e00:	20002770 	.word	0x20002770
 8008e04:	200025fc 	.word	0x200025fc
 8008e08:	200025f0 	.word	0x200025f0
 8008e0c:	20000bbb 	.word	0x20000bbb
 8008e10:	08028a28 	.word	0x08028a28
 8008e14:	20003660 	.word	0x20003660
 8008e18:	20003598 	.word	0x20003598
 8008e1c:	2000030b 	.word	0x2000030b
 8008e20:	08028a3c 	.word	0x08028a3c
 8008e24:	08028a60 	.word	0x08028a60
 8008e28:	20003fc4 	.word	0x20003fc4
 8008e2c:	08028a80 	.word	0x08028a80
 8008e30:	2000254e 	.word	0x2000254e
 8008e34:	08028aa8 	.word	0x08028aa8
 8008e38:	20002814 	.word	0x20002814
 8008e3c:	20003794 	.word	0x20003794
 8008e40:	20003798 	.word	0x20003798
 8008e44:	08028ab0 	.word	0x08028ab0
				{
					if(ReorderFlag == RESET)
 8008e48:	4b7c      	ldr	r3, [pc, #496]	; (800903c <Process_Send_Signals_2_MIE+0x598>)
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d110      	bne.n	8008e72 <Process_Send_Signals_2_MIE+0x3ce>
					{
						Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008e50:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e58:	1c59      	adds	r1, r3, #1
 8008e5a:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008e5e:	4619      	mov	r1, r3
 8008e60:	4b77      	ldr	r3, [pc, #476]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008e62:	4413      	add	r3, r2
 8008e64:	789a      	ldrb	r2, [r3, #2]
 8008e66:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008e6a:	443b      	add	r3, r7
 8008e6c:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8008e70:	e00f      	b.n	8008e92 <Process_Send_Signals_2_MIE+0x3ee>
					}
					else
					{
						Serial_Send_Buffer[Serial_Byte++] = HitachiEI_DataReArranged_st.Inputs[Byte];
 8008e72:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008e76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008e7a:	1c59      	adds	r1, r3, #1
 8008e7c:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008e80:	4619      	mov	r1, r3
 8008e82:	4b70      	ldr	r3, [pc, #448]	; (8009044 <Process_Send_Signals_2_MIE+0x5a0>)
 8008e84:	4413      	add	r3, r2
 8008e86:	789a      	ldrb	r2, [r3, #2]
 8008e88:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008e8c:	443b      	add	r3, r7
 8008e8e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008e92:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008e96:	3301      	adds	r3, #1
 8008e98:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 8008e9c:	4b68      	ldr	r3, [pc, #416]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008e9e:	881b      	ldrh	r3, [r3, #0]
 8008ea0:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d3cf      	bcc.n	8008e48 <Process_Send_Signals_2_MIE+0x3a4>
					}

				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ea8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008eb2:	33b8      	adds	r3, #184	; 0xb8
 8008eb4:	443b      	add	r3, r7
 8008eb6:	227f      	movs	r2, #127	; 0x7f
 8008eb8:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ebc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ec0:	1c5a      	adds	r2, r3, #1
 8008ec2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008ec6:	33b8      	adds	r3, #184	; 0xb8
 8008ec8:	443b      	add	r3, r7
 8008eca:	227f      	movs	r2, #127	; 0x7f
 8008ecc:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ed0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ed4:	1c5a      	adds	r2, r3, #1
 8008ed6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008eda:	33b8      	adds	r3, #184	; 0xb8
 8008edc:	443b      	add	r3, r7
 8008ede:	227f      	movs	r2, #127	; 0x7f
 8008ee0:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008ee4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ee8:	b2d9      	uxtb	r1, r3
 8008eea:	4a57      	ldr	r2, [pc, #348]	; (8009048 <Process_Send_Signals_2_MIE+0x5a4>)
 8008eec:	1d3b      	adds	r3, r7, #4
 8008eee:	6812      	ldr	r2, [r2, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f007 fe73 	bl	8010bdc <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 8008ef6:	f010 f94d 	bl	8019194 <HAL_GetTick>
 8008efa:	4603      	mov	r3, r0
 8008efc:	4a53      	ldr	r2, [pc, #332]	; (800904c <Process_Send_Signals_2_MIE+0x5a8>)
 8008efe:	6013      	str	r3, [r2, #0]
 8008f00:	e093      	b.n	800902a <Process_Send_Signals_2_MIE+0x586>
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008f02:	22a0      	movs	r2, #160	; 0xa0
 8008f04:	4952      	ldr	r1, [pc, #328]	; (8009050 <Process_Send_Signals_2_MIE+0x5ac>)
 8008f06:	4853      	ldr	r0, [pc, #332]	; (8009054 <Process_Send_Signals_2_MIE+0x5b0>)
 8008f08:	f01c ff3a 	bl	8025d80 <memcmp>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	f000 808b 	beq.w	800902a <Process_Send_Signals_2_MIE+0x586>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008f14:	4a4f      	ldr	r2, [pc, #316]	; (8009054 <Process_Send_Signals_2_MIE+0x5b0>)
 8008f16:	4b4a      	ldr	r3, [pc, #296]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008f18:	4610      	mov	r0, r2
 8008f1a:	3302      	adds	r3, #2
 8008f1c:	22a0      	movs	r2, #160	; 0xa0
 8008f1e:	4619      	mov	r1, r3
 8008f20:	f01c ff3e 	bl	8025da0 <memcpy>
				Serial_Byte = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f2a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f2e:	1c5a      	adds	r2, r3, #1
 8008f30:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f34:	33b8      	adds	r3, #184	; 0xb8
 8008f36:	443b      	add	r3, r7
 8008f38:	227e      	movs	r2, #126	; 0x7e
 8008f3a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f3e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f48:	33b8      	adds	r3, #184	; 0xb8
 8008f4a:	443b      	add	r3, r7
 8008f4c:	227e      	movs	r2, #126	; 0x7e
 8008f4e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008f52:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f56:	1c5a      	adds	r2, r3, #1
 8008f58:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008f5c:	33b8      	adds	r3, #184	; 0xb8
 8008f5e:	443b      	add	r3, r7
 8008f60:	227e      	movs	r2, #126	; 0x7e
 8008f62:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 8008f66:	4b3c      	ldr	r3, [pc, #240]	; (8009058 <Process_Send_Signals_2_MIE+0x5b4>)
 8008f68:	781b      	ldrb	r3, [r3, #0]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d102      	bne.n	8008f74 <Process_Send_Signals_2_MIE+0x4d0>
				{
					printf("Sending Signals over Ethernet:\n");
 8008f6e:	483b      	ldr	r0, [pc, #236]	; (800905c <Process_Send_Signals_2_MIE+0x5b8>)
 8008f70:	f01d f8c2 	bl	80260f8 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008f7a:	e029      	b.n	8008fd0 <Process_Send_Signals_2_MIE+0x52c>
				{
					if(ReorderFlag == RESET)
 8008f7c:	4b2f      	ldr	r3, [pc, #188]	; (800903c <Process_Send_Signals_2_MIE+0x598>)
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d110      	bne.n	8008fa6 <Process_Send_Signals_2_MIE+0x502>
					{
						Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008f84:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008f88:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008f8c:	1c59      	adds	r1, r3, #1
 8008f8e:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008f92:	4619      	mov	r1, r3
 8008f94:	4b2a      	ldr	r3, [pc, #168]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008f96:	4413      	add	r3, r2
 8008f98:	789a      	ldrb	r2, [r3, #2]
 8008f9a:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008f9e:	443b      	add	r3, r7
 8008fa0:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8008fa4:	e00f      	b.n	8008fc6 <Process_Send_Signals_2_MIE+0x522>
					}
					else
					{
						Serial_Send_Buffer[Serial_Byte++] = HitachiEI_DataReArranged_st.Inputs[Byte];
 8008fa6:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008faa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fae:	1c59      	adds	r1, r3, #1
 8008fb0:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 8008fb4:	4619      	mov	r1, r3
 8008fb6:	4b23      	ldr	r3, [pc, #140]	; (8009044 <Process_Send_Signals_2_MIE+0x5a0>)
 8008fb8:	4413      	add	r3, r2
 8008fba:	789a      	ldrb	r2, [r3, #2]
 8008fbc:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 8008fc0:	443b      	add	r3, r7
 8008fc2:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008fc6:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 8008fca:	3301      	adds	r3, #1
 8008fcc:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 8008fd0:	4b1b      	ldr	r3, [pc, #108]	; (8009040 <Process_Send_Signals_2_MIE+0x59c>)
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d3cf      	bcc.n	8008f7c <Process_Send_Signals_2_MIE+0x4d8>
					}
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008fdc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008fe0:	1c5a      	adds	r2, r3, #1
 8008fe2:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008fe6:	33b8      	adds	r3, #184	; 0xb8
 8008fe8:	443b      	add	r3, r7
 8008fea:	227f      	movs	r2, #127	; 0x7f
 8008fec:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008ff0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008ffa:	33b8      	adds	r3, #184	; 0xb8
 8008ffc:	443b      	add	r3, r7
 8008ffe:	227f      	movs	r2, #127	; 0x7f
 8009000:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8009004:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800900e:	33b8      	adds	r3, #184	; 0xb8
 8009010:	443b      	add	r3, r7
 8009012:	227f      	movs	r2, #127	; 0x7f
 8009014:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8009018:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800901c:	b2d9      	uxtb	r1, r3
 800901e:	4a0a      	ldr	r2, [pc, #40]	; (8009048 <Process_Send_Signals_2_MIE+0x5a4>)
 8009020:	1d3b      	adds	r3, r7, #4
 8009022:	6812      	ldr	r2, [r2, #0]
 8009024:	4618      	mov	r0, r3
 8009026:	f007 fdd9 	bl	8010bdc <Udp_Send_SigInfo>
#if ENABLE_SIGNAL_PRINT
		PrintSignalsHitachi();
#endif

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 800902a:	f010 f8b3 	bl	8019194 <HAL_GetTick>
 800902e:	4603      	mov	r3, r0
 8009030:	4a0b      	ldr	r2, [pc, #44]	; (8009060 <Process_Send_Signals_2_MIE+0x5bc>)
 8009032:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8009034:	bf00      	nop
 8009036:	37b8      	adds	r7, #184	; 0xb8
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	2000254e 	.word	0x2000254e
 8009040:	20002770 	.word	0x20002770
 8009044:	20002814 	.word	0x20002814
 8009048:	200026e4 	.word	0x200026e4
 800904c:	20003794 	.word	0x20003794
 8009050:	20002772 	.word	0x20002772
 8009054:	20003798 	.word	0x20003798
 8009058:	20000bbb 	.word	0x20000bbb
 800905c:	08028ab0 	.word	0x08028ab0
 8009060:	200024e4 	.word	0x200024e4

08009064 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8009064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009066:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800906a:	af04      	add	r7, sp, #16
 800906c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009070:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009074:	6018      	str	r0, [r3, #0]
 8009076:	4608      	mov	r0, r1
 8009078:	4611      	mov	r1, r2
 800907a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800907e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8009082:	4602      	mov	r2, r0
 8009084:	701a      	strb	r2, [r3, #0]
 8009086:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800908a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800908e:	460a      	mov	r2, r1
 8009090:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8009092:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009096:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800909a:	2200      	movs	r2, #0
 800909c:	601a      	str	r2, [r3, #0]
 800909e:	3304      	adds	r3, #4
 80090a0:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 80090a4:	2100      	movs	r1, #0
 80090a6:	4618      	mov	r0, r3
 80090a8:	f01c fea2 	bl	8025df0 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 80090ac:	2300      	movs	r3, #0
 80090ae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80090b2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80090b6:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d003      	beq.n	80090c8 <Print_EI_DATA+0x64>
 80090c0:	48a8      	ldr	r0, [pc, #672]	; (8009364 <Print_EI_DATA+0x300>)
 80090c2:	f000 f975 	bl	80093b0 <Display>
 80090c6:	e002      	b.n	80090ce <Print_EI_DATA+0x6a>
 80090c8:	48a7      	ldr	r0, [pc, #668]	; (8009368 <Print_EI_DATA+0x304>)
 80090ca:	f000 f971 	bl	80093b0 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80090ce:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80090d2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	3301      	adds	r3, #1
 80090da:	461a      	mov	r2, r3
 80090dc:	2110      	movs	r1, #16
 80090de:	2000      	movs	r0, #0
 80090e0:	f7f7 fa98 	bl	8000614 <ExtractBits>
 80090e4:	4602      	mov	r2, r0
 80090e6:	f107 030c 	add.w	r3, r7, #12
 80090ea:	49a0      	ldr	r1, [pc, #640]	; (800936c <Print_EI_DATA+0x308>)
 80090ec:	4618      	mov	r0, r3
 80090ee:	f01d f91f 	bl	8026330 <siprintf>
	Display(Print_buff);
 80090f2:	f107 030c 	add.w	r3, r7, #12
 80090f6:	4618      	mov	r0, r3
 80090f8:	f000 f95a 	bl	80093b0 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 80090fc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009100:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3303      	adds	r3, #3
 8009108:	461a      	mov	r2, r3
 800910a:	2110      	movs	r1, #16
 800910c:	2000      	movs	r0, #0
 800910e:	f7f7 fa81 	bl	8000614 <ExtractBits>
 8009112:	4602      	mov	r2, r0
 8009114:	f107 030c 	add.w	r3, r7, #12
 8009118:	4995      	ldr	r1, [pc, #596]	; (8009370 <Print_EI_DATA+0x30c>)
 800911a:	4618      	mov	r0, r3
 800911c:	f01d f908 	bl	8026330 <siprintf>
	Display(Print_buff);
 8009120:	f107 030c 	add.w	r3, r7, #12
 8009124:	4618      	mov	r0, r3
 8009126:	f000 f943 	bl	80093b0 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800912a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800912e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	3307      	adds	r3, #7
 8009136:	461a      	mov	r2, r3
 8009138:	2108      	movs	r1, #8
 800913a:	2000      	movs	r0, #0
 800913c:	f7f7 fa6a 	bl	8000614 <ExtractBits>
 8009140:	4603      	mov	r3, r0
 8009142:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8009146:	488b      	ldr	r0, [pc, #556]	; (8009374 <Print_EI_DATA+0x310>)
 8009148:	f000 f932 	bl	80093b0 <Display>
	switch(Msg_type)
 800914c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8009150:	3b01      	subs	r3, #1
 8009152:	2b05      	cmp	r3, #5
 8009154:	d829      	bhi.n	80091aa <Print_EI_DATA+0x146>
 8009156:	a201      	add	r2, pc, #4	; (adr r2, 800915c <Print_EI_DATA+0xf8>)
 8009158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915c:	08009175 	.word	0x08009175
 8009160:	08009193 	.word	0x08009193
 8009164:	080091ab 	.word	0x080091ab
 8009168:	0800919b 	.word	0x0800919b
 800916c:	080091ab 	.word	0x080091ab
 8009170:	080091a3 	.word	0x080091a3
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8009174:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009178:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800917c:	781b      	ldrb	r3, [r3, #0]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d003      	beq.n	800918a <Print_EI_DATA+0x126>
 8009182:	487d      	ldr	r0, [pc, #500]	; (8009378 <Print_EI_DATA+0x314>)
 8009184:	f000 f914 	bl	80093b0 <Display>
		//Display("INIT     ");
		break;
 8009188:	e012      	b.n	80091b0 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800918a:	487c      	ldr	r0, [pc, #496]	; (800937c <Print_EI_DATA+0x318>)
 800918c:	f000 f910 	bl	80093b0 <Display>
		break;
 8009190:	e00e      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8009192:	487b      	ldr	r0, [pc, #492]	; (8009380 <Print_EI_DATA+0x31c>)
 8009194:	f000 f90c 	bl	80093b0 <Display>
		break;
 8009198:	e00a      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800919a:	487a      	ldr	r0, [pc, #488]	; (8009384 <Print_EI_DATA+0x320>)
 800919c:	f000 f908 	bl	80093b0 <Display>
		break;
 80091a0:	e006      	b.n	80091b0 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 80091a2:	4879      	ldr	r0, [pc, #484]	; (8009388 <Print_EI_DATA+0x324>)
 80091a4:	f000 f904 	bl	80093b0 <Display>
		break;
 80091a8:	e002      	b.n	80091b0 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 80091aa:	4878      	ldr	r0, [pc, #480]	; (800938c <Print_EI_DATA+0x328>)
 80091ac:	f000 f900 	bl	80093b0 <Display>
	}
	Display("|");
 80091b0:	4877      	ldr	r0, [pc, #476]	; (8009390 <Print_EI_DATA+0x32c>)
 80091b2:	f000 f8fd 	bl	80093b0 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80091b6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091ba:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3305      	adds	r3, #5
 80091c2:	461a      	mov	r2, r3
 80091c4:	2108      	movs	r1, #8
 80091c6:	2000      	movs	r0, #0
 80091c8:	f7f7 fa24 	bl	8000614 <ExtractBits>
 80091cc:	4602      	mov	r2, r0
 80091ce:	f107 030c 	add.w	r3, r7, #12
 80091d2:	4970      	ldr	r1, [pc, #448]	; (8009394 <Print_EI_DATA+0x330>)
 80091d4:	4618      	mov	r0, r3
 80091d6:	f01d f8ab 	bl	8026330 <siprintf>
	Display(Print_buff);
 80091da:	f107 030c 	add.w	r3, r7, #12
 80091de:	4618      	mov	r0, r3
 80091e0:	f000 f8e6 	bl	80093b0 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80091e4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80091e8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	3306      	adds	r3, #6
 80091f0:	461a      	mov	r2, r3
 80091f2:	2108      	movs	r1, #8
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 fa0d 	bl	8000614 <ExtractBits>
 80091fa:	4602      	mov	r2, r0
 80091fc:	f107 030c 	add.w	r3, r7, #12
 8009200:	4965      	ldr	r1, [pc, #404]	; (8009398 <Print_EI_DATA+0x334>)
 8009202:	4618      	mov	r0, r3
 8009204:	f01d f894 	bl	8026330 <siprintf>
	Display(Print_buff);
 8009208:	f107 030c 	add.w	r3, r7, #12
 800920c:	4618      	mov	r0, r3
 800920e:	f000 f8cf 	bl	80093b0 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8009212:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009216:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	461a      	mov	r2, r3
 8009220:	2110      	movs	r1, #16
 8009222:	2000      	movs	r0, #0
 8009224:	f7f7 f9f6 	bl	8000614 <ExtractBits>
 8009228:	4603      	mov	r3, r0
 800922a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800922e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8009232:	f107 030c 	add.w	r3, r7, #12
 8009236:	4959      	ldr	r1, [pc, #356]	; (800939c <Print_EI_DATA+0x338>)
 8009238:	4618      	mov	r0, r3
 800923a:	f01d f879 	bl	8026330 <siprintf>
	Display(Print_buff);
 800923e:	f107 030c 	add.w	r3, r7, #12
 8009242:	4618      	mov	r0, r3
 8009244:	f000 f8b4 	bl	80093b0 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8009248:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800924c:	095b      	lsrs	r3, r3, #5
 800924e:	b29b      	uxth	r3, r3
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d03f      	beq.n	80092d8 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8009258:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800925c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330a      	adds	r3, #10
 8009264:	781b      	ldrb	r3, [r3, #0]
 8009266:	461d      	mov	r5, r3
 8009268:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800926c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	330b      	adds	r3, #11
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	461e      	mov	r6, r3
 8009278:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800927c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	330c      	adds	r3, #12
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800928c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	330d      	adds	r3, #13
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	4619      	mov	r1, r3
 8009298:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800929c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	330e      	adds	r3, #14
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461c      	mov	r4, r3
 80092a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80092ac:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	330f      	adds	r3, #15
 80092b4:	781b      	ldrb	r3, [r3, #0]
 80092b6:	f107 000c 	add.w	r0, r7, #12
 80092ba:	9303      	str	r3, [sp, #12]
 80092bc:	9402      	str	r4, [sp, #8]
 80092be:	9101      	str	r1, [sp, #4]
 80092c0:	9200      	str	r2, [sp, #0]
 80092c2:	4633      	mov	r3, r6
 80092c4:	462a      	mov	r2, r5
 80092c6:	4936      	ldr	r1, [pc, #216]	; (80093a0 <Print_EI_DATA+0x33c>)
 80092c8:	f01d f832 	bl	8026330 <siprintf>
		Display(Print_buff);
 80092cc:	f107 030c 	add.w	r3, r7, #12
 80092d0:	4618      	mov	r0, r3
 80092d2:	f000 f86d 	bl	80093b0 <Display>
 80092d6:	e002      	b.n	80092de <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80092d8:	4832      	ldr	r0, [pc, #200]	; (80093a4 <Print_EI_DATA+0x340>)
 80092da:	f000 f869 	bl	80093b0 <Display>
	}
	if(Debug_flag == 1)
 80092de:	4b32      	ldr	r3, [pc, #200]	; (80093a8 <Print_EI_DATA+0x344>)
 80092e0:	781b      	ldrb	r3, [r3, #0]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d139      	bne.n	800935a <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80092e6:	2300      	movs	r3, #0
 80092e8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80092ec:	e019      	b.n	8009322 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80092ee:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80092f2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80092f6:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	4413      	add	r3, r2
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	461a      	mov	r2, r3
 8009302:	f107 030c 	add.w	r3, r7, #12
 8009306:	4929      	ldr	r1, [pc, #164]	; (80093ac <Print_EI_DATA+0x348>)
 8009308:	4618      	mov	r0, r3
 800930a:	f01d f811 	bl	8026330 <siprintf>
			Display(Print_buff);
 800930e:	f107 030c 	add.w	r3, r7, #12
 8009312:	4618      	mov	r0, r3
 8009314:	f000 f84c 	bl	80093b0 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8009318:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800931c:	3301      	adds	r3, #1
 800931e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8009322:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009326:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800932a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	429a      	cmp	r2, r3
 8009332:	d3dc      	bcc.n	80092ee <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8009334:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009338:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800933c:	781b      	ldrb	r3, [r3, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d10b      	bne.n	800935a <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8009342:	f107 030c 	add.w	r3, r7, #12
 8009346:	22f6      	movs	r2, #246	; 0xf6
 8009348:	4918      	ldr	r1, [pc, #96]	; (80093ac <Print_EI_DATA+0x348>)
 800934a:	4618      	mov	r0, r3
 800934c:	f01c fff0 	bl	8026330 <siprintf>
			Display(Print_buff);
 8009350:	f107 030c 	add.w	r3, r7, #12
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f82b 	bl	80093b0 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800935a:	bf00      	nop
 800935c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8009360:	46bd      	mov	sp, r7
 8009362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009364:	08028ad0 	.word	0x08028ad0
 8009368:	08028ad4 	.word	0x08028ad4
 800936c:	08028ad8 	.word	0x08028ad8
 8009370:	08028ae0 	.word	0x08028ae0
 8009374:	08028ae8 	.word	0x08028ae8
 8009378:	08028aec 	.word	0x08028aec
 800937c:	08028af4 	.word	0x08028af4
 8009380:	08028afc 	.word	0x08028afc
 8009384:	08028b00 	.word	0x08028b00
 8009388:	08028b04 	.word	0x08028b04
 800938c:	08028b08 	.word	0x08028b08
 8009390:	08028b1c 	.word	0x08028b1c
 8009394:	08028b20 	.word	0x08028b20
 8009398:	08028b2c 	.word	0x08028b2c
 800939c:	08028b38 	.word	0x08028b38
 80093a0:	08028b44 	.word	0x08028b44
 80093a4:	08028b68 	.word	0x08028b68
 80093a8:	20000bbb 	.word	0x20000bbb
 80093ac:	08028aa8 	.word	0x08028aa8

080093b0 <Display>:

void Display(char *Data)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80093bc:	e00a      	b.n	80093d4 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80093be:	7bfb      	ldrb	r3, [r7, #15]
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	4413      	add	r3, r2
 80093c4:	781b      	ldrb	r3, [r3, #0]
 80093c6:	4619      	mov	r1, r3
 80093c8:	2000      	movs	r0, #0
 80093ca:	f00f fc8b 	bl	8018ce4 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80093ce:	7bfb      	ldrb	r3, [r7, #15]
 80093d0:	3301      	adds	r3, #1
 80093d2:	73fb      	strb	r3, [r7, #15]
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	4413      	add	r3, r2
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1ee      	bne.n	80093be <Display+0xe>
	}
}
 80093e0:	bf00      	nop
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <print_self_Details_Hitachi>:
	}

}

void print_self_Details_Hitachi(void)
{
 80093ec:	b5b0      	push	{r4, r5, r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80093f2:	2300      	movs	r3, #0
 80093f4:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 80093f6:	4890      	ldr	r0, [pc, #576]	; (8009638 <print_self_Details_Hitachi+0x24c>)
 80093f8:	f01c fe7e 	bl	80260f8 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 80093fc:	4b8f      	ldr	r3, [pc, #572]	; (800963c <print_self_Details_Hitachi+0x250>)
 80093fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009402:	4619      	mov	r1, r3
 8009404:	488e      	ldr	r0, [pc, #568]	; (8009640 <print_self_Details_Hitachi+0x254>)
 8009406:	f01c fddb 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 800940a:	4b8c      	ldr	r3, [pc, #560]	; (800963c <print_self_Details_Hitachi+0x250>)
 800940c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8009410:	4619      	mov	r1, r3
 8009412:	488c      	ldr	r0, [pc, #560]	; (8009644 <print_self_Details_Hitachi+0x258>)
 8009414:	f01c fdd4 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8009418:	4b88      	ldr	r3, [pc, #544]	; (800963c <print_self_Details_Hitachi+0x250>)
 800941a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800941e:	4619      	mov	r1, r3
 8009420:	4889      	ldr	r0, [pc, #548]	; (8009648 <print_self_Details_Hitachi+0x25c>)
 8009422:	f01c fdcd 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8009426:	4b85      	ldr	r3, [pc, #532]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009428:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800942c:	4619      	mov	r1, r3
 800942e:	4887      	ldr	r0, [pc, #540]	; (800964c <print_self_Details_Hitachi+0x260>)
 8009430:	f01c fdc6 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8009434:	4b81      	ldr	r3, [pc, #516]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009436:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800943a:	4619      	mov	r1, r3
 800943c:	4884      	ldr	r0, [pc, #528]	; (8009650 <print_self_Details_Hitachi+0x264>)
 800943e:	f01c fdbf 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009442:	4b7e      	ldr	r3, [pc, #504]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009444:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8009448:	4619      	mov	r1, r3
 800944a:	4882      	ldr	r0, [pc, #520]	; (8009654 <print_self_Details_Hitachi+0x268>)
 800944c:	f01c fdb8 	bl	8025fc0 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8009450:	4b7a      	ldr	r3, [pc, #488]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009452:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009456:	4619      	mov	r1, r3
 8009458:	4879      	ldr	r0, [pc, #484]	; (8009640 <print_self_Details_Hitachi+0x254>)
 800945a:	f01c fdb1 	bl	8025fc0 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800945e:	2300      	movs	r3, #0
 8009460:	71fb      	strb	r3, [r7, #7]
 8009462:	e03b      	b.n	80094dc <print_self_Details_Hitachi+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8009464:	79f9      	ldrb	r1, [r7, #7]
 8009466:	79fb      	ldrb	r3, [r7, #7]
 8009468:	4a74      	ldr	r2, [pc, #464]	; (800963c <print_self_Details_Hitachi+0x250>)
 800946a:	3312      	adds	r3, #18
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	4413      	add	r3, r2
 8009470:	78db      	ldrb	r3, [r3, #3]
 8009472:	461c      	mov	r4, r3
 8009474:	79fb      	ldrb	r3, [r7, #7]
 8009476:	4a71      	ldr	r2, [pc, #452]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009480:	461d      	mov	r5, r3
 8009482:	79fb      	ldrb	r3, [r7, #7]
 8009484:	4a6d      	ldr	r2, [pc, #436]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4413      	add	r3, r2
 800948a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800948e:	4618      	mov	r0, r3
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	4a6a      	ldr	r2, [pc, #424]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	4413      	add	r3, r2
 8009498:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800949c:	9301      	str	r3, [sp, #4]
 800949e:	9000      	str	r0, [sp, #0]
 80094a0:	462b      	mov	r3, r5
 80094a2:	4622      	mov	r2, r4
 80094a4:	486c      	ldr	r0, [pc, #432]	; (8009658 <print_self_Details_Hitachi+0x26c>)
 80094a6:	f01c fd8b 	bl	8025fc0 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80094aa:	79f9      	ldrb	r1, [r7, #7]
 80094ac:	79fb      	ldrb	r3, [r7, #7]
 80094ae:	4a63      	ldr	r2, [pc, #396]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094b0:	333e      	adds	r3, #62	; 0x3e
 80094b2:	009b      	lsls	r3, r3, #2
 80094b4:	4413      	add	r3, r2
 80094b6:	885b      	ldrh	r3, [r3, #2]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4868      	ldr	r0, [pc, #416]	; (800965c <print_self_Details_Hitachi+0x270>)
 80094bc:	f01c fd80 	bl	8025fc0 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80094c0:	79f9      	ldrb	r1, [r7, #7]
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	4a5d      	ldr	r2, [pc, #372]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	4413      	add	r3, r2
 80094ca:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80094ce:	461a      	mov	r2, r3
 80094d0:	4863      	ldr	r0, [pc, #396]	; (8009660 <print_self_Details_Hitachi+0x274>)
 80094d2:	f01c fd75 	bl	8025fc0 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80094d6:	79fb      	ldrb	r3, [r7, #7]
 80094d8:	3301      	adds	r3, #1
 80094da:	71fb      	strb	r3, [r7, #7]
 80094dc:	4b57      	ldr	r3, [pc, #348]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094de:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80094e2:	79fa      	ldrb	r2, [r7, #7]
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d3bd      	bcc.n	8009464 <print_self_Details_Hitachi+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80094e8:	4b54      	ldr	r3, [pc, #336]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094ea:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80094ee:	4619      	mov	r1, r3
 80094f0:	4b52      	ldr	r3, [pc, #328]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80094f6:	461a      	mov	r2, r3
 80094f8:	4b50      	ldr	r3, [pc, #320]	; (800963c <print_self_Details_Hitachi+0x250>)
 80094fa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80094fe:	4618      	mov	r0, r3
 8009500:	4b4e      	ldr	r3, [pc, #312]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009502:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009506:	9300      	str	r3, [sp, #0]
 8009508:	4603      	mov	r3, r0
 800950a:	4856      	ldr	r0, [pc, #344]	; (8009664 <print_self_Details_Hitachi+0x278>)
 800950c:	f01c fd58 	bl	8025fc0 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8009510:	4b4a      	ldr	r3, [pc, #296]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009512:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009516:	4618      	mov	r0, r3
 8009518:	4b48      	ldr	r3, [pc, #288]	; (800963c <print_self_Details_Hitachi+0x250>)
 800951a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800951e:	461c      	mov	r4, r3
 8009520:	4b46      	ldr	r3, [pc, #280]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009522:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009526:	461d      	mov	r5, r3
 8009528:	4b44      	ldr	r3, [pc, #272]	; (800963c <print_self_Details_Hitachi+0x250>)
 800952a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800952e:	461a      	mov	r2, r3
 8009530:	4b42      	ldr	r3, [pc, #264]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009532:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009536:	4619      	mov	r1, r3
 8009538:	4b40      	ldr	r3, [pc, #256]	; (800963c <print_self_Details_Hitachi+0x250>)
 800953a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800953e:	9302      	str	r3, [sp, #8]
 8009540:	9101      	str	r1, [sp, #4]
 8009542:	9200      	str	r2, [sp, #0]
 8009544:	462b      	mov	r3, r5
 8009546:	4622      	mov	r2, r4
 8009548:	4601      	mov	r1, r0
 800954a:	4847      	ldr	r0, [pc, #284]	; (8009668 <print_self_Details_Hitachi+0x27c>)
 800954c:	f01c fd38 	bl	8025fc0 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8009550:	4b3a      	ldr	r3, [pc, #232]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009552:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8009556:	4619      	mov	r1, r3
 8009558:	4844      	ldr	r0, [pc, #272]	; (800966c <print_self_Details_Hitachi+0x280>)
 800955a:	f01c fd31 	bl	8025fc0 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800955e:	2300      	movs	r3, #0
 8009560:	71fb      	strb	r3, [r7, #7]
 8009562:	e05c      	b.n	800961e <print_self_Details_Hitachi+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8009564:	79fb      	ldrb	r3, [r7, #7]
 8009566:	3301      	adds	r3, #1
 8009568:	4619      	mov	r1, r3
 800956a:	4841      	ldr	r0, [pc, #260]	; (8009670 <print_self_Details_Hitachi+0x284>)
 800956c:	f01c fd28 	bl	8025fc0 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	4a32      	ldr	r2, [pc, #200]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009574:	3366      	adds	r3, #102	; 0x66
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	4619      	mov	r1, r3
 800957e:	483d      	ldr	r0, [pc, #244]	; (8009674 <print_self_Details_Hitachi+0x288>)
 8009580:	f01c fd1e 	bl	8025fc0 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	4a2d      	ldr	r2, [pc, #180]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009588:	3370      	adds	r3, #112	; 0x70
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	4413      	add	r3, r2
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	4839      	ldr	r0, [pc, #228]	; (8009678 <print_self_Details_Hitachi+0x28c>)
 8009594:	f01c fd14 	bl	8025fc0 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	4a28      	ldr	r2, [pc, #160]	; (800963c <print_self_Details_Hitachi+0x250>)
 800959c:	33f4      	adds	r3, #244	; 0xf4
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	4413      	add	r3, r2
 80095a2:	889b      	ldrh	r3, [r3, #4]
 80095a4:	4619      	mov	r1, r3
 80095a6:	4835      	ldr	r0, [pc, #212]	; (800967c <print_self_Details_Hitachi+0x290>)
 80095a8:	f01c fd0a 	bl	8025fc0 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80095ac:	79fb      	ldrb	r3, [r7, #7]
 80095ae:	4a23      	ldr	r2, [pc, #140]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095b0:	4413      	add	r3, r2
 80095b2:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80095b6:	4619      	mov	r1, r3
 80095b8:	4831      	ldr	r0, [pc, #196]	; (8009680 <print_self_Details_Hitachi+0x294>)
 80095ba:	f01c fd01 	bl	8025fc0 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	4a1e      	ldr	r2, [pc, #120]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095c2:	4413      	add	r3, r2
 80095c4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80095c8:	4619      	mov	r1, r3
 80095ca:	482e      	ldr	r0, [pc, #184]	; (8009684 <print_self_Details_Hitachi+0x298>)
 80095cc:	f01c fcf8 	bl	8025fc0 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	4a1a      	ldr	r2, [pc, #104]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095d4:	4413      	add	r3, r2
 80095d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095da:	4619      	mov	r1, r3
 80095dc:	482a      	ldr	r0, [pc, #168]	; (8009688 <print_self_Details_Hitachi+0x29c>)
 80095de:	f01c fcef 	bl	8025fc0 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80095e2:	79fb      	ldrb	r3, [r7, #7]
 80095e4:	4a15      	ldr	r2, [pc, #84]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095e6:	338a      	adds	r3, #138	; 0x8a
 80095e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095ec:	4619      	mov	r1, r3
 80095ee:	4827      	ldr	r0, [pc, #156]	; (800968c <print_self_Details_Hitachi+0x2a0>)
 80095f0:	f01c fce6 	bl	8025fc0 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	4a11      	ldr	r2, [pc, #68]	; (800963c <print_self_Details_Hitachi+0x250>)
 80095f8:	3394      	adds	r3, #148	; 0x94
 80095fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095fe:	4619      	mov	r1, r3
 8009600:	4823      	ldr	r0, [pc, #140]	; (8009690 <print_self_Details_Hitachi+0x2a4>)
 8009602:	f01c fcdd 	bl	8025fc0 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8009606:	79fb      	ldrb	r3, [r7, #7]
 8009608:	4a0c      	ldr	r2, [pc, #48]	; (800963c <print_self_Details_Hitachi+0x250>)
 800960a:	339e      	adds	r3, #158	; 0x9e
 800960c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009610:	4619      	mov	r1, r3
 8009612:	4820      	ldr	r0, [pc, #128]	; (8009694 <print_self_Details_Hitachi+0x2a8>)
 8009614:	f01c fcd4 	bl	8025fc0 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009618:	79fb      	ldrb	r3, [r7, #7]
 800961a:	3301      	adds	r3, #1
 800961c:	71fb      	strb	r3, [r7, #7]
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <print_self_Details_Hitachi+0x250>)
 8009620:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009624:	79fa      	ldrb	r2, [r7, #7]
 8009626:	429a      	cmp	r2, r3
 8009628:	d39c      	bcc.n	8009564 <print_self_Details_Hitachi+0x178>

	}

#ifdef EI_1
	printf("\n______________________________ EI_1_SELF_DETAILS ______________________________\n");
 800962a:	4803      	ldr	r0, [pc, #12]	; (8009638 <print_self_Details_Hitachi+0x24c>)
 800962c:	f01c fd64 	bl	80260f8 <puts>
#endif
#ifdef EI_2
	printf("\n______________________________ EI_2_SELF_DETAILS ______________________________\n");
#endif
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bdb0      	pop	{r4, r5, r7, pc}
 8009638:	08028bdc 	.word	0x08028bdc
 800963c:	20000504 	.word	0x20000504
 8009640:	08028c30 	.word	0x08028c30
 8009644:	08028c54 	.word	0x08028c54
 8009648:	08028c78 	.word	0x08028c78
 800964c:	08028ca4 	.word	0x08028ca4
 8009650:	08028cd0 	.word	0x08028cd0
 8009654:	08028cfc 	.word	0x08028cfc
 8009658:	08028d28 	.word	0x08028d28
 800965c:	08028d48 	.word	0x08028d48
 8009660:	08028d58 	.word	0x08028d58
 8009664:	08028d68 	.word	0x08028d68
 8009668:	08028d84 	.word	0x08028d84
 800966c:	08028db4 	.word	0x08028db4
 8009670:	08028dc8 	.word	0x08028dc8
 8009674:	08028ddc 	.word	0x08028ddc
 8009678:	08028df8 	.word	0x08028df8
 800967c:	08028e14 	.word	0x08028e14
 8009680:	08028e30 	.word	0x08028e30
 8009684:	08028e48 	.word	0x08028e48
 8009688:	08028e5c 	.word	0x08028e5c
 800968c:	08028e70 	.word	0x08028e70
 8009690:	08028e8c 	.word	0x08028e8c
 8009694:	08028ea8 	.word	0x08028ea8

08009698 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 800969e:	2300      	movs	r3, #0
 80096a0:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80096a2:	2300      	movs	r3, #0
 80096a4:	71fb      	strb	r3, [r7, #7]
 80096a6:	e054      	b.n	8009752 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	4a2f      	ldr	r2, [pc, #188]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 80096ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d04b      	beq.n	800974c <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 80096b4:	79fb      	ldrb	r3, [r7, #7]
 80096b6:	4a2c      	ldr	r2, [pc, #176]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 80096b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096bc:	4618      	mov	r0, r3
 80096be:	f006 fe9b 	bl	80103f8 <HAL_Elaps_Ticks>
 80096c2:	4602      	mov	r2, r0
 80096c4:	79fb      	ldrb	r3, [r7, #7]
 80096c6:	4929      	ldr	r1, [pc, #164]	; (800976c <Send_Init_After_Timeout+0xd4>)
 80096c8:	3394      	adds	r3, #148	; 0x94
 80096ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d93c      	bls.n	800974c <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	4a26      	ldr	r2, [pc, #152]	; (8009770 <Send_Init_After_Timeout+0xd8>)
 80096d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096da:	4618      	mov	r0, r3
 80096dc:	f006 fe8c 	bl	80103f8 <HAL_Elaps_Ticks>
 80096e0:	4602      	mov	r2, r0
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	4921      	ldr	r1, [pc, #132]	; (800976c <Send_Init_After_Timeout+0xd4>)
 80096e6:	3394      	adds	r3, #148	; 0x94
 80096e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d92d      	bls.n	800974c <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 80096f0:	79fb      	ldrb	r3, [r7, #7]
 80096f2:	4a20      	ldr	r2, [pc, #128]	; (8009774 <Send_Init_After_Timeout+0xdc>)
 80096f4:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d028      	beq.n	800974c <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 80096fa:	79fb      	ldrb	r3, [r7, #7]
 80096fc:	4a1e      	ldr	r2, [pc, #120]	; (8009778 <Send_Init_After_Timeout+0xe0>)
 80096fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8009702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009706:	d921      	bls.n	800974c <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	4a17      	ldr	r2, [pc, #92]	; (8009768 <Send_Init_After_Timeout+0xd0>)
 800970c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009710:	4618      	mov	r0, r3
 8009712:	f006 fe71 	bl	80103f8 <HAL_Elaps_Ticks>
 8009716:	4603      	mov	r3, r0
 8009718:	4a18      	ldr	r2, [pc, #96]	; (800977c <Send_Init_After_Timeout+0xe4>)
 800971a:	fba2 2303 	umull	r2, r3, r2, r3
 800971e:	099b      	lsrs	r3, r3, #6
 8009720:	4619      	mov	r1, r3
 8009722:	4817      	ldr	r0, [pc, #92]	; (8009780 <Send_Init_After_Timeout+0xe8>)
 8009724:	f01c fc4c 	bl	8025fc0 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8009728:	79fb      	ldrb	r3, [r7, #7]
 800972a:	4a16      	ldr	r2, [pc, #88]	; (8009784 <Send_Init_After_Timeout+0xec>)
 800972c:	2101      	movs	r1, #1
 800972e:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8009730:	79fa      	ldrb	r2, [r7, #7]
 8009732:	79fb      	ldrb	r3, [r7, #7]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7f9 f950 	bl	80029dc <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 800973c:	79fb      	ldrb	r3, [r7, #7]
 800973e:	4a0d      	ldr	r2, [pc, #52]	; (8009774 <Send_Init_After_Timeout+0xdc>)
 8009740:	2101      	movs	r1, #1
 8009742:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8009744:	79fb      	ldrb	r3, [r7, #7]
 8009746:	4a10      	ldr	r2, [pc, #64]	; (8009788 <Send_Init_After_Timeout+0xf0>)
 8009748:	2101      	movs	r1, #1
 800974a:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800974c:	79fb      	ldrb	r3, [r7, #7]
 800974e:	3301      	adds	r3, #1
 8009750:	71fb      	strb	r3, [r7, #7]
 8009752:	4b06      	ldr	r3, [pc, #24]	; (800976c <Send_Init_After_Timeout+0xd4>)
 8009754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009758:	79fa      	ldrb	r2, [r7, #7]
 800975a:	429a      	cmp	r2, r3
 800975c:	d3a4      	bcc.n	80096a8 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 800975e:	bf00      	nop
 8009760:	bf00      	nop
 8009762:	3708      	adds	r7, #8
 8009764:	46bd      	mov	sp, r7
 8009766:	bd80      	pop	{r7, pc}
 8009768:	20002630 	.word	0x20002630
 800976c:	20000504 	.word	0x20000504
 8009770:	20002510 	.word	0x20002510
 8009774:	20002718 	.word	0x20002718
 8009778:	20002724 	.word	0x20002724
 800977c:	10624dd3 	.word	0x10624dd3
 8009780:	08028ec4 	.word	0x08028ec4
 8009784:	20002758 	.word	0x20002758
 8009788:	2000274c 	.word	0x2000274c

0800978c <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8009792:	2300      	movs	r3, #0
 8009794:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009796:	e037      	b.n	8009808 <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8009798:	79fa      	ldrb	r2, [r7, #7]
 800979a:	4921      	ldr	r1, [pc, #132]	; (8009820 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 800979c:	4613      	mov	r3, r2
 800979e:	005b      	lsls	r3, r3, #1
 80097a0:	4413      	add	r3, r2
 80097a2:	00db      	lsls	r3, r3, #3
 80097a4:	440b      	add	r3, r1
 80097a6:	3304      	adds	r3, #4
 80097a8:	781b      	ldrb	r3, [r3, #0]
		if(
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d006      	beq.n	80097bc <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80097ae:	79fb      	ldrb	r3, [r7, #7]
 80097b0:	4a1c      	ldr	r2, [pc, #112]	; (8009824 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80097b2:	4413      	add	r3, r2
 80097b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097b8:	2b02      	cmp	r3, #2
 80097ba:	d122      	bne.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80097bc:	79fb      	ldrb	r3, [r7, #7]
 80097be:	4a1a      	ldr	r2, [pc, #104]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097c0:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d11d      	bne.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 50 )
 80097c6:	79fb      	ldrb	r3, [r7, #7]
 80097c8:	4a17      	ldr	r2, [pc, #92]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097ca:	3302      	adds	r3, #2
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f006 fe10 	bl	80103f8 <HAL_Elaps_Ticks>
 80097d8:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 80097da:	2b32      	cmp	r3, #50	; 0x32
 80097dc:	d911      	bls.n	8009802 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 80097de:	79fa      	ldrb	r2, [r7, #7]
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	4611      	mov	r1, r2
 80097e4:	4618      	mov	r0, r3
 80097e6:	f7fa ff07 	bl	80045f8 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = RESET;
 80097ea:	79fb      	ldrb	r3, [r7, #7]
 80097ec:	4a0e      	ldr	r2, [pc, #56]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097ee:	2100      	movs	r1, #0
 80097f0:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 80097f2:	79fb      	ldrb	r3, [r7, #7]
 80097f4:	4a0c      	ldr	r2, [pc, #48]	; (8009828 <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 80097f6:	3302      	adds	r3, #2
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	4413      	add	r3, r2
 80097fc:	f04f 32ff 	mov.w	r2, #4294967295
 8009800:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009802:	79fb      	ldrb	r3, [r7, #7]
 8009804:	3301      	adds	r3, #1
 8009806:	71fb      	strb	r3, [r7, #7]
 8009808:	4b06      	ldr	r3, [pc, #24]	; (8009824 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800980a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800980e:	79fa      	ldrb	r2, [r7, #7]
 8009810:	429a      	cmp	r2, r3
 8009812:	d3c1      	bcc.n	8009798 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		//			Send_Vital_Data_Message(Traverser, Traverser);
		//			Send_Vital_MSG_st.flag[Traverser] = RESET;
		//			Send_Vital_MSG_st.Clk[Traverser] = -1;
		//		}
	}
}
 8009814:	bf00      	nop
 8009816:	bf00      	nop
 8009818:	3708      	adds	r7, #8
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	20002da4 	.word	0x20002da4
 8009824:	20000504 	.word	0x20000504
 8009828:	200033ac 	.word	0x200033ac

0800982c <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009832:	2300      	movs	r3, #0
 8009834:	71fb      	strb	r3, [r7, #7]
 8009836:	e04e      	b.n	80098d6 <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8009838:	79fb      	ldrb	r3, [r7, #7]
 800983a:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 800983c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d045      	beq.n	80098d0 <Check_Recv_Status_fail+0xa4>
 8009844:	79fa      	ldrb	r2, [r7, #7]
 8009846:	492a      	ldr	r1, [pc, #168]	; (80098f0 <Check_Recv_Status_fail+0xc4>)
 8009848:	4613      	mov	r3, r2
 800984a:	005b      	lsls	r3, r3, #1
 800984c:	4413      	add	r3, r2
 800984e:	00db      	lsls	r3, r3, #3
 8009850:	440b      	add	r3, r1
 8009852:	3303      	adds	r3, #3
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d03a      	beq.n	80098d0 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800985a:	79fb      	ldrb	r3, [r7, #7]
 800985c:	4a23      	ldr	r2, [pc, #140]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 800985e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009862:	4618      	mov	r0, r3
 8009864:	f006 fdc8 	bl	80103f8 <HAL_Elaps_Ticks>
 8009868:	4602      	mov	r2, r0
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	4921      	ldr	r1, [pc, #132]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 800986e:	338a      	adds	r3, #138	; 0x8a
 8009870:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009874:	429a      	cmp	r2, r3
 8009876:	d92b      	bls.n	80098d0 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 800987c:	3366      	adds	r3, #102	; 0x66
 800987e:	009b      	lsls	r3, r3, #2
 8009880:	4413      	add	r3, r2
 8009882:	6859      	ldr	r1, [r3, #4]
 8009884:	79fb      	ldrb	r3, [r7, #7]
 8009886:	4a1b      	ldr	r2, [pc, #108]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 8009888:	338a      	adds	r3, #138	; 0x8a
 800988a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800988e:	4a1a      	ldr	r2, [pc, #104]	; (80098f8 <Check_Recv_Status_fail+0xcc>)
 8009890:	fba2 2303 	umull	r2, r3, r2, r3
 8009894:	099b      	lsrs	r3, r3, #6
 8009896:	461a      	mov	r2, r3
 8009898:	4818      	ldr	r0, [pc, #96]	; (80098fc <Check_Recv_Status_fail+0xd0>)
 800989a:	f01c fb91 	bl	8025fc0 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	4a12      	ldr	r2, [pc, #72]	; (80098ec <Check_Recv_Status_fail+0xc0>)
 80098a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80098a6:	4619      	mov	r1, r3
 80098a8:	4815      	ldr	r0, [pc, #84]	; (8009900 <Check_Recv_Status_fail+0xd4>)
 80098aa:	f01c fb89 	bl	8025fc0 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80098ae:	f00f fc71 	bl	8019194 <HAL_GetTick>
 80098b2:	4603      	mov	r3, r0
 80098b4:	4619      	mov	r1, r3
 80098b6:	4813      	ldr	r0, [pc, #76]	; (8009904 <Check_Recv_Status_fail+0xd8>)
 80098b8:	f01c fb82 	bl	8025fc0 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 80098bc:	79fa      	ldrb	r2, [r7, #7]
 80098be:	490c      	ldr	r1, [pc, #48]	; (80098f0 <Check_Recv_Status_fail+0xc4>)
 80098c0:	4613      	mov	r3, r2
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	4413      	add	r3, r2
 80098c6:	00db      	lsls	r3, r3, #3
 80098c8:	440b      	add	r3, r1
 80098ca:	3303      	adds	r3, #3
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80098d0:	79fb      	ldrb	r3, [r7, #7]
 80098d2:	3301      	adds	r3, #1
 80098d4:	71fb      	strb	r3, [r7, #7]
 80098d6:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <Check_Recv_Status_fail+0xc8>)
 80098d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098dc:	79fa      	ldrb	r2, [r7, #7]
 80098de:	429a      	cmp	r2, r3
 80098e0:	d3aa      	bcc.n	8009838 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3708      	adds	r7, #8
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	20002658 	.word	0x20002658
 80098f0:	20002da4 	.word	0x20002da4
 80098f4:	20000504 	.word	0x20000504
 80098f8:	10624dd3 	.word	0x10624dd3
 80098fc:	08028ef0 	.word	0x08028ef0
 8009900:	08028f24 	.word	0x08028f24
 8009904:	08028f54 	.word	0x08028f54

08009908 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8009908:	b590      	push	{r4, r7, lr}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8009916:	2300      	movs	r3, #0
 8009918:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800991a:	2301      	movs	r3, #1
 800991c:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 800991e:	79fb      	ldrb	r3, [r7, #7]
 8009920:	4a39      	ldr	r2, [pc, #228]	; (8009a08 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8009922:	4413      	add	r3, r2
 8009924:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8009928:	2b01      	cmp	r3, #1
 800992a:	d168      	bne.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 800992c:	4b37      	ldr	r3, [pc, #220]	; (8009a0c <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b01      	cmp	r3, #1
 8009932:	d164      	bne.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8009934:	79fa      	ldrb	r2, [r7, #7]
 8009936:	4936      	ldr	r1, [pc, #216]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009938:	4613      	mov	r3, r2
 800993a:	005b      	lsls	r3, r3, #1
 800993c:	4413      	add	r3, r2
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	440b      	add	r3, r1
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	4618      	mov	r0, r3
 8009946:	f002 ffd5 	bl	800c8f4 <bcdToDec>
 800994a:	4603      	mov	r3, r0
 800994c:	461a      	mov	r2, r3
 800994e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8009952:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8009956:	79fa      	ldrb	r2, [r7, #7]
 8009958:	492d      	ldr	r1, [pc, #180]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800995a:	4613      	mov	r3, r2
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	4413      	add	r3, r2
 8009960:	005b      	lsls	r3, r3, #1
 8009962:	440b      	add	r3, r1
 8009964:	3301      	adds	r3, #1
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4618      	mov	r0, r3
 800996a:	f002 ffc3 	bl	800c8f4 <bcdToDec>
 800996e:	4603      	mov	r3, r0
 8009970:	461a      	mov	r2, r3
 8009972:	4613      	mov	r3, r2
 8009974:	011b      	lsls	r3, r3, #4
 8009976:	1a9b      	subs	r3, r3, r2
 8009978:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800997a:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 800997c:	79fa      	ldrb	r2, [r7, #7]
 800997e:	4924      	ldr	r1, [pc, #144]	; (8009a10 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8009980:	4613      	mov	r3, r2
 8009982:	005b      	lsls	r3, r3, #1
 8009984:	4413      	add	r3, r2
 8009986:	005b      	lsls	r3, r3, #1
 8009988:	440b      	add	r3, r1
 800998a:	3302      	adds	r3, #2
 800998c:	781b      	ldrb	r3, [r3, #0]
 800998e:	4618      	mov	r0, r3
 8009990:	f002 ffb0 	bl	800c8f4 <bcdToDec>
 8009994:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8009996:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8009998:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 800999a:	613b      	str	r3, [r7, #16]

		Get_time();
 800999c:	f003 f8a6 	bl	800caec <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099a0:	4b1c      	ldr	r3, [pc, #112]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	461a      	mov	r2, r3
 80099a6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80099aa:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80099ae:	4b19      	ldr	r3, [pc, #100]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099b0:	785b      	ldrb	r3, [r3, #1]
 80099b2:	4619      	mov	r1, r3
 80099b4:	460b      	mov	r3, r1
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	1a5b      	subs	r3, r3, r1
 80099ba:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099bc:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80099be:	4a15      	ldr	r2, [pc, #84]	; (8009a14 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80099c0:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 80099c2:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 80099c4:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80099c6:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 80099c8:	693a      	ldr	r2, [r7, #16]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	1ad3      	subs	r3, r2, r3
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	bfb8      	it	lt
 80099d2:	425b      	neglt	r3, r3
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	dd12      	ble.n	80099fe <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80099d8:	693a      	ldr	r2, [r7, #16]
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	1ad3      	subs	r3, r2, r3
 80099de:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 80099e2:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80099e6:	79fb      	ldrb	r3, [r7, #7]
 80099e8:	4a07      	ldr	r2, [pc, #28]	; (8009a08 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 80099ea:	3366      	adds	r3, #102	; 0x66
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	461a      	mov	r2, r3
 80099f4:	4808      	ldr	r0, [pc, #32]	; (8009a18 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 80099f6:	f01c fae3 	bl	8025fc0 <iprintf>
			Return_Value  = 0;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 80099fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a00:	4618      	mov	r0, r3
 8009a02:	371c      	adds	r7, #28
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd90      	pop	{r4, r7, pc}
 8009a08:	20000504 	.word	0x20000504
 8009a0c:	200024e0 	.word	0x200024e0
 8009a10:	200028b8 	.word	0x200028b8
 8009a14:	20003fc4 	.word	0x20003fc4
 8009a18:	08028f60 	.word	0x08028f60

08009a1c <Check_All_Peers>:

void Check_All_Peers(void)
{
 8009a1c:	b590      	push	{r4, r7, lr}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009a22:	2300      	movs	r3, #0
 8009a24:	71fb      	strb	r3, [r7, #7]
 8009a26:	e045      	b.n	8009ab4 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7fe fd36 	bl	800849c <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8009a30:	79fa      	ldrb	r2, [r7, #7]
 8009a32:	4926      	ldr	r1, [pc, #152]	; (8009acc <Check_All_Peers+0xb0>)
 8009a34:	4613      	mov	r3, r2
 8009a36:	005b      	lsls	r3, r3, #1
 8009a38:	4413      	add	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3304      	adds	r3, #4
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4618      	mov	r0, r3
 8009a44:	f006 fcd8 	bl	80103f8 <HAL_Elaps_Ticks>
 8009a48:	4602      	mov	r2, r0
 8009a4a:	79fb      	ldrb	r3, [r7, #7]
 8009a4c:	4920      	ldr	r1, [pc, #128]	; (8009ad0 <Check_All_Peers+0xb4>)
 8009a4e:	338a      	adds	r3, #138	; 0x8a
 8009a50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d92a      	bls.n	8009aae <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8009a58:	79fa      	ldrb	r2, [r7, #7]
 8009a5a:	491c      	ldr	r1, [pc, #112]	; (8009acc <Check_All_Peers+0xb0>)
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	005b      	lsls	r3, r3, #1
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	3301      	adds	r3, #1
 8009a68:	781b      	ldrb	r3, [r3, #0]
 8009a6a:	2b01      	cmp	r3, #1
 8009a6c:	d11f      	bne.n	8009aae <Check_All_Peers+0x92>
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	4a18      	ldr	r2, [pc, #96]	; (8009ad4 <Check_All_Peers+0xb8>)
 8009a72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a76:	79fa      	ldrb	r2, [r7, #7]
 8009a78:	4814      	ldr	r0, [pc, #80]	; (8009acc <Check_All_Peers+0xb0>)
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	4413      	add	r3, r2
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	4403      	add	r3, r0
 8009a84:	3304      	adds	r3, #4
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4299      	cmp	r1, r3
 8009a8a:	d010      	beq.n	8009aae <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = RESET;
 8009a8c:	79fa      	ldrb	r2, [r7, #7]
 8009a8e:	490f      	ldr	r1, [pc, #60]	; (8009acc <Check_All_Peers+0xb0>)
 8009a90:	4613      	mov	r3, r2
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	4413      	add	r3, r2
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	440b      	add	r3, r1
 8009a9a:	3301      	adds	r3, #1
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8009aa0:	79fc      	ldrb	r4, [r7, #7]
 8009aa2:	f00f fb77 	bl	8019194 <HAL_GetTick>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4a0a      	ldr	r2, [pc, #40]	; (8009ad4 <Check_All_Peers+0xb8>)
 8009aaa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	71fb      	strb	r3, [r7, #7]
 8009ab4:	4b06      	ldr	r3, [pc, #24]	; (8009ad0 <Check_All_Peers+0xb4>)
 8009ab6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aba:	79fa      	ldrb	r2, [r7, #7]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d3b3      	bcc.n	8009a28 <Check_All_Peers+0xc>
			}
		}
	}
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd90      	pop	{r4, r7, pc}
 8009aca:	bf00      	nop
 8009acc:	200033e0 	.word	0x200033e0
 8009ad0:	20000504 	.word	0x20000504
 8009ad4:	20003838 	.word	0x20003838

08009ad8 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8009ad8:	b590      	push	{r4, r7, lr}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009ade:	4976      	ldr	r1, [pc, #472]	; (8009cb8 <Check_for_RelayMisMatch+0x1e0>)
 8009ae0:	4876      	ldr	r0, [pc, #472]	; (8009cbc <Check_for_RelayMisMatch+0x1e4>)
 8009ae2:	f7f6 fbad 	bl	8000240 <strcmp>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80e0 	beq.w	8009cae <Check_for_RelayMisMatch+0x1d6>
	{
		return;
	}

	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009aee:	2300      	movs	r3, #0
 8009af0:	71fb      	strb	r3, [r7, #7]
 8009af2:	e0d4      	b.n	8009c9e <Check_for_RelayMisMatch+0x1c6>
	{
		if(EI_data.Hitachi_st.Interface_Type[Traverser] == ETHERNET)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	4a72      	ldr	r2, [pc, #456]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009af8:	4413      	add	r3, r2
 8009afa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009afe:	2b01      	cmp	r3, #1
 8009b00:	f000 80c7 	beq.w	8009c92 <Check_for_RelayMisMatch+0x1ba>
		{
			continue;
		}

		if((HAL_Elaps_Ticks(Check_Clk[Traverser]) < FIVE_SEC ) || (MisMatchFlag[Traverser] == SET))
 8009b04:	79fb      	ldrb	r3, [r7, #7]
 8009b06:	4a6f      	ldr	r2, [pc, #444]	; (8009cc4 <Check_for_RelayMisMatch+0x1ec>)
 8009b08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f006 fc73 	bl	80103f8 <HAL_Elaps_Ticks>
 8009b12:	4603      	mov	r3, r0
 8009b14:	f241 3287 	movw	r2, #4999	; 0x1387
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d906      	bls.n	8009b2a <Check_for_RelayMisMatch+0x52>
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	4a6a      	ldr	r2, [pc, #424]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009b24:	2b01      	cmp	r3, #1
 8009b26:	f040 80ac 	bne.w	8009c82 <Check_for_RelayMisMatch+0x1aa>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (SelfLinkFlag[Traverser] == RESET))
 8009b2a:	79fb      	ldrb	r3, [r7, #7]
 8009b2c:	4a67      	ldr	r2, [pc, #412]	; (8009ccc <Check_for_RelayMisMatch+0x1f4>)
 8009b2e:	5cd3      	ldrb	r3, [r2, r3]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d116      	bne.n	8009b62 <Check_for_RelayMisMatch+0x8a>
 8009b34:	79fb      	ldrb	r3, [r7, #7]
 8009b36:	4a66      	ldr	r2, [pc, #408]	; (8009cd0 <Check_for_RelayMisMatch+0x1f8>)
 8009b38:	5cd3      	ldrb	r3, [r2, r3]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d111      	bne.n	8009b62 <Check_for_RelayMisMatch+0x8a>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8009b3e:	79fa      	ldrb	r2, [r7, #7]
 8009b40:	4613      	mov	r3, r2
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	4a62      	ldr	r2, [pc, #392]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009b4a:	1898      	adds	r0, r3, r2
 8009b4c:	79fa      	ldrb	r2, [r7, #7]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	009b      	lsls	r3, r3, #2
 8009b52:	4413      	add	r3, r2
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4a60      	ldr	r2, [pc, #384]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	2214      	movs	r2, #20
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	f01c f91f 	bl	8025da0 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8009b62:	79fa      	ldrb	r2, [r7, #7]
 8009b64:	495b      	ldr	r1, [pc, #364]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009b66:	4613      	mov	r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	4413      	add	r3, r2
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	440b      	add	r3, r1
 8009b70:	3312      	adds	r3, #18
 8009b72:	8819      	ldrh	r1, [r3, #0]
 8009b74:	79fa      	ldrb	r2, [r7, #7]
 8009b76:	4858      	ldr	r0, [pc, #352]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	4403      	add	r3, r0
 8009b82:	3312      	adds	r3, #18
 8009b84:	881b      	ldrh	r3, [r3, #0]
 8009b86:	4299      	cmp	r1, r3
 8009b88:	d076      	beq.n	8009c78 <Check_for_RelayMisMatch+0x1a0>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8009b8a:	79fb      	ldrb	r3, [r7, #7]
 8009b8c:	4a53      	ldr	r2, [pc, #332]	; (8009cdc <Check_for_RelayMisMatch+0x204>)
 8009b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b92:	4618      	mov	r0, r3
 8009b94:	f006 fc30 	bl	80103f8 <HAL_Elaps_Ticks>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b9e:	d37a      	bcc.n	8009c96 <Check_for_RelayMisMatch+0x1be>
				{
					continue;
				}
				else
				{
					MisMatchFlag[Traverser] = SET;
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	4a49      	ldr	r2, [pc, #292]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009ba4:	2101      	movs	r1, #1
 8009ba6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					if( ((Main_Relays_st[Traverser].RelayIPS_CRC == 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC != 0)) || ((Main_Relays_st[Traverser].RelayIPS_CRC != 0) && (OtherCard_Relays_st[Traverser].RelayIPS_CRC == 0)) )
 8009baa:	79fa      	ldrb	r2, [r7, #7]
 8009bac:	4949      	ldr	r1, [pc, #292]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009bae:	4613      	mov	r3, r2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	009b      	lsls	r3, r3, #2
 8009bb6:	440b      	add	r3, r1
 8009bb8:	3312      	adds	r3, #18
 8009bba:	881b      	ldrh	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10a      	bne.n	8009bd6 <Check_for_RelayMisMatch+0xfe>
 8009bc0:	79fa      	ldrb	r2, [r7, #7]
 8009bc2:	4945      	ldr	r1, [pc, #276]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009bc4:	4613      	mov	r3, r2
 8009bc6:	009b      	lsls	r3, r3, #2
 8009bc8:	4413      	add	r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	440b      	add	r3, r1
 8009bce:	3312      	adds	r3, #18
 8009bd0:	881b      	ldrh	r3, [r3, #0]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d115      	bne.n	8009c02 <Check_for_RelayMisMatch+0x12a>
 8009bd6:	79fa      	ldrb	r2, [r7, #7]
 8009bd8:	493e      	ldr	r1, [pc, #248]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009bda:	4613      	mov	r3, r2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	440b      	add	r3, r1
 8009be4:	3312      	adds	r3, #18
 8009be6:	881b      	ldrh	r3, [r3, #0]
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00f      	beq.n	8009c0c <Check_for_RelayMisMatch+0x134>
 8009bec:	79fa      	ldrb	r2, [r7, #7]
 8009bee:	493a      	ldr	r1, [pc, #232]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009bf0:	4613      	mov	r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	4413      	add	r3, r2
 8009bf6:	009b      	lsls	r3, r3, #2
 8009bf8:	440b      	add	r3, r1
 8009bfa:	3312      	adds	r3, #18
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d104      	bne.n	8009c0c <Check_for_RelayMisMatch+0x134>
					{
						MisMatchFlag[Traverser] = RESET;
 8009c02:	79fb      	ldrb	r3, [r7, #7]
 8009c04:	4a30      	ldr	r2, [pc, #192]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c06:	2100      	movs	r1, #0
 8009c08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					}
					if(MisMatchFlag[Traverser] ==  SET)
 8009c0c:	79fb      	ldrb	r3, [r7, #7]
 8009c0e:	4a2e      	ldr	r2, [pc, #184]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d134      	bne.n	8009c82 <Check_for_RelayMisMatch+0x1aa>
					{
						printf("S:%u|O:%u\n",SelfLinkFlag[Traverser],OtherCardLink_Flag[Traverser]);
 8009c18:	79fb      	ldrb	r3, [r7, #7]
 8009c1a:	4a2d      	ldr	r2, [pc, #180]	; (8009cd0 <Check_for_RelayMisMatch+0x1f8>)
 8009c1c:	5cd3      	ldrb	r3, [r2, r3]
 8009c1e:	4619      	mov	r1, r3
 8009c20:	79fb      	ldrb	r3, [r7, #7]
 8009c22:	4a2a      	ldr	r2, [pc, #168]	; (8009ccc <Check_for_RelayMisMatch+0x1f4>)
 8009c24:	5cd3      	ldrb	r3, [r2, r3]
 8009c26:	461a      	mov	r2, r3
 8009c28:	482d      	ldr	r0, [pc, #180]	; (8009ce0 <Check_for_RelayMisMatch+0x208>)
 8009c2a:	f01c f9c9 	bl	8025fc0 <iprintf>
						printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8009c2e:	79fb      	ldrb	r3, [r7, #7]
 8009c30:	4a23      	ldr	r2, [pc, #140]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009c32:	3366      	adds	r3, #102	; 0x66
 8009c34:	009b      	lsls	r3, r3, #2
 8009c36:	4413      	add	r3, r2
 8009c38:	685b      	ldr	r3, [r3, #4]
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	4829      	ldr	r0, [pc, #164]	; (8009ce4 <Check_for_RelayMisMatch+0x20c>)
 8009c3e:	f01c f9bf 	bl	8025fc0 <iprintf>
						printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8009c42:	79fa      	ldrb	r2, [r7, #7]
 8009c44:	4923      	ldr	r1, [pc, #140]	; (8009cd4 <Check_for_RelayMisMatch+0x1fc>)
 8009c46:	4613      	mov	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	009b      	lsls	r3, r3, #2
 8009c4e:	440b      	add	r3, r1
 8009c50:	3312      	adds	r3, #18
 8009c52:	881b      	ldrh	r3, [r3, #0]
 8009c54:	4619      	mov	r1, r3
 8009c56:	4824      	ldr	r0, [pc, #144]	; (8009ce8 <Check_for_RelayMisMatch+0x210>)
 8009c58:	f01c f9b2 	bl	8025fc0 <iprintf>
						printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8009c5c:	79fa      	ldrb	r2, [r7, #7]
 8009c5e:	491e      	ldr	r1, [pc, #120]	; (8009cd8 <Check_for_RelayMisMatch+0x200>)
 8009c60:	4613      	mov	r3, r2
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	440b      	add	r3, r1
 8009c6a:	3312      	adds	r3, #18
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	4619      	mov	r1, r3
 8009c70:	481e      	ldr	r0, [pc, #120]	; (8009cec <Check_for_RelayMisMatch+0x214>)
 8009c72:	f01c f9a5 	bl	8025fc0 <iprintf>
 8009c76:	e004      	b.n	8009c82 <Check_for_RelayMisMatch+0x1aa>
					}
				}
			}
			else
			{
				MisMatchFlag[Traverser] = RESET; /* If both Relay CRC is Matching MisMatch will be RESET */
 8009c78:	79fb      	ldrb	r3, [r7, #7]
 8009c7a:	4a13      	ldr	r2, [pc, #76]	; (8009cc8 <Check_for_RelayMisMatch+0x1f0>)
 8009c7c:	2100      	movs	r1, #0
 8009c7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			}
		}
		Check_Clk[Traverser] = HAL_GetTick();
 8009c82:	79fc      	ldrb	r4, [r7, #7]
 8009c84:	f00f fa86 	bl	8019194 <HAL_GetTick>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	4a0e      	ldr	r2, [pc, #56]	; (8009cc4 <Check_for_RelayMisMatch+0x1ec>)
 8009c8c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8009c90:	e002      	b.n	8009c98 <Check_for_RelayMisMatch+0x1c0>
			continue;
 8009c92:	bf00      	nop
 8009c94:	e000      	b.n	8009c98 <Check_for_RelayMisMatch+0x1c0>
					continue;
 8009c96:	bf00      	nop
	for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	71fb      	strb	r3, [r7, #7]
 8009c9e:	4b08      	ldr	r3, [pc, #32]	; (8009cc0 <Check_for_RelayMisMatch+0x1e8>)
 8009ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ca4:	79fa      	ldrb	r2, [r7, #7]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	f4ff af24 	bcc.w	8009af4 <Check_for_RelayMisMatch+0x1c>
 8009cac:	e000      	b.n	8009cb0 <Check_for_RelayMisMatch+0x1d8>
		return;
 8009cae:	bf00      	nop
	}
}
 8009cb0:	370c      	adds	r7, #12
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd90      	pop	{r4, r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	08027ad0 	.word	0x08027ad0
 8009cbc:	20000505 	.word	0x20000505
 8009cc0:	20000504 	.word	0x20000504
 8009cc4:	20003860 	.word	0x20003860
 8009cc8:	20002550 	.word	0x20002550
 8009ccc:	200025fc 	.word	0x200025fc
 8009cd0:	200025f0 	.word	0x200025f0
 8009cd4:	20003598 	.word	0x20003598
 8009cd8:	20003660 	.word	0x20003660
 8009cdc:	20002564 	.word	0x20002564
 8009ce0:	08028fa0 	.word	0x08028fa0
 8009ce4:	08028fac 	.word	0x08028fac
 8009ce8:	08028fb8 	.word	0x08028fb8
 8009cec:	08028fc8 	.word	0x08028fc8

08009cf0 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8009cfa:	f00f fa4b 	bl	8019194 <HAL_GetTick>
 8009cfe:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009d00:	79fa      	ldrb	r2, [r7, #7]
 8009d02:	4935      	ldr	r1, [pc, #212]	; (8009dd8 <CheckOtherLinkStatus+0xe8>)
 8009d04:	4613      	mov	r3, r2
 8009d06:	005b      	lsls	r3, r3, #1
 8009d08:	4413      	add	r3, r2
 8009d0a:	00db      	lsls	r3, r3, #3
 8009d0c:	440b      	add	r3, r1
 8009d0e:	3302      	adds	r3, #2
 8009d10:	781b      	ldrb	r3, [r3, #0]
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d11d      	bne.n	8009d52 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009d16:	79fb      	ldrb	r3, [r7, #7]
 8009d18:	4930      	ldr	r1, [pc, #192]	; (8009ddc <CheckOtherLinkStatus+0xec>)
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009d20:	79fa      	ldrb	r2, [r7, #7]
 8009d22:	492f      	ldr	r1, [pc, #188]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d24:	4613      	mov	r3, r2
 8009d26:	005b      	lsls	r3, r3, #1
 8009d28:	4413      	add	r3, r2
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	440b      	add	r3, r1
 8009d2e:	3304      	adds	r3, #4
 8009d30:	68fa      	ldr	r2, [r7, #12]
 8009d32:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009d34:	79fa      	ldrb	r2, [r7, #7]
 8009d36:	492a      	ldr	r1, [pc, #168]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d38:	4613      	mov	r3, r2
 8009d3a:	005b      	lsls	r3, r3, #1
 8009d3c:	4413      	add	r3, r2
 8009d3e:	009b      	lsls	r3, r3, #2
 8009d40:	440b      	add	r3, r1
 8009d42:	3301      	adds	r3, #1
 8009d44:	2201      	movs	r2, #1
 8009d46:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009d48:	79fb      	ldrb	r3, [r7, #7]
 8009d4a:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <CheckOtherLinkStatus+0xf4>)
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	54d1      	strb	r1, [r2, r3]
 8009d50:	e02e      	b.n	8009db0 <CheckOtherLinkStatus+0xc0>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = RESET;
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	4a23      	ldr	r2, [pc, #140]	; (8009de4 <CheckOtherLinkStatus+0xf4>)
 8009d56:	2100      	movs	r1, #0
 8009d58:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8009d5a:	79fa      	ldrb	r2, [r7, #7]
 8009d5c:	4920      	ldr	r1, [pc, #128]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d5e:	4613      	mov	r3, r2
 8009d60:	005b      	lsls	r3, r3, #1
 8009d62:	4413      	add	r3, r2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	440b      	add	r3, r1
 8009d68:	3308      	adds	r3, #8
 8009d6a:	68fa      	ldr	r2, [r7, #12]
 8009d6c:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = RESET;
 8009d6e:	79fa      	ldrb	r2, [r7, #7]
 8009d70:	491b      	ldr	r1, [pc, #108]	; (8009de0 <CheckOtherLinkStatus+0xf0>)
 8009d72:	4613      	mov	r3, r2
 8009d74:	005b      	lsls	r3, r3, #1
 8009d76:	4413      	add	r3, r2
 8009d78:	009b      	lsls	r3, r3, #2
 8009d7a:	440b      	add	r3, r1
 8009d7c:	3301      	adds	r3, #1
 8009d7e:	2200      	movs	r2, #0
 8009d80:	701a      	strb	r2, [r3, #0]
		OtherCard_Relays_st[SourceIndex].RelayIPS_CRC = 0;
 8009d82:	79fa      	ldrb	r2, [r7, #7]
 8009d84:	4918      	ldr	r1, [pc, #96]	; (8009de8 <CheckOtherLinkStatus+0xf8>)
 8009d86:	4613      	mov	r3, r2
 8009d88:	009b      	lsls	r3, r3, #2
 8009d8a:	4413      	add	r3, r2
 8009d8c:	009b      	lsls	r3, r3, #2
 8009d8e:	440b      	add	r3, r1
 8009d90:	3312      	adds	r3, #18
 8009d92:	2200      	movs	r2, #0
 8009d94:	801a      	strh	r2, [r3, #0]
		memset(&OtherCard_Relays_st[SourceIndex].RelayIPS_Buff,0,sizeof(OtherCard_Relays_st[SourceIndex].RelayIPS_Buff));
 8009d96:	79fa      	ldrb	r2, [r7, #7]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	4413      	add	r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	4a11      	ldr	r2, [pc, #68]	; (8009de8 <CheckOtherLinkStatus+0xf8>)
 8009da2:	4413      	add	r3, r2
 8009da4:	3301      	adds	r3, #1
 8009da6:	2210      	movs	r2, #16
 8009da8:	2100      	movs	r1, #0
 8009daa:	4618      	mov	r0, r3
 8009dac:	f01c f820 	bl	8025df0 <memset>
	}

	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8009db0:	79fa      	ldrb	r2, [r7, #7]
 8009db2:	4909      	ldr	r1, [pc, #36]	; (8009dd8 <CheckOtherLinkStatus+0xe8>)
 8009db4:	4613      	mov	r3, r2
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	4413      	add	r3, r2
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	440b      	add	r3, r1
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d104      	bne.n	8009dd0 <CheckOtherLinkStatus+0xe0>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8009dc6:	79fb      	ldrb	r3, [r7, #7]
 8009dc8:	4908      	ldr	r1, [pc, #32]	; (8009dec <CheckOtherLinkStatus+0xfc>)
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 8009dd0:	bf00      	nop
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}
 8009dd8:	20002e94 	.word	0x20002e94
 8009ddc:	200025c8 	.word	0x200025c8
 8009de0:	20003458 	.word	0x20003458
 8009de4:	200025fc 	.word	0x200025fc
 8009de8:	20003660 	.word	0x20003660
 8009dec:	20002510 	.word	0x20002510

08009df0 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8009df4:	4b1a      	ldr	r3, [pc, #104]	; (8009e60 <SendRelay2_Other+0x70>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f006 fafd 	bl	80103f8 <HAL_Elaps_Ticks>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e04:	d92a      	bls.n	8009e5c <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8009e06:	2214      	movs	r2, #20
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4816      	ldr	r0, [pc, #88]	; (8009e64 <SendRelay2_Other+0x74>)
 8009e0c:	f01b fff0 	bl	8025df0 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8009e10:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e12:	681a      	ldr	r2, [r3, #0]
 8009e14:	4613      	mov	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4413      	add	r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <SendRelay2_Other+0x7c>)
 8009e1e:	4413      	add	r3, r2
 8009e20:	2214      	movs	r2, #20
 8009e22:	4619      	mov	r1, r3
 8009e24:	480f      	ldr	r0, [pc, #60]	; (8009e64 <SendRelay2_Other+0x74>)
 8009e26:	f01b ffbb 	bl	8025da0 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009e2a:	f240 2007 	movw	r0, #519	; 0x207
 8009e2e:	f007 f897 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009e32:	4b0d      	ldr	r3, [pc, #52]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3301      	adds	r3, #1
 8009e38:	4a0b      	ldr	r2, [pc, #44]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e3a:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <SendRelay2_Other+0x80>)
 8009e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e42:	461a      	mov	r2, r3
 8009e44:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	429a      	cmp	r2, r3
 8009e4a:	d102      	bne.n	8009e52 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8009e4c:	4b06      	ldr	r3, [pc, #24]	; (8009e68 <SendRelay2_Other+0x78>)
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009e52:	f00f f99f 	bl	8019194 <HAL_GetTick>
 8009e56:	4603      	mov	r3, r0
 8009e58:	4a01      	ldr	r2, [pc, #4]	; (8009e60 <SendRelay2_Other+0x70>)
 8009e5a:	6013      	str	r3, [r2, #0]
	}
}
 8009e5c:	bf00      	nop
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	20003888 	.word	0x20003888
 8009e64:	20003728 	.word	0x20003728
 8009e68:	2000388c 	.word	0x2000388c
 8009e6c:	20003598 	.word	0x20003598
 8009e70:	20000504 	.word	0x20000504

08009e74 <Process_HitachiEI>:




void Process_HitachiEI(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
	while(1)
	{
		process_to_comReceived();
 8009e78:	f7f7 fa3a 	bl	80012f0 <process_to_comReceived>

		Check_OnlineDiag_OFC_Modem();
 8009e7c:	f7f7 f8a2 	bl	8000fc4 <Check_OnlineDiag_OFC_Modem>

		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009e80:	f016 fb82 	bl	8020588 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8009e84:	481b      	ldr	r0, [pc, #108]	; (8009ef4 <Process_HitachiEI+0x80>)
 8009e86:	f012 fbf7 	bl	801c678 <HAL_IWDG_Refresh>

		Feed_wdt();
 8009e8a:	f00b fe8b 	bl	8015ba4 <Feed_wdt>

		readCanToStructs();
 8009e8e:	f007 f9f1 	bl	8011274 <readCanToStructs>

		Check_for_cmd();
 8009e92:	f7f6 fe61 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8009e96:	f7f7 fbd5 	bl	8001644 <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009e9a:	f7f7 fc41 	bl	8001720 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009e9e:	f7fe fe01 	bl	8008aa4 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8009ea2:	f7fe fd27 	bl	80088f4 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8009ea6:	f7fe fd91 	bl	80089cc <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009eaa:	f7fe fc93 	bl	80087d4 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009eae:	f7ff fdb5 	bl	8009a1c <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8009eb2:	f7ff fc6b 	bl	800978c <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8009eb6:	f7ff fbef 	bl	8009698 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009eba:	f7ff fcb7 	bl	800982c <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009ebe:	f002 fe77 	bl	800cbb0 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8009ec2:	f7ff fe09 	bl	8009ad8 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8009ec6:	f7ff ff93 	bl	8009df0 <SendRelay2_Other>

		Print_BuildDat_Details();
 8009eca:	f00e f8e9 	bl	80180a0 <Print_BuildDat_Details>

		CheckEIPC_DAT_CRC();
 8009ece:	f7f7 f83d 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <Process_HitachiEI+0x84>)
 8009ed4:	781b      	ldrb	r3, [r3, #0]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d003      	beq.n	8009ee2 <Process_HitachiEI+0x6e>
		{
			gucFlagUpdate = 3;
 8009eda:	4b08      	ldr	r3, [pc, #32]	; (8009efc <Process_HitachiEI+0x88>)
 8009edc:	2203      	movs	r2, #3
 8009ede:	701a      	strb	r2, [r3, #0]
			break;
 8009ee0:	e002      	b.n	8009ee8 <Process_HitachiEI+0x74>
		}

		Enable_UART_Interrupts();
 8009ee2:	f00e ff45 	bl	8018d70 <Enable_UART_Interrupts>
		process_to_comReceived();
 8009ee6:	e7c7      	b.n	8009e78 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8009ee8:	f00d ffd8 	bl	8017e9c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009eec:	4801      	ldr	r0, [pc, #4]	; (8009ef4 <Process_HitachiEI+0x80>)
 8009eee:	f012 fbc3 	bl	801c678 <HAL_IWDG_Refresh>
		Data_Processing();
 8009ef2:	e7f9      	b.n	8009ee8 <Process_HitachiEI+0x74>
 8009ef4:	2000b414 	.word	0x2000b414
 8009ef8:	20000bba 	.word	0x20000bba
 8009efc:	20000fbd 	.word	0x20000fbd

08009f00 <ReAssignData>:

#endif


void ReAssignData(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	f5ad 6dd7 	sub.w	sp, sp, #1720	; 0x6b8
 8009f06:	af00      	add	r7, sp, #0
	EI_t EI_dataTempEthernet,EI_dataTempSerial;
	uint8_t PeerTraverser = 0;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
	bool SerialFlag = RESET;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
	bool OrderOKFlag = SET;
 8009f14:	2301      	movs	r3, #1
 8009f16:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	uint8_t EthernetIndex = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
	uint8_t SerialIndex = 0;
 8009f20:	2300      	movs	r3, #0
 8009f22:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3



	printf("EI_data.Hitachi_st.EnableSerialPort:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009f26:	4b8d      	ldr	r3, [pc, #564]	; (800a15c <ReAssignData+0x25c>)
 8009f28:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	488c      	ldr	r0, [pc, #560]	; (800a160 <ReAssignData+0x260>)
 8009f30:	f01c f846 	bl	8025fc0 <iprintf>
	if(EI_data.Hitachi_st.EnableSerialPort <= 0)
 8009f34:	4b89      	ldr	r3, [pc, #548]	; (800a15c <ReAssignData+0x25c>)
 8009f36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	f000 83d8 	beq.w	800a6f0 <ReAssignData+0x7f0>
	{
		return;
	}

	memset(&EI_dataTempEthernet,0,sizeof(EI_t));
 8009f40:	f507 7356 	add.w	r3, r7, #856	; 0x358
 8009f44:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009f48:	2100      	movs	r1, #0
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	f01b ff50 	bl	8025df0 <memset>
	memset(&EI_dataTempSerial,0,sizeof(EI_t));
 8009f50:	463b      	mov	r3, r7
 8009f52:	f44f 7256 	mov.w	r2, #856	; 0x358
 8009f56:	2100      	movs	r1, #0
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f01b ff49 	bl	8025df0 <memset>


	/* Check whether the order is valid */
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009f5e:	2300      	movs	r3, #0
 8009f60:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009f64:	e026      	b.n	8009fb4 <ReAssignData+0xb4>
	{
		if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 8009f66:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f6a:	4a7c      	ldr	r2, [pc, #496]	; (800a15c <ReAssignData+0x25c>)
 8009f6c:	4413      	add	r3, r2
 8009f6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d103      	bne.n	8009f7e <ReAssignData+0x7e>
		{
			SerialFlag = SET;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 36b6 	strb.w	r3, [r7, #1718]	; 0x6b6
 8009f7c:	e015      	b.n	8009faa <ReAssignData+0xaa>
		}
		else if ((EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET) && (SerialFlag == SET))
 8009f7e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009f82:	4a76      	ldr	r2, [pc, #472]	; (800a15c <ReAssignData+0x25c>)
 8009f84:	4413      	add	r3, r2
 8009f86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d10d      	bne.n	8009faa <ReAssignData+0xaa>
 8009f8e:	f897 36b6 	ldrb.w	r3, [r7, #1718]	; 0x6b6
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <ReAssignData+0xaa>
		{
			printf("EI_data.Hitachi_st.EnableSerialPort11111111111:%u\n",EI_data.Hitachi_st.EnableSerialPort);
 8009f96:	4b71      	ldr	r3, [pc, #452]	; (800a15c <ReAssignData+0x25c>)
 8009f98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4871      	ldr	r0, [pc, #452]	; (800a164 <ReAssignData+0x264>)
 8009fa0:	f01c f80e 	bl	8025fc0 <iprintf>
			OrderOKFlag = RESET;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	f887 36b5 	strb.w	r3, [r7, #1717]	; 0x6b5
	for(PeerTraverser= 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009faa:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009fae:	3301      	adds	r3, #1
 8009fb0:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009fb4:	4b69      	ldr	r3, [pc, #420]	; (800a15c <ReAssignData+0x25c>)
 8009fb6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009fba:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3d1      	bcc.n	8009f66 <ReAssignData+0x66>
		}
	}

	if(OrderOKFlag == RESET)
 8009fc2:	f897 36b5 	ldrb.w	r3, [r7, #1717]	; 0x6b5
 8009fc6:	f083 0301 	eor.w	r3, r3, #1
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 838b 	beq.w	800a6e8 <ReAssignData+0x7e8>
	{
		memcpy(&EI_BeforeReorderData,&EI_data,sizeof(EI_t));
 8009fd2:	4a65      	ldr	r2, [pc, #404]	; (800a168 <ReAssignData+0x268>)
 8009fd4:	4b61      	ldr	r3, [pc, #388]	; (800a15c <ReAssignData+0x25c>)
 8009fd6:	4610      	mov	r0, r2
 8009fd8:	4619      	mov	r1, r3
 8009fda:	f44f 7356 	mov.w	r3, #856	; 0x358
 8009fde:	461a      	mov	r2, r3
 8009fe0:	f01b fede 	bl	8025da0 <memcpy>
		ReorderFlag = SET;
 8009fe4:	4b61      	ldr	r3, [pc, #388]	; (800a16c <ReAssignData+0x26c>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	701a      	strb	r2, [r3, #0]
		printf("\n============================ CONFIG DATA IS NOT IN ORDER RE-ORDERING THE DATA ============================\n");
 8009fea:	4861      	ldr	r0, [pc, #388]	; (800a170 <ReAssignData+0x270>)
 8009fec:	f01c f884 	bl	80260f8 <puts>

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 8009ff6:	e172      	b.n	800a2de <ReAssignData+0x3de>
		{
			if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == ETHERNET)
 8009ff8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 8009ffc:	4a57      	ldr	r2, [pc, #348]	; (800a15c <ReAssignData+0x25c>)
 8009ffe:	4413      	add	r3, r2
 800a000:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a004:	2b01      	cmp	r3, #1
 800a006:	f040 80b5 	bne.w	800a174 <ReAssignData+0x274>
			{
				EI_dataTempEthernet.Hitachi_st.ClockMaster[EthernetIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800a00a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a00e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a012:	4952      	ldr	r1, [pc, #328]	; (800a15c <ReAssignData+0x25c>)
 800a014:	440a      	add	r2, r1
 800a016:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a01a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a01e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a022:	4413      	add	r3, r2
 800a024:	460a      	mov	r2, r1
 800a026:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempEthernet.Hitachi_st.Interface_Type[EthernetIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 800a02a:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a02e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a032:	494a      	ldr	r1, [pc, #296]	; (800a15c <ReAssignData+0x25c>)
 800a034:	440a      	add	r2, r1
 800a036:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a03a:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a03e:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a042:	4413      	add	r3, r2
 800a044:	460a      	mov	r2, r1
 800a046:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a04a:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a04e:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 800a052:	4a42      	ldr	r2, [pc, #264]	; (800a15c <ReAssignData+0x25c>)
 800a054:	3366      	adds	r3, #102	; 0x66
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4413      	add	r3, r2
 800a05a:	685a      	ldr	r2, [r3, #4]
 800a05c:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a060:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 800a064:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800a068:	009b      	lsls	r3, r3, #2
 800a06a:	440b      	add	r3, r1
 800a06c:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a06e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a072:	f897 06b4 	ldrb.w	r0, [r7, #1716]	; 0x6b4
 800a076:	4a39      	ldr	r2, [pc, #228]	; (800a15c <ReAssignData+0x25c>)
 800a078:	3370      	adds	r3, #112	; 0x70
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	4413      	add	r3, r2
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a084:	f5a3 7158 	sub.w	r1, r3, #864	; 0x360
 800a088:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	440b      	add	r3, r1
 800a090:	605a      	str	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a092:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a096:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a09a:	4a30      	ldr	r2, [pc, #192]	; (800a15c <ReAssignData+0x25c>)
 800a09c:	33f4      	adds	r3, #244	; 0xf4
 800a09e:	005b      	lsls	r3, r3, #1
 800a0a0:	4413      	add	r3, r2
 800a0a2:	8898      	ldrh	r0, [r3, #4]
 800a0a4:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0a8:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a0ac:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a0b0:	005b      	lsls	r3, r3, #1
 800a0b2:	4413      	add	r3, r2
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	809a      	strh	r2, [r3, #4]
				EI_dataTempEthernet.Hitachi_st.Bool_outputs[EthernetIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a0b8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a0bc:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a0c0:	4926      	ldr	r1, [pc, #152]	; (800a15c <ReAssignData+0x25c>)
 800a0c2:	440a      	add	r2, r1
 800a0c4:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a0c8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a0cc:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a0d0:	4413      	add	r3, r2
 800a0d2:	460a      	mov	r2, r1
 800a0d4:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a0d8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0dc:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a0e0:	491e      	ldr	r1, [pc, #120]	; (800a15c <ReAssignData+0x25c>)
 800a0e2:	338a      	adds	r3, #138	; 0x8a
 800a0e4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a0e8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a0ec:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a0f0:	328a      	adds	r2, #138	; 0x8a
 800a0f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a0f6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a0fa:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a0fe:	4917      	ldr	r1, [pc, #92]	; (800a15c <ReAssignData+0x25c>)
 800a100:	3394      	adds	r3, #148	; 0x94
 800a102:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a106:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a10a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a10e:	3294      	adds	r2, #148	; 0x94
 800a110:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a114:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a118:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a11c:	490f      	ldr	r1, [pc, #60]	; (800a15c <ReAssignData+0x25c>)
 800a11e:	339e      	adds	r3, #158	; 0x9e
 800a120:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a124:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a128:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a12c:	329e      	adds	r2, #158	; 0x9e
 800a12e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempEthernet.Hitachi_st.PeersCnt;
 800a132:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a136:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a13a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a13e:	3301      	adds	r3, #1
 800a140:	b2da      	uxtb	r2, r3
 800a142:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a146:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a14a:	f883 2020 	strb.w	r2, [r3, #32]
				++EthernetIndex;
 800a14e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a152:	3301      	adds	r3, #1
 800a154:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
 800a158:	e0bc      	b.n	800a2d4 <ReAssignData+0x3d4>
 800a15a:	bf00      	nop
 800a15c:	20000504 	.word	0x20000504
 800a160:	08028fd8 	.word	0x08028fd8
 800a164:	08029000 	.word	0x08029000
 800a168:	2000085c 	.word	0x2000085c
 800a16c:	2000254e 	.word	0x2000254e
 800a170:	08029034 	.word	0x08029034
			}
			else if(EI_data.Hitachi_st.Interface_Type[PeerTraverser] == SERIAL)
 800a174:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a178:	4aa9      	ldr	r2, [pc, #676]	; (800a420 <ReAssignData+0x520>)
 800a17a:	4413      	add	r3, r2
 800a17c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a180:	2b02      	cmp	r3, #2
 800a182:	f040 80a7 	bne.w	800a2d4 <ReAssignData+0x3d4>
			{
				EI_dataTempSerial.Hitachi_st.ClockMaster[SerialIndex] = EI_data.Hitachi_st.ClockMaster[PeerTraverser];
 800a186:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a18a:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a18e:	49a4      	ldr	r1, [pc, #656]	; (800a420 <ReAssignData+0x520>)
 800a190:	440a      	add	r2, r1
 800a192:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a196:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a19a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a19e:	4413      	add	r3, r2
 800a1a0:	460a      	mov	r2, r1
 800a1a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_dataTempSerial.Hitachi_st.Interface_Type[SerialIndex] = EI_data.Hitachi_st.Interface_Type[PeerTraverser];
 800a1a6:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a1aa:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a1ae:	499c      	ldr	r1, [pc, #624]	; (800a420 <ReAssignData+0x520>)
 800a1b0:	440a      	add	r2, r1
 800a1b2:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a1b6:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a1ba:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a1be:	4413      	add	r3, r2
 800a1c0:	460a      	mov	r2, r1
 800a1c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a1c6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1ca:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a1ce:	4a94      	ldr	r2, [pc, #592]	; (800a420 <ReAssignData+0x520>)
 800a1d0:	3366      	adds	r3, #102	; 0x66
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	4413      	add	r3, r2
 800a1d6:	685a      	ldr	r2, [r3, #4]
 800a1d8:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a1dc:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a1e0:	f100 0366 	add.w	r3, r0, #102	; 0x66
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[SerialIndex] = EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a1ea:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a1ee:	f897 06b3 	ldrb.w	r0, [r7, #1715]	; 0x6b3
 800a1f2:	4a8b      	ldr	r2, [pc, #556]	; (800a420 <ReAssignData+0x520>)
 800a1f4:	3370      	adds	r3, #112	; 0x70
 800a1f6:	009b      	lsls	r3, r3, #2
 800a1f8:	4413      	add	r3, r2
 800a1fa:	685a      	ldr	r2, [r3, #4]
 800a1fc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a200:	f5a3 61d7 	sub.w	r1, r3, #1720	; 0x6b8
 800a204:	f100 0370 	add.w	r3, r0, #112	; 0x70
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	440b      	add	r3, r1
 800a20c:	605a      	str	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][SerialIndex] = EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a20e:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a212:	f897 16b3 	ldrb.w	r1, [r7, #1715]	; 0x6b3
 800a216:	4a82      	ldr	r2, [pc, #520]	; (800a420 <ReAssignData+0x520>)
 800a218:	33f4      	adds	r3, #244	; 0xf4
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	4413      	add	r3, r2
 800a21e:	8898      	ldrh	r0, [r3, #4]
 800a220:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a224:	f5a3 62d7 	sub.w	r2, r3, #1720	; 0x6b8
 800a228:	f101 03f4 	add.w	r3, r1, #244	; 0xf4
 800a22c:	005b      	lsls	r3, r3, #1
 800a22e:	4413      	add	r3, r2
 800a230:	4602      	mov	r2, r0
 800a232:	809a      	strh	r2, [r3, #4]
				EI_dataTempSerial.Hitachi_st.Bool_outputs[SerialIndex] = EI_data.Hitachi_st.Bool_outputs[PeerTraverser];
 800a234:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a238:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a23c:	4978      	ldr	r1, [pc, #480]	; (800a420 <ReAssignData+0x520>)
 800a23e:	440a      	add	r2, r1
 800a240:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a244:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a248:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a24c:	4413      	add	r3, r2
 800a24e:	460a      	mov	r2, r1
 800a250:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a254:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a258:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a25c:	4970      	ldr	r1, [pc, #448]	; (800a420 <ReAssignData+0x520>)
 800a25e:	338a      	adds	r3, #138	; 0x8a
 800a260:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a264:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a268:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a26c:	328a      	adds	r2, #138	; 0x8a
 800a26e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[SerialIndex] = EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a272:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a276:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a27a:	4969      	ldr	r1, [pc, #420]	; (800a420 <ReAssignData+0x520>)
 800a27c:	3394      	adds	r3, #148	; 0x94
 800a27e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a282:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a286:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a28a:	3294      	adds	r2, #148	; 0x94
 800a28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[SerialIndex] = EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a290:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a294:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800a298:	4961      	ldr	r1, [pc, #388]	; (800a420 <ReAssignData+0x520>)
 800a29a:	339e      	adds	r3, #158	; 0x9e
 800a29c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a2a0:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2a4:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2a8:	329e      	adds	r2, #158	; 0x9e
 800a2aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

				++EI_dataTempSerial.Hitachi_st.PeersCnt;
 800a2ae:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2b2:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2ba:	3301      	adds	r3, #1
 800a2bc:	b2da      	uxtb	r2, r3
 800a2be:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a2c2:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a2c6:	f883 2020 	strb.w	r2, [r3, #32]
				++SerialIndex;
 800a2ca:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.PeersCnt;++PeerTraverser)
 800a2d4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a2d8:	3301      	adds	r3, #1
 800a2da:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a2de:	4b50      	ldr	r3, [pc, #320]	; (800a420 <ReAssignData+0x520>)
 800a2e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2e4:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	f4ff ae85 	bcc.w	8009ff8 <ReAssignData+0xf8>
			}
		}

		EthernetIndex = 0;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		SerialIndex = 0;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a300:	e077      	b.n	800a3f2 <ReAssignData+0x4f2>
		{
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][0] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][0];
 800a302:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a306:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a30a:	4a45      	ldr	r2, [pc, #276]	; (800a420 <ReAssignData+0x520>)
 800a30c:	3312      	adds	r3, #18
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	78d8      	ldrb	r0, [r3, #3]
 800a314:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a318:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a31c:	f101 0312 	add.w	r3, r1, #18
 800a320:	009b      	lsls	r3, r3, #2
 800a322:	4413      	add	r3, r2
 800a324:	4602      	mov	r2, r0
 800a326:	70da      	strb	r2, [r3, #3]
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][1] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][1];
 800a328:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a32c:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a330:	4a3b      	ldr	r2, [pc, #236]	; (800a420 <ReAssignData+0x520>)
 800a332:	009b      	lsls	r3, r3, #2
 800a334:	4413      	add	r3, r2
 800a336:	f893 004c 	ldrb.w	r0, [r3, #76]	; 0x4c
 800a33a:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a33e:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a342:	008b      	lsls	r3, r1, #2
 800a344:	4413      	add	r3, r2
 800a346:	4602      	mov	r2, r0
 800a348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][2] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][2];
 800a34c:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a350:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a354:	4a32      	ldr	r2, [pc, #200]	; (800a420 <ReAssignData+0x520>)
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	4413      	add	r3, r2
 800a35a:	f893 004d 	ldrb.w	r0, [r3, #77]	; 0x4d
 800a35e:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a362:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a366:	008b      	lsls	r3, r1, #2
 800a368:	4413      	add	r3, r2
 800a36a:	4602      	mov	r2, r0
 800a36c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
			EI_dataTempEthernet.Hitachi_st.Source_IP[CARD_INDEX][EthernetIndex][3] = EI_data.Hitachi_st.Source_IP[CARD_INDEX][PeerTraverser][3];
 800a370:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a374:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a378:	4a29      	ldr	r2, [pc, #164]	; (800a420 <ReAssignData+0x520>)
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
 800a382:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a386:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a38a:	008b      	lsls	r3, r1, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	4602      	mov	r2, r0
 800a390:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e

			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][TX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][TX_PORT];
 800a394:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a398:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a39c:	4a20      	ldr	r2, [pc, #128]	; (800a420 <ReAssignData+0x520>)
 800a39e:	333e      	adds	r3, #62	; 0x3e
 800a3a0:	009b      	lsls	r3, r3, #2
 800a3a2:	4413      	add	r3, r2
 800a3a4:	8858      	ldrh	r0, [r3, #2]
 800a3a6:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a3aa:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a3ae:	f101 033e 	add.w	r3, r1, #62	; 0x3e
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	4413      	add	r3, r2
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	805a      	strh	r2, [r3, #2]
			EI_dataTempEthernet.Hitachi_st.PORTS[CARD_INDEX][EthernetIndex][RX_PORT] = EI_data.Hitachi_st.PORTS[CARD_INDEX][PeerTraverser][RX_PORT];
 800a3ba:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3be:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a3c2:	4a17      	ldr	r2, [pc, #92]	; (800a420 <ReAssignData+0x520>)
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	f8b3 00fc 	ldrh.w	r0, [r3, #252]	; 0xfc
 800a3cc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a3d0:	f5a3 7258 	sub.w	r2, r3, #864	; 0x360
 800a3d4:	008b      	lsls	r3, r1, #2
 800a3d6:	4413      	add	r3, r2
 800a3d8:	4602      	mov	r2, r0
 800a3da:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
			++EthernetIndex;
 800a3de:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a3e2:	3301      	adds	r3, #1
 800a3e4:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		for(PeerTraverser = 0;PeerTraverser<EI_data.Hitachi_st.No_of_IP_s;++PeerTraverser)
 800a3e8:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a3ec:	3301      	adds	r3, #1
 800a3ee:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a3f2:	4b0b      	ldr	r3, [pc, #44]	; (800a420 <ReAssignData+0x520>)
 800a3f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a3f8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d380      	bcc.n	800a302 <ReAssignData+0x402>
		}


		EthernetIndex = 0;
 800a400:	2300      	movs	r3, #0
 800a402:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
		if(EI_dataTempEthernet.Hitachi_st.PeersCnt > 0)
 800a406:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a40a:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a40e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a412:	2b00      	cmp	r3, #0
 800a414:	f000 80af 	beq.w	800a576 <ReAssignData+0x676>
		{
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a418:	2300      	movs	r3, #0
 800a41a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a41e:	e09f      	b.n	800a560 <ReAssignData+0x660>
 800a420:	20000504 	.word	0x20000504
			{
				EI_data.Hitachi_st.ClockMaster[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.ClockMaster[PeerTraverser];
 800a424:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a428:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a42c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a430:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a434:	440a      	add	r2, r1
 800a436:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a43a:	4ab0      	ldr	r2, [pc, #704]	; (800a6fc <ReAssignData+0x7fc>)
 800a43c:	4413      	add	r3, r2
 800a43e:	460a      	mov	r2, r1
 800a440:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Interface_Type[PeerTraverser];
 800a444:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a448:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a44c:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a450:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a454:	440a      	add	r2, r1
 800a456:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a45a:	4aa8      	ldr	r2, [pc, #672]	; (800a6fc <ReAssignData+0x7fc>)
 800a45c:	4413      	add	r3, r2
 800a45e:	460a      	mov	r2, r1
 800a460:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a464:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a468:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a46c:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a470:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a474:	3366      	adds	r3, #102	; 0x66
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	489f      	ldr	r0, [pc, #636]	; (800a6fc <ReAssignData+0x7fc>)
 800a47e:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4403      	add	r3, r0
 800a486:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a488:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a48c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a490:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a494:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a498:	3370      	adds	r3, #112	; 0x70
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	4413      	add	r3, r2
 800a49e:	685a      	ldr	r2, [r3, #4]
 800a4a0:	4896      	ldr	r0, [pc, #600]	; (800a6fc <ReAssignData+0x7fc>)
 800a4a2:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a4a6:	009b      	lsls	r3, r3, #2
 800a4a8:	4403      	add	r3, r0
 800a4aa:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser] = EI_dataTempEthernet.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a4ac:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4b0:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a4b4:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a4b8:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a4bc:	33f4      	adds	r3, #244	; 0xf4
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	440b      	add	r3, r1
 800a4c2:	8898      	ldrh	r0, [r3, #4]
 800a4c4:	498d      	ldr	r1, [pc, #564]	; (800a6fc <ReAssignData+0x7fc>)
 800a4c6:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a4ca:	005b      	lsls	r3, r3, #1
 800a4cc:	440b      	add	r3, r1
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.Bool_outputs[PeerTraverser];
 800a4d2:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a4d6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4da:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a4de:	f5a1 7158 	sub.w	r1, r1, #864	; 0x360
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a4e8:	4a84      	ldr	r2, [pc, #528]	; (800a6fc <ReAssignData+0x7fc>)
 800a4ea:	4413      	add	r3, r2
 800a4ec:	460a      	mov	r2, r1
 800a4ee:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a4f2:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a4f6:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a4fa:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a4fe:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a502:	318a      	adds	r1, #138	; 0x8a
 800a504:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a508:	497c      	ldr	r1, [pc, #496]	; (800a6fc <ReAssignData+0x7fc>)
 800a50a:	338a      	adds	r3, #138	; 0x8a
 800a50c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a510:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a514:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a518:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a51c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a520:	3194      	adds	r1, #148	; 0x94
 800a522:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a526:	4975      	ldr	r1, [pc, #468]	; (800a6fc <ReAssignData+0x7fc>)
 800a528:	3394      	adds	r3, #148	; 0x94
 800a52a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[PeerTraverser] = EI_dataTempEthernet.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a52e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a532:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a536:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a53a:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 800a53e:	319e      	adds	r1, #158	; 0x9e
 800a540:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a544:	496d      	ldr	r1, [pc, #436]	; (800a6fc <ReAssignData+0x7fc>)
 800a546:	339e      	adds	r3, #158	; 0x9e
 800a548:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a54c:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a550:	3301      	adds	r3, #1
 800a552:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0;PeerTraverser<EI_dataTempEthernet.Hitachi_st.PeersCnt;++PeerTraverser)
 800a556:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a55a:	3301      	adds	r3, #1
 800a55c:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a560:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a564:	f5a3 7358 	sub.w	r3, r3, #864	; 0x360
 800a568:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a56c:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a570:	429a      	cmp	r2, r3
 800a572:	f4ff af57 	bcc.w	800a424 <ReAssignData+0x524>
			}
		}
		if(EI_dataTempSerial.Hitachi_st.PeersCnt > 0)
 800a576:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a57a:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a57e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a582:	2b00      	cmp	r3, #0
 800a584:	f000 80ad 	beq.w	800a6e2 <ReAssignData+0x7e2>
		{
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a58e:	e09d      	b.n	800a6cc <ReAssignData+0x7cc>
			{
				EI_data.Hitachi_st.ClockMaster[EthernetIndex] = EI_dataTempSerial.Hitachi_st.ClockMaster[PeerTraverser];
 800a590:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a594:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a598:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a59c:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5a0:	440a      	add	r2, r1
 800a5a2:	f892 1023 	ldrb.w	r1, [r2, #35]	; 0x23
 800a5a6:	4a55      	ldr	r2, [pc, #340]	; (800a6fc <ReAssignData+0x7fc>)
 800a5a8:	4413      	add	r3, r2
 800a5aa:	460a      	mov	r2, r1
 800a5ac:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				EI_data.Hitachi_st.Interface_Type[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Interface_Type[PeerTraverser];
 800a5b0:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a5b4:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a5b8:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a5bc:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a5c0:	440a      	add	r2, r1
 800a5c2:	f892 102d 	ldrb.w	r1, [r2, #45]	; 0x2d
 800a5c6:	4a4d      	ldr	r2, [pc, #308]	; (800a6fc <ReAssignData+0x7fc>)
 800a5c8:	4413      	add	r3, r2
 800a5ca:	460a      	mov	r2, r1
 800a5cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
				EI_data.Hitachi_st.SOURCE_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.SOURCE_ADDRESSES[PeerTraverser];
 800a5d0:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a5d4:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a5d8:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a5dc:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a5e0:	3366      	adds	r3, #102	; 0x66
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	4413      	add	r3, r2
 800a5e6:	685a      	ldr	r2, [r3, #4]
 800a5e8:	4844      	ldr	r0, [pc, #272]	; (800a6fc <ReAssignData+0x7fc>)
 800a5ea:	f101 0366 	add.w	r3, r1, #102	; 0x66
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4403      	add	r3, r0
 800a5f2:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.DEST_ADDRESSES[EthernetIndex] = EI_dataTempSerial.Hitachi_st.DEST_ADDRESSES[PeerTraverser];
 800a5f4:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a5f8:	f897 16b4 	ldrb.w	r1, [r7, #1716]	; 0x6b4
 800a5fc:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a600:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a604:	3370      	adds	r3, #112	; 0x70
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	483b      	ldr	r0, [pc, #236]	; (800a6fc <ReAssignData+0x7fc>)
 800a60e:	f101 0370 	add.w	r3, r1, #112	; 0x70
 800a612:	009b      	lsls	r3, r3, #2
 800a614:	4403      	add	r3, r0
 800a616:	605a      	str	r2, [r3, #4]
				EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][EthernetIndex] = EI_dataTempSerial.Hitachi_st.App_Identity_CRC[CARD_INDEX][PeerTraverser];
 800a618:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a61c:	f897 26b4 	ldrb.w	r2, [r7, #1716]	; 0x6b4
 800a620:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a624:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a628:	33f4      	adds	r3, #244	; 0xf4
 800a62a:	005b      	lsls	r3, r3, #1
 800a62c:	440b      	add	r3, r1
 800a62e:	8898      	ldrh	r0, [r3, #4]
 800a630:	4932      	ldr	r1, [pc, #200]	; (800a6fc <ReAssignData+0x7fc>)
 800a632:	f102 03f4 	add.w	r3, r2, #244	; 0xf4
 800a636:	005b      	lsls	r3, r3, #1
 800a638:	440b      	add	r3, r1
 800a63a:	4602      	mov	r2, r0
 800a63c:	809a      	strh	r2, [r3, #4]
				EI_data.Hitachi_st.Bool_outputs[EthernetIndex] = EI_dataTempSerial.Hitachi_st.Bool_outputs[PeerTraverser];
 800a63e:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a642:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a646:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 800a64a:	f5a1 61d7 	sub.w	r1, r1, #1720	; 0x6b8
 800a64e:	440a      	add	r2, r1
 800a650:	f892 10eb 	ldrb.w	r1, [r2, #235]	; 0xeb
 800a654:	4a29      	ldr	r2, [pc, #164]	; (800a6fc <ReAssignData+0x7fc>)
 800a656:	4413      	add	r3, r2
 800a658:	460a      	mov	r2, r1
 800a65a:	f883 20eb 	strb.w	r2, [r3, #235]	; 0xeb
				EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.COMM_FAILURE_TIME_OUT[PeerTraverser];
 800a65e:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a662:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a666:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a66a:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a66e:	318a      	adds	r1, #138	; 0x8a
 800a670:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a674:	4921      	ldr	r1, [pc, #132]	; (800a6fc <ReAssignData+0x7fc>)
 800a676:	338a      	adds	r3, #138	; 0x8a
 800a678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.STALE_DATA_TIME_OUT[EthernetIndex] = EI_dataTempSerial.Hitachi_st.STALE_DATA_TIME_OUT[PeerTraverser];
 800a67c:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a680:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a684:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a688:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a68c:	3194      	adds	r1, #148	; 0x94
 800a68e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a692:	491a      	ldr	r1, [pc, #104]	; (800a6fc <ReAssignData+0x7fc>)
 800a694:	3394      	adds	r3, #148	; 0x94
 800a696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				EI_data.Hitachi_st.LinkEstablishTimeout[EthernetIndex] = EI_dataTempSerial.Hitachi_st.LinkEstablishTimeout[PeerTraverser];
 800a69a:	f897 16b7 	ldrb.w	r1, [r7, #1719]	; 0x6b7
 800a69e:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a6a2:	f507 62d7 	add.w	r2, r7, #1720	; 0x6b8
 800a6a6:	f5a2 62d7 	sub.w	r2, r2, #1720	; 0x6b8
 800a6aa:	319e      	adds	r1, #158	; 0x9e
 800a6ac:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800a6b0:	4912      	ldr	r1, [pc, #72]	; (800a6fc <ReAssignData+0x7fc>)
 800a6b2:	339e      	adds	r3, #158	; 0x9e
 800a6b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				++EthernetIndex;
 800a6b8:	f897 36b4 	ldrb.w	r3, [r7, #1716]	; 0x6b4
 800a6bc:	3301      	adds	r3, #1
 800a6be:	f887 36b4 	strb.w	r3, [r7, #1716]	; 0x6b4
			for(PeerTraverser = 0 ;PeerTraverser<EI_dataTempSerial.Hitachi_st.PeersCnt;++PeerTraverser)
 800a6c2:	f897 36b7 	ldrb.w	r3, [r7, #1719]	; 0x6b7
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	f887 36b7 	strb.w	r3, [r7, #1719]	; 0x6b7
 800a6cc:	f507 63d7 	add.w	r3, r7, #1720	; 0x6b8
 800a6d0:	f5a3 63d7 	sub.w	r3, r3, #1720	; 0x6b8
 800a6d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a6d8:	f897 26b7 	ldrb.w	r2, [r7, #1719]	; 0x6b7
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	f4ff af57 	bcc.w	800a590 <ReAssignData+0x690>

			}
		}

		print_self_Details_Hitachi();
 800a6e2:	f7fe fe83 	bl	80093ec <print_self_Details_Hitachi>
 800a6e6:	e004      	b.n	800a6f2 <ReAssignData+0x7f2>

	}
	else
	{
		printf("\nNo PROBLEM Found\n");
 800a6e8:	4805      	ldr	r0, [pc, #20]	; (800a700 <ReAssignData+0x800>)
 800a6ea:	f01b fd05 	bl	80260f8 <puts>
 800a6ee:	e000      	b.n	800a6f2 <ReAssignData+0x7f2>
		return;
 800a6f0:	bf00      	nop
	}

}
 800a6f2:	f507 67d7 	add.w	r7, r7, #1720	; 0x6b8
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	bd80      	pop	{r7, pc}
 800a6fa:	bf00      	nop
 800a6fc:	20000504 	.word	0x20000504
 800a700:	080290a0 	.word	0x080290a0

0800a704 <ReArrangedVitalData>:

void ReArrangedVitalData(void)
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b082      	sub	sp, #8
 800a708:	af00      	add	r7, sp, #0
	if(ReorderFlag == SET)
 800a70a:	4b23      	ldr	r3, [pc, #140]	; (800a798 <ReArrangedVitalData+0x94>)
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d13d      	bne.n	800a78e <ReArrangedVitalData+0x8a>
	{
		memset(&HitachiEI_DataReArranged_st,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 800a712:	22a2      	movs	r2, #162	; 0xa2
 800a714:	2100      	movs	r1, #0
 800a716:	4821      	ldr	r0, [pc, #132]	; (800a79c <ReArrangedVitalData+0x98>)
 800a718:	f01b fb6a 	bl	8025df0 <memset>
		HitachiEI_DataReArranged_st.ActualDataBytes = vEI_Transver_EI_To_MIE.ActualDataBytes;
 800a71c:	4b20      	ldr	r3, [pc, #128]	; (800a7a0 <ReArrangedVitalData+0x9c>)
 800a71e:	881a      	ldrh	r2, [r3, #0]
 800a720:	4b1e      	ldr	r3, [pc, #120]	; (800a79c <ReArrangedVitalData+0x98>)
 800a722:	801a      	strh	r2, [r3, #0]

		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a724:	2300      	movs	r3, #0
 800a726:	71fb      	strb	r3, [r7, #7]
 800a728:	e02b      	b.n	800a782 <ReArrangedVitalData+0x7e>
		{
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a72a:	2300      	movs	r3, #0
 800a72c:	71bb      	strb	r3, [r7, #6]
 800a72e:	e01f      	b.n	800a770 <ReArrangedVitalData+0x6c>
			{
				if(EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser] == EI_BeforeReorderData.Hitachi_st.SOURCE_ADDRESSES[PeerFinder])
 800a730:	79fb      	ldrb	r3, [r7, #7]
 800a732:	4a1c      	ldr	r2, [pc, #112]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a734:	3366      	adds	r3, #102	; 0x66
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	685a      	ldr	r2, [r3, #4]
 800a73c:	79bb      	ldrb	r3, [r7, #6]
 800a73e:	491a      	ldr	r1, [pc, #104]	; (800a7a8 <ReArrangedVitalData+0xa4>)
 800a740:	3366      	adds	r3, #102	; 0x66
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d10e      	bne.n	800a76a <ReArrangedVitalData+0x66>
				{
					memcpy(&HitachiEI_DataReArranged_st.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],&vEI_Transver_EI_To_MIE.Inputs[PeerFinder * MAX_OUTPUTS_PER_PEER],MAX_OUTPUTS_PER_PEER);
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	011b      	lsls	r3, r3, #4
 800a750:	4a12      	ldr	r2, [pc, #72]	; (800a79c <ReArrangedVitalData+0x98>)
 800a752:	4413      	add	r3, r2
 800a754:	1c98      	adds	r0, r3, #2
 800a756:	79bb      	ldrb	r3, [r7, #6]
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4a11      	ldr	r2, [pc, #68]	; (800a7a0 <ReArrangedVitalData+0x9c>)
 800a75c:	4413      	add	r3, r2
 800a75e:	3302      	adds	r3, #2
 800a760:	2210      	movs	r2, #16
 800a762:	4619      	mov	r1, r3
 800a764:	f01b fb1c 	bl	8025da0 <memcpy>
					break;
 800a768:	e008      	b.n	800a77c <ReArrangedVitalData+0x78>
			for(uint8_t PeerFinder= 0;PeerFinder<EI_data.Hitachi_st.PeersCnt;++PeerFinder)
 800a76a:	79bb      	ldrb	r3, [r7, #6]
 800a76c:	3301      	adds	r3, #1
 800a76e:	71bb      	strb	r3, [r7, #6]
 800a770:	4b0c      	ldr	r3, [pc, #48]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a772:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a776:	79ba      	ldrb	r2, [r7, #6]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d3d9      	bcc.n	800a730 <ReArrangedVitalData+0x2c>
		for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800a77c:	79fb      	ldrb	r3, [r7, #7]
 800a77e:	3301      	adds	r3, #1
 800a780:	71fb      	strb	r3, [r7, #7]
 800a782:	4b08      	ldr	r3, [pc, #32]	; (800a7a4 <ReArrangedVitalData+0xa0>)
 800a784:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a788:	79fa      	ldrb	r2, [r7, #7]
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d3cd      	bcc.n	800a72a <ReArrangedVitalData+0x26>
				}
			}
		}
	}
}
 800a78e:	bf00      	nop
 800a790:	3708      	adds	r7, #8
 800a792:	46bd      	mov	sp, r7
 800a794:	bd80      	pop	{r7, pc}
 800a796:	bf00      	nop
 800a798:	2000254e 	.word	0x2000254e
 800a79c:	20002814 	.word	0x20002814
 800a7a0:	20002770 	.word	0x20002770
 800a7a4:	20000504 	.word	0x20000504
 800a7a8:	2000085c 	.word	0x2000085c

0800a7ac <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 800a7b2:	4b26      	ldr	r3, [pc, #152]	; (800a84c <reset_cause_get+0xa0>)
 800a7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	da02      	bge.n	800a7c0 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	71fb      	strb	r3, [r7, #7]
 800a7be:	e037      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 800a7c0:	4b22      	ldr	r3, [pc, #136]	; (800a84c <reset_cause_get+0xa0>)
 800a7c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d002      	beq.n	800a7d2 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	71fb      	strb	r3, [r7, #7]
 800a7d0:	e02e      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 800a7d2:	4b1e      	ldr	r3, [pc, #120]	; (800a84c <reset_cause_get+0xa0>)
 800a7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d002      	beq.n	800a7e4 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 800a7de:	2303      	movs	r3, #3
 800a7e0:	71fb      	strb	r3, [r7, #7]
 800a7e2:	e025      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800a7e4:	4b19      	ldr	r3, [pc, #100]	; (800a84c <reset_cause_get+0xa0>)
 800a7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	71fb      	strb	r3, [r7, #7]
 800a7f4:	e01c      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800a7f6:	4b15      	ldr	r3, [pc, #84]	; (800a84c <reset_cause_get+0xa0>)
 800a7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a7fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d002      	beq.n	800a808 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800a802:	2305      	movs	r3, #5
 800a804:	71fb      	strb	r3, [r7, #7]
 800a806:	e013      	b.n	800a830 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 800a808:	4b10      	ldr	r3, [pc, #64]	; (800a84c <reset_cause_get+0xa0>)
 800a80a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a80c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800a814:	2306      	movs	r3, #6
 800a816:	71fb      	strb	r3, [r7, #7]
 800a818:	e00a      	b.n	800a830 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 800a81a:	4b0c      	ldr	r3, [pc, #48]	; (800a84c <reset_cause_get+0xa0>)
 800a81c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a81e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a822:	2b00      	cmp	r3, #0
 800a824:	d002      	beq.n	800a82c <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800a826:	2307      	movs	r3, #7
 800a828:	71fb      	strb	r3, [r7, #7]
 800a82a:	e001      	b.n	800a830 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 800a82c:	2300      	movs	r3, #0
 800a82e:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <reset_cause_get+0xa0>)
 800a832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a834:	4a05      	ldr	r2, [pc, #20]	; (800a84c <reset_cause_get+0xa0>)
 800a836:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a83a:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 800a83c:	79fb      	ldrb	r3, [r7, #7]
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	40023800 	.word	0x40023800

0800a850 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 800a850:	b480      	push	{r7}
 800a852:	b085      	sub	sp, #20
 800a854:	af00      	add	r7, sp, #0
 800a856:	4603      	mov	r3, r0
 800a858:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 800a85a:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <reset_cause_get_name+0x7c>)
 800a85c:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 800a85e:	79fb      	ldrb	r3, [r7, #7]
 800a860:	2b07      	cmp	r3, #7
 800a862:	d82b      	bhi.n	800a8bc <reset_cause_get_name+0x6c>
 800a864:	a201      	add	r2, pc, #4	; (adr r2, 800a86c <reset_cause_get_name+0x1c>)
 800a866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a86a:	bf00      	nop
 800a86c:	0800a88d 	.word	0x0800a88d
 800a870:	0800a893 	.word	0x0800a893
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a89f 	.word	0x0800a89f
 800a87c:	0800a8a5 	.word	0x0800a8a5
 800a880:	0800a8ab 	.word	0x0800a8ab
 800a884:	0800a8b1 	.word	0x0800a8b1
 800a888:	0800a8b7 	.word	0x0800a8b7
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 800a88c:	4b10      	ldr	r3, [pc, #64]	; (800a8d0 <reset_cause_get_name+0x80>)
 800a88e:	60fb      	str	r3, [r7, #12]
            break;
 800a890:	e014      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 800a892:	4b10      	ldr	r3, [pc, #64]	; (800a8d4 <reset_cause_get_name+0x84>)
 800a894:	60fb      	str	r3, [r7, #12]
            break;
 800a896:	e011      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 800a898:	4b0f      	ldr	r3, [pc, #60]	; (800a8d8 <reset_cause_get_name+0x88>)
 800a89a:	60fb      	str	r3, [r7, #12]
            break;
 800a89c:	e00e      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 800a89e:	4b0f      	ldr	r3, [pc, #60]	; (800a8dc <reset_cause_get_name+0x8c>)
 800a8a0:	60fb      	str	r3, [r7, #12]
            break;
 800a8a2:	e00b      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 800a8a4:	4b0e      	ldr	r3, [pc, #56]	; (800a8e0 <reset_cause_get_name+0x90>)
 800a8a6:	60fb      	str	r3, [r7, #12]
            break;
 800a8a8:	e008      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 800a8aa:	4b0e      	ldr	r3, [pc, #56]	; (800a8e4 <reset_cause_get_name+0x94>)
 800a8ac:	60fb      	str	r3, [r7, #12]
            break;
 800a8ae:	e005      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 800a8b0:	4b0d      	ldr	r3, [pc, #52]	; (800a8e8 <reset_cause_get_name+0x98>)
 800a8b2:	60fb      	str	r3, [r7, #12]
            break;
 800a8b4:	e002      	b.n	800a8bc <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 800a8b6:	4b0d      	ldr	r3, [pc, #52]	; (800a8ec <reset_cause_get_name+0x9c>)
 800a8b8:	60fb      	str	r3, [r7, #12]
            break;
 800a8ba:	bf00      	nop
    }

    return reset_cause_name;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	080290b4 	.word	0x080290b4
 800a8d0:	080290b8 	.word	0x080290b8
 800a8d4:	080290c0 	.word	0x080290c0
 800a8d8:	080290d0 	.word	0x080290d0
 800a8dc:	080290e8 	.word	0x080290e8
 800a8e0:	08029104 	.word	0x08029104
 800a8e4:	08029114 	.word	0x08029114
 800a8e8:	08029144 	.word	0x08029144
 800a8ec:	08029160 	.word	0x08029160

0800a8f0 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800a8f4:	f00d fbd4 	bl	80180a0 <Print_BuildDat_Details>

		readCanToStructs();
 800a8f8:	f006 fcbc 	bl	8011274 <readCanToStructs>

		Feed_wdt();
 800a8fc:	f00b f952 	bl	8015ba4 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 800a900:	4810      	ldr	r0, [pc, #64]	; (800a944 <Process_Medha_EI+0x54>)
 800a902:	f011 feb9 	bl	801c678 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800a906:	f000 f91f 	bl	800ab48 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 800a90a:	f000 fef7 	bl	800b6fc <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 800a90e:	f000 ff5d 	bl	800b7cc <Process_Clear_Relays>

		Send_Data_to_Other();
 800a912:	f001 f841 	bl	800b998 <Send_Data_to_Other>

		Process_Data_from_Other();
 800a916:	f001 f899 	bl	800ba4c <Process_Data_from_Other>

		CheckforMedhaCMD();
 800a91a:	f001 fa6d 	bl	800bdf8 <CheckforMedhaCMD>

		CheckEIPC_DAT_CRC();
 800a91e:	f7f6 fb15 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800a922:	4b09      	ldr	r3, [pc, #36]	; (800a948 <Process_Medha_EI+0x58>)
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d003      	beq.n	800a932 <Process_Medha_EI+0x42>
		{
			gucFlagUpdate = 3;
 800a92a:	4b08      	ldr	r3, [pc, #32]	; (800a94c <Process_Medha_EI+0x5c>)
 800a92c:	2203      	movs	r2, #3
 800a92e:	701a      	strb	r2, [r3, #0]
			break;
 800a930:	e002      	b.n	800a938 <Process_Medha_EI+0x48>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 800a932:	f00e fa1d 	bl	8018d70 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800a936:	e7dd      	b.n	800a8f4 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800a938:	4802      	ldr	r0, [pc, #8]	; (800a944 <Process_Medha_EI+0x54>)
 800a93a:	f011 fe9d 	bl	801c678 <HAL_IWDG_Refresh>
		Data_Processing();
 800a93e:	f00d faad 	bl	8017e9c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800a942:	e7f9      	b.n	800a938 <Process_Medha_EI+0x48>
 800a944:	2000b414 	.word	0x2000b414
 800a948:	20000bba 	.word	0x20000bba
 800a94c:	20000fbd 	.word	0x20000fbd

0800a950 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b084      	sub	sp, #16
 800a954:	af00      	add	r7, sp, #0
 800a956:	4603      	mov	r3, r0
 800a958:	6039      	str	r1, [r7, #0]
 800a95a:	71fb      	strb	r3, [r7, #7]
 800a95c:	4613      	mov	r3, r2
 800a95e:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 800a960:	2300      	movs	r3, #0
 800a962:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 800a964:	2300      	movs	r3, #0
 800a966:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800a968:	e0d0      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800a96a:	79fb      	ldrb	r3, [r7, #7]
 800a96c:	4618      	mov	r0, r3
 800a96e:	f00e f8e9 	bl	8018b44 <Com_Get_Byte>
 800a972:	4603      	mov	r3, r0
 800a974:	461a      	mov	r2, r3
 800a976:	4b6c      	ldr	r3, [pc, #432]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a978:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800a97a:	4b6c      	ldr	r3, [pc, #432]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	3b01      	subs	r3, #1
 800a980:	2b04      	cmp	r3, #4
 800a982:	f200 80c2 	bhi.w	800ab0a <Get_Medha_EI_Message+0x1ba>
 800a986:	a201      	add	r2, pc, #4	; (adr r2, 800a98c <Get_Medha_EI_Message+0x3c>)
 800a988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a98c:	0800a9a1 	.word	0x0800a9a1
 800a990:	0800a9b9 	.word	0x0800a9b9
 800a994:	0800ab0b 	.word	0x0800ab0b
 800a998:	0800aa05 	.word	0x0800aa05
 800a99c:	0800aa5d 	.word	0x0800aa5d
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 800a9a0:	4b61      	ldr	r3, [pc, #388]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	2b53      	cmp	r3, #83	; 0x53
 800a9a6:	f040 80b1 	bne.w	800ab0c <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 800a9aa:	4b61      	ldr	r3, [pc, #388]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a9b0:	4b5e      	ldr	r3, [pc, #376]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a9b2:	2202      	movs	r2, #2
 800a9b4:	701a      	strb	r2, [r3, #0]
			}
			break;
 800a9b6:	e0a9      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 800a9b8:	4b5d      	ldr	r3, [pc, #372]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9ba:	881b      	ldrh	r3, [r3, #0]
 800a9bc:	2b08      	cmp	r3, #8
 800a9be:	d111      	bne.n	800a9e4 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 800a9c0:	4b5b      	ldr	r3, [pc, #364]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9c2:	881b      	ldrh	r3, [r3, #0]
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	4413      	add	r3, r2
 800a9ca:	4a57      	ldr	r2, [pc, #348]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9cc:	7812      	ldrb	r2, [r2, #0]
 800a9ce:	701a      	strb	r2, [r3, #0]
					i++;
 800a9d0:	4b57      	ldr	r3, [pc, #348]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9d2:	881b      	ldrh	r3, [r3, #0]
 800a9d4:	3301      	adds	r3, #1
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	4b55      	ldr	r3, [pc, #340]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9da:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 800a9dc:	4b53      	ldr	r3, [pc, #332]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800a9de:	2204      	movs	r2, #4
 800a9e0:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 800a9e2:	e00d      	b.n	800aa00 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 800a9e4:	4b52      	ldr	r3, [pc, #328]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9e6:	881b      	ldrh	r3, [r3, #0]
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	4a4e      	ldr	r2, [pc, #312]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800a9f0:	7812      	ldrb	r2, [r2, #0]
 800a9f2:	701a      	strb	r2, [r3, #0]
					i++;
 800a9f4:	4b4e      	ldr	r3, [pc, #312]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9f6:	881b      	ldrh	r3, [r3, #0]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	4b4c      	ldr	r3, [pc, #304]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800a9fe:	801a      	strh	r2, [r3, #0]
				break;
 800aa00:	bf00      	nop
			}
			break;
 800aa02:	e083      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 800aa04:	4b4a      	ldr	r3, [pc, #296]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa06:	881b      	ldrh	r3, [r3, #0]
 800aa08:	3b02      	subs	r3, #2
 800aa0a:	683a      	ldr	r2, [r7, #0]
 800aa0c:	4413      	add	r3, r2
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 800aa14:	4b47      	ldr	r3, [pc, #284]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa16:	2200      	movs	r2, #0
 800aa18:	801a      	strh	r2, [r3, #0]
				j=1;
 800aa1a:	4b47      	ldr	r3, [pc, #284]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa1c:	2201      	movs	r2, #1
 800aa1e:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 800aa20:	4b43      	ldr	r3, [pc, #268]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	461a      	mov	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	4413      	add	r3, r2
 800aa2a:	4a3f      	ldr	r2, [pc, #252]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800aa2c:	7812      	ldrb	r2, [r2, #0]
 800aa2e:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 800aa30:	4b40      	ldr	r3, [pc, #256]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa32:	881b      	ldrh	r3, [r3, #0]
 800aa34:	3301      	adds	r3, #1
 800aa36:	b29a      	uxth	r2, r3
 800aa38:	4b3e      	ldr	r3, [pc, #248]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa3a:	801a      	strh	r2, [r3, #0]
				i++;
 800aa3c:	4b3c      	ldr	r3, [pc, #240]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa3e:	881b      	ldrh	r3, [r3, #0]
 800aa40:	3301      	adds	r3, #1
 800aa42:	b29a      	uxth	r2, r3
 800aa44:	4b3a      	ldr	r3, [pc, #232]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa46:	801a      	strh	r2, [r3, #0]
				j++;
 800aa48:	4b3b      	ldr	r3, [pc, #236]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa4a:	881b      	ldrh	r3, [r3, #0]
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	4b39      	ldr	r3, [pc, #228]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa52:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 800aa54:	4b35      	ldr	r3, [pc, #212]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800aa56:	2205      	movs	r2, #5
 800aa58:	701a      	strb	r2, [r3, #0]
				break;
 800aa5a:	e057      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 800aa5c:	4b34      	ldr	r3, [pc, #208]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa5e:	881b      	ldrh	r3, [r3, #0]
 800aa60:	461a      	mov	r2, r3
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	4413      	add	r3, r2
 800aa66:	4a30      	ldr	r2, [pc, #192]	; (800ab28 <Get_Medha_EI_Message+0x1d8>)
 800aa68:	7812      	ldrb	r2, [r2, #0]
 800aa6a:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800aa6c:	89ba      	ldrh	r2, [r7, #12]
 800aa6e:	4b31      	ldr	r3, [pc, #196]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d940      	bls.n	800aaf8 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800aa76:	4b2f      	ldr	r3, [pc, #188]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa78:	881b      	ldrh	r3, [r3, #0]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	b29a      	uxth	r2, r3
 800aa7e:	4b2d      	ldr	r3, [pc, #180]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa80:	801a      	strh	r2, [r3, #0]
					i++;
 800aa82:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	3301      	adds	r3, #1
 800aa88:	b29a      	uxth	r2, r3
 800aa8a:	4b29      	ldr	r3, [pc, #164]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aa8c:	801a      	strh	r2, [r3, #0]
					j++;
 800aa8e:	4b2a      	ldr	r3, [pc, #168]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa90:	881b      	ldrh	r3, [r3, #0]
 800aa92:	3301      	adds	r3, #1
 800aa94:	b29a      	uxth	r2, r3
 800aa96:	4b28      	ldr	r3, [pc, #160]	; (800ab38 <Get_Medha_EI_Message+0x1e8>)
 800aa98:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800aa9a:	89ba      	ldrh	r2, [r7, #12]
 800aa9c:	4b25      	ldr	r3, [pc, #148]	; (800ab34 <Get_Medha_EI_Message+0x1e4>)
 800aa9e:	881b      	ldrh	r3, [r3, #0]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d133      	bne.n	800ab0c <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 800aaa4:	4b22      	ldr	r3, [pc, #136]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	3b04      	subs	r3, #4
 800aaaa:	b29a      	uxth	r2, r3
 800aaac:	4b23      	ldr	r3, [pc, #140]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aaae:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 800aab0:	4b22      	ldr	r3, [pc, #136]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aab2:	881b      	ldrh	r3, [r3, #0]
 800aab4:	81fb      	strh	r3, [r7, #14]
						i = 0;
 800aab6:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800aabc:	4b1b      	ldr	r3, [pc, #108]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800aabe:	2201      	movs	r2, #1
 800aac0:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 800aac6:	89fb      	ldrh	r3, [r7, #14]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d804      	bhi.n	800aad6 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800aacc:	481c      	ldr	r0, [pc, #112]	; (800ab40 <Get_Medha_EI_Message+0x1f0>)
 800aace:	f01b fb13 	bl	80260f8 <puts>
							return ZERO;
 800aad2:	2300      	movs	r3, #0
 800aad4:	e023      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 800aad6:	4b19      	ldr	r3, [pc, #100]	; (800ab3c <Get_Medha_EI_Message+0x1ec>)
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	461a      	mov	r2, r3
 800aadc:	6839      	ldr	r1, [r7, #0]
 800aade:	2000      	movs	r0, #0
 800aae0:	f001 fc4c 	bl	800c37c <CheckCRC32>
 800aae4:	4603      	mov	r3, r0
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d001      	beq.n	800aaee <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800aaea:	89fb      	ldrh	r3, [r7, #14]
 800aaec:	e017      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800aaee:	4815      	ldr	r0, [pc, #84]	; (800ab44 <Get_Medha_EI_Message+0x1f4>)
 800aaf0:	f01b fb02 	bl	80260f8 <puts>
							return ZERO;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	e012      	b.n	800ab1e <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800aaf8:	4b0d      	ldr	r3, [pc, #52]	; (800ab30 <Get_Medha_EI_Message+0x1e0>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800aafe:	4b0b      	ldr	r3, [pc, #44]	; (800ab2c <Get_Medha_EI_Message+0x1dc>)
 800ab00:	2201      	movs	r2, #1
 800ab02:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 800ab04:	2300      	movs	r3, #0
 800ab06:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800ab08:	e000      	b.n	800ab0c <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800ab0a:	bf00      	nop
	while(Com_DataReady(ComPort))
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	4618      	mov	r0, r3
 800ab10:	f00d ffd8 	bl	8018ac4 <Com_DataReady>
 800ab14:	4603      	mov	r3, r0
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	f47f af27 	bne.w	800a96a <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	3710      	adds	r7, #16
 800ab22:	46bd      	mov	sp, r7
 800ab24:	bd80      	pop	{r7, pc}
 800ab26:	bf00      	nop
 800ab28:	20003f90 	.word	0x20003f90
 800ab2c:	20000316 	.word	0x20000316
 800ab30:	20003f92 	.word	0x20003f92
 800ab34:	20003f94 	.word	0x20003f94
 800ab38:	20003f96 	.word	0x20003f96
 800ab3c:	20003f98 	.word	0x20003f98
 800ab40:	08029178 	.word	0x08029178
 800ab44:	08029180 	.word	0x08029180

0800ab48 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800ab48:	b5b0      	push	{r4, r5, r7, lr}
 800ab4a:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 800ab4e:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 800ab50:	2300      	movs	r3, #0
 800ab52:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800ab56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800ab5e:	2200      	movs	r2, #0
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	3304      	adds	r3, #4
 800ab64:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ab68:	2100      	movs	r1, #0
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f01b f940 	bl	8025df0 <memset>
	uint16_t NoOfInputs 		= 0;
 800ab70:	2300      	movs	r3, #0
 800ab72:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800ab76:	2300      	movs	r3, #0
 800ab78:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800ab7c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ab80:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800ab84:	2200      	movs	r2, #0
 800ab86:	601a      	str	r2, [r3, #0]
 800ab88:	3304      	adds	r3, #4
 800ab8a:	227c      	movs	r2, #124	; 0x7c
 800ab8c:	2100      	movs	r1, #0
 800ab8e:	4618      	mov	r0, r3
 800ab90:	f01b f92e 	bl	8025df0 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 800ab94:	2300      	movs	r3, #0
 800ab96:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 800aba0:	4bc8      	ldr	r3, [pc, #800]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800aba2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800aba6:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800abaa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fece 	bl	800a950 <Get_Medha_EI_Message>
 800abb4:	4603      	mov	r3, r0
 800abb6:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800abba:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800abbe:	2b05      	cmp	r3, #5
 800abc0:	d939      	bls.n	800ac36 <Medha_EI_Analyser+0xee>
	{
		HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 800abc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800abc6:	48c0      	ldr	r0, [pc, #768]	; (800aec8 <Medha_EI_Analyser+0x380>)
 800abc8:	f010 fed9 	bl	801b97e <HAL_GPIO_TogglePin>
		printf("Raw Data:\n");
 800abcc:	48bf      	ldr	r0, [pc, #764]	; (800aecc <Medha_EI_Analyser+0x384>)
 800abce:	f01b fa93 	bl	80260f8 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800abd2:	2300      	movs	r3, #0
 800abd4:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800abd8:	e024      	b.n	800ac24 <Medha_EI_Analyser+0xdc>
		{

			if((i!=0) && ((i%10)==0))
 800abda:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d010      	beq.n	800ac04 <Medha_EI_Analyser+0xbc>
 800abe2:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800abe6:	4bba      	ldr	r3, [pc, #744]	; (800aed0 <Medha_EI_Analyser+0x388>)
 800abe8:	fba3 1302 	umull	r1, r3, r3, r2
 800abec:	08d9      	lsrs	r1, r3, #3
 800abee:	460b      	mov	r3, r1
 800abf0:	009b      	lsls	r3, r3, #2
 800abf2:	440b      	add	r3, r1
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d102      	bne.n	800ac04 <Medha_EI_Analyser+0xbc>
			{
				printf("\n");
 800abfe:	200a      	movs	r0, #10
 800ac00:	f01b f9f6 	bl	8025ff0 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800ac04:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ac08:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800ac0c:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800ac10:	5cd3      	ldrb	r3, [r2, r3]
 800ac12:	4619      	mov	r1, r3
 800ac14:	48af      	ldr	r0, [pc, #700]	; (800aed4 <Medha_EI_Analyser+0x38c>)
 800ac16:	f01b f9d3 	bl	8025fc0 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 800ac1a:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800ac1e:	3301      	adds	r3, #1
 800ac20:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800ac24:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800ac28:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d3d4      	bcc.n	800abda <Medha_EI_Analyser+0x92>
		}
		printf("\n");
 800ac30:	200a      	movs	r0, #10
 800ac32:	f01b f9dd 	bl	8025ff0 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 800ac36:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	f000 83d5 	beq.w	800b3ea <Medha_EI_Analyser+0x8a2>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800ac40:	463b      	mov	r3, r7
 800ac42:	f44f 7292 	mov.w	r2, #292	; 0x124
 800ac46:	2100      	movs	r1, #0
 800ac48:	4618      	mov	r0, r3
 800ac4a:	f01b f8d1 	bl	8025df0 <memset>

		BYTEINIT(0);
 800ac4e:	2300      	movs	r3, #0
 800ac50:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800ac54:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac58:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac5c:	4413      	add	r3, r2
 800ac5e:	781a      	ldrb	r2, [r3, #0]
 800ac60:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac64:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac68:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 800ac6a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac6e:	3301      	adds	r3, #1
 800ac70:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800ac74:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ac78:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ac7c:	4413      	add	r3, r2
 800ac7e:	881b      	ldrh	r3, [r3, #0]
 800ac80:	b29a      	uxth	r2, r3
 800ac82:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac86:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac8a:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 800ac8c:	4b8d      	ldr	r3, [pc, #564]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800ac8e:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 800ac92:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ac96:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ac9a:	889b      	ldrh	r3, [r3, #4]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d017      	beq.n	800acd0 <Medha_EI_Analyser+0x188>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 800aca0:	488d      	ldr	r0, [pc, #564]	; (800aed8 <Medha_EI_Analyser+0x390>)
 800aca2:	f01b fa29 	bl	80260f8 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800aca6:	4b87      	ldr	r3, [pc, #540]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800aca8:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800acac:	4619      	mov	r1, r3
 800acae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acb2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acb6:	889b      	ldrh	r3, [r3, #4]
 800acb8:	461a      	mov	r2, r3
 800acba:	4888      	ldr	r0, [pc, #544]	; (800aedc <Medha_EI_Analyser+0x394>)
 800acbc:	f01b f980 	bl	8025fc0 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800acc0:	4987      	ldr	r1, [pc, #540]	; (800aee0 <Medha_EI_Analyser+0x398>)
 800acc2:	4888      	ldr	r0, [pc, #544]	; (800aee4 <Medha_EI_Analyser+0x39c>)
 800acc4:	f7f5 fabc 	bl	8000240 <strcmp>
 800acc8:	4603      	mov	r3, r0
 800acca:	2b00      	cmp	r3, #0
 800accc:	f040 838f 	bne.w	800b3ee <Medha_EI_Analyser+0x8a6>
			{
				return;
			}
		}
		BYTEINC(2);
 800acd0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acd4:	3302      	adds	r3, #2
 800acd6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 800acda:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800acde:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ace2:	4413      	add	r3, r2
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29a      	uxth	r2, r3
 800ace8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800acf0:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800acf2:	4b74      	ldr	r3, [pc, #464]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800acf4:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 800acf8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800acfc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad00:	885b      	ldrh	r3, [r3, #2]
 800ad02:	429a      	cmp	r2, r3
 800ad04:	d017      	beq.n	800ad36 <Medha_EI_Analyser+0x1ee>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800ad06:	4878      	ldr	r0, [pc, #480]	; (800aee8 <Medha_EI_Analyser+0x3a0>)
 800ad08:	f01b f9f6 	bl	80260f8 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 800ad0c:	4b6d      	ldr	r3, [pc, #436]	; (800aec4 <Medha_EI_Analyser+0x37c>)
 800ad0e:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800ad12:	4619      	mov	r1, r3
 800ad14:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad18:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad1c:	885b      	ldrh	r3, [r3, #2]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	486e      	ldr	r0, [pc, #440]	; (800aedc <Medha_EI_Analyser+0x394>)
 800ad22:	f01b f94d 	bl	8025fc0 <iprintf>
			if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") != 0)
 800ad26:	496e      	ldr	r1, [pc, #440]	; (800aee0 <Medha_EI_Analyser+0x398>)
 800ad28:	486e      	ldr	r0, [pc, #440]	; (800aee4 <Medha_EI_Analyser+0x39c>)
 800ad2a:	f7f5 fa89 	bl	8000240 <strcmp>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	f040 835e 	bne.w	800b3f2 <Medha_EI_Analyser+0x8aa>
			{
				return;
			}		}
		BYTEINC(2);
 800ad36:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad3a:	3302      	adds	r3, #2
 800ad3c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800ad40:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad44:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad48:	4413      	add	r3, r2
 800ad4a:	781a      	ldrb	r2, [r3, #0]
 800ad4c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad50:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad54:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 800ad56:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad5a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad5e:	799b      	ldrb	r3, [r3, #6]
 800ad60:	2baa      	cmp	r3, #170	; 0xaa
 800ad62:	d010      	beq.n	800ad86 <Medha_EI_Analyser+0x23e>
 800ad64:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad68:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad6c:	799b      	ldrb	r3, [r3, #6]
 800ad6e:	2bbb      	cmp	r3, #187	; 0xbb
 800ad70:	d009      	beq.n	800ad86 <Medha_EI_Analyser+0x23e>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 800ad72:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ad76:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ad7a:	799b      	ldrb	r3, [r3, #6]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	485b      	ldr	r0, [pc, #364]	; (800aeec <Medha_EI_Analyser+0x3a4>)
 800ad80:	f01b f91e 	bl	8025fc0 <iprintf>
			return;
 800ad84:	e336      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(1);
 800ad86:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800ad90:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ad94:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ad98:	4413      	add	r3, r2
 800ad9a:	781a      	ldrb	r2, [r3, #0]
 800ad9c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ada0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ada4:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 800ada6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adaa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adae:	79db      	ldrb	r3, [r3, #7]
 800adb0:	2be1      	cmp	r3, #225	; 0xe1
 800adb2:	d009      	beq.n	800adc8 <Medha_EI_Analyser+0x280>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800adb4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800adb8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800adbc:	79db      	ldrb	r3, [r3, #7]
 800adbe:	4619      	mov	r1, r3
 800adc0:	484b      	ldr	r0, [pc, #300]	; (800aef0 <Medha_EI_Analyser+0x3a8>)
 800adc2:	f01b f8fd 	bl	8025fc0 <iprintf>
			return;
 800adc6:	e315      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800adc8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adcc:	3301      	adds	r3, #1
 800adce:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800add2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800add6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800adda:	4413      	add	r3, r2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	b29a      	uxth	r2, r3
 800ade0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ade4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ade8:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 800adea:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adee:	3302      	adds	r3, #2
 800adf0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800adf4:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800adf8:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800adfc:	4413      	add	r3, r2
 800adfe:	781a      	ldrb	r2, [r3, #0]
 800ae00:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae04:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae08:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 800ae0a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae0e:	3301      	adds	r3, #1
 800ae10:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800ae14:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae18:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae1c:	441a      	add	r2, r3
 800ae1e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae22:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae26:	330b      	adds	r3, #11
 800ae28:	6811      	ldr	r1, [r2, #0]
 800ae2a:	6019      	str	r1, [r3, #0]
 800ae2c:	8891      	ldrh	r1, [r2, #4]
 800ae2e:	7992      	ldrb	r2, [r2, #6]
 800ae30:	8099      	strh	r1, [r3, #4]
 800ae32:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 800ae34:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae38:	3307      	adds	r3, #7
 800ae3a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800ae3e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae42:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae46:	4413      	add	r3, r2
 800ae48:	781a      	ldrb	r2, [r3, #0]
 800ae4a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae4e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae52:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 800ae54:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae58:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae5c:	7c9b      	ldrb	r3, [r3, #18]
 800ae5e:	2b11      	cmp	r3, #17
 800ae60:	d009      	beq.n	800ae76 <Medha_EI_Analyser+0x32e>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 800ae62:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae66:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae6a:	7c9b      	ldrb	r3, [r3, #18]
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4821      	ldr	r0, [pc, #132]	; (800aef4 <Medha_EI_Analyser+0x3ac>)
 800ae70:	f01b f8a6 	bl	8025fc0 <iprintf>
			return;
 800ae74:	e2be      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}

		BYTEINC(1);
 800ae76:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800ae80:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae84:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 800ae88:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800ae8c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800ae90:	4413      	add	r3, r2
 800ae92:	881b      	ldrh	r3, [r3, #0]
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800ae9a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800ae9e:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800aea0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aea4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aea8:	695b      	ldr	r3, [r3, #20]
 800aeaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeae:	d925      	bls.n	800aefc <Medha_EI_Analyser+0x3b4>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%lu\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800aeb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800aeb4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800aeb8:	695b      	ldr	r3, [r3, #20]
 800aeba:	4619      	mov	r1, r3
 800aebc:	480e      	ldr	r0, [pc, #56]	; (800aef8 <Medha_EI_Analyser+0x3b0>)
 800aebe:	f01b f87f 	bl	8025fc0 <iprintf>
			return;
 800aec2:	e297      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
 800aec4:	20000504 	.word	0x20000504
 800aec8:	40021c00 	.word	0x40021c00
 800aecc:	08029188 	.word	0x08029188
 800aed0:	cccccccd 	.word	0xcccccccd
 800aed4:	08029194 	.word	0x08029194
 800aed8:	0802919c 	.word	0x0802919c
 800aedc:	080291d0 	.word	0x080291d0
 800aee0:	080291f4 	.word	0x080291f4
 800aee4:	20000505 	.word	0x20000505
 800aee8:	08029200 	.word	0x08029200
 800aeec:	08029230 	.word	0x08029230
 800aef0:	08029268 	.word	0x08029268
 800aef4:	080292a0 	.word	0x080292a0
 800aef8:	080292e4 	.word	0x080292e4
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800aefc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af00:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af04:	695a      	ldr	r2, [r3, #20]
 800af06:	4baa      	ldr	r3, [pc, #680]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af08:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d01b      	beq.n	800af48 <Medha_EI_Analyser+0x400>
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800af10:	49a8      	ldr	r1, [pc, #672]	; (800b1b4 <Medha_EI_Analyser+0x66c>)
 800af12:	48a9      	ldr	r0, [pc, #676]	; (800b1b8 <Medha_EI_Analyser+0x670>)
 800af14:	f7f5 f994 	bl	8000240 <strcmp>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d00c      	beq.n	800af38 <Medha_EI_Analyser+0x3f0>
			{
				printf("No of Relays Not Matching...\nConfigured:%lu - Received:%lu\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 800af1e:	4ba4      	ldr	r3, [pc, #656]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af20:	f8d3 1328 	ldr.w	r1, [r3, #808]	; 0x328
 800af24:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af28:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af2c:	695b      	ldr	r3, [r3, #20]
 800af2e:	461a      	mov	r2, r3
 800af30:	48a2      	ldr	r0, [pc, #648]	; (800b1bc <Medha_EI_Analyser+0x674>)
 800af32:	f01b f845 	bl	8025fc0 <iprintf>
				return;
 800af36:	e25d      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
			}
			else
			{
				EI_data.Medha_Prms_st.NoofRelays = Medha_EI_Temp_Rx_st.NoofRelays;
 800af38:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af3c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af40:	695b      	ldr	r3, [r3, #20]
 800af42:	4a9b      	ldr	r2, [pc, #620]	; (800b1b0 <Medha_EI_Analyser+0x668>)
 800af44:	f8c2 3328 	str.w	r3, [r2, #808]	; 0x328
			}
		}

		BYTEINC(2);
 800af48:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800af4c:	3302      	adds	r3, #2
 800af4e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 800af52:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af56:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af5a:	695b      	ldr	r3, [r3, #20]
 800af5c:	b29b      	uxth	r3, r3
 800af5e:	f003 0307 	and.w	r3, r3, #7
 800af62:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800af66:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d00a      	beq.n	800af84 <Medha_EI_Analyser+0x43c>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 800af6e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af72:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	08db      	lsrs	r3, r3, #3
 800af7a:	b29b      	uxth	r3, r3
 800af7c:	3301      	adds	r3, #1
 800af7e:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 800af82:	e007      	b.n	800af94 <Medha_EI_Analyser+0x44c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 800af84:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800af88:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800af8c:	695b      	ldr	r3, [r3, #20]
 800af8e:	08db      	lsrs	r3, r3, #3
 800af90:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800af94:	2300      	movs	r3, #0
 800af96:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800af9a:	e02a      	b.n	800aff2 <Medha_EI_Analyser+0x4aa>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 800af9c:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800afa0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afa4:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800afa8:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800afac:	5c89      	ldrb	r1, [r1, r2]
 800afae:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afb2:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800afb6:	4413      	add	r3, r2
 800afb8:	460a      	mov	r2, r1
 800afba:	761a      	strb	r2, [r3, #24]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800afbc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afc0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afc4:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800afc8:	4413      	add	r3, r2
 800afca:	7e1a      	ldrb	r2, [r3, #24]
 800afcc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afd0:	43d2      	mvns	r2, r2
 800afd2:	b2d1      	uxtb	r1, r2
 800afd4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800afd8:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800afdc:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800afde:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800afe2:	3301      	adds	r3, #1
 800afe4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800afe8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800afec:	3301      	adds	r3, #1
 800afee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800aff2:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800aff6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800affa:	429a      	cmp	r2, r3
 800affc:	d3ce      	bcc.n	800af9c <Medha_EI_Analyser+0x454>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800affe:	2300      	movs	r3, #0
 800b000:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b004:	e01a      	b.n	800b03c <Medha_EI_Analyser+0x4f4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 800b006:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800b00a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b00e:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800b012:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800b016:	5c89      	ldrb	r1, [r1, r2]
 800b018:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b01c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800b020:	4413      	add	r3, r2
 800b022:	460a      	mov	r2, r1
 800b024:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
			BYTEINC(1);
 800b028:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b02c:	3301      	adds	r3, #1
 800b02e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b032:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b036:	3301      	adds	r3, #1
 800b038:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b03c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b040:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b044:	429a      	cmp	r2, r3
 800b046:	d3de      	bcc.n	800b006 <Medha_EI_Analyser+0x4be>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 800b048:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 800b04c:	f507 7192 	add.w	r1, r7, #292	; 0x124
 800b050:	463b      	mov	r3, r7
 800b052:	3398      	adds	r3, #152	; 0x98
 800b054:	4618      	mov	r0, r3
 800b056:	f01a fe93 	bl	8025d80 <memcmp>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d03f      	beq.n	800b0e0 <Medha_EI_Analyser+0x598>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 800b060:	4857      	ldr	r0, [pc, #348]	; (800b1c0 <Medha_EI_Analyser+0x678>)
 800b062:	f01b f849 	bl	80260f8 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b066:	2300      	movs	r3, #0
 800b068:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b06c:	e011      	b.n	800b092 <Medha_EI_Analyser+0x54a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 800b06e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b072:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b076:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800b07a:	4413      	add	r3, r2
 800b07c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800b080:	4619      	mov	r1, r3
 800b082:	4850      	ldr	r0, [pc, #320]	; (800b1c4 <Medha_EI_Analyser+0x67c>)
 800b084:	f01a ff9c 	bl	8025fc0 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b088:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b08c:	3301      	adds	r3, #1
 800b08e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b092:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b096:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d3e7      	bcc.n	800b06e <Medha_EI_Analyser+0x526>
			}

			printf("\nExpected Compliment Relay Status:\n");
 800b09e:	484a      	ldr	r0, [pc, #296]	; (800b1c8 <Medha_EI_Analyser+0x680>)
 800b0a0:	f01b f82a 	bl	80260f8 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b0aa:	e00f      	b.n	800b0cc <Medha_EI_Analyser+0x584>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800b0ac:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b0b0:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800b0b4:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800b0b8:	5cd3      	ldrb	r3, [r2, r3]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4841      	ldr	r0, [pc, #260]	; (800b1c4 <Medha_EI_Analyser+0x67c>)
 800b0be:	f01a ff7f 	bl	8025fc0 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 800b0c2:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b0cc:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b0d0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b0d4:	429a      	cmp	r2, r3
 800b0d6:	d3e9      	bcc.n	800b0ac <Medha_EI_Analyser+0x564>
			}

			printf("\nPACKET Rejected\n");
 800b0d8:	483c      	ldr	r0, [pc, #240]	; (800b1cc <Medha_EI_Analyser+0x684>)
 800b0da:	f01b f80d 	bl	80260f8 <puts>
			return;
 800b0de:	e189      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 800b0e0:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800b0e4:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800b0e8:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f001 f911 	bl	800c314 <GetCRC32>
 800b0f2:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 800b0f6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b0fa:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b0fe:	4413      	add	r3, r2
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b108:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b10c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 800b110:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b114:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b118:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b11c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800b120:	429a      	cmp	r2, r3
 800b122:	d00c      	beq.n	800b13e <Medha_EI_Analyser+0x5f6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 800b124:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b128:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b12c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b130:	461a      	mov	r2, r3
 800b132:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 800b136:	4826      	ldr	r0, [pc, #152]	; (800b1d0 <Medha_EI_Analyser+0x688>)
 800b138:	f01a ff42 	bl	8025fc0 <iprintf>
			return;
 800b13c:	e15a      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
		}
		BYTEINC(4);
 800b13e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b142:	3304      	adds	r3, #4
 800b144:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 800b148:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b14c:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800b150:	4413      	add	r3, r2
 800b152:	881b      	ldrh	r3, [r3, #0]
 800b154:	b29a      	uxth	r2, r3
 800b156:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b15a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b15e:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 800b162:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800b166:	3302      	adds	r3, #2
 800b168:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 800b16c:	f00e f812 	bl	8019194 <HAL_GetTick>
 800b170:	4603      	mov	r3, r0
 800b172:	4a18      	ldr	r2, [pc, #96]	; (800b1d4 <Medha_EI_Analyser+0x68c>)
 800b174:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 800b176:	4a18      	ldr	r2, [pc, #96]	; (800b1d8 <Medha_EI_Analyser+0x690>)
 800b178:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b17c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b180:	4610      	mov	r0, r2
 800b182:	4619      	mov	r1, r3
 800b184:	f44f 7392 	mov.w	r3, #292	; 0x124
 800b188:	461a      	mov	r2, r3
 800b18a:	f01a fe09 	bl	8025da0 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 800b18e:	4b13      	ldr	r3, [pc, #76]	; (800b1dc <Medha_EI_Analyser+0x694>)
 800b190:	2201      	movs	r2, #1
 800b192:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b194:	4b10      	ldr	r3, [pc, #64]	; (800b1d8 <Medha_EI_Analyser+0x690>)
 800b196:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b19a:	4a10      	ldr	r2, [pc, #64]	; (800b1dc <Medha_EI_Analyser+0x694>)
 800b19c:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 800b19e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b1a2:	4618      	mov	r0, r3
 800b1a4:	f000 f956 	bl	800b454 <Send_Medha_EI_Reply>
//				Medha_Cur_Relay_Status_st.Relay_Status[Traverser++] = (Medha_EI_Temp_Rx_st.RelayStatus[i]);
//			}
//		}
//		else
		{
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b1a8:	2300      	movs	r3, #0
 800b1aa:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b1ae:	e028      	b.n	800b202 <Medha_EI_Analyser+0x6ba>
 800b1b0:	20000504 	.word	0x20000504
 800b1b4:	080291f4 	.word	0x080291f4
 800b1b8:	20000505 	.word	0x20000505
 800b1bc:	08029338 	.word	0x08029338
 800b1c0:	08029374 	.word	0x08029374
 800b1c4:	08029194 	.word	0x08029194
 800b1c8:	080293c0 	.word	0x080293c0
 800b1cc:	080293e4 	.word	0x080293e4
 800b1d0:	080293f8 	.word	0x080293f8
 800b1d4:	20003ddc 	.word	0x20003ddc
 800b1d8:	20003c84 	.word	0x20003c84
 800b1dc:	20003dec 	.word	0x20003dec
			{
				//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
				Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800b1e0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b1e4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b1e8:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800b1ec:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 800b1f0:	440a      	add	r2, r1
 800b1f2:	7e11      	ldrb	r1, [r2, #24]
 800b1f4:	4a81      	ldr	r2, [pc, #516]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b1f6:	54d1      	strb	r1, [r2, r3]
			for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b1f8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b202:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b206:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d3e8      	bcc.n	800b1e0 <Medha_EI_Analyser+0x698>





		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800b20e:	4b7c      	ldr	r3, [pc, #496]	; (800b400 <Medha_EI_Analyser+0x8b8>)
 800b210:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800b214:	4a79      	ldr	r2, [pc, #484]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b216:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800b21a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b21e:	461a      	mov	r2, r3
 800b220:	4976      	ldr	r1, [pc, #472]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b222:	4878      	ldr	r0, [pc, #480]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b224:	f01a fdac 	bl	8025d80 <memcmp>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d030      	beq.n	800b290 <Medha_EI_Analyser+0x748>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b22e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b232:	461a      	mov	r2, r3
 800b234:	4971      	ldr	r1, [pc, #452]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b236:	4873      	ldr	r0, [pc, #460]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b238:	f01a fdb2 	bl	8025da0 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800b23c:	4b6f      	ldr	r3, [pc, #444]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b23e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b242:	4a70      	ldr	r2, [pc, #448]	; (800b404 <Medha_EI_Analyser+0x8bc>)
 800b244:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(Medha_Relay_Sts_st.Relay_Sts));
 800b248:	2230      	movs	r2, #48	; 0x30
 800b24a:	2100      	movs	r1, #0
 800b24c:	486e      	ldr	r0, [pc, #440]	; (800b408 <Medha_EI_Analyser+0x8c0>)
 800b24e:	f01a fdcf 	bl	8025df0 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800b252:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b256:	461a      	mov	r2, r3
 800b258:	4968      	ldr	r1, [pc, #416]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b25a:	486b      	ldr	r0, [pc, #428]	; (800b408 <Medha_EI_Analyser+0x8c0>)
 800b25c:	f01a fda0 	bl	8025da0 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 800b260:	f240 1019 	movw	r0, #281	; 0x119
 800b264:	f005 fe7c 	bl	8010f60 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b268:	f00d ff94 	bl	8019194 <HAL_GetTick>
 800b26c:	4603      	mov	r3, r0
 800b26e:	4a67      	ldr	r2, [pc, #412]	; (800b40c <Medha_EI_Analyser+0x8c4>)
 800b270:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 800b272:	4867      	ldr	r0, [pc, #412]	; (800b410 <Medha_EI_Analyser+0x8c8>)
 800b274:	f01a ff40 	bl	80260f8 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 800b278:	f240 2001 	movw	r0, #513	; 0x201
 800b27c:	f005 fe70 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 800b280:	4b64      	ldr	r3, [pc, #400]	; (800b414 <Medha_EI_Analyser+0x8cc>)
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d103      	bne.n	800b290 <Medha_EI_Analyser+0x748>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800b288:	f240 2007 	movw	r0, #519	; 0x207
 800b28c:	f005 fe68 	bl	8010f60 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 800b290:	4861      	ldr	r0, [pc, #388]	; (800b418 <Medha_EI_Analyser+0x8d0>)
 800b292:	f01a ff31 	bl	80260f8 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 800b296:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b29a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b29e:	889b      	ldrh	r3, [r3, #4]
 800b2a0:	4619      	mov	r1, r3
 800b2a2:	485e      	ldr	r0, [pc, #376]	; (800b41c <Medha_EI_Analyser+0x8d4>)
 800b2a4:	f01a fe8c 	bl	8025fc0 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 800b2a8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2ac:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2b0:	885b      	ldrh	r3, [r3, #2]
 800b2b2:	4619      	mov	r1, r3
 800b2b4:	485a      	ldr	r0, [pc, #360]	; (800b420 <Medha_EI_Analyser+0x8d8>)
 800b2b6:	f01a fe83 	bl	8025fc0 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 800b2ba:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2be:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2c2:	799b      	ldrb	r3, [r3, #6]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4857      	ldr	r0, [pc, #348]	; (800b424 <Medha_EI_Analyser+0x8dc>)
 800b2c8:	f01a fe7a 	bl	8025fc0 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 800b2cc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2d0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2d4:	79db      	ldrb	r3, [r3, #7]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4853      	ldr	r0, [pc, #332]	; (800b428 <Medha_EI_Analyser+0x8e0>)
 800b2da:	f01a fe71 	bl	8025fc0 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 800b2de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2e6:	891b      	ldrh	r3, [r3, #8]
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	4850      	ldr	r0, [pc, #320]	; (800b42c <Medha_EI_Analyser+0x8e4>)
 800b2ec:	f01a fe68 	bl	8025fc0 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 800b2f0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b2f4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b2f8:	7a9b      	ldrb	r3, [r3, #10]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	484c      	ldr	r0, [pc, #304]	; (800b430 <Medha_EI_Analyser+0x8e8>)
 800b2fe:	f01a fe5f 	bl	8025fc0 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800b302:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b306:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b30a:	7b9b      	ldrb	r3, [r3, #14]
 800b30c:	4618      	mov	r0, r3
 800b30e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b312:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b316:	7b5b      	ldrb	r3, [r3, #13]
 800b318:	461c      	mov	r4, r3
 800b31a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b31e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b322:	7b1b      	ldrb	r3, [r3, #12]
 800b324:	461d      	mov	r5, r3
 800b326:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b32a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b32e:	7bdb      	ldrb	r3, [r3, #15]
 800b330:	461a      	mov	r2, r3
 800b332:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b336:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b33a:	7c1b      	ldrb	r3, [r3, #16]
 800b33c:	4619      	mov	r1, r3
 800b33e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b342:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b346:	7c5b      	ldrb	r3, [r3, #17]
 800b348:	9302      	str	r3, [sp, #8]
 800b34a:	9101      	str	r1, [sp, #4]
 800b34c:	9200      	str	r2, [sp, #0]
 800b34e:	462b      	mov	r3, r5
 800b350:	4622      	mov	r2, r4
 800b352:	4601      	mov	r1, r0
 800b354:	4837      	ldr	r0, [pc, #220]	; (800b434 <Medha_EI_Analyser+0x8ec>)
 800b356:	f01a fe33 	bl	8025fc0 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 800b35a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b35e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b362:	7c9b      	ldrb	r3, [r3, #18]
 800b364:	4619      	mov	r1, r3
 800b366:	4834      	ldr	r0, [pc, #208]	; (800b438 <Medha_EI_Analyser+0x8f0>)
 800b368:	f01a fe2a 	bl	8025fc0 <iprintf>
		printf("RC:%5lu\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800b36c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800b370:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800b374:	695b      	ldr	r3, [r3, #20]
 800b376:	4619      	mov	r1, r3
 800b378:	4830      	ldr	r0, [pc, #192]	; (800b43c <Medha_EI_Analyser+0x8f4>)
 800b37a:	f01a fe21 	bl	8025fc0 <iprintf>
		printf("SIGNAL DATA       :");
 800b37e:	4830      	ldr	r0, [pc, #192]	; (800b440 <Medha_EI_Analyser+0x8f8>)
 800b380:	f01a fe1e 	bl	8025fc0 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b384:	2300      	movs	r3, #0
 800b386:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b38a:	e021      	b.n	800b3d0 <Medha_EI_Analyser+0x888>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 800b38c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b390:	2b00      	cmp	r3, #0
 800b392:	d010      	beq.n	800b3b6 <Medha_EI_Analyser+0x86e>
 800b394:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b398:	4b2a      	ldr	r3, [pc, #168]	; (800b444 <Medha_EI_Analyser+0x8fc>)
 800b39a:	fba3 1302 	umull	r1, r3, r3, r2
 800b39e:	08d9      	lsrs	r1, r3, #3
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	005b      	lsls	r3, r3, #1
 800b3a8:	1ad3      	subs	r3, r2, r3
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d102      	bne.n	800b3b6 <Medha_EI_Analyser+0x86e>
			{
				printf("\n                   ");
 800b3b0:	4825      	ldr	r0, [pc, #148]	; (800b448 <Medha_EI_Analyser+0x900>)
 800b3b2:	f01a fe05 	bl	8025fc0 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800b3b6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b3ba:	4a10      	ldr	r2, [pc, #64]	; (800b3fc <Medha_EI_Analyser+0x8b4>)
 800b3bc:	5cd3      	ldrb	r3, [r2, r3]
 800b3be:	4619      	mov	r1, r3
 800b3c0:	4822      	ldr	r0, [pc, #136]	; (800b44c <Medha_EI_Analyser+0x904>)
 800b3c2:	f01a fdfd 	bl	8025fc0 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800b3c6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800b3ca:	3301      	adds	r3, #1
 800b3cc:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800b3d0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800b3d4:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800b3d8:	429a      	cmp	r2, r3
 800b3da:	d3d7      	bcc.n	800b38c <Medha_EI_Analyser+0x844>
		}
		printf("\n");
 800b3dc:	200a      	movs	r0, #10
 800b3de:	f01a fe07 	bl	8025ff0 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800b3e2:	481b      	ldr	r0, [pc, #108]	; (800b450 <Medha_EI_Analyser+0x908>)
 800b3e4:	f01a fe88 	bl	80260f8 <puts>
		return;
 800b3e8:	e004      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
	}
	else
	{
		return;
 800b3ea:	bf00      	nop
 800b3ec:	e002      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
				return;
 800b3ee:	bf00      	nop
 800b3f0:	e000      	b.n	800b3f4 <Medha_EI_Analyser+0x8ac>
				return;
 800b3f2:	bf00      	nop
	}
}
 800b3f4:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800b3fc:	20003e04 	.word	0x20003e04
 800b400:	20003c84 	.word	0x20003c84
 800b404:	20003f0c 	.word	0x20003f0c
 800b408:	20003daa 	.word	0x20003daa
 800b40c:	20003ddc 	.word	0x20003ddc
 800b410:	08029438 	.word	0x08029438
 800b414:	20003df4 	.word	0x20003df4
 800b418:	08029450 	.word	0x08029450
 800b41c:	08029478 	.word	0x08029478
 800b420:	08029480 	.word	0x08029480
 800b424:	08029488 	.word	0x08029488
 800b428:	08029494 	.word	0x08029494
 800b42c:	080294a0 	.word	0x080294a0
 800b430:	080294a8 	.word	0x080294a8
 800b434:	080294b0 	.word	0x080294b0
 800b438:	080294d4 	.word	0x080294d4
 800b43c:	080294e0 	.word	0x080294e0
 800b440:	080294ec 	.word	0x080294ec
 800b444:	cccccccd 	.word	0xcccccccd
 800b448:	08029500 	.word	0x08029500
 800b44c:	08029194 	.word	0x08029194
 800b450:	08029518 	.word	0x08029518

0800b454 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b0d2      	sub	sp, #328	; 0x148
 800b458:	af00      	add	r7, sp, #0
 800b45a:	4602      	mov	r2, r0
 800b45c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b460:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b464:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 800b466:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b46a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b46e:	2200      	movs	r2, #0
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	3304      	adds	r3, #4
 800b474:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b478:	2100      	movs	r1, #0
 800b47a:	4618      	mov	r0, r3
 800b47c:	f01a fcb8 	bl	8025df0 <memset>
	uint32_t Cal_Crc =0;
 800b480:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b484:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 800b492:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b496:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b49a:	2200      	movs	r2, #0
 800b49c:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 800b49e:	2300      	movs	r3, #0
 800b4a0:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 800b4a4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4a8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b4ac:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b4b0:	2153      	movs	r1, #83	; 0x53
 800b4b2:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b4b4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 800b4be:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4c2:	f107 0214 	add.w	r2, r7, #20
 800b4c6:	4413      	add	r3, r2
 800b4c8:	4a88      	ldr	r2, [pc, #544]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4ca:	8852      	ldrh	r2, [r2, #2]
 800b4cc:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b4ce:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4d2:	3302      	adds	r3, #2
 800b4d4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 800b4d8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4dc:	f107 0214 	add.w	r2, r7, #20
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4a82      	ldr	r2, [pc, #520]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4e4:	8892      	ldrh	r2, [r2, #4]
 800b4e6:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b4e8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4ec:	3302      	adds	r3, #2
 800b4ee:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 800b4f2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b4f6:	f107 0214 	add.w	r2, r7, #20
 800b4fa:	4413      	add	r3, r2
 800b4fc:	4a7b      	ldr	r2, [pc, #492]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b4fe:	7992      	ldrb	r2, [r2, #6]
 800b500:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b502:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b506:	3301      	adds	r3, #1
 800b508:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 800b50c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b510:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b514:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b518:	21e2      	movs	r1, #226	; 0xe2
 800b51a:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 800b51c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b520:	3301      	adds	r3, #1
 800b522:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 800b526:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b52a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 800b52e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b532:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b536:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b53a:	2100      	movs	r1, #0
 800b53c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 800b53e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b542:	3301      	adds	r3, #1
 800b544:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b548:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b54c:	2100      	movs	r1, #0
 800b54e:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 800b550:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b554:	3302      	adds	r3, #2
 800b556:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 800b55a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b55e:	f107 0214 	add.w	r2, r7, #20
 800b562:	4413      	add	r3, r2
 800b564:	4a61      	ldr	r2, [pc, #388]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b566:	7a92      	ldrb	r2, [r2, #10]
 800b568:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 800b56a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b56e:	3301      	adds	r3, #1
 800b570:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 800b574:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b578:	f107 0214 	add.w	r2, r7, #20
 800b57c:	441a      	add	r2, r3
 800b57e:	4b5b      	ldr	r3, [pc, #364]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b580:	330b      	adds	r3, #11
 800b582:	6819      	ldr	r1, [r3, #0]
 800b584:	6011      	str	r1, [r2, #0]
 800b586:	8899      	ldrh	r1, [r3, #4]
 800b588:	799b      	ldrb	r3, [r3, #6]
 800b58a:	8091      	strh	r1, [r2, #4]
 800b58c:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 800b58e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b592:	3307      	adds	r3, #7
 800b594:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 800b598:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b59c:	f107 0214 	add.w	r2, r7, #20
 800b5a0:	4413      	add	r3, r2
 800b5a2:	4a52      	ldr	r2, [pc, #328]	; (800b6ec <Send_Medha_EI_Reply+0x298>)
 800b5a4:	8a92      	ldrh	r2, [r2, #20]
 800b5a6:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 800b5a8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5ac:	3302      	adds	r3, #2
 800b5ae:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 800b5b2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5b6:	f107 0214 	add.w	r2, r7, #20
 800b5ba:	18d0      	adds	r0, r2, r3
 800b5bc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5c0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5c4:	881b      	ldrh	r3, [r3, #0]
 800b5c6:	461a      	mov	r2, r3
 800b5c8:	4949      	ldr	r1, [pc, #292]	; (800b6f0 <Send_Medha_EI_Reply+0x29c>)
 800b5ca:	f01a fbe9 	bl	8025da0 <memcpy>
	BYTEINC(Outputs);
 800b5ce:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5d2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5d6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b5da:	881b      	ldrh	r3, [r3, #0]
 800b5dc:	4413      	add	r3, r2
 800b5de:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 800b5e2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b5e6:	f107 0214 	add.w	r2, r7, #20
 800b5ea:	18d0      	adds	r0, r2, r3
 800b5ec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b5f0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b5f4:	881b      	ldrh	r3, [r3, #0]
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	493e      	ldr	r1, [pc, #248]	; (800b6f4 <Send_Medha_EI_Reply+0x2a0>)
 800b5fa:	f01a fbd1 	bl	8025da0 <memcpy>
	BYTEINC(Outputs);
 800b5fe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b602:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 800b606:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b60a:	881b      	ldrh	r3, [r3, #0]
 800b60c:	4413      	add	r3, r2
 800b60e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 800b612:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b616:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b61a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b61e:	2100      	movs	r1, #0
 800b620:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800b622:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b626:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b62a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b62e:	2100      	movs	r1, #0
 800b630:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800b632:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b636:	3302      	adds	r3, #2
 800b638:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800b63c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b640:	b29b      	uxth	r3, r3
 800b642:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b646:	1ad3      	subs	r3, r2, r3
 800b648:	b29b      	uxth	r3, r3
 800b64a:	3302      	adds	r3, #2
 800b64c:	b29a      	uxth	r2, r3
 800b64e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b652:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800b656:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800b658:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800b65c:	f107 0214 	add.w	r2, r7, #20
 800b660:	4413      	add	r3, r2
 800b662:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b666:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800b66a:	8812      	ldrh	r2, [r2, #0]
 800b66c:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800b66e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800b672:	f107 0314 	add.w	r3, r7, #20
 800b676:	4619      	mov	r1, r3
 800b678:	2000      	movs	r0, #0
 800b67a:	f000 fe4b 	bl	800c314 <GetCRC32>
 800b67e:	4602      	mov	r2, r0
 800b680:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800b684:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800b688:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800b68a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b68e:	f107 0214 	add.w	r2, r7, #20
 800b692:	4413      	add	r3, r2
 800b694:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b698:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800b69c:	6812      	ldr	r2, [r2, #0]
 800b69e:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800b6a0:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b6b0:	e011      	b.n	800b6d6 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800b6b2:	4b11      	ldr	r3, [pc, #68]	; (800b6f8 <Send_Medha_EI_Reply+0x2a4>)
 800b6b4:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800b6b8:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b6bc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800b6c0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b6c4:	5cd3      	ldrb	r3, [r2, r3]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f00d fb0c 	bl	8018ce4 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800b6cc:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800b6d6:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800b6da:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d3e7      	bcc.n	800b6b2 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800b6e2:	bf00      	nop
}
 800b6e4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20003c84 	.word	0x20003c84
 800b6f0:	20003c9c 	.word	0x20003c9c
 800b6f4:	20003d1c 	.word	0x20003d1c
 800b6f8:	20000504 	.word	0x20000504

0800b6fc <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800b702:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b704:	689b      	ldr	r3, [r3, #8]
 800b706:	4618      	mov	r0, r3
 800b708:	f004 fe76 	bl	80103f8 <HAL_Elaps_Ticks>
 800b70c:	4602      	mov	r2, r0
 800b70e:	4b2a      	ldr	r3, [pc, #168]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b710:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800b714:	429a      	cmp	r2, r3
 800b716:	d349      	bcc.n	800b7ac <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800b718:	2300      	movs	r3, #0
 800b71a:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800b71c:	4b26      	ldr	r3, [pc, #152]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b71e:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b722:	f003 0307 	and.w	r3, r3, #7
 800b726:	2b00      	cmp	r3, #0
 800b728:	d007      	beq.n	800b73a <Send_Relay_Statuses_2_MIE+0x3e>
 800b72a:	4b23      	ldr	r3, [pc, #140]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b72c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b730:	08db      	lsrs	r3, r3, #3
 800b732:	b29b      	uxth	r3, r3
 800b734:	3301      	adds	r3, #1
 800b736:	80fb      	strh	r3, [r7, #6]
 800b738:	e004      	b.n	800b744 <Send_Relay_Statuses_2_MIE+0x48>
 800b73a:	4b1f      	ldr	r3, [pc, #124]	; (800b7b8 <Send_Relay_Statuses_2_MIE+0xbc>)
 800b73c:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800b740:	08db      	lsrs	r3, r3, #3
 800b742:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800b744:	f00d fd26 	bl	8019194 <HAL_GetTick>
 800b748:	4603      	mov	r3, r0
 800b74a:	4a1a      	ldr	r2, [pc, #104]	; (800b7b4 <Send_Relay_Statuses_2_MIE+0xb8>)
 800b74c:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800b74e:	481b      	ldr	r0, [pc, #108]	; (800b7bc <Send_Relay_Statuses_2_MIE+0xc0>)
 800b750:	f01a fcd2 	bl	80260f8 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b754:	2300      	movs	r3, #0
 800b756:	603b      	str	r3, [r7, #0]
 800b758:	e01d      	b.n	800b796 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d00e      	beq.n	800b77e <Send_Relay_Statuses_2_MIE+0x82>
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	4b17      	ldr	r3, [pc, #92]	; (800b7c0 <Send_Relay_Statuses_2_MIE+0xc4>)
 800b764:	fba3 2301 	umull	r2, r3, r3, r1
 800b768:	091a      	lsrs	r2, r3, #4
 800b76a:	4613      	mov	r3, r2
 800b76c:	009b      	lsls	r3, r3, #2
 800b76e:	4413      	add	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	1aca      	subs	r2, r1, r3
 800b774:	2a00      	cmp	r2, #0
 800b776:	d102      	bne.n	800b77e <Send_Relay_Statuses_2_MIE+0x82>
			{
				printf("\n");
 800b778:	200a      	movs	r0, #10
 800b77a:	f01a fc39 	bl	8025ff0 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800b77e:	4a11      	ldr	r2, [pc, #68]	; (800b7c4 <Send_Relay_Statuses_2_MIE+0xc8>)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	4413      	add	r3, r2
 800b784:	3302      	adds	r3, #2
 800b786:	781b      	ldrb	r3, [r3, #0]
 800b788:	4619      	mov	r1, r3
 800b78a:	480f      	ldr	r0, [pc, #60]	; (800b7c8 <Send_Relay_Statuses_2_MIE+0xcc>)
 800b78c:	f01a fc18 	bl	8025fc0 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	3301      	adds	r3, #1
 800b794:	603b      	str	r3, [r7, #0]
 800b796:	88fb      	ldrh	r3, [r7, #6]
 800b798:	683a      	ldr	r2, [r7, #0]
 800b79a:	429a      	cmp	r2, r3
 800b79c:	d3dd      	bcc.n	800b75a <Send_Relay_Statuses_2_MIE+0x5e>
		}
		printf("\n");
 800b79e:	200a      	movs	r0, #10
 800b7a0:	f01a fc26 	bl	8025ff0 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800b7a4:	f240 1019 	movw	r0, #281	; 0x119
 800b7a8:	f005 fbda 	bl	8010f60 <TransmitCanPkt>
#endif
	}
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}
 800b7b4:	20003ddc 	.word	0x20003ddc
 800b7b8:	20000504 	.word	0x20000504
 800b7bc:	08029540 	.word	0x08029540
 800b7c0:	cccccccd 	.word	0xcccccccd
 800b7c4:	20003da8 	.word	0x20003da8
 800b7c8:	08029194 	.word	0x08029194

0800b7cc <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b082      	sub	sp, #8
 800b7d0:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800b7d2:	4b61      	ldr	r3, [pc, #388]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b7d4:	685b      	ldr	r3, [r3, #4]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f004 fe0e 	bl	80103f8 <HAL_Elaps_Ticks>
 800b7dc:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800b7de:	4b5f      	ldr	r3, [pc, #380]	; (800b95c <Process_Clear_Relays+0x190>)
 800b7e0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b7e4:	4a5d      	ldr	r2, [pc, #372]	; (800b95c <Process_Clear_Relays+0x190>)
 800b7e6:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800b7ea:	fb02 f303 	mul.w	r3, r2, r3
 800b7ee:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800b7f0:	495b      	ldr	r1, [pc, #364]	; (800b960 <Process_Clear_Relays+0x194>)
 800b7f2:	485c      	ldr	r0, [pc, #368]	; (800b964 <Process_Clear_Relays+0x198>)
 800b7f4:	f7f4 fd24 	bl	8000240 <strcmp>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	f000 80a7 	beq.w	800b94e <Process_Clear_Relays+0x182>
	{
		return;
	}

	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800b800:	687a      	ldr	r2, [r7, #4]
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	429a      	cmp	r2, r3
 800b806:	d30c      	bcc.n	800b822 <Process_Clear_Relays+0x56>
 800b808:	4b53      	ldr	r3, [pc, #332]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b80a:	685a      	ldr	r2, [r3, #4]
 800b80c:	4b56      	ldr	r3, [pc, #344]	; (800b968 <Process_Clear_Relays+0x19c>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	429a      	cmp	r2, r3
 800b812:	d006      	beq.n	800b822 <Process_Clear_Relays+0x56>
 800b814:	4b55      	ldr	r3, [pc, #340]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b816:	785a      	ldrb	r2, [r3, #1]
 800b818:	4b50      	ldr	r3, [pc, #320]	; (800b95c <Process_Clear_Relays+0x190>)
 800b81a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b81e:	429a      	cmp	r2, r3
 800b820:	d808      	bhi.n	800b834 <Process_Clear_Relays+0x68>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800b822:	4b4d      	ldr	r3, [pc, #308]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d049      	beq.n	800b8be <Process_Clear_Relays+0xf2>
 800b82a:	4b51      	ldr	r3, [pc, #324]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b82c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b830:	2b00      	cmp	r3, #0
 800b832:	d044      	beq.n	800b8be <Process_Clear_Relays+0xf2>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b834:	4b48      	ldr	r3, [pc, #288]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	4619      	mov	r1, r3
 800b83a:	484e      	ldr	r0, [pc, #312]	; (800b974 <Process_Clear_Relays+0x1a8>)
 800b83c:	f01a fbc0 	bl	8025fc0 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b840:	4b45      	ldr	r3, [pc, #276]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 0301 	and.w	r3, r3, #1
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d006      	beq.n	800b85a <Process_Clear_Relays+0x8e>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b84c:	4b42      	ldr	r3, [pc, #264]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	b2da      	uxtb	r2, r3
 800b856:	4b40      	ldr	r3, [pc, #256]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b858:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800b85a:	4b3f      	ldr	r3, [pc, #252]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 0302 	and.w	r3, r3, #2
 800b862:	2b00      	cmp	r3, #0
 800b864:	d006      	beq.n	800b874 <Process_Clear_Relays+0xa8>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800b866:	4b3c      	ldr	r3, [pc, #240]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b868:	781b      	ldrb	r3, [r3, #0]
 800b86a:	f023 0302 	bic.w	r3, r3, #2
 800b86e:	b2da      	uxtb	r2, r3
 800b870:	4b39      	ldr	r3, [pc, #228]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b872:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b874:	2284      	movs	r2, #132	; 0x84
 800b876:	2100      	movs	r1, #0
 800b878:	483d      	ldr	r0, [pc, #244]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b87a:	f01a fab9 	bl	8025df0 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b87e:	2232      	movs	r2, #50	; 0x32
 800b880:	2100      	movs	r1, #0
 800b882:	483d      	ldr	r0, [pc, #244]	; (800b978 <Process_Clear_Relays+0x1ac>)
 800b884:	f01a fab4 	bl	8025df0 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b888:	2284      	movs	r2, #132	; 0x84
 800b88a:	2100      	movs	r1, #0
 800b88c:	483b      	ldr	r0, [pc, #236]	; (800b97c <Process_Clear_Relays+0x1b0>)
 800b88e:	f01a faaf 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b892:	2208      	movs	r2, #8
 800b894:	2100      	movs	r1, #0
 800b896:	483a      	ldr	r0, [pc, #232]	; (800b980 <Process_Clear_Relays+0x1b4>)
 800b898:	f01a faaa 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b89c:	2208      	movs	r2, #8
 800b89e:	2100      	movs	r1, #0
 800b8a0:	4832      	ldr	r0, [pc, #200]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b8a2:	f01a faa5 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b8a6:	2208      	movs	r2, #8
 800b8a8:	2100      	movs	r1, #0
 800b8aa:	4836      	ldr	r0, [pc, #216]	; (800b984 <Process_Clear_Relays+0x1b8>)
 800b8ac:	f01a faa0 	bl	8025df0 <memset>
		printf("Cleared Relay Statuses\n");
 800b8b0:	4835      	ldr	r0, [pc, #212]	; (800b988 <Process_Clear_Relays+0x1bc>)
 800b8b2:	f01a fc21 	bl	80260f8 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b8b6:	4b28      	ldr	r3, [pc, #160]	; (800b958 <Process_Clear_Relays+0x18c>)
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	4a2b      	ldr	r2, [pc, #172]	; (800b968 <Process_Clear_Relays+0x19c>)
 800b8bc:	6013      	str	r3, [r2, #0]
	}


	if((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > (EI_data.Medha_Prms_st.CAN_Xchange_Tout)) && (Medha_CAN_Xchanging_Happening == SET))
 800b8be:	4b33      	ldr	r3, [pc, #204]	; (800b98c <Process_Clear_Relays+0x1c0>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f004 fd98 	bl	80103f8 <HAL_Elaps_Ticks>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b24      	ldr	r3, [pc, #144]	; (800b95c <Process_Clear_Relays+0x190>)
 800b8cc:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d92a      	bls.n	800b92a <Process_Clear_Relays+0x15e>
 800b8d4:	4b2e      	ldr	r3, [pc, #184]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b8d6:	781b      	ldrb	r3, [r3, #0]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d126      	bne.n	800b92a <Process_Clear_Relays+0x15e>
	{
		printf("CAN Exchanging not Happening\n");
 800b8dc:	482d      	ldr	r0, [pc, #180]	; (800b994 <Process_Clear_Relays+0x1c8>)
 800b8de:	f01a fc0b 	bl	80260f8 <puts>
		Medha_CAN_Xchanging_Happening = RESET;
 800b8e2:	4b2b      	ldr	r3, [pc, #172]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b8e8:	2284      	movs	r2, #132	; 0x84
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4820      	ldr	r0, [pc, #128]	; (800b970 <Process_Clear_Relays+0x1a4>)
 800b8ee:	f01a fa7f 	bl	8025df0 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800b8f2:	2232      	movs	r2, #50	; 0x32
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4820      	ldr	r0, [pc, #128]	; (800b978 <Process_Clear_Relays+0x1ac>)
 800b8f8:	f01a fa7a 	bl	8025df0 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800b8fc:	2284      	movs	r2, #132	; 0x84
 800b8fe:	2100      	movs	r1, #0
 800b900:	481e      	ldr	r0, [pc, #120]	; (800b97c <Process_Clear_Relays+0x1b0>)
 800b902:	f01a fa75 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b906:	2208      	movs	r2, #8
 800b908:	2100      	movs	r1, #0
 800b90a:	481d      	ldr	r0, [pc, #116]	; (800b980 <Process_Clear_Relays+0x1b4>)
 800b90c:	f01a fa70 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b910:	2208      	movs	r2, #8
 800b912:	2100      	movs	r1, #0
 800b914:	4815      	ldr	r0, [pc, #84]	; (800b96c <Process_Clear_Relays+0x1a0>)
 800b916:	f01a fa6b 	bl	8025df0 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800b91a:	2208      	movs	r2, #8
 800b91c:	2100      	movs	r1, #0
 800b91e:	4819      	ldr	r0, [pc, #100]	; (800b984 <Process_Clear_Relays+0x1b8>)
 800b920:	f01a fa66 	bl	8025df0 <memset>
		printf("Cleared Relay Statuses\n");
 800b924:	4818      	ldr	r0, [pc, #96]	; (800b988 <Process_Clear_Relays+0x1bc>)
 800b926:	f01a fbe7 	bl	80260f8 <puts>
	}


	if( ((HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) < (EI_data.Medha_Prms_st.CAN_Xchange_Tout))) && (Medha_CAN_Xchanging_Happening == SET))
 800b92a:	4b18      	ldr	r3, [pc, #96]	; (800b98c <Process_Clear_Relays+0x1c0>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	4618      	mov	r0, r3
 800b930:	f004 fd62 	bl	80103f8 <HAL_Elaps_Ticks>
 800b934:	4602      	mov	r2, r0
 800b936:	4b09      	ldr	r3, [pc, #36]	; (800b95c <Process_Clear_Relays+0x190>)
 800b938:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d207      	bcs.n	800b950 <Process_Clear_Relays+0x184>
 800b940:	4b13      	ldr	r3, [pc, #76]	; (800b990 <Process_Clear_Relays+0x1c4>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	2b01      	cmp	r3, #1
 800b946:	d103      	bne.n	800b950 <Process_Clear_Relays+0x184>
	{
		Blink_S2();
 800b948:	f00a f948 	bl	8015bdc <Blink_S2>
 800b94c:	e000      	b.n	800b950 <Process_Clear_Relays+0x184>
		return;
 800b94e:	bf00      	nop
	}


}
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop
 800b958:	20003ddc 	.word	0x20003ddc
 800b95c:	20000504 	.word	0x20000504
 800b960:	080291f4 	.word	0x080291f4
 800b964:	20000505 	.word	0x20000505
 800b968:	20003f9c 	.word	0x20003f9c
 800b96c:	20003df4 	.word	0x20003df4
 800b970:	20003e04 	.word	0x20003e04
 800b974:	08029554 	.word	0x08029554
 800b978:	20003da8 	.word	0x20003da8
 800b97c:	20003f0c 	.word	0x20003f0c
 800b980:	20003dec 	.word	0x20003dec
 800b984:	20003dfc 	.word	0x20003dfc
 800b988:	08029584 	.word	0x08029584
 800b98c:	20003894 	.word	0x20003894
 800b990:	20003890 	.word	0x20003890
 800b994:	0802959c 	.word	0x0802959c

0800b998 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800b99c:	4b26      	ldr	r3, [pc, #152]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b99e:	685b      	ldr	r3, [r3, #4]
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f004 fd29 	bl	80103f8 <HAL_Elaps_Ticks>
 800b9a6:	4602      	mov	r2, r0
 800b9a8:	4b24      	ldr	r3, [pc, #144]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9aa:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800b9ae:	4923      	ldr	r1, [pc, #140]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9b0:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800b9b4:	fb01 f303 	mul.w	r3, r1, r3
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d306      	bcc.n	800b9ca <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800b9bc:	4b20      	ldr	r3, [pc, #128]	; (800ba40 <Send_Data_to_Other+0xa8>)
 800b9be:	781b      	ldrb	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d002      	beq.n	800b9ca <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800b9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ba40 <Send_Data_to_Other+0xa8>)
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800b9ca:	4b1b      	ldr	r3, [pc, #108]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9cc:	685b      	ldr	r3, [r3, #4]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f004 fd12 	bl	80103f8 <HAL_Elaps_Ticks>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	4b19      	ldr	r3, [pc, #100]	; (800ba3c <Send_Data_to_Other+0xa4>)
 800b9d8:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800b9dc:	429a      	cmp	r2, r3
 800b9de:	d90e      	bls.n	800b9fe <Send_Data_to_Other+0x66>
 800b9e0:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	4b17      	ldr	r3, [pc, #92]	; (800ba44 <Send_Data_to_Other+0xac>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d008      	beq.n	800b9fe <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800b9ec:	4b12      	ldr	r3, [pc, #72]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800b9ee:	685b      	ldr	r3, [r3, #4]
 800b9f0:	4a14      	ldr	r2, [pc, #80]	; (800ba44 <Send_Data_to_Other+0xac>)
 800b9f2:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800b9f4:	f240 2001 	movw	r0, #513	; 0x201
 800b9f8:	f005 fab2 	bl	8010f60 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800b9fc:	e01a      	b.n	800ba34 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800b9fe:	4b12      	ldr	r3, [pc, #72]	; (800ba48 <Send_Data_to_Other+0xb0>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4618      	mov	r0, r3
 800ba04:	f004 fcf8 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba0e:	d911      	bls.n	800ba34 <Send_Data_to_Other+0x9c>
 800ba10:	4b09      	ldr	r3, [pc, #36]	; (800ba38 <Send_Data_to_Other+0xa0>)
 800ba12:	685b      	ldr	r3, [r3, #4]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f004 fcef 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ba20:	d908      	bls.n	800ba34 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800ba22:	f00d fbb7 	bl	8019194 <HAL_GetTick>
 800ba26:	4603      	mov	r3, r0
 800ba28:	4a07      	ldr	r2, [pc, #28]	; (800ba48 <Send_Data_to_Other+0xb0>)
 800ba2a:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800ba2c:	f240 2001 	movw	r0, #513	; 0x201
 800ba30:	f005 fa96 	bl	8010f60 <TransmitCanPkt>
}
 800ba34:	bf00      	nop
 800ba36:	bd80      	pop	{r7, pc}
 800ba38:	20003ddc 	.word	0x20003ddc
 800ba3c:	20000504 	.word	0x20000504
 800ba40:	20003dec 	.word	0x20003dec
 800ba44:	20003fa0 	.word	0x20003fa0
 800ba48:	20003fa4 	.word	0x20003fa4

0800ba4c <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800ba4c:	b5b0      	push	{r4, r5, r7, lr}
 800ba4e:	af00      	add	r7, sp, #0


	if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 800ba50:	499a      	ldr	r1, [pc, #616]	; (800bcbc <Process_Data_from_Other+0x270>)
 800ba52:	489b      	ldr	r0, [pc, #620]	; (800bcc0 <Process_Data_from_Other+0x274>)
 800ba54:	f7f4 fbf4 	bl	8000240 <strcmp>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	f000 812b 	beq.w	800bcb6 <Process_Data_from_Other+0x26a>
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800ba60:	4b98      	ldr	r3, [pc, #608]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	4b98      	ldr	r3, [pc, #608]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d109      	bne.n	800ba80 <Process_Data_from_Other+0x34>
 800ba6c:	4b95      	ldr	r3, [pc, #596]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4618      	mov	r0, r3
 800ba72:	f004 fcc1 	bl	80103f8 <HAL_Elaps_Ticks>
 800ba76:	4603      	mov	r3, r0
 800ba78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba7c:	f0c0 80e4 	bcc.w	800bc48 <Process_Data_from_Other+0x1fc>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800ba80:	f00d fb88 	bl	8019194 <HAL_GetTick>
 800ba84:	4603      	mov	r3, r0
 800ba86:	4a8f      	ldr	r2, [pc, #572]	; (800bcc4 <Process_Data_from_Other+0x278>)
 800ba88:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800ba8a:	4b90      	ldr	r3, [pc, #576]	; (800bccc <Process_Data_from_Other+0x280>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d007      	beq.n	800baa2 <Process_Data_from_Other+0x56>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800ba92:	4b8f      	ldr	r3, [pc, #572]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	f043 0301 	orr.w	r3, r3, #1
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	4b8c      	ldr	r3, [pc, #560]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800ba9e:	701a      	strb	r2, [r3, #0]
 800baa0:	e006      	b.n	800bab0 <Process_Data_from_Other+0x64>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800baa2:	4b8b      	ldr	r3, [pc, #556]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baa4:	781b      	ldrb	r3, [r3, #0]
 800baa6:	f023 0301 	bic.w	r3, r3, #1
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	4b88      	ldr	r3, [pc, #544]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baae:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800bab0:	4b88      	ldr	r3, [pc, #544]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bab2:	781b      	ldrb	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <Process_Data_from_Other+0x7c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800bab8:	4b85      	ldr	r3, [pc, #532]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f043 0302 	orr.w	r3, r3, #2
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	4b83      	ldr	r3, [pc, #524]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bac4:	701a      	strb	r2, [r3, #0]
 800bac6:	e006      	b.n	800bad6 <Process_Data_from_Other+0x8a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800bac8:	4b81      	ldr	r3, [pc, #516]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	f023 0302 	bic.w	r3, r3, #2
 800bad0:	b2da      	uxtb	r2, r3
 800bad2:	4b7f      	ldr	r3, [pc, #508]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bad4:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800bad6:	4b7e      	ldr	r3, [pc, #504]	; (800bcd0 <Process_Data_from_Other+0x284>)
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	2b03      	cmp	r3, #3
 800badc:	f200 809a 	bhi.w	800bc14 <Process_Data_from_Other+0x1c8>
 800bae0:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <Process_Data_from_Other+0x9c>)
 800bae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae6:	bf00      	nop
 800bae8:	0800baf9 	.word	0x0800baf9
 800baec:	0800bb89 	.word	0x0800bb89
 800baf0:	0800bb07 	.word	0x0800bb07
 800baf4:	0800bbd9 	.word	0x0800bbd9
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800baf8:	4b74      	ldr	r3, [pc, #464]	; (800bccc <Process_Data_from_Other+0x280>)
 800bafa:	785b      	ldrb	r3, [r3, #1]
 800bafc:	3301      	adds	r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	4b72      	ldr	r3, [pc, #456]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb02:	705a      	strb	r2, [r3, #1]
			break;
 800bb04:	e086      	b.n	800bc14 <Process_Data_from_Other+0x1c8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb06:	4b73      	ldr	r3, [pc, #460]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb08:	685a      	ldr	r2, [r3, #4]
 800bb0a:	4b70      	ldr	r3, [pc, #448]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb0c:	685b      	ldr	r3, [r3, #4]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d02f      	beq.n	800bb72 <Process_Data_from_Other+0x126>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800bb12:	4b71      	ldr	r3, [pc, #452]	; (800bcd8 <Process_Data_from_Other+0x28c>)
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	2b01      	cmp	r3, #1
 800bb18:	d179      	bne.n	800bc0e <Process_Data_from_Other+0x1c2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800bb1a:	4b6c      	ldr	r3, [pc, #432]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	486e      	ldr	r0, [pc, #440]	; (800bcdc <Process_Data_from_Other+0x290>)
 800bb22:	f01a fa4d 	bl	8025fc0 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800bb26:	4b6b      	ldr	r3, [pc, #428]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	4619      	mov	r1, r3
 800bb2c:	486c      	ldr	r0, [pc, #432]	; (800bce0 <Process_Data_from_Other+0x294>)
 800bb2e:	f01a fa47 	bl	8025fc0 <iprintf>
					Received_CAN_Relay_Status=NO;
 800bb32:	4b69      	ldr	r3, [pc, #420]	; (800bcd8 <Process_Data_from_Other+0x28c>)
 800bb34:	2200      	movs	r2, #0
 800bb36:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800bb38:	486a      	ldr	r0, [pc, #424]	; (800bce4 <Process_Data_from_Other+0x298>)
 800bb3a:	f01a fadd 	bl	80260f8 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800bb3e:	4a6a      	ldr	r2, [pc, #424]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb40:	4b6a      	ldr	r3, [pc, #424]	; (800bcec <Process_Data_from_Other+0x2a0>)
 800bb42:	4610      	mov	r0, r2
 800bb44:	4619      	mov	r1, r3
 800bb46:	2384      	movs	r3, #132	; 0x84
 800bb48:	461a      	mov	r2, r3
 800bb4a:	f01a f929 	bl	8025da0 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800bb4e:	4a68      	ldr	r2, [pc, #416]	; (800bcf0 <Process_Data_from_Other+0x2a4>)
 800bb50:	4b65      	ldr	r3, [pc, #404]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb52:	4614      	mov	r4, r2
 800bb54:	461d      	mov	r5, r3
 800bb56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bb60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bb62:	682b      	ldr	r3, [r5, #0]
 800bb64:	8023      	strh	r3, [r4, #0]
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800bb66:	4b60      	ldr	r3, [pc, #384]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bb68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb6c:	4a57      	ldr	r2, [pc, #348]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb6e:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800bb70:	e04d      	b.n	800bc0e <Process_Data_from_Other+0x1c2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bb72:	4b56      	ldr	r3, [pc, #344]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb74:	2200      	movs	r2, #0
 800bb76:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bb78:	4b5e      	ldr	r3, [pc, #376]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	f023 0301 	bic.w	r3, r3, #1
 800bb80:	b2da      	uxtb	r2, r3
 800bb82:	4b5c      	ldr	r3, [pc, #368]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bb84:	701a      	strb	r2, [r3, #0]
			break;
 800bb86:	e042      	b.n	800bc0e <Process_Data_from_Other+0x1c2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bb88:	4b52      	ldr	r3, [pc, #328]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bb8a:	685a      	ldr	r2, [r3, #4]
 800bb8c:	4b4f      	ldr	r3, [pc, #316]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d016      	beq.n	800bbc2 <Process_Data_from_Other+0x176>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bb94:	4858      	ldr	r0, [pc, #352]	; (800bcf8 <Process_Data_from_Other+0x2ac>)
 800bb96:	f01a faaf 	bl	80260f8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bb9a:	4b4c      	ldr	r3, [pc, #304]	; (800bccc <Process_Data_from_Other+0x280>)
 800bb9c:	785b      	ldrb	r3, [r3, #1]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	b2da      	uxtb	r2, r3
 800bba2:	4b4a      	ldr	r3, [pc, #296]	; (800bccc <Process_Data_from_Other+0x280>)
 800bba4:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800bba6:	4b49      	ldr	r3, [pc, #292]	; (800bccc <Process_Data_from_Other+0x280>)
 800bba8:	785b      	ldrb	r3, [r3, #1]
 800bbaa:	2b02      	cmp	r3, #2
 800bbac:	d931      	bls.n	800bc12 <Process_Data_from_Other+0x1c6>
 800bbae:	4b4e      	ldr	r3, [pc, #312]	; (800bce8 <Process_Data_from_Other+0x29c>)
 800bbb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d02c      	beq.n	800bc12 <Process_Data_from_Other+0x1c6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800bbb8:	f240 2007 	movw	r0, #519	; 0x207
 800bbbc:	f005 f9d0 	bl	8010f60 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bbc0:	e027      	b.n	800bc12 <Process_Data_from_Other+0x1c6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bbc2:	4b4c      	ldr	r3, [pc, #304]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f023 0301 	bic.w	r3, r3, #1
 800bbca:	b2da      	uxtb	r2, r3
 800bbcc:	4b49      	ldr	r3, [pc, #292]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbce:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bbd0:	4b3e      	ldr	r3, [pc, #248]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	705a      	strb	r2, [r3, #1]
			break;
 800bbd6:	e01c      	b.n	800bc12 <Process_Data_from_Other+0x1c6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800bbd8:	4b3e      	ldr	r3, [pc, #248]	; (800bcd4 <Process_Data_from_Other+0x288>)
 800bbda:	685a      	ldr	r2, [r3, #4]
 800bbdc:	4b3b      	ldr	r3, [pc, #236]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d009      	beq.n	800bbf8 <Process_Data_from_Other+0x1ac>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800bbe4:	4844      	ldr	r0, [pc, #272]	; (800bcf8 <Process_Data_from_Other+0x2ac>)
 800bbe6:	f01a fa87 	bl	80260f8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800bbea:	4b38      	ldr	r3, [pc, #224]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbec:	785b      	ldrb	r3, [r3, #1]
 800bbee:	3301      	adds	r3, #1
 800bbf0:	b2da      	uxtb	r2, r3
 800bbf2:	4b36      	ldr	r3, [pc, #216]	; (800bccc <Process_Data_from_Other+0x280>)
 800bbf4:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800bbf6:	e00d      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bbf8:	4b3e      	ldr	r3, [pc, #248]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	f023 0301 	bic.w	r3, r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	4b3c      	ldr	r3, [pc, #240]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc04:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800bc06:	4b31      	ldr	r3, [pc, #196]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	705a      	strb	r2, [r3, #1]
			break;
 800bc0c:	e002      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
			break;
 800bc0e:	bf00      	nop
 800bc10:	e000      	b.n	800bc14 <Process_Data_from_Other+0x1c8>
			break;
 800bc12:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800bc14:	4b2d      	ldr	r3, [pc, #180]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc16:	785a      	ldrb	r2, [r3, #1]
 800bc18:	4b38      	ldr	r3, [pc, #224]	; (800bcfc <Process_Data_from_Other+0x2b0>)
 800bc1a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d312      	bcc.n	800bc48 <Process_Data_from_Other+0x1fc>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bc22:	4b34      	ldr	r3, [pc, #208]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	f003 0301 	and.w	r3, r3, #1
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d10c      	bne.n	800bc48 <Process_Data_from_Other+0x1fc>
			{
				printf("MisMatch Count Reached\n");
 800bc2e:	4834      	ldr	r0, [pc, #208]	; (800bd00 <Process_Data_from_Other+0x2b4>)
 800bc30:	f01a fa62 	bl	80260f8 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800bc34:	4b25      	ldr	r3, [pc, #148]	; (800bccc <Process_Data_from_Other+0x280>)
 800bc36:	2200      	movs	r2, #0
 800bc38:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bc3a:	4b2e      	ldr	r3, [pc, #184]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f043 0301 	orr.w	r3, r3, #1
 800bc42:	b2da      	uxtb	r2, r3
 800bc44:	4b2b      	ldr	r3, [pc, #172]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc46:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800bc48:	4b1f      	ldr	r3, [pc, #124]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	4618      	mov	r0, r3
 800bc4e:	f004 fbd3 	bl	80103f8 <HAL_Elaps_Ticks>
 800bc52:	4602      	mov	r2, r0
 800bc54:	4b29      	ldr	r3, [pc, #164]	; (800bcfc <Process_Data_from_Other+0x2b0>)
 800bc56:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bc5a:	429a      	cmp	r2, r3
 800bc5c:	d92c      	bls.n	800bcb8 <Process_Data_from_Other+0x26c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800bc5e:	4b29      	ldr	r3, [pc, #164]	; (800bd04 <Process_Data_from_Other+0x2b8>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b19      	ldr	r3, [pc, #100]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d026      	beq.n	800bcb8 <Process_Data_from_Other+0x26c>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800bc6a:	4b17      	ldr	r3, [pc, #92]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a25      	ldr	r2, [pc, #148]	; (800bd04 <Process_Data_from_Other+0x2b8>)
 800bc70:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800bc72:	4b15      	ldr	r3, [pc, #84]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f004 fbbe 	bl	80103f8 <HAL_Elaps_Ticks>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a22      	ldr	r2, [pc, #136]	; (800bd08 <Process_Data_from_Other+0x2bc>)
 800bc80:	fba2 2303 	umull	r2, r3, r2, r3
 800bc84:	099b      	lsrs	r3, r3, #6
 800bc86:	4619      	mov	r1, r3
 800bc88:	4820      	ldr	r0, [pc, #128]	; (800bd0c <Process_Data_from_Other+0x2c0>)
 800bc8a:	f01a f999 	bl	8025fc0 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800bc8e:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <Process_Data_from_Other+0x27c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	4619      	mov	r1, r3
 800bc94:	481e      	ldr	r0, [pc, #120]	; (800bd10 <Process_Data_from_Other+0x2c4>)
 800bc96:	f01a f993 	bl	8025fc0 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == RESET)
 800bc9a:	4b16      	ldr	r3, [pc, #88]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	f003 0302 	and.w	r3, r3, #2
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d108      	bne.n	800bcb8 <Process_Data_from_Other+0x26c>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800bca6:	4b13      	ldr	r3, [pc, #76]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	f043 0302 	orr.w	r3, r3, #2
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	4b10      	ldr	r3, [pc, #64]	; (800bcf4 <Process_Data_from_Other+0x2a8>)
 800bcb2:	701a      	strb	r2, [r3, #0]
 800bcb4:	e000      	b.n	800bcb8 <Process_Data_from_Other+0x26c>
		return;
 800bcb6:	bf00      	nop
			}
		}
	}
}
 800bcb8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcba:	bf00      	nop
 800bcbc:	080291f4 	.word	0x080291f4
 800bcc0:	20000505 	.word	0x20000505
 800bcc4:	20003fa8 	.word	0x20003fa8
 800bcc8:	20003894 	.word	0x20003894
 800bccc:	20003dec 	.word	0x20003dec
 800bcd0:	20003892 	.word	0x20003892
 800bcd4:	20003df4 	.word	0x20003df4
 800bcd8:	20003891 	.word	0x20003891
 800bcdc:	080295bc 	.word	0x080295bc
 800bce0:	080295d4 	.word	0x080295d4
 800bce4:	080295ec 	.word	0x080295ec
 800bce8:	20003e04 	.word	0x20003e04
 800bcec:	20003e88 	.word	0x20003e88
 800bcf0:	20003da8 	.word	0x20003da8
 800bcf4:	20003ddc 	.word	0x20003ddc
 800bcf8:	08029620 	.word	0x08029620
 800bcfc:	20000504 	.word	0x20000504
 800bd00:	08029644 	.word	0x08029644
 800bd04:	20003fac 	.word	0x20003fac
 800bd08:	10624dd3 	.word	0x10624dd3
 800bd0c:	0802965c 	.word	0x0802965c
 800bd10:	0802968c 	.word	0x0802968c

0800bd14 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bd18:	482a      	ldr	r0, [pc, #168]	; (800bdc4 <Print_Medha_Self_Details+0xb0>)
 800bd1a:	f01a f9ed 	bl	80260f8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800bd1e:	4b2a      	ldr	r3, [pc, #168]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd20:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800bd24:	4619      	mov	r1, r3
 800bd26:	4829      	ldr	r0, [pc, #164]	; (800bdcc <Print_Medha_Self_Details+0xb8>)
 800bd28:	f01a f94a 	bl	8025fc0 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800bd2c:	4b26      	ldr	r3, [pc, #152]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd2e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800bd32:	4619      	mov	r1, r3
 800bd34:	4826      	ldr	r0, [pc, #152]	; (800bdd0 <Print_Medha_Self_Details+0xbc>)
 800bd36:	f01a f943 	bl	8025fc0 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800bd3a:	4b23      	ldr	r3, [pc, #140]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd3c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd40:	4619      	mov	r1, r3
 800bd42:	4824      	ldr	r0, [pc, #144]	; (800bdd4 <Print_Medha_Self_Details+0xc0>)
 800bd44:	f01a f93c 	bl	8025fc0 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800bd48:	4b1f      	ldr	r3, [pc, #124]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd4a:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800bd4e:	4619      	mov	r1, r3
 800bd50:	4821      	ldr	r0, [pc, #132]	; (800bdd8 <Print_Medha_Self_Details+0xc4>)
 800bd52:	f01a f935 	bl	8025fc0 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800bd56:	4b1c      	ldr	r3, [pc, #112]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd58:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	481f      	ldr	r0, [pc, #124]	; (800bddc <Print_Medha_Self_Details+0xc8>)
 800bd60:	f01a f92e 	bl	8025fc0 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800bd64:	4b18      	ldr	r3, [pc, #96]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd66:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800bd6a:	4619      	mov	r1, r3
 800bd6c:	481c      	ldr	r0, [pc, #112]	; (800bde0 <Print_Medha_Self_Details+0xcc>)
 800bd6e:	f01a f927 	bl	8025fc0 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800bd72:	4b15      	ldr	r3, [pc, #84]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd74:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800bd78:	4619      	mov	r1, r3
 800bd7a:	481a      	ldr	r0, [pc, #104]	; (800bde4 <Print_Medha_Self_Details+0xd0>)
 800bd7c:	f01a f920 	bl	8025fc0 <iprintf>
	printf("NoofRelays                    :%lu\n",EI_data.Medha_Prms_st.NoofRelays);
 800bd80:	4b11      	ldr	r3, [pc, #68]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd82:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 800bd86:	4619      	mov	r1, r3
 800bd88:	4817      	ldr	r0, [pc, #92]	; (800bde8 <Print_Medha_Self_Details+0xd4>)
 800bd8a:	f01a f919 	bl	8025fc0 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800bd8e:	4b0e      	ldr	r3, [pc, #56]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd90:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800bd94:	4619      	mov	r1, r3
 800bd96:	4815      	ldr	r0, [pc, #84]	; (800bdec <Print_Medha_Self_Details+0xd8>)
 800bd98:	f01a f912 	bl	8025fc0 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800bd9c:	4b0a      	ldr	r3, [pc, #40]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bd9e:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800bda2:	4619      	mov	r1, r3
 800bda4:	4812      	ldr	r0, [pc, #72]	; (800bdf0 <Print_Medha_Self_Details+0xdc>)
 800bda6:	f01a f90b 	bl	8025fc0 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800bdaa:	4b07      	ldr	r3, [pc, #28]	; (800bdc8 <Print_Medha_Self_Details+0xb4>)
 800bdac:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4810      	ldr	r0, [pc, #64]	; (800bdf4 <Print_Medha_Self_Details+0xe0>)
 800bdb4:	f01a f904 	bl	8025fc0 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800bdb8:	4802      	ldr	r0, [pc, #8]	; (800bdc4 <Print_Medha_Self_Details+0xb0>)
 800bdba:	f01a f99d 	bl	80260f8 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800bdbe:	bf00      	nop
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	080296b4 	.word	0x080296b4
 800bdc8:	20000504 	.word	0x20000504
 800bdcc:	08029708 	.word	0x08029708
 800bdd0:	0802972c 	.word	0x0802972c
 800bdd4:	08029750 	.word	0x08029750
 800bdd8:	08029774 	.word	0x08029774
 800bddc:	08029798 	.word	0x08029798
 800bde0:	080297bc 	.word	0x080297bc
 800bde4:	080297e0 	.word	0x080297e0
 800bde8:	08029804 	.word	0x08029804
 800bdec:	08029828 	.word	0x08029828
 800bdf0:	0802984c 	.word	0x0802984c
 800bdf4:	08029870 	.word	0x08029870

0800bdf8 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b09a      	sub	sp, #104	; 0x68
 800bdfc:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800bdfe:	2300      	movs	r3, #0
 800be00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800be10:	2300      	movs	r3, #0
 800be12:	603b      	str	r3, [r7, #0]
 800be14:	1d3b      	adds	r3, r7, #4
 800be16:	2260      	movs	r2, #96	; 0x60
 800be18:	2100      	movs	r1, #0
 800be1a:	4618      	mov	r0, r3
 800be1c:	f019 ffe8 	bl	8025df0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800be20:	4bb9      	ldr	r3, [pc, #740]	; (800c108 <CheckforMedhaCMD+0x310>)
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4618      	mov	r0, r3
 800be26:	f004 fae7 	bl	80103f8 <HAL_Elaps_Ticks>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b09      	cmp	r3, #9
 800be2e:	f240 81ad 	bls.w	800c18c <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800be32:	e010      	b.n	800be56 <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800be34:	2000      	movs	r0, #0
 800be36:	f00c fe85 	bl	8018b44 <Com_Get_Byte>
 800be3a:	4603      	mov	r3, r0
 800be3c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800be40:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be44:	1c5a      	adds	r2, r3, #1
 800be46:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800be4a:	3368      	adds	r3, #104	; 0x68
 800be4c:	443b      	add	r3, r7
 800be4e:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800be52:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800be56:	2000      	movs	r0, #0
 800be58:	f00c fe34 	bl	8018ac4 <Com_DataReady>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e8      	bne.n	800be34 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800be62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be66:	2b00      	cmp	r3, #0
 800be68:	f000 8144 	beq.w	800c0f4 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800be6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800be70:	3368      	adds	r3, #104	; 0x68
 800be72:	443b      	add	r3, r7
 800be74:	2200      	movs	r2, #0
 800be76:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800be7a:	463b      	mov	r3, r7
 800be7c:	4619      	mov	r1, r3
 800be7e:	48a3      	ldr	r0, [pc, #652]	; (800c10c <CheckforMedhaCMD+0x314>)
 800be80:	f01a f89e 	bl	8025fc0 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800be84:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800be88:	463b      	mov	r3, r7
 800be8a:	4611      	mov	r1, r2
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 fa0d 	bl	800c2ac <Is_MedhaCommand_Valid>
 800be92:	4603      	mov	r3, r0
 800be94:	2b0c      	cmp	r3, #12
 800be96:	f200 8129 	bhi.w	800c0ec <CheckforMedhaCMD+0x2f4>
 800be9a:	a201      	add	r2, pc, #4	; (adr r2, 800bea0 <CheckforMedhaCMD+0xa8>)
 800be9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea0:	0800bed5 	.word	0x0800bed5
 800bea4:	0800bee3 	.word	0x0800bee3
 800bea8:	0800bf47 	.word	0x0800bf47
 800beac:	0800bf69 	.word	0x0800bf69
 800beb0:	0800bf91 	.word	0x0800bf91
 800beb4:	0800bfb9 	.word	0x0800bfb9
 800beb8:	0800bfe1 	.word	0x0800bfe1
 800bebc:	0800c009 	.word	0x0800c009
 800bec0:	0800c031 	.word	0x0800c031
 800bec4:	0800c059 	.word	0x0800c059
 800bec8:	0800c081 	.word	0x0800c081
 800becc:	0800c0a9 	.word	0x0800c0a9
 800bed0:	0800c0d1 	.word	0x0800c0d1
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800bed4:	4b8e      	ldr	r3, [pc, #568]	; (800c110 <CheckforMedhaCMD+0x318>)
 800bed6:	2201      	movs	r2, #1
 800bed8:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800beda:	488e      	ldr	r0, [pc, #568]	; (800c114 <CheckforMedhaCMD+0x31c>)
 800bedc:	f01a f90c 	bl	80260f8 <puts>
				break;
 800bee0:	e109      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800bee2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bee6:	3b01      	subs	r3, #1
 800bee8:	3368      	adds	r3, #104	; 0x68
 800beea:	443b      	add	r3, r7
 800beec:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bef0:	3b30      	subs	r3, #48	; 0x30
 800bef2:	461a      	mov	r2, r3
 800bef4:	4988      	ldr	r1, [pc, #544]	; (800c118 <CheckforMedhaCMD+0x320>)
 800bef6:	4889      	ldr	r0, [pc, #548]	; (800c11c <CheckforMedhaCMD+0x324>)
 800bef8:	f01a f862 	bl	8025fc0 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800befc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf00:	3b01      	subs	r3, #1
 800bf02:	3368      	adds	r3, #104	; 0x68
 800bf04:	443b      	add	r3, r7
 800bf06:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf0a:	2b2f      	cmp	r3, #47	; 0x2f
 800bf0c:	d914      	bls.n	800bf38 <CheckforMedhaCMD+0x140>
 800bf0e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf12:	3b01      	subs	r3, #1
 800bf14:	3368      	adds	r3, #104	; 0x68
 800bf16:	443b      	add	r3, r7
 800bf18:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf1c:	2b32      	cmp	r3, #50	; 0x32
 800bf1e:	d80b      	bhi.n	800bf38 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800bf20:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800bf24:	3b01      	subs	r3, #1
 800bf26:	3368      	adds	r3, #104	; 0x68
 800bf28:	443b      	add	r3, r7
 800bf2a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800bf2e:	3b30      	subs	r3, #48	; 0x30
 800bf30:	b2da      	uxtb	r2, r3
 800bf32:	4b7b      	ldr	r3, [pc, #492]	; (800c120 <CheckforMedhaCMD+0x328>)
 800bf34:	701a      	strb	r2, [r3, #0]
 800bf36:	e002      	b.n	800bf3e <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800bf38:	487a      	ldr	r0, [pc, #488]	; (800c124 <CheckforMedhaCMD+0x32c>)
 800bf3a:	f01a f8dd 	bl	80260f8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf44:	e0d7      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800bf46:	4978      	ldr	r1, [pc, #480]	; (800c128 <CheckforMedhaCMD+0x330>)
 800bf48:	4878      	ldr	r0, [pc, #480]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf4a:	f01a f839 	bl	8025fc0 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800bf4e:	4878      	ldr	r0, [pc, #480]	; (800c130 <CheckforMedhaCMD+0x338>)
 800bf50:	f01a f8d2 	bl	80260f8 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf54:	4b77      	ldr	r3, [pc, #476]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f043 0301 	orr.w	r3, r3, #1
 800bf5c:	4a75      	ldr	r2, [pc, #468]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf5e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf66:	e0c6      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800bf68:	4973      	ldr	r1, [pc, #460]	; (800c138 <CheckforMedhaCMD+0x340>)
 800bf6a:	4870      	ldr	r0, [pc, #448]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf6c:	f01a f828 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800bf70:	4872      	ldr	r0, [pc, #456]	; (800c13c <CheckforMedhaCMD+0x344>)
 800bf72:	f01a f8c1 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf76:	4b6f      	ldr	r3, [pc, #444]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bf7c:	4b6d      	ldr	r3, [pc, #436]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f043 0302 	orr.w	r3, r3, #2
 800bf84:	4a6b      	ldr	r2, [pc, #428]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bf86:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bf88:	2301      	movs	r3, #1
 800bf8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bf8e:	e0b2      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800bf90:	496b      	ldr	r1, [pc, #428]	; (800c140 <CheckforMedhaCMD+0x348>)
 800bf92:	4866      	ldr	r0, [pc, #408]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bf94:	f01a f814 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800bf98:	486a      	ldr	r0, [pc, #424]	; (800c144 <CheckforMedhaCMD+0x34c>)
 800bf9a:	f01a f8ad 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bf9e:	4b65      	ldr	r3, [pc, #404]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfa4:	4b63      	ldr	r3, [pc, #396]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	f043 0304 	orr.w	r3, r3, #4
 800bfac:	4a61      	ldr	r2, [pc, #388]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfb6:	e09e      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800bfb8:	4963      	ldr	r1, [pc, #396]	; (800c148 <CheckforMedhaCMD+0x350>)
 800bfba:	485c      	ldr	r0, [pc, #368]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bfbc:	f01a f800 	bl	8025fc0 <iprintf>
				printf("INVALID_DES_PORT\n");
 800bfc0:	4862      	ldr	r0, [pc, #392]	; (800c14c <CheckforMedhaCMD+0x354>)
 800bfc2:	f01a f899 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfc6:	4b5b      	ldr	r3, [pc, #364]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfc8:	2200      	movs	r2, #0
 800bfca:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bfcc:	4b59      	ldr	r3, [pc, #356]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f043 0308 	orr.w	r3, r3, #8
 800bfd4:	4a57      	ldr	r2, [pc, #348]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bfd6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800bfd8:	2301      	movs	r3, #1
 800bfda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800bfde:	e08a      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800bfe0:	495b      	ldr	r1, [pc, #364]	; (800c150 <CheckforMedhaCMD+0x358>)
 800bfe2:	4852      	ldr	r0, [pc, #328]	; (800c12c <CheckforMedhaCMD+0x334>)
 800bfe4:	f019 ffec 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800bfe8:	485a      	ldr	r0, [pc, #360]	; (800c154 <CheckforMedhaCMD+0x35c>)
 800bfea:	f01a f885 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800bfee:	4b51      	ldr	r3, [pc, #324]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bff0:	2200      	movs	r2, #0
 800bff2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800bff4:	4b4f      	ldr	r3, [pc, #316]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f043 0310 	orr.w	r3, r3, #16
 800bffc:	4a4d      	ldr	r2, [pc, #308]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800bffe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c000:	2301      	movs	r3, #1
 800c002:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c006:	e076      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800c008:	4953      	ldr	r1, [pc, #332]	; (800c158 <CheckforMedhaCMD+0x360>)
 800c00a:	4848      	ldr	r0, [pc, #288]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c00c:	f019 ffd8 	bl	8025fc0 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800c010:	4852      	ldr	r0, [pc, #328]	; (800c15c <CheckforMedhaCMD+0x364>)
 800c012:	f01a f871 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c016:	4b47      	ldr	r3, [pc, #284]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c018:	2200      	movs	r2, #0
 800c01a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c01c:	4b45      	ldr	r3, [pc, #276]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f043 0320 	orr.w	r3, r3, #32
 800c024:	4a43      	ldr	r2, [pc, #268]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c026:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c028:	2301      	movs	r3, #1
 800c02a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c02e:	e062      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800c030:	494b      	ldr	r1, [pc, #300]	; (800c160 <CheckforMedhaCMD+0x368>)
 800c032:	484c      	ldr	r0, [pc, #304]	; (800c164 <CheckforMedhaCMD+0x36c>)
 800c034:	f019 ffc4 	bl	8025fc0 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800c038:	484b      	ldr	r0, [pc, #300]	; (800c168 <CheckforMedhaCMD+0x370>)
 800c03a:	f01a f85d 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c03e:	4b3d      	ldr	r3, [pc, #244]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c040:	2200      	movs	r2, #0
 800c042:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c044:	4b3b      	ldr	r3, [pc, #236]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c04c:	4a39      	ldr	r2, [pc, #228]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c04e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c050:	2301      	movs	r3, #1
 800c052:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c056:	e04e      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800c058:	4944      	ldr	r1, [pc, #272]	; (800c16c <CheckforMedhaCMD+0x374>)
 800c05a:	4834      	ldr	r0, [pc, #208]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c05c:	f019 ffb0 	bl	8025fc0 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800c060:	4843      	ldr	r0, [pc, #268]	; (800c170 <CheckforMedhaCMD+0x378>)
 800c062:	f01a f849 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c066:	4b33      	ldr	r3, [pc, #204]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c068:	2200      	movs	r2, #0
 800c06a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c06c:	4b31      	ldr	r3, [pc, #196]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c074:	4a2f      	ldr	r2, [pc, #188]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c076:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c078:	2301      	movs	r3, #1
 800c07a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c07e:	e03a      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800c080:	493c      	ldr	r1, [pc, #240]	; (800c174 <CheckforMedhaCMD+0x37c>)
 800c082:	482a      	ldr	r0, [pc, #168]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c084:	f019 ff9c 	bl	8025fc0 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800c088:	483b      	ldr	r0, [pc, #236]	; (800c178 <CheckforMedhaCMD+0x380>)
 800c08a:	f01a f835 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c08e:	4b29      	ldr	r3, [pc, #164]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c090:	2200      	movs	r2, #0
 800c092:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c094:	4b27      	ldr	r3, [pc, #156]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c09c:	4a25      	ldr	r2, [pc, #148]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c09e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0a6:	e026      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800c0a8:	4934      	ldr	r1, [pc, #208]	; (800c17c <CheckforMedhaCMD+0x384>)
 800c0aa:	4820      	ldr	r0, [pc, #128]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c0ac:	f019 ff88 	bl	8025fc0 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800c0b0:	4833      	ldr	r0, [pc, #204]	; (800c180 <CheckforMedhaCMD+0x388>)
 800c0b2:	f01a f821 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c0b6:	4b1f      	ldr	r3, [pc, #124]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800c0bc:	4b1d      	ldr	r3, [pc, #116]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c0c4:	4a1b      	ldr	r2, [pc, #108]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0c6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0c8:	2301      	movs	r3, #1
 800c0ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0ce:	e012      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800c0d0:	492c      	ldr	r1, [pc, #176]	; (800c184 <CheckforMedhaCMD+0x38c>)
 800c0d2:	4816      	ldr	r0, [pc, #88]	; (800c12c <CheckforMedhaCMD+0x334>)
 800c0d4:	f019 ff74 	bl	8025fc0 <iprintf>
				printf("CLEAR ALL\n");
 800c0d8:	482b      	ldr	r0, [pc, #172]	; (800c188 <CheckforMedhaCMD+0x390>)
 800c0da:	f01a f80d 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800c0de:	4b15      	ldr	r3, [pc, #84]	; (800c134 <CheckforMedhaCMD+0x33c>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800c0e4:	2301      	movs	r3, #1
 800c0e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800c0ea:	e004      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800c0ec:	480d      	ldr	r0, [pc, #52]	; (800c124 <CheckforMedhaCMD+0x32c>)
 800c0ee:	f01a f803 	bl	80260f8 <puts>
 800c0f2:	e000      	b.n	800c0f6 <CheckforMedhaCMD+0x2fe>
			}
		}
 800c0f4:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800c0f6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d147      	bne.n	800c18e <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800c0fe:	f240 2005 	movw	r0, #517	; 0x205
 800c102:	f004 ff2d 	bl	8010f60 <TransmitCanPkt>
 800c106:	e042      	b.n	800c18e <CheckforMedhaCMD+0x396>
 800c108:	2000bfdc 	.word	0x2000bfdc
 800c10c:	08029894 	.word	0x08029894
 800c110:	20000bba 	.word	0x20000bba
 800c114:	080298ac 	.word	0x080298ac
 800c118:	200038ca 	.word	0x200038ca
 800c11c:	080298ec 	.word	0x080298ec
 800c120:	20000bbb 	.word	0x20000bbb
 800c124:	08029900 	.word	0x08029900
 800c128:	200038fc 	.word	0x200038fc
 800c12c:	0802991c 	.word	0x0802991c
 800c130:	0802992c 	.word	0x0802992c
 800c134:	20004c54 	.word	0x20004c54
 800c138:	2000392e 	.word	0x2000392e
 800c13c:	08029944 	.word	0x08029944
 800c140:	20003960 	.word	0x20003960
 800c144:	0802995c 	.word	0x0802995c
 800c148:	20003992 	.word	0x20003992
 800c14c:	08029970 	.word	0x08029970
 800c150:	200039c4 	.word	0x200039c4
 800c154:	08029984 	.word	0x08029984
 800c158:	200039f6 	.word	0x200039f6
 800c15c:	08029998 	.word	0x08029998
 800c160:	20003a28 	.word	0x20003a28
 800c164:	080299b4 	.word	0x080299b4
 800c168:	080299cc 	.word	0x080299cc
 800c16c:	20003a5a 	.word	0x20003a5a
 800c170:	080299e0 	.word	0x080299e0
 800c174:	20003a8c 	.word	0x20003a8c
 800c178:	080299f8 	.word	0x080299f8
 800c17c:	20003abe 	.word	0x20003abe
 800c180:	08029a18 	.word	0x08029a18
 800c184:	20003af0 	.word	0x20003af0
 800c188:	08029a38 	.word	0x08029a38
		return;
 800c18c:	bf00      	nop
		}
	}
}
 800c18e:	3768      	adds	r7, #104	; 0x68
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}

0800c194 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800c194:	b480      	push	{r7}
 800c196:	b083      	sub	sp, #12
 800c198:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800c19a:	2300      	movs	r3, #0
 800c19c:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800c19e:	79fb      	ldrb	r3, [r7, #7]
 800c1a0:	4a3d      	ldr	r2, [pc, #244]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1a2:	2132      	movs	r1, #50	; 0x32
 800c1a4:	fb01 f303 	mul.w	r3, r1, r3
 800c1a8:	4413      	add	r3, r2
 800c1aa:	2224      	movs	r2, #36	; 0x24
 800c1ac:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800c1ae:	79fb      	ldrb	r3, [r7, #7]
 800c1b0:	4a39      	ldr	r2, [pc, #228]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1b2:	2132      	movs	r1, #50	; 0x32
 800c1b4:	fb01 f303 	mul.w	r3, r1, r3
 800c1b8:	4413      	add	r3, r2
 800c1ba:	3301      	adds	r3, #1
 800c1bc:	2201      	movs	r2, #1
 800c1be:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800c1c0:	79fb      	ldrb	r3, [r7, #7]
 800c1c2:	4a35      	ldr	r2, [pc, #212]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1c4:	2132      	movs	r1, #50	; 0x32
 800c1c6:	fb01 f303 	mul.w	r3, r1, r3
 800c1ca:	4413      	add	r3, r2
 800c1cc:	3302      	adds	r3, #2
 800c1ce:	2230      	movs	r2, #48	; 0x30
 800c1d0:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800c1d2:	79fb      	ldrb	r3, [r7, #7]
 800c1d4:	4a30      	ldr	r2, [pc, #192]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1d6:	2132      	movs	r1, #50	; 0x32
 800c1d8:	fb01 f303 	mul.w	r3, r1, r3
 800c1dc:	4413      	add	r3, r2
 800c1de:	3303      	adds	r3, #3
 800c1e0:	2240      	movs	r2, #64	; 0x40
 800c1e2:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800c1e4:	79fb      	ldrb	r3, [r7, #7]
 800c1e6:	4a2c      	ldr	r2, [pc, #176]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1e8:	2132      	movs	r1, #50	; 0x32
 800c1ea:	fb01 f303 	mul.w	r3, r1, r3
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	22c0      	movs	r2, #192	; 0xc0
 800c1f4:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800c1f6:	79fb      	ldrb	r3, [r7, #7]
 800c1f8:	4a27      	ldr	r2, [pc, #156]	; (800c298 <Update_MedhaCommands+0x104>)
 800c1fa:	2132      	movs	r1, #50	; 0x32
 800c1fc:	fb01 f303 	mul.w	r3, r1, r3
 800c200:	4413      	add	r3, r2
 800c202:	3305      	adds	r3, #5
 800c204:	224e      	movs	r2, #78	; 0x4e
 800c206:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800c208:	79fb      	ldrb	r3, [r7, #7]
 800c20a:	4a23      	ldr	r2, [pc, #140]	; (800c298 <Update_MedhaCommands+0x104>)
 800c20c:	2132      	movs	r1, #50	; 0x32
 800c20e:	fb01 f303 	mul.w	r3, r1, r3
 800c212:	4413      	add	r3, r2
 800c214:	3306      	adds	r3, #6
 800c216:	2226      	movs	r2, #38	; 0x26
 800c218:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800c21a:	79fb      	ldrb	r3, [r7, #7]
 800c21c:	3301      	adds	r3, #1
 800c21e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800c220:	79fb      	ldrb	r3, [r7, #7]
 800c222:	1c5a      	adds	r2, r3, #1
 800c224:	71fa      	strb	r2, [r7, #7]
 800c226:	461a      	mov	r2, r3
 800c228:	2332      	movs	r3, #50	; 0x32
 800c22a:	fb02 f303 	mul.w	r3, r2, r3
 800c22e:	4a1a      	ldr	r2, [pc, #104]	; (800c298 <Update_MedhaCommands+0x104>)
 800c230:	4413      	add	r3, r2
 800c232:	491a      	ldr	r1, [pc, #104]	; (800c29c <Update_MedhaCommands+0x108>)
 800c234:	461a      	mov	r2, r3
 800c236:	460b      	mov	r3, r1
 800c238:	cb03      	ldmia	r3!, {r0, r1}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	6051      	str	r1, [r2, #4]
 800c23e:	8819      	ldrh	r1, [r3, #0]
 800c240:	789b      	ldrb	r3, [r3, #2]
 800c242:	8111      	strh	r1, [r2, #8]
 800c244:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800c246:	79fb      	ldrb	r3, [r7, #7]
 800c248:	1c5a      	adds	r2, r3, #1
 800c24a:	71fa      	strb	r2, [r7, #7]
 800c24c:	461a      	mov	r2, r3
 800c24e:	2332      	movs	r3, #50	; 0x32
 800c250:	fb02 f303 	mul.w	r3, r2, r3
 800c254:	4a10      	ldr	r2, [pc, #64]	; (800c298 <Update_MedhaCommands+0x104>)
 800c256:	4413      	add	r3, r2
 800c258:	4911      	ldr	r1, [pc, #68]	; (800c2a0 <Update_MedhaCommands+0x10c>)
 800c25a:	461a      	mov	r2, r3
 800c25c:	460b      	mov	r3, r1
 800c25e:	cb03      	ldmia	r3!, {r0, r1}
 800c260:	6010      	str	r0, [r2, #0]
 800c262:	6051      	str	r1, [r2, #4]
 800c264:	881b      	ldrh	r3, [r3, #0]
 800c266:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800c268:	79fb      	ldrb	r3, [r7, #7]
 800c26a:	1c5a      	adds	r2, r3, #1
 800c26c:	71fa      	strb	r2, [r7, #7]
 800c26e:	461a      	mov	r2, r3
 800c270:	2332      	movs	r3, #50	; 0x32
 800c272:	fb02 f303 	mul.w	r3, r2, r3
 800c276:	4a08      	ldr	r2, [pc, #32]	; (800c298 <Update_MedhaCommands+0x104>)
 800c278:	4413      	add	r3, r2
 800c27a:	4a0a      	ldr	r2, [pc, #40]	; (800c2a4 <Update_MedhaCommands+0x110>)
 800c27c:	6810      	ldr	r0, [r2, #0]
 800c27e:	6018      	str	r0, [r3, #0]
 800c280:	7912      	ldrb	r2, [r2, #4]
 800c282:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800c284:	4a08      	ldr	r2, [pc, #32]	; (800c2a8 <Update_MedhaCommands+0x114>)
 800c286:	79fb      	ldrb	r3, [r7, #7]
 800c288:	7013      	strb	r3, [r2, #0]
}
 800c28a:	bf00      	nop
 800c28c:	370c      	adds	r7, #12
 800c28e:	46bd      	mov	sp, r7
 800c290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	20003898 	.word	0x20003898
 800c29c:	08029a44 	.word	0x08029a44
 800c2a0:	08029a50 	.word	0x08029a50
 800c2a4:	08029a5c 	.word	0x08029a5c
 800c2a8:	20003c80 	.word	0x20003c80

0800c2ac <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800c2ac:	b590      	push	{r4, r7, lr}
 800c2ae:	b085      	sub	sp, #20
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	460b      	mov	r3, r1
 800c2b6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	73fb      	strb	r3, [r7, #15]
 800c2bc:	e01c      	b.n	800c2f8 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800c2be:	7bfb      	ldrb	r3, [r7, #15]
 800c2c0:	2232      	movs	r2, #50	; 0x32
 800c2c2:	fb02 f303 	mul.w	r3, r2, r3
 800c2c6:	4a11      	ldr	r2, [pc, #68]	; (800c30c <Is_MedhaCommand_Valid+0x60>)
 800c2c8:	189c      	adds	r4, r3, r2
 800c2ca:	7bfb      	ldrb	r3, [r7, #15]
 800c2cc:	2232      	movs	r2, #50	; 0x32
 800c2ce:	fb02 f303 	mul.w	r3, r2, r3
 800c2d2:	4a0e      	ldr	r2, [pc, #56]	; (800c30c <Is_MedhaCommand_Valid+0x60>)
 800c2d4:	4413      	add	r3, r2
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f7f3 ffbc 	bl	8000254 <strlen>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	461a      	mov	r2, r3
 800c2e0:	4621      	mov	r1, r4
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f019 fd4c 	bl	8025d80 <memcmp>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d101      	bne.n	800c2f2 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800c2ee:	7bfb      	ldrb	r3, [r7, #15]
 800c2f0:	e008      	b.n	800c304 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3301      	adds	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	4b05      	ldr	r3, [pc, #20]	; (800c310 <Is_MedhaCommand_Valid+0x64>)
 800c2fa:	781b      	ldrb	r3, [r3, #0]
 800c2fc:	7bfa      	ldrb	r2, [r7, #15]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d3dd      	bcc.n	800c2be <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800c302:	23ff      	movs	r3, #255	; 0xff
}
 800c304:	4618      	mov	r0, r3
 800c306:	3714      	adds	r7, #20
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd90      	pop	{r4, r7, pc}
 800c30c:	20003898 	.word	0x20003898
 800c310:	20003c80 	.word	0x20003c80

0800c314 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800c314:	b480      	push	{r7}
 800c316:	b087      	sub	sp, #28
 800c318:	af00      	add	r7, sp, #0
 800c31a:	4603      	mov	r3, r0
 800c31c:	6039      	str	r1, [r7, #0]
 800c31e:	80fb      	strh	r3, [r7, #6]
 800c320:	4613      	mov	r3, r2
 800c322:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800c324:	2300      	movs	r3, #0
 800c326:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800c32c:	2300      	movs	r3, #0
 800c32e:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800c330:	88fb      	ldrh	r3, [r7, #6]
 800c332:	613b      	str	r3, [r7, #16]
 800c334:	e015      	b.n	800c362 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	b2da      	uxtb	r2, r3
 800c33a:	6839      	ldr	r1, [r7, #0]
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	440b      	add	r3, r1
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	4053      	eors	r3, r2
 800c344:	b2db      	uxtb	r3, r3
 800c346:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800c34e:	4a0a      	ldr	r2, [pc, #40]	; (800c378 <GetCRC32+0x64>)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4053      	eors	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	3301      	adds	r3, #1
 800c360:	613b      	str	r3, [r7, #16]
 800c362:	88bb      	ldrh	r3, [r7, #4]
 800c364:	693a      	ldr	r2, [r7, #16]
 800c366:	429a      	cmp	r2, r3
 800c368:	d3e5      	bcc.n	800c336 <GetCRC32+0x22>
	}

	return Crc;
 800c36a:	697b      	ldr	r3, [r7, #20]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	371c      	adds	r7, #28
 800c370:	46bd      	mov	sp, r7
 800c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c376:	4770      	bx	lr
 800c378:	0802cd38 	.word	0x0802cd38

0800c37c <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	4603      	mov	r3, r0
 800c384:	6039      	str	r1, [r7, #0]
 800c386:	80fb      	strh	r3, [r7, #6]
 800c388:	4613      	mov	r3, r2
 800c38a:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800c38c:	2300      	movs	r3, #0
 800c38e:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800c390:	2300      	movs	r3, #0
 800c392:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800c394:	88ba      	ldrh	r2, [r7, #4]
 800c396:	88fb      	ldrh	r3, [r7, #6]
 800c398:	6839      	ldr	r1, [r7, #0]
 800c39a:	4618      	mov	r0, r3
 800c39c:	f7ff ffba 	bl	800c314 <GetCRC32>
 800c3a0:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800c3a2:	88bb      	ldrh	r3, [r7, #4]
 800c3a4:	683a      	ldr	r2, [r7, #0]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	68fa      	ldr	r2, [r7, #12]
 800c3b0:	429a      	cmp	r2, r3
 800c3b2:	d101      	bne.n	800c3b8 <CheckCRC32+0x3c>
	{
		return OK;
 800c3b4:	2301      	movs	r3, #1
 800c3b6:	e009      	b.n	800c3cc <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	4619      	mov	r1, r3
 800c3bc:	4805      	ldr	r0, [pc, #20]	; (800c3d4 <CheckCRC32+0x58>)
 800c3be:	f019 fdff 	bl	8025fc0 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800c3c2:	68f9      	ldr	r1, [r7, #12]
 800c3c4:	4804      	ldr	r0, [pc, #16]	; (800c3d8 <CheckCRC32+0x5c>)
 800c3c6:	f019 fdfb 	bl	8025fc0 <iprintf>
		return NOT_OK;
 800c3ca:	2300      	movs	r3, #0
	}

}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	3710      	adds	r7, #16
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}
 800c3d4:	08029a64 	.word	0x08029a64
 800c3d8:	08029a7c 	.word	0x08029a7c

0800c3dc <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b086      	sub	sp, #24
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	f107 0310 	add.w	r3, r7, #16
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	601a      	str	r2, [r3, #0]
 800c3f2:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800c3f4:	79fb      	ldrb	r3, [r7, #7]
 800c3f6:	b29b      	uxth	r3, r3
 800c3f8:	f107 010c 	add.w	r1, r7, #12
 800c3fc:	220a      	movs	r2, #10
 800c3fe:	4618      	mov	r0, r3
 800c400:	f000 f846 	bl	800c490 <ReadAndFormMsg>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	dd34      	ble.n	800c474 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c40a:	7b7b      	ldrb	r3, [r7, #13]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d115      	bne.n	800c43c <CheckForRqst+0x60>
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	2b01      	cmp	r3, #1
 800c414:	d112      	bne.n	800c43c <CheckForRqst+0x60>
 800c416:	7bfb      	ldrb	r3, [r7, #15]
 800c418:	2b01      	cmp	r3, #1
 800c41a:	d10f      	bne.n	800c43c <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800c41c:	4818      	ldr	r0, [pc, #96]	; (800c480 <CheckForRqst+0xa4>)
 800c41e:	f019 fe6b 	bl	80260f8 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800c422:	79fb      	ldrb	r3, [r7, #7]
 800c424:	2202      	movs	r2, #2
 800c426:	2101      	movs	r1, #1
 800c428:	4618      	mov	r0, r3
 800c42a:	f000 f933 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c42e:	f00c feb1 	bl	8019194 <HAL_GetTick>
 800c432:	4603      	mov	r3, r0
 800c434:	4a13      	ldr	r2, [pc, #76]	; (800c484 <CheckForRqst+0xa8>)
 800c436:	6013      	str	r3, [r2, #0]
			return 0x01;
 800c438:	2301      	movs	r3, #1
 800c43a:	e01c      	b.n	800c476 <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800c43c:	7b7b      	ldrb	r3, [r7, #13]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d115      	bne.n	800c46e <CheckForRqst+0x92>
 800c442:	7bbb      	ldrb	r3, [r7, #14]
 800c444:	2b02      	cmp	r3, #2
 800c446:	d112      	bne.n	800c46e <CheckForRqst+0x92>
 800c448:	7bfb      	ldrb	r3, [r7, #15]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d10f      	bne.n	800c46e <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800c44e:	480e      	ldr	r0, [pc, #56]	; (800c488 <CheckForRqst+0xac>)
 800c450:	f019 fe52 	bl	80260f8 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800c454:	79fb      	ldrb	r3, [r7, #7]
 800c456:	2202      	movs	r2, #2
 800c458:	2102      	movs	r1, #2
 800c45a:	4618      	mov	r0, r3
 800c45c:	f000 f91a 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800c460:	f00c fe98 	bl	8019194 <HAL_GetTick>
 800c464:	4603      	mov	r3, r0
 800c466:	4a07      	ldr	r2, [pc, #28]	; (800c484 <CheckForRqst+0xa8>)
 800c468:	6013      	str	r3, [r2, #0]
			return 0x02;
 800c46a:	2302      	movs	r3, #2
 800c46c:	e003      	b.n	800c476 <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800c46e:	4807      	ldr	r0, [pc, #28]	; (800c48c <CheckForRqst+0xb0>)
 800c470:	f019 fe42 	bl	80260f8 <puts>
	}
	return 0x00;
 800c474:	2300      	movs	r3, #0
}
 800c476:	4618      	mov	r0, r3
 800c478:	3718      	adds	r7, #24
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}
 800c47e:	bf00      	nop
 800c480:	08029a94 	.word	0x08029a94
 800c484:	20000fc0 	.word	0x20000fc0
 800c488:	08029aac 	.word	0x08029aac
 800c48c:	08029ac4 	.word	0x08029ac4

0800c490 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c490:	b590      	push	{r4, r7, lr}
 800c492:	b087      	sub	sp, #28
 800c494:	af02      	add	r7, sp, #8
 800c496:	4603      	mov	r3, r0
 800c498:	6039      	str	r1, [r7, #0]
 800c49a:	80fb      	strh	r3, [r7, #6]
 800c49c:	4613      	mov	r3, r2
 800c49e:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c4ac:	e0d4      	b.n	800c658 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800c4ae:	4b71      	ldr	r3, [pc, #452]	; (800c674 <ReadAndFormMsg+0x1e4>)
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800c4b4:	4870      	ldr	r0, [pc, #448]	; (800c678 <ReadAndFormMsg+0x1e8>)
 800c4b6:	f010 f8df 	bl	801c678 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800c4ba:	88fb      	ldrh	r3, [r7, #6]
 800c4bc:	b2db      	uxtb	r3, r3
 800c4be:	4618      	mov	r0, r3
 800c4c0:	f00c fb40 	bl	8018b44 <Com_Get_Byte>
 800c4c4:	4603      	mov	r3, r0
 800c4c6:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800c4c8:	f00c fc52 	bl	8018d70 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800c4cc:	4b6b      	ldr	r3, [pc, #428]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b03      	cmp	r3, #3
 800c4d2:	f000 8099 	beq.w	800c608 <ReadAndFormMsg+0x178>
 800c4d6:	2b03      	cmp	r3, #3
 800c4d8:	f300 80b0 	bgt.w	800c63c <ReadAndFormMsg+0x1ac>
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	d002      	beq.n	800c4e6 <ReadAndFormMsg+0x56>
 800c4e0:	2b02      	cmp	r3, #2
 800c4e2:	d00e      	beq.n	800c502 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c4e4:	e0aa      	b.n	800c63c <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	2b24      	cmp	r3, #36	; 0x24
 800c4ea:	f040 80a9 	bne.w	800c640 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	7bfa      	ldrb	r2, [r7, #15]
 800c4f2:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c4f4:	4b62      	ldr	r3, [pc, #392]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c4f6:	2201      	movs	r2, #1
 800c4f8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c4fa:	4b60      	ldr	r3, [pc, #384]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c4fc:	2202      	movs	r2, #2
 800c4fe:	701a      	strb	r2, [r3, #0]
			break;
 800c500:	e09e      	b.n	800c640 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800c502:	7bfb      	ldrb	r3, [r7, #15]
 800c504:	2b26      	cmp	r3, #38	; 0x26
 800c506:	d006      	beq.n	800c516 <ReadAndFormMsg+0x86>
 800c508:	2b26      	cmp	r3, #38	; 0x26
 800c50a:	dc6e      	bgt.n	800c5ea <ReadAndFormMsg+0x15a>
 800c50c:	2b05      	cmp	r3, #5
 800c50e:	d068      	beq.n	800c5e2 <ReadAndFormMsg+0x152>
 800c510:	2b24      	cmp	r3, #36	; 0x24
 800c512:	d05c      	beq.n	800c5ce <ReadAndFormMsg+0x13e>
 800c514:	e069      	b.n	800c5ea <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800c516:	4b5a      	ldr	r3, [pc, #360]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c518:	881b      	ldrh	r3, [r3, #0]
 800c51a:	3b02      	subs	r3, #2
 800c51c:	b29b      	uxth	r3, r3
 800c51e:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800c520:	4b57      	ldr	r3, [pc, #348]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c522:	881b      	ldrh	r3, [r3, #0]
 800c524:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800c526:	4b56      	ldr	r3, [pc, #344]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c528:	2200      	movs	r2, #0
 800c52a:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c52c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c530:	2b00      	cmp	r3, #0
 800c532:	da01      	bge.n	800c538 <ReadAndFormMsg+0xa8>
					return 0;
 800c534:	2300      	movs	r3, #0
 800c536:	e099      	b.n	800c66c <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800c538:	4b50      	ldr	r3, [pc, #320]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c53a:	2201      	movs	r2, #1
 800c53c:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c53e:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800c542:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c546:	683a      	ldr	r2, [r7, #0]
 800c548:	4413      	add	r3, r2
 800c54a:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c54c:	461c      	mov	r4, r3
 800c54e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c552:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800c554:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c558:	3301      	adds	r3, #1
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	4413      	add	r3, r2
 800c55e:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800c560:	9300      	str	r3, [sp, #0]
 800c562:	4603      	mov	r3, r0
 800c564:	4622      	mov	r2, r4
 800c566:	4847      	ldr	r0, [pc, #284]	; (800c684 <ReadAndFormMsg+0x1f4>)
 800c568:	f019 fd2a 	bl	8025fc0 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c56c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c570:	4619      	mov	r1, r3
 800c572:	6838      	ldr	r0, [r7, #0]
 800c574:	f008 ff74 	bl	8015460 <CheckCRC>
 800c578:	4603      	mov	r3, r0
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d012      	beq.n	800c5a4 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c57e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c582:	683a      	ldr	r2, [r7, #0]
 800c584:	4413      	add	r3, r2
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	4619      	mov	r1, r3
 800c58a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c58e:	3301      	adds	r3, #1
 800c590:	683a      	ldr	r2, [r7, #0]
 800c592:	4413      	add	r3, r2
 800c594:	781b      	ldrb	r3, [r3, #0]
 800c596:	461a      	mov	r2, r3
 800c598:	483b      	ldr	r0, [pc, #236]	; (800c688 <ReadAndFormMsg+0x1f8>)
 800c59a:	f019 fd11 	bl	8025fc0 <iprintf>
					return us_ReturnBytes;
 800c59e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c5a2:	e063      	b.n	800c66c <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800c5a4:	4839      	ldr	r0, [pc, #228]	; (800c68c <ReadAndFormMsg+0x1fc>)
 800c5a6:	f019 fd0b 	bl	8025fc0 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c5aa:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5ae:	683a      	ldr	r2, [r7, #0]
 800c5b0:	4413      	add	r3, r2
 800c5b2:	781b      	ldrb	r3, [r3, #0]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	4413      	add	r3, r2
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	4832      	ldr	r0, [pc, #200]	; (800c690 <ReadAndFormMsg+0x200>)
 800c5c6:	f019 fcfb 	bl	8025fc0 <iprintf>
					return 0;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	e04e      	b.n	800c66c <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	7bfa      	ldrb	r2, [r7, #15]
 800c5d2:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800c5d4:	4b2a      	ldr	r3, [pc, #168]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5d6:	2201      	movs	r2, #1
 800c5d8:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c5da:	4b28      	ldr	r3, [pc, #160]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c5dc:	2202      	movs	r2, #2
 800c5de:	701a      	strb	r2, [r3, #0]
				break;
 800c5e0:	e011      	b.n	800c606 <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800c5e2:	4b26      	ldr	r3, [pc, #152]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c5e4:	2203      	movs	r2, #3
 800c5e6:	701a      	strb	r2, [r3, #0]
				break;
 800c5e8:	e00d      	b.n	800c606 <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800c5ea:	4b25      	ldr	r3, [pc, #148]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5ec:	881b      	ldrh	r3, [r3, #0]
 800c5ee:	461a      	mov	r2, r3
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	4413      	add	r3, r2
 800c5f4:	7bfa      	ldrb	r2, [r7, #15]
 800c5f6:	701a      	strb	r2, [r3, #0]
				j++;
 800c5f8:	4b21      	ldr	r3, [pc, #132]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c5fa:	881b      	ldrh	r3, [r3, #0]
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	b29a      	uxth	r2, r3
 800c600:	4b1f      	ldr	r3, [pc, #124]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c602:	801a      	strh	r2, [r3, #0]
				break;
 800c604:	bf00      	nop
			break;
 800c606:	e01c      	b.n	800c642 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b24      	cmp	r3, #36	; 0x24
 800c60c:	d005      	beq.n	800c61a <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b26      	cmp	r3, #38	; 0x26
 800c612:	d002      	beq.n	800c61a <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b05      	cmp	r3, #5
 800c618:	d10c      	bne.n	800c634 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800c61a:	4b19      	ldr	r3, [pc, #100]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c61c:	881b      	ldrh	r3, [r3, #0]
 800c61e:	461a      	mov	r2, r3
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	4413      	add	r3, r2
 800c624:	7bfa      	ldrb	r2, [r7, #15]
 800c626:	701a      	strb	r2, [r3, #0]
					j++;
 800c628:	4b15      	ldr	r3, [pc, #84]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c62a:	881b      	ldrh	r3, [r3, #0]
 800c62c:	3301      	adds	r3, #1
 800c62e:	b29a      	uxth	r2, r3
 800c630:	4b13      	ldr	r3, [pc, #76]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c632:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c634:	4b11      	ldr	r3, [pc, #68]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c636:	2202      	movs	r2, #2
 800c638:	701a      	strb	r2, [r3, #0]
				break;
 800c63a:	e002      	b.n	800c642 <ReadAndFormMsg+0x1b2>
				break;
 800c63c:	bf00      	nop
 800c63e:	e000      	b.n	800c642 <ReadAndFormMsg+0x1b2>
			break;
 800c640:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800c642:	4b0f      	ldr	r3, [pc, #60]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c644:	881b      	ldrh	r3, [r3, #0]
 800c646:	88ba      	ldrh	r2, [r7, #4]
 800c648:	429a      	cmp	r2, r3
 800c64a:	d805      	bhi.n	800c658 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800c64c:	4b0b      	ldr	r3, [pc, #44]	; (800c67c <ReadAndFormMsg+0x1ec>)
 800c64e:	2201      	movs	r2, #1
 800c650:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800c652:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <ReadAndFormMsg+0x1f0>)
 800c654:	2200      	movs	r2, #0
 800c656:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	b2db      	uxtb	r3, r3
 800c65c:	4618      	mov	r0, r3
 800c65e:	f00c fa31 	bl	8018ac4 <Com_DataReady>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	f47f af22 	bne.w	800c4ae <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	bd90      	pop	{r4, r7, pc}
 800c674:	20000fbe 	.word	0x20000fbe
 800c678:	2000b414 	.word	0x2000b414
 800c67c:	20000317 	.word	0x20000317
 800c680:	20003fb0 	.word	0x20003fb0
 800c684:	08029ad4 	.word	0x08029ad4
 800c688:	08029afc 	.word	0x08029afc
 800c68c:	08029b10 	.word	0x08029b10
 800c690:	08029b1c 	.word	0x08029b1c

0800c694 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800c694:	b580      	push	{r7, lr}
 800c696:	b086      	sub	sp, #24
 800c698:	af00      	add	r7, sp, #0
 800c69a:	4603      	mov	r3, r0
 800c69c:	71fb      	strb	r3, [r7, #7]
 800c69e:	460b      	mov	r3, r1
 800c6a0:	71bb      	strb	r3, [r7, #6]
 800c6a2:	4613      	mov	r3, r2
 800c6a4:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60bb      	str	r3, [r7, #8]
 800c6ae:	f107 030c 	add.w	r3, r7, #12
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800c6b8:	2324      	movs	r3, #36	; 0x24
 800c6ba:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800c6bc:	79bb      	ldrb	r3, [r7, #6]
 800c6be:	121b      	asrs	r3, r3, #8
 800c6c0:	b2db      	uxtb	r3, r3
 800c6c2:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800c6c4:	79bb      	ldrb	r3, [r7, #6]
 800c6c6:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800c6c8:	797b      	ldrb	r3, [r7, #5]
 800c6ca:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800c6cc:	f107 0308 	add.w	r3, r7, #8
 800c6d0:	2104      	movs	r1, #4
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f008 ff6e 	bl	80155b4 <ComputeCRC>
	puc_Message[6]= '&';
 800c6d8:	2326      	movs	r3, #38	; 0x26
 800c6da:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800c6dc:	7b3b      	ldrb	r3, [r7, #12]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	7b7b      	ldrb	r3, [r7, #13]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	480f      	ldr	r0, [pc, #60]	; (800c724 <SendAck+0x90>)
 800c6e6:	f019 fc6b 	bl	8025fc0 <iprintf>

	AckTim=HAL_GetTick();
 800c6ea:	f00c fd53 	bl	8019194 <HAL_GetTick>
 800c6ee:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c6f0:	e002      	b.n	800c6f8 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800c6f2:	480d      	ldr	r0, [pc, #52]	; (800c728 <SendAck+0x94>)
 800c6f4:	f00f ffc0 	bl	801c678 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800c6f8:	6978      	ldr	r0, [r7, #20]
 800c6fa:	f003 fe7d 	bl	80103f8 <HAL_Elaps_Ticks>
 800c6fe:	4603      	mov	r3, r0
 800c700:	f240 52db 	movw	r2, #1499	; 0x5db
 800c704:	4293      	cmp	r3, r2
 800c706:	d9f4      	bls.n	800c6f2 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800c708:	f107 0108 	add.w	r1, r7, #8
 800c70c:	79fb      	ldrb	r3, [r7, #7]
 800c70e:	2206      	movs	r2, #6
 800c710:	4618      	mov	r0, r3
 800c712:	f00c fa97 	bl	8018c44 <CommTransmitMessage>

	AckTim = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
}
 800c71a:	bf00      	nop
 800c71c:	3718      	adds	r7, #24
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
 800c722:	bf00      	nop
 800c724:	08029b28 	.word	0x08029b28
 800c728:	2000b414 	.word	0x2000b414

0800c72c <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	4603      	mov	r3, r0
 800c734:	6039      	str	r1, [r7, #0]
 800c736:	80fb      	strh	r3, [r7, #6]
 800c738:	4613      	mov	r3, r2
 800c73a:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800c73c:	2300      	movs	r3, #0
 800c73e:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800c740:	2300      	movs	r3, #0
 800c742:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800c744:	2300      	movs	r3, #0
 800c746:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800c748:	e0ba      	b.n	800c8c0 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800c74a:	88fb      	ldrh	r3, [r7, #6]
 800c74c:	b2db      	uxtb	r3, r3
 800c74e:	4618      	mov	r0, r3
 800c750:	f00c f9f8 	bl	8018b44 <Com_Get_Byte>
 800c754:	4603      	mov	r3, r0
 800c756:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800c758:	f00c fb0a 	bl	8018d70 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800c75c:	485f      	ldr	r0, [pc, #380]	; (800c8dc <ReadAndFormConfig+0x1b0>)
 800c75e:	f00f ff8b 	bl	801c678 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800c762:	4b5f      	ldr	r3, [pc, #380]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	2b03      	cmp	r3, #3
 800c768:	f000 8082 	beq.w	800c870 <ReadAndFormConfig+0x144>
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	f300 8099 	bgt.w	800c8a4 <ReadAndFormConfig+0x178>
 800c772:	2b01      	cmp	r3, #1
 800c774:	d002      	beq.n	800c77c <ReadAndFormConfig+0x50>
 800c776:	2b02      	cmp	r3, #2
 800c778:	d00e      	beq.n	800c798 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800c77a:	e093      	b.n	800c8a4 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
 800c77e:	2b24      	cmp	r3, #36	; 0x24
 800c780:	f040 8092 	bne.w	800c8a8 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	7bfa      	ldrb	r2, [r7, #15]
 800c788:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c78a:	4b56      	ldr	r3, [pc, #344]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c78c:	2201      	movs	r2, #1
 800c78e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c790:	4b53      	ldr	r3, [pc, #332]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c792:	2202      	movs	r2, #2
 800c794:	701a      	strb	r2, [r3, #0]
			break;
 800c796:	e087      	b.n	800c8a8 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800c798:	7bfb      	ldrb	r3, [r7, #15]
 800c79a:	2b26      	cmp	r3, #38	; 0x26
 800c79c:	d006      	beq.n	800c7ac <ReadAndFormConfig+0x80>
 800c79e:	2b26      	cmp	r3, #38	; 0x26
 800c7a0:	dc57      	bgt.n	800c852 <ReadAndFormConfig+0x126>
 800c7a2:	2b05      	cmp	r3, #5
 800c7a4:	d051      	beq.n	800c84a <ReadAndFormConfig+0x11e>
 800c7a6:	2b24      	cmp	r3, #36	; 0x24
 800c7a8:	d045      	beq.n	800c836 <ReadAndFormConfig+0x10a>
 800c7aa:	e052      	b.n	800c852 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800c7ac:	4b4d      	ldr	r3, [pc, #308]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7ae:	881b      	ldrh	r3, [r3, #0]
 800c7b0:	3b02      	subs	r3, #2
 800c7b2:	b29b      	uxth	r3, r3
 800c7b4:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800c7b6:	4b4b      	ldr	r3, [pc, #300]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7b8:	881b      	ldrh	r3, [r3, #0]
 800c7ba:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800c7bc:	4b49      	ldr	r3, [pc, #292]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c7be:	2200      	movs	r2, #0
 800c7c0:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800c7c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da01      	bge.n	800c7ce <ReadAndFormConfig+0xa2>
					return 0;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e082      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800c7ce:	4b44      	ldr	r3, [pc, #272]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800c7d4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7d8:	4619      	mov	r1, r3
 800c7da:	6838      	ldr	r0, [r7, #0]
 800c7dc:	f008 fe40 	bl	8015460 <CheckCRC>
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d012      	beq.n	800c80c <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c7e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	683a      	ldr	r2, [r7, #0]
 800c7fa:	4413      	add	r3, r2
 800c7fc:	781b      	ldrb	r3, [r3, #0]
 800c7fe:	461a      	mov	r2, r3
 800c800:	4839      	ldr	r0, [pc, #228]	; (800c8e8 <ReadAndFormConfig+0x1bc>)
 800c802:	f019 fbdd 	bl	8025fc0 <iprintf>
					return us_ReturnBytes;
 800c806:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800c80a:	e063      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800c80c:	4837      	ldr	r0, [pc, #220]	; (800c8ec <ReadAndFormConfig+0x1c0>)
 800c80e:	f019 fbd7 	bl	8025fc0 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800c812:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	4413      	add	r3, r2
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	4619      	mov	r1, r3
 800c81e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800c822:	3301      	adds	r3, #1
 800c824:	683a      	ldr	r2, [r7, #0]
 800c826:	4413      	add	r3, r2
 800c828:	781b      	ldrb	r3, [r3, #0]
 800c82a:	461a      	mov	r2, r3
 800c82c:	4830      	ldr	r0, [pc, #192]	; (800c8f0 <ReadAndFormConfig+0x1c4>)
 800c82e:	f019 fbc7 	bl	8025fc0 <iprintf>
					return 0;
 800c832:	2300      	movs	r3, #0
 800c834:	e04e      	b.n	800c8d4 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	7bfa      	ldrb	r2, [r7, #15]
 800c83a:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800c83c:	4b29      	ldr	r3, [pc, #164]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c83e:	2201      	movs	r2, #1
 800c840:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c842:	4b27      	ldr	r3, [pc, #156]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c844:	2202      	movs	r2, #2
 800c846:	701a      	strb	r2, [r3, #0]
				break;
 800c848:	e011      	b.n	800c86e <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800c84a:	4b25      	ldr	r3, [pc, #148]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c84c:	2203      	movs	r2, #3
 800c84e:	701a      	strb	r2, [r3, #0]
				break;
 800c850:	e00d      	b.n	800c86e <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800c852:	4b24      	ldr	r3, [pc, #144]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c854:	881b      	ldrh	r3, [r3, #0]
 800c856:	461a      	mov	r2, r3
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	4413      	add	r3, r2
 800c85c:	7bfa      	ldrb	r2, [r7, #15]
 800c85e:	701a      	strb	r2, [r3, #0]
				i++;
 800c860:	4b20      	ldr	r3, [pc, #128]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c862:	881b      	ldrh	r3, [r3, #0]
 800c864:	3301      	adds	r3, #1
 800c866:	b29a      	uxth	r2, r3
 800c868:	4b1e      	ldr	r3, [pc, #120]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c86a:	801a      	strh	r2, [r3, #0]
				break;
 800c86c:	bf00      	nop
			break;
 800c86e:	e01c      	b.n	800c8aa <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800c870:	7bfb      	ldrb	r3, [r7, #15]
 800c872:	2b24      	cmp	r3, #36	; 0x24
 800c874:	d005      	beq.n	800c882 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800c876:	7bfb      	ldrb	r3, [r7, #15]
 800c878:	2b26      	cmp	r3, #38	; 0x26
 800c87a:	d002      	beq.n	800c882 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800c87c:	7bfb      	ldrb	r3, [r7, #15]
 800c87e:	2b05      	cmp	r3, #5
 800c880:	d10c      	bne.n	800c89c <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800c882:	4b18      	ldr	r3, [pc, #96]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c884:	881b      	ldrh	r3, [r3, #0]
 800c886:	461a      	mov	r2, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	4413      	add	r3, r2
 800c88c:	7bfa      	ldrb	r2, [r7, #15]
 800c88e:	701a      	strb	r2, [r3, #0]
					i++;
 800c890:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c892:	881b      	ldrh	r3, [r3, #0]
 800c894:	3301      	adds	r3, #1
 800c896:	b29a      	uxth	r2, r3
 800c898:	4b12      	ldr	r3, [pc, #72]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c89a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800c89c:	4b10      	ldr	r3, [pc, #64]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c89e:	2202      	movs	r2, #2
 800c8a0:	701a      	strb	r2, [r3, #0]
				break;
 800c8a2:	e002      	b.n	800c8aa <ReadAndFormConfig+0x17e>
				break;
 800c8a4:	bf00      	nop
 800c8a6:	e000      	b.n	800c8aa <ReadAndFormConfig+0x17e>
			break;
 800c8a8:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800c8aa:	4b0e      	ldr	r3, [pc, #56]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c8ac:	881b      	ldrh	r3, [r3, #0]
 800c8ae:	88ba      	ldrh	r2, [r7, #4]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d805      	bhi.n	800c8c0 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800c8b4:	4b0a      	ldr	r3, [pc, #40]	; (800c8e0 <ReadAndFormConfig+0x1b4>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800c8ba:	4b0a      	ldr	r3, [pc, #40]	; (800c8e4 <ReadAndFormConfig+0x1b8>)
 800c8bc:	2200      	movs	r2, #0
 800c8be:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800c8c0:	88fb      	ldrh	r3, [r7, #6]
 800c8c2:	b2db      	uxtb	r3, r3
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f00c f8fd 	bl	8018ac4 <Com_DataReady>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	f47f af3c 	bne.w	800c74a <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800c8d2:	2300      	movs	r3, #0
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3710      	adds	r7, #16
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	bd80      	pop	{r7, pc}
 800c8dc:	2000b414 	.word	0x2000b414
 800c8e0:	20000318 	.word	0x20000318
 800c8e4:	20003fb2 	.word	0x20003fb2
 800c8e8:	08029b44 	.word	0x08029b44
 800c8ec:	08029b10 	.word	0x08029b10
 800c8f0:	08029b58 	.word	0x08029b58

0800c8f4 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b083      	sub	sp, #12
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800c8fe:	79fb      	ldrb	r3, [r7, #7]
 800c900:	091b      	lsrs	r3, r3, #4
 800c902:	b2db      	uxtb	r3, r3
 800c904:	461a      	mov	r2, r3
 800c906:	0092      	lsls	r2, r2, #2
 800c908:	4413      	add	r3, r2
 800c90a:	005b      	lsls	r3, r3, #1
 800c90c:	b2da      	uxtb	r2, r3
 800c90e:	79fb      	ldrb	r3, [r7, #7]
 800c910:	f003 030f 	and.w	r3, r3, #15
 800c914:	b2db      	uxtb	r3, r3
 800c916:	4413      	add	r3, r2
 800c918:	b2db      	uxtb	r3, r3
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
	...

0800c928 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800c932:	79fb      	ldrb	r3, [r7, #7]
 800c934:	4a0d      	ldr	r2, [pc, #52]	; (800c96c <Dec_to_BCD+0x44>)
 800c936:	fba2 2303 	umull	r2, r3, r2, r3
 800c93a:	08db      	lsrs	r3, r3, #3
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	b2d8      	uxtb	r0, r3
 800c942:	79fa      	ldrb	r2, [r7, #7]
 800c944:	4b09      	ldr	r3, [pc, #36]	; (800c96c <Dec_to_BCD+0x44>)
 800c946:	fba3 1302 	umull	r1, r3, r3, r2
 800c94a:	08d9      	lsrs	r1, r3, #3
 800c94c:	460b      	mov	r3, r1
 800c94e:	009b      	lsls	r3, r3, #2
 800c950:	440b      	add	r3, r1
 800c952:	005b      	lsls	r3, r3, #1
 800c954:	1ad3      	subs	r3, r2, r3
 800c956:	b2db      	uxtb	r3, r3
 800c958:	4403      	add	r3, r0
 800c95a:	71fb      	strb	r3, [r7, #7]
	return c;
 800c95c:	79fb      	ldrb	r3, [r7, #7]
}
 800c95e:	4618      	mov	r0, r3
 800c960:	370c      	adds	r7, #12
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	cccccccd 	.word	0xcccccccd

0800c970 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800c970:	b480      	push	{r7}
 800c972:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c976:	795b      	ldrb	r3, [r3, #5]
 800c978:	2b09      	cmp	r3, #9
 800c97a:	d801      	bhi.n	800c980 <Is_GPS_Valid+0x10>
	{
		return 0;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e00c      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800c980:	4b08      	ldr	r3, [pc, #32]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c982:	791b      	ldrb	r3, [r3, #4]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <Is_GPS_Valid+0x1c>
	{
		return 0;
 800c988:	2300      	movs	r3, #0
 800c98a:	e006      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800c98c:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <Is_GPS_Valid+0x34>)
 800c98e:	78db      	ldrb	r3, [r3, #3]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <Is_GPS_Valid+0x28>
	{
		return 0;
 800c994:	2300      	movs	r3, #0
 800c996:	e000      	b.n	800c99a <Is_GPS_Valid+0x2a>
	}
	return 1;
 800c998:	2301      	movs	r3, #1
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	46bd      	mov	sp, r7
 800c99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a2:	4770      	bx	lr
 800c9a4:	20003fb4 	.word	0x20003fb4

0800c9a8 <Write_RTC>:


void Write_RTC(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	603b      	str	r3, [r7, #0]
 800c9b2:	1d3b      	adds	r3, r7, #4
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	460a      	mov	r2, r1
 800c9b8:	801a      	strh	r2, [r3, #0]
 800c9ba:	460a      	mov	r2, r1
 800c9bc:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800c9be:	f7ff ffd7 	bl	800c970 <Is_GPS_Valid>
 800c9c2:	4603      	mov	r3, r0
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d103      	bne.n	800c9d0 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800c9c8:	4844      	ldr	r0, [pc, #272]	; (800cadc <Write_RTC+0x134>)
 800c9ca:	f019 fb95 	bl	80260f8 <puts>
 800c9ce:	e081      	b.n	800cad4 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800c9d0:	4b43      	ldr	r3, [pc, #268]	; (800cae0 <Write_RTC+0x138>)
 800c9d2:	2201      	movs	r2, #1
 800c9d4:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800c9d6:	4b43      	ldr	r3, [pc, #268]	; (800cae4 <Write_RTC+0x13c>)
 800c9d8:	789b      	ldrb	r3, [r3, #2]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f7ff ffa4 	bl	800c928 <Dec_to_BCD>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800c9e4:	4b3f      	ldr	r3, [pc, #252]	; (800cae4 <Write_RTC+0x13c>)
 800c9e6:	785b      	ldrb	r3, [r3, #1]
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f7ff ff9d 	bl	800c928 <Dec_to_BCD>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800c9f2:	4b3c      	ldr	r3, [pc, #240]	; (800cae4 <Write_RTC+0x13c>)
 800c9f4:	781b      	ldrb	r3, [r3, #0]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7ff ff96 	bl	800c928 <Dec_to_BCD>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800ca00:	4b38      	ldr	r3, [pc, #224]	; (800cae4 <Write_RTC+0x13c>)
 800ca02:	78db      	ldrb	r3, [r3, #3]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f7ff ff8f 	bl	800c928 <Dec_to_BCD>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800ca0e:	4b35      	ldr	r3, [pc, #212]	; (800cae4 <Write_RTC+0x13c>)
 800ca10:	791b      	ldrb	r3, [r3, #4]
 800ca12:	4618      	mov	r0, r3
 800ca14:	f7ff ff88 	bl	800c928 <Dec_to_BCD>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800ca1c:	4b31      	ldr	r3, [pc, #196]	; (800cae4 <Write_RTC+0x13c>)
 800ca1e:	795b      	ldrb	r3, [r3, #5]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f7ff ff81 	bl	800c928 <Dec_to_BCD>
 800ca26:	4603      	mov	r3, r0
 800ca28:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800ca2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca2e:	9302      	str	r3, [sp, #8]
 800ca30:	2301      	movs	r3, #1
 800ca32:	9301      	str	r3, [sp, #4]
 800ca34:	463b      	mov	r3, r7
 800ca36:	9300      	str	r3, [sp, #0]
 800ca38:	2301      	movs	r3, #1
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	21d0      	movs	r1, #208	; 0xd0
 800ca3e:	482a      	ldr	r0, [pc, #168]	; (800cae8 <Write_RTC+0x140>)
 800ca40:	f00f f86c 	bl	801bb1c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800ca44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca48:	9302      	str	r3, [sp, #8]
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	463b      	mov	r3, r7
 800ca50:	3301      	adds	r3, #1
 800ca52:	9300      	str	r3, [sp, #0]
 800ca54:	2301      	movs	r3, #1
 800ca56:	2201      	movs	r2, #1
 800ca58:	21d0      	movs	r1, #208	; 0xd0
 800ca5a:	4823      	ldr	r0, [pc, #140]	; (800cae8 <Write_RTC+0x140>)
 800ca5c:	f00f f85e 	bl	801bb1c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800ca60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca64:	9302      	str	r3, [sp, #8]
 800ca66:	2301      	movs	r3, #1
 800ca68:	9301      	str	r3, [sp, #4]
 800ca6a:	463b      	mov	r3, r7
 800ca6c:	3302      	adds	r3, #2
 800ca6e:	9300      	str	r3, [sp, #0]
 800ca70:	2301      	movs	r3, #1
 800ca72:	2202      	movs	r2, #2
 800ca74:	21d0      	movs	r1, #208	; 0xd0
 800ca76:	481c      	ldr	r0, [pc, #112]	; (800cae8 <Write_RTC+0x140>)
 800ca78:	f00f f850 	bl	801bb1c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800ca7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca80:	9302      	str	r3, [sp, #8]
 800ca82:	2301      	movs	r3, #1
 800ca84:	9301      	str	r3, [sp, #4]
 800ca86:	463b      	mov	r3, r7
 800ca88:	3303      	adds	r3, #3
 800ca8a:	9300      	str	r3, [sp, #0]
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	2204      	movs	r2, #4
 800ca90:	21d0      	movs	r1, #208	; 0xd0
 800ca92:	4815      	ldr	r0, [pc, #84]	; (800cae8 <Write_RTC+0x140>)
 800ca94:	f00f f842 	bl	801bb1c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800ca98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ca9c:	9302      	str	r3, [sp, #8]
 800ca9e:	2301      	movs	r3, #1
 800caa0:	9301      	str	r3, [sp, #4]
 800caa2:	463b      	mov	r3, r7
 800caa4:	3304      	adds	r3, #4
 800caa6:	9300      	str	r3, [sp, #0]
 800caa8:	2301      	movs	r3, #1
 800caaa:	2205      	movs	r2, #5
 800caac:	21d0      	movs	r1, #208	; 0xd0
 800caae:	480e      	ldr	r0, [pc, #56]	; (800cae8 <Write_RTC+0x140>)
 800cab0:	f00f f834 	bl	801bb1c <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800cab4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cab8:	9302      	str	r3, [sp, #8]
 800caba:	2301      	movs	r3, #1
 800cabc:	9301      	str	r3, [sp, #4]
 800cabe:	463b      	mov	r3, r7
 800cac0:	3305      	adds	r3, #5
 800cac2:	9300      	str	r3, [sp, #0]
 800cac4:	2301      	movs	r3, #1
 800cac6:	2206      	movs	r2, #6
 800cac8:	21d0      	movs	r1, #208	; 0xd0
 800caca:	4807      	ldr	r0, [pc, #28]	; (800cae8 <Write_RTC+0x140>)
 800cacc:	f00f f826 	bl	801bb1c <HAL_I2C_Mem_Write>

	Get_time();
 800cad0:	f000 f80c 	bl	800caec <Get_time>

}
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop
 800cadc:	08029bb8 	.word	0x08029bb8
 800cae0:	200024e0 	.word	0x200024e0
 800cae4:	20003fb4 	.word	0x20003fb4
 800cae8:	2000b36c 	.word	0x2000b36c

0800caec <Get_time>:


void Get_time(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b086      	sub	sp, #24
 800caf0:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800caf2:	463b      	mov	r3, r7
 800caf4:	2207      	movs	r2, #7
 800caf6:	2100      	movs	r1, #0
 800caf8:	4618      	mov	r0, r3
 800cafa:	f019 f979 	bl	8025df0 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800cafe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cb02:	9302      	str	r3, [sp, #8]
 800cb04:	2307      	movs	r3, #7
 800cb06:	9301      	str	r3, [sp, #4]
 800cb08:	463b      	mov	r3, r7
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	2301      	movs	r3, #1
 800cb0e:	2200      	movs	r2, #0
 800cb10:	21d0      	movs	r1, #208	; 0xd0
 800cb12:	4824      	ldr	r0, [pc, #144]	; (800cba4 <Get_time+0xb8>)
 800cb14:	f00f f916 	bl	801bd44 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800cb18:	783b      	ldrb	r3, [r7, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f7ff feea 	bl	800c8f4 <bcdToDec>
 800cb20:	4603      	mov	r3, r0
 800cb22:	461a      	mov	r2, r3
 800cb24:	4b20      	ldr	r3, [pc, #128]	; (800cba8 <Get_time+0xbc>)
 800cb26:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800cb28:	787b      	ldrb	r3, [r7, #1]
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f7ff fee2 	bl	800c8f4 <bcdToDec>
 800cb30:	4603      	mov	r3, r0
 800cb32:	461a      	mov	r2, r3
 800cb34:	4b1c      	ldr	r3, [pc, #112]	; (800cba8 <Get_time+0xbc>)
 800cb36:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800cb38:	78bb      	ldrb	r3, [r7, #2]
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7ff feda 	bl	800c8f4 <bcdToDec>
 800cb40:	4603      	mov	r3, r0
 800cb42:	461a      	mov	r2, r3
 800cb44:	4b18      	ldr	r3, [pc, #96]	; (800cba8 <Get_time+0xbc>)
 800cb46:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800cb48:	793b      	ldrb	r3, [r7, #4]
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff fed2 	bl	800c8f4 <bcdToDec>
 800cb50:	4603      	mov	r3, r0
 800cb52:	461a      	mov	r2, r3
 800cb54:	4b14      	ldr	r3, [pc, #80]	; (800cba8 <Get_time+0xbc>)
 800cb56:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800cb58:	797b      	ldrb	r3, [r7, #5]
 800cb5a:	4618      	mov	r0, r3
 800cb5c:	f7ff feca 	bl	800c8f4 <bcdToDec>
 800cb60:	4603      	mov	r3, r0
 800cb62:	461a      	mov	r2, r3
 800cb64:	4b10      	ldr	r3, [pc, #64]	; (800cba8 <Get_time+0xbc>)
 800cb66:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800cb68:	79bb      	ldrb	r3, [r7, #6]
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	f7ff fec2 	bl	800c8f4 <bcdToDec>
 800cb70:	4603      	mov	r3, r0
 800cb72:	461a      	mov	r2, r3
 800cb74:	4b0c      	ldr	r3, [pc, #48]	; (800cba8 <Get_time+0xbc>)
 800cb76:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800cb78:	783a      	ldrb	r2, [r7, #0]
 800cb7a:	4b0c      	ldr	r3, [pc, #48]	; (800cbac <Get_time+0xc0>)
 800cb7c:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800cb7e:	787a      	ldrb	r2, [r7, #1]
 800cb80:	4b0a      	ldr	r3, [pc, #40]	; (800cbac <Get_time+0xc0>)
 800cb82:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800cb84:	78ba      	ldrb	r2, [r7, #2]
 800cb86:	4b09      	ldr	r3, [pc, #36]	; (800cbac <Get_time+0xc0>)
 800cb88:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800cb8a:	793a      	ldrb	r2, [r7, #4]
 800cb8c:	4b07      	ldr	r3, [pc, #28]	; (800cbac <Get_time+0xc0>)
 800cb8e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800cb90:	797a      	ldrb	r2, [r7, #5]
 800cb92:	4b06      	ldr	r3, [pc, #24]	; (800cbac <Get_time+0xc0>)
 800cb94:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800cb96:	79ba      	ldrb	r2, [r7, #6]
 800cb98:	4b04      	ldr	r3, [pc, #16]	; (800cbac <Get_time+0xc0>)
 800cb9a:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800cb9c:	bf00      	nop
}
 800cb9e:	3708      	adds	r7, #8
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	2000b36c 	.word	0x2000b36c
 800cba8:	20003fc4 	.word	0x20003fc4
 800cbac:	20003fcc 	.word	0x20003fcc

0800cbb0 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800cbb4:	4b09      	ldr	r3, [pc, #36]	; (800cbdc <Update_Time_Every_Sec+0x2c>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f003 fc1d 	bl	80103f8 <HAL_Elaps_Ticks>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cbc4:	d307      	bcc.n	800cbd6 <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800cbc6:	f7ff ff91 	bl	800caec <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800cbca:	f00c fae3 	bl	8019194 <HAL_GetTick>
 800cbce:	4603      	mov	r3, r0
 800cbd0:	4a02      	ldr	r2, [pc, #8]	; (800cbdc <Update_Time_Every_Sec+0x2c>)
 800cbd2:	6013      	str	r3, [r2, #0]
	}
	return;
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop
}
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	20003fd4 	.word	0x20003fd4

0800cbe0 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800cbe4:	f013 fcd0 	bl	8020588 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800cbe8:	4814      	ldr	r0, [pc, #80]	; (800cc3c <Process_SiemensEI+0x5c>)
 800cbea:	f00f fd45 	bl	801c678 <HAL_IWDG_Refresh>

		Feed_wdt();
 800cbee:	f008 ffd9 	bl	8015ba4 <Feed_wdt>

		readCanToStructs();
 800cbf2:	f004 fb3f 	bl	8011274 <readCanToStructs>

		Chech_forSiemensCMD();
 800cbf6:	f001 fe29 	bl	800e84c <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800cbfa:	f001 fb87 	bl	800e30c <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800cbfe:	f001 fc6d 	bl	800e4dc <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800cc02:	f000 f821 	bl	800cc48 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800cc06:	f001 fc8b 	bl	800e520 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800cc0a:	f001 fccd 	bl	800e5a8 <SendRelays2Other>

		CheckRelayMisMatch();
 800cc0e:	f001 fce3 	bl	800e5d8 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800cc12:	f001 fd1b 	bl	800e64c <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800cc16:	f00b fa43 	bl	80180a0 <Print_BuildDat_Details>

		GetTimeStamp();
 800cc1a:	f002 fda1 	bl	800f760 <GetTimeStamp>

		CheckEIPC_DAT_CRC();
 800cc1e:	f7f4 f995 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 800cc22:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <Process_SiemensEI+0x60>)
 800cc24:	781b      	ldrb	r3, [r3, #0]
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d0dc      	beq.n	800cbe4 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800cc2a:	4b06      	ldr	r3, [pc, #24]	; (800cc44 <Process_SiemensEI+0x64>)
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800cc30:	f00b f934 	bl	8017e9c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800cc34:	4801      	ldr	r0, [pc, #4]	; (800cc3c <Process_SiemensEI+0x5c>)
 800cc36:	f00f fd1f 	bl	801c678 <HAL_IWDG_Refresh>
		Data_Processing();
 800cc3a:	e7f9      	b.n	800cc30 <Process_SiemensEI+0x50>
 800cc3c:	2000b414 	.word	0x2000b414
 800cc40:	20000bba 	.word	0x20000bba
 800cc44:	20000fbd 	.word	0x20000fbd

0800cc48 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800cc4e:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800cc62:	2300      	movs	r3, #0
 800cc64:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800cc68:	2300      	movs	r3, #0
 800cc6a:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800cc74:	2300      	movs	r3, #0
 800cc76:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800cc80:	2300      	movs	r3, #0
 800cc82:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800cc86:	2300      	movs	r3, #0
 800cc88:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800cc92:	2300      	movs	r3, #0
 800cc94:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800cc9e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cca2:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800cca6:	2200      	movs	r2, #0
 800cca8:	601a      	str	r2, [r3, #0]
 800ccaa:	3304      	adds	r3, #4
 800ccac:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ccb0:	2100      	movs	r1, #0
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	f019 f89c 	bl	8025df0 <memset>
	uint16_t Size = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800ccc4:	4b7c      	ldr	r3, [pc, #496]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccc6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccca:	2b0a      	cmp	r3, #10
 800cccc:	f240 86dc 	bls.w	800da88 <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800ccd0:	4b79      	ldr	r3, [pc, #484]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccd2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	f107 030c 	add.w	r3, r7, #12
 800ccdc:	4976      	ldr	r1, [pc, #472]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccde:	4618      	mov	r0, r3
 800cce0:	f019 f85e 	bl	8025da0 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800cce4:	4b74      	ldr	r3, [pc, #464]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800cce6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ccea:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800ccee:	f240 6204 	movw	r2, #1540	; 0x604
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	4870      	ldr	r0, [pc, #448]	; (800ceb8 <Siemens_Data_Analyser+0x270>)
 800ccf6:	f019 f87b 	bl	8025df0 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800ccfa:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800ccfe:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cd02:	2100      	movs	r1, #0
 800cd04:	4618      	mov	r0, r3
 800cd06:	f019 f873 	bl	8025df0 <memset>


	BITSTUFFINIT(0,0);
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cd10:	2300      	movs	r3, #0
 800cd12:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800cd16:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd1a:	085b      	lsrs	r3, r3, #1
 800cd1c:	b29b      	uxth	r3, r3
 800cd1e:	3b02      	subs	r3, #2
 800cd20:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800cd24:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd28:	085b      	lsrs	r3, r3, #1
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	3b02      	subs	r3, #2
 800cd2e:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800cd32:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd36:	3b02      	subs	r3, #2
 800cd38:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800cd3c:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800cd40:	085b      	lsrs	r3, r3, #1
 800cd42:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800cd46:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800cd4a:	f107 030c 	add.w	r3, r7, #12
 800cd4e:	2200      	movs	r2, #0
 800cd50:	4618      	mov	r0, r3
 800cd52:	f002 fbeb 	bl	800f52c <Data_Compliment>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d004      	beq.n	800cd66 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800cd5c:	4857      	ldr	r0, [pc, #348]	; (800cebc <Siemens_Data_Analyser+0x274>)
 800cd5e:	f019 f9cb 	bl	80260f8 <puts>
		return ;
 800cd62:	f000 be94 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800cd66:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800cd6a:	f107 020c 	add.w	r2, r7, #12
 800cd6e:	4413      	add	r3, r2
 800cd70:	461a      	mov	r2, r3
 800cd72:	2110      	movs	r1, #16
 800cd74:	2000      	movs	r0, #0
 800cd76:	f7f3 fc4d 	bl	8000614 <ExtractBits>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800cd80:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800cd84:	f107 030c 	add.w	r3, r7, #12
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f002 f8d2 	bl	800ef34 <Siemens_CRC>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cd96:	4b4a      	ldr	r3, [pc, #296]	; (800cec0 <Siemens_Data_Analyser+0x278>)
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	095b      	lsrs	r3, r3, #5
 800cd9c:	f003 0301 	and.w	r3, r3, #1
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d01c      	beq.n	800cdde <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800cda4:	4847      	ldr	r0, [pc, #284]	; (800cec4 <Siemens_Data_Analyser+0x27c>)
 800cda6:	f019 f9a7 	bl	80260f8 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800cdaa:	4847      	ldr	r0, [pc, #284]	; (800cec8 <Siemens_Data_Analyser+0x280>)
 800cdac:	f010 fdb0 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800cdb0:	4601      	mov	r1, r0
 800cdb2:	4b46      	ldr	r3, [pc, #280]	; (800cecc <Siemens_Data_Analyser+0x284>)
 800cdb4:	fba3 2301 	umull	r2, r3, r3, r1
 800cdb8:	0bda      	lsrs	r2, r3, #15
 800cdba:	4613      	mov	r3, r2
 800cdbc:	041b      	lsls	r3, r3, #16
 800cdbe:	1a9b      	subs	r3, r3, r2
 800cdc0:	1aca      	subs	r2, r1, r3
 800cdc2:	4613      	mov	r3, r2
 800cdc4:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800cdc8:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800cdcc:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d104      	bne.n	800cdde <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800cdd4:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cdd8:	3304      	adds	r3, #4
 800cdda:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800cdde:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800cde2:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800cde6:	429a      	cmp	r2, r3
 800cde8:	d010      	beq.n	800ce0c <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800cdea:	4839      	ldr	r0, [pc, #228]	; (800ced0 <Siemens_Data_Analyser+0x288>)
 800cdec:	f019 f984 	bl	80260f8 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800cdf0:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	4837      	ldr	r0, [pc, #220]	; (800ced4 <Siemens_Data_Analyser+0x28c>)
 800cdf8:	f019 f8e2 	bl	8025fc0 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800cdfc:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800ce00:	4619      	mov	r1, r3
 800ce02:	4835      	ldr	r0, [pc, #212]	; (800ced8 <Siemens_Data_Analyser+0x290>)
 800ce04:	f019 f8dc 	bl	8025fc0 <iprintf>
		return;
 800ce08:	f000 be41 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800ce0c:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800ce10:	f107 020c 	add.w	r2, r7, #12
 800ce14:	4413      	add	r3, r2
 800ce16:	461a      	mov	r2, r3
 800ce18:	2110      	movs	r1, #16
 800ce1a:	2000      	movs	r0, #0
 800ce1c:	f7f3 fbfa 	bl	8000614 <ExtractBits>
 800ce20:	4603      	mov	r3, r0
 800ce22:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800ce26:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800ce2a:	f107 020c 	add.w	r2, r7, #12
 800ce2e:	4413      	add	r3, r2
 800ce30:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800ce34:	4611      	mov	r1, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f002 f87c 	bl	800ef34 <Siemens_CRC>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ce42:	4b1f      	ldr	r3, [pc, #124]	; (800cec0 <Siemens_Data_Analyser+0x278>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	0a1b      	lsrs	r3, r3, #8
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d01c      	beq.n	800ce8a <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800ce50:	4822      	ldr	r0, [pc, #136]	; (800cedc <Siemens_Data_Analyser+0x294>)
 800ce52:	f019 f951 	bl	80260f8 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800ce56:	481c      	ldr	r0, [pc, #112]	; (800cec8 <Siemens_Data_Analyser+0x280>)
 800ce58:	f010 fd5a 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800ce5c:	4601      	mov	r1, r0
 800ce5e:	4b1b      	ldr	r3, [pc, #108]	; (800cecc <Siemens_Data_Analyser+0x284>)
 800ce60:	fba3 2301 	umull	r2, r3, r3, r1
 800ce64:	0bda      	lsrs	r2, r3, #15
 800ce66:	4613      	mov	r3, r2
 800ce68:	041b      	lsls	r3, r3, #16
 800ce6a:	1a9b      	subs	r3, r3, r2
 800ce6c:	1aca      	subs	r2, r1, r3
 800ce6e:	4613      	mov	r3, r2
 800ce70:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800ce74:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800ce78:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d104      	bne.n	800ce8a <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800ce80:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ce84:	3304      	adds	r3, #4
 800ce86:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800ce8a:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800ce8e:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d02a      	beq.n	800ceec <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800ce96:	4812      	ldr	r0, [pc, #72]	; (800cee0 <Siemens_Data_Analyser+0x298>)
 800ce98:	f019 f92e 	bl	80260f8 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800ce9c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800cea0:	4619      	mov	r1, r3
 800cea2:	4810      	ldr	r0, [pc, #64]	; (800cee4 <Siemens_Data_Analyser+0x29c>)
 800cea4:	f019 f88c 	bl	8025fc0 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800cea8:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800ceac:	4619      	mov	r1, r3
 800ceae:	480e      	ldr	r0, [pc, #56]	; (800cee8 <Siemens_Data_Analyser+0x2a0>)
 800ceb0:	f019 f886 	bl	8025fc0 <iprintf>
		return;
 800ceb4:	f000 bdeb 	b.w	800da8e <Siemens_Data_Analyser+0xe46>
 800ceb8:	20006390 	.word	0x20006390
 800cebc:	08029bd8 	.word	0x08029bd8
 800cec0:	20004c54 	.word	0x20004c54
 800cec4:	08029bf8 	.word	0x08029bf8
 800cec8:	2000bc54 	.word	0x2000bc54
 800cecc:	80008001 	.word	0x80008001
 800ced0:	08029c20 	.word	0x08029c20
 800ced4:	08029c30 	.word	0x08029c30
 800ced8:	08029c44 	.word	0x08029c44
 800cedc:	08029c58 	.word	0x08029c58
 800cee0:	08029c84 	.word	0x08029c84
 800cee4:	08029c94 	.word	0x08029c94
 800cee8:	08029cb0 	.word	0x08029cb0
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800ceec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cef0:	b2d8      	uxtb	r0, r3
 800cef2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cef6:	f107 020c 	add.w	r2, r7, #12
 800cefa:	441a      	add	r2, r3
 800cefc:	2301      	movs	r3, #1
 800cefe:	2108      	movs	r1, #8
 800cf00:	f002 f86c 	bl	800efdc <Extract_Parity_Data>
 800cf04:	4603      	mov	r3, r0
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf10:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cf12:	4b56      	ldr	r3, [pc, #344]	; (800d06c <Siemens_Data_Analyser+0x424>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f003 0301 	and.w	r3, r3, #1
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d02a      	beq.n	800cf74 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800cf1e:	4854      	ldr	r0, [pc, #336]	; (800d070 <Siemens_Data_Analyser+0x428>)
 800cf20:	f019 f8ea 	bl	80260f8 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800cf24:	4853      	ldr	r0, [pc, #332]	; (800d074 <Siemens_Data_Analyser+0x42c>)
 800cf26:	f010 fcf3 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800cf2a:	4601      	mov	r1, r0
 800cf2c:	4b52      	ldr	r3, [pc, #328]	; (800d078 <Siemens_Data_Analyser+0x430>)
 800cf2e:	fba3 2301 	umull	r2, r3, r3, r1
 800cf32:	09da      	lsrs	r2, r3, #7
 800cf34:	4613      	mov	r3, r2
 800cf36:	021b      	lsls	r3, r3, #8
 800cf38:	1a9b      	subs	r3, r3, r2
 800cf3a:	1aca      	subs	r2, r1, r3
 800cf3c:	b2d2      	uxtb	r2, r2
 800cf3e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf42:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf46:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800cf48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf50:	781a      	ldrb	r2, [r3, #0]
 800cf52:	4b4a      	ldr	r3, [pc, #296]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cf54:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d10b      	bne.n	800cf74 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800cf5c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf60:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	3304      	adds	r3, #4
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf6e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf72:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800cf74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf7c:	781a      	ldrb	r2, [r3, #0]
 800cf7e:	4b3f      	ldr	r3, [pc, #252]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cf80:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cf84:	429a      	cmp	r2, r3
 800cf86:	d015      	beq.n	800cfb4 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800cf88:	483d      	ldr	r0, [pc, #244]	; (800d080 <Siemens_Data_Analyser+0x438>)
 800cf8a:	f019 f8b5 	bl	80260f8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800cf8e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800cf92:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	4619      	mov	r1, r3
 800cf9a:	483a      	ldr	r0, [pc, #232]	; (800d084 <Siemens_Data_Analyser+0x43c>)
 800cf9c:	f019 f810 	bl	8025fc0 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800cfa0:	4b36      	ldr	r3, [pc, #216]	; (800d07c <Siemens_Data_Analyser+0x434>)
 800cfa2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	4837      	ldr	r0, [pc, #220]	; (800d088 <Siemens_Data_Analyser+0x440>)
 800cfaa:	f019 f809 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800cfb4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800cfb8:	3308      	adds	r3, #8
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	da00      	bge.n	800cfc0 <Siemens_Data_Analyser+0x378>
 800cfbe:	3307      	adds	r3, #7
 800cfc0:	10db      	asrs	r3, r3, #3
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cfc8:	4413      	add	r3, r2
 800cfca:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800cfce:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cfd2:	3308      	adds	r3, #8
 800cfd4:	b29b      	uxth	r3, r3
 800cfd6:	b21b      	sxth	r3, r3
 800cfd8:	425a      	negs	r2, r3
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	f002 0207 	and.w	r2, r2, #7
 800cfe2:	bf58      	it	pl
 800cfe4:	4253      	negpl	r3, r2
 800cfe6:	b21b      	sxth	r3, r3
 800cfe8:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800cfec:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800cff0:	b2d8      	uxtb	r0, r3
 800cff2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800cff6:	f107 020c 	add.w	r2, r7, #12
 800cffa:	441a      	add	r2, r3
 800cffc:	2300      	movs	r3, #0
 800cffe:	2118      	movs	r1, #24
 800d000:	f001 ffec 	bl	800efdc <Extract_Parity_Data>
 800d004:	4603      	mov	r3, r0
 800d006:	461a      	mov	r2, r3
 800d008:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d00c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d010:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800d012:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d016:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d020:	d036      	beq.n	800d090 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d022:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d026:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800d02a:	4a18      	ldr	r2, [pc, #96]	; (800d08c <Siemens_Data_Analyser+0x444>)
 800d02c:	8812      	ldrh	r2, [r2, #0]
 800d02e:	801a      	strh	r2, [r3, #0]
 800d030:	2200      	movs	r2, #0
 800d032:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d034:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d038:	f107 020c 	add.w	r2, r7, #12
 800d03c:	4413      	add	r3, r2
 800d03e:	f107 0208 	add.w	r2, r7, #8
 800d042:	2103      	movs	r1, #3
 800d044:	4618      	mov	r0, r3
 800d046:	f000 fd4d 	bl	800dae4 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800d04a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d04e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d052:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d056:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800d05a:	3308      	adds	r3, #8
 800d05c:	6812      	ldr	r2, [r2, #0]
 800d05e:	4611      	mov	r1, r2
 800d060:	8019      	strh	r1, [r3, #0]
 800d062:	3302      	adds	r3, #2
 800d064:	0c12      	lsrs	r2, r2, #16
 800d066:	701a      	strb	r2, [r3, #0]
 800d068:	e015      	b.n	800d096 <Siemens_Data_Analyser+0x44e>
 800d06a:	bf00      	nop
 800d06c:	20004c54 	.word	0x20004c54
 800d070:	08029ccc 	.word	0x08029ccc
 800d074:	2000bc54 	.word	0x2000bc54
 800d078:	80808081 	.word	0x80808081
 800d07c:	20000504 	.word	0x20000504
 800d080:	08029cec 	.word	0x08029cec
 800d084:	08029d10 	.word	0x08029d10
 800d088:	08029d20 	.word	0x08029d20
 800d08c:	08029ea4 	.word	0x08029ea4
	}
	else
	{
		RejectPacketFlag = 1;
 800d090:	2301      	movs	r3, #1
 800d092:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800d096:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d09a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d09e:	689a      	ldr	r2, [r3, #8]
 800d0a0:	4bbf      	ldr	r3, [pc, #764]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d0a2:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d0a6:	429a      	cmp	r2, r3
 800d0a8:	d015      	beq.n	800d0d6 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800d0aa:	48be      	ldr	r0, [pc, #760]	; (800d3a4 <Siemens_Data_Analyser+0x75c>)
 800d0ac:	f019 f824 	bl	80260f8 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800d0b0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d0b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	48ba      	ldr	r0, [pc, #744]	; (800d3a8 <Siemens_Data_Analyser+0x760>)
 800d0be:	f018 ff7f 	bl	8025fc0 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800d0c2:	4bb7      	ldr	r3, [pc, #732]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d0c4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	48b8      	ldr	r0, [pc, #736]	; (800d3ac <Siemens_Data_Analyser+0x764>)
 800d0cc:	f018 ff78 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800d0d0:	2301      	movs	r3, #1
 800d0d2:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800d0d6:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d0da:	3318      	adds	r3, #24
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	da00      	bge.n	800d0e2 <Siemens_Data_Analyser+0x49a>
 800d0e0:	3307      	adds	r3, #7
 800d0e2:	10db      	asrs	r3, r3, #3
 800d0e4:	b29a      	uxth	r2, r3
 800d0e6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d0ea:	4413      	add	r3, r2
 800d0ec:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d0f0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d0f4:	3318      	adds	r3, #24
 800d0f6:	b29b      	uxth	r3, r3
 800d0f8:	b21b      	sxth	r3, r3
 800d0fa:	425a      	negs	r2, r3
 800d0fc:	f003 0307 	and.w	r3, r3, #7
 800d100:	f002 0207 	and.w	r2, r2, #7
 800d104:	bf58      	it	pl
 800d106:	4253      	negpl	r3, r2
 800d108:	b21b      	sxth	r3, r3
 800d10a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d10e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d112:	b2d8      	uxtb	r0, r3
 800d114:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d118:	f107 020c 	add.w	r2, r7, #12
 800d11c:	441a      	add	r2, r3
 800d11e:	2301      	movs	r3, #1
 800d120:	2108      	movs	r1, #8
 800d122:	f001 ff5b 	bl	800efdc <Extract_Parity_Data>
 800d126:	4603      	mov	r3, r0
 800d128:	b2da      	uxtb	r2, r3
 800d12a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d12e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d132:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d134:	4b9e      	ldr	r3, [pc, #632]	; (800d3b0 <Siemens_Data_Analyser+0x768>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	085b      	lsrs	r3, r3, #1
 800d13a:	f003 0301 	and.w	r3, r3, #1
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d02a      	beq.n	800d198 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800d142:	489c      	ldr	r0, [pc, #624]	; (800d3b4 <Siemens_Data_Analyser+0x76c>)
 800d144:	f018 ffd8 	bl	80260f8 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d148:	489b      	ldr	r0, [pc, #620]	; (800d3b8 <Siemens_Data_Analyser+0x770>)
 800d14a:	f010 fbe1 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800d14e:	4601      	mov	r1, r0
 800d150:	4b9a      	ldr	r3, [pc, #616]	; (800d3bc <Siemens_Data_Analyser+0x774>)
 800d152:	fba3 2301 	umull	r2, r3, r3, r1
 800d156:	09da      	lsrs	r2, r3, #7
 800d158:	4613      	mov	r3, r2
 800d15a:	021b      	lsls	r3, r3, #8
 800d15c:	1a9b      	subs	r3, r3, r2
 800d15e:	1aca      	subs	r2, r1, r3
 800d160:	b2d2      	uxtb	r2, r2
 800d162:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d166:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d16a:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800d16c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d170:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d174:	7b1a      	ldrb	r2, [r3, #12]
 800d176:	4b8a      	ldr	r3, [pc, #552]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d178:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d17c:	429a      	cmp	r2, r3
 800d17e:	d10b      	bne.n	800d198 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800d180:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d184:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d188:	7b1b      	ldrb	r3, [r3, #12]
 800d18a:	3304      	adds	r3, #4
 800d18c:	b2da      	uxtb	r2, r3
 800d18e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d192:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d196:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800d198:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d19c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1a0:	7b1a      	ldrb	r2, [r3, #12]
 800d1a2:	4b7f      	ldr	r3, [pc, #508]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d1a4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d015      	beq.n	800d1d8 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800d1ac:	4884      	ldr	r0, [pc, #528]	; (800d3c0 <Siemens_Data_Analyser+0x778>)
 800d1ae:	f018 ffa3 	bl	80260f8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800d1b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d1b6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d1ba:	7b1b      	ldrb	r3, [r3, #12]
 800d1bc:	4619      	mov	r1, r3
 800d1be:	4881      	ldr	r0, [pc, #516]	; (800d3c4 <Siemens_Data_Analyser+0x77c>)
 800d1c0:	f018 fefe 	bl	8025fc0 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800d1c4:	4b76      	ldr	r3, [pc, #472]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d1c6:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	487e      	ldr	r0, [pc, #504]	; (800d3c8 <Siemens_Data_Analyser+0x780>)
 800d1ce:	f018 fef7 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800d1d2:	2301      	movs	r3, #1
 800d1d4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800d1d8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d1dc:	3308      	adds	r3, #8
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	da00      	bge.n	800d1e4 <Siemens_Data_Analyser+0x59c>
 800d1e2:	3307      	adds	r3, #7
 800d1e4:	10db      	asrs	r3, r3, #3
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d1f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d1f6:	3308      	adds	r3, #8
 800d1f8:	b29b      	uxth	r3, r3
 800d1fa:	b21b      	sxth	r3, r3
 800d1fc:	425a      	negs	r2, r3
 800d1fe:	f003 0307 	and.w	r3, r3, #7
 800d202:	f002 0207 	and.w	r2, r2, #7
 800d206:	bf58      	it	pl
 800d208:	4253      	negpl	r3, r2
 800d20a:	b21b      	sxth	r3, r3
 800d20c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800d210:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d214:	b2d8      	uxtb	r0, r3
 800d216:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d21a:	f107 020c 	add.w	r2, r7, #12
 800d21e:	441a      	add	r2, r3
 800d220:	2300      	movs	r3, #0
 800d222:	2118      	movs	r1, #24
 800d224:	f001 feda 	bl	800efdc <Extract_Parity_Data>
 800d228:	4603      	mov	r3, r0
 800d22a:	461a      	mov	r2, r3
 800d22c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d230:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d234:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800d236:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d23a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d23e:	691b      	ldr	r3, [r3, #16]
 800d240:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d244:	d021      	beq.n	800d28a <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800d246:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d24a:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800d24e:	4a5f      	ldr	r2, [pc, #380]	; (800d3cc <Siemens_Data_Analyser+0x784>)
 800d250:	8812      	ldrh	r2, [r2, #0]
 800d252:	801a      	strh	r2, [r3, #0]
 800d254:	2200      	movs	r2, #0
 800d256:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800d258:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d25c:	f107 020c 	add.w	r2, r7, #12
 800d260:	4413      	add	r3, r2
 800d262:	1d3a      	adds	r2, r7, #4
 800d264:	2103      	movs	r1, #3
 800d266:	4618      	mov	r0, r3
 800d268:	f000 fc3c 	bl	800dae4 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800d26c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d270:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d274:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800d278:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800d27c:	3314      	adds	r3, #20
 800d27e:	6812      	ldr	r2, [r2, #0]
 800d280:	4611      	mov	r1, r2
 800d282:	8019      	strh	r1, [r3, #0]
 800d284:	3302      	adds	r3, #2
 800d286:	0c12      	lsrs	r2, r2, #16
 800d288:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d28a:	4b49      	ldr	r3, [pc, #292]	; (800d3b0 <Siemens_Data_Analyser+0x768>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	089b      	lsrs	r3, r3, #2
 800d290:	f003 0301 	and.w	r3, r3, #1
 800d294:	2b00      	cmp	r3, #0
 800d296:	d02c      	beq.n	800d2f2 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800d298:	484d      	ldr	r0, [pc, #308]	; (800d3d0 <Siemens_Data_Analyser+0x788>)
 800d29a:	f018 ff2d 	bl	80260f8 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800d29e:	4846      	ldr	r0, [pc, #280]	; (800d3b8 <Siemens_Data_Analyser+0x770>)
 800d2a0:	f010 fb36 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800d2a4:	4601      	mov	r1, r0
 800d2a6:	f240 1301 	movw	r3, #257	; 0x101
 800d2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800d2ae:	1aca      	subs	r2, r1, r3
 800d2b0:	0852      	lsrs	r2, r2, #1
 800d2b2:	4413      	add	r3, r2
 800d2b4:	0dda      	lsrs	r2, r3, #23
 800d2b6:	4613      	mov	r3, r2
 800d2b8:	061b      	lsls	r3, r3, #24
 800d2ba:	1a9b      	subs	r3, r3, r2
 800d2bc:	1aca      	subs	r2, r1, r3
 800d2be:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2c2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2c6:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800d2c8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2cc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2d0:	695a      	ldr	r2, [r3, #20]
 800d2d2:	4b33      	ldr	r3, [pc, #204]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d2d4:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d2d8:	429a      	cmp	r2, r3
 800d2da:	d10a      	bne.n	800d2f2 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800d2dc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2e0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2e4:	695b      	ldr	r3, [r3, #20]
 800d2e6:	1d1a      	adds	r2, r3, #4
 800d2e8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2ec:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2f0:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800d2f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d2f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d2fa:	695a      	ldr	r2, [r3, #20]
 800d2fc:	4b28      	ldr	r3, [pc, #160]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d2fe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d302:	429a      	cmp	r2, r3
 800d304:	d015      	beq.n	800d332 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800d306:	4833      	ldr	r0, [pc, #204]	; (800d3d4 <Siemens_Data_Analyser+0x78c>)
 800d308:	f018 fef6 	bl	80260f8 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800d30c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d310:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	4619      	mov	r1, r3
 800d318:	4823      	ldr	r0, [pc, #140]	; (800d3a8 <Siemens_Data_Analyser+0x760>)
 800d31a:	f018 fe51 	bl	8025fc0 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800d31e:	4b20      	ldr	r3, [pc, #128]	; (800d3a0 <Siemens_Data_Analyser+0x758>)
 800d320:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d324:	4619      	mov	r1, r3
 800d326:	4821      	ldr	r0, [pc, #132]	; (800d3ac <Siemens_Data_Analyser+0x764>)
 800d328:	f018 fe4a 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800d32c:	2301      	movs	r3, #1
 800d32e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800d332:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d336:	3318      	adds	r3, #24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	da00      	bge.n	800d33e <Siemens_Data_Analyser+0x6f6>
 800d33c:	3307      	adds	r3, #7
 800d33e:	10db      	asrs	r3, r3, #3
 800d340:	b29a      	uxth	r2, r3
 800d342:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d346:	4413      	add	r3, r2
 800d348:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d34c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d350:	3318      	adds	r3, #24
 800d352:	b29b      	uxth	r3, r3
 800d354:	b21b      	sxth	r3, r3
 800d356:	425a      	negs	r2, r3
 800d358:	f003 0307 	and.w	r3, r3, #7
 800d35c:	f002 0207 	and.w	r2, r2, #7
 800d360:	bf58      	it	pl
 800d362:	4253      	negpl	r3, r2
 800d364:	b21b      	sxth	r3, r3
 800d366:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800d36a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d36e:	b2d8      	uxtb	r0, r3
 800d370:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d374:	f107 020c 	add.w	r2, r7, #12
 800d378:	441a      	add	r2, r3
 800d37a:	2300      	movs	r3, #0
 800d37c:	2108      	movs	r1, #8
 800d37e:	f001 fe2d 	bl	800efdc <Extract_Parity_Data>
 800d382:	4603      	mov	r3, r0
 800d384:	b2da      	uxtb	r2, r3
 800d386:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d38a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d38e:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800d390:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d394:	3308      	adds	r3, #8
 800d396:	2b00      	cmp	r3, #0
 800d398:	da1e      	bge.n	800d3d8 <Siemens_Data_Analyser+0x790>
 800d39a:	3307      	adds	r3, #7
 800d39c:	e01c      	b.n	800d3d8 <Siemens_Data_Analyser+0x790>
 800d39e:	bf00      	nop
 800d3a0:	20000504 	.word	0x20000504
 800d3a4:	08029d30 	.word	0x08029d30
 800d3a8:	08029d50 	.word	0x08029d50
 800d3ac:	08029d60 	.word	0x08029d60
 800d3b0:	20004c54 	.word	0x20004c54
 800d3b4:	08029d70 	.word	0x08029d70
 800d3b8:	2000bc54 	.word	0x2000bc54
 800d3bc:	80808081 	.word	0x80808081
 800d3c0:	08029d90 	.word	0x08029d90
 800d3c4:	08029d10 	.word	0x08029d10
 800d3c8:	08029d20 	.word	0x08029d20
 800d3cc:	08029ea4 	.word	0x08029ea4
 800d3d0:	08029db0 	.word	0x08029db0
 800d3d4:	08029dcc 	.word	0x08029dcc
 800d3d8:	10db      	asrs	r3, r3, #3
 800d3da:	b29a      	uxth	r2, r3
 800d3dc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d3e6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	b29b      	uxth	r3, r3
 800d3ee:	b21b      	sxth	r3, r3
 800d3f0:	425a      	negs	r2, r3
 800d3f2:	f003 0307 	and.w	r3, r3, #7
 800d3f6:	f002 0207 	and.w	r2, r2, #7
 800d3fa:	bf58      	it	pl
 800d3fc:	4253      	negpl	r3, r2
 800d3fe:	b21b      	sxth	r3, r3
 800d400:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800d404:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d408:	b2d8      	uxtb	r0, r3
 800d40a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d40e:	f107 020c 	add.w	r2, r7, #12
 800d412:	441a      	add	r2, r3
 800d414:	2301      	movs	r3, #1
 800d416:	2108      	movs	r1, #8
 800d418:	f001 fde0 	bl	800efdc <Extract_Parity_Data>
 800d41c:	4603      	mov	r3, r0
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d424:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d428:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800d42a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d42e:	3308      	adds	r3, #8
 800d430:	2b00      	cmp	r3, #0
 800d432:	da00      	bge.n	800d436 <Siemens_Data_Analyser+0x7ee>
 800d434:	3307      	adds	r3, #7
 800d436:	10db      	asrs	r3, r3, #3
 800d438:	b29a      	uxth	r2, r3
 800d43a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d43e:	4413      	add	r3, r2
 800d440:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d444:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d448:	3308      	adds	r3, #8
 800d44a:	b29b      	uxth	r3, r3
 800d44c:	b21b      	sxth	r3, r3
 800d44e:	425a      	negs	r2, r3
 800d450:	f003 0307 	and.w	r3, r3, #7
 800d454:	f002 0207 	and.w	r2, r2, #7
 800d458:	bf58      	it	pl
 800d45a:	4253      	negpl	r3, r2
 800d45c:	b21b      	sxth	r3, r3
 800d45e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d462:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d466:	b2d8      	uxtb	r0, r3
 800d468:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d46c:	f107 020c 	add.w	r2, r7, #12
 800d470:	441a      	add	r2, r3
 800d472:	2302      	movs	r3, #2
 800d474:	2108      	movs	r1, #8
 800d476:	f001 fdb1 	bl	800efdc <Extract_Parity_Data>
 800d47a:	4603      	mov	r3, r0
 800d47c:	b2da      	uxtb	r2, r3
 800d47e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d482:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d486:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d488:	4bab      	ldr	r3, [pc, #684]	; (800d738 <Siemens_Data_Analyser+0xaf0>)
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	08db      	lsrs	r3, r3, #3
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	2b00      	cmp	r3, #0
 800d494:	d02a      	beq.n	800d4ec <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800d496:	48a9      	ldr	r0, [pc, #676]	; (800d73c <Siemens_Data_Analyser+0xaf4>)
 800d498:	f018 fe2e 	bl	80260f8 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d49c:	48a8      	ldr	r0, [pc, #672]	; (800d740 <Siemens_Data_Analyser+0xaf8>)
 800d49e:	f010 fa37 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800d4a2:	4601      	mov	r1, r0
 800d4a4:	4ba7      	ldr	r3, [pc, #668]	; (800d744 <Siemens_Data_Analyser+0xafc>)
 800d4a6:	fba3 2301 	umull	r2, r3, r3, r1
 800d4aa:	09da      	lsrs	r2, r3, #7
 800d4ac:	4613      	mov	r3, r2
 800d4ae:	021b      	lsls	r3, r3, #8
 800d4b0:	1a9b      	subs	r3, r3, r2
 800d4b2:	1aca      	subs	r2, r1, r3
 800d4b4:	b2d2      	uxtb	r2, r2
 800d4b6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4ba:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4be:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800d4c0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4c4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4c8:	7e9a      	ldrb	r2, [r3, #26]
 800d4ca:	4b9f      	ldr	r3, [pc, #636]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d4cc:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d10b      	bne.n	800d4ec <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800d4d4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4d8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4dc:	7e9b      	ldrb	r3, [r3, #26]
 800d4de:	3304      	adds	r3, #4
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4ea:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800d4ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d4f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d4f4:	7e9a      	ldrb	r2, [r3, #26]
 800d4f6:	4b94      	ldr	r3, [pc, #592]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d4f8:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d015      	beq.n	800d52c <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800d500:	4892      	ldr	r0, [pc, #584]	; (800d74c <Siemens_Data_Analyser+0xb04>)
 800d502:	f018 fdf9 	bl	80260f8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800d506:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d50a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d50e:	7e9b      	ldrb	r3, [r3, #26]
 800d510:	4619      	mov	r1, r3
 800d512:	488f      	ldr	r0, [pc, #572]	; (800d750 <Siemens_Data_Analyser+0xb08>)
 800d514:	f018 fd54 	bl	8025fc0 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800d518:	4b8b      	ldr	r3, [pc, #556]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d51a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800d51e:	4619      	mov	r1, r3
 800d520:	488c      	ldr	r0, [pc, #560]	; (800d754 <Siemens_Data_Analyser+0xb0c>)
 800d522:	f018 fd4d 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800d526:	2301      	movs	r3, #1
 800d528:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800d52c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d530:	3308      	adds	r3, #8
 800d532:	2b00      	cmp	r3, #0
 800d534:	da00      	bge.n	800d538 <Siemens_Data_Analyser+0x8f0>
 800d536:	3307      	adds	r3, #7
 800d538:	10db      	asrs	r3, r3, #3
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d540:	4413      	add	r3, r2
 800d542:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d546:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d54a:	3308      	adds	r3, #8
 800d54c:	b29b      	uxth	r3, r3
 800d54e:	b21b      	sxth	r3, r3
 800d550:	425a      	negs	r2, r3
 800d552:	f003 0307 	and.w	r3, r3, #7
 800d556:	f002 0207 	and.w	r2, r2, #7
 800d55a:	bf58      	it	pl
 800d55c:	4253      	negpl	r3, r2
 800d55e:	b21b      	sxth	r3, r3
 800d560:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800d564:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d568:	b2d8      	uxtb	r0, r3
 800d56a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d56e:	f107 020c 	add.w	r2, r7, #12
 800d572:	441a      	add	r2, r3
 800d574:	2302      	movs	r3, #2
 800d576:	2108      	movs	r1, #8
 800d578:	f001 fd30 	bl	800efdc <Extract_Parity_Data>
 800d57c:	4603      	mov	r3, r0
 800d57e:	b2da      	uxtb	r2, r3
 800d580:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d584:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d588:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800d58a:	4b6b      	ldr	r3, [pc, #428]	; (800d738 <Siemens_Data_Analyser+0xaf0>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	091b      	lsrs	r3, r3, #4
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d02a      	beq.n	800d5ee <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800d598:	486f      	ldr	r0, [pc, #444]	; (800d758 <Siemens_Data_Analyser+0xb10>)
 800d59a:	f018 fdad 	bl	80260f8 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800d59e:	4868      	ldr	r0, [pc, #416]	; (800d740 <Siemens_Data_Analyser+0xaf8>)
 800d5a0:	f010 f9b6 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	4b67      	ldr	r3, [pc, #412]	; (800d744 <Siemens_Data_Analyser+0xafc>)
 800d5a8:	fba3 2301 	umull	r2, r3, r3, r1
 800d5ac:	09da      	lsrs	r2, r3, #7
 800d5ae:	4613      	mov	r3, r2
 800d5b0:	021b      	lsls	r3, r3, #8
 800d5b2:	1a9b      	subs	r3, r3, r2
 800d5b4:	1aca      	subs	r2, r1, r3
 800d5b6:	b2d2      	uxtb	r2, r2
 800d5b8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5bc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5c0:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800d5c2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5ca:	7eda      	ldrb	r2, [r3, #27]
 800d5cc:	4b5e      	ldr	r3, [pc, #376]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d5ce:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d10b      	bne.n	800d5ee <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800d5d6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5da:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5de:	7edb      	ldrb	r3, [r3, #27]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	b2da      	uxtb	r2, r3
 800d5e4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5e8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5ec:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800d5ee:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d5f2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d5f6:	7eda      	ldrb	r2, [r3, #27]
 800d5f8:	4b53      	ldr	r3, [pc, #332]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d5fa:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d015      	beq.n	800d62e <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800d602:	4856      	ldr	r0, [pc, #344]	; (800d75c <Siemens_Data_Analyser+0xb14>)
 800d604:	f018 fd78 	bl	80260f8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800d608:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d60c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d610:	7edb      	ldrb	r3, [r3, #27]
 800d612:	4619      	mov	r1, r3
 800d614:	484e      	ldr	r0, [pc, #312]	; (800d750 <Siemens_Data_Analyser+0xb08>)
 800d616:	f018 fcd3 	bl	8025fc0 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800d61a:	4b4b      	ldr	r3, [pc, #300]	; (800d748 <Siemens_Data_Analyser+0xb00>)
 800d61c:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800d620:	4619      	mov	r1, r3
 800d622:	484c      	ldr	r0, [pc, #304]	; (800d754 <Siemens_Data_Analyser+0xb0c>)
 800d624:	f018 fccc 	bl	8025fc0 <iprintf>
		RejectPacketFlag = 1;
 800d628:	2301      	movs	r3, #1
 800d62a:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800d62e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d632:	3308      	adds	r3, #8
 800d634:	2b00      	cmp	r3, #0
 800d636:	da00      	bge.n	800d63a <Siemens_Data_Analyser+0x9f2>
 800d638:	3307      	adds	r3, #7
 800d63a:	10db      	asrs	r3, r3, #3
 800d63c:	b29a      	uxth	r2, r3
 800d63e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d642:	4413      	add	r3, r2
 800d644:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d648:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d64c:	3308      	adds	r3, #8
 800d64e:	b29b      	uxth	r3, r3
 800d650:	b21b      	sxth	r3, r3
 800d652:	425a      	negs	r2, r3
 800d654:	f003 0307 	and.w	r3, r3, #7
 800d658:	f002 0207 	and.w	r2, r2, #7
 800d65c:	bf58      	it	pl
 800d65e:	4253      	negpl	r3, r2
 800d660:	b21b      	sxth	r3, r3
 800d662:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d666:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d66a:	b2d8      	uxtb	r0, r3
 800d66c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d670:	f107 020c 	add.w	r2, r7, #12
 800d674:	441a      	add	r2, r3
 800d676:	2302      	movs	r3, #2
 800d678:	2120      	movs	r1, #32
 800d67a:	f001 fcaf 	bl	800efdc <Extract_Parity_Data>
 800d67e:	4603      	mov	r3, r0
 800d680:	461a      	mov	r2, r3
 800d682:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d686:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d68a:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800d68c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d690:	3320      	adds	r3, #32
 800d692:	2b00      	cmp	r3, #0
 800d694:	da00      	bge.n	800d698 <Siemens_Data_Analyser+0xa50>
 800d696:	3307      	adds	r3, #7
 800d698:	10db      	asrs	r3, r3, #3
 800d69a:	b29a      	uxth	r2, r3
 800d69c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6a0:	4413      	add	r3, r2
 800d6a2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d6a6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d6aa:	3320      	adds	r3, #32
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	b21b      	sxth	r3, r3
 800d6b0:	425a      	negs	r2, r3
 800d6b2:	f003 0307 	and.w	r3, r3, #7
 800d6b6:	f002 0207 	and.w	r2, r2, #7
 800d6ba:	bf58      	it	pl
 800d6bc:	4253      	negpl	r3, r2
 800d6be:	b21b      	sxth	r3, r3
 800d6c0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800d6c4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d6c8:	b2d8      	uxtb	r0, r3
 800d6ca:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6ce:	f107 020c 	add.w	r2, r7, #12
 800d6d2:	441a      	add	r2, r3
 800d6d4:	2302      	movs	r3, #2
 800d6d6:	2120      	movs	r1, #32
 800d6d8:	f001 fc80 	bl	800efdc <Extract_Parity_Data>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	461a      	mov	r2, r3
 800d6e0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d6e4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d6e8:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800d6ea:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d6ee:	3320      	adds	r3, #32
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	da00      	bge.n	800d6f6 <Siemens_Data_Analyser+0xaae>
 800d6f4:	3307      	adds	r3, #7
 800d6f6:	10db      	asrs	r3, r3, #3
 800d6f8:	b29a      	uxth	r2, r3
 800d6fa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d6fe:	4413      	add	r3, r2
 800d700:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d704:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d708:	3320      	adds	r3, #32
 800d70a:	b29b      	uxth	r3, r3
 800d70c:	b21b      	sxth	r3, r3
 800d70e:	425a      	negs	r2, r3
 800d710:	f003 0307 	and.w	r3, r3, #7
 800d714:	f002 0207 	and.w	r2, r2, #7
 800d718:	bf58      	it	pl
 800d71a:	4253      	negpl	r3, r2
 800d71c:	b21b      	sxth	r3, r3
 800d71e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800d722:	2300      	movs	r3, #0
 800d724:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800d728:	200a      	movs	r0, #10
 800d72a:	f018 fc61 	bl	8025ff0 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d72e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d732:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d736:	e052      	b.n	800d7de <Siemens_Data_Analyser+0xb96>
 800d738:	20004c54 	.word	0x20004c54
 800d73c:	08029de8 	.word	0x08029de8
 800d740:	2000bc54 	.word	0x2000bc54
 800d744:	80808081 	.word	0x80808081
 800d748:	20000504 	.word	0x20000504
 800d74c:	08029e04 	.word	0x08029e04
 800d750:	08029d10 	.word	0x08029d10
 800d754:	08029d20 	.word	0x08029d20
 800d758:	08029e24 	.word	0x08029e24
 800d75c:	08029e40 	.word	0x08029e40
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800d760:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d764:	b2d8      	uxtb	r0, r3
 800d766:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d76a:	f107 020c 	add.w	r2, r7, #12
 800d76e:	441a      	add	r2, r3
 800d770:	2300      	movs	r3, #0
 800d772:	2108      	movs	r1, #8
 800d774:	f001 fc32 	bl	800efdc <Extract_Parity_Data>
 800d778:	4601      	mov	r1, r0
 800d77a:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800d77e:	1c5a      	adds	r2, r3, #1
 800d780:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800d784:	461a      	mov	r2, r3
 800d786:	b2c9      	uxtb	r1, r1
 800d788:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d78c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800d790:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800d792:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800d796:	3301      	adds	r3, #1
 800d798:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800d79c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800d7a0:	3308      	adds	r3, #8
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	da00      	bge.n	800d7a8 <Siemens_Data_Analyser+0xb60>
 800d7a6:	3307      	adds	r3, #7
 800d7a8:	10db      	asrs	r3, r3, #3
 800d7aa:	b29a      	uxth	r2, r3
 800d7ac:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d7b0:	4413      	add	r3, r2
 800d7b2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800d7b6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b21b      	sxth	r3, r3
 800d7c0:	425a      	negs	r2, r3
 800d7c2:	f003 0307 	and.w	r3, r3, #7
 800d7c6:	f002 0207 	and.w	r2, r2, #7
 800d7ca:	bf58      	it	pl
 800d7cc:	4253      	negpl	r3, r2
 800d7ce:	b21b      	sxth	r3, r3
 800d7d0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800d7d4:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d7d8:	3301      	adds	r3, #1
 800d7da:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800d7de:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800d7e8:	429a      	cmp	r2, r3
 800d7ea:	d8b9      	bhi.n	800d760 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800d7ec:	200a      	movs	r0, #10
 800d7ee:	f018 fbff 	bl	8025ff0 <putchar>


	//	printf("App_data_Size:%u\n",App_data_Size);
	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800d7f2:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d7f6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800d7fa:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800d7fe:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800d802:	4618      	mov	r0, r3
 800d804:	f000 f96e 	bl	800dae4 <ExtractAppData>
 800d808:	4603      	mov	r3, r0
 800d80a:	461a      	mov	r2, r3
 800d80c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d810:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d814:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800d816:	4ba0      	ldr	r3, [pc, #640]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d818:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d81c:	f003 0307 	and.w	r3, r3, #7
 800d820:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800d824:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d008      	beq.n	800d83e <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800d82c:	4b9a      	ldr	r3, [pc, #616]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d82e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d832:	08db      	lsrs	r3, r3, #3
 800d834:	b29b      	uxth	r3, r3
 800d836:	3301      	adds	r3, #1
 800d838:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800d83c:	e005      	b.n	800d84a <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800d83e:	4b96      	ldr	r3, [pc, #600]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d840:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800d844:	08db      	lsrs	r3, r3, #3
 800d846:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800d84a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d84e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d852:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d854:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800d858:	429a      	cmp	r2, r3
 800d85a:	d02c      	beq.n	800d8b6 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800d85c:	488f      	ldr	r0, [pc, #572]	; (800da9c <Siemens_Data_Analyser+0xe54>)
 800d85e:	f018 fc4b 	bl	80260f8 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800d862:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d866:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d86a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d86c:	4619      	mov	r1, r3
 800d86e:	488c      	ldr	r0, [pc, #560]	; (800daa0 <Siemens_Data_Analyser+0xe58>)
 800d870:	f018 fba6 	bl	8025fc0 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800d874:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800d878:	4619      	mov	r1, r3
 800d87a:	488a      	ldr	r0, [pc, #552]	; (800daa4 <Siemens_Data_Analyser+0xe5c>)
 800d87c:	f018 fba0 	bl	8025fc0 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800d880:	4989      	ldr	r1, [pc, #548]	; (800daa8 <Siemens_Data_Analyser+0xe60>)
 800d882:	488a      	ldr	r0, [pc, #552]	; (800daac <Siemens_Data_Analyser+0xe64>)
 800d884:	f7f2 fcdc 	bl	8000240 <strcmp>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d002      	beq.n	800d894 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800d88e:	2301      	movs	r3, #1
 800d890:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800d894:	4984      	ldr	r1, [pc, #528]	; (800daa8 <Siemens_Data_Analyser+0xe60>)
 800d896:	4885      	ldr	r0, [pc, #532]	; (800daac <Siemens_Data_Analyser+0xe64>)
 800d898:	f7f2 fcd2 	bl	8000240 <strcmp>
 800d89c:	4603      	mov	r3, r0
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d109      	bne.n	800d8b6 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800d8a2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d8a6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d8aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d8ac:	00db      	lsls	r3, r3, #3
 800d8ae:	b29a      	uxth	r2, r3
 800d8b0:	4b79      	ldr	r3, [pc, #484]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d8b2:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800d8b6:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800d8ba:	2b01      	cmp	r3, #1
 800d8bc:	f000 80e6 	beq.w	800da8c <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800d8c0:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800d8c4:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800d8c8:	3326      	adds	r3, #38	; 0x26
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	2000      	movs	r0, #0
 800d8ce:	f007 fe1b 	bl	8015508 <GetCRC16>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800d8d8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800d8dc:	f107 020c 	add.w	r2, r7, #12
 800d8e0:	4413      	add	r3, r2
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	2110      	movs	r1, #16
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f7f2 fe94 	bl	8000614 <ExtractBits>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d8f4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d8f8:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800d8fc:	f44f 720a 	mov.w	r2, #552	; 0x228
 800d900:	2100      	movs	r1, #0
 800d902:	486b      	ldr	r0, [pc, #428]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d904:	f018 fa74 	bl	8025df0 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800d908:	4a69      	ldr	r2, [pc, #420]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d90a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d90e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d912:	4610      	mov	r0, r2
 800d914:	4619      	mov	r1, r3
 800d916:	f44f 730a 	mov.w	r3, #552	; 0x228
 800d91a:	461a      	mov	r2, r3
 800d91c:	f018 fa40 	bl	8025da0 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800d920:	f000 f936 	bl	800db90 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d924:	4b63      	ldr	r3, [pc, #396]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d926:	881b      	ldrh	r3, [r3, #0]
 800d928:	461a      	mov	r2, r3
 800d92a:	4b5b      	ldr	r3, [pc, #364]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d92c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d930:	1ad3      	subs	r3, r2, r3
 800d932:	2b00      	cmp	r3, #0
 800d934:	bfb8      	it	lt
 800d936:	425b      	neglt	r3, r3
 800d938:	461a      	mov	r2, r3
 800d93a:	4b57      	ldr	r3, [pc, #348]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800d93c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800d940:	429a      	cmp	r2, r3
 800d942:	d871      	bhi.n	800da28 <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800d944:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d948:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d94c:	69da      	ldr	r2, [r3, #28]
 800d94e:	4b5a      	ldr	r3, [pc, #360]	; (800dab8 <Siemens_Data_Analyser+0xe70>)
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	429a      	cmp	r2, r3
 800d954:	d04c      	beq.n	800d9f0 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800d956:	f00b fc1d 	bl	8019194 <HAL_GetTick>
 800d95a:	4603      	mov	r3, r0
 800d95c:	4a57      	ldr	r2, [pc, #348]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d95e:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800d960:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800d964:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800d968:	69db      	ldr	r3, [r3, #28]
 800d96a:	4a53      	ldr	r2, [pc, #332]	; (800dab8 <Siemens_Data_Analyser+0xe70>)
 800d96c:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800d96e:	4b51      	ldr	r3, [pc, #324]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d970:	2200      	movs	r2, #0
 800d972:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800d974:	4b52      	ldr	r3, [pc, #328]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d976:	885b      	ldrh	r3, [r3, #2]
 800d978:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800d97c:	429a      	cmp	r2, r3
 800d97e:	d053      	beq.n	800da28 <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800d980:	f44f 7201 	mov.w	r2, #516	; 0x204
 800d984:	2100      	movs	r1, #0
 800d986:	484e      	ldr	r0, [pc, #312]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d988:	f018 fa32 	bl	8025df0 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800d98c:	f240 2202 	movw	r2, #514	; 0x202
 800d990:	2100      	movs	r1, #0
 800d992:	484c      	ldr	r0, [pc, #304]	; (800dac4 <Siemens_Data_Analyser+0xe7c>)
 800d994:	f018 fa2c 	bl	8025df0 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800d998:	4a49      	ldr	r2, [pc, #292]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d99a:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800d99e:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d9a0:	4b43      	ldr	r3, [pc, #268]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9a2:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d9a4:	4b46      	ldr	r3, [pc, #280]	; (800dac0 <Siemens_Data_Analyser+0xe78>)
 800d9a6:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d9a8:	4b41      	ldr	r3, [pc, #260]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9aa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	4946      	ldr	r1, [pc, #280]	; (800dac8 <Siemens_Data_Analyser+0xe80>)
 800d9b0:	4846      	ldr	r0, [pc, #280]	; (800dacc <Siemens_Data_Analyser+0xe84>)
 800d9b2:	f018 f9f5 	bl	8025da0 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800d9b6:	4b3e      	ldr	r3, [pc, #248]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9b8:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800d9ba:	4b42      	ldr	r3, [pc, #264]	; (800dac4 <Siemens_Data_Analyser+0xe7c>)
 800d9bc:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800d9be:	4b3c      	ldr	r3, [pc, #240]	; (800dab0 <Siemens_Data_Analyser+0xe68>)
 800d9c0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4940      	ldr	r1, [pc, #256]	; (800dac8 <Siemens_Data_Analyser+0xe80>)
 800d9c6:	4842      	ldr	r0, [pc, #264]	; (800dad0 <Siemens_Data_Analyser+0xe88>)
 800d9c8:	f018 f9ea 	bl	8025da0 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == RESET)
 800d9cc:	4b3b      	ldr	r3, [pc, #236]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d9ce:	781b      	ldrb	r3, [r3, #0]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d103      	bne.n	800d9dc <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800d9d4:	f240 1019 	movw	r0, #281	; 0x119
 800d9d8:	f003 fac2 	bl	8010f60 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800d9dc:	f240 2007 	movw	r0, #519	; 0x207
 800d9e0:	f003 fabe 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800d9e4:	f00b fbd6 	bl	8019194 <HAL_GetTick>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	4a34      	ldr	r2, [pc, #208]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800d9ec:	6113      	str	r3, [r2, #16]
 800d9ee:	e01b      	b.n	800da28 <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800d9f0:	4b30      	ldr	r3, [pc, #192]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9f2:	881b      	ldrh	r3, [r3, #0]
 800d9f4:	3301      	adds	r3, #1
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	4b2e      	ldr	r3, [pc, #184]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9fa:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800d9fc:	4b2d      	ldr	r3, [pc, #180]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800d9fe:	881b      	ldrh	r3, [r3, #0]
 800da00:	461a      	mov	r2, r3
 800da02:	4b25      	ldr	r3, [pc, #148]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800da04:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800da08:	429a      	cmp	r2, r3
 800da0a:	d90d      	bls.n	800da28 <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800da0c:	4b29      	ldr	r3, [pc, #164]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da0e:	881b      	ldrh	r3, [r3, #0]
 800da10:	4619      	mov	r1, r3
 800da12:	4830      	ldr	r0, [pc, #192]	; (800dad4 <Siemens_Data_Analyser+0xe8c>)
 800da14:	f018 fad4 	bl	8025fc0 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800da18:	4b1f      	ldr	r3, [pc, #124]	; (800da98 <Siemens_Data_Analyser+0xe50>)
 800da1a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800da1e:	b29b      	uxth	r3, r3
 800da20:	3301      	adds	r3, #1
 800da22:	b29a      	uxth	r2, r3
 800da24:	4b23      	ldr	r3, [pc, #140]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da26:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800da28:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800da2c:	f107 010c 	add.w	r1, r7, #12
 800da30:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800da34:	2302      	movs	r3, #2
 800da36:	f000 fe43 	bl	800e6c0 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800da3a:	4b27      	ldr	r3, [pc, #156]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da3c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800da40:	2b00      	cmp	r3, #0
 800da42:	d00d      	beq.n	800da60 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800da44:	4b24      	ldr	r3, [pc, #144]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da46:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800da4a:	2301      	movs	r3, #1
 800da4c:	4922      	ldr	r1, [pc, #136]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da4e:	4823      	ldr	r0, [pc, #140]	; (800dadc <Siemens_Data_Analyser+0xe94>)
 800da50:	f000 fe36 	bl	800e6c0 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800da54:	f240 6202 	movw	r2, #1538	; 0x602
 800da58:	2100      	movs	r1, #0
 800da5a:	481f      	ldr	r0, [pc, #124]	; (800dad8 <Siemens_Data_Analyser+0xe90>)
 800da5c:	f018 f9c8 	bl	8025df0 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800da60:	4b14      	ldr	r3, [pc, #80]	; (800dab4 <Siemens_Data_Analyser+0xe6c>)
 800da62:	881a      	ldrh	r2, [r3, #0]
 800da64:	4b1e      	ldr	r3, [pc, #120]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da66:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800da68:	4b1d      	ldr	r3, [pc, #116]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800da6e:	4b1c      	ldr	r3, [pc, #112]	; (800dae0 <Siemens_Data_Analyser+0xe98>)
 800da70:	2201      	movs	r2, #1
 800da72:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800da74:	f240 2001 	movw	r0, #513	; 0x201
 800da78:	f003 fa72 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800da7c:	f00b fb8a 	bl	8019194 <HAL_GetTick>
 800da80:	4603      	mov	r3, r0
 800da82:	4a0e      	ldr	r2, [pc, #56]	; (800dabc <Siemens_Data_Analyser+0xe74>)
 800da84:	6093      	str	r3, [r2, #8]

	return;
 800da86:	e002      	b.n	800da8e <Siemens_Data_Analyser+0xe46>
		return;
 800da88:	bf00      	nop
 800da8a:	e000      	b.n	800da8e <Siemens_Data_Analyser+0xe46>
		return;
 800da8c:	bf00      	nop
}
 800da8e:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}
 800da96:	bf00      	nop
 800da98:	20000504 	.word	0x20000504
 800da9c:	08029e58 	.word	0x08029e58
 800daa0:	08029d10 	.word	0x08029d10
 800daa4:	08029d20 	.word	0x08029d20
 800daa8:	08029e78 	.word	0x08029e78
 800daac:	20000505 	.word	0x20000505
 800dab0:	20003fd8 	.word	0x20003fd8
 800dab4:	20005498 	.word	0x20005498
 800dab8:	20005494 	.word	0x20005494
 800dabc:	20004c68 	.word	0x20004c68
 800dac0:	20004e88 	.word	0x20004e88
 800dac4:	20004c84 	.word	0x20004c84
 800dac8:	20003ffe 	.word	0x20003ffe
 800dacc:	20004e8c 	.word	0x20004e8c
 800dad0:	20004c86 	.word	0x20004c86
 800dad4:	08029e84 	.word	0x08029e84
 800dad8:	20004650 	.word	0x20004650
 800dadc:	20004428 	.word	0x20004428
 800dae0:	20004c5c 	.word	0x20004c5c

0800dae4 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800dae4:	b480      	push	{r7}
 800dae6:	b089      	sub	sp, #36	; 0x24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	60f8      	str	r0, [r7, #12]
 800daec:	460b      	mov	r3, r1
 800daee:	607a      	str	r2, [r7, #4]
 800daf0:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800daf2:	2300      	movs	r3, #0
 800daf4:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800daf6:	2300      	movs	r3, #0
 800daf8:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800dafa:	897b      	ldrh	r3, [r7, #10]
 800dafc:	00db      	lsls	r3, r3, #3
 800dafe:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800db00:	2300      	movs	r3, #0
 800db02:	837b      	strh	r3, [r7, #26]
 800db04:	e039      	b.n	800db7a <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800db06:	8b7b      	ldrh	r3, [r7, #26]
 800db08:	08db      	lsrs	r3, r3, #3
 800db0a:	b29b      	uxth	r3, r3
 800db0c:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800db0e:	8b7b      	ldrh	r3, [r7, #26]
 800db10:	f003 0307 	and.w	r3, r3, #7
 800db14:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800db16:	693b      	ldr	r3, [r7, #16]
 800db18:	2b07      	cmp	r3, #7
 800db1a:	d02a      	beq.n	800db72 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800db1c:	697b      	ldr	r3, [r7, #20]
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	4413      	add	r3, r2
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	8b7b      	ldrh	r3, [r7, #26]
 800db28:	f003 0307 	and.w	r3, r3, #7
 800db2c:	fa42 f303 	asr.w	r3, r2, r3
 800db30:	f003 0301 	and.w	r3, r3, #1
 800db34:	2b00      	cmp	r3, #0
 800db36:	d010      	beq.n	800db5a <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800db38:	8bfb      	ldrh	r3, [r7, #30]
 800db3a:	687a      	ldr	r2, [r7, #4]
 800db3c:	4413      	add	r3, r2
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	b25a      	sxtb	r2, r3
 800db42:	7f7b      	ldrb	r3, [r7, #29]
 800db44:	2101      	movs	r1, #1
 800db46:	fa01 f303 	lsl.w	r3, r1, r3
 800db4a:	b25b      	sxtb	r3, r3
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b259      	sxtb	r1, r3
 800db50:	8bfb      	ldrh	r3, [r7, #30]
 800db52:	687a      	ldr	r2, [r7, #4]
 800db54:	4413      	add	r3, r2
 800db56:	b2ca      	uxtb	r2, r1
 800db58:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800db5a:	7f7b      	ldrb	r3, [r7, #29]
 800db5c:	3301      	adds	r3, #1
 800db5e:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800db60:	7f7b      	ldrb	r3, [r7, #29]
 800db62:	2b08      	cmp	r3, #8
 800db64:	d106      	bne.n	800db74 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800db66:	2300      	movs	r3, #0
 800db68:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800db6a:	8bfb      	ldrh	r3, [r7, #30]
 800db6c:	3301      	adds	r3, #1
 800db6e:	83fb      	strh	r3, [r7, #30]
 800db70:	e000      	b.n	800db74 <ExtractAppData+0x90>
			continue;
 800db72:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800db74:	8b7b      	ldrh	r3, [r7, #26]
 800db76:	3301      	adds	r3, #1
 800db78:	837b      	strh	r3, [r7, #26]
 800db7a:	8b7a      	ldrh	r2, [r7, #26]
 800db7c:	8b3b      	ldrh	r3, [r7, #24]
 800db7e:	429a      	cmp	r2, r3
 800db80:	d3c1      	bcc.n	800db06 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800db82:	8bfb      	ldrh	r3, [r7, #30]
}
 800db84:	4618      	mov	r0, r3
 800db86:	3724      	adds	r7, #36	; 0x24
 800db88:	46bd      	mov	sp, r7
 800db8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8e:	4770      	bx	lr

0800db90 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800db90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800db94:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800db98:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800db9a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800db9e:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800dba2:	2300      	movs	r3, #0
 800dba4:	6013      	str	r3, [r2, #0]
 800dba6:	1d10      	adds	r0, r2, #4
 800dba8:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800dbac:	461a      	mov	r2, r3
 800dbae:	2100      	movs	r1, #0
 800dbb0:	f018 f91e 	bl	8025df0 <memset>
	uint16_t App_data_Traverser = 0;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800dbd8:	f44f 720a 	mov.w	r2, #552	; 0x228
 800dbdc:	2100      	movs	r1, #0
 800dbde:	48ba      	ldr	r0, [pc, #744]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbe0:	f018 f906 	bl	8025df0 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800dbe4:	4bb9      	ldr	r3, [pc, #740]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dbe6:	7b1b      	ldrb	r3, [r3, #12]
 800dbe8:	4ab7      	ldr	r2, [pc, #732]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbea:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800dbec:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dbf0:	b2d8      	uxtb	r0, r3
 800dbf2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dbf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dbfa:	1899      	adds	r1, r3, r2
 800dbfc:	4bb2      	ldr	r3, [pc, #712]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2200      	movs	r2, #0
 800dc04:	461c      	mov	r4, r3
 800dc06:	4615      	mov	r5, r2
 800dc08:	2301      	movs	r3, #1
 800dc0a:	9302      	str	r3, [sp, #8]
 800dc0c:	e9cd 4500 	strd	r4, r5, [sp]
 800dc10:	460a      	mov	r2, r1
 800dc12:	2108      	movs	r1, #8
 800dc14:	f001 fb24 	bl	800f260 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dc18:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dc1c:	3308      	adds	r3, #8
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	da00      	bge.n	800dc24 <Form_Siemens_Reply+0x94>
 800dc22:	3307      	adds	r3, #7
 800dc24:	10db      	asrs	r3, r3, #3
 800dc26:	b29a      	uxth	r2, r3
 800dc28:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc2c:	4413      	add	r3, r2
 800dc2e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dc32:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc36:	3308      	adds	r3, #8
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	b21b      	sxth	r3, r3
 800dc3c:	425a      	negs	r2, r3
 800dc3e:	f003 0107 	and.w	r1, r3, #7
 800dc42:	f002 0307 	and.w	r3, r2, #7
 800dc46:	bf58      	it	pl
 800dc48:	4259      	negpl	r1, r3
 800dc4a:	b20b      	sxth	r3, r1
 800dc4c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800dc50:	4b9e      	ldr	r3, [pc, #632]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dc52:	691a      	ldr	r2, [r3, #16]
 800dc54:	4b9c      	ldr	r3, [pc, #624]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc56:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800dc58:	4b9c      	ldr	r3, [pc, #624]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dc5a:	695a      	ldr	r2, [r3, #20]
 800dc5c:	4b9a      	ldr	r3, [pc, #616]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc5e:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800dc60:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dc64:	b2d8      	uxtb	r0, r3
 800dc66:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dc6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dc6e:	1899      	adds	r1, r3, r2
 800dc70:	4b95      	ldr	r3, [pc, #596]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dc72:	685b      	ldr	r3, [r3, #4]
 800dc74:	2200      	movs	r2, #0
 800dc76:	4698      	mov	r8, r3
 800dc78:	4691      	mov	r9, r2
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	9302      	str	r3, [sp, #8]
 800dc7e:	e9cd 8900 	strd	r8, r9, [sp]
 800dc82:	460a      	mov	r2, r1
 800dc84:	2118      	movs	r1, #24
 800dc86:	f001 faeb 	bl	800f260 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800dc8a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dc8e:	3318      	adds	r3, #24
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	da00      	bge.n	800dc96 <Form_Siemens_Reply+0x106>
 800dc94:	3307      	adds	r3, #7
 800dc96:	10db      	asrs	r3, r3, #3
 800dc98:	b29a      	uxth	r2, r3
 800dc9a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dc9e:	4413      	add	r3, r2
 800dca0:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dca4:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dca8:	3318      	adds	r3, #24
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	b21b      	sxth	r3, r3
 800dcae:	425a      	negs	r2, r3
 800dcb0:	f003 0107 	and.w	r1, r3, #7
 800dcb4:	f002 0307 	and.w	r3, r2, #7
 800dcb8:	bf58      	it	pl
 800dcba:	4259      	negpl	r1, r3
 800dcbc:	b20b      	sxth	r3, r1
 800dcbe:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800dcc2:	4b82      	ldr	r3, [pc, #520]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
 800dcc6:	4a80      	ldr	r2, [pc, #512]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dcc8:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800dcca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dcce:	b2d8      	uxtb	r0, r3
 800dcd0:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dcd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcd8:	1899      	adds	r1, r3, r2
 800dcda:	4b7b      	ldr	r3, [pc, #492]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dcdc:	7b1b      	ldrb	r3, [r3, #12]
 800dcde:	b2db      	uxtb	r3, r3
 800dce0:	2200      	movs	r2, #0
 800dce2:	469a      	mov	sl, r3
 800dce4:	4693      	mov	fp, r2
 800dce6:	2301      	movs	r3, #1
 800dce8:	9302      	str	r3, [sp, #8]
 800dcea:	e9cd ab00 	strd	sl, fp, [sp]
 800dcee:	460a      	mov	r2, r1
 800dcf0:	2108      	movs	r1, #8
 800dcf2:	f001 fab5 	bl	800f260 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dcf6:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dcfa:	3308      	adds	r3, #8
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	da00      	bge.n	800dd02 <Form_Siemens_Reply+0x172>
 800dd00:	3307      	adds	r3, #7
 800dd02:	10db      	asrs	r3, r3, #3
 800dd04:	b29a      	uxth	r2, r3
 800dd06:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd0a:	4413      	add	r3, r2
 800dd0c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd10:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd14:	3308      	adds	r3, #8
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	b21b      	sxth	r3, r3
 800dd1a:	425a      	negs	r2, r3
 800dd1c:	f003 0107 	and.w	r1, r3, #7
 800dd20:	f002 0307 	and.w	r3, r2, #7
 800dd24:	bf58      	it	pl
 800dd26:	4259      	negpl	r1, r3
 800dd28:	b20b      	sxth	r3, r1
 800dd2a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800dd2e:	4b67      	ldr	r3, [pc, #412]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dd30:	685a      	ldr	r2, [r3, #4]
 800dd32:	4b65      	ldr	r3, [pc, #404]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd34:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800dd36:	4b65      	ldr	r3, [pc, #404]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dd38:	689a      	ldr	r2, [r3, #8]
 800dd3a:	4b63      	ldr	r3, [pc, #396]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd3c:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800dd3e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd42:	b2d8      	uxtb	r0, r3
 800dd44:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800dd48:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dd4c:	1899      	adds	r1, r3, r2
 800dd4e:	4b5e      	ldr	r3, [pc, #376]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2200      	movs	r2, #0
 800dd54:	643b      	str	r3, [r7, #64]	; 0x40
 800dd56:	647a      	str	r2, [r7, #68]	; 0x44
 800dd58:	2300      	movs	r3, #0
 800dd5a:	9302      	str	r3, [sp, #8]
 800dd5c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800dd60:	e9cd 3400 	strd	r3, r4, [sp]
 800dd64:	460a      	mov	r2, r1
 800dd66:	2118      	movs	r1, #24
 800dd68:	f001 fa7a 	bl	800f260 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800dd6c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dd70:	3318      	adds	r3, #24
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	da00      	bge.n	800dd78 <Form_Siemens_Reply+0x1e8>
 800dd76:	3307      	adds	r3, #7
 800dd78:	10db      	asrs	r3, r3, #3
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dd80:	4413      	add	r3, r2
 800dd82:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dd86:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dd8a:	3318      	adds	r3, #24
 800dd8c:	b29b      	uxth	r3, r3
 800dd8e:	b21b      	sxth	r3, r3
 800dd90:	425a      	negs	r2, r3
 800dd92:	f003 0107 	and.w	r1, r3, #7
 800dd96:	f002 0307 	and.w	r3, r2, #7
 800dd9a:	bf58      	it	pl
 800dd9c:	4259      	negpl	r1, r3
 800dd9e:	b20b      	sxth	r3, r1
 800dda0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	//	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
	Siemens_TX_st.ProdDataVer = Siemens_RX_st.ProdDataVer; //Self Product Version
 800dda4:	4b49      	ldr	r3, [pc, #292]	; (800decc <Form_Siemens_Reply+0x33c>)
 800dda6:	7e1b      	ldrb	r3, [r3, #24]
 800dda8:	4a47      	ldr	r2, [pc, #284]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800ddaa:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800ddac:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddb0:	b2d8      	uxtb	r0, r3
 800ddb2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800ddb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ddba:	1899      	adds	r1, r3, r2
 800ddbc:	4b42      	ldr	r3, [pc, #264]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800ddbe:	7e1b      	ldrb	r3, [r3, #24]
 800ddc0:	b2db      	uxtb	r3, r3
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	63bb      	str	r3, [r7, #56]	; 0x38
 800ddc6:	63fa      	str	r2, [r7, #60]	; 0x3c
 800ddc8:	2300      	movs	r3, #0
 800ddca:	9302      	str	r3, [sp, #8]
 800ddcc:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800ddd0:	e9cd 3400 	strd	r3, r4, [sp]
 800ddd4:	460a      	mov	r2, r1
 800ddd6:	2108      	movs	r1, #8
 800ddd8:	f001 fa42 	bl	800f260 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800dddc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dde0:	3308      	adds	r3, #8
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	da00      	bge.n	800dde8 <Form_Siemens_Reply+0x258>
 800dde6:	3307      	adds	r3, #7
 800dde8:	10db      	asrs	r3, r3, #3
 800ddea:	b29a      	uxth	r2, r3
 800ddec:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ddf0:	4413      	add	r3, r2
 800ddf2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ddf6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ddfa:	3308      	adds	r3, #8
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	b21b      	sxth	r3, r3
 800de00:	425a      	negs	r2, r3
 800de02:	f003 0107 	and.w	r1, r3, #7
 800de06:	f002 0307 	and.w	r3, r2, #7
 800de0a:	bf58      	it	pl
 800de0c:	4259      	negpl	r1, r3
 800de0e:	b20b      	sxth	r3, r1
 800de10:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800de14:	4a2c      	ldr	r2, [pc, #176]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de16:	2301      	movs	r3, #1
 800de18:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800de1a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de1e:	b2d8      	uxtb	r0, r3
 800de20:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de28:	1899      	adds	r1, r3, r2
 800de2a:	4b27      	ldr	r3, [pc, #156]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de2c:	7e5b      	ldrb	r3, [r3, #25]
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	2200      	movs	r2, #0
 800de32:	633b      	str	r3, [r7, #48]	; 0x30
 800de34:	637a      	str	r2, [r7, #52]	; 0x34
 800de36:	2301      	movs	r3, #1
 800de38:	9302      	str	r3, [sp, #8]
 800de3a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800de3e:	e9cd 3400 	strd	r3, r4, [sp]
 800de42:	460a      	mov	r2, r1
 800de44:	2108      	movs	r1, #8
 800de46:	f001 fa0b 	bl	800f260 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800de4a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800de4e:	3308      	adds	r3, #8
 800de50:	2b00      	cmp	r3, #0
 800de52:	da00      	bge.n	800de56 <Form_Siemens_Reply+0x2c6>
 800de54:	3307      	adds	r3, #7
 800de56:	10db      	asrs	r3, r3, #3
 800de58:	b29a      	uxth	r2, r3
 800de5a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800de5e:	4413      	add	r3, r2
 800de60:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800de64:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de68:	3308      	adds	r3, #8
 800de6a:	b29b      	uxth	r3, r3
 800de6c:	b21b      	sxth	r3, r3
 800de6e:	425a      	negs	r2, r3
 800de70:	f003 0307 	and.w	r3, r3, #7
 800de74:	f002 0207 	and.w	r2, r2, #7
 800de78:	bf58      	it	pl
 800de7a:	4253      	negpl	r3, r2
 800de7c:	b21b      	sxth	r3, r3
 800de7e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800de82:	4b12      	ldr	r3, [pc, #72]	; (800decc <Form_Siemens_Reply+0x33c>)
 800de84:	7edb      	ldrb	r3, [r3, #27]
 800de86:	4a10      	ldr	r2, [pc, #64]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de88:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800de8a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800de8e:	b2d8      	uxtb	r0, r3
 800de90:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800de94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800de98:	1899      	adds	r1, r3, r2
 800de9a:	4b0b      	ldr	r3, [pc, #44]	; (800dec8 <Form_Siemens_Reply+0x338>)
 800de9c:	7e9b      	ldrb	r3, [r3, #26]
 800de9e:	b2db      	uxtb	r3, r3
 800dea0:	2200      	movs	r2, #0
 800dea2:	62bb      	str	r3, [r7, #40]	; 0x28
 800dea4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dea6:	2302      	movs	r3, #2
 800dea8:	9302      	str	r3, [sp, #8]
 800deaa:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800deae:	e9cd 3400 	strd	r3, r4, [sp]
 800deb2:	460a      	mov	r2, r1
 800deb4:	2108      	movs	r1, #8
 800deb6:	f001 f9d3 	bl	800f260 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800deba:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800debe:	3308      	adds	r3, #8
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da05      	bge.n	800ded0 <Form_Siemens_Reply+0x340>
 800dec4:	3307      	adds	r3, #7
 800dec6:	e003      	b.n	800ded0 <Form_Siemens_Reply+0x340>
 800dec8:	20004200 	.word	0x20004200
 800decc:	20003fd8 	.word	0x20003fd8
 800ded0:	10db      	asrs	r3, r3, #3
 800ded2:	b29a      	uxth	r2, r3
 800ded4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ded8:	4413      	add	r3, r2
 800deda:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dede:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dee2:	3308      	adds	r3, #8
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	b21b      	sxth	r3, r3
 800dee8:	425a      	negs	r2, r3
 800deea:	f003 0307 	and.w	r3, r3, #7
 800deee:	f002 0207 	and.w	r2, r2, #7
 800def2:	bf58      	it	pl
 800def4:	4253      	negpl	r3, r2
 800def6:	b21b      	sxth	r3, r3
 800def8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800defc:	4bc4      	ldr	r3, [pc, #784]	; (800e210 <Form_Siemens_Reply+0x680>)
 800defe:	7e9a      	ldrb	r2, [r3, #26]
 800df00:	4bc4      	ldr	r3, [pc, #784]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df02:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800df04:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df08:	b2d8      	uxtb	r0, r3
 800df0a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df0e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df12:	441a      	add	r2, r3
 800df14:	4bbf      	ldr	r3, [pc, #764]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df16:	7edb      	ldrb	r3, [r3, #27]
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	2100      	movs	r1, #0
 800df1c:	623b      	str	r3, [r7, #32]
 800df1e:	6279      	str	r1, [r7, #36]	; 0x24
 800df20:	2302      	movs	r3, #2
 800df22:	9302      	str	r3, [sp, #8]
 800df24:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800df28:	e9cd 3400 	strd	r3, r4, [sp]
 800df2c:	2108      	movs	r1, #8
 800df2e:	f001 f997 	bl	800f260 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800df32:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800df36:	3308      	adds	r3, #8
 800df38:	2b00      	cmp	r3, #0
 800df3a:	da00      	bge.n	800df3e <Form_Siemens_Reply+0x3ae>
 800df3c:	3307      	adds	r3, #7
 800df3e:	10db      	asrs	r3, r3, #3
 800df40:	b29a      	uxth	r2, r3
 800df42:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df46:	4413      	add	r3, r2
 800df48:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800df4c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df50:	3308      	adds	r3, #8
 800df52:	b29b      	uxth	r3, r3
 800df54:	b21b      	sxth	r3, r3
 800df56:	425a      	negs	r2, r3
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	f002 0207 	and.w	r2, r2, #7
 800df60:	bf58      	it	pl
 800df62:	4253      	negpl	r3, r2
 800df64:	b21b      	sxth	r3, r3
 800df66:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800df6a:	4ba9      	ldr	r3, [pc, #676]	; (800e210 <Form_Siemens_Reply+0x680>)
 800df6c:	6a1b      	ldr	r3, [r3, #32]
 800df6e:	4aa9      	ldr	r2, [pc, #676]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df70:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800df72:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800df76:	b2d8      	uxtb	r0, r3
 800df78:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800df7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800df80:	4413      	add	r3, r2
 800df82:	4aa4      	ldr	r2, [pc, #656]	; (800e214 <Form_Siemens_Reply+0x684>)
 800df84:	69d2      	ldr	r2, [r2, #28]
 800df86:	2100      	movs	r1, #0
 800df88:	61ba      	str	r2, [r7, #24]
 800df8a:	61f9      	str	r1, [r7, #28]
 800df8c:	2202      	movs	r2, #2
 800df8e:	9202      	str	r2, [sp, #8]
 800df90:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800df94:	e9cd 1200 	strd	r1, r2, [sp]
 800df98:	461a      	mov	r2, r3
 800df9a:	2120      	movs	r1, #32
 800df9c:	f001 f960 	bl	800f260 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800dfa0:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800dfa4:	3320      	adds	r3, #32
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	da00      	bge.n	800dfac <Form_Siemens_Reply+0x41c>
 800dfaa:	3307      	adds	r3, #7
 800dfac:	10db      	asrs	r3, r3, #3
 800dfae:	b29a      	uxth	r2, r3
 800dfb0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dfb4:	4413      	add	r3, r2
 800dfb6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800dfba:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dfbe:	3320      	adds	r3, #32
 800dfc0:	b29b      	uxth	r3, r3
 800dfc2:	b21b      	sxth	r3, r3
 800dfc4:	425a      	negs	r2, r3
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	f002 0207 	and.w	r2, r2, #7
 800dfce:	bf58      	it	pl
 800dfd0:	4253      	negpl	r3, r2
 800dfd2:	b21b      	sxth	r3, r3
 800dfd4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800dfd8:	4b8f      	ldr	r3, [pc, #572]	; (800e218 <Form_Siemens_Reply+0x688>)
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a8d      	ldr	r2, [pc, #564]	; (800e214 <Form_Siemens_Reply+0x684>)
 800dfde:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800dfe0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800dfe4:	b2d8      	uxtb	r0, r3
 800dfe6:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800dfea:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800dfee:	4413      	add	r3, r2
 800dff0:	4a88      	ldr	r2, [pc, #544]	; (800e214 <Form_Siemens_Reply+0x684>)
 800dff2:	6a12      	ldr	r2, [r2, #32]
 800dff4:	2100      	movs	r1, #0
 800dff6:	613a      	str	r2, [r7, #16]
 800dff8:	6179      	str	r1, [r7, #20]
 800dffa:	2202      	movs	r2, #2
 800dffc:	9202      	str	r2, [sp, #8]
 800dffe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e002:	e9cd 1200 	strd	r1, r2, [sp]
 800e006:	461a      	mov	r2, r3
 800e008:	2120      	movs	r1, #32
 800e00a:	f001 f929 	bl	800f260 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800e00e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e012:	3320      	adds	r3, #32
 800e014:	2b00      	cmp	r3, #0
 800e016:	da00      	bge.n	800e01a <Form_Siemens_Reply+0x48a>
 800e018:	3307      	adds	r3, #7
 800e01a:	10db      	asrs	r3, r3, #3
 800e01c:	b29a      	uxth	r2, r3
 800e01e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e022:	4413      	add	r3, r2
 800e024:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e028:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e02c:	3320      	adds	r3, #32
 800e02e:	b29b      	uxth	r3, r3
 800e030:	b21b      	sxth	r3, r3
 800e032:	425a      	negs	r2, r3
 800e034:	f003 0307 	and.w	r3, r3, #7
 800e038:	f002 0207 	and.w	r2, r2, #7
 800e03c:	bf58      	it	pl
 800e03e:	4253      	negpl	r3, r2
 800e040:	b21b      	sxth	r3, r3
 800e042:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800e046:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800e04a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e04e:	2201      	movs	r2, #1
 800e050:	4618      	mov	r0, r3
 800e052:	f001 fa6b 	bl	800f52c <Data_Compliment>
 800e056:	4603      	mov	r3, r0
 800e058:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800e05c:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800e060:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e064:	4611      	mov	r1, r2
 800e066:	4618      	mov	r0, r3
 800e068:	f000 ff64 	bl	800ef34 <Siemens_CRC>
 800e06c:	4603      	mov	r3, r0
 800e06e:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e072:	4b6a      	ldr	r3, [pc, #424]	; (800e21c <Form_Siemens_Reply+0x68c>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	09db      	lsrs	r3, r3, #7
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d02c      	beq.n	800e0da <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800e080:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e084:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e088:	4865      	ldr	r0, [pc, #404]	; (800e220 <Form_Siemens_Reply+0x690>)
 800e08a:	f018 f835 	bl	80260f8 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800e08e:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e092:	4619      	mov	r1, r3
 800e094:	4863      	ldr	r0, [pc, #396]	; (800e224 <Form_Siemens_Reply+0x694>)
 800e096:	f017 ff93 	bl	8025fc0 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e09a:	4863      	ldr	r0, [pc, #396]	; (800e228 <Form_Siemens_Reply+0x698>)
 800e09c:	f00f fc38 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800e0a0:	4601      	mov	r1, r0
 800e0a2:	4b62      	ldr	r3, [pc, #392]	; (800e22c <Form_Siemens_Reply+0x69c>)
 800e0a4:	fba3 2301 	umull	r2, r3, r3, r1
 800e0a8:	0bda      	lsrs	r2, r3, #15
 800e0aa:	4613      	mov	r3, r2
 800e0ac:	041b      	lsls	r3, r3, #16
 800e0ae:	1a9b      	subs	r3, r3, r2
 800e0b0:	1aca      	subs	r2, r1, r3
 800e0b2:	4613      	mov	r3, r2
 800e0b4:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800e0b8:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e0bc:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d104      	bne.n	800e0ce <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800e0c4:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e0c8:	3304      	adds	r3, #4
 800e0ca:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800e0ce:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	4856      	ldr	r0, [pc, #344]	; (800e230 <Form_Siemens_Reply+0x6a0>)
 800e0d6:	f017 ff73 	bl	8025fc0 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800e0da:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e0de:	b2d8      	uxtb	r0, r3
 800e0e0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e0e4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e0e8:	4413      	add	r3, r2
 800e0ea:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800e0ee:	2100      	movs	r1, #0
 800e0f0:	60ba      	str	r2, [r7, #8]
 800e0f2:	60f9      	str	r1, [r7, #12]
 800e0f4:	2202      	movs	r2, #2
 800e0f6:	9202      	str	r2, [sp, #8]
 800e0f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e0fc:	e9cd 1200 	strd	r1, r2, [sp]
 800e100:	461a      	mov	r2, r3
 800e102:	2110      	movs	r1, #16
 800e104:	f001 f8ac 	bl	800f260 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e108:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e10c:	3310      	adds	r3, #16
 800e10e:	2b00      	cmp	r3, #0
 800e110:	da00      	bge.n	800e114 <Form_Siemens_Reply+0x584>
 800e112:	3307      	adds	r3, #7
 800e114:	10db      	asrs	r3, r3, #3
 800e116:	b29a      	uxth	r2, r3
 800e118:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e11c:	4413      	add	r3, r2
 800e11e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e122:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e126:	3310      	adds	r3, #16
 800e128:	b29b      	uxth	r3, r3
 800e12a:	b21b      	sxth	r3, r3
 800e12c:	425a      	negs	r2, r3
 800e12e:	f003 0307 	and.w	r3, r3, #7
 800e132:	f002 0207 	and.w	r2, r2, #7
 800e136:	bf58      	it	pl
 800e138:	4253      	negpl	r3, r2
 800e13a:	b21b      	sxth	r3, r3
 800e13c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800e140:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e148:	441a      	add	r2, r3
 800e14a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e14e:	3b02      	subs	r3, #2
 800e150:	b29b      	uxth	r3, r3
 800e152:	4619      	mov	r1, r3
 800e154:	4610      	mov	r0, r2
 800e156:	f000 feed 	bl	800ef34 <Siemens_CRC>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e160:	4b2e      	ldr	r3, [pc, #184]	; (800e21c <Form_Siemens_Reply+0x68c>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	0a5b      	lsrs	r3, r3, #9
 800e166:	f003 0301 	and.w	r3, r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d02c      	beq.n	800e1c8 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800e16e:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e172:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800e176:	482a      	ldr	r0, [pc, #168]	; (800e220 <Form_Siemens_Reply+0x690>)
 800e178:	f017 ffbe 	bl	80260f8 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e17c:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e180:	4619      	mov	r1, r3
 800e182:	482c      	ldr	r0, [pc, #176]	; (800e234 <Form_Siemens_Reply+0x6a4>)
 800e184:	f017 ff1c 	bl	8025fc0 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800e188:	4827      	ldr	r0, [pc, #156]	; (800e228 <Form_Siemens_Reply+0x698>)
 800e18a:	f00f fbc1 	bl	801d910 <HAL_RNG_GetRandomNumber>
 800e18e:	4601      	mov	r1, r0
 800e190:	4b26      	ldr	r3, [pc, #152]	; (800e22c <Form_Siemens_Reply+0x69c>)
 800e192:	fba3 2301 	umull	r2, r3, r3, r1
 800e196:	0bda      	lsrs	r2, r3, #15
 800e198:	4613      	mov	r3, r2
 800e19a:	041b      	lsls	r3, r3, #16
 800e19c:	1a9b      	subs	r3, r3, r2
 800e19e:	1aca      	subs	r2, r1, r3
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800e1a6:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e1aa:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d104      	bne.n	800e1bc <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800e1b2:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e1b6:	3304      	adds	r3, #4
 800e1b8:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800e1bc:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	481d      	ldr	r0, [pc, #116]	; (800e238 <Form_Siemens_Reply+0x6a8>)
 800e1c4:	f017 fefc 	bl	8025fc0 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800e1c8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e1cc:	005b      	lsls	r3, r3, #1
 800e1ce:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800e1d2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e1d6:	b2d8      	uxtb	r0, r3
 800e1d8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e1dc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800e1e0:	4413      	add	r3, r2
 800e1e2:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800e1e6:	2100      	movs	r1, #0
 800e1e8:	603a      	str	r2, [r7, #0]
 800e1ea:	6079      	str	r1, [r7, #4]
 800e1ec:	2202      	movs	r2, #2
 800e1ee:	9202      	str	r2, [sp, #8]
 800e1f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e1f4:	e9cd 1200 	strd	r1, r2, [sp]
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	2110      	movs	r1, #16
 800e1fc:	f001 f830 	bl	800f260 <Insert_cal_parity>
	BITSTUFFINC(16);
 800e200:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800e204:	3310      	adds	r3, #16
 800e206:	2b00      	cmp	r3, #0
 800e208:	da18      	bge.n	800e23c <Form_Siemens_Reply+0x6ac>
 800e20a:	3307      	adds	r3, #7
 800e20c:	e016      	b.n	800e23c <Form_Siemens_Reply+0x6ac>
 800e20e:	bf00      	nop
 800e210:	20003fd8 	.word	0x20003fd8
 800e214:	20004200 	.word	0x20004200
 800e218:	2000549c 	.word	0x2000549c
 800e21c:	20004c54 	.word	0x20004c54
 800e220:	08029bf8 	.word	0x08029bf8
 800e224:	08029ea8 	.word	0x08029ea8
 800e228:	2000bc54 	.word	0x2000bc54
 800e22c:	80008001 	.word	0x80008001
 800e230:	08029ebc 	.word	0x08029ebc
 800e234:	08029ed0 	.word	0x08029ed0
 800e238:	08029eec 	.word	0x08029eec
 800e23c:	10db      	asrs	r3, r3, #3
 800e23e:	b29a      	uxth	r2, r3
 800e240:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800e244:	4413      	add	r3, r2
 800e246:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800e24a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800e24e:	3310      	adds	r3, #16
 800e250:	b29b      	uxth	r3, r3
 800e252:	b21b      	sxth	r3, r3
 800e254:	425a      	negs	r2, r3
 800e256:	f003 0307 	and.w	r3, r3, #7
 800e25a:	f002 0207 	and.w	r2, r2, #7
 800e25e:	bf58      	it	pl
 800e260:	4253      	negpl	r3, r2
 800e262:	b21b      	sxth	r3, r3
 800e264:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800e268:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e26c:	3302      	adds	r3, #2
 800e26e:	461a      	mov	r2, r3
 800e270:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e274:	4619      	mov	r1, r3
 800e276:	481e      	ldr	r0, [pc, #120]	; (800e2f0 <Form_Siemens_Reply+0x760>)
 800e278:	f017 fd92 	bl	8025da0 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800e27c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e280:	3302      	adds	r3, #2
 800e282:	b29a      	uxth	r2, r3
 800e284:	4b1a      	ldr	r3, [pc, #104]	; (800e2f0 <Form_Siemens_Reply+0x760>)
 800e286:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800e28a:	f001 f9bb 	bl	800f604 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800e28e:	4b19      	ldr	r3, [pc, #100]	; (800e2f4 <Form_Siemens_Reply+0x764>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	099b      	lsrs	r3, r3, #6
 800e294:	f003 0301 	and.w	r3, r3, #1
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d003      	beq.n	800e2a4 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800e29c:	4816      	ldr	r0, [pc, #88]	; (800e2f8 <Form_Siemens_Reply+0x768>)
 800e29e:	f017 ff2b 	bl	80260f8 <puts>
 800e2a2:	e00f      	b.n	800e2c4 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800e2a4:	4b15      	ldr	r3, [pc, #84]	; (800e2fc <Form_Siemens_Reply+0x76c>)
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	2b01      	cmp	r3, #1
 800e2aa:	d10b      	bne.n	800e2c4 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800e2ac:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800e2b0:	b2db      	uxtb	r3, r3
 800e2b2:	3302      	adds	r3, #2
 800e2b4:	b2d9      	uxtb	r1, r3
 800e2b6:	4a12      	ldr	r2, [pc, #72]	; (800e300 <Form_Siemens_Reply+0x770>)
 800e2b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800e2bc:	6812      	ldr	r2, [r2, #0]
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f002 fc0a 	bl	8010ad8 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800e2c4:	f44f 720a 	mov.w	r2, #552	; 0x228
 800e2c8:	2100      	movs	r1, #0
 800e2ca:	480e      	ldr	r0, [pc, #56]	; (800e304 <Form_Siemens_Reply+0x774>)
 800e2cc:	f017 fd90 	bl	8025df0 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800e2d0:	4a0c      	ldr	r2, [pc, #48]	; (800e304 <Form_Siemens_Reply+0x774>)
 800e2d2:	4b0d      	ldr	r3, [pc, #52]	; (800e308 <Form_Siemens_Reply+0x778>)
 800e2d4:	4610      	mov	r0, r2
 800e2d6:	4619      	mov	r1, r3
 800e2d8:	f44f 730a 	mov.w	r3, #552	; 0x228
 800e2dc:	461a      	mov	r2, r3
 800e2de:	f017 fd5f 	bl	8025da0 <memcpy>
	UNUSED(App_data_Traverser);
}
 800e2e2:	bf00      	nop
 800e2e4:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e2ee:	bf00      	nop
 800e2f0:	20004650 	.word	0x20004650
 800e2f4:	20004c54 	.word	0x20004c54
 800e2f8:	08029f0c 	.word	0x08029f0c
 800e2fc:	2000637d 	.word	0x2000637d
 800e300:	200069e4 	.word	0x200069e4
 800e304:	20004428 	.word	0x20004428
 800e308:	20004200 	.word	0x20004200

0800e30c <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800e30c:	b580      	push	{r7, lr}
 800e30e:	b082      	sub	sp, #8
 800e310:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800e312:	4b64      	ldr	r3, [pc, #400]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4618      	mov	r0, r3
 800e318:	f002 f86e 	bl	80103f8 <HAL_Elaps_Ticks>
 800e31c:	4602      	mov	r2, r0
 800e31e:	4b62      	ldr	r3, [pc, #392]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e320:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e324:	429a      	cmp	r2, r3
 800e326:	f240 80b9 	bls.w	800e49c <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e32a:	4b5e      	ldr	r3, [pc, #376]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e32c:	781b      	ldrb	r3, [r3, #0]
		if(
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d113      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e332:	4b5c      	ldr	r3, [pc, #368]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e334:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == RESET) &&
 800e336:	2b01      	cmp	r3, #1
 800e338:	d10f      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e33a:	4b5c      	ldr	r3, [pc, #368]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e33c:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d10b      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e342:	4b5b      	ldr	r3, [pc, #364]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	2b01      	cmp	r3, #1
 800e348:	d107      	bne.n	800e35a <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e34a:	4b5a      	ldr	r3, [pc, #360]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e34c:	881b      	ldrh	r3, [r3, #0]
 800e34e:	461a      	mov	r2, r3
 800e350:	4959      	ldr	r1, [pc, #356]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e352:	485a      	ldr	r0, [pc, #360]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e354:	f017 fd24 	bl	8025da0 <memcpy>
 800e358:	e02d      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e35a:	4b54      	ldr	r3, [pc, #336]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e35c:	781b      	ldrb	r3, [r3, #0]
 800e35e:	2b01      	cmp	r3, #1
 800e360:	d10f      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
 800e362:	4b53      	ldr	r3, [pc, #332]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e364:	781b      	ldrb	r3, [r3, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d10b      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
 800e36a:	4b4e      	ldr	r3, [pc, #312]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e36c:	785b      	ldrb	r3, [r3, #1]
 800e36e:	2b01      	cmp	r3, #1
 800e370:	d107      	bne.n	800e382 <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800e372:	4b53      	ldr	r3, [pc, #332]	; (800e4c0 <ProcessSendingSignals2MIE+0x1b4>)
 800e374:	881b      	ldrh	r3, [r3, #0]
 800e376:	461a      	mov	r2, r3
 800e378:	4952      	ldr	r1, [pc, #328]	; (800e4c4 <ProcessSendingSignals2MIE+0x1b8>)
 800e37a:	4850      	ldr	r0, [pc, #320]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e37c:	f017 fd10 	bl	8025da0 <memcpy>
 800e380:	e019      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800e382:	4b4b      	ldr	r3, [pc, #300]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e384:	781b      	ldrb	r3, [r3, #0]
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10f      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
 800e38a:	4b48      	ldr	r3, [pc, #288]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d10b      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
 800e392:	4b44      	ldr	r3, [pc, #272]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e394:	785b      	ldrb	r3, [r3, #1]
 800e396:	2b01      	cmp	r3, #1
 800e398:	d107      	bne.n	800e3aa <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e39a:	4b46      	ldr	r3, [pc, #280]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e39c:	881b      	ldrh	r3, [r3, #0]
 800e39e:	461a      	mov	r2, r3
 800e3a0:	4945      	ldr	r1, [pc, #276]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e3a2:	4846      	ldr	r0, [pc, #280]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3a4:	f017 fcfc 	bl	8025da0 <memcpy>
 800e3a8:	e005      	b.n	800e3b6 <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e3aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3ae:	2100      	movs	r1, #0
 800e3b0:	4842      	ldr	r0, [pc, #264]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3b2:	f017 fd1d 	bl	8025df0 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e3b6:	4b3e      	ldr	r3, [pc, #248]	; (800e4b0 <ProcessSendingSignals2MIE+0x1a4>)
 800e3b8:	885b      	ldrh	r3, [r3, #2]
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	4b3a      	ldr	r3, [pc, #232]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3be:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d30d      	bcc.n	800e3e2 <ProcessSendingSignals2MIE+0xd6>
 800e3c6:	4b39      	ldr	r3, [pc, #228]	; (800e4ac <ProcessSendingSignals2MIE+0x1a0>)
 800e3c8:	885b      	ldrh	r3, [r3, #2]
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	4b36      	ldr	r3, [pc, #216]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3ce:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d305      	bcc.n	800e3e2 <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800e3d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e3da:	2100      	movs	r1, #0
 800e3dc:	4837      	ldr	r0, [pc, #220]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e3de:	f017 fd07 	bl	8025df0 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800e3e2:	4b31      	ldr	r3, [pc, #196]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3e4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e3e8:	f003 0307 	and.w	r3, r3, #7
 800e3ec:	b29a      	uxth	r2, r3
 800e3ee:	4b36      	ldr	r3, [pc, #216]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e3f0:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800e3f2:	4b35      	ldr	r3, [pc, #212]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e3f4:	881b      	ldrh	r3, [r3, #0]
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800e3fa:	4b2b      	ldr	r3, [pc, #172]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e3fc:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e400:	08db      	lsrs	r3, r3, #3
 800e402:	b29b      	uxth	r3, r3
 800e404:	3301      	adds	r3, #1
 800e406:	b29a      	uxth	r2, r3
 800e408:	4b2f      	ldr	r3, [pc, #188]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e40a:	801a      	strh	r2, [r3, #0]
 800e40c:	e006      	b.n	800e41c <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800e40e:	4b26      	ldr	r3, [pc, #152]	; (800e4a8 <ProcessSendingSignals2MIE+0x19c>)
 800e410:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e414:	08db      	lsrs	r3, r3, #3
 800e416:	b29a      	uxth	r2, r3
 800e418:	4b2b      	ldr	r3, [pc, #172]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e41a:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800e41c:	492b      	ldr	r1, [pc, #172]	; (800e4cc <ProcessSendingSignals2MIE+0x1c0>)
 800e41e:	482c      	ldr	r0, [pc, #176]	; (800e4d0 <ProcessSendingSignals2MIE+0x1c4>)
 800e420:	f7f1 ff0e 	bl	8000240 <strcmp>
 800e424:	4603      	mov	r3, r0
 800e426:	2b00      	cmp	r3, #0
 800e428:	d008      	beq.n	800e43c <ProcessSendingSignals2MIE+0x130>
 800e42a:	4b1e      	ldr	r3, [pc, #120]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e42c:	785b      	ldrb	r3, [r3, #1]
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d104      	bne.n	800e43c <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800e432:	f240 1019 	movw	r0, #281	; 0x119
 800e436:	f002 fd93 	bl	8010f60 <TransmitCanPkt>
 800e43a:	e011      	b.n	800e460 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800e43c:	4923      	ldr	r1, [pc, #140]	; (800e4cc <ProcessSendingSignals2MIE+0x1c0>)
 800e43e:	4824      	ldr	r0, [pc, #144]	; (800e4d0 <ProcessSendingSignals2MIE+0x1c4>)
 800e440:	f7f1 fefe 	bl	8000240 <strcmp>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d106      	bne.n	800e458 <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800e44a:	4b1a      	ldr	r3, [pc, #104]	; (800e4b4 <ProcessSendingSignals2MIE+0x1a8>)
 800e44c:	881b      	ldrh	r3, [r3, #0]
 800e44e:	461a      	mov	r2, r3
 800e450:	4919      	ldr	r1, [pc, #100]	; (800e4b8 <ProcessSendingSignals2MIE+0x1ac>)
 800e452:	481a      	ldr	r0, [pc, #104]	; (800e4bc <ProcessSendingSignals2MIE+0x1b0>)
 800e454:	f017 fca4 	bl	8025da0 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800e458:	f240 1019 	movw	r0, #281	; 0x119
 800e45c:	f002 fd80 	bl	8010f60 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800e460:	481c      	ldr	r0, [pc, #112]	; (800e4d4 <ProcessSendingSignals2MIE+0x1c8>)
 800e462:	f017 fdad 	bl	8025fc0 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e466:	2300      	movs	r3, #0
 800e468:	80fb      	strh	r3, [r7, #6]
 800e46a:	e00a      	b.n	800e482 <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800e46c:	88fb      	ldrh	r3, [r7, #6]
 800e46e:	4a16      	ldr	r2, [pc, #88]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e470:	4413      	add	r3, r2
 800e472:	789b      	ldrb	r3, [r3, #2]
 800e474:	4619      	mov	r1, r3
 800e476:	4818      	ldr	r0, [pc, #96]	; (800e4d8 <ProcessSendingSignals2MIE+0x1cc>)
 800e478:	f017 fda2 	bl	8025fc0 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800e47c:	88fb      	ldrh	r3, [r7, #6]
 800e47e:	3301      	adds	r3, #1
 800e480:	80fb      	strh	r3, [r7, #6]
 800e482:	4b11      	ldr	r3, [pc, #68]	; (800e4c8 <ProcessSendingSignals2MIE+0x1bc>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	88fa      	ldrh	r2, [r7, #6]
 800e488:	429a      	cmp	r2, r3
 800e48a:	d3ef      	bcc.n	800e46c <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800e48c:	200a      	movs	r0, #10
 800e48e:	f017 fdaf 	bl	8025ff0 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800e492:	f00a fe7f 	bl	8019194 <HAL_GetTick>
 800e496:	4603      	mov	r3, r0
 800e498:	4a02      	ldr	r2, [pc, #8]	; (800e4a4 <ProcessSendingSignals2MIE+0x198>)
 800e49a:	6053      	str	r3, [r2, #4]
	}
}
 800e49c:	bf00      	nop
 800e49e:	3708      	adds	r7, #8
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	20004c68 	.word	0x20004c68
 800e4a8:	20000504 	.word	0x20000504
 800e4ac:	20004c60 	.word	0x20004c60
 800e4b0:	20004c5c 	.word	0x20004c5c
 800e4b4:	20004e88 	.word	0x20004e88
 800e4b8:	20004e8c 	.word	0x20004e8c
 800e4bc:	20004c86 	.word	0x20004c86
 800e4c0:	2000508c 	.word	0x2000508c
 800e4c4:	20005090 	.word	0x20005090
 800e4c8:	20004c84 	.word	0x20004c84
 800e4cc:	08029e78 	.word	0x08029e78
 800e4d0:	20000505 	.word	0x20000505
 800e4d4:	08029f34 	.word	0x08029f34
 800e4d8:	08029f4c 	.word	0x08029f4c

0800e4dc <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800e4dc:	b580      	push	{r7, lr}
 800e4de:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800e4e0:	4b0c      	ldr	r3, [pc, #48]	; (800e514 <ProcessSelfSharing+0x38>)
 800e4e2:	689b      	ldr	r3, [r3, #8]
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	f001 ff87 	bl	80103f8 <HAL_Elaps_Ticks>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	4b0a      	ldr	r3, [pc, #40]	; (800e518 <ProcessSelfSharing+0x3c>)
 800e4ee:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d90b      	bls.n	800e50e <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800e4f6:	4b09      	ldr	r3, [pc, #36]	; (800e51c <ProcessSelfSharing+0x40>)
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800e4fc:	f240 2001 	movw	r0, #513	; 0x201
 800e500:	f002 fd2e 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800e504:	f00a fe46 	bl	8019194 <HAL_GetTick>
 800e508:	4603      	mov	r3, r0
 800e50a:	4a02      	ldr	r2, [pc, #8]	; (800e514 <ProcessSelfSharing+0x38>)
 800e50c:	6093      	str	r3, [r2, #8]
	}
}
 800e50e:	bf00      	nop
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop
 800e514:	20004c68 	.word	0x20004c68
 800e518:	20000504 	.word	0x20000504
 800e51c:	20004c5c 	.word	0x20004c5c

0800e520 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800e520:	b580      	push	{r7, lr}
 800e522:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800e524:	4b1a      	ldr	r3, [pc, #104]	; (800e590 <ProcessDetectNoValidDataReceive+0x70>)
 800e526:	68db      	ldr	r3, [r3, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d014      	beq.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
 800e52c:	4b18      	ldr	r3, [pc, #96]	; (800e590 <ProcessDetectNoValidDataReceive+0x70>)
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	4618      	mov	r0, r3
 800e532:	f001 ff61 	bl	80103f8 <HAL_Elaps_Ticks>
 800e536:	4602      	mov	r2, r0
 800e538:	4b16      	ldr	r3, [pc, #88]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e53a:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e53e:	429a      	cmp	r2, r3
 800e540:	d909      	bls.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e542:	4b15      	ldr	r3, [pc, #84]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d005      	beq.n	800e556 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800e54a:	4814      	ldr	r0, [pc, #80]	; (800e59c <ProcessDetectNoValidDataReceive+0x7c>)
 800e54c:	f017 fdd4 	bl	80260f8 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e550:	4b11      	ldr	r3, [pc, #68]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e552:	2200      	movs	r2, #0
 800e554:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800e556:	4b10      	ldr	r3, [pc, #64]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e558:	885b      	ldrh	r3, [r3, #2]
 800e55a:	461a      	mov	r2, r3
 800e55c:	4b0d      	ldr	r3, [pc, #52]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e55e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e562:	429a      	cmp	r2, r3
 800e564:	d911      	bls.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
 800e566:	4b0e      	ldr	r3, [pc, #56]	; (800e5a0 <ProcessDetectNoValidDataReceive+0x80>)
 800e568:	885b      	ldrh	r3, [r3, #2]
 800e56a:	461a      	mov	r2, r3
 800e56c:	4b09      	ldr	r3, [pc, #36]	; (800e594 <ProcessDetectNoValidDataReceive+0x74>)
 800e56e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e572:	429a      	cmp	r2, r3
 800e574:	d909      	bls.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800e576:	4b08      	ldr	r3, [pc, #32]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d005      	beq.n	800e58a <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800e57e:	4809      	ldr	r0, [pc, #36]	; (800e5a4 <ProcessDetectNoValidDataReceive+0x84>)
 800e580:	f017 fdba 	bl	80260f8 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800e584:	4b04      	ldr	r3, [pc, #16]	; (800e598 <ProcessDetectNoValidDataReceive+0x78>)
 800e586:	2200      	movs	r2, #0
 800e588:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800e58a:	bf00      	nop
 800e58c:	bd80      	pop	{r7, pc}
 800e58e:	bf00      	nop
 800e590:	20004c68 	.word	0x20004c68
 800e594:	20000504 	.word	0x20000504
 800e598:	20004c5c 	.word	0x20004c5c
 800e59c:	08029f54 	.word	0x08029f54
 800e5a0:	20004c60 	.word	0x20004c60
 800e5a4:	08029f74 	.word	0x08029f74

0800e5a8 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800e5ac:	4b09      	ldr	r3, [pc, #36]	; (800e5d4 <SendRelays2Other+0x2c>)
 800e5ae:	691b      	ldr	r3, [r3, #16]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f001 ff21 	bl	80103f8 <HAL_Elaps_Ticks>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e5bc:	d908      	bls.n	800e5d0 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800e5be:	f240 2007 	movw	r0, #519	; 0x207
 800e5c2:	f002 fccd 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800e5c6:	f00a fde5 	bl	8019194 <HAL_GetTick>
 800e5ca:	4603      	mov	r3, r0
 800e5cc:	4a01      	ldr	r2, [pc, #4]	; (800e5d4 <SendRelays2Other+0x2c>)
 800e5ce:	6113      	str	r3, [r2, #16]

	}
}
 800e5d0:	bf00      	nop
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	20004c68 	.word	0x20004c68

0800e5d8 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800e5dc:	4b16      	ldr	r3, [pc, #88]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e5de:	695b      	ldr	r3, [r3, #20]
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	f001 ff09 	bl	80103f8 <HAL_Elaps_Ticks>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800e5ec:	d922      	bls.n	800e634 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800e5ee:	4b13      	ldr	r3, [pc, #76]	; (800e63c <CheckRelayMisMatch+0x64>)
 800e5f0:	781b      	ldrb	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d10c      	bne.n	800e610 <CheckRelayMisMatch+0x38>
 800e5f6:	4b12      	ldr	r3, [pc, #72]	; (800e640 <CheckRelayMisMatch+0x68>)
 800e5f8:	781b      	ldrb	r3, [r3, #0]
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d108      	bne.n	800e610 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800e5fe:	4a11      	ldr	r2, [pc, #68]	; (800e644 <CheckRelayMisMatch+0x6c>)
 800e600:	4b11      	ldr	r3, [pc, #68]	; (800e648 <CheckRelayMisMatch+0x70>)
 800e602:	4610      	mov	r0, r2
 800e604:	4619      	mov	r1, r3
 800e606:	f44f 7301 	mov.w	r3, #516	; 0x204
 800e60a:	461a      	mov	r2, r3
 800e60c:	f017 fbc8 	bl	8025da0 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800e610:	4b0d      	ldr	r3, [pc, #52]	; (800e648 <CheckRelayMisMatch+0x70>)
 800e612:	885a      	ldrh	r2, [r3, #2]
 800e614:	4b0b      	ldr	r3, [pc, #44]	; (800e644 <CheckRelayMisMatch+0x6c>)
 800e616:	885b      	ldrh	r3, [r3, #2]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d003      	beq.n	800e624 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800e61c:	4b06      	ldr	r3, [pc, #24]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e61e:	2201      	movs	r2, #1
 800e620:	701a      	strb	r2, [r3, #0]
 800e622:	e002      	b.n	800e62a <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = RESET;
 800e624:	4b04      	ldr	r3, [pc, #16]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e626:	2200      	movs	r2, #0
 800e628:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800e62a:	f00a fdb3 	bl	8019194 <HAL_GetTick>
 800e62e:	4603      	mov	r3, r0
 800e630:	4a01      	ldr	r2, [pc, #4]	; (800e638 <CheckRelayMisMatch+0x60>)
 800e632:	6153      	str	r3, [r2, #20]
	}
}
 800e634:	bf00      	nop
 800e636:	bd80      	pop	{r7, pc}
 800e638:	20004c68 	.word	0x20004c68
 800e63c:	20004c5c 	.word	0x20004c5c
 800e640:	20004c60 	.word	0x20004c60
 800e644:	20004e88 	.word	0x20004e88
 800e648:	2000508c 	.word	0x2000508c

0800e64c <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800e650:	4b16      	ldr	r3, [pc, #88]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e652:	785b      	ldrb	r3, [r3, #1]
 800e654:	2b01      	cmp	r3, #1
 800e656:	d101      	bne.n	800e65c <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800e658:	f007 fac0 	bl	8015bdc <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800e65c:	4b13      	ldr	r3, [pc, #76]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	4618      	mov	r0, r3
 800e662:	f001 fec9 	bl	80103f8 <HAL_Elaps_Ticks>
 800e666:	4602      	mov	r2, r0
 800e668:	4b11      	ldr	r3, [pc, #68]	; (800e6b0 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800e66a:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800e66e:	429a      	cmp	r2, r3
 800e670:	d31a      	bcc.n	800e6a8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800e672:	4b0e      	ldr	r3, [pc, #56]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e674:	699a      	ldr	r2, [r3, #24]
 800e676:	4b0f      	ldr	r3, [pc, #60]	; (800e6b4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429a      	cmp	r2, r3
 800e67c:	d014      	beq.n	800e6a8 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800e67e:	4b0b      	ldr	r3, [pc, #44]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e680:	2200      	movs	r2, #0
 800e682:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e686:	699b      	ldr	r3, [r3, #24]
 800e688:	4a0a      	ldr	r2, [pc, #40]	; (800e6b4 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800e68a:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800e68c:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800e68e:	699b      	ldr	r3, [r3, #24]
 800e690:	4618      	mov	r0, r3
 800e692:	f001 feb1 	bl	80103f8 <HAL_Elaps_Ticks>
 800e696:	4603      	mov	r3, r0
 800e698:	4a07      	ldr	r2, [pc, #28]	; (800e6b8 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800e69a:	fba2 2303 	umull	r2, r3, r2, r3
 800e69e:	099b      	lsrs	r3, r3, #6
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4806      	ldr	r0, [pc, #24]	; (800e6bc <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800e6a4:	f017 fc8c 	bl	8025fc0 <iprintf>
		}
	}
}
 800e6a8:	bf00      	nop
 800e6aa:	bd80      	pop	{r7, pc}
 800e6ac:	20004c68 	.word	0x20004c68
 800e6b0:	20000504 	.word	0x20000504
 800e6b4:	20006380 	.word	0x20006380
 800e6b8:	10624dd3 	.word	0x10624dd3
 800e6bc:	08029f98 	.word	0x08029f98

0800e6c0 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	60f8      	str	r0, [r7, #12]
 800e6c8:	60b9      	str	r1, [r7, #8]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	460b      	mov	r3, r1
 800e6d0:	80fb      	strh	r3, [r7, #6]
 800e6d2:	4613      	mov	r3, r2
 800e6d4:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800e6d6:	484d      	ldr	r0, [pc, #308]	; (800e80c <Print_Siemens_MSG+0x14c>)
 800e6d8:	f017 fc72 	bl	8025fc0 <iprintf>
	if(TX_RX == TX)
 800e6dc:	797b      	ldrb	r3, [r7, #5]
 800e6de:	2b01      	cmp	r3, #1
 800e6e0:	d103      	bne.n	800e6ea <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800e6e2:	484b      	ldr	r0, [pc, #300]	; (800e810 <Print_Siemens_MSG+0x150>)
 800e6e4:	f017 fc6c 	bl	8025fc0 <iprintf>
 800e6e8:	e005      	b.n	800e6f6 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800e6ea:	797b      	ldrb	r3, [r7, #5]
 800e6ec:	2b02      	cmp	r3, #2
 800e6ee:	d102      	bne.n	800e6f6 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800e6f0:	4848      	ldr	r0, [pc, #288]	; (800e814 <Print_Siemens_MSG+0x154>)
 800e6f2:	f017 fc65 	bl	8025fc0 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	781b      	ldrb	r3, [r3, #0]
 800e6fa:	4619      	mov	r1, r3
 800e6fc:	4846      	ldr	r0, [pc, #280]	; (800e818 <Print_Siemens_MSG+0x158>)
 800e6fe:	f017 fc5f 	bl	8025fc0 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	689b      	ldr	r3, [r3, #8]
 800e706:	4619      	mov	r1, r3
 800e708:	4844      	ldr	r0, [pc, #272]	; (800e81c <Print_Siemens_MSG+0x15c>)
 800e70a:	f017 fc59 	bl	8025fc0 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	7b1b      	ldrb	r3, [r3, #12]
 800e712:	4619      	mov	r1, r3
 800e714:	4842      	ldr	r0, [pc, #264]	; (800e820 <Print_Siemens_MSG+0x160>)
 800e716:	f017 fc53 	bl	8025fc0 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	695b      	ldr	r3, [r3, #20]
 800e71e:	4619      	mov	r1, r3
 800e720:	4840      	ldr	r0, [pc, #256]	; (800e824 <Print_Siemens_MSG+0x164>)
 800e722:	f017 fc4d 	bl	8025fc0 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	7e1b      	ldrb	r3, [r3, #24]
 800e72a:	4619      	mov	r1, r3
 800e72c:	483e      	ldr	r0, [pc, #248]	; (800e828 <Print_Siemens_MSG+0x168>)
 800e72e:	f017 fc47 	bl	8025fc0 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	7e5b      	ldrb	r3, [r3, #25]
 800e736:	4619      	mov	r1, r3
 800e738:	483c      	ldr	r0, [pc, #240]	; (800e82c <Print_Siemens_MSG+0x16c>)
 800e73a:	f017 fc41 	bl	8025fc0 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	7e9b      	ldrb	r3, [r3, #26]
 800e742:	4619      	mov	r1, r3
 800e744:	483a      	ldr	r0, [pc, #232]	; (800e830 <Print_Siemens_MSG+0x170>)
 800e746:	f017 fc3b 	bl	8025fc0 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	7edb      	ldrb	r3, [r3, #27]
 800e74e:	4619      	mov	r1, r3
 800e750:	4838      	ldr	r0, [pc, #224]	; (800e834 <Print_Siemens_MSG+0x174>)
 800e752:	f017 fc35 	bl	8025fc0 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	69db      	ldr	r3, [r3, #28]
 800e75a:	4619      	mov	r1, r3
 800e75c:	4836      	ldr	r0, [pc, #216]	; (800e838 <Print_Siemens_MSG+0x178>)
 800e75e:	f017 fc2f 	bl	8025fc0 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	6a1b      	ldr	r3, [r3, #32]
 800e766:	4619      	mov	r1, r3
 800e768:	4834      	ldr	r0, [pc, #208]	; (800e83c <Print_Siemens_MSG+0x17c>)
 800e76a:	f017 fc29 	bl	8025fc0 <iprintf>
	if(TX_RX == RX)
 800e76e:	797b      	ldrb	r3, [r7, #5]
 800e770:	2b02      	cmp	r3, #2
 800e772:	d122      	bne.n	800e7ba <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e778:	4619      	mov	r1, r3
 800e77a:	4831      	ldr	r0, [pc, #196]	; (800e840 <Print_Siemens_MSG+0x180>)
 800e77c:	f017 fc20 	bl	8025fc0 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e780:	2300      	movs	r3, #0
 800e782:	82fb      	strh	r3, [r7, #22]
 800e784:	e00b      	b.n	800e79e <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800e786:	8afb      	ldrh	r3, [r7, #22]
 800e788:	68fa      	ldr	r2, [r7, #12]
 800e78a:	4413      	add	r3, r2
 800e78c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800e790:	4619      	mov	r1, r3
 800e792:	482c      	ldr	r0, [pc, #176]	; (800e844 <Print_Siemens_MSG+0x184>)
 800e794:	f017 fc14 	bl	8025fc0 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800e798:	8afb      	ldrh	r3, [r7, #22]
 800e79a:	3301      	adds	r3, #1
 800e79c:	82fb      	strh	r3, [r7, #22]
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e7a2:	8afa      	ldrh	r2, [r7, #22]
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d3ee      	bcc.n	800e786 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800e7a8:	200a      	movs	r0, #10
 800e7aa:	f017 fc21 	bl	8025ff0 <putchar>

		if(Debug_flag == 2)
 800e7ae:	4b26      	ldr	r3, [pc, #152]	; (800e848 <Print_Siemens_MSG+0x188>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d101      	bne.n	800e7ba <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800e7b6:	f000 ff65 	bl	800f684 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800e7ba:	4b23      	ldr	r3, [pc, #140]	; (800e848 <Print_Siemens_MSG+0x188>)
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	2b01      	cmp	r3, #1
 800e7c0:	d120      	bne.n	800e804 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	82bb      	strh	r3, [r7, #20]
 800e7c6:	e016      	b.n	800e7f6 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800e7c8:	8abb      	ldrh	r3, [r7, #20]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d008      	beq.n	800e7e0 <Print_Siemens_MSG+0x120>
 800e7ce:	8abb      	ldrh	r3, [r7, #20]
 800e7d0:	f003 031f 	and.w	r3, r3, #31
 800e7d4:	b29b      	uxth	r3, r3
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d102      	bne.n	800e7e0 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800e7da:	200a      	movs	r0, #10
 800e7dc:	f017 fc08 	bl	8025ff0 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800e7e0:	8abb      	ldrh	r3, [r7, #20]
 800e7e2:	68ba      	ldr	r2, [r7, #8]
 800e7e4:	4413      	add	r3, r2
 800e7e6:	781b      	ldrb	r3, [r3, #0]
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4816      	ldr	r0, [pc, #88]	; (800e844 <Print_Siemens_MSG+0x184>)
 800e7ec:	f017 fbe8 	bl	8025fc0 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800e7f0:	8abb      	ldrh	r3, [r7, #20]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	82bb      	strh	r3, [r7, #20]
 800e7f6:	8aba      	ldrh	r2, [r7, #20]
 800e7f8:	88fb      	ldrh	r3, [r7, #6]
 800e7fa:	429a      	cmp	r2, r3
 800e7fc:	d3e4      	bcc.n	800e7c8 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800e7fe:	200a      	movs	r0, #10
 800e800:	f017 fbf6 	bl	8025ff0 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800e804:	bf00      	nop
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	08029fc8 	.word	0x08029fc8
 800e810:	08029fd0 	.word	0x08029fd0
 800e814:	08029fd4 	.word	0x08029fd4
 800e818:	08029fd8 	.word	0x08029fd8
 800e81c:	08029fe0 	.word	0x08029fe0
 800e820:	08029fe8 	.word	0x08029fe8
 800e824:	08029ff0 	.word	0x08029ff0
 800e828:	08029ff8 	.word	0x08029ff8
 800e82c:	0802a004 	.word	0x0802a004
 800e830:	0802a00c 	.word	0x0802a00c
 800e834:	0802a014 	.word	0x0802a014
 800e838:	0802a01c 	.word	0x0802a01c
 800e83c:	0802a028 	.word	0x0802a028
 800e840:	0802a034 	.word	0x0802a034
 800e844:	08029f4c 	.word	0x08029f4c
 800e848:	20000bbb 	.word	0x20000bbb

0800e84c <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b09a      	sub	sp, #104	; 0x68
 800e850:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800e852:	2300      	movs	r3, #0
 800e854:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800e858:	2300      	movs	r3, #0
 800e85a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800e85e:	2300      	movs	r3, #0
 800e860:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800e864:	2300      	movs	r3, #0
 800e866:	603b      	str	r3, [r7, #0]
 800e868:	1d3b      	adds	r3, r7, #4
 800e86a:	2260      	movs	r2, #96	; 0x60
 800e86c:	2100      	movs	r1, #0
 800e86e:	4618      	mov	r0, r3
 800e870:	f017 fabe 	bl	8025df0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800e874:	4bb9      	ldr	r3, [pc, #740]	; (800eb5c <Chech_forSiemensCMD+0x310>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	4618      	mov	r0, r3
 800e87a:	f001 fdbd 	bl	80103f8 <HAL_Elaps_Ticks>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b09      	cmp	r3, #9
 800e882:	f240 81ad 	bls.w	800ebe0 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800e886:	e010      	b.n	800e8aa <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800e888:	2000      	movs	r0, #0
 800e88a:	f00a f95b 	bl	8018b44 <Com_Get_Byte>
 800e88e:	4603      	mov	r3, r0
 800e890:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800e894:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e898:	1c5a      	adds	r2, r3, #1
 800e89a:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800e89e:	3368      	adds	r3, #104	; 0x68
 800e8a0:	443b      	add	r3, r7
 800e8a2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800e8a6:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800e8aa:	2000      	movs	r0, #0
 800e8ac:	f00a f90a 	bl	8018ac4 <Com_DataReady>
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d1e8      	bne.n	800e888 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800e8b6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	f000 8144 	beq.w	800eb48 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800e8c0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e8c4:	3368      	adds	r3, #104	; 0x68
 800e8c6:	443b      	add	r3, r7
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800e8ce:	463b      	mov	r3, r7
 800e8d0:	4619      	mov	r1, r3
 800e8d2:	48a3      	ldr	r0, [pc, #652]	; (800eb60 <Chech_forSiemensCMD+0x314>)
 800e8d4:	f017 fb74 	bl	8025fc0 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800e8d8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800e8dc:	463b      	mov	r3, r7
 800e8de:	4611      	mov	r1, r2
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f000 faf3 	bl	800eecc <Is_SiemensCommand_Valid>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b0c      	cmp	r3, #12
 800e8ea:	f200 8129 	bhi.w	800eb40 <Chech_forSiemensCMD+0x2f4>
 800e8ee:	a201      	add	r2, pc, #4	; (adr r2, 800e8f4 <Chech_forSiemensCMD+0xa8>)
 800e8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8f4:	0800e929 	.word	0x0800e929
 800e8f8:	0800e937 	.word	0x0800e937
 800e8fc:	0800e99b 	.word	0x0800e99b
 800e900:	0800e9bd 	.word	0x0800e9bd
 800e904:	0800e9e5 	.word	0x0800e9e5
 800e908:	0800ea0d 	.word	0x0800ea0d
 800e90c:	0800ea35 	.word	0x0800ea35
 800e910:	0800ea5d 	.word	0x0800ea5d
 800e914:	0800ea85 	.word	0x0800ea85
 800e918:	0800eaad 	.word	0x0800eaad
 800e91c:	0800ead5 	.word	0x0800ead5
 800e920:	0800eafd 	.word	0x0800eafd
 800e924:	0800eb25 	.word	0x0800eb25
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800e928:	4b8e      	ldr	r3, [pc, #568]	; (800eb64 <Chech_forSiemensCMD+0x318>)
 800e92a:	2201      	movs	r2, #1
 800e92c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800e92e:	488e      	ldr	r0, [pc, #568]	; (800eb68 <Chech_forSiemensCMD+0x31c>)
 800e930:	f017 fbe2 	bl	80260f8 <puts>
				break;
 800e934:	e109      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800e936:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e93a:	3b01      	subs	r3, #1
 800e93c:	3368      	adds	r3, #104	; 0x68
 800e93e:	443b      	add	r3, r7
 800e940:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e944:	3b30      	subs	r3, #48	; 0x30
 800e946:	461a      	mov	r2, r3
 800e948:	4988      	ldr	r1, [pc, #544]	; (800eb6c <Chech_forSiemensCMD+0x320>)
 800e94a:	4889      	ldr	r0, [pc, #548]	; (800eb70 <Chech_forSiemensCMD+0x324>)
 800e94c:	f017 fb38 	bl	8025fc0 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800e950:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e954:	3b01      	subs	r3, #1
 800e956:	3368      	adds	r3, #104	; 0x68
 800e958:	443b      	add	r3, r7
 800e95a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e95e:	2b2f      	cmp	r3, #47	; 0x2f
 800e960:	d914      	bls.n	800e98c <Chech_forSiemensCMD+0x140>
 800e962:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e966:	3b01      	subs	r3, #1
 800e968:	3368      	adds	r3, #104	; 0x68
 800e96a:	443b      	add	r3, r7
 800e96c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e970:	2b32      	cmp	r3, #50	; 0x32
 800e972:	d80b      	bhi.n	800e98c <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800e974:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800e978:	3b01      	subs	r3, #1
 800e97a:	3368      	adds	r3, #104	; 0x68
 800e97c:	443b      	add	r3, r7
 800e97e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800e982:	3b30      	subs	r3, #48	; 0x30
 800e984:	b2da      	uxtb	r2, r3
 800e986:	4b7b      	ldr	r3, [pc, #492]	; (800eb74 <Chech_forSiemensCMD+0x328>)
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	e002      	b.n	800e992 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800e98c:	487a      	ldr	r0, [pc, #488]	; (800eb78 <Chech_forSiemensCMD+0x32c>)
 800e98e:	f017 fbb3 	bl	80260f8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800e992:	2301      	movs	r3, #1
 800e994:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e998:	e0d7      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800e99a:	4978      	ldr	r1, [pc, #480]	; (800eb7c <Chech_forSiemensCMD+0x330>)
 800e99c:	4878      	ldr	r0, [pc, #480]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e99e:	f017 fb0f 	bl	8025fc0 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800e9a2:	4878      	ldr	r0, [pc, #480]	; (800eb84 <Chech_forSiemensCMD+0x338>)
 800e9a4:	f017 fba8 	bl	80260f8 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9a8:	4b77      	ldr	r3, [pc, #476]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f043 0301 	orr.w	r3, r3, #1
 800e9b0:	4a75      	ldr	r2, [pc, #468]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9b2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e9ba:	e0c6      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800e9bc:	4973      	ldr	r1, [pc, #460]	; (800eb8c <Chech_forSiemensCMD+0x340>)
 800e9be:	4870      	ldr	r0, [pc, #448]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e9c0:	f017 fafe 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800e9c4:	4872      	ldr	r0, [pc, #456]	; (800eb90 <Chech_forSiemensCMD+0x344>)
 800e9c6:	f017 fb97 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e9ca:	4b6f      	ldr	r3, [pc, #444]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9d0:	4b6d      	ldr	r3, [pc, #436]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f043 0302 	orr.w	r3, r3, #2
 800e9d8:	4a6b      	ldr	r2, [pc, #428]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9da:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800e9e2:	e0b2      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800e9e4:	496b      	ldr	r1, [pc, #428]	; (800eb94 <Chech_forSiemensCMD+0x348>)
 800e9e6:	4866      	ldr	r0, [pc, #408]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800e9e8:	f017 faea 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800e9ec:	486a      	ldr	r0, [pc, #424]	; (800eb98 <Chech_forSiemensCMD+0x34c>)
 800e9ee:	f017 fb83 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800e9f2:	4b65      	ldr	r3, [pc, #404]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800e9f8:	4b63      	ldr	r3, [pc, #396]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f043 0304 	orr.w	r3, r3, #4
 800ea00:	4a61      	ldr	r2, [pc, #388]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea02:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea04:	2301      	movs	r3, #1
 800ea06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea0a:	e09e      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800ea0c:	4963      	ldr	r1, [pc, #396]	; (800eb9c <Chech_forSiemensCMD+0x350>)
 800ea0e:	485c      	ldr	r0, [pc, #368]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea10:	f017 fad6 	bl	8025fc0 <iprintf>
				printf("INVALID_DES_PORT\n");
 800ea14:	4862      	ldr	r0, [pc, #392]	; (800eba0 <Chech_forSiemensCMD+0x354>)
 800ea16:	f017 fb6f 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea1a:	4b5b      	ldr	r3, [pc, #364]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea20:	4b59      	ldr	r3, [pc, #356]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f043 0308 	orr.w	r3, r3, #8
 800ea28:	4a57      	ldr	r2, [pc, #348]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea2a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea32:	e08a      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800ea34:	495b      	ldr	r1, [pc, #364]	; (800eba4 <Chech_forSiemensCMD+0x358>)
 800ea36:	4852      	ldr	r0, [pc, #328]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea38:	f017 fac2 	bl	8025fc0 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800ea3c:	485a      	ldr	r0, [pc, #360]	; (800eba8 <Chech_forSiemensCMD+0x35c>)
 800ea3e:	f017 fb5b 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea42:	4b51      	ldr	r3, [pc, #324]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea48:	4b4f      	ldr	r3, [pc, #316]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f043 0310 	orr.w	r3, r3, #16
 800ea50:	4a4d      	ldr	r2, [pc, #308]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea52:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea54:	2301      	movs	r3, #1
 800ea56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea5a:	e076      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800ea5c:	4953      	ldr	r1, [pc, #332]	; (800ebac <Chech_forSiemensCMD+0x360>)
 800ea5e:	4848      	ldr	r0, [pc, #288]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ea60:	f017 faae 	bl	8025fc0 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800ea64:	4852      	ldr	r0, [pc, #328]	; (800ebb0 <Chech_forSiemensCMD+0x364>)
 800ea66:	f017 fb47 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea6a:	4b47      	ldr	r3, [pc, #284]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea70:	4b45      	ldr	r3, [pc, #276]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	f043 0320 	orr.w	r3, r3, #32
 800ea78:	4a43      	ldr	r2, [pc, #268]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea7a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ea82:	e062      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800ea84:	494b      	ldr	r1, [pc, #300]	; (800ebb4 <Chech_forSiemensCMD+0x368>)
 800ea86:	484c      	ldr	r0, [pc, #304]	; (800ebb8 <Chech_forSiemensCMD+0x36c>)
 800ea88:	f017 fa9a 	bl	8025fc0 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800ea8c:	484b      	ldr	r0, [pc, #300]	; (800ebbc <Chech_forSiemensCMD+0x370>)
 800ea8e:	f017 fb33 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ea92:	4b3d      	ldr	r3, [pc, #244]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea94:	2200      	movs	r2, #0
 800ea96:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ea98:	4b3b      	ldr	r3, [pc, #236]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eaa0:	4a39      	ldr	r2, [pc, #228]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaa2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eaaa:	e04e      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800eaac:	4944      	ldr	r1, [pc, #272]	; (800ebc0 <Chech_forSiemensCMD+0x374>)
 800eaae:	4834      	ldr	r0, [pc, #208]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eab0:	f017 fa86 	bl	8025fc0 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800eab4:	4843      	ldr	r0, [pc, #268]	; (800ebc4 <Chech_forSiemensCMD+0x378>)
 800eab6:	f017 fb1f 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eaba:	4b33      	ldr	r3, [pc, #204]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eabc:	2200      	movs	r2, #0
 800eabe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eac0:	4b31      	ldr	r3, [pc, #196]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800eac8:	4a2f      	ldr	r2, [pc, #188]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaca:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eacc:	2301      	movs	r3, #1
 800eace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ead2:	e03a      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800ead4:	493c      	ldr	r1, [pc, #240]	; (800ebc8 <Chech_forSiemensCMD+0x37c>)
 800ead6:	482a      	ldr	r0, [pc, #168]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800ead8:	f017 fa72 	bl	8025fc0 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800eadc:	483b      	ldr	r0, [pc, #236]	; (800ebcc <Chech_forSiemensCMD+0x380>)
 800eade:	f017 fb0b 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eae2:	4b29      	ldr	r3, [pc, #164]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eae8:	4b27      	ldr	r3, [pc, #156]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800eaf0:	4a25      	ldr	r2, [pc, #148]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eaf2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eaf4:	2301      	movs	r3, #1
 800eaf6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eafa:	e026      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800eafc:	4934      	ldr	r1, [pc, #208]	; (800ebd0 <Chech_forSiemensCMD+0x384>)
 800eafe:	4820      	ldr	r0, [pc, #128]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eb00:	f017 fa5e 	bl	8025fc0 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800eb04:	4833      	ldr	r0, [pc, #204]	; (800ebd4 <Chech_forSiemensCMD+0x388>)
 800eb06:	f017 faf7 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb0a:	4b1f      	ldr	r3, [pc, #124]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800eb10:	4b1d      	ldr	r3, [pc, #116]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800eb18:	4a1b      	ldr	r2, [pc, #108]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb1a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb1c:	2301      	movs	r3, #1
 800eb1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb22:	e012      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800eb24:	492c      	ldr	r1, [pc, #176]	; (800ebd8 <Chech_forSiemensCMD+0x38c>)
 800eb26:	4816      	ldr	r0, [pc, #88]	; (800eb80 <Chech_forSiemensCMD+0x334>)
 800eb28:	f017 fa4a 	bl	8025fc0 <iprintf>
				printf("CLEAR ALL\n");
 800eb2c:	482b      	ldr	r0, [pc, #172]	; (800ebdc <Chech_forSiemensCMD+0x390>)
 800eb2e:	f017 fae3 	bl	80260f8 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800eb32:	4b15      	ldr	r3, [pc, #84]	; (800eb88 <Chech_forSiemensCMD+0x33c>)
 800eb34:	2200      	movs	r2, #0
 800eb36:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800eb3e:	e004      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800eb40:	480d      	ldr	r0, [pc, #52]	; (800eb78 <Chech_forSiemensCMD+0x32c>)
 800eb42:	f017 fad9 	bl	80260f8 <puts>
 800eb46:	e000      	b.n	800eb4a <Chech_forSiemensCMD+0x2fe>
			}
		}
 800eb48:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800eb4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d147      	bne.n	800ebe2 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800eb52:	f240 2005 	movw	r0, #517	; 0x205
 800eb56:	f002 fa03 	bl	8010f60 <TransmitCanPkt>
 800eb5a:	e042      	b.n	800ebe2 <Chech_forSiemensCMD+0x396>
 800eb5c:	2000bfdc 	.word	0x2000bfdc
 800eb60:	0802a03c 	.word	0x0802a03c
 800eb64:	20000bba 	.word	0x20000bba
 800eb68:	0802a054 	.word	0x0802a054
 800eb6c:	20005fc6 	.word	0x20005fc6
 800eb70:	0802a094 	.word	0x0802a094
 800eb74:	20000bbb 	.word	0x20000bbb
 800eb78:	0802a0a8 	.word	0x0802a0a8
 800eb7c:	20005ff8 	.word	0x20005ff8
 800eb80:	0802a0c4 	.word	0x0802a0c4
 800eb84:	0802a0d4 	.word	0x0802a0d4
 800eb88:	20004c54 	.word	0x20004c54
 800eb8c:	2000602a 	.word	0x2000602a
 800eb90:	0802a0ec 	.word	0x0802a0ec
 800eb94:	2000605c 	.word	0x2000605c
 800eb98:	0802a104 	.word	0x0802a104
 800eb9c:	2000608e 	.word	0x2000608e
 800eba0:	0802a118 	.word	0x0802a118
 800eba4:	200060c0 	.word	0x200060c0
 800eba8:	0802a12c 	.word	0x0802a12c
 800ebac:	200060f2 	.word	0x200060f2
 800ebb0:	0802a140 	.word	0x0802a140
 800ebb4:	20006124 	.word	0x20006124
 800ebb8:	0802a15c 	.word	0x0802a15c
 800ebbc:	0802a174 	.word	0x0802a174
 800ebc0:	20006156 	.word	0x20006156
 800ebc4:	0802a188 	.word	0x0802a188
 800ebc8:	20006188 	.word	0x20006188
 800ebcc:	0802a1a0 	.word	0x0802a1a0
 800ebd0:	200061ba 	.word	0x200061ba
 800ebd4:	0802a1c0 	.word	0x0802a1c0
 800ebd8:	200061ec 	.word	0x200061ec
 800ebdc:	0802a1e0 	.word	0x0802a1e0
		return;
 800ebe0:	bf00      	nop
		}
	}
}
 800ebe2:	3768      	adds	r7, #104	; 0x68
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}

0800ebe8 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800ebe8:	b4b0      	push	{r4, r5, r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800ebee:	2300      	movs	r3, #0
 800ebf0:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800ebf2:	79fb      	ldrb	r3, [r7, #7]
 800ebf4:	4aa6      	ldr	r2, [pc, #664]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ebf6:	2132      	movs	r1, #50	; 0x32
 800ebf8:	fb01 f303 	mul.w	r3, r1, r3
 800ebfc:	4413      	add	r3, r2
 800ebfe:	2224      	movs	r2, #36	; 0x24
 800ec00:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800ec02:	79fb      	ldrb	r3, [r7, #7]
 800ec04:	4aa2      	ldr	r2, [pc, #648]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec06:	2132      	movs	r1, #50	; 0x32
 800ec08:	fb01 f303 	mul.w	r3, r1, r3
 800ec0c:	4413      	add	r3, r2
 800ec0e:	3301      	adds	r3, #1
 800ec10:	2201      	movs	r2, #1
 800ec12:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800ec14:	79fb      	ldrb	r3, [r7, #7]
 800ec16:	4a9e      	ldr	r2, [pc, #632]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec18:	2132      	movs	r1, #50	; 0x32
 800ec1a:	fb01 f303 	mul.w	r3, r1, r3
 800ec1e:	4413      	add	r3, r2
 800ec20:	3302      	adds	r3, #2
 800ec22:	2230      	movs	r2, #48	; 0x30
 800ec24:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800ec26:	79fb      	ldrb	r3, [r7, #7]
 800ec28:	4a99      	ldr	r2, [pc, #612]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec2a:	2132      	movs	r1, #50	; 0x32
 800ec2c:	fb01 f303 	mul.w	r3, r1, r3
 800ec30:	4413      	add	r3, r2
 800ec32:	3303      	adds	r3, #3
 800ec34:	2240      	movs	r2, #64	; 0x40
 800ec36:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800ec38:	79fb      	ldrb	r3, [r7, #7]
 800ec3a:	4a95      	ldr	r2, [pc, #596]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec3c:	2132      	movs	r1, #50	; 0x32
 800ec3e:	fb01 f303 	mul.w	r3, r1, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	3304      	adds	r3, #4
 800ec46:	22c0      	movs	r2, #192	; 0xc0
 800ec48:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800ec4a:	79fb      	ldrb	r3, [r7, #7]
 800ec4c:	4a90      	ldr	r2, [pc, #576]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec4e:	2132      	movs	r1, #50	; 0x32
 800ec50:	fb01 f303 	mul.w	r3, r1, r3
 800ec54:	4413      	add	r3, r2
 800ec56:	3305      	adds	r3, #5
 800ec58:	224e      	movs	r2, #78	; 0x4e
 800ec5a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800ec5c:	79fb      	ldrb	r3, [r7, #7]
 800ec5e:	4a8c      	ldr	r2, [pc, #560]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec60:	2132      	movs	r1, #50	; 0x32
 800ec62:	fb01 f303 	mul.w	r3, r1, r3
 800ec66:	4413      	add	r3, r2
 800ec68:	3306      	adds	r3, #6
 800ec6a:	2226      	movs	r2, #38	; 0x26
 800ec6c:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	3301      	adds	r3, #1
 800ec72:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800ec74:	79fb      	ldrb	r3, [r7, #7]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	71fa      	strb	r2, [r7, #7]
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	2332      	movs	r3, #50	; 0x32
 800ec7e:	fb02 f303 	mul.w	r3, r2, r3
 800ec82:	4a83      	ldr	r2, [pc, #524]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ec84:	4413      	add	r3, r2
 800ec86:	4983      	ldr	r1, [pc, #524]	; (800ee94 <Update_SiemensCommands+0x2ac>)
 800ec88:	461a      	mov	r2, r3
 800ec8a:	460b      	mov	r3, r1
 800ec8c:	cb03      	ldmia	r3!, {r0, r1}
 800ec8e:	6010      	str	r0, [r2, #0]
 800ec90:	6051      	str	r1, [r2, #4]
 800ec92:	8819      	ldrh	r1, [r3, #0]
 800ec94:	789b      	ldrb	r3, [r3, #2]
 800ec96:	8111      	strh	r1, [r2, #8]
 800ec98:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800ec9a:	79fb      	ldrb	r3, [r7, #7]
 800ec9c:	1c5a      	adds	r2, r3, #1
 800ec9e:	71fa      	strb	r2, [r7, #7]
 800eca0:	461a      	mov	r2, r3
 800eca2:	2332      	movs	r3, #50	; 0x32
 800eca4:	fb02 f303 	mul.w	r3, r2, r3
 800eca8:	4a79      	ldr	r2, [pc, #484]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecaa:	4413      	add	r3, r2
 800ecac:	4a7a      	ldr	r2, [pc, #488]	; (800ee98 <Update_SiemensCommands+0x2b0>)
 800ecae:	461d      	mov	r5, r3
 800ecb0:	4614      	mov	r4, r2
 800ecb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecb4:	6028      	str	r0, [r5, #0]
 800ecb6:	6069      	str	r1, [r5, #4]
 800ecb8:	60aa      	str	r2, [r5, #8]
 800ecba:	60eb      	str	r3, [r5, #12]
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	6128      	str	r0, [r5, #16]
 800ecc0:	7923      	ldrb	r3, [r4, #4]
 800ecc2:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800ecc4:	79fb      	ldrb	r3, [r7, #7]
 800ecc6:	1c5a      	adds	r2, r3, #1
 800ecc8:	71fa      	strb	r2, [r7, #7]
 800ecca:	461a      	mov	r2, r3
 800eccc:	2332      	movs	r3, #50	; 0x32
 800ecce:	fb02 f303 	mul.w	r3, r2, r3
 800ecd2:	4a6f      	ldr	r2, [pc, #444]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecd4:	4413      	add	r3, r2
 800ecd6:	4a71      	ldr	r2, [pc, #452]	; (800ee9c <Update_SiemensCommands+0x2b4>)
 800ecd8:	461d      	mov	r5, r3
 800ecda:	4614      	mov	r4, r2
 800ecdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ecde:	6028      	str	r0, [r5, #0]
 800ece0:	6069      	str	r1, [r5, #4]
 800ece2:	60aa      	str	r2, [r5, #8]
 800ece4:	60eb      	str	r3, [r5, #12]
 800ece6:	6820      	ldr	r0, [r4, #0]
 800ece8:	6128      	str	r0, [r5, #16]
 800ecea:	7923      	ldrb	r3, [r4, #4]
 800ecec:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800ecee:	79fb      	ldrb	r3, [r7, #7]
 800ecf0:	1c5a      	adds	r2, r3, #1
 800ecf2:	71fa      	strb	r2, [r7, #7]
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	2332      	movs	r3, #50	; 0x32
 800ecf8:	fb02 f303 	mul.w	r3, r2, r3
 800ecfc:	4a64      	ldr	r2, [pc, #400]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ecfe:	4413      	add	r3, r2
 800ed00:	4a67      	ldr	r2, [pc, #412]	; (800eea0 <Update_SiemensCommands+0x2b8>)
 800ed02:	461d      	mov	r5, r3
 800ed04:	4614      	mov	r4, r2
 800ed06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed08:	6028      	str	r0, [r5, #0]
 800ed0a:	6069      	str	r1, [r5, #4]
 800ed0c:	60aa      	str	r2, [r5, #8]
 800ed0e:	60eb      	str	r3, [r5, #12]
 800ed10:	7823      	ldrb	r3, [r4, #0]
 800ed12:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800ed14:	79fb      	ldrb	r3, [r7, #7]
 800ed16:	1c5a      	adds	r2, r3, #1
 800ed18:	71fa      	strb	r2, [r7, #7]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	2332      	movs	r3, #50	; 0x32
 800ed1e:	fb02 f303 	mul.w	r3, r2, r3
 800ed22:	4a5b      	ldr	r2, [pc, #364]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed24:	4413      	add	r3, r2
 800ed26:	4a5f      	ldr	r2, [pc, #380]	; (800eea4 <Update_SiemensCommands+0x2bc>)
 800ed28:	461d      	mov	r5, r3
 800ed2a:	4614      	mov	r4, r2
 800ed2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed2e:	6028      	str	r0, [r5, #0]
 800ed30:	6069      	str	r1, [r5, #4]
 800ed32:	60aa      	str	r2, [r5, #8]
 800ed34:	60eb      	str	r3, [r5, #12]
 800ed36:	7823      	ldrb	r3, [r4, #0]
 800ed38:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	1c5a      	adds	r2, r3, #1
 800ed3e:	71fa      	strb	r2, [r7, #7]
 800ed40:	461a      	mov	r2, r3
 800ed42:	2332      	movs	r3, #50	; 0x32
 800ed44:	fb02 f303 	mul.w	r3, r2, r3
 800ed48:	4a51      	ldr	r2, [pc, #324]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed4a:	4413      	add	r3, r2
 800ed4c:	4a56      	ldr	r2, [pc, #344]	; (800eea8 <Update_SiemensCommands+0x2c0>)
 800ed4e:	461d      	mov	r5, r3
 800ed50:	4614      	mov	r4, r2
 800ed52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed54:	6028      	str	r0, [r5, #0]
 800ed56:	6069      	str	r1, [r5, #4]
 800ed58:	60aa      	str	r2, [r5, #8]
 800ed5a:	60eb      	str	r3, [r5, #12]
 800ed5c:	7823      	ldrb	r3, [r4, #0]
 800ed5e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800ed60:	79fb      	ldrb	r3, [r7, #7]
 800ed62:	1c5a      	adds	r2, r3, #1
 800ed64:	71fa      	strb	r2, [r7, #7]
 800ed66:	461a      	mov	r2, r3
 800ed68:	2332      	movs	r3, #50	; 0x32
 800ed6a:	fb02 f303 	mul.w	r3, r2, r3
 800ed6e:	4a48      	ldr	r2, [pc, #288]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ed70:	4413      	add	r3, r2
 800ed72:	4a4e      	ldr	r2, [pc, #312]	; (800eeac <Update_SiemensCommands+0x2c4>)
 800ed74:	461d      	mov	r5, r3
 800ed76:	4614      	mov	r4, r2
 800ed78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed7a:	6028      	str	r0, [r5, #0]
 800ed7c:	6069      	str	r1, [r5, #4]
 800ed7e:	60aa      	str	r2, [r5, #8]
 800ed80:	60eb      	str	r3, [r5, #12]
 800ed82:	cc03      	ldmia	r4!, {r0, r1}
 800ed84:	6128      	str	r0, [r5, #16]
 800ed86:	6169      	str	r1, [r5, #20]
 800ed88:	8823      	ldrh	r3, [r4, #0]
 800ed8a:	78a2      	ldrb	r2, [r4, #2]
 800ed8c:	832b      	strh	r3, [r5, #24]
 800ed8e:	4613      	mov	r3, r2
 800ed90:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800ed92:	79fb      	ldrb	r3, [r7, #7]
 800ed94:	1c5a      	adds	r2, r3, #1
 800ed96:	71fa      	strb	r2, [r7, #7]
 800ed98:	461a      	mov	r2, r3
 800ed9a:	2332      	movs	r3, #50	; 0x32
 800ed9c:	fb02 f303 	mul.w	r3, r2, r3
 800eda0:	4a3b      	ldr	r2, [pc, #236]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800eda2:	4413      	add	r3, r2
 800eda4:	4a42      	ldr	r2, [pc, #264]	; (800eeb0 <Update_SiemensCommands+0x2c8>)
 800eda6:	461d      	mov	r5, r3
 800eda8:	4614      	mov	r4, r2
 800edaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edac:	6028      	str	r0, [r5, #0]
 800edae:	6069      	str	r1, [r5, #4]
 800edb0:	60aa      	str	r2, [r5, #8]
 800edb2:	60eb      	str	r3, [r5, #12]
 800edb4:	8823      	ldrh	r3, [r4, #0]
 800edb6:	78a2      	ldrb	r2, [r4, #2]
 800edb8:	822b      	strh	r3, [r5, #16]
 800edba:	4613      	mov	r3, r2
 800edbc:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	1c5a      	adds	r2, r3, #1
 800edc2:	71fa      	strb	r2, [r7, #7]
 800edc4:	461a      	mov	r2, r3
 800edc6:	2332      	movs	r3, #50	; 0x32
 800edc8:	fb02 f303 	mul.w	r3, r2, r3
 800edcc:	4a30      	ldr	r2, [pc, #192]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800edce:	4413      	add	r3, r2
 800edd0:	4a38      	ldr	r2, [pc, #224]	; (800eeb4 <Update_SiemensCommands+0x2cc>)
 800edd2:	461d      	mov	r5, r3
 800edd4:	4614      	mov	r4, r2
 800edd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800edd8:	6028      	str	r0, [r5, #0]
 800edda:	6069      	str	r1, [r5, #4]
 800eddc:	60aa      	str	r2, [r5, #8]
 800edde:	60eb      	str	r3, [r5, #12]
 800ede0:	cc03      	ldmia	r4!, {r0, r1}
 800ede2:	6128      	str	r0, [r5, #16]
 800ede4:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800ede6:	79fb      	ldrb	r3, [r7, #7]
 800ede8:	1c5a      	adds	r2, r3, #1
 800edea:	71fa      	strb	r2, [r7, #7]
 800edec:	461a      	mov	r2, r3
 800edee:	2332      	movs	r3, #50	; 0x32
 800edf0:	fb02 f303 	mul.w	r3, r2, r3
 800edf4:	4a26      	ldr	r2, [pc, #152]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800edf6:	4413      	add	r3, r2
 800edf8:	4a2f      	ldr	r2, [pc, #188]	; (800eeb8 <Update_SiemensCommands+0x2d0>)
 800edfa:	461c      	mov	r4, r3
 800edfc:	4615      	mov	r5, r2
 800edfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee00:	6020      	str	r0, [r4, #0]
 800ee02:	6061      	str	r1, [r4, #4]
 800ee04:	60a2      	str	r2, [r4, #8]
 800ee06:	60e3      	str	r3, [r4, #12]
 800ee08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ee0a:	6120      	str	r0, [r4, #16]
 800ee0c:	6161      	str	r1, [r4, #20]
 800ee0e:	61a2      	str	r2, [r4, #24]
 800ee10:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800ee12:	79fb      	ldrb	r3, [r7, #7]
 800ee14:	1c5a      	adds	r2, r3, #1
 800ee16:	71fa      	strb	r2, [r7, #7]
 800ee18:	461a      	mov	r2, r3
 800ee1a:	2332      	movs	r3, #50	; 0x32
 800ee1c:	fb02 f303 	mul.w	r3, r2, r3
 800ee20:	4a1b      	ldr	r2, [pc, #108]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee22:	4413      	add	r3, r2
 800ee24:	4a25      	ldr	r2, [pc, #148]	; (800eebc <Update_SiemensCommands+0x2d4>)
 800ee26:	461d      	mov	r5, r3
 800ee28:	4614      	mov	r4, r2
 800ee2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee2c:	6028      	str	r0, [r5, #0]
 800ee2e:	6069      	str	r1, [r5, #4]
 800ee30:	60aa      	str	r2, [r5, #8]
 800ee32:	60eb      	str	r3, [r5, #12]
 800ee34:	cc07      	ldmia	r4!, {r0, r1, r2}
 800ee36:	6128      	str	r0, [r5, #16]
 800ee38:	6169      	str	r1, [r5, #20]
 800ee3a:	61aa      	str	r2, [r5, #24]
 800ee3c:	7823      	ldrb	r3, [r4, #0]
 800ee3e:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	71fa      	strb	r2, [r7, #7]
 800ee46:	461a      	mov	r2, r3
 800ee48:	2332      	movs	r3, #50	; 0x32
 800ee4a:	fb02 f303 	mul.w	r3, r2, r3
 800ee4e:	4a10      	ldr	r2, [pc, #64]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee50:	4413      	add	r3, r2
 800ee52:	491b      	ldr	r1, [pc, #108]	; (800eec0 <Update_SiemensCommands+0x2d8>)
 800ee54:	461a      	mov	r2, r3
 800ee56:	460b      	mov	r3, r1
 800ee58:	cb03      	ldmia	r3!, {r0, r1}
 800ee5a:	6010      	str	r0, [r2, #0]
 800ee5c:	6051      	str	r1, [r2, #4]
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800ee62:	79fb      	ldrb	r3, [r7, #7]
 800ee64:	1c5a      	adds	r2, r3, #1
 800ee66:	71fa      	strb	r2, [r7, #7]
 800ee68:	461a      	mov	r2, r3
 800ee6a:	2332      	movs	r3, #50	; 0x32
 800ee6c:	fb02 f303 	mul.w	r3, r2, r3
 800ee70:	4a07      	ldr	r2, [pc, #28]	; (800ee90 <Update_SiemensCommands+0x2a8>)
 800ee72:	4413      	add	r3, r2
 800ee74:	4a13      	ldr	r2, [pc, #76]	; (800eec4 <Update_SiemensCommands+0x2dc>)
 800ee76:	6810      	ldr	r0, [r2, #0]
 800ee78:	6018      	str	r0, [r3, #0]
 800ee7a:	7912      	ldrb	r2, [r2, #4]
 800ee7c:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800ee7e:	4a12      	ldr	r2, [pc, #72]	; (800eec8 <Update_SiemensCommands+0x2e0>)
 800ee80:	79fb      	ldrb	r3, [r7, #7]
 800ee82:	7013      	strb	r3, [r2, #0]
}
 800ee84:	bf00      	nop
 800ee86:	370c      	adds	r7, #12
 800ee88:	46bd      	mov	sp, r7
 800ee8a:	bcb0      	pop	{r4, r5, r7}
 800ee8c:	4770      	bx	lr
 800ee8e:	bf00      	nop
 800ee90:	20005f94 	.word	0x20005f94
 800ee94:	0802a1ec 	.word	0x0802a1ec
 800ee98:	0802a0d4 	.word	0x0802a0d4
 800ee9c:	0802a0ec 	.word	0x0802a0ec
 800eea0:	0802a104 	.word	0x0802a104
 800eea4:	0802a118 	.word	0x0802a118
 800eea8:	0802a12c 	.word	0x0802a12c
 800eeac:	0802a1f8 	.word	0x0802a1f8
 800eeb0:	0802a174 	.word	0x0802a174
 800eeb4:	0802a188 	.word	0x0802a188
 800eeb8:	0802a1a0 	.word	0x0802a1a0
 800eebc:	0802a1c0 	.word	0x0802a1c0
 800eec0:	0802a214 	.word	0x0802a214
 800eec4:	0802a220 	.word	0x0802a220
 800eec8:	2000637c 	.word	0x2000637c

0800eecc <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800eecc:	b590      	push	{r4, r7, lr}
 800eece:	b085      	sub	sp, #20
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
 800eed4:	460b      	mov	r3, r1
 800eed6:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800eed8:	2300      	movs	r3, #0
 800eeda:	73fb      	strb	r3, [r7, #15]
 800eedc:	e01c      	b.n	800ef18 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800eede:	7bfb      	ldrb	r3, [r7, #15]
 800eee0:	2232      	movs	r2, #50	; 0x32
 800eee2:	fb02 f303 	mul.w	r3, r2, r3
 800eee6:	4a11      	ldr	r2, [pc, #68]	; (800ef2c <Is_SiemensCommand_Valid+0x60>)
 800eee8:	189c      	adds	r4, r3, r2
 800eeea:	7bfb      	ldrb	r3, [r7, #15]
 800eeec:	2232      	movs	r2, #50	; 0x32
 800eeee:	fb02 f303 	mul.w	r3, r2, r3
 800eef2:	4a0e      	ldr	r2, [pc, #56]	; (800ef2c <Is_SiemensCommand_Valid+0x60>)
 800eef4:	4413      	add	r3, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7f1 f9ac 	bl	8000254 <strlen>
 800eefc:	4603      	mov	r3, r0
 800eefe:	461a      	mov	r2, r3
 800ef00:	4621      	mov	r1, r4
 800ef02:	6878      	ldr	r0, [r7, #4]
 800ef04:	f016 ff3c 	bl	8025d80 <memcmp>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d101      	bne.n	800ef12 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800ef0e:	7bfb      	ldrb	r3, [r7, #15]
 800ef10:	e008      	b.n	800ef24 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ef12:	7bfb      	ldrb	r3, [r7, #15]
 800ef14:	3301      	adds	r3, #1
 800ef16:	73fb      	strb	r3, [r7, #15]
 800ef18:	4b05      	ldr	r3, [pc, #20]	; (800ef30 <Is_SiemensCommand_Valid+0x64>)
 800ef1a:	781b      	ldrb	r3, [r3, #0]
 800ef1c:	7bfa      	ldrb	r2, [r7, #15]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d3dd      	bcc.n	800eede <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800ef22:	23ff      	movs	r3, #255	; 0xff
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd90      	pop	{r4, r7, pc}
 800ef2c:	20005f94 	.word	0x20005f94
 800ef30:	2000637c 	.word	0x2000637c

0800ef34 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b087      	sub	sp, #28
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
 800ef3c:	460b      	mov	r3, r1
 800ef3e:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800ef40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef44:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800ef4e:	2300      	movs	r3, #0
 800ef50:	82bb      	strh	r3, [r7, #20]
 800ef52:	e022      	b.n	800ef9a <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800ef54:	8abb      	ldrh	r3, [r7, #20]
 800ef56:	687a      	ldr	r2, [r7, #4]
 800ef58:	4413      	add	r3, r2
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	b29a      	uxth	r2, r3
 800ef5e:	8afb      	ldrh	r3, [r7, #22]
 800ef60:	4053      	eors	r3, r2
 800ef62:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800ef64:	2300      	movs	r3, #0
 800ef66:	613b      	str	r3, [r7, #16]
 800ef68:	e011      	b.n	800ef8e <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800ef6a:	8afb      	ldrh	r3, [r7, #22]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d006      	beq.n	800ef82 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800ef74:	8afb      	ldrh	r3, [r7, #22]
 800ef76:	085b      	lsrs	r3, r3, #1
 800ef78:	b29a      	uxth	r2, r3
 800ef7a:	4b17      	ldr	r3, [pc, #92]	; (800efd8 <Siemens_CRC+0xa4>)
 800ef7c:	4053      	eors	r3, r2
 800ef7e:	82fb      	strh	r3, [r7, #22]
 800ef80:	e002      	b.n	800ef88 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800ef82:	8afb      	ldrh	r3, [r7, #22]
 800ef84:	085b      	lsrs	r3, r3, #1
 800ef86:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	613b      	str	r3, [r7, #16]
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	2b07      	cmp	r3, #7
 800ef92:	ddea      	ble.n	800ef6a <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800ef94:	8abb      	ldrh	r3, [r7, #20]
 800ef96:	3301      	adds	r3, #1
 800ef98:	82bb      	strh	r3, [r7, #20]
 800ef9a:	8aba      	ldrh	r2, [r7, #20]
 800ef9c:	887b      	ldrh	r3, [r7, #2]
 800ef9e:	429a      	cmp	r2, r3
 800efa0:	d3d8      	bcc.n	800ef54 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800efa2:	8afb      	ldrh	r3, [r7, #22]
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800efa8:	8afb      	ldrh	r3, [r7, #22]
 800efaa:	0a1b      	lsrs	r3, r3, #8
 800efac:	b29b      	uxth	r3, r3
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800efb2:	7b3b      	ldrb	r3, [r7, #12]
 800efb4:	021b      	lsls	r3, r3, #8
 800efb6:	b21a      	sxth	r2, r3
 800efb8:	7b7b      	ldrb	r3, [r7, #13]
 800efba:	b21b      	sxth	r3, r3
 800efbc:	4313      	orrs	r3, r2
 800efbe:	b21b      	sxth	r3, r3
 800efc0:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800efc2:	8afb      	ldrh	r3, [r7, #22]
 800efc4:	43db      	mvns	r3, r3
 800efc6:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800efc8:	8afb      	ldrh	r3, [r7, #22]
}
 800efca:	4618      	mov	r0, r3
 800efcc:	371c      	adds	r7, #28
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr
 800efd6:	bf00      	nop
 800efd8:	ffff8408 	.word	0xffff8408

0800efdc <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b086      	sub	sp, #24
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	603a      	str	r2, [r7, #0]
 800efe4:	461a      	mov	r2, r3
 800efe6:	4603      	mov	r3, r0
 800efe8:	71fb      	strb	r3, [r7, #7]
 800efea:	460b      	mov	r3, r1
 800efec:	71bb      	strb	r3, [r7, #6]
 800efee:	4613      	mov	r3, r2
 800eff0:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800eff2:	2300      	movs	r3, #0
 800eff4:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800eff6:	2300      	movs	r3, #0
 800eff8:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800effa:	797b      	ldrb	r3, [r7, #5]
 800effc:	2b02      	cmp	r3, #2
 800effe:	d010      	beq.n	800f022 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800f000:	79bb      	ldrb	r3, [r7, #6]
 800f002:	08db      	lsrs	r3, r3, #3
 800f004:	b2db      	uxtb	r3, r3
 800f006:	797a      	ldrb	r2, [r7, #5]
 800f008:	4619      	mov	r1, r3
 800f00a:	6838      	ldr	r0, [r7, #0]
 800f00c:	f000 f8d0 	bl	800f1b0 <Verify_parity>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d110      	bne.n	800f038 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800f016:	4840      	ldr	r0, [pc, #256]	; (800f118 <Extract_Parity_Data+0x13c>)
 800f018:	f017 f86e 	bl	80260f8 <puts>
			return -1;
 800f01c:	f04f 33ff 	mov.w	r3, #4294967295
 800f020:	e075      	b.n	800f10e <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800f022:	79fb      	ldrb	r3, [r7, #7]
 800f024:	b29b      	uxth	r3, r3
 800f026:	79ba      	ldrb	r2, [r7, #6]
 800f028:	b291      	uxth	r1, r2
 800f02a:	683a      	ldr	r2, [r7, #0]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7f1 faf1 	bl	8000614 <ExtractBits>
 800f032:	6138      	str	r0, [r7, #16]
		return Return_value;
 800f034:	693b      	ldr	r3, [r7, #16]
 800f036:	e06a      	b.n	800f10e <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800f038:	79bb      	ldrb	r3, [r7, #6]
 800f03a:	2b08      	cmp	r3, #8
 800f03c:	d108      	bne.n	800f050 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800f044:	7dfb      	ldrb	r3, [r7, #23]
 800f046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f04a:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800f04c:	7dfb      	ldrb	r3, [r7, #23]
 800f04e:	e05e      	b.n	800f10e <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800f050:	79bb      	ldrb	r3, [r7, #6]
 800f052:	2b18      	cmp	r3, #24
 800f054:	d15a      	bne.n	800f10c <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	781b      	ldrb	r3, [r3, #0]
 800f05a:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800f05c:	7dfb      	ldrb	r3, [r7, #23]
 800f05e:	f003 0301 	and.w	r3, r3, #1
 800f062:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800f064:	7dfb      	ldrb	r3, [r7, #23]
 800f066:	085b      	lsrs	r3, r3, #1
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	f003 0301 	and.w	r3, r3, #1
 800f06e:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800f070:	7dfb      	ldrb	r3, [r7, #23]
 800f072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f076:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800f078:	7dfb      	ldrb	r3, [r7, #23]
 800f07a:	089b      	lsrs	r3, r3, #2
 800f07c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800f07e:	7dfb      	ldrb	r3, [r7, #23]
 800f080:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	785b      	ldrb	r3, [r3, #1]
 800f086:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800f088:	7dfb      	ldrb	r3, [r7, #23]
 800f08a:	f003 0301 	and.w	r3, r3, #1
 800f08e:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800f090:	7dfb      	ldrb	r3, [r7, #23]
 800f092:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f096:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	085b      	lsrs	r3, r3, #1
 800f09c:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f09e:	7bbb      	ldrb	r3, [r7, #14]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d104      	bne.n	800f0ae <Extract_Parity_Data+0xd2>
 800f0a4:	7dfb      	ldrb	r3, [r7, #23]
 800f0a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0aa:	75fb      	strb	r3, [r7, #23]
 800f0ac:	e003      	b.n	800f0b6 <Extract_Parity_Data+0xda>
 800f0ae:	7dfb      	ldrb	r3, [r7, #23]
 800f0b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0b4:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800f0b6:	7bfb      	ldrb	r3, [r7, #15]
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d104      	bne.n	800f0c6 <Extract_Parity_Data+0xea>
 800f0bc:	7dfb      	ldrb	r3, [r7, #23]
 800f0be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0c2:	75fb      	strb	r3, [r7, #23]
 800f0c4:	e003      	b.n	800f0ce <Extract_Parity_Data+0xf2>
 800f0c6:	7dfb      	ldrb	r3, [r7, #23]
 800f0c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0cc:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	021b      	lsls	r3, r3, #8
 800f0d2:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f0d4:	7dfb      	ldrb	r3, [r7, #23]
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	4413      	add	r3, r2
 800f0da:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	789b      	ldrb	r3, [r3, #2]
 800f0e0:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800f0e2:	7b7b      	ldrb	r3, [r7, #13]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d104      	bne.n	800f0f2 <Extract_Parity_Data+0x116>
 800f0e8:	7dfb      	ldrb	r3, [r7, #23]
 800f0ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f0ee:	75fb      	strb	r3, [r7, #23]
 800f0f0:	e003      	b.n	800f0fa <Extract_Parity_Data+0x11e>
 800f0f2:	7dfb      	ldrb	r3, [r7, #23]
 800f0f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f0f8:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800f0fa:	693b      	ldr	r3, [r7, #16]
 800f0fc:	021b      	lsls	r3, r3, #8
 800f0fe:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800f100:	7dfb      	ldrb	r3, [r7, #23]
 800f102:	693a      	ldr	r2, [r7, #16]
 800f104:	4413      	add	r3, r2
 800f106:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	e000      	b.n	800f10e <Extract_Parity_Data+0x132>
	}
	return 0;
 800f10c:	2300      	movs	r3, #0
}
 800f10e:	4618      	mov	r0, r3
 800f110:	3718      	adds	r7, #24
 800f112:	46bd      	mov	sp, r7
 800f114:	bd80      	pop	{r7, pc}
 800f116:	bf00      	nop
 800f118:	0802a228 	.word	0x0802a228

0800f11c <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800f11c:	b480      	push	{r7}
 800f11e:	b085      	sub	sp, #20
 800f120:	af00      	add	r7, sp, #0
 800f122:	4603      	mov	r3, r0
 800f124:	460a      	mov	r2, r1
 800f126:	71fb      	strb	r3, [r7, #7]
 800f128:	4613      	mov	r3, r2
 800f12a:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800f130:	2300      	movs	r3, #0
 800f132:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800f134:	2306      	movs	r3, #6
 800f136:	73fb      	strb	r3, [r7, #15]
 800f138:	e014      	b.n	800f164 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800f13a:	79fa      	ldrb	r2, [r7, #7]
 800f13c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f140:	fa42 f303 	asr.w	r3, r2, r3
 800f144:	f003 0301 	and.w	r3, r3, #1
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d005      	beq.n	800f158 <Calculate_Parity+0x3c>
		{
			count++;
 800f14c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f150:	b2db      	uxtb	r3, r3
 800f152:	3301      	adds	r3, #1
 800f154:	b2db      	uxtb	r3, r3
 800f156:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800f158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f15c:	b2db      	uxtb	r3, r3
 800f15e:	3b01      	subs	r3, #1
 800f160:	b2db      	uxtb	r3, r3
 800f162:	73fb      	strb	r3, [r7, #15]
 800f164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	dae6      	bge.n	800f13a <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800f16c:	79bb      	ldrb	r3, [r7, #6]
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d109      	bne.n	800f186 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800f172:	7bbb      	ldrb	r3, [r7, #14]
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	b2db      	uxtb	r3, r3
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <Calculate_Parity+0x66>
		{
			return 0;
 800f17e:	2300      	movs	r3, #0
 800f180:	e00f      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800f182:	2301      	movs	r3, #1
 800f184:	e00d      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800f186:	79bb      	ldrb	r3, [r7, #6]
 800f188:	2b01      	cmp	r3, #1
 800f18a:	d109      	bne.n	800f1a0 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800f18c:	7bbb      	ldrb	r3, [r7, #14]
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	b2db      	uxtb	r3, r3
 800f194:	2b00      	cmp	r3, #0
 800f196:	d101      	bne.n	800f19c <Calculate_Parity+0x80>
		{
			return 1;
 800f198:	2301      	movs	r3, #1
 800f19a:	e002      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800f19c:	2300      	movs	r3, #0
 800f19e:	e000      	b.n	800f1a2 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800f1a0:	2300      	movs	r3, #0
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3714      	adds	r7, #20
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b084      	sub	sp, #16
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
 800f1b8:	460b      	mov	r3, r1
 800f1ba:	70fb      	strb	r3, [r7, #3]
 800f1bc:	4613      	mov	r3, r2
 800f1be:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	73fb      	strb	r3, [r7, #15]
 800f1c8:	e03b      	b.n	800f242 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800f1ca:	7bfb      	ldrb	r3, [r7, #15]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	4413      	add	r3, r2
 800f1d0:	781b      	ldrb	r3, [r3, #0]
 800f1d2:	78ba      	ldrb	r2, [r7, #2]
 800f1d4:	4611      	mov	r1, r2
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	f7ff ffa0 	bl	800f11c <Calculate_Parity>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	4619      	mov	r1, r3
 800f1e0:	7bfb      	ldrb	r3, [r7, #15]
 800f1e2:	687a      	ldr	r2, [r7, #4]
 800f1e4:	4413      	add	r3, r2
 800f1e6:	781b      	ldrb	r3, [r3, #0]
 800f1e8:	09db      	lsrs	r3, r3, #7
 800f1ea:	b2db      	uxtb	r3, r3
 800f1ec:	f003 0301 	and.w	r3, r3, #1
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d023      	beq.n	800f23c <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800f1f4:	7bfb      	ldrb	r3, [r7, #15]
 800f1f6:	687a      	ldr	r2, [r7, #4]
 800f1f8:	4413      	add	r3, r2
 800f1fa:	781b      	ldrb	r3, [r3, #0]
 800f1fc:	4619      	mov	r1, r3
 800f1fe:	4815      	ldr	r0, [pc, #84]	; (800f254 <Verify_parity+0xa4>)
 800f200:	f016 fede 	bl	8025fc0 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800f204:	7bfb      	ldrb	r3, [r7, #15]
 800f206:	687a      	ldr	r2, [r7, #4]
 800f208:	4413      	add	r3, r2
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	78ba      	ldrb	r2, [r7, #2]
 800f20e:	4611      	mov	r1, r2
 800f210:	4618      	mov	r0, r3
 800f212:	f7ff ff83 	bl	800f11c <Calculate_Parity>
 800f216:	4603      	mov	r3, r0
 800f218:	4619      	mov	r1, r3
 800f21a:	480f      	ldr	r0, [pc, #60]	; (800f258 <Verify_parity+0xa8>)
 800f21c:	f016 fed0 	bl	8025fc0 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800f220:	7bfb      	ldrb	r3, [r7, #15]
 800f222:	687a      	ldr	r2, [r7, #4]
 800f224:	4413      	add	r3, r2
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	09db      	lsrs	r3, r3, #7
 800f22a:	b2db      	uxtb	r3, r3
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	4619      	mov	r1, r3
 800f232:	480a      	ldr	r0, [pc, #40]	; (800f25c <Verify_parity+0xac>)
 800f234:	f016 fec4 	bl	8025fc0 <iprintf>
			return 0;
 800f238:	2300      	movs	r3, #0
 800f23a:	e007      	b.n	800f24c <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800f23c:	7bfb      	ldrb	r3, [r7, #15]
 800f23e:	3301      	adds	r3, #1
 800f240:	73fb      	strb	r3, [r7, #15]
 800f242:	7bfa      	ldrb	r2, [r7, #15]
 800f244:	78fb      	ldrb	r3, [r7, #3]
 800f246:	429a      	cmp	r2, r3
 800f248:	d3bf      	bcc.n	800f1ca <Verify_parity+0x1a>
		}
	}
	return 1;
 800f24a:	2301      	movs	r3, #1
}
 800f24c:	4618      	mov	r0, r3
 800f24e:	3710      	adds	r7, #16
 800f250:	46bd      	mov	sp, r7
 800f252:	bd80      	pop	{r7, pc}
 800f254:	0802a244 	.word	0x0802a244
 800f258:	0802a25c 	.word	0x0802a25c
 800f25c:	0802a270 	.word	0x0802a270

0800f260 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800f260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f264:	b089      	sub	sp, #36	; 0x24
 800f266:	af00      	add	r7, sp, #0
 800f268:	4603      	mov	r3, r0
 800f26a:	60ba      	str	r2, [r7, #8]
 800f26c:	73fb      	strb	r3, [r7, #15]
 800f26e:	460b      	mov	r3, r1
 800f270:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800f272:	2300      	movs	r3, #0
 800f274:	83fb      	strh	r3, [r7, #30]
 800f276:	2300      	movs	r3, #0
 800f278:	83bb      	strh	r3, [r7, #28]
 800f27a:	2300      	movs	r3, #0
 800f27c:	833b      	strh	r3, [r7, #24]
 800f27e:	2300      	movs	r3, #0
 800f280:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800f282:	2300      	movs	r3, #0
 800f284:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800f286:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800f28a:	2b02      	cmp	r3, #2
 800f28c:	d108      	bne.n	800f2a0 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800f28e:	7bfb      	ldrb	r3, [r7, #15]
 800f290:	b298      	uxth	r0, r3
 800f292:	7bbb      	ldrb	r3, [r7, #14]
 800f294:	b299      	uxth	r1, r3
 800f296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f298:	68ba      	ldr	r2, [r7, #8]
 800f29a:	f7f1 fa47 	bl	800072c <InsertBits>
		return;
 800f29e:	e13b      	b.n	800f518 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800f2a0:	7bbb      	ldrb	r3, [r7, #14]
 800f2a2:	2b08      	cmp	r3, #8
 800f2a4:	d12c      	bne.n	800f300 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800f2a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f2aa:	2a80      	cmp	r2, #128	; 0x80
 800f2ac:	f173 0300 	sbcs.w	r3, r3, #0
 800f2b0:	d303      	bcc.n	800f2ba <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800f2b2:	489b      	ldr	r0, [pc, #620]	; (800f520 <Insert_cal_parity+0x2c0>)
 800f2b4:	f016 ff20 	bl	80260f8 <puts>
			return;
 800f2b8:	e12e      	b.n	800f518 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800f2ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800f2be:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f2c2:	4611      	mov	r1, r2
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7ff ff29 	bl	800f11c <Calculate_Parity>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d10b      	bne.n	800f2e8 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800f2d0:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800f2d8:	68bb      	ldr	r3, [r7, #8]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f2e0:	b2da      	uxtb	r2, r3
 800f2e2:	68bb      	ldr	r3, [r7, #8]
 800f2e4:	701a      	strb	r2, [r3, #0]
 800f2e6:	e117      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800f2e8:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800f2f0:	68bb      	ldr	r3, [r7, #8]
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2f8:	b2da      	uxtb	r2, r3
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	701a      	strb	r2, [r3, #0]
 800f2fe:	e10b      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800f300:	7bbb      	ldrb	r3, [r7, #14]
 800f302:	2b18      	cmp	r3, #24
 800f304:	f040 8104 	bne.w	800f510 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800f308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f30c:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800f310:	f173 0300 	sbcs.w	r3, r3, #0
 800f314:	d303      	bcc.n	800f31e <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800f316:	4883      	ldr	r0, [pc, #524]	; (800f524 <Insert_cal_parity+0x2c4>)
 800f318:	f016 feee 	bl	80260f8 <puts>
			return;
 800f31c:	e0fc      	b.n	800f518 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800f31e:	2300      	movs	r3, #0
 800f320:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f322:	2300      	movs	r3, #0
 800f324:	76bb      	strb	r3, [r7, #26]
 800f326:	e0ee      	b.n	800f506 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800f328:	7ebb      	ldrb	r3, [r7, #26]
 800f32a:	00d9      	lsls	r1, r3, #3
 800f32c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f330:	f1c1 0620 	rsb	r6, r1, #32
 800f334:	f1a1 0c20 	sub.w	ip, r1, #32
 800f338:	fa22 f001 	lsr.w	r0, r2, r1
 800f33c:	6038      	str	r0, [r7, #0]
 800f33e:	fa03 f606 	lsl.w	r6, r3, r6
 800f342:	6838      	ldr	r0, [r7, #0]
 800f344:	4330      	orrs	r0, r6
 800f346:	6038      	str	r0, [r7, #0]
 800f348:	fa23 fc0c 	lsr.w	ip, r3, ip
 800f34c:	6838      	ldr	r0, [r7, #0]
 800f34e:	ea40 000c 	orr.w	r0, r0, ip
 800f352:	6038      	str	r0, [r7, #0]
 800f354:	40cb      	lsrs	r3, r1
 800f356:	607b      	str	r3, [r7, #4]
 800f358:	783b      	ldrb	r3, [r7, #0]
 800f35a:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800f35c:	7ebb      	ldrb	r3, [r7, #26]
 800f35e:	2b02      	cmp	r3, #2
 800f360:	d07a      	beq.n	800f458 <Insert_cal_parity+0x1f8>
 800f362:	2b02      	cmp	r3, #2
 800f364:	f300 8094 	bgt.w	800f490 <Insert_cal_parity+0x230>
 800f368:	2b00      	cmp	r3, #0
 800f36a:	d002      	beq.n	800f372 <Insert_cal_parity+0x112>
 800f36c:	2b01      	cmp	r3, #1
 800f36e:	d01f      	beq.n	800f3b0 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800f370:	e08e      	b.n	800f490 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f372:	7ebb      	ldrb	r3, [r7, #26]
 800f374:	00d9      	lsls	r1, r3, #3
 800f376:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f37a:	f1c1 0620 	rsb	r6, r1, #32
 800f37e:	f1a1 0020 	sub.w	r0, r1, #32
 800f382:	fa22 f401 	lsr.w	r4, r2, r1
 800f386:	fa03 f606 	lsl.w	r6, r3, r6
 800f38a:	4334      	orrs	r4, r6
 800f38c:	fa23 f000 	lsr.w	r0, r3, r0
 800f390:	4304      	orrs	r4, r0
 800f392:	fa23 f501 	lsr.w	r5, r3, r1
 800f396:	f04f 0200 	mov.w	r2, #0
 800f39a:	f04f 0300 	mov.w	r3, #0
 800f39e:	09e2      	lsrs	r2, r4, #7
 800f3a0:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800f3a4:	09eb      	lsrs	r3, r5, #7
 800f3a6:	b293      	uxth	r3, r2
 800f3a8:	f003 0301 	and.w	r3, r3, #1
 800f3ac:	83fb      	strh	r3, [r7, #30]
					break;
 800f3ae:	e070      	b.n	800f492 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800f3b0:	7efb      	ldrb	r3, [r7, #27]
 800f3b2:	005b      	lsls	r3, r3, #1
 800f3b4:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f3b6:	8bfb      	ldrh	r3, [r7, #30]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d104      	bne.n	800f3c6 <Insert_cal_parity+0x166>
 800f3bc:	7efb      	ldrb	r3, [r7, #27]
 800f3be:	f023 0301 	bic.w	r3, r3, #1
 800f3c2:	76fb      	strb	r3, [r7, #27]
 800f3c4:	e003      	b.n	800f3ce <Insert_cal_parity+0x16e>
 800f3c6:	7efb      	ldrb	r3, [r7, #27]
 800f3c8:	f043 0301 	orr.w	r3, r3, #1
 800f3cc:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800f3ce:	7ebb      	ldrb	r3, [r7, #26]
 800f3d0:	00d9      	lsls	r1, r3, #3
 800f3d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f3d6:	f1c1 0620 	rsb	r6, r1, #32
 800f3da:	f1a1 0020 	sub.w	r0, r1, #32
 800f3de:	fa22 f801 	lsr.w	r8, r2, r1
 800f3e2:	fa03 f606 	lsl.w	r6, r3, r6
 800f3e6:	ea48 0806 	orr.w	r8, r8, r6
 800f3ea:	fa23 f000 	lsr.w	r0, r3, r0
 800f3ee:	ea48 0800 	orr.w	r8, r8, r0
 800f3f2:	fa23 f901 	lsr.w	r9, r3, r1
 800f3f6:	f04f 0200 	mov.w	r2, #0
 800f3fa:	f04f 0300 	mov.w	r3, #0
 800f3fe:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800f402:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800f406:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800f40a:	b293      	uxth	r3, r2
 800f40c:	f003 0301 	and.w	r3, r3, #1
 800f410:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800f412:	7ebb      	ldrb	r3, [r7, #26]
 800f414:	00d9      	lsls	r1, r3, #3
 800f416:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800f41a:	f1c1 0620 	rsb	r6, r1, #32
 800f41e:	f1a1 0020 	sub.w	r0, r1, #32
 800f422:	fa22 fa01 	lsr.w	sl, r2, r1
 800f426:	fa03 f606 	lsl.w	r6, r3, r6
 800f42a:	ea4a 0a06 	orr.w	sl, sl, r6
 800f42e:	fa23 f000 	lsr.w	r0, r3, r0
 800f432:	ea4a 0a00 	orr.w	sl, sl, r0
 800f436:	fa23 fb01 	lsr.w	fp, r3, r1
 800f43a:	f04f 0200 	mov.w	r2, #0
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800f446:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800f44a:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800f44e:	b293      	uxth	r3, r2
 800f450:	f003 0301 	and.w	r3, r3, #1
 800f454:	83bb      	strh	r3, [r7, #28]
					break;
 800f456:	e01c      	b.n	800f492 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800f458:	7efb      	ldrb	r3, [r7, #27]
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800f45e:	8bbb      	ldrh	r3, [r7, #28]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d104      	bne.n	800f46e <Insert_cal_parity+0x20e>
 800f464:	7efb      	ldrb	r3, [r7, #27]
 800f466:	f023 0301 	bic.w	r3, r3, #1
 800f46a:	76fb      	strb	r3, [r7, #27]
 800f46c:	e003      	b.n	800f476 <Insert_cal_parity+0x216>
 800f46e:	7efb      	ldrb	r3, [r7, #27]
 800f470:	f043 0301 	orr.w	r3, r3, #1
 800f474:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f476:	8bfb      	ldrh	r3, [r7, #30]
 800f478:	2b00      	cmp	r3, #0
 800f47a:	d104      	bne.n	800f486 <Insert_cal_parity+0x226>
 800f47c:	7efb      	ldrb	r3, [r7, #27]
 800f47e:	f023 0302 	bic.w	r3, r3, #2
 800f482:	76fb      	strb	r3, [r7, #27]
					break;
 800f484:	e005      	b.n	800f492 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800f486:	7efb      	ldrb	r3, [r7, #27]
 800f488:	f043 0302 	orr.w	r3, r3, #2
 800f48c:	76fb      	strb	r3, [r7, #27]
					break;
 800f48e:	e000      	b.n	800f492 <Insert_cal_parity+0x232>
					break;
 800f490:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800f492:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800f496:	7efb      	ldrb	r3, [r7, #27]
 800f498:	4611      	mov	r1, r2
 800f49a:	4618      	mov	r0, r3
 800f49c:	f7ff fe3e 	bl	800f11c <Calculate_Parity>
 800f4a0:	4603      	mov	r3, r0
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d116      	bne.n	800f4d4 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f4a6:	7ebb      	ldrb	r3, [r7, #26]
 800f4a8:	f1c3 0302 	rsb	r3, r3, #2
 800f4ac:	68ba      	ldr	r2, [r7, #8]
 800f4ae:	4413      	add	r3, r2
 800f4b0:	7efa      	ldrb	r2, [r7, #27]
 800f4b2:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800f4b4:	7ebb      	ldrb	r3, [r7, #26]
 800f4b6:	f1c3 0302 	rsb	r3, r3, #2
 800f4ba:	68ba      	ldr	r2, [r7, #8]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781a      	ldrb	r2, [r3, #0]
 800f4c0:	7ebb      	ldrb	r3, [r7, #26]
 800f4c2:	f1c3 0302 	rsb	r3, r3, #2
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	440b      	add	r3, r1
 800f4ca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
 800f4d2:	e015      	b.n	800f500 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800f4d4:	7ebb      	ldrb	r3, [r7, #26]
 800f4d6:	f1c3 0302 	rsb	r3, r3, #2
 800f4da:	68ba      	ldr	r2, [r7, #8]
 800f4dc:	4413      	add	r3, r2
 800f4de:	7efa      	ldrb	r2, [r7, #27]
 800f4e0:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800f4e2:	7ebb      	ldrb	r3, [r7, #26]
 800f4e4:	f1c3 0302 	rsb	r3, r3, #2
 800f4e8:	68ba      	ldr	r2, [r7, #8]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	781a      	ldrb	r2, [r3, #0]
 800f4ee:	7ebb      	ldrb	r3, [r7, #26]
 800f4f0:	f1c3 0302 	rsb	r3, r3, #2
 800f4f4:	68b9      	ldr	r1, [r7, #8]
 800f4f6:	440b      	add	r3, r1
 800f4f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800f4fc:	b2d2      	uxtb	r2, r2
 800f4fe:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800f500:	7ebb      	ldrb	r3, [r7, #26]
 800f502:	3301      	adds	r3, #1
 800f504:	76bb      	strb	r3, [r7, #26]
 800f506:	7ebb      	ldrb	r3, [r7, #26]
 800f508:	2b02      	cmp	r3, #2
 800f50a:	f67f af0d 	bls.w	800f328 <Insert_cal_parity+0xc8>
 800f50e:	e003      	b.n	800f518 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800f510:	4805      	ldr	r0, [pc, #20]	; (800f528 <Insert_cal_parity+0x2c8>)
 800f512:	f016 fdf1 	bl	80260f8 <puts>
		return;
 800f516:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800f518:	3724      	adds	r7, #36	; 0x24
 800f51a:	46bd      	mov	sp, r7
 800f51c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f520:	0802a288 	.word	0x0802a288
 800f524:	0802a2bc 	.word	0x0802a2bc
 800f528:	0802a2f0 	.word	0x0802a2f0

0800f52c <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	460b      	mov	r3, r1
 800f536:	807b      	strh	r3, [r7, #2]
 800f538:	4613      	mov	r3, r2
 800f53a:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800f53c:	2300      	movs	r3, #0
 800f53e:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800f540:	2300      	movs	r3, #0
 800f542:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800f544:	787b      	ldrb	r3, [r7, #1]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d133      	bne.n	800f5b2 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800f54a:	887b      	ldrh	r3, [r7, #2]
 800f54c:	085b      	lsrs	r3, r3, #1
 800f54e:	b29b      	uxth	r3, r3
 800f550:	3b02      	subs	r3, #2
 800f552:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f554:	2300      	movs	r3, #0
 800f556:	81fb      	strh	r3, [r7, #14]
 800f558:	e025      	b.n	800f5a6 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800f55a:	89fb      	ldrh	r3, [r7, #14]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	4413      	add	r3, r2
 800f560:	781a      	ldrb	r2, [r3, #0]
 800f562:	89f9      	ldrh	r1, [r7, #14]
 800f564:	89bb      	ldrh	r3, [r7, #12]
 800f566:	440b      	add	r3, r1
 800f568:	3302      	adds	r3, #2
 800f56a:	6879      	ldr	r1, [r7, #4]
 800f56c:	440b      	add	r3, r1
 800f56e:	781b      	ldrb	r3, [r3, #0]
 800f570:	43db      	mvns	r3, r3
 800f572:	b2db      	uxtb	r3, r3
 800f574:	429a      	cmp	r2, r3
 800f576:	d013      	beq.n	800f5a0 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800f578:	89fb      	ldrh	r3, [r7, #14]
 800f57a:	687a      	ldr	r2, [r7, #4]
 800f57c:	4413      	add	r3, r2
 800f57e:	781b      	ldrb	r3, [r3, #0]
 800f580:	4619      	mov	r1, r3
 800f582:	89fa      	ldrh	r2, [r7, #14]
 800f584:	89bb      	ldrh	r3, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	3302      	adds	r3, #2
 800f58a:	687a      	ldr	r2, [r7, #4]
 800f58c:	4413      	add	r3, r2
 800f58e:	781b      	ldrb	r3, [r3, #0]
 800f590:	43db      	mvns	r3, r3
 800f592:	b2db      	uxtb	r3, r3
 800f594:	461a      	mov	r2, r3
 800f596:	481a      	ldr	r0, [pc, #104]	; (800f600 <Data_Compliment+0xd4>)
 800f598:	f016 fd12 	bl	8025fc0 <iprintf>
				return 0;
 800f59c:	2300      	movs	r3, #0
 800f59e:	e02b      	b.n	800f5f8 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800f5a0:	89fb      	ldrh	r3, [r7, #14]
 800f5a2:	3301      	adds	r3, #1
 800f5a4:	81fb      	strh	r3, [r7, #14]
 800f5a6:	89fa      	ldrh	r2, [r7, #14]
 800f5a8:	89bb      	ldrh	r3, [r7, #12]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d3d5      	bcc.n	800f55a <Data_Compliment+0x2e>
			}
		}
		return 1;
 800f5ae:	2301      	movs	r3, #1
 800f5b0:	e022      	b.n	800f5f8 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800f5b2:	787b      	ldrb	r3, [r7, #1]
 800f5b4:	2b01      	cmp	r3, #1
 800f5b6:	d11e      	bne.n	800f5f6 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	81fb      	strh	r3, [r7, #14]
 800f5bc:	e010      	b.n	800f5e0 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800f5be:	89fb      	ldrh	r3, [r7, #14]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	781a      	ldrb	r2, [r3, #0]
 800f5c6:	89fb      	ldrh	r3, [r7, #14]
 800f5c8:	1c99      	adds	r1, r3, #2
 800f5ca:	887b      	ldrh	r3, [r7, #2]
 800f5cc:	440b      	add	r3, r1
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	440b      	add	r3, r1
 800f5d4:	43d2      	mvns	r2, r2
 800f5d6:	b2d2      	uxtb	r2, r2
 800f5d8:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800f5da:	89fb      	ldrh	r3, [r7, #14]
 800f5dc:	3301      	adds	r3, #1
 800f5de:	81fb      	strh	r3, [r7, #14]
 800f5e0:	89fa      	ldrh	r2, [r7, #14]
 800f5e2:	887b      	ldrh	r3, [r7, #2]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d3ea      	bcc.n	800f5be <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800f5e8:	89fa      	ldrh	r2, [r7, #14]
 800f5ea:	887b      	ldrh	r3, [r7, #2]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	3302      	adds	r3, #2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	e000      	b.n	800f5f8 <Data_Compliment+0xcc>
	}
	return 0;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3710      	adds	r7, #16
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}
 800f600:	0802a300 	.word	0x0802a300

0800f604 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800f604:	b480      	push	{r7}
 800f606:	b083      	sub	sp, #12
 800f608:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800f60a:	2300      	movs	r3, #0
 800f60c:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f60e:	4b1a      	ldr	r3, [pc, #104]	; (800f678 <CheckToSendReplyorNot+0x74>)
 800f610:	785b      	ldrb	r3, [r3, #1]
 800f612:	2b01      	cmp	r3, #1
 800f614:	d104      	bne.n	800f620 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800f616:	79fb      	ldrb	r3, [r7, #7]
 800f618:	f043 0301 	orr.w	r3, r3, #1
 800f61c:	71fb      	strb	r3, [r7, #7]
 800f61e:	e003      	b.n	800f628 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	f023 0301 	bic.w	r3, r3, #1
 800f626:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800f628:	4b14      	ldr	r3, [pc, #80]	; (800f67c <CheckToSendReplyorNot+0x78>)
 800f62a:	785b      	ldrb	r3, [r3, #1]
 800f62c:	2b01      	cmp	r3, #1
 800f62e:	d104      	bne.n	800f63a <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800f630:	79fb      	ldrb	r3, [r7, #7]
 800f632:	f043 0302 	orr.w	r3, r3, #2
 800f636:	71fb      	strb	r3, [r7, #7]
 800f638:	e003      	b.n	800f642 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	f023 0302 	bic.w	r3, r3, #2
 800f640:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800f642:	79fb      	ldrb	r3, [r7, #7]
 800f644:	2b02      	cmp	r3, #2
 800f646:	dc02      	bgt.n	800f64e <CheckToSendReplyorNot+0x4a>
 800f648:	2b00      	cmp	r3, #0
 800f64a:	da03      	bge.n	800f654 <CheckToSendReplyorNot+0x50>
 800f64c:	e00a      	b.n	800f664 <CheckToSendReplyorNot+0x60>
 800f64e:	2b03      	cmp	r3, #3
 800f650:	d004      	beq.n	800f65c <CheckToSendReplyorNot+0x58>
 800f652:	e007      	b.n	800f664 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800f654:	4b0a      	ldr	r3, [pc, #40]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f656:	2201      	movs	r2, #1
 800f658:	701a      	strb	r2, [r3, #0]
		break;
 800f65a:	e007      	b.n	800f66c <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800f65c:	4b08      	ldr	r3, [pc, #32]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f65e:	2201      	movs	r2, #1
 800f660:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800f662:	e003      	b.n	800f66c <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800f664:	4b06      	ldr	r3, [pc, #24]	; (800f680 <CheckToSendReplyorNot+0x7c>)
 800f666:	2201      	movs	r2, #1
 800f668:	701a      	strb	r2, [r3, #0]
		break;
 800f66a:	bf00      	nop
	}

}
 800f66c:	bf00      	nop
 800f66e:	370c      	adds	r7, #12
 800f670:	46bd      	mov	sp, r7
 800f672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f676:	4770      	bx	lr
 800f678:	20004c5c 	.word	0x20004c5c
 800f67c:	20004c60 	.word	0x20004c60
 800f680:	2000637d 	.word	0x2000637d

0800f684 <PrintSignals>:



void PrintSignals(void)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800f68a:	4b2d      	ldr	r3, [pc, #180]	; (800f740 <PrintSignals+0xbc>)
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	461a      	mov	r2, r3
 800f690:	492c      	ldr	r1, [pc, #176]	; (800f744 <PrintSignals+0xc0>)
 800f692:	482d      	ldr	r0, [pc, #180]	; (800f748 <PrintSignals+0xc4>)
 800f694:	f016 fb84 	bl	8025da0 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f698:	2301      	movs	r3, #1
 800f69a:	80fb      	strh	r3, [r7, #6]
 800f69c:	e045      	b.n	800f72a <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800f69e:	4b2b      	ldr	r3, [pc, #172]	; (800f74c <PrintSignals+0xc8>)
 800f6a0:	881b      	ldrh	r3, [r3, #0]
 800f6a2:	88fa      	ldrh	r2, [r7, #6]
 800f6a4:	429a      	cmp	r2, r3
 800f6a6:	d83c      	bhi.n	800f722 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800f6a8:	88fb      	ldrh	r3, [r7, #6]
 800f6aa:	3b01      	subs	r3, #1
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	da00      	bge.n	800f6b2 <PrintSignals+0x2e>
 800f6b0:	3307      	adds	r3, #7
 800f6b2:	10db      	asrs	r3, r3, #3
 800f6b4:	461a      	mov	r2, r3
 800f6b6:	4b26      	ldr	r3, [pc, #152]	; (800f750 <PrintSignals+0xcc>)
 800f6b8:	4413      	add	r3, r2
 800f6ba:	789b      	ldrb	r3, [r3, #2]
 800f6bc:	4619      	mov	r1, r3
 800f6be:	88fb      	ldrh	r3, [r7, #6]
 800f6c0:	3b01      	subs	r3, #1
 800f6c2:	425a      	negs	r2, r3
 800f6c4:	f003 0307 	and.w	r3, r3, #7
 800f6c8:	f002 0207 	and.w	r2, r2, #7
 800f6cc:	bf58      	it	pl
 800f6ce:	4253      	negpl	r3, r2
 800f6d0:	2201      	movs	r2, #1
 800f6d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f6d6:	400b      	ands	r3, r1
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	dd0c      	ble.n	800f6f6 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800f6dc:	88fb      	ldrh	r3, [r7, #6]
 800f6de:	1e5a      	subs	r2, r3, #1
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	009b      	lsls	r3, r3, #2
 800f6e4:	4413      	add	r3, r2
 800f6e6:	00db      	lsls	r3, r3, #3
 800f6e8:	4a1a      	ldr	r2, [pc, #104]	; (800f754 <PrintSignals+0xd0>)
 800f6ea:	4413      	add	r3, r2
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	481a      	ldr	r0, [pc, #104]	; (800f758 <PrintSignals+0xd4>)
 800f6f0:	f016 fc66 	bl	8025fc0 <iprintf>
 800f6f4:	e00b      	b.n	800f70e <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800f6f6:	88fb      	ldrh	r3, [r7, #6]
 800f6f8:	1e5a      	subs	r2, r3, #1
 800f6fa:	4613      	mov	r3, r2
 800f6fc:	009b      	lsls	r3, r3, #2
 800f6fe:	4413      	add	r3, r2
 800f700:	00db      	lsls	r3, r3, #3
 800f702:	4a14      	ldr	r2, [pc, #80]	; (800f754 <PrintSignals+0xd0>)
 800f704:	4413      	add	r3, r2
 800f706:	4619      	mov	r1, r3
 800f708:	4814      	ldr	r0, [pc, #80]	; (800f75c <PrintSignals+0xd8>)
 800f70a:	f016 fc59 	bl	8025fc0 <iprintf>
		}

		if( (Traverser%2) == 0)
 800f70e:	88fb      	ldrh	r3, [r7, #6]
 800f710:	f003 0301 	and.w	r3, r3, #1
 800f714:	b29b      	uxth	r3, r3
 800f716:	2b00      	cmp	r3, #0
 800f718:	d104      	bne.n	800f724 <PrintSignals+0xa0>
		{
			printf("\n");
 800f71a:	200a      	movs	r0, #10
 800f71c:	f016 fc68 	bl	8025ff0 <putchar>
 800f720:	e000      	b.n	800f724 <PrintSignals+0xa0>
			continue;
 800f722:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800f724:	88fb      	ldrh	r3, [r7, #6]
 800f726:	3301      	adds	r3, #1
 800f728:	80fb      	strh	r3, [r7, #6]
 800f72a:	88fa      	ldrh	r2, [r7, #6]
 800f72c:	4b08      	ldr	r3, [pc, #32]	; (800f750 <PrintSignals+0xcc>)
 800f72e:	881b      	ldrh	r3, [r3, #0]
 800f730:	00db      	lsls	r3, r3, #3
 800f732:	429a      	cmp	r2, r3
 800f734:	ddb3      	ble.n	800f69e <PrintSignals+0x1a>
		}
	}
}
 800f736:	bf00      	nop
 800f738:	bf00      	nop
 800f73a:	3708      	adds	r7, #8
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}
 800f740:	20004e88 	.word	0x20004e88
 800f744:	20004e8c 	.word	0x20004e8c
 800f748:	20004c86 	.word	0x20004c86
 800f74c:	20005f90 	.word	0x20005f90
 800f750:	20004c84 	.word	0x20004c84
 800f754:	200054a0 	.word	0x200054a0
 800f758:	0802a338 	.word	0x0802a338
 800f75c:	0802a348 	.word	0x0802a348

0800f760 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800f766:	2300      	movs	r3, #0
 800f768:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800f76a:	2300      	movs	r3, #0
 800f76c:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800f76e:	2300      	movs	r3, #0
 800f770:	607b      	str	r3, [r7, #4]

	Get_time();
 800f772:	f7fd f9bb 	bl	800caec <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800f776:	4b21      	ldr	r3, [pc, #132]	; (800f7fc <GetTimeStamp+0x9c>)
 800f778:	781b      	ldrb	r3, [r3, #0]
 800f77a:	461a      	mov	r2, r3
 800f77c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800f780:	fb03 f202 	mul.w	r2, r3, r2
 800f784:	4b1d      	ldr	r3, [pc, #116]	; (800f7fc <GetTimeStamp+0x9c>)
 800f786:	785b      	ldrb	r3, [r3, #1]
 800f788:	4619      	mov	r1, r3
 800f78a:	460b      	mov	r3, r1
 800f78c:	011b      	lsls	r3, r3, #4
 800f78e:	1a5b      	subs	r3, r3, r1
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	4413      	add	r3, r2
 800f794:	4a19      	ldr	r2, [pc, #100]	; (800f7fc <GetTimeStamp+0x9c>)
 800f796:	7892      	ldrb	r2, [r2, #2]
 800f798:	4413      	add	r3, r2
 800f79a:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800f79c:	4b18      	ldr	r3, [pc, #96]	; (800f800 <GetTimeStamp+0xa0>)
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	68fa      	ldr	r2, [r7, #12]
 800f7a2:	429a      	cmp	r2, r3
 800f7a4:	d007      	beq.n	800f7b6 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800f7a6:	4a16      	ldr	r2, [pc, #88]	; (800f800 <GetTimeStamp+0xa0>)
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800f7ac:	f009 fcf2 	bl	8019194 <HAL_GetTick>
 800f7b0:	4603      	mov	r3, r0
 800f7b2:	4a14      	ldr	r2, [pc, #80]	; (800f804 <GetTimeStamp+0xa4>)
 800f7b4:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800f7b6:	4b13      	ldr	r3, [pc, #76]	; (800f804 <GetTimeStamp+0xa4>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	f000 fe1c 	bl	80103f8 <HAL_Elaps_Ticks>
 800f7c0:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800f7c2:	68fa      	ldr	r2, [r7, #12]
 800f7c4:	4613      	mov	r3, r2
 800f7c6:	009b      	lsls	r3, r3, #2
 800f7c8:	4413      	add	r3, r2
 800f7ca:	005b      	lsls	r3, r3, #1
 800f7cc:	4619      	mov	r1, r3
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	4a0d      	ldr	r2, [pc, #52]	; (800f808 <GetTimeStamp+0xa8>)
 800f7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f7d6:	095b      	lsrs	r3, r3, #5
 800f7d8:	440b      	add	r3, r1
 800f7da:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800f7dc:	4b0b      	ldr	r3, [pc, #44]	; (800f80c <GetTimeStamp+0xac>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d005      	beq.n	800f7f2 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800f7e6:	4a09      	ldr	r2, [pc, #36]	; (800f80c <GetTimeStamp+0xac>)
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800f7ec:	4a08      	ldr	r2, [pc, #32]	; (800f810 <GetTimeStamp+0xb0>)
 800f7ee:	68bb      	ldr	r3, [r7, #8]
 800f7f0:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800f7f2:	bf00      	nop
 800f7f4:	3710      	adds	r7, #16
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20003fc4 	.word	0x20003fc4
 800f800:	20006384 	.word	0x20006384
 800f804:	20006388 	.word	0x20006388
 800f808:	51eb851f 	.word	0x51eb851f
 800f80c:	2000638c 	.word	0x2000638c
 800f810:	2000549c 	.word	0x2000549c

0800f814 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800f814:	b490      	push	{r4, r7}
 800f816:	b082      	sub	sp, #8
 800f818:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800f81a:	2300      	movs	r3, #0
 800f81c:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800f81e:	79fb      	ldrb	r3, [r7, #7]
 800f820:	1c5a      	adds	r2, r3, #1
 800f822:	71fa      	strb	r2, [r7, #7]
 800f824:	461a      	mov	r2, r3
 800f826:	4613      	mov	r3, r2
 800f828:	009b      	lsls	r3, r3, #2
 800f82a:	4413      	add	r3, r2
 800f82c:	00db      	lsls	r3, r3, #3
 800f82e:	4acd      	ldr	r2, [pc, #820]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f830:	4413      	add	r3, r2
 800f832:	4acd      	ldr	r2, [pc, #820]	; (800fb68 <UpdateSIGNALSNames+0x354>)
 800f834:	6810      	ldr	r0, [r2, #0]
 800f836:	6018      	str	r0, [r3, #0]
 800f838:	8892      	ldrh	r2, [r2, #4]
 800f83a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800f83c:	79fb      	ldrb	r3, [r7, #7]
 800f83e:	1c5a      	adds	r2, r3, #1
 800f840:	71fa      	strb	r2, [r7, #7]
 800f842:	461a      	mov	r2, r3
 800f844:	4613      	mov	r3, r2
 800f846:	009b      	lsls	r3, r3, #2
 800f848:	4413      	add	r3, r2
 800f84a:	00db      	lsls	r3, r3, #3
 800f84c:	4ac5      	ldr	r2, [pc, #788]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f84e:	4413      	add	r3, r2
 800f850:	4ac6      	ldr	r2, [pc, #792]	; (800fb6c <UpdateSIGNALSNames+0x358>)
 800f852:	6810      	ldr	r0, [r2, #0]
 800f854:	6018      	str	r0, [r3, #0]
 800f856:	8892      	ldrh	r2, [r2, #4]
 800f858:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	1c5a      	adds	r2, r3, #1
 800f85e:	71fa      	strb	r2, [r7, #7]
 800f860:	461a      	mov	r2, r3
 800f862:	4613      	mov	r3, r2
 800f864:	009b      	lsls	r3, r3, #2
 800f866:	4413      	add	r3, r2
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	4abe      	ldr	r2, [pc, #760]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f86c:	4413      	add	r3, r2
 800f86e:	4ac0      	ldr	r2, [pc, #768]	; (800fb70 <UpdateSIGNALSNames+0x35c>)
 800f870:	6810      	ldr	r0, [r2, #0]
 800f872:	6018      	str	r0, [r3, #0]
 800f874:	8892      	ldrh	r2, [r2, #4]
 800f876:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800f878:	79fb      	ldrb	r3, [r7, #7]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	71fa      	strb	r2, [r7, #7]
 800f87e:	461a      	mov	r2, r3
 800f880:	4613      	mov	r3, r2
 800f882:	009b      	lsls	r3, r3, #2
 800f884:	4413      	add	r3, r2
 800f886:	00db      	lsls	r3, r3, #3
 800f888:	4ab6      	ldr	r2, [pc, #728]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f88a:	4413      	add	r3, r2
 800f88c:	4ab9      	ldr	r2, [pc, #740]	; (800fb74 <UpdateSIGNALSNames+0x360>)
 800f88e:	6810      	ldr	r0, [r2, #0]
 800f890:	6018      	str	r0, [r3, #0]
 800f892:	8892      	ldrh	r2, [r2, #4]
 800f894:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800f896:	79fb      	ldrb	r3, [r7, #7]
 800f898:	1c5a      	adds	r2, r3, #1
 800f89a:	71fa      	strb	r2, [r7, #7]
 800f89c:	461a      	mov	r2, r3
 800f89e:	4613      	mov	r3, r2
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4aaf      	ldr	r2, [pc, #700]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8a8:	4413      	add	r3, r2
 800f8aa:	4ab3      	ldr	r2, [pc, #716]	; (800fb78 <UpdateSIGNALSNames+0x364>)
 800f8ac:	6810      	ldr	r0, [r2, #0]
 800f8ae:	6018      	str	r0, [r3, #0]
 800f8b0:	8892      	ldrh	r2, [r2, #4]
 800f8b2:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800f8b4:	79fb      	ldrb	r3, [r7, #7]
 800f8b6:	1c5a      	adds	r2, r3, #1
 800f8b8:	71fa      	strb	r2, [r7, #7]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	4613      	mov	r3, r2
 800f8be:	009b      	lsls	r3, r3, #2
 800f8c0:	4413      	add	r3, r2
 800f8c2:	00db      	lsls	r3, r3, #3
 800f8c4:	4aa7      	ldr	r2, [pc, #668]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8c6:	4413      	add	r3, r2
 800f8c8:	4aac      	ldr	r2, [pc, #688]	; (800fb7c <UpdateSIGNALSNames+0x368>)
 800f8ca:	6810      	ldr	r0, [r2, #0]
 800f8cc:	6018      	str	r0, [r3, #0]
 800f8ce:	8891      	ldrh	r1, [r2, #4]
 800f8d0:	7992      	ldrb	r2, [r2, #6]
 800f8d2:	8099      	strh	r1, [r3, #4]
 800f8d4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800f8d6:	79fb      	ldrb	r3, [r7, #7]
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	71fa      	strb	r2, [r7, #7]
 800f8dc:	461a      	mov	r2, r3
 800f8de:	4613      	mov	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	4a9f      	ldr	r2, [pc, #636]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f8e8:	4413      	add	r3, r2
 800f8ea:	4aa5      	ldr	r2, [pc, #660]	; (800fb80 <UpdateSIGNALSNames+0x36c>)
 800f8ec:	6810      	ldr	r0, [r2, #0]
 800f8ee:	6018      	str	r0, [r3, #0]
 800f8f0:	8891      	ldrh	r1, [r2, #4]
 800f8f2:	7992      	ldrb	r2, [r2, #6]
 800f8f4:	8099      	strh	r1, [r3, #4]
 800f8f6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800f8f8:	79fb      	ldrb	r3, [r7, #7]
 800f8fa:	1c5a      	adds	r2, r3, #1
 800f8fc:	71fa      	strb	r2, [r7, #7]
 800f8fe:	461a      	mov	r2, r3
 800f900:	4613      	mov	r3, r2
 800f902:	009b      	lsls	r3, r3, #2
 800f904:	4413      	add	r3, r2
 800f906:	00db      	lsls	r3, r3, #3
 800f908:	4a96      	ldr	r2, [pc, #600]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f90a:	4413      	add	r3, r2
 800f90c:	4a9d      	ldr	r2, [pc, #628]	; (800fb84 <UpdateSIGNALSNames+0x370>)
 800f90e:	6810      	ldr	r0, [r2, #0]
 800f910:	6018      	str	r0, [r3, #0]
 800f912:	7912      	ldrb	r2, [r2, #4]
 800f914:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800f916:	79fb      	ldrb	r3, [r7, #7]
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	71fa      	strb	r2, [r7, #7]
 800f91c:	461a      	mov	r2, r3
 800f91e:	4613      	mov	r3, r2
 800f920:	009b      	lsls	r3, r3, #2
 800f922:	4413      	add	r3, r2
 800f924:	00db      	lsls	r3, r3, #3
 800f926:	4a8f      	ldr	r2, [pc, #572]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f928:	4413      	add	r3, r2
 800f92a:	4997      	ldr	r1, [pc, #604]	; (800fb88 <UpdateSIGNALSNames+0x374>)
 800f92c:	461a      	mov	r2, r3
 800f92e:	460b      	mov	r3, r1
 800f930:	cb03      	ldmia	r3!, {r0, r1}
 800f932:	6010      	str	r0, [r2, #0]
 800f934:	6051      	str	r1, [r2, #4]
 800f936:	781b      	ldrb	r3, [r3, #0]
 800f938:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800f93a:	79fb      	ldrb	r3, [r7, #7]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	71fa      	strb	r2, [r7, #7]
 800f940:	461a      	mov	r2, r3
 800f942:	4613      	mov	r3, r2
 800f944:	009b      	lsls	r3, r3, #2
 800f946:	4413      	add	r3, r2
 800f948:	00db      	lsls	r3, r3, #3
 800f94a:	4a86      	ldr	r2, [pc, #536]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f94c:	4413      	add	r3, r2
 800f94e:	4a8f      	ldr	r2, [pc, #572]	; (800fb8c <UpdateSIGNALSNames+0x378>)
 800f950:	6810      	ldr	r0, [r2, #0]
 800f952:	6018      	str	r0, [r3, #0]
 800f954:	8892      	ldrh	r2, [r2, #4]
 800f956:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800f958:	79fb      	ldrb	r3, [r7, #7]
 800f95a:	1c5a      	adds	r2, r3, #1
 800f95c:	71fa      	strb	r2, [r7, #7]
 800f95e:	461a      	mov	r2, r3
 800f960:	4613      	mov	r3, r2
 800f962:	009b      	lsls	r3, r3, #2
 800f964:	4413      	add	r3, r2
 800f966:	00db      	lsls	r3, r3, #3
 800f968:	4a7e      	ldr	r2, [pc, #504]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f96a:	4413      	add	r3, r2
 800f96c:	4988      	ldr	r1, [pc, #544]	; (800fb90 <UpdateSIGNALSNames+0x37c>)
 800f96e:	461a      	mov	r2, r3
 800f970:	460b      	mov	r3, r1
 800f972:	cb03      	ldmia	r3!, {r0, r1}
 800f974:	6010      	str	r0, [r2, #0]
 800f976:	6051      	str	r1, [r2, #4]
 800f978:	881b      	ldrh	r3, [r3, #0]
 800f97a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800f97c:	79fb      	ldrb	r3, [r7, #7]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	71fa      	strb	r2, [r7, #7]
 800f982:	461a      	mov	r2, r3
 800f984:	4613      	mov	r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4413      	add	r3, r2
 800f98a:	00db      	lsls	r3, r3, #3
 800f98c:	4a75      	ldr	r2, [pc, #468]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f98e:	4413      	add	r3, r2
 800f990:	4980      	ldr	r1, [pc, #512]	; (800fb94 <UpdateSIGNALSNames+0x380>)
 800f992:	461a      	mov	r2, r3
 800f994:	460b      	mov	r3, r1
 800f996:	cb03      	ldmia	r3!, {r0, r1}
 800f998:	6010      	str	r0, [r2, #0]
 800f99a:	6051      	str	r1, [r2, #4]
 800f99c:	8819      	ldrh	r1, [r3, #0]
 800f99e:	789b      	ldrb	r3, [r3, #2]
 800f9a0:	8111      	strh	r1, [r2, #8]
 800f9a2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800f9a4:	79fb      	ldrb	r3, [r7, #7]
 800f9a6:	1c5a      	adds	r2, r3, #1
 800f9a8:	71fa      	strb	r2, [r7, #7]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	4613      	mov	r3, r2
 800f9ae:	009b      	lsls	r3, r3, #2
 800f9b0:	4413      	add	r3, r2
 800f9b2:	00db      	lsls	r3, r3, #3
 800f9b4:	4a6b      	ldr	r2, [pc, #428]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9b6:	4413      	add	r3, r2
 800f9b8:	4977      	ldr	r1, [pc, #476]	; (800fb98 <UpdateSIGNALSNames+0x384>)
 800f9ba:	461a      	mov	r2, r3
 800f9bc:	460b      	mov	r3, r1
 800f9be:	cb03      	ldmia	r3!, {r0, r1}
 800f9c0:	6010      	str	r0, [r2, #0]
 800f9c2:	6051      	str	r1, [r2, #4]
 800f9c4:	881b      	ldrh	r3, [r3, #0]
 800f9c6:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800f9c8:	79fb      	ldrb	r3, [r7, #7]
 800f9ca:	1c5a      	adds	r2, r3, #1
 800f9cc:	71fa      	strb	r2, [r7, #7]
 800f9ce:	461a      	mov	r2, r3
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	00db      	lsls	r3, r3, #3
 800f9d8:	4a62      	ldr	r2, [pc, #392]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9da:	4413      	add	r3, r2
 800f9dc:	496f      	ldr	r1, [pc, #444]	; (800fb9c <UpdateSIGNALSNames+0x388>)
 800f9de:	461a      	mov	r2, r3
 800f9e0:	460b      	mov	r3, r1
 800f9e2:	cb03      	ldmia	r3!, {r0, r1}
 800f9e4:	6010      	str	r0, [r2, #0]
 800f9e6:	6051      	str	r1, [r2, #4]
 800f9e8:	881b      	ldrh	r3, [r3, #0]
 800f9ea:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800f9ec:	79fb      	ldrb	r3, [r7, #7]
 800f9ee:	1c5a      	adds	r2, r3, #1
 800f9f0:	71fa      	strb	r2, [r7, #7]
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	009b      	lsls	r3, r3, #2
 800f9f8:	4413      	add	r3, r2
 800f9fa:	00db      	lsls	r3, r3, #3
 800f9fc:	4a59      	ldr	r2, [pc, #356]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800f9fe:	4413      	add	r3, r2
 800fa00:	4967      	ldr	r1, [pc, #412]	; (800fba0 <UpdateSIGNALSNames+0x38c>)
 800fa02:	461a      	mov	r2, r3
 800fa04:	460b      	mov	r3, r1
 800fa06:	cb03      	ldmia	r3!, {r0, r1}
 800fa08:	6010      	str	r0, [r2, #0]
 800fa0a:	6051      	str	r1, [r2, #4]
 800fa0c:	8819      	ldrh	r1, [r3, #0]
 800fa0e:	789b      	ldrb	r3, [r3, #2]
 800fa10:	8111      	strh	r1, [r2, #8]
 800fa12:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800fa14:	79fb      	ldrb	r3, [r7, #7]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	71fa      	strb	r2, [r7, #7]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	4613      	mov	r3, r2
 800fa1e:	009b      	lsls	r3, r3, #2
 800fa20:	4413      	add	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	4a4f      	ldr	r2, [pc, #316]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa26:	4413      	add	r3, r2
 800fa28:	495e      	ldr	r1, [pc, #376]	; (800fba4 <UpdateSIGNALSNames+0x390>)
 800fa2a:	461a      	mov	r2, r3
 800fa2c:	460b      	mov	r3, r1
 800fa2e:	cb03      	ldmia	r3!, {r0, r1}
 800fa30:	6010      	str	r0, [r2, #0]
 800fa32:	6051      	str	r1, [r2, #4]
 800fa34:	881b      	ldrh	r3, [r3, #0]
 800fa36:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800fa38:	79fb      	ldrb	r3, [r7, #7]
 800fa3a:	1c5a      	adds	r2, r3, #1
 800fa3c:	71fa      	strb	r2, [r7, #7]
 800fa3e:	461a      	mov	r2, r3
 800fa40:	4613      	mov	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	4413      	add	r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	4a46      	ldr	r2, [pc, #280]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa4a:	4413      	add	r3, r2
 800fa4c:	4a56      	ldr	r2, [pc, #344]	; (800fba8 <UpdateSIGNALSNames+0x394>)
 800fa4e:	6810      	ldr	r0, [r2, #0]
 800fa50:	6018      	str	r0, [r3, #0]
 800fa52:	8891      	ldrh	r1, [r2, #4]
 800fa54:	7992      	ldrb	r2, [r2, #6]
 800fa56:	8099      	strh	r1, [r3, #4]
 800fa58:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800fa5a:	79fb      	ldrb	r3, [r7, #7]
 800fa5c:	1c5a      	adds	r2, r3, #1
 800fa5e:	71fa      	strb	r2, [r7, #7]
 800fa60:	461a      	mov	r2, r3
 800fa62:	4613      	mov	r3, r2
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	4413      	add	r3, r2
 800fa68:	00db      	lsls	r3, r3, #3
 800fa6a:	4a3e      	ldr	r2, [pc, #248]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa6c:	4413      	add	r3, r2
 800fa6e:	4a4f      	ldr	r2, [pc, #316]	; (800fbac <UpdateSIGNALSNames+0x398>)
 800fa70:	6810      	ldr	r0, [r2, #0]
 800fa72:	6018      	str	r0, [r3, #0]
 800fa74:	8891      	ldrh	r1, [r2, #4]
 800fa76:	7992      	ldrb	r2, [r2, #6]
 800fa78:	8099      	strh	r1, [r3, #4]
 800fa7a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800fa7c:	79fb      	ldrb	r3, [r7, #7]
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	71fa      	strb	r2, [r7, #7]
 800fa82:	461a      	mov	r2, r3
 800fa84:	4613      	mov	r3, r2
 800fa86:	009b      	lsls	r3, r3, #2
 800fa88:	4413      	add	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	4a35      	ldr	r2, [pc, #212]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fa8e:	4413      	add	r3, r2
 800fa90:	4a47      	ldr	r2, [pc, #284]	; (800fbb0 <UpdateSIGNALSNames+0x39c>)
 800fa92:	6810      	ldr	r0, [r2, #0]
 800fa94:	6018      	str	r0, [r3, #0]
 800fa96:	8891      	ldrh	r1, [r2, #4]
 800fa98:	7992      	ldrb	r2, [r2, #6]
 800fa9a:	8099      	strh	r1, [r3, #4]
 800fa9c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800fa9e:	79fb      	ldrb	r3, [r7, #7]
 800faa0:	1c5a      	adds	r2, r3, #1
 800faa2:	71fa      	strb	r2, [r7, #7]
 800faa4:	461a      	mov	r2, r3
 800faa6:	4613      	mov	r3, r2
 800faa8:	009b      	lsls	r3, r3, #2
 800faaa:	4413      	add	r3, r2
 800faac:	00db      	lsls	r3, r3, #3
 800faae:	4a2d      	ldr	r2, [pc, #180]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fab0:	4413      	add	r3, r2
 800fab2:	4a40      	ldr	r2, [pc, #256]	; (800fbb4 <UpdateSIGNALSNames+0x3a0>)
 800fab4:	6810      	ldr	r0, [r2, #0]
 800fab6:	6018      	str	r0, [r3, #0]
 800fab8:	8891      	ldrh	r1, [r2, #4]
 800faba:	7992      	ldrb	r2, [r2, #6]
 800fabc:	8099      	strh	r1, [r3, #4]
 800fabe:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800fac0:	79fb      	ldrb	r3, [r7, #7]
 800fac2:	1c5a      	adds	r2, r3, #1
 800fac4:	71fa      	strb	r2, [r7, #7]
 800fac6:	461a      	mov	r2, r3
 800fac8:	4613      	mov	r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	4413      	add	r3, r2
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	4a24      	ldr	r2, [pc, #144]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fad2:	4413      	add	r3, r2
 800fad4:	4938      	ldr	r1, [pc, #224]	; (800fbb8 <UpdateSIGNALSNames+0x3a4>)
 800fad6:	461a      	mov	r2, r3
 800fad8:	460b      	mov	r3, r1
 800fada:	cb03      	ldmia	r3!, {r0, r1}
 800fadc:	6010      	str	r0, [r2, #0]
 800fade:	6051      	str	r1, [r2, #4]
 800fae0:	8819      	ldrh	r1, [r3, #0]
 800fae2:	789b      	ldrb	r3, [r3, #2]
 800fae4:	8111      	strh	r1, [r2, #8]
 800fae6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800fae8:	79fb      	ldrb	r3, [r7, #7]
 800faea:	1c5a      	adds	r2, r3, #1
 800faec:	71fa      	strb	r2, [r7, #7]
 800faee:	461a      	mov	r2, r3
 800faf0:	4613      	mov	r3, r2
 800faf2:	009b      	lsls	r3, r3, #2
 800faf4:	4413      	add	r3, r2
 800faf6:	00db      	lsls	r3, r3, #3
 800faf8:	4a1a      	ldr	r2, [pc, #104]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fafa:	4413      	add	r3, r2
 800fafc:	4a2f      	ldr	r2, [pc, #188]	; (800fbbc <UpdateSIGNALSNames+0x3a8>)
 800fafe:	6810      	ldr	r0, [r2, #0]
 800fb00:	6018      	str	r0, [r3, #0]
 800fb02:	8891      	ldrh	r1, [r2, #4]
 800fb04:	7992      	ldrb	r2, [r2, #6]
 800fb06:	8099      	strh	r1, [r3, #4]
 800fb08:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	1c5a      	adds	r2, r3, #1
 800fb0e:	71fa      	strb	r2, [r7, #7]
 800fb10:	461a      	mov	r2, r3
 800fb12:	4613      	mov	r3, r2
 800fb14:	009b      	lsls	r3, r3, #2
 800fb16:	4413      	add	r3, r2
 800fb18:	00db      	lsls	r3, r3, #3
 800fb1a:	4a12      	ldr	r2, [pc, #72]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb1c:	4413      	add	r3, r2
 800fb1e:	4a28      	ldr	r2, [pc, #160]	; (800fbc0 <UpdateSIGNALSNames+0x3ac>)
 800fb20:	6810      	ldr	r0, [r2, #0]
 800fb22:	6018      	str	r0, [r3, #0]
 800fb24:	8891      	ldrh	r1, [r2, #4]
 800fb26:	7992      	ldrb	r2, [r2, #6]
 800fb28:	8099      	strh	r1, [r3, #4]
 800fb2a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800fb2c:	79fb      	ldrb	r3, [r7, #7]
 800fb2e:	1c5a      	adds	r2, r3, #1
 800fb30:	71fa      	strb	r2, [r7, #7]
 800fb32:	461a      	mov	r2, r3
 800fb34:	4613      	mov	r3, r2
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	4a09      	ldr	r2, [pc, #36]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb3e:	4413      	add	r3, r2
 800fb40:	4a20      	ldr	r2, [pc, #128]	; (800fbc4 <UpdateSIGNALSNames+0x3b0>)
 800fb42:	6810      	ldr	r0, [r2, #0]
 800fb44:	6018      	str	r0, [r3, #0]
 800fb46:	8891      	ldrh	r1, [r2, #4]
 800fb48:	7992      	ldrb	r2, [r2, #6]
 800fb4a:	8099      	strh	r1, [r3, #4]
 800fb4c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800fb4e:	79fb      	ldrb	r3, [r7, #7]
 800fb50:	1c5a      	adds	r2, r3, #1
 800fb52:	71fa      	strb	r2, [r7, #7]
 800fb54:	461a      	mov	r2, r3
 800fb56:	4613      	mov	r3, r2
 800fb58:	009b      	lsls	r3, r3, #2
 800fb5a:	4413      	add	r3, r2
 800fb5c:	00db      	lsls	r3, r3, #3
 800fb5e:	4a01      	ldr	r2, [pc, #4]	; (800fb64 <UpdateSIGNALSNames+0x350>)
 800fb60:	4413      	add	r3, r2
 800fb62:	e031      	b.n	800fbc8 <UpdateSIGNALSNames+0x3b4>
 800fb64:	200054a0 	.word	0x200054a0
 800fb68:	0802a358 	.word	0x0802a358
 800fb6c:	0802a360 	.word	0x0802a360
 800fb70:	0802a368 	.word	0x0802a368
 800fb74:	0802a370 	.word	0x0802a370
 800fb78:	0802a378 	.word	0x0802a378
 800fb7c:	0802a380 	.word	0x0802a380
 800fb80:	0802a388 	.word	0x0802a388
 800fb84:	0802a390 	.word	0x0802a390
 800fb88:	0802a398 	.word	0x0802a398
 800fb8c:	0802a3a4 	.word	0x0802a3a4
 800fb90:	0802a3ac 	.word	0x0802a3ac
 800fb94:	0802a3b8 	.word	0x0802a3b8
 800fb98:	0802a3c4 	.word	0x0802a3c4
 800fb9c:	0802a3d0 	.word	0x0802a3d0
 800fba0:	0802a3dc 	.word	0x0802a3dc
 800fba4:	0802a3e8 	.word	0x0802a3e8
 800fba8:	0802a3f4 	.word	0x0802a3f4
 800fbac:	0802a3fc 	.word	0x0802a3fc
 800fbb0:	0802a404 	.word	0x0802a404
 800fbb4:	0802a40c 	.word	0x0802a40c
 800fbb8:	0802a414 	.word	0x0802a414
 800fbbc:	0802a420 	.word	0x0802a420
 800fbc0:	0802a428 	.word	0x0802a428
 800fbc4:	0802a430 	.word	0x0802a430
 800fbc8:	4acd      	ldr	r2, [pc, #820]	; (800ff00 <UpdateSIGNALSNames+0x6ec>)
 800fbca:	6810      	ldr	r0, [r2, #0]
 800fbcc:	6018      	str	r0, [r3, #0]
 800fbce:	8891      	ldrh	r1, [r2, #4]
 800fbd0:	7992      	ldrb	r2, [r2, #6]
 800fbd2:	8099      	strh	r1, [r3, #4]
 800fbd4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
 800fbd8:	1c5a      	adds	r2, r3, #1
 800fbda:	71fa      	strb	r2, [r7, #7]
 800fbdc:	461a      	mov	r2, r3
 800fbde:	4613      	mov	r3, r2
 800fbe0:	009b      	lsls	r3, r3, #2
 800fbe2:	4413      	add	r3, r2
 800fbe4:	00db      	lsls	r3, r3, #3
 800fbe6:	4ac7      	ldr	r2, [pc, #796]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fbe8:	4413      	add	r3, r2
 800fbea:	4ac7      	ldr	r2, [pc, #796]	; (800ff08 <UpdateSIGNALSNames+0x6f4>)
 800fbec:	6810      	ldr	r0, [r2, #0]
 800fbee:	6018      	str	r0, [r3, #0]
 800fbf0:	8891      	ldrh	r1, [r2, #4]
 800fbf2:	7992      	ldrb	r2, [r2, #6]
 800fbf4:	8099      	strh	r1, [r3, #4]
 800fbf6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800fbf8:	79fb      	ldrb	r3, [r7, #7]
 800fbfa:	1c5a      	adds	r2, r3, #1
 800fbfc:	71fa      	strb	r2, [r7, #7]
 800fbfe:	461a      	mov	r2, r3
 800fc00:	4613      	mov	r3, r2
 800fc02:	009b      	lsls	r3, r3, #2
 800fc04:	4413      	add	r3, r2
 800fc06:	00db      	lsls	r3, r3, #3
 800fc08:	4abe      	ldr	r2, [pc, #760]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc0a:	4413      	add	r3, r2
 800fc0c:	4abf      	ldr	r2, [pc, #764]	; (800ff0c <UpdateSIGNALSNames+0x6f8>)
 800fc0e:	6810      	ldr	r0, [r2, #0]
 800fc10:	6018      	str	r0, [r3, #0]
 800fc12:	8891      	ldrh	r1, [r2, #4]
 800fc14:	7992      	ldrb	r2, [r2, #6]
 800fc16:	8099      	strh	r1, [r3, #4]
 800fc18:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	1c5a      	adds	r2, r3, #1
 800fc1e:	71fa      	strb	r2, [r7, #7]
 800fc20:	461a      	mov	r2, r3
 800fc22:	4613      	mov	r3, r2
 800fc24:	009b      	lsls	r3, r3, #2
 800fc26:	4413      	add	r3, r2
 800fc28:	00db      	lsls	r3, r3, #3
 800fc2a:	4ab6      	ldr	r2, [pc, #728]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc2c:	4413      	add	r3, r2
 800fc2e:	4ab8      	ldr	r2, [pc, #736]	; (800ff10 <UpdateSIGNALSNames+0x6fc>)
 800fc30:	6810      	ldr	r0, [r2, #0]
 800fc32:	6018      	str	r0, [r3, #0]
 800fc34:	8891      	ldrh	r1, [r2, #4]
 800fc36:	7992      	ldrb	r2, [r2, #6]
 800fc38:	8099      	strh	r1, [r3, #4]
 800fc3a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800fc3c:	79fb      	ldrb	r3, [r7, #7]
 800fc3e:	1c5a      	adds	r2, r3, #1
 800fc40:	71fa      	strb	r2, [r7, #7]
 800fc42:	461a      	mov	r2, r3
 800fc44:	4613      	mov	r3, r2
 800fc46:	009b      	lsls	r3, r3, #2
 800fc48:	4413      	add	r3, r2
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	4aad      	ldr	r2, [pc, #692]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc4e:	4413      	add	r3, r2
 800fc50:	49b0      	ldr	r1, [pc, #704]	; (800ff14 <UpdateSIGNALSNames+0x700>)
 800fc52:	461a      	mov	r2, r3
 800fc54:	460b      	mov	r3, r1
 800fc56:	cb03      	ldmia	r3!, {r0, r1}
 800fc58:	6010      	str	r0, [r2, #0]
 800fc5a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800fc5c:	79fb      	ldrb	r3, [r7, #7]
 800fc5e:	1c5a      	adds	r2, r3, #1
 800fc60:	71fa      	strb	r2, [r7, #7]
 800fc62:	461a      	mov	r2, r3
 800fc64:	4613      	mov	r3, r2
 800fc66:	009b      	lsls	r3, r3, #2
 800fc68:	4413      	add	r3, r2
 800fc6a:	00db      	lsls	r3, r3, #3
 800fc6c:	4aa5      	ldr	r2, [pc, #660]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc6e:	4413      	add	r3, r2
 800fc70:	49a9      	ldr	r1, [pc, #676]	; (800ff18 <UpdateSIGNALSNames+0x704>)
 800fc72:	461a      	mov	r2, r3
 800fc74:	460b      	mov	r3, r1
 800fc76:	cb03      	ldmia	r3!, {r0, r1}
 800fc78:	6010      	str	r0, [r2, #0]
 800fc7a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800fc7c:	79fb      	ldrb	r3, [r7, #7]
 800fc7e:	1c5a      	adds	r2, r3, #1
 800fc80:	71fa      	strb	r2, [r7, #7]
 800fc82:	461a      	mov	r2, r3
 800fc84:	4613      	mov	r3, r2
 800fc86:	009b      	lsls	r3, r3, #2
 800fc88:	4413      	add	r3, r2
 800fc8a:	00db      	lsls	r3, r3, #3
 800fc8c:	4a9d      	ldr	r2, [pc, #628]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fc8e:	4413      	add	r3, r2
 800fc90:	49a2      	ldr	r1, [pc, #648]	; (800ff1c <UpdateSIGNALSNames+0x708>)
 800fc92:	461a      	mov	r2, r3
 800fc94:	460b      	mov	r3, r1
 800fc96:	cb03      	ldmia	r3!, {r0, r1}
 800fc98:	6010      	str	r0, [r2, #0]
 800fc9a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800fc9c:	79fb      	ldrb	r3, [r7, #7]
 800fc9e:	1c5a      	adds	r2, r3, #1
 800fca0:	71fa      	strb	r2, [r7, #7]
 800fca2:	461a      	mov	r2, r3
 800fca4:	4613      	mov	r3, r2
 800fca6:	009b      	lsls	r3, r3, #2
 800fca8:	4413      	add	r3, r2
 800fcaa:	00db      	lsls	r3, r3, #3
 800fcac:	4a95      	ldr	r2, [pc, #596]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcae:	4413      	add	r3, r2
 800fcb0:	499b      	ldr	r1, [pc, #620]	; (800ff20 <UpdateSIGNALSNames+0x70c>)
 800fcb2:	461a      	mov	r2, r3
 800fcb4:	460b      	mov	r3, r1
 800fcb6:	cb03      	ldmia	r3!, {r0, r1}
 800fcb8:	6010      	str	r0, [r2, #0]
 800fcba:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800fcbc:	79fb      	ldrb	r3, [r7, #7]
 800fcbe:	1c5a      	adds	r2, r3, #1
 800fcc0:	71fa      	strb	r2, [r7, #7]
 800fcc2:	461a      	mov	r2, r3
 800fcc4:	4613      	mov	r3, r2
 800fcc6:	009b      	lsls	r3, r3, #2
 800fcc8:	4413      	add	r3, r2
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	4a8d      	ldr	r2, [pc, #564]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcce:	4413      	add	r3, r2
 800fcd0:	4994      	ldr	r1, [pc, #592]	; (800ff24 <UpdateSIGNALSNames+0x710>)
 800fcd2:	461a      	mov	r2, r3
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	cb03      	ldmia	r3!, {r0, r1}
 800fcd8:	6010      	str	r0, [r2, #0]
 800fcda:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	1c5a      	adds	r2, r3, #1
 800fce0:	71fa      	strb	r2, [r7, #7]
 800fce2:	461a      	mov	r2, r3
 800fce4:	4613      	mov	r3, r2
 800fce6:	009b      	lsls	r3, r3, #2
 800fce8:	4413      	add	r3, r2
 800fcea:	00db      	lsls	r3, r3, #3
 800fcec:	4a85      	ldr	r2, [pc, #532]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fcee:	4413      	add	r3, r2
 800fcf0:	498d      	ldr	r1, [pc, #564]	; (800ff28 <UpdateSIGNALSNames+0x714>)
 800fcf2:	461a      	mov	r2, r3
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	cb03      	ldmia	r3!, {r0, r1}
 800fcf8:	6010      	str	r0, [r2, #0]
 800fcfa:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800fcfc:	79fb      	ldrb	r3, [r7, #7]
 800fcfe:	1c5a      	adds	r2, r3, #1
 800fd00:	71fa      	strb	r2, [r7, #7]
 800fd02:	461a      	mov	r2, r3
 800fd04:	4613      	mov	r3, r2
 800fd06:	009b      	lsls	r3, r3, #2
 800fd08:	4413      	add	r3, r2
 800fd0a:	00db      	lsls	r3, r3, #3
 800fd0c:	4a7d      	ldr	r2, [pc, #500]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd0e:	4413      	add	r3, r2
 800fd10:	4986      	ldr	r1, [pc, #536]	; (800ff2c <UpdateSIGNALSNames+0x718>)
 800fd12:	461a      	mov	r2, r3
 800fd14:	460b      	mov	r3, r1
 800fd16:	cb03      	ldmia	r3!, {r0, r1}
 800fd18:	6010      	str	r0, [r2, #0]
 800fd1a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800fd1c:	79fb      	ldrb	r3, [r7, #7]
 800fd1e:	1c5a      	adds	r2, r3, #1
 800fd20:	71fa      	strb	r2, [r7, #7]
 800fd22:	461a      	mov	r2, r3
 800fd24:	4613      	mov	r3, r2
 800fd26:	009b      	lsls	r3, r3, #2
 800fd28:	4413      	add	r3, r2
 800fd2a:	00db      	lsls	r3, r3, #3
 800fd2c:	4a75      	ldr	r2, [pc, #468]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd2e:	4413      	add	r3, r2
 800fd30:	497f      	ldr	r1, [pc, #508]	; (800ff30 <UpdateSIGNALSNames+0x71c>)
 800fd32:	461a      	mov	r2, r3
 800fd34:	460b      	mov	r3, r1
 800fd36:	cb03      	ldmia	r3!, {r0, r1}
 800fd38:	6010      	str	r0, [r2, #0]
 800fd3a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800fd3c:	79fb      	ldrb	r3, [r7, #7]
 800fd3e:	1c5a      	adds	r2, r3, #1
 800fd40:	71fa      	strb	r2, [r7, #7]
 800fd42:	461a      	mov	r2, r3
 800fd44:	4613      	mov	r3, r2
 800fd46:	009b      	lsls	r3, r3, #2
 800fd48:	4413      	add	r3, r2
 800fd4a:	00db      	lsls	r3, r3, #3
 800fd4c:	4a6d      	ldr	r2, [pc, #436]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd4e:	4413      	add	r3, r2
 800fd50:	4978      	ldr	r1, [pc, #480]	; (800ff34 <UpdateSIGNALSNames+0x720>)
 800fd52:	461a      	mov	r2, r3
 800fd54:	460b      	mov	r3, r1
 800fd56:	cb03      	ldmia	r3!, {r0, r1}
 800fd58:	6010      	str	r0, [r2, #0]
 800fd5a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800fd5c:	79fb      	ldrb	r3, [r7, #7]
 800fd5e:	1c5a      	adds	r2, r3, #1
 800fd60:	71fa      	strb	r2, [r7, #7]
 800fd62:	461a      	mov	r2, r3
 800fd64:	4613      	mov	r3, r2
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4413      	add	r3, r2
 800fd6a:	00db      	lsls	r3, r3, #3
 800fd6c:	4a65      	ldr	r2, [pc, #404]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd6e:	4413      	add	r3, r2
 800fd70:	4971      	ldr	r1, [pc, #452]	; (800ff38 <UpdateSIGNALSNames+0x724>)
 800fd72:	461a      	mov	r2, r3
 800fd74:	460b      	mov	r3, r1
 800fd76:	cb03      	ldmia	r3!, {r0, r1}
 800fd78:	6010      	str	r0, [r2, #0]
 800fd7a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	1c5a      	adds	r2, r3, #1
 800fd80:	71fa      	strb	r2, [r7, #7]
 800fd82:	461a      	mov	r2, r3
 800fd84:	4613      	mov	r3, r2
 800fd86:	009b      	lsls	r3, r3, #2
 800fd88:	4413      	add	r3, r2
 800fd8a:	00db      	lsls	r3, r3, #3
 800fd8c:	4a5d      	ldr	r2, [pc, #372]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fd8e:	4413      	add	r3, r2
 800fd90:	496a      	ldr	r1, [pc, #424]	; (800ff3c <UpdateSIGNALSNames+0x728>)
 800fd92:	461a      	mov	r2, r3
 800fd94:	460b      	mov	r3, r1
 800fd96:	cb03      	ldmia	r3!, {r0, r1}
 800fd98:	6010      	str	r0, [r2, #0]
 800fd9a:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800fd9c:	79fb      	ldrb	r3, [r7, #7]
 800fd9e:	1c5a      	adds	r2, r3, #1
 800fda0:	71fa      	strb	r2, [r7, #7]
 800fda2:	461a      	mov	r2, r3
 800fda4:	4613      	mov	r3, r2
 800fda6:	009b      	lsls	r3, r3, #2
 800fda8:	4413      	add	r3, r2
 800fdaa:	00db      	lsls	r3, r3, #3
 800fdac:	4a55      	ldr	r2, [pc, #340]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdae:	4413      	add	r3, r2
 800fdb0:	4963      	ldr	r1, [pc, #396]	; (800ff40 <UpdateSIGNALSNames+0x72c>)
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	cb03      	ldmia	r3!, {r0, r1}
 800fdb8:	6010      	str	r0, [r2, #0]
 800fdba:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800fdbc:	79fb      	ldrb	r3, [r7, #7]
 800fdbe:	1c5a      	adds	r2, r3, #1
 800fdc0:	71fa      	strb	r2, [r7, #7]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	4413      	add	r3, r2
 800fdca:	00db      	lsls	r3, r3, #3
 800fdcc:	4a4d      	ldr	r2, [pc, #308]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdce:	4413      	add	r3, r2
 800fdd0:	495c      	ldr	r1, [pc, #368]	; (800ff44 <UpdateSIGNALSNames+0x730>)
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	460b      	mov	r3, r1
 800fdd6:	cb03      	ldmia	r3!, {r0, r1}
 800fdd8:	6010      	str	r0, [r2, #0]
 800fdda:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	71fa      	strb	r2, [r7, #7]
 800fde2:	461a      	mov	r2, r3
 800fde4:	4613      	mov	r3, r2
 800fde6:	009b      	lsls	r3, r3, #2
 800fde8:	4413      	add	r3, r2
 800fdea:	00db      	lsls	r3, r3, #3
 800fdec:	4a45      	ldr	r2, [pc, #276]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fdee:	4413      	add	r3, r2
 800fdf0:	4a55      	ldr	r2, [pc, #340]	; (800ff48 <UpdateSIGNALSNames+0x734>)
 800fdf2:	461c      	mov	r4, r3
 800fdf4:	4613      	mov	r3, r2
 800fdf6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fdf8:	6020      	str	r0, [r4, #0]
 800fdfa:	6061      	str	r1, [r4, #4]
 800fdfc:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	1c5a      	adds	r2, r3, #1
 800fe02:	71fa      	strb	r2, [r7, #7]
 800fe04:	461a      	mov	r2, r3
 800fe06:	4613      	mov	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	4413      	add	r3, r2
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4a3d      	ldr	r2, [pc, #244]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe10:	4413      	add	r3, r2
 800fe12:	494e      	ldr	r1, [pc, #312]	; (800ff4c <UpdateSIGNALSNames+0x738>)
 800fe14:	461a      	mov	r2, r3
 800fe16:	460b      	mov	r3, r1
 800fe18:	cb03      	ldmia	r3!, {r0, r1}
 800fe1a:	6010      	str	r0, [r2, #0]
 800fe1c:	6051      	str	r1, [r2, #4]
 800fe1e:	8819      	ldrh	r1, [r3, #0]
 800fe20:	789b      	ldrb	r3, [r3, #2]
 800fe22:	8111      	strh	r1, [r2, #8]
 800fe24:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800fe26:	79fb      	ldrb	r3, [r7, #7]
 800fe28:	1c5a      	adds	r2, r3, #1
 800fe2a:	71fa      	strb	r2, [r7, #7]
 800fe2c:	461a      	mov	r2, r3
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	00db      	lsls	r3, r3, #3
 800fe36:	4a33      	ldr	r2, [pc, #204]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe38:	4413      	add	r3, r2
 800fe3a:	4a45      	ldr	r2, [pc, #276]	; (800ff50 <UpdateSIGNALSNames+0x73c>)
 800fe3c:	461c      	mov	r4, r3
 800fe3e:	4613      	mov	r3, r2
 800fe40:	cb07      	ldmia	r3!, {r0, r1, r2}
 800fe42:	6020      	str	r0, [r4, #0]
 800fe44:	6061      	str	r1, [r4, #4]
 800fe46:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800fe48:	79fb      	ldrb	r3, [r7, #7]
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	71fa      	strb	r2, [r7, #7]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	4613      	mov	r3, r2
 800fe52:	009b      	lsls	r3, r3, #2
 800fe54:	4413      	add	r3, r2
 800fe56:	00db      	lsls	r3, r3, #3
 800fe58:	4a2a      	ldr	r2, [pc, #168]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe5a:	4413      	add	r3, r2
 800fe5c:	493d      	ldr	r1, [pc, #244]	; (800ff54 <UpdateSIGNALSNames+0x740>)
 800fe5e:	461a      	mov	r2, r3
 800fe60:	460b      	mov	r3, r1
 800fe62:	cb03      	ldmia	r3!, {r0, r1}
 800fe64:	6010      	str	r0, [r2, #0]
 800fe66:	6051      	str	r1, [r2, #4]
 800fe68:	8819      	ldrh	r1, [r3, #0]
 800fe6a:	789b      	ldrb	r3, [r3, #2]
 800fe6c:	8111      	strh	r1, [r2, #8]
 800fe6e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800fe70:	79fb      	ldrb	r3, [r7, #7]
 800fe72:	1c5a      	adds	r2, r3, #1
 800fe74:	71fa      	strb	r2, [r7, #7]
 800fe76:	461a      	mov	r2, r3
 800fe78:	4613      	mov	r3, r2
 800fe7a:	009b      	lsls	r3, r3, #2
 800fe7c:	4413      	add	r3, r2
 800fe7e:	00db      	lsls	r3, r3, #3
 800fe80:	4a20      	ldr	r2, [pc, #128]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fe82:	4413      	add	r3, r2
 800fe84:	4934      	ldr	r1, [pc, #208]	; (800ff58 <UpdateSIGNALSNames+0x744>)
 800fe86:	461a      	mov	r2, r3
 800fe88:	460b      	mov	r3, r1
 800fe8a:	cb03      	ldmia	r3!, {r0, r1}
 800fe8c:	6010      	str	r0, [r2, #0]
 800fe8e:	6051      	str	r1, [r2, #4]
 800fe90:	8819      	ldrh	r1, [r3, #0]
 800fe92:	789b      	ldrb	r3, [r3, #2]
 800fe94:	8111      	strh	r1, [r2, #8]
 800fe96:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800fe98:	79fb      	ldrb	r3, [r7, #7]
 800fe9a:	1c5a      	adds	r2, r3, #1
 800fe9c:	71fa      	strb	r2, [r7, #7]
 800fe9e:	461a      	mov	r2, r3
 800fea0:	4613      	mov	r3, r2
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	4413      	add	r3, r2
 800fea6:	00db      	lsls	r3, r3, #3
 800fea8:	4a16      	ldr	r2, [pc, #88]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800feaa:	4413      	add	r3, r2
 800feac:	4a2b      	ldr	r2, [pc, #172]	; (800ff5c <UpdateSIGNALSNames+0x748>)
 800feae:	461c      	mov	r4, r3
 800feb0:	4613      	mov	r3, r2
 800feb2:	cb07      	ldmia	r3!, {r0, r1, r2}
 800feb4:	6020      	str	r0, [r4, #0]
 800feb6:	6061      	str	r1, [r4, #4]
 800feb8:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800feba:	79fb      	ldrb	r3, [r7, #7]
 800febc:	1c5a      	adds	r2, r3, #1
 800febe:	71fa      	strb	r2, [r7, #7]
 800fec0:	461a      	mov	r2, r3
 800fec2:	4613      	mov	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4413      	add	r3, r2
 800fec8:	00db      	lsls	r3, r3, #3
 800feca:	4a0e      	ldr	r2, [pc, #56]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fecc:	4413      	add	r3, r2
 800fece:	4924      	ldr	r1, [pc, #144]	; (800ff60 <UpdateSIGNALSNames+0x74c>)
 800fed0:	461a      	mov	r2, r3
 800fed2:	460b      	mov	r3, r1
 800fed4:	cb03      	ldmia	r3!, {r0, r1}
 800fed6:	6010      	str	r0, [r2, #0]
 800fed8:	6051      	str	r1, [r2, #4]
 800feda:	8819      	ldrh	r1, [r3, #0]
 800fedc:	789b      	ldrb	r3, [r3, #2]
 800fede:	8111      	strh	r1, [r2, #8]
 800fee0:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800fee2:	79fb      	ldrb	r3, [r7, #7]
 800fee4:	1c5a      	adds	r2, r3, #1
 800fee6:	71fa      	strb	r2, [r7, #7]
 800fee8:	461a      	mov	r2, r3
 800feea:	4613      	mov	r3, r2
 800feec:	009b      	lsls	r3, r3, #2
 800feee:	4413      	add	r3, r2
 800fef0:	00db      	lsls	r3, r3, #3
 800fef2:	4a04      	ldr	r2, [pc, #16]	; (800ff04 <UpdateSIGNALSNames+0x6f0>)
 800fef4:	4413      	add	r3, r2
 800fef6:	4a1b      	ldr	r2, [pc, #108]	; (800ff64 <UpdateSIGNALSNames+0x750>)
 800fef8:	6810      	ldr	r0, [r2, #0]
 800fefa:	6018      	str	r0, [r3, #0]
 800fefc:	e034      	b.n	800ff68 <UpdateSIGNALSNames+0x754>
 800fefe:	bf00      	nop
 800ff00:	0802a438 	.word	0x0802a438
 800ff04:	200054a0 	.word	0x200054a0
 800ff08:	0802a440 	.word	0x0802a440
 800ff0c:	0802a448 	.word	0x0802a448
 800ff10:	0802a450 	.word	0x0802a450
 800ff14:	0802a458 	.word	0x0802a458
 800ff18:	0802a460 	.word	0x0802a460
 800ff1c:	0802a468 	.word	0x0802a468
 800ff20:	0802a470 	.word	0x0802a470
 800ff24:	0802a478 	.word	0x0802a478
 800ff28:	0802a480 	.word	0x0802a480
 800ff2c:	0802a488 	.word	0x0802a488
 800ff30:	0802a490 	.word	0x0802a490
 800ff34:	0802a498 	.word	0x0802a498
 800ff38:	0802a4a0 	.word	0x0802a4a0
 800ff3c:	0802a4a8 	.word	0x0802a4a8
 800ff40:	0802a4b0 	.word	0x0802a4b0
 800ff44:	0802a4b8 	.word	0x0802a4b8
 800ff48:	0802a4c0 	.word	0x0802a4c0
 800ff4c:	0802a4cc 	.word	0x0802a4cc
 800ff50:	0802a4d8 	.word	0x0802a4d8
 800ff54:	0802a4e4 	.word	0x0802a4e4
 800ff58:	0802a4f0 	.word	0x0802a4f0
 800ff5c:	0802a4fc 	.word	0x0802a4fc
 800ff60:	0802a508 	.word	0x0802a508
 800ff64:	0802a514 	.word	0x0802a514
 800ff68:	8891      	ldrh	r1, [r2, #4]
 800ff6a:	7992      	ldrb	r2, [r2, #6]
 800ff6c:	8099      	strh	r1, [r3, #4]
 800ff6e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800ff70:	79fb      	ldrb	r3, [r7, #7]
 800ff72:	1c5a      	adds	r2, r3, #1
 800ff74:	71fa      	strb	r2, [r7, #7]
 800ff76:	461a      	mov	r2, r3
 800ff78:	4613      	mov	r3, r2
 800ff7a:	009b      	lsls	r3, r3, #2
 800ff7c:	4413      	add	r3, r2
 800ff7e:	00db      	lsls	r3, r3, #3
 800ff80:	4a82      	ldr	r2, [pc, #520]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ff82:	4413      	add	r3, r2
 800ff84:	4a82      	ldr	r2, [pc, #520]	; (8010190 <UpdateSIGNALSNames+0x97c>)
 800ff86:	6810      	ldr	r0, [r2, #0]
 800ff88:	6018      	str	r0, [r3, #0]
 800ff8a:	8891      	ldrh	r1, [r2, #4]
 800ff8c:	7992      	ldrb	r2, [r2, #6]
 800ff8e:	8099      	strh	r1, [r3, #4]
 800ff90:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800ff92:	79fb      	ldrb	r3, [r7, #7]
 800ff94:	1c5a      	adds	r2, r3, #1
 800ff96:	71fa      	strb	r2, [r7, #7]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4613      	mov	r3, r2
 800ff9c:	009b      	lsls	r3, r3, #2
 800ff9e:	4413      	add	r3, r2
 800ffa0:	00db      	lsls	r3, r3, #3
 800ffa2:	4a7a      	ldr	r2, [pc, #488]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffa4:	4413      	add	r3, r2
 800ffa6:	4a7b      	ldr	r2, [pc, #492]	; (8010194 <UpdateSIGNALSNames+0x980>)
 800ffa8:	6810      	ldr	r0, [r2, #0]
 800ffaa:	6018      	str	r0, [r3, #0]
 800ffac:	8891      	ldrh	r1, [r2, #4]
 800ffae:	7992      	ldrb	r2, [r2, #6]
 800ffb0:	8099      	strh	r1, [r3, #4]
 800ffb2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800ffb4:	79fb      	ldrb	r3, [r7, #7]
 800ffb6:	1c5a      	adds	r2, r3, #1
 800ffb8:	71fa      	strb	r2, [r7, #7]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	4613      	mov	r3, r2
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	4413      	add	r3, r2
 800ffc2:	00db      	lsls	r3, r3, #3
 800ffc4:	4a71      	ldr	r2, [pc, #452]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffc6:	4413      	add	r3, r2
 800ffc8:	4a73      	ldr	r2, [pc, #460]	; (8010198 <UpdateSIGNALSNames+0x984>)
 800ffca:	6810      	ldr	r0, [r2, #0]
 800ffcc:	6018      	str	r0, [r3, #0]
 800ffce:	8891      	ldrh	r1, [r2, #4]
 800ffd0:	7992      	ldrb	r2, [r2, #6]
 800ffd2:	8099      	strh	r1, [r3, #4]
 800ffd4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800ffd6:	79fb      	ldrb	r3, [r7, #7]
 800ffd8:	1c5a      	adds	r2, r3, #1
 800ffda:	71fa      	strb	r2, [r7, #7]
 800ffdc:	461a      	mov	r2, r3
 800ffde:	4613      	mov	r3, r2
 800ffe0:	009b      	lsls	r3, r3, #2
 800ffe2:	4413      	add	r3, r2
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	4a69      	ldr	r2, [pc, #420]	; (801018c <UpdateSIGNALSNames+0x978>)
 800ffe8:	4413      	add	r3, r2
 800ffea:	4a6c      	ldr	r2, [pc, #432]	; (801019c <UpdateSIGNALSNames+0x988>)
 800ffec:	6810      	ldr	r0, [r2, #0]
 800ffee:	6018      	str	r0, [r3, #0]
 800fff0:	8891      	ldrh	r1, [r2, #4]
 800fff2:	7992      	ldrb	r2, [r2, #6]
 800fff4:	8099      	strh	r1, [r3, #4]
 800fff6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800fff8:	79fb      	ldrb	r3, [r7, #7]
 800fffa:	1c5a      	adds	r2, r3, #1
 800fffc:	71fa      	strb	r2, [r7, #7]
 800fffe:	461a      	mov	r2, r3
 8010000:	4613      	mov	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4413      	add	r3, r2
 8010006:	00db      	lsls	r3, r3, #3
 8010008:	4a60      	ldr	r2, [pc, #384]	; (801018c <UpdateSIGNALSNames+0x978>)
 801000a:	4413      	add	r3, r2
 801000c:	4a64      	ldr	r2, [pc, #400]	; (80101a0 <UpdateSIGNALSNames+0x98c>)
 801000e:	6810      	ldr	r0, [r2, #0]
 8010010:	6018      	str	r0, [r3, #0]
 8010012:	8891      	ldrh	r1, [r2, #4]
 8010014:	7992      	ldrb	r2, [r2, #6]
 8010016:	8099      	strh	r1, [r3, #4]
 8010018:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 801001a:	79fb      	ldrb	r3, [r7, #7]
 801001c:	1c5a      	adds	r2, r3, #1
 801001e:	71fa      	strb	r2, [r7, #7]
 8010020:	461a      	mov	r2, r3
 8010022:	4613      	mov	r3, r2
 8010024:	009b      	lsls	r3, r3, #2
 8010026:	4413      	add	r3, r2
 8010028:	00db      	lsls	r3, r3, #3
 801002a:	4a58      	ldr	r2, [pc, #352]	; (801018c <UpdateSIGNALSNames+0x978>)
 801002c:	4413      	add	r3, r2
 801002e:	4a5d      	ldr	r2, [pc, #372]	; (80101a4 <UpdateSIGNALSNames+0x990>)
 8010030:	6810      	ldr	r0, [r2, #0]
 8010032:	6018      	str	r0, [r3, #0]
 8010034:	8891      	ldrh	r1, [r2, #4]
 8010036:	7992      	ldrb	r2, [r2, #6]
 8010038:	8099      	strh	r1, [r3, #4]
 801003a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 801003c:	79fb      	ldrb	r3, [r7, #7]
 801003e:	1c5a      	adds	r2, r3, #1
 8010040:	71fa      	strb	r2, [r7, #7]
 8010042:	461a      	mov	r2, r3
 8010044:	4613      	mov	r3, r2
 8010046:	009b      	lsls	r3, r3, #2
 8010048:	4413      	add	r3, r2
 801004a:	00db      	lsls	r3, r3, #3
 801004c:	4a4f      	ldr	r2, [pc, #316]	; (801018c <UpdateSIGNALSNames+0x978>)
 801004e:	4413      	add	r3, r2
 8010050:	4a55      	ldr	r2, [pc, #340]	; (80101a8 <UpdateSIGNALSNames+0x994>)
 8010052:	6810      	ldr	r0, [r2, #0]
 8010054:	6018      	str	r0, [r3, #0]
 8010056:	8891      	ldrh	r1, [r2, #4]
 8010058:	7992      	ldrb	r2, [r2, #6]
 801005a:	8099      	strh	r1, [r3, #4]
 801005c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	1c5a      	adds	r2, r3, #1
 8010062:	71fa      	strb	r2, [r7, #7]
 8010064:	461a      	mov	r2, r3
 8010066:	4613      	mov	r3, r2
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	4413      	add	r3, r2
 801006c:	00db      	lsls	r3, r3, #3
 801006e:	4a47      	ldr	r2, [pc, #284]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010070:	4413      	add	r3, r2
 8010072:	4a4e      	ldr	r2, [pc, #312]	; (80101ac <UpdateSIGNALSNames+0x998>)
 8010074:	6810      	ldr	r0, [r2, #0]
 8010076:	6018      	str	r0, [r3, #0]
 8010078:	8891      	ldrh	r1, [r2, #4]
 801007a:	7992      	ldrb	r2, [r2, #6]
 801007c:	8099      	strh	r1, [r3, #4]
 801007e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 8010080:	79fb      	ldrb	r3, [r7, #7]
 8010082:	1c5a      	adds	r2, r3, #1
 8010084:	71fa      	strb	r2, [r7, #7]
 8010086:	461a      	mov	r2, r3
 8010088:	4613      	mov	r3, r2
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	4413      	add	r3, r2
 801008e:	00db      	lsls	r3, r3, #3
 8010090:	4a3e      	ldr	r2, [pc, #248]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010092:	4413      	add	r3, r2
 8010094:	4a46      	ldr	r2, [pc, #280]	; (80101b0 <UpdateSIGNALSNames+0x99c>)
 8010096:	6810      	ldr	r0, [r2, #0]
 8010098:	6018      	str	r0, [r3, #0]
 801009a:	8891      	ldrh	r1, [r2, #4]
 801009c:	7992      	ldrb	r2, [r2, #6]
 801009e:	8099      	strh	r1, [r3, #4]
 80100a0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 80100a2:	79fb      	ldrb	r3, [r7, #7]
 80100a4:	1c5a      	adds	r2, r3, #1
 80100a6:	71fa      	strb	r2, [r7, #7]
 80100a8:	461a      	mov	r2, r3
 80100aa:	4613      	mov	r3, r2
 80100ac:	009b      	lsls	r3, r3, #2
 80100ae:	4413      	add	r3, r2
 80100b0:	00db      	lsls	r3, r3, #3
 80100b2:	4a36      	ldr	r2, [pc, #216]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100b4:	4413      	add	r3, r2
 80100b6:	4a3f      	ldr	r2, [pc, #252]	; (80101b4 <UpdateSIGNALSNames+0x9a0>)
 80100b8:	6810      	ldr	r0, [r2, #0]
 80100ba:	6018      	str	r0, [r3, #0]
 80100bc:	8891      	ldrh	r1, [r2, #4]
 80100be:	7992      	ldrb	r2, [r2, #6]
 80100c0:	8099      	strh	r1, [r3, #4]
 80100c2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 80100c4:	79fb      	ldrb	r3, [r7, #7]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	71fa      	strb	r2, [r7, #7]
 80100ca:	461a      	mov	r2, r3
 80100cc:	4613      	mov	r3, r2
 80100ce:	009b      	lsls	r3, r3, #2
 80100d0:	4413      	add	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	4a2d      	ldr	r2, [pc, #180]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100d6:	4413      	add	r3, r2
 80100d8:	4a37      	ldr	r2, [pc, #220]	; (80101b8 <UpdateSIGNALSNames+0x9a4>)
 80100da:	6810      	ldr	r0, [r2, #0]
 80100dc:	6018      	str	r0, [r3, #0]
 80100de:	8891      	ldrh	r1, [r2, #4]
 80100e0:	7992      	ldrb	r2, [r2, #6]
 80100e2:	8099      	strh	r1, [r3, #4]
 80100e4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 80100e6:	79fb      	ldrb	r3, [r7, #7]
 80100e8:	1c5a      	adds	r2, r3, #1
 80100ea:	71fa      	strb	r2, [r7, #7]
 80100ec:	461a      	mov	r2, r3
 80100ee:	4613      	mov	r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	4413      	add	r3, r2
 80100f4:	00db      	lsls	r3, r3, #3
 80100f6:	4a25      	ldr	r2, [pc, #148]	; (801018c <UpdateSIGNALSNames+0x978>)
 80100f8:	4413      	add	r3, r2
 80100fa:	4930      	ldr	r1, [pc, #192]	; (80101bc <UpdateSIGNALSNames+0x9a8>)
 80100fc:	461a      	mov	r2, r3
 80100fe:	460b      	mov	r3, r1
 8010100:	cb03      	ldmia	r3!, {r0, r1}
 8010102:	6010      	str	r0, [r2, #0]
 8010104:	6051      	str	r1, [r2, #4]
 8010106:	881b      	ldrh	r3, [r3, #0]
 8010108:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 801010a:	79fb      	ldrb	r3, [r7, #7]
 801010c:	1c5a      	adds	r2, r3, #1
 801010e:	71fa      	strb	r2, [r7, #7]
 8010110:	461a      	mov	r2, r3
 8010112:	4613      	mov	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4413      	add	r3, r2
 8010118:	00db      	lsls	r3, r3, #3
 801011a:	4a1c      	ldr	r2, [pc, #112]	; (801018c <UpdateSIGNALSNames+0x978>)
 801011c:	4413      	add	r3, r2
 801011e:	4a28      	ldr	r2, [pc, #160]	; (80101c0 <UpdateSIGNALSNames+0x9ac>)
 8010120:	6810      	ldr	r0, [r2, #0]
 8010122:	6018      	str	r0, [r3, #0]
 8010124:	8891      	ldrh	r1, [r2, #4]
 8010126:	7992      	ldrb	r2, [r2, #6]
 8010128:	8099      	strh	r1, [r3, #4]
 801012a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 801012c:	79fb      	ldrb	r3, [r7, #7]
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	71fa      	strb	r2, [r7, #7]
 8010132:	461a      	mov	r2, r3
 8010134:	4613      	mov	r3, r2
 8010136:	009b      	lsls	r3, r3, #2
 8010138:	4413      	add	r3, r2
 801013a:	00db      	lsls	r3, r3, #3
 801013c:	4a13      	ldr	r2, [pc, #76]	; (801018c <UpdateSIGNALSNames+0x978>)
 801013e:	4413      	add	r3, r2
 8010140:	4a20      	ldr	r2, [pc, #128]	; (80101c4 <UpdateSIGNALSNames+0x9b0>)
 8010142:	461c      	mov	r4, r3
 8010144:	4613      	mov	r3, r2
 8010146:	cb07      	ldmia	r3!, {r0, r1, r2}
 8010148:	6020      	str	r0, [r4, #0]
 801014a:	6061      	str	r1, [r4, #4]
 801014c:	60a2      	str	r2, [r4, #8]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 8010152:	79fb      	ldrb	r3, [r7, #7]
 8010154:	1c5a      	adds	r2, r3, #1
 8010156:	71fa      	strb	r2, [r7, #7]
 8010158:	461a      	mov	r2, r3
 801015a:	4613      	mov	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	4413      	add	r3, r2
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	4a0a      	ldr	r2, [pc, #40]	; (801018c <UpdateSIGNALSNames+0x978>)
 8010164:	4413      	add	r3, r2
 8010166:	4a18      	ldr	r2, [pc, #96]	; (80101c8 <UpdateSIGNALSNames+0x9b4>)
 8010168:	461c      	mov	r4, r3
 801016a:	4613      	mov	r3, r2
 801016c:	cb07      	ldmia	r3!, {r0, r1, r2}
 801016e:	6020      	str	r0, [r4, #0]
 8010170:	6061      	str	r1, [r4, #4]
 8010172:	60a2      	str	r2, [r4, #8]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 8010178:	79fb      	ldrb	r3, [r7, #7]
 801017a:	b29a      	uxth	r2, r3
 801017c:	4b13      	ldr	r3, [pc, #76]	; (80101cc <UpdateSIGNALSNames+0x9b8>)
 801017e:	801a      	strh	r2, [r3, #0]


}
 8010180:	bf00      	nop
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bc90      	pop	{r4, r7}
 8010188:	4770      	bx	lr
 801018a:	bf00      	nop
 801018c:	200054a0 	.word	0x200054a0
 8010190:	0802a51c 	.word	0x0802a51c
 8010194:	0802a524 	.word	0x0802a524
 8010198:	0802a52c 	.word	0x0802a52c
 801019c:	0802a534 	.word	0x0802a534
 80101a0:	0802a53c 	.word	0x0802a53c
 80101a4:	0802a544 	.word	0x0802a544
 80101a8:	0802a54c 	.word	0x0802a54c
 80101ac:	0802a554 	.word	0x0802a554
 80101b0:	0802a55c 	.word	0x0802a55c
 80101b4:	0802a564 	.word	0x0802a564
 80101b8:	0802a56c 	.word	0x0802a56c
 80101bc:	0802a574 	.word	0x0802a574
 80101c0:	0802a580 	.word	0x0802a580
 80101c4:	0802a588 	.word	0x0802a588
 80101c8:	0802a598 	.word	0x0802a598
 80101cc:	20005f90 	.word	0x20005f90

080101d0 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 80101d0:	b5b0      	push	{r4, r5, r7, lr}
 80101d2:	b086      	sub	sp, #24
 80101d4:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 80101d6:	4974      	ldr	r1, [pc, #464]	; (80103a8 <print_self_DetailsSiemens+0x1d8>)
 80101d8:	4874      	ldr	r0, [pc, #464]	; (80103ac <print_self_DetailsSiemens+0x1dc>)
 80101da:	f015 fef1 	bl	8025fc0 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 80101de:	4b74      	ldr	r3, [pc, #464]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101e0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80101e4:	4619      	mov	r1, r3
 80101e6:	4873      	ldr	r0, [pc, #460]	; (80103b4 <print_self_DetailsSiemens+0x1e4>)
 80101e8:	f015 feea 	bl	8025fc0 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 80101ec:	4b70      	ldr	r3, [pc, #448]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101ee:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80101f2:	4619      	mov	r1, r3
 80101f4:	4b6e      	ldr	r3, [pc, #440]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101f6:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80101fa:	461a      	mov	r2, r3
 80101fc:	4b6c      	ldr	r3, [pc, #432]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80101fe:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010202:	4618      	mov	r0, r3
 8010204:	4b6a      	ldr	r3, [pc, #424]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010206:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801020a:	9300      	str	r3, [sp, #0]
 801020c:	4603      	mov	r3, r0
 801020e:	486a      	ldr	r0, [pc, #424]	; (80103b8 <print_self_DetailsSiemens+0x1e8>)
 8010210:	f015 fed6 	bl	8025fc0 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 8010214:	4b66      	ldr	r3, [pc, #408]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010216:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 801021a:	4618      	mov	r0, r3
 801021c:	4b64      	ldr	r3, [pc, #400]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801021e:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 8010222:	461c      	mov	r4, r3
 8010224:	4b62      	ldr	r3, [pc, #392]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010226:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 801022a:	461d      	mov	r5, r3
 801022c:	4b60      	ldr	r3, [pc, #384]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801022e:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 8010232:	461a      	mov	r2, r3
 8010234:	4b5e      	ldr	r3, [pc, #376]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010236:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 801023a:	4619      	mov	r1, r3
 801023c:	4b5c      	ldr	r3, [pc, #368]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801023e:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 8010242:	9302      	str	r3, [sp, #8]
 8010244:	9101      	str	r1, [sp, #4]
 8010246:	9200      	str	r2, [sp, #0]
 8010248:	462b      	mov	r3, r5
 801024a:	4622      	mov	r2, r4
 801024c:	4601      	mov	r1, r0
 801024e:	485b      	ldr	r0, [pc, #364]	; (80103bc <print_self_DetailsSiemens+0x1ec>)
 8010250:	f015 feb6 	bl	8025fc0 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 8010254:	4b56      	ldr	r3, [pc, #344]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010256:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 801025a:	4619      	mov	r1, r3
 801025c:	4858      	ldr	r0, [pc, #352]	; (80103c0 <print_self_DetailsSiemens+0x1f0>)
 801025e:	f015 feaf 	bl	8025fc0 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 8010262:	2300      	movs	r3, #0
 8010264:	71fb      	strb	r3, [r7, #7]
 8010266:	e037      	b.n	80102d8 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 8010268:	79fb      	ldrb	r3, [r7, #7]
 801026a:	1c59      	adds	r1, r3, #1
 801026c:	79fb      	ldrb	r3, [r7, #7]
 801026e:	4a50      	ldr	r2, [pc, #320]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010270:	33ae      	adds	r3, #174	; 0xae
 8010272:	009b      	lsls	r3, r3, #2
 8010274:	4413      	add	r3, r2
 8010276:	785b      	ldrb	r3, [r3, #1]
 8010278:	461c      	mov	r4, r3
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	4a4c      	ldr	r2, [pc, #304]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801027e:	009b      	lsls	r3, r3, #2
 8010280:	4413      	add	r3, r2
 8010282:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010286:	461d      	mov	r5, r3
 8010288:	79fb      	ldrb	r3, [r7, #7]
 801028a:	4a49      	ldr	r2, [pc, #292]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801028c:	009b      	lsls	r3, r3, #2
 801028e:	4413      	add	r3, r2
 8010290:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010294:	4618      	mov	r0, r3
 8010296:	79fb      	ldrb	r3, [r7, #7]
 8010298:	4a45      	ldr	r2, [pc, #276]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801029a:	009b      	lsls	r3, r3, #2
 801029c:	4413      	add	r3, r2
 801029e:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 80102a2:	9301      	str	r3, [sp, #4]
 80102a4:	9000      	str	r0, [sp, #0]
 80102a6:	462b      	mov	r3, r5
 80102a8:	4622      	mov	r2, r4
 80102aa:	4846      	ldr	r0, [pc, #280]	; (80103c4 <print_self_DetailsSiemens+0x1f4>)
 80102ac:	f015 fe88 	bl	8025fc0 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 80102b0:	79fb      	ldrb	r3, [r7, #7]
 80102b2:	4a3f      	ldr	r2, [pc, #252]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102b4:	33b6      	adds	r3, #182	; 0xb6
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	4413      	add	r3, r2
 80102ba:	88db      	ldrh	r3, [r3, #6]
 80102bc:	4619      	mov	r1, r3
 80102be:	79fb      	ldrb	r3, [r7, #7]
 80102c0:	4a3b      	ldr	r2, [pc, #236]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102c2:	009b      	lsls	r3, r3, #2
 80102c4:	4413      	add	r3, r2
 80102c6:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 80102ca:	461a      	mov	r2, r3
 80102cc:	483e      	ldr	r0, [pc, #248]	; (80103c8 <print_self_DetailsSiemens+0x1f8>)
 80102ce:	f015 fe77 	bl	8025fc0 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 80102d2:	79fb      	ldrb	r3, [r7, #7]
 80102d4:	3301      	adds	r3, #1
 80102d6:	71fb      	strb	r3, [r7, #7]
 80102d8:	4b35      	ldr	r3, [pc, #212]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102da:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80102de:	79fa      	ldrb	r2, [r7, #7]
 80102e0:	429a      	cmp	r2, r3
 80102e2:	d3c1      	bcc.n	8010268 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 80102e4:	4b32      	ldr	r3, [pc, #200]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102e6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80102ea:	4619      	mov	r1, r3
 80102ec:	4837      	ldr	r0, [pc, #220]	; (80103cc <print_self_DetailsSiemens+0x1fc>)
 80102ee:	f015 fe67 	bl	8025fc0 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 80102f2:	4b2f      	ldr	r3, [pc, #188]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 80102f4:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 80102f8:	4619      	mov	r1, r3
 80102fa:	4835      	ldr	r0, [pc, #212]	; (80103d0 <print_self_DetailsSiemens+0x200>)
 80102fc:	f015 fe60 	bl	8025fc0 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 8010300:	4b2b      	ldr	r3, [pc, #172]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010302:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8010306:	4619      	mov	r1, r3
 8010308:	4832      	ldr	r0, [pc, #200]	; (80103d4 <print_self_DetailsSiemens+0x204>)
 801030a:	f015 fe59 	bl	8025fc0 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 801030e:	4b28      	ldr	r3, [pc, #160]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010310:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 8010314:	4619      	mov	r1, r3
 8010316:	482f      	ldr	r0, [pc, #188]	; (80103d4 <print_self_DetailsSiemens+0x204>)
 8010318:	f015 fe52 	bl	8025fc0 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 801031c:	4b24      	ldr	r3, [pc, #144]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801031e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 8010322:	4619      	mov	r1, r3
 8010324:	482c      	ldr	r0, [pc, #176]	; (80103d8 <print_self_DetailsSiemens+0x208>)
 8010326:	f015 fe4b 	bl	8025fc0 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 801032a:	4b21      	ldr	r3, [pc, #132]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801032c:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 8010330:	4619      	mov	r1, r3
 8010332:	482a      	ldr	r0, [pc, #168]	; (80103dc <print_self_DetailsSiemens+0x20c>)
 8010334:	f015 fe44 	bl	8025fc0 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 8010338:	4b1d      	ldr	r3, [pc, #116]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801033a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 801033e:	4619      	mov	r1, r3
 8010340:	4827      	ldr	r0, [pc, #156]	; (80103e0 <print_self_DetailsSiemens+0x210>)
 8010342:	f015 fe3d 	bl	8025fc0 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 8010346:	4b1a      	ldr	r3, [pc, #104]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010348:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 801034c:	4619      	mov	r1, r3
 801034e:	4825      	ldr	r0, [pc, #148]	; (80103e4 <print_self_DetailsSiemens+0x214>)
 8010350:	f015 fe36 	bl	8025fc0 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 8010354:	4b16      	ldr	r3, [pc, #88]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010356:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 801035a:	4619      	mov	r1, r3
 801035c:	4822      	ldr	r0, [pc, #136]	; (80103e8 <print_self_DetailsSiemens+0x218>)
 801035e:	f015 fe2f 	bl	8025fc0 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 8010362:	4b13      	ldr	r3, [pc, #76]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010364:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 8010368:	4619      	mov	r1, r3
 801036a:	4820      	ldr	r0, [pc, #128]	; (80103ec <print_self_DetailsSiemens+0x21c>)
 801036c:	f015 fe28 	bl	8025fc0 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 8010370:	4b0f      	ldr	r3, [pc, #60]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010372:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 8010376:	4619      	mov	r1, r3
 8010378:	481d      	ldr	r0, [pc, #116]	; (80103f0 <print_self_DetailsSiemens+0x220>)
 801037a:	f015 fe21 	bl	8025fc0 <iprintf>
	if(EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount == 0)
 801037e:	4b0c      	ldr	r3, [pc, #48]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010380:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d103      	bne.n	8010390 <print_self_DetailsSiemens+0x1c0>
	{
		EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount = 50;
 8010388:	4b09      	ldr	r3, [pc, #36]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 801038a:	2232      	movs	r2, #50	; 0x32
 801038c:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
	}
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 8010390:	4b07      	ldr	r3, [pc, #28]	; (80103b0 <print_self_DetailsSiemens+0x1e0>)
 8010392:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 8010396:	4619      	mov	r1, r3
 8010398:	4816      	ldr	r0, [pc, #88]	; (80103f4 <print_self_DetailsSiemens+0x224>)
 801039a:	f015 fe11 	bl	8025fc0 <iprintf>

}
 801039e:	bf00      	nop
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bdb0      	pop	{r4, r5, r7, pc}
 80103a6:	bf00      	nop
 80103a8:	20000505 	.word	0x20000505
 80103ac:	0802a5a8 	.word	0x0802a5a8
 80103b0:	20000504 	.word	0x20000504
 80103b4:	0802a5bc 	.word	0x0802a5bc
 80103b8:	0802a5cc 	.word	0x0802a5cc
 80103bc:	0802a5e4 	.word	0x0802a5e4
 80103c0:	0802a60c 	.word	0x0802a60c
 80103c4:	0802a624 	.word	0x0802a624
 80103c8:	0802a638 	.word	0x0802a638
 80103cc:	0802a650 	.word	0x0802a650
 80103d0:	0802a660 	.word	0x0802a660
 80103d4:	0802a674 	.word	0x0802a674
 80103d8:	0802a688 	.word	0x0802a688
 80103dc:	0802a698 	.word	0x0802a698
 80103e0:	0802a6a8 	.word	0x0802a6a8
 80103e4:	0802a6bc 	.word	0x0802a6bc
 80103e8:	0802a6d4 	.word	0x0802a6d4
 80103ec:	0802a6ec 	.word	0x0802a6ec
 80103f0:	0802a708 	.word	0x0802a708
 80103f4:	0802a724 	.word	0x0802a724

080103f8 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b082      	sub	sp, #8
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 8010400:	f008 fec8 	bl	8019194 <HAL_GetTick>
 8010404:	4602      	mov	r2, r0
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	2b00      	cmp	r3, #0
 801040c:	bfb8      	it	lt
 801040e:	425b      	neglt	r3, r3
}
 8010410:	4618      	mov	r0, r3
 8010412:	3708      	adds	r7, #8
 8010414:	46bd      	mov	sp, r7
 8010416:	bd80      	pop	{r7, pc}

08010418 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b082      	sub	sp, #8
 801041c:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 801041e:	23f3      	movs	r3, #243	; 0xf3
 8010420:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 8010422:	f013 f8d7 	bl	80235d4 <udp_new>
 8010426:	4603      	mov	r3, r0
 8010428:	4a7a      	ldr	r2, [pc, #488]	; (8010614 <udpServer_init+0x1fc>)
 801042a:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 801042c:	4b7a      	ldr	r3, [pc, #488]	; (8010618 <udpServer_init+0x200>)
 801042e:	781b      	ldrb	r3, [r3, #0]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d002      	beq.n	801043a <udpServer_init+0x22>
 8010434:	2b02      	cmp	r3, #2
 8010436:	d074      	beq.n	8010522 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 8010438:	e0e9      	b.n	801060e <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 801043a:	4b77      	ldr	r3, [pc, #476]	; (8010618 <udpServer_init+0x200>)
 801043c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010440:	061a      	lsls	r2, r3, #24
 8010442:	4b75      	ldr	r3, [pc, #468]	; (8010618 <udpServer_init+0x200>)
 8010444:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010448:	041b      	lsls	r3, r3, #16
 801044a:	431a      	orrs	r2, r3
 801044c:	4b72      	ldr	r3, [pc, #456]	; (8010618 <udpServer_init+0x200>)
 801044e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010452:	021b      	lsls	r3, r3, #8
 8010454:	4313      	orrs	r3, r2
 8010456:	4a70      	ldr	r2, [pc, #448]	; (8010618 <udpServer_init+0x200>)
 8010458:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 801045c:	4313      	orrs	r3, r2
 801045e:	061a      	lsls	r2, r3, #24
 8010460:	4b6d      	ldr	r3, [pc, #436]	; (8010618 <udpServer_init+0x200>)
 8010462:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010466:	0619      	lsls	r1, r3, #24
 8010468:	4b6b      	ldr	r3, [pc, #428]	; (8010618 <udpServer_init+0x200>)
 801046a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801046e:	041b      	lsls	r3, r3, #16
 8010470:	4319      	orrs	r1, r3
 8010472:	4b69      	ldr	r3, [pc, #420]	; (8010618 <udpServer_init+0x200>)
 8010474:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8010478:	021b      	lsls	r3, r3, #8
 801047a:	430b      	orrs	r3, r1
 801047c:	4966      	ldr	r1, [pc, #408]	; (8010618 <udpServer_init+0x200>)
 801047e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 8010482:	430b      	orrs	r3, r1
 8010484:	021b      	lsls	r3, r3, #8
 8010486:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801048a:	431a      	orrs	r2, r3
 801048c:	4b62      	ldr	r3, [pc, #392]	; (8010618 <udpServer_init+0x200>)
 801048e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8010492:	0619      	lsls	r1, r3, #24
 8010494:	4b60      	ldr	r3, [pc, #384]	; (8010618 <udpServer_init+0x200>)
 8010496:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801049a:	041b      	lsls	r3, r3, #16
 801049c:	4319      	orrs	r1, r3
 801049e:	4b5e      	ldr	r3, [pc, #376]	; (8010618 <udpServer_init+0x200>)
 80104a0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104a4:	021b      	lsls	r3, r3, #8
 80104a6:	430b      	orrs	r3, r1
 80104a8:	495b      	ldr	r1, [pc, #364]	; (8010618 <udpServer_init+0x200>)
 80104aa:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 80104ae:	430b      	orrs	r3, r1
 80104b0:	0a1b      	lsrs	r3, r3, #8
 80104b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80104b6:	431a      	orrs	r2, r3
 80104b8:	4b57      	ldr	r3, [pc, #348]	; (8010618 <udpServer_init+0x200>)
 80104ba:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80104be:	0619      	lsls	r1, r3, #24
 80104c0:	4b55      	ldr	r3, [pc, #340]	; (8010618 <udpServer_init+0x200>)
 80104c2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80104c6:	041b      	lsls	r3, r3, #16
 80104c8:	4319      	orrs	r1, r3
 80104ca:	4b53      	ldr	r3, [pc, #332]	; (8010618 <udpServer_init+0x200>)
 80104cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80104d0:	021b      	lsls	r3, r3, #8
 80104d2:	430b      	orrs	r3, r1
 80104d4:	4950      	ldr	r1, [pc, #320]	; (8010618 <udpServer_init+0x200>)
 80104d6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 80104da:	430b      	orrs	r3, r1
 80104dc:	0e1b      	lsrs	r3, r3, #24
 80104de:	4313      	orrs	r3, r2
 80104e0:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 80104e2:	4b4c      	ldr	r3, [pc, #304]	; (8010614 <udpServer_init+0x1fc>)
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	4a4c      	ldr	r2, [pc, #304]	; (8010618 <udpServer_init+0x200>)
 80104e8:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 80104ec:	4639      	mov	r1, r7
 80104ee:	4618      	mov	r0, r3
 80104f0:	f012 ff86 	bl	8023400 <udp_bind>
 80104f4:	4603      	mov	r3, r0
 80104f6:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80104f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d107      	bne.n	8010510 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 8010500:	4b44      	ldr	r3, [pc, #272]	; (8010614 <udpServer_init+0x1fc>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	2200      	movs	r2, #0
 8010506:	4945      	ldr	r1, [pc, #276]	; (801061c <udpServer_init+0x204>)
 8010508:	4618      	mov	r0, r3
 801050a:	f013 f801 	bl	8023510 <udp_recv>
		break;
 801050e:	e07c      	b.n	801060a <udpServer_init+0x1f2>
			printf("N-OK\n");
 8010510:	4843      	ldr	r0, [pc, #268]	; (8010620 <udpServer_init+0x208>)
 8010512:	f015 fdf1 	bl	80260f8 <puts>
			udp_remove(upcb);
 8010516:	4b3f      	ldr	r3, [pc, #252]	; (8010614 <udpServer_init+0x1fc>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	4618      	mov	r0, r3
 801051c:	f013 f818 	bl	8023550 <udp_remove>
		break;
 8010520:	e073      	b.n	801060a <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 8010522:	4b3d      	ldr	r3, [pc, #244]	; (8010618 <udpServer_init+0x200>)
 8010524:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 8010528:	061a      	lsls	r2, r3, #24
 801052a:	4b3b      	ldr	r3, [pc, #236]	; (8010618 <udpServer_init+0x200>)
 801052c:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010530:	041b      	lsls	r3, r3, #16
 8010532:	431a      	orrs	r2, r3
 8010534:	4b38      	ldr	r3, [pc, #224]	; (8010618 <udpServer_init+0x200>)
 8010536:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 801053a:	021b      	lsls	r3, r3, #8
 801053c:	4313      	orrs	r3, r2
 801053e:	4a36      	ldr	r2, [pc, #216]	; (8010618 <udpServer_init+0x200>)
 8010540:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 8010544:	4313      	orrs	r3, r2
 8010546:	061a      	lsls	r2, r3, #24
 8010548:	4b33      	ldr	r3, [pc, #204]	; (8010618 <udpServer_init+0x200>)
 801054a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801054e:	0619      	lsls	r1, r3, #24
 8010550:	4b31      	ldr	r3, [pc, #196]	; (8010618 <udpServer_init+0x200>)
 8010552:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010556:	041b      	lsls	r3, r3, #16
 8010558:	4319      	orrs	r1, r3
 801055a:	4b2f      	ldr	r3, [pc, #188]	; (8010618 <udpServer_init+0x200>)
 801055c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 8010560:	021b      	lsls	r3, r3, #8
 8010562:	430b      	orrs	r3, r1
 8010564:	492c      	ldr	r1, [pc, #176]	; (8010618 <udpServer_init+0x200>)
 8010566:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 801056a:	430b      	orrs	r3, r1
 801056c:	021b      	lsls	r3, r3, #8
 801056e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010572:	431a      	orrs	r2, r3
 8010574:	4b28      	ldr	r3, [pc, #160]	; (8010618 <udpServer_init+0x200>)
 8010576:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 801057a:	0619      	lsls	r1, r3, #24
 801057c:	4b26      	ldr	r3, [pc, #152]	; (8010618 <udpServer_init+0x200>)
 801057e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 8010582:	041b      	lsls	r3, r3, #16
 8010584:	4319      	orrs	r1, r3
 8010586:	4b24      	ldr	r3, [pc, #144]	; (8010618 <udpServer_init+0x200>)
 8010588:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 801058c:	021b      	lsls	r3, r3, #8
 801058e:	430b      	orrs	r3, r1
 8010590:	4921      	ldr	r1, [pc, #132]	; (8010618 <udpServer_init+0x200>)
 8010592:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 8010596:	430b      	orrs	r3, r1
 8010598:	0a1b      	lsrs	r3, r3, #8
 801059a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801059e:	431a      	orrs	r2, r3
 80105a0:	4b1d      	ldr	r3, [pc, #116]	; (8010618 <udpServer_init+0x200>)
 80105a2:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 80105a6:	0619      	lsls	r1, r3, #24
 80105a8:	4b1b      	ldr	r3, [pc, #108]	; (8010618 <udpServer_init+0x200>)
 80105aa:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 80105ae:	041b      	lsls	r3, r3, #16
 80105b0:	4319      	orrs	r1, r3
 80105b2:	4b19      	ldr	r3, [pc, #100]	; (8010618 <udpServer_init+0x200>)
 80105b4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 80105b8:	021b      	lsls	r3, r3, #8
 80105ba:	430b      	orrs	r3, r1
 80105bc:	4916      	ldr	r1, [pc, #88]	; (8010618 <udpServer_init+0x200>)
 80105be:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 80105c2:	430b      	orrs	r3, r1
 80105c4:	0e1b      	lsrs	r3, r3, #24
 80105c6:	4313      	orrs	r3, r2
 80105c8:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 80105ca:	4b12      	ldr	r3, [pc, #72]	; (8010614 <udpServer_init+0x1fc>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	4a12      	ldr	r2, [pc, #72]	; (8010618 <udpServer_init+0x200>)
 80105d0:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 80105d4:	4639      	mov	r1, r7
 80105d6:	4618      	mov	r0, r3
 80105d8:	f012 ff12 	bl	8023400 <udp_bind>
 80105dc:	4603      	mov	r3, r0
 80105de:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 80105e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d107      	bne.n	80105f8 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 80105e8:	4b0a      	ldr	r3, [pc, #40]	; (8010614 <udpServer_init+0x1fc>)
 80105ea:	681b      	ldr	r3, [r3, #0]
 80105ec:	2200      	movs	r2, #0
 80105ee:	490b      	ldr	r1, [pc, #44]	; (801061c <udpServer_init+0x204>)
 80105f0:	4618      	mov	r0, r3
 80105f2:	f012 ff8d 	bl	8023510 <udp_recv>
		break;
 80105f6:	e007      	b.n	8010608 <udpServer_init+0x1f0>
			printf("N-OK\n");
 80105f8:	4809      	ldr	r0, [pc, #36]	; (8010620 <udpServer_init+0x208>)
 80105fa:	f015 fd7d 	bl	80260f8 <puts>
			udp_remove(upcb);
 80105fe:	4b05      	ldr	r3, [pc, #20]	; (8010614 <udpServer_init+0x1fc>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	4618      	mov	r0, r3
 8010604:	f012 ffa4 	bl	8023550 <udp_remove>
		break;
 8010608:	bf00      	nop
	}

	udpClient_connect();
 801060a:	f000 f90d 	bl	8010828 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 801060e:	3708      	adds	r7, #8
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}
 8010614:	20006a10 	.word	0x20006a10
 8010618:	20000504 	.word	0x20000504
 801061c:	08010625 	.word	0x08010625
 8010620:	0802a744 	.word	0x0802a744

08010624 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8010624:	b580      	push	{r7, lr}
 8010626:	b086      	sub	sp, #24
 8010628:	af00      	add	r7, sp, #0
 801062a:	60f8      	str	r0, [r7, #12]
 801062c:	60b9      	str	r1, [r7, #8]
 801062e:	607a      	str	r2, [r7, #4]
 8010630:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 8010632:	2300      	movs	r3, #0
 8010634:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 8010636:	2300      	movs	r3, #0
 8010638:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 801063a:	2300      	movs	r3, #0
 801063c:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 801063e:	4a70      	ldr	r2, [pc, #448]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6013      	str	r3, [r2, #0]
	Length = p->len;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	895b      	ldrh	r3, [r3, #10]
 801064a:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 801064c:	4b6d      	ldr	r3, [pc, #436]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 801064e:	781b      	ldrb	r3, [r3, #0]
 8010650:	2b01      	cmp	r3, #1
 8010652:	d02e      	beq.n	80106b2 <UDP_Receive_Callback+0x8e>
 8010654:	2b02      	cmp	r3, #2
 8010656:	d045      	beq.n	80106e4 <UDP_Receive_Callback+0xc0>
 8010658:	e069      	b.n	801072e <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 801065a:	4b69      	ldr	r3, [pc, #420]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 801065c:	681a      	ldr	r2, [r3, #0]
 801065e:	7dfb      	ldrb	r3, [r7, #23]
 8010660:	4969      	ldr	r1, [pc, #420]	; (8010808 <UDP_Receive_Callback+0x1e4>)
 8010662:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8010666:	429a      	cmp	r2, r3
 8010668:	d120      	bne.n	80106ac <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 801066a:	7dbb      	ldrb	r3, [r7, #22]
 801066c:	2b00      	cmp	r3, #0
 801066e:	d109      	bne.n	8010684 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 8010670:	6838      	ldr	r0, [r7, #0]
 8010672:	f014 fbad 	bl	8024dd0 <ip4addr_ntoa>
 8010676:	4603      	mov	r3, r0
 8010678:	4619      	mov	r1, r3
 801067a:	4864      	ldr	r0, [pc, #400]	; (801080c <UDP_Receive_Callback+0x1e8>)
 801067c:	f015 fca0 	bl	8025fc0 <iprintf>
					IpMatched = 1;
 8010680:	2301      	movs	r3, #1
 8010682:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 8010684:	7dfb      	ldrb	r3, [r7, #23]
 8010686:	085b      	lsrs	r3, r3, #1
 8010688:	b2db      	uxtb	r3, r3
 801068a:	4619      	mov	r1, r3
 801068c:	4a60      	ldr	r2, [pc, #384]	; (8010810 <UDP_Receive_Callback+0x1ec>)
 801068e:	683b      	ldr	r3, [r7, #0]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 8010696:	7dfb      	ldrb	r3, [r7, #23]
 8010698:	f003 0301 	and.w	r3, r3, #1
 801069c:	b2db      	uxtb	r3, r3
 801069e:	7dfa      	ldrb	r2, [r7, #23]
 80106a0:	0852      	lsrs	r2, r2, #1
 80106a2:	b2d2      	uxtb	r2, r2
 80106a4:	3301      	adds	r3, #1
 80106a6:	b2d9      	uxtb	r1, r3
 80106a8:	4b5a      	ldr	r3, [pc, #360]	; (8010814 <UDP_Receive_Callback+0x1f0>)
 80106aa:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80106ac:	7dfb      	ldrb	r3, [r7, #23]
 80106ae:	3301      	adds	r3, #1
 80106b0:	75fb      	strb	r3, [r7, #23]
 80106b2:	4b54      	ldr	r3, [pc, #336]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 80106b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80106b8:	7dfa      	ldrb	r2, [r7, #23]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d3cd      	bcc.n	801065a <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 80106be:	4b51      	ldr	r3, [pc, #324]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 80106c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80106c4:	7dfa      	ldrb	r2, [r7, #23]
 80106c6:	429a      	cmp	r2, r3
 80106c8:	d935      	bls.n	8010736 <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f011 ff40 	bl	8022550 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 80106d0:	6838      	ldr	r0, [r7, #0]
 80106d2:	f014 fb7d 	bl	8024dd0 <ip4addr_ntoa>
 80106d6:	4601      	mov	r1, r0
 80106d8:	7dfb      	ldrb	r3, [r7, #23]
 80106da:	461a      	mov	r2, r3
 80106dc:	484e      	ldr	r0, [pc, #312]	; (8010818 <UDP_Receive_Callback+0x1f4>)
 80106de:	f015 fc6f 	bl	8025fc0 <iprintf>
			return;
 80106e2:	e08a      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80106e4:	2300      	movs	r3, #0
 80106e6:	75fb      	strb	r3, [r7, #23]
 80106e8:	e00a      	b.n	8010700 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 80106ea:	4b45      	ldr	r3, [pc, #276]	; (8010800 <UDP_Receive_Callback+0x1dc>)
 80106ec:	681a      	ldr	r2, [r3, #0]
 80106ee:	7dfb      	ldrb	r3, [r7, #23]
 80106f0:	4945      	ldr	r1, [pc, #276]	; (8010808 <UDP_Receive_Callback+0x1e4>)
 80106f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80106f6:	429a      	cmp	r2, r3
 80106f8:	d009      	beq.n	801070e <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 80106fa:	7dfb      	ldrb	r3, [r7, #23]
 80106fc:	3301      	adds	r3, #1
 80106fe:	75fb      	strb	r3, [r7, #23]
 8010700:	4b40      	ldr	r3, [pc, #256]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 8010702:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010706:	7dfa      	ldrb	r2, [r7, #23]
 8010708:	429a      	cmp	r2, r3
 801070a:	d3ee      	bcc.n	80106ea <UDP_Receive_Callback+0xc6>
 801070c:	e000      	b.n	8010710 <UDP_Receive_Callback+0xec>
			{
				break;
 801070e:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 8010710:	4b3c      	ldr	r3, [pc, #240]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 8010712:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010716:	7dfa      	ldrb	r2, [r7, #23]
 8010718:	429a      	cmp	r2, r3
 801071a:	d90e      	bls.n	801073a <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f011 ff17 	bl	8022550 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	4619      	mov	r1, r3
 8010726:	483d      	ldr	r0, [pc, #244]	; (801081c <UDP_Receive_Callback+0x1f8>)
 8010728:	f015 fc4a 	bl	8025fc0 <iprintf>
			return;
 801072c:	e065      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 801072e:	6878      	ldr	r0, [r7, #4]
 8010730:	f011 ff0e 	bl	8022550 <pbuf_free>
		return;
 8010734:	e061      	b.n	80107fa <UDP_Receive_Callback+0x1d6>
		break;
 8010736:	bf00      	nop
 8010738:	e000      	b.n	801073c <UDP_Receive_Callback+0x118>
		break;
 801073a:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 801073c:	4b31      	ldr	r3, [pc, #196]	; (8010804 <UDP_Receive_Callback+0x1e0>)
 801073e:	781b      	ldrb	r3, [r3, #0]
 8010740:	2b01      	cmp	r3, #1
 8010742:	d002      	beq.n	801074a <UDP_Receive_Callback+0x126>
 8010744:	2b02      	cmp	r3, #2
 8010746:	d049      	beq.n	80107dc <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 8010748:	e054      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 801074a:	f008 fd23 	bl	8019194 <HAL_GetTick>
 801074e:	4603      	mov	r3, r0
 8010750:	4a33      	ldr	r2, [pc, #204]	; (8010820 <UDP_Receive_Callback+0x1fc>)
 8010752:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 8010754:	4b33      	ldr	r3, [pc, #204]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010756:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801075a:	461a      	mov	r2, r3
 801075c:	8abb      	ldrh	r3, [r7, #20]
 801075e:	4413      	add	r3, r2
 8010760:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010764:	dd24      	ble.n	80107b0 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 8010766:	4b2f      	ldr	r3, [pc, #188]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010768:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 801076c:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 8010770:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 8010772:	4b2c      	ldr	r3, [pc, #176]	; (8010824 <UDP_Receive_Callback+0x200>)
 8010774:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010778:	461a      	mov	r2, r3
 801077a:	4b2a      	ldr	r3, [pc, #168]	; (8010824 <UDP_Receive_Callback+0x200>)
 801077c:	18d0      	adds	r0, r2, r3
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	8a7a      	ldrh	r2, [r7, #18]
 8010784:	4619      	mov	r1, r3
 8010786:	f015 fb0b 	bl	8025da0 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685a      	ldr	r2, [r3, #4]
 801078e:	8a7b      	ldrh	r3, [r7, #18]
 8010790:	18d1      	adds	r1, r2, r3
 8010792:	8aba      	ldrh	r2, [r7, #20]
 8010794:	8a7b      	ldrh	r3, [r7, #18]
 8010796:	1ad3      	subs	r3, r2, r3
 8010798:	461a      	mov	r2, r3
 801079a:	4822      	ldr	r0, [pc, #136]	; (8010824 <UDP_Receive_Callback+0x200>)
 801079c:	f015 fb00 	bl	8025da0 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 80107a0:	8aba      	ldrh	r2, [r7, #20]
 80107a2:	8a7b      	ldrh	r3, [r7, #18]
 80107a4:	1ad3      	subs	r3, r2, r3
 80107a6:	b29a      	uxth	r2, r3
 80107a8:	4b1e      	ldr	r3, [pc, #120]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107aa:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 80107ae:	e021      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 80107b0:	4b1c      	ldr	r3, [pc, #112]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107b2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 80107b6:	461a      	mov	r2, r3
 80107b8:	4b1a      	ldr	r3, [pc, #104]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ba:	18d0      	adds	r0, r2, r3
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	685b      	ldr	r3, [r3, #4]
 80107c0:	8aba      	ldrh	r2, [r7, #20]
 80107c2:	4619      	mov	r1, r3
 80107c4:	f015 faec 	bl	8025da0 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 80107c8:	4b16      	ldr	r3, [pc, #88]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ca:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 80107ce:	8abb      	ldrh	r3, [r7, #20]
 80107d0:	4413      	add	r3, r2
 80107d2:	b29a      	uxth	r2, r3
 80107d4:	4b13      	ldr	r3, [pc, #76]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107d6:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 80107da:	e00b      	b.n	80107f4 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	685b      	ldr	r3, [r3, #4]
 80107e0:	8aba      	ldrh	r2, [r7, #20]
 80107e2:	4619      	mov	r1, r3
 80107e4:	480f      	ldr	r0, [pc, #60]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107e6:	f015 fadb 	bl	8025da0 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 80107ea:	4a0e      	ldr	r2, [pc, #56]	; (8010824 <UDP_Receive_Callback+0x200>)
 80107ec:	8abb      	ldrh	r3, [r7, #20]
 80107ee:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 80107f2:	bf00      	nop
	}


	pbuf_free(p);
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f011 feab 	bl	8022550 <pbuf_free>
}
 80107fa:	3718      	adds	r7, #24
 80107fc:	46bd      	mov	sp, r7
 80107fe:	bd80      	pop	{r7, pc}
 8010800:	200069e4 	.word	0x200069e4
 8010804:	20000504 	.word	0x20000504
 8010808:	20006994 	.word	0x20006994
 801080c:	0802a74c 	.word	0x0802a74c
 8010810:	200026e4 	.word	0x200026e4
 8010814:	2000270c 	.word	0x2000270c
 8010818:	0802a758 	.word	0x0802a758
 801081c:	0802a784 	.word	0x0802a784
 8010820:	200024b0 	.word	0x200024b0
 8010824:	20006390 	.word	0x20006390

08010828 <udpClient_connect>:
void udpClient_connect(void)
{
 8010828:	b480      	push	{r7}
 801082a:	b083      	sub	sp, #12
 801082c:	af00      	add	r7, sp, #0
//	err_t err;
	uint8_t Traverser = 0;
 801082e:	2300      	movs	r3, #0
 8010830:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 8010832:	4ba6      	ldr	r3, [pc, #664]	; (8010acc <udpClient_connect+0x2a4>)
 8010834:	781b      	ldrb	r3, [r3, #0]
 8010836:	2b01      	cmp	r3, #1
 8010838:	d003      	beq.n	8010842 <udpClient_connect+0x1a>
 801083a:	2b02      	cmp	r3, #2
 801083c:	f000 80a1 	beq.w	8010982 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 8010840:	e13f      	b.n	8010ac2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8010842:	2300      	movs	r3, #0
 8010844:	71fb      	strb	r3, [r7, #7]
 8010846:	e094      	b.n	8010972 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010848:	79fb      	ldrb	r3, [r7, #7]
 801084a:	4aa0      	ldr	r2, [pc, #640]	; (8010acc <udpClient_connect+0x2a4>)
 801084c:	3312      	adds	r3, #18
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	4413      	add	r3, r2
 8010852:	78db      	ldrb	r3, [r3, #3]
 8010854:	061a      	lsls	r2, r3, #24
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	499c      	ldr	r1, [pc, #624]	; (8010acc <udpClient_connect+0x2a4>)
 801085a:	009b      	lsls	r3, r3, #2
 801085c:	440b      	add	r3, r1
 801085e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010862:	041b      	lsls	r3, r3, #16
 8010864:	431a      	orrs	r2, r3
 8010866:	79fb      	ldrb	r3, [r7, #7]
 8010868:	4998      	ldr	r1, [pc, #608]	; (8010acc <udpClient_connect+0x2a4>)
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	440b      	add	r3, r1
 801086e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8010872:	021b      	lsls	r3, r3, #8
 8010874:	431a      	orrs	r2, r3
 8010876:	79fb      	ldrb	r3, [r7, #7]
 8010878:	4994      	ldr	r1, [pc, #592]	; (8010acc <udpClient_connect+0x2a4>)
 801087a:	009b      	lsls	r3, r3, #2
 801087c:	440b      	add	r3, r1
 801087e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010882:	4313      	orrs	r3, r2
 8010884:	061a      	lsls	r2, r3, #24
 8010886:	79fb      	ldrb	r3, [r7, #7]
 8010888:	4990      	ldr	r1, [pc, #576]	; (8010acc <udpClient_connect+0x2a4>)
 801088a:	3312      	adds	r3, #18
 801088c:	009b      	lsls	r3, r3, #2
 801088e:	440b      	add	r3, r1
 8010890:	78db      	ldrb	r3, [r3, #3]
 8010892:	0619      	lsls	r1, r3, #24
 8010894:	79fb      	ldrb	r3, [r7, #7]
 8010896:	488d      	ldr	r0, [pc, #564]	; (8010acc <udpClient_connect+0x2a4>)
 8010898:	009b      	lsls	r3, r3, #2
 801089a:	4403      	add	r3, r0
 801089c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80108a0:	041b      	lsls	r3, r3, #16
 80108a2:	4319      	orrs	r1, r3
 80108a4:	79fb      	ldrb	r3, [r7, #7]
 80108a6:	4889      	ldr	r0, [pc, #548]	; (8010acc <udpClient_connect+0x2a4>)
 80108a8:	009b      	lsls	r3, r3, #2
 80108aa:	4403      	add	r3, r0
 80108ac:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80108b0:	021b      	lsls	r3, r3, #8
 80108b2:	4319      	orrs	r1, r3
 80108b4:	79fb      	ldrb	r3, [r7, #7]
 80108b6:	4885      	ldr	r0, [pc, #532]	; (8010acc <udpClient_connect+0x2a4>)
 80108b8:	009b      	lsls	r3, r3, #2
 80108ba:	4403      	add	r3, r0
 80108bc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80108c0:	430b      	orrs	r3, r1
 80108c2:	021b      	lsls	r3, r3, #8
 80108c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80108c8:	431a      	orrs	r2, r3
 80108ca:	79fb      	ldrb	r3, [r7, #7]
 80108cc:	497f      	ldr	r1, [pc, #508]	; (8010acc <udpClient_connect+0x2a4>)
 80108ce:	3312      	adds	r3, #18
 80108d0:	009b      	lsls	r3, r3, #2
 80108d2:	440b      	add	r3, r1
 80108d4:	78db      	ldrb	r3, [r3, #3]
 80108d6:	0619      	lsls	r1, r3, #24
 80108d8:	79fb      	ldrb	r3, [r7, #7]
 80108da:	487c      	ldr	r0, [pc, #496]	; (8010acc <udpClient_connect+0x2a4>)
 80108dc:	009b      	lsls	r3, r3, #2
 80108de:	4403      	add	r3, r0
 80108e0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80108e4:	041b      	lsls	r3, r3, #16
 80108e6:	4319      	orrs	r1, r3
 80108e8:	79fb      	ldrb	r3, [r7, #7]
 80108ea:	4878      	ldr	r0, [pc, #480]	; (8010acc <udpClient_connect+0x2a4>)
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	4403      	add	r3, r0
 80108f0:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80108f4:	021b      	lsls	r3, r3, #8
 80108f6:	4319      	orrs	r1, r3
 80108f8:	79fb      	ldrb	r3, [r7, #7]
 80108fa:	4874      	ldr	r0, [pc, #464]	; (8010acc <udpClient_connect+0x2a4>)
 80108fc:	009b      	lsls	r3, r3, #2
 80108fe:	4403      	add	r3, r0
 8010900:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8010904:	430b      	orrs	r3, r1
 8010906:	0a1b      	lsrs	r3, r3, #8
 8010908:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801090c:	ea42 0103 	orr.w	r1, r2, r3
 8010910:	79fb      	ldrb	r3, [r7, #7]
 8010912:	4a6e      	ldr	r2, [pc, #440]	; (8010acc <udpClient_connect+0x2a4>)
 8010914:	3312      	adds	r3, #18
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	4413      	add	r3, r2
 801091a:	78db      	ldrb	r3, [r3, #3]
 801091c:	061a      	lsls	r2, r3, #24
 801091e:	79fb      	ldrb	r3, [r7, #7]
 8010920:	486a      	ldr	r0, [pc, #424]	; (8010acc <udpClient_connect+0x2a4>)
 8010922:	009b      	lsls	r3, r3, #2
 8010924:	4403      	add	r3, r0
 8010926:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 801092a:	041b      	lsls	r3, r3, #16
 801092c:	431a      	orrs	r2, r3
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	4866      	ldr	r0, [pc, #408]	; (8010acc <udpClient_connect+0x2a4>)
 8010932:	009b      	lsls	r3, r3, #2
 8010934:	4403      	add	r3, r0
 8010936:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 801093a:	021b      	lsls	r3, r3, #8
 801093c:	431a      	orrs	r2, r3
 801093e:	79fb      	ldrb	r3, [r7, #7]
 8010940:	4862      	ldr	r0, [pc, #392]	; (8010acc <udpClient_connect+0x2a4>)
 8010942:	009b      	lsls	r3, r3, #2
 8010944:	4403      	add	r3, r0
 8010946:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 801094a:	4313      	orrs	r3, r2
 801094c:	0e1a      	lsrs	r2, r3, #24
 801094e:	79fb      	ldrb	r3, [r7, #7]
 8010950:	430a      	orrs	r2, r1
 8010952:	495f      	ldr	r1, [pc, #380]	; (8010ad0 <udpClient_connect+0x2a8>)
 8010954:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010958:	79fb      	ldrb	r3, [r7, #7]
 801095a:	79fa      	ldrb	r2, [r7, #7]
 801095c:	495b      	ldr	r1, [pc, #364]	; (8010acc <udpClient_connect+0x2a4>)
 801095e:	009b      	lsls	r3, r3, #2
 8010960:	440b      	add	r3, r1
 8010962:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 8010966:	4b5b      	ldr	r3, [pc, #364]	; (8010ad4 <udpClient_connect+0x2ac>)
 8010968:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 801096c:	79fb      	ldrb	r3, [r7, #7]
 801096e:	3301      	adds	r3, #1
 8010970:	71fb      	strb	r3, [r7, #7]
 8010972:	4b56      	ldr	r3, [pc, #344]	; (8010acc <udpClient_connect+0x2a4>)
 8010974:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8010978:	79fa      	ldrb	r2, [r7, #7]
 801097a:	429a      	cmp	r2, r3
 801097c:	f4ff af64 	bcc.w	8010848 <udpClient_connect+0x20>
		break;
 8010980:	e09f      	b.n	8010ac2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010982:	2300      	movs	r3, #0
 8010984:	71fb      	strb	r3, [r7, #7]
 8010986:	e094      	b.n	8010ab2 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 8010988:	79fb      	ldrb	r3, [r7, #7]
 801098a:	4a50      	ldr	r2, [pc, #320]	; (8010acc <udpClient_connect+0x2a4>)
 801098c:	33ae      	adds	r3, #174	; 0xae
 801098e:	009b      	lsls	r3, r3, #2
 8010990:	4413      	add	r3, r2
 8010992:	785b      	ldrb	r3, [r3, #1]
 8010994:	061a      	lsls	r2, r3, #24
 8010996:	79fb      	ldrb	r3, [r7, #7]
 8010998:	494c      	ldr	r1, [pc, #304]	; (8010acc <udpClient_connect+0x2a4>)
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	440b      	add	r3, r1
 801099e:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80109a2:	041b      	lsls	r3, r3, #16
 80109a4:	431a      	orrs	r2, r3
 80109a6:	79fb      	ldrb	r3, [r7, #7]
 80109a8:	4948      	ldr	r1, [pc, #288]	; (8010acc <udpClient_connect+0x2a4>)
 80109aa:	009b      	lsls	r3, r3, #2
 80109ac:	440b      	add	r3, r1
 80109ae:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 80109b2:	021b      	lsls	r3, r3, #8
 80109b4:	431a      	orrs	r2, r3
 80109b6:	79fb      	ldrb	r3, [r7, #7]
 80109b8:	4944      	ldr	r1, [pc, #272]	; (8010acc <udpClient_connect+0x2a4>)
 80109ba:	009b      	lsls	r3, r3, #2
 80109bc:	440b      	add	r3, r1
 80109be:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 80109c2:	4313      	orrs	r3, r2
 80109c4:	061a      	lsls	r2, r3, #24
 80109c6:	79fb      	ldrb	r3, [r7, #7]
 80109c8:	4940      	ldr	r1, [pc, #256]	; (8010acc <udpClient_connect+0x2a4>)
 80109ca:	33ae      	adds	r3, #174	; 0xae
 80109cc:	009b      	lsls	r3, r3, #2
 80109ce:	440b      	add	r3, r1
 80109d0:	785b      	ldrb	r3, [r3, #1]
 80109d2:	0619      	lsls	r1, r3, #24
 80109d4:	79fb      	ldrb	r3, [r7, #7]
 80109d6:	483d      	ldr	r0, [pc, #244]	; (8010acc <udpClient_connect+0x2a4>)
 80109d8:	009b      	lsls	r3, r3, #2
 80109da:	4403      	add	r3, r0
 80109dc:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 80109e0:	041b      	lsls	r3, r3, #16
 80109e2:	4319      	orrs	r1, r3
 80109e4:	79fb      	ldrb	r3, [r7, #7]
 80109e6:	4839      	ldr	r0, [pc, #228]	; (8010acc <udpClient_connect+0x2a4>)
 80109e8:	009b      	lsls	r3, r3, #2
 80109ea:	4403      	add	r3, r0
 80109ec:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 80109f0:	021b      	lsls	r3, r3, #8
 80109f2:	4319      	orrs	r1, r3
 80109f4:	79fb      	ldrb	r3, [r7, #7]
 80109f6:	4835      	ldr	r0, [pc, #212]	; (8010acc <udpClient_connect+0x2a4>)
 80109f8:	009b      	lsls	r3, r3, #2
 80109fa:	4403      	add	r3, r0
 80109fc:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a00:	430b      	orrs	r3, r1
 8010a02:	021b      	lsls	r3, r3, #8
 8010a04:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010a08:	431a      	orrs	r2, r3
 8010a0a:	79fb      	ldrb	r3, [r7, #7]
 8010a0c:	492f      	ldr	r1, [pc, #188]	; (8010acc <udpClient_connect+0x2a4>)
 8010a0e:	33ae      	adds	r3, #174	; 0xae
 8010a10:	009b      	lsls	r3, r3, #2
 8010a12:	440b      	add	r3, r1
 8010a14:	785b      	ldrb	r3, [r3, #1]
 8010a16:	0619      	lsls	r1, r3, #24
 8010a18:	79fb      	ldrb	r3, [r7, #7]
 8010a1a:	482c      	ldr	r0, [pc, #176]	; (8010acc <udpClient_connect+0x2a4>)
 8010a1c:	009b      	lsls	r3, r3, #2
 8010a1e:	4403      	add	r3, r0
 8010a20:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010a24:	041b      	lsls	r3, r3, #16
 8010a26:	4319      	orrs	r1, r3
 8010a28:	79fb      	ldrb	r3, [r7, #7]
 8010a2a:	4828      	ldr	r0, [pc, #160]	; (8010acc <udpClient_connect+0x2a4>)
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4403      	add	r3, r0
 8010a30:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010a34:	021b      	lsls	r3, r3, #8
 8010a36:	4319      	orrs	r1, r3
 8010a38:	79fb      	ldrb	r3, [r7, #7]
 8010a3a:	4824      	ldr	r0, [pc, #144]	; (8010acc <udpClient_connect+0x2a4>)
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	4403      	add	r3, r0
 8010a40:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a44:	430b      	orrs	r3, r1
 8010a46:	0a1b      	lsrs	r3, r3, #8
 8010a48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010a4c:	ea42 0103 	orr.w	r1, r2, r3
 8010a50:	79fb      	ldrb	r3, [r7, #7]
 8010a52:	4a1e      	ldr	r2, [pc, #120]	; (8010acc <udpClient_connect+0x2a4>)
 8010a54:	33ae      	adds	r3, #174	; 0xae
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	4413      	add	r3, r2
 8010a5a:	785b      	ldrb	r3, [r3, #1]
 8010a5c:	061a      	lsls	r2, r3, #24
 8010a5e:	79fb      	ldrb	r3, [r7, #7]
 8010a60:	481a      	ldr	r0, [pc, #104]	; (8010acc <udpClient_connect+0x2a4>)
 8010a62:	009b      	lsls	r3, r3, #2
 8010a64:	4403      	add	r3, r0
 8010a66:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 8010a6a:	041b      	lsls	r3, r3, #16
 8010a6c:	431a      	orrs	r2, r3
 8010a6e:	79fb      	ldrb	r3, [r7, #7]
 8010a70:	4816      	ldr	r0, [pc, #88]	; (8010acc <udpClient_connect+0x2a4>)
 8010a72:	009b      	lsls	r3, r3, #2
 8010a74:	4403      	add	r3, r0
 8010a76:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 8010a7a:	021b      	lsls	r3, r3, #8
 8010a7c:	431a      	orrs	r2, r3
 8010a7e:	79fb      	ldrb	r3, [r7, #7]
 8010a80:	4812      	ldr	r0, [pc, #72]	; (8010acc <udpClient_connect+0x2a4>)
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	4403      	add	r3, r0
 8010a86:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 8010a8a:	4313      	orrs	r3, r2
 8010a8c:	0e1a      	lsrs	r2, r3, #24
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	430a      	orrs	r2, r1
 8010a92:	490f      	ldr	r1, [pc, #60]	; (8010ad0 <udpClient_connect+0x2a8>)
 8010a94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 8010a98:	79fb      	ldrb	r3, [r7, #7]
 8010a9a:	79fa      	ldrb	r2, [r7, #7]
 8010a9c:	490b      	ldr	r1, [pc, #44]	; (8010acc <udpClient_connect+0x2a4>)
 8010a9e:	009b      	lsls	r3, r3, #2
 8010aa0:	440b      	add	r3, r1
 8010aa2:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 8010aa6:	4b0b      	ldr	r3, [pc, #44]	; (8010ad4 <udpClient_connect+0x2ac>)
 8010aa8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 8010aac:	79fb      	ldrb	r3, [r7, #7]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	71fb      	strb	r3, [r7, #7]
 8010ab2:	4b06      	ldr	r3, [pc, #24]	; (8010acc <udpClient_connect+0x2a4>)
 8010ab4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8010ab8:	79fa      	ldrb	r2, [r7, #7]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	f4ff af64 	bcc.w	8010988 <udpClient_connect+0x160>
		break;
 8010ac0:	bf00      	nop
	}
}
 8010ac2:	370c      	adds	r7, #12
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aca:	4770      	bx	lr
 8010acc:	20000504 	.word	0x20000504
 8010ad0:	20006994 	.word	0x20006994
 8010ad4:	200069e8 	.word	0x200069e8

08010ad8 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b086      	sub	sp, #24
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	60f8      	str	r0, [r7, #12]
 8010ae0:	460b      	mov	r3, r1
 8010ae2:	607a      	str	r2, [r7, #4]
 8010ae4:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010aea:	7afb      	ldrb	r3, [r7, #11]
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010af2:	4619      	mov	r1, r3
 8010af4:	2036      	movs	r0, #54	; 0x36
 8010af6:	f011 fa49 	bl	8021f8c <pbuf_alloc>
 8010afa:	6138      	str	r0, [r7, #16]

//		char *SendingIP = ipaddr_ntoa(&IP_addr);
//
//		printf("\nSent IP:%s:%u\n",SendingIP,des_port[0]);

	if (txBuf != NULL)
 8010afc:	693b      	ldr	r3, [r7, #16]
 8010afe:	2b00      	cmp	r3, #0
 8010b00:	d01d      	beq.n	8010b3e <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 8010b02:	7afb      	ldrb	r3, [r7, #11]
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	461a      	mov	r2, r3
 8010b08:	68f9      	ldr	r1, [r7, #12]
 8010b0a:	6938      	ldr	r0, [r7, #16]
 8010b0c:	f011 ff1a 	bl	8022944 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 8010b10:	4b0d      	ldr	r3, [pc, #52]	; (8010b48 <udpClient_send+0x70>)
 8010b12:	6818      	ldr	r0, [r3, #0]
 8010b14:	4b0d      	ldr	r3, [pc, #52]	; (8010b4c <udpClient_send+0x74>)
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	1d3a      	adds	r2, r7, #4
 8010b1a:	6939      	ldr	r1, [r7, #16]
 8010b1c:	f012 faba 	bl	8023094 <udp_sendto>
 8010b20:	4603      	mov	r3, r0
 8010b22:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d005      	beq.n	8010b38 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 8010b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010b30:	4619      	mov	r1, r3
 8010b32:	4807      	ldr	r0, [pc, #28]	; (8010b50 <udpClient_send+0x78>)
 8010b34:	f015 fa44 	bl	8025fc0 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 8010b38:	6938      	ldr	r0, [r7, #16]
 8010b3a:	f011 fd09 	bl	8022550 <pbuf_free>
	}
}
 8010b3e:	bf00      	nop
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	20006a10 	.word	0x20006a10
 8010b4c:	200069e8 	.word	0x200069e8
 8010b50:	0802a7ac 	.word	0x0802a7ac

08010b54 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 8010b54:	b480      	push	{r7}
 8010b56:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 8010b58:	4b07      	ldr	r3, [pc, #28]	; (8010b78 <Is_There_EI_Data+0x24>)
 8010b5a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 8010b5e:	4b06      	ldr	r3, [pc, #24]	; (8010b78 <Is_There_EI_Data+0x24>)
 8010b60:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d001      	beq.n	8010b6c <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 8010b68:	2301      	movs	r3, #1
 8010b6a:	e000      	b.n	8010b6e <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 8010b6c:	2300      	movs	r3, #0
	}
}
 8010b6e:	4618      	mov	r0, r3
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr
 8010b78:	20006390 	.word	0x20006390

08010b7c <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 8010b82:	4b15      	ldr	r3, [pc, #84]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b84:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	b291      	uxth	r1, r2
 8010b8c:	4a12      	ldr	r2, [pc, #72]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b8e:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 8010b92:	461a      	mov	r2, r3
 8010b94:	4b10      	ldr	r3, [pc, #64]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b96:	5c9b      	ldrb	r3, [r3, r2]
 8010b98:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 8010b9a:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010b9c:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 8010ba0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010ba4:	d313      	bcc.n	8010bce <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 8010ba6:	4b0c      	ldr	r3, [pc, #48]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010ba8:	2200      	movs	r2, #0
 8010baa:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 8010bae:	4b0a      	ldr	r3, [pc, #40]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bb0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 8010bb4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010bb8:	d109      	bne.n	8010bce <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 8010bba:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8010bbe:	2100      	movs	r1, #0
 8010bc0:	4805      	ldr	r0, [pc, #20]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bc2:	f015 f915 	bl	8025df0 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 8010bc6:	4b04      	ldr	r3, [pc, #16]	; (8010bd8 <Get_Eth_Byte+0x5c>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 8010bce:	79fb      	ldrb	r3, [r7, #7]
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3708      	adds	r7, #8
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	bd80      	pop	{r7, pc}
 8010bd8:	20006390 	.word	0x20006390

08010bdc <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b086      	sub	sp, #24
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	60f8      	str	r0, [r7, #12]
 8010be4:	460b      	mov	r3, r1
 8010be6:	607a      	str	r2, [r7, #4]
 8010be8:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 8010bea:	2300      	movs	r3, #0
 8010bec:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 8010bee:	7afb      	ldrb	r3, [r7, #11]
 8010bf0:	b29b      	uxth	r3, r3
 8010bf2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	2036      	movs	r0, #54	; 0x36
 8010bfa:	f011 f9c7 	bl	8021f8c <pbuf_alloc>
 8010bfe:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 8010c00:	693b      	ldr	r3, [r7, #16]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d01a      	beq.n	8010c3c <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 8010c06:	7afb      	ldrb	r3, [r7, #11]
 8010c08:	b29b      	uxth	r3, r3
 8010c0a:	461a      	mov	r2, r3
 8010c0c:	68f9      	ldr	r1, [r7, #12]
 8010c0e:	6938      	ldr	r0, [r7, #16]
 8010c10:	f011 fe98 	bl	8022944 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 8010c14:	4b0b      	ldr	r3, [pc, #44]	; (8010c44 <Udp_Send_SigInfo+0x68>)
 8010c16:	6818      	ldr	r0, [r3, #0]
 8010c18:	1d3a      	adds	r2, r7, #4
 8010c1a:	f243 0339 	movw	r3, #12345	; 0x3039
 8010c1e:	6939      	ldr	r1, [r7, #16]
 8010c20:	f012 fa38 	bl	8023094 <udp_sendto>
 8010c24:	4603      	mov	r3, r0
 8010c26:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 8010c28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d002      	beq.n	8010c36 <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 8010c30:	4805      	ldr	r0, [pc, #20]	; (8010c48 <Udp_Send_SigInfo+0x6c>)
 8010c32:	f015 fa61 	bl	80260f8 <puts>
		}
		pbuf_free(txBuf);
 8010c36:	6938      	ldr	r0, [r7, #16]
 8010c38:	f011 fc8a 	bl	8022550 <pbuf_free>
	}
}
 8010c3c:	bf00      	nop
 8010c3e:	3718      	adds	r7, #24
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}
 8010c44:	20006a10 	.word	0x20006a10
 8010c48:	0802a7d4 	.word	0x0802a7d4

08010c4c <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8010c4c:	b580      	push	{r7, lr}
 8010c4e:	b094      	sub	sp, #80	; 0x50
 8010c50:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 8010c52:	4b38      	ldr	r3, [pc, #224]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c54:	4a38      	ldr	r2, [pc, #224]	; (8010d38 <MX_CAN2_Init+0xec>)
 8010c56:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 8010c58:	4b36      	ldr	r3, [pc, #216]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c5a:	2212      	movs	r2, #18
 8010c5c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 8010c5e:	4b35      	ldr	r3, [pc, #212]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c60:	2200      	movs	r2, #0
 8010c62:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010c64:	4b33      	ldr	r3, [pc, #204]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c66:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010c6a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010c6c:	4b31      	ldr	r3, [pc, #196]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010c72:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010c74:	4b2f      	ldr	r3, [pc, #188]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010c7a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8010c7c:	4b2d      	ldr	r3, [pc, #180]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c7e:	2200      	movs	r2, #0
 8010c80:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 8010c82:	4b2c      	ldr	r3, [pc, #176]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c84:	2200      	movs	r2, #0
 8010c86:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8010c88:	4b2a      	ldr	r3, [pc, #168]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c8a:	2200      	movs	r2, #0
 8010c8c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 8010c8e:	4b29      	ldr	r3, [pc, #164]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c90:	2201      	movs	r2, #1
 8010c92:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 8010c94:	4b27      	ldr	r3, [pc, #156]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c96:	2200      	movs	r2, #0
 8010c98:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8010c9a:	4b26      	ldr	r3, [pc, #152]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010c9c:	2200      	movs	r2, #0
 8010c9e:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8010ca0:	4824      	ldr	r0, [pc, #144]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010ca2:	f008 faa7 	bl	80191f4 <HAL_CAN_Init>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d001      	beq.n	8010cb0 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 8010cac:	f006 fc78 	bl	80175a0 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 8010cb4:	2304      	movs	r3, #4
 8010cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010cbc:	f242 0360 	movw	r3, #8288	; 0x2060
 8010cc0:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 8010cc6:	f242 0360 	movw	r3, #8288	; 0x2060
 8010cca:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 8010cdc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010ce0:	4619      	mov	r1, r3
 8010ce2:	4814      	ldr	r0, [pc, #80]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010ce4:	f008 fbcc 	bl	8019480 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 8010ce8:	2301      	movs	r3, #1
 8010cea:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 8010cec:	2305      	movs	r3, #5
 8010cee:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 8010cf4:	f242 1320 	movw	r3, #8480	; 0x2120
 8010cf8:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 8010cfe:	f242 1320 	movw	r3, #8480	; 0x2120
 8010d02:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 8010d04:	2300      	movs	r3, #0
 8010d06:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 8010d08:	2301      	movs	r3, #1
 8010d0a:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 8010d10:	2302      	movs	r3, #2
 8010d12:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 8010d14:	463b      	mov	r3, r7
 8010d16:	4619      	mov	r1, r3
 8010d18:	4806      	ldr	r0, [pc, #24]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d1a:	f008 fbb1 	bl	8019480 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 8010d1e:	4805      	ldr	r0, [pc, #20]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d20:	f008 fc9a 	bl	8019658 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 8010d24:	2110      	movs	r1, #16
 8010d26:	4803      	ldr	r0, [pc, #12]	; (8010d34 <MX_CAN2_Init+0xe8>)
 8010d28:	f008 fdec 	bl	8019904 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 8010d2c:	bf00      	nop
 8010d2e:	3750      	adds	r7, #80	; 0x50
 8010d30:	46bd      	mov	sp, r7
 8010d32:	bd80      	pop	{r7, pc}
 8010d34:	2000b290 	.word	0x2000b290
 8010d38:	40006800 	.word	0x40006800

08010d3c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b08a      	sub	sp, #40	; 0x28
 8010d40:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 8010d42:	4b34      	ldr	r3, [pc, #208]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d44:	4a34      	ldr	r2, [pc, #208]	; (8010e18 <MX_CAN3_Init+0xdc>)
 8010d46:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 8010d48:	4b32      	ldr	r3, [pc, #200]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d4a:	2205      	movs	r2, #5
 8010d4c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010d4e:	4b31      	ldr	r3, [pc, #196]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d50:	2200      	movs	r2, #0
 8010d52:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 8010d54:	4b2f      	ldr	r3, [pc, #188]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d56:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8010d5a:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 8010d5c:	4b2d      	ldr	r3, [pc, #180]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d5e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8010d62:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 8010d64:	4b2b      	ldr	r3, [pc, #172]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d66:	2200      	movs	r2, #0
 8010d68:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 8010d6a:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d6c:	4a2a      	ldr	r2, [pc, #168]	; (8010e18 <MX_CAN3_Init+0xdc>)
 8010d6e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 8010d70:	4b28      	ldr	r3, [pc, #160]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d72:	2212      	movs	r2, #18
 8010d74:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 8010d76:	4b27      	ldr	r3, [pc, #156]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d78:	2200      	movs	r2, #0
 8010d7a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8010d7c:	4b25      	ldr	r3, [pc, #148]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d7e:	2200      	movs	r2, #0
 8010d80:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 8010d82:	4b24      	ldr	r3, [pc, #144]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8010d88:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 8010d8a:	4b22      	ldr	r3, [pc, #136]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010d90:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 8010d92:	4b20      	ldr	r3, [pc, #128]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 8010d98:	4b1e      	ldr	r3, [pc, #120]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 8010d9e:	4b1d      	ldr	r3, [pc, #116]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010da0:	2200      	movs	r2, #0
 8010da2:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 8010da4:	4b1b      	ldr	r3, [pc, #108]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010da6:	2201      	movs	r2, #1
 8010da8:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 8010daa:	4b1a      	ldr	r3, [pc, #104]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010dac:	2200      	movs	r2, #0
 8010dae:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 8010db0:	4b18      	ldr	r3, [pc, #96]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010db2:	2200      	movs	r2, #0
 8010db4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 8010db6:	4817      	ldr	r0, [pc, #92]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010db8:	f008 fa1c 	bl	80191f4 <HAL_CAN_Init>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d001      	beq.n	8010dc6 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 8010dc2:	f006 fbed 	bl	80175a0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 8010dd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010dd6:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 8010ddc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010de0:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 8010de2:	2300      	movs	r3, #0
 8010de4:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 8010de6:	2300      	movs	r3, #0
 8010de8:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 8010dea:	2301      	movs	r3, #1
 8010dec:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 8010dee:	2306      	movs	r3, #6
 8010df0:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 8010df2:	463b      	mov	r3, r7
 8010df4:	4619      	mov	r1, r3
 8010df6:	4807      	ldr	r0, [pc, #28]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010df8:	f008 fb42 	bl	8019480 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 8010dfc:	4805      	ldr	r0, [pc, #20]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010dfe:	f008 fc2b 	bl	8019658 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 8010e02:	2102      	movs	r1, #2
 8010e04:	4803      	ldr	r0, [pc, #12]	; (8010e14 <MX_CAN3_Init+0xd8>)
 8010e06:	f008 fd7d 	bl	8019904 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 8010e0a:	bf00      	nop
 8010e0c:	3728      	adds	r7, #40	; 0x28
 8010e0e:	46bd      	mov	sp, r7
 8010e10:	bd80      	pop	{r7, pc}
 8010e12:	bf00      	nop
 8010e14:	2000b2f4 	.word	0x2000b2f4
 8010e18:	40003400 	.word	0x40003400

08010e1c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b08c      	sub	sp, #48	; 0x30
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e24:	f107 031c 	add.w	r3, r7, #28
 8010e28:	2200      	movs	r2, #0
 8010e2a:	601a      	str	r2, [r3, #0]
 8010e2c:	605a      	str	r2, [r3, #4]
 8010e2e:	609a      	str	r2, [r3, #8]
 8010e30:	60da      	str	r2, [r3, #12]
 8010e32:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	4a44      	ldr	r2, [pc, #272]	; (8010f4c <HAL_CAN_MspInit+0x130>)
 8010e3a:	4293      	cmp	r3, r2
 8010e3c:	d144      	bne.n	8010ec8 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 8010e3e:	4b44      	ldr	r3, [pc, #272]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e42:	4a43      	ldr	r2, [pc, #268]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8010e48:	6413      	str	r3, [r2, #64]	; 0x40
 8010e4a:	4b41      	ldr	r3, [pc, #260]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010e52:	61bb      	str	r3, [r7, #24]
 8010e54:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 8010e56:	4b3e      	ldr	r3, [pc, #248]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e5a:	4a3d      	ldr	r2, [pc, #244]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8010e60:	6413      	str	r3, [r2, #64]	; 0x40
 8010e62:	4b3b      	ldr	r3, [pc, #236]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010e6a:	617b      	str	r3, [r7, #20]
 8010e6c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8010e6e:	4b38      	ldr	r3, [pc, #224]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e72:	4a37      	ldr	r2, [pc, #220]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e74:	f043 0302 	orr.w	r3, r3, #2
 8010e78:	6313      	str	r3, [r2, #48]	; 0x30
 8010e7a:	4b35      	ldr	r3, [pc, #212]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e7e:	f003 0302 	and.w	r3, r3, #2
 8010e82:	613b      	str	r3, [r7, #16]
 8010e84:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 8010e86:	2360      	movs	r3, #96	; 0x60
 8010e88:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e8a:	2302      	movs	r3, #2
 8010e8c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e92:	2303      	movs	r3, #3
 8010e94:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8010e96:	2309      	movs	r3, #9
 8010e98:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010e9a:	f107 031c 	add.w	r3, r7, #28
 8010e9e:	4619      	mov	r1, r3
 8010ea0:	482c      	ldr	r0, [pc, #176]	; (8010f54 <HAL_CAN_MspInit+0x138>)
 8010ea2:	f00a fb8f 	bl	801b5c4 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 8010ea6:	2200      	movs	r2, #0
 8010ea8:	2104      	movs	r1, #4
 8010eaa:	2040      	movs	r0, #64	; 0x40
 8010eac:	f009 f85f 	bl	8019f6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8010eb0:	2040      	movs	r0, #64	; 0x40
 8010eb2:	f009 f878 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	2104      	movs	r1, #4
 8010eba:	2041      	movs	r0, #65	; 0x41
 8010ebc:	f009 f857 	bl	8019f6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8010ec0:	2041      	movs	r0, #65	; 0x41
 8010ec2:	f009 f870 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 8010ec6:	e03d      	b.n	8010f44 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	4a22      	ldr	r2, [pc, #136]	; (8010f58 <HAL_CAN_MspInit+0x13c>)
 8010ece:	4293      	cmp	r3, r2
 8010ed0:	d138      	bne.n	8010f44 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 8010ed2:	4b1f      	ldr	r3, [pc, #124]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed6:	4a1e      	ldr	r2, [pc, #120]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ed8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8010edc:	6413      	str	r3, [r2, #64]	; 0x40
 8010ede:	4b1c      	ldr	r3, [pc, #112]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ee2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010ee6:	60fb      	str	r3, [r7, #12]
 8010ee8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8010eea:	4b19      	ldr	r3, [pc, #100]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eee:	4a18      	ldr	r2, [pc, #96]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ef0:	f043 0301 	orr.w	r3, r3, #1
 8010ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8010ef6:	4b16      	ldr	r3, [pc, #88]	; (8010f50 <HAL_CAN_MspInit+0x134>)
 8010ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010efa:	f003 0301 	and.w	r3, r3, #1
 8010efe:	60bb      	str	r3, [r7, #8]
 8010f00:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 8010f02:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8010f06:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f08:	2302      	movs	r3, #2
 8010f0a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f10:	2303      	movs	r3, #3
 8010f12:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 8010f14:	230b      	movs	r3, #11
 8010f16:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f18:	f107 031c 	add.w	r3, r7, #28
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	480f      	ldr	r0, [pc, #60]	; (8010f5c <HAL_CAN_MspInit+0x140>)
 8010f20:	f00a fb50 	bl	801b5c4 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 8010f24:	2200      	movs	r2, #0
 8010f26:	2100      	movs	r1, #0
 8010f28:	2069      	movs	r0, #105	; 0x69
 8010f2a:	f009 f820 	bl	8019f6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 8010f2e:	2069      	movs	r0, #105	; 0x69
 8010f30:	f009 f839 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 8010f34:	2200      	movs	r2, #0
 8010f36:	2100      	movs	r1, #0
 8010f38:	206a      	movs	r0, #106	; 0x6a
 8010f3a:	f009 f818 	bl	8019f6e <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 8010f3e:	206a      	movs	r0, #106	; 0x6a
 8010f40:	f009 f831 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
}
 8010f44:	bf00      	nop
 8010f46:	3730      	adds	r7, #48	; 0x30
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bd80      	pop	{r7, pc}
 8010f4c:	40006800 	.word	0x40006800
 8010f50:	40023800 	.word	0x40023800
 8010f54:	40020400 	.word	0x40020400
 8010f58:	40003400 	.word	0x40003400
 8010f5c:	40020000 	.word	0x40020000

08010f60 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 8010f60:	b480      	push	{r7}
 8010f62:	b085      	sub	sp, #20
 8010f64:	af00      	add	r7, sp, #0
 8010f66:	4603      	mov	r3, r0
 8010f68:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 8010f6e:	2300      	movs	r3, #0
 8010f70:	81fb      	strh	r3, [r7, #14]

#warning "NOT SENDING CAN PACKETS"
	return;
 8010f72:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 8010f74:	3714      	adds	r7, #20
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
	...

08010f80 <HAL_CAN_RxFifo0MsgPendingCallback>:
	}
}

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8010f80:	b580      	push	{r7, lr}
 8010f82:	b082      	sub	sp, #8
 8010f84:	af00      	add	r7, sp, #0
 8010f86:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	4a3e      	ldr	r2, [pc, #248]	; (8011088 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d175      	bne.n	801107e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 8010f92:	4b3e      	ldr	r3, [pc, #248]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010f94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f98:	881b      	ldrh	r3, [r3, #0]
 8010f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010f9e:	d104      	bne.n	8010faa <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 8010fa0:	4b3a      	ldr	r3, [pc, #232]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fa2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 8010faa:	4b39      	ldr	r3, [pc, #228]	; (8011090 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8010fac:	4a39      	ldr	r2, [pc, #228]	; (8011094 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010fae:	2100      	movs	r1, #0
 8010fb0:	4839      	ldr	r0, [pc, #228]	; (8011098 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 8010fb2:	f008 fb95 	bl	80196e0 <HAL_CAN_GetRxMessage>
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d001      	beq.n	8010fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 8010fbc:	f006 faf0 	bl	80175a0 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 8010fc0:	4b32      	ldr	r3, [pc, #200]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	4a30      	ldr	r2, [pc, #192]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fca:	011b      	lsls	r3, r3, #4
 8010fcc:	4413      	add	r3, r2
 8010fce:	330f      	adds	r3, #15
 8010fd0:	2203      	movs	r2, #3
 8010fd2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 8010fd4:	4b2f      	ldr	r3, [pc, #188]	; (8011094 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010fd6:	691a      	ldr	r2, [r3, #16]
 8010fd8:	4b2c      	ldr	r3, [pc, #176]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fde:	881b      	ldrh	r3, [r3, #0]
 8010fe0:	b2d1      	uxtb	r1, r2
 8010fe2:	4a2a      	ldr	r2, [pc, #168]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010fe4:	011b      	lsls	r3, r3, #4
 8010fe6:	4413      	add	r3, r2
 8010fe8:	330c      	adds	r3, #12
 8010fea:	460a      	mov	r2, r1
 8010fec:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 8010fee:	4b29      	ldr	r3, [pc, #164]	; (8011094 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 8010ff0:	689a      	ldr	r2, [r3, #8]
 8010ff2:	4b26      	ldr	r3, [pc, #152]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010ff4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ff8:	881b      	ldrh	r3, [r3, #0]
 8010ffa:	b2d1      	uxtb	r1, r2
 8010ffc:	4a23      	ldr	r2, [pc, #140]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8010ffe:	011b      	lsls	r3, r3, #4
 8011000:	4413      	add	r3, r2
 8011002:	330d      	adds	r3, #13
 8011004:	460a      	mov	r2, r1
 8011006:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 8011008:	4b22      	ldr	r3, [pc, #136]	; (8011094 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801100a:	68da      	ldr	r2, [r3, #12]
 801100c:	4b1f      	ldr	r3, [pc, #124]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801100e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011012:	881b      	ldrh	r3, [r3, #0]
 8011014:	b2d1      	uxtb	r1, r2
 8011016:	4a1d      	ldr	r2, [pc, #116]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011018:	011b      	lsls	r3, r3, #4
 801101a:	4413      	add	r3, r2
 801101c:	330e      	adds	r3, #14
 801101e:	460a      	mov	r2, r1
 8011020:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 8011022:	4b1a      	ldr	r3, [pc, #104]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011024:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	4618      	mov	r0, r3
 801102c:	4b19      	ldr	r3, [pc, #100]	; (8011094 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 801102e:	681a      	ldr	r2, [r3, #0]
 8011030:	4916      	ldr	r1, [pc, #88]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011032:	0103      	lsls	r3, r0, #4
 8011034:	440b      	add	r3, r1
 8011036:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 8011038:	4b14      	ldr	r3, [pc, #80]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801103a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801103e:	881b      	ldrh	r3, [r3, #0]
 8011040:	4a12      	ldr	r2, [pc, #72]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011042:	011b      	lsls	r3, r3, #4
 8011044:	4413      	add	r3, r2
 8011046:	330e      	adds	r3, #14
 8011048:	781b      	ldrb	r3, [r3, #0]
 801104a:	2b00      	cmp	r3, #0
 801104c:	d117      	bne.n	801107e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 801104e:	4b0f      	ldr	r3, [pc, #60]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011050:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011054:	881b      	ldrh	r3, [r3, #0]
 8011056:	011b      	lsls	r3, r3, #4
 8011058:	4a0c      	ldr	r2, [pc, #48]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801105a:	4413      	add	r3, r2
 801105c:	3304      	adds	r3, #4
 801105e:	490c      	ldr	r1, [pc, #48]	; (8011090 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 8011060:	461a      	mov	r2, r3
 8011062:	460b      	mov	r3, r1
 8011064:	cb03      	ldmia	r3!, {r0, r1}
 8011066:	6010      	str	r0, [r2, #0]
 8011068:	6051      	str	r1, [r2, #4]
			canRead.In++;
 801106a:	4b08      	ldr	r3, [pc, #32]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 801106c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011070:	881b      	ldrh	r3, [r3, #0]
 8011072:	3301      	adds	r3, #1
 8011074:	b29a      	uxth	r2, r3
 8011076:	4b05      	ldr	r3, [pc, #20]	; (801108c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8011078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801107c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 801107e:	bf00      	nop
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	40003400 	.word	0x40003400
 801108c:	20007240 	.word	0x20007240
 8011090:	2000b284 	.word	0x2000b284
 8011094:	2000b260 	.word	0x2000b260
 8011098:	2000b2f4 	.word	0x2000b2f4

0801109c <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 80110a4:	4b42      	ldr	r3, [pc, #264]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110aa:	881b      	ldrh	r3, [r3, #0]
 80110ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80110b0:	d104      	bne.n	80110bc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 80110b2:	4b3f      	ldr	r3, [pc, #252]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110b8:	2200      	movs	r2, #0
 80110ba:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 80110bc:	4b3d      	ldr	r3, [pc, #244]	; (80111b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 80110be:	4a3e      	ldr	r2, [pc, #248]	; (80111b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80110c0:	2101      	movs	r1, #1
 80110c2:	483e      	ldr	r0, [pc, #248]	; (80111bc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 80110c4:	f008 fb0c 	bl	80196e0 <HAL_CAN_GetRxMessage>
 80110c8:	4603      	mov	r3, r0
 80110ca:	461a      	mov	r2, r3
 80110cc:	4b3c      	ldr	r3, [pc, #240]	; (80111c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80110ce:	701a      	strb	r2, [r3, #0]
 80110d0:	4b3b      	ldr	r3, [pc, #236]	; (80111c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d007      	beq.n	80110e8 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 80110d8:	4b39      	ldr	r3, [pc, #228]	; (80111c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 80110da:	781b      	ldrb	r3, [r3, #0]
 80110dc:	4619      	mov	r1, r3
 80110de:	4839      	ldr	r0, [pc, #228]	; (80111c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 80110e0:	f014 ff6e 	bl	8025fc0 <iprintf>
		Error_Handler();
 80110e4:	f006 fa5c 	bl	80175a0 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 80110e8:	4b31      	ldr	r3, [pc, #196]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80110ee:	881b      	ldrh	r3, [r3, #0]
 80110f0:	4a2f      	ldr	r2, [pc, #188]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80110f2:	011b      	lsls	r3, r3, #4
 80110f4:	4413      	add	r3, r2
 80110f6:	330f      	adds	r3, #15
 80110f8:	2202      	movs	r2, #2
 80110fa:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 80110fc:	4b2e      	ldr	r3, [pc, #184]	; (80111b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 80110fe:	691a      	ldr	r2, [r3, #16]
 8011100:	4b2b      	ldr	r3, [pc, #172]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011102:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011106:	881b      	ldrh	r3, [r3, #0]
 8011108:	b2d1      	uxtb	r1, r2
 801110a:	4a29      	ldr	r2, [pc, #164]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801110c:	011b      	lsls	r3, r3, #4
 801110e:	4413      	add	r3, r2
 8011110:	330c      	adds	r3, #12
 8011112:	460a      	mov	r2, r1
 8011114:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 8011116:	4b28      	ldr	r3, [pc, #160]	; (80111b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011118:	689a      	ldr	r2, [r3, #8]
 801111a:	4b25      	ldr	r3, [pc, #148]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801111c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011120:	881b      	ldrh	r3, [r3, #0]
 8011122:	b2d1      	uxtb	r1, r2
 8011124:	4a22      	ldr	r2, [pc, #136]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011126:	011b      	lsls	r3, r3, #4
 8011128:	4413      	add	r3, r2
 801112a:	330d      	adds	r3, #13
 801112c:	460a      	mov	r2, r1
 801112e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8011130:	4b21      	ldr	r3, [pc, #132]	; (80111b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011132:	68da      	ldr	r2, [r3, #12]
 8011134:	4b1e      	ldr	r3, [pc, #120]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011136:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801113a:	881b      	ldrh	r3, [r3, #0]
 801113c:	b2d1      	uxtb	r1, r2
 801113e:	4a1c      	ldr	r2, [pc, #112]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011140:	011b      	lsls	r3, r3, #4
 8011142:	4413      	add	r3, r2
 8011144:	330e      	adds	r3, #14
 8011146:	460a      	mov	r2, r1
 8011148:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 801114a:	4b19      	ldr	r3, [pc, #100]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801114c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011150:	881b      	ldrh	r3, [r3, #0]
 8011152:	4618      	mov	r0, r3
 8011154:	4b18      	ldr	r3, [pc, #96]	; (80111b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8011156:	681a      	ldr	r2, [r3, #0]
 8011158:	4915      	ldr	r1, [pc, #84]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801115a:	0103      	lsls	r3, r0, #4
 801115c:	440b      	add	r3, r1
 801115e:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8011160:	4b13      	ldr	r3, [pc, #76]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011162:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011166:	881b      	ldrh	r3, [r3, #0]
 8011168:	4a11      	ldr	r2, [pc, #68]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801116a:	011b      	lsls	r3, r3, #4
 801116c:	4413      	add	r3, r2
 801116e:	330e      	adds	r3, #14
 8011170:	781b      	ldrb	r3, [r3, #0]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d117      	bne.n	80111a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8011176:	4b0e      	ldr	r3, [pc, #56]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011178:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	011b      	lsls	r3, r3, #4
 8011180:	4a0b      	ldr	r2, [pc, #44]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011182:	4413      	add	r3, r2
 8011184:	3304      	adds	r3, #4
 8011186:	490b      	ldr	r1, [pc, #44]	; (80111b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8011188:	461a      	mov	r2, r3
 801118a:	460b      	mov	r3, r1
 801118c:	cb03      	ldmia	r3!, {r0, r1}
 801118e:	6010      	str	r0, [r2, #0]
 8011190:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8011192:	4b07      	ldr	r3, [pc, #28]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8011194:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011198:	881b      	ldrh	r3, [r3, #0]
 801119a:	3301      	adds	r3, #1
 801119c:	b29a      	uxth	r2, r3
 801119e:	4b04      	ldr	r3, [pc, #16]	; (80111b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80111a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111a4:	801a      	strh	r2, [r3, #0]
	}
}
 80111a6:	bf00      	nop
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop
 80111b0:	20007240 	.word	0x20007240
 80111b4:	2000b27c 	.word	0x2000b27c
 80111b8:	2000b244 	.word	0x2000b244
 80111bc:	2000b290 	.word	0x2000b290
 80111c0:	2000b28c 	.word	0x2000b28c
 80111c4:	0802a814 	.word	0x0802a814

080111c8 <canDataReady>:


unsigned char canDataReady()
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 80111ce:	2300      	movs	r3, #0
 80111d0:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 80111d2:	4b27      	ldr	r3, [pc, #156]	; (8011270 <canDataReady+0xa8>)
 80111d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111d8:	881a      	ldrh	r2, [r3, #0]
 80111da:	4b25      	ldr	r3, [pc, #148]	; (8011270 <canDataReady+0xa8>)
 80111dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111e0:	885b      	ldrh	r3, [r3, #2]
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d101      	bne.n	80111ea <canDataReady+0x22>
	{
		return 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	e03e      	b.n	8011268 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80111ea:	4b21      	ldr	r3, [pc, #132]	; (8011270 <canDataReady+0xa8>)
 80111ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111f0:	885b      	ldrh	r3, [r3, #2]
 80111f2:	3301      	adds	r3, #1
 80111f4:	607b      	str	r3, [r7, #4]
 80111f6:	e02e      	b.n	8011256 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 80111f8:	4b1d      	ldr	r3, [pc, #116]	; (8011270 <canDataReady+0xa8>)
 80111fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111fe:	885b      	ldrh	r3, [r3, #2]
 8011200:	011b      	lsls	r3, r3, #4
 8011202:	4a1b      	ldr	r2, [pc, #108]	; (8011270 <canDataReady+0xa8>)
 8011204:	1898      	adds	r0, r3, r2
 8011206:	4b1a      	ldr	r3, [pc, #104]	; (8011270 <canDataReady+0xa8>)
 8011208:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801120c:	881b      	ldrh	r3, [r3, #0]
 801120e:	011b      	lsls	r3, r3, #4
 8011210:	4a17      	ldr	r2, [pc, #92]	; (8011270 <canDataReady+0xa8>)
 8011212:	4413      	add	r3, r2
 8011214:	2210      	movs	r2, #16
 8011216:	4619      	mov	r1, r3
 8011218:	f014 fdb2 	bl	8025d80 <memcmp>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d116      	bne.n	8011250 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011222:	4b13      	ldr	r3, [pc, #76]	; (8011270 <canDataReady+0xa8>)
 8011224:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011228:	885b      	ldrh	r3, [r3, #2]
 801122a:	011b      	lsls	r3, r3, #4
 801122c:	4a10      	ldr	r2, [pc, #64]	; (8011270 <canDataReady+0xa8>)
 801122e:	4413      	add	r3, r2
 8011230:	2210      	movs	r2, #16
 8011232:	2100      	movs	r1, #0
 8011234:	4618      	mov	r0, r3
 8011236:	f014 fddb 	bl	8025df0 <memset>
			canRead.Out++;
 801123a:	4b0d      	ldr	r3, [pc, #52]	; (8011270 <canDataReady+0xa8>)
 801123c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011240:	885b      	ldrh	r3, [r3, #2]
 8011242:	3301      	adds	r3, #1
 8011244:	b29a      	uxth	r2, r3
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <canDataReady+0xa8>)
 8011248:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801124c:	805a      	strh	r2, [r3, #2]
			break;
 801124e:	e00a      	b.n	8011266 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	3301      	adds	r3, #1
 8011254:	607b      	str	r3, [r7, #4]
 8011256:	4b06      	ldr	r3, [pc, #24]	; (8011270 <canDataReady+0xa8>)
 8011258:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801125c:	881b      	ldrh	r3, [r3, #0]
 801125e:	461a      	mov	r2, r3
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	4293      	cmp	r3, r2
 8011264:	d3c8      	bcc.n	80111f8 <canDataReady+0x30>
		}
	}
	return 1;
 8011266:	2301      	movs	r3, #1
}
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}
 8011270:	20007240 	.word	0x20007240

08011274 <readCanToStructs>:

void readCanToStructs(void)
{
 8011274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011276:	b08f      	sub	sp, #60	; 0x3c
 8011278:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 801127a:	2300      	movs	r3, #0
 801127c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011280:	2300      	movs	r3, #0
 8011282:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011286:	2300      	movs	r3, #0
 8011288:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 801128c:	2300      	movs	r3, #0
 801128e:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8011290:	4bc4      	ldr	r3, [pc, #784]	; (80115a4 <readCanToStructs+0x330>)
 8011292:	781b      	ldrb	r3, [r3, #0]
 8011294:	3b01      	subs	r3, #1
 8011296:	2b03      	cmp	r3, #3
 8011298:	f204 80d7 	bhi.w	801544a <readCanToStructs+0x41d6>
 801129c:	a201      	add	r2, pc, #4	; (adr r2, 80112a4 <readCanToStructs+0x30>)
 801129e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a2:	bf00      	nop
 80112a4:	080112b5 	.word	0x080112b5
 80112a8:	080139bb 	.word	0x080139bb
 80112ac:	08014a89 	.word	0x08014a89
 80112b0:	0801543f 	.word	0x0801543f
	{
	case HITACHI:
	{
		/* ___________________ HITACHI _______________ */
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80112b4:	4bbc      	ldr	r3, [pc, #752]	; (80115a8 <readCanToStructs+0x334>)
 80112b6:	681b      	ldr	r3, [r3, #0]
 80112b8:	09db      	lsrs	r3, r3, #7
 80112ba:	f003 0301 	and.w	r3, r3, #1
 80112be:	2b00      	cmp	r3, #0
 80112c0:	f044 80c5 	bne.w	801544e <readCanToStructs+0x41da>
		{
			return;
		}
		while(canDataReady())
 80112c4:	f001 baf3 	b.w	80128ae <readCanToStructs+0x163a>
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80112c8:	4bb8      	ldr	r3, [pc, #736]	; (80115ac <readCanToStructs+0x338>)
 80112ca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112ce:	885b      	ldrh	r3, [r3, #2]
 80112d0:	4ab6      	ldr	r2, [pc, #728]	; (80115ac <readCanToStructs+0x338>)
 80112d2:	011b      	lsls	r3, r3, #4
 80112d4:	4413      	add	r3, r2
 80112d6:	330f      	adds	r3, #15
 80112d8:	781b      	ldrb	r3, [r3, #0]
 80112da:	3b01      	subs	r3, #1
 80112dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80112e0:	4bb2      	ldr	r3, [pc, #712]	; (80115ac <readCanToStructs+0x338>)
 80112e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112e6:	885b      	ldrh	r3, [r3, #2]
 80112e8:	4ab0      	ldr	r2, [pc, #704]	; (80115ac <readCanToStructs+0x338>)
 80112ea:	011b      	lsls	r3, r3, #4
 80112ec:	4413      	add	r3, r2
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	f240 220a 	movw	r2, #522	; 0x20a
 80112f4:	4293      	cmp	r3, r2
 80112f6:	f201 82b7 	bhi.w	8012868 <readCanToStructs+0x15f4>
 80112fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112fe:	d80a      	bhi.n	8011316 <readCanToStructs+0xa2>
 8011300:	f240 1203 	movw	r2, #259	; 0x103
 8011304:	4293      	cmp	r3, r2
 8011306:	d023      	beq.n	8011350 <readCanToStructs+0xdc>
 8011308:	f240 1209 	movw	r2, #265	; 0x109
 801130c:	4293      	cmp	r3, r2
 801130e:	f000 80f5 	beq.w	80114fc <readCanToStructs+0x288>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8011312:	f001 baa9 	b.w	8012868 <readCanToStructs+0x15f4>
 8011316:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 801131a:	2b09      	cmp	r3, #9
 801131c:	f201 82a4 	bhi.w	8012868 <readCanToStructs+0x15f4>
 8011320:	a201      	add	r2, pc, #4	; (adr r2, 8011328 <readCanToStructs+0xb4>)
 8011322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011326:	bf00      	nop
 8011328:	080116d1 	.word	0x080116d1
 801132c:	080118d9 	.word	0x080118d9
 8011330:	08011ab1 	.word	0x08011ab1
 8011334:	08011ccb 	.word	0x08011ccb
 8011338:	08011ee7 	.word	0x08011ee7
 801133c:	08012869 	.word	0x08012869
 8011340:	0801207f 	.word	0x0801207f
 8011344:	080122b7 	.word	0x080122b7
 8011348:	080124f3 	.word	0x080124f3
 801134c:	08012695 	.word	0x08012695
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011350:	4b97      	ldr	r3, [pc, #604]	; (80115b0 <readCanToStructs+0x33c>)
 8011352:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011354:	4b95      	ldr	r3, [pc, #596]	; (80115ac <readCanToStructs+0x338>)
 8011356:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801135a:	885b      	ldrh	r3, [r3, #2]
 801135c:	4a93      	ldr	r2, [pc, #588]	; (80115ac <readCanToStructs+0x338>)
 801135e:	011b      	lsls	r3, r3, #4
 8011360:	4413      	add	r3, r2
 8011362:	3304      	adds	r3, #4
 8011364:	781b      	ldrb	r3, [r3, #0]
 8011366:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801136a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801136e:	2b00      	cmp	r3, #0
 8011370:	d110      	bne.n	8011394 <readCanToStructs+0x120>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011372:	2206      	movs	r2, #6
 8011374:	2100      	movs	r1, #0
 8011376:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011378:	f014 fd3a 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801137c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011380:	4a8c      	ldr	r2, [pc, #560]	; (80115b4 <readCanToStructs+0x340>)
 8011382:	f240 4116 	movw	r1, #1046	; 0x416
 8011386:	fb01 f303 	mul.w	r3, r1, r3
 801138a:	4413      	add	r3, r2
 801138c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011390:	2200      	movs	r2, #0
 8011392:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011398:	4a86      	ldr	r2, [pc, #536]	; (80115b4 <readCanToStructs+0x340>)
 801139a:	f240 4116 	movw	r1, #1046	; 0x416
 801139e:	fb01 f303 	mul.w	r3, r1, r3
 80113a2:	4413      	add	r3, r2
 80113a4:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113a8:	781b      	ldrb	r3, [r3, #0]
 80113aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80113ae:	429a      	cmp	r2, r3
 80113b0:	d015      	beq.n	80113de <readCanToStructs+0x16a>
					printf("GPS Packet Seq no MisMatch\n");
 80113b2:	4881      	ldr	r0, [pc, #516]	; (80115b8 <readCanToStructs+0x344>)
 80113b4:	f014 fea0 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80113b8:	2206      	movs	r2, #6
 80113ba:	2100      	movs	r1, #0
 80113bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80113be:	f014 fd17 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80113c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113c6:	4a7b      	ldr	r2, [pc, #492]	; (80115b4 <readCanToStructs+0x340>)
 80113c8:	f240 4116 	movw	r1, #1046	; 0x416
 80113cc:	fb01 f303 	mul.w	r3, r1, r3
 80113d0:	4413      	add	r3, r2
 80113d2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80113d6:	2200      	movs	r2, #0
 80113d8:	701a      	strb	r2, [r3, #0]
					break;
 80113da:	f001 ba46 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80113de:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80113e2:	4613      	mov	r3, r2
 80113e4:	00db      	lsls	r3, r3, #3
 80113e6:	1a9b      	subs	r3, r3, r2
 80113e8:	461a      	mov	r2, r3
 80113ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113ec:	4413      	add	r3, r2
 80113ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80113f0:	2301      	movs	r3, #1
 80113f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80113f6:	e016      	b.n	8011426 <readCanToStructs+0x1b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80113f8:	4b6c      	ldr	r3, [pc, #432]	; (80115ac <readCanToStructs+0x338>)
 80113fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113fe:	885b      	ldrh	r3, [r3, #2]
 8011400:	461a      	mov	r2, r3
 8011402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011406:	4969      	ldr	r1, [pc, #420]	; (80115ac <readCanToStructs+0x338>)
 8011408:	0112      	lsls	r2, r2, #4
 801140a:	440a      	add	r2, r1
 801140c:	4413      	add	r3, r2
 801140e:	3304      	adds	r3, #4
 8011410:	781a      	ldrb	r2, [r3, #0]
 8011412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011414:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011418:	3301      	adds	r3, #1
 801141a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801141c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011420:	3301      	adds	r3, #1
 8011422:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011426:	4b61      	ldr	r3, [pc, #388]	; (80115ac <readCanToStructs+0x338>)
 8011428:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801142c:	885b      	ldrh	r3, [r3, #2]
 801142e:	4a5f      	ldr	r2, [pc, #380]	; (80115ac <readCanToStructs+0x338>)
 8011430:	011b      	lsls	r3, r3, #4
 8011432:	4413      	add	r3, r2
 8011434:	330c      	adds	r3, #12
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801143c:	429a      	cmp	r2, r3
 801143e:	d3db      	bcc.n	80113f8 <readCanToStructs+0x184>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011440:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011444:	4a5b      	ldr	r2, [pc, #364]	; (80115b4 <readCanToStructs+0x340>)
 8011446:	f240 4116 	movw	r1, #1046	; 0x416
 801144a:	fb01 f303 	mul.w	r3, r1, r3
 801144e:	4413      	add	r3, r2
 8011450:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011454:	781b      	ldrb	r3, [r3, #0]
 8011456:	461a      	mov	r2, r3
 8011458:	4613      	mov	r3, r2
 801145a:	00db      	lsls	r3, r3, #3
 801145c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801145e:	4b53      	ldr	r3, [pc, #332]	; (80115ac <readCanToStructs+0x338>)
 8011460:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011464:	885b      	ldrh	r3, [r3, #2]
 8011466:	4951      	ldr	r1, [pc, #324]	; (80115ac <readCanToStructs+0x338>)
 8011468:	011b      	lsls	r3, r3, #4
 801146a:	440b      	add	r3, r1
 801146c:	330c      	adds	r3, #12
 801146e:	781b      	ldrb	r3, [r3, #0]
 8011470:	3b01      	subs	r3, #1
 8011472:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011474:	2b05      	cmp	r3, #5
 8011476:	d91c      	bls.n	80114b2 <readCanToStructs+0x23e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011478:	4b50      	ldr	r3, [pc, #320]	; (80115bc <readCanToStructs+0x348>)
 801147a:	4a4d      	ldr	r2, [pc, #308]	; (80115b0 <readCanToStructs+0x33c>)
 801147c:	6811      	ldr	r1, [r2, #0]
 801147e:	6019      	str	r1, [r3, #0]
 8011480:	8892      	ldrh	r2, [r2, #4]
 8011482:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011484:	4b4e      	ldr	r3, [pc, #312]	; (80115c0 <readCanToStructs+0x34c>)
 8011486:	781b      	ldrb	r3, [r3, #0]
 8011488:	2b01      	cmp	r3, #1
 801148a:	d102      	bne.n	8011492 <readCanToStructs+0x21e>
						printf("GPS_PACKET_RECEIVED\n");
 801148c:	484d      	ldr	r0, [pc, #308]	; (80115c4 <readCanToStructs+0x350>)
 801148e:	f014 fe33 	bl	80260f8 <puts>
					Write_RTC();
 8011492:	f7fb fa89 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801149a:	4a46      	ldr	r2, [pc, #280]	; (80115b4 <readCanToStructs+0x340>)
 801149c:	f240 4116 	movw	r1, #1046	; 0x416
 80114a0:	fb01 f303 	mul.w	r3, r1, r3
 80114a4:	4413      	add	r3, r2
 80114a6:	f203 2307 	addw	r3, r3, #519	; 0x207
 80114aa:	2200      	movs	r2, #0
 80114ac:	701a      	strb	r2, [r3, #0]
				break;
 80114ae:	f001 b9dc 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80114b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114b6:	4a3f      	ldr	r2, [pc, #252]	; (80115b4 <readCanToStructs+0x340>)
 80114b8:	f240 4116 	movw	r1, #1046	; 0x416
 80114bc:	fb01 f303 	mul.w	r3, r1, r3
 80114c0:	4413      	add	r3, r2
 80114c2:	f203 2306 	addw	r3, r3, #518	; 0x206
 80114c6:	2201      	movs	r2, #1
 80114c8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80114ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114ce:	4939      	ldr	r1, [pc, #228]	; (80115b4 <readCanToStructs+0x340>)
 80114d0:	f240 4216 	movw	r2, #1046	; 0x416
 80114d4:	fb03 f202 	mul.w	r2, r3, r2
 80114d8:	440a      	add	r2, r1
 80114da:	f202 2207 	addw	r2, r2, #519	; 0x207
 80114de:	7812      	ldrb	r2, [r2, #0]
 80114e0:	3201      	adds	r2, #1
 80114e2:	b2d0      	uxtb	r0, r2
 80114e4:	4a33      	ldr	r2, [pc, #204]	; (80115b4 <readCanToStructs+0x340>)
 80114e6:	f240 4116 	movw	r1, #1046	; 0x416
 80114ea:	fb01 f303 	mul.w	r3, r1, r3
 80114ee:	4413      	add	r3, r2
 80114f0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80114f4:	4602      	mov	r2, r0
 80114f6:	701a      	strb	r2, [r3, #0]
				break;
 80114f8:	f001 b9b7 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80114fc:	4b2c      	ldr	r3, [pc, #176]	; (80115b0 <readCanToStructs+0x33c>)
 80114fe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011500:	4b2a      	ldr	r3, [pc, #168]	; (80115ac <readCanToStructs+0x338>)
 8011502:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011506:	885b      	ldrh	r3, [r3, #2]
 8011508:	4a28      	ldr	r2, [pc, #160]	; (80115ac <readCanToStructs+0x338>)
 801150a:	011b      	lsls	r3, r3, #4
 801150c:	4413      	add	r3, r2
 801150e:	3304      	adds	r3, #4
 8011510:	781b      	ldrb	r3, [r3, #0]
 8011512:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011516:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801151a:	2b00      	cmp	r3, #0
 801151c:	d110      	bne.n	8011540 <readCanToStructs+0x2cc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801151e:	2206      	movs	r2, #6
 8011520:	2100      	movs	r1, #0
 8011522:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011524:	f014 fc64 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801152c:	4a21      	ldr	r2, [pc, #132]	; (80115b4 <readCanToStructs+0x340>)
 801152e:	f240 4116 	movw	r1, #1046	; 0x416
 8011532:	fb01 f303 	mul.w	r3, r1, r3
 8011536:	4413      	add	r3, r2
 8011538:	f203 2313 	addw	r3, r3, #531	; 0x213
 801153c:	2200      	movs	r2, #0
 801153e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011544:	4a1b      	ldr	r2, [pc, #108]	; (80115b4 <readCanToStructs+0x340>)
 8011546:	f240 4116 	movw	r1, #1046	; 0x416
 801154a:	fb01 f303 	mul.w	r3, r1, r3
 801154e:	4413      	add	r3, r2
 8011550:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801155a:	429a      	cmp	r2, r3
 801155c:	d015      	beq.n	801158a <readCanToStructs+0x316>
					printf("GPS2 Packet Seq no MisMatch\n");
 801155e:	481a      	ldr	r0, [pc, #104]	; (80115c8 <readCanToStructs+0x354>)
 8011560:	f014 fdca 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011564:	2206      	movs	r2, #6
 8011566:	2100      	movs	r1, #0
 8011568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801156a:	f014 fc41 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801156e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011572:	4a10      	ldr	r2, [pc, #64]	; (80115b4 <readCanToStructs+0x340>)
 8011574:	f240 4116 	movw	r1, #1046	; 0x416
 8011578:	fb01 f303 	mul.w	r3, r1, r3
 801157c:	4413      	add	r3, r2
 801157e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011582:	2200      	movs	r2, #0
 8011584:	701a      	strb	r2, [r3, #0]
					break;
 8011586:	f001 b970 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801158a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801158e:	4613      	mov	r3, r2
 8011590:	00db      	lsls	r3, r3, #3
 8011592:	1a9b      	subs	r3, r3, r2
 8011594:	461a      	mov	r2, r3
 8011596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011598:	4413      	add	r3, r2
 801159a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801159c:	2301      	movs	r3, #1
 801159e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80115a2:	e02a      	b.n	80115fa <readCanToStructs+0x386>
 80115a4:	20000504 	.word	0x20000504
 80115a8:	2000308c 	.word	0x2000308c
 80115ac:	20007240 	.word	0x20007240
 80115b0:	20003fbc 	.word	0x20003fbc
 80115b4:	20006a14 	.word	0x20006a14
 80115b8:	0802a83c 	.word	0x0802a83c
 80115bc:	20003fb4 	.word	0x20003fb4
 80115c0:	20000bbb 	.word	0x20000bbb
 80115c4:	0802a858 	.word	0x0802a858
 80115c8:	0802a86c 	.word	0x0802a86c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80115cc:	4bb6      	ldr	r3, [pc, #728]	; (80118a8 <readCanToStructs+0x634>)
 80115ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115d2:	885b      	ldrh	r3, [r3, #2]
 80115d4:	461a      	mov	r2, r3
 80115d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115da:	49b3      	ldr	r1, [pc, #716]	; (80118a8 <readCanToStructs+0x634>)
 80115dc:	0112      	lsls	r2, r2, #4
 80115de:	440a      	add	r2, r1
 80115e0:	4413      	add	r3, r2
 80115e2:	3304      	adds	r3, #4
 80115e4:	781a      	ldrb	r2, [r3, #0]
 80115e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115e8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80115ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80115ec:	3301      	adds	r3, #1
 80115ee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80115f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80115f4:	3301      	adds	r3, #1
 80115f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80115fa:	4bab      	ldr	r3, [pc, #684]	; (80118a8 <readCanToStructs+0x634>)
 80115fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011600:	885b      	ldrh	r3, [r3, #2]
 8011602:	4aa9      	ldr	r2, [pc, #676]	; (80118a8 <readCanToStructs+0x634>)
 8011604:	011b      	lsls	r3, r3, #4
 8011606:	4413      	add	r3, r2
 8011608:	330c      	adds	r3, #12
 801160a:	781b      	ldrb	r3, [r3, #0]
 801160c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011610:	429a      	cmp	r2, r3
 8011612:	d3db      	bcc.n	80115cc <readCanToStructs+0x358>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011618:	4aa4      	ldr	r2, [pc, #656]	; (80118ac <readCanToStructs+0x638>)
 801161a:	f240 4116 	movw	r1, #1046	; 0x416
 801161e:	fb01 f303 	mul.w	r3, r1, r3
 8011622:	4413      	add	r3, r2
 8011624:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011628:	781b      	ldrb	r3, [r3, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	4613      	mov	r3, r2
 801162e:	00db      	lsls	r3, r3, #3
 8011630:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011632:	4b9d      	ldr	r3, [pc, #628]	; (80118a8 <readCanToStructs+0x634>)
 8011634:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011638:	885b      	ldrh	r3, [r3, #2]
 801163a:	499b      	ldr	r1, [pc, #620]	; (80118a8 <readCanToStructs+0x634>)
 801163c:	011b      	lsls	r3, r3, #4
 801163e:	440b      	add	r3, r1
 8011640:	330c      	adds	r3, #12
 8011642:	781b      	ldrb	r3, [r3, #0]
 8011644:	3b01      	subs	r3, #1
 8011646:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011648:	2b05      	cmp	r3, #5
 801164a:	d91c      	bls.n	8011686 <readCanToStructs+0x412>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 801164c:	4b98      	ldr	r3, [pc, #608]	; (80118b0 <readCanToStructs+0x63c>)
 801164e:	4a99      	ldr	r2, [pc, #612]	; (80118b4 <readCanToStructs+0x640>)
 8011650:	6811      	ldr	r1, [r2, #0]
 8011652:	6019      	str	r1, [r3, #0]
 8011654:	8892      	ldrh	r2, [r2, #4]
 8011656:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011658:	4b97      	ldr	r3, [pc, #604]	; (80118b8 <readCanToStructs+0x644>)
 801165a:	781b      	ldrb	r3, [r3, #0]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d102      	bne.n	8011666 <readCanToStructs+0x3f2>
						printf("GPS2_PACKET_RECEIVED\n");
 8011660:	4896      	ldr	r0, [pc, #600]	; (80118bc <readCanToStructs+0x648>)
 8011662:	f014 fd49 	bl	80260f8 <puts>
					Write_RTC();
 8011666:	f7fb f99f 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801166a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801166e:	4a8f      	ldr	r2, [pc, #572]	; (80118ac <readCanToStructs+0x638>)
 8011670:	f240 4116 	movw	r1, #1046	; 0x416
 8011674:	fb01 f303 	mul.w	r3, r1, r3
 8011678:	4413      	add	r3, r2
 801167a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801167e:	2200      	movs	r2, #0
 8011680:	701a      	strb	r2, [r3, #0]
				break;
 8011682:	f001 b8f2 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801168a:	4a88      	ldr	r2, [pc, #544]	; (80118ac <readCanToStructs+0x638>)
 801168c:	f240 4116 	movw	r1, #1046	; 0x416
 8011690:	fb01 f303 	mul.w	r3, r1, r3
 8011694:	4413      	add	r3, r2
 8011696:	f203 2312 	addw	r3, r3, #530	; 0x212
 801169a:	2201      	movs	r2, #1
 801169c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801169e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116a2:	4982      	ldr	r1, [pc, #520]	; (80118ac <readCanToStructs+0x638>)
 80116a4:	f240 4216 	movw	r2, #1046	; 0x416
 80116a8:	fb03 f202 	mul.w	r2, r3, r2
 80116ac:	440a      	add	r2, r1
 80116ae:	f202 2213 	addw	r2, r2, #531	; 0x213
 80116b2:	7812      	ldrb	r2, [r2, #0]
 80116b4:	3201      	adds	r2, #1
 80116b6:	b2d0      	uxtb	r0, r2
 80116b8:	4a7c      	ldr	r2, [pc, #496]	; (80118ac <readCanToStructs+0x638>)
 80116ba:	f240 4116 	movw	r1, #1046	; 0x416
 80116be:	fb01 f303 	mul.w	r3, r1, r3
 80116c2:	4413      	add	r3, r2
 80116c4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80116c8:	4602      	mov	r2, r0
 80116ca:	701a      	strb	r2, [r3, #0]
				break;
 80116cc:	f001 b8cd 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80116d0:	4b7b      	ldr	r3, [pc, #492]	; (80118c0 <readCanToStructs+0x64c>)
 80116d2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80116d4:	4b74      	ldr	r3, [pc, #464]	; (80118a8 <readCanToStructs+0x634>)
 80116d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116da:	885b      	ldrh	r3, [r3, #2]
 80116dc:	4a72      	ldr	r2, [pc, #456]	; (80118a8 <readCanToStructs+0x634>)
 80116de:	011b      	lsls	r3, r3, #4
 80116e0:	4413      	add	r3, r2
 80116e2:	3304      	adds	r3, #4
 80116e4:	781b      	ldrb	r3, [r3, #0]
 80116e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80116ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d110      	bne.n	8011714 <readCanToStructs+0x4a0>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80116f2:	2218      	movs	r2, #24
 80116f4:	2100      	movs	r1, #0
 80116f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116f8:	f014 fb7a 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80116fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011700:	4a6a      	ldr	r2, [pc, #424]	; (80118ac <readCanToStructs+0x638>)
 8011702:	f240 4116 	movw	r1, #1046	; 0x416
 8011706:	fb01 f303 	mul.w	r3, r1, r3
 801170a:	4413      	add	r3, r2
 801170c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011710:	2200      	movs	r2, #0
 8011712:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011718:	4a64      	ldr	r2, [pc, #400]	; (80118ac <readCanToStructs+0x638>)
 801171a:	f240 4116 	movw	r1, #1046	; 0x416
 801171e:	fb01 f303 	mul.w	r3, r1, r3
 8011722:	4413      	add	r3, r2
 8011724:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011728:	781b      	ldrb	r3, [r3, #0]
 801172a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801172e:	429a      	cmp	r2, r3
 8011730:	d015      	beq.n	801175e <readCanToStructs+0x4ea>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011732:	4864      	ldr	r0, [pc, #400]	; (80118c4 <readCanToStructs+0x650>)
 8011734:	f014 fce0 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011738:	2218      	movs	r2, #24
 801173a:	2100      	movs	r1, #0
 801173c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801173e:	f014 fb57 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011746:	4a59      	ldr	r2, [pc, #356]	; (80118ac <readCanToStructs+0x638>)
 8011748:	f240 4116 	movw	r1, #1046	; 0x416
 801174c:	fb01 f303 	mul.w	r3, r1, r3
 8011750:	4413      	add	r3, r2
 8011752:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011756:	2200      	movs	r2, #0
 8011758:	701a      	strb	r2, [r3, #0]
					break;
 801175a:	f001 b886 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801175e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011762:	4613      	mov	r3, r2
 8011764:	00db      	lsls	r3, r3, #3
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	461a      	mov	r2, r3
 801176a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801176c:	4413      	add	r3, r2
 801176e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011770:	2301      	movs	r3, #1
 8011772:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011776:	e016      	b.n	80117a6 <readCanToStructs+0x532>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011778:	4b4b      	ldr	r3, [pc, #300]	; (80118a8 <readCanToStructs+0x634>)
 801177a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801177e:	885b      	ldrh	r3, [r3, #2]
 8011780:	461a      	mov	r2, r3
 8011782:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011786:	4948      	ldr	r1, [pc, #288]	; (80118a8 <readCanToStructs+0x634>)
 8011788:	0112      	lsls	r2, r2, #4
 801178a:	440a      	add	r2, r1
 801178c:	4413      	add	r3, r2
 801178e:	3304      	adds	r3, #4
 8011790:	781a      	ldrb	r2, [r3, #0]
 8011792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011794:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011798:	3301      	adds	r3, #1
 801179a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801179c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117a0:	3301      	adds	r3, #1
 80117a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80117a6:	4b40      	ldr	r3, [pc, #256]	; (80118a8 <readCanToStructs+0x634>)
 80117a8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117ac:	885b      	ldrh	r3, [r3, #2]
 80117ae:	4a3e      	ldr	r2, [pc, #248]	; (80118a8 <readCanToStructs+0x634>)
 80117b0:	011b      	lsls	r3, r3, #4
 80117b2:	4413      	add	r3, r2
 80117b4:	330c      	adds	r3, #12
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80117bc:	429a      	cmp	r2, r3
 80117be:	d3db      	bcc.n	8011778 <readCanToStructs+0x504>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80117c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117c4:	4a39      	ldr	r2, [pc, #228]	; (80118ac <readCanToStructs+0x638>)
 80117c6:	f240 4116 	movw	r1, #1046	; 0x416
 80117ca:	fb01 f303 	mul.w	r3, r1, r3
 80117ce:	4413      	add	r3, r2
 80117d0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80117d4:	781b      	ldrb	r3, [r3, #0]
 80117d6:	461a      	mov	r2, r3
 80117d8:	4613      	mov	r3, r2
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80117de:	4b32      	ldr	r3, [pc, #200]	; (80118a8 <readCanToStructs+0x634>)
 80117e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80117e4:	885b      	ldrh	r3, [r3, #2]
 80117e6:	4930      	ldr	r1, [pc, #192]	; (80118a8 <readCanToStructs+0x634>)
 80117e8:	011b      	lsls	r3, r3, #4
 80117ea:	440b      	add	r3, r1
 80117ec:	330c      	adds	r3, #12
 80117ee:	781b      	ldrb	r3, [r3, #0]
 80117f0:	3b01      	subs	r3, #1
 80117f2:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80117f4:	2b17      	cmp	r3, #23
 80117f6:	d932      	bls.n	801185e <readCanToStructs+0x5ea>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 80117f8:	4b31      	ldr	r3, [pc, #196]	; (80118c0 <readCanToStructs+0x64c>)
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	461a      	mov	r2, r3
 80117fe:	4613      	mov	r3, r2
 8011800:	005b      	lsls	r3, r3, #1
 8011802:	4413      	add	r3, r2
 8011804:	00db      	lsls	r3, r3, #3
 8011806:	4a30      	ldr	r2, [pc, #192]	; (80118c8 <readCanToStructs+0x654>)
 8011808:	4413      	add	r3, r2
 801180a:	2218      	movs	r2, #24
 801180c:	492c      	ldr	r1, [pc, #176]	; (80118c0 <readCanToStructs+0x64c>)
 801180e:	4618      	mov	r0, r3
 8011810:	f014 fac6 	bl	8025da0 <memcpy>
					if(Debug_flag == 1)
 8011814:	4b28      	ldr	r3, [pc, #160]	; (80118b8 <readCanToStructs+0x644>)
 8011816:	781b      	ldrb	r3, [r3, #0]
 8011818:	2b01      	cmp	r3, #1
 801181a:	d105      	bne.n	8011828 <readCanToStructs+0x5b4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801181c:	4b28      	ldr	r3, [pc, #160]	; (80118c0 <readCanToStructs+0x64c>)
 801181e:	781b      	ldrb	r3, [r3, #0]
 8011820:	4619      	mov	r1, r3
 8011822:	482a      	ldr	r0, [pc, #168]	; (80118cc <readCanToStructs+0x658>)
 8011824:	f014 fbcc 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8011828:	4b29      	ldr	r3, [pc, #164]	; (80118d0 <readCanToStructs+0x65c>)
 801182a:	2201      	movs	r2, #1
 801182c:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801182e:	f007 fcb1 	bl	8019194 <HAL_GetTick>
 8011832:	4603      	mov	r3, r0
 8011834:	4a27      	ldr	r2, [pc, #156]	; (80118d4 <readCanToStructs+0x660>)
 8011836:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011838:	4b21      	ldr	r3, [pc, #132]	; (80118c0 <readCanToStructs+0x64c>)
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	4618      	mov	r0, r3
 801183e:	f7f6 ffab 	bl	8008798 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011842:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011846:	4a19      	ldr	r2, [pc, #100]	; (80118ac <readCanToStructs+0x638>)
 8011848:	f240 4116 	movw	r1, #1046	; 0x416
 801184c:	fb01 f303 	mul.w	r3, r1, r3
 8011850:	4413      	add	r3, r2
 8011852:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011856:	2200      	movs	r2, #0
 8011858:	701a      	strb	r2, [r3, #0]
				break;
 801185a:	f001 b806 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801185e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011862:	4a12      	ldr	r2, [pc, #72]	; (80118ac <readCanToStructs+0x638>)
 8011864:	f240 4116 	movw	r1, #1046	; 0x416
 8011868:	fb01 f303 	mul.w	r3, r1, r3
 801186c:	4413      	add	r3, r2
 801186e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011872:	2201      	movs	r2, #1
 8011874:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187a:	490c      	ldr	r1, [pc, #48]	; (80118ac <readCanToStructs+0x638>)
 801187c:	f240 4216 	movw	r2, #1046	; 0x416
 8011880:	fb03 f202 	mul.w	r2, r3, r2
 8011884:	440a      	add	r2, r1
 8011886:	f202 4203 	addw	r2, r2, #1027	; 0x403
 801188a:	7812      	ldrb	r2, [r2, #0]
 801188c:	3201      	adds	r2, #1
 801188e:	b2d0      	uxtb	r0, r2
 8011890:	4a06      	ldr	r2, [pc, #24]	; (80118ac <readCanToStructs+0x638>)
 8011892:	f240 4116 	movw	r1, #1046	; 0x416
 8011896:	fb01 f303 	mul.w	r3, r1, r3
 801189a:	4413      	add	r3, r2
 801189c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80118a0:	4602      	mov	r2, r0
 80118a2:	701a      	strb	r2, [r3, #0]
				break;
 80118a4:	f000 bfe1 	b.w	801286a <readCanToStructs+0x15f6>
 80118a8:	20007240 	.word	0x20007240
 80118ac:	20006a14 	.word	0x20006a14
 80118b0:	20003fb4 	.word	0x20003fb4
 80118b4:	20003fbc 	.word	0x20003fbc
 80118b8:	20000bbb 	.word	0x20000bbb
 80118bc:	0802a888 	.word	0x0802a888
 80118c0:	20002f9c 	.word	0x20002f9c
 80118c4:	0802a8a0 	.word	0x0802a8a0
 80118c8:	20002e94 	.word	0x20002e94
 80118cc:	0802a8c4 	.word	0x0802a8c4
 80118d0:	2000030b 	.word	0x2000030b
 80118d4:	200024b4 	.word	0x200024b4
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80118d8:	4b9f      	ldr	r3, [pc, #636]	; (8011b58 <readCanToStructs+0x8e4>)
 80118da:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80118dc:	4b9f      	ldr	r3, [pc, #636]	; (8011b5c <readCanToStructs+0x8e8>)
 80118de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118e2:	885b      	ldrh	r3, [r3, #2]
 80118e4:	4a9d      	ldr	r2, [pc, #628]	; (8011b5c <readCanToStructs+0x8e8>)
 80118e6:	011b      	lsls	r3, r3, #4
 80118e8:	4413      	add	r3, r2
 80118ea:	3304      	adds	r3, #4
 80118ec:	781b      	ldrb	r3, [r3, #0]
 80118ee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80118f2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d110      	bne.n	801191c <readCanToStructs+0x6a8>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80118fa:	2218      	movs	r2, #24
 80118fc:	2100      	movs	r1, #0
 80118fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011900:	f014 fa76 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011908:	4a95      	ldr	r2, [pc, #596]	; (8011b60 <readCanToStructs+0x8ec>)
 801190a:	f240 4116 	movw	r1, #1046	; 0x416
 801190e:	fb01 f303 	mul.w	r3, r1, r3
 8011912:	4413      	add	r3, r2
 8011914:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011918:	2200      	movs	r2, #0
 801191a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 801191c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011920:	4a8f      	ldr	r2, [pc, #572]	; (8011b60 <readCanToStructs+0x8ec>)
 8011922:	f240 4116 	movw	r1, #1046	; 0x416
 8011926:	fb01 f303 	mul.w	r3, r1, r3
 801192a:	4413      	add	r3, r2
 801192c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011930:	781b      	ldrb	r3, [r3, #0]
 8011932:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011936:	429a      	cmp	r2, r3
 8011938:	d015      	beq.n	8011966 <readCanToStructs+0x6f2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801193a:	488a      	ldr	r0, [pc, #552]	; (8011b64 <readCanToStructs+0x8f0>)
 801193c:	f014 fbdc 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8011940:	2218      	movs	r2, #24
 8011942:	2100      	movs	r1, #0
 8011944:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011946:	f014 fa53 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801194a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801194e:	4a84      	ldr	r2, [pc, #528]	; (8011b60 <readCanToStructs+0x8ec>)
 8011950:	f240 4116 	movw	r1, #1046	; 0x416
 8011954:	fb01 f303 	mul.w	r3, r1, r3
 8011958:	4413      	add	r3, r2
 801195a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801195e:	2200      	movs	r2, #0
 8011960:	701a      	strb	r2, [r3, #0]
					break;
 8011962:	f000 bf82 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011966:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801196a:	4613      	mov	r3, r2
 801196c:	00db      	lsls	r3, r3, #3
 801196e:	1a9b      	subs	r3, r3, r2
 8011970:	461a      	mov	r2, r3
 8011972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011974:	4413      	add	r3, r2
 8011976:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011978:	2301      	movs	r3, #1
 801197a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801197e:	e016      	b.n	80119ae <readCanToStructs+0x73a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011980:	4b76      	ldr	r3, [pc, #472]	; (8011b5c <readCanToStructs+0x8e8>)
 8011982:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011986:	885b      	ldrh	r3, [r3, #2]
 8011988:	461a      	mov	r2, r3
 801198a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801198e:	4973      	ldr	r1, [pc, #460]	; (8011b5c <readCanToStructs+0x8e8>)
 8011990:	0112      	lsls	r2, r2, #4
 8011992:	440a      	add	r2, r1
 8011994:	4413      	add	r3, r2
 8011996:	3304      	adds	r3, #4
 8011998:	781a      	ldrb	r2, [r3, #0]
 801199a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119a0:	3301      	adds	r3, #1
 80119a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80119a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80119a8:	3301      	adds	r3, #1
 80119aa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80119ae:	4b6b      	ldr	r3, [pc, #428]	; (8011b5c <readCanToStructs+0x8e8>)
 80119b0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119b4:	885b      	ldrh	r3, [r3, #2]
 80119b6:	4a69      	ldr	r2, [pc, #420]	; (8011b5c <readCanToStructs+0x8e8>)
 80119b8:	011b      	lsls	r3, r3, #4
 80119ba:	4413      	add	r3, r2
 80119bc:	330c      	adds	r3, #12
 80119be:	781b      	ldrb	r3, [r3, #0]
 80119c0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80119c4:	429a      	cmp	r2, r3
 80119c6:	d3db      	bcc.n	8011980 <readCanToStructs+0x70c>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80119c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119cc:	4a64      	ldr	r2, [pc, #400]	; (8011b60 <readCanToStructs+0x8ec>)
 80119ce:	f240 4116 	movw	r1, #1046	; 0x416
 80119d2:	fb01 f303 	mul.w	r3, r1, r3
 80119d6:	4413      	add	r3, r2
 80119d8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	4613      	mov	r3, r2
 80119e2:	00db      	lsls	r3, r3, #3
 80119e4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80119e6:	4b5d      	ldr	r3, [pc, #372]	; (8011b5c <readCanToStructs+0x8e8>)
 80119e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80119ec:	885b      	ldrh	r3, [r3, #2]
 80119ee:	495b      	ldr	r1, [pc, #364]	; (8011b5c <readCanToStructs+0x8e8>)
 80119f0:	011b      	lsls	r3, r3, #4
 80119f2:	440b      	add	r3, r1
 80119f4:	330c      	adds	r3, #12
 80119f6:	781b      	ldrb	r3, [r3, #0]
 80119f8:	3b01      	subs	r3, #1
 80119fa:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80119fc:	2b17      	cmp	r3, #23
 80119fe:	d932      	bls.n	8011a66 <readCanToStructs+0x7f2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8011a00:	4b55      	ldr	r3, [pc, #340]	; (8011b58 <readCanToStructs+0x8e4>)
 8011a02:	781b      	ldrb	r3, [r3, #0]
 8011a04:	461a      	mov	r2, r3
 8011a06:	4613      	mov	r3, r2
 8011a08:	005b      	lsls	r3, r3, #1
 8011a0a:	4413      	add	r3, r2
 8011a0c:	00db      	lsls	r3, r3, #3
 8011a0e:	4a56      	ldr	r2, [pc, #344]	; (8011b68 <readCanToStructs+0x8f4>)
 8011a10:	4413      	add	r3, r2
 8011a12:	2218      	movs	r2, #24
 8011a14:	4950      	ldr	r1, [pc, #320]	; (8011b58 <readCanToStructs+0x8e4>)
 8011a16:	4618      	mov	r0, r3
 8011a18:	f014 f9c2 	bl	8025da0 <memcpy>
					if(Debug_flag == 1)
 8011a1c:	4b53      	ldr	r3, [pc, #332]	; (8011b6c <readCanToStructs+0x8f8>)
 8011a1e:	781b      	ldrb	r3, [r3, #0]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	d105      	bne.n	8011a30 <readCanToStructs+0x7bc>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011a24:	4b4c      	ldr	r3, [pc, #304]	; (8011b58 <readCanToStructs+0x8e4>)
 8011a26:	781b      	ldrb	r3, [r3, #0]
 8011a28:	4619      	mov	r1, r3
 8011a2a:	4851      	ldr	r0, [pc, #324]	; (8011b70 <readCanToStructs+0x8fc>)
 8011a2c:	f014 fac8 	bl	8025fc0 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8011a30:	f007 fbb0 	bl	8019194 <HAL_GetTick>
 8011a34:	4603      	mov	r3, r0
 8011a36:	4a4f      	ldr	r2, [pc, #316]	; (8011b74 <readCanToStructs+0x900>)
 8011a38:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 8011a3a:	4b4f      	ldr	r3, [pc, #316]	; (8011b78 <readCanToStructs+0x904>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8011a40:	4b45      	ldr	r3, [pc, #276]	; (8011b58 <readCanToStructs+0x8e4>)
 8011a42:	781b      	ldrb	r3, [r3, #0]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7f6 fea7 	bl	8008798 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a4e:	4a44      	ldr	r2, [pc, #272]	; (8011b60 <readCanToStructs+0x8ec>)
 8011a50:	f240 4116 	movw	r1, #1046	; 0x416
 8011a54:	fb01 f303 	mul.w	r3, r1, r3
 8011a58:	4413      	add	r3, r2
 8011a5a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011a5e:	2200      	movs	r2, #0
 8011a60:	701a      	strb	r2, [r3, #0]
				break;
 8011a62:	f000 bf02 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a6a:	4a3d      	ldr	r2, [pc, #244]	; (8011b60 <readCanToStructs+0x8ec>)
 8011a6c:	f240 4116 	movw	r1, #1046	; 0x416
 8011a70:	fb01 f303 	mul.w	r3, r1, r3
 8011a74:	4413      	add	r3, r2
 8011a76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011a7a:	2201      	movs	r2, #1
 8011a7c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011a7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a82:	4937      	ldr	r1, [pc, #220]	; (8011b60 <readCanToStructs+0x8ec>)
 8011a84:	f240 4216 	movw	r2, #1046	; 0x416
 8011a88:	fb03 f202 	mul.w	r2, r3, r2
 8011a8c:	440a      	add	r2, r1
 8011a8e:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011a92:	7812      	ldrb	r2, [r2, #0]
 8011a94:	3201      	adds	r2, #1
 8011a96:	b2d0      	uxtb	r0, r2
 8011a98:	4a31      	ldr	r2, [pc, #196]	; (8011b60 <readCanToStructs+0x8ec>)
 8011a9a:	f240 4116 	movw	r1, #1046	; 0x416
 8011a9e:	fb01 f303 	mul.w	r3, r1, r3
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011aa8:	4602      	mov	r2, r0
 8011aaa:	701a      	strb	r2, [r3, #0]
				break;
 8011aac:	f000 bedd 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011ab0:	4b32      	ldr	r3, [pc, #200]	; (8011b7c <readCanToStructs+0x908>)
 8011ab2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011ab4:	4b29      	ldr	r3, [pc, #164]	; (8011b5c <readCanToStructs+0x8e8>)
 8011ab6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011aba:	885b      	ldrh	r3, [r3, #2]
 8011abc:	4a27      	ldr	r2, [pc, #156]	; (8011b5c <readCanToStructs+0x8e8>)
 8011abe:	011b      	lsls	r3, r3, #4
 8011ac0:	4413      	add	r3, r2
 8011ac2:	3304      	adds	r3, #4
 8011ac4:	781b      	ldrb	r3, [r3, #0]
 8011ac6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011aca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d110      	bne.n	8011af4 <readCanToStructs+0x880>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011ad2:	2246      	movs	r2, #70	; 0x46
 8011ad4:	2100      	movs	r1, #0
 8011ad6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ad8:	f014 f98a 	bl	8025df0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ae0:	4a1f      	ldr	r2, [pc, #124]	; (8011b60 <readCanToStructs+0x8ec>)
 8011ae2:	f240 4116 	movw	r1, #1046	; 0x416
 8011ae6:	fb01 f303 	mul.w	r3, r1, r3
 8011aea:	4413      	add	r3, r2
 8011aec:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011af0:	2200      	movs	r2, #0
 8011af2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8011af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011af8:	4a19      	ldr	r2, [pc, #100]	; (8011b60 <readCanToStructs+0x8ec>)
 8011afa:	f240 4116 	movw	r1, #1046	; 0x416
 8011afe:	fb01 f303 	mul.w	r3, r1, r3
 8011b02:	4413      	add	r3, r2
 8011b04:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011b08:	781b      	ldrb	r3, [r3, #0]
 8011b0a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d015      	beq.n	8011b3e <readCanToStructs+0x8ca>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8011b12:	481b      	ldr	r0, [pc, #108]	; (8011b80 <readCanToStructs+0x90c>)
 8011b14:	f014 faf0 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011b18:	2246      	movs	r2, #70	; 0x46
 8011b1a:	2100      	movs	r1, #0
 8011b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b1e:	f014 f967 	bl	8025df0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011b22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b26:	4a0e      	ldr	r2, [pc, #56]	; (8011b60 <readCanToStructs+0x8ec>)
 8011b28:	f240 4116 	movw	r1, #1046	; 0x416
 8011b2c:	fb01 f303 	mul.w	r3, r1, r3
 8011b30:	4413      	add	r3, r2
 8011b32:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
					break;
 8011b3a:	f000 be96 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011b3e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011b42:	4613      	mov	r3, r2
 8011b44:	00db      	lsls	r3, r3, #3
 8011b46:	1a9b      	subs	r3, r3, r2
 8011b48:	461a      	mov	r2, r3
 8011b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b4c:	4413      	add	r3, r2
 8011b4e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011b50:	2301      	movs	r3, #1
 8011b52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011b56:	e02c      	b.n	8011bb2 <readCanToStructs+0x93e>
 8011b58:	20002f9c 	.word	0x20002f9c
 8011b5c:	20007240 	.word	0x20007240
 8011b60:	20006a14 	.word	0x20006a14
 8011b64:	0802a8d4 	.word	0x0802a8d4
 8011b68:	20002e94 	.word	0x20002e94
 8011b6c:	20000bbb 	.word	0x20000bbb
 8011b70:	0802a8f8 	.word	0x0802a8f8
 8011b74:	200024b4 	.word	0x200024b4
 8011b78:	2000030b 	.word	0x2000030b
 8011b7c:	20003044 	.word	0x20003044
 8011b80:	0802a908 	.word	0x0802a908
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011b84:	4bba      	ldr	r3, [pc, #744]	; (8011e70 <readCanToStructs+0xbfc>)
 8011b86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b8a:	885b      	ldrh	r3, [r3, #2]
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011b92:	49b7      	ldr	r1, [pc, #732]	; (8011e70 <readCanToStructs+0xbfc>)
 8011b94:	0112      	lsls	r2, r2, #4
 8011b96:	440a      	add	r2, r1
 8011b98:	4413      	add	r3, r2
 8011b9a:	3304      	adds	r3, #4
 8011b9c:	781a      	ldrb	r2, [r3, #0]
 8011b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ba8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011bac:	3301      	adds	r3, #1
 8011bae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011bb2:	4baf      	ldr	r3, [pc, #700]	; (8011e70 <readCanToStructs+0xbfc>)
 8011bb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bb8:	885b      	ldrh	r3, [r3, #2]
 8011bba:	4aad      	ldr	r2, [pc, #692]	; (8011e70 <readCanToStructs+0xbfc>)
 8011bbc:	011b      	lsls	r3, r3, #4
 8011bbe:	4413      	add	r3, r2
 8011bc0:	330c      	adds	r3, #12
 8011bc2:	781b      	ldrb	r3, [r3, #0]
 8011bc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d3db      	bcc.n	8011b84 <readCanToStructs+0x910>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011bcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011bd0:	4aa8      	ldr	r2, [pc, #672]	; (8011e74 <readCanToStructs+0xc00>)
 8011bd2:	f240 4116 	movw	r1, #1046	; 0x416
 8011bd6:	fb01 f303 	mul.w	r3, r1, r3
 8011bda:	4413      	add	r3, r2
 8011bdc:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011be0:	781b      	ldrb	r3, [r3, #0]
 8011be2:	461a      	mov	r2, r3
 8011be4:	4613      	mov	r3, r2
 8011be6:	00db      	lsls	r3, r3, #3
 8011be8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011bea:	4ba1      	ldr	r3, [pc, #644]	; (8011e70 <readCanToStructs+0xbfc>)
 8011bec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bf0:	885b      	ldrh	r3, [r3, #2]
 8011bf2:	499f      	ldr	r1, [pc, #636]	; (8011e70 <readCanToStructs+0xbfc>)
 8011bf4:	011b      	lsls	r3, r3, #4
 8011bf6:	440b      	add	r3, r1
 8011bf8:	330c      	adds	r3, #12
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	3b01      	subs	r3, #1
 8011bfe:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8011c00:	2b45      	cmp	r3, #69	; 0x45
 8011c02:	d93d      	bls.n	8011c80 <readCanToStructs+0xa0c>
					if(Debug_flag == 1)
 8011c04:	4b9c      	ldr	r3, [pc, #624]	; (8011e78 <readCanToStructs+0xc04>)
 8011c06:	781b      	ldrb	r3, [r3, #0]
 8011c08:	2b01      	cmp	r3, #1
 8011c0a:	d102      	bne.n	8011c12 <readCanToStructs+0x99e>
						printf("RCV V-Message-1\n");
 8011c0c:	489b      	ldr	r0, [pc, #620]	; (8011e7c <readCanToStructs+0xc08>)
 8011c0e:	f014 fa73 	bl	80260f8 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011c12:	2246      	movs	r2, #70	; 0x46
 8011c14:	2100      	movs	r1, #0
 8011c16:	489a      	ldr	r0, [pc, #616]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c18:	f014 f8ea 	bl	8025df0 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011c1c:	4a98      	ldr	r2, [pc, #608]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c1e:	4b99      	ldr	r3, [pc, #612]	; (8011e84 <readCanToStructs+0xc10>)
 8011c20:	4610      	mov	r0, r2
 8011c22:	4619      	mov	r1, r3
 8011c24:	2346      	movs	r3, #70	; 0x46
 8011c26:	461a      	mov	r2, r3
 8011c28:	f014 f8ba 	bl	8025da0 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011c2c:	4b96      	ldr	r3, [pc, #600]	; (8011e88 <readCanToStructs+0xc14>)
 8011c2e:	2201      	movs	r2, #1
 8011c30:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8011c32:	4b93      	ldr	r3, [pc, #588]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c34:	881b      	ldrh	r3, [r3, #0]
 8011c36:	4619      	mov	r1, r3
 8011c38:	4a94      	ldr	r2, [pc, #592]	; (8011e8c <readCanToStructs+0xc18>)
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	005b      	lsls	r3, r3, #1
 8011c3e:	440b      	add	r3, r1
 8011c40:	00db      	lsls	r3, r3, #3
 8011c42:	4413      	add	r3, r2
 8011c44:	3304      	adds	r3, #4
 8011c46:	781b      	ldrb	r3, [r3, #0]
 8011c48:	2b01      	cmp	r3, #1
 8011c4a:	d00b      	beq.n	8011c64 <readCanToStructs+0x9f0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011c4c:	4b8c      	ldr	r3, [pc, #560]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c4e:	889b      	ldrh	r3, [r3, #4]
 8011c50:	b2d9      	uxtb	r1, r3
 8011c52:	4b8b      	ldr	r3, [pc, #556]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c54:	881b      	ldrh	r3, [r3, #0]
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	4b89      	ldr	r3, [pc, #548]	; (8011e80 <readCanToStructs+0xc0c>)
 8011c5a:	885b      	ldrh	r3, [r3, #2]
 8011c5c:	b2db      	uxtb	r3, r3
 8011c5e:	488c      	ldr	r0, [pc, #560]	; (8011e90 <readCanToStructs+0xc1c>)
 8011c60:	f7f3 f948 	bl	8004ef4 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8011c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c68:	4a82      	ldr	r2, [pc, #520]	; (8011e74 <readCanToStructs+0xc00>)
 8011c6a:	f240 4116 	movw	r1, #1046	; 0x416
 8011c6e:	fb01 f303 	mul.w	r3, r1, r3
 8011c72:	4413      	add	r3, r2
 8011c74:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011c78:	2200      	movs	r2, #0
 8011c7a:	701a      	strb	r2, [r3, #0]
				break;
 8011c7c:	f000 bdf5 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8011c80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c84:	4a7b      	ldr	r2, [pc, #492]	; (8011e74 <readCanToStructs+0xc00>)
 8011c86:	f240 4116 	movw	r1, #1046	; 0x416
 8011c8a:	fb01 f303 	mul.w	r3, r1, r3
 8011c8e:	4413      	add	r3, r2
 8011c90:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011c94:	2201      	movs	r2, #1
 8011c96:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8011c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c9c:	4975      	ldr	r1, [pc, #468]	; (8011e74 <readCanToStructs+0xc00>)
 8011c9e:	f240 4216 	movw	r2, #1046	; 0x416
 8011ca2:	fb03 f202 	mul.w	r2, r3, r2
 8011ca6:	440a      	add	r2, r1
 8011ca8:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8011cac:	7812      	ldrb	r2, [r2, #0]
 8011cae:	3201      	adds	r2, #1
 8011cb0:	b2d0      	uxtb	r0, r2
 8011cb2:	4a70      	ldr	r2, [pc, #448]	; (8011e74 <readCanToStructs+0xc00>)
 8011cb4:	f240 4116 	movw	r1, #1046	; 0x416
 8011cb8:	fb01 f303 	mul.w	r3, r1, r3
 8011cbc:	4413      	add	r3, r2
 8011cbe:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8011cc2:	4602      	mov	r2, r0
 8011cc4:	701a      	strb	r2, [r3, #0]
				break;
 8011cc6:	f000 bdd0 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8011cca:	4b6e      	ldr	r3, [pc, #440]	; (8011e84 <readCanToStructs+0xc10>)
 8011ccc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011cce:	4b68      	ldr	r3, [pc, #416]	; (8011e70 <readCanToStructs+0xbfc>)
 8011cd0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cd4:	885b      	ldrh	r3, [r3, #2]
 8011cd6:	4a66      	ldr	r2, [pc, #408]	; (8011e70 <readCanToStructs+0xbfc>)
 8011cd8:	011b      	lsls	r3, r3, #4
 8011cda:	4413      	add	r3, r2
 8011cdc:	3304      	adds	r3, #4
 8011cde:	781b      	ldrb	r3, [r3, #0]
 8011ce0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011ce4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d110      	bne.n	8011d0e <readCanToStructs+0xa9a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011cec:	2246      	movs	r2, #70	; 0x46
 8011cee:	2100      	movs	r1, #0
 8011cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf2:	f014 f87d 	bl	8025df0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011cf6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cfa:	4a5e      	ldr	r2, [pc, #376]	; (8011e74 <readCanToStructs+0xc00>)
 8011cfc:	f240 4116 	movw	r1, #1046	; 0x416
 8011d00:	fb01 f303 	mul.w	r3, r1, r3
 8011d04:	4413      	add	r3, r2
 8011d06:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d0a:	2200      	movs	r2, #0
 8011d0c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8011d0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d12:	4a58      	ldr	r2, [pc, #352]	; (8011e74 <readCanToStructs+0xc00>)
 8011d14:	f240 4116 	movw	r1, #1046	; 0x416
 8011d18:	fb01 f303 	mul.w	r3, r1, r3
 8011d1c:	4413      	add	r3, r2
 8011d1e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d22:	781b      	ldrb	r3, [r3, #0]
 8011d24:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d015      	beq.n	8011d58 <readCanToStructs+0xae4>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8011d2c:	4859      	ldr	r0, [pc, #356]	; (8011e94 <readCanToStructs+0xc20>)
 8011d2e:	f014 f9e3 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011d32:	2246      	movs	r2, #70	; 0x46
 8011d34:	2100      	movs	r1, #0
 8011d36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d38:	f014 f85a 	bl	8025df0 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d40:	4a4c      	ldr	r2, [pc, #304]	; (8011e74 <readCanToStructs+0xc00>)
 8011d42:	f240 4116 	movw	r1, #1046	; 0x416
 8011d46:	fb01 f303 	mul.w	r3, r1, r3
 8011d4a:	4413      	add	r3, r2
 8011d4c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011d50:	2200      	movs	r2, #0
 8011d52:	701a      	strb	r2, [r3, #0]
					break;
 8011d54:	f000 bd89 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011d58:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d5c:	4613      	mov	r3, r2
 8011d5e:	00db      	lsls	r3, r3, #3
 8011d60:	1a9b      	subs	r3, r3, r2
 8011d62:	461a      	mov	r2, r3
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	4413      	add	r3, r2
 8011d68:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d6a:	2301      	movs	r3, #1
 8011d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d70:	e016      	b.n	8011da0 <readCanToStructs+0xb2c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011d72:	4b3f      	ldr	r3, [pc, #252]	; (8011e70 <readCanToStructs+0xbfc>)
 8011d74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d78:	885b      	ldrh	r3, [r3, #2]
 8011d7a:	461a      	mov	r2, r3
 8011d7c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d80:	493b      	ldr	r1, [pc, #236]	; (8011e70 <readCanToStructs+0xbfc>)
 8011d82:	0112      	lsls	r2, r2, #4
 8011d84:	440a      	add	r2, r1
 8011d86:	4413      	add	r3, r2
 8011d88:	3304      	adds	r3, #4
 8011d8a:	781a      	ldrb	r2, [r3, #0]
 8011d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d92:	3301      	adds	r3, #1
 8011d94:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d96:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d9a:	3301      	adds	r3, #1
 8011d9c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011da0:	4b33      	ldr	r3, [pc, #204]	; (8011e70 <readCanToStructs+0xbfc>)
 8011da2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011da6:	885b      	ldrh	r3, [r3, #2]
 8011da8:	4a31      	ldr	r2, [pc, #196]	; (8011e70 <readCanToStructs+0xbfc>)
 8011daa:	011b      	lsls	r3, r3, #4
 8011dac:	4413      	add	r3, r2
 8011dae:	330c      	adds	r3, #12
 8011db0:	781b      	ldrb	r3, [r3, #0]
 8011db2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011db6:	429a      	cmp	r2, r3
 8011db8:	d3db      	bcc.n	8011d72 <readCanToStructs+0xafe>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011dba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dbe:	4a2d      	ldr	r2, [pc, #180]	; (8011e74 <readCanToStructs+0xc00>)
 8011dc0:	f240 4116 	movw	r1, #1046	; 0x416
 8011dc4:	fb01 f303 	mul.w	r3, r1, r3
 8011dc8:	4413      	add	r3, r2
 8011dca:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	461a      	mov	r2, r3
 8011dd2:	4613      	mov	r3, r2
 8011dd4:	00db      	lsls	r3, r3, #3
 8011dd6:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8011dd8:	4b25      	ldr	r3, [pc, #148]	; (8011e70 <readCanToStructs+0xbfc>)
 8011dda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dde:	885b      	ldrh	r3, [r3, #2]
 8011de0:	4923      	ldr	r1, [pc, #140]	; (8011e70 <readCanToStructs+0xbfc>)
 8011de2:	011b      	lsls	r3, r3, #4
 8011de4:	440b      	add	r3, r1
 8011de6:	330c      	adds	r3, #12
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	3b01      	subs	r3, #1
 8011dec:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8011dee:	2b45      	cmp	r3, #69	; 0x45
 8011df0:	d954      	bls.n	8011e9c <readCanToStructs+0xc28>
					if(Debug_flag == 1)
 8011df2:	4b21      	ldr	r3, [pc, #132]	; (8011e78 <readCanToStructs+0xc04>)
 8011df4:	781b      	ldrb	r3, [r3, #0]
 8011df6:	2b01      	cmp	r3, #1
 8011df8:	d102      	bne.n	8011e00 <readCanToStructs+0xb8c>
						printf("RCV V-Message-2\n");
 8011dfa:	4827      	ldr	r0, [pc, #156]	; (8011e98 <readCanToStructs+0xc24>)
 8011dfc:	f014 f97c 	bl	80260f8 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011e00:	2246      	movs	r2, #70	; 0x46
 8011e02:	2100      	movs	r1, #0
 8011e04:	481e      	ldr	r0, [pc, #120]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e06:	f013 fff3 	bl	8025df0 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8011e0a:	4a1d      	ldr	r2, [pc, #116]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e0c:	4b1d      	ldr	r3, [pc, #116]	; (8011e84 <readCanToStructs+0xc10>)
 8011e0e:	4610      	mov	r0, r2
 8011e10:	4619      	mov	r1, r3
 8011e12:	2346      	movs	r3, #70	; 0x46
 8011e14:	461a      	mov	r2, r3
 8011e16:	f013 ffc3 	bl	8025da0 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8011e1a:	4b1b      	ldr	r3, [pc, #108]	; (8011e88 <readCanToStructs+0xc14>)
 8011e1c:	2201      	movs	r2, #1
 8011e1e:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8011e20:	4b17      	ldr	r3, [pc, #92]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e22:	881b      	ldrh	r3, [r3, #0]
 8011e24:	4619      	mov	r1, r3
 8011e26:	4a19      	ldr	r2, [pc, #100]	; (8011e8c <readCanToStructs+0xc18>)
 8011e28:	460b      	mov	r3, r1
 8011e2a:	005b      	lsls	r3, r3, #1
 8011e2c:	440b      	add	r3, r1
 8011e2e:	00db      	lsls	r3, r3, #3
 8011e30:	4413      	add	r3, r2
 8011e32:	3303      	adds	r3, #3
 8011e34:	781b      	ldrb	r3, [r3, #0]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d00b      	beq.n	8011e52 <readCanToStructs+0xbde>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8011e3a:	4b11      	ldr	r3, [pc, #68]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e3c:	889b      	ldrh	r3, [r3, #4]
 8011e3e:	b2d9      	uxtb	r1, r3
 8011e40:	4b0f      	ldr	r3, [pc, #60]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e42:	881b      	ldrh	r3, [r3, #0]
 8011e44:	b2da      	uxtb	r2, r3
 8011e46:	4b0e      	ldr	r3, [pc, #56]	; (8011e80 <readCanToStructs+0xc0c>)
 8011e48:	885b      	ldrh	r3, [r3, #2]
 8011e4a:	b2db      	uxtb	r3, r3
 8011e4c:	4810      	ldr	r0, [pc, #64]	; (8011e90 <readCanToStructs+0xc1c>)
 8011e4e:	f7f3 f851 	bl	8004ef4 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8011e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e56:	4a07      	ldr	r2, [pc, #28]	; (8011e74 <readCanToStructs+0xc00>)
 8011e58:	f240 4116 	movw	r1, #1046	; 0x416
 8011e5c:	fb01 f303 	mul.w	r3, r1, r3
 8011e60:	4413      	add	r3, r2
 8011e62:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011e66:	2200      	movs	r2, #0
 8011e68:	701a      	strb	r2, [r3, #0]
				break;
 8011e6a:	f000 bcfe 	b.w	801286a <readCanToStructs+0x15f6>
 8011e6e:	bf00      	nop
 8011e70:	20007240 	.word	0x20007240
 8011e74:	20006a14 	.word	0x20006a14
 8011e78:	20000bbb 	.word	0x20000bbb
 8011e7c:	0802a92c 	.word	0x0802a92c
 8011e80:	20002ffc 	.word	0x20002ffc
 8011e84:	20003044 	.word	0x20003044
 8011e88:	2000030b 	.word	0x2000030b
 8011e8c:	20002da4 	.word	0x20002da4
 8011e90:	20003002 	.word	0x20003002
 8011e94:	0802a93c 	.word	0x0802a93c
 8011e98:	0802a960 	.word	0x0802a960
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8011e9c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ea0:	4aa0      	ldr	r2, [pc, #640]	; (8012124 <readCanToStructs+0xeb0>)
 8011ea2:	f240 4116 	movw	r1, #1046	; 0x416
 8011ea6:	fb01 f303 	mul.w	r3, r1, r3
 8011eaa:	4413      	add	r3, r2
 8011eac:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8011eb0:	2201      	movs	r2, #1
 8011eb2:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8011eb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eb8:	499a      	ldr	r1, [pc, #616]	; (8012124 <readCanToStructs+0xeb0>)
 8011eba:	f240 4216 	movw	r2, #1046	; 0x416
 8011ebe:	fb03 f202 	mul.w	r2, r3, r2
 8011ec2:	440a      	add	r2, r1
 8011ec4:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8011ec8:	7812      	ldrb	r2, [r2, #0]
 8011eca:	3201      	adds	r2, #1
 8011ecc:	b2d0      	uxtb	r0, r2
 8011ece:	4a95      	ldr	r2, [pc, #596]	; (8012124 <readCanToStructs+0xeb0>)
 8011ed0:	f240 4116 	movw	r1, #1046	; 0x416
 8011ed4:	fb01 f303 	mul.w	r3, r1, r3
 8011ed8:	4413      	add	r3, r2
 8011eda:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8011ede:	4602      	mov	r2, r0
 8011ee0:	701a      	strb	r2, [r3, #0]
				break;
 8011ee2:	f000 bcc2 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8011ee6:	4b90      	ldr	r3, [pc, #576]	; (8012128 <readCanToStructs+0xeb4>)
 8011ee8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011eea:	4b90      	ldr	r3, [pc, #576]	; (801212c <readCanToStructs+0xeb8>)
 8011eec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ef0:	885b      	ldrh	r3, [r3, #2]
 8011ef2:	4a8e      	ldr	r2, [pc, #568]	; (801212c <readCanToStructs+0xeb8>)
 8011ef4:	011b      	lsls	r3, r3, #4
 8011ef6:	4413      	add	r3, r2
 8011ef8:	3304      	adds	r3, #4
 8011efa:	781b      	ldrb	r3, [r3, #0]
 8011efc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011f00:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d110      	bne.n	8011f2a <readCanToStructs+0xcb6>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011f08:	2208      	movs	r2, #8
 8011f0a:	2100      	movs	r1, #0
 8011f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f0e:	f013 ff6f 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011f12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f16:	4a83      	ldr	r2, [pc, #524]	; (8012124 <readCanToStructs+0xeb0>)
 8011f18:	f240 4116 	movw	r1, #1046	; 0x416
 8011f1c:	fb01 f303 	mul.w	r3, r1, r3
 8011f20:	4413      	add	r3, r2
 8011f22:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f26:	2200      	movs	r2, #0
 8011f28:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f2e:	4a7d      	ldr	r2, [pc, #500]	; (8012124 <readCanToStructs+0xeb0>)
 8011f30:	f240 4116 	movw	r1, #1046	; 0x416
 8011f34:	fb01 f303 	mul.w	r3, r1, r3
 8011f38:	4413      	add	r3, r2
 8011f3a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f44:	429a      	cmp	r2, r3
 8011f46:	d015      	beq.n	8011f74 <readCanToStructs+0xd00>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011f48:	4879      	ldr	r0, [pc, #484]	; (8012130 <readCanToStructs+0xebc>)
 8011f4a:	f014 f8d5 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8011f4e:	2208      	movs	r2, #8
 8011f50:	2100      	movs	r1, #0
 8011f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011f54:	f013 ff4c 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011f58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f5c:	4a71      	ldr	r2, [pc, #452]	; (8012124 <readCanToStructs+0xeb0>)
 8011f5e:	f240 4116 	movw	r1, #1046	; 0x416
 8011f62:	fb01 f303 	mul.w	r3, r1, r3
 8011f66:	4413      	add	r3, r2
 8011f68:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	701a      	strb	r2, [r3, #0]
					break;
 8011f70:	f000 bc7b 	b.w	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011f74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f78:	4613      	mov	r3, r2
 8011f7a:	00db      	lsls	r3, r3, #3
 8011f7c:	1a9b      	subs	r3, r3, r2
 8011f7e:	461a      	mov	r2, r3
 8011f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f82:	4413      	add	r3, r2
 8011f84:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f86:	2301      	movs	r3, #1
 8011f88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f8c:	e016      	b.n	8011fbc <readCanToStructs+0xd48>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f8e:	4b67      	ldr	r3, [pc, #412]	; (801212c <readCanToStructs+0xeb8>)
 8011f90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f94:	885b      	ldrh	r3, [r3, #2]
 8011f96:	461a      	mov	r2, r3
 8011f98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f9c:	4963      	ldr	r1, [pc, #396]	; (801212c <readCanToStructs+0xeb8>)
 8011f9e:	0112      	lsls	r2, r2, #4
 8011fa0:	440a      	add	r2, r1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	3304      	adds	r3, #4
 8011fa6:	781a      	ldrb	r2, [r3, #0]
 8011fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011faa:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	3301      	adds	r3, #1
 8011fb0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011fb2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011fb6:	3301      	adds	r3, #1
 8011fb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011fbc:	4b5b      	ldr	r3, [pc, #364]	; (801212c <readCanToStructs+0xeb8>)
 8011fbe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fc2:	885b      	ldrh	r3, [r3, #2]
 8011fc4:	4a59      	ldr	r2, [pc, #356]	; (801212c <readCanToStructs+0xeb8>)
 8011fc6:	011b      	lsls	r3, r3, #4
 8011fc8:	4413      	add	r3, r2
 8011fca:	330c      	adds	r3, #12
 8011fcc:	781b      	ldrb	r3, [r3, #0]
 8011fce:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011fd2:	429a      	cmp	r2, r3
 8011fd4:	d3db      	bcc.n	8011f8e <readCanToStructs+0xd1a>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8011fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fda:	4a52      	ldr	r2, [pc, #328]	; (8012124 <readCanToStructs+0xeb0>)
 8011fdc:	f240 4116 	movw	r1, #1046	; 0x416
 8011fe0:	fb01 f303 	mul.w	r3, r1, r3
 8011fe4:	4413      	add	r3, r2
 8011fe6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	461a      	mov	r2, r3
 8011fee:	4613      	mov	r3, r2
 8011ff0:	00db      	lsls	r3, r3, #3
 8011ff2:	1a9a      	subs	r2, r3, r2
 8011ff4:	4b4d      	ldr	r3, [pc, #308]	; (801212c <readCanToStructs+0xeb8>)
 8011ff6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ffa:	885b      	ldrh	r3, [r3, #2]
 8011ffc:	494b      	ldr	r1, [pc, #300]	; (801212c <readCanToStructs+0xeb8>)
 8011ffe:	011b      	lsls	r3, r3, #4
 8012000:	440b      	add	r3, r1
 8012002:	330c      	adds	r3, #12
 8012004:	781b      	ldrb	r3, [r3, #0]
 8012006:	3b01      	subs	r3, #1
 8012008:	4413      	add	r3, r2
 801200a:	2b07      	cmp	r3, #7
 801200c:	d913      	bls.n	8012036 <readCanToStructs+0xdc2>
					printf("Received Fault Injection Data\n");
 801200e:	4849      	ldr	r0, [pc, #292]	; (8012134 <readCanToStructs+0xec0>)
 8012010:	f014 f872 	bl	80260f8 <puts>
					Is_CAN_Exchange_happening = YES;
 8012014:	4b48      	ldr	r3, [pc, #288]	; (8012138 <readCanToStructs+0xec4>)
 8012016:	2201      	movs	r2, #1
 8012018:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801201a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801201e:	4a41      	ldr	r2, [pc, #260]	; (8012124 <readCanToStructs+0xeb0>)
 8012020:	f240 4116 	movw	r1, #1046	; 0x416
 8012024:	fb01 f303 	mul.w	r3, r1, r3
 8012028:	4413      	add	r3, r2
 801202a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801202e:	2200      	movs	r2, #0
 8012030:	701a      	strb	r2, [r3, #0]
				break;
 8012032:	f000 bc1a 	b.w	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012036:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801203a:	4a3a      	ldr	r2, [pc, #232]	; (8012124 <readCanToStructs+0xeb0>)
 801203c:	f240 4116 	movw	r1, #1046	; 0x416
 8012040:	fb01 f303 	mul.w	r3, r1, r3
 8012044:	4413      	add	r3, r2
 8012046:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 801204a:	2201      	movs	r2, #1
 801204c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 801204e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012052:	4934      	ldr	r1, [pc, #208]	; (8012124 <readCanToStructs+0xeb0>)
 8012054:	f240 4216 	movw	r2, #1046	; 0x416
 8012058:	fb03 f202 	mul.w	r2, r3, r2
 801205c:	440a      	add	r2, r1
 801205e:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012062:	7812      	ldrb	r2, [r2, #0]
 8012064:	3201      	adds	r2, #1
 8012066:	b2d0      	uxtb	r0, r2
 8012068:	4a2e      	ldr	r2, [pc, #184]	; (8012124 <readCanToStructs+0xeb0>)
 801206a:	f240 4116 	movw	r1, #1046	; 0x416
 801206e:	fb01 f303 	mul.w	r3, r1, r3
 8012072:	4413      	add	r3, r2
 8012074:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012078:	4602      	mov	r2, r0
 801207a:	701a      	strb	r2, [r3, #0]
				break;
 801207c:	e3f5      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 801207e:	4b2f      	ldr	r3, [pc, #188]	; (801213c <readCanToStructs+0xec8>)
 8012080:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012082:	4b2a      	ldr	r3, [pc, #168]	; (801212c <readCanToStructs+0xeb8>)
 8012084:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012088:	885b      	ldrh	r3, [r3, #2]
 801208a:	4a28      	ldr	r2, [pc, #160]	; (801212c <readCanToStructs+0xeb8>)
 801208c:	011b      	lsls	r3, r3, #4
 801208e:	4413      	add	r3, r2
 8012090:	3304      	adds	r3, #4
 8012092:	781b      	ldrb	r3, [r3, #0]
 8012094:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012098:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801209c:	2b00      	cmp	r3, #0
 801209e:	d110      	bne.n	80120c2 <readCanToStructs+0xe4e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80120a0:	2214      	movs	r2, #20
 80120a2:	2100      	movs	r1, #0
 80120a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120a6:	f013 fea3 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80120aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ae:	4a1d      	ldr	r2, [pc, #116]	; (8012124 <readCanToStructs+0xeb0>)
 80120b0:	f240 4116 	movw	r1, #1046	; 0x416
 80120b4:	fb01 f303 	mul.w	r3, r1, r3
 80120b8:	4413      	add	r3, r2
 80120ba:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80120be:	2200      	movs	r2, #0
 80120c0:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80120c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c6:	4a17      	ldr	r2, [pc, #92]	; (8012124 <readCanToStructs+0xeb0>)
 80120c8:	f240 4116 	movw	r1, #1046	; 0x416
 80120cc:	fb01 f303 	mul.w	r3, r1, r3
 80120d0:	4413      	add	r3, r2
 80120d2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120dc:	429a      	cmp	r2, r3
 80120de:	d014      	beq.n	801210a <readCanToStructs+0xe96>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 80120e0:	4817      	ldr	r0, [pc, #92]	; (8012140 <readCanToStructs+0xecc>)
 80120e2:	f014 f809 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80120e6:	2214      	movs	r2, #20
 80120e8:	2100      	movs	r1, #0
 80120ea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120ec:	f013 fe80 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80120f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120f4:	4a0b      	ldr	r2, [pc, #44]	; (8012124 <readCanToStructs+0xeb0>)
 80120f6:	f240 4116 	movw	r1, #1046	; 0x416
 80120fa:	fb01 f303 	mul.w	r3, r1, r3
 80120fe:	4413      	add	r3, r2
 8012100:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012104:	2200      	movs	r2, #0
 8012106:	701a      	strb	r2, [r3, #0]
					break;
 8012108:	e3af      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801210a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801210e:	4613      	mov	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	1a9b      	subs	r3, r3, r2
 8012114:	461a      	mov	r2, r3
 8012116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012118:	4413      	add	r3, r2
 801211a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801211c:	2301      	movs	r3, #1
 801211e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012122:	e026      	b.n	8012172 <readCanToStructs+0xefe>
 8012124:	20006a14 	.word	0x20006a14
 8012128:	2000308c 	.word	0x2000308c
 801212c:	20007240 	.word	0x20007240
 8012130:	0802a970 	.word	0x0802a970
 8012134:	0802a990 	.word	0x0802a990
 8012138:	2000030b 	.word	0x2000030b
 801213c:	2000373c 	.word	0x2000373c
 8012140:	0802a9b0 	.word	0x0802a9b0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012144:	4bb9      	ldr	r3, [pc, #740]	; (801242c <readCanToStructs+0x11b8>)
 8012146:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801214a:	885b      	ldrh	r3, [r3, #2]
 801214c:	461a      	mov	r2, r3
 801214e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012152:	49b6      	ldr	r1, [pc, #728]	; (801242c <readCanToStructs+0x11b8>)
 8012154:	0112      	lsls	r2, r2, #4
 8012156:	440a      	add	r2, r1
 8012158:	4413      	add	r3, r2
 801215a:	3304      	adds	r3, #4
 801215c:	781a      	ldrb	r2, [r3, #0]
 801215e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012160:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012164:	3301      	adds	r3, #1
 8012166:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012168:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801216c:	3301      	adds	r3, #1
 801216e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012172:	4bae      	ldr	r3, [pc, #696]	; (801242c <readCanToStructs+0x11b8>)
 8012174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012178:	885b      	ldrh	r3, [r3, #2]
 801217a:	4aac      	ldr	r2, [pc, #688]	; (801242c <readCanToStructs+0x11b8>)
 801217c:	011b      	lsls	r3, r3, #4
 801217e:	4413      	add	r3, r2
 8012180:	330c      	adds	r3, #12
 8012182:	781b      	ldrb	r3, [r3, #0]
 8012184:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012188:	429a      	cmp	r2, r3
 801218a:	d3db      	bcc.n	8012144 <readCanToStructs+0xed0>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 801218c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012190:	4aa7      	ldr	r2, [pc, #668]	; (8012430 <readCanToStructs+0x11bc>)
 8012192:	f240 4116 	movw	r1, #1046	; 0x416
 8012196:	fb01 f303 	mul.w	r3, r1, r3
 801219a:	4413      	add	r3, r2
 801219c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	461a      	mov	r2, r3
 80121a4:	4613      	mov	r3, r2
 80121a6:	00db      	lsls	r3, r3, #3
 80121a8:	1a9a      	subs	r2, r3, r2
 80121aa:	4ba0      	ldr	r3, [pc, #640]	; (801242c <readCanToStructs+0x11b8>)
 80121ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121b0:	885b      	ldrh	r3, [r3, #2]
 80121b2:	499e      	ldr	r1, [pc, #632]	; (801242c <readCanToStructs+0x11b8>)
 80121b4:	011b      	lsls	r3, r3, #4
 80121b6:	440b      	add	r3, r1
 80121b8:	330c      	adds	r3, #12
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	3b01      	subs	r3, #1
 80121be:	4413      	add	r3, r2
 80121c0:	2b13      	cmp	r3, #19
 80121c2:	d954      	bls.n	801226e <readCanToStructs+0xffa>
					uint16_t CRC16 = 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 80121c8:	2300      	movs	r3, #0
 80121ca:	603b      	str	r3, [r7, #0]
 80121cc:	1d3b      	adds	r3, r7, #4
 80121ce:	2224      	movs	r2, #36	; 0x24
 80121d0:	2100      	movs	r1, #0
 80121d2:	4618      	mov	r0, r3
 80121d4:	f013 fe0c 	bl	8025df0 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80121d8:	463b      	mov	r3, r7
 80121da:	2214      	movs	r2, #20
 80121dc:	4995      	ldr	r1, [pc, #596]	; (8012434 <readCanToStructs+0x11c0>)
 80121de:	4618      	mov	r0, r3
 80121e0:	f013 fdde 	bl	8025da0 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80121e4:	463b      	mov	r3, r7
 80121e6:	2214      	movs	r2, #20
 80121e8:	4619      	mov	r1, r3
 80121ea:	2000      	movs	r0, #0
 80121ec:	f003 f98c 	bl	8015508 <GetCRC16>
 80121f0:	4603      	mov	r3, r0
 80121f2:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 80121f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d10c      	bne.n	8012214 <readCanToStructs+0xfa0>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80121fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121fe:	4a8c      	ldr	r2, [pc, #560]	; (8012430 <readCanToStructs+0x11bc>)
 8012200:	f240 4116 	movw	r1, #1046	; 0x416
 8012204:	fb01 f303 	mul.w	r3, r1, r3
 8012208:	4413      	add	r3, r2
 801220a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801220e:	2200      	movs	r2, #0
 8012210:	701a      	strb	r2, [r3, #0]
				break;
 8012212:	e32a      	b.n	801286a <readCanToStructs+0x15f6>
						if(Debug_flag == 1)
 8012214:	4b88      	ldr	r3, [pc, #544]	; (8012438 <readCanToStructs+0x11c4>)
 8012216:	781b      	ldrb	r3, [r3, #0]
 8012218:	2b01      	cmp	r3, #1
 801221a:	d10a      	bne.n	8012232 <readCanToStructs+0xfbe>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 801221c:	4b85      	ldr	r3, [pc, #532]	; (8012434 <readCanToStructs+0x11c0>)
 801221e:	781b      	ldrb	r3, [r3, #0]
 8012220:	4a86      	ldr	r2, [pc, #536]	; (801243c <readCanToStructs+0x11c8>)
 8012222:	3366      	adds	r3, #102	; 0x66
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	4413      	add	r3, r2
 8012228:	685b      	ldr	r3, [r3, #4]
 801222a:	4619      	mov	r1, r3
 801222c:	4884      	ldr	r0, [pc, #528]	; (8012440 <readCanToStructs+0x11cc>)
 801222e:	f013 fec7 	bl	8025fc0 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8012232:	4b80      	ldr	r3, [pc, #512]	; (8012434 <readCanToStructs+0x11c0>)
 8012234:	781b      	ldrb	r3, [r3, #0]
 8012236:	461a      	mov	r2, r3
 8012238:	4613      	mov	r3, r2
 801223a:	009b      	lsls	r3, r3, #2
 801223c:	4413      	add	r3, r2
 801223e:	009b      	lsls	r3, r3, #2
 8012240:	4a80      	ldr	r2, [pc, #512]	; (8012444 <readCanToStructs+0x11d0>)
 8012242:	4413      	add	r3, r2
 8012244:	2214      	movs	r2, #20
 8012246:	497b      	ldr	r1, [pc, #492]	; (8012434 <readCanToStructs+0x11c0>)
 8012248:	4618      	mov	r0, r3
 801224a:	f013 fda9 	bl	8025da0 <memcpy>
						Is_CAN_Exchange_happening = YES;
 801224e:	4b7e      	ldr	r3, [pc, #504]	; (8012448 <readCanToStructs+0x11d4>)
 8012250:	2201      	movs	r2, #1
 8012252:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012258:	4a75      	ldr	r2, [pc, #468]	; (8012430 <readCanToStructs+0x11bc>)
 801225a:	f240 4116 	movw	r1, #1046	; 0x416
 801225e:	fb01 f303 	mul.w	r3, r1, r3
 8012262:	4413      	add	r3, r2
 8012264:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012268:	2200      	movs	r2, #0
 801226a:	701a      	strb	r2, [r3, #0]
				break;
 801226c:	e2fd      	b.n	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 801226e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012272:	4a6f      	ldr	r2, [pc, #444]	; (8012430 <readCanToStructs+0x11bc>)
 8012274:	f240 4116 	movw	r1, #1046	; 0x416
 8012278:	fb01 f303 	mul.w	r3, r1, r3
 801227c:	4413      	add	r3, r2
 801227e:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012282:	2201      	movs	r2, #1
 8012284:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012286:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801228a:	4969      	ldr	r1, [pc, #420]	; (8012430 <readCanToStructs+0x11bc>)
 801228c:	f240 4216 	movw	r2, #1046	; 0x416
 8012290:	fb03 f202 	mul.w	r2, r3, r2
 8012294:	440a      	add	r2, r1
 8012296:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 801229a:	7812      	ldrb	r2, [r2, #0]
 801229c:	3201      	adds	r2, #1
 801229e:	b2d0      	uxtb	r0, r2
 80122a0:	4a63      	ldr	r2, [pc, #396]	; (8012430 <readCanToStructs+0x11bc>)
 80122a2:	f240 4116 	movw	r1, #1046	; 0x416
 80122a6:	fb01 f303 	mul.w	r3, r1, r3
 80122aa:	4413      	add	r3, r2
 80122ac:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80122b0:	4602      	mov	r2, r0
 80122b2:	701a      	strb	r2, [r3, #0]
				break;
 80122b4:	e2d9      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80122b6:	4b5f      	ldr	r3, [pc, #380]	; (8012434 <readCanToStructs+0x11c0>)
 80122b8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80122ba:	4b5c      	ldr	r3, [pc, #368]	; (801242c <readCanToStructs+0x11b8>)
 80122bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122c0:	885b      	ldrh	r3, [r3, #2]
 80122c2:	4a5a      	ldr	r2, [pc, #360]	; (801242c <readCanToStructs+0x11b8>)
 80122c4:	011b      	lsls	r3, r3, #4
 80122c6:	4413      	add	r3, r2
 80122c8:	3304      	adds	r3, #4
 80122ca:	781b      	ldrb	r3, [r3, #0]
 80122cc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80122d0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d110      	bne.n	80122fa <readCanToStructs+0x1086>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80122d8:	2214      	movs	r2, #20
 80122da:	2100      	movs	r1, #0
 80122dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122de:	f013 fd87 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80122e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122e6:	4a52      	ldr	r2, [pc, #328]	; (8012430 <readCanToStructs+0x11bc>)
 80122e8:	f240 4116 	movw	r1, #1046	; 0x416
 80122ec:	fb01 f303 	mul.w	r3, r1, r3
 80122f0:	4413      	add	r3, r2
 80122f2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80122f6:	2200      	movs	r2, #0
 80122f8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80122fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122fe:	4a4c      	ldr	r2, [pc, #304]	; (8012430 <readCanToStructs+0x11bc>)
 8012300:	f240 4116 	movw	r1, #1046	; 0x416
 8012304:	fb01 f303 	mul.w	r3, r1, r3
 8012308:	4413      	add	r3, r2
 801230a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801230e:	781b      	ldrb	r3, [r3, #0]
 8012310:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012314:	429a      	cmp	r2, r3
 8012316:	d014      	beq.n	8012342 <readCanToStructs+0x10ce>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8012318:	484c      	ldr	r0, [pc, #304]	; (801244c <readCanToStructs+0x11d8>)
 801231a:	f013 feed 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 801231e:	2214      	movs	r2, #20
 8012320:	2100      	movs	r1, #0
 8012322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012324:	f013 fd64 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801232c:	4a40      	ldr	r2, [pc, #256]	; (8012430 <readCanToStructs+0x11bc>)
 801232e:	f240 4116 	movw	r1, #1046	; 0x416
 8012332:	fb01 f303 	mul.w	r3, r1, r3
 8012336:	4413      	add	r3, r2
 8012338:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801233c:	2200      	movs	r2, #0
 801233e:	701a      	strb	r2, [r3, #0]
					break;
 8012340:	e293      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012342:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012346:	4613      	mov	r3, r2
 8012348:	00db      	lsls	r3, r3, #3
 801234a:	1a9b      	subs	r3, r3, r2
 801234c:	461a      	mov	r2, r3
 801234e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012350:	4413      	add	r3, r2
 8012352:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012354:	2301      	movs	r3, #1
 8012356:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801235a:	e016      	b.n	801238a <readCanToStructs+0x1116>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801235c:	4b33      	ldr	r3, [pc, #204]	; (801242c <readCanToStructs+0x11b8>)
 801235e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012362:	885b      	ldrh	r3, [r3, #2]
 8012364:	461a      	mov	r2, r3
 8012366:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801236a:	4930      	ldr	r1, [pc, #192]	; (801242c <readCanToStructs+0x11b8>)
 801236c:	0112      	lsls	r2, r2, #4
 801236e:	440a      	add	r2, r1
 8012370:	4413      	add	r3, r2
 8012372:	3304      	adds	r3, #4
 8012374:	781a      	ldrb	r2, [r3, #0]
 8012376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012378:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801237c:	3301      	adds	r3, #1
 801237e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012380:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012384:	3301      	adds	r3, #1
 8012386:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801238a:	4b28      	ldr	r3, [pc, #160]	; (801242c <readCanToStructs+0x11b8>)
 801238c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012390:	885b      	ldrh	r3, [r3, #2]
 8012392:	4a26      	ldr	r2, [pc, #152]	; (801242c <readCanToStructs+0x11b8>)
 8012394:	011b      	lsls	r3, r3, #4
 8012396:	4413      	add	r3, r2
 8012398:	330c      	adds	r3, #12
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80123a0:	429a      	cmp	r2, r3
 80123a2:	d3db      	bcc.n	801235c <readCanToStructs+0x10e8>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 80123a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123a8:	4a21      	ldr	r2, [pc, #132]	; (8012430 <readCanToStructs+0x11bc>)
 80123aa:	f240 4116 	movw	r1, #1046	; 0x416
 80123ae:	fb01 f303 	mul.w	r3, r1, r3
 80123b2:	4413      	add	r3, r2
 80123b4:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80123b8:	781b      	ldrb	r3, [r3, #0]
 80123ba:	461a      	mov	r2, r3
 80123bc:	4613      	mov	r3, r2
 80123be:	00db      	lsls	r3, r3, #3
 80123c0:	1a9a      	subs	r2, r3, r2
 80123c2:	4b1a      	ldr	r3, [pc, #104]	; (801242c <readCanToStructs+0x11b8>)
 80123c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123c8:	885b      	ldrh	r3, [r3, #2]
 80123ca:	4918      	ldr	r1, [pc, #96]	; (801242c <readCanToStructs+0x11b8>)
 80123cc:	011b      	lsls	r3, r3, #4
 80123ce:	440b      	add	r3, r1
 80123d0:	330c      	adds	r3, #12
 80123d2:	781b      	ldrb	r3, [r3, #0]
 80123d4:	3b01      	subs	r3, #1
 80123d6:	4413      	add	r3, r2
 80123d8:	2b13      	cmp	r3, #19
 80123da:	d966      	bls.n	80124aa <readCanToStructs+0x1236>
					uint16_t CRC16 = 0;
 80123dc:	2300      	movs	r3, #0
 80123de:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 80123e0:	2300      	movs	r3, #0
 80123e2:	603b      	str	r3, [r7, #0]
 80123e4:	1d3b      	adds	r3, r7, #4
 80123e6:	2224      	movs	r2, #36	; 0x24
 80123e8:	2100      	movs	r1, #0
 80123ea:	4618      	mov	r0, r3
 80123ec:	f013 fd00 	bl	8025df0 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80123f0:	463b      	mov	r3, r7
 80123f2:	2214      	movs	r2, #20
 80123f4:	490f      	ldr	r1, [pc, #60]	; (8012434 <readCanToStructs+0x11c0>)
 80123f6:	4618      	mov	r0, r3
 80123f8:	f013 fcd2 	bl	8025da0 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80123fc:	463b      	mov	r3, r7
 80123fe:	2214      	movs	r2, #20
 8012400:	4619      	mov	r1, r3
 8012402:	2000      	movs	r0, #0
 8012404:	f003 f880 	bl	8015508 <GetCRC16>
 8012408:	4603      	mov	r3, r0
 801240a:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 801240c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801240e:	2b00      	cmp	r3, #0
 8012410:	d11e      	bne.n	8012450 <readCanToStructs+0x11dc>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012416:	4a06      	ldr	r2, [pc, #24]	; (8012430 <readCanToStructs+0x11bc>)
 8012418:	f240 4116 	movw	r1, #1046	; 0x416
 801241c:	fb01 f303 	mul.w	r3, r1, r3
 8012420:	4413      	add	r3, r2
 8012422:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012426:	2200      	movs	r2, #0
 8012428:	701a      	strb	r2, [r3, #0]
				break;
 801242a:	e21e      	b.n	801286a <readCanToStructs+0x15f6>
 801242c:	20007240 	.word	0x20007240
 8012430:	20006a14 	.word	0x20006a14
 8012434:	2000373c 	.word	0x2000373c
 8012438:	20000bbb 	.word	0x20000bbb
 801243c:	20000504 	.word	0x20000504
 8012440:	0802a9cc 	.word	0x0802a9cc
 8012444:	20003660 	.word	0x20003660
 8012448:	2000030b 	.word	0x2000030b
 801244c:	0802a9e0 	.word	0x0802a9e0
						if(Debug_flag == 1)
 8012450:	4bba      	ldr	r3, [pc, #744]	; (801273c <readCanToStructs+0x14c8>)
 8012452:	781b      	ldrb	r3, [r3, #0]
 8012454:	2b01      	cmp	r3, #1
 8012456:	d10a      	bne.n	801246e <readCanToStructs+0x11fa>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8012458:	4bb9      	ldr	r3, [pc, #740]	; (8012740 <readCanToStructs+0x14cc>)
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	4ab9      	ldr	r2, [pc, #740]	; (8012744 <readCanToStructs+0x14d0>)
 801245e:	3366      	adds	r3, #102	; 0x66
 8012460:	009b      	lsls	r3, r3, #2
 8012462:	4413      	add	r3, r2
 8012464:	685b      	ldr	r3, [r3, #4]
 8012466:	4619      	mov	r1, r3
 8012468:	48b7      	ldr	r0, [pc, #732]	; (8012748 <readCanToStructs+0x14d4>)
 801246a:	f013 fda9 	bl	8025fc0 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 801246e:	4bb4      	ldr	r3, [pc, #720]	; (8012740 <readCanToStructs+0x14cc>)
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	461a      	mov	r2, r3
 8012474:	4613      	mov	r3, r2
 8012476:	009b      	lsls	r3, r3, #2
 8012478:	4413      	add	r3, r2
 801247a:	009b      	lsls	r3, r3, #2
 801247c:	4ab3      	ldr	r2, [pc, #716]	; (801274c <readCanToStructs+0x14d8>)
 801247e:	4413      	add	r3, r2
 8012480:	2214      	movs	r2, #20
 8012482:	49af      	ldr	r1, [pc, #700]	; (8012740 <readCanToStructs+0x14cc>)
 8012484:	4618      	mov	r0, r3
 8012486:	f013 fc8b 	bl	8025da0 <memcpy>
						Is_CAN_Exchange_happening = YES;
 801248a:	4bb1      	ldr	r3, [pc, #708]	; (8012750 <readCanToStructs+0x14dc>)
 801248c:	2201      	movs	r2, #1
 801248e:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012494:	4aaf      	ldr	r2, [pc, #700]	; (8012754 <readCanToStructs+0x14e0>)
 8012496:	f240 4116 	movw	r1, #1046	; 0x416
 801249a:	fb01 f303 	mul.w	r3, r1, r3
 801249e:	4413      	add	r3, r2
 80124a0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80124a4:	2200      	movs	r2, #0
 80124a6:	701a      	strb	r2, [r3, #0]
				break;
 80124a8:	e1df      	b.n	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 80124aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124ae:	4aa9      	ldr	r2, [pc, #676]	; (8012754 <readCanToStructs+0x14e0>)
 80124b0:	f240 4116 	movw	r1, #1046	; 0x416
 80124b4:	fb01 f303 	mul.w	r3, r1, r3
 80124b8:	4413      	add	r3, r2
 80124ba:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80124be:	2201      	movs	r2, #1
 80124c0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80124c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124c6:	49a3      	ldr	r1, [pc, #652]	; (8012754 <readCanToStructs+0x14e0>)
 80124c8:	f240 4216 	movw	r2, #1046	; 0x416
 80124cc:	fb03 f202 	mul.w	r2, r3, r2
 80124d0:	440a      	add	r2, r1
 80124d2:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80124d6:	7812      	ldrb	r2, [r2, #0]
 80124d8:	3201      	adds	r2, #1
 80124da:	b2d0      	uxtb	r0, r2
 80124dc:	4a9d      	ldr	r2, [pc, #628]	; (8012754 <readCanToStructs+0x14e0>)
 80124de:	f240 4116 	movw	r1, #1046	; 0x416
 80124e2:	fb01 f303 	mul.w	r3, r1, r3
 80124e6:	4413      	add	r3, r2
 80124e8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80124ec:	4602      	mov	r2, r0
 80124ee:	701a      	strb	r2, [r3, #0]
				break;
 80124f0:	e1bb      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80124f2:	4b99      	ldr	r3, [pc, #612]	; (8012758 <readCanToStructs+0x14e4>)
 80124f4:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80124f6:	4b99      	ldr	r3, [pc, #612]	; (801275c <readCanToStructs+0x14e8>)
 80124f8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124fc:	885b      	ldrh	r3, [r3, #2]
 80124fe:	4a97      	ldr	r2, [pc, #604]	; (801275c <readCanToStructs+0x14e8>)
 8012500:	011b      	lsls	r3, r3, #4
 8012502:	4413      	add	r3, r2
 8012504:	3304      	adds	r3, #4
 8012506:	781b      	ldrb	r3, [r3, #0]
 8012508:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801250c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012510:	2b00      	cmp	r3, #0
 8012512:	d110      	bne.n	8012536 <readCanToStructs+0x12c2>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8012514:	2202      	movs	r2, #2
 8012516:	2100      	movs	r1, #0
 8012518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801251a:	f013 fc69 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801251e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012522:	4a8c      	ldr	r2, [pc, #560]	; (8012754 <readCanToStructs+0x14e0>)
 8012524:	f240 4116 	movw	r1, #1046	; 0x416
 8012528:	fb01 f303 	mul.w	r3, r1, r3
 801252c:	4413      	add	r3, r2
 801252e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012532:	2200      	movs	r2, #0
 8012534:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8012536:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801253a:	4a86      	ldr	r2, [pc, #536]	; (8012754 <readCanToStructs+0x14e0>)
 801253c:	f240 4116 	movw	r1, #1046	; 0x416
 8012540:	fb01 f303 	mul.w	r3, r1, r3
 8012544:	4413      	add	r3, r2
 8012546:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012550:	429a      	cmp	r2, r3
 8012552:	d014      	beq.n	801257e <readCanToStructs+0x130a>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8012554:	4882      	ldr	r0, [pc, #520]	; (8012760 <readCanToStructs+0x14ec>)
 8012556:	f013 fdcf 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801255a:	2202      	movs	r2, #2
 801255c:	2100      	movs	r1, #0
 801255e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012560:	f013 fc46 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012568:	4a7a      	ldr	r2, [pc, #488]	; (8012754 <readCanToStructs+0x14e0>)
 801256a:	f240 4116 	movw	r1, #1046	; 0x416
 801256e:	fb01 f303 	mul.w	r3, r1, r3
 8012572:	4413      	add	r3, r2
 8012574:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012578:	2200      	movs	r2, #0
 801257a:	701a      	strb	r2, [r3, #0]
					break;
 801257c:	e175      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801257e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012582:	4613      	mov	r3, r2
 8012584:	00db      	lsls	r3, r3, #3
 8012586:	1a9b      	subs	r3, r3, r2
 8012588:	461a      	mov	r2, r3
 801258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801258c:	4413      	add	r3, r2
 801258e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012590:	2301      	movs	r3, #1
 8012592:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012596:	e016      	b.n	80125c6 <readCanToStructs+0x1352>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012598:	4b70      	ldr	r3, [pc, #448]	; (801275c <readCanToStructs+0x14e8>)
 801259a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801259e:	885b      	ldrh	r3, [r3, #2]
 80125a0:	461a      	mov	r2, r3
 80125a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125a6:	496d      	ldr	r1, [pc, #436]	; (801275c <readCanToStructs+0x14e8>)
 80125a8:	0112      	lsls	r2, r2, #4
 80125aa:	440a      	add	r2, r1
 80125ac:	4413      	add	r3, r2
 80125ae:	3304      	adds	r3, #4
 80125b0:	781a      	ldrb	r2, [r3, #0]
 80125b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80125b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125b8:	3301      	adds	r3, #1
 80125ba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80125bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80125c0:	3301      	adds	r3, #1
 80125c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80125c6:	4b65      	ldr	r3, [pc, #404]	; (801275c <readCanToStructs+0x14e8>)
 80125c8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125cc:	885b      	ldrh	r3, [r3, #2]
 80125ce:	4a63      	ldr	r2, [pc, #396]	; (801275c <readCanToStructs+0x14e8>)
 80125d0:	011b      	lsls	r3, r3, #4
 80125d2:	4413      	add	r3, r2
 80125d4:	330c      	adds	r3, #12
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80125dc:	429a      	cmp	r2, r3
 80125de:	d3db      	bcc.n	8012598 <readCanToStructs+0x1324>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80125e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125e4:	4a5b      	ldr	r2, [pc, #364]	; (8012754 <readCanToStructs+0x14e0>)
 80125e6:	f240 4116 	movw	r1, #1046	; 0x416
 80125ea:	fb01 f303 	mul.w	r3, r1, r3
 80125ee:	4413      	add	r3, r2
 80125f0:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80125f4:	781b      	ldrb	r3, [r3, #0]
 80125f6:	461a      	mov	r2, r3
 80125f8:	4613      	mov	r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	1a9a      	subs	r2, r3, r2
 80125fe:	4b57      	ldr	r3, [pc, #348]	; (801275c <readCanToStructs+0x14e8>)
 8012600:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012604:	885b      	ldrh	r3, [r3, #2]
 8012606:	4955      	ldr	r1, [pc, #340]	; (801275c <readCanToStructs+0x14e8>)
 8012608:	011b      	lsls	r3, r3, #4
 801260a:	440b      	add	r3, r1
 801260c:	330c      	adds	r3, #12
 801260e:	781b      	ldrb	r3, [r3, #0]
 8012610:	3b01      	subs	r3, #1
 8012612:	4413      	add	r3, r2
 8012614:	2b01      	cmp	r3, #1
 8012616:	d919      	bls.n	801264c <readCanToStructs+0x13d8>
					if(Debug_flag == 1)
 8012618:	4b48      	ldr	r3, [pc, #288]	; (801273c <readCanToStructs+0x14c8>)
 801261a:	781b      	ldrb	r3, [r3, #0]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d105      	bne.n	801262c <readCanToStructs+0x13b8>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8012620:	4b4d      	ldr	r3, [pc, #308]	; (8012758 <readCanToStructs+0x14e4>)
 8012622:	881b      	ldrh	r3, [r3, #0]
 8012624:	4619      	mov	r1, r3
 8012626:	484f      	ldr	r0, [pc, #316]	; (8012764 <readCanToStructs+0x14f0>)
 8012628:	f013 fcca 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801262c:	4b48      	ldr	r3, [pc, #288]	; (8012750 <readCanToStructs+0x14dc>)
 801262e:	2201      	movs	r2, #1
 8012630:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8012632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012636:	4a47      	ldr	r2, [pc, #284]	; (8012754 <readCanToStructs+0x14e0>)
 8012638:	f240 4116 	movw	r1, #1046	; 0x416
 801263c:	fb01 f303 	mul.w	r3, r1, r3
 8012640:	4413      	add	r3, r2
 8012642:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8012646:	2200      	movs	r2, #0
 8012648:	701a      	strb	r2, [r3, #0]
				break;
 801264a:	e10e      	b.n	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 801264c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012650:	4a40      	ldr	r2, [pc, #256]	; (8012754 <readCanToStructs+0x14e0>)
 8012652:	f240 4116 	movw	r1, #1046	; 0x416
 8012656:	fb01 f303 	mul.w	r3, r1, r3
 801265a:	4413      	add	r3, r2
 801265c:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8012660:	2201      	movs	r2, #1
 8012662:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8012664:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012668:	493a      	ldr	r1, [pc, #232]	; (8012754 <readCanToStructs+0x14e0>)
 801266a:	f240 4216 	movw	r2, #1046	; 0x416
 801266e:	fb03 f202 	mul.w	r2, r3, r2
 8012672:	440a      	add	r2, r1
 8012674:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8012678:	7812      	ldrb	r2, [r2, #0]
 801267a:	3201      	adds	r2, #1
 801267c:	b2d0      	uxtb	r0, r2
 801267e:	4a35      	ldr	r2, [pc, #212]	; (8012754 <readCanToStructs+0x14e0>)
 8012680:	f240 4116 	movw	r1, #1046	; 0x416
 8012684:	fb01 f303 	mul.w	r3, r1, r3
 8012688:	4413      	add	r3, r2
 801268a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801268e:	4602      	mov	r2, r0
 8012690:	701a      	strb	r2, [r3, #0]
				break;
 8012692:	e0ea      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8012694:	4b30      	ldr	r3, [pc, #192]	; (8012758 <readCanToStructs+0x14e4>)
 8012696:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012698:	4b30      	ldr	r3, [pc, #192]	; (801275c <readCanToStructs+0x14e8>)
 801269a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801269e:	885b      	ldrh	r3, [r3, #2]
 80126a0:	4a2e      	ldr	r2, [pc, #184]	; (801275c <readCanToStructs+0x14e8>)
 80126a2:	011b      	lsls	r3, r3, #4
 80126a4:	4413      	add	r3, r2
 80126a6:	3304      	adds	r3, #4
 80126a8:	781b      	ldrb	r3, [r3, #0]
 80126aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80126ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d110      	bne.n	80126d8 <readCanToStructs+0x1464>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80126b6:	2202      	movs	r2, #2
 80126b8:	2100      	movs	r1, #0
 80126ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80126bc:	f013 fb98 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80126c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126c4:	4a23      	ldr	r2, [pc, #140]	; (8012754 <readCanToStructs+0x14e0>)
 80126c6:	f240 4116 	movw	r1, #1046	; 0x416
 80126ca:	fb01 f303 	mul.w	r3, r1, r3
 80126ce:	4413      	add	r3, r2
 80126d0:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80126d4:	2200      	movs	r2, #0
 80126d6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 80126d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126dc:	4a1d      	ldr	r2, [pc, #116]	; (8012754 <readCanToStructs+0x14e0>)
 80126de:	f240 4116 	movw	r1, #1046	; 0x416
 80126e2:	fb01 f303 	mul.w	r3, r1, r3
 80126e6:	4413      	add	r3, r2
 80126e8:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80126ec:	781b      	ldrb	r3, [r3, #0]
 80126ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80126f2:	429a      	cmp	r2, r3
 80126f4:	d014      	beq.n	8012720 <readCanToStructs+0x14ac>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80126f6:	481c      	ldr	r0, [pc, #112]	; (8012768 <readCanToStructs+0x14f4>)
 80126f8:	f013 fcfe 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80126fc:	2202      	movs	r2, #2
 80126fe:	2100      	movs	r1, #0
 8012700:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012702:	f013 fb75 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012706:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801270a:	4a12      	ldr	r2, [pc, #72]	; (8012754 <readCanToStructs+0x14e0>)
 801270c:	f240 4116 	movw	r1, #1046	; 0x416
 8012710:	fb01 f303 	mul.w	r3, r1, r3
 8012714:	4413      	add	r3, r2
 8012716:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801271a:	2200      	movs	r2, #0
 801271c:	701a      	strb	r2, [r3, #0]
					break;
 801271e:	e0a4      	b.n	801286a <readCanToStructs+0x15f6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012720:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012724:	4613      	mov	r3, r2
 8012726:	00db      	lsls	r3, r3, #3
 8012728:	1a9b      	subs	r3, r3, r2
 801272a:	461a      	mov	r2, r3
 801272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801272e:	4413      	add	r3, r2
 8012730:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012732:	2301      	movs	r3, #1
 8012734:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012738:	e02f      	b.n	801279a <readCanToStructs+0x1526>
 801273a:	bf00      	nop
 801273c:	20000bbb 	.word	0x20000bbb
 8012740:	2000373c 	.word	0x2000373c
 8012744:	20000504 	.word	0x20000504
 8012748:	0802aa00 	.word	0x0802aa00
 801274c:	20003660 	.word	0x20003660
 8012750:	2000030b 	.word	0x2000030b
 8012754:	20006a14 	.word	0x20006a14
 8012758:	20000bb8 	.word	0x20000bb8
 801275c:	20007240 	.word	0x20007240
 8012760:	0802aa14 	.word	0x0802aa14
 8012764:	0802aa3c 	.word	0x0802aa3c
 8012768:	0802aa50 	.word	0x0802aa50
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801276c:	4b9f      	ldr	r3, [pc, #636]	; (80129ec <readCanToStructs+0x1778>)
 801276e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012772:	885b      	ldrh	r3, [r3, #2]
 8012774:	461a      	mov	r2, r3
 8012776:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801277a:	499c      	ldr	r1, [pc, #624]	; (80129ec <readCanToStructs+0x1778>)
 801277c:	0112      	lsls	r2, r2, #4
 801277e:	440a      	add	r2, r1
 8012780:	4413      	add	r3, r2
 8012782:	3304      	adds	r3, #4
 8012784:	781a      	ldrb	r2, [r3, #0]
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801278a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801278c:	3301      	adds	r3, #1
 801278e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012794:	3301      	adds	r3, #1
 8012796:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801279a:	4b94      	ldr	r3, [pc, #592]	; (80129ec <readCanToStructs+0x1778>)
 801279c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127a0:	885b      	ldrh	r3, [r3, #2]
 80127a2:	4a92      	ldr	r2, [pc, #584]	; (80129ec <readCanToStructs+0x1778>)
 80127a4:	011b      	lsls	r3, r3, #4
 80127a6:	4413      	add	r3, r2
 80127a8:	330c      	adds	r3, #12
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80127b0:	429a      	cmp	r2, r3
 80127b2:	d3db      	bcc.n	801276c <readCanToStructs+0x14f8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80127b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127b8:	4a8d      	ldr	r2, [pc, #564]	; (80129f0 <readCanToStructs+0x177c>)
 80127ba:	f240 4116 	movw	r1, #1046	; 0x416
 80127be:	fb01 f303 	mul.w	r3, r1, r3
 80127c2:	4413      	add	r3, r2
 80127c4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80127c8:	781b      	ldrb	r3, [r3, #0]
 80127ca:	461a      	mov	r2, r3
 80127cc:	4613      	mov	r3, r2
 80127ce:	00db      	lsls	r3, r3, #3
 80127d0:	1a9a      	subs	r2, r3, r2
 80127d2:	4b86      	ldr	r3, [pc, #536]	; (80129ec <readCanToStructs+0x1778>)
 80127d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127d8:	885b      	ldrh	r3, [r3, #2]
 80127da:	4984      	ldr	r1, [pc, #528]	; (80129ec <readCanToStructs+0x1778>)
 80127dc:	011b      	lsls	r3, r3, #4
 80127de:	440b      	add	r3, r1
 80127e0:	330c      	adds	r3, #12
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	3b01      	subs	r3, #1
 80127e6:	4413      	add	r3, r2
 80127e8:	2b01      	cmp	r3, #1
 80127ea:	d919      	bls.n	8012820 <readCanToStructs+0x15ac>
					if(Debug_flag == 1)
 80127ec:	4b81      	ldr	r3, [pc, #516]	; (80129f4 <readCanToStructs+0x1780>)
 80127ee:	781b      	ldrb	r3, [r3, #0]
 80127f0:	2b01      	cmp	r3, #1
 80127f2:	d105      	bne.n	8012800 <readCanToStructs+0x158c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80127f4:	4b80      	ldr	r3, [pc, #512]	; (80129f8 <readCanToStructs+0x1784>)
 80127f6:	881b      	ldrh	r3, [r3, #0]
 80127f8:	4619      	mov	r1, r3
 80127fa:	4880      	ldr	r0, [pc, #512]	; (80129fc <readCanToStructs+0x1788>)
 80127fc:	f013 fbe0 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8012800:	4b7f      	ldr	r3, [pc, #508]	; (8012a00 <readCanToStructs+0x178c>)
 8012802:	2201      	movs	r2, #1
 8012804:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8012806:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801280a:	4a79      	ldr	r2, [pc, #484]	; (80129f0 <readCanToStructs+0x177c>)
 801280c:	f240 4116 	movw	r1, #1046	; 0x416
 8012810:	fb01 f303 	mul.w	r3, r1, r3
 8012814:	4413      	add	r3, r2
 8012816:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801281a:	2200      	movs	r2, #0
 801281c:	701a      	strb	r2, [r3, #0]
				break;
 801281e:	e024      	b.n	801286a <readCanToStructs+0x15f6>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8012820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012824:	4a72      	ldr	r2, [pc, #456]	; (80129f0 <readCanToStructs+0x177c>)
 8012826:	f240 4116 	movw	r1, #1046	; 0x416
 801282a:	fb01 f303 	mul.w	r3, r1, r3
 801282e:	4413      	add	r3, r2
 8012830:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8012834:	2201      	movs	r2, #1
 8012836:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8012838:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801283c:	496c      	ldr	r1, [pc, #432]	; (80129f0 <readCanToStructs+0x177c>)
 801283e:	f240 4216 	movw	r2, #1046	; 0x416
 8012842:	fb03 f202 	mul.w	r2, r3, r2
 8012846:	440a      	add	r2, r1
 8012848:	f202 4215 	addw	r2, r2, #1045	; 0x415
 801284c:	7812      	ldrb	r2, [r2, #0]
 801284e:	3201      	adds	r2, #1
 8012850:	b2d0      	uxtb	r0, r2
 8012852:	4a67      	ldr	r2, [pc, #412]	; (80129f0 <readCanToStructs+0x177c>)
 8012854:	f240 4116 	movw	r1, #1046	; 0x416
 8012858:	fb01 f303 	mul.w	r3, r1, r3
 801285c:	4413      	add	r3, r2
 801285e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8012862:	4602      	mov	r2, r0
 8012864:	701a      	strb	r2, [r3, #0]
				break;
 8012866:	e000      	b.n	801286a <readCanToStructs+0x15f6>
				break;
 8012868:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801286a:	4b60      	ldr	r3, [pc, #384]	; (80129ec <readCanToStructs+0x1778>)
 801286c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012870:	885b      	ldrh	r3, [r3, #2]
 8012872:	011b      	lsls	r3, r3, #4
 8012874:	4a5d      	ldr	r2, [pc, #372]	; (80129ec <readCanToStructs+0x1778>)
 8012876:	4413      	add	r3, r2
 8012878:	2210      	movs	r2, #16
 801287a:	2100      	movs	r1, #0
 801287c:	4618      	mov	r0, r3
 801287e:	f013 fab7 	bl	8025df0 <memset>
			canRead.Out++;
 8012882:	4b5a      	ldr	r3, [pc, #360]	; (80129ec <readCanToStructs+0x1778>)
 8012884:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012888:	885b      	ldrh	r3, [r3, #2]
 801288a:	3301      	adds	r3, #1
 801288c:	b29a      	uxth	r2, r3
 801288e:	4b57      	ldr	r3, [pc, #348]	; (80129ec <readCanToStructs+0x1778>)
 8012890:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012894:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8012896:	4b55      	ldr	r3, [pc, #340]	; (80129ec <readCanToStructs+0x1778>)
 8012898:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801289c:	885b      	ldrh	r3, [r3, #2]
 801289e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80128a2:	d104      	bne.n	80128ae <readCanToStructs+0x163a>
				canRead.Out = 0;
 80128a4:	4b51      	ldr	r3, [pc, #324]	; (80129ec <readCanToStructs+0x1778>)
 80128a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128aa:	2200      	movs	r2, #0
 80128ac:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80128ae:	f7fe fc8b 	bl	80111c8 <canDataReady>
 80128b2:	4603      	mov	r3, r0
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f47e ad07 	bne.w	80112c8 <readCanToStructs+0x54>

		}
		/* ___________________ HITACHI _______________ */
	}
	break;
 80128ba:	f002 bdc9 	b.w	8015450 <readCanToStructs+0x41dc>
	case SIEMENS:
	{
		/* __________ SIEMENS _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80128be:	4b4b      	ldr	r3, [pc, #300]	; (80129ec <readCanToStructs+0x1778>)
 80128c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128c4:	885b      	ldrh	r3, [r3, #2]
 80128c6:	4a49      	ldr	r2, [pc, #292]	; (80129ec <readCanToStructs+0x1778>)
 80128c8:	011b      	lsls	r3, r3, #4
 80128ca:	4413      	add	r3, r2
 80128cc:	330f      	adds	r3, #15
 80128ce:	781b      	ldrb	r3, [r3, #0]
 80128d0:	3b01      	subs	r3, #1
 80128d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80128d6:	4b45      	ldr	r3, [pc, #276]	; (80129ec <readCanToStructs+0x1778>)
 80128d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128dc:	885b      	ldrh	r3, [r3, #2]
 80128de:	4a43      	ldr	r2, [pc, #268]	; (80129ec <readCanToStructs+0x1778>)
 80128e0:	011b      	lsls	r3, r3, #4
 80128e2:	4413      	add	r3, r2
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	f240 220a 	movw	r2, #522	; 0x20a
 80128ea:	4293      	cmp	r3, r2
 80128ec:	f201 803e 	bhi.w	801396c <readCanToStructs+0x26f8>
 80128f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80128f4:	d80a      	bhi.n	801290c <readCanToStructs+0x1698>
 80128f6:	f240 1203 	movw	r2, #259	; 0x103
 80128fa:	4293      	cmp	r3, r2
 80128fc:	d022      	beq.n	8012944 <readCanToStructs+0x16d0>
 80128fe:	f240 1209 	movw	r2, #265	; 0x109
 8012902:	4293      	cmp	r3, r2
 8012904:	f000 8104 	beq.w	8012b10 <readCanToStructs+0x189c>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8012908:	f001 b830 	b.w	801396c <readCanToStructs+0x26f8>
 801290c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8012910:	2b09      	cmp	r3, #9
 8012912:	f201 802b 	bhi.w	801396c <readCanToStructs+0x26f8>
 8012916:	a201      	add	r2, pc, #4	; (adr r2, 801291c <readCanToStructs+0x16a8>)
 8012918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801291c:	08012cdd 	.word	0x08012cdd
 8012920:	08012e93 	.word	0x08012e93
 8012924:	0801396d 	.word	0x0801396d
 8012928:	0801396d 	.word	0x0801396d
 801292c:	08013433 	.word	0x08013433
 8012930:	0801396d 	.word	0x0801396d
 8012934:	08013073 	.word	0x08013073
 8012938:	0801323f 	.word	0x0801323f
 801293c:	08013605 	.word	0x08013605
 8012940:	080137a7 	.word	0x080137a7
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012944:	4b2f      	ldr	r3, [pc, #188]	; (8012a04 <readCanToStructs+0x1790>)
 8012946:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012948:	4b28      	ldr	r3, [pc, #160]	; (80129ec <readCanToStructs+0x1778>)
 801294a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801294e:	885b      	ldrh	r3, [r3, #2]
 8012950:	4a26      	ldr	r2, [pc, #152]	; (80129ec <readCanToStructs+0x1778>)
 8012952:	011b      	lsls	r3, r3, #4
 8012954:	4413      	add	r3, r2
 8012956:	3304      	adds	r3, #4
 8012958:	781b      	ldrb	r3, [r3, #0]
 801295a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801295e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012962:	2b00      	cmp	r3, #0
 8012964:	d110      	bne.n	8012988 <readCanToStructs+0x1714>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012966:	2206      	movs	r2, #6
 8012968:	2100      	movs	r1, #0
 801296a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801296c:	f013 fa40 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012970:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012974:	4a1e      	ldr	r2, [pc, #120]	; (80129f0 <readCanToStructs+0x177c>)
 8012976:	f240 4116 	movw	r1, #1046	; 0x416
 801297a:	fb01 f303 	mul.w	r3, r1, r3
 801297e:	4413      	add	r3, r2
 8012980:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012984:	2200      	movs	r2, #0
 8012986:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8012988:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801298c:	4a18      	ldr	r2, [pc, #96]	; (80129f0 <readCanToStructs+0x177c>)
 801298e:	f240 4116 	movw	r1, #1046	; 0x416
 8012992:	fb01 f303 	mul.w	r3, r1, r3
 8012996:	4413      	add	r3, r2
 8012998:	f203 2307 	addw	r3, r3, #519	; 0x207
 801299c:	781b      	ldrb	r3, [r3, #0]
 801299e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129a2:	429a      	cmp	r2, r3
 80129a4:	d015      	beq.n	80129d2 <readCanToStructs+0x175e>
					printf("GPS Packet Seq no MisMatch\n");
 80129a6:	4818      	ldr	r0, [pc, #96]	; (8012a08 <readCanToStructs+0x1794>)
 80129a8:	f013 fba6 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80129ac:	2206      	movs	r2, #6
 80129ae:	2100      	movs	r1, #0
 80129b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129b2:	f013 fa1d 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80129b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129ba:	4a0d      	ldr	r2, [pc, #52]	; (80129f0 <readCanToStructs+0x177c>)
 80129bc:	f240 4116 	movw	r1, #1046	; 0x416
 80129c0:	fb01 f303 	mul.w	r3, r1, r3
 80129c4:	4413      	add	r3, r2
 80129c6:	f203 2307 	addw	r3, r3, #519	; 0x207
 80129ca:	2200      	movs	r2, #0
 80129cc:	701a      	strb	r2, [r3, #0]
					break;
 80129ce:	f000 bfd2 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129d6:	4613      	mov	r3, r2
 80129d8:	00db      	lsls	r3, r3, #3
 80129da:	1a9b      	subs	r3, r3, r2
 80129dc:	461a      	mov	r2, r3
 80129de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129e0:	4413      	add	r3, r2
 80129e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129e4:	2301      	movs	r3, #1
 80129e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129ea:	e026      	b.n	8012a3a <readCanToStructs+0x17c6>
 80129ec:	20007240 	.word	0x20007240
 80129f0:	20006a14 	.word	0x20006a14
 80129f4:	20000bbb 	.word	0x20000bbb
 80129f8:	20000bb8 	.word	0x20000bb8
 80129fc:	0802aa78 	.word	0x0802aa78
 8012a00:	2000030b 	.word	0x2000030b
 8012a04:	20003fbc 	.word	0x20003fbc
 8012a08:	0802a83c 	.word	0x0802a83c
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012a0c:	4bab      	ldr	r3, [pc, #684]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a12:	885b      	ldrh	r3, [r3, #2]
 8012a14:	461a      	mov	r2, r3
 8012a16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a1a:	49a8      	ldr	r1, [pc, #672]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a1c:	0112      	lsls	r2, r2, #4
 8012a1e:	440a      	add	r2, r1
 8012a20:	4413      	add	r3, r2
 8012a22:	3304      	adds	r3, #4
 8012a24:	781a      	ldrb	r2, [r3, #0]
 8012a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a28:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a2c:	3301      	adds	r3, #1
 8012a2e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a34:	3301      	adds	r3, #1
 8012a36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a3a:	4ba0      	ldr	r3, [pc, #640]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a40:	885b      	ldrh	r3, [r3, #2]
 8012a42:	4a9e      	ldr	r2, [pc, #632]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a44:	011b      	lsls	r3, r3, #4
 8012a46:	4413      	add	r3, r2
 8012a48:	330c      	adds	r3, #12
 8012a4a:	781b      	ldrb	r3, [r3, #0]
 8012a4c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a50:	429a      	cmp	r2, r3
 8012a52:	d3db      	bcc.n	8012a0c <readCanToStructs+0x1798>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a58:	4a99      	ldr	r2, [pc, #612]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012a5a:	f240 4116 	movw	r1, #1046	; 0x416
 8012a5e:	fb01 f303 	mul.w	r3, r1, r3
 8012a62:	4413      	add	r3, r2
 8012a64:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012a68:	781b      	ldrb	r3, [r3, #0]
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	4613      	mov	r3, r2
 8012a6e:	00db      	lsls	r3, r3, #3
 8012a70:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012a72:	4b92      	ldr	r3, [pc, #584]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a74:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a78:	885b      	ldrh	r3, [r3, #2]
 8012a7a:	4990      	ldr	r1, [pc, #576]	; (8012cbc <readCanToStructs+0x1a48>)
 8012a7c:	011b      	lsls	r3, r3, #4
 8012a7e:	440b      	add	r3, r1
 8012a80:	330c      	adds	r3, #12
 8012a82:	781b      	ldrb	r3, [r3, #0]
 8012a84:	3b01      	subs	r3, #1
 8012a86:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012a88:	2b05      	cmp	r3, #5
 8012a8a:	d91c      	bls.n	8012ac6 <readCanToStructs+0x1852>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012a8c:	4b8d      	ldr	r3, [pc, #564]	; (8012cc4 <readCanToStructs+0x1a50>)
 8012a8e:	4a8e      	ldr	r2, [pc, #568]	; (8012cc8 <readCanToStructs+0x1a54>)
 8012a90:	6811      	ldr	r1, [r2, #0]
 8012a92:	6019      	str	r1, [r3, #0]
 8012a94:	8892      	ldrh	r2, [r2, #4]
 8012a96:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012a98:	4b8c      	ldr	r3, [pc, #560]	; (8012ccc <readCanToStructs+0x1a58>)
 8012a9a:	781b      	ldrb	r3, [r3, #0]
 8012a9c:	2b01      	cmp	r3, #1
 8012a9e:	d102      	bne.n	8012aa6 <readCanToStructs+0x1832>
						printf("GPS_PACKET_RECEIVED\n");
 8012aa0:	488b      	ldr	r0, [pc, #556]	; (8012cd0 <readCanToStructs+0x1a5c>)
 8012aa2:	f013 fb29 	bl	80260f8 <puts>
					Write_RTC();
 8012aa6:	f7f9 ff7f 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aae:	4a84      	ldr	r2, [pc, #528]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012ab0:	f240 4116 	movw	r1, #1046	; 0x416
 8012ab4:	fb01 f303 	mul.w	r3, r1, r3
 8012ab8:	4413      	add	r3, r2
 8012aba:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012abe:	2200      	movs	r2, #0
 8012ac0:	701a      	strb	r2, [r3, #0]
				break;
 8012ac2:	f000 bf58 	b.w	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8012ac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012aca:	4a7d      	ldr	r2, [pc, #500]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012acc:	f240 4116 	movw	r1, #1046	; 0x416
 8012ad0:	fb01 f303 	mul.w	r3, r1, r3
 8012ad4:	4413      	add	r3, r2
 8012ad6:	f203 2306 	addw	r3, r3, #518	; 0x206
 8012ada:	2201      	movs	r2, #1
 8012adc:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8012ade:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ae2:	4977      	ldr	r1, [pc, #476]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012ae4:	f240 4216 	movw	r2, #1046	; 0x416
 8012ae8:	fb03 f202 	mul.w	r2, r3, r2
 8012aec:	440a      	add	r2, r1
 8012aee:	f202 2207 	addw	r2, r2, #519	; 0x207
 8012af2:	7812      	ldrb	r2, [r2, #0]
 8012af4:	3201      	adds	r2, #1
 8012af6:	b2d0      	uxtb	r0, r2
 8012af8:	4a71      	ldr	r2, [pc, #452]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012afa:	f240 4116 	movw	r1, #1046	; 0x416
 8012afe:	fb01 f303 	mul.w	r3, r1, r3
 8012b02:	4413      	add	r3, r2
 8012b04:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012b08:	4602      	mov	r2, r0
 8012b0a:	701a      	strb	r2, [r3, #0]
				break;
 8012b0c:	f000 bf33 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8012b10:	4b6d      	ldr	r3, [pc, #436]	; (8012cc8 <readCanToStructs+0x1a54>)
 8012b12:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012b14:	4b69      	ldr	r3, [pc, #420]	; (8012cbc <readCanToStructs+0x1a48>)
 8012b16:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b1a:	885b      	ldrh	r3, [r3, #2]
 8012b1c:	4a67      	ldr	r2, [pc, #412]	; (8012cbc <readCanToStructs+0x1a48>)
 8012b1e:	011b      	lsls	r3, r3, #4
 8012b20:	4413      	add	r3, r2
 8012b22:	3304      	adds	r3, #4
 8012b24:	781b      	ldrb	r3, [r3, #0]
 8012b26:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012b2a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d110      	bne.n	8012b54 <readCanToStructs+0x18e0>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012b32:	2206      	movs	r2, #6
 8012b34:	2100      	movs	r1, #0
 8012b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b38:	f013 f95a 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012b3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b40:	4a5f      	ldr	r2, [pc, #380]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012b42:	f240 4116 	movw	r1, #1046	; 0x416
 8012b46:	fb01 f303 	mul.w	r3, r1, r3
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b50:	2200      	movs	r2, #0
 8012b52:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8012b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b58:	4a59      	ldr	r2, [pc, #356]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012b5a:	f240 4116 	movw	r1, #1046	; 0x416
 8012b5e:	fb01 f303 	mul.w	r3, r1, r3
 8012b62:	4413      	add	r3, r2
 8012b64:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b6e:	429a      	cmp	r2, r3
 8012b70:	d015      	beq.n	8012b9e <readCanToStructs+0x192a>
					printf("GPS2 Packet Seq no MisMatch\n");
 8012b72:	4858      	ldr	r0, [pc, #352]	; (8012cd4 <readCanToStructs+0x1a60>)
 8012b74:	f013 fac0 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012b78:	2206      	movs	r2, #6
 8012b7a:	2100      	movs	r1, #0
 8012b7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b7e:	f013 f937 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b86:	4a4e      	ldr	r2, [pc, #312]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012b88:	f240 4116 	movw	r1, #1046	; 0x416
 8012b8c:	fb01 f303 	mul.w	r3, r1, r3
 8012b90:	4413      	add	r3, r2
 8012b92:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012b96:	2200      	movs	r2, #0
 8012b98:	701a      	strb	r2, [r3, #0]
					break;
 8012b9a:	f000 beec 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012b9e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ba2:	4613      	mov	r3, r2
 8012ba4:	00db      	lsls	r3, r3, #3
 8012ba6:	1a9b      	subs	r3, r3, r2
 8012ba8:	461a      	mov	r2, r3
 8012baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bac:	4413      	add	r3, r2
 8012bae:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012bb0:	2301      	movs	r3, #1
 8012bb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012bb6:	e016      	b.n	8012be6 <readCanToStructs+0x1972>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012bb8:	4b40      	ldr	r3, [pc, #256]	; (8012cbc <readCanToStructs+0x1a48>)
 8012bba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bbe:	885b      	ldrh	r3, [r3, #2]
 8012bc0:	461a      	mov	r2, r3
 8012bc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bc6:	493d      	ldr	r1, [pc, #244]	; (8012cbc <readCanToStructs+0x1a48>)
 8012bc8:	0112      	lsls	r2, r2, #4
 8012bca:	440a      	add	r2, r1
 8012bcc:	4413      	add	r3, r2
 8012bce:	3304      	adds	r3, #4
 8012bd0:	781a      	ldrb	r2, [r3, #0]
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd8:	3301      	adds	r3, #1
 8012bda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012bdc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012be0:	3301      	adds	r3, #1
 8012be2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012be6:	4b35      	ldr	r3, [pc, #212]	; (8012cbc <readCanToStructs+0x1a48>)
 8012be8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bec:	885b      	ldrh	r3, [r3, #2]
 8012bee:	4a33      	ldr	r2, [pc, #204]	; (8012cbc <readCanToStructs+0x1a48>)
 8012bf0:	011b      	lsls	r3, r3, #4
 8012bf2:	4413      	add	r3, r2
 8012bf4:	330c      	adds	r3, #12
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012bfc:	429a      	cmp	r2, r3
 8012bfe:	d3db      	bcc.n	8012bb8 <readCanToStructs+0x1944>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012c00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c04:	4a2e      	ldr	r2, [pc, #184]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012c06:	f240 4116 	movw	r1, #1046	; 0x416
 8012c0a:	fb01 f303 	mul.w	r3, r1, r3
 8012c0e:	4413      	add	r3, r2
 8012c10:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012c14:	781b      	ldrb	r3, [r3, #0]
 8012c16:	461a      	mov	r2, r3
 8012c18:	4613      	mov	r3, r2
 8012c1a:	00db      	lsls	r3, r3, #3
 8012c1c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012c1e:	4b27      	ldr	r3, [pc, #156]	; (8012cbc <readCanToStructs+0x1a48>)
 8012c20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c24:	885b      	ldrh	r3, [r3, #2]
 8012c26:	4925      	ldr	r1, [pc, #148]	; (8012cbc <readCanToStructs+0x1a48>)
 8012c28:	011b      	lsls	r3, r3, #4
 8012c2a:	440b      	add	r3, r1
 8012c2c:	330c      	adds	r3, #12
 8012c2e:	781b      	ldrb	r3, [r3, #0]
 8012c30:	3b01      	subs	r3, #1
 8012c32:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8012c34:	2b05      	cmp	r3, #5
 8012c36:	d91c      	bls.n	8012c72 <readCanToStructs+0x19fe>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012c38:	4b22      	ldr	r3, [pc, #136]	; (8012cc4 <readCanToStructs+0x1a50>)
 8012c3a:	4a23      	ldr	r2, [pc, #140]	; (8012cc8 <readCanToStructs+0x1a54>)
 8012c3c:	6811      	ldr	r1, [r2, #0]
 8012c3e:	6019      	str	r1, [r3, #0]
 8012c40:	8892      	ldrh	r2, [r2, #4]
 8012c42:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012c44:	4b21      	ldr	r3, [pc, #132]	; (8012ccc <readCanToStructs+0x1a58>)
 8012c46:	781b      	ldrb	r3, [r3, #0]
 8012c48:	2b01      	cmp	r3, #1
 8012c4a:	d102      	bne.n	8012c52 <readCanToStructs+0x19de>
						printf("GPS2_PACKET_RECEIVED\n");
 8012c4c:	4822      	ldr	r0, [pc, #136]	; (8012cd8 <readCanToStructs+0x1a64>)
 8012c4e:	f013 fa53 	bl	80260f8 <puts>
					Write_RTC();
 8012c52:	f7f9 fea9 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c5a:	4a19      	ldr	r2, [pc, #100]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012c5c:	f240 4116 	movw	r1, #1046	; 0x416
 8012c60:	fb01 f303 	mul.w	r3, r1, r3
 8012c64:	4413      	add	r3, r2
 8012c66:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012c6a:	2200      	movs	r2, #0
 8012c6c:	701a      	strb	r2, [r3, #0]
				break;
 8012c6e:	f000 be82 	b.w	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8012c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c76:	4a12      	ldr	r2, [pc, #72]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012c78:	f240 4116 	movw	r1, #1046	; 0x416
 8012c7c:	fb01 f303 	mul.w	r3, r1, r3
 8012c80:	4413      	add	r3, r2
 8012c82:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012c86:	2201      	movs	r2, #1
 8012c88:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8012c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c8e:	490c      	ldr	r1, [pc, #48]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012c90:	f240 4216 	movw	r2, #1046	; 0x416
 8012c94:	fb03 f202 	mul.w	r2, r3, r2
 8012c98:	440a      	add	r2, r1
 8012c9a:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012c9e:	7812      	ldrb	r2, [r2, #0]
 8012ca0:	3201      	adds	r2, #1
 8012ca2:	b2d0      	uxtb	r0, r2
 8012ca4:	4a06      	ldr	r2, [pc, #24]	; (8012cc0 <readCanToStructs+0x1a4c>)
 8012ca6:	f240 4116 	movw	r1, #1046	; 0x416
 8012caa:	fb01 f303 	mul.w	r3, r1, r3
 8012cae:	4413      	add	r3, r2
 8012cb0:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012cb4:	4602      	mov	r2, r0
 8012cb6:	701a      	strb	r2, [r3, #0]
				break;
 8012cb8:	f000 be5d 	b.w	8013976 <readCanToStructs+0x2702>
 8012cbc:	20007240 	.word	0x20007240
 8012cc0:	20006a14 	.word	0x20006a14
 8012cc4:	20003fb4 	.word	0x20003fb4
 8012cc8:	20003fbc 	.word	0x20003fbc
 8012ccc:	20000bbb 	.word	0x20000bbb
 8012cd0:	0802a858 	.word	0x0802a858
 8012cd4:	0802a86c 	.word	0x0802a86c
 8012cd8:	0802a888 	.word	0x0802a888
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8012cdc:	4bc8      	ldr	r3, [pc, #800]	; (8013000 <readCanToStructs+0x1d8c>)
 8012cde:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012ce0:	4bc8      	ldr	r3, [pc, #800]	; (8013004 <readCanToStructs+0x1d90>)
 8012ce2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ce6:	885b      	ldrh	r3, [r3, #2]
 8012ce8:	4ac6      	ldr	r2, [pc, #792]	; (8013004 <readCanToStructs+0x1d90>)
 8012cea:	011b      	lsls	r3, r3, #4
 8012cec:	4413      	add	r3, r2
 8012cee:	3304      	adds	r3, #4
 8012cf0:	781b      	ldrb	r3, [r3, #0]
 8012cf2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012cf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d110      	bne.n	8012d20 <readCanToStructs+0x1aac>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012cfe:	2204      	movs	r2, #4
 8012d00:	2100      	movs	r1, #0
 8012d02:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d04:	f013 f874 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d0c:	4abe      	ldr	r2, [pc, #760]	; (8013008 <readCanToStructs+0x1d94>)
 8012d0e:	f240 4116 	movw	r1, #1046	; 0x416
 8012d12:	fb01 f303 	mul.w	r3, r1, r3
 8012d16:	4413      	add	r3, r2
 8012d18:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8012d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d24:	4ab8      	ldr	r2, [pc, #736]	; (8013008 <readCanToStructs+0x1d94>)
 8012d26:	f240 4116 	movw	r1, #1046	; 0x416
 8012d2a:	fb01 f303 	mul.w	r3, r1, r3
 8012d2e:	4413      	add	r3, r2
 8012d30:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d34:	781b      	ldrb	r3, [r3, #0]
 8012d36:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	d015      	beq.n	8012d6a <readCanToStructs+0x1af6>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8012d3e:	48b3      	ldr	r0, [pc, #716]	; (801300c <readCanToStructs+0x1d98>)
 8012d40:	f013 f9da 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012d44:	2204      	movs	r2, #4
 8012d46:	2100      	movs	r1, #0
 8012d48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012d4a:	f013 f851 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012d4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d52:	4aad      	ldr	r2, [pc, #692]	; (8013008 <readCanToStructs+0x1d94>)
 8012d54:	f240 4116 	movw	r1, #1046	; 0x416
 8012d58:	fb01 f303 	mul.w	r3, r1, r3
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012d62:	2200      	movs	r2, #0
 8012d64:	701a      	strb	r2, [r3, #0]
					break;
 8012d66:	f000 be06 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012d6a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d6e:	4613      	mov	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	1a9b      	subs	r3, r3, r2
 8012d74:	461a      	mov	r2, r3
 8012d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d78:	4413      	add	r3, r2
 8012d7a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d82:	e016      	b.n	8012db2 <readCanToStructs+0x1b3e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012d84:	4b9f      	ldr	r3, [pc, #636]	; (8013004 <readCanToStructs+0x1d90>)
 8012d86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d8a:	885b      	ldrh	r3, [r3, #2]
 8012d8c:	461a      	mov	r2, r3
 8012d8e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d92:	499c      	ldr	r1, [pc, #624]	; (8013004 <readCanToStructs+0x1d90>)
 8012d94:	0112      	lsls	r2, r2, #4
 8012d96:	440a      	add	r2, r1
 8012d98:	4413      	add	r3, r2
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	781a      	ldrb	r2, [r3, #0]
 8012d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012da4:	3301      	adds	r3, #1
 8012da6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012da8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dac:	3301      	adds	r3, #1
 8012dae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012db2:	4b94      	ldr	r3, [pc, #592]	; (8013004 <readCanToStructs+0x1d90>)
 8012db4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012db8:	885b      	ldrh	r3, [r3, #2]
 8012dba:	4a92      	ldr	r2, [pc, #584]	; (8013004 <readCanToStructs+0x1d90>)
 8012dbc:	011b      	lsls	r3, r3, #4
 8012dbe:	4413      	add	r3, r2
 8012dc0:	330c      	adds	r3, #12
 8012dc2:	781b      	ldrb	r3, [r3, #0]
 8012dc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012dc8:	429a      	cmp	r2, r3
 8012dca:	d3db      	bcc.n	8012d84 <readCanToStructs+0x1b10>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012dcc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dd0:	4a8d      	ldr	r2, [pc, #564]	; (8013008 <readCanToStructs+0x1d94>)
 8012dd2:	f240 4116 	movw	r1, #1046	; 0x416
 8012dd6:	fb01 f303 	mul.w	r3, r1, r3
 8012dda:	4413      	add	r3, r2
 8012ddc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	461a      	mov	r2, r3
 8012de4:	4613      	mov	r3, r2
 8012de6:	00db      	lsls	r3, r3, #3
 8012de8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012dea:	4b86      	ldr	r3, [pc, #536]	; (8013004 <readCanToStructs+0x1d90>)
 8012dec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012df0:	885b      	ldrh	r3, [r3, #2]
 8012df2:	4984      	ldr	r1, [pc, #528]	; (8013004 <readCanToStructs+0x1d90>)
 8012df4:	011b      	lsls	r3, r3, #4
 8012df6:	440b      	add	r3, r1
 8012df8:	330c      	adds	r3, #12
 8012dfa:	781b      	ldrb	r3, [r3, #0]
 8012dfc:	3b01      	subs	r3, #1
 8012dfe:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8012e00:	2b03      	cmp	r3, #3
 8012e02:	d921      	bls.n	8012e48 <readCanToStructs+0x1bd4>
 8012e04:	4b7e      	ldr	r3, [pc, #504]	; (8013000 <readCanToStructs+0x1d8c>)
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012e0a:	4b81      	ldr	r3, [pc, #516]	; (8013010 <readCanToStructs+0x1d9c>)
 8012e0c:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012e0e:	4b81      	ldr	r3, [pc, #516]	; (8013014 <readCanToStructs+0x1da0>)
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	2b01      	cmp	r3, #1
 8012e14:	d102      	bne.n	8012e1c <readCanToStructs+0x1ba8>
						printf("O_Info1_RCV\n");
 8012e16:	4880      	ldr	r0, [pc, #512]	; (8013018 <readCanToStructs+0x1da4>)
 8012e18:	f013 f96e 	bl	80260f8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012e1c:	4b7f      	ldr	r3, [pc, #508]	; (801301c <readCanToStructs+0x1da8>)
 8012e1e:	2201      	movs	r2, #1
 8012e20:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012e22:	f006 f9b7 	bl	8019194 <HAL_GetTick>
 8012e26:	4603      	mov	r3, r0
 8012e28:	4a7c      	ldr	r2, [pc, #496]	; (801301c <readCanToStructs+0x1da8>)
 8012e2a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012e2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e30:	4a75      	ldr	r2, [pc, #468]	; (8013008 <readCanToStructs+0x1d94>)
 8012e32:	f240 4116 	movw	r1, #1046	; 0x416
 8012e36:	fb01 f303 	mul.w	r3, r1, r3
 8012e3a:	4413      	add	r3, r2
 8012e3c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012e40:	2200      	movs	r2, #0
 8012e42:	701a      	strb	r2, [r3, #0]
				break;
 8012e44:	f000 bd97 	b.w	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8012e48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e4c:	4a6e      	ldr	r2, [pc, #440]	; (8013008 <readCanToStructs+0x1d94>)
 8012e4e:	f240 4116 	movw	r1, #1046	; 0x416
 8012e52:	fb01 f303 	mul.w	r3, r1, r3
 8012e56:	4413      	add	r3, r2
 8012e58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012e5c:	2201      	movs	r2, #1
 8012e5e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012e60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012e64:	4968      	ldr	r1, [pc, #416]	; (8013008 <readCanToStructs+0x1d94>)
 8012e66:	f240 4216 	movw	r2, #1046	; 0x416
 8012e6a:	fb03 f202 	mul.w	r2, r3, r2
 8012e6e:	440a      	add	r2, r1
 8012e70:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012e74:	7812      	ldrb	r2, [r2, #0]
 8012e76:	3201      	adds	r2, #1
 8012e78:	b2d0      	uxtb	r0, r2
 8012e7a:	4a63      	ldr	r2, [pc, #396]	; (8013008 <readCanToStructs+0x1d94>)
 8012e7c:	f240 4116 	movw	r1, #1046	; 0x416
 8012e80:	fb01 f303 	mul.w	r3, r1, r3
 8012e84:	4413      	add	r3, r2
 8012e86:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012e8a:	4602      	mov	r2, r0
 8012e8c:	701a      	strb	r2, [r3, #0]
				break;
 8012e8e:	f000 bd72 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8012e92:	4b5b      	ldr	r3, [pc, #364]	; (8013000 <readCanToStructs+0x1d8c>)
 8012e94:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012e96:	4b5b      	ldr	r3, [pc, #364]	; (8013004 <readCanToStructs+0x1d90>)
 8012e98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012e9c:	885b      	ldrh	r3, [r3, #2]
 8012e9e:	4a59      	ldr	r2, [pc, #356]	; (8013004 <readCanToStructs+0x1d90>)
 8012ea0:	011b      	lsls	r3, r3, #4
 8012ea2:	4413      	add	r3, r2
 8012ea4:	3304      	adds	r3, #4
 8012ea6:	781b      	ldrb	r3, [r3, #0]
 8012ea8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012eac:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d110      	bne.n	8012ed6 <readCanToStructs+0x1c62>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012eb4:	2204      	movs	r2, #4
 8012eb6:	2100      	movs	r1, #0
 8012eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eba:	f012 ff99 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ec2:	4a51      	ldr	r2, [pc, #324]	; (8013008 <readCanToStructs+0x1d94>)
 8012ec4:	f240 4116 	movw	r1, #1046	; 0x416
 8012ec8:	fb01 f303 	mul.w	r3, r1, r3
 8012ecc:	4413      	add	r3, r2
 8012ece:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012ed6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012eda:	4a4b      	ldr	r2, [pc, #300]	; (8013008 <readCanToStructs+0x1d94>)
 8012edc:	f240 4116 	movw	r1, #1046	; 0x416
 8012ee0:	fb01 f303 	mul.w	r3, r1, r3
 8012ee4:	4413      	add	r3, r2
 8012ee6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012eea:	781b      	ldrb	r3, [r3, #0]
 8012eec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	d015      	beq.n	8012f20 <readCanToStructs+0x1cac>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8012ef4:	484a      	ldr	r0, [pc, #296]	; (8013020 <readCanToStructs+0x1dac>)
 8012ef6:	f013 f8ff 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8012efa:	2204      	movs	r2, #4
 8012efc:	2100      	movs	r1, #0
 8012efe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012f00:	f012 ff76 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012f04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f08:	4a3f      	ldr	r2, [pc, #252]	; (8013008 <readCanToStructs+0x1d94>)
 8012f0a:	f240 4116 	movw	r1, #1046	; 0x416
 8012f0e:	fb01 f303 	mul.w	r3, r1, r3
 8012f12:	4413      	add	r3, r2
 8012f14:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012f18:	2200      	movs	r2, #0
 8012f1a:	701a      	strb	r2, [r3, #0]
					break;
 8012f1c:	f000 bd2b 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012f20:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012f24:	4613      	mov	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	1a9b      	subs	r3, r3, r2
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f2e:	4413      	add	r3, r2
 8012f30:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f32:	2301      	movs	r3, #1
 8012f34:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f38:	e016      	b.n	8012f68 <readCanToStructs+0x1cf4>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012f3a:	4b32      	ldr	r3, [pc, #200]	; (8013004 <readCanToStructs+0x1d90>)
 8012f3c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f40:	885b      	ldrh	r3, [r3, #2]
 8012f42:	461a      	mov	r2, r3
 8012f44:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f48:	492e      	ldr	r1, [pc, #184]	; (8013004 <readCanToStructs+0x1d90>)
 8012f4a:	0112      	lsls	r2, r2, #4
 8012f4c:	440a      	add	r2, r1
 8012f4e:	4413      	add	r3, r2
 8012f50:	3304      	adds	r3, #4
 8012f52:	781a      	ldrb	r2, [r3, #0]
 8012f54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f56:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f5a:	3301      	adds	r3, #1
 8012f5c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012f5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012f62:	3301      	adds	r3, #1
 8012f64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012f68:	4b26      	ldr	r3, [pc, #152]	; (8013004 <readCanToStructs+0x1d90>)
 8012f6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012f6e:	885b      	ldrh	r3, [r3, #2]
 8012f70:	4a24      	ldr	r2, [pc, #144]	; (8013004 <readCanToStructs+0x1d90>)
 8012f72:	011b      	lsls	r3, r3, #4
 8012f74:	4413      	add	r3, r2
 8012f76:	330c      	adds	r3, #12
 8012f78:	781b      	ldrb	r3, [r3, #0]
 8012f7a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d3db      	bcc.n	8012f3a <readCanToStructs+0x1cc6>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012f82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012f86:	4a20      	ldr	r2, [pc, #128]	; (8013008 <readCanToStructs+0x1d94>)
 8012f88:	f240 4116 	movw	r1, #1046	; 0x416
 8012f8c:	fb01 f303 	mul.w	r3, r1, r3
 8012f90:	4413      	add	r3, r2
 8012f92:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012f96:	781b      	ldrb	r3, [r3, #0]
 8012f98:	461a      	mov	r2, r3
 8012f9a:	4613      	mov	r3, r2
 8012f9c:	00db      	lsls	r3, r3, #3
 8012f9e:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8012fa0:	4b18      	ldr	r3, [pc, #96]	; (8013004 <readCanToStructs+0x1d90>)
 8012fa2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012fa6:	885b      	ldrh	r3, [r3, #2]
 8012fa8:	4916      	ldr	r1, [pc, #88]	; (8013004 <readCanToStructs+0x1d90>)
 8012faa:	011b      	lsls	r3, r3, #4
 8012fac:	440b      	add	r3, r1
 8012fae:	330c      	adds	r3, #12
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	3b01      	subs	r3, #1
 8012fb4:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8012fb6:	2b03      	cmp	r3, #3
 8012fb8:	d936      	bls.n	8013028 <readCanToStructs+0x1db4>
 8012fba:	4b11      	ldr	r3, [pc, #68]	; (8013000 <readCanToStructs+0x1d8c>)
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8012fc0:	4b13      	ldr	r3, [pc, #76]	; (8013010 <readCanToStructs+0x1d9c>)
 8012fc2:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8012fc4:	4b13      	ldr	r3, [pc, #76]	; (8013014 <readCanToStructs+0x1da0>)
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	2b01      	cmp	r3, #1
 8012fca:	d102      	bne.n	8012fd2 <readCanToStructs+0x1d5e>
						printf("O_Info2_RCV\n");
 8012fcc:	4815      	ldr	r0, [pc, #84]	; (8013024 <readCanToStructs+0x1db0>)
 8012fce:	f013 f893 	bl	80260f8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8012fd2:	4b12      	ldr	r3, [pc, #72]	; (801301c <readCanToStructs+0x1da8>)
 8012fd4:	2201      	movs	r2, #1
 8012fd6:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8012fd8:	f006 f8dc 	bl	8019194 <HAL_GetTick>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	4a0f      	ldr	r2, [pc, #60]	; (801301c <readCanToStructs+0x1da8>)
 8012fe0:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012fe6:	4a08      	ldr	r2, [pc, #32]	; (8013008 <readCanToStructs+0x1d94>)
 8012fe8:	f240 4116 	movw	r1, #1046	; 0x416
 8012fec:	fb01 f303 	mul.w	r3, r1, r3
 8012ff0:	4413      	add	r3, r2
 8012ff2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012ff6:	2200      	movs	r2, #0
 8012ff8:	701a      	strb	r2, [r3, #0]
				break;
 8012ffa:	f000 bcbc 	b.w	8013976 <readCanToStructs+0x2702>
 8012ffe:	bf00      	nop
 8013000:	20004c64 	.word	0x20004c64
 8013004:	20007240 	.word	0x20007240
 8013008:	20006a14 	.word	0x20006a14
 801300c:	0802a8a0 	.word	0x0802a8a0
 8013010:	20004c60 	.word	0x20004c60
 8013014:	20000bbb 	.word	0x20000bbb
 8013018:	0802aa8c 	.word	0x0802aa8c
 801301c:	20004c68 	.word	0x20004c68
 8013020:	0802a8d4 	.word	0x0802a8d4
 8013024:	0802aa98 	.word	0x0802aa98
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8013028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801302c:	4a9f      	ldr	r2, [pc, #636]	; (80132ac <readCanToStructs+0x2038>)
 801302e:	f240 4116 	movw	r1, #1046	; 0x416
 8013032:	fb01 f303 	mul.w	r3, r1, r3
 8013036:	4413      	add	r3, r2
 8013038:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801303c:	2201      	movs	r2, #1
 801303e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8013040:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013044:	4999      	ldr	r1, [pc, #612]	; (80132ac <readCanToStructs+0x2038>)
 8013046:	f240 4216 	movw	r2, #1046	; 0x416
 801304a:	fb03 f202 	mul.w	r2, r3, r2
 801304e:	440a      	add	r2, r1
 8013050:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8013054:	7812      	ldrb	r2, [r2, #0]
 8013056:	3201      	adds	r2, #1
 8013058:	b2d0      	uxtb	r0, r2
 801305a:	4a94      	ldr	r2, [pc, #592]	; (80132ac <readCanToStructs+0x2038>)
 801305c:	f240 4116 	movw	r1, #1046	; 0x416
 8013060:	fb01 f303 	mul.w	r3, r1, r3
 8013064:	4413      	add	r3, r2
 8013066:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801306a:	4602      	mov	r2, r0
 801306c:	701a      	strb	r2, [r3, #0]
				break;
 801306e:	f000 bc82 	b.w	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8013072:	4b8f      	ldr	r3, [pc, #572]	; (80132b0 <readCanToStructs+0x203c>)
 8013074:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013076:	4b8f      	ldr	r3, [pc, #572]	; (80132b4 <readCanToStructs+0x2040>)
 8013078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801307c:	885b      	ldrh	r3, [r3, #2]
 801307e:	4a8d      	ldr	r2, [pc, #564]	; (80132b4 <readCanToStructs+0x2040>)
 8013080:	011b      	lsls	r3, r3, #4
 8013082:	4413      	add	r3, r2
 8013084:	3304      	adds	r3, #4
 8013086:	781b      	ldrb	r3, [r3, #0]
 8013088:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 801308c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013090:	2b00      	cmp	r3, #0
 8013092:	d005      	beq.n	80130a0 <readCanToStructs+0x1e2c>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013094:	4b88      	ldr	r3, [pc, #544]	; (80132b8 <readCanToStructs+0x2044>)
 8013096:	881b      	ldrh	r3, [r3, #0]
 8013098:	461a      	mov	r2, r3
 801309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801309c:	4413      	add	r3, r2
 801309e:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 80130a0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d117      	bne.n	80130d8 <readCanToStructs+0x1e64>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 80130a8:	f44f 7201 	mov.w	r2, #516	; 0x204
 80130ac:	2100      	movs	r1, #0
 80130ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130b0:	f012 fe9e 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80130b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130b8:	4a7c      	ldr	r2, [pc, #496]	; (80132ac <readCanToStructs+0x2038>)
 80130ba:	f240 4116 	movw	r1, #1046	; 0x416
 80130be:	fb01 f303 	mul.w	r3, r1, r3
 80130c2:	4413      	add	r3, r2
 80130c4:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80130c8:	2200      	movs	r2, #0
 80130ca:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 80130cc:	4b7a      	ldr	r3, [pc, #488]	; (80132b8 <readCanToStructs+0x2044>)
 80130ce:	2200      	movs	r2, #0
 80130d0:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 80130d2:	4b7a      	ldr	r3, [pc, #488]	; (80132bc <readCanToStructs+0x2048>)
 80130d4:	2200      	movs	r2, #0
 80130d6:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80130d8:	2301      	movs	r3, #1
 80130da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80130de:	e01c      	b.n	801311a <readCanToStructs+0x1ea6>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80130e0:	4b74      	ldr	r3, [pc, #464]	; (80132b4 <readCanToStructs+0x2040>)
 80130e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80130e6:	885b      	ldrh	r3, [r3, #2]
 80130e8:	461a      	mov	r2, r3
 80130ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80130ee:	4971      	ldr	r1, [pc, #452]	; (80132b4 <readCanToStructs+0x2040>)
 80130f0:	0112      	lsls	r2, r2, #4
 80130f2:	440a      	add	r2, r1
 80130f4:	4413      	add	r3, r2
 80130f6:	3304      	adds	r3, #4
 80130f8:	781a      	ldrb	r2, [r3, #0]
 80130fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130fc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80130fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013100:	3301      	adds	r3, #1
 8013102:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8013104:	4b6c      	ldr	r3, [pc, #432]	; (80132b8 <readCanToStructs+0x2044>)
 8013106:	881b      	ldrh	r3, [r3, #0]
 8013108:	3301      	adds	r3, #1
 801310a:	b29a      	uxth	r2, r3
 801310c:	4b6a      	ldr	r3, [pc, #424]	; (80132b8 <readCanToStructs+0x2044>)
 801310e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013114:	3301      	adds	r3, #1
 8013116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801311a:	4b66      	ldr	r3, [pc, #408]	; (80132b4 <readCanToStructs+0x2040>)
 801311c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013120:	885b      	ldrh	r3, [r3, #2]
 8013122:	4a64      	ldr	r2, [pc, #400]	; (80132b4 <readCanToStructs+0x2040>)
 8013124:	011b      	lsls	r3, r3, #4
 8013126:	4413      	add	r3, r2
 8013128:	330c      	adds	r3, #12
 801312a:	781b      	ldrb	r3, [r3, #0]
 801312c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013130:	429a      	cmp	r2, r3
 8013132:	d3d5      	bcc.n	80130e0 <readCanToStructs+0x1e6c>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8013134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013138:	4a5c      	ldr	r2, [pc, #368]	; (80132ac <readCanToStructs+0x2038>)
 801313a:	f240 4116 	movw	r1, #1046	; 0x416
 801313e:	fb01 f303 	mul.w	r3, r1, r3
 8013142:	4413      	add	r3, r2
 8013144:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013148:	781b      	ldrb	r3, [r3, #0]
 801314a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801314e:	429a      	cmp	r2, r3
 8013150:	d026      	beq.n	80131a0 <readCanToStructs+0x1f2c>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8013152:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801315a:	4a54      	ldr	r2, [pc, #336]	; (80132ac <readCanToStructs+0x2038>)
 801315c:	f240 4016 	movw	r0, #1046	; 0x416
 8013160:	fb00 f303 	mul.w	r3, r0, r3
 8013164:	4413      	add	r3, r2
 8013166:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801316a:	781b      	ldrb	r3, [r3, #0]
 801316c:	461a      	mov	r2, r3
 801316e:	4854      	ldr	r0, [pc, #336]	; (80132c0 <readCanToStructs+0x204c>)
 8013170:	f012 ff26 	bl	8025fc0 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013174:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013178:	2100      	movs	r1, #0
 801317a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801317c:	f012 fe38 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013180:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013184:	4a49      	ldr	r2, [pc, #292]	; (80132ac <readCanToStructs+0x2038>)
 8013186:	f240 4116 	movw	r1, #1046	; 0x416
 801318a:	fb01 f303 	mul.w	r3, r1, r3
 801318e:	4413      	add	r3, r2
 8013190:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013194:	2200      	movs	r2, #0
 8013196:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013198:	4b47      	ldr	r3, [pc, #284]	; (80132b8 <readCanToStructs+0x2044>)
 801319a:	2200      	movs	r2, #0
 801319c:	801a      	strh	r2, [r3, #0]
					break;
 801319e:	e3ea      	b.n	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80131a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131a4:	4941      	ldr	r1, [pc, #260]	; (80132ac <readCanToStructs+0x2038>)
 80131a6:	f240 4216 	movw	r2, #1046	; 0x416
 80131aa:	fb03 f202 	mul.w	r2, r3, r2
 80131ae:	440a      	add	r2, r1
 80131b0:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80131b4:	7812      	ldrb	r2, [r2, #0]
 80131b6:	3201      	adds	r2, #1
 80131b8:	b2d0      	uxtb	r0, r2
 80131ba:	4a3c      	ldr	r2, [pc, #240]	; (80132ac <readCanToStructs+0x2038>)
 80131bc:	f240 4116 	movw	r1, #1046	; 0x416
 80131c0:	fb01 f303 	mul.w	r3, r1, r3
 80131c4:	4413      	add	r3, r2
 80131c6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80131ca:	4602      	mov	r2, r0
 80131cc:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 80131ce:	4b38      	ldr	r3, [pc, #224]	; (80132b0 <readCanToStructs+0x203c>)
 80131d0:	881b      	ldrh	r3, [r3, #0]
 80131d2:	3304      	adds	r3, #4
 80131d4:	b29a      	uxth	r2, r3
 80131d6:	4b39      	ldr	r3, [pc, #228]	; (80132bc <readCanToStructs+0x2048>)
 80131d8:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80131da:	4b37      	ldr	r3, [pc, #220]	; (80132b8 <readCanToStructs+0x2044>)
 80131dc:	881a      	ldrh	r2, [r3, #0]
 80131de:	4b37      	ldr	r3, [pc, #220]	; (80132bc <readCanToStructs+0x2048>)
 80131e0:	881b      	ldrh	r3, [r3, #0]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	f0c0 83c4 	bcc.w	8013970 <readCanToStructs+0x26fc>
					if(Debug_flag == 1)
 80131e8:	4b36      	ldr	r3, [pc, #216]	; (80132c4 <readCanToStructs+0x2050>)
 80131ea:	781b      	ldrb	r3, [r3, #0]
 80131ec:	2b01      	cmp	r3, #1
 80131ee:	d102      	bne.n	80131f6 <readCanToStructs+0x1f82>
						printf("EI1 Relay Info Received\n");
 80131f0:	4835      	ldr	r0, [pc, #212]	; (80132c8 <readCanToStructs+0x2054>)
 80131f2:	f012 ff81 	bl	80260f8 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80131f6:	4a35      	ldr	r2, [pc, #212]	; (80132cc <readCanToStructs+0x2058>)
 80131f8:	4b2d      	ldr	r3, [pc, #180]	; (80132b0 <readCanToStructs+0x203c>)
 80131fa:	4610      	mov	r0, r2
 80131fc:	4619      	mov	r1, r3
 80131fe:	f44f 7301 	mov.w	r3, #516	; 0x204
 8013202:	461a      	mov	r2, r3
 8013204:	f012 fdcc 	bl	8025da0 <memcpy>
					DataTraverser = 0;
 8013208:	4b2b      	ldr	r3, [pc, #172]	; (80132b8 <readCanToStructs+0x2044>)
 801320a:	2200      	movs	r2, #0
 801320c:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 801320e:	4b2b      	ldr	r3, [pc, #172]	; (80132bc <readCanToStructs+0x2048>)
 8013210:	2200      	movs	r2, #0
 8013212:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013214:	4b2e      	ldr	r3, [pc, #184]	; (80132d0 <readCanToStructs+0x205c>)
 8013216:	2201      	movs	r2, #1
 8013218:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801321a:	f005 ffbb 	bl	8019194 <HAL_GetTick>
 801321e:	4603      	mov	r3, r0
 8013220:	4a2b      	ldr	r2, [pc, #172]	; (80132d0 <readCanToStructs+0x205c>)
 8013222:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8013224:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013228:	4a20      	ldr	r2, [pc, #128]	; (80132ac <readCanToStructs+0x2038>)
 801322a:	f240 4116 	movw	r1, #1046	; 0x416
 801322e:	fb01 f303 	mul.w	r3, r1, r3
 8013232:	4413      	add	r3, r2
 8013234:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8013238:	2200      	movs	r2, #0
 801323a:	701a      	strb	r2, [r3, #0]
				break;
 801323c:	e398      	b.n	8013970 <readCanToStructs+0x26fc>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 801323e:	4b1c      	ldr	r3, [pc, #112]	; (80132b0 <readCanToStructs+0x203c>)
 8013240:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013242:	4b1c      	ldr	r3, [pc, #112]	; (80132b4 <readCanToStructs+0x2040>)
 8013244:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013248:	885b      	ldrh	r3, [r3, #2]
 801324a:	4a1a      	ldr	r2, [pc, #104]	; (80132b4 <readCanToStructs+0x2040>)
 801324c:	011b      	lsls	r3, r3, #4
 801324e:	4413      	add	r3, r2
 8013250:	3304      	adds	r3, #4
 8013252:	781b      	ldrb	r3, [r3, #0]
 8013254:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8013258:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801325c:	2b00      	cmp	r3, #0
 801325e:	d005      	beq.n	801326c <readCanToStructs+0x1ff8>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8013260:	4b15      	ldr	r3, [pc, #84]	; (80132b8 <readCanToStructs+0x2044>)
 8013262:	881b      	ldrh	r3, [r3, #0]
 8013264:	461a      	mov	r2, r3
 8013266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013268:	4413      	add	r3, r2
 801326a:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 801326c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013270:	2b00      	cmp	r3, #0
 8013272:	d117      	bne.n	80132a4 <readCanToStructs+0x2030>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013274:	f44f 7201 	mov.w	r2, #516	; 0x204
 8013278:	2100      	movs	r1, #0
 801327a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801327c:	f012 fdb8 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013280:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013284:	4a09      	ldr	r2, [pc, #36]	; (80132ac <readCanToStructs+0x2038>)
 8013286:	f240 4116 	movw	r1, #1046	; 0x416
 801328a:	fb01 f303 	mul.w	r3, r1, r3
 801328e:	4413      	add	r3, r2
 8013290:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013294:	2200      	movs	r2, #0
 8013296:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8013298:	4b07      	ldr	r3, [pc, #28]	; (80132b8 <readCanToStructs+0x2044>)
 801329a:	2200      	movs	r2, #0
 801329c:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 801329e:	4b07      	ldr	r3, [pc, #28]	; (80132bc <readCanToStructs+0x2048>)
 80132a0:	2200      	movs	r2, #0
 80132a2:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80132a4:	2301      	movs	r3, #1
 80132a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80132aa:	e030      	b.n	801330e <readCanToStructs+0x209a>
 80132ac:	20006a14 	.word	0x20006a14
 80132b0:	20005290 	.word	0x20005290
 80132b4:	20007240 	.word	0x20007240
 80132b8:	2000b358 	.word	0x2000b358
 80132bc:	2000b35a 	.word	0x2000b35a
 80132c0:	0802aaa4 	.word	0x0802aaa4
 80132c4:	20000bbb 	.word	0x20000bbb
 80132c8:	0802aad0 	.word	0x0802aad0
 80132cc:	2000508c 	.word	0x2000508c
 80132d0:	20004c68 	.word	0x20004c68
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80132d4:	4bbe      	ldr	r3, [pc, #760]	; (80135d0 <readCanToStructs+0x235c>)
 80132d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80132da:	885b      	ldrh	r3, [r3, #2]
 80132dc:	461a      	mov	r2, r3
 80132de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80132e2:	49bb      	ldr	r1, [pc, #748]	; (80135d0 <readCanToStructs+0x235c>)
 80132e4:	0112      	lsls	r2, r2, #4
 80132e6:	440a      	add	r2, r1
 80132e8:	4413      	add	r3, r2
 80132ea:	3304      	adds	r3, #4
 80132ec:	781a      	ldrb	r2, [r3, #0]
 80132ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80132f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132f4:	3301      	adds	r3, #1
 80132f6:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80132f8:	4bb6      	ldr	r3, [pc, #728]	; (80135d4 <readCanToStructs+0x2360>)
 80132fa:	881b      	ldrh	r3, [r3, #0]
 80132fc:	3301      	adds	r3, #1
 80132fe:	b29a      	uxth	r2, r3
 8013300:	4bb4      	ldr	r3, [pc, #720]	; (80135d4 <readCanToStructs+0x2360>)
 8013302:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013304:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013308:	3301      	adds	r3, #1
 801330a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801330e:	4bb0      	ldr	r3, [pc, #704]	; (80135d0 <readCanToStructs+0x235c>)
 8013310:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013314:	885b      	ldrh	r3, [r3, #2]
 8013316:	4aae      	ldr	r2, [pc, #696]	; (80135d0 <readCanToStructs+0x235c>)
 8013318:	011b      	lsls	r3, r3, #4
 801331a:	4413      	add	r3, r2
 801331c:	330c      	adds	r3, #12
 801331e:	781b      	ldrb	r3, [r3, #0]
 8013320:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013324:	429a      	cmp	r2, r3
 8013326:	d3d5      	bcc.n	80132d4 <readCanToStructs+0x2060>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8013328:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801332c:	4aaa      	ldr	r2, [pc, #680]	; (80135d8 <readCanToStructs+0x2364>)
 801332e:	f240 4116 	movw	r1, #1046	; 0x416
 8013332:	fb01 f303 	mul.w	r3, r1, r3
 8013336:	4413      	add	r3, r2
 8013338:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801333c:	781b      	ldrb	r3, [r3, #0]
 801333e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013342:	429a      	cmp	r2, r3
 8013344:	d026      	beq.n	8013394 <readCanToStructs+0x2120>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8013346:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801334a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801334e:	4aa2      	ldr	r2, [pc, #648]	; (80135d8 <readCanToStructs+0x2364>)
 8013350:	f240 4016 	movw	r0, #1046	; 0x416
 8013354:	fb00 f303 	mul.w	r3, r0, r3
 8013358:	4413      	add	r3, r2
 801335a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801335e:	781b      	ldrb	r3, [r3, #0]
 8013360:	461a      	mov	r2, r3
 8013362:	489e      	ldr	r0, [pc, #632]	; (80135dc <readCanToStructs+0x2368>)
 8013364:	f012 fe2c 	bl	8025fc0 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8013368:	f44f 7201 	mov.w	r2, #516	; 0x204
 801336c:	2100      	movs	r1, #0
 801336e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013370:	f012 fd3e 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013378:	4a97      	ldr	r2, [pc, #604]	; (80135d8 <readCanToStructs+0x2364>)
 801337a:	f240 4116 	movw	r1, #1046	; 0x416
 801337e:	fb01 f303 	mul.w	r3, r1, r3
 8013382:	4413      	add	r3, r2
 8013384:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8013388:	2200      	movs	r2, #0
 801338a:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 801338c:	4b91      	ldr	r3, [pc, #580]	; (80135d4 <readCanToStructs+0x2360>)
 801338e:	2200      	movs	r2, #0
 8013390:	801a      	strh	r2, [r3, #0]
					break;
 8013392:	e2f0      	b.n	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8013394:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013398:	498f      	ldr	r1, [pc, #572]	; (80135d8 <readCanToStructs+0x2364>)
 801339a:	f240 4216 	movw	r2, #1046	; 0x416
 801339e:	fb03 f202 	mul.w	r2, r3, r2
 80133a2:	440a      	add	r2, r1
 80133a4:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80133a8:	7812      	ldrb	r2, [r2, #0]
 80133aa:	3201      	adds	r2, #1
 80133ac:	b2d0      	uxtb	r0, r2
 80133ae:	4a8a      	ldr	r2, [pc, #552]	; (80135d8 <readCanToStructs+0x2364>)
 80133b0:	f240 4116 	movw	r1, #1046	; 0x416
 80133b4:	fb01 f303 	mul.w	r3, r1, r3
 80133b8:	4413      	add	r3, r2
 80133ba:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80133be:	4602      	mov	r2, r0
 80133c0:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 80133c2:	4b87      	ldr	r3, [pc, #540]	; (80135e0 <readCanToStructs+0x236c>)
 80133c4:	881b      	ldrh	r3, [r3, #0]
 80133c6:	3304      	adds	r3, #4
 80133c8:	b29a      	uxth	r2, r3
 80133ca:	4b86      	ldr	r3, [pc, #536]	; (80135e4 <readCanToStructs+0x2370>)
 80133cc:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80133ce:	4b81      	ldr	r3, [pc, #516]	; (80135d4 <readCanToStructs+0x2360>)
 80133d0:	881a      	ldrh	r2, [r3, #0]
 80133d2:	4b84      	ldr	r3, [pc, #528]	; (80135e4 <readCanToStructs+0x2370>)
 80133d4:	881b      	ldrh	r3, [r3, #0]
 80133d6:	429a      	cmp	r2, r3
 80133d8:	f0c0 82cc 	bcc.w	8013974 <readCanToStructs+0x2700>
					if(Debug_flag == 1)
 80133dc:	4b82      	ldr	r3, [pc, #520]	; (80135e8 <readCanToStructs+0x2374>)
 80133de:	781b      	ldrb	r3, [r3, #0]
 80133e0:	2b01      	cmp	r3, #1
 80133e2:	d102      	bne.n	80133ea <readCanToStructs+0x2176>
						printf("EI2 Relay Info Received\n");
 80133e4:	4881      	ldr	r0, [pc, #516]	; (80135ec <readCanToStructs+0x2378>)
 80133e6:	f012 fe87 	bl	80260f8 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80133ea:	4a81      	ldr	r2, [pc, #516]	; (80135f0 <readCanToStructs+0x237c>)
 80133ec:	4b7c      	ldr	r3, [pc, #496]	; (80135e0 <readCanToStructs+0x236c>)
 80133ee:	4610      	mov	r0, r2
 80133f0:	4619      	mov	r1, r3
 80133f2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80133f6:	461a      	mov	r2, r3
 80133f8:	f012 fcd2 	bl	8025da0 <memcpy>
					DataTraverser = 0;
 80133fc:	4b75      	ldr	r3, [pc, #468]	; (80135d4 <readCanToStructs+0x2360>)
 80133fe:	2200      	movs	r2, #0
 8013400:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8013402:	4b78      	ldr	r3, [pc, #480]	; (80135e4 <readCanToStructs+0x2370>)
 8013404:	2200      	movs	r2, #0
 8013406:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8013408:	4b7a      	ldr	r3, [pc, #488]	; (80135f4 <readCanToStructs+0x2380>)
 801340a:	2201      	movs	r2, #1
 801340c:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801340e:	f005 fec1 	bl	8019194 <HAL_GetTick>
 8013412:	4603      	mov	r3, r0
 8013414:	4a77      	ldr	r2, [pc, #476]	; (80135f4 <readCanToStructs+0x2380>)
 8013416:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8013418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801341c:	4a6e      	ldr	r2, [pc, #440]	; (80135d8 <readCanToStructs+0x2364>)
 801341e:	f240 4116 	movw	r1, #1046	; 0x416
 8013422:	fb01 f303 	mul.w	r3, r1, r3
 8013426:	4413      	add	r3, r2
 8013428:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801342c:	2200      	movs	r2, #0
 801342e:	701a      	strb	r2, [r3, #0]
				break;
 8013430:	e2a0      	b.n	8013974 <readCanToStructs+0x2700>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8013432:	4b71      	ldr	r3, [pc, #452]	; (80135f8 <readCanToStructs+0x2384>)
 8013434:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013436:	4b66      	ldr	r3, [pc, #408]	; (80135d0 <readCanToStructs+0x235c>)
 8013438:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801343c:	885b      	ldrh	r3, [r3, #2]
 801343e:	4a64      	ldr	r2, [pc, #400]	; (80135d0 <readCanToStructs+0x235c>)
 8013440:	011b      	lsls	r3, r3, #4
 8013442:	4413      	add	r3, r2
 8013444:	3304      	adds	r3, #4
 8013446:	781b      	ldrb	r3, [r3, #0]
 8013448:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801344c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013450:	2b00      	cmp	r3, #0
 8013452:	d110      	bne.n	8013476 <readCanToStructs+0x2202>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8013454:	2208      	movs	r2, #8
 8013456:	2100      	movs	r1, #0
 8013458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801345a:	f012 fcc9 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801345e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013462:	4a5d      	ldr	r2, [pc, #372]	; (80135d8 <readCanToStructs+0x2364>)
 8013464:	f240 4116 	movw	r1, #1046	; 0x416
 8013468:	fb01 f303 	mul.w	r3, r1, r3
 801346c:	4413      	add	r3, r2
 801346e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013472:	2200      	movs	r2, #0
 8013474:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8013476:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801347a:	4a57      	ldr	r2, [pc, #348]	; (80135d8 <readCanToStructs+0x2364>)
 801347c:	f240 4116 	movw	r1, #1046	; 0x416
 8013480:	fb01 f303 	mul.w	r3, r1, r3
 8013484:	4413      	add	r3, r2
 8013486:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801348a:	781b      	ldrb	r3, [r3, #0]
 801348c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013490:	429a      	cmp	r2, r3
 8013492:	d014      	beq.n	80134be <readCanToStructs+0x224a>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8013494:	4859      	ldr	r0, [pc, #356]	; (80135fc <readCanToStructs+0x2388>)
 8013496:	f012 fe2f 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 801349a:	2208      	movs	r2, #8
 801349c:	2100      	movs	r1, #0
 801349e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80134a0:	f012 fca6 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80134a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134a8:	4a4b      	ldr	r2, [pc, #300]	; (80135d8 <readCanToStructs+0x2364>)
 80134aa:	f240 4116 	movw	r1, #1046	; 0x416
 80134ae:	fb01 f303 	mul.w	r3, r1, r3
 80134b2:	4413      	add	r3, r2
 80134b4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80134b8:	2200      	movs	r2, #0
 80134ba:	701a      	strb	r2, [r3, #0]
					break;
 80134bc:	e25b      	b.n	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 80134be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80134c2:	4613      	mov	r3, r2
 80134c4:	00db      	lsls	r3, r3, #3
 80134c6:	1a9b      	subs	r3, r3, r2
 80134c8:	461a      	mov	r2, r3
 80134ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134cc:	4413      	add	r3, r2
 80134ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80134d0:	2301      	movs	r3, #1
 80134d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80134d6:	e016      	b.n	8013506 <readCanToStructs+0x2292>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80134d8:	4b3d      	ldr	r3, [pc, #244]	; (80135d0 <readCanToStructs+0x235c>)
 80134da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80134de:	885b      	ldrh	r3, [r3, #2]
 80134e0:	461a      	mov	r2, r3
 80134e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80134e6:	493a      	ldr	r1, [pc, #232]	; (80135d0 <readCanToStructs+0x235c>)
 80134e8:	0112      	lsls	r2, r2, #4
 80134ea:	440a      	add	r2, r1
 80134ec:	4413      	add	r3, r2
 80134ee:	3304      	adds	r3, #4
 80134f0:	781a      	ldrb	r2, [r3, #0]
 80134f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	3301      	adds	r3, #1
 80134fa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80134fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013500:	3301      	adds	r3, #1
 8013502:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013506:	4b32      	ldr	r3, [pc, #200]	; (80135d0 <readCanToStructs+0x235c>)
 8013508:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801350c:	885b      	ldrh	r3, [r3, #2]
 801350e:	4a30      	ldr	r2, [pc, #192]	; (80135d0 <readCanToStructs+0x235c>)
 8013510:	011b      	lsls	r3, r3, #4
 8013512:	4413      	add	r3, r2
 8013514:	330c      	adds	r3, #12
 8013516:	781b      	ldrb	r3, [r3, #0]
 8013518:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801351c:	429a      	cmp	r2, r3
 801351e:	d3db      	bcc.n	80134d8 <readCanToStructs+0x2264>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8013520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013524:	4a2c      	ldr	r2, [pc, #176]	; (80135d8 <readCanToStructs+0x2364>)
 8013526:	f240 4116 	movw	r1, #1046	; 0x416
 801352a:	fb01 f303 	mul.w	r3, r1, r3
 801352e:	4413      	add	r3, r2
 8013530:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013534:	781b      	ldrb	r3, [r3, #0]
 8013536:	461a      	mov	r2, r3
 8013538:	4613      	mov	r3, r2
 801353a:	00db      	lsls	r3, r3, #3
 801353c:	1a9a      	subs	r2, r3, r2
 801353e:	4b24      	ldr	r3, [pc, #144]	; (80135d0 <readCanToStructs+0x235c>)
 8013540:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013544:	885b      	ldrh	r3, [r3, #2]
 8013546:	4922      	ldr	r1, [pc, #136]	; (80135d0 <readCanToStructs+0x235c>)
 8013548:	011b      	lsls	r3, r3, #4
 801354a:	440b      	add	r3, r1
 801354c:	330c      	adds	r3, #12
 801354e:	781b      	ldrb	r3, [r3, #0]
 8013550:	3b01      	subs	r3, #1
 8013552:	4413      	add	r3, r2
 8013554:	2b07      	cmp	r3, #7
 8013556:	d917      	bls.n	8013588 <readCanToStructs+0x2314>
					printf("Received Fault Injection Data\n");
 8013558:	4829      	ldr	r0, [pc, #164]	; (8013600 <readCanToStructs+0x238c>)
 801355a:	f012 fdcd 	bl	80260f8 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801355e:	4b25      	ldr	r3, [pc, #148]	; (80135f4 <readCanToStructs+0x2380>)
 8013560:	2201      	movs	r2, #1
 8013562:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8013564:	f005 fe16 	bl	8019194 <HAL_GetTick>
 8013568:	4603      	mov	r3, r0
 801356a:	4a22      	ldr	r2, [pc, #136]	; (80135f4 <readCanToStructs+0x2380>)
 801356c:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801356e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013572:	4a19      	ldr	r2, [pc, #100]	; (80135d8 <readCanToStructs+0x2364>)
 8013574:	f240 4116 	movw	r1, #1046	; 0x416
 8013578:	fb01 f303 	mul.w	r3, r1, r3
 801357c:	4413      	add	r3, r2
 801357e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8013582:	2200      	movs	r2, #0
 8013584:	701a      	strb	r2, [r3, #0]
				break;
 8013586:	e1f6      	b.n	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8013588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801358c:	4a12      	ldr	r2, [pc, #72]	; (80135d8 <readCanToStructs+0x2364>)
 801358e:	f240 4116 	movw	r1, #1046	; 0x416
 8013592:	fb01 f303 	mul.w	r3, r1, r3
 8013596:	4413      	add	r3, r2
 8013598:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 801359c:	2201      	movs	r2, #1
 801359e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80135a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80135a4:	490c      	ldr	r1, [pc, #48]	; (80135d8 <readCanToStructs+0x2364>)
 80135a6:	f240 4216 	movw	r2, #1046	; 0x416
 80135aa:	fb03 f202 	mul.w	r2, r3, r2
 80135ae:	440a      	add	r2, r1
 80135b0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80135b4:	7812      	ldrb	r2, [r2, #0]
 80135b6:	3201      	adds	r2, #1
 80135b8:	b2d0      	uxtb	r0, r2
 80135ba:	4a07      	ldr	r2, [pc, #28]	; (80135d8 <readCanToStructs+0x2364>)
 80135bc:	f240 4116 	movw	r1, #1046	; 0x416
 80135c0:	fb01 f303 	mul.w	r3, r1, r3
 80135c4:	4413      	add	r3, r2
 80135c6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80135ca:	4602      	mov	r2, r0
 80135cc:	701a      	strb	r2, [r3, #0]
				break;
 80135ce:	e1d2      	b.n	8013976 <readCanToStructs+0x2702>
 80135d0:	20007240 	.word	0x20007240
 80135d4:	2000b358 	.word	0x2000b358
 80135d8:	20006a14 	.word	0x20006a14
 80135dc:	0802aae8 	.word	0x0802aae8
 80135e0:	20005290 	.word	0x20005290
 80135e4:	2000b35a 	.word	0x2000b35a
 80135e8:	20000bbb 	.word	0x20000bbb
 80135ec:	0802ab14 	.word	0x0802ab14
 80135f0:	2000508c 	.word	0x2000508c
 80135f4:	20004c68 	.word	0x20004c68
 80135f8:	20004c54 	.word	0x20004c54
 80135fc:	0802a970 	.word	0x0802a970
 8013600:	0802a990 	.word	0x0802a990
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8013604:	4bbe      	ldr	r3, [pc, #760]	; (8013900 <readCanToStructs+0x268c>)
 8013606:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013608:	4bbe      	ldr	r3, [pc, #760]	; (8013904 <readCanToStructs+0x2690>)
 801360a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801360e:	885b      	ldrh	r3, [r3, #2]
 8013610:	4abc      	ldr	r2, [pc, #752]	; (8013904 <readCanToStructs+0x2690>)
 8013612:	011b      	lsls	r3, r3, #4
 8013614:	4413      	add	r3, r2
 8013616:	3304      	adds	r3, #4
 8013618:	781b      	ldrb	r3, [r3, #0]
 801361a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801361e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013622:	2b00      	cmp	r3, #0
 8013624:	d110      	bne.n	8013648 <readCanToStructs+0x23d4>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8013626:	2202      	movs	r2, #2
 8013628:	2100      	movs	r1, #0
 801362a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801362c:	f012 fbe0 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013634:	4ab4      	ldr	r2, [pc, #720]	; (8013908 <readCanToStructs+0x2694>)
 8013636:	f240 4116 	movw	r1, #1046	; 0x416
 801363a:	fb01 f303 	mul.w	r3, r1, r3
 801363e:	4413      	add	r3, r2
 8013640:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013644:	2200      	movs	r2, #0
 8013646:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 8013648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801364c:	4aae      	ldr	r2, [pc, #696]	; (8013908 <readCanToStructs+0x2694>)
 801364e:	f240 4116 	movw	r1, #1046	; 0x416
 8013652:	fb01 f303 	mul.w	r3, r1, r3
 8013656:	4413      	add	r3, r2
 8013658:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801365c:	781b      	ldrb	r3, [r3, #0]
 801365e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013662:	429a      	cmp	r2, r3
 8013664:	d014      	beq.n	8013690 <readCanToStructs+0x241c>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013666:	48a9      	ldr	r0, [pc, #676]	; (801390c <readCanToStructs+0x2698>)
 8013668:	f012 fd46 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801366c:	2202      	movs	r2, #2
 801366e:	2100      	movs	r1, #0
 8013670:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013672:	f012 fbbd 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013676:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801367a:	4aa3      	ldr	r2, [pc, #652]	; (8013908 <readCanToStructs+0x2694>)
 801367c:	f240 4116 	movw	r1, #1046	; 0x416
 8013680:	fb01 f303 	mul.w	r3, r1, r3
 8013684:	4413      	add	r3, r2
 8013686:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801368a:	2200      	movs	r2, #0
 801368c:	701a      	strb	r2, [r3, #0]
					break;
 801368e:	e172      	b.n	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013690:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013694:	4613      	mov	r3, r2
 8013696:	00db      	lsls	r3, r3, #3
 8013698:	1a9b      	subs	r3, r3, r2
 801369a:	461a      	mov	r2, r3
 801369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369e:	4413      	add	r3, r2
 80136a0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80136a2:	2301      	movs	r3, #1
 80136a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80136a8:	e016      	b.n	80136d8 <readCanToStructs+0x2464>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80136aa:	4b96      	ldr	r3, [pc, #600]	; (8013904 <readCanToStructs+0x2690>)
 80136ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80136b0:	885b      	ldrh	r3, [r3, #2]
 80136b2:	461a      	mov	r2, r3
 80136b4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136b8:	4992      	ldr	r1, [pc, #584]	; (8013904 <readCanToStructs+0x2690>)
 80136ba:	0112      	lsls	r2, r2, #4
 80136bc:	440a      	add	r2, r1
 80136be:	4413      	add	r3, r2
 80136c0:	3304      	adds	r3, #4
 80136c2:	781a      	ldrb	r2, [r3, #0]
 80136c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c6:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	3301      	adds	r3, #1
 80136cc:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80136ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80136d2:	3301      	adds	r3, #1
 80136d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80136d8:	4b8a      	ldr	r3, [pc, #552]	; (8013904 <readCanToStructs+0x2690>)
 80136da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80136de:	885b      	ldrh	r3, [r3, #2]
 80136e0:	4a88      	ldr	r2, [pc, #544]	; (8013904 <readCanToStructs+0x2690>)
 80136e2:	011b      	lsls	r3, r3, #4
 80136e4:	4413      	add	r3, r2
 80136e6:	330c      	adds	r3, #12
 80136e8:	781b      	ldrb	r3, [r3, #0]
 80136ea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80136ee:	429a      	cmp	r2, r3
 80136f0:	d3db      	bcc.n	80136aa <readCanToStructs+0x2436>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80136f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80136f6:	4a84      	ldr	r2, [pc, #528]	; (8013908 <readCanToStructs+0x2694>)
 80136f8:	f240 4116 	movw	r1, #1046	; 0x416
 80136fc:	fb01 f303 	mul.w	r3, r1, r3
 8013700:	4413      	add	r3, r2
 8013702:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013706:	781b      	ldrb	r3, [r3, #0]
 8013708:	461a      	mov	r2, r3
 801370a:	4613      	mov	r3, r2
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	1a9a      	subs	r2, r3, r2
 8013710:	4b7c      	ldr	r3, [pc, #496]	; (8013904 <readCanToStructs+0x2690>)
 8013712:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013716:	885b      	ldrh	r3, [r3, #2]
 8013718:	497a      	ldr	r1, [pc, #488]	; (8013904 <readCanToStructs+0x2690>)
 801371a:	011b      	lsls	r3, r3, #4
 801371c:	440b      	add	r3, r1
 801371e:	330c      	adds	r3, #12
 8013720:	781b      	ldrb	r3, [r3, #0]
 8013722:	3b01      	subs	r3, #1
 8013724:	4413      	add	r3, r2
 8013726:	2b01      	cmp	r3, #1
 8013728:	d919      	bls.n	801375e <readCanToStructs+0x24ea>
					if(Debug_flag == 1)
 801372a:	4b79      	ldr	r3, [pc, #484]	; (8013910 <readCanToStructs+0x269c>)
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d105      	bne.n	801373e <readCanToStructs+0x24ca>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8013732:	4b73      	ldr	r3, [pc, #460]	; (8013900 <readCanToStructs+0x268c>)
 8013734:	881b      	ldrh	r3, [r3, #0]
 8013736:	4619      	mov	r1, r3
 8013738:	4876      	ldr	r0, [pc, #472]	; (8013914 <readCanToStructs+0x26a0>)
 801373a:	f012 fc41 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 801373e:	4b76      	ldr	r3, [pc, #472]	; (8013918 <readCanToStructs+0x26a4>)
 8013740:	2201      	movs	r2, #1
 8013742:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8013744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013748:	4a6f      	ldr	r2, [pc, #444]	; (8013908 <readCanToStructs+0x2694>)
 801374a:	f240 4116 	movw	r1, #1046	; 0x416
 801374e:	fb01 f303 	mul.w	r3, r1, r3
 8013752:	4413      	add	r3, r2
 8013754:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8013758:	2200      	movs	r2, #0
 801375a:	701a      	strb	r2, [r3, #0]
				break;
 801375c:	e10b      	b.n	8013976 <readCanToStructs+0x2702>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 801375e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013762:	4a69      	ldr	r2, [pc, #420]	; (8013908 <readCanToStructs+0x2694>)
 8013764:	f240 4116 	movw	r1, #1046	; 0x416
 8013768:	fb01 f303 	mul.w	r3, r1, r3
 801376c:	4413      	add	r3, r2
 801376e:	f203 4312 	addw	r3, r3, #1042	; 0x412
 8013772:	2201      	movs	r2, #1
 8013774:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8013776:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801377a:	4963      	ldr	r1, [pc, #396]	; (8013908 <readCanToStructs+0x2694>)
 801377c:	f240 4216 	movw	r2, #1046	; 0x416
 8013780:	fb03 f202 	mul.w	r2, r3, r2
 8013784:	440a      	add	r2, r1
 8013786:	f202 4213 	addw	r2, r2, #1043	; 0x413
 801378a:	7812      	ldrb	r2, [r2, #0]
 801378c:	3201      	adds	r2, #1
 801378e:	b2d0      	uxtb	r0, r2
 8013790:	4a5d      	ldr	r2, [pc, #372]	; (8013908 <readCanToStructs+0x2694>)
 8013792:	f240 4116 	movw	r1, #1046	; 0x416
 8013796:	fb01 f303 	mul.w	r3, r1, r3
 801379a:	4413      	add	r3, r2
 801379c:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80137a0:	4602      	mov	r2, r0
 80137a2:	701a      	strb	r2, [r3, #0]
				break;
 80137a4:	e0e7      	b.n	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80137a6:	4b56      	ldr	r3, [pc, #344]	; (8013900 <readCanToStructs+0x268c>)
 80137a8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80137aa:	4b56      	ldr	r3, [pc, #344]	; (8013904 <readCanToStructs+0x2690>)
 80137ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80137b0:	885b      	ldrh	r3, [r3, #2]
 80137b2:	4a54      	ldr	r2, [pc, #336]	; (8013904 <readCanToStructs+0x2690>)
 80137b4:	011b      	lsls	r3, r3, #4
 80137b6:	4413      	add	r3, r2
 80137b8:	3304      	adds	r3, #4
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80137c0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d110      	bne.n	80137ea <readCanToStructs+0x2576>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80137c8:	2202      	movs	r2, #2
 80137ca:	2100      	movs	r1, #0
 80137cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137ce:	f012 fb0f 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80137d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137d6:	4a4c      	ldr	r2, [pc, #304]	; (8013908 <readCanToStructs+0x2694>)
 80137d8:	f240 4116 	movw	r1, #1046	; 0x416
 80137dc:	fb01 f303 	mul.w	r3, r1, r3
 80137e0:	4413      	add	r3, r2
 80137e2:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80137e6:	2200      	movs	r2, #0
 80137e8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 80137ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80137ee:	4a46      	ldr	r2, [pc, #280]	; (8013908 <readCanToStructs+0x2694>)
 80137f0:	f240 4116 	movw	r1, #1046	; 0x416
 80137f4:	fb01 f303 	mul.w	r3, r1, r3
 80137f8:	4413      	add	r3, r2
 80137fa:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80137fe:	781b      	ldrb	r3, [r3, #0]
 8013800:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013804:	429a      	cmp	r2, r3
 8013806:	d014      	beq.n	8013832 <readCanToStructs+0x25be>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8013808:	4844      	ldr	r0, [pc, #272]	; (801391c <readCanToStructs+0x26a8>)
 801380a:	f012 fc75 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801380e:	2202      	movs	r2, #2
 8013810:	2100      	movs	r1, #0
 8013812:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013814:	f012 faec 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8013818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801381c:	4a3a      	ldr	r2, [pc, #232]	; (8013908 <readCanToStructs+0x2694>)
 801381e:	f240 4116 	movw	r1, #1046	; 0x416
 8013822:	fb01 f303 	mul.w	r3, r1, r3
 8013826:	4413      	add	r3, r2
 8013828:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801382c:	2200      	movs	r2, #0
 801382e:	701a      	strb	r2, [r3, #0]
					break;
 8013830:	e0a1      	b.n	8013976 <readCanToStructs+0x2702>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013832:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013836:	4613      	mov	r3, r2
 8013838:	00db      	lsls	r3, r3, #3
 801383a:	1a9b      	subs	r3, r3, r2
 801383c:	461a      	mov	r2, r3
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	4413      	add	r3, r2
 8013842:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013844:	2301      	movs	r3, #1
 8013846:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801384a:	e016      	b.n	801387a <readCanToStructs+0x2606>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801384c:	4b2d      	ldr	r3, [pc, #180]	; (8013904 <readCanToStructs+0x2690>)
 801384e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013852:	885b      	ldrh	r3, [r3, #2]
 8013854:	461a      	mov	r2, r3
 8013856:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801385a:	492a      	ldr	r1, [pc, #168]	; (8013904 <readCanToStructs+0x2690>)
 801385c:	0112      	lsls	r2, r2, #4
 801385e:	440a      	add	r2, r1
 8013860:	4413      	add	r3, r2
 8013862:	3304      	adds	r3, #4
 8013864:	781a      	ldrb	r2, [r3, #0]
 8013866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013868:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801386a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801386c:	3301      	adds	r3, #1
 801386e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013870:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013874:	3301      	adds	r3, #1
 8013876:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801387a:	4b22      	ldr	r3, [pc, #136]	; (8013904 <readCanToStructs+0x2690>)
 801387c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013880:	885b      	ldrh	r3, [r3, #2]
 8013882:	4a20      	ldr	r2, [pc, #128]	; (8013904 <readCanToStructs+0x2690>)
 8013884:	011b      	lsls	r3, r3, #4
 8013886:	4413      	add	r3, r2
 8013888:	330c      	adds	r3, #12
 801388a:	781b      	ldrb	r3, [r3, #0]
 801388c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013890:	429a      	cmp	r2, r3
 8013892:	d3db      	bcc.n	801384c <readCanToStructs+0x25d8>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8013894:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013898:	4a1b      	ldr	r2, [pc, #108]	; (8013908 <readCanToStructs+0x2694>)
 801389a:	f240 4116 	movw	r1, #1046	; 0x416
 801389e:	fb01 f303 	mul.w	r3, r1, r3
 80138a2:	4413      	add	r3, r2
 80138a4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80138a8:	781b      	ldrb	r3, [r3, #0]
 80138aa:	461a      	mov	r2, r3
 80138ac:	4613      	mov	r3, r2
 80138ae:	00db      	lsls	r3, r3, #3
 80138b0:	1a9a      	subs	r2, r3, r2
 80138b2:	4b14      	ldr	r3, [pc, #80]	; (8013904 <readCanToStructs+0x2690>)
 80138b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80138b8:	885b      	ldrh	r3, [r3, #2]
 80138ba:	4912      	ldr	r1, [pc, #72]	; (8013904 <readCanToStructs+0x2690>)
 80138bc:	011b      	lsls	r3, r3, #4
 80138be:	440b      	add	r3, r1
 80138c0:	330c      	adds	r3, #12
 80138c2:	781b      	ldrb	r3, [r3, #0]
 80138c4:	3b01      	subs	r3, #1
 80138c6:	4413      	add	r3, r2
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d92b      	bls.n	8013924 <readCanToStructs+0x26b0>
					if(Debug_flag == 1)
 80138cc:	4b10      	ldr	r3, [pc, #64]	; (8013910 <readCanToStructs+0x269c>)
 80138ce:	781b      	ldrb	r3, [r3, #0]
 80138d0:	2b01      	cmp	r3, #1
 80138d2:	d105      	bne.n	80138e0 <readCanToStructs+0x266c>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80138d4:	4b0a      	ldr	r3, [pc, #40]	; (8013900 <readCanToStructs+0x268c>)
 80138d6:	881b      	ldrh	r3, [r3, #0]
 80138d8:	4619      	mov	r1, r3
 80138da:	4811      	ldr	r0, [pc, #68]	; (8013920 <readCanToStructs+0x26ac>)
 80138dc:	f012 fb70 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 80138e0:	4b0d      	ldr	r3, [pc, #52]	; (8013918 <readCanToStructs+0x26a4>)
 80138e2:	2201      	movs	r2, #1
 80138e4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80138e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80138ea:	4a07      	ldr	r2, [pc, #28]	; (8013908 <readCanToStructs+0x2694>)
 80138ec:	f240 4116 	movw	r1, #1046	; 0x416
 80138f0:	fb01 f303 	mul.w	r3, r1, r3
 80138f4:	4413      	add	r3, r2
 80138f6:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80138fa:	2200      	movs	r2, #0
 80138fc:	701a      	strb	r2, [r3, #0]
				break;
 80138fe:	e03a      	b.n	8013976 <readCanToStructs+0x2702>
 8013900:	20000bb8 	.word	0x20000bb8
 8013904:	20007240 	.word	0x20007240
 8013908:	20006a14 	.word	0x20006a14
 801390c:	0802aa14 	.word	0x0802aa14
 8013910:	20000bbb 	.word	0x20000bbb
 8013914:	0802aa3c 	.word	0x0802aa3c
 8013918:	2000030b 	.word	0x2000030b
 801391c:	0802aa50 	.word	0x0802aa50
 8013920:	0802aa78 	.word	0x0802aa78
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 8013924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013928:	4ab4      	ldr	r2, [pc, #720]	; (8013bfc <readCanToStructs+0x2988>)
 801392a:	f240 4116 	movw	r1, #1046	; 0x416
 801392e:	fb01 f303 	mul.w	r3, r1, r3
 8013932:	4413      	add	r3, r2
 8013934:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8013938:	2201      	movs	r2, #1
 801393a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 801393c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013940:	49ae      	ldr	r1, [pc, #696]	; (8013bfc <readCanToStructs+0x2988>)
 8013942:	f240 4216 	movw	r2, #1046	; 0x416
 8013946:	fb03 f202 	mul.w	r2, r3, r2
 801394a:	440a      	add	r2, r1
 801394c:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8013950:	7812      	ldrb	r2, [r2, #0]
 8013952:	3201      	adds	r2, #1
 8013954:	b2d0      	uxtb	r0, r2
 8013956:	4aa9      	ldr	r2, [pc, #676]	; (8013bfc <readCanToStructs+0x2988>)
 8013958:	f240 4116 	movw	r1, #1046	; 0x416
 801395c:	fb01 f303 	mul.w	r3, r1, r3
 8013960:	4413      	add	r3, r2
 8013962:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8013966:	4602      	mov	r2, r0
 8013968:	701a      	strb	r2, [r3, #0]
				break;
 801396a:	e004      	b.n	8013976 <readCanToStructs+0x2702>
				break;
 801396c:	bf00      	nop
 801396e:	e002      	b.n	8013976 <readCanToStructs+0x2702>
				break;
 8013970:	bf00      	nop
 8013972:	e000      	b.n	8013976 <readCanToStructs+0x2702>
				break;
 8013974:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8013976:	4ba2      	ldr	r3, [pc, #648]	; (8013c00 <readCanToStructs+0x298c>)
 8013978:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801397c:	885b      	ldrh	r3, [r3, #2]
 801397e:	011b      	lsls	r3, r3, #4
 8013980:	4a9f      	ldr	r2, [pc, #636]	; (8013c00 <readCanToStructs+0x298c>)
 8013982:	4413      	add	r3, r2
 8013984:	2210      	movs	r2, #16
 8013986:	2100      	movs	r1, #0
 8013988:	4618      	mov	r0, r3
 801398a:	f012 fa31 	bl	8025df0 <memset>
			canRead.Out++;
 801398e:	4b9c      	ldr	r3, [pc, #624]	; (8013c00 <readCanToStructs+0x298c>)
 8013990:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013994:	885b      	ldrh	r3, [r3, #2]
 8013996:	3301      	adds	r3, #1
 8013998:	b29a      	uxth	r2, r3
 801399a:	4b99      	ldr	r3, [pc, #612]	; (8013c00 <readCanToStructs+0x298c>)
 801399c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139a0:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 80139a2:	4b97      	ldr	r3, [pc, #604]	; (8013c00 <readCanToStructs+0x298c>)
 80139a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139a8:	885b      	ldrh	r3, [r3, #2]
 80139aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80139ae:	d104      	bne.n	80139ba <readCanToStructs+0x2746>
			{
				canRead.Out = 0;
 80139b0:	4b93      	ldr	r3, [pc, #588]	; (8013c00 <readCanToStructs+0x298c>)
 80139b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139b6:	2200      	movs	r2, #0
 80139b8:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 80139ba:	f7fd fc05 	bl	80111c8 <canDataReady>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	f47e af7c 	bne.w	80128be <readCanToStructs+0x164a>
			}

		}
		/* __________ SIEMENS _________ */
	}
	break;
 80139c6:	f001 bd43 	b.w	8015450 <readCanToStructs+0x41dc>
	case MEDHA:
	{
		/* __________ MEDHA _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80139ca:	4b8d      	ldr	r3, [pc, #564]	; (8013c00 <readCanToStructs+0x298c>)
 80139cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139d0:	885b      	ldrh	r3, [r3, #2]
 80139d2:	4a8b      	ldr	r2, [pc, #556]	; (8013c00 <readCanToStructs+0x298c>)
 80139d4:	011b      	lsls	r3, r3, #4
 80139d6:	4413      	add	r3, r2
 80139d8:	330f      	adds	r3, #15
 80139da:	781b      	ldrb	r3, [r3, #0]
 80139dc:	3b01      	subs	r3, #1
 80139de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80139e2:	4b87      	ldr	r3, [pc, #540]	; (8013c00 <readCanToStructs+0x298c>)
 80139e4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80139e8:	885b      	ldrh	r3, [r3, #2]
 80139ea:	4a85      	ldr	r2, [pc, #532]	; (8013c00 <readCanToStructs+0x298c>)
 80139ec:	011b      	lsls	r3, r3, #4
 80139ee:	4413      	add	r3, r2
 80139f0:	681b      	ldr	r3, [r3, #0]
 80139f2:	f240 220a 	movw	r2, #522	; 0x20a
 80139f6:	4293      	cmp	r3, r2
 80139f8:	f201 8023 	bhi.w	8014a42 <readCanToStructs+0x37ce>
 80139fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013a00:	d80a      	bhi.n	8013a18 <readCanToStructs+0x27a4>
 8013a02:	f240 1203 	movw	r2, #259	; 0x103
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d022      	beq.n	8013a50 <readCanToStructs+0x27dc>
 8013a0a:	f240 1209 	movw	r2, #265	; 0x109
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	f000 8102 	beq.w	8013c18 <readCanToStructs+0x29a4>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;

			default:
				break;
 8013a14:	f001 b815 	b.w	8014a42 <readCanToStructs+0x37ce>
 8013a18:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8013a1c:	2b09      	cmp	r3, #9
 8013a1e:	f201 8010 	bhi.w	8014a42 <readCanToStructs+0x37ce>
 8013a22:	a201      	add	r2, pc, #4	; (adr r2, 8013a28 <readCanToStructs+0x27b4>)
 8013a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a28:	08013dc5 	.word	0x08013dc5
 8013a2c:	08013fc9 	.word	0x08013fc9
 8013a30:	08014a43 	.word	0x08014a43
 8013a34:	08014a43 	.word	0x08014a43
 8013a38:	080141d1 	.word	0x080141d1
 8013a3c:	08014a43 	.word	0x08014a43
 8013a40:	08014363 	.word	0x08014363
 8013a44:	08014531 	.word	0x08014531
 8013a48:	080146d7 	.word	0x080146d7
 8013a4c:	080148a1 	.word	0x080148a1
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013a50:	4b6c      	ldr	r3, [pc, #432]	; (8013c04 <readCanToStructs+0x2990>)
 8013a52:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013a54:	4b6a      	ldr	r3, [pc, #424]	; (8013c00 <readCanToStructs+0x298c>)
 8013a56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013a5a:	885b      	ldrh	r3, [r3, #2]
 8013a5c:	4a68      	ldr	r2, [pc, #416]	; (8013c00 <readCanToStructs+0x298c>)
 8013a5e:	011b      	lsls	r3, r3, #4
 8013a60:	4413      	add	r3, r2
 8013a62:	3304      	adds	r3, #4
 8013a64:	781b      	ldrb	r3, [r3, #0]
 8013a66:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013a6a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d110      	bne.n	8013a94 <readCanToStructs+0x2820>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013a72:	2206      	movs	r2, #6
 8013a74:	2100      	movs	r1, #0
 8013a76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a78:	f012 f9ba 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a80:	4a5e      	ldr	r2, [pc, #376]	; (8013bfc <readCanToStructs+0x2988>)
 8013a82:	f240 4116 	movw	r1, #1046	; 0x416
 8013a86:	fb01 f303 	mul.w	r3, r1, r3
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013a90:	2200      	movs	r2, #0
 8013a92:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8013a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013a98:	4a58      	ldr	r2, [pc, #352]	; (8013bfc <readCanToStructs+0x2988>)
 8013a9a:	f240 4116 	movw	r1, #1046	; 0x416
 8013a9e:	fb01 f303 	mul.w	r3, r1, r3
 8013aa2:	4413      	add	r3, r2
 8013aa4:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013aa8:	781b      	ldrb	r3, [r3, #0]
 8013aaa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d015      	beq.n	8013ade <readCanToStructs+0x286a>
					printf("GPS Packet Seq no MisMatch\n");
 8013ab2:	4855      	ldr	r0, [pc, #340]	; (8013c08 <readCanToStructs+0x2994>)
 8013ab4:	f012 fb20 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013ab8:	2206      	movs	r2, #6
 8013aba:	2100      	movs	r1, #0
 8013abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013abe:	f012 f997 	bl	8025df0 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ac6:	4a4d      	ldr	r2, [pc, #308]	; (8013bfc <readCanToStructs+0x2988>)
 8013ac8:	f240 4116 	movw	r1, #1046	; 0x416
 8013acc:	fb01 f303 	mul.w	r3, r1, r3
 8013ad0:	4413      	add	r3, r2
 8013ad2:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	701a      	strb	r2, [r3, #0]
					break;
 8013ada:	f000 bfb3 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013ade:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013ae2:	4613      	mov	r3, r2
 8013ae4:	00db      	lsls	r3, r3, #3
 8013ae6:	1a9b      	subs	r3, r3, r2
 8013ae8:	461a      	mov	r2, r3
 8013aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aec:	4413      	add	r3, r2
 8013aee:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013af0:	2301      	movs	r3, #1
 8013af2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013af6:	e016      	b.n	8013b26 <readCanToStructs+0x28b2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013af8:	4b41      	ldr	r3, [pc, #260]	; (8013c00 <readCanToStructs+0x298c>)
 8013afa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013afe:	885b      	ldrh	r3, [r3, #2]
 8013b00:	461a      	mov	r2, r3
 8013b02:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b06:	493e      	ldr	r1, [pc, #248]	; (8013c00 <readCanToStructs+0x298c>)
 8013b08:	0112      	lsls	r2, r2, #4
 8013b0a:	440a      	add	r2, r1
 8013b0c:	4413      	add	r3, r2
 8013b0e:	3304      	adds	r3, #4
 8013b10:	781a      	ldrb	r2, [r3, #0]
 8013b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b14:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b18:	3301      	adds	r3, #1
 8013b1a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013b1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013b20:	3301      	adds	r3, #1
 8013b22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013b26:	4b36      	ldr	r3, [pc, #216]	; (8013c00 <readCanToStructs+0x298c>)
 8013b28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b2c:	885b      	ldrh	r3, [r3, #2]
 8013b2e:	4a34      	ldr	r2, [pc, #208]	; (8013c00 <readCanToStructs+0x298c>)
 8013b30:	011b      	lsls	r3, r3, #4
 8013b32:	4413      	add	r3, r2
 8013b34:	330c      	adds	r3, #12
 8013b36:	781b      	ldrb	r3, [r3, #0]
 8013b38:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013b3c:	429a      	cmp	r2, r3
 8013b3e:	d3db      	bcc.n	8013af8 <readCanToStructs+0x2884>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013b40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b44:	4a2d      	ldr	r2, [pc, #180]	; (8013bfc <readCanToStructs+0x2988>)
 8013b46:	f240 4116 	movw	r1, #1046	; 0x416
 8013b4a:	fb01 f303 	mul.w	r3, r1, r3
 8013b4e:	4413      	add	r3, r2
 8013b50:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013b54:	781b      	ldrb	r3, [r3, #0]
 8013b56:	461a      	mov	r2, r3
 8013b58:	4613      	mov	r3, r2
 8013b5a:	00db      	lsls	r3, r3, #3
 8013b5c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8013b5e:	4b28      	ldr	r3, [pc, #160]	; (8013c00 <readCanToStructs+0x298c>)
 8013b60:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013b64:	885b      	ldrh	r3, [r3, #2]
 8013b66:	4926      	ldr	r1, [pc, #152]	; (8013c00 <readCanToStructs+0x298c>)
 8013b68:	011b      	lsls	r3, r3, #4
 8013b6a:	440b      	add	r3, r1
 8013b6c:	330c      	adds	r3, #12
 8013b6e:	781b      	ldrb	r3, [r3, #0]
 8013b70:	3b01      	subs	r3, #1
 8013b72:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8013b74:	2b05      	cmp	r3, #5
 8013b76:	d91c      	bls.n	8013bb2 <readCanToStructs+0x293e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013b78:	4b24      	ldr	r3, [pc, #144]	; (8013c0c <readCanToStructs+0x2998>)
 8013b7a:	4a22      	ldr	r2, [pc, #136]	; (8013c04 <readCanToStructs+0x2990>)
 8013b7c:	6811      	ldr	r1, [r2, #0]
 8013b7e:	6019      	str	r1, [r3, #0]
 8013b80:	8892      	ldrh	r2, [r2, #4]
 8013b82:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013b84:	4b22      	ldr	r3, [pc, #136]	; (8013c10 <readCanToStructs+0x299c>)
 8013b86:	781b      	ldrb	r3, [r3, #0]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d102      	bne.n	8013b92 <readCanToStructs+0x291e>
						printf("GPS_PACKET_RECEIVED\n");
 8013b8c:	4821      	ldr	r0, [pc, #132]	; (8013c14 <readCanToStructs+0x29a0>)
 8013b8e:	f012 fab3 	bl	80260f8 <puts>
					Write_RTC();
 8013b92:	f7f8 ff09 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8013b96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013b9a:	4a18      	ldr	r2, [pc, #96]	; (8013bfc <readCanToStructs+0x2988>)
 8013b9c:	f240 4116 	movw	r1, #1046	; 0x416
 8013ba0:	fb01 f303 	mul.w	r3, r1, r3
 8013ba4:	4413      	add	r3, r2
 8013ba6:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013baa:	2200      	movs	r2, #0
 8013bac:	701a      	strb	r2, [r3, #0]
				break;
 8013bae:	f000 bf49 	b.w	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8013bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bb6:	4a11      	ldr	r2, [pc, #68]	; (8013bfc <readCanToStructs+0x2988>)
 8013bb8:	f240 4116 	movw	r1, #1046	; 0x416
 8013bbc:	fb01 f303 	mul.w	r3, r1, r3
 8013bc0:	4413      	add	r3, r2
 8013bc2:	f203 2306 	addw	r3, r3, #518	; 0x206
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8013bca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013bce:	490b      	ldr	r1, [pc, #44]	; (8013bfc <readCanToStructs+0x2988>)
 8013bd0:	f240 4216 	movw	r2, #1046	; 0x416
 8013bd4:	fb03 f202 	mul.w	r2, r3, r2
 8013bd8:	440a      	add	r2, r1
 8013bda:	f202 2207 	addw	r2, r2, #519	; 0x207
 8013bde:	7812      	ldrb	r2, [r2, #0]
 8013be0:	3201      	adds	r2, #1
 8013be2:	b2d0      	uxtb	r0, r2
 8013be4:	4a05      	ldr	r2, [pc, #20]	; (8013bfc <readCanToStructs+0x2988>)
 8013be6:	f240 4116 	movw	r1, #1046	; 0x416
 8013bea:	fb01 f303 	mul.w	r3, r1, r3
 8013bee:	4413      	add	r3, r2
 8013bf0:	f203 2307 	addw	r3, r3, #519	; 0x207
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	701a      	strb	r2, [r3, #0]
				break;
 8013bf8:	f000 bf24 	b.w	8014a44 <readCanToStructs+0x37d0>
 8013bfc:	20006a14 	.word	0x20006a14
 8013c00:	20007240 	.word	0x20007240
 8013c04:	20003fbc 	.word	0x20003fbc
 8013c08:	0802a83c 	.word	0x0802a83c
 8013c0c:	20003fb4 	.word	0x20003fb4
 8013c10:	20000bbb 	.word	0x20000bbb
 8013c14:	0802a858 	.word	0x0802a858
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8013c18:	4b9d      	ldr	r3, [pc, #628]	; (8013e90 <readCanToStructs+0x2c1c>)
 8013c1a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013c1c:	4b9d      	ldr	r3, [pc, #628]	; (8013e94 <readCanToStructs+0x2c20>)
 8013c1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013c22:	885b      	ldrh	r3, [r3, #2]
 8013c24:	4a9b      	ldr	r2, [pc, #620]	; (8013e94 <readCanToStructs+0x2c20>)
 8013c26:	011b      	lsls	r3, r3, #4
 8013c28:	4413      	add	r3, r2
 8013c2a:	3304      	adds	r3, #4
 8013c2c:	781b      	ldrb	r3, [r3, #0]
 8013c2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8013c32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d110      	bne.n	8013c5c <readCanToStructs+0x29e8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013c3a:	2206      	movs	r2, #6
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c40:	f012 f8d6 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013c44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c48:	4a93      	ldr	r2, [pc, #588]	; (8013e98 <readCanToStructs+0x2c24>)
 8013c4a:	f240 4116 	movw	r1, #1046	; 0x416
 8013c4e:	fb01 f303 	mul.w	r3, r1, r3
 8013c52:	4413      	add	r3, r2
 8013c54:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013c58:	2200      	movs	r2, #0
 8013c5a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8013c5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c60:	4a8d      	ldr	r2, [pc, #564]	; (8013e98 <readCanToStructs+0x2c24>)
 8013c62:	f240 4116 	movw	r1, #1046	; 0x416
 8013c66:	fb01 f303 	mul.w	r3, r1, r3
 8013c6a:	4413      	add	r3, r2
 8013c6c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013c70:	781b      	ldrb	r3, [r3, #0]
 8013c72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013c76:	429a      	cmp	r2, r3
 8013c78:	d015      	beq.n	8013ca6 <readCanToStructs+0x2a32>
					printf("GPS2 Packet Seq no MisMatch\n");
 8013c7a:	4888      	ldr	r0, [pc, #544]	; (8013e9c <readCanToStructs+0x2c28>)
 8013c7c:	f012 fa3c 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8013c80:	2206      	movs	r2, #6
 8013c82:	2100      	movs	r1, #0
 8013c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c86:	f012 f8b3 	bl	8025df0 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013c8e:	4a82      	ldr	r2, [pc, #520]	; (8013e98 <readCanToStructs+0x2c24>)
 8013c90:	f240 4116 	movw	r1, #1046	; 0x416
 8013c94:	fb01 f303 	mul.w	r3, r1, r3
 8013c98:	4413      	add	r3, r2
 8013c9a:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013c9e:	2200      	movs	r2, #0
 8013ca0:	701a      	strb	r2, [r3, #0]
					break;
 8013ca2:	f000 becf 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013ca6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013caa:	4613      	mov	r3, r2
 8013cac:	00db      	lsls	r3, r3, #3
 8013cae:	1a9b      	subs	r3, r3, r2
 8013cb0:	461a      	mov	r2, r3
 8013cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cb4:	4413      	add	r3, r2
 8013cb6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013cb8:	2301      	movs	r3, #1
 8013cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013cbe:	e016      	b.n	8013cee <readCanToStructs+0x2a7a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013cc0:	4b74      	ldr	r3, [pc, #464]	; (8013e94 <readCanToStructs+0x2c20>)
 8013cc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013cc6:	885b      	ldrh	r3, [r3, #2]
 8013cc8:	461a      	mov	r2, r3
 8013cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013cce:	4971      	ldr	r1, [pc, #452]	; (8013e94 <readCanToStructs+0x2c20>)
 8013cd0:	0112      	lsls	r2, r2, #4
 8013cd2:	440a      	add	r2, r1
 8013cd4:	4413      	add	r3, r2
 8013cd6:	3304      	adds	r3, #4
 8013cd8:	781a      	ldrb	r2, [r3, #0]
 8013cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cdc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ce8:	3301      	adds	r3, #1
 8013cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013cee:	4b69      	ldr	r3, [pc, #420]	; (8013e94 <readCanToStructs+0x2c20>)
 8013cf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013cf4:	885b      	ldrh	r3, [r3, #2]
 8013cf6:	4a67      	ldr	r2, [pc, #412]	; (8013e94 <readCanToStructs+0x2c20>)
 8013cf8:	011b      	lsls	r3, r3, #4
 8013cfa:	4413      	add	r3, r2
 8013cfc:	330c      	adds	r3, #12
 8013cfe:	781b      	ldrb	r3, [r3, #0]
 8013d00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d3db      	bcc.n	8013cc0 <readCanToStructs+0x2a4c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d0c:	4a62      	ldr	r2, [pc, #392]	; (8013e98 <readCanToStructs+0x2c24>)
 8013d0e:	f240 4116 	movw	r1, #1046	; 0x416
 8013d12:	fb01 f303 	mul.w	r3, r1, r3
 8013d16:	4413      	add	r3, r2
 8013d18:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013d1c:	781b      	ldrb	r3, [r3, #0]
 8013d1e:	461a      	mov	r2, r3
 8013d20:	4613      	mov	r3, r2
 8013d22:	00db      	lsls	r3, r3, #3
 8013d24:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8013d26:	4b5b      	ldr	r3, [pc, #364]	; (8013e94 <readCanToStructs+0x2c20>)
 8013d28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013d2c:	885b      	ldrh	r3, [r3, #2]
 8013d2e:	4959      	ldr	r1, [pc, #356]	; (8013e94 <readCanToStructs+0x2c20>)
 8013d30:	011b      	lsls	r3, r3, #4
 8013d32:	440b      	add	r3, r1
 8013d34:	330c      	adds	r3, #12
 8013d36:	781b      	ldrb	r3, [r3, #0]
 8013d38:	3b01      	subs	r3, #1
 8013d3a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8013d3c:	2b05      	cmp	r3, #5
 8013d3e:	d91c      	bls.n	8013d7a <readCanToStructs+0x2b06>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8013d40:	4b57      	ldr	r3, [pc, #348]	; (8013ea0 <readCanToStructs+0x2c2c>)
 8013d42:	4a53      	ldr	r2, [pc, #332]	; (8013e90 <readCanToStructs+0x2c1c>)
 8013d44:	6811      	ldr	r1, [r2, #0]
 8013d46:	6019      	str	r1, [r3, #0]
 8013d48:	8892      	ldrh	r2, [r2, #4]
 8013d4a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8013d4c:	4b55      	ldr	r3, [pc, #340]	; (8013ea4 <readCanToStructs+0x2c30>)
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	2b01      	cmp	r3, #1
 8013d52:	d102      	bne.n	8013d5a <readCanToStructs+0x2ae6>
						printf("GPS2_PACKET_RECEIVED\n");
 8013d54:	4854      	ldr	r0, [pc, #336]	; (8013ea8 <readCanToStructs+0x2c34>)
 8013d56:	f012 f9cf 	bl	80260f8 <puts>
					Write_RTC();
 8013d5a:	f7f8 fe25 	bl	800c9a8 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8013d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d62:	4a4d      	ldr	r2, [pc, #308]	; (8013e98 <readCanToStructs+0x2c24>)
 8013d64:	f240 4116 	movw	r1, #1046	; 0x416
 8013d68:	fb01 f303 	mul.w	r3, r1, r3
 8013d6c:	4413      	add	r3, r2
 8013d6e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013d72:	2200      	movs	r2, #0
 8013d74:	701a      	strb	r2, [r3, #0]
				break;
 8013d76:	f000 be65 	b.w	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8013d7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d7e:	4a46      	ldr	r2, [pc, #280]	; (8013e98 <readCanToStructs+0x2c24>)
 8013d80:	f240 4116 	movw	r1, #1046	; 0x416
 8013d84:	fb01 f303 	mul.w	r3, r1, r3
 8013d88:	4413      	add	r3, r2
 8013d8a:	f203 2312 	addw	r3, r3, #530	; 0x212
 8013d8e:	2201      	movs	r2, #1
 8013d90:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8013d92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013d96:	4940      	ldr	r1, [pc, #256]	; (8013e98 <readCanToStructs+0x2c24>)
 8013d98:	f240 4216 	movw	r2, #1046	; 0x416
 8013d9c:	fb03 f202 	mul.w	r2, r3, r2
 8013da0:	440a      	add	r2, r1
 8013da2:	f202 2213 	addw	r2, r2, #531	; 0x213
 8013da6:	7812      	ldrb	r2, [r2, #0]
 8013da8:	3201      	adds	r2, #1
 8013daa:	b2d0      	uxtb	r0, r2
 8013dac:	4a3a      	ldr	r2, [pc, #232]	; (8013e98 <readCanToStructs+0x2c24>)
 8013dae:	f240 4116 	movw	r1, #1046	; 0x416
 8013db2:	fb01 f303 	mul.w	r3, r1, r3
 8013db6:	4413      	add	r3, r2
 8013db8:	f203 2313 	addw	r3, r3, #531	; 0x213
 8013dbc:	4602      	mov	r2, r0
 8013dbe:	701a      	strb	r2, [r3, #0]
				break;
 8013dc0:	f000 be40 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8013dc4:	4b39      	ldr	r3, [pc, #228]	; (8013eac <readCanToStructs+0x2c38>)
 8013dc6:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013dc8:	4b32      	ldr	r3, [pc, #200]	; (8013e94 <readCanToStructs+0x2c20>)
 8013dca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013dce:	885b      	ldrh	r3, [r3, #2]
 8013dd0:	4a30      	ldr	r2, [pc, #192]	; (8013e94 <readCanToStructs+0x2c20>)
 8013dd2:	011b      	lsls	r3, r3, #4
 8013dd4:	4413      	add	r3, r2
 8013dd6:	3304      	adds	r3, #4
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013dde:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d110      	bne.n	8013e08 <readCanToStructs+0x2b94>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013de6:	2208      	movs	r2, #8
 8013de8:	2100      	movs	r1, #0
 8013dea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013dec:	f012 f800 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013df4:	4a28      	ldr	r2, [pc, #160]	; (8013e98 <readCanToStructs+0x2c24>)
 8013df6:	f240 4116 	movw	r1, #1046	; 0x416
 8013dfa:	fb01 f303 	mul.w	r3, r1, r3
 8013dfe:	4413      	add	r3, r2
 8013e00:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013e04:	2200      	movs	r2, #0
 8013e06:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8013e08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e0c:	4a22      	ldr	r2, [pc, #136]	; (8013e98 <readCanToStructs+0x2c24>)
 8013e0e:	f240 4116 	movw	r1, #1046	; 0x416
 8013e12:	fb01 f303 	mul.w	r3, r1, r3
 8013e16:	4413      	add	r3, r2
 8013e18:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013e1c:	781b      	ldrb	r3, [r3, #0]
 8013e1e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013e22:	429a      	cmp	r2, r3
 8013e24:	d026      	beq.n	8013e74 <readCanToStructs+0x2c00>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8013e26:	4822      	ldr	r0, [pc, #136]	; (8013eb0 <readCanToStructs+0x2c3c>)
 8013e28:	f012 f966 	bl	80260f8 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo);
 8013e2c:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8013e30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e34:	4a18      	ldr	r2, [pc, #96]	; (8013e98 <readCanToStructs+0x2c24>)
 8013e36:	f240 4016 	movw	r0, #1046	; 0x416
 8013e3a:	fb00 f303 	mul.w	r3, r0, r3
 8013e3e:	4413      	add	r3, r2
 8013e40:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	461a      	mov	r2, r3
 8013e48:	481a      	ldr	r0, [pc, #104]	; (8013eb4 <readCanToStructs+0x2c40>)
 8013e4a:	f012 f8b9 	bl	8025fc0 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013e4e:	2208      	movs	r2, #8
 8013e50:	2100      	movs	r1, #0
 8013e52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e54:	f011 ffcc 	bl	8025df0 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013e58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013e5c:	4a0e      	ldr	r2, [pc, #56]	; (8013e98 <readCanToStructs+0x2c24>)
 8013e5e:	f240 4116 	movw	r1, #1046	; 0x416
 8013e62:	fb01 f303 	mul.w	r3, r1, r3
 8013e66:	4413      	add	r3, r2
 8013e68:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013e6c:	2200      	movs	r2, #0
 8013e6e:	701a      	strb	r2, [r3, #0]
					break;
 8013e70:	f000 bde8 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8013e74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8013e78:	4613      	mov	r3, r2
 8013e7a:	00db      	lsls	r3, r3, #3
 8013e7c:	1a9b      	subs	r3, r3, r2
 8013e7e:	461a      	mov	r2, r3
 8013e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e82:	4413      	add	r3, r2
 8013e84:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013e86:	2301      	movs	r3, #1
 8013e88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013e8c:	e02b      	b.n	8013ee6 <readCanToStructs+0x2c72>
 8013e8e:	bf00      	nop
 8013e90:	20003fbc 	.word	0x20003fbc
 8013e94:	20007240 	.word	0x20007240
 8013e98:	20006a14 	.word	0x20006a14
 8013e9c:	0802a86c 	.word	0x0802a86c
 8013ea0:	20003fb4 	.word	0x20003fb4
 8013ea4:	20000bbb 	.word	0x20000bbb
 8013ea8:	0802a888 	.word	0x0802a888
 8013eac:	20003dfc 	.word	0x20003dfc
 8013eb0:	0802ab2c 	.word	0x0802ab2c
 8013eb4:	0802ab54 	.word	0x0802ab54
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8013eb8:	4bba      	ldr	r3, [pc, #744]	; (80141a4 <readCanToStructs+0x2f30>)
 8013eba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013ebe:	885b      	ldrh	r3, [r3, #2]
 8013ec0:	461a      	mov	r2, r3
 8013ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ec6:	49b7      	ldr	r1, [pc, #732]	; (80141a4 <readCanToStructs+0x2f30>)
 8013ec8:	0112      	lsls	r2, r2, #4
 8013eca:	440a      	add	r2, r1
 8013ecc:	4413      	add	r3, r2
 8013ece:	3304      	adds	r3, #4
 8013ed0:	781a      	ldrb	r2, [r3, #0]
 8013ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8013ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed8:	3301      	adds	r3, #1
 8013eda:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8013edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013ee6:	4baf      	ldr	r3, [pc, #700]	; (80141a4 <readCanToStructs+0x2f30>)
 8013ee8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013eec:	885b      	ldrh	r3, [r3, #2]
 8013eee:	4aad      	ldr	r2, [pc, #692]	; (80141a4 <readCanToStructs+0x2f30>)
 8013ef0:	011b      	lsls	r3, r3, #4
 8013ef2:	4413      	add	r3, r2
 8013ef4:	330c      	adds	r3, #12
 8013ef6:	781b      	ldrb	r3, [r3, #0]
 8013ef8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8013efc:	429a      	cmp	r2, r3
 8013efe:	d3db      	bcc.n	8013eb8 <readCanToStructs+0x2c44>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8013f00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f04:	4aa8      	ldr	r2, [pc, #672]	; (80141a8 <readCanToStructs+0x2f34>)
 8013f06:	f240 4116 	movw	r1, #1046	; 0x416
 8013f0a:	fb01 f303 	mul.w	r3, r1, r3
 8013f0e:	4413      	add	r3, r2
 8013f10:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	461a      	mov	r2, r3
 8013f18:	4613      	mov	r3, r2
 8013f1a:	00db      	lsls	r3, r3, #3
 8013f1c:	1a9a      	subs	r2, r3, r2
 8013f1e:	4ba1      	ldr	r3, [pc, #644]	; (80141a4 <readCanToStructs+0x2f30>)
 8013f20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013f24:	885b      	ldrh	r3, [r3, #2]
 8013f26:	499f      	ldr	r1, [pc, #636]	; (80141a4 <readCanToStructs+0x2f30>)
 8013f28:	011b      	lsls	r3, r3, #4
 8013f2a:	440b      	add	r3, r1
 8013f2c:	330c      	adds	r3, #12
 8013f2e:	781b      	ldrb	r3, [r3, #0]
 8013f30:	3b01      	subs	r3, #1
 8013f32:	4413      	add	r3, r2
 8013f34:	2b07      	cmp	r3, #7
 8013f36:	d922      	bls.n	8013f7e <readCanToStructs+0x2d0a>
					if(Debug_flag == 1)
 8013f38:	4b9c      	ldr	r3, [pc, #624]	; (80141ac <readCanToStructs+0x2f38>)
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	2b01      	cmp	r3, #1
 8013f3e:	d102      	bne.n	8013f46 <readCanToStructs+0x2cd2>
						printf("\nRCV OTH_INFO1\n");
 8013f40:	489b      	ldr	r0, [pc, #620]	; (80141b0 <readCanToStructs+0x2f3c>)
 8013f42:	f012 f8d9 	bl	80260f8 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013f46:	4b9b      	ldr	r3, [pc, #620]	; (80141b4 <readCanToStructs+0x2f40>)
 8013f48:	4a9b      	ldr	r2, [pc, #620]	; (80141b8 <readCanToStructs+0x2f44>)
 8013f4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013f4e:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 8013f52:	4b9a      	ldr	r3, [pc, #616]	; (80141bc <readCanToStructs+0x2f48>)
 8013f54:	2201      	movs	r2, #1
 8013f56:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8013f58:	f005 f91c 	bl	8019194 <HAL_GetTick>
 8013f5c:	4603      	mov	r3, r0
 8013f5e:	4a98      	ldr	r2, [pc, #608]	; (80141c0 <readCanToStructs+0x2f4c>)
 8013f60:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8013f62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f66:	4a90      	ldr	r2, [pc, #576]	; (80141a8 <readCanToStructs+0x2f34>)
 8013f68:	f240 4116 	movw	r1, #1046	; 0x416
 8013f6c:	fb01 f303 	mul.w	r3, r1, r3
 8013f70:	4413      	add	r3, r2
 8013f72:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013f76:	2200      	movs	r2, #0
 8013f78:	701a      	strb	r2, [r3, #0]
				break;
 8013f7a:	f000 bd63 	b.w	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 8013f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f82:	4a89      	ldr	r2, [pc, #548]	; (80141a8 <readCanToStructs+0x2f34>)
 8013f84:	f240 4116 	movw	r1, #1046	; 0x416
 8013f88:	fb01 f303 	mul.w	r3, r1, r3
 8013f8c:	4413      	add	r3, r2
 8013f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8013f92:	2201      	movs	r2, #1
 8013f94:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8013f96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013f9a:	4983      	ldr	r1, [pc, #524]	; (80141a8 <readCanToStructs+0x2f34>)
 8013f9c:	f240 4216 	movw	r2, #1046	; 0x416
 8013fa0:	fb03 f202 	mul.w	r2, r3, r2
 8013fa4:	440a      	add	r2, r1
 8013fa6:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8013faa:	7812      	ldrb	r2, [r2, #0]
 8013fac:	3201      	adds	r2, #1
 8013fae:	b2d0      	uxtb	r0, r2
 8013fb0:	4a7d      	ldr	r2, [pc, #500]	; (80141a8 <readCanToStructs+0x2f34>)
 8013fb2:	f240 4116 	movw	r1, #1046	; 0x416
 8013fb6:	fb01 f303 	mul.w	r3, r1, r3
 8013fba:	4413      	add	r3, r2
 8013fbc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8013fc0:	4602      	mov	r2, r0
 8013fc2:	701a      	strb	r2, [r3, #0]
				break;
 8013fc4:	f000 bd3e 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8013fc8:	4b7b      	ldr	r3, [pc, #492]	; (80141b8 <readCanToStructs+0x2f44>)
 8013fca:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8013fcc:	4b75      	ldr	r3, [pc, #468]	; (80141a4 <readCanToStructs+0x2f30>)
 8013fce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8013fd2:	885b      	ldrh	r3, [r3, #2]
 8013fd4:	4a73      	ldr	r2, [pc, #460]	; (80141a4 <readCanToStructs+0x2f30>)
 8013fd6:	011b      	lsls	r3, r3, #4
 8013fd8:	4413      	add	r3, r2
 8013fda:	3304      	adds	r3, #4
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8013fe2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d110      	bne.n	801400c <readCanToStructs+0x2d98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8013fea:	2208      	movs	r2, #8
 8013fec:	2100      	movs	r1, #0
 8013fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ff0:	f011 fefe 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8013ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013ff8:	4a6b      	ldr	r2, [pc, #428]	; (80141a8 <readCanToStructs+0x2f34>)
 8013ffa:	f240 4116 	movw	r1, #1046	; 0x416
 8013ffe:	fb01 f303 	mul.w	r3, r1, r3
 8014002:	4413      	add	r3, r2
 8014004:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014008:	2200      	movs	r2, #0
 801400a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 801400c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014010:	4a65      	ldr	r2, [pc, #404]	; (80141a8 <readCanToStructs+0x2f34>)
 8014012:	f240 4116 	movw	r1, #1046	; 0x416
 8014016:	fb01 f303 	mul.w	r3, r1, r3
 801401a:	4413      	add	r3, r2
 801401c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014026:	429a      	cmp	r2, r3
 8014028:	d026      	beq.n	8014078 <readCanToStructs+0x2e04>
					printf("Seq No Mismatch for EI_2_SELF_SHARING\n");
 801402a:	4866      	ldr	r0, [pc, #408]	; (80141c4 <readCanToStructs+0x2f50>)
 801402c:	f012 f864 	bl	80260f8 <puts>
					printf("Rcv:%u|Exp:%u\n",uc_seqNo,canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo);
 8014030:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8014034:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014038:	4a5b      	ldr	r2, [pc, #364]	; (80141a8 <readCanToStructs+0x2f34>)
 801403a:	f240 4016 	movw	r0, #1046	; 0x416
 801403e:	fb00 f303 	mul.w	r3, r0, r3
 8014042:	4413      	add	r3, r2
 8014044:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	461a      	mov	r2, r3
 801404c:	485e      	ldr	r0, [pc, #376]	; (80141c8 <readCanToStructs+0x2f54>)
 801404e:	f011 ffb7 	bl	8025fc0 <iprintf>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014052:	2208      	movs	r2, #8
 8014054:	2100      	movs	r1, #0
 8014056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014058:	f011 feca 	bl	8025df0 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801405c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014060:	4a51      	ldr	r2, [pc, #324]	; (80141a8 <readCanToStructs+0x2f34>)
 8014062:	f240 4116 	movw	r1, #1046	; 0x416
 8014066:	fb01 f303 	mul.w	r3, r1, r3
 801406a:	4413      	add	r3, r2
 801406c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014070:	2200      	movs	r2, #0
 8014072:	701a      	strb	r2, [r3, #0]
					break;
 8014074:	f000 bce6 	b.w	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014078:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801407c:	4613      	mov	r3, r2
 801407e:	00db      	lsls	r3, r3, #3
 8014080:	1a9b      	subs	r3, r3, r2
 8014082:	461a      	mov	r2, r3
 8014084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014086:	4413      	add	r3, r2
 8014088:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801408a:	2301      	movs	r3, #1
 801408c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014090:	e016      	b.n	80140c0 <readCanToStructs+0x2e4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014092:	4b44      	ldr	r3, [pc, #272]	; (80141a4 <readCanToStructs+0x2f30>)
 8014094:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014098:	885b      	ldrh	r3, [r3, #2]
 801409a:	461a      	mov	r2, r3
 801409c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140a0:	4940      	ldr	r1, [pc, #256]	; (80141a4 <readCanToStructs+0x2f30>)
 80140a2:	0112      	lsls	r2, r2, #4
 80140a4:	440a      	add	r2, r1
 80140a6:	4413      	add	r3, r2
 80140a8:	3304      	adds	r3, #4
 80140aa:	781a      	ldrb	r2, [r3, #0]
 80140ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ae:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80140b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b2:	3301      	adds	r3, #1
 80140b4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80140b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80140ba:	3301      	adds	r3, #1
 80140bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80140c0:	4b38      	ldr	r3, [pc, #224]	; (80141a4 <readCanToStructs+0x2f30>)
 80140c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140c6:	885b      	ldrh	r3, [r3, #2]
 80140c8:	4a36      	ldr	r2, [pc, #216]	; (80141a4 <readCanToStructs+0x2f30>)
 80140ca:	011b      	lsls	r3, r3, #4
 80140cc:	4413      	add	r3, r2
 80140ce:	330c      	adds	r3, #12
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80140d6:	429a      	cmp	r2, r3
 80140d8:	d3db      	bcc.n	8014092 <readCanToStructs+0x2e1e>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80140da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80140de:	4a32      	ldr	r2, [pc, #200]	; (80141a8 <readCanToStructs+0x2f34>)
 80140e0:	f240 4116 	movw	r1, #1046	; 0x416
 80140e4:	fb01 f303 	mul.w	r3, r1, r3
 80140e8:	4413      	add	r3, r2
 80140ea:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80140ee:	781b      	ldrb	r3, [r3, #0]
 80140f0:	461a      	mov	r2, r3
 80140f2:	4613      	mov	r3, r2
 80140f4:	00db      	lsls	r3, r3, #3
 80140f6:	1a9a      	subs	r2, r3, r2
 80140f8:	4b2a      	ldr	r3, [pc, #168]	; (80141a4 <readCanToStructs+0x2f30>)
 80140fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80140fe:	885b      	ldrh	r3, [r3, #2]
 8014100:	4928      	ldr	r1, [pc, #160]	; (80141a4 <readCanToStructs+0x2f30>)
 8014102:	011b      	lsls	r3, r3, #4
 8014104:	440b      	add	r3, r1
 8014106:	330c      	adds	r3, #12
 8014108:	781b      	ldrb	r3, [r3, #0]
 801410a:	3b01      	subs	r3, #1
 801410c:	4413      	add	r3, r2
 801410e:	2b07      	cmp	r3, #7
 8014110:	d922      	bls.n	8014158 <readCanToStructs+0x2ee4>
					if(Debug_flag == 1)
 8014112:	4b26      	ldr	r3, [pc, #152]	; (80141ac <readCanToStructs+0x2f38>)
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b01      	cmp	r3, #1
 8014118:	d102      	bne.n	8014120 <readCanToStructs+0x2eac>
						printf("\nRCV OTH_INFO2\n");
 801411a:	482c      	ldr	r0, [pc, #176]	; (80141cc <readCanToStructs+0x2f58>)
 801411c:	f011 ffec 	bl	80260f8 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8014120:	4b24      	ldr	r3, [pc, #144]	; (80141b4 <readCanToStructs+0x2f40>)
 8014122:	4a25      	ldr	r2, [pc, #148]	; (80141b8 <readCanToStructs+0x2f44>)
 8014124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8014128:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = SET;
 801412c:	4b23      	ldr	r3, [pc, #140]	; (80141bc <readCanToStructs+0x2f48>)
 801412e:	2201      	movs	r2, #1
 8014130:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014132:	f005 f82f 	bl	8019194 <HAL_GetTick>
 8014136:	4603      	mov	r3, r0
 8014138:	4a21      	ldr	r2, [pc, #132]	; (80141c0 <readCanToStructs+0x2f4c>)
 801413a:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801413c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014140:	4a19      	ldr	r2, [pc, #100]	; (80141a8 <readCanToStructs+0x2f34>)
 8014142:	f240 4116 	movw	r1, #1046	; 0x416
 8014146:	fb01 f303 	mul.w	r3, r1, r3
 801414a:	4413      	add	r3, r2
 801414c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8014150:	2200      	movs	r2, #0
 8014152:	701a      	strb	r2, [r3, #0]
				break;
 8014154:	f000 bc76 	b.w	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8014158:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801415c:	4a12      	ldr	r2, [pc, #72]	; (80141a8 <readCanToStructs+0x2f34>)
 801415e:	f240 4116 	movw	r1, #1046	; 0x416
 8014162:	fb01 f303 	mul.w	r3, r1, r3
 8014166:	4413      	add	r3, r2
 8014168:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801416c:	2201      	movs	r2, #1
 801416e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8014170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014174:	490c      	ldr	r1, [pc, #48]	; (80141a8 <readCanToStructs+0x2f34>)
 8014176:	f240 4216 	movw	r2, #1046	; 0x416
 801417a:	fb03 f202 	mul.w	r2, r3, r2
 801417e:	440a      	add	r2, r1
 8014180:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8014184:	7812      	ldrb	r2, [r2, #0]
 8014186:	3201      	adds	r2, #1
 8014188:	b2d0      	uxtb	r0, r2
 801418a:	4a07      	ldr	r2, [pc, #28]	; (80141a8 <readCanToStructs+0x2f34>)
 801418c:	f240 4116 	movw	r1, #1046	; 0x416
 8014190:	fb01 f303 	mul.w	r3, r1, r3
 8014194:	4413      	add	r3, r2
 8014196:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801419a:	4602      	mov	r2, r0
 801419c:	701a      	strb	r2, [r3, #0]
				break;
 801419e:	f000 bc51 	b.w	8014a44 <readCanToStructs+0x37d0>
 80141a2:	bf00      	nop
 80141a4:	20007240 	.word	0x20007240
 80141a8:	20006a14 	.word	0x20006a14
 80141ac:	20000bbb 	.word	0x20000bbb
 80141b0:	0802ab64 	.word	0x0802ab64
 80141b4:	20003df4 	.word	0x20003df4
 80141b8:	20003dfc 	.word	0x20003dfc
 80141bc:	20003890 	.word	0x20003890
 80141c0:	20003894 	.word	0x20003894
 80141c4:	0802ab74 	.word	0x0802ab74
 80141c8:	0802ab54 	.word	0x0802ab54
 80141cc:	0802ab9c 	.word	0x0802ab9c
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80141d0:	4bbb      	ldr	r3, [pc, #748]	; (80144c0 <readCanToStructs+0x324c>)
 80141d2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80141d4:	4bbb      	ldr	r3, [pc, #748]	; (80144c4 <readCanToStructs+0x3250>)
 80141d6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80141da:	885b      	ldrh	r3, [r3, #2]
 80141dc:	4ab9      	ldr	r2, [pc, #740]	; (80144c4 <readCanToStructs+0x3250>)
 80141de:	011b      	lsls	r3, r3, #4
 80141e0:	4413      	add	r3, r2
 80141e2:	3304      	adds	r3, #4
 80141e4:	781b      	ldrb	r3, [r3, #0]
 80141e6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80141ea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d110      	bne.n	8014214 <readCanToStructs+0x2fa0>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80141f2:	2204      	movs	r2, #4
 80141f4:	2100      	movs	r1, #0
 80141f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80141f8:	f011 fdfa 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80141fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014200:	4ab1      	ldr	r2, [pc, #708]	; (80144c8 <readCanToStructs+0x3254>)
 8014202:	f240 4116 	movw	r1, #1046	; 0x416
 8014206:	fb01 f303 	mul.w	r3, r1, r3
 801420a:	4413      	add	r3, r2
 801420c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014210:	2200      	movs	r2, #0
 8014212:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8014214:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014218:	4aab      	ldr	r2, [pc, #684]	; (80144c8 <readCanToStructs+0x3254>)
 801421a:	f240 4116 	movw	r1, #1046	; 0x416
 801421e:	fb01 f303 	mul.w	r3, r1, r3
 8014222:	4413      	add	r3, r2
 8014224:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014228:	781b      	ldrb	r3, [r3, #0]
 801422a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801422e:	429a      	cmp	r2, r3
 8014230:	d011      	beq.n	8014256 <readCanToStructs+0x2fe2>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8014232:	2204      	movs	r2, #4
 8014234:	2100      	movs	r1, #0
 8014236:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014238:	f011 fdda 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801423c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014240:	4aa1      	ldr	r2, [pc, #644]	; (80144c8 <readCanToStructs+0x3254>)
 8014242:	f240 4116 	movw	r1, #1046	; 0x416
 8014246:	fb01 f303 	mul.w	r3, r1, r3
 801424a:	4413      	add	r3, r2
 801424c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014250:	2200      	movs	r2, #0
 8014252:	701a      	strb	r2, [r3, #0]
					break;
 8014254:	e3f6      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014256:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801425a:	4613      	mov	r3, r2
 801425c:	00db      	lsls	r3, r3, #3
 801425e:	1a9b      	subs	r3, r3, r2
 8014260:	461a      	mov	r2, r3
 8014262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014264:	4413      	add	r3, r2
 8014266:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014268:	2301      	movs	r3, #1
 801426a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801426e:	e016      	b.n	801429e <readCanToStructs+0x302a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014270:	4b94      	ldr	r3, [pc, #592]	; (80144c4 <readCanToStructs+0x3250>)
 8014272:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014276:	885b      	ldrh	r3, [r3, #2]
 8014278:	461a      	mov	r2, r3
 801427a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801427e:	4991      	ldr	r1, [pc, #580]	; (80144c4 <readCanToStructs+0x3250>)
 8014280:	0112      	lsls	r2, r2, #4
 8014282:	440a      	add	r2, r1
 8014284:	4413      	add	r3, r2
 8014286:	3304      	adds	r3, #4
 8014288:	781a      	ldrb	r2, [r3, #0]
 801428a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801428c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014290:	3301      	adds	r3, #1
 8014292:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014294:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014298:	3301      	adds	r3, #1
 801429a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801429e:	4b89      	ldr	r3, [pc, #548]	; (80144c4 <readCanToStructs+0x3250>)
 80142a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142a4:	885b      	ldrh	r3, [r3, #2]
 80142a6:	4a87      	ldr	r2, [pc, #540]	; (80144c4 <readCanToStructs+0x3250>)
 80142a8:	011b      	lsls	r3, r3, #4
 80142aa:	4413      	add	r3, r2
 80142ac:	330c      	adds	r3, #12
 80142ae:	781b      	ldrb	r3, [r3, #0]
 80142b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80142b4:	429a      	cmp	r2, r3
 80142b6:	d3db      	bcc.n	8014270 <readCanToStructs+0x2ffc>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 80142b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80142bc:	4a82      	ldr	r2, [pc, #520]	; (80144c8 <readCanToStructs+0x3254>)
 80142be:	f240 4116 	movw	r1, #1046	; 0x416
 80142c2:	fb01 f303 	mul.w	r3, r1, r3
 80142c6:	4413      	add	r3, r2
 80142c8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80142cc:	781b      	ldrb	r3, [r3, #0]
 80142ce:	461a      	mov	r2, r3
 80142d0:	4613      	mov	r3, r2
 80142d2:	00db      	lsls	r3, r3, #3
 80142d4:	1a9a      	subs	r2, r3, r2
 80142d6:	4b7b      	ldr	r3, [pc, #492]	; (80144c4 <readCanToStructs+0x3250>)
 80142d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80142dc:	885b      	ldrh	r3, [r3, #2]
 80142de:	4979      	ldr	r1, [pc, #484]	; (80144c4 <readCanToStructs+0x3250>)
 80142e0:	011b      	lsls	r3, r3, #4
 80142e2:	440b      	add	r3, r1
 80142e4:	330c      	adds	r3, #12
 80142e6:	781b      	ldrb	r3, [r3, #0]
 80142e8:	3b01      	subs	r3, #1
 80142ea:	4413      	add	r3, r2
 80142ec:	2b03      	cmp	r3, #3
 80142ee:	d914      	bls.n	801431a <readCanToStructs+0x30a6>
					printf("Received CAN_FAULT_INJECTION\n");
 80142f0:	4876      	ldr	r0, [pc, #472]	; (80144cc <readCanToStructs+0x3258>)
 80142f2:	f011 ff01 	bl	80260f8 <puts>
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80142f6:	f004 ff4d 	bl	8019194 <HAL_GetTick>
 80142fa:	4603      	mov	r3, r0
 80142fc:	4a74      	ldr	r2, [pc, #464]	; (80144d0 <readCanToStructs+0x325c>)
 80142fe:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014304:	4a70      	ldr	r2, [pc, #448]	; (80144c8 <readCanToStructs+0x3254>)
 8014306:	f240 4116 	movw	r1, #1046	; 0x416
 801430a:	fb01 f303 	mul.w	r3, r1, r3
 801430e:	4413      	add	r3, r2
 8014310:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014314:	2200      	movs	r2, #0
 8014316:	701a      	strb	r2, [r3, #0]
				break;
 8014318:	e394      	b.n	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 801431a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801431e:	4a6a      	ldr	r2, [pc, #424]	; (80144c8 <readCanToStructs+0x3254>)
 8014320:	f240 4116 	movw	r1, #1046	; 0x416
 8014324:	fb01 f303 	mul.w	r3, r1, r3
 8014328:	4413      	add	r3, r2
 801432a:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 801432e:	2201      	movs	r2, #1
 8014330:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8014332:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014336:	4964      	ldr	r1, [pc, #400]	; (80144c8 <readCanToStructs+0x3254>)
 8014338:	f240 4216 	movw	r2, #1046	; 0x416
 801433c:	fb03 f202 	mul.w	r2, r3, r2
 8014340:	440a      	add	r2, r1
 8014342:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8014346:	7812      	ldrb	r2, [r2, #0]
 8014348:	3201      	adds	r2, #1
 801434a:	b2d0      	uxtb	r0, r2
 801434c:	4a5e      	ldr	r2, [pc, #376]	; (80144c8 <readCanToStructs+0x3254>)
 801434e:	f240 4116 	movw	r1, #1046	; 0x416
 8014352:	fb01 f303 	mul.w	r3, r1, r3
 8014356:	4413      	add	r3, r2
 8014358:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801435c:	4602      	mov	r2, r0
 801435e:	701a      	strb	r2, [r3, #0]
				break;
 8014360:	e370      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014362:	4b5c      	ldr	r3, [pc, #368]	; (80144d4 <readCanToStructs+0x3260>)
 8014364:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014366:	4b57      	ldr	r3, [pc, #348]	; (80144c4 <readCanToStructs+0x3250>)
 8014368:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801436c:	885b      	ldrh	r3, [r3, #2]
 801436e:	4a55      	ldr	r2, [pc, #340]	; (80144c4 <readCanToStructs+0x3250>)
 8014370:	011b      	lsls	r3, r3, #4
 8014372:	4413      	add	r3, r2
 8014374:	3304      	adds	r3, #4
 8014376:	781b      	ldrb	r3, [r3, #0]
 8014378:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801437c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014380:	2b00      	cmp	r3, #0
 8014382:	d110      	bne.n	80143a6 <readCanToStructs+0x3132>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014384:	2284      	movs	r2, #132	; 0x84
 8014386:	2100      	movs	r1, #0
 8014388:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801438a:	f011 fd31 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801438e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014392:	4a4d      	ldr	r2, [pc, #308]	; (80144c8 <readCanToStructs+0x3254>)
 8014394:	f240 4116 	movw	r1, #1046	; 0x416
 8014398:	fb01 f303 	mul.w	r3, r1, r3
 801439c:	4413      	add	r3, r2
 801439e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80143a2:	2200      	movs	r2, #0
 80143a4:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 80143a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143aa:	4a47      	ldr	r2, [pc, #284]	; (80144c8 <readCanToStructs+0x3254>)
 80143ac:	f240 4116 	movw	r1, #1046	; 0x416
 80143b0:	fb01 f303 	mul.w	r3, r1, r3
 80143b4:	4413      	add	r3, r2
 80143b6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d011      	beq.n	80143e8 <readCanToStructs+0x3174>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80143c4:	2284      	movs	r2, #132	; 0x84
 80143c6:	2100      	movs	r1, #0
 80143c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80143ca:	f011 fd11 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80143ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80143d2:	4a3d      	ldr	r2, [pc, #244]	; (80144c8 <readCanToStructs+0x3254>)
 80143d4:	f240 4116 	movw	r1, #1046	; 0x416
 80143d8:	fb01 f303 	mul.w	r3, r1, r3
 80143dc:	4413      	add	r3, r2
 80143de:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80143e2:	2200      	movs	r2, #0
 80143e4:	701a      	strb	r2, [r3, #0]
					break;
 80143e6:	e32d      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80143e8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80143ec:	4613      	mov	r3, r2
 80143ee:	00db      	lsls	r3, r3, #3
 80143f0:	1a9b      	subs	r3, r3, r2
 80143f2:	461a      	mov	r2, r3
 80143f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143f6:	4413      	add	r3, r2
 80143f8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80143fa:	2301      	movs	r3, #1
 80143fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014400:	e016      	b.n	8014430 <readCanToStructs+0x31bc>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014402:	4b30      	ldr	r3, [pc, #192]	; (80144c4 <readCanToStructs+0x3250>)
 8014404:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014408:	885b      	ldrh	r3, [r3, #2]
 801440a:	461a      	mov	r2, r3
 801440c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014410:	492c      	ldr	r1, [pc, #176]	; (80144c4 <readCanToStructs+0x3250>)
 8014412:	0112      	lsls	r2, r2, #4
 8014414:	440a      	add	r2, r1
 8014416:	4413      	add	r3, r2
 8014418:	3304      	adds	r3, #4
 801441a:	781a      	ldrb	r2, [r3, #0]
 801441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801441e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014422:	3301      	adds	r3, #1
 8014424:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014426:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801442a:	3301      	adds	r3, #1
 801442c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014430:	4b24      	ldr	r3, [pc, #144]	; (80144c4 <readCanToStructs+0x3250>)
 8014432:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014436:	885b      	ldrh	r3, [r3, #2]
 8014438:	4a22      	ldr	r2, [pc, #136]	; (80144c4 <readCanToStructs+0x3250>)
 801443a:	011b      	lsls	r3, r3, #4
 801443c:	4413      	add	r3, r2
 801443e:	330c      	adds	r3, #12
 8014440:	781b      	ldrb	r3, [r3, #0]
 8014442:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014446:	429a      	cmp	r2, r3
 8014448:	d3db      	bcc.n	8014402 <readCanToStructs+0x318e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 801444a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801444e:	4a1e      	ldr	r2, [pc, #120]	; (80144c8 <readCanToStructs+0x3254>)
 8014450:	f240 4116 	movw	r1, #1046	; 0x416
 8014454:	fb01 f303 	mul.w	r3, r1, r3
 8014458:	4413      	add	r3, r2
 801445a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801445e:	781b      	ldrb	r3, [r3, #0]
 8014460:	461a      	mov	r2, r3
 8014462:	4613      	mov	r3, r2
 8014464:	00db      	lsls	r3, r3, #3
 8014466:	1a9a      	subs	r2, r3, r2
 8014468:	4b16      	ldr	r3, [pc, #88]	; (80144c4 <readCanToStructs+0x3250>)
 801446a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801446e:	885b      	ldrh	r3, [r3, #2]
 8014470:	4914      	ldr	r1, [pc, #80]	; (80144c4 <readCanToStructs+0x3250>)
 8014472:	011b      	lsls	r3, r3, #4
 8014474:	440b      	add	r3, r1
 8014476:	330c      	adds	r3, #12
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	3b01      	subs	r3, #1
 801447c:	4413      	add	r3, r2
 801447e:	2b83      	cmp	r3, #131	; 0x83
 8014480:	d932      	bls.n	80144e8 <readCanToStructs+0x3274>
					if(Debug_flag == 1)
 8014482:	4b15      	ldr	r3, [pc, #84]	; (80144d8 <readCanToStructs+0x3264>)
 8014484:	781b      	ldrb	r3, [r3, #0]
 8014486:	2b01      	cmp	r3, #1
 8014488:	d102      	bne.n	8014490 <readCanToStructs+0x321c>
						printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 801448a:	4814      	ldr	r0, [pc, #80]	; (80144dc <readCanToStructs+0x3268>)
 801448c:	f011 fe34 	bl	80260f8 <puts>
					Received_CAN_Relay_Status = YES;
 8014490:	4b13      	ldr	r3, [pc, #76]	; (80144e0 <readCanToStructs+0x326c>)
 8014492:	2201      	movs	r2, #1
 8014494:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = SET;
 8014496:	4b13      	ldr	r3, [pc, #76]	; (80144e4 <readCanToStructs+0x3270>)
 8014498:	2201      	movs	r2, #1
 801449a:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 801449c:	f004 fe7a 	bl	8019194 <HAL_GetTick>
 80144a0:	4603      	mov	r3, r0
 80144a2:	4a0b      	ldr	r2, [pc, #44]	; (80144d0 <readCanToStructs+0x325c>)
 80144a4:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80144a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144aa:	4a07      	ldr	r2, [pc, #28]	; (80144c8 <readCanToStructs+0x3254>)
 80144ac:	f240 4116 	movw	r1, #1046	; 0x416
 80144b0:	fb01 f303 	mul.w	r3, r1, r3
 80144b4:	4413      	add	r3, r2
 80144b6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80144ba:	2200      	movs	r2, #0
 80144bc:	701a      	strb	r2, [r3, #0]
				break;
 80144be:	e2c1      	b.n	8014a44 <readCanToStructs+0x37d0>
 80144c0:	20003de8 	.word	0x20003de8
 80144c4:	20007240 	.word	0x20007240
 80144c8:	20006a14 	.word	0x20006a14
 80144cc:	0802abac 	.word	0x0802abac
 80144d0:	20003894 	.word	0x20003894
 80144d4:	20003e88 	.word	0x20003e88
 80144d8:	20000bbb 	.word	0x20000bbb
 80144dc:	0802abcc 	.word	0x0802abcc
 80144e0:	20003891 	.word	0x20003891
 80144e4:	20003890 	.word	0x20003890
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80144e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80144ec:	4aa3      	ldr	r2, [pc, #652]	; (801477c <readCanToStructs+0x3508>)
 80144ee:	f240 4116 	movw	r1, #1046	; 0x416
 80144f2:	fb01 f303 	mul.w	r3, r1, r3
 80144f6:	4413      	add	r3, r2
 80144f8:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80144fc:	2201      	movs	r2, #1
 80144fe:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014500:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014504:	499d      	ldr	r1, [pc, #628]	; (801477c <readCanToStructs+0x3508>)
 8014506:	f240 4216 	movw	r2, #1046	; 0x416
 801450a:	fb03 f202 	mul.w	r2, r3, r2
 801450e:	440a      	add	r2, r1
 8014510:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8014514:	7812      	ldrb	r2, [r2, #0]
 8014516:	3201      	adds	r2, #1
 8014518:	b2d0      	uxtb	r0, r2
 801451a:	4a98      	ldr	r2, [pc, #608]	; (801477c <readCanToStructs+0x3508>)
 801451c:	f240 4116 	movw	r1, #1046	; 0x416
 8014520:	fb01 f303 	mul.w	r3, r1, r3
 8014524:	4413      	add	r3, r2
 8014526:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801452a:	4602      	mov	r2, r0
 801452c:	701a      	strb	r2, [r3, #0]
				break;
 801452e:	e289      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8014530:	4b93      	ldr	r3, [pc, #588]	; (8014780 <readCanToStructs+0x350c>)
 8014532:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014534:	4b93      	ldr	r3, [pc, #588]	; (8014784 <readCanToStructs+0x3510>)
 8014536:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801453a:	885b      	ldrh	r3, [r3, #2]
 801453c:	4a91      	ldr	r2, [pc, #580]	; (8014784 <readCanToStructs+0x3510>)
 801453e:	011b      	lsls	r3, r3, #4
 8014540:	4413      	add	r3, r2
 8014542:	3304      	adds	r3, #4
 8014544:	781b      	ldrb	r3, [r3, #0]
 8014546:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801454a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801454e:	2b00      	cmp	r3, #0
 8014550:	d110      	bne.n	8014574 <readCanToStructs+0x3300>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014552:	2284      	movs	r2, #132	; 0x84
 8014554:	2100      	movs	r1, #0
 8014556:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014558:	f011 fc4a 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801455c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014560:	4a86      	ldr	r2, [pc, #536]	; (801477c <readCanToStructs+0x3508>)
 8014562:	f240 4116 	movw	r1, #1046	; 0x416
 8014566:	fb01 f303 	mul.w	r3, r1, r3
 801456a:	4413      	add	r3, r2
 801456c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014570:	2200      	movs	r2, #0
 8014572:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8014574:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014578:	4a80      	ldr	r2, [pc, #512]	; (801477c <readCanToStructs+0x3508>)
 801457a:	f240 4116 	movw	r1, #1046	; 0x416
 801457e:	fb01 f303 	mul.w	r3, r1, r3
 8014582:	4413      	add	r3, r2
 8014584:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014588:	781b      	ldrb	r3, [r3, #0]
 801458a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801458e:	429a      	cmp	r2, r3
 8014590:	d011      	beq.n	80145b6 <readCanToStructs+0x3342>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8014592:	2284      	movs	r2, #132	; 0x84
 8014594:	2100      	movs	r1, #0
 8014596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014598:	f011 fc2a 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801459c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80145a0:	4a76      	ldr	r2, [pc, #472]	; (801477c <readCanToStructs+0x3508>)
 80145a2:	f240 4116 	movw	r1, #1046	; 0x416
 80145a6:	fb01 f303 	mul.w	r3, r1, r3
 80145aa:	4413      	add	r3, r2
 80145ac:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80145b0:	2200      	movs	r2, #0
 80145b2:	701a      	strb	r2, [r3, #0]
					break;
 80145b4:	e246      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 80145b6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80145ba:	4613      	mov	r3, r2
 80145bc:	00db      	lsls	r3, r3, #3
 80145be:	1a9b      	subs	r3, r3, r2
 80145c0:	461a      	mov	r2, r3
 80145c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145c4:	4413      	add	r3, r2
 80145c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80145c8:	2301      	movs	r3, #1
 80145ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80145ce:	e016      	b.n	80145fe <readCanToStructs+0x338a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80145d0:	4b6c      	ldr	r3, [pc, #432]	; (8014784 <readCanToStructs+0x3510>)
 80145d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80145d6:	885b      	ldrh	r3, [r3, #2]
 80145d8:	461a      	mov	r2, r3
 80145da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145de:	4969      	ldr	r1, [pc, #420]	; (8014784 <readCanToStructs+0x3510>)
 80145e0:	0112      	lsls	r2, r2, #4
 80145e2:	440a      	add	r2, r1
 80145e4:	4413      	add	r3, r2
 80145e6:	3304      	adds	r3, #4
 80145e8:	781a      	ldrb	r2, [r3, #0]
 80145ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145ec:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80145ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80145f0:	3301      	adds	r3, #1
 80145f2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80145f4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145f8:	3301      	adds	r3, #1
 80145fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80145fe:	4b61      	ldr	r3, [pc, #388]	; (8014784 <readCanToStructs+0x3510>)
 8014600:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014604:	885b      	ldrh	r3, [r3, #2]
 8014606:	4a5f      	ldr	r2, [pc, #380]	; (8014784 <readCanToStructs+0x3510>)
 8014608:	011b      	lsls	r3, r3, #4
 801460a:	4413      	add	r3, r2
 801460c:	330c      	adds	r3, #12
 801460e:	781b      	ldrb	r3, [r3, #0]
 8014610:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014614:	429a      	cmp	r2, r3
 8014616:	d3db      	bcc.n	80145d0 <readCanToStructs+0x335c>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8014618:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801461c:	4a57      	ldr	r2, [pc, #348]	; (801477c <readCanToStructs+0x3508>)
 801461e:	f240 4116 	movw	r1, #1046	; 0x416
 8014622:	fb01 f303 	mul.w	r3, r1, r3
 8014626:	4413      	add	r3, r2
 8014628:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	461a      	mov	r2, r3
 8014630:	4613      	mov	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	1a9a      	subs	r2, r3, r2
 8014636:	4b53      	ldr	r3, [pc, #332]	; (8014784 <readCanToStructs+0x3510>)
 8014638:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801463c:	885b      	ldrh	r3, [r3, #2]
 801463e:	4951      	ldr	r1, [pc, #324]	; (8014784 <readCanToStructs+0x3510>)
 8014640:	011b      	lsls	r3, r3, #4
 8014642:	440b      	add	r3, r1
 8014644:	330c      	adds	r3, #12
 8014646:	781b      	ldrb	r3, [r3, #0]
 8014648:	3b01      	subs	r3, #1
 801464a:	4413      	add	r3, r2
 801464c:	2b83      	cmp	r3, #131	; 0x83
 801464e:	d91e      	bls.n	801468e <readCanToStructs+0x341a>
					if(Debug_flag == 1)
 8014650:	4b4d      	ldr	r3, [pc, #308]	; (8014788 <readCanToStructs+0x3514>)
 8014652:	781b      	ldrb	r3, [r3, #0]
 8014654:	2b01      	cmp	r3, #1
 8014656:	d102      	bne.n	801465e <readCanToStructs+0x33ea>
						printf("\nRCV RELAY_DATA_EI2\n");
 8014658:	484c      	ldr	r0, [pc, #304]	; (801478c <readCanToStructs+0x3518>)
 801465a:	f011 fd4d 	bl	80260f8 <puts>
					Medha_CAN_Xchanging_Happening = SET;
 801465e:	4b4c      	ldr	r3, [pc, #304]	; (8014790 <readCanToStructs+0x351c>)
 8014660:	2201      	movs	r2, #1
 8014662:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8014664:	f004 fd96 	bl	8019194 <HAL_GetTick>
 8014668:	4603      	mov	r3, r0
 801466a:	4a4a      	ldr	r2, [pc, #296]	; (8014794 <readCanToStructs+0x3520>)
 801466c:	6013      	str	r3, [r2, #0]
					Received_CAN_Relay_Status = YES;
 801466e:	4b4a      	ldr	r3, [pc, #296]	; (8014798 <readCanToStructs+0x3524>)
 8014670:	2201      	movs	r2, #1
 8014672:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014674:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014678:	4a40      	ldr	r2, [pc, #256]	; (801477c <readCanToStructs+0x3508>)
 801467a:	f240 4116 	movw	r1, #1046	; 0x416
 801467e:	fb01 f303 	mul.w	r3, r1, r3
 8014682:	4413      	add	r3, r2
 8014684:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014688:	2200      	movs	r2, #0
 801468a:	701a      	strb	r2, [r3, #0]
				break;
 801468c:	e1da      	b.n	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 801468e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014692:	4a3a      	ldr	r2, [pc, #232]	; (801477c <readCanToStructs+0x3508>)
 8014694:	f240 4116 	movw	r1, #1046	; 0x416
 8014698:	fb01 f303 	mul.w	r3, r1, r3
 801469c:	4413      	add	r3, r2
 801469e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80146a2:	2201      	movs	r2, #1
 80146a4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80146a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80146aa:	4934      	ldr	r1, [pc, #208]	; (801477c <readCanToStructs+0x3508>)
 80146ac:	f240 4216 	movw	r2, #1046	; 0x416
 80146b0:	fb03 f202 	mul.w	r2, r3, r2
 80146b4:	440a      	add	r2, r1
 80146b6:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80146ba:	7812      	ldrb	r2, [r2, #0]
 80146bc:	3201      	adds	r2, #1
 80146be:	b2d0      	uxtb	r0, r2
 80146c0:	4a2e      	ldr	r2, [pc, #184]	; (801477c <readCanToStructs+0x3508>)
 80146c2:	f240 4116 	movw	r1, #1046	; 0x416
 80146c6:	fb01 f303 	mul.w	r3, r1, r3
 80146ca:	4413      	add	r3, r2
 80146cc:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80146d0:	4602      	mov	r2, r0
 80146d2:	701a      	strb	r2, [r3, #0]
				break;
 80146d4:	e1b6      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80146d6:	4b31      	ldr	r3, [pc, #196]	; (801479c <readCanToStructs+0x3528>)
 80146d8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80146da:	4b2a      	ldr	r3, [pc, #168]	; (8014784 <readCanToStructs+0x3510>)
 80146dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80146e0:	885b      	ldrh	r3, [r3, #2]
 80146e2:	4a28      	ldr	r2, [pc, #160]	; (8014784 <readCanToStructs+0x3510>)
 80146e4:	011b      	lsls	r3, r3, #4
 80146e6:	4413      	add	r3, r2
 80146e8:	3304      	adds	r3, #4
 80146ea:	781b      	ldrb	r3, [r3, #0]
 80146ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80146f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d110      	bne.n	801471a <readCanToStructs+0x34a6>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80146f8:	2202      	movs	r2, #2
 80146fa:	2100      	movs	r1, #0
 80146fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80146fe:	f011 fb77 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014702:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014706:	4a1d      	ldr	r2, [pc, #116]	; (801477c <readCanToStructs+0x3508>)
 8014708:	f240 4116 	movw	r1, #1046	; 0x416
 801470c:	fb01 f303 	mul.w	r3, r1, r3
 8014710:	4413      	add	r3, r2
 8014712:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014716:	2200      	movs	r2, #0
 8014718:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 801471a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801471e:	4a17      	ldr	r2, [pc, #92]	; (801477c <readCanToStructs+0x3508>)
 8014720:	f240 4116 	movw	r1, #1046	; 0x416
 8014724:	fb01 f303 	mul.w	r3, r1, r3
 8014728:	4413      	add	r3, r2
 801472a:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801472e:	781b      	ldrb	r3, [r3, #0]
 8014730:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014734:	429a      	cmp	r2, r3
 8014736:	d014      	beq.n	8014762 <readCanToStructs+0x34ee>
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014738:	4819      	ldr	r0, [pc, #100]	; (80147a0 <readCanToStructs+0x352c>)
 801473a:	f011 fcdd 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801473e:	2202      	movs	r2, #2
 8014740:	2100      	movs	r1, #0
 8014742:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014744:	f011 fb54 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8014748:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801474c:	4a0b      	ldr	r2, [pc, #44]	; (801477c <readCanToStructs+0x3508>)
 801474e:	f240 4116 	movw	r1, #1046	; 0x416
 8014752:	fb01 f303 	mul.w	r3, r1, r3
 8014756:	4413      	add	r3, r2
 8014758:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801475c:	2200      	movs	r2, #0
 801475e:	701a      	strb	r2, [r3, #0]
					break;
 8014760:	e170      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 8014762:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014766:	4613      	mov	r3, r2
 8014768:	00db      	lsls	r3, r3, #3
 801476a:	1a9b      	subs	r3, r3, r2
 801476c:	461a      	mov	r2, r3
 801476e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014770:	4413      	add	r3, r2
 8014772:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014774:	2301      	movs	r3, #1
 8014776:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801477a:	e02a      	b.n	80147d2 <readCanToStructs+0x355e>
 801477c:	20006a14 	.word	0x20006a14
 8014780:	20003e88 	.word	0x20003e88
 8014784:	20007240 	.word	0x20007240
 8014788:	20000bbb 	.word	0x20000bbb
 801478c:	0802abe8 	.word	0x0802abe8
 8014790:	20003890 	.word	0x20003890
 8014794:	20003894 	.word	0x20003894
 8014798:	20003891 	.word	0x20003891
 801479c:	20000bb8 	.word	0x20000bb8
 80147a0:	0802aa14 	.word	0x0802aa14
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80147a4:	4bbc      	ldr	r3, [pc, #752]	; (8014a98 <readCanToStructs+0x3824>)
 80147a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80147aa:	885b      	ldrh	r3, [r3, #2]
 80147ac:	461a      	mov	r2, r3
 80147ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147b2:	49b9      	ldr	r1, [pc, #740]	; (8014a98 <readCanToStructs+0x3824>)
 80147b4:	0112      	lsls	r2, r2, #4
 80147b6:	440a      	add	r2, r1
 80147b8:	4413      	add	r3, r2
 80147ba:	3304      	adds	r3, #4
 80147bc:	781a      	ldrb	r2, [r3, #0]
 80147be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80147c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147c4:	3301      	adds	r3, #1
 80147c6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80147c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80147cc:	3301      	adds	r3, #1
 80147ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80147d2:	4bb1      	ldr	r3, [pc, #708]	; (8014a98 <readCanToStructs+0x3824>)
 80147d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80147d8:	885b      	ldrh	r3, [r3, #2]
 80147da:	4aaf      	ldr	r2, [pc, #700]	; (8014a98 <readCanToStructs+0x3824>)
 80147dc:	011b      	lsls	r3, r3, #4
 80147de:	4413      	add	r3, r2
 80147e0:	330c      	adds	r3, #12
 80147e2:	781b      	ldrb	r3, [r3, #0]
 80147e4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d3db      	bcc.n	80147a4 <readCanToStructs+0x3530>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 80147ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80147f0:	4aaa      	ldr	r2, [pc, #680]	; (8014a9c <readCanToStructs+0x3828>)
 80147f2:	f240 4116 	movw	r1, #1046	; 0x416
 80147f6:	fb01 f303 	mul.w	r3, r1, r3
 80147fa:	4413      	add	r3, r2
 80147fc:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	461a      	mov	r2, r3
 8014804:	4613      	mov	r3, r2
 8014806:	00db      	lsls	r3, r3, #3
 8014808:	1a9a      	subs	r2, r3, r2
 801480a:	4ba3      	ldr	r3, [pc, #652]	; (8014a98 <readCanToStructs+0x3824>)
 801480c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014810:	885b      	ldrh	r3, [r3, #2]
 8014812:	49a1      	ldr	r1, [pc, #644]	; (8014a98 <readCanToStructs+0x3824>)
 8014814:	011b      	lsls	r3, r3, #4
 8014816:	440b      	add	r3, r1
 8014818:	330c      	adds	r3, #12
 801481a:	781b      	ldrb	r3, [r3, #0]
 801481c:	3b01      	subs	r3, #1
 801481e:	4413      	add	r3, r2
 8014820:	2b01      	cmp	r3, #1
 8014822:	d919      	bls.n	8014858 <readCanToStructs+0x35e4>
					if(Debug_flag == 1)
 8014824:	4b9e      	ldr	r3, [pc, #632]	; (8014aa0 <readCanToStructs+0x382c>)
 8014826:	781b      	ldrb	r3, [r3, #0]
 8014828:	2b01      	cmp	r3, #1
 801482a:	d105      	bne.n	8014838 <readCanToStructs+0x35c4>
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 801482c:	4b9d      	ldr	r3, [pc, #628]	; (8014aa4 <readCanToStructs+0x3830>)
 801482e:	881b      	ldrh	r3, [r3, #0]
 8014830:	4619      	mov	r1, r3
 8014832:	489d      	ldr	r0, [pc, #628]	; (8014aa8 <readCanToStructs+0x3834>)
 8014834:	f011 fbc4 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8014838:	4b9c      	ldr	r3, [pc, #624]	; (8014aac <readCanToStructs+0x3838>)
 801483a:	2201      	movs	r2, #1
 801483c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 801483e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014842:	4a96      	ldr	r2, [pc, #600]	; (8014a9c <readCanToStructs+0x3828>)
 8014844:	f240 4116 	movw	r1, #1046	; 0x416
 8014848:	fb01 f303 	mul.w	r3, r1, r3
 801484c:	4413      	add	r3, r2
 801484e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8014852:	2200      	movs	r2, #0
 8014854:	701a      	strb	r2, [r3, #0]
				break;
 8014856:	e0f5      	b.n	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 8014858:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801485c:	4a8f      	ldr	r2, [pc, #572]	; (8014a9c <readCanToStructs+0x3828>)
 801485e:	f240 4116 	movw	r1, #1046	; 0x416
 8014862:	fb01 f303 	mul.w	r3, r1, r3
 8014866:	4413      	add	r3, r2
 8014868:	f203 4312 	addw	r3, r3, #1042	; 0x412
 801486c:	2201      	movs	r2, #1
 801486e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8014870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014874:	4989      	ldr	r1, [pc, #548]	; (8014a9c <readCanToStructs+0x3828>)
 8014876:	f240 4216 	movw	r2, #1046	; 0x416
 801487a:	fb03 f202 	mul.w	r2, r3, r2
 801487e:	440a      	add	r2, r1
 8014880:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8014884:	7812      	ldrb	r2, [r2, #0]
 8014886:	3201      	adds	r2, #1
 8014888:	b2d0      	uxtb	r0, r2
 801488a:	4a84      	ldr	r2, [pc, #528]	; (8014a9c <readCanToStructs+0x3828>)
 801488c:	f240 4116 	movw	r1, #1046	; 0x416
 8014890:	fb01 f303 	mul.w	r3, r1, r3
 8014894:	4413      	add	r3, r2
 8014896:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801489a:	4602      	mov	r2, r0
 801489c:	701a      	strb	r2, [r3, #0]
				break;
 801489e:	e0d1      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 80148a0:	4b80      	ldr	r3, [pc, #512]	; (8014aa4 <readCanToStructs+0x3830>)
 80148a2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80148a4:	4b7c      	ldr	r3, [pc, #496]	; (8014a98 <readCanToStructs+0x3824>)
 80148a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80148aa:	885b      	ldrh	r3, [r3, #2]
 80148ac:	4a7a      	ldr	r2, [pc, #488]	; (8014a98 <readCanToStructs+0x3824>)
 80148ae:	011b      	lsls	r3, r3, #4
 80148b0:	4413      	add	r3, r2
 80148b2:	3304      	adds	r3, #4
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80148ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d110      	bne.n	80148e4 <readCanToStructs+0x3670>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80148c2:	2202      	movs	r2, #2
 80148c4:	2100      	movs	r1, #0
 80148c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148c8:	f011 fa92 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80148cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148d0:	4a72      	ldr	r2, [pc, #456]	; (8014a9c <readCanToStructs+0x3828>)
 80148d2:	f240 4116 	movw	r1, #1046	; 0x416
 80148d6:	fb01 f303 	mul.w	r3, r1, r3
 80148da:	4413      	add	r3, r2
 80148dc:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80148e0:	2200      	movs	r2, #0
 80148e2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 80148e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80148e8:	4a6c      	ldr	r2, [pc, #432]	; (8014a9c <readCanToStructs+0x3828>)
 80148ea:	f240 4116 	movw	r1, #1046	; 0x416
 80148ee:	fb01 f303 	mul.w	r3, r1, r3
 80148f2:	4413      	add	r3, r2
 80148f4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80148f8:	781b      	ldrb	r3, [r3, #0]
 80148fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80148fe:	429a      	cmp	r2, r3
 8014900:	d014      	beq.n	801492c <readCanToStructs+0x36b8>
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8014902:	486b      	ldr	r0, [pc, #428]	; (8014ab0 <readCanToStructs+0x383c>)
 8014904:	f011 fbf8 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8014908:	2202      	movs	r2, #2
 801490a:	2100      	movs	r1, #0
 801490c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801490e:	f011 fa6f 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8014912:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014916:	4a61      	ldr	r2, [pc, #388]	; (8014a9c <readCanToStructs+0x3828>)
 8014918:	f240 4116 	movw	r1, #1046	; 0x416
 801491c:	fb01 f303 	mul.w	r3, r1, r3
 8014920:	4413      	add	r3, r2
 8014922:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014926:	2200      	movs	r2, #0
 8014928:	701a      	strb	r2, [r3, #0]
					break;
 801492a:	e08b      	b.n	8014a44 <readCanToStructs+0x37d0>
				uc_pp_charPtr += (7 * uc_seqNo);
 801492c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014930:	4613      	mov	r3, r2
 8014932:	00db      	lsls	r3, r3, #3
 8014934:	1a9b      	subs	r3, r3, r2
 8014936:	461a      	mov	r2, r3
 8014938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493a:	4413      	add	r3, r2
 801493c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801493e:	2301      	movs	r3, #1
 8014940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014944:	e016      	b.n	8014974 <readCanToStructs+0x3700>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014946:	4b54      	ldr	r3, [pc, #336]	; (8014a98 <readCanToStructs+0x3824>)
 8014948:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801494c:	885b      	ldrh	r3, [r3, #2]
 801494e:	461a      	mov	r2, r3
 8014950:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014954:	4950      	ldr	r1, [pc, #320]	; (8014a98 <readCanToStructs+0x3824>)
 8014956:	0112      	lsls	r2, r2, #4
 8014958:	440a      	add	r2, r1
 801495a:	4413      	add	r3, r2
 801495c:	3304      	adds	r3, #4
 801495e:	781a      	ldrb	r2, [r3, #0]
 8014960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014962:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014966:	3301      	adds	r3, #1
 8014968:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801496a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801496e:	3301      	adds	r3, #1
 8014970:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014974:	4b48      	ldr	r3, [pc, #288]	; (8014a98 <readCanToStructs+0x3824>)
 8014976:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801497a:	885b      	ldrh	r3, [r3, #2]
 801497c:	4a46      	ldr	r2, [pc, #280]	; (8014a98 <readCanToStructs+0x3824>)
 801497e:	011b      	lsls	r3, r3, #4
 8014980:	4413      	add	r3, r2
 8014982:	330c      	adds	r3, #12
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801498a:	429a      	cmp	r2, r3
 801498c:	d3db      	bcc.n	8014946 <readCanToStructs+0x36d2>
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801498e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014992:	4a42      	ldr	r2, [pc, #264]	; (8014a9c <readCanToStructs+0x3828>)
 8014994:	f240 4116 	movw	r1, #1046	; 0x416
 8014998:	fb01 f303 	mul.w	r3, r1, r3
 801499c:	4413      	add	r3, r2
 801499e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80149a2:	781b      	ldrb	r3, [r3, #0]
 80149a4:	461a      	mov	r2, r3
 80149a6:	4613      	mov	r3, r2
 80149a8:	00db      	lsls	r3, r3, #3
 80149aa:	1a9a      	subs	r2, r3, r2
 80149ac:	4b3a      	ldr	r3, [pc, #232]	; (8014a98 <readCanToStructs+0x3824>)
 80149ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80149b2:	885b      	ldrh	r3, [r3, #2]
 80149b4:	4938      	ldr	r1, [pc, #224]	; (8014a98 <readCanToStructs+0x3824>)
 80149b6:	011b      	lsls	r3, r3, #4
 80149b8:	440b      	add	r3, r1
 80149ba:	330c      	adds	r3, #12
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	3b01      	subs	r3, #1
 80149c0:	4413      	add	r3, r2
 80149c2:	2b01      	cmp	r3, #1
 80149c4:	d919      	bls.n	80149fa <readCanToStructs+0x3786>
					if(Debug_flag == 1)
 80149c6:	4b36      	ldr	r3, [pc, #216]	; (8014aa0 <readCanToStructs+0x382c>)
 80149c8:	781b      	ldrb	r3, [r3, #0]
 80149ca:	2b01      	cmp	r3, #1
 80149cc:	d105      	bne.n	80149da <readCanToStructs+0x3766>
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80149ce:	4b35      	ldr	r3, [pc, #212]	; (8014aa4 <readCanToStructs+0x3830>)
 80149d0:	881b      	ldrh	r3, [r3, #0]
 80149d2:	4619      	mov	r1, r3
 80149d4:	4837      	ldr	r0, [pc, #220]	; (8014ab4 <readCanToStructs+0x3840>)
 80149d6:	f011 faf3 	bl	8025fc0 <iprintf>
					Is_CAN_Exchange_happening = YES;
 80149da:	4b34      	ldr	r3, [pc, #208]	; (8014aac <readCanToStructs+0x3838>)
 80149dc:	2201      	movs	r2, #1
 80149de:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80149e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149e4:	4a2d      	ldr	r2, [pc, #180]	; (8014a9c <readCanToStructs+0x3828>)
 80149e6:	f240 4116 	movw	r1, #1046	; 0x416
 80149ea:	fb01 f303 	mul.w	r3, r1, r3
 80149ee:	4413      	add	r3, r2
 80149f0:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80149f4:	2200      	movs	r2, #0
 80149f6:	701a      	strb	r2, [r3, #0]
				break;
 80149f8:	e024      	b.n	8014a44 <readCanToStructs+0x37d0>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 80149fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80149fe:	4a27      	ldr	r2, [pc, #156]	; (8014a9c <readCanToStructs+0x3828>)
 8014a00:	f240 4116 	movw	r1, #1046	; 0x416
 8014a04:	fb01 f303 	mul.w	r3, r1, r3
 8014a08:	4413      	add	r3, r2
 8014a0a:	f203 4314 	addw	r3, r3, #1044	; 0x414
 8014a0e:	2201      	movs	r2, #1
 8014a10:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 8014a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014a16:	4921      	ldr	r1, [pc, #132]	; (8014a9c <readCanToStructs+0x3828>)
 8014a18:	f240 4216 	movw	r2, #1046	; 0x416
 8014a1c:	fb03 f202 	mul.w	r2, r3, r2
 8014a20:	440a      	add	r2, r1
 8014a22:	f202 4215 	addw	r2, r2, #1045	; 0x415
 8014a26:	7812      	ldrb	r2, [r2, #0]
 8014a28:	3201      	adds	r2, #1
 8014a2a:	b2d0      	uxtb	r0, r2
 8014a2c:	4a1b      	ldr	r2, [pc, #108]	; (8014a9c <readCanToStructs+0x3828>)
 8014a2e:	f240 4116 	movw	r1, #1046	; 0x416
 8014a32:	fb01 f303 	mul.w	r3, r1, r3
 8014a36:	4413      	add	r3, r2
 8014a38:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8014a3c:	4602      	mov	r2, r0
 8014a3e:	701a      	strb	r2, [r3, #0]
				break;
 8014a40:	e000      	b.n	8014a44 <readCanToStructs+0x37d0>
				break;
 8014a42:	bf00      	nop
			}
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8014a44:	4b14      	ldr	r3, [pc, #80]	; (8014a98 <readCanToStructs+0x3824>)
 8014a46:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a4a:	885b      	ldrh	r3, [r3, #2]
 8014a4c:	011b      	lsls	r3, r3, #4
 8014a4e:	4a12      	ldr	r2, [pc, #72]	; (8014a98 <readCanToStructs+0x3824>)
 8014a50:	4413      	add	r3, r2
 8014a52:	2210      	movs	r2, #16
 8014a54:	2100      	movs	r1, #0
 8014a56:	4618      	mov	r0, r3
 8014a58:	f011 f9ca 	bl	8025df0 <memset>
			canRead.Out++;
 8014a5c:	4b0e      	ldr	r3, [pc, #56]	; (8014a98 <readCanToStructs+0x3824>)
 8014a5e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a62:	885b      	ldrh	r3, [r3, #2]
 8014a64:	3301      	adds	r3, #1
 8014a66:	b29a      	uxth	r2, r3
 8014a68:	4b0b      	ldr	r3, [pc, #44]	; (8014a98 <readCanToStructs+0x3824>)
 8014a6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a6e:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8014a70:	4b09      	ldr	r3, [pc, #36]	; (8014a98 <readCanToStructs+0x3824>)
 8014a72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a76:	885b      	ldrh	r3, [r3, #2]
 8014a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a7c:	d104      	bne.n	8014a88 <readCanToStructs+0x3814>
				canRead.Out = 0;
 8014a7e:	4b06      	ldr	r3, [pc, #24]	; (8014a98 <readCanToStructs+0x3824>)
 8014a80:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014a84:	2200      	movs	r2, #0
 8014a86:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8014a88:	f7fc fb9e 	bl	80111c8 <canDataReady>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	f47e af9b 	bne.w	80139ca <readCanToStructs+0x2756>
		}
		/* __________ MEDHA _________ */
	}
	break;
 8014a94:	f000 bcdc 	b.w	8015450 <readCanToStructs+0x41dc>
 8014a98:	20007240 	.word	0x20007240
 8014a9c:	20006a14 	.word	0x20006a14
 8014aa0:	20000bbb 	.word	0x20000bbb
 8014aa4:	20000bb8 	.word	0x20000bb8
 8014aa8:	0802aa3c 	.word	0x0802aa3c
 8014aac:	2000030b 	.word	0x2000030b
 8014ab0:	0802aa50 	.word	0x0802aa50
 8014ab4:	0802aa78 	.word	0x0802aa78
	case KYOSAN:
	{
		/* __________ KYOSAN _________ */
		while(canDataReady())
		{
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8014ab8:	4bb3      	ldr	r3, [pc, #716]	; (8014d88 <readCanToStructs+0x3b14>)
 8014aba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014abe:	885b      	ldrh	r3, [r3, #2]
 8014ac0:	4ab1      	ldr	r2, [pc, #708]	; (8014d88 <readCanToStructs+0x3b14>)
 8014ac2:	011b      	lsls	r3, r3, #4
 8014ac4:	4413      	add	r3, r2
 8014ac6:	330f      	adds	r3, #15
 8014ac8:	781b      	ldrb	r3, [r3, #0]
 8014aca:	3b01      	subs	r3, #1
 8014acc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8014ad0:	4bad      	ldr	r3, [pc, #692]	; (8014d88 <readCanToStructs+0x3b14>)
 8014ad2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014ad6:	885b      	ldrh	r3, [r3, #2]
 8014ad8:	4aab      	ldr	r2, [pc, #684]	; (8014d88 <readCanToStructs+0x3b14>)
 8014ada:	011b      	lsls	r3, r3, #4
 8014adc:	4413      	add	r3, r2
 8014ade:	681b      	ldr	r3, [r3, #0]
 8014ae0:	f2a3 2305 	subw	r3, r3, #517	; 0x205
 8014ae4:	2b05      	cmp	r3, #5
 8014ae6:	f200 8487 	bhi.w	80153f8 <readCanToStructs+0x4184>
 8014aea:	a201      	add	r2, pc, #4	; (adr r2, 8014af0 <readCanToStructs+0x387c>)
 8014aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014af0:	08014ee1 	.word	0x08014ee1
 8014af4:	080153f9 	.word	0x080153f9
 8014af8:	08014b09 	.word	0x08014b09
 8014afc:	08014ce1 	.word	0x08014ce1
 8014b00:	08015091 	.word	0x08015091
 8014b04:	08015233 	.word	0x08015233
			{

			case EIPC1_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8014b08:	4ba0      	ldr	r3, [pc, #640]	; (8014d8c <readCanToStructs+0x3b18>)
 8014b0a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014b0c:	4b9e      	ldr	r3, [pc, #632]	; (8014d88 <readCanToStructs+0x3b14>)
 8014b0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014b12:	885b      	ldrh	r3, [r3, #2]
 8014b14:	4a9c      	ldr	r2, [pc, #624]	; (8014d88 <readCanToStructs+0x3b14>)
 8014b16:	011b      	lsls	r3, r3, #4
 8014b18:	4413      	add	r3, r2
 8014b1a:	3304      	adds	r3, #4
 8014b1c:	781b      	ldrb	r3, [r3, #0]
 8014b1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014b22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d110      	bne.n	8014b4c <readCanToStructs+0x38d8>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014b2a:	2240      	movs	r2, #64	; 0x40
 8014b2c:	2100      	movs	r1, #0
 8014b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b30:	f011 f95e 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b38:	4a95      	ldr	r2, [pc, #596]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014b3a:	f240 4116 	movw	r1, #1046	; 0x416
 8014b3e:	fb01 f303 	mul.w	r3, r1, r3
 8014b42:	4413      	add	r3, r2
 8014b44:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014b48:	2200      	movs	r2, #0
 8014b4a:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8014b4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b50:	4a8f      	ldr	r2, [pc, #572]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014b52:	f240 4116 	movw	r1, #1046	; 0x416
 8014b56:	fb01 f303 	mul.w	r3, r1, r3
 8014b5a:	4413      	add	r3, r2
 8014b5c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d015      	beq.n	8014b96 <readCanToStructs+0x3922>
				{
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8014b6a:	488a      	ldr	r0, [pc, #552]	; (8014d94 <readCanToStructs+0x3b20>)
 8014b6c:	f011 fac4 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014b70:	2240      	movs	r2, #64	; 0x40
 8014b72:	2100      	movs	r1, #0
 8014b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014b76:	f011 f93b 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014b7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014b7e:	4a84      	ldr	r2, [pc, #528]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014b80:	f240 4116 	movw	r1, #1046	; 0x416
 8014b84:	fb01 f303 	mul.w	r3, r1, r3
 8014b88:	4413      	add	r3, r2
 8014b8a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014b8e:	2200      	movs	r2, #0
 8014b90:	701a      	strb	r2, [r3, #0]
					break;
 8014b92:	f000 bc32 	b.w	80153fa <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014b96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	00db      	lsls	r3, r3, #3
 8014b9e:	1a9b      	subs	r3, r3, r2
 8014ba0:	461a      	mov	r2, r3
 8014ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba4:	4413      	add	r3, r2
 8014ba6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014ba8:	2301      	movs	r3, #1
 8014baa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014bae:	e016      	b.n	8014bde <readCanToStructs+0x396a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014bb0:	4b75      	ldr	r3, [pc, #468]	; (8014d88 <readCanToStructs+0x3b14>)
 8014bb2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014bb6:	885b      	ldrh	r3, [r3, #2]
 8014bb8:	461a      	mov	r2, r3
 8014bba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014bbe:	4972      	ldr	r1, [pc, #456]	; (8014d88 <readCanToStructs+0x3b14>)
 8014bc0:	0112      	lsls	r2, r2, #4
 8014bc2:	440a      	add	r2, r1
 8014bc4:	4413      	add	r3, r2
 8014bc6:	3304      	adds	r3, #4
 8014bc8:	781a      	ldrb	r2, [r3, #0]
 8014bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bcc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bd0:	3301      	adds	r3, #1
 8014bd2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014bd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014bd8:	3301      	adds	r3, #1
 8014bda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014bde:	4b6a      	ldr	r3, [pc, #424]	; (8014d88 <readCanToStructs+0x3b14>)
 8014be0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014be4:	885b      	ldrh	r3, [r3, #2]
 8014be6:	4a68      	ldr	r2, [pc, #416]	; (8014d88 <readCanToStructs+0x3b14>)
 8014be8:	011b      	lsls	r3, r3, #4
 8014bea:	4413      	add	r3, r2
 8014bec:	330c      	adds	r3, #12
 8014bee:	781b      	ldrb	r3, [r3, #0]
 8014bf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014bf4:	429a      	cmp	r2, r3
 8014bf6:	d3db      	bcc.n	8014bb0 <readCanToStructs+0x393c>
				}
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8014bf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014bfc:	4a64      	ldr	r2, [pc, #400]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014bfe:	f240 4116 	movw	r1, #1046	; 0x416
 8014c02:	fb01 f303 	mul.w	r3, r1, r3
 8014c06:	4413      	add	r3, r2
 8014c08:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014c0c:	781b      	ldrb	r3, [r3, #0]
 8014c0e:	461a      	mov	r2, r3
 8014c10:	4613      	mov	r3, r2
 8014c12:	00db      	lsls	r3, r3, #3
 8014c14:	1a9a      	subs	r2, r3, r2
 8014c16:	4b5c      	ldr	r3, [pc, #368]	; (8014d88 <readCanToStructs+0x3b14>)
 8014c18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014c1c:	885b      	ldrh	r3, [r3, #2]
 8014c1e:	495a      	ldr	r1, [pc, #360]	; (8014d88 <readCanToStructs+0x3b14>)
 8014c20:	011b      	lsls	r3, r3, #4
 8014c22:	440b      	add	r3, r1
 8014c24:	330c      	adds	r3, #12
 8014c26:	781b      	ldrb	r3, [r3, #0]
 8014c28:	3b01      	subs	r3, #1
 8014c2a:	4413      	add	r3, r2
 8014c2c:	2b3f      	cmp	r3, #63	; 0x3f
 8014c2e:	d933      	bls.n	8014c98 <readCanToStructs+0x3a24>
				{
					if(Debug_flag == 1)
 8014c30:	4b59      	ldr	r3, [pc, #356]	; (8014d98 <readCanToStructs+0x3b24>)
 8014c32:	781b      	ldrb	r3, [r3, #0]
 8014c34:	2b01      	cmp	r3, #1
 8014c36:	d105      	bne.n	8014c44 <readCanToStructs+0x39d0>
					{
						printf("Rcv Relays1-O:%u\n",Kyosan_CANRelays.Index);
 8014c38:	4b54      	ldr	r3, [pc, #336]	; (8014d8c <readCanToStructs+0x3b18>)
 8014c3a:	781b      	ldrb	r3, [r3, #0]
 8014c3c:	4619      	mov	r1, r3
 8014c3e:	4857      	ldr	r0, [pc, #348]	; (8014d9c <readCanToStructs+0x3b28>)
 8014c40:	f011 f9be 	bl	8025fc0 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 8014c44:	4a56      	ldr	r2, [pc, #344]	; (8014da0 <readCanToStructs+0x3b2c>)
 8014c46:	4b51      	ldr	r3, [pc, #324]	; (8014d8c <readCanToStructs+0x3b18>)
 8014c48:	4610      	mov	r0, r2
 8014c4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014c4e:	4602      	mov	r2, r0
 8014c50:	4619      	mov	r1, r3
 8014c52:	f8d1 c000 	ldr.w	ip, [r1]
 8014c56:	684e      	ldr	r6, [r1, #4]
 8014c58:	688d      	ldr	r5, [r1, #8]
 8014c5a:	68c9      	ldr	r1, [r1, #12]
 8014c5c:	f8c2 c000 	str.w	ip, [r2]
 8014c60:	6056      	str	r6, [r2, #4]
 8014c62:	6095      	str	r5, [r2, #8]
 8014c64:	60d1      	str	r1, [r2, #12]
 8014c66:	3310      	adds	r3, #16
 8014c68:	3010      	adds	r0, #16
 8014c6a:	42a3      	cmp	r3, r4
 8014c6c:	d1ef      	bne.n	8014c4e <readCanToStructs+0x39da>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 8014c6e:	f004 fa91 	bl	8019194 <HAL_GetTick>
 8014c72:	4603      	mov	r3, r0
 8014c74:	4a4b      	ldr	r2, [pc, #300]	; (8014da4 <readCanToStructs+0x3b30>)
 8014c76:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8014c78:	4b4b      	ldr	r3, [pc, #300]	; (8014da8 <readCanToStructs+0x3b34>)
 8014c7a:	2201      	movs	r2, #1
 8014c7c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8014c7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c82:	4a43      	ldr	r2, [pc, #268]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014c84:	f240 4116 	movw	r1, #1046	; 0x416
 8014c88:	fb01 f303 	mul.w	r3, r1, r3
 8014c8c:	4413      	add	r3, r2
 8014c8e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014c92:	2200      	movs	r2, #0
 8014c94:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8014c96:	e3b0      	b.n	80153fa <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8014c98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014c9c:	4a3c      	ldr	r2, [pc, #240]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014c9e:	f240 4116 	movw	r1, #1046	; 0x416
 8014ca2:	fb01 f303 	mul.w	r3, r1, r3
 8014ca6:	4413      	add	r3, r2
 8014ca8:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8014cac:	2201      	movs	r2, #1
 8014cae:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8014cb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014cb4:	4936      	ldr	r1, [pc, #216]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014cb6:	f240 4216 	movw	r2, #1046	; 0x416
 8014cba:	fb03 f202 	mul.w	r2, r3, r2
 8014cbe:	440a      	add	r2, r1
 8014cc0:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8014cc4:	7812      	ldrb	r2, [r2, #0]
 8014cc6:	3201      	adds	r2, #1
 8014cc8:	b2d0      	uxtb	r0, r2
 8014cca:	4a31      	ldr	r2, [pc, #196]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014ccc:	f240 4116 	movw	r1, #1046	; 0x416
 8014cd0:	fb01 f303 	mul.w	r3, r1, r3
 8014cd4:	4413      	add	r3, r2
 8014cd6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8014cda:	4602      	mov	r2, r0
 8014cdc:	701a      	strb	r2, [r3, #0]
				break;
 8014cde:	e38c      	b.n	80153fa <readCanToStructs+0x4186>

			case EIPC2_RELAYS_2_OTHER:
				uc_pp_charPtr = (uint8_t *)&Kyosan_CANRelays;
 8014ce0:	4b2a      	ldr	r3, [pc, #168]	; (8014d8c <readCanToStructs+0x3b18>)
 8014ce2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014ce4:	4b28      	ldr	r3, [pc, #160]	; (8014d88 <readCanToStructs+0x3b14>)
 8014ce6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014cea:	885b      	ldrh	r3, [r3, #2]
 8014cec:	4a26      	ldr	r2, [pc, #152]	; (8014d88 <readCanToStructs+0x3b14>)
 8014cee:	011b      	lsls	r3, r3, #4
 8014cf0:	4413      	add	r3, r2
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	781b      	ldrb	r3, [r3, #0]
 8014cf6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8014cfa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d110      	bne.n	8014d24 <readCanToStructs+0x3ab0>
				{
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014d02:	2240      	movs	r2, #64	; 0x40
 8014d04:	2100      	movs	r1, #0
 8014d06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d08:	f011 f872 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d10:	4a1f      	ldr	r2, [pc, #124]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014d12:	f240 4116 	movw	r1, #1046	; 0x416
 8014d16:	fb01 f303 	mul.w	r3, r1, r3
 8014d1a:	4413      	add	r3, r2
 8014d1c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014d20:	2200      	movs	r2, #0
 8014d22:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8014d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d28:	4a19      	ldr	r2, [pc, #100]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014d2a:	f240 4116 	movw	r1, #1046	; 0x416
 8014d2e:	fb01 f303 	mul.w	r3, r1, r3
 8014d32:	4413      	add	r3, r2
 8014d34:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014d38:	781b      	ldrb	r3, [r3, #0]
 8014d3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d014      	beq.n	8014d6c <readCanToStructs+0x3af8>
				{
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8014d42:	481a      	ldr	r0, [pc, #104]	; (8014dac <readCanToStructs+0x3b38>)
 8014d44:	f011 f9d8 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(KYOSAN_RELAYS_t));
 8014d48:	2240      	movs	r2, #64	; 0x40
 8014d4a:	2100      	movs	r1, #0
 8014d4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014d4e:	f011 f84f 	bl	8025df0 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014d52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014d56:	4a0e      	ldr	r2, [pc, #56]	; (8014d90 <readCanToStructs+0x3b1c>)
 8014d58:	f240 4116 	movw	r1, #1046	; 0x416
 8014d5c:	fb01 f303 	mul.w	r3, r1, r3
 8014d60:	4413      	add	r3, r2
 8014d62:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014d66:	2200      	movs	r2, #0
 8014d68:	701a      	strb	r2, [r3, #0]
					break;
 8014d6a:	e346      	b.n	80153fa <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014d6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014d70:	4613      	mov	r3, r2
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	1a9b      	subs	r3, r3, r2
 8014d76:	461a      	mov	r2, r3
 8014d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d7a:	4413      	add	r3, r2
 8014d7c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014d7e:	2301      	movs	r3, #1
 8014d80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014d84:	e02b      	b.n	8014dde <readCanToStructs+0x3b6a>
 8014d86:	bf00      	nop
 8014d88:	20007240 	.word	0x20007240
 8014d8c:	2000b4c0 	.word	0x2000b4c0
 8014d90:	20006a14 	.word	0x20006a14
 8014d94:	0802a9b0 	.word	0x0802a9b0
 8014d98:	20000bbb 	.word	0x20000bbb
 8014d9c:	0802abfc 	.word	0x0802abfc
 8014da0:	2000b480 	.word	0x2000b480
 8014da4:	2000b544 	.word	0x2000b544
 8014da8:	2000030b 	.word	0x2000030b
 8014dac:	0802a9e0 	.word	0x0802a9e0
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014db0:	4bad      	ldr	r3, [pc, #692]	; (8015068 <readCanToStructs+0x3df4>)
 8014db2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014db6:	885b      	ldrh	r3, [r3, #2]
 8014db8:	461a      	mov	r2, r3
 8014dba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014dbe:	49aa      	ldr	r1, [pc, #680]	; (8015068 <readCanToStructs+0x3df4>)
 8014dc0:	0112      	lsls	r2, r2, #4
 8014dc2:	440a      	add	r2, r1
 8014dc4:	4413      	add	r3, r2
 8014dc6:	3304      	adds	r3, #4
 8014dc8:	781a      	ldrb	r2, [r3, #0]
 8014dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dcc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014dd0:	3301      	adds	r3, #1
 8014dd2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014dd8:	3301      	adds	r3, #1
 8014dda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014dde:	4ba2      	ldr	r3, [pc, #648]	; (8015068 <readCanToStructs+0x3df4>)
 8014de0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014de4:	885b      	ldrh	r3, [r3, #2]
 8014de6:	4aa0      	ldr	r2, [pc, #640]	; (8015068 <readCanToStructs+0x3df4>)
 8014de8:	011b      	lsls	r3, r3, #4
 8014dea:	4413      	add	r3, r2
 8014dec:	330c      	adds	r3, #12
 8014dee:	781b      	ldrb	r3, [r3, #0]
 8014df0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d3db      	bcc.n	8014db0 <readCanToStructs+0x3b3c>
				}
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_RELAYS_t))
 8014df8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dfc:	4a9b      	ldr	r2, [pc, #620]	; (801506c <readCanToStructs+0x3df8>)
 8014dfe:	f240 4116 	movw	r1, #1046	; 0x416
 8014e02:	fb01 f303 	mul.w	r3, r1, r3
 8014e06:	4413      	add	r3, r2
 8014e08:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	4613      	mov	r3, r2
 8014e12:	00db      	lsls	r3, r3, #3
 8014e14:	1a9a      	subs	r2, r3, r2
 8014e16:	4b94      	ldr	r3, [pc, #592]	; (8015068 <readCanToStructs+0x3df4>)
 8014e18:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014e1c:	885b      	ldrh	r3, [r3, #2]
 8014e1e:	4992      	ldr	r1, [pc, #584]	; (8015068 <readCanToStructs+0x3df4>)
 8014e20:	011b      	lsls	r3, r3, #4
 8014e22:	440b      	add	r3, r1
 8014e24:	330c      	adds	r3, #12
 8014e26:	781b      	ldrb	r3, [r3, #0]
 8014e28:	3b01      	subs	r3, #1
 8014e2a:	4413      	add	r3, r2
 8014e2c:	2b3f      	cmp	r3, #63	; 0x3f
 8014e2e:	d933      	bls.n	8014e98 <readCanToStructs+0x3c24>
				{
					if(Debug_flag == 1)
 8014e30:	4b8f      	ldr	r3, [pc, #572]	; (8015070 <readCanToStructs+0x3dfc>)
 8014e32:	781b      	ldrb	r3, [r3, #0]
 8014e34:	2b01      	cmp	r3, #1
 8014e36:	d105      	bne.n	8014e44 <readCanToStructs+0x3bd0>
					{
						printf("Rcv Relays2-O:%u\n",Kyosan_CANRelays.Index);
 8014e38:	4b8e      	ldr	r3, [pc, #568]	; (8015074 <readCanToStructs+0x3e00>)
 8014e3a:	781b      	ldrb	r3, [r3, #0]
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	488e      	ldr	r0, [pc, #568]	; (8015078 <readCanToStructs+0x3e04>)
 8014e40:	f011 f8be 	bl	8025fc0 <iprintf>
					}
					memcpy(&Kyosan_OtherRelays,&Kyosan_CANRelays,sizeof(KYOSAN_RELAYS_t));
 8014e44:	4a8d      	ldr	r2, [pc, #564]	; (801507c <readCanToStructs+0x3e08>)
 8014e46:	4b8b      	ldr	r3, [pc, #556]	; (8015074 <readCanToStructs+0x3e00>)
 8014e48:	4610      	mov	r0, r2
 8014e4a:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8014e4e:	4602      	mov	r2, r0
 8014e50:	4619      	mov	r1, r3
 8014e52:	f8d1 c000 	ldr.w	ip, [r1]
 8014e56:	684e      	ldr	r6, [r1, #4]
 8014e58:	688d      	ldr	r5, [r1, #8]
 8014e5a:	68c9      	ldr	r1, [r1, #12]
 8014e5c:	f8c2 c000 	str.w	ip, [r2]
 8014e60:	6056      	str	r6, [r2, #4]
 8014e62:	6095      	str	r5, [r2, #8]
 8014e64:	60d1      	str	r1, [r2, #12]
 8014e66:	3310      	adds	r3, #16
 8014e68:	3010      	adds	r0, #16
 8014e6a:	42a3      	cmp	r3, r4
 8014e6c:	d1ef      	bne.n	8014e4e <readCanToStructs+0x3bda>
					LastCANReceived_Clk_Kyosan = HAL_GetTick();
 8014e6e:	f004 f991 	bl	8019194 <HAL_GetTick>
 8014e72:	4603      	mov	r3, r0
 8014e74:	4a82      	ldr	r2, [pc, #520]	; (8015080 <readCanToStructs+0x3e0c>)
 8014e76:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = SET;
 8014e78:	4b82      	ldr	r3, [pc, #520]	; (8015084 <readCanToStructs+0x3e10>)
 8014e7a:	2201      	movs	r2, #1
 8014e7c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8014e7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e82:	4a7a      	ldr	r2, [pc, #488]	; (801506c <readCanToStructs+0x3df8>)
 8014e84:	f240 4116 	movw	r1, #1046	; 0x416
 8014e88:	fb01 f303 	mul.w	r3, r1, r3
 8014e8c:	4413      	add	r3, r2
 8014e8e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014e92:	2200      	movs	r2, #0
 8014e94:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
				}
				break;
 8014e96:	e2b0      	b.n	80153fa <readCanToStructs+0x4186>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8014e98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014e9c:	4a73      	ldr	r2, [pc, #460]	; (801506c <readCanToStructs+0x3df8>)
 8014e9e:	f240 4116 	movw	r1, #1046	; 0x416
 8014ea2:	fb01 f303 	mul.w	r3, r1, r3
 8014ea6:	4413      	add	r3, r2
 8014ea8:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8014eac:	2201      	movs	r2, #1
 8014eae:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8014eb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014eb4:	496d      	ldr	r1, [pc, #436]	; (801506c <readCanToStructs+0x3df8>)
 8014eb6:	f240 4216 	movw	r2, #1046	; 0x416
 8014eba:	fb03 f202 	mul.w	r2, r3, r2
 8014ebe:	440a      	add	r2, r1
 8014ec0:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8014ec4:	7812      	ldrb	r2, [r2, #0]
 8014ec6:	3201      	adds	r2, #1
 8014ec8:	b2d0      	uxtb	r0, r2
 8014eca:	4a68      	ldr	r2, [pc, #416]	; (801506c <readCanToStructs+0x3df8>)
 8014ecc:	f240 4116 	movw	r1, #1046	; 0x416
 8014ed0:	fb01 f303 	mul.w	r3, r1, r3
 8014ed4:	4413      	add	r3, r2
 8014ed6:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8014eda:	4602      	mov	r2, r0
 8014edc:	701a      	strb	r2, [r3, #0]
				break;
 8014ede:	e28c      	b.n	80153fa <readCanToStructs+0x4186>

			case CAN_FAULT_INJECTION:

				uc_pp_charPtr = (uint8_t *)&KyosanFaultInjection_st;
 8014ee0:	4b69      	ldr	r3, [pc, #420]	; (8015088 <readCanToStructs+0x3e14>)
 8014ee2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8014ee4:	4b60      	ldr	r3, [pc, #384]	; (8015068 <readCanToStructs+0x3df4>)
 8014ee6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014eea:	885b      	ldrh	r3, [r3, #2]
 8014eec:	4a5e      	ldr	r2, [pc, #376]	; (8015068 <readCanToStructs+0x3df4>)
 8014eee:	011b      	lsls	r3, r3, #4
 8014ef0:	4413      	add	r3, r2
 8014ef2:	3304      	adds	r3, #4
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8014efa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014efe:	2b00      	cmp	r3, #0
 8014f00:	d110      	bne.n	8014f24 <readCanToStructs+0x3cb0>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8014f02:	2208      	movs	r2, #8
 8014f04:	2100      	movs	r1, #0
 8014f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f08:	f010 ff72 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014f0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f10:	4a56      	ldr	r2, [pc, #344]	; (801506c <readCanToStructs+0x3df8>)
 8014f12:	f240 4116 	movw	r1, #1046	; 0x416
 8014f16:	fb01 f303 	mul.w	r3, r1, r3
 8014f1a:	4413      	add	r3, r2
 8014f1c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014f20:	2200      	movs	r2, #0
 8014f22:	701a      	strb	r2, [r3, #0]
				}
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8014f24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f28:	4a50      	ldr	r2, [pc, #320]	; (801506c <readCanToStructs+0x3df8>)
 8014f2a:	f240 4116 	movw	r1, #1046	; 0x416
 8014f2e:	fb01 f303 	mul.w	r3, r1, r3
 8014f32:	4413      	add	r3, r2
 8014f34:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014f38:	781b      	ldrb	r3, [r3, #0]
 8014f3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d011      	beq.n	8014f66 <readCanToStructs+0x3cf2>
				{
					memset(uc_pp_charPtr, 0, sizeof(KYOSAN_FAULT_INJECTION_t));
 8014f42:	2208      	movs	r2, #8
 8014f44:	2100      	movs	r1, #0
 8014f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014f48:	f010 ff52 	bl	8025df0 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8014f4c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014f50:	4a46      	ldr	r2, [pc, #280]	; (801506c <readCanToStructs+0x3df8>)
 8014f52:	f240 4116 	movw	r1, #1046	; 0x416
 8014f56:	fb01 f303 	mul.w	r3, r1, r3
 8014f5a:	4413      	add	r3, r2
 8014f5c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014f60:	2200      	movs	r2, #0
 8014f62:	701a      	strb	r2, [r3, #0]
					break;
 8014f64:	e249      	b.n	80153fa <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 8014f66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8014f6a:	4613      	mov	r3, r2
 8014f6c:	00db      	lsls	r3, r3, #3
 8014f6e:	1a9b      	subs	r3, r3, r2
 8014f70:	461a      	mov	r2, r3
 8014f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f74:	4413      	add	r3, r2
 8014f76:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014f78:	2301      	movs	r3, #1
 8014f7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014f7e:	e016      	b.n	8014fae <readCanToStructs+0x3d3a>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8014f80:	4b39      	ldr	r3, [pc, #228]	; (8015068 <readCanToStructs+0x3df4>)
 8014f82:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014f86:	885b      	ldrh	r3, [r3, #2]
 8014f88:	461a      	mov	r2, r3
 8014f8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014f8e:	4936      	ldr	r1, [pc, #216]	; (8015068 <readCanToStructs+0x3df4>)
 8014f90:	0112      	lsls	r2, r2, #4
 8014f92:	440a      	add	r2, r1
 8014f94:	4413      	add	r3, r2
 8014f96:	3304      	adds	r3, #4
 8014f98:	781a      	ldrb	r2, [r3, #0]
 8014f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014f9c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8014f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014fa0:	3301      	adds	r3, #1
 8014fa2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8014fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014fa8:	3301      	adds	r3, #1
 8014faa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8014fae:	4b2e      	ldr	r3, [pc, #184]	; (8015068 <readCanToStructs+0x3df4>)
 8014fb0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014fb4:	885b      	ldrh	r3, [r3, #2]
 8014fb6:	4a2c      	ldr	r2, [pc, #176]	; (8015068 <readCanToStructs+0x3df4>)
 8014fb8:	011b      	lsls	r3, r3, #4
 8014fba:	4413      	add	r3, r2
 8014fbc:	330c      	adds	r3, #12
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8014fc4:	429a      	cmp	r2, r3
 8014fc6:	d3db      	bcc.n	8014f80 <readCanToStructs+0x3d0c>
				}
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(KYOSAN_FAULT_INJECTION_t))
 8014fc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014fcc:	4a27      	ldr	r2, [pc, #156]	; (801506c <readCanToStructs+0x3df8>)
 8014fce:	f240 4116 	movw	r1, #1046	; 0x416
 8014fd2:	fb01 f303 	mul.w	r3, r1, r3
 8014fd6:	4413      	add	r3, r2
 8014fd8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8014fdc:	781b      	ldrb	r3, [r3, #0]
 8014fde:	461a      	mov	r2, r3
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	00db      	lsls	r3, r3, #3
 8014fe4:	1a9a      	subs	r2, r3, r2
 8014fe6:	4b20      	ldr	r3, [pc, #128]	; (8015068 <readCanToStructs+0x3df4>)
 8014fe8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8014fec:	885b      	ldrh	r3, [r3, #2]
 8014fee:	491e      	ldr	r1, [pc, #120]	; (8015068 <readCanToStructs+0x3df4>)
 8014ff0:	011b      	lsls	r3, r3, #4
 8014ff2:	440b      	add	r3, r1
 8014ff4:	330c      	adds	r3, #12
 8014ff6:	781b      	ldrb	r3, [r3, #0]
 8014ff8:	3b01      	subs	r3, #1
 8014ffa:	4413      	add	r3, r2
 8014ffc:	2b07      	cmp	r3, #7
 8014ffe:	d90f      	bls.n	8015020 <readCanToStructs+0x3dac>
				{
					printf("Received CAN_FAULT_INJECTION\n");
 8015000:	4822      	ldr	r0, [pc, #136]	; (801508c <readCanToStructs+0x3e18>)
 8015002:	f011 f879 	bl	80260f8 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8015006:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801500a:	4a18      	ldr	r2, [pc, #96]	; (801506c <readCanToStructs+0x3df8>)
 801500c:	f240 4116 	movw	r1, #1046	; 0x416
 8015010:	fb01 f303 	mul.w	r3, r1, r3
 8015014:	4413      	add	r3, r2
 8015016:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801501a:	2200      	movs	r2, #0
 801501c:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
				}
				break;
 801501e:	e1ec      	b.n	80153fa <readCanToStructs+0x4186>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8015020:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015024:	4a11      	ldr	r2, [pc, #68]	; (801506c <readCanToStructs+0x3df8>)
 8015026:	f240 4116 	movw	r1, #1046	; 0x416
 801502a:	fb01 f303 	mul.w	r3, r1, r3
 801502e:	4413      	add	r3, r2
 8015030:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8015034:	2201      	movs	r2, #1
 8015036:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8015038:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801503c:	490b      	ldr	r1, [pc, #44]	; (801506c <readCanToStructs+0x3df8>)
 801503e:	f240 4216 	movw	r2, #1046	; 0x416
 8015042:	fb03 f202 	mul.w	r2, r3, r2
 8015046:	440a      	add	r2, r1
 8015048:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 801504c:	7812      	ldrb	r2, [r2, #0]
 801504e:	3201      	adds	r2, #1
 8015050:	b2d0      	uxtb	r0, r2
 8015052:	4a06      	ldr	r2, [pc, #24]	; (801506c <readCanToStructs+0x3df8>)
 8015054:	f240 4116 	movw	r1, #1046	; 0x416
 8015058:	fb01 f303 	mul.w	r3, r1, r3
 801505c:	4413      	add	r3, r2
 801505e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8015062:	4602      	mov	r2, r0
 8015064:	701a      	strb	r2, [r3, #0]
				break;
 8015066:	e1c8      	b.n	80153fa <readCanToStructs+0x4186>
 8015068:	20007240 	.word	0x20007240
 801506c:	20006a14 	.word	0x20006a14
 8015070:	20000bbb 	.word	0x20000bbb
 8015074:	2000b4c0 	.word	0x2000b4c0
 8015078:	0802ac10 	.word	0x0802ac10
 801507c:	2000b480 	.word	0x2000b480
 8015080:	2000b544 	.word	0x2000b544
 8015084:	2000030b 	.word	0x2000030b
 8015088:	2000b424 	.word	0x2000b424
 801508c:	0802abac 	.word	0x0802abac

			case DAT_CRC_EXCHANGE_1:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015090:	4bbe      	ldr	r3, [pc, #760]	; (801538c <readCanToStructs+0x4118>)
 8015092:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015094:	4bbe      	ldr	r3, [pc, #760]	; (8015390 <readCanToStructs+0x411c>)
 8015096:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801509a:	885b      	ldrh	r3, [r3, #2]
 801509c:	4abc      	ldr	r2, [pc, #752]	; (8015390 <readCanToStructs+0x411c>)
 801509e:	011b      	lsls	r3, r3, #4
 80150a0:	4413      	add	r3, r2
 80150a2:	3304      	adds	r3, #4
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80150aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80150ae:	2b00      	cmp	r3, #0
 80150b0:	d110      	bne.n	80150d4 <readCanToStructs+0x3e60>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80150b2:	2202      	movs	r2, #2
 80150b4:	2100      	movs	r1, #0
 80150b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150b8:	f010 fe9a 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80150bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150c0:	4ab4      	ldr	r2, [pc, #720]	; (8015394 <readCanToStructs+0x4120>)
 80150c2:	f240 4116 	movw	r1, #1046	; 0x416
 80150c6:	fb01 f303 	mul.w	r3, r1, r3
 80150ca:	4413      	add	r3, r2
 80150cc:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80150d0:	2200      	movs	r2, #0
 80150d2:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo)
 80150d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80150d8:	4aae      	ldr	r2, [pc, #696]	; (8015394 <readCanToStructs+0x4120>)
 80150da:	f240 4116 	movw	r1, #1046	; 0x416
 80150de:	fb01 f303 	mul.w	r3, r1, r3
 80150e2:	4413      	add	r3, r2
 80150e4:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80150e8:	781b      	ldrb	r3, [r3, #0]
 80150ea:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d014      	beq.n	801511c <readCanToStructs+0x3ea8>
				{
					printf("EIPC1 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 80150f2:	48a9      	ldr	r0, [pc, #676]	; (8015398 <readCanToStructs+0x4124>)
 80150f4:	f011 f800 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 80150f8:	2202      	movs	r2, #2
 80150fa:	2100      	movs	r1, #0
 80150fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150fe:	f010 fe77 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 8015102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015106:	4aa3      	ldr	r2, [pc, #652]	; (8015394 <readCanToStructs+0x4120>)
 8015108:	f240 4116 	movw	r1, #1046	; 0x416
 801510c:	fb01 f303 	mul.w	r3, r1, r3
 8015110:	4413      	add	r3, r2
 8015112:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015116:	2200      	movs	r2, #0
 8015118:	701a      	strb	r2, [r3, #0]
					break;
 801511a:	e16e      	b.n	80153fa <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 801511c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015120:	4613      	mov	r3, r2
 8015122:	00db      	lsls	r3, r3, #3
 8015124:	1a9b      	subs	r3, r3, r2
 8015126:	461a      	mov	r2, r3
 8015128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801512a:	4413      	add	r3, r2
 801512c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801512e:	2301      	movs	r3, #1
 8015130:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015134:	e016      	b.n	8015164 <readCanToStructs+0x3ef0>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8015136:	4b96      	ldr	r3, [pc, #600]	; (8015390 <readCanToStructs+0x411c>)
 8015138:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801513c:	885b      	ldrh	r3, [r3, #2]
 801513e:	461a      	mov	r2, r3
 8015140:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015144:	4992      	ldr	r1, [pc, #584]	; (8015390 <readCanToStructs+0x411c>)
 8015146:	0112      	lsls	r2, r2, #4
 8015148:	440a      	add	r2, r1
 801514a:	4413      	add	r3, r2
 801514c:	3304      	adds	r3, #4
 801514e:	781a      	ldrb	r2, [r3, #0]
 8015150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015152:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8015154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015156:	3301      	adds	r3, #1
 8015158:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801515a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801515e:	3301      	adds	r3, #1
 8015160:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015164:	4b8a      	ldr	r3, [pc, #552]	; (8015390 <readCanToStructs+0x411c>)
 8015166:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801516a:	885b      	ldrh	r3, [r3, #2]
 801516c:	4a88      	ldr	r2, [pc, #544]	; (8015390 <readCanToStructs+0x411c>)
 801516e:	011b      	lsls	r3, r3, #4
 8015170:	4413      	add	r3, r2
 8015172:	330c      	adds	r3, #12
 8015174:	781b      	ldrb	r3, [r3, #0]
 8015176:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801517a:	429a      	cmp	r2, r3
 801517c:	d3db      	bcc.n	8015136 <readCanToStructs+0x3ec2>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 801517e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015182:	4a84      	ldr	r2, [pc, #528]	; (8015394 <readCanToStructs+0x4120>)
 8015184:	f240 4116 	movw	r1, #1046	; 0x416
 8015188:	fb01 f303 	mul.w	r3, r1, r3
 801518c:	4413      	add	r3, r2
 801518e:	f203 4313 	addw	r3, r3, #1043	; 0x413
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	461a      	mov	r2, r3
 8015196:	4613      	mov	r3, r2
 8015198:	00db      	lsls	r3, r3, #3
 801519a:	1a9a      	subs	r2, r3, r2
 801519c:	4b7c      	ldr	r3, [pc, #496]	; (8015390 <readCanToStructs+0x411c>)
 801519e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80151a2:	885b      	ldrh	r3, [r3, #2]
 80151a4:	497a      	ldr	r1, [pc, #488]	; (8015390 <readCanToStructs+0x411c>)
 80151a6:	011b      	lsls	r3, r3, #4
 80151a8:	440b      	add	r3, r1
 80151aa:	330c      	adds	r3, #12
 80151ac:	781b      	ldrb	r3, [r3, #0]
 80151ae:	3b01      	subs	r3, #1
 80151b0:	4413      	add	r3, r2
 80151b2:	2b01      	cmp	r3, #1
 80151b4:	d919      	bls.n	80151ea <readCanToStructs+0x3f76>
				{
					if(Debug_flag == 1)
 80151b6:	4b79      	ldr	r3, [pc, #484]	; (801539c <readCanToStructs+0x4128>)
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	2b01      	cmp	r3, #1
 80151bc:	d105      	bne.n	80151ca <readCanToStructs+0x3f56>
					{
						printf("Rcv-1 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 80151be:	4b73      	ldr	r3, [pc, #460]	; (801538c <readCanToStructs+0x4118>)
 80151c0:	881b      	ldrh	r3, [r3, #0]
 80151c2:	4619      	mov	r1, r3
 80151c4:	4876      	ldr	r0, [pc, #472]	; (80153a0 <readCanToStructs+0x412c>)
 80151c6:	f010 fefb 	bl	8025fc0 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 80151ca:	4b76      	ldr	r3, [pc, #472]	; (80153a4 <readCanToStructs+0x4130>)
 80151cc:	2201      	movs	r2, #1
 80151ce:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo = 0;
 80151d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151d4:	4a6f      	ldr	r2, [pc, #444]	; (8015394 <readCanToStructs+0x4120>)
 80151d6:	f240 4116 	movw	r1, #1046	; 0x416
 80151da:	fb01 f303 	mul.w	r3, r1, r3
 80151de:	4413      	add	r3, r2
 80151e0:	f203 4313 	addw	r3, r3, #1043	; 0x413
 80151e4:	2200      	movs	r2, #0
 80151e6:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
				}
				break;
 80151e8:	e107      	b.n	80153fa <readCanToStructs+0x4186>
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].invalid = 1;
 80151ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80151ee:	4a69      	ldr	r2, [pc, #420]	; (8015394 <readCanToStructs+0x4120>)
 80151f0:	f240 4116 	movw	r1, #1046	; 0x416
 80151f4:	fb01 f303 	mul.w	r3, r1, r3
 80151f8:	4413      	add	r3, r2
 80151fa:	f203 4312 	addw	r3, r3, #1042	; 0x412
 80151fe:	2201      	movs	r2, #1
 8015200:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_1].expSeqNo++;
 8015202:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015206:	4963      	ldr	r1, [pc, #396]	; (8015394 <readCanToStructs+0x4120>)
 8015208:	f240 4216 	movw	r2, #1046	; 0x416
 801520c:	fb03 f202 	mul.w	r2, r3, r2
 8015210:	440a      	add	r2, r1
 8015212:	f202 4213 	addw	r2, r2, #1043	; 0x413
 8015216:	7812      	ldrb	r2, [r2, #0]
 8015218:	3201      	adds	r2, #1
 801521a:	b2d0      	uxtb	r0, r2
 801521c:	4a5d      	ldr	r2, [pc, #372]	; (8015394 <readCanToStructs+0x4120>)
 801521e:	f240 4116 	movw	r1, #1046	; 0x416
 8015222:	fb01 f303 	mul.w	r3, r1, r3
 8015226:	4413      	add	r3, r2
 8015228:	f203 4313 	addw	r3, r3, #1043	; 0x413
 801522c:	4602      	mov	r2, r0
 801522e:	701a      	strb	r2, [r3, #0]
				break;
 8015230:	e0e3      	b.n	80153fa <readCanToStructs+0x4186>

			case DAT_CRC_EXCHANGE_2:
				uc_pp_charPtr = (uint8_t *)&DatCrcXchangeOther_st;
 8015232:	4b56      	ldr	r3, [pc, #344]	; (801538c <readCanToStructs+0x4118>)
 8015234:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8015236:	4b56      	ldr	r3, [pc, #344]	; (8015390 <readCanToStructs+0x411c>)
 8015238:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801523c:	885b      	ldrh	r3, [r3, #2]
 801523e:	4a54      	ldr	r2, [pc, #336]	; (8015390 <readCanToStructs+0x411c>)
 8015240:	011b      	lsls	r3, r3, #4
 8015242:	4413      	add	r3, r2
 8015244:	3304      	adds	r3, #4
 8015246:	781b      	ldrb	r3, [r3, #0]
 8015248:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801524c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015250:	2b00      	cmp	r3, #0
 8015252:	d110      	bne.n	8015276 <readCanToStructs+0x4002>
				{
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 8015254:	2202      	movs	r2, #2
 8015256:	2100      	movs	r1, #0
 8015258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801525a:	f010 fdc9 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 801525e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015262:	4a4c      	ldr	r2, [pc, #304]	; (8015394 <readCanToStructs+0x4120>)
 8015264:	f240 4116 	movw	r1, #1046	; 0x416
 8015268:	fb01 f303 	mul.w	r3, r1, r3
 801526c:	4413      	add	r3, r2
 801526e:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015272:	2200      	movs	r2, #0
 8015274:	701a      	strb	r2, [r3, #0]
				}
				if(uc_seqNo != canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo)
 8015276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801527a:	4a46      	ldr	r2, [pc, #280]	; (8015394 <readCanToStructs+0x4120>)
 801527c:	f240 4116 	movw	r1, #1046	; 0x416
 8015280:	fb01 f303 	mul.w	r3, r1, r3
 8015284:	4413      	add	r3, r2
 8015286:	f203 4315 	addw	r3, r3, #1045	; 0x415
 801528a:	781b      	ldrb	r3, [r3, #0]
 801528c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8015290:	429a      	cmp	r2, r3
 8015292:	d014      	beq.n	80152be <readCanToStructs+0x404a>
				{
					printf("EIPC2 DAT_CRC_EXCHANGE Seq no MisMatch\n");
 8015294:	4844      	ldr	r0, [pc, #272]	; (80153a8 <readCanToStructs+0x4134>)
 8015296:	f010 ff2f 	bl	80260f8 <puts>
					memset(uc_pp_charPtr,0,sizeof(DAT_CRC_XCHANGE_t));
 801529a:	2202      	movs	r2, #2
 801529c:	2100      	movs	r1, #0
 801529e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80152a0:	f010 fda6 	bl	8025df0 <memset>
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 80152a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80152a8:	4a3a      	ldr	r2, [pc, #232]	; (8015394 <readCanToStructs+0x4120>)
 80152aa:	f240 4116 	movw	r1, #1046	; 0x416
 80152ae:	fb01 f303 	mul.w	r3, r1, r3
 80152b2:	4413      	add	r3, r2
 80152b4:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80152b8:	2200      	movs	r2, #0
 80152ba:	701a      	strb	r2, [r3, #0]
					break;
 80152bc:	e09d      	b.n	80153fa <readCanToStructs+0x4186>
				}
				uc_pp_charPtr += (7 * uc_seqNo);
 80152be:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80152c2:	4613      	mov	r3, r2
 80152c4:	00db      	lsls	r3, r3, #3
 80152c6:	1a9b      	subs	r3, r3, r2
 80152c8:	461a      	mov	r2, r3
 80152ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152cc:	4413      	add	r3, r2
 80152ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80152d0:	2301      	movs	r3, #1
 80152d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80152d6:	e016      	b.n	8015306 <readCanToStructs+0x4092>
				{
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80152d8:	4b2d      	ldr	r3, [pc, #180]	; (8015390 <readCanToStructs+0x411c>)
 80152da:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80152de:	885b      	ldrh	r3, [r3, #2]
 80152e0:	461a      	mov	r2, r3
 80152e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80152e6:	492a      	ldr	r1, [pc, #168]	; (8015390 <readCanToStructs+0x411c>)
 80152e8:	0112      	lsls	r2, r2, #4
 80152ea:	440a      	add	r2, r1
 80152ec:	4413      	add	r3, r2
 80152ee:	3304      	adds	r3, #4
 80152f0:	781a      	ldrb	r2, [r3, #0]
 80152f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80152f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152f8:	3301      	adds	r3, #1
 80152fa:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80152fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8015300:	3301      	adds	r3, #1
 8015302:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8015306:	4b22      	ldr	r3, [pc, #136]	; (8015390 <readCanToStructs+0x411c>)
 8015308:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801530c:	885b      	ldrh	r3, [r3, #2]
 801530e:	4a20      	ldr	r2, [pc, #128]	; (8015390 <readCanToStructs+0x411c>)
 8015310:	011b      	lsls	r3, r3, #4
 8015312:	4413      	add	r3, r2
 8015314:	330c      	adds	r3, #12
 8015316:	781b      	ldrb	r3, [r3, #0]
 8015318:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801531c:	429a      	cmp	r2, r3
 801531e:	d3db      	bcc.n	80152d8 <readCanToStructs+0x4064>
				}
				if((((canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(DAT_CRC_XCHANGE_t))
 8015320:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015324:	4a1b      	ldr	r2, [pc, #108]	; (8015394 <readCanToStructs+0x4120>)
 8015326:	f240 4116 	movw	r1, #1046	; 0x416
 801532a:	fb01 f303 	mul.w	r3, r1, r3
 801532e:	4413      	add	r3, r2
 8015330:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	461a      	mov	r2, r3
 8015338:	4613      	mov	r3, r2
 801533a:	00db      	lsls	r3, r3, #3
 801533c:	1a9a      	subs	r2, r3, r2
 801533e:	4b14      	ldr	r3, [pc, #80]	; (8015390 <readCanToStructs+0x411c>)
 8015340:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015344:	885b      	ldrh	r3, [r3, #2]
 8015346:	4912      	ldr	r1, [pc, #72]	; (8015390 <readCanToStructs+0x411c>)
 8015348:	011b      	lsls	r3, r3, #4
 801534a:	440b      	add	r3, r1
 801534c:	330c      	adds	r3, #12
 801534e:	781b      	ldrb	r3, [r3, #0]
 8015350:	3b01      	subs	r3, #1
 8015352:	4413      	add	r3, r2
 8015354:	2b01      	cmp	r3, #1
 8015356:	d92b      	bls.n	80153b0 <readCanToStructs+0x413c>
				{
					if(Debug_flag == 1)
 8015358:	4b10      	ldr	r3, [pc, #64]	; (801539c <readCanToStructs+0x4128>)
 801535a:	781b      	ldrb	r3, [r3, #0]
 801535c:	2b01      	cmp	r3, #1
 801535e:	d105      	bne.n	801536c <readCanToStructs+0x40f8>
					{
						printf("Rcv-2 AppCRC:%04X\n",DatCrcXchangeOther_st.App_CRC);
 8015360:	4b0a      	ldr	r3, [pc, #40]	; (801538c <readCanToStructs+0x4118>)
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	4619      	mov	r1, r3
 8015366:	4811      	ldr	r0, [pc, #68]	; (80153ac <readCanToStructs+0x4138>)
 8015368:	f010 fe2a 	bl	8025fc0 <iprintf>
					}
					Is_CAN_Exchange_happening = YES;
 801536c:	4b0d      	ldr	r3, [pc, #52]	; (80153a4 <readCanToStructs+0x4130>)
 801536e:	2201      	movs	r2, #1
 8015370:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo = 0;
 8015372:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8015376:	4a07      	ldr	r2, [pc, #28]	; (8015394 <readCanToStructs+0x4120>)
 8015378:	f240 4116 	movw	r1, #1046	; 0x416
 801537c:	fb01 f303 	mul.w	r3, r1, r3
 8015380:	4413      	add	r3, r2
 8015382:	f203 4315 	addw	r3, r3, #1045	; 0x415
 8015386:	2200      	movs	r2, #0
 8015388:	701a      	strb	r2, [r3, #0]
				else
				{
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
				}
				break;
 801538a:	e036      	b.n	80153fa <readCanToStructs+0x4186>
 801538c:	20000bb8 	.word	0x20000bb8
 8015390:	20007240 	.word	0x20007240
 8015394:	20006a14 	.word	0x20006a14
 8015398:	0802aa14 	.word	0x0802aa14
 801539c:	20000bbb 	.word	0x20000bbb
 80153a0:	0802aa3c 	.word	0x0802aa3c
 80153a4:	2000030b 	.word	0x2000030b
 80153a8:	0802aa50 	.word	0x0802aa50
 80153ac:	0802aa78 	.word	0x0802aa78
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].invalid = 1;
 80153b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153b4:	4a28      	ldr	r2, [pc, #160]	; (8015458 <readCanToStructs+0x41e4>)
 80153b6:	f240 4116 	movw	r1, #1046	; 0x416
 80153ba:	fb01 f303 	mul.w	r3, r1, r3
 80153be:	4413      	add	r3, r2
 80153c0:	f203 4314 	addw	r3, r3, #1044	; 0x414
 80153c4:	2201      	movs	r2, #1
 80153c6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][DAT_CRC_EXCHANGE_2].expSeqNo++;
 80153c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80153cc:	4922      	ldr	r1, [pc, #136]	; (8015458 <readCanToStructs+0x41e4>)
 80153ce:	f240 4216 	movw	r2, #1046	; 0x416
 80153d2:	fb03 f202 	mul.w	r2, r3, r2
 80153d6:	440a      	add	r2, r1
 80153d8:	f202 4215 	addw	r2, r2, #1045	; 0x415
 80153dc:	7812      	ldrb	r2, [r2, #0]
 80153de:	3201      	adds	r2, #1
 80153e0:	b2d0      	uxtb	r0, r2
 80153e2:	4a1d      	ldr	r2, [pc, #116]	; (8015458 <readCanToStructs+0x41e4>)
 80153e4:	f240 4116 	movw	r1, #1046	; 0x416
 80153e8:	fb01 f303 	mul.w	r3, r1, r3
 80153ec:	4413      	add	r3, r2
 80153ee:	f203 4315 	addw	r3, r3, #1045	; 0x415
 80153f2:	4602      	mov	r2, r0
 80153f4:	701a      	strb	r2, [r3, #0]
				break;
 80153f6:	e000      	b.n	80153fa <readCanToStructs+0x4186>

			default:
				break;
 80153f8:	bf00      	nop
			}

			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80153fa:	4b18      	ldr	r3, [pc, #96]	; (801545c <readCanToStructs+0x41e8>)
 80153fc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015400:	885b      	ldrh	r3, [r3, #2]
 8015402:	011b      	lsls	r3, r3, #4
 8015404:	4a15      	ldr	r2, [pc, #84]	; (801545c <readCanToStructs+0x41e8>)
 8015406:	4413      	add	r3, r2
 8015408:	2210      	movs	r2, #16
 801540a:	2100      	movs	r1, #0
 801540c:	4618      	mov	r0, r3
 801540e:	f010 fcef 	bl	8025df0 <memset>
			canRead.Out++;
 8015412:	4b12      	ldr	r3, [pc, #72]	; (801545c <readCanToStructs+0x41e8>)
 8015414:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015418:	885b      	ldrh	r3, [r3, #2]
 801541a:	3301      	adds	r3, #1
 801541c:	b29a      	uxth	r2, r3
 801541e:	4b0f      	ldr	r3, [pc, #60]	; (801545c <readCanToStructs+0x41e8>)
 8015420:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8015424:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8015426:	4b0d      	ldr	r3, [pc, #52]	; (801545c <readCanToStructs+0x41e8>)
 8015428:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801542c:	885b      	ldrh	r3, [r3, #2]
 801542e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015432:	d104      	bne.n	801543e <readCanToStructs+0x41ca>
				canRead.Out = 0;
 8015434:	4b09      	ldr	r3, [pc, #36]	; (801545c <readCanToStructs+0x41e8>)
 8015436:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801543a:	2200      	movs	r2, #0
 801543c:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 801543e:	f7fb fec3 	bl	80111c8 <canDataReady>
 8015442:	4603      	mov	r3, r0
 8015444:	2b00      	cmp	r3, #0
 8015446:	f47f ab37 	bne.w	8014ab8 <readCanToStructs+0x3844>
			/* Protocol Type */
		}
	}
	default:
		break;
 801544a:	bf00      	nop
 801544c:	e000      	b.n	8015450 <readCanToStructs+0x41dc>
			return;
 801544e:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8015450:	373c      	adds	r7, #60	; 0x3c
 8015452:	46bd      	mov	sp, r7
 8015454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015456:	bf00      	nop
 8015458:	20006a14 	.word	0x20006a14
 801545c:	20007240 	.word	0x20007240

08015460 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8015460:	b580      	push	{r7, lr}
 8015462:	b084      	sub	sp, #16
 8015464:	af00      	add	r7, sp, #0
 8015466:	6078      	str	r0, [r7, #4]
 8015468:	460b      	mov	r3, r1
 801546a:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 801546c:	2300      	movs	r3, #0
 801546e:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8015470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015474:	461a      	mov	r2, r3
 8015476:	6879      	ldr	r1, [r7, #4]
 8015478:	2000      	movs	r0, #0
 801547a:	f000 f845 	bl	8015508 <GetCRC16>
 801547e:	4603      	mov	r3, r0
 8015480:	461a      	mov	r2, r3
 8015482:	4b1d      	ldr	r3, [pc, #116]	; (80154f8 <CheckCRC+0x98>)
 8015484:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8015486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801548a:	687a      	ldr	r2, [r7, #4]
 801548c:	4413      	add	r3, r2
 801548e:	781b      	ldrb	r3, [r3, #0]
 8015490:	b29a      	uxth	r2, r3
 8015492:	4b1a      	ldr	r3, [pc, #104]	; (80154fc <CheckCRC+0x9c>)
 8015494:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8015496:	4b19      	ldr	r3, [pc, #100]	; (80154fc <CheckCRC+0x9c>)
 8015498:	881b      	ldrh	r3, [r3, #0]
 801549a:	021b      	lsls	r3, r3, #8
 801549c:	b29a      	uxth	r2, r3
 801549e:	4b17      	ldr	r3, [pc, #92]	; (80154fc <CheckCRC+0x9c>)
 80154a0:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 80154a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80154a6:	3301      	adds	r3, #1
 80154a8:	687a      	ldr	r2, [r7, #4]
 80154aa:	4413      	add	r3, r2
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	b29a      	uxth	r2, r3
 80154b0:	4b12      	ldr	r3, [pc, #72]	; (80154fc <CheckCRC+0x9c>)
 80154b2:	881b      	ldrh	r3, [r3, #0]
 80154b4:	4313      	orrs	r3, r2
 80154b6:	b29a      	uxth	r2, r3
 80154b8:	4b10      	ldr	r3, [pc, #64]	; (80154fc <CheckCRC+0x9c>)
 80154ba:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 80154bc:	4b0f      	ldr	r3, [pc, #60]	; (80154fc <CheckCRC+0x9c>)
 80154be:	881a      	ldrh	r2, [r3, #0]
 80154c0:	4b0d      	ldr	r3, [pc, #52]	; (80154f8 <CheckCRC+0x98>)
 80154c2:	881b      	ldrh	r3, [r3, #0]
 80154c4:	429a      	cmp	r2, r3
 80154c6:	d105      	bne.n	80154d4 <CheckCRC+0x74>
	{
		retVal = 1;
 80154c8:	2301      	movs	r3, #1
 80154ca:	81fb      	strh	r3, [r7, #14]
		return k;
 80154cc:	4b0b      	ldr	r3, [pc, #44]	; (80154fc <CheckCRC+0x9c>)
 80154ce:	881b      	ldrh	r3, [r3, #0]
 80154d0:	b21b      	sxth	r3, r3
 80154d2:	e00d      	b.n	80154f0 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 80154d4:	4b08      	ldr	r3, [pc, #32]	; (80154f8 <CheckCRC+0x98>)
 80154d6:	881b      	ldrh	r3, [r3, #0]
 80154d8:	4619      	mov	r1, r3
 80154da:	4809      	ldr	r0, [pc, #36]	; (8015500 <CheckCRC+0xa0>)
 80154dc:	f010 fd70 	bl	8025fc0 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 80154e0:	4b06      	ldr	r3, [pc, #24]	; (80154fc <CheckCRC+0x9c>)
 80154e2:	881b      	ldrh	r3, [r3, #0]
 80154e4:	4619      	mov	r1, r3
 80154e6:	4807      	ldr	r0, [pc, #28]	; (8015504 <CheckCRC+0xa4>)
 80154e8:	f010 fd6a 	bl	8025fc0 <iprintf>
	return retVal;
 80154ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3710      	adds	r7, #16
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	2000b35c 	.word	0x2000b35c
 80154fc:	2000b35e 	.word	0x2000b35e
 8015500:	0802ac24 	.word	0x0802ac24
 8015504:	0802ac3c 	.word	0x0802ac3c

08015508 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8015508:	b480      	push	{r7}
 801550a:	b085      	sub	sp, #20
 801550c:	af00      	add	r7, sp, #0
 801550e:	4603      	mov	r3, r0
 8015510:	6039      	str	r1, [r7, #0]
 8015512:	80fb      	strh	r3, [r7, #6]
 8015514:	4613      	mov	r3, r2
 8015516:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8015518:	88fb      	ldrh	r3, [r7, #6]
 801551a:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 801551c:	e038      	b.n	8015590 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 801551e:	89fb      	ldrh	r3, [r7, #14]
 8015520:	f003 030f 	and.w	r3, r3, #15
 8015524:	4a22      	ldr	r2, [pc, #136]	; (80155b0 <GetCRC16+0xa8>)
 8015526:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801552a:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 801552c:	89fb      	ldrh	r3, [r7, #14]
 801552e:	091b      	lsrs	r3, r3, #4
 8015530:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8015532:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8015536:	89bb      	ldrh	r3, [r7, #12]
 8015538:	4053      	eors	r3, r2
 801553a:	b21a      	sxth	r2, r3
 801553c:	683b      	ldr	r3, [r7, #0]
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	f003 030f 	and.w	r3, r3, #15
 8015544:	491a      	ldr	r1, [pc, #104]	; (80155b0 <GetCRC16+0xa8>)
 8015546:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 801554a:	b21b      	sxth	r3, r3
 801554c:	4053      	eors	r3, r2
 801554e:	b21b      	sxth	r3, r3
 8015550:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8015552:	89fb      	ldrh	r3, [r7, #14]
 8015554:	f003 030f 	and.w	r3, r3, #15
 8015558:	4a15      	ldr	r2, [pc, #84]	; (80155b0 <GetCRC16+0xa8>)
 801555a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801555e:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8015560:	89fb      	ldrh	r3, [r7, #14]
 8015562:	091b      	lsrs	r3, r3, #4
 8015564:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8015566:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 801556a:	89bb      	ldrh	r3, [r7, #12]
 801556c:	4053      	eors	r3, r2
 801556e:	b21a      	sxth	r2, r3
 8015570:	683b      	ldr	r3, [r7, #0]
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	091b      	lsrs	r3, r3, #4
 8015576:	b2db      	uxtb	r3, r3
 8015578:	f003 030f 	and.w	r3, r3, #15
 801557c:	490c      	ldr	r1, [pc, #48]	; (80155b0 <GetCRC16+0xa8>)
 801557e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8015582:	b21b      	sxth	r3, r3
 8015584:	4053      	eors	r3, r2
 8015586:	b21b      	sxth	r3, r3
 8015588:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 801558a:	683b      	ldr	r3, [r7, #0]
 801558c:	3301      	adds	r3, #1
 801558e:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8015590:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015594:	b29a      	uxth	r2, r3
 8015596:	3a01      	subs	r2, #1
 8015598:	b292      	uxth	r2, r2
 801559a:	80ba      	strh	r2, [r7, #4]
 801559c:	2b00      	cmp	r3, #0
 801559e:	dcbe      	bgt.n	801551e <GetCRC16+0x16>
	}
	return(uiCrc);
 80155a0:	89fb      	ldrh	r3, [r7, #14]
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3714      	adds	r7, #20
 80155a6:	46bd      	mov	sp, r7
 80155a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ac:	4770      	bx	lr
 80155ae:	bf00      	nop
 80155b0:	0802d138 	.word	0x0802d138

080155b4 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b082      	sub	sp, #8
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
 80155bc:	460b      	mov	r3, r1
 80155be:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 80155c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155c4:	461a      	mov	r2, r3
 80155c6:	6879      	ldr	r1, [r7, #4]
 80155c8:	2000      	movs	r0, #0
 80155ca:	f7ff ff9d 	bl	8015508 <GetCRC16>
 80155ce:	4603      	mov	r3, r0
 80155d0:	461a      	mov	r2, r3
 80155d2:	4b11      	ldr	r3, [pc, #68]	; (8015618 <ComputeCRC+0x64>)
 80155d4:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 80155d6:	4b10      	ldr	r3, [pc, #64]	; (8015618 <ComputeCRC+0x64>)
 80155d8:	881a      	ldrh	r2, [r3, #0]
 80155da:	4b10      	ldr	r3, [pc, #64]	; (801561c <ComputeCRC+0x68>)
 80155dc:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 80155de:	4b0e      	ldr	r3, [pc, #56]	; (8015618 <ComputeCRC+0x64>)
 80155e0:	8819      	ldrh	r1, [r3, #0]
 80155e2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80155e6:	3301      	adds	r3, #1
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	4413      	add	r3, r2
 80155ec:	b2ca      	uxtb	r2, r1
 80155ee:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 80155f0:	4b09      	ldr	r3, [pc, #36]	; (8015618 <ComputeCRC+0x64>)
 80155f2:	881b      	ldrh	r3, [r3, #0]
 80155f4:	0a1b      	lsrs	r3, r3, #8
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	4b07      	ldr	r3, [pc, #28]	; (8015618 <ComputeCRC+0x64>)
 80155fa:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 80155fc:	4b06      	ldr	r3, [pc, #24]	; (8015618 <ComputeCRC+0x64>)
 80155fe:	8819      	ldrh	r1, [r3, #0]
 8015600:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8015604:	687a      	ldr	r2, [r7, #4]
 8015606:	4413      	add	r3, r2
 8015608:	b2ca      	uxtb	r2, r1
 801560a:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 801560c:	4b03      	ldr	r3, [pc, #12]	; (801561c <ComputeCRC+0x68>)
 801560e:	881b      	ldrh	r3, [r3, #0]
}
 8015610:	4618      	mov	r0, r3
 8015612:	3708      	adds	r7, #8
 8015614:	46bd      	mov	sp, r7
 8015616:	bd80      	pop	{r7, pc}
 8015618:	2000b360 	.word	0x2000b360
 801561c:	2000b362 	.word	0x2000b362

08015620 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8015620:	b480      	push	{r7}
 8015622:	b087      	sub	sp, #28
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8015628:	2300      	movs	r3, #0
 801562a:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 801562c:	2300      	movs	r3, #0
 801562e:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8015630:	2300      	movs	r3, #0
 8015632:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	005b      	lsls	r3, r3, #1
 8015638:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 801563a:	2300      	movs	r3, #0
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	e012      	b.n	8015666 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8015640:	693b      	ldr	r3, [r7, #16]
 8015642:	f003 0301 	and.w	r3, r3, #1
 8015646:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f1c3 031f 	rsb	r3, r3, #31
 801564e:	68ba      	ldr	r2, [r7, #8]
 8015650:	fa02 f303 	lsl.w	r3, r2, r3
 8015654:	697a      	ldr	r2, [r7, #20]
 8015656:	4313      	orrs	r3, r2
 8015658:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	085b      	lsrs	r3, r3, #1
 801565e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	3301      	adds	r3, #1
 8015664:	60fb      	str	r3, [r7, #12]
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	2b1f      	cmp	r3, #31
 801566a:	dde9      	ble.n	8015640 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 801566c:	697b      	ldr	r3, [r7, #20]
}
 801566e:	4618      	mov	r0, r3
 8015670:	371c      	adds	r7, #28
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr
	...

0801567c <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b088      	sub	sp, #32
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	460b      	mov	r3, r1
 8015686:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8015688:	2300      	movs	r3, #0
 801568a:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 801568c:	2300      	movs	r3, #0
 801568e:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8015690:	2300      	movs	r3, #0
 8015692:	613b      	str	r3, [r7, #16]
	int i=0;
 8015694:	2300      	movs	r3, #0
 8015696:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8015698:	4b26      	ldr	r3, [pc, #152]	; (8015734 <CalculateDirectReverseCrc+0xb8>)
 801569a:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 801569c:	68f8      	ldr	r0, [r7, #12]
 801569e:	f7ff ffbf 	bl	8015620 <ReverseCRCPolynomial>
 80156a2:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 80156a4:	2300      	movs	r3, #0
 80156a6:	61bb      	str	r3, [r7, #24]
 80156a8:	e00d      	b.n	80156c6 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 80156aa:	69f8      	ldr	r0, [r7, #28]
 80156ac:	69bb      	ldr	r3, [r7, #24]
 80156ae:	687a      	ldr	r2, [r7, #4]
 80156b0:	4413      	add	r3, r2
 80156b2:	781b      	ldrb	r3, [r3, #0]
 80156b4:	697a      	ldr	r2, [r7, #20]
 80156b6:	4619      	mov	r1, r3
 80156b8:	f000 f844 	bl	8015744 <AnsoldoCrc>
 80156bc:	4603      	mov	r3, r0
 80156be:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 80156c0:	69bb      	ldr	r3, [r7, #24]
 80156c2:	3301      	adds	r3, #1
 80156c4:	61bb      	str	r3, [r7, #24]
 80156c6:	887b      	ldrh	r3, [r7, #2]
 80156c8:	69ba      	ldr	r2, [r7, #24]
 80156ca:	429a      	cmp	r2, r3
 80156cc:	dbed      	blt.n	80156aa <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	061b      	lsls	r3, r3, #24
 80156d2:	693a      	ldr	r2, [r7, #16]
 80156d4:	4313      	orrs	r3, r2
 80156d6:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 80156d8:	69fb      	ldr	r3, [r7, #28]
 80156da:	021b      	lsls	r3, r3, #8
 80156dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80156e0:	693a      	ldr	r2, [r7, #16]
 80156e2:	4313      	orrs	r3, r2
 80156e4:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	121b      	asrs	r3, r3, #8
 80156ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80156ee:	693a      	ldr	r2, [r7, #16]
 80156f0:	4313      	orrs	r3, r2
 80156f2:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 80156f4:	69fb      	ldr	r3, [r7, #28]
 80156f6:	0e1a      	lsrs	r2, r3, #24
 80156f8:	693b      	ldr	r3, [r7, #16]
 80156fa:	4313      	orrs	r3, r2
 80156fc:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 80156fe:	4b0e      	ldr	r3, [pc, #56]	; (8015738 <CalculateDirectReverseCrc+0xbc>)
 8015700:	781b      	ldrb	r3, [r3, #0]
 8015702:	2b01      	cmp	r3, #1
 8015704:	d110      	bne.n	8015728 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8015706:	480d      	ldr	r0, [pc, #52]	; (801573c <CalculateDirectReverseCrc+0xc0>)
 8015708:	f008 f902 	bl	801d910 <HAL_RNG_GetRandomNumber>
 801570c:	4601      	mov	r1, r0
 801570e:	4b0c      	ldr	r3, [pc, #48]	; (8015740 <CalculateDirectReverseCrc+0xc4>)
 8015710:	fba3 2301 	umull	r2, r3, r3, r1
 8015714:	08da      	lsrs	r2, r3, #3
 8015716:	4613      	mov	r3, r2
 8015718:	009b      	lsls	r3, r3, #2
 801571a:	4413      	add	r3, r2
 801571c:	005b      	lsls	r3, r3, #1
 801571e:	1aca      	subs	r2, r1, r3
 8015720:	693b      	ldr	r3, [r7, #16]
 8015722:	4413      	add	r3, r2
 8015724:	3301      	adds	r3, #1
 8015726:	e000      	b.n	801572a <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8015728:	693b      	ldr	r3, [r7, #16]
}
 801572a:	4618      	mov	r0, r3
 801572c:	3720      	adds	r7, #32
 801572e:	46bd      	mov	sp, r7
 8015730:	bd80      	pop	{r7, pc}
 8015732:	bf00      	nop
 8015734:	d20d8a81 	.word	0xd20d8a81
 8015738:	200024af 	.word	0x200024af
 801573c:	2000bc54 	.word	0x2000bc54
 8015740:	cccccccd 	.word	0xcccccccd

08015744 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8015744:	b480      	push	{r7}
 8015746:	b08b      	sub	sp, #44	; 0x2c
 8015748:	af00      	add	r7, sp, #0
 801574a:	60f8      	str	r0, [r7, #12]
 801574c:	460b      	mov	r3, r1
 801574e:	607a      	str	r2, [r7, #4]
 8015750:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8015752:	7afb      	ldrb	r3, [r7, #11]
 8015754:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8015756:	2301      	movs	r3, #1
 8015758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801575c:	e01d      	b.n	801579a <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 801575e:	68fb      	ldr	r3, [r7, #12]
 8015760:	f003 0301 	and.w	r3, r3, #1
 8015764:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8015766:	6a3b      	ldr	r3, [r7, #32]
 8015768:	f003 0301 	and.w	r3, r3, #1
 801576c:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	085b      	lsrs	r3, r3, #1
 8015772:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8015774:	69fa      	ldr	r2, [r7, #28]
 8015776:	69bb      	ldr	r3, [r7, #24]
 8015778:	4053      	eors	r3, r2
 801577a:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 801577c:	697b      	ldr	r3, [r7, #20]
 801577e:	2b01      	cmp	r3, #1
 8015780:	d103      	bne.n	801578a <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8015782:	68fa      	ldr	r2, [r7, #12]
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	4053      	eors	r3, r2
 8015788:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 801578a:	6a3b      	ldr	r3, [r7, #32]
 801578c:	085b      	lsrs	r3, r3, #1
 801578e:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8015790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015794:	3301      	adds	r3, #1
 8015796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801579a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801579e:	2b08      	cmp	r3, #8
 80157a0:	d9dd      	bls.n	801575e <AnsoldoCrc+0x1a>
	}
	return (Crc);
 80157a2:	68fb      	ldr	r3, [r7, #12]
}
 80157a4:	4618      	mov	r0, r3
 80157a6:	372c      	adds	r7, #44	; 0x2c
 80157a8:	46bd      	mov	sp, r7
 80157aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ae:	4770      	bx	lr

080157b0 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80157b0:	b580      	push	{r7, lr}
 80157b2:	b090      	sub	sp, #64	; 0x40
 80157b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80157b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80157ba:	2200      	movs	r2, #0
 80157bc:	601a      	str	r2, [r3, #0]
 80157be:	605a      	str	r2, [r3, #4]
 80157c0:	609a      	str	r2, [r3, #8]
 80157c2:	60da      	str	r2, [r3, #12]
 80157c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80157c6:	4bb2      	ldr	r3, [pc, #712]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ca:	4ab1      	ldr	r2, [pc, #708]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80157d0:	6313      	str	r3, [r2, #48]	; 0x30
 80157d2:	4baf      	ldr	r3, [pc, #700]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80157da:	62bb      	str	r3, [r7, #40]	; 0x28
 80157dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80157de:	4bac      	ldr	r3, [pc, #688]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157e2:	4aab      	ldr	r2, [pc, #684]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157e4:	f043 0320 	orr.w	r3, r3, #32
 80157e8:	6313      	str	r3, [r2, #48]	; 0x30
 80157ea:	4ba9      	ldr	r3, [pc, #676]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ee:	f003 0320 	and.w	r3, r3, #32
 80157f2:	627b      	str	r3, [r7, #36]	; 0x24
 80157f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80157f6:	4ba6      	ldr	r3, [pc, #664]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157fa:	4aa5      	ldr	r2, [pc, #660]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80157fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015800:	6313      	str	r3, [r2, #48]	; 0x30
 8015802:	4ba3      	ldr	r3, [pc, #652]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801580a:	623b      	str	r3, [r7, #32]
 801580c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801580e:	4ba0      	ldr	r3, [pc, #640]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015812:	4a9f      	ldr	r2, [pc, #636]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015814:	f043 0304 	orr.w	r3, r3, #4
 8015818:	6313      	str	r3, [r2, #48]	; 0x30
 801581a:	4b9d      	ldr	r3, [pc, #628]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801581c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801581e:	f003 0304 	and.w	r3, r3, #4
 8015822:	61fb      	str	r3, [r7, #28]
 8015824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8015826:	4b9a      	ldr	r3, [pc, #616]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801582a:	4a99      	ldr	r2, [pc, #612]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801582c:	f043 0301 	orr.w	r3, r3, #1
 8015830:	6313      	str	r3, [r2, #48]	; 0x30
 8015832:	4b97      	ldr	r3, [pc, #604]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015836:	f003 0301 	and.w	r3, r3, #1
 801583a:	61bb      	str	r3, [r7, #24]
 801583c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801583e:	4b94      	ldr	r3, [pc, #592]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015842:	4a93      	ldr	r2, [pc, #588]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015844:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015848:	6313      	str	r3, [r2, #48]	; 0x30
 801584a:	4b91      	ldr	r3, [pc, #580]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015852:	617b      	str	r3, [r7, #20]
 8015854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8015856:	4b8e      	ldr	r3, [pc, #568]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801585a:	4a8d      	ldr	r2, [pc, #564]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801585c:	f043 0310 	orr.w	r3, r3, #16
 8015860:	6313      	str	r3, [r2, #48]	; 0x30
 8015862:	4b8b      	ldr	r3, [pc, #556]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015866:	f003 0310 	and.w	r3, r3, #16
 801586a:	613b      	str	r3, [r7, #16]
 801586c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801586e:	4b88      	ldr	r3, [pc, #544]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015872:	4a87      	ldr	r2, [pc, #540]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015874:	f043 0302 	orr.w	r3, r3, #2
 8015878:	6313      	str	r3, [r2, #48]	; 0x30
 801587a:	4b85      	ldr	r3, [pc, #532]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801587e:	f003 0302 	and.w	r3, r3, #2
 8015882:	60fb      	str	r3, [r7, #12]
 8015884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8015886:	4b82      	ldr	r3, [pc, #520]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801588a:	4a81      	ldr	r2, [pc, #516]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 801588c:	f043 0308 	orr.w	r3, r3, #8
 8015890:	6313      	str	r3, [r2, #48]	; 0x30
 8015892:	4b7f      	ldr	r3, [pc, #508]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 8015894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015896:	f003 0308 	and.w	r3, r3, #8
 801589a:	60bb      	str	r3, [r7, #8]
 801589c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801589e:	4b7c      	ldr	r3, [pc, #496]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158a2:	4a7b      	ldr	r2, [pc, #492]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80158a8:	6313      	str	r3, [r2, #48]	; 0x30
 80158aa:	4b79      	ldr	r3, [pc, #484]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80158b2:	607b      	str	r3, [r7, #4]
 80158b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80158b6:	4b76      	ldr	r3, [pc, #472]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158ba:	4a75      	ldr	r2, [pc, #468]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80158c0:	6313      	str	r3, [r2, #48]	; 0x30
 80158c2:	4b73      	ldr	r3, [pc, #460]	; (8015a90 <MX_GPIO_Init+0x2e0>)
 80158c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80158c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80158ca:	603b      	str	r3, [r7, #0]
 80158cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 80158ce:	2200      	movs	r2, #0
 80158d0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80158d4:	486f      	ldr	r0, [pc, #444]	; (8015a94 <MX_GPIO_Init+0x2e4>)
 80158d6:	f006 f839 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 80158da:	2200      	movs	r2, #0
 80158dc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80158e0:	486d      	ldr	r0, [pc, #436]	; (8015a98 <MX_GPIO_Init+0x2e8>)
 80158e2:	f006 f833 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 80158e6:	2200      	movs	r2, #0
 80158e8:	f240 7104 	movw	r1, #1796	; 0x704
 80158ec:	486b      	ldr	r0, [pc, #428]	; (8015a9c <MX_GPIO_Init+0x2ec>)
 80158ee:	f006 f82d 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 80158f2:	2201      	movs	r2, #1
 80158f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80158f8:	4869      	ldr	r0, [pc, #420]	; (8015aa0 <MX_GPIO_Init+0x2f0>)
 80158fa:	f006 f827 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 80158fe:	2200      	movs	r2, #0
 8015900:	f241 0104 	movw	r1, #4100	; 0x1004
 8015904:	4867      	ldr	r0, [pc, #412]	; (8015aa4 <MX_GPIO_Init+0x2f4>)
 8015906:	f006 f821 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 801590a:	2201      	movs	r2, #1
 801590c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8015910:	4865      	ldr	r0, [pc, #404]	; (8015aa8 <MX_GPIO_Init+0x2f8>)
 8015912:	f006 f81b 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8015916:	2200      	movs	r2, #0
 8015918:	2108      	movs	r1, #8
 801591a:	4864      	ldr	r0, [pc, #400]	; (8015aac <MX_GPIO_Init+0x2fc>)
 801591c:	f006 f816 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8015920:	2201      	movs	r2, #1
 8015922:	2160      	movs	r1, #96	; 0x60
 8015924:	4861      	ldr	r0, [pc, #388]	; (8015aac <MX_GPIO_Init+0x2fc>)
 8015926:	f006 f811 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 801592a:	2200      	movs	r2, #0
 801592c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8015930:	485f      	ldr	r0, [pc, #380]	; (8015ab0 <MX_GPIO_Init+0x300>)
 8015932:	f006 f80b 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8015936:	2201      	movs	r2, #1
 8015938:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801593c:	485c      	ldr	r0, [pc, #368]	; (8015ab0 <MX_GPIO_Init+0x300>)
 801593e:	f006 f805 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8015942:	2201      	movs	r2, #1
 8015944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8015948:	4856      	ldr	r0, [pc, #344]	; (8015aa4 <MX_GPIO_Init+0x2f4>)
 801594a:	f005 ffff 	bl	801b94c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 801594e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8015952:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015954:	2301      	movs	r3, #1
 8015956:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015958:	2300      	movs	r3, #0
 801595a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801595c:	2303      	movs	r3, #3
 801595e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015960:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015964:	4619      	mov	r1, r3
 8015966:	484b      	ldr	r0, [pc, #300]	; (8015a94 <MX_GPIO_Init+0x2e4>)
 8015968:	f005 fe2c 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 801596c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015970:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015972:	2300      	movs	r3, #0
 8015974:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015976:	2300      	movs	r3, #0
 8015978:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801597a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801597e:	4619      	mov	r1, r3
 8015980:	4844      	ldr	r0, [pc, #272]	; (8015a94 <MX_GPIO_Init+0x2e4>)
 8015982:	f005 fe1f 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8015986:	f44f 6384 	mov.w	r3, #1056	; 0x420
 801598a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801598c:	2301      	movs	r3, #1
 801598e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015990:	2300      	movs	r3, #0
 8015992:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015994:	2303      	movs	r3, #3
 8015996:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801599c:	4619      	mov	r1, r3
 801599e:	483e      	ldr	r0, [pc, #248]	; (8015a98 <MX_GPIO_Init+0x2e8>)
 80159a0:	f005 fe10 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 80159a4:	2304      	movs	r3, #4
 80159a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80159a8:	2300      	movs	r3, #0
 80159aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159ac:	2300      	movs	r3, #0
 80159ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80159b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80159b4:	4619      	mov	r1, r3
 80159b6:	483c      	ldr	r0, [pc, #240]	; (8015aa8 <MX_GPIO_Init+0x2f8>)
 80159b8:	f005 fe04 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 80159bc:	f240 7304 	movw	r3, #1796	; 0x704
 80159c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80159c2:	2301      	movs	r3, #1
 80159c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159c6:	2300      	movs	r3, #0
 80159c8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80159ca:	2303      	movs	r3, #3
 80159cc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80159ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80159d2:	4619      	mov	r1, r3
 80159d4:	4831      	ldr	r0, [pc, #196]	; (8015a9c <MX_GPIO_Init+0x2ec>)
 80159d6:	f005 fdf5 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 80159da:	2303      	movs	r3, #3
 80159dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80159de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80159e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159e4:	2300      	movs	r3, #0
 80159e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80159e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80159ec:	4619      	mov	r1, r3
 80159ee:	482d      	ldr	r0, [pc, #180]	; (8015aa4 <MX_GPIO_Init+0x2f4>)
 80159f0:	f005 fde8 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 80159f4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80159f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80159fa:	2300      	movs	r3, #0
 80159fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80159fe:	2300      	movs	r3, #0
 8015a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8015a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a06:	4619      	mov	r1, r3
 8015a08:	4825      	ldr	r0, [pc, #148]	; (8015aa0 <MX_GPIO_Init+0x2f0>)
 8015a0a:	f005 fddb 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8015a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a14:	2301      	movs	r3, #1
 8015a16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a1c:	2303      	movs	r3, #3
 8015a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8015a20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a24:	4619      	mov	r1, r3
 8015a26:	481e      	ldr	r0, [pc, #120]	; (8015aa0 <MX_GPIO_Init+0x2f0>)
 8015a28:	f005 fdcc 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8015a2c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8015a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015a32:	2300      	movs	r3, #0
 8015a34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a36:	2300      	movs	r3, #0
 8015a38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015a3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a3e:	4619      	mov	r1, r3
 8015a40:	481a      	ldr	r0, [pc, #104]	; (8015aac <MX_GPIO_Init+0x2fc>)
 8015a42:	f005 fdbf 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8015a46:	f241 4304 	movw	r3, #5124	; 0x1404
 8015a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a4c:	2301      	movs	r3, #1
 8015a4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a50:	2300      	movs	r3, #0
 8015a52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a54:	2303      	movs	r3, #3
 8015a56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	4811      	ldr	r0, [pc, #68]	; (8015aa4 <MX_GPIO_Init+0x2f4>)
 8015a60:	f005 fdb0 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8015a64:	2308      	movs	r3, #8
 8015a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015a68:	2300      	movs	r3, #0
 8015a6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8015a70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015a74:	4619      	mov	r1, r3
 8015a76:	480b      	ldr	r0, [pc, #44]	; (8015aa4 <MX_GPIO_Init+0x2f4>)
 8015a78:	f005 fda4 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8015a7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015a82:	2301      	movs	r3, #1
 8015a84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a86:	2300      	movs	r3, #0
 8015a88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8015a8e:	e011      	b.n	8015ab4 <MX_GPIO_Init+0x304>
 8015a90:	40023800 	.word	0x40023800
 8015a94:	40022000 	.word	0x40022000
 8015a98:	40021400 	.word	0x40021400
 8015a9c:	40021c00 	.word	0x40021c00
 8015aa0:	40021000 	.word	0x40021000
 8015aa4:	40021800 	.word	0x40021800
 8015aa8:	40020800 	.word	0x40020800
 8015aac:	40020c00 	.word	0x40020c00
 8015ab0:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8015ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ab8:	4619      	mov	r1, r3
 8015aba:	4836      	ldr	r0, [pc, #216]	; (8015b94 <MX_GPIO_Init+0x3e4>)
 8015abc:	f005 fd82 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8015ac0:	2303      	movs	r3, #3
 8015ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ac4:	2302      	movs	r3, #2
 8015ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ac8:	2300      	movs	r3, #0
 8015aca:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015acc:	2303      	movs	r3, #3
 8015ace:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8015ad0:	2309      	movs	r3, #9
 8015ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015ad4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015ad8:	4619      	mov	r1, r3
 8015ada:	482f      	ldr	r0, [pc, #188]	; (8015b98 <MX_GPIO_Init+0x3e8>)
 8015adc:	f005 fd72 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8015ae0:	2368      	movs	r3, #104	; 0x68
 8015ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015ae4:	2301      	movs	r3, #1
 8015ae6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ae8:	2300      	movs	r3, #0
 8015aea:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015aec:	2303      	movs	r3, #3
 8015aee:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015af0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015af4:	4619      	mov	r1, r3
 8015af6:	4828      	ldr	r0, [pc, #160]	; (8015b98 <MX_GPIO_Init+0x3e8>)
 8015af8:	f005 fd64 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8015afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015b02:	2300      	movs	r3, #0
 8015b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b06:	2300      	movs	r3, #0
 8015b08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8015b0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b0e:	4619      	mov	r1, r3
 8015b10:	4822      	ldr	r0, [pc, #136]	; (8015b9c <MX_GPIO_Init+0x3ec>)
 8015b12:	f005 fd57 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8015b16:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8015b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015b1c:	2301      	movs	r3, #1
 8015b1e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b20:	2300      	movs	r3, #0
 8015b22:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b24:	2300      	movs	r3, #0
 8015b26:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8015b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b2c:	4619      	mov	r1, r3
 8015b2e:	481b      	ldr	r0, [pc, #108]	; (8015b9c <MX_GPIO_Init+0x3ec>)
 8015b30:	f005 fd48 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8015b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8015b3a:	2301      	movs	r3, #1
 8015b3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b3e:	2300      	movs	r3, #0
 8015b40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015b42:	2303      	movs	r3, #3
 8015b44:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8015b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b4a:	4619      	mov	r1, r3
 8015b4c:	4813      	ldr	r0, [pc, #76]	; (8015b9c <MX_GPIO_Init+0x3ec>)
 8015b4e:	f005 fd39 	bl	801b5c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8015b52:	2318      	movs	r3, #24
 8015b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015b56:	2300      	movs	r3, #0
 8015b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8015b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8015b62:	4619      	mov	r1, r3
 8015b64:	480e      	ldr	r0, [pc, #56]	; (8015ba0 <MX_GPIO_Init+0x3f0>)
 8015b66:	f005 fd2d 	bl	801b5c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8015b6a:	2200      	movs	r2, #0
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	2006      	movs	r0, #6
 8015b70:	f004 f9fd 	bl	8019f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8015b74:	2006      	movs	r0, #6
 8015b76:	f004 fa16 	bl	8019fa6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8015b7a:	2201      	movs	r2, #1
 8015b7c:	2101      	movs	r1, #1
 8015b7e:	2007      	movs	r0, #7
 8015b80:	f004 f9f5 	bl	8019f6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8015b84:	2007      	movs	r0, #7
 8015b86:	f004 fa0e 	bl	8019fa6 <HAL_NVIC_EnableIRQ>

}
 8015b8a:	bf00      	nop
 8015b8c:	3740      	adds	r7, #64	; 0x40
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bd80      	pop	{r7, pc}
 8015b92:	bf00      	nop
 8015b94:	40020800 	.word	0x40020800
 8015b98:	40020c00 	.word	0x40020c00
 8015b9c:	40022400 	.word	0x40022400
 8015ba0:	40022800 	.word	0x40022800

08015ba4 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8015ba8:	4b0a      	ldr	r3, [pc, #40]	; (8015bd4 <Feed_wdt+0x30>)
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7fa fc23 	bl	80103f8 <HAL_Elaps_Ticks>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015bb8:	d309      	bcc.n	8015bce <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8015bba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8015bbe:	4806      	ldr	r0, [pc, #24]	; (8015bd8 <Feed_wdt+0x34>)
 8015bc0:	f005 fedd 	bl	801b97e <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8015bc4:	f003 fae6 	bl	8019194 <HAL_GetTick>
 8015bc8:	4603      	mov	r3, r0
 8015bca:	4a02      	ldr	r2, [pc, #8]	; (8015bd4 <Feed_wdt+0x30>)
 8015bcc:	6013      	str	r3, [r2, #0]
	}

}
 8015bce:	bf00      	nop
 8015bd0:	bd80      	pop	{r7, pc}
 8015bd2:	bf00      	nop
 8015bd4:	2000b364 	.word	0x2000b364
 8015bd8:	40022400 	.word	0x40022400

08015bdc <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8015bdc:	b580      	push	{r7, lr}
 8015bde:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 8015be0:	4b09      	ldr	r3, [pc, #36]	; (8015c08 <Blink_S2+0x2c>)
 8015be2:	681b      	ldr	r3, [r3, #0]
 8015be4:	4618      	mov	r0, r3
 8015be6:	f7fa fc07 	bl	80103f8 <HAL_Elaps_Ticks>
 8015bea:	4603      	mov	r3, r0
 8015bec:	2b64      	cmp	r3, #100	; 0x64
 8015bee:	d909      	bls.n	8015c04 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 8015bf0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015bf4:	4805      	ldr	r0, [pc, #20]	; (8015c0c <Blink_S2+0x30>)
 8015bf6:	f005 fec2 	bl	801b97e <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8015bfa:	f003 facb 	bl	8019194 <HAL_GetTick>
 8015bfe:	4603      	mov	r3, r0
 8015c00:	4a01      	ldr	r2, [pc, #4]	; (8015c08 <Blink_S2+0x2c>)
 8015c02:	6013      	str	r3, [r2, #0]
	}
}
 8015c04:	bf00      	nop
 8015c06:	bd80      	pop	{r7, pc}
 8015c08:	2000b368 	.word	0x2000b368
 8015c0c:	40021c00 	.word	0x40021c00

08015c10 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8015c10:	b580      	push	{r7, lr}
 8015c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8015c14:	4b1b      	ldr	r3, [pc, #108]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c16:	4a1c      	ldr	r2, [pc, #112]	; (8015c88 <MX_I2C1_Init+0x78>)
 8015c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8015c1a:	4b1a      	ldr	r3, [pc, #104]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c1c:	4a1b      	ldr	r2, [pc, #108]	; (8015c8c <MX_I2C1_Init+0x7c>)
 8015c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8015c20:	4b18      	ldr	r3, [pc, #96]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c22:	2200      	movs	r2, #0
 8015c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015c26:	4b17      	ldr	r3, [pc, #92]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c28:	2201      	movs	r2, #1
 8015c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015c2c:	4b15      	ldr	r3, [pc, #84]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c2e:	2200      	movs	r2, #0
 8015c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8015c32:	4b14      	ldr	r3, [pc, #80]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c34:	2200      	movs	r2, #0
 8015c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015c38:	4b12      	ldr	r3, [pc, #72]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c3a:	2200      	movs	r2, #0
 8015c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015c3e:	4b11      	ldr	r3, [pc, #68]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c40:	2200      	movs	r2, #0
 8015c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015c44:	4b0f      	ldr	r3, [pc, #60]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c46:	2200      	movs	r2, #0
 8015c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8015c4a:	480e      	ldr	r0, [pc, #56]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c4c:	f005 fed6 	bl	801b9fc <HAL_I2C_Init>
 8015c50:	4603      	mov	r3, r0
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d001      	beq.n	8015c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8015c56:	f001 fca3 	bl	80175a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015c5a:	2100      	movs	r1, #0
 8015c5c:	4809      	ldr	r0, [pc, #36]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c5e:	f006 fc25 	bl	801c4ac <HAL_I2CEx_ConfigAnalogFilter>
 8015c62:	4603      	mov	r3, r0
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d001      	beq.n	8015c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8015c68:	f001 fc9a 	bl	80175a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8015c6c:	2100      	movs	r1, #0
 8015c6e:	4805      	ldr	r0, [pc, #20]	; (8015c84 <MX_I2C1_Init+0x74>)
 8015c70:	f006 fc67 	bl	801c542 <HAL_I2CEx_ConfigDigitalFilter>
 8015c74:	4603      	mov	r3, r0
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d001      	beq.n	8015c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8015c7a:	f001 fc91 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8015c7e:	bf00      	nop
 8015c80:	bd80      	pop	{r7, pc}
 8015c82:	bf00      	nop
 8015c84:	2000b36c 	.word	0x2000b36c
 8015c88:	40005400 	.word	0x40005400
 8015c8c:	c0000e12 	.word	0xc0000e12

08015c90 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8015c94:	4b1b      	ldr	r3, [pc, #108]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015c96:	4a1c      	ldr	r2, [pc, #112]	; (8015d08 <MX_I2C2_Init+0x78>)
 8015c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8015c9a:	4b1a      	ldr	r3, [pc, #104]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015c9c:	4a1b      	ldr	r2, [pc, #108]	; (8015d0c <MX_I2C2_Init+0x7c>)
 8015c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8015ca0:	4b18      	ldr	r3, [pc, #96]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015ca2:	2200      	movs	r2, #0
 8015ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8015ca6:	4b17      	ldr	r3, [pc, #92]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015ca8:	2201      	movs	r2, #1
 8015caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8015cac:	4b15      	ldr	r3, [pc, #84]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cae:	2200      	movs	r2, #0
 8015cb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8015cb2:	4b14      	ldr	r3, [pc, #80]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cb4:	2200      	movs	r2, #0
 8015cb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8015cb8:	4b12      	ldr	r3, [pc, #72]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cba:	2200      	movs	r2, #0
 8015cbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8015cbe:	4b11      	ldr	r3, [pc, #68]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cc0:	2200      	movs	r2, #0
 8015cc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8015cc4:	4b0f      	ldr	r3, [pc, #60]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8015cca:	480e      	ldr	r0, [pc, #56]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015ccc:	f005 fe96 	bl	801b9fc <HAL_I2C_Init>
 8015cd0:	4603      	mov	r3, r0
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d001      	beq.n	8015cda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8015cd6:	f001 fc63 	bl	80175a0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8015cda:	2100      	movs	r1, #0
 8015cdc:	4809      	ldr	r0, [pc, #36]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cde:	f006 fbe5 	bl	801c4ac <HAL_I2CEx_ConfigAnalogFilter>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d001      	beq.n	8015cec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8015ce8:	f001 fc5a 	bl	80175a0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8015cec:	2100      	movs	r1, #0
 8015cee:	4805      	ldr	r0, [pc, #20]	; (8015d04 <MX_I2C2_Init+0x74>)
 8015cf0:	f006 fc27 	bl	801c542 <HAL_I2CEx_ConfigDigitalFilter>
 8015cf4:	4603      	mov	r3, r0
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d001      	beq.n	8015cfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8015cfa:	f001 fc51 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8015cfe:	bf00      	nop
 8015d00:	bd80      	pop	{r7, pc}
 8015d02:	bf00      	nop
 8015d04:	2000b3c0 	.word	0x2000b3c0
 8015d08:	40005800 	.word	0x40005800
 8015d0c:	c0000e12 	.word	0xc0000e12

08015d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8015d10:	b580      	push	{r7, lr}
 8015d12:	b0b0      	sub	sp, #192	; 0xc0
 8015d14:	af00      	add	r7, sp, #0
 8015d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015d18:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	601a      	str	r2, [r3, #0]
 8015d20:	605a      	str	r2, [r3, #4]
 8015d22:	609a      	str	r2, [r3, #8]
 8015d24:	60da      	str	r2, [r3, #12]
 8015d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015d28:	f107 031c 	add.w	r3, r7, #28
 8015d2c:	2290      	movs	r2, #144	; 0x90
 8015d2e:	2100      	movs	r1, #0
 8015d30:	4618      	mov	r0, r3
 8015d32:	f010 f85d 	bl	8025df0 <memset>
  if(i2cHandle->Instance==I2C1)
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	681b      	ldr	r3, [r3, #0]
 8015d3a:	4a44      	ldr	r2, [pc, #272]	; (8015e4c <HAL_I2C_MspInit+0x13c>)
 8015d3c:	4293      	cmp	r3, r2
 8015d3e:	d13e      	bne.n	8015dbe <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8015d40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8015d44:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8015d46:	2300      	movs	r3, #0
 8015d48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015d4c:	f107 031c 	add.w	r3, r7, #28
 8015d50:	4618      	mov	r0, r3
 8015d52:	f007 f935 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 8015d56:	4603      	mov	r3, r0
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d001      	beq.n	8015d60 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8015d5c:	f001 fc20 	bl	80175a0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8015d60:	4b3b      	ldr	r3, [pc, #236]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d64:	4a3a      	ldr	r2, [pc, #232]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015d66:	f043 0302 	orr.w	r3, r3, #2
 8015d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8015d6c:	4b38      	ldr	r3, [pc, #224]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d70:	f003 0302 	and.w	r3, r3, #2
 8015d74:	61bb      	str	r3, [r7, #24]
 8015d76:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8015d78:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8015d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015d80:	2312      	movs	r3, #18
 8015d82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d86:	2300      	movs	r3, #0
 8015d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d8c:	2303      	movs	r3, #3
 8015d8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8015d92:	2304      	movs	r3, #4
 8015d94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8015d98:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015d9c:	4619      	mov	r1, r3
 8015d9e:	482d      	ldr	r0, [pc, #180]	; (8015e54 <HAL_I2C_MspInit+0x144>)
 8015da0:	f005 fc10 	bl	801b5c4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8015da4:	4b2a      	ldr	r3, [pc, #168]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015da8:	4a29      	ldr	r2, [pc, #164]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015daa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8015dae:	6413      	str	r3, [r2, #64]	; 0x40
 8015db0:	4b27      	ldr	r3, [pc, #156]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015db4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015db8:	617b      	str	r3, [r7, #20]
 8015dba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8015dbc:	e041      	b.n	8015e42 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	4a25      	ldr	r2, [pc, #148]	; (8015e58 <HAL_I2C_MspInit+0x148>)
 8015dc4:	4293      	cmp	r3, r2
 8015dc6:	d13c      	bne.n	8015e42 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8015dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015dcc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015dd4:	f107 031c 	add.w	r3, r7, #28
 8015dd8:	4618      	mov	r0, r3
 8015dda:	f007 f8f1 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 8015dde:	4603      	mov	r3, r0
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d001      	beq.n	8015de8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8015de4:	f001 fbdc 	bl	80175a0 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8015de8:	4b19      	ldr	r3, [pc, #100]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dec:	4a18      	ldr	r2, [pc, #96]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015dee:	f043 0320 	orr.w	r3, r3, #32
 8015df2:	6313      	str	r3, [r2, #48]	; 0x30
 8015df4:	4b16      	ldr	r3, [pc, #88]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015df8:	f003 0320 	and.w	r3, r3, #32
 8015dfc:	613b      	str	r3, [r7, #16]
 8015dfe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 8015e00:	2303      	movs	r3, #3
 8015e02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8015e06:	2312      	movs	r3, #18
 8015e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e12:	2303      	movs	r3, #3
 8015e14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8015e18:	2304      	movs	r3, #4
 8015e1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015e1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8015e22:	4619      	mov	r1, r3
 8015e24:	480d      	ldr	r0, [pc, #52]	; (8015e5c <HAL_I2C_MspInit+0x14c>)
 8015e26:	f005 fbcd 	bl	801b5c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8015e2a:	4b09      	ldr	r3, [pc, #36]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e2e:	4a08      	ldr	r2, [pc, #32]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8015e34:	6413      	str	r3, [r2, #64]	; 0x40
 8015e36:	4b06      	ldr	r3, [pc, #24]	; (8015e50 <HAL_I2C_MspInit+0x140>)
 8015e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015e3e:	60fb      	str	r3, [r7, #12]
 8015e40:	68fb      	ldr	r3, [r7, #12]
}
 8015e42:	bf00      	nop
 8015e44:	37c0      	adds	r7, #192	; 0xc0
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	40005400 	.word	0x40005400
 8015e50:	40023800 	.word	0x40023800
 8015e54:	40020400 	.word	0x40020400
 8015e58:	40005800 	.word	0x40005800
 8015e5c:	40021400 	.word	0x40021400

08015e60 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8015e64:	4b0b      	ldr	r3, [pc, #44]	; (8015e94 <MX_IWDG_Init+0x34>)
 8015e66:	4a0c      	ldr	r2, [pc, #48]	; (8015e98 <MX_IWDG_Init+0x38>)
 8015e68:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8015e6a:	4b0a      	ldr	r3, [pc, #40]	; (8015e94 <MX_IWDG_Init+0x34>)
 8015e6c:	2203      	movs	r2, #3
 8015e6e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8015e70:	4b08      	ldr	r3, [pc, #32]	; (8015e94 <MX_IWDG_Init+0x34>)
 8015e72:	f640 72ff 	movw	r2, #4095	; 0xfff
 8015e76:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8015e78:	4b06      	ldr	r3, [pc, #24]	; (8015e94 <MX_IWDG_Init+0x34>)
 8015e7a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8015e7e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8015e80:	4804      	ldr	r0, [pc, #16]	; (8015e94 <MX_IWDG_Init+0x34>)
 8015e82:	f006 fbaa 	bl	801c5da <HAL_IWDG_Init>
 8015e86:	4603      	mov	r3, r0
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d001      	beq.n	8015e90 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8015e8c:	f001 fb88 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8015e90:	bf00      	nop
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	2000b414 	.word	0x2000b414
 8015e98:	40003000 	.word	0x40003000

08015e9c <Process_Kyosan_EI>:
#ifdef EI_1
uint8_t SendThisCardRelays = 0;
#endif

void Process_Kyosan_EI(void)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	af00      	add	r7, sp, #0

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8015ea0:	4811      	ldr	r0, [pc, #68]	; (8015ee8 <Process_Kyosan_EI+0x4c>)
 8015ea2:	f006 fbe9 	bl	801c678 <HAL_IWDG_Refresh>

		Feed_wdt();
 8015ea6:	f7ff fe7d 	bl	8015ba4 <Feed_wdt>

		Get_Kyosan_EI_Message(KYOSAN_PORT);
 8015eaa:	2003      	movs	r0, #3
 8015eac:	f000 f9f4 	bl	8016298 <Get_Kyosan_EI_Message>

		Process_Send_Signals_2_MIE_Kyosan();
 8015eb0:	f000 f912 	bl	80160d8 <Process_Send_Signals_2_MIE_Kyosan>

		DetectCanXchangeFailure();
 8015eb4:	f000 f8ce 	bl	8016054 <DetectCanXchangeFailure>

		Process_ComFailTimeout();
 8015eb8:	f000 f81c 	bl	8015ef4 <Process_ComFailTimeout>

		readCanToStructs();
 8015ebc:	f7fb f9da 	bl	8011274 <readCanToStructs>

		Check_forKyosanCMD();
 8015ec0:	f000 fe72 	bl	8016ba8 <Check_forKyosanCMD>

		SendKyosanRelays2Other();
 8015ec4:	f000 f8ac 	bl	8016020 <SendKyosanRelays2Other>

		CheckEIPC_DAT_CRC();
 8015ec8:	f7eb f840 	bl	8000f4c <CheckEIPC_DAT_CRC>

		if(Dats_Request_Flag > 0)
 8015ecc:	4b07      	ldr	r3, [pc, #28]	; (8015eec <Process_Kyosan_EI+0x50>)
 8015ece:	781b      	ldrb	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d0e5      	beq.n	8015ea0 <Process_Kyosan_EI+0x4>
		{
			gucFlagUpdate = 3;
 8015ed4:	4b06      	ldr	r3, [pc, #24]	; (8015ef0 <Process_Kyosan_EI+0x54>)
 8015ed6:	2203      	movs	r2, #3
 8015ed8:	701a      	strb	r2, [r3, #0]
		}
	}

	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8015eda:	4803      	ldr	r0, [pc, #12]	; (8015ee8 <Process_Kyosan_EI+0x4c>)
 8015edc:	f006 fbcc 	bl	801c678 <HAL_IWDG_Refresh>
		Data_Processing();
 8015ee0:	f001 ffdc 	bl	8017e9c <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8015ee4:	e7f9      	b.n	8015eda <Process_Kyosan_EI+0x3e>
 8015ee6:	bf00      	nop
 8015ee8:	2000b414 	.word	0x2000b414
 8015eec:	20000bba 	.word	0x20000bba
 8015ef0:	20000fbd 	.word	0x20000fbd

08015ef4 <Process_ComFailTimeout>:
	}
}

void Process_ComFailTimeout(void)
{
 8015ef4:	b580      	push	{r7, lr}
 8015ef6:	af00      	add	r7, sp, #0
	if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) > EI_data.Kyosan_st.Comm_Fail_Time)
 8015ef8:	4b43      	ldr	r3, [pc, #268]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7fa fa7b 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f02:	4602      	mov	r2, r0
 8015f04:	4b41      	ldr	r3, [pc, #260]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f06:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015f0a:	429a      	cmp	r2, r3
 8015f0c:	d82b      	bhi.n	8015f66 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015f0e:	4b3e      	ldr	r3, [pc, #248]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015f10:	689b      	ldr	r3, [r3, #8]
 8015f12:	4618      	mov	r0, r3
 8015f14:	f7fa fa70 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f18:	4602      	mov	r2, r0
 8015f1a:	4b3c      	ldr	r3, [pc, #240]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f1c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d820      	bhi.n	8015f66 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015f24:	4b38      	ldr	r3, [pc, #224]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fa fa65 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f2e:	4602      	mov	r2, r0
 8015f30:	4b36      	ldr	r3, [pc, #216]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f32:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015f36:	429a      	cmp	r2, r3
 8015f38:	d815      	bhi.n	8015f66 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time)
 8015f3a:	4b33      	ldr	r3, [pc, #204]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015f3c:	68db      	ldr	r3, [r3, #12]
 8015f3e:	4618      	mov	r0, r3
 8015f40:	f7fa fa5a 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f44:	4602      	mov	r2, r0
 8015f46:	4b31      	ldr	r3, [pc, #196]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f48:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015f4c:	429a      	cmp	r2, r3
 8015f4e:	d80a      	bhi.n	8015f66 <Process_ComFailTimeout+0x72>
			||(HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)> EI_data.Kyosan_st.Comm_Fail_Time))
 8015f50:	4b2d      	ldr	r3, [pc, #180]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015f52:	691b      	ldr	r3, [r3, #16]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7fa fa4f 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	4b2b      	ldr	r3, [pc, #172]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f5e:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015f62:	429a      	cmp	r2, r3
 8015f64:	d913      	bls.n	8015f8e <Process_ComFailTimeout+0x9a>
	{

		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8015f66:	492a      	ldr	r1, [pc, #168]	; (8016010 <Process_ComFailTimeout+0x11c>)
 8015f68:	482a      	ldr	r0, [pc, #168]	; (8016014 <Process_ComFailTimeout+0x120>)
 8015f6a:	f7ea f969 	bl	8000240 <strcmp>
 8015f6e:	4603      	mov	r3, r0
 8015f70:	2b00      	cmp	r3, #0
 8015f72:	d047      	beq.n	8016004 <Process_ComFailTimeout+0x110>
			return;
		}



		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8015f74:	4b28      	ldr	r3, [pc, #160]	; (8016018 <Process_ComFailTimeout+0x124>)
 8015f76:	785b      	ldrb	r3, [r3, #1]
 8015f78:	2b01      	cmp	r3, #1
 8015f7a:	d144      	bne.n	8016006 <Process_ComFailTimeout+0x112>
		{
			printf("Time out for Message Packets Reached\n");
 8015f7c:	4827      	ldr	r0, [pc, #156]	; (801601c <Process_ComFailTimeout+0x128>)
 8015f7e:	f010 f8bb 	bl	80260f8 <puts>
			memset(&Kyosan_SelfRelays,0,sizeof(KYOSAN_RELAYS_t));
 8015f82:	2240      	movs	r2, #64	; 0x40
 8015f84:	2100      	movs	r1, #0
 8015f86:	4824      	ldr	r0, [pc, #144]	; (8016018 <Process_ComFailTimeout+0x124>)
 8015f88:	f00f ff32 	bl	8025df0 <memset>
		if(Kyosan_SelfRelays.Message_Receiving == SET)
 8015f8c:	e03b      	b.n	8016006 <Process_ComFailTimeout+0x112>
		}
	}
	else if((HAL_Elaps_Ticks(KyosanClocks.ControlDataPosRecvCLK) < EI_data.Kyosan_st.Comm_Fail_Time)
 8015f8e:	4b1e      	ldr	r3, [pc, #120]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015f90:	685b      	ldr	r3, [r3, #4]
 8015f92:	4618      	mov	r0, r3
 8015f94:	f7fa fa30 	bl	80103f8 <HAL_Elaps_Ticks>
 8015f98:	4602      	mov	r2, r0
 8015f9a:	4b1c      	ldr	r3, [pc, #112]	; (801600c <Process_ComFailTimeout+0x118>)
 8015f9c:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015fa0:	429a      	cmp	r2, r3
 8015fa2:	d230      	bcs.n	8016006 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.ControlDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015fa4:	4b18      	ldr	r3, [pc, #96]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015fa6:	689b      	ldr	r3, [r3, #8]
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7fa fa25 	bl	80103f8 <HAL_Elaps_Ticks>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	4b16      	ldr	r3, [pc, #88]	; (801600c <Process_ComFailTimeout+0x118>)
 8015fb2:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015fb6:	429a      	cmp	r2, r3
 8015fb8:	d225      	bcs.n	8016006 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.MessageReceivedCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015fba:	4b13      	ldr	r3, [pc, #76]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7fa fa1a 	bl	80103f8 <HAL_Elaps_Ticks>
 8015fc4:	4602      	mov	r2, r0
 8015fc6:	4b11      	ldr	r3, [pc, #68]	; (801600c <Process_ComFailTimeout+0x118>)
 8015fc8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015fcc:	429a      	cmp	r2, r3
 8015fce:	d21a      	bcs.n	8016006 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataPosRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time)
 8015fd0:	4b0d      	ldr	r3, [pc, #52]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015fd2:	68db      	ldr	r3, [r3, #12]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f7fa fa0f 	bl	80103f8 <HAL_Elaps_Ticks>
 8015fda:	4602      	mov	r2, r0
 8015fdc:	4b0b      	ldr	r3, [pc, #44]	; (801600c <Process_ComFailTimeout+0x118>)
 8015fde:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015fe2:	429a      	cmp	r2, r3
 8015fe4:	d20f      	bcs.n	8016006 <Process_ComFailTimeout+0x112>
			&& (HAL_Elaps_Ticks(KyosanClocks.PollingDataNegRecvCLK)< EI_data.Kyosan_st.Comm_Fail_Time))
 8015fe6:	4b08      	ldr	r3, [pc, #32]	; (8016008 <Process_ComFailTimeout+0x114>)
 8015fe8:	691b      	ldr	r3, [r3, #16]
 8015fea:	4618      	mov	r0, r3
 8015fec:	f7fa fa04 	bl	80103f8 <HAL_Elaps_Ticks>
 8015ff0:	4602      	mov	r2, r0
 8015ff2:	4b06      	ldr	r3, [pc, #24]	; (801600c <Process_ComFailTimeout+0x118>)
 8015ff4:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 8015ff8:	429a      	cmp	r2, r3
 8015ffa:	d204      	bcs.n	8016006 <Process_ComFailTimeout+0x112>

	{
		Kyosan_SelfRelays.Message_Receiving = SET;
 8015ffc:	4b06      	ldr	r3, [pc, #24]	; (8016018 <Process_ComFailTimeout+0x124>)
 8015ffe:	2201      	movs	r2, #1
 8016000:	705a      	strb	r2, [r3, #1]
 8016002:	e000      	b.n	8016006 <Process_ComFailTimeout+0x112>
			return;
 8016004:	bf00      	nop
	}
}
 8016006:	bd80      	pop	{r7, pc}
 8016008:	2000b42c 	.word	0x2000b42c
 801600c:	20000504 	.word	0x20000504
 8016010:	0802ac54 	.word	0x0802ac54
 8016014:	20000505 	.word	0x20000505
 8016018:	2000b440 	.word	0x2000b440
 801601c:	0802ac60 	.word	0x0802ac60

08016020 <SendKyosanRelays2Other>:
		RelayMisMatchCnt = RESET;
	}
}

void SendKyosanRelays2Other(void)
{
 8016020:	b580      	push	{r7, lr}
 8016022:	af00      	add	r7, sp, #0
	static uint32_t RelaySendingClk = 0;
	if(HAL_Elaps_Ticks(RelaySendingClk) > 3000)
 8016024:	4b0a      	ldr	r3, [pc, #40]	; (8016050 <SendKyosanRelays2Other+0x30>)
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	4618      	mov	r0, r3
 801602a:	f7fa f9e5 	bl	80103f8 <HAL_Elaps_Ticks>
 801602e:	4603      	mov	r3, r0
 8016030:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8016034:	4293      	cmp	r3, r2
 8016036:	d908      	bls.n	801604a <SendKyosanRelays2Other+0x2a>
	{
#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8016038:	f240 2007 	movw	r0, #519	; 0x207
 801603c:	f7fa ff90 	bl	8010f60 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		RelaySendingClk = HAL_GetTick();
 8016040:	f003 f8a8 	bl	8019194 <HAL_GetTick>
 8016044:	4603      	mov	r3, r0
 8016046:	4a02      	ldr	r2, [pc, #8]	; (8016050 <SendKyosanRelays2Other+0x30>)
 8016048:	6013      	str	r3, [r2, #0]
	}
}
 801604a:	bf00      	nop
 801604c:	bd80      	pop	{r7, pc}
 801604e:	bf00      	nop
 8016050:	2000b938 	.word	0x2000b938

08016054 <DetectCanXchangeFailure>:

void DetectCanXchangeFailure(void)
{
 8016054:	b580      	push	{r7, lr}
 8016056:	af00      	add	r7, sp, #0
	static uint32_t S2_BlinkClk = 0;

	if( (HAL_Elaps_Ticks(LastCANReceived_Clk_Kyosan) > EI_data.Kyosan_st.CAN_Fail_Clk) && (Is_CAN_Exchange_happening != RESET ))
 8016058:	4b18      	ldr	r3, [pc, #96]	; (80160bc <DetectCanXchangeFailure+0x68>)
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	4618      	mov	r0, r3
 801605e:	f7fa f9cb 	bl	80103f8 <HAL_Elaps_Ticks>
 8016062:	4602      	mov	r2, r0
 8016064:	4b16      	ldr	r3, [pc, #88]	; (80160c0 <DetectCanXchangeFailure+0x6c>)
 8016066:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 801606a:	429a      	cmp	r2, r3
 801606c:	d912      	bls.n	8016094 <DetectCanXchangeFailure+0x40>
 801606e:	4b15      	ldr	r3, [pc, #84]	; (80160c4 <DetectCanXchangeFailure+0x70>)
 8016070:	781b      	ldrb	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d00e      	beq.n	8016094 <DetectCanXchangeFailure+0x40>
	{
		if(strcmp((char *)EI_data.STN_NAME,"LAB_TESTING") == 0)
 8016076:	4914      	ldr	r1, [pc, #80]	; (80160c8 <DetectCanXchangeFailure+0x74>)
 8016078:	4814      	ldr	r0, [pc, #80]	; (80160cc <DetectCanXchangeFailure+0x78>)
 801607a:	f7ea f8e1 	bl	8000240 <strcmp>
 801607e:	4603      	mov	r3, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	d103      	bne.n	801608c <DetectCanXchangeFailure+0x38>
		{
			Is_CAN_Exchange_happening = SET;
 8016084:	4b0f      	ldr	r3, [pc, #60]	; (80160c4 <DetectCanXchangeFailure+0x70>)
 8016086:	2201      	movs	r2, #1
 8016088:	701a      	strb	r2, [r3, #0]
			return;
 801608a:	e016      	b.n	80160ba <DetectCanXchangeFailure+0x66>
		}

		Is_CAN_Exchange_happening = RESET;
 801608c:	4b0d      	ldr	r3, [pc, #52]	; (80160c4 <DetectCanXchangeFailure+0x70>)
 801608e:	2200      	movs	r2, #0
 8016090:	701a      	strb	r2, [r3, #0]
 8016092:	e012      	b.n	80160ba <DetectCanXchangeFailure+0x66>
	}
	else
	{
		if(HAL_Elaps_Ticks(S2_BlinkClk) > 300)
 8016094:	4b0e      	ldr	r3, [pc, #56]	; (80160d0 <DetectCanXchangeFailure+0x7c>)
 8016096:	681b      	ldr	r3, [r3, #0]
 8016098:	4618      	mov	r0, r3
 801609a:	f7fa f9ad 	bl	80103f8 <HAL_Elaps_Ticks>
 801609e:	4603      	mov	r3, r0
 80160a0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80160a4:	d909      	bls.n	80160ba <DetectCanXchangeFailure+0x66>
		{
			S2_BlinkClk = HAL_GetTick();
 80160a6:	f003 f875 	bl	8019194 <HAL_GetTick>
 80160aa:	4603      	mov	r3, r0
 80160ac:	4a08      	ldr	r2, [pc, #32]	; (80160d0 <DetectCanXchangeFailure+0x7c>)
 80160ae:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80160b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80160b4:	4807      	ldr	r0, [pc, #28]	; (80160d4 <DetectCanXchangeFailure+0x80>)
 80160b6:	f005 fc62 	bl	801b97e <HAL_GPIO_TogglePin>
		}

	}
}
 80160ba:	bd80      	pop	{r7, pc}
 80160bc:	2000b544 	.word	0x2000b544
 80160c0:	20000504 	.word	0x20000504
 80160c4:	2000030b 	.word	0x2000030b
 80160c8:	0802ac54 	.word	0x0802ac54
 80160cc:	20000505 	.word	0x20000505
 80160d0:	2000b93c 	.word	0x2000b93c
 80160d4:	40021c00 	.word	0x40021c00

080160d8 <Process_Send_Signals_2_MIE_Kyosan>:

void Process_Send_Signals_2_MIE_Kyosan(void)
{
 80160d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80160da:	b083      	sub	sp, #12
 80160dc:	af00      	add	r7, sp, #0
	uint8_t Choice =0;
 80160de:	2300      	movs	r3, #0
 80160e0:	71fb      	strb	r3, [r7, #7]

	if(HAL_Elaps_Ticks(MIE_SignalsSending_Clk_Kyosan) > EI_data.Kyosan_st.MIE_SEND_CLK)
 80160e2:	4b62      	ldr	r3, [pc, #392]	; (801626c <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	4618      	mov	r0, r3
 80160e8:	f7fa f986 	bl	80103f8 <HAL_Elaps_Ticks>
 80160ec:	4602      	mov	r2, r0
 80160ee:	4b60      	ldr	r3, [pc, #384]	; (8016270 <Process_Send_Signals_2_MIE_Kyosan+0x198>)
 80160f0:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 80160f4:	429a      	cmp	r2, r3
 80160f6:	f240 80b5 	bls.w	8016264 <Process_Send_Signals_2_MIE_Kyosan+0x18c>
	{
#ifdef EI_1
		if((Is_CAN_Exchange_happening == SET) && (MisMatchFlagKyosan == RESET) )
 80160fa:	4b5e      	ldr	r3, [pc, #376]	; (8016274 <Process_Send_Signals_2_MIE_Kyosan+0x19c>)
 80160fc:	781b      	ldrb	r3, [r3, #0]
 80160fe:	2b01      	cmp	r3, #1
 8016100:	f040 80a2 	bne.w	8016248 <Process_Send_Signals_2_MIE_Kyosan+0x170>
 8016104:	4b5c      	ldr	r3, [pc, #368]	; (8016278 <Process_Send_Signals_2_MIE_Kyosan+0x1a0>)
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b00      	cmp	r3, #0
 801610a:	f040 809d 	bne.w	8016248 <Process_Send_Signals_2_MIE_Kyosan+0x170>
		{

			Choice = 0;
 801610e:	2300      	movs	r3, #0
 8016110:	71fb      	strb	r3, [r7, #7]
			(Kyosan_OtherRelays.Message_Receiving == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 8016112:	4b5a      	ldr	r3, [pc, #360]	; (801627c <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 8016114:	785b      	ldrb	r3, [r3, #1]
 8016116:	2b01      	cmp	r3, #1
 8016118:	d104      	bne.n	8016124 <Process_Send_Signals_2_MIE_Kyosan+0x4c>
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	f043 0301 	orr.w	r3, r3, #1
 8016120:	71fb      	strb	r3, [r7, #7]
 8016122:	e003      	b.n	801612c <Process_Send_Signals_2_MIE_Kyosan+0x54>
 8016124:	79fb      	ldrb	r3, [r7, #7]
 8016126:	f023 0301 	bic.w	r3, r3, #1
 801612a:	71fb      	strb	r3, [r7, #7]
			(Kyosan_SelfRelays.Message_Receiving == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 801612c:	4b54      	ldr	r3, [pc, #336]	; (8016280 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 801612e:	785b      	ldrb	r3, [r3, #1]
 8016130:	2b01      	cmp	r3, #1
 8016132:	d104      	bne.n	801613e <Process_Send_Signals_2_MIE_Kyosan+0x66>
 8016134:	79fb      	ldrb	r3, [r7, #7]
 8016136:	f043 0302 	orr.w	r3, r3, #2
 801613a:	71fb      	strb	r3, [r7, #7]
 801613c:	e003      	b.n	8016146 <Process_Send_Signals_2_MIE_Kyosan+0x6e>
 801613e:	79fb      	ldrb	r3, [r7, #7]
 8016140:	f023 0302 	bic.w	r3, r3, #2
 8016144:	71fb      	strb	r3, [r7, #7]

			switch(Choice)
 8016146:	79fb      	ldrb	r3, [r7, #7]
 8016148:	2b01      	cmp	r3, #1
 801614a:	d005      	beq.n	8016158 <Process_Send_Signals_2_MIE_Kyosan+0x80>
 801614c:	2b00      	cmp	r3, #0
 801614e:	dd45      	ble.n	80161dc <Process_Send_Signals_2_MIE_Kyosan+0x104>
 8016150:	3b02      	subs	r3, #2
 8016152:	2b01      	cmp	r3, #1
 8016154:	d842      	bhi.n	80161dc <Process_Send_Signals_2_MIE_Kyosan+0x104>
 8016156:	e020      	b.n	801619a <Process_Send_Signals_2_MIE_Kyosan+0xc2>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_OtherRelays.Relays,MAX_KYOSAN_RELAYS);
 8016158:	4a4a      	ldr	r2, [pc, #296]	; (8016284 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 801615a:	4b48      	ldr	r3, [pc, #288]	; (801627c <Process_Send_Signals_2_MIE_Kyosan+0x1a4>)
 801615c:	3302      	adds	r3, #2
 801615e:	1c90      	adds	r0, r2, #2
 8016160:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8016164:	4602      	mov	r2, r0
 8016166:	4619      	mov	r1, r3
 8016168:	f8d1 c000 	ldr.w	ip, [r1]
 801616c:	684e      	ldr	r6, [r1, #4]
 801616e:	688d      	ldr	r5, [r1, #8]
 8016170:	68c9      	ldr	r1, [r1, #12]
 8016172:	f8c2 c000 	str.w	ip, [r2]
 8016176:	6056      	str	r6, [r2, #4]
 8016178:	6095      	str	r5, [r2, #8]
 801617a:	60d1      	str	r1, [r2, #12]
 801617c:	3310      	adds	r3, #16
 801617e:	3010      	adds	r0, #16
 8016180:	42a3      	cmp	r3, r4
 8016182:	d1ef      	bne.n	8016164 <Process_Send_Signals_2_MIE_Kyosan+0x8c>
 8016184:	4602      	mov	r2, r0
 8016186:	6818      	ldr	r0, [r3, #0]
 8016188:	6859      	ldr	r1, [r3, #4]
 801618a:	689b      	ldr	r3, [r3, #8]
 801618c:	6010      	str	r0, [r2, #0]
 801618e:	6051      	str	r1, [r2, #4]
 8016190:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = RESET;
 8016192:	4b3d      	ldr	r3, [pc, #244]	; (8016288 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 8016194:	2200      	movs	r2, #0
 8016196:	701a      	strb	r2, [r3, #0]
#endif
				break;
 8016198:	e028      	b.n	80161ec <Process_Send_Signals_2_MIE_Kyosan+0x114>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&Kyosan_FinalRelays.Relays,Kyosan_SelfRelays.Relays,MAX_KYOSAN_RELAYS);
 801619a:	4a3a      	ldr	r2, [pc, #232]	; (8016284 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 801619c:	4b38      	ldr	r3, [pc, #224]	; (8016280 <Process_Send_Signals_2_MIE_Kyosan+0x1a8>)
 801619e:	3302      	adds	r3, #2
 80161a0:	1c90      	adds	r0, r2, #2
 80161a2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80161a6:	4602      	mov	r2, r0
 80161a8:	4619      	mov	r1, r3
 80161aa:	f8d1 c000 	ldr.w	ip, [r1]
 80161ae:	684e      	ldr	r6, [r1, #4]
 80161b0:	688d      	ldr	r5, [r1, #8]
 80161b2:	68c9      	ldr	r1, [r1, #12]
 80161b4:	f8c2 c000 	str.w	ip, [r2]
 80161b8:	6056      	str	r6, [r2, #4]
 80161ba:	6095      	str	r5, [r2, #8]
 80161bc:	60d1      	str	r1, [r2, #12]
 80161be:	3310      	adds	r3, #16
 80161c0:	3010      	adds	r0, #16
 80161c2:	42a3      	cmp	r3, r4
 80161c4:	d1ef      	bne.n	80161a6 <Process_Send_Signals_2_MIE_Kyosan+0xce>
 80161c6:	4602      	mov	r2, r0
 80161c8:	6818      	ldr	r0, [r3, #0]
 80161ca:	6859      	ldr	r1, [r3, #4]
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	6010      	str	r0, [r2, #0]
 80161d0:	6051      	str	r1, [r2, #4]
 80161d2:	6093      	str	r3, [r2, #8]
#ifdef EI_1
				SendThisCardRelays = SET;
 80161d4:	4b2c      	ldr	r3, [pc, #176]	; (8016288 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80161d6:	2201      	movs	r2, #1
 80161d8:	701a      	strb	r2, [r3, #0]
#endif
				break;
 80161da:	e007      	b.n	80161ec <Process_Send_Signals_2_MIE_Kyosan+0x114>

			default:
				memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 80161dc:	2240      	movs	r2, #64	; 0x40
 80161de:	2100      	movs	r1, #0
 80161e0:	4828      	ldr	r0, [pc, #160]	; (8016284 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 80161e2:	f00f fe05 	bl	8025df0 <memset>
#ifdef EI_1
				SendThisCardRelays = RESET;
 80161e6:	4b28      	ldr	r3, [pc, #160]	; (8016288 <Process_Send_Signals_2_MIE_Kyosan+0x1b0>)
 80161e8:	2200      	movs	r2, #0
 80161ea:	701a      	strb	r2, [r3, #0]
#endif
			}

			printf("Data Sending 2 MIE:\n");
 80161ec:	4827      	ldr	r0, [pc, #156]	; (801628c <Process_Send_Signals_2_MIE_Kyosan+0x1b4>)
 80161ee:	f00f ff83 	bl	80260f8 <puts>
			for(uint8_t i=0;i<60;++i)
 80161f2:	2300      	movs	r3, #0
 80161f4:	71bb      	strb	r3, [r7, #6]
 80161f6:	e01c      	b.n	8016232 <Process_Send_Signals_2_MIE_Kyosan+0x15a>
			{
				printf("%02X ",Kyosan_FinalRelays.Relays[i]);
 80161f8:	79bb      	ldrb	r3, [r7, #6]
 80161fa:	4a22      	ldr	r2, [pc, #136]	; (8016284 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 80161fc:	4413      	add	r3, r2
 80161fe:	789b      	ldrb	r3, [r3, #2]
 8016200:	4619      	mov	r1, r3
 8016202:	4823      	ldr	r0, [pc, #140]	; (8016290 <Process_Send_Signals_2_MIE_Kyosan+0x1b8>)
 8016204:	f00f fedc 	bl	8025fc0 <iprintf>

				if(((i+1)%10)==0)
 8016208:	79bb      	ldrb	r3, [r7, #6]
 801620a:	1c59      	adds	r1, r3, #1
 801620c:	4b21      	ldr	r3, [pc, #132]	; (8016294 <Process_Send_Signals_2_MIE_Kyosan+0x1bc>)
 801620e:	fb83 2301 	smull	r2, r3, r3, r1
 8016212:	109a      	asrs	r2, r3, #2
 8016214:	17cb      	asrs	r3, r1, #31
 8016216:	1ad2      	subs	r2, r2, r3
 8016218:	4613      	mov	r3, r2
 801621a:	009b      	lsls	r3, r3, #2
 801621c:	4413      	add	r3, r2
 801621e:	005b      	lsls	r3, r3, #1
 8016220:	1aca      	subs	r2, r1, r3
 8016222:	2a00      	cmp	r2, #0
 8016224:	d102      	bne.n	801622c <Process_Send_Signals_2_MIE_Kyosan+0x154>
				{
					printf("\n");
 8016226:	200a      	movs	r0, #10
 8016228:	f00f fee2 	bl	8025ff0 <putchar>
			for(uint8_t i=0;i<60;++i)
 801622c:	79bb      	ldrb	r3, [r7, #6]
 801622e:	3301      	adds	r3, #1
 8016230:	71bb      	strb	r3, [r7, #6]
 8016232:	79bb      	ldrb	r3, [r7, #6]
 8016234:	2b3b      	cmp	r3, #59	; 0x3b
 8016236:	d9df      	bls.n	80161f8 <Process_Send_Signals_2_MIE_Kyosan+0x120>
				}
			}
			printf("\n");
 8016238:	200a      	movs	r0, #10
 801623a:	f00f fed9 	bl	8025ff0 <putchar>
//			PrintSignalsKyosan();


			TransmitCanPkt(EI_PROCESS_DATA);
 801623e:	f240 1019 	movw	r0, #281	; 0x119
 8016242:	f7fa fe8d 	bl	8010f60 <TransmitCanPkt>
 8016246:	e008      	b.n	801625a <Process_Send_Signals_2_MIE_Kyosan+0x182>
		}
		else
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
 8016248:	2240      	movs	r2, #64	; 0x40
 801624a:	2100      	movs	r1, #0
 801624c:	480d      	ldr	r0, [pc, #52]	; (8016284 <Process_Send_Signals_2_MIE_Kyosan+0x1ac>)
 801624e:	f00f fdcf 	bl	8025df0 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8016252:	f240 1019 	movw	r0, #281	; 0x119
 8016256:	f7fa fe83 	bl	8010f60 <TransmitCanPkt>
		{
			memset(&Kyosan_FinalRelays,0,sizeof(KYOSAN_RELAYS_t));
			TransmitCanPkt(EI_PROCESS_DATA);
		}
#endif
		MIE_SignalsSending_Clk_Kyosan = HAL_GetTick();
 801625a:	f002 ff9b 	bl	8019194 <HAL_GetTick>
 801625e:	4603      	mov	r3, r0
 8016260:	4a02      	ldr	r2, [pc, #8]	; (801626c <Process_Send_Signals_2_MIE_Kyosan+0x194>)
 8016262:	6013      	str	r3, [r2, #0]
	}
}
 8016264:	bf00      	nop
 8016266:	370c      	adds	r7, #12
 8016268:	46bd      	mov	sp, r7
 801626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801626c:	2000b540 	.word	0x2000b540
 8016270:	20000504 	.word	0x20000504
 8016274:	2000030b 	.word	0x2000030b
 8016278:	2000b548 	.word	0x2000b548
 801627c:	2000b480 	.word	0x2000b480
 8016280:	2000b440 	.word	0x2000b440
 8016284:	2000b500 	.word	0x2000b500
 8016288:	2000b935 	.word	0x2000b935
 801628c:	0802ac88 	.word	0x0802ac88
 8016290:	0802ac9c 	.word	0x0802ac9c
 8016294:	66666667 	.word	0x66666667

08016298 <Get_Kyosan_EI_Message>:

void Get_Kyosan_EI_Message(uint8_t ComPort)
{
 8016298:	b5f0      	push	{r4, r5, r6, r7, lr}
 801629a:	b089      	sub	sp, #36	; 0x24
 801629c:	af00      	add	r7, sp, #0
 801629e:	4603      	mov	r3, r0
 80162a0:	71fb      	strb	r3, [r7, #7]
	uint8_t Data = 0;
 80162a2:	2300      	movs	r3, #0
 80162a4:	737b      	strb	r3, [r7, #13]
	static uint16_t Cur_Receive_Length = 0;
	static uint8_t Buffer[256] = {0,};
	static uint8_t Curnt_ProcessingDataType = 0;
	static uint8_t Control_DataReceived = RESET;
	static uint32_t Last_ValidControlInfoClk = 0;
	uint16_t C_CRC = 0;
 80162a6:	2300      	movs	r3, #0
 80162a8:	817b      	strh	r3, [r7, #10]
	uint16_t R_CRC = 0;
 80162aa:	2300      	movs	r3, #0
 80162ac:	83fb      	strh	r3, [r7, #30]
#ifdef EI_1
	static uint16_t PrevRelayCRC = 0;
#endif
	static uint8_t ControlData_Positive[256] = {0,};
	static uint8_t ControlData_Negative[256] = {0,};
	uint8_t Pos_NegDataMisMatch = RESET;
 80162ae:	2300      	movs	r3, #0
 80162b0:	777b      	strb	r3, [r7, #29]
	static uint8_t Pos_NegDataMisMatch_Count = RESET;
	uint8_t TypeofDataMisMatch = RESET;
 80162b2:	2300      	movs	r3, #0
 80162b4:	773b      	strb	r3, [r7, #28]
	uint8_t ControlID = 0;
 80162b6:	2300      	movs	r3, #0
 80162b8:	727b      	strb	r3, [r7, #9]



	if((HAL_Elaps_Ticks(Last_ValidControlInfoClk) >= EI_data.Kyosan_st.Comm_Fail_Time) && (Control_DataReceived == SET))
 80162ba:	4b33      	ldr	r3, [pc, #204]	; (8016388 <Get_Kyosan_EI_Message+0xf0>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	4618      	mov	r0, r3
 80162c0:	f7fa f89a 	bl	80103f8 <HAL_Elaps_Ticks>
 80162c4:	4602      	mov	r2, r0
 80162c6:	4b31      	ldr	r3, [pc, #196]	; (801638c <Get_Kyosan_EI_Message+0xf4>)
 80162c8:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 80162cc:	429a      	cmp	r2, r3
 80162ce:	f0c0 8407 	bcc.w	8016ae0 <Get_Kyosan_EI_Message+0x848>
 80162d2:	4b2f      	ldr	r3, [pc, #188]	; (8016390 <Get_Kyosan_EI_Message+0xf8>)
 80162d4:	781b      	ldrb	r3, [r3, #0]
 80162d6:	2b01      	cmp	r3, #1
 80162d8:	f040 8402 	bne.w	8016ae0 <Get_Kyosan_EI_Message+0x848>
	{
		Control_DataReceived = RESET;
 80162dc:	4b2c      	ldr	r3, [pc, #176]	; (8016390 <Get_Kyosan_EI_Message+0xf8>)
 80162de:	2200      	movs	r2, #0
 80162e0:	701a      	strb	r2, [r3, #0]
	}

	while(Com_DataReady(ComPort))
 80162e2:	e3fd      	b.n	8016ae0 <Get_Kyosan_EI_Message+0x848>
	{
		Data = Com_Get_Byte(ComPort);
 80162e4:	79fb      	ldrb	r3, [r7, #7]
 80162e6:	4618      	mov	r0, r3
 80162e8:	f002 fc2c 	bl	8018b44 <Com_Get_Byte>
 80162ec:	4603      	mov	r3, r0
 80162ee:	737b      	strb	r3, [r7, #13]
		//		printf("%02X ",Data);

		if((Cur_Receive_Length == Max_Receive_Length) || (Cur_Receive_Length == RESET))
 80162f0:	4b28      	ldr	r3, [pc, #160]	; (8016394 <Get_Kyosan_EI_Message+0xfc>)
 80162f2:	881a      	ldrh	r2, [r3, #0]
 80162f4:	4b28      	ldr	r3, [pc, #160]	; (8016398 <Get_Kyosan_EI_Message+0x100>)
 80162f6:	881b      	ldrh	r3, [r3, #0]
 80162f8:	429a      	cmp	r2, r3
 80162fa:	d003      	beq.n	8016304 <Get_Kyosan_EI_Message+0x6c>
 80162fc:	4b25      	ldr	r3, [pc, #148]	; (8016394 <Get_Kyosan_EI_Message+0xfc>)
 80162fe:	881b      	ldrh	r3, [r3, #0]
 8016300:	2b00      	cmp	r3, #0
 8016302:	d139      	bne.n	8016378 <Get_Kyosan_EI_Message+0xe0>
		{
			memset(Buffer,0,sizeof(Buffer));
 8016304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016308:	2100      	movs	r1, #0
 801630a:	4824      	ldr	r0, [pc, #144]	; (801639c <Get_Kyosan_EI_Message+0x104>)
 801630c:	f00f fd70 	bl	8025df0 <memset>
			Cur_Receive_Length = RESET;
 8016310:	4b20      	ldr	r3, [pc, #128]	; (8016394 <Get_Kyosan_EI_Message+0xfc>)
 8016312:	2200      	movs	r2, #0
 8016314:	801a      	strh	r2, [r3, #0]

			switch(Data)
 8016316:	7b7b      	ldrb	r3, [r7, #13]
 8016318:	2b01      	cmp	r3, #1
 801631a:	d001      	beq.n	8016320 <Get_Kyosan_EI_Message+0x88>
 801631c:	2bfe      	cmp	r3, #254	; 0xfe
 801631e:	d113      	bne.n	8016348 <Get_Kyosan_EI_Message+0xb0>
			{
			case ACTUAL_CONTROL_DATA:
			case COMPLIMENT_CONTROL_DATA:
				Max_Receive_Length = (	EI_data.Kyosan_st.No_ofFrames * 64);
 8016320:	4b1a      	ldr	r3, [pc, #104]	; (801638c <Get_Kyosan_EI_Message+0xf4>)
 8016322:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016326:	b29b      	uxth	r3, r3
 8016328:	019b      	lsls	r3, r3, #6
 801632a:	b29a      	uxth	r2, r3
 801632c:	4b1a      	ldr	r3, [pc, #104]	; (8016398 <Get_Kyosan_EI_Message+0x100>)
 801632e:	801a      	strh	r2, [r3, #0]
				if(EI_data.Kyosan_st.No_ofFrames == 4)
 8016330:	4b16      	ldr	r3, [pc, #88]	; (801638c <Get_Kyosan_EI_Message+0xf4>)
 8016332:	f893 3341 	ldrb.w	r3, [r3, #833]	; 0x341
 8016336:	2b04      	cmp	r3, #4
 8016338:	d102      	bne.n	8016340 <Get_Kyosan_EI_Message+0xa8>
				{
					Max_Receive_Length = 192;
 801633a:	4b17      	ldr	r3, [pc, #92]	; (8016398 <Get_Kyosan_EI_Message+0x100>)
 801633c:	22c0      	movs	r2, #192	; 0xc0
 801633e:	801a      	strh	r2, [r3, #0]
				}
				Curnt_ProcessingDataType = CONTROL_DATA;
 8016340:	4b17      	ldr	r3, [pc, #92]	; (80163a0 <Get_Kyosan_EI_Message+0x108>)
 8016342:	2201      	movs	r2, #1
 8016344:	701a      	strb	r2, [r3, #0]
				//				printf("Received Ctrl Data|");
				break;
 8016346:	e017      	b.n	8016378 <Get_Kyosan_EI_Message+0xe0>

			default:

				/* Polling Data Range (0x11-0x7f for Positive data) (0x80-0xEE for Negative data)*/
				/* Control_DataReceived checking is added to Avoid Control information data to be processed as Polling Information */
				if( (Control_DataReceived == SET) && (((Data >= 0X11 ) && (Data <= 0X7F)) || ((Data >= 0X80 ) && (Data <= 0XEE))) )
 8016348:	4b11      	ldr	r3, [pc, #68]	; (8016390 <Get_Kyosan_EI_Message+0xf8>)
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b01      	cmp	r3, #1
 801634e:	d113      	bne.n	8016378 <Get_Kyosan_EI_Message+0xe0>
 8016350:	7b7b      	ldrb	r3, [r7, #13]
 8016352:	2b10      	cmp	r3, #16
 8016354:	d903      	bls.n	801635e <Get_Kyosan_EI_Message+0xc6>
 8016356:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801635a:	2b00      	cmp	r3, #0
 801635c:	da06      	bge.n	801636c <Get_Kyosan_EI_Message+0xd4>
 801635e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016362:	2b00      	cmp	r3, #0
 8016364:	da08      	bge.n	8016378 <Get_Kyosan_EI_Message+0xe0>
 8016366:	7b7b      	ldrb	r3, [r7, #13]
 8016368:	2bee      	cmp	r3, #238	; 0xee
 801636a:	d805      	bhi.n	8016378 <Get_Kyosan_EI_Message+0xe0>
				{
					/* Consider the data as Polling Data */
					//					printf("Received Polling Data:%u|%02X\n",Control_DataReceived,Data);
					Curnt_ProcessingDataType = POLLING_DATA;
 801636c:	4b0c      	ldr	r3, [pc, #48]	; (80163a0 <Get_Kyosan_EI_Message+0x108>)
 801636e:	2202      	movs	r2, #2
 8016370:	701a      	strb	r2, [r3, #0]
					Max_Receive_Length = 3;
 8016372:	4b09      	ldr	r3, [pc, #36]	; (8016398 <Get_Kyosan_EI_Message+0x100>)
 8016374:	2203      	movs	r2, #3
 8016376:	801a      	strh	r2, [r3, #0]
				}
			}
		}

		switch(Curnt_ProcessingDataType)
 8016378:	4b09      	ldr	r3, [pc, #36]	; (80163a0 <Get_Kyosan_EI_Message+0x108>)
 801637a:	781b      	ldrb	r3, [r3, #0]
 801637c:	2b01      	cmp	r3, #1
 801637e:	d011      	beq.n	80163a4 <Get_Kyosan_EI_Message+0x10c>
 8016380:	2b02      	cmp	r3, #2
 8016382:	f000 82d9 	beq.w	8016938 <Get_Kyosan_EI_Message+0x6a0>
 8016386:	e3a8      	b.n	8016ada <Get_Kyosan_EI_Message+0x842>
 8016388:	2000b940 	.word	0x2000b940
 801638c:	20000504 	.word	0x20000504
 8016390:	2000b944 	.word	0x2000b944
 8016394:	2000b946 	.word	0x2000b946
 8016398:	2000b948 	.word	0x2000b948
 801639c:	2000b94c 	.word	0x2000b94c
 80163a0:	2000ba4c 	.word	0x2000ba4c
		{
		case CONTROL_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 80163a4:	4bae      	ldr	r3, [pc, #696]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80163a6:	881b      	ldrh	r3, [r3, #0]
 80163a8:	1c5a      	adds	r2, r3, #1
 80163aa:	b291      	uxth	r1, r2
 80163ac:	4aac      	ldr	r2, [pc, #688]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80163ae:	8011      	strh	r1, [r2, #0]
 80163b0:	4619      	mov	r1, r3
 80163b2:	4aac      	ldr	r2, [pc, #688]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 80163b4:	7b7b      	ldrb	r3, [r7, #13]
 80163b6:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 80163b8:	4ba9      	ldr	r3, [pc, #676]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80163ba:	881a      	ldrh	r2, [r3, #0]
 80163bc:	4baa      	ldr	r3, [pc, #680]	; (8016668 <Get_Kyosan_EI_Message+0x3d0>)
 80163be:	881b      	ldrh	r3, [r3, #0]
 80163c0:	429a      	cmp	r2, r3
 80163c2:	f040 838d 	bne.w	8016ae0 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 80163c6:	4ba6      	ldr	r3, [pc, #664]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80163c8:	881b      	ldrh	r3, [r3, #0]
 80163ca:	3b02      	subs	r3, #2
 80163cc:	4619      	mov	r1, r3
 80163ce:	48a5      	ldr	r0, [pc, #660]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 80163d0:	f000 fbae 	bl	8016b30 <Calc_Kysoan_CRC>
 80163d4:	4603      	mov	r3, r0
 80163d6:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 80163d8:	4ba1      	ldr	r3, [pc, #644]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80163da:	881b      	ldrh	r3, [r3, #0]
 80163dc:	3b02      	subs	r3, #2
 80163de:	4aa1      	ldr	r2, [pc, #644]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 80163e0:	4413      	add	r3, r2
 80163e2:	461a      	mov	r2, r3
 80163e4:	2110      	movs	r1, #16
 80163e6:	2000      	movs	r0, #0
 80163e8:	f7ea f914 	bl	8000614 <ExtractBits>
 80163ec:	4603      	mov	r3, r0
 80163ee:	83fb      	strh	r3, [r7, #30]


				if( (  (CHECKFLAG(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 80163f0:	4b9e      	ldr	r3, [pc, #632]	; (801666c <Get_Kyosan_EI_Message+0x3d4>)
 80163f2:	681b      	ldr	r3, [r3, #0]
 80163f4:	f003 0301 	and.w	r3, r3, #1
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d02d      	beq.n	8016458 <Get_Kyosan_EI_Message+0x1c0>
 80163fc:	4b99      	ldr	r3, [pc, #612]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	b25b      	sxtb	r3, r3
 8016402:	11db      	asrs	r3, r3, #7
 8016404:	b25b      	sxtb	r3, r3
 8016406:	f003 0301 	and.w	r3, r3, #1
 801640a:	2b00      	cmp	r3, #0
 801640c:	d124      	bne.n	8016458 <Get_Kyosan_EI_Message+0x1c0>
				{
					printf("\nInjecting Positive Control Data CRC Failure\n");
 801640e:	4898      	ldr	r0, [pc, #608]	; (8016670 <Get_Kyosan_EI_Message+0x3d8>)
 8016410:	f00f fe72 	bl	80260f8 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016414:	4897      	ldr	r0, [pc, #604]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 8016416:	f007 fa7b 	bl	801d910 <HAL_RNG_GetRandomNumber>
 801641a:	4601      	mov	r1, r0
 801641c:	4b96      	ldr	r3, [pc, #600]	; (8016678 <Get_Kyosan_EI_Message+0x3e0>)
 801641e:	fba3 2301 	umull	r2, r3, r3, r1
 8016422:	0bda      	lsrs	r2, r3, #15
 8016424:	4613      	mov	r3, r2
 8016426:	041b      	lsls	r3, r3, #16
 8016428:	1a9b      	subs	r3, r3, r2
 801642a:	1aca      	subs	r2, r1, r3
 801642c:	4613      	mov	r3, r2
 801642e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016430:	8bfa      	ldrh	r2, [r7, #30]
 8016432:	897b      	ldrh	r3, [r7, #10]
 8016434:	429a      	cmp	r2, r3
 8016436:	d10f      	bne.n	8016458 <Get_Kyosan_EI_Message+0x1c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016438:	488e      	ldr	r0, [pc, #568]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 801643a:	f007 fa69 	bl	801d910 <HAL_RNG_GetRandomNumber>
 801643e:	4601      	mov	r1, r0
 8016440:	4b8e      	ldr	r3, [pc, #568]	; (801667c <Get_Kyosan_EI_Message+0x3e4>)
 8016442:	fba3 2301 	umull	r2, r3, r3, r1
 8016446:	09da      	lsrs	r2, r3, #7
 8016448:	4613      	mov	r3, r2
 801644a:	021b      	lsls	r3, r3, #8
 801644c:	1a9b      	subs	r3, r3, r2
 801644e:	1aca      	subs	r2, r1, r3
 8016450:	b293      	uxth	r3, r2
 8016452:	8bfa      	ldrh	r2, [r7, #30]
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016458:	4b84      	ldr	r3, [pc, #528]	; (801666c <Get_Kyosan_EI_Message+0x3d4>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	085b      	lsrs	r3, r3, #1
 801645e:	f003 0301 	and.w	r3, r3, #1
 8016462:	2b00      	cmp	r3, #0
 8016464:	d02d      	beq.n	80164c2 <Get_Kyosan_EI_Message+0x22a>
 8016466:	4b7f      	ldr	r3, [pc, #508]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 8016468:	781b      	ldrb	r3, [r3, #0]
 801646a:	b25b      	sxtb	r3, r3
 801646c:	11db      	asrs	r3, r3, #7
 801646e:	b25b      	sxtb	r3, r3
 8016470:	f003 0301 	and.w	r3, r3, #1
 8016474:	2b00      	cmp	r3, #0
 8016476:	d024      	beq.n	80164c2 <Get_Kyosan_EI_Message+0x22a>
				{
					printf("\nInjecting Negative Control Data CRC Failure\n");
 8016478:	4881      	ldr	r0, [pc, #516]	; (8016680 <Get_Kyosan_EI_Message+0x3e8>)
 801647a:	f00f fe3d 	bl	80260f8 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 801647e:	487d      	ldr	r0, [pc, #500]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 8016480:	f007 fa46 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016484:	4601      	mov	r1, r0
 8016486:	4b7c      	ldr	r3, [pc, #496]	; (8016678 <Get_Kyosan_EI_Message+0x3e0>)
 8016488:	fba3 2301 	umull	r2, r3, r3, r1
 801648c:	0bda      	lsrs	r2, r3, #15
 801648e:	4613      	mov	r3, r2
 8016490:	041b      	lsls	r3, r3, #16
 8016492:	1a9b      	subs	r3, r3, r2
 8016494:	1aca      	subs	r2, r1, r3
 8016496:	4613      	mov	r3, r2
 8016498:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 801649a:	8bfa      	ldrh	r2, [r7, #30]
 801649c:	897b      	ldrh	r3, [r7, #10]
 801649e:	429a      	cmp	r2, r3
 80164a0:	d10f      	bne.n	80164c2 <Get_Kyosan_EI_Message+0x22a>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80164a2:	4874      	ldr	r0, [pc, #464]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 80164a4:	f007 fa34 	bl	801d910 <HAL_RNG_GetRandomNumber>
 80164a8:	4601      	mov	r1, r0
 80164aa:	4b74      	ldr	r3, [pc, #464]	; (801667c <Get_Kyosan_EI_Message+0x3e4>)
 80164ac:	fba3 2301 	umull	r2, r3, r3, r1
 80164b0:	09da      	lsrs	r2, r3, #7
 80164b2:	4613      	mov	r3, r2
 80164b4:	021b      	lsls	r3, r3, #8
 80164b6:	1a9b      	subs	r3, r3, r2
 80164b8:	1aca      	subs	r2, r1, r3
 80164ba:	b293      	uxth	r3, r2
 80164bc:	8bfa      	ldrh	r2, [r7, #30]
 80164be:	1ad3      	subs	r3, r2, r3
 80164c0:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(R_CRC == C_CRC)
 80164c2:	8bfa      	ldrh	r2, [r7, #30]
 80164c4:	897b      	ldrh	r3, [r7, #10]
 80164c6:	429a      	cmp	r2, r3
 80164c8:	f040 81f3 	bne.w	80168b2 <Get_Kyosan_EI_Message+0x61a>
				{

					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 80164cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80164d0:	486c      	ldr	r0, [pc, #432]	; (8016684 <Get_Kyosan_EI_Message+0x3ec>)
 80164d2:	f005 fa54 	bl	801b97e <HAL_GPIO_TogglePin>


					Last_ValidControlInfoClk = HAL_GetTick();
 80164d6:	f002 fe5d 	bl	8019194 <HAL_GetTick>
 80164da:	4603      	mov	r3, r0
 80164dc:	4a6a      	ldr	r2, [pc, #424]	; (8016688 <Get_Kyosan_EI_Message+0x3f0>)
 80164de:	6013      	str	r3, [r2, #0]
					Control_DataReceived = SET;
 80164e0:	4b6a      	ldr	r3, [pc, #424]	; (801668c <Get_Kyosan_EI_Message+0x3f4>)
 80164e2:	2201      	movs	r2, #1
 80164e4:	701a      	strb	r2, [r3, #0]
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 80164e6:	f002 fe55 	bl	8019194 <HAL_GetTick>
 80164ea:	4603      	mov	r3, r0
 80164ec:	4a68      	ldr	r2, [pc, #416]	; (8016690 <Get_Kyosan_EI_Message+0x3f8>)
 80164ee:	6013      	str	r3, [r2, #0]

					//					printf("CTRL-Data CRC OK\n");
					if(CHECKFLAG(7,Buffer[0]) == RESET)
 80164f0:	4b5c      	ldr	r3, [pc, #368]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 80164f2:	781b      	ldrb	r3, [r3, #0]
 80164f4:	b25b      	sxtb	r3, r3
 80164f6:	11db      	asrs	r3, r3, #7
 80164f8:	b25b      	sxtb	r3, r3
 80164fa:	f003 0301 	and.w	r3, r3, #1
 80164fe:	2b00      	cmp	r3, #0
 8016500:	f040 80de 	bne.w	80166c0 <Get_Kyosan_EI_Message+0x428>
					{
						printf("+ Ctrl Data|");
 8016504:	4863      	ldr	r0, [pc, #396]	; (8016694 <Get_Kyosan_EI_Message+0x3fc>)
 8016506:	f00f fd5b 	bl	8025fc0 <iprintf>
						memcpy(&ControlData_Positive,&Buffer,Cur_Receive_Length);
 801650a:	4b55      	ldr	r3, [pc, #340]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 801650c:	881b      	ldrh	r3, [r3, #0]
 801650e:	461a      	mov	r2, r3
 8016510:	4954      	ldr	r1, [pc, #336]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 8016512:	4861      	ldr	r0, [pc, #388]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 8016514:	f00f fc44 	bl	8025da0 <memcpy>

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 8016518:	4b54      	ldr	r3, [pc, #336]	; (801666c <Get_Kyosan_EI_Message+0x3d4>)
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	091b      	lsrs	r3, r3, #4
 801651e:	f003 0301 	and.w	r3, r3, #1
 8016522:	2b00      	cmp	r3, #0
 8016524:	d027      	beq.n	8016576 <Get_Kyosan_EI_Message+0x2de>
 8016526:	4b4f      	ldr	r3, [pc, #316]	; (8016664 <Get_Kyosan_EI_Message+0x3cc>)
 8016528:	781b      	ldrb	r3, [r3, #0]
 801652a:	b25b      	sxtb	r3, r3
 801652c:	11db      	asrs	r3, r3, #7
 801652e:	b25b      	sxtb	r3, r3
 8016530:	f003 0301 	and.w	r3, r3, #1
 8016534:	2b00      	cmp	r3, #0
 8016536:	d01e      	beq.n	8016576 <Get_Kyosan_EI_Message+0x2de>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 8016538:	4858      	ldr	r0, [pc, #352]	; (801669c <Get_Kyosan_EI_Message+0x404>)
 801653a:	f00f fddd 	bl	80260f8 <puts>
							ControlData_Positive[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 801653e:	484d      	ldr	r0, [pc, #308]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 8016540:	f007 f9e6 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016544:	4602      	mov	r2, r0
 8016546:	4b4d      	ldr	r3, [pc, #308]	; (801667c <Get_Kyosan_EI_Message+0x3e4>)
 8016548:	fba3 1302 	umull	r1, r3, r3, r2
 801654c:	09dc      	lsrs	r4, r3, #7
 801654e:	4623      	mov	r3, r4
 8016550:	021b      	lsls	r3, r3, #8
 8016552:	1b1b      	subs	r3, r3, r4
 8016554:	1ad4      	subs	r4, r2, r3
 8016556:	4847      	ldr	r0, [pc, #284]	; (8016674 <Get_Kyosan_EI_Message+0x3dc>)
 8016558:	f007 f9da 	bl	801d910 <HAL_RNG_GetRandomNumber>
 801655c:	4601      	mov	r1, r0
 801655e:	4b50      	ldr	r3, [pc, #320]	; (80166a0 <Get_Kyosan_EI_Message+0x408>)
 8016560:	fba3 2301 	umull	r2, r3, r3, r1
 8016564:	08da      	lsrs	r2, r3, #3
 8016566:	4613      	mov	r3, r2
 8016568:	011b      	lsls	r3, r3, #4
 801656a:	1a9b      	subs	r3, r3, r2
 801656c:	1aca      	subs	r2, r1, r3
 801656e:	1c53      	adds	r3, r2, #1
 8016570:	b2e1      	uxtb	r1, r4
 8016572:	4a49      	ldr	r2, [pc, #292]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 8016574:	54d1      	strb	r1, [r2, r3]
						}

						ControlID = (uint8_t)((uint8_t)ControlData_Positive[0]&(uint8_t)0x0f);
 8016576:	4b48      	ldr	r3, [pc, #288]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 8016578:	781b      	ldrb	r3, [r3, #0]
 801657a:	f003 030f 	and.w	r3, r3, #15
 801657e:	727b      	strb	r3, [r7, #9]
						//						printf("%u|",ControlID);
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 8016580:	2300      	movs	r3, #0
 8016582:	837b      	strh	r3, [r7, #26]
 8016584:	e011      	b.n	80165aa <Get_Kyosan_EI_Message+0x312>
						{
							if(ControlData_Negative[i] != (uint8_t)(~ControlData_Positive[i]))
 8016586:	8b7b      	ldrh	r3, [r7, #26]
 8016588:	4a46      	ldr	r2, [pc, #280]	; (80166a4 <Get_Kyosan_EI_Message+0x40c>)
 801658a:	5cd2      	ldrb	r2, [r2, r3]
 801658c:	8b7b      	ldrh	r3, [r7, #26]
 801658e:	4942      	ldr	r1, [pc, #264]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 8016590:	5ccb      	ldrb	r3, [r1, r3]
 8016592:	43db      	mvns	r3, r3
 8016594:	b2db      	uxtb	r3, r3
 8016596:	429a      	cmp	r2, r3
 8016598:	d004      	beq.n	80165a4 <Get_Kyosan_EI_Message+0x30c>
							{
								Pos_NegDataMisMatch = SET;
 801659a:	2301      	movs	r3, #1
 801659c:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = POS_DATA_MISMATCH;
 801659e:	2301      	movs	r3, #1
 80165a0:	773b      	strb	r3, [r7, #28]
								//								printf("Positive & Negative data not Matching\n");
								//								printf("P:%X-N:%X -> %X\n",ControlData_Positive[i],ControlData_Negative[i],(uint8_t)(~ControlData_Positive[i]));
								break;
 80165a2:	e008      	b.n	80165b6 <Get_Kyosan_EI_Message+0x31e>
						for(uint16_t  i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 80165a4:	8b7b      	ldrh	r3, [r7, #26]
 80165a6:	3301      	adds	r3, #1
 80165a8:	837b      	strh	r3, [r7, #26]
 80165aa:	8b7a      	ldrh	r2, [r7, #26]
 80165ac:	4b2c      	ldr	r3, [pc, #176]	; (8016660 <Get_Kyosan_EI_Message+0x3c8>)
 80165ae:	881b      	ldrh	r3, [r3, #0]
 80165b0:	3b02      	subs	r3, #2
 80165b2:	429a      	cmp	r2, r3
 80165b4:	dbe7      	blt.n	8016586 <Get_Kyosan_EI_Message+0x2ee>
							}
						}

						if(Pos_NegDataMisMatch == RESET)
 80165b6:	7f7b      	ldrb	r3, [r7, #29]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	f040 80d9 	bne.w	8016770 <Get_Kyosan_EI_Message+0x4d8>
						{
							printf("\nR:");
 80165be:	483a      	ldr	r0, [pc, #232]	; (80166a8 <Get_Kyosan_EI_Message+0x410>)
 80165c0:	f00f fcfe 	bl	8025fc0 <iprintf>
							for(uint8_t i=1;i<61;++i)
 80165c4:	2301      	movs	r3, #1
 80165c6:	767b      	strb	r3, [r7, #25]
 80165c8:	e009      	b.n	80165de <Get_Kyosan_EI_Message+0x346>
							{
								printf("%02X ",ControlData_Positive[i]);
 80165ca:	7e7b      	ldrb	r3, [r7, #25]
 80165cc:	4a32      	ldr	r2, [pc, #200]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 80165ce:	5cd3      	ldrb	r3, [r2, r3]
 80165d0:	4619      	mov	r1, r3
 80165d2:	4836      	ldr	r0, [pc, #216]	; (80166ac <Get_Kyosan_EI_Message+0x414>)
 80165d4:	f00f fcf4 	bl	8025fc0 <iprintf>
							for(uint8_t i=1;i<61;++i)
 80165d8:	7e7b      	ldrb	r3, [r7, #25]
 80165da:	3301      	adds	r3, #1
 80165dc:	767b      	strb	r3, [r7, #25]
 80165de:	7e7b      	ldrb	r3, [r7, #25]
 80165e0:	2b3c      	cmp	r3, #60	; 0x3c
 80165e2:	d9f2      	bls.n	80165ca <Get_Kyosan_EI_Message+0x332>
							}
							printf("\n");
 80165e4:	200a      	movs	r0, #10
 80165e6:	f00f fd03 	bl	8025ff0 <putchar>

							memcpy(Kyosan_SelfRelays.Relays,&ControlData_Positive[1],60);
 80165ea:	4a31      	ldr	r2, [pc, #196]	; (80166b0 <Get_Kyosan_EI_Message+0x418>)
 80165ec:	4b2a      	ldr	r3, [pc, #168]	; (8016698 <Get_Kyosan_EI_Message+0x400>)
 80165ee:	3301      	adds	r3, #1
 80165f0:	1c90      	adds	r0, r2, #2
 80165f2:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80165f6:	4602      	mov	r2, r0
 80165f8:	4619      	mov	r1, r3
 80165fa:	f8d1 c000 	ldr.w	ip, [r1]
 80165fe:	684e      	ldr	r6, [r1, #4]
 8016600:	688d      	ldr	r5, [r1, #8]
 8016602:	68c9      	ldr	r1, [r1, #12]
 8016604:	f8c2 c000 	str.w	ip, [r2]
 8016608:	6056      	str	r6, [r2, #4]
 801660a:	6095      	str	r5, [r2, #8]
 801660c:	60d1      	str	r1, [r2, #12]
 801660e:	3310      	adds	r3, #16
 8016610:	3010      	adds	r0, #16
 8016612:	42a3      	cmp	r3, r4
 8016614:	d1ef      	bne.n	80165f6 <Get_Kyosan_EI_Message+0x35e>
 8016616:	4602      	mov	r2, r0
 8016618:	6818      	ldr	r0, [r3, #0]
 801661a:	6859      	ldr	r1, [r3, #4]
 801661c:	689b      	ldr	r3, [r3, #8]
 801661e:	6010      	str	r0, [r2, #0]
 8016620:	6051      	str	r1, [r2, #4]
 8016622:	6093      	str	r3, [r2, #8]
							Kyosan_SelfRelays.Relay_CRC = Calc_Kysoan_CRC(Kyosan_SelfRelays.Relays, 60);
 8016624:	213c      	movs	r1, #60	; 0x3c
 8016626:	4823      	ldr	r0, [pc, #140]	; (80166b4 <Get_Kyosan_EI_Message+0x41c>)
 8016628:	f000 fa82 	bl	8016b30 <Calc_Kysoan_CRC>
 801662c:	4603      	mov	r3, r0
 801662e:	461a      	mov	r2, r3
 8016630:	4b1f      	ldr	r3, [pc, #124]	; (80166b0 <Get_Kyosan_EI_Message+0x418>)
 8016632:	87da      	strh	r2, [r3, #62]	; 0x3e

#ifdef EI_1
							if((SendThisCardRelays == SET)&&(PrevRelayCRC != Kyosan_SelfRelays.Relay_CRC))
 8016634:	4b20      	ldr	r3, [pc, #128]	; (80166b8 <Get_Kyosan_EI_Message+0x420>)
 8016636:	781b      	ldrb	r3, [r3, #0]
 8016638:	2b01      	cmp	r3, #1
 801663a:	f040 8099 	bne.w	8016770 <Get_Kyosan_EI_Message+0x4d8>
 801663e:	4b1c      	ldr	r3, [pc, #112]	; (80166b0 <Get_Kyosan_EI_Message+0x418>)
 8016640:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016642:	4b1e      	ldr	r3, [pc, #120]	; (80166bc <Get_Kyosan_EI_Message+0x424>)
 8016644:	881b      	ldrh	r3, [r3, #0]
 8016646:	429a      	cmp	r2, r3
 8016648:	f000 8092 	beq.w	8016770 <Get_Kyosan_EI_Message+0x4d8>
							{
								PrevRelayCRC = Kyosan_SelfRelays.Relay_CRC;
 801664c:	4b18      	ldr	r3, [pc, #96]	; (80166b0 <Get_Kyosan_EI_Message+0x418>)
 801664e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8016650:	4b1a      	ldr	r3, [pc, #104]	; (80166bc <Get_Kyosan_EI_Message+0x424>)
 8016652:	801a      	strh	r2, [r3, #0]
								TransmitCanPkt(EI_PROCESS_DATA);
 8016654:	f240 1019 	movw	r0, #281	; 0x119
 8016658:	f7fa fc82 	bl	8010f60 <TransmitCanPkt>
 801665c:	e088      	b.n	8016770 <Get_Kyosan_EI_Message+0x4d8>
 801665e:	bf00      	nop
 8016660:	2000b946 	.word	0x2000b946
 8016664:	2000b94c 	.word	0x2000b94c
 8016668:	2000b948 	.word	0x2000b948
 801666c:	2000b424 	.word	0x2000b424
 8016670:	0802aca4 	.word	0x0802aca4
 8016674:	2000bc54 	.word	0x2000bc54
 8016678:	80008001 	.word	0x80008001
 801667c:	80808081 	.word	0x80808081
 8016680:	0802acd4 	.word	0x0802acd4
 8016684:	40021c00 	.word	0x40021c00
 8016688:	2000b940 	.word	0x2000b940
 801668c:	2000b944 	.word	0x2000b944
 8016690:	2000b42c 	.word	0x2000b42c
 8016694:	0802ad04 	.word	0x0802ad04
 8016698:	2000ba50 	.word	0x2000ba50
 801669c:	0802ad14 	.word	0x0802ad14
 80166a0:	88888889 	.word	0x88888889
 80166a4:	2000bb50 	.word	0x2000bb50
 80166a8:	0802ad54 	.word	0x0802ad54
 80166ac:	0802ac9c 	.word	0x0802ac9c
 80166b0:	2000b440 	.word	0x2000b440
 80166b4:	2000b442 	.word	0x2000b442
 80166b8:	2000b935 	.word	0x2000b935
 80166bc:	2000bc50 	.word	0x2000bc50
						}

					}
					else
					{
						printf("- Ctrl Data|");
 80166c0:	4888      	ldr	r0, [pc, #544]	; (80168e4 <Get_Kyosan_EI_Message+0x64c>)
 80166c2:	f00f fc7d 	bl	8025fc0 <iprintf>
						memcpy(&ControlData_Negative,&Buffer,Cur_Receive_Length);
 80166c6:	4b88      	ldr	r3, [pc, #544]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 80166c8:	881b      	ldrh	r3, [r3, #0]
 80166ca:	461a      	mov	r2, r3
 80166cc:	4987      	ldr	r1, [pc, #540]	; (80168ec <Get_Kyosan_EI_Message+0x654>)
 80166ce:	4888      	ldr	r0, [pc, #544]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 80166d0:	f00f fb66 	bl	8025da0 <memcpy>
						ControlID = (uint8_t)(~ControlData_Negative[0]);
 80166d4:	4b86      	ldr	r3, [pc, #536]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 80166d6:	781b      	ldrb	r3, [r3, #0]
 80166d8:	43db      	mvns	r3, r3
 80166da:	727b      	strb	r3, [r7, #9]

						if( ((CHECKFLAG(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 80166dc:	4b85      	ldr	r3, [pc, #532]	; (80168f4 <Get_Kyosan_EI_Message+0x65c>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	091b      	lsrs	r3, r3, #4
 80166e2:	f003 0301 	and.w	r3, r3, #1
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d027      	beq.n	801673a <Get_Kyosan_EI_Message+0x4a2>
 80166ea:	4b80      	ldr	r3, [pc, #512]	; (80168ec <Get_Kyosan_EI_Message+0x654>)
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	b25b      	sxtb	r3, r3
 80166f0:	11db      	asrs	r3, r3, #7
 80166f2:	b25b      	sxtb	r3, r3
 80166f4:	f003 0301 	and.w	r3, r3, #1
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d01e      	beq.n	801673a <Get_Kyosan_EI_Message+0x4a2>
						{
							printf("\nInjecting COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA Failure\n");
 80166fc:	487e      	ldr	r0, [pc, #504]	; (80168f8 <Get_Kyosan_EI_Message+0x660>)
 80166fe:	f00f fcfb 	bl	80260f8 <puts>
							ControlData_Negative[(HAL_RNG_GetRandomNumber(&hrng)%0xf)+1] = HAL_RNG_GetRandomNumber(&hrng)%0XFF;
 8016702:	487e      	ldr	r0, [pc, #504]	; (80168fc <Get_Kyosan_EI_Message+0x664>)
 8016704:	f007 f904 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016708:	4602      	mov	r2, r0
 801670a:	4b7d      	ldr	r3, [pc, #500]	; (8016900 <Get_Kyosan_EI_Message+0x668>)
 801670c:	fba3 1302 	umull	r1, r3, r3, r2
 8016710:	09dc      	lsrs	r4, r3, #7
 8016712:	4623      	mov	r3, r4
 8016714:	021b      	lsls	r3, r3, #8
 8016716:	1b1b      	subs	r3, r3, r4
 8016718:	1ad4      	subs	r4, r2, r3
 801671a:	4878      	ldr	r0, [pc, #480]	; (80168fc <Get_Kyosan_EI_Message+0x664>)
 801671c:	f007 f8f8 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016720:	4601      	mov	r1, r0
 8016722:	4b78      	ldr	r3, [pc, #480]	; (8016904 <Get_Kyosan_EI_Message+0x66c>)
 8016724:	fba3 2301 	umull	r2, r3, r3, r1
 8016728:	08da      	lsrs	r2, r3, #3
 801672a:	4613      	mov	r3, r2
 801672c:	011b      	lsls	r3, r3, #4
 801672e:	1a9b      	subs	r3, r3, r2
 8016730:	1aca      	subs	r2, r1, r3
 8016732:	1c53      	adds	r3, r2, #1
 8016734:	b2e1      	uxtb	r1, r4
 8016736:	4a6e      	ldr	r2, [pc, #440]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 8016738:	54d1      	strb	r1, [r2, r3]
						}


						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801673a:	2300      	movs	r3, #0
 801673c:	82fb      	strh	r3, [r7, #22]
 801673e:	e011      	b.n	8016764 <Get_Kyosan_EI_Message+0x4cc>
						{
							if(ControlData_Positive[i] != (uint8_t)(~ControlData_Negative[i]))
 8016740:	8afb      	ldrh	r3, [r7, #22]
 8016742:	4a71      	ldr	r2, [pc, #452]	; (8016908 <Get_Kyosan_EI_Message+0x670>)
 8016744:	5cd2      	ldrb	r2, [r2, r3]
 8016746:	8afb      	ldrh	r3, [r7, #22]
 8016748:	4969      	ldr	r1, [pc, #420]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 801674a:	5ccb      	ldrb	r3, [r1, r3]
 801674c:	43db      	mvns	r3, r3
 801674e:	b2db      	uxtb	r3, r3
 8016750:	429a      	cmp	r2, r3
 8016752:	d004      	beq.n	801675e <Get_Kyosan_EI_Message+0x4c6>
							{
								Pos_NegDataMisMatch = SET;
 8016754:	2301      	movs	r3, #1
 8016756:	777b      	strb	r3, [r7, #29]
								TypeofDataMisMatch = NEG_DATA_MISMATCH;
 8016758:	2302      	movs	r3, #2
 801675a:	773b      	strb	r3, [r7, #28]
								//								printf("Negative & Positive data not Matching\n");
								//								printf("N:%02X-P:%02X -> %X\n",ControlData_Negative[i],ControlData_Positive[i],(uint8_t)(~ControlData_Negative[i]));
								break;
 801675c:	e008      	b.n	8016770 <Get_Kyosan_EI_Message+0x4d8>
						for(uint16_t i=0;i<(Cur_Receive_Length-2);++i) /*(Cur_Receive_Length-2) is for Not checking CRC Location */
 801675e:	8afb      	ldrh	r3, [r7, #22]
 8016760:	3301      	adds	r3, #1
 8016762:	82fb      	strh	r3, [r7, #22]
 8016764:	8afa      	ldrh	r2, [r7, #22]
 8016766:	4b60      	ldr	r3, [pc, #384]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 8016768:	881b      	ldrh	r3, [r3, #0]
 801676a:	3b02      	subs	r3, #2
 801676c:	429a      	cmp	r2, r3
 801676e:	dbe7      	blt.n	8016740 <Get_Kyosan_EI_Message+0x4a8>
							//							}
							//							printf("\n");
						}
					}

					if(Pos_NegDataMisMatch == RESET)
 8016770:	7f7b      	ldrb	r3, [r7, #29]
 8016772:	2b00      	cmp	r3, #0
 8016774:	d11b      	bne.n	80167ae <Get_Kyosan_EI_Message+0x516>
					{
						//						printf("+ & -:DATA:OK\n");
						if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016776:	4b5d      	ldr	r3, [pc, #372]	; (80168ec <Get_Kyosan_EI_Message+0x654>)
 8016778:	781b      	ldrb	r3, [r3, #0]
 801677a:	b25b      	sxtb	r3, r3
 801677c:	11db      	asrs	r3, r3, #7
 801677e:	b25b      	sxtb	r3, r3
 8016780:	f003 0301 	and.w	r3, r3, #1
 8016784:	2b00      	cmp	r3, #0
 8016786:	d105      	bne.n	8016794 <Get_Kyosan_EI_Message+0x4fc>
						{
							KyosanClocks.ControlDataPosRecvCLK = HAL_GetTick();
 8016788:	f002 fd04 	bl	8019194 <HAL_GetTick>
 801678c:	4603      	mov	r3, r0
 801678e:	4a5f      	ldr	r2, [pc, #380]	; (801690c <Get_Kyosan_EI_Message+0x674>)
 8016790:	6053      	str	r3, [r2, #4]
 8016792:	e004      	b.n	801679e <Get_Kyosan_EI_Message+0x506>
						}
						else
						{
							KyosanClocks.ControlDataNegRecvCLK = HAL_GetTick();
 8016794:	f002 fcfe 	bl	8019194 <HAL_GetTick>
 8016798:	4603      	mov	r3, r0
 801679a:	4a5c      	ldr	r2, [pc, #368]	; (801690c <Get_Kyosan_EI_Message+0x674>)
 801679c:	6093      	str	r3, [r2, #8]
						}
						Pos_NegDataMisMatch_Count = RESET;
 801679e:	4b5c      	ldr	r3, [pc, #368]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 80167a0:	2200      	movs	r2, #0
 80167a2:	701a      	strb	r2, [r3, #0]
						TypeofDataMisMatch = RESET;
 80167a4:	2300      	movs	r3, #0
 80167a6:	773b      	strb	r3, [r7, #28]
						Pos_NegDataMisMatch = RESET;
 80167a8:	2300      	movs	r3, #0
 80167aa:	777b      	strb	r3, [r7, #29]
 80167ac:	e092      	b.n	80168d4 <Get_Kyosan_EI_Message+0x63c>
					}
					else
					{
						++Pos_NegDataMisMatch_Count;
 80167ae:	4b58      	ldr	r3, [pc, #352]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	3301      	adds	r3, #1
 80167b4:	b2da      	uxtb	r2, r3
 80167b6:	4b56      	ldr	r3, [pc, #344]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 80167b8:	701a      	strb	r2, [r3, #0]

						if(Pos_NegDataMisMatch_Count == 2)
 80167ba:	4b55      	ldr	r3, [pc, #340]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 80167bc:	781b      	ldrb	r3, [r3, #0]
 80167be:	2b02      	cmp	r3, #2
 80167c0:	d161      	bne.n	8016886 <Get_Kyosan_EI_Message+0x5ee>
						{
							switch(TypeofDataMisMatch)
 80167c2:	7f3b      	ldrb	r3, [r7, #28]
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d002      	beq.n	80167ce <Get_Kyosan_EI_Message+0x536>
 80167c8:	2b02      	cmp	r3, #2
 80167ca:	d02e      	beq.n	801682a <Get_Kyosan_EI_Message+0x592>
 80167cc:	e05c      	b.n	8016888 <Get_Kyosan_EI_Message+0x5f0>
							{
							case POS_DATA_MISMATCH:
								printf("P:");
 80167ce:	4851      	ldr	r0, [pc, #324]	; (8016914 <Get_Kyosan_EI_Message+0x67c>)
 80167d0:	f00f fbf6 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80167d4:	2300      	movs	r3, #0
 80167d6:	82bb      	strh	r3, [r7, #20]
 80167d8:	e009      	b.n	80167ee <Get_Kyosan_EI_Message+0x556>
								{
									printf("%02X ",ControlData_Positive[i]);
 80167da:	8abb      	ldrh	r3, [r7, #20]
 80167dc:	4a4a      	ldr	r2, [pc, #296]	; (8016908 <Get_Kyosan_EI_Message+0x670>)
 80167de:	5cd3      	ldrb	r3, [r2, r3]
 80167e0:	4619      	mov	r1, r3
 80167e2:	484d      	ldr	r0, [pc, #308]	; (8016918 <Get_Kyosan_EI_Message+0x680>)
 80167e4:	f00f fbec 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80167e8:	8abb      	ldrh	r3, [r7, #20]
 80167ea:	3301      	adds	r3, #1
 80167ec:	82bb      	strh	r3, [r7, #20]
 80167ee:	4b3e      	ldr	r3, [pc, #248]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 80167f0:	881b      	ldrh	r3, [r3, #0]
 80167f2:	8aba      	ldrh	r2, [r7, #20]
 80167f4:	429a      	cmp	r2, r3
 80167f6:	d3f0      	bcc.n	80167da <Get_Kyosan_EI_Message+0x542>
								}
								printf("\nN:");
 80167f8:	4848      	ldr	r0, [pc, #288]	; (801691c <Get_Kyosan_EI_Message+0x684>)
 80167fa:	f00f fbe1 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 80167fe:	2300      	movs	r3, #0
 8016800:	827b      	strh	r3, [r7, #18]
 8016802:	e009      	b.n	8016818 <Get_Kyosan_EI_Message+0x580>
								{
									printf("%02X ",ControlData_Negative[i]);
 8016804:	8a7b      	ldrh	r3, [r7, #18]
 8016806:	4a3a      	ldr	r2, [pc, #232]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 8016808:	5cd3      	ldrb	r3, [r2, r3]
 801680a:	4619      	mov	r1, r3
 801680c:	4842      	ldr	r0, [pc, #264]	; (8016918 <Get_Kyosan_EI_Message+0x680>)
 801680e:	f00f fbd7 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016812:	8a7b      	ldrh	r3, [r7, #18]
 8016814:	3301      	adds	r3, #1
 8016816:	827b      	strh	r3, [r7, #18]
 8016818:	4b33      	ldr	r3, [pc, #204]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 801681a:	881b      	ldrh	r3, [r3, #0]
 801681c:	8a7a      	ldrh	r2, [r7, #18]
 801681e:	429a      	cmp	r2, r3
 8016820:	d3f0      	bcc.n	8016804 <Get_Kyosan_EI_Message+0x56c>
								}
								printf("\n");
 8016822:	200a      	movs	r0, #10
 8016824:	f00f fbe4 	bl	8025ff0 <putchar>
								break;
 8016828:	e02e      	b.n	8016888 <Get_Kyosan_EI_Message+0x5f0>
							case NEG_DATA_MISMATCH:
								printf("N:");
 801682a:	483d      	ldr	r0, [pc, #244]	; (8016920 <Get_Kyosan_EI_Message+0x688>)
 801682c:	f00f fbc8 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016830:	2300      	movs	r3, #0
 8016832:	823b      	strh	r3, [r7, #16]
 8016834:	e009      	b.n	801684a <Get_Kyosan_EI_Message+0x5b2>
								{
									printf("%02X ",ControlData_Negative[i]);
 8016836:	8a3b      	ldrh	r3, [r7, #16]
 8016838:	4a2d      	ldr	r2, [pc, #180]	; (80168f0 <Get_Kyosan_EI_Message+0x658>)
 801683a:	5cd3      	ldrb	r3, [r2, r3]
 801683c:	4619      	mov	r1, r3
 801683e:	4836      	ldr	r0, [pc, #216]	; (8016918 <Get_Kyosan_EI_Message+0x680>)
 8016840:	f00f fbbe 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 8016844:	8a3b      	ldrh	r3, [r7, #16]
 8016846:	3301      	adds	r3, #1
 8016848:	823b      	strh	r3, [r7, #16]
 801684a:	4b27      	ldr	r3, [pc, #156]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 801684c:	881b      	ldrh	r3, [r3, #0]
 801684e:	8a3a      	ldrh	r2, [r7, #16]
 8016850:	429a      	cmp	r2, r3
 8016852:	d3f0      	bcc.n	8016836 <Get_Kyosan_EI_Message+0x59e>
								}
								printf("\nP:");
 8016854:	4833      	ldr	r0, [pc, #204]	; (8016924 <Get_Kyosan_EI_Message+0x68c>)
 8016856:	f00f fbb3 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801685a:	2300      	movs	r3, #0
 801685c:	81fb      	strh	r3, [r7, #14]
 801685e:	e009      	b.n	8016874 <Get_Kyosan_EI_Message+0x5dc>
								{
									printf("%02X ",ControlData_Positive[i]);
 8016860:	89fb      	ldrh	r3, [r7, #14]
 8016862:	4a29      	ldr	r2, [pc, #164]	; (8016908 <Get_Kyosan_EI_Message+0x670>)
 8016864:	5cd3      	ldrb	r3, [r2, r3]
 8016866:	4619      	mov	r1, r3
 8016868:	482b      	ldr	r0, [pc, #172]	; (8016918 <Get_Kyosan_EI_Message+0x680>)
 801686a:	f00f fba9 	bl	8025fc0 <iprintf>
								for(uint16_t i=0;i<Cur_Receive_Length;++i)
 801686e:	89fb      	ldrh	r3, [r7, #14]
 8016870:	3301      	adds	r3, #1
 8016872:	81fb      	strh	r3, [r7, #14]
 8016874:	4b1c      	ldr	r3, [pc, #112]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 8016876:	881b      	ldrh	r3, [r3, #0]
 8016878:	89fa      	ldrh	r2, [r7, #14]
 801687a:	429a      	cmp	r2, r3
 801687c:	d3f0      	bcc.n	8016860 <Get_Kyosan_EI_Message+0x5c8>
								}
								printf("\n");
 801687e:	200a      	movs	r0, #10
 8016880:	f00f fbb6 	bl	8025ff0 <putchar>
								break;
 8016884:	e000      	b.n	8016888 <Get_Kyosan_EI_Message+0x5f0>
							default:
 8016886:	bf00      	nop
								;

							}
						}

						if(Pos_NegDataMisMatch_Count >= EI_data.Kyosan_st.MaxMisMatchCnt)
 8016888:	4b21      	ldr	r3, [pc, #132]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 801688a:	781b      	ldrb	r3, [r3, #0]
 801688c:	b29a      	uxth	r2, r3
 801688e:	4b26      	ldr	r3, [pc, #152]	; (8016928 <Get_Kyosan_EI_Message+0x690>)
 8016890:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 8016894:	429a      	cmp	r2, r3
 8016896:	d31d      	bcc.n	80168d4 <Get_Kyosan_EI_Message+0x63c>
						{
							printf("\n+ & - Data Mismatch count Reached:%u\n",Pos_NegDataMisMatch_Count);
 8016898:	4b1d      	ldr	r3, [pc, #116]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 801689a:	781b      	ldrb	r3, [r3, #0]
 801689c:	4619      	mov	r1, r3
 801689e:	4823      	ldr	r0, [pc, #140]	; (801692c <Get_Kyosan_EI_Message+0x694>)
 80168a0:	f00f fb8e 	bl	8025fc0 <iprintf>
							Pos_NegDataMisMatch_Count = EI_data.Kyosan_st.MaxMisMatchCnt; /* To avoid Overflow */
 80168a4:	4b20      	ldr	r3, [pc, #128]	; (8016928 <Get_Kyosan_EI_Message+0x690>)
 80168a6:	f8b3 3342 	ldrh.w	r3, [r3, #834]	; 0x342
 80168aa:	b2da      	uxtb	r2, r3
 80168ac:	4b18      	ldr	r3, [pc, #96]	; (8016910 <Get_Kyosan_EI_Message+0x678>)
 80168ae:	701a      	strb	r2, [r3, #0]
 80168b0:	e010      	b.n	80168d4 <Get_Kyosan_EI_Message+0x63c>
						}
					}
				}
				else
				{
					printf("\n%c Control Data Packet CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 80168b2:	4b0e      	ldr	r3, [pc, #56]	; (80168ec <Get_Kyosan_EI_Message+0x654>)
 80168b4:	781b      	ldrb	r3, [r3, #0]
 80168b6:	b25b      	sxtb	r3, r3
 80168b8:	11db      	asrs	r3, r3, #7
 80168ba:	b25b      	sxtb	r3, r3
 80168bc:	f003 0301 	and.w	r3, r3, #1
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d101      	bne.n	80168c8 <Get_Kyosan_EI_Message+0x630>
 80168c4:	212b      	movs	r1, #43	; 0x2b
 80168c6:	e000      	b.n	80168ca <Get_Kyosan_EI_Message+0x632>
 80168c8:	212d      	movs	r1, #45	; 0x2d
 80168ca:	897a      	ldrh	r2, [r7, #10]
 80168cc:	8bfb      	ldrh	r3, [r7, #30]
 80168ce:	4818      	ldr	r0, [pc, #96]	; (8016930 <Get_Kyosan_EI_Message+0x698>)
 80168d0:	f00f fb76 	bl	8025fc0 <iprintf>

				}
				Cur_Receive_Length = RESET;
 80168d4:	4b04      	ldr	r3, [pc, #16]	; (80168e8 <Get_Kyosan_EI_Message+0x650>)
 80168d6:	2200      	movs	r2, #0
 80168d8:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 80168da:	4b16      	ldr	r3, [pc, #88]	; (8016934 <Get_Kyosan_EI_Message+0x69c>)
 80168dc:	2200      	movs	r2, #0
 80168de:	801a      	strh	r2, [r3, #0]
			}
			break;
 80168e0:	e0fe      	b.n	8016ae0 <Get_Kyosan_EI_Message+0x848>
 80168e2:	bf00      	nop
 80168e4:	0802ad58 	.word	0x0802ad58
 80168e8:	2000b946 	.word	0x2000b946
 80168ec:	2000b94c 	.word	0x2000b94c
 80168f0:	2000bb50 	.word	0x2000bb50
 80168f4:	2000b424 	.word	0x2000b424
 80168f8:	0802ad14 	.word	0x0802ad14
 80168fc:	2000bc54 	.word	0x2000bc54
 8016900:	80808081 	.word	0x80808081
 8016904:	88888889 	.word	0x88888889
 8016908:	2000ba50 	.word	0x2000ba50
 801690c:	2000b42c 	.word	0x2000b42c
 8016910:	2000bc52 	.word	0x2000bc52
 8016914:	0802ad68 	.word	0x0802ad68
 8016918:	0802ac9c 	.word	0x0802ac9c
 801691c:	0802ad6c 	.word	0x0802ad6c
 8016920:	0802ad70 	.word	0x0802ad70
 8016924:	0802ad74 	.word	0x0802ad74
 8016928:	20000504 	.word	0x20000504
 801692c:	0802ad78 	.word	0x0802ad78
 8016930:	0802ada0 	.word	0x0802ada0
 8016934:	2000b948 	.word	0x2000b948
		case POLLING_DATA:
			Buffer[Cur_Receive_Length++] = Data;
 8016938:	4b70      	ldr	r3, [pc, #448]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 801693a:	881b      	ldrh	r3, [r3, #0]
 801693c:	1c5a      	adds	r2, r3, #1
 801693e:	b291      	uxth	r1, r2
 8016940:	4a6e      	ldr	r2, [pc, #440]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 8016942:	8011      	strh	r1, [r2, #0]
 8016944:	4619      	mov	r1, r3
 8016946:	4a6e      	ldr	r2, [pc, #440]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016948:	7b7b      	ldrb	r3, [r7, #13]
 801694a:	5453      	strb	r3, [r2, r1]
			if(Cur_Receive_Length == Max_Receive_Length)
 801694c:	4b6b      	ldr	r3, [pc, #428]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 801694e:	881a      	ldrh	r2, [r3, #0]
 8016950:	4b6c      	ldr	r3, [pc, #432]	; (8016b04 <Get_Kyosan_EI_Message+0x86c>)
 8016952:	881b      	ldrh	r3, [r3, #0]
 8016954:	429a      	cmp	r2, r3
 8016956:	f040 80c3 	bne.w	8016ae0 <Get_Kyosan_EI_Message+0x848>
			{
				C_CRC = Calc_Kysoan_CRC(Buffer, Cur_Receive_Length-2);
 801695a:	4b68      	ldr	r3, [pc, #416]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 801695c:	881b      	ldrh	r3, [r3, #0]
 801695e:	3b02      	subs	r3, #2
 8016960:	4619      	mov	r1, r3
 8016962:	4867      	ldr	r0, [pc, #412]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016964:	f000 f8e4 	bl	8016b30 <Calc_Kysoan_CRC>
 8016968:	4603      	mov	r3, r0
 801696a:	817b      	strh	r3, [r7, #10]
				R_CRC = ExtractBits(0, 16, &Buffer[Cur_Receive_Length-2]);
 801696c:	4b63      	ldr	r3, [pc, #396]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 801696e:	881b      	ldrh	r3, [r3, #0]
 8016970:	3b02      	subs	r3, #2
 8016972:	4a63      	ldr	r2, [pc, #396]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016974:	4413      	add	r3, r2
 8016976:	461a      	mov	r2, r3
 8016978:	2110      	movs	r1, #16
 801697a:	2000      	movs	r0, #0
 801697c:	f7e9 fe4a 	bl	8000614 <ExtractBits>
 8016980:	4603      	mov	r3, r0
 8016982:	83fb      	strh	r3, [r7, #30]

				if( (  (CHECKFLAG(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == RESET))
 8016984:	4b60      	ldr	r3, [pc, #384]	; (8016b08 <Get_Kyosan_EI_Message+0x870>)
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	089b      	lsrs	r3, r3, #2
 801698a:	f003 0301 	and.w	r3, r3, #1
 801698e:	2b00      	cmp	r3, #0
 8016990:	d02d      	beq.n	80169ee <Get_Kyosan_EI_Message+0x756>
 8016992:	4b5b      	ldr	r3, [pc, #364]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016994:	781b      	ldrb	r3, [r3, #0]
 8016996:	b25b      	sxtb	r3, r3
 8016998:	11db      	asrs	r3, r3, #7
 801699a:	b25b      	sxtb	r3, r3
 801699c:	f003 0301 	and.w	r3, r3, #1
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d124      	bne.n	80169ee <Get_Kyosan_EI_Message+0x756>
				{
					printf("\nInjecting Positive Polling Data CRC Failure\n");
 80169a4:	4859      	ldr	r0, [pc, #356]	; (8016b0c <Get_Kyosan_EI_Message+0x874>)
 80169a6:	f00f fba7 	bl	80260f8 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 80169aa:	4859      	ldr	r0, [pc, #356]	; (8016b10 <Get_Kyosan_EI_Message+0x878>)
 80169ac:	f006 ffb0 	bl	801d910 <HAL_RNG_GetRandomNumber>
 80169b0:	4601      	mov	r1, r0
 80169b2:	4b58      	ldr	r3, [pc, #352]	; (8016b14 <Get_Kyosan_EI_Message+0x87c>)
 80169b4:	fba3 2301 	umull	r2, r3, r3, r1
 80169b8:	0bda      	lsrs	r2, r3, #15
 80169ba:	4613      	mov	r3, r2
 80169bc:	041b      	lsls	r3, r3, #16
 80169be:	1a9b      	subs	r3, r3, r2
 80169c0:	1aca      	subs	r2, r1, r3
 80169c2:	4613      	mov	r3, r2
 80169c4:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 80169c6:	8bfa      	ldrh	r2, [r7, #30]
 80169c8:	897b      	ldrh	r3, [r7, #10]
 80169ca:	429a      	cmp	r2, r3
 80169cc:	d10f      	bne.n	80169ee <Get_Kyosan_EI_Message+0x756>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 80169ce:	4850      	ldr	r0, [pc, #320]	; (8016b10 <Get_Kyosan_EI_Message+0x878>)
 80169d0:	f006 ff9e 	bl	801d910 <HAL_RNG_GetRandomNumber>
 80169d4:	4601      	mov	r1, r0
 80169d6:	4b50      	ldr	r3, [pc, #320]	; (8016b18 <Get_Kyosan_EI_Message+0x880>)
 80169d8:	fba3 2301 	umull	r2, r3, r3, r1
 80169dc:	09da      	lsrs	r2, r3, #7
 80169de:	4613      	mov	r3, r2
 80169e0:	021b      	lsls	r3, r3, #8
 80169e2:	1a9b      	subs	r3, r3, r2
 80169e4:	1aca      	subs	r2, r1, r3
 80169e6:	b293      	uxth	r3, r2
 80169e8:	8bfa      	ldrh	r2, [r7, #30]
 80169ea:	1ad3      	subs	r3, r2, r3
 80169ec:	83fb      	strh	r3, [r7, #30]
					}
				}

				if( ((CHECKFLAG(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS)) == SET) && (CHECKFLAG(7,Buffer[0]) == SET))
 80169ee:	4b46      	ldr	r3, [pc, #280]	; (8016b08 <Get_Kyosan_EI_Message+0x870>)
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	08db      	lsrs	r3, r3, #3
 80169f4:	f003 0301 	and.w	r3, r3, #1
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d02d      	beq.n	8016a58 <Get_Kyosan_EI_Message+0x7c0>
 80169fc:	4b40      	ldr	r3, [pc, #256]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	b25b      	sxtb	r3, r3
 8016a02:	11db      	asrs	r3, r3, #7
 8016a04:	b25b      	sxtb	r3, r3
 8016a06:	f003 0301 	and.w	r3, r3, #1
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d024      	beq.n	8016a58 <Get_Kyosan_EI_Message+0x7c0>
				{
					printf("\nInjecting Negative Polling Data CRC Failure\n");
 8016a0e:	4843      	ldr	r0, [pc, #268]	; (8016b1c <Get_Kyosan_EI_Message+0x884>)
 8016a10:	f00f fb72 	bl	80260f8 <puts>
					R_CRC = (HAL_RNG_GetRandomNumber(&hrng)%0XFFFF);
 8016a14:	483e      	ldr	r0, [pc, #248]	; (8016b10 <Get_Kyosan_EI_Message+0x878>)
 8016a16:	f006 ff7b 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016a1a:	4601      	mov	r1, r0
 8016a1c:	4b3d      	ldr	r3, [pc, #244]	; (8016b14 <Get_Kyosan_EI_Message+0x87c>)
 8016a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8016a22:	0bda      	lsrs	r2, r3, #15
 8016a24:	4613      	mov	r3, r2
 8016a26:	041b      	lsls	r3, r3, #16
 8016a28:	1a9b      	subs	r3, r3, r2
 8016a2a:	1aca      	subs	r2, r1, r3
 8016a2c:	4613      	mov	r3, r2
 8016a2e:	83fb      	strh	r3, [r7, #30]
					if(R_CRC ==  C_CRC)
 8016a30:	8bfa      	ldrh	r2, [r7, #30]
 8016a32:	897b      	ldrh	r3, [r7, #10]
 8016a34:	429a      	cmp	r2, r3
 8016a36:	d10f      	bne.n	8016a58 <Get_Kyosan_EI_Message+0x7c0>
					{
						R_CRC = R_CRC-(HAL_RNG_GetRandomNumber(&hrng)%0XFF);
 8016a38:	4835      	ldr	r0, [pc, #212]	; (8016b10 <Get_Kyosan_EI_Message+0x878>)
 8016a3a:	f006 ff69 	bl	801d910 <HAL_RNG_GetRandomNumber>
 8016a3e:	4601      	mov	r1, r0
 8016a40:	4b35      	ldr	r3, [pc, #212]	; (8016b18 <Get_Kyosan_EI_Message+0x880>)
 8016a42:	fba3 2301 	umull	r2, r3, r3, r1
 8016a46:	09da      	lsrs	r2, r3, #7
 8016a48:	4613      	mov	r3, r2
 8016a4a:	021b      	lsls	r3, r3, #8
 8016a4c:	1a9b      	subs	r3, r3, r2
 8016a4e:	1aca      	subs	r2, r1, r3
 8016a50:	b293      	uxth	r3, r2
 8016a52:	8bfa      	ldrh	r2, [r7, #30]
 8016a54:	1ad3      	subs	r3, r2, r3
 8016a56:	83fb      	strh	r3, [r7, #30]
					}
				}

				if(C_CRC == R_CRC)
 8016a58:	897a      	ldrh	r2, [r7, #10]
 8016a5a:	8bfb      	ldrh	r3, [r7, #30]
 8016a5c:	429a      	cmp	r2, r3
 8016a5e:	d11e      	bne.n	8016a9e <Get_Kyosan_EI_Message+0x806>
				{
					KyosanClocks.MessageReceivedCLK = HAL_GetTick();
 8016a60:	f002 fb98 	bl	8019194 <HAL_GetTick>
 8016a64:	4603      	mov	r3, r0
 8016a66:	4a2e      	ldr	r2, [pc, #184]	; (8016b20 <Get_Kyosan_EI_Message+0x888>)
 8016a68:	6013      	str	r3, [r2, #0]
					HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8016a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8016a6e:	482d      	ldr	r0, [pc, #180]	; (8016b24 <Get_Kyosan_EI_Message+0x88c>)
 8016a70:	f004 ff85 	bl	801b97e <HAL_GPIO_TogglePin>

					if(CHECKFLAG(7,Buffer[0]) == RESET)
 8016a74:	4b22      	ldr	r3, [pc, #136]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016a76:	781b      	ldrb	r3, [r3, #0]
 8016a78:	b25b      	sxtb	r3, r3
 8016a7a:	11db      	asrs	r3, r3, #7
 8016a7c:	b25b      	sxtb	r3, r3
 8016a7e:	f003 0301 	and.w	r3, r3, #1
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d105      	bne.n	8016a92 <Get_Kyosan_EI_Message+0x7fa>
					{
						KyosanClocks.PollingDataPosRecvCLK = HAL_GetTick();
 8016a86:	f002 fb85 	bl	8019194 <HAL_GetTick>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	4a24      	ldr	r2, [pc, #144]	; (8016b20 <Get_Kyosan_EI_Message+0x888>)
 8016a8e:	60d3      	str	r3, [r2, #12]
 8016a90:	e01c      	b.n	8016acc <Get_Kyosan_EI_Message+0x834>
					}
					else
					{
						KyosanClocks.PollingDataNegRecvCLK = HAL_GetTick();
 8016a92:	f002 fb7f 	bl	8019194 <HAL_GetTick>
 8016a96:	4603      	mov	r3, r0
 8016a98:	4a21      	ldr	r2, [pc, #132]	; (8016b20 <Get_Kyosan_EI_Message+0x888>)
 8016a9a:	6113      	str	r3, [r2, #16]
 8016a9c:	e016      	b.n	8016acc <Get_Kyosan_EI_Message+0x834>
					}
					//CRC_FailCnt = RESET;
				}
				else
				{
					printf("Polling Data CRC Failed\nC:%04x-R:%04x\n",C_CRC,R_CRC);
 8016a9e:	897b      	ldrh	r3, [r7, #10]
 8016aa0:	8bfa      	ldrh	r2, [r7, #30]
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	4820      	ldr	r0, [pc, #128]	; (8016b28 <Get_Kyosan_EI_Message+0x890>)
 8016aa6:	f00f fa8b 	bl	8025fc0 <iprintf>
					printf("\n%c Polling Data CRC Failed C:%04x-R:%04x\n",((CHECKFLAG(7,Buffer[0]) == RESET)?'+':'-'),C_CRC,R_CRC);
 8016aaa:	4b15      	ldr	r3, [pc, #84]	; (8016b00 <Get_Kyosan_EI_Message+0x868>)
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	b25b      	sxtb	r3, r3
 8016ab0:	11db      	asrs	r3, r3, #7
 8016ab2:	b25b      	sxtb	r3, r3
 8016ab4:	f003 0301 	and.w	r3, r3, #1
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d101      	bne.n	8016ac0 <Get_Kyosan_EI_Message+0x828>
 8016abc:	212b      	movs	r1, #43	; 0x2b
 8016abe:	e000      	b.n	8016ac2 <Get_Kyosan_EI_Message+0x82a>
 8016ac0:	212d      	movs	r1, #45	; 0x2d
 8016ac2:	897a      	ldrh	r2, [r7, #10]
 8016ac4:	8bfb      	ldrh	r3, [r7, #30]
 8016ac6:	4819      	ldr	r0, [pc, #100]	; (8016b2c <Get_Kyosan_EI_Message+0x894>)
 8016ac8:	f00f fa7a 	bl	8025fc0 <iprintf>

				}
				Cur_Receive_Length = RESET;
 8016acc:	4b0b      	ldr	r3, [pc, #44]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 8016ace:	2200      	movs	r2, #0
 8016ad0:	801a      	strh	r2, [r3, #0]
				Max_Receive_Length = RESET;
 8016ad2:	4b0c      	ldr	r3, [pc, #48]	; (8016b04 <Get_Kyosan_EI_Message+0x86c>)
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	801a      	strh	r2, [r3, #0]
			}
			break;
 8016ad8:	e002      	b.n	8016ae0 <Get_Kyosan_EI_Message+0x848>
		default:
			Cur_Receive_Length = RESET;
 8016ada:	4b08      	ldr	r3, [pc, #32]	; (8016afc <Get_Kyosan_EI_Message+0x864>)
 8016adc:	2200      	movs	r2, #0
 8016ade:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(ComPort))
 8016ae0:	79fb      	ldrb	r3, [r7, #7]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f001 ffee 	bl	8018ac4 <Com_DataReady>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	f47f abfa 	bne.w	80162e4 <Get_Kyosan_EI_Message+0x4c>

		}
	}
	UNUSED(ControlID);
}
 8016af0:	bf00      	nop
 8016af2:	bf00      	nop
 8016af4:	3724      	adds	r7, #36	; 0x24
 8016af6:	46bd      	mov	sp, r7
 8016af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016afa:	bf00      	nop
 8016afc:	2000b946 	.word	0x2000b946
 8016b00:	2000b94c 	.word	0x2000b94c
 8016b04:	2000b948 	.word	0x2000b948
 8016b08:	2000b424 	.word	0x2000b424
 8016b0c:	0802add4 	.word	0x0802add4
 8016b10:	2000bc54 	.word	0x2000bc54
 8016b14:	80008001 	.word	0x80008001
 8016b18:	80808081 	.word	0x80808081
 8016b1c:	0802ae04 	.word	0x0802ae04
 8016b20:	2000b42c 	.word	0x2000b42c
 8016b24:	40021c00 	.word	0x40021c00
 8016b28:	0802ae34 	.word	0x0802ae34
 8016b2c:	0802ae5c 	.word	0x0802ae5c

08016b30 <Calc_Kysoan_CRC>:


uint16_t Calc_Kysoan_CRC(uint8_t *data, size_t length)
{
 8016b30:	b480      	push	{r7}
 8016b32:	b087      	sub	sp, #28
 8016b34:	af00      	add	r7, sp, #0
 8016b36:	6078      	str	r0, [r7, #4]
 8016b38:	6039      	str	r1, [r7, #0]
	uint16_t crc = KYOSAN_CRC_INIT_VAL;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	82fb      	strh	r3, [r7, #22]

	for (size_t i = 0; i < length; i++)
 8016b3e:	2300      	movs	r3, #0
 8016b40:	613b      	str	r3, [r7, #16]
 8016b42:	e026      	b.n	8016b92 <Calc_Kysoan_CRC+0x62>
	{
		crc ^= (uint16_t)data[i] << 8; // XOR with next byte shifted to left
 8016b44:	687a      	ldr	r2, [r7, #4]
 8016b46:	693b      	ldr	r3, [r7, #16]
 8016b48:	4413      	add	r3, r2
 8016b4a:	781b      	ldrb	r3, [r3, #0]
 8016b4c:	021b      	lsls	r3, r3, #8
 8016b4e:	b21a      	sxth	r2, r3
 8016b50:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016b54:	4053      	eors	r3, r2
 8016b56:	b21b      	sxth	r3, r3
 8016b58:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8016b5a:	2300      	movs	r3, #0
 8016b5c:	60fb      	str	r3, [r7, #12]
 8016b5e:	e012      	b.n	8016b86 <Calc_Kysoan_CRC+0x56>
		{
			if (crc & 0x8000)
 8016b60:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	da08      	bge.n	8016b7a <Calc_Kysoan_CRC+0x4a>
			{
				crc = (crc << 1) ^ KYOSAN_CRC_POLYNOMIAL;
 8016b68:	8afb      	ldrh	r3, [r7, #22]
 8016b6a:	005b      	lsls	r3, r3, #1
 8016b6c:	b21a      	sxth	r2, r3
 8016b6e:	f241 0321 	movw	r3, #4129	; 0x1021
 8016b72:	4053      	eors	r3, r2
 8016b74:	b21b      	sxth	r3, r3
 8016b76:	82fb      	strh	r3, [r7, #22]
 8016b78:	e002      	b.n	8016b80 <Calc_Kysoan_CRC+0x50>
			}
			else
			{
				crc <<= 1;
 8016b7a:	8afb      	ldrh	r3, [r7, #22]
 8016b7c:	005b      	lsls	r3, r3, #1
 8016b7e:	82fb      	strh	r3, [r7, #22]
		for (int j = 0; j < 8; j++)
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	3301      	adds	r3, #1
 8016b84:	60fb      	str	r3, [r7, #12]
 8016b86:	68fb      	ldr	r3, [r7, #12]
 8016b88:	2b07      	cmp	r3, #7
 8016b8a:	dde9      	ble.n	8016b60 <Calc_Kysoan_CRC+0x30>
	for (size_t i = 0; i < length; i++)
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	3301      	adds	r3, #1
 8016b90:	613b      	str	r3, [r7, #16]
 8016b92:	693a      	ldr	r2, [r7, #16]
 8016b94:	683b      	ldr	r3, [r7, #0]
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d3d4      	bcc.n	8016b44 <Calc_Kysoan_CRC+0x14>
			}
		}
	}
	return crc;
 8016b9a:	8afb      	ldrh	r3, [r7, #22]
}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	371c      	adds	r7, #28
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr

08016ba8 <Check_forKyosanCMD>:
	}
}


void Check_forKyosanCMD(void)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b09a      	sub	sp, #104	; 0x68
 8016bac:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8016bae:	2300      	movs	r3, #0
 8016bb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8016bba:	2300      	movs	r3, #0
 8016bbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	uint8_t Buffer[100] = {0,};
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	603b      	str	r3, [r7, #0]
 8016bc4:	1d3b      	adds	r3, r7, #4
 8016bc6:	2260      	movs	r2, #96	; 0x60
 8016bc8:	2100      	movs	r1, #0
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f00f f910 	bl	8025df0 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8016bd0:	4b90      	ldr	r3, [pc, #576]	; (8016e14 <Check_forKyosanCMD+0x26c>)
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4618      	mov	r0, r3
 8016bd6:	f7f9 fc0f 	bl	80103f8 <HAL_Elaps_Ticks>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	2b09      	cmp	r3, #9
 8016bde:	f240 8114 	bls.w	8016e0a <Check_forKyosanCMD+0x262>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8016be2:	e010      	b.n	8016c06 <Check_forKyosanCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8016be4:	2000      	movs	r0, #0
 8016be6:	f001 ffad 	bl	8018b44 <Com_Get_Byte>
 8016bea:	4603      	mov	r3, r0
 8016bec:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
			Buffer[Index++] = Byte;
 8016bf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016bf4:	1c5a      	adds	r2, r3, #1
 8016bf6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8016bfa:	3368      	adds	r3, #104	; 0x68
 8016bfc:	443b      	add	r3, r7
 8016bfe:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
 8016c02:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8016c06:	2000      	movs	r0, #0
 8016c08:	f001 ff5c 	bl	8018ac4 <Com_DataReady>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d1e8      	bne.n	8016be4 <Check_forKyosanCMD+0x3c>
		}
		if(Index>0)
 8016c12:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	f000 80ee 	beq.w	8016df8 <Check_forKyosanCMD+0x250>
		{
			Buffer[Index] = 0;
 8016c1c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c20:	3368      	adds	r3, #104	; 0x68
 8016c22:	443b      	add	r3, r7
 8016c24:	2200      	movs	r2, #0
 8016c26:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8016c2a:	463b      	mov	r3, r7
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	487a      	ldr	r0, [pc, #488]	; (8016e18 <Check_forKyosanCMD+0x270>)
 8016c30:	f00f f9c6 	bl	8025fc0 <iprintf>
			switch(Is_KyosanCommand_Valid(Buffer,Index))
 8016c34:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8016c38:	463b      	mov	r3, r7
 8016c3a:	4611      	mov	r1, r2
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 fa25 	bl	801708c <Is_KyosanCommand_Valid>
 8016c42:	4603      	mov	r3, r0
 8016c44:	2b07      	cmp	r3, #7
 8016c46:	f200 80bb 	bhi.w	8016dc0 <Check_forKyosanCMD+0x218>
 8016c4a:	a201      	add	r2, pc, #4	; (adr r2, 8016c50 <Check_forKyosanCMD+0xa8>)
 8016c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c50:	08016c71 	.word	0x08016c71
 8016c54:	08016c7f 	.word	0x08016c7f
 8016c58:	08016ce3 	.word	0x08016ce3
 8016c5c:	08016d05 	.word	0x08016d05
 8016c60:	08016d2d 	.word	0x08016d2d
 8016c64:	08016d55 	.word	0x08016d55
 8016c68:	08016d7d 	.word	0x08016d7d
 8016c6c:	08016da5 	.word	0x08016da5
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8016c70:	4b6a      	ldr	r3, [pc, #424]	; (8016e1c <Check_forKyosanCMD+0x274>)
 8016c72:	2201      	movs	r2, #1
 8016c74:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8016c76:	486a      	ldr	r0, [pc, #424]	; (8016e20 <Check_forKyosanCMD+0x278>)
 8016c78:	f00f fa3e 	bl	80260f8 <puts>
				break;
 8016c7c:	e0bc      	b.n	8016df8 <Check_forKyosanCMD+0x250>
			case ONE:
				printf("Received \"%s\":%u\n",KyosanCommands_List[ONE],(Buffer[Index-1])-'0');
 8016c7e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c82:	3b01      	subs	r3, #1
 8016c84:	3368      	adds	r3, #104	; 0x68
 8016c86:	443b      	add	r3, r7
 8016c88:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016c8c:	3b30      	subs	r3, #48	; 0x30
 8016c8e:	461a      	mov	r2, r3
 8016c90:	4964      	ldr	r1, [pc, #400]	; (8016e24 <Check_forKyosanCMD+0x27c>)
 8016c92:	4865      	ldr	r0, [pc, #404]	; (8016e28 <Check_forKyosanCMD+0x280>)
 8016c94:	f00f f994 	bl	8025fc0 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8016c98:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016c9c:	3b01      	subs	r3, #1
 8016c9e:	3368      	adds	r3, #104	; 0x68
 8016ca0:	443b      	add	r3, r7
 8016ca2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016ca6:	2b2f      	cmp	r3, #47	; 0x2f
 8016ca8:	d914      	bls.n	8016cd4 <Check_forKyosanCMD+0x12c>
 8016caa:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016cae:	3b01      	subs	r3, #1
 8016cb0:	3368      	adds	r3, #104	; 0x68
 8016cb2:	443b      	add	r3, r7
 8016cb4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016cb8:	2b31      	cmp	r3, #49	; 0x31
 8016cba:	d80b      	bhi.n	8016cd4 <Check_forKyosanCMD+0x12c>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8016cbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8016cc0:	3b01      	subs	r3, #1
 8016cc2:	3368      	adds	r3, #104	; 0x68
 8016cc4:	443b      	add	r3, r7
 8016cc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8016cca:	3b30      	subs	r3, #48	; 0x30
 8016ccc:	b2da      	uxtb	r2, r3
 8016cce:	4b57      	ldr	r3, [pc, #348]	; (8016e2c <Check_forKyosanCMD+0x284>)
 8016cd0:	701a      	strb	r2, [r3, #0]
 8016cd2:	e002      	b.n	8016cda <Check_forKyosanCMD+0x132>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8016cd4:	4856      	ldr	r0, [pc, #344]	; (8016e30 <Check_forKyosanCMD+0x288>)
 8016cd6:	f00f fa0f 	bl	80260f8 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8016cda:	2301      	movs	r3, #1
 8016cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016ce0:	e08a      	b.n	8016df8 <Check_forKyosanCMD+0x250>

			case TWO:
				printf("Received %s\n",KyosanCommands_List[TWO]);
 8016ce2:	4954      	ldr	r1, [pc, #336]	; (8016e34 <Check_forKyosanCMD+0x28c>)
 8016ce4:	4854      	ldr	r0, [pc, #336]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016ce6:	f00f f96b 	bl	8025fc0 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_POS\n");
 8016cea:	4854      	ldr	r0, [pc, #336]	; (8016e3c <Check_forKyosanCMD+0x294>)
 8016cec:	f00f fa04 	bl	80260f8 <puts>
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016cf0:	4b53      	ldr	r3, [pc, #332]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	f043 0301 	orr.w	r3, r3, #1
 8016cf8:	4a51      	ldr	r2, [pc, #324]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016cfa:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016cfc:	2301      	movs	r3, #1
 8016cfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016d02:	e079      	b.n	8016df8 <Check_forKyosanCMD+0x250>

			case THREE:
				printf("Received %s\n",KyosanCommands_List[THREE]);
 8016d04:	494f      	ldr	r1, [pc, #316]	; (8016e44 <Check_forKyosanCMD+0x29c>)
 8016d06:	484c      	ldr	r0, [pc, #304]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016d08:	f00f f95a 	bl	8025fc0 <iprintf>
				printf("CRC_FAIL_CONTROL_DATA_NEG\n");
 8016d0c:	484e      	ldr	r0, [pc, #312]	; (8016e48 <Check_forKyosanCMD+0x2a0>)
 8016d0e:	f00f f9f3 	bl	80260f8 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016d12:	4b4b      	ldr	r3, [pc, #300]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d14:	2200      	movs	r2, #0
 8016d16:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_CONTROL_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016d18:	4b49      	ldr	r3, [pc, #292]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	f043 0302 	orr.w	r3, r3, #2
 8016d20:	4a47      	ldr	r2, [pc, #284]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d22:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016d24:	2301      	movs	r3, #1
 8016d26:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016d2a:	e065      	b.n	8016df8 <Check_forKyosanCMD+0x250>

			case FOUR:
				printf("Received %s\n",KyosanCommands_List[FOUR]);
 8016d2c:	4947      	ldr	r1, [pc, #284]	; (8016e4c <Check_forKyosanCMD+0x2a4>)
 8016d2e:	4842      	ldr	r0, [pc, #264]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016d30:	f00f f946 	bl	8025fc0 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_POS\n");
 8016d34:	4846      	ldr	r0, [pc, #280]	; (8016e50 <Check_forKyosanCMD+0x2a8>)
 8016d36:	f00f f9df 	bl	80260f8 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016d3a:	4b41      	ldr	r3, [pc, #260]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_POS,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016d40:	4b3f      	ldr	r3, [pc, #252]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d42:	681b      	ldr	r3, [r3, #0]
 8016d44:	f043 0304 	orr.w	r3, r3, #4
 8016d48:	4a3d      	ldr	r2, [pc, #244]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d4a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016d52:	e051      	b.n	8016df8 <Check_forKyosanCMD+0x250>

			case FIVE:
				printf("Received %s\n",KyosanCommands_List[FIVE]);
 8016d54:	493f      	ldr	r1, [pc, #252]	; (8016e54 <Check_forKyosanCMD+0x2ac>)
 8016d56:	4838      	ldr	r0, [pc, #224]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016d58:	f00f f932 	bl	8025fc0 <iprintf>
				printf("CRC_FAIL_POLLING_DATA_NEG\n");
 8016d5c:	483e      	ldr	r0, [pc, #248]	; (8016e58 <Check_forKyosanCMD+0x2b0>)
 8016d5e:	f00f f9cb 	bl	80260f8 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016d62:	4b37      	ldr	r3, [pc, #220]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d64:	2200      	movs	r2, #0
 8016d66:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(CRC_FAIL_POLLING_DATA_NEG,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016d68:	4b35      	ldr	r3, [pc, #212]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d6a:	681b      	ldr	r3, [r3, #0]
 8016d6c:	f043 0308 	orr.w	r3, r3, #8
 8016d70:	4a33      	ldr	r2, [pc, #204]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d72:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016d74:	2301      	movs	r3, #1
 8016d76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016d7a:	e03d      	b.n	8016df8 <Check_forKyosanCMD+0x250>

			case SIX:
				printf("Received %s\n",KyosanCommands_List[SIX]);
 8016d7c:	4937      	ldr	r1, [pc, #220]	; (8016e5c <Check_forKyosanCMD+0x2b4>)
 8016d7e:	482e      	ldr	r0, [pc, #184]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016d80:	f00f f91e 	bl	8025fc0 <iprintf>
				printf("COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA\n");
 8016d84:	4836      	ldr	r0, [pc, #216]	; (8016e60 <Check_forKyosanCMD+0x2b8>)
 8016d86:	f00f f9b7 	bl	80260f8 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016d8a:	4b2d      	ldr	r3, [pc, #180]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d8c:	2200      	movs	r2, #0
 8016d8e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA,KyosanFaultInjection_st.FAULT_INJECTION_BITS);
 8016d90:	4b2b      	ldr	r3, [pc, #172]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d92:	681b      	ldr	r3, [r3, #0]
 8016d94:	f043 0310 	orr.w	r3, r3, #16
 8016d98:	4a29      	ldr	r2, [pc, #164]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016d9a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 8016d9c:	2301      	movs	r3, #1
 8016d9e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016da2:	e029      	b.n	8016df8 <Check_forKyosanCMD+0x250>
			case SEVEN:
				printf("Received %s\n",KyosanCommands_List[SEVEN]);
 8016da4:	492f      	ldr	r1, [pc, #188]	; (8016e64 <Check_forKyosanCMD+0x2bc>)
 8016da6:	4824      	ldr	r0, [pc, #144]	; (8016e38 <Check_forKyosanCMD+0x290>)
 8016da8:	f00f f90a 	bl	8025fc0 <iprintf>
				printf("CLEAR ALL\n");
 8016dac:	482e      	ldr	r0, [pc, #184]	; (8016e68 <Check_forKyosanCMD+0x2c0>)
 8016dae:	f00f f9a3 	bl	80260f8 <puts>
				KyosanFaultInjection_st.FAULT_INJECTION_BITS = 0;
 8016db2:	4b23      	ldr	r3, [pc, #140]	; (8016e40 <Check_forKyosanCMD+0x298>)
 8016db4:	2200      	movs	r2, #0
 8016db6:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 8016db8:	2301      	movs	r3, #1
 8016dba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8016dbe:	e01b      	b.n	8016df8 <Check_forKyosanCMD+0x250>
			default:
				printf("Please Send Valid Command\n");
 8016dc0:	481b      	ldr	r0, [pc, #108]	; (8016e30 <Check_forKyosanCMD+0x288>)
 8016dc2:	f00f f999 	bl	80260f8 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8016dc6:	2300      	movs	r3, #0
 8016dc8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016dcc:	e00e      	b.n	8016dec <Check_forKyosanCMD+0x244>
				{
					printf("%s\n",KyosanCommands_List[i]);
 8016dce:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016dd2:	2232      	movs	r2, #50	; 0x32
 8016dd4:	fb02 f303 	mul.w	r3, r2, r3
 8016dd8:	4a24      	ldr	r2, [pc, #144]	; (8016e6c <Check_forKyosanCMD+0x2c4>)
 8016dda:	4413      	add	r3, r2
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f00f f98b 	bl	80260f8 <puts>
				for(uint8_t i=0;i<KyosanCommands_Count;++i)
 8016de2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8016de6:	3301      	adds	r3, #1
 8016de8:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8016dec:	4b20      	ldr	r3, [pc, #128]	; (8016e70 <Check_forKyosanCMD+0x2c8>)
 8016dee:	781b      	ldrb	r3, [r3, #0]
 8016df0:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8016df4:	429a      	cmp	r2, r3
 8016df6:	d3ea      	bcc.n	8016dce <Check_forKyosanCMD+0x226>
				}
			}
		}

		if(IS_COMMAND_RECEIVED == YES)
 8016df8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8016dfc:	2b01      	cmp	r3, #1
 8016dfe:	d105      	bne.n	8016e0c <Check_forKyosanCMD+0x264>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8016e00:	f240 2005 	movw	r0, #517	; 0x205
 8016e04:	f7fa f8ac 	bl	8010f60 <TransmitCanPkt>
 8016e08:	e000      	b.n	8016e0c <Check_forKyosanCMD+0x264>
		return;
 8016e0a:	bf00      	nop
		}
	}
}
 8016e0c:	3768      	adds	r7, #104	; 0x68
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	2000bfdc 	.word	0x2000bfdc
 8016e18:	0802b0f4 	.word	0x0802b0f4
 8016e1c:	20000bba 	.word	0x20000bba
 8016e20:	0802b10c 	.word	0x0802b10c
 8016e24:	2000b57e 	.word	0x2000b57e
 8016e28:	0802b14c 	.word	0x0802b14c
 8016e2c:	20000bbb 	.word	0x20000bbb
 8016e30:	0802b160 	.word	0x0802b160
 8016e34:	2000b5b0 	.word	0x2000b5b0
 8016e38:	0802b17c 	.word	0x0802b17c
 8016e3c:	0802b18c 	.word	0x0802b18c
 8016e40:	2000b424 	.word	0x2000b424
 8016e44:	2000b5e2 	.word	0x2000b5e2
 8016e48:	0802b1a8 	.word	0x0802b1a8
 8016e4c:	2000b614 	.word	0x2000b614
 8016e50:	0802b1c4 	.word	0x0802b1c4
 8016e54:	2000b646 	.word	0x2000b646
 8016e58:	0802b1e0 	.word	0x0802b1e0
 8016e5c:	2000b678 	.word	0x2000b678
 8016e60:	0802b1fc 	.word	0x0802b1fc
 8016e64:	2000b6aa 	.word	0x2000b6aa
 8016e68:	0802b228 	.word	0x0802b228
 8016e6c:	2000b54c 	.word	0x2000b54c
 8016e70:	2000b934 	.word	0x2000b934

08016e74 <Update_KyosanCommands>:


void Update_KyosanCommands(void)
{
 8016e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016e76:	b083      	sub	sp, #12
 8016e78:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 8016e7a:	2300      	movs	r3, #0
 8016e7c:	71fb      	strb	r3, [r7, #7]

	KyosanCommands_List[CmdCnt][0] = 0X24;
 8016e7e:	79fb      	ldrb	r3, [r7, #7]
 8016e80:	4a78      	ldr	r2, [pc, #480]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016e82:	2132      	movs	r1, #50	; 0x32
 8016e84:	fb01 f303 	mul.w	r3, r1, r3
 8016e88:	4413      	add	r3, r2
 8016e8a:	2224      	movs	r2, #36	; 0x24
 8016e8c:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][1] = 0X01;
 8016e8e:	79fb      	ldrb	r3, [r7, #7]
 8016e90:	4a74      	ldr	r2, [pc, #464]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016e92:	2132      	movs	r1, #50	; 0x32
 8016e94:	fb01 f303 	mul.w	r3, r1, r3
 8016e98:	4413      	add	r3, r2
 8016e9a:	3301      	adds	r3, #1
 8016e9c:	2201      	movs	r2, #1
 8016e9e:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][2] = 0X30;
 8016ea0:	79fb      	ldrb	r3, [r7, #7]
 8016ea2:	4a70      	ldr	r2, [pc, #448]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016ea4:	2132      	movs	r1, #50	; 0x32
 8016ea6:	fb01 f303 	mul.w	r3, r1, r3
 8016eaa:	4413      	add	r3, r2
 8016eac:	3302      	adds	r3, #2
 8016eae:	2230      	movs	r2, #48	; 0x30
 8016eb0:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][3] = 0X40;
 8016eb2:	79fb      	ldrb	r3, [r7, #7]
 8016eb4:	4a6b      	ldr	r2, [pc, #428]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016eb6:	2132      	movs	r1, #50	; 0x32
 8016eb8:	fb01 f303 	mul.w	r3, r1, r3
 8016ebc:	4413      	add	r3, r2
 8016ebe:	3303      	adds	r3, #3
 8016ec0:	2240      	movs	r2, #64	; 0x40
 8016ec2:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][4] = 0XC0;
 8016ec4:	79fb      	ldrb	r3, [r7, #7]
 8016ec6:	4a67      	ldr	r2, [pc, #412]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016ec8:	2132      	movs	r1, #50	; 0x32
 8016eca:	fb01 f303 	mul.w	r3, r1, r3
 8016ece:	4413      	add	r3, r2
 8016ed0:	3304      	adds	r3, #4
 8016ed2:	22c0      	movs	r2, #192	; 0xc0
 8016ed4:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][5] = 0X4E;
 8016ed6:	79fb      	ldrb	r3, [r7, #7]
 8016ed8:	4a62      	ldr	r2, [pc, #392]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016eda:	2132      	movs	r1, #50	; 0x32
 8016edc:	fb01 f303 	mul.w	r3, r1, r3
 8016ee0:	4413      	add	r3, r2
 8016ee2:	3305      	adds	r3, #5
 8016ee4:	224e      	movs	r2, #78	; 0x4e
 8016ee6:	701a      	strb	r2, [r3, #0]
	KyosanCommands_List[CmdCnt][6] = 0X26;
 8016ee8:	79fb      	ldrb	r3, [r7, #7]
 8016eea:	4a5e      	ldr	r2, [pc, #376]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016eec:	2132      	movs	r1, #50	; 0x32
 8016eee:	fb01 f303 	mul.w	r3, r1, r3
 8016ef2:	4413      	add	r3, r2
 8016ef4:	3306      	adds	r3, #6
 8016ef6:	2226      	movs	r2, #38	; 0x26
 8016ef8:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 8016efa:	79fb      	ldrb	r3, [r7, #7]
 8016efc:	3301      	adds	r3, #1
 8016efe:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8016f00:	79fb      	ldrb	r3, [r7, #7]
 8016f02:	1c5a      	adds	r2, r3, #1
 8016f04:	71fa      	strb	r2, [r7, #7]
 8016f06:	461a      	mov	r2, r3
 8016f08:	2332      	movs	r3, #50	; 0x32
 8016f0a:	fb02 f303 	mul.w	r3, r2, r3
 8016f0e:	4a55      	ldr	r2, [pc, #340]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016f10:	4413      	add	r3, r2
 8016f12:	4955      	ldr	r1, [pc, #340]	; (8017068 <Update_KyosanCommands+0x1f4>)
 8016f14:	461a      	mov	r2, r3
 8016f16:	460b      	mov	r3, r1
 8016f18:	cb03      	ldmia	r3!, {r0, r1}
 8016f1a:	6010      	str	r0, [r2, #0]
 8016f1c:	6051      	str	r1, [r2, #4]
 8016f1e:	8819      	ldrh	r1, [r3, #0]
 8016f20:	789b      	ldrb	r3, [r3, #2]
 8016f22:	8111      	strh	r1, [r2, #8]
 8016f24:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_POS");
 8016f26:	79fb      	ldrb	r3, [r7, #7]
 8016f28:	1c5a      	adds	r2, r3, #1
 8016f2a:	71fa      	strb	r2, [r7, #7]
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	2332      	movs	r3, #50	; 0x32
 8016f30:	fb02 f303 	mul.w	r3, r2, r3
 8016f34:	4a4b      	ldr	r2, [pc, #300]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016f36:	4413      	add	r3, r2
 8016f38:	4a4c      	ldr	r2, [pc, #304]	; (801706c <Update_KyosanCommands+0x1f8>)
 8016f3a:	461d      	mov	r5, r3
 8016f3c:	4614      	mov	r4, r2
 8016f3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f40:	6028      	str	r0, [r5, #0]
 8016f42:	6069      	str	r1, [r5, #4]
 8016f44:	60aa      	str	r2, [r5, #8]
 8016f46:	60eb      	str	r3, [r5, #12]
 8016f48:	cc03      	ldmia	r4!, {r0, r1}
 8016f4a:	6128      	str	r0, [r5, #16]
 8016f4c:	6169      	str	r1, [r5, #20]
 8016f4e:	8823      	ldrh	r3, [r4, #0]
 8016f50:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_CONTROL_DATA_NEG");
 8016f52:	79fb      	ldrb	r3, [r7, #7]
 8016f54:	1c5a      	adds	r2, r3, #1
 8016f56:	71fa      	strb	r2, [r7, #7]
 8016f58:	461a      	mov	r2, r3
 8016f5a:	2332      	movs	r3, #50	; 0x32
 8016f5c:	fb02 f303 	mul.w	r3, r2, r3
 8016f60:	4a40      	ldr	r2, [pc, #256]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016f62:	4413      	add	r3, r2
 8016f64:	4a42      	ldr	r2, [pc, #264]	; (8017070 <Update_KyosanCommands+0x1fc>)
 8016f66:	461d      	mov	r5, r3
 8016f68:	4614      	mov	r4, r2
 8016f6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f6c:	6028      	str	r0, [r5, #0]
 8016f6e:	6069      	str	r1, [r5, #4]
 8016f70:	60aa      	str	r2, [r5, #8]
 8016f72:	60eb      	str	r3, [r5, #12]
 8016f74:	cc03      	ldmia	r4!, {r0, r1}
 8016f76:	6128      	str	r0, [r5, #16]
 8016f78:	6169      	str	r1, [r5, #20]
 8016f7a:	8823      	ldrh	r3, [r4, #0]
 8016f7c:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_POS");
 8016f7e:	79fb      	ldrb	r3, [r7, #7]
 8016f80:	1c5a      	adds	r2, r3, #1
 8016f82:	71fa      	strb	r2, [r7, #7]
 8016f84:	461a      	mov	r2, r3
 8016f86:	2332      	movs	r3, #50	; 0x32
 8016f88:	fb02 f303 	mul.w	r3, r2, r3
 8016f8c:	4a35      	ldr	r2, [pc, #212]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016f8e:	4413      	add	r3, r2
 8016f90:	4a38      	ldr	r2, [pc, #224]	; (8017074 <Update_KyosanCommands+0x200>)
 8016f92:	461d      	mov	r5, r3
 8016f94:	4614      	mov	r4, r2
 8016f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016f98:	6028      	str	r0, [r5, #0]
 8016f9a:	6069      	str	r1, [r5, #4]
 8016f9c:	60aa      	str	r2, [r5, #8]
 8016f9e:	60eb      	str	r3, [r5, #12]
 8016fa0:	cc03      	ldmia	r4!, {r0, r1}
 8016fa2:	6128      	str	r0, [r5, #16]
 8016fa4:	6169      	str	r1, [r5, #20]
 8016fa6:	8823      	ldrh	r3, [r4, #0]
 8016fa8:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CRC_FAIL_POLLING_DATA_NEG");
 8016faa:	79fb      	ldrb	r3, [r7, #7]
 8016fac:	1c5a      	adds	r2, r3, #1
 8016fae:	71fa      	strb	r2, [r7, #7]
 8016fb0:	461a      	mov	r2, r3
 8016fb2:	2332      	movs	r3, #50	; 0x32
 8016fb4:	fb02 f303 	mul.w	r3, r2, r3
 8016fb8:	4a2a      	ldr	r2, [pc, #168]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016fba:	4413      	add	r3, r2
 8016fbc:	4a2e      	ldr	r2, [pc, #184]	; (8017078 <Update_KyosanCommands+0x204>)
 8016fbe:	461d      	mov	r5, r3
 8016fc0:	4614      	mov	r4, r2
 8016fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016fc4:	6028      	str	r0, [r5, #0]
 8016fc6:	6069      	str	r1, [r5, #4]
 8016fc8:	60aa      	str	r2, [r5, #8]
 8016fca:	60eb      	str	r3, [r5, #12]
 8016fcc:	cc03      	ldmia	r4!, {r0, r1}
 8016fce:	6128      	str	r0, [r5, #16]
 8016fd0:	6169      	str	r1, [r5, #20]
 8016fd2:	8823      	ldrh	r3, [r4, #0]
 8016fd4:	832b      	strh	r3, [r5, #24]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"COMPLIMENT_DATA_MISMATCH_FOR_CONTROL_DATA");
 8016fd6:	79fb      	ldrb	r3, [r7, #7]
 8016fd8:	1c5a      	adds	r2, r3, #1
 8016fda:	71fa      	strb	r2, [r7, #7]
 8016fdc:	461a      	mov	r2, r3
 8016fde:	2332      	movs	r3, #50	; 0x32
 8016fe0:	fb02 f303 	mul.w	r3, r2, r3
 8016fe4:	4a1f      	ldr	r2, [pc, #124]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8016fe6:	4413      	add	r3, r2
 8016fe8:	4a24      	ldr	r2, [pc, #144]	; (801707c <Update_KyosanCommands+0x208>)
 8016fea:	4614      	mov	r4, r2
 8016fec:	469c      	mov	ip, r3
 8016fee:	f104 0e20 	add.w	lr, r4, #32
 8016ff2:	4665      	mov	r5, ip
 8016ff4:	4626      	mov	r6, r4
 8016ff6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8016ff8:	6028      	str	r0, [r5, #0]
 8016ffa:	6069      	str	r1, [r5, #4]
 8016ffc:	60aa      	str	r2, [r5, #8]
 8016ffe:	60eb      	str	r3, [r5, #12]
 8017000:	3410      	adds	r4, #16
 8017002:	f10c 0c10 	add.w	ip, ip, #16
 8017006:	4574      	cmp	r4, lr
 8017008:	d1f3      	bne.n	8016ff2 <Update_KyosanCommands+0x17e>
 801700a:	4662      	mov	r2, ip
 801700c:	4623      	mov	r3, r4
 801700e:	cb03      	ldmia	r3!, {r0, r1}
 8017010:	6010      	str	r0, [r2, #0]
 8017012:	6051      	str	r1, [r2, #4]
 8017014:	881b      	ldrh	r3, [r3, #0]
 8017016:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8017018:	79fb      	ldrb	r3, [r7, #7]
 801701a:	1c5a      	adds	r2, r3, #1
 801701c:	71fa      	strb	r2, [r7, #7]
 801701e:	461a      	mov	r2, r3
 8017020:	2332      	movs	r3, #50	; 0x32
 8017022:	fb02 f303 	mul.w	r3, r2, r3
 8017026:	4a0f      	ldr	r2, [pc, #60]	; (8017064 <Update_KyosanCommands+0x1f0>)
 8017028:	4413      	add	r3, r2
 801702a:	4915      	ldr	r1, [pc, #84]	; (8017080 <Update_KyosanCommands+0x20c>)
 801702c:	461a      	mov	r2, r3
 801702e:	460b      	mov	r3, r1
 8017030:	cb03      	ldmia	r3!, {r0, r1}
 8017032:	6010      	str	r0, [r2, #0]
 8017034:	6051      	str	r1, [r2, #4]
 8017036:	881b      	ldrh	r3, [r3, #0]
 8017038:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)KyosanCommands_List[CmdCnt++], (const char *)"HELP");
 801703a:	79fb      	ldrb	r3, [r7, #7]
 801703c:	1c5a      	adds	r2, r3, #1
 801703e:	71fa      	strb	r2, [r7, #7]
 8017040:	461a      	mov	r2, r3
 8017042:	2332      	movs	r3, #50	; 0x32
 8017044:	fb02 f303 	mul.w	r3, r2, r3
 8017048:	4a06      	ldr	r2, [pc, #24]	; (8017064 <Update_KyosanCommands+0x1f0>)
 801704a:	4413      	add	r3, r2
 801704c:	4a0d      	ldr	r2, [pc, #52]	; (8017084 <Update_KyosanCommands+0x210>)
 801704e:	6810      	ldr	r0, [r2, #0]
 8017050:	6018      	str	r0, [r3, #0]
 8017052:	7912      	ldrb	r2, [r2, #4]
 8017054:	711a      	strb	r2, [r3, #4]
	KyosanCommands_Count =  CmdCnt;
 8017056:	4a0c      	ldr	r2, [pc, #48]	; (8017088 <Update_KyosanCommands+0x214>)
 8017058:	79fb      	ldrb	r3, [r7, #7]
 801705a:	7013      	strb	r3, [r2, #0]
}
 801705c:	bf00      	nop
 801705e:	370c      	adds	r7, #12
 8017060:	46bd      	mov	sp, r7
 8017062:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017064:	2000b54c 	.word	0x2000b54c
 8017068:	0802b234 	.word	0x0802b234
 801706c:	0802b18c 	.word	0x0802b18c
 8017070:	0802b1a8 	.word	0x0802b1a8
 8017074:	0802b1c4 	.word	0x0802b1c4
 8017078:	0802b1e0 	.word	0x0802b1e0
 801707c:	0802b1fc 	.word	0x0802b1fc
 8017080:	0802b240 	.word	0x0802b240
 8017084:	0802b24c 	.word	0x0802b24c
 8017088:	2000b934 	.word	0x2000b934

0801708c <Is_KyosanCommand_Valid>:

uint8_t Is_KyosanCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 801708c:	b590      	push	{r4, r7, lr}
 801708e:	b085      	sub	sp, #20
 8017090:	af00      	add	r7, sp, #0
 8017092:	6078      	str	r0, [r7, #4]
 8017094:	460b      	mov	r3, r1
 8017096:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 8017098:	2300      	movs	r3, #0
 801709a:	73fb      	strb	r3, [r7, #15]
 801709c:	e01c      	b.n	80170d8 <Is_KyosanCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)KyosanCommands_List[Traverser]) != NULL)
		if(memcmp(Buffer,KyosanCommands_List[Traverser],strlen((char *)KyosanCommands_List[Traverser])) == 0)
 801709e:	7bfb      	ldrb	r3, [r7, #15]
 80170a0:	2232      	movs	r2, #50	; 0x32
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	4a11      	ldr	r2, [pc, #68]	; (80170ec <Is_KyosanCommand_Valid+0x60>)
 80170a8:	189c      	adds	r4, r3, r2
 80170aa:	7bfb      	ldrb	r3, [r7, #15]
 80170ac:	2232      	movs	r2, #50	; 0x32
 80170ae:	fb02 f303 	mul.w	r3, r2, r3
 80170b2:	4a0e      	ldr	r2, [pc, #56]	; (80170ec <Is_KyosanCommand_Valid+0x60>)
 80170b4:	4413      	add	r3, r2
 80170b6:	4618      	mov	r0, r3
 80170b8:	f7e9 f8cc 	bl	8000254 <strlen>
 80170bc:	4603      	mov	r3, r0
 80170be:	461a      	mov	r2, r3
 80170c0:	4621      	mov	r1, r4
 80170c2:	6878      	ldr	r0, [r7, #4]
 80170c4:	f00e fe5c 	bl	8025d80 <memcmp>
 80170c8:	4603      	mov	r3, r0
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d101      	bne.n	80170d2 <Is_KyosanCommand_Valid+0x46>
		{
			return Traverser;
 80170ce:	7bfb      	ldrb	r3, [r7, #15]
 80170d0:	e008      	b.n	80170e4 <Is_KyosanCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < KyosanCommands_Count; ++Traverser)
 80170d2:	7bfb      	ldrb	r3, [r7, #15]
 80170d4:	3301      	adds	r3, #1
 80170d6:	73fb      	strb	r3, [r7, #15]
 80170d8:	4b05      	ldr	r3, [pc, #20]	; (80170f0 <Is_KyosanCommand_Valid+0x64>)
 80170da:	781b      	ldrb	r3, [r3, #0]
 80170dc:	7bfa      	ldrb	r2, [r7, #15]
 80170de:	429a      	cmp	r2, r3
 80170e0:	d3dd      	bcc.n	801709e <Is_KyosanCommand_Valid+0x12>
		}
	}
	return 255;
 80170e2:	23ff      	movs	r3, #255	; 0xff
}
 80170e4:	4618      	mov	r0, r3
 80170e6:	3714      	adds	r7, #20
 80170e8:	46bd      	mov	sp, r7
 80170ea:	bd90      	pop	{r4, r7, pc}
 80170ec:	2000b54c 	.word	0x2000b54c
 80170f0:	2000b934 	.word	0x2000b934

080170f4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80170f4:	b480      	push	{r7}
 80170f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80170f8:	f3bf 8f4f 	dsb	sy
}
 80170fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80170fe:	f3bf 8f6f 	isb	sy
}
 8017102:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8017104:	4b0d      	ldr	r3, [pc, #52]	; (801713c <SCB_EnableICache+0x48>)
 8017106:	2200      	movs	r2, #0
 8017108:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801710c:	f3bf 8f4f 	dsb	sy
}
 8017110:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017112:	f3bf 8f6f 	isb	sy
}
 8017116:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8017118:	4b08      	ldr	r3, [pc, #32]	; (801713c <SCB_EnableICache+0x48>)
 801711a:	695b      	ldr	r3, [r3, #20]
 801711c:	4a07      	ldr	r2, [pc, #28]	; (801713c <SCB_EnableICache+0x48>)
 801711e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8017122:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8017124:	f3bf 8f4f 	dsb	sy
}
 8017128:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801712a:	f3bf 8f6f 	isb	sy
}
 801712e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8017130:	bf00      	nop
 8017132:	46bd      	mov	sp, r7
 8017134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017138:	4770      	bx	lr
 801713a:	bf00      	nop
 801713c:	e000ed00 	.word	0xe000ed00

08017140 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8017140:	b480      	push	{r7}
 8017142:	b085      	sub	sp, #20
 8017144:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8017146:	4b1f      	ldr	r3, [pc, #124]	; (80171c4 <SCB_EnableDCache+0x84>)
 8017148:	2200      	movs	r2, #0
 801714a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 801714e:	f3bf 8f4f 	dsb	sy
}
 8017152:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8017154:	4b1b      	ldr	r3, [pc, #108]	; (80171c4 <SCB_EnableDCache+0x84>)
 8017156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801715a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 801715c:	687b      	ldr	r3, [r7, #4]
 801715e:	0b5b      	lsrs	r3, r3, #13
 8017160:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017164:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	08db      	lsrs	r3, r3, #3
 801716a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801716e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8017170:	68fb      	ldr	r3, [r7, #12]
 8017172:	015a      	lsls	r2, r3, #5
 8017174:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8017178:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801717a:	68ba      	ldr	r2, [r7, #8]
 801717c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 801717e:	4911      	ldr	r1, [pc, #68]	; (80171c4 <SCB_EnableDCache+0x84>)
 8017180:	4313      	orrs	r3, r2
 8017182:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8017186:	68bb      	ldr	r3, [r7, #8]
 8017188:	1e5a      	subs	r2, r3, #1
 801718a:	60ba      	str	r2, [r7, #8]
 801718c:	2b00      	cmp	r3, #0
 801718e:	d1ef      	bne.n	8017170 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	1e5a      	subs	r2, r3, #1
 8017194:	60fa      	str	r2, [r7, #12]
 8017196:	2b00      	cmp	r3, #0
 8017198:	d1e5      	bne.n	8017166 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 801719a:	f3bf 8f4f 	dsb	sy
}
 801719e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80171a0:	4b08      	ldr	r3, [pc, #32]	; (80171c4 <SCB_EnableDCache+0x84>)
 80171a2:	695b      	ldr	r3, [r3, #20]
 80171a4:	4a07      	ldr	r2, [pc, #28]	; (80171c4 <SCB_EnableDCache+0x84>)
 80171a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80171aa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80171ac:	f3bf 8f4f 	dsb	sy
}
 80171b0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80171b2:	f3bf 8f6f 	isb	sy
}
 80171b6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80171b8:	bf00      	nop
 80171ba:	3714      	adds	r7, #20
 80171bc:	46bd      	mov	sp, r7
 80171be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171c2:	4770      	bx	lr
 80171c4:	e000ed00 	.word	0xe000ed00

080171c8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80171c8:	b580      	push	{r7, lr}
 80171ca:	b082      	sub	sp, #8
 80171cc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 80171ce:	2300      	movs	r3, #0
 80171d0:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80171d2:	f000 f9b9 	bl	8017548 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80171d6:	f7ff ff8d 	bl	80170f4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80171da:	f7ff ffb1 	bl	8017140 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80171de:	f001 ff79 	bl	80190d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80171e2:	f000 f8eb 	bl	80173bc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80171e6:	f7f3 fae1 	bl	800a7ac <reset_cause_get>
 80171ea:	4603      	mov	r3, r0
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7f3 fb2f 	bl	800a850 <reset_cause_get_name>
 80171f2:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 80171f4:	f7fe fadc 	bl	80157b0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80171f8:	f001 f980 	bl	80184fc <MX_USART1_UART_Init>
	Get_Slot();
 80171fc:	f7e9 fc66 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8017200:	f7f9 fd24 	bl	8010c4c <MX_CAN2_Init>
	MX_CAN3_Init();
 8017204:	f7f9 fd9a 	bl	8010d3c <MX_CAN3_Init>
	MX_I2C1_Init();
 8017208:	f7fe fd02 	bl	8015c10 <MX_I2C1_Init>
	MX_I2C2_Init();
 801720c:	f7fe fd40 	bl	8015c90 <MX_I2C2_Init>
	MX_SPI1_Init();
 8017210:	f000 fa2a 	bl	8017668 <MX_SPI1_Init>
	printf("\r\r\r\r");
 8017214:	485b      	ldr	r0, [pc, #364]	; (8017384 <main+0x1bc>)
 8017216:	f00e fed3 	bl	8025fc0 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 801721a:	485b      	ldr	r0, [pc, #364]	; (8017388 <main+0x1c0>)
 801721c:	f00e ff6c 	bl	80260f8 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 8017220:	6879      	ldr	r1, [r7, #4]
 8017222:	485a      	ldr	r0, [pc, #360]	; (801738c <main+0x1c4>)
 8017224:	f00e fecc 	bl	8025fc0 <iprintf>
	Get_Build_Details();
 8017228:	f000 f932 	bl	8017490 <Get_Build_Details>
	Get_Config();
 801722c:	f000 fd88 	bl	8017d40 <Get_Config>
	MX_RNG_Init();
 8017230:	f000 f9bc 	bl	80175ac <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8017234:	2208      	movs	r2, #8
 8017236:	2100      	movs	r1, #0
 8017238:	4855      	ldr	r0, [pc, #340]	; (8017390 <main+0x1c8>)
 801723a:	f00e fdd9 	bl	8025df0 <memset>
	HAL_Delay(250);
 801723e:	20fa      	movs	r0, #250	; 0xfa
 8017240:	f001 ffb4 	bl	80191ac <HAL_Delay>


	switch(EI_data.ProtocolType)
 8017244:	4b53      	ldr	r3, [pc, #332]	; (8017394 <main+0x1cc>)
 8017246:	781b      	ldrb	r3, [r3, #0]
 8017248:	3b01      	subs	r3, #1
 801724a:	2b03      	cmp	r3, #3
 801724c:	d86d      	bhi.n	801732a <main+0x162>
 801724e:	a201      	add	r2, pc, #4	; (adr r2, 8017254 <main+0x8c>)
 8017250:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017254:	08017265 	.word	0x08017265
 8017258:	080172bf 	.word	0x080172bf
 801725c:	080172e7 	.word	0x080172e7
 8017260:	08017317 	.word	0x08017317
	{
	case HITACHI:
		print_self_Details_Hitachi();
 8017264:	f7f2 f8c2 	bl	80093ec <print_self_Details_Hitachi>
		ReAssignData();
 8017268:	f7f2 fe4a 	bl	8009f00 <ReAssignData>
		Update_HitachiCommands();
 801726c:	f7e9 fb1a 	bl	80008a4 <Update_HitachiCommands>
		printf("Protocol Selected is HITACHI\n");
 8017270:	4849      	ldr	r0, [pc, #292]	; (8017398 <main+0x1d0>)
 8017272:	f00e ff41 	bl	80260f8 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8017276:	4849      	ldr	r0, [pc, #292]	; (801739c <main+0x1d4>)
 8017278:	f00e ff3e 	bl	80260f8 <puts>
		MX_LWIP_Init();
 801727c:	f008 ffc0 	bl	8020200 <MX_LWIP_Init>
		udpServer_init();
 8017280:	f7f9 f8ca 	bl	8010418 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8017284:	4846      	ldr	r0, [pc, #280]	; (80173a0 <main+0x1d8>)
 8017286:	f00e ff37 	bl	80260f8 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort > 0) && (EI_data.Hitachi_st.BaudRate > 0) )
 801728a:	4b42      	ldr	r3, [pc, #264]	; (8017394 <main+0x1cc>)
 801728c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8017290:	2b00      	cmp	r3, #0
 8017292:	d04e      	beq.n	8017332 <main+0x16a>
 8017294:	4b3f      	ldr	r3, [pc, #252]	; (8017394 <main+0x1cc>)
 8017296:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801729a:	2b00      	cmp	r3, #0
 801729c:	d049      	beq.n	8017332 <main+0x16a>
		{
			MX_UART7_Init();
 801729e:	f001 f8f7 	bl	8018490 <MX_UART7_Init>
			printf("Initializing UART with BaudRate:%lu\n",EI_data.Hitachi_st.BaudRate);
 80172a2:	4b3c      	ldr	r3, [pc, #240]	; (8017394 <main+0x1cc>)
 80172a4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80172a8:	4619      	mov	r1, r3
 80172aa:	483e      	ldr	r0, [pc, #248]	; (80173a4 <main+0x1dc>)
 80172ac:	f00e fe88 	bl	8025fc0 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 80172b0:	4b38      	ldr	r3, [pc, #224]	; (8017394 <main+0x1cc>)
 80172b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80172b6:	4618      	mov	r0, r3
 80172b8:	f001 face 	bl	8018858 <UART4_Init>
		}

#if ENABLE_SIGNAL_PRINT
		UpdateSIGNALSNamesHitachi();
#endif
		break;
 80172bc:	e039      	b.n	8017332 <main+0x16a>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 80172be:	483a      	ldr	r0, [pc, #232]	; (80173a8 <main+0x1e0>)
 80172c0:	f00e ff1a 	bl	80260f8 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80172c4:	4835      	ldr	r0, [pc, #212]	; (801739c <main+0x1d4>)
 80172c6:	f00e ff17 	bl	80260f8 <puts>
		MX_LWIP_Init();
 80172ca:	f008 ff99 	bl	8020200 <MX_LWIP_Init>
		udpServer_init();
 80172ce:	f7f9 f8a3 	bl	8010418 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 80172d2:	4833      	ldr	r0, [pc, #204]	; (80173a0 <main+0x1d8>)
 80172d4:	f00e ff10 	bl	80260f8 <puts>
		print_self_DetailsSiemens();
 80172d8:	f7f8 ff7a 	bl	80101d0 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80172dc:	f7f7 fc84 	bl	800ebe8 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80172e0:	f7f8 fa98 	bl	800f814 <UpdateSIGNALSNames>
		break;
 80172e4:	e026      	b.n	8017334 <main+0x16c>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80172e6:	4831      	ldr	r0, [pc, #196]	; (80173ac <main+0x1e4>)
 80172e8:	f00e ff06 	bl	80260f8 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80172ec:	4b29      	ldr	r3, [pc, #164]	; (8017394 <main+0x1cc>)
 80172ee:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d006      	beq.n	8017304 <main+0x13c>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 80172f6:	4b27      	ldr	r3, [pc, #156]	; (8017394 <main+0x1cc>)
 80172f8:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80172fc:	4618      	mov	r0, r3
 80172fe:	f001 faab 	bl	8018858 <UART4_Init>
 8017302:	e003      	b.n	801730c <main+0x144>
		}
		else
		{
			UART4_Init(115200);
 8017304:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8017308:	f001 faa6 	bl	8018858 <UART4_Init>
		}
		Update_MedhaCommands();
 801730c:	f7f4 ff42 	bl	800c194 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8017310:	f7f4 fd00 	bl	800bd14 <Print_Medha_Self_Details>
		break;
 8017314:	e00e      	b.n	8017334 <main+0x16c>

	case KYOSAN:
		printf("Protocol Selected is KYOSAN\n");
 8017316:	4826      	ldr	r0, [pc, #152]	; (80173b0 <main+0x1e8>)
 8017318:	f00e feee 	bl	80260f8 <puts>
		UART4_Init(31200);
 801731c:	f647 10e0 	movw	r0, #31200	; 0x79e0
 8017320:	f001 fa9a 	bl	8018858 <UART4_Init>
//		Update_KyosanStructure();
//		UpdateSIGNALSNamesKyosan();
		Update_KyosanCommands();
 8017324:	f7ff fda6 	bl	8016e74 <Update_KyosanCommands>
		break;
 8017328:	e004      	b.n	8017334 <main+0x16c>

	default:
		printf("Please Select Protocol Type\n");
 801732a:	4822      	ldr	r0, [pc, #136]	; (80173b4 <main+0x1ec>)
 801732c:	f00e fee4 	bl	80260f8 <puts>
		while(1);
 8017330:	e7fe      	b.n	8017330 <main+0x168>
		break;
 8017332:	bf00      	nop
	}


	printf("Initialization Success\n");
 8017334:	4820      	ldr	r0, [pc, #128]	; (80173b8 <main+0x1f0>)
 8017336:	f00e fedf 	bl	80260f8 <puts>
	MX_IWDG_Init();
 801733a:	f7fe fd91 	bl	8015e60 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 801733e:	4b15      	ldr	r3, [pc, #84]	; (8017394 <main+0x1cc>)
 8017340:	781b      	ldrb	r3, [r3, #0]
 8017342:	3b01      	subs	r3, #1
 8017344:	2b03      	cmp	r3, #3
 8017346:	d817      	bhi.n	8017378 <main+0x1b0>
 8017348:	a201      	add	r2, pc, #4	; (adr r2, 8017350 <main+0x188>)
 801734a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801734e:	bf00      	nop
 8017350:	08017361 	.word	0x08017361
 8017354:	08017367 	.word	0x08017367
 8017358:	0801736d 	.word	0x0801736d
 801735c:	08017373 	.word	0x08017373
		{
		case HITACHI:
			Process_HitachiEI();
 8017360:	f7f2 fd88 	bl	8009e74 <Process_HitachiEI>
			break;
 8017364:	e00c      	b.n	8017380 <main+0x1b8>

		case SIEMENS:
			Process_SiemensEI();
 8017366:	f7f5 fc3b 	bl	800cbe0 <Process_SiemensEI>
			break;
 801736a:	e009      	b.n	8017380 <main+0x1b8>

		case MEDHA:
			Process_Medha_EI();
 801736c:	f7f3 fac0 	bl	800a8f0 <Process_Medha_EI>
			break;
 8017370:	e006      	b.n	8017380 <main+0x1b8>

		case KYOSAN:
			Process_Kyosan_EI();
 8017372:	f7fe fd93 	bl	8015e9c <Process_Kyosan_EI>
			break;
 8017376:	e003      	b.n	8017380 <main+0x1b8>

		default:
			printf("Please Select Protocol Type\n");
 8017378:	480e      	ldr	r0, [pc, #56]	; (80173b4 <main+0x1ec>)
 801737a:	f00e febd 	bl	80260f8 <puts>
			while(1);
 801737e:	e7fe      	b.n	801737e <main+0x1b6>
		switch(EI_data.ProtocolType)
 8017380:	e7dd      	b.n	801733e <main+0x176>
 8017382:	bf00      	nop
 8017384:	0802b254 	.word	0x0802b254
 8017388:	0802b25c 	.word	0x0802b25c
 801738c:	0802b2ac 	.word	0x0802b2ac
 8017390:	2000308c 	.word	0x2000308c
 8017394:	20000504 	.word	0x20000504
 8017398:	0802b2c8 	.word	0x0802b2c8
 801739c:	0802b2e8 	.word	0x0802b2e8
 80173a0:	0802b310 	.word	0x0802b310
 80173a4:	0802b32c 	.word	0x0802b32c
 80173a8:	0802b354 	.word	0x0802b354
 80173ac:	0802b374 	.word	0x0802b374
 80173b0:	0802b390 	.word	0x0802b390
 80173b4:	0802b3ac 	.word	0x0802b3ac
 80173b8:	0802b3c8 	.word	0x0802b3c8

080173bc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80173bc:	b580      	push	{r7, lr}
 80173be:	b094      	sub	sp, #80	; 0x50
 80173c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80173c2:	f107 031c 	add.w	r3, r7, #28
 80173c6:	2234      	movs	r2, #52	; 0x34
 80173c8:	2100      	movs	r1, #0
 80173ca:	4618      	mov	r0, r3
 80173cc:	f00e fd10 	bl	8025df0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80173d0:	f107 0308 	add.w	r3, r7, #8
 80173d4:	2200      	movs	r2, #0
 80173d6:	601a      	str	r2, [r3, #0]
 80173d8:	605a      	str	r2, [r3, #4]
 80173da:	609a      	str	r2, [r3, #8]
 80173dc:	60da      	str	r2, [r3, #12]
 80173de:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80173e0:	4b29      	ldr	r3, [pc, #164]	; (8017488 <SystemClock_Config+0xcc>)
 80173e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173e4:	4a28      	ldr	r2, [pc, #160]	; (8017488 <SystemClock_Config+0xcc>)
 80173e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80173ea:	6413      	str	r3, [r2, #64]	; 0x40
 80173ec:	4b26      	ldr	r3, [pc, #152]	; (8017488 <SystemClock_Config+0xcc>)
 80173ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80173f4:	607b      	str	r3, [r7, #4]
 80173f6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80173f8:	4b24      	ldr	r3, [pc, #144]	; (801748c <SystemClock_Config+0xd0>)
 80173fa:	681b      	ldr	r3, [r3, #0]
 80173fc:	4a23      	ldr	r2, [pc, #140]	; (801748c <SystemClock_Config+0xd0>)
 80173fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017402:	6013      	str	r3, [r2, #0]
 8017404:	4b21      	ldr	r3, [pc, #132]	; (801748c <SystemClock_Config+0xd0>)
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801740c:	603b      	str	r3, [r7, #0]
 801740e:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017410:	2309      	movs	r3, #9
 8017412:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8017414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017418:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 801741a:	2301      	movs	r3, #1
 801741c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801741e:	2302      	movs	r3, #2
 8017420:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017426:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8017428:	2306      	movs	r3, #6
 801742a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 801742c:	23b4      	movs	r3, #180	; 0xb4
 801742e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017430:	2302      	movs	r3, #2
 8017432:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8017434:	2308      	movs	r3, #8
 8017436:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8017438:	2302      	movs	r3, #2
 801743a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801743c:	f107 031c 	add.w	r3, r7, #28
 8017440:	4618      	mov	r0, r3
 8017442:	f005 f929 	bl	801c698 <HAL_RCC_OscConfig>
 8017446:	4603      	mov	r3, r0
 8017448:	2b00      	cmp	r3, #0
 801744a:	d001      	beq.n	8017450 <SystemClock_Config+0x94>
	{
		Error_Handler();
 801744c:	f000 f8a8 	bl	80175a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017450:	230f      	movs	r3, #15
 8017452:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017454:	2302      	movs	r3, #2
 8017456:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017458:	2300      	movs	r3, #0
 801745a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801745c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017460:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017466:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017468:	f107 0308 	add.w	r3, r7, #8
 801746c:	2105      	movs	r1, #5
 801746e:	4618      	mov	r0, r3
 8017470:	f005 fbc0 	bl	801cbf4 <HAL_RCC_ClockConfig>
 8017474:	4603      	mov	r3, r0
 8017476:	2b00      	cmp	r3, #0
 8017478:	d001      	beq.n	801747e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 801747a:	f000 f891 	bl	80175a0 <Error_Handler>
	}
}
 801747e:	bf00      	nop
 8017480:	3750      	adds	r7, #80	; 0x50
 8017482:	46bd      	mov	sp, r7
 8017484:	bd80      	pop	{r7, pc}
 8017486:	bf00      	nop
 8017488:	40023800 	.word	0x40023800
 801748c:	40007000 	.word	0x40007000

08017490 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	b08e      	sub	sp, #56	; 0x38
 8017494:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8017496:	2300      	movs	r3, #0
 8017498:	607b      	str	r3, [r7, #4]
 801749a:	f107 0308 	add.w	r3, r7, #8
 801749e:	222e      	movs	r2, #46	; 0x2e
 80174a0:	2100      	movs	r1, #0
 80174a2:	4618      	mov	r0, r3
 80174a4:	f00e fca4 	bl	8025df0 <memset>
	printf("\n_____________________________________________\n");
 80174a8:	481d      	ldr	r0, [pc, #116]	; (8017520 <Get_Build_Details+0x90>)
 80174aa:	f00e fe25 	bl	80260f8 <puts>
	printf("Build Date:%s\n",__DATE__);
 80174ae:	491d      	ldr	r1, [pc, #116]	; (8017524 <Get_Build_Details+0x94>)
 80174b0:	481d      	ldr	r0, [pc, #116]	; (8017528 <Get_Build_Details+0x98>)
 80174b2:	f00e fd85 	bl	8025fc0 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 80174b6:	491d      	ldr	r1, [pc, #116]	; (801752c <Get_Build_Details+0x9c>)
 80174b8:	481d      	ldr	r0, [pc, #116]	; (8017530 <Get_Build_Details+0xa0>)
 80174ba:	f00e fd81 	bl	8025fc0 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 80174be:	1d3b      	adds	r3, r7, #4
 80174c0:	4a18      	ldr	r2, [pc, #96]	; (8017524 <Get_Build_Details+0x94>)
 80174c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80174c4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80174c8:	1d3b      	adds	r3, r7, #4
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7e8 fec2 	bl	8000254 <strlen>
 80174d0:	4603      	mov	r3, r0
 80174d2:	461a      	mov	r2, r3
 80174d4:	1d3b      	adds	r3, r7, #4
 80174d6:	4413      	add	r3, r2
 80174d8:	4914      	ldr	r1, [pc, #80]	; (801752c <Get_Build_Details+0x9c>)
 80174da:	461a      	mov	r2, r3
 80174dc:	460b      	mov	r3, r1
 80174de:	cb03      	ldmia	r3!, {r0, r1}
 80174e0:	6010      	str	r0, [r2, #0]
 80174e2:	6051      	str	r1, [r2, #4]
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 80174e8:	1d3b      	adds	r3, r7, #4
 80174ea:	4618      	mov	r0, r3
 80174ec:	f7e8 feb2 	bl	8000254 <strlen>
 80174f0:	4603      	mov	r3, r0
 80174f2:	b21a      	sxth	r2, r3
 80174f4:	1d3b      	adds	r3, r7, #4
 80174f6:	4619      	mov	r1, r3
 80174f8:	2000      	movs	r0, #0
 80174fa:	f7fe f805 	bl	8015508 <GetCRC16>
 80174fe:	4603      	mov	r3, r0
 8017500:	461a      	mov	r2, r3
 8017502:	4b0c      	ldr	r3, [pc, #48]	; (8017534 <Get_Build_Details+0xa4>)
 8017504:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8017506:	4a0c      	ldr	r2, [pc, #48]	; (8017538 <Get_Build_Details+0xa8>)
 8017508:	490c      	ldr	r1, [pc, #48]	; (801753c <Get_Build_Details+0xac>)
 801750a:	480d      	ldr	r0, [pc, #52]	; (8017540 <Get_Build_Details+0xb0>)
 801750c:	f00e fd58 	bl	8025fc0 <iprintf>
	printf("_____________________________________________\n");
 8017510:	480c      	ldr	r0, [pc, #48]	; (8017544 <Get_Build_Details+0xb4>)
 8017512:	f00e fdf1 	bl	80260f8 <puts>

}
 8017516:	bf00      	nop
 8017518:	3738      	adds	r7, #56	; 0x38
 801751a:	46bd      	mov	sp, r7
 801751c:	bd80      	pop	{r7, pc}
 801751e:	bf00      	nop
 8017520:	0802b3e0 	.word	0x0802b3e0
 8017524:	0802b410 	.word	0x0802b410
 8017528:	0802b41c 	.word	0x0802b41c
 801752c:	0802b42c 	.word	0x0802b42c
 8017530:	0802b438 	.word	0x0802b438
 8017534:	2000bc78 	.word	0x2000bc78
 8017538:	0802b448 	.word	0x0802b448
 801753c:	0802b44c 	.word	0x0802b44c
 8017540:	0802b464 	.word	0x0802b464
 8017544:	0802b480 	.word	0x0802b480

08017548 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b084      	sub	sp, #16
 801754c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801754e:	463b      	mov	r3, r7
 8017550:	2200      	movs	r2, #0
 8017552:	601a      	str	r2, [r3, #0]
 8017554:	605a      	str	r2, [r3, #4]
 8017556:	609a      	str	r2, [r3, #8]
 8017558:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801755a:	f002 fd3f 	bl	8019fdc <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801755e:	2301      	movs	r3, #1
 8017560:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8017562:	2300      	movs	r3, #0
 8017564:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8017566:	2300      	movs	r3, #0
 8017568:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801756a:	231f      	movs	r3, #31
 801756c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801756e:	2387      	movs	r3, #135	; 0x87
 8017570:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8017572:	2300      	movs	r3, #0
 8017574:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8017576:	2300      	movs	r3, #0
 8017578:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801757a:	2301      	movs	r3, #1
 801757c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801757e:	2301      	movs	r3, #1
 8017580:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8017582:	2300      	movs	r3, #0
 8017584:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8017586:	2300      	movs	r3, #0
 8017588:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801758a:	463b      	mov	r3, r7
 801758c:	4618      	mov	r0, r3
 801758e:	f002 fd5d 	bl	801a04c <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8017592:	2004      	movs	r0, #4
 8017594:	f002 fd3a 	bl	801a00c <HAL_MPU_Enable>

}
 8017598:	bf00      	nop
 801759a:	3710      	adds	r7, #16
 801759c:	46bd      	mov	sp, r7
 801759e:	bd80      	pop	{r7, pc}

080175a0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80175a0:	b480      	push	{r7}
 80175a2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80175a4:	b672      	cpsid	i
}
 80175a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80175a8:	e7fe      	b.n	80175a8 <Error_Handler+0x8>
	...

080175ac <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80175ac:	b580      	push	{r7, lr}
 80175ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80175b0:	4b06      	ldr	r3, [pc, #24]	; (80175cc <MX_RNG_Init+0x20>)
 80175b2:	4a07      	ldr	r2, [pc, #28]	; (80175d0 <MX_RNG_Init+0x24>)
 80175b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80175b6:	4805      	ldr	r0, [pc, #20]	; (80175cc <MX_RNG_Init+0x20>)
 80175b8:	f006 f92a 	bl	801d810 <HAL_RNG_Init>
 80175bc:	4603      	mov	r3, r0
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d001      	beq.n	80175c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80175c2:	f7ff ffed 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80175c6:	bf00      	nop
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	2000bc54 	.word	0x2000bc54
 80175d0:	50060800 	.word	0x50060800

080175d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b0a8      	sub	sp, #160	; 0xa0
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80175dc:	f107 0310 	add.w	r3, r7, #16
 80175e0:	2290      	movs	r2, #144	; 0x90
 80175e2:	2100      	movs	r1, #0
 80175e4:	4618      	mov	r0, r3
 80175e6:	f00e fc03 	bl	8025df0 <memset>
  if(rngHandle->Instance==RNG)
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	681b      	ldr	r3, [r3, #0]
 80175ee:	4a11      	ldr	r2, [pc, #68]	; (8017634 <HAL_RNG_MspInit+0x60>)
 80175f0:	4293      	cmp	r3, r2
 80175f2:	d11b      	bne.n	801762c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80175f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80175f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80175fa:	2300      	movs	r3, #0
 80175fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017600:	f107 0310 	add.w	r3, r7, #16
 8017604:	4618      	mov	r0, r3
 8017606:	f005 fcdb 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 801760a:	4603      	mov	r3, r0
 801760c:	2b00      	cmp	r3, #0
 801760e:	d001      	beq.n	8017614 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8017610:	f7ff ffc6 	bl	80175a0 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8017614:	4b08      	ldr	r3, [pc, #32]	; (8017638 <HAL_RNG_MspInit+0x64>)
 8017616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017618:	4a07      	ldr	r2, [pc, #28]	; (8017638 <HAL_RNG_MspInit+0x64>)
 801761a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801761e:	6353      	str	r3, [r2, #52]	; 0x34
 8017620:	4b05      	ldr	r3, [pc, #20]	; (8017638 <HAL_RNG_MspInit+0x64>)
 8017622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017628:	60fb      	str	r3, [r7, #12]
 801762a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801762c:	bf00      	nop
 801762e:	37a0      	adds	r7, #160	; 0xa0
 8017630:	46bd      	mov	sp, r7
 8017632:	bd80      	pop	{r7, pc}
 8017634:	50060800 	.word	0x50060800
 8017638:	40023800 	.word	0x40023800

0801763c <__NVIC_SystemReset>:
{
 801763c:	b480      	push	{r7}
 801763e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017640:	f3bf 8f4f 	dsb	sy
}
 8017644:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017646:	4b06      	ldr	r3, [pc, #24]	; (8017660 <__NVIC_SystemReset+0x24>)
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801764e:	4904      	ldr	r1, [pc, #16]	; (8017660 <__NVIC_SystemReset+0x24>)
 8017650:	4b04      	ldr	r3, [pc, #16]	; (8017664 <__NVIC_SystemReset+0x28>)
 8017652:	4313      	orrs	r3, r2
 8017654:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017656:	f3bf 8f4f 	dsb	sy
}
 801765a:	bf00      	nop
    __NOP();
 801765c:	bf00      	nop
 801765e:	e7fd      	b.n	801765c <__NVIC_SystemReset+0x20>
 8017660:	e000ed00 	.word	0xe000ed00
 8017664:	05fa0004 	.word	0x05fa0004

08017668 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8017668:	b580      	push	{r7, lr}
 801766a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801766c:	4b1b      	ldr	r3, [pc, #108]	; (80176dc <MX_SPI1_Init+0x74>)
 801766e:	4a1c      	ldr	r2, [pc, #112]	; (80176e0 <MX_SPI1_Init+0x78>)
 8017670:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8017672:	4b1a      	ldr	r3, [pc, #104]	; (80176dc <MX_SPI1_Init+0x74>)
 8017674:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017678:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801767a:	4b18      	ldr	r3, [pc, #96]	; (80176dc <MX_SPI1_Init+0x74>)
 801767c:	2200      	movs	r2, #0
 801767e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8017680:	4b16      	ldr	r3, [pc, #88]	; (80176dc <MX_SPI1_Init+0x74>)
 8017682:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8017686:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017688:	4b14      	ldr	r3, [pc, #80]	; (80176dc <MX_SPI1_Init+0x74>)
 801768a:	2200      	movs	r2, #0
 801768c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801768e:	4b13      	ldr	r3, [pc, #76]	; (80176dc <MX_SPI1_Init+0x74>)
 8017690:	2200      	movs	r2, #0
 8017692:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8017694:	4b11      	ldr	r3, [pc, #68]	; (80176dc <MX_SPI1_Init+0x74>)
 8017696:	f44f 7200 	mov.w	r2, #512	; 0x200
 801769a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801769c:	4b0f      	ldr	r3, [pc, #60]	; (80176dc <MX_SPI1_Init+0x74>)
 801769e:	2208      	movs	r2, #8
 80176a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80176a2:	4b0e      	ldr	r3, [pc, #56]	; (80176dc <MX_SPI1_Init+0x74>)
 80176a4:	2200      	movs	r2, #0
 80176a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80176a8:	4b0c      	ldr	r3, [pc, #48]	; (80176dc <MX_SPI1_Init+0x74>)
 80176aa:	2200      	movs	r2, #0
 80176ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80176ae:	4b0b      	ldr	r3, [pc, #44]	; (80176dc <MX_SPI1_Init+0x74>)
 80176b0:	2200      	movs	r2, #0
 80176b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80176b4:	4b09      	ldr	r3, [pc, #36]	; (80176dc <MX_SPI1_Init+0x74>)
 80176b6:	2207      	movs	r2, #7
 80176b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80176ba:	4b08      	ldr	r3, [pc, #32]	; (80176dc <MX_SPI1_Init+0x74>)
 80176bc:	2200      	movs	r2, #0
 80176be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80176c0:	4b06      	ldr	r3, [pc, #24]	; (80176dc <MX_SPI1_Init+0x74>)
 80176c2:	2208      	movs	r2, #8
 80176c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80176c6:	4805      	ldr	r0, [pc, #20]	; (80176dc <MX_SPI1_Init+0x74>)
 80176c8:	f006 f937 	bl	801d93a <HAL_SPI_Init>
 80176cc:	4603      	mov	r3, r0
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d001      	beq.n	80176d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80176d2:	f7ff ff65 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80176d6:	bf00      	nop
 80176d8:	bd80      	pop	{r7, pc}
 80176da:	bf00      	nop
 80176dc:	2000bc7c 	.word	0x2000bc7c
 80176e0:	40013000 	.word	0x40013000

080176e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80176e4:	b580      	push	{r7, lr}
 80176e6:	b08c      	sub	sp, #48	; 0x30
 80176e8:	af00      	add	r7, sp, #0
 80176ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80176ec:	f107 031c 	add.w	r3, r7, #28
 80176f0:	2200      	movs	r2, #0
 80176f2:	601a      	str	r2, [r3, #0]
 80176f4:	605a      	str	r2, [r3, #4]
 80176f6:	609a      	str	r2, [r3, #8]
 80176f8:	60da      	str	r2, [r3, #12]
 80176fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4a33      	ldr	r2, [pc, #204]	; (80177d0 <HAL_SPI_MspInit+0xec>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d160      	bne.n	80177c8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8017706:	4b33      	ldr	r3, [pc, #204]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801770a:	4a32      	ldr	r2, [pc, #200]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 801770c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8017710:	6453      	str	r3, [r2, #68]	; 0x44
 8017712:	4b30      	ldr	r3, [pc, #192]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017716:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801771a:	61bb      	str	r3, [r7, #24]
 801771c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801771e:	4b2d      	ldr	r3, [pc, #180]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017722:	4a2c      	ldr	r2, [pc, #176]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017724:	f043 0301 	orr.w	r3, r3, #1
 8017728:	6313      	str	r3, [r2, #48]	; 0x30
 801772a:	4b2a      	ldr	r3, [pc, #168]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 801772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801772e:	f003 0301 	and.w	r3, r3, #1
 8017732:	617b      	str	r3, [r7, #20]
 8017734:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8017736:	4b27      	ldr	r3, [pc, #156]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801773a:	4a26      	ldr	r2, [pc, #152]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 801773c:	f043 0308 	orr.w	r3, r3, #8
 8017740:	6313      	str	r3, [r2, #48]	; 0x30
 8017742:	4b24      	ldr	r3, [pc, #144]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017746:	f003 0308 	and.w	r3, r3, #8
 801774a:	613b      	str	r3, [r7, #16]
 801774c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801774e:	4b21      	ldr	r3, [pc, #132]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017752:	4a20      	ldr	r2, [pc, #128]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 8017754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017758:	6313      	str	r3, [r2, #48]	; 0x30
 801775a:	4b1e      	ldr	r3, [pc, #120]	; (80177d4 <HAL_SPI_MspInit+0xf0>)
 801775c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801775e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017762:	60fb      	str	r3, [r7, #12]
 8017764:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8017766:	2320      	movs	r3, #32
 8017768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801776a:	2302      	movs	r3, #2
 801776c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801776e:	2300      	movs	r3, #0
 8017770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017772:	2303      	movs	r3, #3
 8017774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017776:	2305      	movs	r3, #5
 8017778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 801777a:	f107 031c 	add.w	r3, r7, #28
 801777e:	4619      	mov	r1, r3
 8017780:	4815      	ldr	r0, [pc, #84]	; (80177d8 <HAL_SPI_MspInit+0xf4>)
 8017782:	f003 ff1f 	bl	801b5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8017786:	2380      	movs	r3, #128	; 0x80
 8017788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801778a:	2302      	movs	r3, #2
 801778c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801778e:	2300      	movs	r3, #0
 8017790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017792:	2303      	movs	r3, #3
 8017794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8017796:	2305      	movs	r3, #5
 8017798:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 801779a:	f107 031c 	add.w	r3, r7, #28
 801779e:	4619      	mov	r1, r3
 80177a0:	480e      	ldr	r0, [pc, #56]	; (80177dc <HAL_SPI_MspInit+0xf8>)
 80177a2:	f003 ff0f 	bl	801b5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 80177a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80177aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80177ac:	2302      	movs	r3, #2
 80177ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80177b0:	2300      	movs	r3, #0
 80177b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80177b4:	2303      	movs	r3, #3
 80177b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80177b8:	2305      	movs	r3, #5
 80177ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 80177bc:	f107 031c 	add.w	r3, r7, #28
 80177c0:	4619      	mov	r1, r3
 80177c2:	4807      	ldr	r0, [pc, #28]	; (80177e0 <HAL_SPI_MspInit+0xfc>)
 80177c4:	f003 fefe 	bl	801b5c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80177c8:	bf00      	nop
 80177ca:	3730      	adds	r7, #48	; 0x30
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	40013000 	.word	0x40013000
 80177d4:	40023800 	.word	0x40023800
 80177d8:	40020000 	.word	0x40020000
 80177dc:	40020c00 	.word	0x40020c00
 80177e0:	40021800 	.word	0x40021800

080177e4 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80177e4:	b580      	push	{r7, lr}
 80177e6:	b086      	sub	sp, #24
 80177e8:	af00      	add	r7, sp, #0
 80177ea:	60b9      	str	r1, [r7, #8]
 80177ec:	607b      	str	r3, [r7, #4]
 80177ee:	4603      	mov	r3, r0
 80177f0:	73fb      	strb	r3, [r7, #15]
 80177f2:	4613      	mov	r3, r2
 80177f4:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 80177f6:	2300      	movs	r3, #0
 80177f8:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 80177fa:	7bfb      	ldrb	r3, [r7, #15]
 80177fc:	3b01      	subs	r3, #1
 80177fe:	2b03      	cmp	r3, #3
 8017800:	d828      	bhi.n	8017854 <SPI_WriteInFlash+0x70>
 8017802:	a201      	add	r2, pc, #4	; (adr r2, 8017808 <SPI_WriteInFlash+0x24>)
 8017804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017808:	08017819 	.word	0x08017819
 801780c:	08017829 	.word	0x08017829
 8017810:	08017837 	.word	0x08017837
 8017814:	08017845 	.word	0x08017845
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8017818:	4b75      	ldr	r3, [pc, #468]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801781a:	4a76      	ldr	r2, [pc, #472]	; (80179f4 <SPI_WriteInFlash+0x210>)
 801781c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 801781e:	4b76      	ldr	r3, [pc, #472]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017820:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017824:	601a      	str	r2, [r3, #0]
		break;
 8017826:	e018      	b.n	801785a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8017828:	4b71      	ldr	r3, [pc, #452]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801782a:	4a74      	ldr	r2, [pc, #464]	; (80179fc <SPI_WriteInFlash+0x218>)
 801782c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 801782e:	4b72      	ldr	r3, [pc, #456]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017830:	2220      	movs	r2, #32
 8017832:	601a      	str	r2, [r3, #0]
		break;
 8017834:	e011      	b.n	801785a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8017836:	4b6e      	ldr	r3, [pc, #440]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 8017838:	4a70      	ldr	r2, [pc, #448]	; (80179fc <SPI_WriteInFlash+0x218>)
 801783a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 801783c:	4b6e      	ldr	r3, [pc, #440]	; (80179f8 <SPI_WriteInFlash+0x214>)
 801783e:	2240      	movs	r2, #64	; 0x40
 8017840:	601a      	str	r2, [r3, #0]
		break;
 8017842:	e00a      	b.n	801785a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8017844:	4b6a      	ldr	r3, [pc, #424]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 8017846:	4a6e      	ldr	r2, [pc, #440]	; (8017a00 <SPI_WriteInFlash+0x21c>)
 8017848:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 801784a:	4b6b      	ldr	r3, [pc, #428]	; (80179f8 <SPI_WriteInFlash+0x214>)
 801784c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017850:	601a      	str	r2, [r3, #0]
		break;
 8017852:	e002      	b.n	801785a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8017854:	486b      	ldr	r0, [pc, #428]	; (8017a04 <SPI_WriteInFlash+0x220>)
 8017856:	f00e fc4f 	bl	80260f8 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801785a:	4b65      	ldr	r3, [pc, #404]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	4a66      	ldr	r2, [pc, #408]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017860:	6812      	ldr	r2, [r2, #0]
 8017862:	b291      	uxth	r1, r2
 8017864:	2201      	movs	r2, #1
 8017866:	4618      	mov	r0, r3
 8017868:	f004 f870 	bl	801b94c <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801786c:	4b60      	ldr	r3, [pc, #384]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	4a61      	ldr	r2, [pc, #388]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017872:	6812      	ldr	r2, [r2, #0]
 8017874:	b291      	uxth	r1, r2
 8017876:	2200      	movs	r2, #0
 8017878:	4618      	mov	r0, r3
 801787a:	f004 f867 	bl	801b94c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 801787e:	2364      	movs	r3, #100	; 0x64
 8017880:	2201      	movs	r2, #1
 8017882:	4961      	ldr	r1, [pc, #388]	; (8017a08 <SPI_WriteInFlash+0x224>)
 8017884:	4861      	ldr	r0, [pc, #388]	; (8017a0c <SPI_WriteInFlash+0x228>)
 8017886:	f006 f903 	bl	801da90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801788a:	4b59      	ldr	r3, [pc, #356]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4a5a      	ldr	r2, [pc, #360]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017890:	6812      	ldr	r2, [r2, #0]
 8017892:	b291      	uxth	r1, r2
 8017894:	2201      	movs	r2, #1
 8017896:	4618      	mov	r0, r3
 8017898:	f004 f858 	bl	801b94c <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801789c:	4b54      	ldr	r3, [pc, #336]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	4a55      	ldr	r2, [pc, #340]	; (80179f8 <SPI_WriteInFlash+0x214>)
 80178a2:	6812      	ldr	r2, [r2, #0]
 80178a4:	b291      	uxth	r1, r2
 80178a6:	2200      	movs	r2, #0
 80178a8:	4618      	mov	r0, r3
 80178aa:	f004 f84f 	bl	801b94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 80178ae:	2364      	movs	r3, #100	; 0x64
 80178b0:	2201      	movs	r2, #1
 80178b2:	4957      	ldr	r1, [pc, #348]	; (8017a10 <SPI_WriteInFlash+0x22c>)
 80178b4:	4855      	ldr	r0, [pc, #340]	; (8017a0c <SPI_WriteInFlash+0x228>)
 80178b6:	f006 f8eb 	bl	801da90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80178ba:	2364      	movs	r3, #100	; 0x64
 80178bc:	2201      	movs	r2, #1
 80178be:	4955      	ldr	r1, [pc, #340]	; (8017a14 <SPI_WriteInFlash+0x230>)
 80178c0:	4852      	ldr	r0, [pc, #328]	; (8017a0c <SPI_WriteInFlash+0x228>)
 80178c2:	f006 fa53 	bl	801dd6c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80178c6:	4b4a      	ldr	r3, [pc, #296]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4a4b      	ldr	r2, [pc, #300]	; (80179f8 <SPI_WriteInFlash+0x214>)
 80178cc:	6812      	ldr	r2, [r2, #0]
 80178ce:	b291      	uxth	r1, r2
 80178d0:	2201      	movs	r2, #1
 80178d2:	4618      	mov	r0, r3
 80178d4:	f004 f83a 	bl	801b94c <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 80178d8:	4b4e      	ldr	r3, [pc, #312]	; (8017a14 <SPI_WriteInFlash+0x230>)
 80178da:	781b      	ldrb	r3, [r3, #0]
 80178dc:	f003 0302 	and.w	r3, r3, #2
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d103      	bne.n	80178ec <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 80178e4:	484c      	ldr	r0, [pc, #304]	; (8017a18 <SPI_WriteInFlash+0x234>)
 80178e6:	f00e fb6b 	bl	8025fc0 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80178ea:	e7d7      	b.n	801789c <SPI_WriteInFlash+0xb8>
			break;
 80178ec:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80178ee:	4b40      	ldr	r3, [pc, #256]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	4a41      	ldr	r2, [pc, #260]	; (80179f8 <SPI_WriteInFlash+0x214>)
 80178f4:	6812      	ldr	r2, [r2, #0]
 80178f6:	b291      	uxth	r1, r2
 80178f8:	2200      	movs	r2, #0
 80178fa:	4618      	mov	r0, r3
 80178fc:	f004 f826 	bl	801b94c <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8017900:	2202      	movs	r2, #2
 8017902:	4b46      	ldr	r3, [pc, #280]	; (8017a1c <SPI_WriteInFlash+0x238>)
 8017904:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8017906:	68bb      	ldr	r3, [r7, #8]
 8017908:	0c1b      	lsrs	r3, r3, #16
 801790a:	b2da      	uxtb	r2, r3
 801790c:	4b43      	ldr	r3, [pc, #268]	; (8017a1c <SPI_WriteInFlash+0x238>)
 801790e:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017910:	68bb      	ldr	r3, [r7, #8]
 8017912:	0a1b      	lsrs	r3, r3, #8
 8017914:	b2da      	uxtb	r2, r3
 8017916:	4b41      	ldr	r3, [pc, #260]	; (8017a1c <SPI_WriteInFlash+0x238>)
 8017918:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801791a:	68bb      	ldr	r3, [r7, #8]
 801791c:	b2da      	uxtb	r2, r3
 801791e:	4b3f      	ldr	r3, [pc, #252]	; (8017a1c <SPI_WriteInFlash+0x238>)
 8017920:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017922:	2364      	movs	r3, #100	; 0x64
 8017924:	2204      	movs	r2, #4
 8017926:	493d      	ldr	r1, [pc, #244]	; (8017a1c <SPI_WriteInFlash+0x238>)
 8017928:	4838      	ldr	r0, [pc, #224]	; (8017a0c <SPI_WriteInFlash+0x228>)
 801792a:	f006 f8b1 	bl	801da90 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 801792e:	89ba      	ldrh	r2, [r7, #12]
 8017930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017934:	6879      	ldr	r1, [r7, #4]
 8017936:	4835      	ldr	r0, [pc, #212]	; (8017a0c <SPI_WriteInFlash+0x228>)
 8017938:	f006 f8aa 	bl	801da90 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801793c:	4b2c      	ldr	r3, [pc, #176]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	4a2d      	ldr	r2, [pc, #180]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017942:	6812      	ldr	r2, [r2, #0]
 8017944:	b291      	uxth	r1, r2
 8017946:	2201      	movs	r2, #1
 8017948:	4618      	mov	r0, r3
 801794a:	f003 ffff 	bl	801b94c <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801794e:	4b28      	ldr	r3, [pc, #160]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	4a29      	ldr	r2, [pc, #164]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017954:	6812      	ldr	r2, [r2, #0]
 8017956:	b291      	uxth	r1, r2
 8017958:	2200      	movs	r2, #0
 801795a:	4618      	mov	r0, r3
 801795c:	f003 fff6 	bl	801b94c <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8017960:	2205      	movs	r2, #5
 8017962:	4b2e      	ldr	r3, [pc, #184]	; (8017a1c <SPI_WriteInFlash+0x238>)
 8017964:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017966:	2364      	movs	r3, #100	; 0x64
 8017968:	2201      	movs	r2, #1
 801796a:	492c      	ldr	r1, [pc, #176]	; (8017a1c <SPI_WriteInFlash+0x238>)
 801796c:	4827      	ldr	r0, [pc, #156]	; (8017a0c <SPI_WriteInFlash+0x228>)
 801796e:	f006 f88f 	bl	801da90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017972:	2364      	movs	r3, #100	; 0x64
 8017974:	2201      	movs	r2, #1
 8017976:	4927      	ldr	r1, [pc, #156]	; (8017a14 <SPI_WriteInFlash+0x230>)
 8017978:	4824      	ldr	r0, [pc, #144]	; (8017a0c <SPI_WriteInFlash+0x228>)
 801797a:	f006 f9f7 	bl	801dd6c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801797e:	4b1c      	ldr	r3, [pc, #112]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	4a1d      	ldr	r2, [pc, #116]	; (80179f8 <SPI_WriteInFlash+0x214>)
 8017984:	6812      	ldr	r2, [r2, #0]
 8017986:	b291      	uxth	r1, r2
 8017988:	2201      	movs	r2, #1
 801798a:	4618      	mov	r0, r3
 801798c:	f003 ffde 	bl	801b94c <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8017990:	4b20      	ldr	r3, [pc, #128]	; (8017a14 <SPI_WriteInFlash+0x230>)
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	f003 0301 	and.w	r3, r3, #1
 8017998:	2b00      	cmp	r3, #0
 801799a:	d1d8      	bne.n	801794e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 801799c:	2301      	movs	r3, #1
 801799e:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 80179a0:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80179a2:	4b13      	ldr	r3, [pc, #76]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	4a14      	ldr	r2, [pc, #80]	; (80179f8 <SPI_WriteInFlash+0x214>)
 80179a8:	6812      	ldr	r2, [r2, #0]
 80179aa:	b291      	uxth	r1, r2
 80179ac:	2200      	movs	r2, #0
 80179ae:	4618      	mov	r0, r3
 80179b0:	f003 ffcc 	bl	801b94c <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 80179b4:	2204      	movs	r2, #4
 80179b6:	4b19      	ldr	r3, [pc, #100]	; (8017a1c <SPI_WriteInFlash+0x238>)
 80179b8:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80179ba:	2364      	movs	r3, #100	; 0x64
 80179bc:	2201      	movs	r2, #1
 80179be:	4917      	ldr	r1, [pc, #92]	; (8017a1c <SPI_WriteInFlash+0x238>)
 80179c0:	4812      	ldr	r0, [pc, #72]	; (8017a0c <SPI_WriteInFlash+0x228>)
 80179c2:	f006 f865 	bl	801da90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80179c6:	2364      	movs	r3, #100	; 0x64
 80179c8:	2201      	movs	r2, #1
 80179ca:	4912      	ldr	r1, [pc, #72]	; (8017a14 <SPI_WriteInFlash+0x230>)
 80179cc:	480f      	ldr	r0, [pc, #60]	; (8017a0c <SPI_WriteInFlash+0x228>)
 80179ce:	f006 f9cd 	bl	801dd6c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80179d2:	4b07      	ldr	r3, [pc, #28]	; (80179f0 <SPI_WriteInFlash+0x20c>)
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	4a08      	ldr	r2, [pc, #32]	; (80179f8 <SPI_WriteInFlash+0x214>)
 80179d8:	6812      	ldr	r2, [r2, #0]
 80179da:	b291      	uxth	r1, r2
 80179dc:	2201      	movs	r2, #1
 80179de:	4618      	mov	r0, r3
 80179e0:	f003 ffb4 	bl	801b94c <HAL_GPIO_WritePin>

	return Return_Value;
 80179e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80179e6:	4618      	mov	r0, r3
 80179e8:	3718      	adds	r7, #24
 80179ea:	46bd      	mov	sp, r7
 80179ec:	bd80      	pop	{r7, pc}
 80179ee:	bf00      	nop
 80179f0:	2000bc70 	.word	0x2000bc70
 80179f4:	40021800 	.word	0x40021800
 80179f8:	2000bc74 	.word	0x2000bc74
 80179fc:	40020c00 	.word	0x40020c00
 8017a00:	40021000 	.word	0x40021000
 8017a04:	0802b4b0 	.word	0x0802b4b0
 8017a08:	0802d158 	.word	0x0802d158
 8017a0c:	2000bc7c 	.word	0x2000bc7c
 8017a10:	0802d159 	.word	0x0802d159
 8017a14:	2000bc6c 	.word	0x2000bc6c
 8017a18:	0802b4c8 	.word	0x0802b4c8
 8017a1c:	2000bc68 	.word	0x2000bc68

08017a20 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8017a20:	b580      	push	{r7, lr}
 8017a22:	b084      	sub	sp, #16
 8017a24:	af00      	add	r7, sp, #0
 8017a26:	4603      	mov	r3, r0
 8017a28:	6039      	str	r1, [r7, #0]
 8017a2a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8017a2c:	2300      	movs	r3, #0
 8017a2e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8017a30:	79fb      	ldrb	r3, [r7, #7]
 8017a32:	3b01      	subs	r3, #1
 8017a34:	2b03      	cmp	r3, #3
 8017a36:	d829      	bhi.n	8017a8c <SPI_MemoryEraseBySector+0x6c>
 8017a38:	a201      	add	r2, pc, #4	; (adr r2, 8017a40 <SPI_MemoryEraseBySector+0x20>)
 8017a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017a3e:	bf00      	nop
 8017a40:	08017a51 	.word	0x08017a51
 8017a44:	08017a61 	.word	0x08017a61
 8017a48:	08017a6f 	.word	0x08017a6f
 8017a4c:	08017a7d 	.word	0x08017a7d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8017a50:	4b6d      	ldr	r3, [pc, #436]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017a52:	4a6e      	ldr	r2, [pc, #440]	; (8017c0c <SPI_MemoryEraseBySector+0x1ec>)
 8017a54:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8017a56:	4b6e      	ldr	r3, [pc, #440]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017a5c:	601a      	str	r2, [r3, #0]
		break;
 8017a5e:	e018      	b.n	8017a92 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8017a60:	4b69      	ldr	r3, [pc, #420]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017a62:	4a6c      	ldr	r2, [pc, #432]	; (8017c14 <SPI_MemoryEraseBySector+0x1f4>)
 8017a64:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017a66:	4b6a      	ldr	r3, [pc, #424]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017a68:	2220      	movs	r2, #32
 8017a6a:	601a      	str	r2, [r3, #0]
		break;
 8017a6c:	e011      	b.n	8017a92 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8017a6e:	4b66      	ldr	r3, [pc, #408]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017a70:	4a68      	ldr	r2, [pc, #416]	; (8017c14 <SPI_MemoryEraseBySector+0x1f4>)
 8017a72:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017a74:	4b66      	ldr	r3, [pc, #408]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017a76:	2240      	movs	r2, #64	; 0x40
 8017a78:	601a      	str	r2, [r3, #0]
		break;
 8017a7a:	e00a      	b.n	8017a92 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017a7c:	4b62      	ldr	r3, [pc, #392]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017a7e:	4a66      	ldr	r2, [pc, #408]	; (8017c18 <SPI_MemoryEraseBySector+0x1f8>)
 8017a80:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017a82:	4b63      	ldr	r3, [pc, #396]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017a84:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017a88:	601a      	str	r2, [r3, #0]
		break;
 8017a8a:	e002      	b.n	8017a92 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8017a8c:	4863      	ldr	r0, [pc, #396]	; (8017c1c <SPI_MemoryEraseBySector+0x1fc>)
 8017a8e:	f00e fb33 	bl	80260f8 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017a92:	4b5d      	ldr	r3, [pc, #372]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	4a5e      	ldr	r2, [pc, #376]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017a98:	6812      	ldr	r2, [r2, #0]
 8017a9a:	b291      	uxth	r1, r2
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	4618      	mov	r0, r3
 8017aa0:	f003 ff54 	bl	801b94c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8017aa4:	2364      	movs	r3, #100	; 0x64
 8017aa6:	2201      	movs	r2, #1
 8017aa8:	495d      	ldr	r1, [pc, #372]	; (8017c20 <SPI_MemoryEraseBySector+0x200>)
 8017aaa:	485e      	ldr	r0, [pc, #376]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017aac:	f005 fff0 	bl	801da90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017ab0:	4b55      	ldr	r3, [pc, #340]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	4a56      	ldr	r2, [pc, #344]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017ab6:	6812      	ldr	r2, [r2, #0]
 8017ab8:	b291      	uxth	r1, r2
 8017aba:	2201      	movs	r2, #1
 8017abc:	4618      	mov	r0, r3
 8017abe:	f003 ff45 	bl	801b94c <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017ac2:	4b51      	ldr	r3, [pc, #324]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	4a52      	ldr	r2, [pc, #328]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017ac8:	6812      	ldr	r2, [r2, #0]
 8017aca:	b291      	uxth	r1, r2
 8017acc:	2200      	movs	r2, #0
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f003 ff3c 	bl	801b94c <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8017ad4:	2364      	movs	r3, #100	; 0x64
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	4953      	ldr	r1, [pc, #332]	; (8017c28 <SPI_MemoryEraseBySector+0x208>)
 8017ada:	4852      	ldr	r0, [pc, #328]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017adc:	f005 ffd8 	bl	801da90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017ae0:	2364      	movs	r3, #100	; 0x64
 8017ae2:	2201      	movs	r2, #1
 8017ae4:	4951      	ldr	r1, [pc, #324]	; (8017c2c <SPI_MemoryEraseBySector+0x20c>)
 8017ae6:	484f      	ldr	r0, [pc, #316]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017ae8:	f006 f940 	bl	801dd6c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017aec:	4b46      	ldr	r3, [pc, #280]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4a47      	ldr	r2, [pc, #284]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017af2:	6812      	ldr	r2, [r2, #0]
 8017af4:	b291      	uxth	r1, r2
 8017af6:	2201      	movs	r2, #1
 8017af8:	4618      	mov	r0, r3
 8017afa:	f003 ff27 	bl	801b94c <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8017afe:	4b4b      	ldr	r3, [pc, #300]	; (8017c2c <SPI_MemoryEraseBySector+0x20c>)
 8017b00:	781b      	ldrb	r3, [r3, #0]
 8017b02:	f003 0302 	and.w	r3, r3, #2
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d103      	bne.n	8017b12 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8017b0a:	4849      	ldr	r0, [pc, #292]	; (8017c30 <SPI_MemoryEraseBySector+0x210>)
 8017b0c:	f00e fa58 	bl	8025fc0 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017b10:	e7d7      	b.n	8017ac2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8017b12:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017b14:	4b3c      	ldr	r3, [pc, #240]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	4a3d      	ldr	r2, [pc, #244]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017b1a:	6812      	ldr	r2, [r2, #0]
 8017b1c:	b291      	uxth	r1, r2
 8017b1e:	2200      	movs	r2, #0
 8017b20:	4618      	mov	r0, r3
 8017b22:	f003 ff13 	bl	801b94c <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8017b26:	4b43      	ldr	r3, [pc, #268]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b28:	2220      	movs	r2, #32
 8017b2a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8017b2c:	683b      	ldr	r3, [r7, #0]
 8017b2e:	0c1b      	lsrs	r3, r3, #16
 8017b30:	b2da      	uxtb	r2, r3
 8017b32:	4b40      	ldr	r3, [pc, #256]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b34:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017b36:	683b      	ldr	r3, [r7, #0]
 8017b38:	0a1b      	lsrs	r3, r3, #8
 8017b3a:	b2da      	uxtb	r2, r3
 8017b3c:	4b3d      	ldr	r3, [pc, #244]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b3e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8017b40:	683b      	ldr	r3, [r7, #0]
 8017b42:	b2da      	uxtb	r2, r3
 8017b44:	4b3b      	ldr	r3, [pc, #236]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b46:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017b48:	2364      	movs	r3, #100	; 0x64
 8017b4a:	2204      	movs	r2, #4
 8017b4c:	4939      	ldr	r1, [pc, #228]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b4e:	4835      	ldr	r0, [pc, #212]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017b50:	f005 ff9e 	bl	801da90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017b54:	4b2c      	ldr	r3, [pc, #176]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	4a2d      	ldr	r2, [pc, #180]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017b5a:	6812      	ldr	r2, [r2, #0]
 8017b5c:	b291      	uxth	r1, r2
 8017b5e:	2201      	movs	r2, #1
 8017b60:	4618      	mov	r0, r3
 8017b62:	f003 fef3 	bl	801b94c <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017b66:	4b28      	ldr	r3, [pc, #160]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	4a29      	ldr	r2, [pc, #164]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017b6c:	6812      	ldr	r2, [r2, #0]
 8017b6e:	b291      	uxth	r1, r2
 8017b70:	2200      	movs	r2, #0
 8017b72:	4618      	mov	r0, r3
 8017b74:	f003 feea 	bl	801b94c <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8017b78:	2205      	movs	r2, #5
 8017b7a:	4b2e      	ldr	r3, [pc, #184]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b7c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017b7e:	2364      	movs	r3, #100	; 0x64
 8017b80:	2201      	movs	r2, #1
 8017b82:	492c      	ldr	r1, [pc, #176]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017b84:	4827      	ldr	r0, [pc, #156]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017b86:	f005 ff83 	bl	801da90 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017b8a:	2364      	movs	r3, #100	; 0x64
 8017b8c:	2201      	movs	r2, #1
 8017b8e:	4927      	ldr	r1, [pc, #156]	; (8017c2c <SPI_MemoryEraseBySector+0x20c>)
 8017b90:	4824      	ldr	r0, [pc, #144]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017b92:	f006 f8eb 	bl	801dd6c <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017b96:	4b1c      	ldr	r3, [pc, #112]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	4a1d      	ldr	r2, [pc, #116]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017b9c:	6812      	ldr	r2, [r2, #0]
 8017b9e:	b291      	uxth	r1, r2
 8017ba0:	2201      	movs	r2, #1
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f003 fed2 	bl	801b94c <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8017ba8:	4b20      	ldr	r3, [pc, #128]	; (8017c2c <SPI_MemoryEraseBySector+0x20c>)
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	f003 0301 	and.w	r3, r3, #1
 8017bb0:	2b00      	cmp	r3, #0
 8017bb2:	d1d8      	bne.n	8017b66 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8017bb4:	2301      	movs	r3, #1
 8017bb6:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8017bb8:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017bba:	4b13      	ldr	r3, [pc, #76]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4a14      	ldr	r2, [pc, #80]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017bc0:	6812      	ldr	r2, [r2, #0]
 8017bc2:	b291      	uxth	r1, r2
 8017bc4:	2200      	movs	r2, #0
 8017bc6:	4618      	mov	r0, r3
 8017bc8:	f003 fec0 	bl	801b94c <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8017bcc:	2204      	movs	r2, #4
 8017bce:	4b19      	ldr	r3, [pc, #100]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017bd0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8017bd2:	2364      	movs	r3, #100	; 0x64
 8017bd4:	2201      	movs	r2, #1
 8017bd6:	4917      	ldr	r1, [pc, #92]	; (8017c34 <SPI_MemoryEraseBySector+0x214>)
 8017bd8:	4812      	ldr	r0, [pc, #72]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017bda:	f005 ff59 	bl	801da90 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8017bde:	2364      	movs	r3, #100	; 0x64
 8017be0:	2201      	movs	r2, #1
 8017be2:	4912      	ldr	r1, [pc, #72]	; (8017c2c <SPI_MemoryEraseBySector+0x20c>)
 8017be4:	480f      	ldr	r0, [pc, #60]	; (8017c24 <SPI_MemoryEraseBySector+0x204>)
 8017be6:	f006 f8c1 	bl	801dd6c <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017bea:	4b07      	ldr	r3, [pc, #28]	; (8017c08 <SPI_MemoryEraseBySector+0x1e8>)
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	4a08      	ldr	r2, [pc, #32]	; (8017c10 <SPI_MemoryEraseBySector+0x1f0>)
 8017bf0:	6812      	ldr	r2, [r2, #0]
 8017bf2:	b291      	uxth	r1, r2
 8017bf4:	2201      	movs	r2, #1
 8017bf6:	4618      	mov	r0, r3
 8017bf8:	f003 fea8 	bl	801b94c <HAL_GPIO_WritePin>
	return Flash_Erase;
 8017bfc:	68fb      	ldr	r3, [r7, #12]

}
 8017bfe:	4618      	mov	r0, r3
 8017c00:	3710      	adds	r7, #16
 8017c02:	46bd      	mov	sp, r7
 8017c04:	bd80      	pop	{r7, pc}
 8017c06:	bf00      	nop
 8017c08:	2000bc70 	.word	0x2000bc70
 8017c0c:	40021800 	.word	0x40021800
 8017c10:	2000bc74 	.word	0x2000bc74
 8017c14:	40020c00 	.word	0x40020c00
 8017c18:	40021000 	.word	0x40021000
 8017c1c:	0802b4b0 	.word	0x0802b4b0
 8017c20:	0802d158 	.word	0x0802d158
 8017c24:	2000bc7c 	.word	0x2000bc7c
 8017c28:	0802d159 	.word	0x0802d159
 8017c2c:	2000bc6c 	.word	0x2000bc6c
 8017c30:	0802b4ec 	.word	0x0802b4ec
 8017c34:	2000bc68 	.word	0x2000bc68

08017c38 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b084      	sub	sp, #16
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	60b9      	str	r1, [r7, #8]
 8017c40:	607b      	str	r3, [r7, #4]
 8017c42:	4603      	mov	r3, r0
 8017c44:	73fb      	strb	r3, [r7, #15]
 8017c46:	4613      	mov	r3, r2
 8017c48:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8017c4a:	7bfb      	ldrb	r3, [r7, #15]
 8017c4c:	3b01      	subs	r3, #1
 8017c4e:	2b03      	cmp	r3, #3
 8017c50:	d828      	bhi.n	8017ca4 <SPI_ReadFromFlash+0x6c>
 8017c52:	a201      	add	r2, pc, #4	; (adr r2, 8017c58 <SPI_ReadFromFlash+0x20>)
 8017c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017c58:	08017c69 	.word	0x08017c69
 8017c5c:	08017c79 	.word	0x08017c79
 8017c60:	08017c87 	.word	0x08017c87
 8017c64:	08017c95 	.word	0x08017c95
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8017c68:	4b2d      	ldr	r3, [pc, #180]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017c6a:	4a2e      	ldr	r2, [pc, #184]	; (8017d24 <SPI_ReadFromFlash+0xec>)
 8017c6c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8017c6e:	4b2e      	ldr	r3, [pc, #184]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017c74:	601a      	str	r2, [r3, #0]
		break;
 8017c76:	e018      	b.n	8017caa <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8017c78:	4b29      	ldr	r3, [pc, #164]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017c7a:	4a2c      	ldr	r2, [pc, #176]	; (8017d2c <SPI_ReadFromFlash+0xf4>)
 8017c7c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8017c7e:	4b2a      	ldr	r3, [pc, #168]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017c80:	2220      	movs	r2, #32
 8017c82:	601a      	str	r2, [r3, #0]
		break;
 8017c84:	e011      	b.n	8017caa <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8017c86:	4b26      	ldr	r3, [pc, #152]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017c88:	4a28      	ldr	r2, [pc, #160]	; (8017d2c <SPI_ReadFromFlash+0xf4>)
 8017c8a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8017c8c:	4b26      	ldr	r3, [pc, #152]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017c8e:	2240      	movs	r2, #64	; 0x40
 8017c90:	601a      	str	r2, [r3, #0]
		break;
 8017c92:	e00a      	b.n	8017caa <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8017c94:	4b22      	ldr	r3, [pc, #136]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017c96:	4a26      	ldr	r2, [pc, #152]	; (8017d30 <SPI_ReadFromFlash+0xf8>)
 8017c98:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8017c9a:	4b23      	ldr	r3, [pc, #140]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017c9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8017ca0:	601a      	str	r2, [r3, #0]
		break;
 8017ca2:	e002      	b.n	8017caa <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8017ca4:	4823      	ldr	r0, [pc, #140]	; (8017d34 <SPI_ReadFromFlash+0xfc>)
 8017ca6:	f00e fa27 	bl	80260f8 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8017caa:	89bb      	ldrh	r3, [r7, #12]
 8017cac:	461a      	mov	r2, r3
 8017cae:	2100      	movs	r1, #0
 8017cb0:	6878      	ldr	r0, [r7, #4]
 8017cb2:	f00e f89d 	bl	8025df0 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8017cb6:	4b1a      	ldr	r3, [pc, #104]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	4a1b      	ldr	r2, [pc, #108]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017cbc:	6812      	ldr	r2, [r2, #0]
 8017cbe:	b291      	uxth	r1, r2
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	4618      	mov	r0, r3
 8017cc4:	f003 fe42 	bl	801b94c <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8017cc8:	2203      	movs	r2, #3
 8017cca:	4b1b      	ldr	r3, [pc, #108]	; (8017d38 <SPI_ReadFromFlash+0x100>)
 8017ccc:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8017cce:	68bb      	ldr	r3, [r7, #8]
 8017cd0:	0c1b      	lsrs	r3, r3, #16
 8017cd2:	b2da      	uxtb	r2, r3
 8017cd4:	4b18      	ldr	r3, [pc, #96]	; (8017d38 <SPI_ReadFromFlash+0x100>)
 8017cd6:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	0a1b      	lsrs	r3, r3, #8
 8017cdc:	b2da      	uxtb	r2, r3
 8017cde:	4b16      	ldr	r3, [pc, #88]	; (8017d38 <SPI_ReadFromFlash+0x100>)
 8017ce0:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8017ce2:	68bb      	ldr	r3, [r7, #8]
 8017ce4:	b2da      	uxtb	r2, r3
 8017ce6:	4b14      	ldr	r3, [pc, #80]	; (8017d38 <SPI_ReadFromFlash+0x100>)
 8017ce8:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8017cea:	2364      	movs	r3, #100	; 0x64
 8017cec:	2204      	movs	r2, #4
 8017cee:	4912      	ldr	r1, [pc, #72]	; (8017d38 <SPI_ReadFromFlash+0x100>)
 8017cf0:	4812      	ldr	r0, [pc, #72]	; (8017d3c <SPI_ReadFromFlash+0x104>)
 8017cf2:	f005 fecd 	bl	801da90 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8017cf6:	89ba      	ldrh	r2, [r7, #12]
 8017cf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8017cfc:	6879      	ldr	r1, [r7, #4]
 8017cfe:	480f      	ldr	r0, [pc, #60]	; (8017d3c <SPI_ReadFromFlash+0x104>)
 8017d00:	f006 f834 	bl	801dd6c <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8017d04:	4b06      	ldr	r3, [pc, #24]	; (8017d20 <SPI_ReadFromFlash+0xe8>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	4a07      	ldr	r2, [pc, #28]	; (8017d28 <SPI_ReadFromFlash+0xf0>)
 8017d0a:	6812      	ldr	r2, [r2, #0]
 8017d0c:	b291      	uxth	r1, r2
 8017d0e:	2201      	movs	r2, #1
 8017d10:	4618      	mov	r0, r3
 8017d12:	f003 fe1b 	bl	801b94c <HAL_GPIO_WritePin>

}
 8017d16:	bf00      	nop
 8017d18:	3710      	adds	r7, #16
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	2000bc70 	.word	0x2000bc70
 8017d24:	40021800 	.word	0x40021800
 8017d28:	2000bc74 	.word	0x2000bc74
 8017d2c:	40020c00 	.word	0x40020c00
 8017d30:	40021000 	.word	0x40021000
 8017d34:	0802b4b0 	.word	0x0802b4b0
 8017d38:	2000bc68 	.word	0x2000bc68
 8017d3c:	2000bc7c 	.word	0x2000bc7c

08017d40 <Get_Config>:




void Get_Config(void)
{
 8017d40:	b580      	push	{r7, lr}
 8017d42:	b084      	sub	sp, #16
 8017d44:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8017d46:	2300      	movs	r3, #0
 8017d48:	60fb      	str	r3, [r7, #12]

	size_t SIZE = (sizeof(EI_t))+6;
 8017d4a:	f240 335e 	movw	r3, #862	; 0x35e
 8017d4e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	60bb      	str	r3, [r7, #8]

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8017d54:	2300      	movs	r3, #0
 8017d56:	60fb      	str	r3, [r7, #12]
 8017d58:	e01d      	b.n	8017d96 <Get_Config+0x56>
	{
		HAL_Delay(20);
 8017d5a:	2014      	movs	r0, #20
 8017d5c:	f001 fa26 	bl	80191ac <HAL_Delay>
		if(SIZE_VAR <32)
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	2b1f      	cmp	r3, #31
 8017d64:	d809      	bhi.n	8017d7a <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	b29a      	uxth	r2, r3
 8017d6a:	68fb      	ldr	r3, [r7, #12]
 8017d6c:	4938      	ldr	r1, [pc, #224]	; (8017e50 <Get_Config+0x110>)
 8017d6e:	440b      	add	r3, r1
 8017d70:	68f9      	ldr	r1, [r7, #12]
 8017d72:	2001      	movs	r0, #1
 8017d74:	f7ff ff60 	bl	8017c38 <SPI_ReadFromFlash>
 8017d78:	e00a      	b.n	8017d90 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	4a34      	ldr	r2, [pc, #208]	; (8017e50 <Get_Config+0x110>)
 8017d7e:	4413      	add	r3, r2
 8017d80:	2220      	movs	r2, #32
 8017d82:	68f9      	ldr	r1, [r7, #12]
 8017d84:	2001      	movs	r0, #1
 8017d86:	f7ff ff57 	bl	8017c38 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	3b20      	subs	r3, #32
 8017d8e:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	3320      	adds	r3, #32
 8017d94:	60fb      	str	r3, [r7, #12]
 8017d96:	68fa      	ldr	r2, [r7, #12]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	429a      	cmp	r2, r3
 8017d9c:	d3dd      	bcc.n	8017d5a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8017d9e:	f44f 7157 	mov.w	r1, #860	; 0x35c
 8017da2:	482b      	ldr	r0, [pc, #172]	; (8017e50 <Get_Config+0x110>)
 8017da4:	f7fd fb5c 	bl	8015460 <CheckCRC>
 8017da8:	4603      	mov	r3, r0
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d02a      	beq.n	8017e04 <Get_Config+0xc4>
	{
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8017dae:	f44f 7256 	mov.w	r2, #856	; 0x358
 8017db2:	4928      	ldr	r1, [pc, #160]	; (8017e54 <Get_Config+0x114>)
 8017db4:	4828      	ldr	r0, [pc, #160]	; (8017e58 <Get_Config+0x118>)
 8017db6:	f00d fff3 	bl	8025da0 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8017dba:	4a28      	ldr	r2, [pc, #160]	; (8017e5c <Get_Config+0x11c>)
 8017dbc:	2110      	movs	r1, #16
 8017dbe:	2000      	movs	r0, #0
 8017dc0:	f7e8 fc28 	bl	8000614 <ExtractBits>
 8017dc4:	4603      	mov	r3, r0
 8017dc6:	b29a      	uxth	r2, r3
 8017dc8:	4b25      	ldr	r3, [pc, #148]	; (8017e60 <Get_Config+0x120>)
 8017dca:	801a      	strh	r2, [r3, #0]
		DatCrcXchangeSelf_st.App_CRC = EI_Dat_CRC;
 8017dcc:	4b24      	ldr	r3, [pc, #144]	; (8017e60 <Get_Config+0x120>)
 8017dce:	881a      	ldrh	r2, [r3, #0]
 8017dd0:	4b24      	ldr	r3, [pc, #144]	; (8017e64 <Get_Config+0x124>)
 8017dd2:	801a      	strh	r2, [r3, #0]

		printf("\n___________________BUILD DETAILS___________________\n");
 8017dd4:	4824      	ldr	r0, [pc, #144]	; (8017e68 <Get_Config+0x128>)
 8017dd6:	f00e f98f 	bl	80260f8 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 8017dda:	4924      	ldr	r1, [pc, #144]	; (8017e6c <Get_Config+0x12c>)
 8017ddc:	4824      	ldr	r0, [pc, #144]	; (8017e70 <Get_Config+0x130>)
 8017dde:	f00e f8ef 	bl	8025fc0 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8017de2:	4b1f      	ldr	r3, [pc, #124]	; (8017e60 <Get_Config+0x120>)
 8017de4:	881b      	ldrh	r3, [r3, #0]
 8017de6:	4619      	mov	r1, r3
 8017de8:	4822      	ldr	r0, [pc, #136]	; (8017e74 <Get_Config+0x134>)
 8017dea:	f00e f8e9 	bl	8025fc0 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 8017dee:	4b22      	ldr	r3, [pc, #136]	; (8017e78 <Get_Config+0x138>)
 8017df0:	881b      	ldrh	r3, [r3, #0]
 8017df2:	4619      	mov	r1, r3
 8017df4:	4821      	ldr	r0, [pc, #132]	; (8017e7c <Get_Config+0x13c>)
 8017df6:	f00e f8e3 	bl	8025fc0 <iprintf>
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8017dfa:	4b21      	ldr	r3, [pc, #132]	; (8017e80 <Get_Config+0x140>)
 8017dfc:	781b      	ldrb	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d121      	bne.n	8017e46 <Get_Config+0x106>
 8017e02:	e01e      	b.n	8017e42 <Get_Config+0x102>
		printf("\n EI Configuration Structure Size:%u\n",(sizeof(EI_t)));
 8017e04:	f44f 7156 	mov.w	r1, #856	; 0x358
 8017e08:	481e      	ldr	r0, [pc, #120]	; (8017e84 <Get_Config+0x144>)
 8017e0a:	f00e f8d9 	bl	8025fc0 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8017e0e:	4b1e      	ldr	r3, [pc, #120]	; (8017e88 <Get_Config+0x148>)
 8017e10:	4a10      	ldr	r2, [pc, #64]	; (8017e54 <Get_Config+0x114>)
 8017e12:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8017e14:	4b0e      	ldr	r3, [pc, #56]	; (8017e50 <Get_Config+0x110>)
 8017e16:	f893 335b 	ldrb.w	r3, [r3, #859]	; 0x35b
 8017e1a:	4619      	mov	r1, r3
 8017e1c:	4b0c      	ldr	r3, [pc, #48]	; (8017e50 <Get_Config+0x110>)
 8017e1e:	f893 335c 	ldrb.w	r3, [r3, #860]	; 0x35c
 8017e22:	461a      	mov	r2, r3
 8017e24:	4819      	ldr	r0, [pc, #100]	; (8017e8c <Get_Config+0x14c>)
 8017e26:	f00e f8cb 	bl	8025fc0 <iprintf>
		printf("\nCheck for CRC:");
 8017e2a:	4819      	ldr	r0, [pc, #100]	; (8017e90 <Get_Config+0x150>)
 8017e2c:	f00e f8c8 	bl	8025fc0 <iprintf>
		gucFlagUpdate =3;
 8017e30:	4b18      	ldr	r3, [pc, #96]	; (8017e94 <Get_Config+0x154>)
 8017e32:	2203      	movs	r2, #3
 8017e34:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8017e36:	4818      	ldr	r0, [pc, #96]	; (8017e98 <Get_Config+0x158>)
 8017e38:	f00e f95e 	bl	80260f8 <puts>
			Data_Processing();
 8017e3c:	f000 f82e 	bl	8017e9c <Data_Processing>
 8017e40:	e7fc      	b.n	8017e3c <Get_Config+0xfc>
	{
		readCanToStructs();
 8017e42:	f7f9 fa17 	bl	8011274 <readCanToStructs>
	}
}
 8017e46:	bf00      	nop
 8017e48:	3710      	adds	r7, #16
 8017e4a:	46bd      	mov	sp, r7
 8017e4c:	bd80      	pop	{r7, pc}
 8017e4e:	bf00      	nop
 8017e50:	20000bbc 	.word	0x20000bbc
 8017e54:	20000bc0 	.word	0x20000bc0
 8017e58:	20000504 	.word	0x20000504
 8017e5c:	20000f18 	.word	0x20000f18
 8017e60:	2000bc7a 	.word	0x2000bc7a
 8017e64:	20000bb4 	.word	0x20000bb4
 8017e68:	0802b51c 	.word	0x0802b51c
 8017e6c:	20000505 	.word	0x20000505
 8017e70:	0802b554 	.word	0x0802b554
 8017e74:	0802b568 	.word	0x0802b568
 8017e78:	2000bc78 	.word	0x2000bc78
 8017e7c:	0802b578 	.word	0x0802b578
 8017e80:	20000fbf 	.word	0x20000fbf
 8017e84:	0802b58c 	.word	0x0802b58c
 8017e88:	20000500 	.word	0x20000500
 8017e8c:	0802b5b4 	.word	0x0802b5b4
 8017e90:	0802b5c8 	.word	0x0802b5c8
 8017e94:	20000fbd 	.word	0x20000fbd
 8017e98:	0802b5d8 	.word	0x0802b5d8

08017e9c <Data_Processing>:


void Data_Processing(void)
{
 8017e9c:	b580      	push	{r7, lr}
 8017e9e:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8017ea0:	4b0b      	ldr	r3, [pc, #44]	; (8017ed0 <Data_Processing+0x34>)
 8017ea2:	781b      	ldrb	r3, [r3, #0]
 8017ea4:	2b03      	cmp	r3, #3
 8017ea6:	d10e      	bne.n	8017ec6 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 8017ea8:	2000      	movs	r0, #0
 8017eaa:	f7f4 fa97 	bl	800c3dc <CheckForRqst>
 8017eae:	4603      	mov	r3, r0
 8017eb0:	461a      	mov	r2, r3
 8017eb2:	4b08      	ldr	r3, [pc, #32]	; (8017ed4 <Data_Processing+0x38>)
 8017eb4:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 8017eb6:	4b07      	ldr	r3, [pc, #28]	; (8017ed4 <Data_Processing+0x38>)
 8017eb8:	781b      	ldrb	r3, [r3, #0]
 8017eba:	2b01      	cmp	r3, #1
 8017ebc:	d105      	bne.n	8017eca <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 8017ebe:	2000      	movs	r0, #0
 8017ec0:	f000 f80a 	bl	8017ed8 <AutoLoadDat>
		}
		break;
 8017ec4:	e001      	b.n	8017eca <Data_Processing+0x2e>
	default:
		break;
 8017ec6:	bf00      	nop
 8017ec8:	e000      	b.n	8017ecc <Data_Processing+0x30>
		break;
 8017eca:	bf00      	nop
	}
}
 8017ecc:	bf00      	nop
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	20000fbd 	.word	0x20000fbd
 8017ed4:	20000fbe 	.word	0x20000fbe

08017ed8 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b084      	sub	sp, #16
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	4603      	mov	r3, r0
 8017ee0:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8017ee6:	79fb      	ldrb	r3, [r7, #7]
 8017ee8:	b29b      	uxth	r3, r3
 8017eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8017eee:	4934      	ldr	r1, [pc, #208]	; (8017fc0 <AutoLoadDat+0xe8>)
 8017ef0:	4618      	mov	r0, r3
 8017ef2:	f7f4 fc1b 	bl	800c72c <ReadAndFormConfig>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 8017efa:	4832      	ldr	r0, [pc, #200]	; (8017fc4 <AutoLoadDat+0xec>)
 8017efc:	f004 fbbc 	bl	801c678 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8017f00:	7bbb      	ldrb	r3, [r7, #14]
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d921      	bls.n	8017f4a <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8017f06:	4b30      	ldr	r3, [pc, #192]	; (8017fc8 <AutoLoadDat+0xf0>)
 8017f08:	2200      	movs	r2, #0
 8017f0a:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 8017f0c:	4b2c      	ldr	r3, [pc, #176]	; (8017fc0 <AutoLoadDat+0xe8>)
 8017f0e:	785b      	ldrb	r3, [r3, #1]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d107      	bne.n	8017f24 <AutoLoadDat+0x4c>
 8017f14:	4b2a      	ldr	r3, [pc, #168]	; (8017fc0 <AutoLoadDat+0xe8>)
 8017f16:	789b      	ldrb	r3, [r3, #2]
 8017f18:	2b01      	cmp	r3, #1
 8017f1a:	d103      	bne.n	8017f24 <AutoLoadDat+0x4c>
 8017f1c:	4b28      	ldr	r3, [pc, #160]	; (8017fc0 <AutoLoadDat+0xe8>)
 8017f1e:	78db      	ldrb	r3, [r3, #3]
 8017f20:	2b04      	cmp	r3, #4
 8017f22:	d003      	beq.n	8017f2c <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8017f24:	4829      	ldr	r0, [pc, #164]	; (8017fcc <AutoLoadDat+0xf4>)
 8017f26:	f00e f8e7 	bl	80260f8 <puts>
				return;
 8017f2a:	e046      	b.n	8017fba <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8017f2c:	4b28      	ldr	r3, [pc, #160]	; (8017fd0 <AutoLoadDat+0xf8>)
 8017f2e:	4a29      	ldr	r2, [pc, #164]	; (8017fd4 <AutoLoadDat+0xfc>)
 8017f30:	601a      	str	r2, [r3, #0]
			saveConfig();
 8017f32:	f000 f85b 	bl	8017fec <saveConfig>
			gucFlagCheck =1;
 8017f36:	4b28      	ldr	r3, [pc, #160]	; (8017fd8 <AutoLoadDat+0x100>)
 8017f38:	2201      	movs	r2, #1
 8017f3a:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 8017f3c:	4b27      	ldr	r3, [pc, #156]	; (8017fdc <AutoLoadDat+0x104>)
 8017f3e:	2201      	movs	r2, #1
 8017f40:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8017f42:	4827      	ldr	r0, [pc, #156]	; (8017fe0 <AutoLoadDat+0x108>)
 8017f44:	f00e f8d8 	bl	80260f8 <puts>
			break;
 8017f48:	e037      	b.n	8017fba <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 8017f4a:	7bbb      	ldrb	r3, [r7, #14]
 8017f4c:	2b01      	cmp	r3, #1
 8017f4e:	d11b      	bne.n	8017f88 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8017f50:	7bfb      	ldrb	r3, [r7, #15]
 8017f52:	2b03      	cmp	r3, #3
 8017f54:	d109      	bne.n	8017f6a <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 8017f56:	4b1c      	ldr	r3, [pc, #112]	; (8017fc8 <AutoLoadDat+0xf0>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 8017f5c:	79fb      	ldrb	r3, [r7, #7]
 8017f5e:	2203      	movs	r2, #3
 8017f60:	2101      	movs	r1, #1
 8017f62:	4618      	mov	r0, r3
 8017f64:	f7f4 fb96 	bl	800c694 <SendAck>
				break;
 8017f68:	e027      	b.n	8017fba <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 8017f6a:	79fb      	ldrb	r3, [r7, #7]
 8017f6c:	2202      	movs	r2, #2
 8017f6e:	2101      	movs	r1, #1
 8017f70:	4618      	mov	r0, r3
 8017f72:	f7f4 fb8f 	bl	800c694 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8017f76:	f001 f90d 	bl	8019194 <HAL_GetTick>
 8017f7a:	4603      	mov	r3, r0
 8017f7c:	4a19      	ldr	r2, [pc, #100]	; (8017fe4 <AutoLoadDat+0x10c>)
 8017f7e:	6013      	str	r3, [r2, #0]
			AckCount++;
 8017f80:	7bfb      	ldrb	r3, [r7, #15]
 8017f82:	3301      	adds	r3, #1
 8017f84:	73fb      	strb	r3, [r7, #15]
 8017f86:	e7ae      	b.n	8017ee6 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 8017f88:	f001 f904 	bl	8019194 <HAL_GetTick>
 8017f8c:	4602      	mov	r2, r0
 8017f8e:	4b15      	ldr	r3, [pc, #84]	; (8017fe4 <AutoLoadDat+0x10c>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	1ad3      	subs	r3, r2, r3
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	bfb8      	it	lt
 8017f98:	425b      	neglt	r3, r3
 8017f9a:	f247 5230 	movw	r2, #30000	; 0x7530
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	dda1      	ble.n	8017ee6 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8017fa2:	4b09      	ldr	r3, [pc, #36]	; (8017fc8 <AutoLoadDat+0xf0>)
 8017fa4:	2200      	movs	r2, #0
 8017fa6:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 8017fa8:	480f      	ldr	r0, [pc, #60]	; (8017fe8 <AutoLoadDat+0x110>)
 8017faa:	f00e f8a5 	bl	80260f8 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 8017fae:	79fb      	ldrb	r3, [r7, #7]
 8017fb0:	2205      	movs	r2, #5
 8017fb2:	2101      	movs	r1, #1
 8017fb4:	4618      	mov	r0, r3
 8017fb6:	f7f4 fb6d 	bl	800c694 <SendAck>
				break;
			}
		}
	}
}
 8017fba:	3710      	adds	r7, #16
 8017fbc:	46bd      	mov	sp, r7
 8017fbe:	bd80      	pop	{r7, pc}
 8017fc0:	20000bbc 	.word	0x20000bbc
 8017fc4:	2000b414 	.word	0x2000b414
 8017fc8:	20000fbe 	.word	0x20000fbe
 8017fcc:	0802b618 	.word	0x0802b618
 8017fd0:	20000500 	.word	0x20000500
 8017fd4:	20000bc0 	.word	0x20000bc0
 8017fd8:	2000bc64 	.word	0x2000bc64
 8017fdc:	2000bc65 	.word	0x2000bc65
 8017fe0:	0802b630 	.word	0x0802b630
 8017fe4:	20000fc0 	.word	0x20000fc0
 8017fe8:	0802b640 	.word	0x0802b640

08017fec <saveConfig>:

unsigned char saveConfig(void)
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b084      	sub	sp, #16
 8017ff0:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8017ff6:	4825      	ldr	r0, [pc, #148]	; (801808c <saveConfig+0xa0>)
 8017ff8:	f00e f87e 	bl	80260f8 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8017ffc:	2300      	movs	r3, #0
 8017ffe:	60fb      	str	r3, [r7, #12]
 8018000:	e011      	b.n	8018026 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	031b      	lsls	r3, r3, #12
 8018006:	4619      	mov	r1, r3
 8018008:	2001      	movs	r0, #1
 801800a:	f7ff fd09 	bl	8017a20 <SPI_MemoryEraseBySector>
 801800e:	4603      	mov	r3, r0
 8018010:	2b00      	cmp	r3, #0
 8018012:	d005      	beq.n	8018020 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8018014:	481e      	ldr	r0, [pc, #120]	; (8018090 <saveConfig+0xa4>)
 8018016:	f004 fb2f 	bl	801c678 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 801801a:	481e      	ldr	r0, [pc, #120]	; (8018094 <saveConfig+0xa8>)
 801801c:	f00e f86c 	bl	80260f8 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8018020:	68fb      	ldr	r3, [r7, #12]
 8018022:	3301      	adds	r3, #1
 8018024:	60fb      	str	r3, [r7, #12]
 8018026:	68fb      	ldr	r3, [r7, #12]
 8018028:	2b05      	cmp	r3, #5
 801802a:	d9ea      	bls.n	8018002 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 801802c:	f240 335f 	movw	r3, #863	; 0x35f
 8018030:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018036:	2300      	movs	r3, #0
 8018038:	60fb      	str	r3, [r7, #12]
 801803a:	e01d      	b.n	8018078 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 801803c:	4814      	ldr	r0, [pc, #80]	; (8018090 <saveConfig+0xa4>)
 801803e:	f004 fb1b 	bl	801c678 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8018042:	68bb      	ldr	r3, [r7, #8]
 8018044:	2b1f      	cmp	r3, #31
 8018046:	d809      	bhi.n	801805c <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8018048:	68bb      	ldr	r3, [r7, #8]
 801804a:	b29a      	uxth	r2, r3
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	4912      	ldr	r1, [pc, #72]	; (8018098 <saveConfig+0xac>)
 8018050:	440b      	add	r3, r1
 8018052:	68f9      	ldr	r1, [r7, #12]
 8018054:	2001      	movs	r0, #1
 8018056:	f7ff fbc5 	bl	80177e4 <SPI_WriteInFlash>
 801805a:	e00a      	b.n	8018072 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 801805c:	68fb      	ldr	r3, [r7, #12]
 801805e:	4a0e      	ldr	r2, [pc, #56]	; (8018098 <saveConfig+0xac>)
 8018060:	4413      	add	r3, r2
 8018062:	2220      	movs	r2, #32
 8018064:	68f9      	ldr	r1, [r7, #12]
 8018066:	2001      	movs	r0, #1
 8018068:	f7ff fbbc 	bl	80177e4 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 801806c:	68bb      	ldr	r3, [r7, #8]
 801806e:	3b20      	subs	r3, #32
 8018070:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8018072:	68fb      	ldr	r3, [r7, #12]
 8018074:	3320      	adds	r3, #32
 8018076:	60fb      	str	r3, [r7, #12]
 8018078:	68fa      	ldr	r2, [r7, #12]
 801807a:	687b      	ldr	r3, [r7, #4]
 801807c:	429a      	cmp	r2, r3
 801807e:	d3dd      	bcc.n	801803c <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8018080:	4806      	ldr	r0, [pc, #24]	; (801809c <saveConfig+0xb0>)
 8018082:	f00d ff9d 	bl	8025fc0 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 8018086:	f7ff fad9 	bl	801763c <__NVIC_SystemReset>
 801808a:	bf00      	nop
 801808c:	0802b65c 	.word	0x0802b65c
 8018090:	2000b414 	.word	0x2000b414
 8018094:	0802b668 	.word	0x0802b668
 8018098:	20000bbc 	.word	0x20000bbc
 801809c:	0802b67c 	.word	0x0802b67c

080180a0 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80180a4:	4b14      	ldr	r3, [pc, #80]	; (80180f8 <Print_BuildDat_Details+0x58>)
 80180a6:	781b      	ldrb	r3, [r3, #0]
 80180a8:	2b00      	cmp	r3, #0
 80180aa:	d022      	beq.n	80180f2 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80180ac:	4b13      	ldr	r3, [pc, #76]	; (80180fc <Print_BuildDat_Details+0x5c>)
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7f8 f9a1 	bl	80103f8 <HAL_Elaps_Ticks>
 80180b6:	4603      	mov	r3, r0
 80180b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80180bc:	4293      	cmp	r3, r2
 80180be:	d919      	bls.n	80180f4 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80180c0:	480f      	ldr	r0, [pc, #60]	; (8018100 <Print_BuildDat_Details+0x60>)
 80180c2:	f00e f819 	bl	80260f8 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80180c6:	490f      	ldr	r1, [pc, #60]	; (8018104 <Print_BuildDat_Details+0x64>)
 80180c8:	480f      	ldr	r0, [pc, #60]	; (8018108 <Print_BuildDat_Details+0x68>)
 80180ca:	f00d ff79 	bl	8025fc0 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80180ce:	4b0f      	ldr	r3, [pc, #60]	; (801810c <Print_BuildDat_Details+0x6c>)
 80180d0:	881b      	ldrh	r3, [r3, #0]
 80180d2:	4619      	mov	r1, r3
 80180d4:	480e      	ldr	r0, [pc, #56]	; (8018110 <Print_BuildDat_Details+0x70>)
 80180d6:	f00d ff73 	bl	8025fc0 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80180da:	4b0e      	ldr	r3, [pc, #56]	; (8018114 <Print_BuildDat_Details+0x74>)
 80180dc:	881b      	ldrh	r3, [r3, #0]
 80180de:	4619      	mov	r1, r3
 80180e0:	480d      	ldr	r0, [pc, #52]	; (8018118 <Print_BuildDat_Details+0x78>)
 80180e2:	f00d ff6d 	bl	8025fc0 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 80180e6:	f001 f855 	bl	8019194 <HAL_GetTick>
 80180ea:	4603      	mov	r3, r0
 80180ec:	4a03      	ldr	r2, [pc, #12]	; (80180fc <Print_BuildDat_Details+0x5c>)
 80180ee:	6013      	str	r3, [r2, #0]
 80180f0:	e000      	b.n	80180f4 <Print_BuildDat_Details+0x54>
		return;
 80180f2:	bf00      	nop
	}
}
 80180f4:	bd80      	pop	{r7, pc}
 80180f6:	bf00      	nop
 80180f8:	20000bbb 	.word	0x20000bbb
 80180fc:	2000bce0 	.word	0x2000bce0
 8018100:	0802b698 	.word	0x0802b698
 8018104:	20000505 	.word	0x20000505
 8018108:	0802b554 	.word	0x0802b554
 801810c:	2000bc7a 	.word	0x2000bc7a
 8018110:	0802b568 	.word	0x0802b568
 8018114:	2000bc78 	.word	0x2000bc78
 8018118:	0802b578 	.word	0x0802b578

0801811c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b082      	sub	sp, #8
 8018120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8018122:	4b0f      	ldr	r3, [pc, #60]	; (8018160 <HAL_MspInit+0x44>)
 8018124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018126:	4a0e      	ldr	r2, [pc, #56]	; (8018160 <HAL_MspInit+0x44>)
 8018128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801812c:	6413      	str	r3, [r2, #64]	; 0x40
 801812e:	4b0c      	ldr	r3, [pc, #48]	; (8018160 <HAL_MspInit+0x44>)
 8018130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018136:	607b      	str	r3, [r7, #4]
 8018138:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801813a:	4b09      	ldr	r3, [pc, #36]	; (8018160 <HAL_MspInit+0x44>)
 801813c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801813e:	4a08      	ldr	r2, [pc, #32]	; (8018160 <HAL_MspInit+0x44>)
 8018140:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018144:	6453      	str	r3, [r2, #68]	; 0x44
 8018146:	4b06      	ldr	r3, [pc, #24]	; (8018160 <HAL_MspInit+0x44>)
 8018148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801814a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801814e:	603b      	str	r3, [r7, #0]
 8018150:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8018152:	2004      	movs	r0, #4
 8018154:	f001 ff00 	bl	8019f58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8018158:	bf00      	nop
 801815a:	3708      	adds	r7, #8
 801815c:	46bd      	mov	sp, r7
 801815e:	bd80      	pop	{r7, pc}
 8018160:	40023800 	.word	0x40023800

08018164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8018164:	b480      	push	{r7}
 8018166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8018168:	e7fe      	b.n	8018168 <NMI_Handler+0x4>

0801816a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801816a:	b480      	push	{r7}
 801816c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801816e:	e7fe      	b.n	801816e <HardFault_Handler+0x4>

08018170 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8018170:	b480      	push	{r7}
 8018172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8018174:	e7fe      	b.n	8018174 <MemManage_Handler+0x4>

08018176 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8018176:	b480      	push	{r7}
 8018178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801817a:	e7fe      	b.n	801817a <BusFault_Handler+0x4>

0801817c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801817c:	b480      	push	{r7}
 801817e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8018180:	e7fe      	b.n	8018180 <UsageFault_Handler+0x4>

08018182 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8018182:	b480      	push	{r7}
 8018184:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8018186:	bf00      	nop
 8018188:	46bd      	mov	sp, r7
 801818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801818e:	4770      	bx	lr

08018190 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8018190:	b480      	push	{r7}
 8018192:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8018194:	bf00      	nop
 8018196:	46bd      	mov	sp, r7
 8018198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801819c:	4770      	bx	lr

0801819e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801819e:	b480      	push	{r7}
 80181a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80181a2:	bf00      	nop
 80181a4:	46bd      	mov	sp, r7
 80181a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181aa:	4770      	bx	lr

080181ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80181b0:	f000 ffdc 	bl	801916c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80181b4:	bf00      	nop
 80181b6:	bd80      	pop	{r7, pc}

080181b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80181b8:	b580      	push	{r7, lr}
 80181ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80181bc:	2001      	movs	r0, #1
 80181be:	f003 fbf9 	bl	801b9b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80181c2:	bf00      	nop
 80181c4:	bd80      	pop	{r7, pc}

080181c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80181c6:	b580      	push	{r7, lr}
 80181c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80181ca:	2002      	movs	r0, #2
 80181cc:	f003 fbf2 	bl	801b9b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80181d0:	bf00      	nop
 80181d2:	bd80      	pop	{r7, pc}

080181d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80181d8:	4802      	ldr	r0, [pc, #8]	; (80181e4 <TIM4_IRQHandler+0x10>)
 80181da:	f006 fb0f 	bl	801e7fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80181de:	bf00      	nop
 80181e0:	bd80      	pop	{r7, pc}
 80181e2:	bf00      	nop
 80181e4:	2000bce8 	.word	0x2000bce8

080181e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80181ec:	4802      	ldr	r0, [pc, #8]	; (80181f8 <USART1_IRQHandler+0x10>)
 80181ee:	f006 fd29 	bl	801ec44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80181f2:	bf00      	nop
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	bf00      	nop
 80181f8:	2000dc20 	.word	0x2000dc20

080181fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80181fc:	b580      	push	{r7, lr}
 80181fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8018200:	4802      	ldr	r0, [pc, #8]	; (801820c <TIM5_IRQHandler+0x10>)
 8018202:	f006 fafb 	bl	801e7fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8018206:	bf00      	nop
 8018208:	bd80      	pop	{r7, pc}
 801820a:	bf00      	nop
 801820c:	2000bda4 	.word	0x2000bda4

08018210 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8018210:	b580      	push	{r7, lr}
 8018212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8018214:	4802      	ldr	r0, [pc, #8]	; (8018220 <UART4_IRQHandler+0x10>)
 8018216:	f006 fd15 	bl	801ec44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801821a:	bf00      	nop
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	2000d9f8 	.word	0x2000d9f8

08018224 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8018224:	b580      	push	{r7, lr}
 8018226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8018228:	4802      	ldr	r0, [pc, #8]	; (8018234 <UART5_IRQHandler+0x10>)
 801822a:	f006 fd0b 	bl	801ec44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801822e:	bf00      	nop
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	2000dab0 	.word	0x2000dab0

08018238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8018238:	b580      	push	{r7, lr}
 801823a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801823c:	4802      	ldr	r0, [pc, #8]	; (8018248 <TIM6_DAC_IRQHandler+0x10>)
 801823e:	f006 fadd 	bl	801e7fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8018242:	bf00      	nop
 8018244:	bd80      	pop	{r7, pc}
 8018246:	bf00      	nop
 8018248:	2000be60 	.word	0x2000be60

0801824c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801824c:	b580      	push	{r7, lr}
 801824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8018250:	4802      	ldr	r0, [pc, #8]	; (801825c <TIM7_IRQHandler+0x10>)
 8018252:	f006 fad3 	bl	801e7fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8018256:	bf00      	nop
 8018258:	bd80      	pop	{r7, pc}
 801825a:	bf00      	nop
 801825c:	2000bf1c 	.word	0x2000bf1c

08018260 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8018264:	4802      	ldr	r0, [pc, #8]	; (8018270 <ETH_IRQHandler+0x10>)
 8018266:	f002 fac7 	bl	801a7f8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801826a:	bf00      	nop
 801826c:	bd80      	pop	{r7, pc}
 801826e:	bf00      	nop
 8018270:	20012634 	.word	0x20012634

08018274 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8018278:	4802      	ldr	r0, [pc, #8]	; (8018284 <CAN2_RX0_IRQHandler+0x10>)
 801827a:	f001 fb69 	bl	8019950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 801827e:	bf00      	nop
 8018280:	bd80      	pop	{r7, pc}
 8018282:	bf00      	nop
 8018284:	2000b290 	.word	0x2000b290

08018288 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8018288:	b580      	push	{r7, lr}
 801828a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801828c:	4802      	ldr	r0, [pc, #8]	; (8018298 <CAN2_RX1_IRQHandler+0x10>)
 801828e:	f001 fb5f 	bl	8019950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8018292:	bf00      	nop
 8018294:	bd80      	pop	{r7, pc}
 8018296:	bf00      	nop
 8018298:	2000b290 	.word	0x2000b290

0801829c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 801829c:	b580      	push	{r7, lr}
 801829e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80182a0:	4802      	ldr	r0, [pc, #8]	; (80182ac <UART7_IRQHandler+0x10>)
 80182a2:	f006 fccf 	bl	801ec44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80182a6:	bf00      	nop
 80182a8:	bd80      	pop	{r7, pc}
 80182aa:	bf00      	nop
 80182ac:	2000db68 	.word	0x2000db68

080182b0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80182b0:	b580      	push	{r7, lr}
 80182b2:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80182b4:	4802      	ldr	r0, [pc, #8]	; (80182c0 <CAN3_RX0_IRQHandler+0x10>)
 80182b6:	f001 fb4b 	bl	8019950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80182ba:	bf00      	nop
 80182bc:	bd80      	pop	{r7, pc}
 80182be:	bf00      	nop
 80182c0:	2000b2f4 	.word	0x2000b2f4

080182c4 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80182c4:	b580      	push	{r7, lr}
 80182c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80182c8:	4802      	ldr	r0, [pc, #8]	; (80182d4 <CAN3_RX1_IRQHandler+0x10>)
 80182ca:	f001 fb41 	bl	8019950 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80182ce:	bf00      	nop
 80182d0:	bd80      	pop	{r7, pc}
 80182d2:	bf00      	nop
 80182d4:	2000b2f4 	.word	0x2000b2f4

080182d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80182d8:	b480      	push	{r7}
 80182da:	af00      	add	r7, sp, #0
	return 1;
 80182dc:	2301      	movs	r3, #1
}
 80182de:	4618      	mov	r0, r3
 80182e0:	46bd      	mov	sp, r7
 80182e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182e6:	4770      	bx	lr

080182e8 <_kill>:

int _kill(int pid, int sig)
{
 80182e8:	b480      	push	{r7}
 80182ea:	b083      	sub	sp, #12
 80182ec:	af00      	add	r7, sp, #0
 80182ee:	6078      	str	r0, [r7, #4]
 80182f0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80182f2:	4b05      	ldr	r3, [pc, #20]	; (8018308 <_kill+0x20>)
 80182f4:	2216      	movs	r2, #22
 80182f6:	601a      	str	r2, [r3, #0]
	return -1;
 80182f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80182fc:	4618      	mov	r0, r3
 80182fe:	370c      	adds	r7, #12
 8018300:	46bd      	mov	sp, r7
 8018302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018306:	4770      	bx	lr
 8018308:	20016278 	.word	0x20016278

0801830c <_exit>:

void _exit (int status)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b082      	sub	sp, #8
 8018310:	af00      	add	r7, sp, #0
 8018312:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8018314:	f04f 31ff 	mov.w	r1, #4294967295
 8018318:	6878      	ldr	r0, [r7, #4]
 801831a:	f7ff ffe5 	bl	80182e8 <_kill>
	while (1) {}		/* Make sure we hang here */
 801831e:	e7fe      	b.n	801831e <_exit+0x12>

08018320 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b086      	sub	sp, #24
 8018324:	af00      	add	r7, sp, #0
 8018326:	60f8      	str	r0, [r7, #12]
 8018328:	60b9      	str	r1, [r7, #8]
 801832a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801832c:	2300      	movs	r3, #0
 801832e:	617b      	str	r3, [r7, #20]
 8018330:	e00a      	b.n	8018348 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8018332:	f3af 8000 	nop.w
 8018336:	4601      	mov	r1, r0
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	1c5a      	adds	r2, r3, #1
 801833c:	60ba      	str	r2, [r7, #8]
 801833e:	b2ca      	uxtb	r2, r1
 8018340:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	3301      	adds	r3, #1
 8018346:	617b      	str	r3, [r7, #20]
 8018348:	697a      	ldr	r2, [r7, #20]
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	429a      	cmp	r2, r3
 801834e:	dbf0      	blt.n	8018332 <_read+0x12>
	}

return len;
 8018350:	687b      	ldr	r3, [r7, #4]
}
 8018352:	4618      	mov	r0, r3
 8018354:	3718      	adds	r7, #24
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}

0801835a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801835a:	b580      	push	{r7, lr}
 801835c:	b086      	sub	sp, #24
 801835e:	af00      	add	r7, sp, #0
 8018360:	60f8      	str	r0, [r7, #12]
 8018362:	60b9      	str	r1, [r7, #8]
 8018364:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8018366:	2300      	movs	r3, #0
 8018368:	617b      	str	r3, [r7, #20]
 801836a:	e009      	b.n	8018380 <_write+0x26>
	{
		__io_putchar(*ptr++);
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	1c5a      	adds	r2, r3, #1
 8018370:	60ba      	str	r2, [r7, #8]
 8018372:	781b      	ldrb	r3, [r3, #0]
 8018374:	4618      	mov	r0, r3
 8018376:	f7e8 fb8d 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801837a:	697b      	ldr	r3, [r7, #20]
 801837c:	3301      	adds	r3, #1
 801837e:	617b      	str	r3, [r7, #20]
 8018380:	697a      	ldr	r2, [r7, #20]
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	429a      	cmp	r2, r3
 8018386:	dbf1      	blt.n	801836c <_write+0x12>
	}
	return len;
 8018388:	687b      	ldr	r3, [r7, #4]
}
 801838a:	4618      	mov	r0, r3
 801838c:	3718      	adds	r7, #24
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}

08018392 <_close>:

int _close(int file)
{
 8018392:	b480      	push	{r7}
 8018394:	b083      	sub	sp, #12
 8018396:	af00      	add	r7, sp, #0
 8018398:	6078      	str	r0, [r7, #4]
	return -1;
 801839a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801839e:	4618      	mov	r0, r3
 80183a0:	370c      	adds	r7, #12
 80183a2:	46bd      	mov	sp, r7
 80183a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183a8:	4770      	bx	lr

080183aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80183aa:	b480      	push	{r7}
 80183ac:	b083      	sub	sp, #12
 80183ae:	af00      	add	r7, sp, #0
 80183b0:	6078      	str	r0, [r7, #4]
 80183b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80183b4:	683b      	ldr	r3, [r7, #0]
 80183b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80183ba:	605a      	str	r2, [r3, #4]
	return 0;
 80183bc:	2300      	movs	r3, #0
}
 80183be:	4618      	mov	r0, r3
 80183c0:	370c      	adds	r7, #12
 80183c2:	46bd      	mov	sp, r7
 80183c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c8:	4770      	bx	lr

080183ca <_isatty>:

int _isatty(int file)
{
 80183ca:	b480      	push	{r7}
 80183cc:	b083      	sub	sp, #12
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	6078      	str	r0, [r7, #4]
	return 1;
 80183d2:	2301      	movs	r3, #1
}
 80183d4:	4618      	mov	r0, r3
 80183d6:	370c      	adds	r7, #12
 80183d8:	46bd      	mov	sp, r7
 80183da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183de:	4770      	bx	lr

080183e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80183e0:	b480      	push	{r7}
 80183e2:	b085      	sub	sp, #20
 80183e4:	af00      	add	r7, sp, #0
 80183e6:	60f8      	str	r0, [r7, #12]
 80183e8:	60b9      	str	r1, [r7, #8]
 80183ea:	607a      	str	r2, [r7, #4]
	return 0;
 80183ec:	2300      	movs	r3, #0
}
 80183ee:	4618      	mov	r0, r3
 80183f0:	3714      	adds	r7, #20
 80183f2:	46bd      	mov	sp, r7
 80183f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183f8:	4770      	bx	lr
	...

080183fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80183fc:	b480      	push	{r7}
 80183fe:	b087      	sub	sp, #28
 8018400:	af00      	add	r7, sp, #0
 8018402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8018404:	4a14      	ldr	r2, [pc, #80]	; (8018458 <_sbrk+0x5c>)
 8018406:	4b15      	ldr	r3, [pc, #84]	; (801845c <_sbrk+0x60>)
 8018408:	1ad3      	subs	r3, r2, r3
 801840a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801840c:	697b      	ldr	r3, [r7, #20]
 801840e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8018410:	4b13      	ldr	r3, [pc, #76]	; (8018460 <_sbrk+0x64>)
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	2b00      	cmp	r3, #0
 8018416:	d102      	bne.n	801841e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8018418:	4b11      	ldr	r3, [pc, #68]	; (8018460 <_sbrk+0x64>)
 801841a:	4a12      	ldr	r2, [pc, #72]	; (8018464 <_sbrk+0x68>)
 801841c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801841e:	4b10      	ldr	r3, [pc, #64]	; (8018460 <_sbrk+0x64>)
 8018420:	681a      	ldr	r2, [r3, #0]
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	4413      	add	r3, r2
 8018426:	693a      	ldr	r2, [r7, #16]
 8018428:	429a      	cmp	r2, r3
 801842a:	d205      	bcs.n	8018438 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 801842c:	4b0e      	ldr	r3, [pc, #56]	; (8018468 <_sbrk+0x6c>)
 801842e:	220c      	movs	r2, #12
 8018430:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8018432:	f04f 33ff 	mov.w	r3, #4294967295
 8018436:	e009      	b.n	801844c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8018438:	4b09      	ldr	r3, [pc, #36]	; (8018460 <_sbrk+0x64>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801843e:	4b08      	ldr	r3, [pc, #32]	; (8018460 <_sbrk+0x64>)
 8018440:	681a      	ldr	r2, [r3, #0]
 8018442:	687b      	ldr	r3, [r7, #4]
 8018444:	4413      	add	r3, r2
 8018446:	4a06      	ldr	r2, [pc, #24]	; (8018460 <_sbrk+0x64>)
 8018448:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801844a:	68fb      	ldr	r3, [r7, #12]
}
 801844c:	4618      	mov	r0, r3
 801844e:	371c      	adds	r7, #28
 8018450:	46bd      	mov	sp, r7
 8018452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018456:	4770      	bx	lr
 8018458:	20080000 	.word	0x20080000
 801845c:	00000400 	.word	0x00000400
 8018460:	2000bce4 	.word	0x2000bce4
 8018464:	20016280 	.word	0x20016280
 8018468:	20016278 	.word	0x20016278

0801846c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 801846c:	b480      	push	{r7}
 801846e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8018470:	4b06      	ldr	r3, [pc, #24]	; (801848c <SystemInit+0x20>)
 8018472:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018476:	4a05      	ldr	r2, [pc, #20]	; (801848c <SystemInit+0x20>)
 8018478:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801847c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8018480:	bf00      	nop
 8018482:	46bd      	mov	sp, r7
 8018484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018488:	4770      	bx	lr
 801848a:	bf00      	nop
 801848c:	e000ed00 	.word	0xe000ed00

08018490 <MX_UART7_Init>:
  /* USER CODE END UART5_Init 2 */

}
/* UART7 init function */
void MX_UART7_Init(void)
{
 8018490:	b580      	push	{r7, lr}
 8018492:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8018494:	4b16      	ldr	r3, [pc, #88]	; (80184f0 <MX_UART7_Init+0x60>)
 8018496:	4a17      	ldr	r2, [pc, #92]	; (80184f4 <MX_UART7_Init+0x64>)
 8018498:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 801849a:	4b15      	ldr	r3, [pc, #84]	; (80184f0 <MX_UART7_Init+0x60>)
 801849c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80184a0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80184a2:	4b13      	ldr	r3, [pc, #76]	; (80184f0 <MX_UART7_Init+0x60>)
 80184a4:	2200      	movs	r2, #0
 80184a6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80184a8:	4b11      	ldr	r3, [pc, #68]	; (80184f0 <MX_UART7_Init+0x60>)
 80184aa:	2200      	movs	r2, #0
 80184ac:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80184ae:	4b10      	ldr	r3, [pc, #64]	; (80184f0 <MX_UART7_Init+0x60>)
 80184b0:	2200      	movs	r2, #0
 80184b2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80184b4:	4b0e      	ldr	r3, [pc, #56]	; (80184f0 <MX_UART7_Init+0x60>)
 80184b6:	220c      	movs	r2, #12
 80184b8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80184ba:	4b0d      	ldr	r3, [pc, #52]	; (80184f0 <MX_UART7_Init+0x60>)
 80184bc:	2200      	movs	r2, #0
 80184be:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80184c0:	4b0b      	ldr	r3, [pc, #44]	; (80184f0 <MX_UART7_Init+0x60>)
 80184c2:	2200      	movs	r2, #0
 80184c4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80184c6:	4b0a      	ldr	r3, [pc, #40]	; (80184f0 <MX_UART7_Init+0x60>)
 80184c8:	2200      	movs	r2, #0
 80184ca:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80184cc:	4b08      	ldr	r3, [pc, #32]	; (80184f0 <MX_UART7_Init+0x60>)
 80184ce:	2200      	movs	r2, #0
 80184d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80184d2:	4807      	ldr	r0, [pc, #28]	; (80184f0 <MX_UART7_Init+0x60>)
 80184d4:	f006 fad4 	bl	801ea80 <HAL_UART_Init>
 80184d8:	4603      	mov	r3, r0
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d001      	beq.n	80184e2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80184de:	f7ff f85f 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80184e2:	2280      	movs	r2, #128	; 0x80
 80184e4:	4904      	ldr	r1, [pc, #16]	; (80184f8 <MX_UART7_Init+0x68>)
 80184e6:	4802      	ldr	r0, [pc, #8]	; (80184f0 <MX_UART7_Init+0x60>)
 80184e8:	f007 fe36 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END UART7_Init 2 */

}
 80184ec:	bf00      	nop
 80184ee:	bd80      	pop	{r7, pc}
 80184f0:	2000db68 	.word	0x2000db68
 80184f4:	40007800 	.word	0x40007800
 80184f8:	2000d8f8 	.word	0x2000d8f8

080184fc <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018500:	4b16      	ldr	r3, [pc, #88]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018502:	4a17      	ldr	r2, [pc, #92]	; (8018560 <MX_USART1_UART_Init+0x64>)
 8018504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8018506:	4b15      	ldr	r3, [pc, #84]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018508:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 801850c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 801850e:	4b13      	ldr	r3, [pc, #76]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018510:	2200      	movs	r2, #0
 8018512:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8018514:	4b11      	ldr	r3, [pc, #68]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018516:	2200      	movs	r2, #0
 8018518:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801851a:	4b10      	ldr	r3, [pc, #64]	; (801855c <MX_USART1_UART_Init+0x60>)
 801851c:	2200      	movs	r2, #0
 801851e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8018520:	4b0e      	ldr	r3, [pc, #56]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018522:	220c      	movs	r2, #12
 8018524:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018526:	4b0d      	ldr	r3, [pc, #52]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018528:	2200      	movs	r2, #0
 801852a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 801852c:	4b0b      	ldr	r3, [pc, #44]	; (801855c <MX_USART1_UART_Init+0x60>)
 801852e:	2200      	movs	r2, #0
 8018530:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018532:	4b0a      	ldr	r3, [pc, #40]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018534:	2200      	movs	r2, #0
 8018536:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018538:	4b08      	ldr	r3, [pc, #32]	; (801855c <MX_USART1_UART_Init+0x60>)
 801853a:	2200      	movs	r2, #0
 801853c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 801853e:	4807      	ldr	r0, [pc, #28]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018540:	f006 fa9e 	bl	801ea80 <HAL_UART_Init>
 8018544:	4603      	mov	r3, r0
 8018546:	2b00      	cmp	r3, #0
 8018548:	d001      	beq.n	801854e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 801854a:	f7ff f829 	bl	80175a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801854e:	2280      	movs	r2, #128	; 0x80
 8018550:	4904      	ldr	r1, [pc, #16]	; (8018564 <MX_USART1_UART_Init+0x68>)
 8018552:	4802      	ldr	r0, [pc, #8]	; (801855c <MX_USART1_UART_Init+0x60>)
 8018554:	f007 fe00 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8018558:	bf00      	nop
 801855a:	bd80      	pop	{r7, pc}
 801855c:	2000dc20 	.word	0x2000dc20
 8018560:	40011000 	.word	0x40011000
 8018564:	2000d7f8 	.word	0x2000d7f8

08018568 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b0b4      	sub	sp, #208	; 0xd0
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018570:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8018574:	2200      	movs	r2, #0
 8018576:	601a      	str	r2, [r3, #0]
 8018578:	605a      	str	r2, [r3, #4]
 801857a:	609a      	str	r2, [r3, #8]
 801857c:	60da      	str	r2, [r3, #12]
 801857e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8018580:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018584:	2290      	movs	r2, #144	; 0x90
 8018586:	2100      	movs	r1, #0
 8018588:	4618      	mov	r0, r3
 801858a:	f00d fc31 	bl	8025df0 <memset>
  if(uartHandle->Instance==UART4)
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	4aa7      	ldr	r2, [pc, #668]	; (8018830 <HAL_UART_MspInit+0x2c8>)
 8018594:	4293      	cmp	r3, r2
 8018596:	d145      	bne.n	8018624 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8018598:	f44f 7300 	mov.w	r3, #512	; 0x200
 801859c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 801859e:	2300      	movs	r3, #0
 80185a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80185a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80185a6:	4618      	mov	r0, r3
 80185a8:	f004 fd0a 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 80185ac:	4603      	mov	r3, r0
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	d001      	beq.n	80185b6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80185b2:	f7fe fff5 	bl	80175a0 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80185b6:	4b9f      	ldr	r3, [pc, #636]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185ba:	4a9e      	ldr	r2, [pc, #632]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80185c0:	6413      	str	r3, [r2, #64]	; 0x40
 80185c2:	4b9c      	ldr	r3, [pc, #624]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80185c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80185ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80185cc:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80185ce:	4b99      	ldr	r3, [pc, #612]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185d2:	4a98      	ldr	r2, [pc, #608]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185d8:	6313      	str	r3, [r2, #48]	; 0x30
 80185da:	4b96      	ldr	r3, [pc, #600]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80185dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80185de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80185e2:	627b      	str	r3, [r7, #36]	; 0x24
 80185e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 80185e6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80185ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80185ee:	2302      	movs	r3, #2
 80185f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80185f4:	2300      	movs	r3, #0
 80185f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80185fa:	2303      	movs	r3, #3
 80185fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8018600:	2308      	movs	r3, #8
 8018602:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018606:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801860a:	4619      	mov	r1, r3
 801860c:	488a      	ldr	r0, [pc, #552]	; (8018838 <HAL_UART_MspInit+0x2d0>)
 801860e:	f002 ffd9 	bl	801b5c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8018612:	2200      	movs	r2, #0
 8018614:	2105      	movs	r1, #5
 8018616:	2034      	movs	r0, #52	; 0x34
 8018618:	f001 fca9 	bl	8019f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 801861c:	2034      	movs	r0, #52	; 0x34
 801861e:	f001 fcc2 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8018622:	e100      	b.n	8018826 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	681b      	ldr	r3, [r3, #0]
 8018628:	4a84      	ldr	r2, [pc, #528]	; (801883c <HAL_UART_MspInit+0x2d4>)
 801862a:	4293      	cmp	r3, r2
 801862c:	d167      	bne.n	80186fe <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 801862e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018632:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8018634:	2300      	movs	r3, #0
 8018636:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801863a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801863e:	4618      	mov	r0, r3
 8018640:	f004 fcbe 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 8018644:	4603      	mov	r3, r0
 8018646:	2b00      	cmp	r3, #0
 8018648:	d001      	beq.n	801864e <HAL_UART_MspInit+0xe6>
      Error_Handler();
 801864a:	f7fe ffa9 	bl	80175a0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 801864e:	4b79      	ldr	r3, [pc, #484]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018652:	4a78      	ldr	r2, [pc, #480]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018658:	6413      	str	r3, [r2, #64]	; 0x40
 801865a:	4b76      	ldr	r3, [pc, #472]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801865c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801865e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018662:	623b      	str	r3, [r7, #32]
 8018664:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018666:	4b73      	ldr	r3, [pc, #460]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801866a:	4a72      	ldr	r2, [pc, #456]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801866c:	f043 0308 	orr.w	r3, r3, #8
 8018670:	6313      	str	r3, [r2, #48]	; 0x30
 8018672:	4b70      	ldr	r3, [pc, #448]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018676:	f003 0308 	and.w	r3, r3, #8
 801867a:	61fb      	str	r3, [r7, #28]
 801867c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801867e:	4b6d      	ldr	r3, [pc, #436]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018682:	4a6c      	ldr	r2, [pc, #432]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018684:	f043 0302 	orr.w	r3, r3, #2
 8018688:	6313      	str	r3, [r2, #48]	; 0x30
 801868a:	4b6a      	ldr	r3, [pc, #424]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801868e:	f003 0302 	and.w	r3, r3, #2
 8018692:	61bb      	str	r3, [r7, #24]
 8018694:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8018696:	2304      	movs	r3, #4
 8018698:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801869c:	2302      	movs	r3, #2
 801869e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186a2:	2300      	movs	r3, #0
 80186a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80186a8:	2303      	movs	r3, #3
 80186aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80186ae:	2308      	movs	r3, #8
 80186b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80186b4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80186b8:	4619      	mov	r1, r3
 80186ba:	4861      	ldr	r0, [pc, #388]	; (8018840 <HAL_UART_MspInit+0x2d8>)
 80186bc:	f002 ff82 	bl	801b5c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80186c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80186c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80186c8:	2302      	movs	r3, #2
 80186ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80186ce:	2300      	movs	r3, #0
 80186d0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80186d4:	2303      	movs	r3, #3
 80186d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 80186da:	2307      	movs	r3, #7
 80186dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 80186e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80186e4:	4619      	mov	r1, r3
 80186e6:	4857      	ldr	r0, [pc, #348]	; (8018844 <HAL_UART_MspInit+0x2dc>)
 80186e8:	f002 ff6c 	bl	801b5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 80186ec:	2200      	movs	r2, #0
 80186ee:	2105      	movs	r1, #5
 80186f0:	2035      	movs	r0, #53	; 0x35
 80186f2:	f001 fc3c 	bl	8019f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80186f6:	2035      	movs	r0, #53	; 0x35
 80186f8:	f001 fc55 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
}
 80186fc:	e093      	b.n	8018826 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	4a51      	ldr	r2, [pc, #324]	; (8018848 <HAL_UART_MspInit+0x2e0>)
 8018704:	4293      	cmp	r3, r2
 8018706:	d145      	bne.n	8018794 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8018708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801870c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 801870e:	2300      	movs	r3, #0
 8018710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8018714:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018718:	4618      	mov	r0, r3
 801871a:	f004 fc51 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 801871e:	4603      	mov	r3, r0
 8018720:	2b00      	cmp	r3, #0
 8018722:	d001      	beq.n	8018728 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8018724:	f7fe ff3c 	bl	80175a0 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8018728:	4b42      	ldr	r3, [pc, #264]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801872a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801872c:	4a41      	ldr	r2, [pc, #260]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801872e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8018732:	6413      	str	r3, [r2, #64]	; 0x40
 8018734:	4b3f      	ldr	r3, [pc, #252]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018738:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801873c:	617b      	str	r3, [r7, #20]
 801873e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018740:	4b3c      	ldr	r3, [pc, #240]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018744:	4a3b      	ldr	r2, [pc, #236]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 8018746:	f043 0320 	orr.w	r3, r3, #32
 801874a:	6313      	str	r3, [r2, #48]	; 0x30
 801874c:	4b39      	ldr	r3, [pc, #228]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 801874e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018750:	f003 0320 	and.w	r3, r3, #32
 8018754:	613b      	str	r3, [r7, #16]
 8018756:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8018758:	23c0      	movs	r3, #192	; 0xc0
 801875a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801875e:	2302      	movs	r3, #2
 8018760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018764:	2300      	movs	r3, #0
 8018766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801876a:	2303      	movs	r3, #3
 801876c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8018770:	2308      	movs	r3, #8
 8018772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018776:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801877a:	4619      	mov	r1, r3
 801877c:	4833      	ldr	r0, [pc, #204]	; (801884c <HAL_UART_MspInit+0x2e4>)
 801877e:	f002 ff21 	bl	801b5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8018782:	2200      	movs	r2, #0
 8018784:	2105      	movs	r1, #5
 8018786:	2052      	movs	r0, #82	; 0x52
 8018788:	f001 fbf1 	bl	8019f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 801878c:	2052      	movs	r0, #82	; 0x52
 801878e:	f001 fc0a 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
}
 8018792:	e048      	b.n	8018826 <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	4a2d      	ldr	r2, [pc, #180]	; (8018850 <HAL_UART_MspInit+0x2e8>)
 801879a:	4293      	cmp	r3, r2
 801879c:	d143      	bne.n	8018826 <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 801879e:	2340      	movs	r3, #64	; 0x40
 80187a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80187a2:	2300      	movs	r3, #0
 80187a4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80187a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80187aa:	4618      	mov	r0, r3
 80187ac:	f004 fc08 	bl	801cfc0 <HAL_RCCEx_PeriphCLKConfig>
 80187b0:	4603      	mov	r3, r0
 80187b2:	2b00      	cmp	r3, #0
 80187b4:	d001      	beq.n	80187ba <HAL_UART_MspInit+0x252>
      Error_Handler();
 80187b6:	f7fe fef3 	bl	80175a0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80187ba:	4b1e      	ldr	r3, [pc, #120]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187be:	4a1d      	ldr	r2, [pc, #116]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187c0:	f043 0310 	orr.w	r3, r3, #16
 80187c4:	6453      	str	r3, [r2, #68]	; 0x44
 80187c6:	4b1b      	ldr	r3, [pc, #108]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80187ca:	f003 0310 	and.w	r3, r3, #16
 80187ce:	60fb      	str	r3, [r7, #12]
 80187d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80187d2:	4b18      	ldr	r3, [pc, #96]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187d6:	4a17      	ldr	r2, [pc, #92]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187d8:	f043 0301 	orr.w	r3, r3, #1
 80187dc:	6313      	str	r3, [r2, #48]	; 0x30
 80187de:	4b15      	ldr	r3, [pc, #84]	; (8018834 <HAL_UART_MspInit+0x2cc>)
 80187e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187e2:	f003 0301 	and.w	r3, r3, #1
 80187e6:	60bb      	str	r3, [r7, #8]
 80187e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 80187ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80187ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80187f2:	2302      	movs	r3, #2
 80187f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80187f8:	2300      	movs	r3, #0
 80187fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80187fe:	2303      	movs	r3, #3
 8018800:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8018804:	2307      	movs	r3, #7
 8018806:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801880a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801880e:	4619      	mov	r1, r3
 8018810:	4810      	ldr	r0, [pc, #64]	; (8018854 <HAL_UART_MspInit+0x2ec>)
 8018812:	f002 fed7 	bl	801b5c4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8018816:	2200      	movs	r2, #0
 8018818:	2107      	movs	r1, #7
 801881a:	2025      	movs	r0, #37	; 0x25
 801881c:	f001 fba7 	bl	8019f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8018820:	2025      	movs	r0, #37	; 0x25
 8018822:	f001 fbc0 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
}
 8018826:	bf00      	nop
 8018828:	37d0      	adds	r7, #208	; 0xd0
 801882a:	46bd      	mov	sp, r7
 801882c:	bd80      	pop	{r7, pc}
 801882e:	bf00      	nop
 8018830:	40004c00 	.word	0x40004c00
 8018834:	40023800 	.word	0x40023800
 8018838:	40021c00 	.word	0x40021c00
 801883c:	40005000 	.word	0x40005000
 8018840:	40020c00 	.word	0x40020c00
 8018844:	40020400 	.word	0x40020400
 8018848:	40007800 	.word	0x40007800
 801884c:	40021400 	.word	0x40021400
 8018850:	40011000 	.word	0x40011000
 8018854:	40020000 	.word	0x40020000

08018858 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b082      	sub	sp, #8
 801885c:	af00      	add	r7, sp, #0
 801885e:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8018860:	4b17      	ldr	r3, [pc, #92]	; (80188c0 <UART4_Init+0x68>)
 8018862:	4a18      	ldr	r2, [pc, #96]	; (80188c4 <UART4_Init+0x6c>)
 8018864:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8018866:	4a16      	ldr	r2, [pc, #88]	; (80188c0 <UART4_Init+0x68>)
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 801886c:	4b14      	ldr	r3, [pc, #80]	; (80188c0 <UART4_Init+0x68>)
 801886e:	2200      	movs	r2, #0
 8018870:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8018872:	4b13      	ldr	r3, [pc, #76]	; (80188c0 <UART4_Init+0x68>)
 8018874:	2200      	movs	r2, #0
 8018876:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8018878:	4b11      	ldr	r3, [pc, #68]	; (80188c0 <UART4_Init+0x68>)
 801887a:	2200      	movs	r2, #0
 801887c:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 801887e:	4b10      	ldr	r3, [pc, #64]	; (80188c0 <UART4_Init+0x68>)
 8018880:	220c      	movs	r2, #12
 8018882:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018884:	4b0e      	ldr	r3, [pc, #56]	; (80188c0 <UART4_Init+0x68>)
 8018886:	2200      	movs	r2, #0
 8018888:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 801888a:	4b0d      	ldr	r3, [pc, #52]	; (80188c0 <UART4_Init+0x68>)
 801888c:	2200      	movs	r2, #0
 801888e:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8018890:	4b0b      	ldr	r3, [pc, #44]	; (80188c0 <UART4_Init+0x68>)
 8018892:	2200      	movs	r2, #0
 8018894:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018896:	4b0a      	ldr	r3, [pc, #40]	; (80188c0 <UART4_Init+0x68>)
 8018898:	2200      	movs	r2, #0
 801889a:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 801889c:	4808      	ldr	r0, [pc, #32]	; (80188c0 <UART4_Init+0x68>)
 801889e:	f006 f8ef 	bl	801ea80 <HAL_UART_Init>
 80188a2:	4603      	mov	r3, r0
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d001      	beq.n	80188ac <UART4_Init+0x54>
	{
		Error_Handler();
 80188a8:	f7fe fe7a 	bl	80175a0 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80188ac:	2280      	movs	r2, #128	; 0x80
 80188ae:	4906      	ldr	r1, [pc, #24]	; (80188c8 <UART4_Init+0x70>)
 80188b0:	4803      	ldr	r0, [pc, #12]	; (80188c0 <UART4_Init+0x68>)
 80188b2:	f007 fc51 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 80188b6:	bf00      	nop
 80188b8:	3708      	adds	r7, #8
 80188ba:	46bd      	mov	sp, r7
 80188bc:	bd80      	pop	{r7, pc}
 80188be:	bf00      	nop
 80188c0:	2000d9f8 	.word	0x2000d9f8
 80188c4:	40004c00 	.word	0x40004c00
 80188c8:	2000d978 	.word	0x2000d978

080188cc <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80188cc:	b580      	push	{r7, lr}
 80188ce:	b084      	sub	sp, #16
 80188d0:	af00      	add	r7, sp, #0
 80188d2:	6078      	str	r0, [r7, #4]
 80188d4:	460b      	mov	r3, r1
 80188d6:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	4a68      	ldr	r2, [pc, #416]	; (8018a80 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80188de:	4293      	cmp	r3, r2
 80188e0:	d129      	bne.n	8018936 <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80188e2:	2280      	movs	r2, #128	; 0x80
 80188e4:	4967      	ldr	r1, [pc, #412]	; (8018a84 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80188e6:	4868      	ldr	r0, [pc, #416]	; (8018a88 <HAL_UARTEx_RxEventCallback+0x1bc>)
 80188e8:	f007 fc36 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80188ec:	2300      	movs	r3, #0
 80188ee:	81fb      	strh	r3, [r7, #14]
 80188f0:	e017      	b.n	8018922 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 80188f2:	89fa      	ldrh	r2, [r7, #14]
 80188f4:	4b65      	ldr	r3, [pc, #404]	; (8018a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80188f6:	881b      	ldrh	r3, [r3, #0]
 80188f8:	1c59      	adds	r1, r3, #1
 80188fa:	b288      	uxth	r0, r1
 80188fc:	4963      	ldr	r1, [pc, #396]	; (8018a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 80188fe:	8008      	strh	r0, [r1, #0]
 8018900:	4619      	mov	r1, r3
 8018902:	4b60      	ldr	r3, [pc, #384]	; (8018a84 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8018904:	5c9a      	ldrb	r2, [r3, r2]
 8018906:	4b61      	ldr	r3, [pc, #388]	; (8018a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018908:	440b      	add	r3, r1
 801890a:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 801890c:	4b5f      	ldr	r3, [pc, #380]	; (8018a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 801890e:	881b      	ldrh	r3, [r3, #0]
 8018910:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018914:	d302      	bcc.n	801891c <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8018916:	4b5d      	ldr	r3, [pc, #372]	; (8018a8c <HAL_UARTEx_RxEventCallback+0x1c0>)
 8018918:	2200      	movs	r2, #0
 801891a:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 801891c:	89fb      	ldrh	r3, [r7, #14]
 801891e:	3301      	adds	r3, #1
 8018920:	81fb      	strh	r3, [r7, #14]
 8018922:	89fa      	ldrh	r2, [r7, #14]
 8018924:	887b      	ldrh	r3, [r7, #2]
 8018926:	429a      	cmp	r2, r3
 8018928:	d3e3      	bcc.n	80188f2 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 801892a:	f000 fc33 	bl	8019194 <HAL_GetTick>
 801892e:	4603      	mov	r3, r0
 8018930:	4a57      	ldr	r2, [pc, #348]	; (8018a90 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8018932:	6013      	str	r3, [r2, #0]
		{
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8018934:	e0a0      	b.n	8018a78 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART5)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	4a56      	ldr	r2, [pc, #344]	; (8018a94 <HAL_UARTEx_RxEventCallback+0x1c8>)
 801893c:	4293      	cmp	r3, r2
 801893e:	d129      	bne.n	8018994 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018940:	2280      	movs	r2, #128	; 0x80
 8018942:	4955      	ldr	r1, [pc, #340]	; (8018a98 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8018944:	4855      	ldr	r0, [pc, #340]	; (8018a9c <HAL_UARTEx_RxEventCallback+0x1d0>)
 8018946:	f007 fc07 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801894a:	2300      	movs	r3, #0
 801894c:	81bb      	strh	r3, [r7, #12]
 801894e:	e01c      	b.n	801898a <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8018950:	89ba      	ldrh	r2, [r7, #12]
 8018952:	4b53      	ldr	r3, [pc, #332]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018954:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8018958:	1c59      	adds	r1, r3, #1
 801895a:	b288      	uxth	r0, r1
 801895c:	4950      	ldr	r1, [pc, #320]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801895e:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8018962:	4619      	mov	r1, r3
 8018964:	4b4c      	ldr	r3, [pc, #304]	; (8018a98 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8018966:	5c9a      	ldrb	r2, [r3, r2]
 8018968:	4b4d      	ldr	r3, [pc, #308]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801896a:	440b      	add	r3, r1
 801896c:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8018970:	4b4b      	ldr	r3, [pc, #300]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018972:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8018976:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801897a:	d303      	bcc.n	8018984 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 801897c:	4b48      	ldr	r3, [pc, #288]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 801897e:	2200      	movs	r2, #0
 8018980:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8018984:	89bb      	ldrh	r3, [r7, #12]
 8018986:	3301      	adds	r3, #1
 8018988:	81bb      	strh	r3, [r7, #12]
 801898a:	89ba      	ldrh	r2, [r7, #12]
 801898c:	887b      	ldrh	r3, [r7, #2]
 801898e:	429a      	cmp	r2, r3
 8018990:	d3de      	bcc.n	8018950 <HAL_UARTEx_RxEventCallback+0x84>
}
 8018992:	e071      	b.n	8018a78 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART7)
 8018994:	687b      	ldr	r3, [r7, #4]
 8018996:	681b      	ldr	r3, [r3, #0]
 8018998:	4a42      	ldr	r2, [pc, #264]	; (8018aa4 <HAL_UARTEx_RxEventCallback+0x1d8>)
 801899a:	4293      	cmp	r3, r2
 801899c:	d129      	bne.n	80189f2 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801899e:	2280      	movs	r2, #128	; 0x80
 80189a0:	4941      	ldr	r1, [pc, #260]	; (8018aa8 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80189a2:	4842      	ldr	r0, [pc, #264]	; (8018aac <HAL_UARTEx_RxEventCallback+0x1e0>)
 80189a4:	f007 fbd8 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80189a8:	2300      	movs	r3, #0
 80189aa:	817b      	strh	r3, [r7, #10]
 80189ac:	e01c      	b.n	80189e8 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 80189ae:	897a      	ldrh	r2, [r7, #10]
 80189b0:	4b3b      	ldr	r3, [pc, #236]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80189b2:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80189b6:	1c59      	adds	r1, r3, #1
 80189b8:	b288      	uxth	r0, r1
 80189ba:	4939      	ldr	r1, [pc, #228]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80189bc:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 80189c0:	4619      	mov	r1, r3
 80189c2:	4b39      	ldr	r3, [pc, #228]	; (8018aa8 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80189c4:	5c9a      	ldrb	r2, [r3, r2]
 80189c6:	4b36      	ldr	r3, [pc, #216]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80189c8:	440b      	add	r3, r1
 80189ca:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 80189ce:	4b34      	ldr	r3, [pc, #208]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80189d0:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 80189d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80189d8:	d303      	bcc.n	80189e2 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 80189da:	4b31      	ldr	r3, [pc, #196]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 80189dc:	2200      	movs	r2, #0
 80189de:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 80189e2:	897b      	ldrh	r3, [r7, #10]
 80189e4:	3301      	adds	r3, #1
 80189e6:	817b      	strh	r3, [r7, #10]
 80189e8:	897a      	ldrh	r2, [r7, #10]
 80189ea:	887b      	ldrh	r3, [r7, #2]
 80189ec:	429a      	cmp	r2, r3
 80189ee:	d3de      	bcc.n	80189ae <HAL_UARTEx_RxEventCallback+0xe2>
}
 80189f0:	e042      	b.n	8018a78 <HAL_UARTEx_RxEventCallback+0x1ac>
	else if(huart->Instance == UART4)
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	4a2e      	ldr	r2, [pc, #184]	; (8018ab0 <HAL_UARTEx_RxEventCallback+0x1e4>)
 80189f8:	4293      	cmp	r3, r2
 80189fa:	d13d      	bne.n	8018a78 <HAL_UARTEx_RxEventCallback+0x1ac>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80189fc:	2280      	movs	r2, #128	; 0x80
 80189fe:	492d      	ldr	r1, [pc, #180]	; (8018ab4 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8018a00:	482d      	ldr	r0, [pc, #180]	; (8018ab8 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8018a02:	f007 fba9 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8018a06:	2300      	movs	r3, #0
 8018a08:	813b      	strh	r3, [r7, #8]
 8018a0a:	e01c      	b.n	8018a46 <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8018a0c:	893a      	ldrh	r2, [r7, #8]
 8018a0e:	4b24      	ldr	r3, [pc, #144]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018a10:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8018a14:	1c59      	adds	r1, r3, #1
 8018a16:	b288      	uxth	r0, r1
 8018a18:	4921      	ldr	r1, [pc, #132]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018a1a:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8018a1e:	4619      	mov	r1, r3
 8018a20:	4b24      	ldr	r3, [pc, #144]	; (8018ab4 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8018a22:	5c9a      	ldrb	r2, [r3, r2]
 8018a24:	4b1e      	ldr	r3, [pc, #120]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018a26:	440b      	add	r3, r1
 8018a28:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8018a2c:	4b1c      	ldr	r3, [pc, #112]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018a2e:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8018a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018a36:	d303      	bcc.n	8018a40 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8018a38:	4b19      	ldr	r3, [pc, #100]	; (8018aa0 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8018a40:	893b      	ldrh	r3, [r7, #8]
 8018a42:	3301      	adds	r3, #1
 8018a44:	813b      	strh	r3, [r7, #8]
 8018a46:	893a      	ldrh	r2, [r7, #8]
 8018a48:	887b      	ldrh	r3, [r7, #2]
 8018a4a:	429a      	cmp	r2, r3
 8018a4c:	d3de      	bcc.n	8018a0c <HAL_UARTEx_RxEventCallback+0x140>
		if(HAL_Elaps_Ticks(UART4_Intr_Clk) > 50)
 8018a4e:	4b1b      	ldr	r3, [pc, #108]	; (8018abc <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018a50:	681b      	ldr	r3, [r3, #0]
 8018a52:	4618      	mov	r0, r3
 8018a54:	f7f7 fcd0 	bl	80103f8 <HAL_Elaps_Ticks>
 8018a58:	4603      	mov	r3, r0
 8018a5a:	2b32      	cmp	r3, #50	; 0x32
 8018a5c:	d907      	bls.n	8018a6e <HAL_UARTEx_RxEventCallback+0x1a2>
			DataIntervalFound = HAL_Elaps_Ticks(UART4_Intr_Clk);
 8018a5e:	4b17      	ldr	r3, [pc, #92]	; (8018abc <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	4618      	mov	r0, r3
 8018a64:	f7f7 fcc8 	bl	80103f8 <HAL_Elaps_Ticks>
 8018a68:	4603      	mov	r3, r0
 8018a6a:	4a15      	ldr	r2, [pc, #84]	; (8018ac0 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8018a6c:	6013      	str	r3, [r2, #0]
		UART4_Intr_Clk = HAL_GetTick();
 8018a6e:	f000 fb91 	bl	8019194 <HAL_GetTick>
 8018a72:	4603      	mov	r3, r0
 8018a74:	4a11      	ldr	r2, [pc, #68]	; (8018abc <HAL_UARTEx_RxEventCallback+0x1f0>)
 8018a76:	6013      	str	r3, [r2, #0]
}
 8018a78:	bf00      	nop
 8018a7a:	3710      	adds	r7, #16
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}
 8018a80:	40011000 	.word	0x40011000
 8018a84:	2000d7f8 	.word	0x2000d7f8
 8018a88:	2000dc20 	.word	0x2000dc20
 8018a8c:	2000cff4 	.word	0x2000cff4
 8018a90:	2000bfdc 	.word	0x2000bfdc
 8018a94:	40005000 	.word	0x40005000
 8018a98:	2000d878 	.word	0x2000d878
 8018a9c:	2000dab0 	.word	0x2000dab0
 8018aa0:	2000bfe4 	.word	0x2000bfe4
 8018aa4:	40007800 	.word	0x40007800
 8018aa8:	2000d8f8 	.word	0x2000d8f8
 8018aac:	2000db68 	.word	0x2000db68
 8018ab0:	40004c00 	.word	0x40004c00
 8018ab4:	2000d978 	.word	0x2000d978
 8018ab8:	2000d9f8 	.word	0x2000d9f8
 8018abc:	2000bfd8 	.word	0x2000bfd8
 8018ac0:	2000bfe0 	.word	0x2000bfe0

08018ac4 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8018ac4:	b480      	push	{r7}
 8018ac6:	b085      	sub	sp, #20
 8018ac8:	af00      	add	r7, sp, #0
 8018aca:	4603      	mov	r3, r0
 8018acc:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8018ace:	2300      	movs	r3, #0
 8018ad0:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8018ad2:	79fb      	ldrb	r3, [r7, #7]
 8018ad4:	2b00      	cmp	r3, #0
 8018ad6:	d115      	bne.n	8018b04 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8018ad8:	79fa      	ldrb	r2, [r7, #7]
 8018ada:	4918      	ldr	r1, [pc, #96]	; (8018b3c <Com_DataReady+0x78>)
 8018adc:	4613      	mov	r3, r2
 8018ade:	025b      	lsls	r3, r3, #9
 8018ae0:	4413      	add	r3, r2
 8018ae2:	009b      	lsls	r3, r3, #2
 8018ae4:	440b      	add	r3, r1
 8018ae6:	8819      	ldrh	r1, [r3, #0]
 8018ae8:	79fa      	ldrb	r2, [r7, #7]
 8018aea:	4814      	ldr	r0, [pc, #80]	; (8018b3c <Com_DataReady+0x78>)
 8018aec:	4613      	mov	r3, r2
 8018aee:	025b      	lsls	r3, r3, #9
 8018af0:	4413      	add	r3, r2
 8018af2:	009b      	lsls	r3, r3, #2
 8018af4:	4403      	add	r3, r0
 8018af6:	3302      	adds	r3, #2
 8018af8:	881b      	ldrh	r3, [r3, #0]
 8018afa:	4299      	cmp	r1, r3
 8018afc:	d017      	beq.n	8018b2e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8018afe:	2301      	movs	r3, #1
 8018b00:	73fb      	strb	r3, [r7, #15]
 8018b02:	e014      	b.n	8018b2e <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8018b04:	79fa      	ldrb	r2, [r7, #7]
 8018b06:	490e      	ldr	r1, [pc, #56]	; (8018b40 <Com_DataReady+0x7c>)
 8018b08:	4613      	mov	r3, r2
 8018b0a:	021b      	lsls	r3, r3, #8
 8018b0c:	4413      	add	r3, r2
 8018b0e:	009b      	lsls	r3, r3, #2
 8018b10:	440b      	add	r3, r1
 8018b12:	8819      	ldrh	r1, [r3, #0]
 8018b14:	79fa      	ldrb	r2, [r7, #7]
 8018b16:	480a      	ldr	r0, [pc, #40]	; (8018b40 <Com_DataReady+0x7c>)
 8018b18:	4613      	mov	r3, r2
 8018b1a:	021b      	lsls	r3, r3, #8
 8018b1c:	4413      	add	r3, r2
 8018b1e:	009b      	lsls	r3, r3, #2
 8018b20:	4403      	add	r3, r0
 8018b22:	3302      	adds	r3, #2
 8018b24:	881b      	ldrh	r3, [r3, #0]
 8018b26:	4299      	cmp	r1, r3
 8018b28:	d001      	beq.n	8018b2e <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8018b2a:	2301      	movs	r3, #1
 8018b2c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8018b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018b30:	4618      	mov	r0, r3
 8018b32:	3714      	adds	r7, #20
 8018b34:	46bd      	mov	sp, r7
 8018b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b3a:	4770      	bx	lr
 8018b3c:	2000cff4 	.word	0x2000cff4
 8018b40:	2000bfe4 	.word	0x2000bfe4

08018b44 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8018b44:	b4b0      	push	{r4, r5, r7}
 8018b46:	b085      	sub	sp, #20
 8018b48:	af00      	add	r7, sp, #0
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8018b52:	79fb      	ldrb	r3, [r7, #7]
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d135      	bne.n	8018bc4 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8018b58:	79f9      	ldrb	r1, [r7, #7]
 8018b5a:	79fa      	ldrb	r2, [r7, #7]
 8018b5c:	4837      	ldr	r0, [pc, #220]	; (8018c3c <Com_Get_Byte+0xf8>)
 8018b5e:	4613      	mov	r3, r2
 8018b60:	025b      	lsls	r3, r3, #9
 8018b62:	4413      	add	r3, r2
 8018b64:	009b      	lsls	r3, r3, #2
 8018b66:	4403      	add	r3, r0
 8018b68:	3302      	adds	r3, #2
 8018b6a:	8818      	ldrh	r0, [r3, #0]
 8018b6c:	1c43      	adds	r3, r0, #1
 8018b6e:	b29d      	uxth	r5, r3
 8018b70:	4c32      	ldr	r4, [pc, #200]	; (8018c3c <Com_Get_Byte+0xf8>)
 8018b72:	4613      	mov	r3, r2
 8018b74:	025b      	lsls	r3, r3, #9
 8018b76:	4413      	add	r3, r2
 8018b78:	009b      	lsls	r3, r3, #2
 8018b7a:	4423      	add	r3, r4
 8018b7c:	3302      	adds	r3, #2
 8018b7e:	462a      	mov	r2, r5
 8018b80:	801a      	strh	r2, [r3, #0]
 8018b82:	4a2e      	ldr	r2, [pc, #184]	; (8018c3c <Com_Get_Byte+0xf8>)
 8018b84:	460b      	mov	r3, r1
 8018b86:	025b      	lsls	r3, r3, #9
 8018b88:	440b      	add	r3, r1
 8018b8a:	009b      	lsls	r3, r3, #2
 8018b8c:	4413      	add	r3, r2
 8018b8e:	4403      	add	r3, r0
 8018b90:	3304      	adds	r3, #4
 8018b92:	781b      	ldrb	r3, [r3, #0]
 8018b94:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8018b96:	79fa      	ldrb	r2, [r7, #7]
 8018b98:	4928      	ldr	r1, [pc, #160]	; (8018c3c <Com_Get_Byte+0xf8>)
 8018b9a:	4613      	mov	r3, r2
 8018b9c:	025b      	lsls	r3, r3, #9
 8018b9e:	4413      	add	r3, r2
 8018ba0:	009b      	lsls	r3, r3, #2
 8018ba2:	440b      	add	r3, r1
 8018ba4:	3302      	adds	r3, #2
 8018ba6:	881b      	ldrh	r3, [r3, #0]
 8018ba8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8018bac:	d33f      	bcc.n	8018c2e <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8018bae:	79fa      	ldrb	r2, [r7, #7]
 8018bb0:	4922      	ldr	r1, [pc, #136]	; (8018c3c <Com_Get_Byte+0xf8>)
 8018bb2:	4613      	mov	r3, r2
 8018bb4:	025b      	lsls	r3, r3, #9
 8018bb6:	4413      	add	r3, r2
 8018bb8:	009b      	lsls	r3, r3, #2
 8018bba:	440b      	add	r3, r1
 8018bbc:	3302      	adds	r3, #2
 8018bbe:	2200      	movs	r2, #0
 8018bc0:	801a      	strh	r2, [r3, #0]
 8018bc2:	e034      	b.n	8018c2e <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8018bc4:	79f9      	ldrb	r1, [r7, #7]
 8018bc6:	79fa      	ldrb	r2, [r7, #7]
 8018bc8:	481d      	ldr	r0, [pc, #116]	; (8018c40 <Com_Get_Byte+0xfc>)
 8018bca:	4613      	mov	r3, r2
 8018bcc:	021b      	lsls	r3, r3, #8
 8018bce:	4413      	add	r3, r2
 8018bd0:	009b      	lsls	r3, r3, #2
 8018bd2:	4403      	add	r3, r0
 8018bd4:	3302      	adds	r3, #2
 8018bd6:	8818      	ldrh	r0, [r3, #0]
 8018bd8:	1c43      	adds	r3, r0, #1
 8018bda:	b29d      	uxth	r5, r3
 8018bdc:	4c18      	ldr	r4, [pc, #96]	; (8018c40 <Com_Get_Byte+0xfc>)
 8018bde:	4613      	mov	r3, r2
 8018be0:	021b      	lsls	r3, r3, #8
 8018be2:	4413      	add	r3, r2
 8018be4:	009b      	lsls	r3, r3, #2
 8018be6:	4423      	add	r3, r4
 8018be8:	3302      	adds	r3, #2
 8018bea:	462a      	mov	r2, r5
 8018bec:	801a      	strh	r2, [r3, #0]
 8018bee:	4a14      	ldr	r2, [pc, #80]	; (8018c40 <Com_Get_Byte+0xfc>)
 8018bf0:	460b      	mov	r3, r1
 8018bf2:	021b      	lsls	r3, r3, #8
 8018bf4:	440b      	add	r3, r1
 8018bf6:	009b      	lsls	r3, r3, #2
 8018bf8:	4413      	add	r3, r2
 8018bfa:	4403      	add	r3, r0
 8018bfc:	3304      	adds	r3, #4
 8018bfe:	781b      	ldrb	r3, [r3, #0]
 8018c00:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8018c02:	79fa      	ldrb	r2, [r7, #7]
 8018c04:	490e      	ldr	r1, [pc, #56]	; (8018c40 <Com_Get_Byte+0xfc>)
 8018c06:	4613      	mov	r3, r2
 8018c08:	021b      	lsls	r3, r3, #8
 8018c0a:	4413      	add	r3, r2
 8018c0c:	009b      	lsls	r3, r3, #2
 8018c0e:	440b      	add	r3, r1
 8018c10:	3302      	adds	r3, #2
 8018c12:	881b      	ldrh	r3, [r3, #0]
 8018c14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8018c18:	d309      	bcc.n	8018c2e <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8018c1a:	79fa      	ldrb	r2, [r7, #7]
 8018c1c:	4908      	ldr	r1, [pc, #32]	; (8018c40 <Com_Get_Byte+0xfc>)
 8018c1e:	4613      	mov	r3, r2
 8018c20:	021b      	lsls	r3, r3, #8
 8018c22:	4413      	add	r3, r2
 8018c24:	009b      	lsls	r3, r3, #2
 8018c26:	440b      	add	r3, r1
 8018c28:	3302      	adds	r3, #2
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8018c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018c30:	4618      	mov	r0, r3
 8018c32:	3714      	adds	r7, #20
 8018c34:	46bd      	mov	sp, r7
 8018c36:	bcb0      	pop	{r4, r5, r7}
 8018c38:	4770      	bx	lr
 8018c3a:	bf00      	nop
 8018c3c:	2000cff4 	.word	0x2000cff4
 8018c40:	2000bfe4 	.word	0x2000bfe4

08018c44 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8018c44:	b580      	push	{r7, lr}
 8018c46:	b084      	sub	sp, #16
 8018c48:	af00      	add	r7, sp, #0
 8018c4a:	4603      	mov	r3, r0
 8018c4c:	6039      	str	r1, [r7, #0]
 8018c4e:	71fb      	strb	r3, [r7, #7]
 8018c50:	4613      	mov	r3, r2
 8018c52:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8018c54:	2300      	movs	r3, #0
 8018c56:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8018c58:	2300      	movs	r3, #0
 8018c5a:	81fb      	strh	r3, [r7, #14]
 8018c5c:	e03a      	b.n	8018cd4 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8018c5e:	89fb      	ldrh	r3, [r7, #14]
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d00a      	beq.n	8018c7a <CommTransmitMessage+0x36>
 8018c64:	89fb      	ldrh	r3, [r7, #14]
 8018c66:	683a      	ldr	r2, [r7, #0]
 8018c68:	4413      	add	r3, r2
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	2b24      	cmp	r3, #36	; 0x24
 8018c6e:	d104      	bne.n	8018c7a <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8018c70:	79fb      	ldrb	r3, [r7, #7]
 8018c72:	2105      	movs	r1, #5
 8018c74:	4618      	mov	r0, r3
 8018c76:	f000 f835 	bl	8018ce4 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8018c7a:	89fb      	ldrh	r3, [r7, #14]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d00e      	beq.n	8018c9e <CommTransmitMessage+0x5a>
 8018c80:	89fa      	ldrh	r2, [r7, #14]
 8018c82:	88bb      	ldrh	r3, [r7, #4]
 8018c84:	429a      	cmp	r2, r3
 8018c86:	d20a      	bcs.n	8018c9e <CommTransmitMessage+0x5a>
 8018c88:	89fb      	ldrh	r3, [r7, #14]
 8018c8a:	683a      	ldr	r2, [r7, #0]
 8018c8c:	4413      	add	r3, r2
 8018c8e:	781b      	ldrb	r3, [r3, #0]
 8018c90:	2b05      	cmp	r3, #5
 8018c92:	d104      	bne.n	8018c9e <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8018c94:	79fb      	ldrb	r3, [r7, #7]
 8018c96:	2105      	movs	r1, #5
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f000 f823 	bl	8018ce4 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8018c9e:	89fb      	ldrh	r3, [r7, #14]
 8018ca0:	683a      	ldr	r2, [r7, #0]
 8018ca2:	4413      	add	r3, r2
 8018ca4:	781b      	ldrb	r3, [r3, #0]
 8018ca6:	2b26      	cmp	r3, #38	; 0x26
 8018ca8:	d108      	bne.n	8018cbc <CommTransmitMessage+0x78>
 8018caa:	89fa      	ldrh	r2, [r7, #14]
 8018cac:	88bb      	ldrh	r3, [r7, #4]
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d004      	beq.n	8018cbc <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8018cb2:	79fb      	ldrb	r3, [r7, #7]
 8018cb4:	2105      	movs	r1, #5
 8018cb6:	4618      	mov	r0, r3
 8018cb8:	f000 f814 	bl	8018ce4 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8018cbc:	89fb      	ldrh	r3, [r7, #14]
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	4413      	add	r3, r2
 8018cc2:	781a      	ldrb	r2, [r3, #0]
 8018cc4:	79fb      	ldrb	r3, [r7, #7]
 8018cc6:	4611      	mov	r1, r2
 8018cc8:	4618      	mov	r0, r3
 8018cca:	f000 f80b 	bl	8018ce4 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8018cce:	89fb      	ldrh	r3, [r7, #14]
 8018cd0:	3301      	adds	r3, #1
 8018cd2:	81fb      	strh	r3, [r7, #14]
 8018cd4:	89fa      	ldrh	r2, [r7, #14]
 8018cd6:	88bb      	ldrh	r3, [r7, #4]
 8018cd8:	429a      	cmp	r2, r3
 8018cda:	d9c0      	bls.n	8018c5e <CommTransmitMessage+0x1a>
	}

	return;
 8018cdc:	bf00      	nop
}
 8018cde:	3710      	adds	r7, #16
 8018ce0:	46bd      	mov	sp, r7
 8018ce2:	bd80      	pop	{r7, pc}

08018ce4 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8018ce4:	b580      	push	{r7, lr}
 8018ce6:	b084      	sub	sp, #16
 8018ce8:	af00      	add	r7, sp, #0
 8018cea:	4603      	mov	r3, r0
 8018cec:	460a      	mov	r2, r1
 8018cee:	71fb      	strb	r3, [r7, #7]
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8018cf4:	1dbb      	adds	r3, r7, #6
 8018cf6:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8018cf8:	79fb      	ldrb	r3, [r7, #7]
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d107      	bne.n	8018d0e <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8018cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d02:	2201      	movs	r2, #1
 8018d04:	68f9      	ldr	r1, [r7, #12]
 8018d06:	4816      	ldr	r0, [pc, #88]	; (8018d60 <Com_SendByte+0x7c>)
 8018d08:	f005 ff18 	bl	801eb3c <HAL_UART_Transmit>
 8018d0c:	e01f      	b.n	8018d4e <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8018d0e:	79fb      	ldrb	r3, [r7, #7]
 8018d10:	2b01      	cmp	r3, #1
 8018d12:	d107      	bne.n	8018d24 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8018d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d18:	2201      	movs	r2, #1
 8018d1a:	68f9      	ldr	r1, [r7, #12]
 8018d1c:	4811      	ldr	r0, [pc, #68]	; (8018d64 <Com_SendByte+0x80>)
 8018d1e:	f005 ff0d 	bl	801eb3c <HAL_UART_Transmit>
 8018d22:	e014      	b.n	8018d4e <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8018d24:	79fb      	ldrb	r3, [r7, #7]
 8018d26:	2b02      	cmp	r3, #2
 8018d28:	d107      	bne.n	8018d3a <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8018d2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d2e:	2201      	movs	r2, #1
 8018d30:	68f9      	ldr	r1, [r7, #12]
 8018d32:	480d      	ldr	r0, [pc, #52]	; (8018d68 <Com_SendByte+0x84>)
 8018d34:	f005 ff02 	bl	801eb3c <HAL_UART_Transmit>
 8018d38:	e009      	b.n	8018d4e <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8018d3a:	79fb      	ldrb	r3, [r7, #7]
 8018d3c:	2b03      	cmp	r3, #3
 8018d3e:	d106      	bne.n	8018d4e <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8018d40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018d44:	2201      	movs	r2, #1
 8018d46:	68f9      	ldr	r1, [r7, #12]
 8018d48:	4808      	ldr	r0, [pc, #32]	; (8018d6c <Com_SendByte+0x88>)
 8018d4a:	f005 fef7 	bl	801eb3c <HAL_UART_Transmit>
	}

	ptr=NULL;
 8018d4e:	2300      	movs	r3, #0
 8018d50:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8018d52:	68f8      	ldr	r0, [r7, #12]
 8018d54:	f00d f80c 	bl	8025d70 <free>
}
 8018d58:	bf00      	nop
 8018d5a:	3710      	adds	r7, #16
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	bd80      	pop	{r7, pc}
 8018d60:	2000dc20 	.word	0x2000dc20
 8018d64:	2000dab0 	.word	0x2000dab0
 8018d68:	2000db68 	.word	0x2000db68
 8018d6c:	2000d9f8 	.word	0x2000d9f8

08018d70 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018d74:	2280      	movs	r2, #128	; 0x80
 8018d76:	490a      	ldr	r1, [pc, #40]	; (8018da0 <Enable_UART_Interrupts+0x30>)
 8018d78:	480a      	ldr	r0, [pc, #40]	; (8018da4 <Enable_UART_Interrupts+0x34>)
 8018d7a:	f007 f9ed 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018d7e:	2280      	movs	r2, #128	; 0x80
 8018d80:	4909      	ldr	r1, [pc, #36]	; (8018da8 <Enable_UART_Interrupts+0x38>)
 8018d82:	480a      	ldr	r0, [pc, #40]	; (8018dac <Enable_UART_Interrupts+0x3c>)
 8018d84:	f007 f9e8 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018d88:	2280      	movs	r2, #128	; 0x80
 8018d8a:	4909      	ldr	r1, [pc, #36]	; (8018db0 <Enable_UART_Interrupts+0x40>)
 8018d8c:	4809      	ldr	r0, [pc, #36]	; (8018db4 <Enable_UART_Interrupts+0x44>)
 8018d8e:	f007 f9e3 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8018d92:	2280      	movs	r2, #128	; 0x80
 8018d94:	4908      	ldr	r1, [pc, #32]	; (8018db8 <Enable_UART_Interrupts+0x48>)
 8018d96:	4809      	ldr	r0, [pc, #36]	; (8018dbc <Enable_UART_Interrupts+0x4c>)
 8018d98:	f007 f9de 	bl	8020158 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8018d9c:	bf00      	nop
 8018d9e:	bd80      	pop	{r7, pc}
 8018da0:	2000d7f8 	.word	0x2000d7f8
 8018da4:	2000dc20 	.word	0x2000dc20
 8018da8:	2000d878 	.word	0x2000d878
 8018dac:	2000dab0 	.word	0x2000dab0
 8018db0:	2000d8f8 	.word	0x2000d8f8
 8018db4:	2000db68 	.word	0x2000db68
 8018db8:	2000d978 	.word	0x2000d978
 8018dbc:	2000d9f8 	.word	0x2000d9f8

08018dc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8018dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8018df8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8018dc4:	480d      	ldr	r0, [pc, #52]	; (8018dfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8018dc6:	490e      	ldr	r1, [pc, #56]	; (8018e00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8018dc8:	4a0e      	ldr	r2, [pc, #56]	; (8018e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8018dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8018dcc:	e002      	b.n	8018dd4 <LoopCopyDataInit>

08018dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8018dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8018dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8018dd2:	3304      	adds	r3, #4

08018dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8018dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8018dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8018dd8:	d3f9      	bcc.n	8018dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8018dda:	4a0b      	ldr	r2, [pc, #44]	; (8018e08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8018ddc:	4c0b      	ldr	r4, [pc, #44]	; (8018e0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8018dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8018de0:	e001      	b.n	8018de6 <LoopFillZerobss>

08018de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8018de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8018de4:	3204      	adds	r2, #4

08018de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8018de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8018de8:	d3fb      	bcc.n	8018de2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8018dea:	f7ff fb3f 	bl	801846c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8018dee:	f00c ff93 	bl	8025d18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8018df2:	f7fe f9e9 	bl	80171c8 <main>
  bx  lr    
 8018df6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8018df8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8018dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8018e00:	200003a4 	.word	0x200003a4
  ldr r2, =_sidata
 8018e04:	0802d35c 	.word	0x0802d35c
  ldr r2, =_sbss
 8018e08:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8018e0c:	20016280 	.word	0x20016280

08018e10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8018e10:	e7fe      	b.n	8018e10 <ADC_IRQHandler>

08018e12 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8018e12:	b480      	push	{r7}
 8018e14:	b083      	sub	sp, #12
 8018e16:	af00      	add	r7, sp, #0
 8018e18:	6078      	str	r0, [r7, #4]
 8018e1a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	2b00      	cmp	r3, #0
 8018e20:	d00b      	beq.n	8018e3a <DP83848_RegisterBusIO+0x28>
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	68db      	ldr	r3, [r3, #12]
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d007      	beq.n	8018e3a <DP83848_RegisterBusIO+0x28>
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	689b      	ldr	r3, [r3, #8]
 8018e2e:	2b00      	cmp	r3, #0
 8018e30:	d003      	beq.n	8018e3a <DP83848_RegisterBusIO+0x28>
 8018e32:	683b      	ldr	r3, [r7, #0]
 8018e34:	691b      	ldr	r3, [r3, #16]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d102      	bne.n	8018e40 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8018e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3e:	e014      	b.n	8018e6a <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8018e40:	683b      	ldr	r3, [r7, #0]
 8018e42:	681a      	ldr	r2, [r3, #0]
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8018e48:	683b      	ldr	r3, [r7, #0]
 8018e4a:	685a      	ldr	r2, [r3, #4]
 8018e4c:	687b      	ldr	r3, [r7, #4]
 8018e4e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8018e50:	683b      	ldr	r3, [r7, #0]
 8018e52:	68da      	ldr	r2, [r3, #12]
 8018e54:	687b      	ldr	r3, [r7, #4]
 8018e56:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8018e58:	683b      	ldr	r3, [r7, #0]
 8018e5a:	689a      	ldr	r2, [r3, #8]
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8018e60:	683b      	ldr	r3, [r7, #0]
 8018e62:	691a      	ldr	r2, [r3, #16]
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8018e68:	2300      	movs	r3, #0
}
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	370c      	adds	r7, #12
 8018e6e:	46bd      	mov	sp, r7
 8018e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e74:	4770      	bx	lr

08018e76 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8018e76:	b580      	push	{r7, lr}
 8018e78:	b086      	sub	sp, #24
 8018e7a:	af00      	add	r7, sp, #0
 8018e7c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8018e7e:	2300      	movs	r3, #0
 8018e80:	60fb      	str	r3, [r7, #12]
 8018e82:	2300      	movs	r3, #0
 8018e84:	60bb      	str	r3, [r7, #8]
 8018e86:	2300      	movs	r3, #0
 8018e88:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	685b      	ldr	r3, [r3, #4]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d17c      	bne.n	8018f90 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	689b      	ldr	r3, [r3, #8]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d002      	beq.n	8018ea4 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	689b      	ldr	r3, [r3, #8]
 8018ea2:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	2220      	movs	r2, #32
 8018ea8:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8018eaa:	2300      	movs	r3, #0
 8018eac:	617b      	str	r3, [r7, #20]
 8018eae:	e01c      	b.n	8018eea <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	695b      	ldr	r3, [r3, #20]
 8018eb4:	f107 0208 	add.w	r2, r7, #8
 8018eb8:	2119      	movs	r1, #25
 8018eba:	6978      	ldr	r0, [r7, #20]
 8018ebc:	4798      	blx	r3
 8018ebe:	4603      	mov	r3, r0
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	da03      	bge.n	8018ecc <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8018ec4:	f06f 0304 	mvn.w	r3, #4
 8018ec8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8018eca:	e00b      	b.n	8018ee4 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8018ecc:	68bb      	ldr	r3, [r7, #8]
 8018ece:	f003 031f 	and.w	r3, r3, #31
 8018ed2:	697a      	ldr	r2, [r7, #20]
 8018ed4:	429a      	cmp	r2, r3
 8018ed6:	d105      	bne.n	8018ee4 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	697a      	ldr	r2, [r7, #20]
 8018edc:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8018ede:	2300      	movs	r3, #0
 8018ee0:	613b      	str	r3, [r7, #16]
         break;
 8018ee2:	e005      	b.n	8018ef0 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	3301      	adds	r3, #1
 8018ee8:	617b      	str	r3, [r7, #20]
 8018eea:	697b      	ldr	r3, [r7, #20]
 8018eec:	2b1f      	cmp	r3, #31
 8018eee:	d9df      	bls.n	8018eb0 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	2b1f      	cmp	r3, #31
 8018ef6:	d902      	bls.n	8018efe <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8018ef8:	f06f 0302 	mvn.w	r3, #2
 8018efc:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8018efe:	693b      	ldr	r3, [r7, #16]
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	d145      	bne.n	8018f90 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	691b      	ldr	r3, [r3, #16]
 8018f08:	687a      	ldr	r2, [r7, #4]
 8018f0a:	6810      	ldr	r0, [r2, #0]
 8018f0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8018f10:	2100      	movs	r1, #0
 8018f12:	4798      	blx	r3
 8018f14:	4603      	mov	r3, r0
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	db37      	blt.n	8018f8a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	695b      	ldr	r3, [r3, #20]
 8018f1e:	687a      	ldr	r2, [r7, #4]
 8018f20:	6810      	ldr	r0, [r2, #0]
 8018f22:	f107 0208 	add.w	r2, r7, #8
 8018f26:	2100      	movs	r1, #0
 8018f28:	4798      	blx	r3
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	db28      	blt.n	8018f82 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	699b      	ldr	r3, [r3, #24]
 8018f34:	4798      	blx	r3
 8018f36:	4603      	mov	r3, r0
 8018f38:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8018f3a:	e01c      	b.n	8018f76 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	699b      	ldr	r3, [r3, #24]
 8018f40:	4798      	blx	r3
 8018f42:	4603      	mov	r3, r0
 8018f44:	461a      	mov	r2, r3
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	1ad3      	subs	r3, r2, r3
 8018f4a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8018f4e:	d80e      	bhi.n	8018f6e <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	695b      	ldr	r3, [r3, #20]
 8018f54:	687a      	ldr	r2, [r7, #4]
 8018f56:	6810      	ldr	r0, [r2, #0]
 8018f58:	f107 0208 	add.w	r2, r7, #8
 8018f5c:	2100      	movs	r1, #0
 8018f5e:	4798      	blx	r3
 8018f60:	4603      	mov	r3, r0
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	da07      	bge.n	8018f76 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 8018f66:	f06f 0304 	mvn.w	r3, #4
 8018f6a:	613b      	str	r3, [r7, #16]
                 break;
 8018f6c:	e010      	b.n	8018f90 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8018f6e:	f06f 0301 	mvn.w	r3, #1
 8018f72:	613b      	str	r3, [r7, #16]
               break;
 8018f74:	e00c      	b.n	8018f90 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8018f76:	68bb      	ldr	r3, [r7, #8]
 8018f78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d1dd      	bne.n	8018f3c <DP83848_Init+0xc6>
 8018f80:	e006      	b.n	8018f90 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8018f82:	f06f 0304 	mvn.w	r3, #4
 8018f86:	613b      	str	r3, [r7, #16]
 8018f88:	e002      	b.n	8018f90 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 8018f8a:	f06f 0303 	mvn.w	r3, #3
 8018f8e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8018f90:	693b      	ldr	r3, [r7, #16]
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d112      	bne.n	8018fbc <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8018f96:	687b      	ldr	r3, [r7, #4]
 8018f98:	699b      	ldr	r3, [r3, #24]
 8018f9a:	4798      	blx	r3
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8018fa0:	bf00      	nop
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	699b      	ldr	r3, [r3, #24]
 8018fa6:	4798      	blx	r3
 8018fa8:	4603      	mov	r3, r0
 8018faa:	461a      	mov	r2, r3
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	1ad3      	subs	r3, r2, r3
 8018fb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8018fb4:	d9f5      	bls.n	8018fa2 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	2201      	movs	r2, #1
 8018fba:	605a      	str	r2, [r3, #4]
   }

   return status;
 8018fbc:	693b      	ldr	r3, [r7, #16]
 }
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	3718      	adds	r7, #24
 8018fc2:	46bd      	mov	sp, r7
 8018fc4:	bd80      	pop	{r7, pc}

08018fc6 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8018fc6:	b580      	push	{r7, lr}
 8018fc8:	b084      	sub	sp, #16
 8018fca:	af00      	add	r7, sp, #0
 8018fcc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	695b      	ldr	r3, [r3, #20]
 8018fd6:	687a      	ldr	r2, [r7, #4]
 8018fd8:	6810      	ldr	r0, [r2, #0]
 8018fda:	f107 020c 	add.w	r2, r7, #12
 8018fde:	2101      	movs	r1, #1
 8018fe0:	4798      	blx	r3
 8018fe2:	4603      	mov	r3, r0
 8018fe4:	2b00      	cmp	r3, #0
 8018fe6:	da02      	bge.n	8018fee <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8018fe8:	f06f 0304 	mvn.w	r3, #4
 8018fec:	e06e      	b.n	80190cc <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	695b      	ldr	r3, [r3, #20]
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	6810      	ldr	r0, [r2, #0]
 8018ff6:	f107 020c 	add.w	r2, r7, #12
 8018ffa:	2101      	movs	r1, #1
 8018ffc:	4798      	blx	r3
 8018ffe:	4603      	mov	r3, r0
 8019000:	2b00      	cmp	r3, #0
 8019002:	da02      	bge.n	801900a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8019004:	f06f 0304 	mvn.w	r3, #4
 8019008:	e060      	b.n	80190cc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	f003 0304 	and.w	r3, r3, #4
 8019010:	2b00      	cmp	r3, #0
 8019012:	d101      	bne.n	8019018 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8019014:	2301      	movs	r3, #1
 8019016:	e059      	b.n	80190cc <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	695b      	ldr	r3, [r3, #20]
 801901c:	687a      	ldr	r2, [r7, #4]
 801901e:	6810      	ldr	r0, [r2, #0]
 8019020:	f107 020c 	add.w	r2, r7, #12
 8019024:	2100      	movs	r1, #0
 8019026:	4798      	blx	r3
 8019028:	4603      	mov	r3, r0
 801902a:	2b00      	cmp	r3, #0
 801902c:	da02      	bge.n	8019034 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 801902e:	f06f 0304 	mvn.w	r3, #4
 8019032:	e04b      	b.n	80190cc <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801903a:	2b00      	cmp	r3, #0
 801903c:	d11b      	bne.n	8019076 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019044:	2b00      	cmp	r3, #0
 8019046:	d006      	beq.n	8019056 <DP83848_GetLinkState+0x90>
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801904e:	2b00      	cmp	r3, #0
 8019050:	d001      	beq.n	8019056 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8019052:	2302      	movs	r3, #2
 8019054:	e03a      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801905c:	2b00      	cmp	r3, #0
 801905e:	d001      	beq.n	8019064 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8019060:	2303      	movs	r3, #3
 8019062:	e033      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801906a:	2b00      	cmp	r3, #0
 801906c:	d001      	beq.n	8019072 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 801906e:	2304      	movs	r3, #4
 8019070:	e02c      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8019072:	2305      	movs	r3, #5
 8019074:	e02a      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	695b      	ldr	r3, [r3, #20]
 801907a:	687a      	ldr	r2, [r7, #4]
 801907c:	6810      	ldr	r0, [r2, #0]
 801907e:	f107 020c 	add.w	r2, r7, #12
 8019082:	2110      	movs	r1, #16
 8019084:	4798      	blx	r3
 8019086:	4603      	mov	r3, r0
 8019088:	2b00      	cmp	r3, #0
 801908a:	da02      	bge.n	8019092 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 801908c:	f06f 0304 	mvn.w	r3, #4
 8019090:	e01c      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019098:	2b00      	cmp	r3, #0
 801909a:	d101      	bne.n	80190a0 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 801909c:	2306      	movs	r3, #6
 801909e:	e015      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	f003 0306 	and.w	r3, r3, #6
 80190a6:	2b04      	cmp	r3, #4
 80190a8:	d101      	bne.n	80190ae <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80190aa:	2302      	movs	r3, #2
 80190ac:	e00e      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80190ae:	68fb      	ldr	r3, [r7, #12]
 80190b0:	f003 0306 	and.w	r3, r3, #6
 80190b4:	2b00      	cmp	r3, #0
 80190b6:	d101      	bne.n	80190bc <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80190b8:	2303      	movs	r3, #3
 80190ba:	e007      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80190bc:	68fb      	ldr	r3, [r7, #12]
 80190be:	f003 0306 	and.w	r3, r3, #6
 80190c2:	2b06      	cmp	r3, #6
 80190c4:	d101      	bne.n	80190ca <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80190c6:	2304      	movs	r3, #4
 80190c8:	e000      	b.n	80190cc <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80190ca:	2305      	movs	r3, #5
    }
  }
}
 80190cc:	4618      	mov	r0, r3
 80190ce:	3710      	adds	r7, #16
 80190d0:	46bd      	mov	sp, r7
 80190d2:	bd80      	pop	{r7, pc}

080190d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80190d8:	4b0b      	ldr	r3, [pc, #44]	; (8019108 <HAL_Init+0x34>)
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	4a0a      	ldr	r2, [pc, #40]	; (8019108 <HAL_Init+0x34>)
 80190de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80190e2:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80190e4:	4b08      	ldr	r3, [pc, #32]	; (8019108 <HAL_Init+0x34>)
 80190e6:	681b      	ldr	r3, [r3, #0]
 80190e8:	4a07      	ldr	r2, [pc, #28]	; (8019108 <HAL_Init+0x34>)
 80190ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80190ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80190f0:	2003      	movs	r0, #3
 80190f2:	f000 ff31 	bl	8019f58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80190f6:	2007      	movs	r0, #7
 80190f8:	f000 f808 	bl	801910c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80190fc:	f7ff f80e 	bl	801811c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8019100:	2300      	movs	r3, #0
}
 8019102:	4618      	mov	r0, r3
 8019104:	bd80      	pop	{r7, pc}
 8019106:	bf00      	nop
 8019108:	40023c00 	.word	0x40023c00

0801910c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801910c:	b580      	push	{r7, lr}
 801910e:	b082      	sub	sp, #8
 8019110:	af00      	add	r7, sp, #0
 8019112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8019114:	4b12      	ldr	r3, [pc, #72]	; (8019160 <HAL_InitTick+0x54>)
 8019116:	681a      	ldr	r2, [r3, #0]
 8019118:	4b12      	ldr	r3, [pc, #72]	; (8019164 <HAL_InitTick+0x58>)
 801911a:	781b      	ldrb	r3, [r3, #0]
 801911c:	4619      	mov	r1, r3
 801911e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8019122:	fbb3 f3f1 	udiv	r3, r3, r1
 8019126:	fbb2 f3f3 	udiv	r3, r2, r3
 801912a:	4618      	mov	r0, r3
 801912c:	f000 ff49 	bl	8019fc2 <HAL_SYSTICK_Config>
 8019130:	4603      	mov	r3, r0
 8019132:	2b00      	cmp	r3, #0
 8019134:	d001      	beq.n	801913a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8019136:	2301      	movs	r3, #1
 8019138:	e00e      	b.n	8019158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2b0f      	cmp	r3, #15
 801913e:	d80a      	bhi.n	8019156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019140:	2200      	movs	r2, #0
 8019142:	6879      	ldr	r1, [r7, #4]
 8019144:	f04f 30ff 	mov.w	r0, #4294967295
 8019148:	f000 ff11 	bl	8019f6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801914c:	4a06      	ldr	r2, [pc, #24]	; (8019168 <HAL_InitTick+0x5c>)
 801914e:	687b      	ldr	r3, [r7, #4]
 8019150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8019152:	2300      	movs	r3, #0
 8019154:	e000      	b.n	8019158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8019156:	2301      	movs	r3, #1
}
 8019158:	4618      	mov	r0, r3
 801915a:	3708      	adds	r7, #8
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	2000031c 	.word	0x2000031c
 8019164:	20000324 	.word	0x20000324
 8019168:	20000320 	.word	0x20000320

0801916c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801916c:	b480      	push	{r7}
 801916e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8019170:	4b06      	ldr	r3, [pc, #24]	; (801918c <HAL_IncTick+0x20>)
 8019172:	781b      	ldrb	r3, [r3, #0]
 8019174:	461a      	mov	r2, r3
 8019176:	4b06      	ldr	r3, [pc, #24]	; (8019190 <HAL_IncTick+0x24>)
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	4413      	add	r3, r2
 801917c:	4a04      	ldr	r2, [pc, #16]	; (8019190 <HAL_IncTick+0x24>)
 801917e:	6013      	str	r3, [r2, #0]
}
 8019180:	bf00      	nop
 8019182:	46bd      	mov	sp, r7
 8019184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019188:	4770      	bx	lr
 801918a:	bf00      	nop
 801918c:	20000324 	.word	0x20000324
 8019190:	2000dcd8 	.word	0x2000dcd8

08019194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8019194:	b480      	push	{r7}
 8019196:	af00      	add	r7, sp, #0
  return uwTick;
 8019198:	4b03      	ldr	r3, [pc, #12]	; (80191a8 <HAL_GetTick+0x14>)
 801919a:	681b      	ldr	r3, [r3, #0]
}
 801919c:	4618      	mov	r0, r3
 801919e:	46bd      	mov	sp, r7
 80191a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a4:	4770      	bx	lr
 80191a6:	bf00      	nop
 80191a8:	2000dcd8 	.word	0x2000dcd8

080191ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b084      	sub	sp, #16
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80191b4:	f7ff ffee 	bl	8019194 <HAL_GetTick>
 80191b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80191be:	68fb      	ldr	r3, [r7, #12]
 80191c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191c4:	d005      	beq.n	80191d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80191c6:	4b0a      	ldr	r3, [pc, #40]	; (80191f0 <HAL_Delay+0x44>)
 80191c8:	781b      	ldrb	r3, [r3, #0]
 80191ca:	461a      	mov	r2, r3
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	4413      	add	r3, r2
 80191d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80191d2:	bf00      	nop
 80191d4:	f7ff ffde 	bl	8019194 <HAL_GetTick>
 80191d8:	4602      	mov	r2, r0
 80191da:	68bb      	ldr	r3, [r7, #8]
 80191dc:	1ad3      	subs	r3, r2, r3
 80191de:	68fa      	ldr	r2, [r7, #12]
 80191e0:	429a      	cmp	r2, r3
 80191e2:	d8f7      	bhi.n	80191d4 <HAL_Delay+0x28>
  {
  }
}
 80191e4:	bf00      	nop
 80191e6:	bf00      	nop
 80191e8:	3710      	adds	r7, #16
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	bf00      	nop
 80191f0:	20000324 	.word	0x20000324

080191f4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80191f4:	b580      	push	{r7, lr}
 80191f6:	b084      	sub	sp, #16
 80191f8:	af00      	add	r7, sp, #0
 80191fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80191fc:	687b      	ldr	r3, [r7, #4]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d101      	bne.n	8019206 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8019202:	2301      	movs	r3, #1
 8019204:	e11c      	b.n	8019440 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8019206:	687b      	ldr	r3, [r7, #4]
 8019208:	f893 3020 	ldrb.w	r3, [r3, #32]
 801920c:	b2db      	uxtb	r3, r3
 801920e:	2b00      	cmp	r3, #0
 8019210:	d131      	bne.n	8019276 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	4a8c      	ldr	r2, [pc, #560]	; (8019448 <HAL_CAN_Init+0x254>)
 8019216:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8019218:	687b      	ldr	r3, [r7, #4]
 801921a:	4a8c      	ldr	r2, [pc, #560]	; (801944c <HAL_CAN_Init+0x258>)
 801921c:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	4a8b      	ldr	r2, [pc, #556]	; (8019450 <HAL_CAN_Init+0x25c>)
 8019222:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8019224:	687b      	ldr	r3, [r7, #4]
 8019226:	4a8b      	ldr	r2, [pc, #556]	; (8019454 <HAL_CAN_Init+0x260>)
 8019228:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	4a8a      	ldr	r2, [pc, #552]	; (8019458 <HAL_CAN_Init+0x264>)
 801922e:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8019230:	687b      	ldr	r3, [r7, #4]
 8019232:	4a8a      	ldr	r2, [pc, #552]	; (801945c <HAL_CAN_Init+0x268>)
 8019234:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	4a89      	ldr	r2, [pc, #548]	; (8019460 <HAL_CAN_Init+0x26c>)
 801923a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	4a89      	ldr	r2, [pc, #548]	; (8019464 <HAL_CAN_Init+0x270>)
 8019240:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	4a88      	ldr	r2, [pc, #544]	; (8019468 <HAL_CAN_Init+0x274>)
 8019246:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	4a88      	ldr	r2, [pc, #544]	; (801946c <HAL_CAN_Init+0x278>)
 801924c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	4a87      	ldr	r2, [pc, #540]	; (8019470 <HAL_CAN_Init+0x27c>)
 8019252:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	4a87      	ldr	r2, [pc, #540]	; (8019474 <HAL_CAN_Init+0x280>)
 8019258:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	4a86      	ldr	r2, [pc, #536]	; (8019478 <HAL_CAN_Init+0x284>)
 801925e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019264:	2b00      	cmp	r3, #0
 8019266:	d102      	bne.n	801926e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8019268:	687b      	ldr	r3, [r7, #4]
 801926a:	4a84      	ldr	r2, [pc, #528]	; (801947c <HAL_CAN_Init+0x288>)
 801926c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019272:	6878      	ldr	r0, [r7, #4]
 8019274:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019276:	687b      	ldr	r3, [r7, #4]
 8019278:	681b      	ldr	r3, [r3, #0]
 801927a:	681a      	ldr	r2, [r3, #0]
 801927c:	687b      	ldr	r3, [r7, #4]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	f042 0201 	orr.w	r2, r2, #1
 8019284:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019286:	f7ff ff85 	bl	8019194 <HAL_GetTick>
 801928a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801928c:	e012      	b.n	80192b4 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801928e:	f7ff ff81 	bl	8019194 <HAL_GetTick>
 8019292:	4602      	mov	r2, r0
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	1ad3      	subs	r3, r2, r3
 8019298:	2b0a      	cmp	r3, #10
 801929a:	d90b      	bls.n	80192b4 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	2205      	movs	r2, #5
 80192ac:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80192b0:	2301      	movs	r3, #1
 80192b2:	e0c5      	b.n	8019440 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	685b      	ldr	r3, [r3, #4]
 80192ba:	f003 0301 	and.w	r3, r3, #1
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d0e5      	beq.n	801928e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	681b      	ldr	r3, [r3, #0]
 80192c6:	681a      	ldr	r2, [r3, #0]
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f022 0202 	bic.w	r2, r2, #2
 80192d0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80192d2:	f7ff ff5f 	bl	8019194 <HAL_GetTick>
 80192d6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80192d8:	e012      	b.n	8019300 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80192da:	f7ff ff5b 	bl	8019194 <HAL_GetTick>
 80192de:	4602      	mov	r2, r0
 80192e0:	68fb      	ldr	r3, [r7, #12]
 80192e2:	1ad3      	subs	r3, r2, r3
 80192e4:	2b0a      	cmp	r3, #10
 80192e6:	d90b      	bls.n	8019300 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80192f4:	687b      	ldr	r3, [r7, #4]
 80192f6:	2205      	movs	r2, #5
 80192f8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80192fc:	2301      	movs	r3, #1
 80192fe:	e09f      	b.n	8019440 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	681b      	ldr	r3, [r3, #0]
 8019304:	685b      	ldr	r3, [r3, #4]
 8019306:	f003 0302 	and.w	r3, r3, #2
 801930a:	2b00      	cmp	r3, #0
 801930c:	d1e5      	bne.n	80192da <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 801930e:	687b      	ldr	r3, [r7, #4]
 8019310:	7e1b      	ldrb	r3, [r3, #24]
 8019312:	2b01      	cmp	r3, #1
 8019314:	d108      	bne.n	8019328 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	681a      	ldr	r2, [r3, #0]
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	681b      	ldr	r3, [r3, #0]
 8019320:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019324:	601a      	str	r2, [r3, #0]
 8019326:	e007      	b.n	8019338 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	681b      	ldr	r3, [r3, #0]
 801932c:	681a      	ldr	r2, [r3, #0]
 801932e:	687b      	ldr	r3, [r7, #4]
 8019330:	681b      	ldr	r3, [r3, #0]
 8019332:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8019336:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8019338:	687b      	ldr	r3, [r7, #4]
 801933a:	7e5b      	ldrb	r3, [r3, #25]
 801933c:	2b01      	cmp	r3, #1
 801933e:	d108      	bne.n	8019352 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019340:	687b      	ldr	r3, [r7, #4]
 8019342:	681b      	ldr	r3, [r3, #0]
 8019344:	681a      	ldr	r2, [r3, #0]
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801934e:	601a      	str	r2, [r3, #0]
 8019350:	e007      	b.n	8019362 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	681a      	ldr	r2, [r3, #0]
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	681b      	ldr	r3, [r3, #0]
 801935c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019360:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	7e9b      	ldrb	r3, [r3, #26]
 8019366:	2b01      	cmp	r3, #1
 8019368:	d108      	bne.n	801937c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	681b      	ldr	r3, [r3, #0]
 801936e:	681a      	ldr	r2, [r3, #0]
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	f042 0220 	orr.w	r2, r2, #32
 8019378:	601a      	str	r2, [r3, #0]
 801937a:	e007      	b.n	801938c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	681a      	ldr	r2, [r3, #0]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	f022 0220 	bic.w	r2, r2, #32
 801938a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 801938c:	687b      	ldr	r3, [r7, #4]
 801938e:	7edb      	ldrb	r3, [r3, #27]
 8019390:	2b01      	cmp	r3, #1
 8019392:	d108      	bne.n	80193a6 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	681a      	ldr	r2, [r3, #0]
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	f022 0210 	bic.w	r2, r2, #16
 80193a2:	601a      	str	r2, [r3, #0]
 80193a4:	e007      	b.n	80193b6 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	681b      	ldr	r3, [r3, #0]
 80193aa:	681a      	ldr	r2, [r3, #0]
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	f042 0210 	orr.w	r2, r2, #16
 80193b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	7f1b      	ldrb	r3, [r3, #28]
 80193ba:	2b01      	cmp	r3, #1
 80193bc:	d108      	bne.n	80193d0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	681a      	ldr	r2, [r3, #0]
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	681b      	ldr	r3, [r3, #0]
 80193c8:	f042 0208 	orr.w	r2, r2, #8
 80193cc:	601a      	str	r2, [r3, #0]
 80193ce:	e007      	b.n	80193e0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	681b      	ldr	r3, [r3, #0]
 80193d4:	681a      	ldr	r2, [r3, #0]
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681b      	ldr	r3, [r3, #0]
 80193da:	f022 0208 	bic.w	r2, r2, #8
 80193de:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80193e0:	687b      	ldr	r3, [r7, #4]
 80193e2:	7f5b      	ldrb	r3, [r3, #29]
 80193e4:	2b01      	cmp	r3, #1
 80193e6:	d108      	bne.n	80193fa <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	681b      	ldr	r3, [r3, #0]
 80193f2:	f042 0204 	orr.w	r2, r2, #4
 80193f6:	601a      	str	r2, [r3, #0]
 80193f8:	e007      	b.n	801940a <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	681b      	ldr	r3, [r3, #0]
 80193fe:	681a      	ldr	r2, [r3, #0]
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	f022 0204 	bic.w	r2, r2, #4
 8019408:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	689a      	ldr	r2, [r3, #8]
 801940e:	687b      	ldr	r3, [r7, #4]
 8019410:	68db      	ldr	r3, [r3, #12]
 8019412:	431a      	orrs	r2, r3
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	691b      	ldr	r3, [r3, #16]
 8019418:	431a      	orrs	r2, r3
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	695b      	ldr	r3, [r3, #20]
 801941e:	ea42 0103 	orr.w	r1, r2, r3
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	685b      	ldr	r3, [r3, #4]
 8019426:	1e5a      	subs	r2, r3, #1
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	430a      	orrs	r2, r1
 801942e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	2200      	movs	r2, #0
 8019434:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	2201      	movs	r2, #1
 801943a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 801943e:	2300      	movs	r3, #0
}
 8019440:	4618      	mov	r0, r3
 8019442:	3710      	adds	r7, #16
 8019444:	46bd      	mov	sp, r7
 8019446:	bd80      	pop	{r7, pc}
 8019448:	08010f81 	.word	0x08010f81
 801944c:	08019d53 	.word	0x08019d53
 8019450:	0801109d 	.word	0x0801109d
 8019454:	08019d67 	.word	0x08019d67
 8019458:	08019cdb 	.word	0x08019cdb
 801945c:	08019cef 	.word	0x08019cef
 8019460:	08019d03 	.word	0x08019d03
 8019464:	08019d17 	.word	0x08019d17
 8019468:	08019d2b 	.word	0x08019d2b
 801946c:	08019d3f 	.word	0x08019d3f
 8019470:	08019d7b 	.word	0x08019d7b
 8019474:	08019d8f 	.word	0x08019d8f
 8019478:	08019da3 	.word	0x08019da3
 801947c:	08010e1d 	.word	0x08010e1d

08019480 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8019480:	b480      	push	{r7}
 8019482:	b087      	sub	sp, #28
 8019484:	af00      	add	r7, sp, #0
 8019486:	6078      	str	r0, [r7, #4]
 8019488:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	681b      	ldr	r3, [r3, #0]
 801948e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019496:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8019498:	7cfb      	ldrb	r3, [r7, #19]
 801949a:	2b01      	cmp	r3, #1
 801949c:	d003      	beq.n	80194a6 <HAL_CAN_ConfigFilter+0x26>
 801949e:	7cfb      	ldrb	r3, [r7, #19]
 80194a0:	2b02      	cmp	r3, #2
 80194a2:	f040 80c7 	bne.w	8019634 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	4a69      	ldr	r2, [pc, #420]	; (8019650 <HAL_CAN_ConfigFilter+0x1d0>)
 80194ac:	4293      	cmp	r3, r2
 80194ae:	d001      	beq.n	80194b4 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80194b0:	4b68      	ldr	r3, [pc, #416]	; (8019654 <HAL_CAN_ConfigFilter+0x1d4>)
 80194b2:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80194ba:	f043 0201 	orr.w	r2, r3, #1
 80194be:	697b      	ldr	r3, [r7, #20]
 80194c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80194c4:	697b      	ldr	r3, [r7, #20]
 80194c6:	4a63      	ldr	r2, [pc, #396]	; (8019654 <HAL_CAN_ConfigFilter+0x1d4>)
 80194c8:	4293      	cmp	r3, r2
 80194ca:	d111      	bne.n	80194f0 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80194cc:	697b      	ldr	r3, [r7, #20]
 80194ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80194d2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80194d6:	697b      	ldr	r3, [r7, #20]
 80194d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80194dc:	697b      	ldr	r3, [r7, #20]
 80194de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80194e2:	683b      	ldr	r3, [r7, #0]
 80194e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194e6:	021b      	lsls	r3, r3, #8
 80194e8:	431a      	orrs	r2, r3
 80194ea:	697b      	ldr	r3, [r7, #20]
 80194ec:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80194f0:	683b      	ldr	r3, [r7, #0]
 80194f2:	695b      	ldr	r3, [r3, #20]
 80194f4:	f003 031f 	and.w	r3, r3, #31
 80194f8:	2201      	movs	r2, #1
 80194fa:	fa02 f303 	lsl.w	r3, r2, r3
 80194fe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8019500:	697b      	ldr	r3, [r7, #20]
 8019502:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019506:	68fb      	ldr	r3, [r7, #12]
 8019508:	43db      	mvns	r3, r3
 801950a:	401a      	ands	r2, r3
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8019512:	683b      	ldr	r3, [r7, #0]
 8019514:	69db      	ldr	r3, [r3, #28]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d123      	bne.n	8019562 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801951a:	697b      	ldr	r3, [r7, #20]
 801951c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019520:	68fb      	ldr	r3, [r7, #12]
 8019522:	43db      	mvns	r3, r3
 8019524:	401a      	ands	r2, r3
 8019526:	697b      	ldr	r3, [r7, #20]
 8019528:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801952c:	683b      	ldr	r3, [r7, #0]
 801952e:	68db      	ldr	r3, [r3, #12]
 8019530:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019532:	683b      	ldr	r3, [r7, #0]
 8019534:	685b      	ldr	r3, [r3, #4]
 8019536:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019538:	683a      	ldr	r2, [r7, #0]
 801953a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 801953c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	3248      	adds	r2, #72	; 0x48
 8019542:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019546:	683b      	ldr	r3, [r7, #0]
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 801954c:	683b      	ldr	r3, [r7, #0]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019552:	683b      	ldr	r3, [r7, #0]
 8019554:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019556:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8019558:	6979      	ldr	r1, [r7, #20]
 801955a:	3348      	adds	r3, #72	; 0x48
 801955c:	00db      	lsls	r3, r3, #3
 801955e:	440b      	add	r3, r1
 8019560:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8019562:	683b      	ldr	r3, [r7, #0]
 8019564:	69db      	ldr	r3, [r3, #28]
 8019566:	2b01      	cmp	r3, #1
 8019568:	d122      	bne.n	80195b0 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801956a:	697b      	ldr	r3, [r7, #20]
 801956c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8019570:	68fb      	ldr	r3, [r7, #12]
 8019572:	431a      	orrs	r2, r3
 8019574:	697b      	ldr	r3, [r7, #20]
 8019576:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801957a:	683b      	ldr	r3, [r7, #0]
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8019580:	683b      	ldr	r3, [r7, #0]
 8019582:	685b      	ldr	r3, [r3, #4]
 8019584:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8019586:	683a      	ldr	r2, [r7, #0]
 8019588:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801958a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801958c:	697b      	ldr	r3, [r7, #20]
 801958e:	3248      	adds	r2, #72	; 0x48
 8019590:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8019594:	683b      	ldr	r3, [r7, #0]
 8019596:	689b      	ldr	r3, [r3, #8]
 8019598:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801959a:	683b      	ldr	r3, [r7, #0]
 801959c:	68db      	ldr	r3, [r3, #12]
 801959e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80195a0:	683b      	ldr	r3, [r7, #0]
 80195a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80195a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80195a6:	6979      	ldr	r1, [r7, #20]
 80195a8:	3348      	adds	r3, #72	; 0x48
 80195aa:	00db      	lsls	r3, r3, #3
 80195ac:	440b      	add	r3, r1
 80195ae:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80195b0:	683b      	ldr	r3, [r7, #0]
 80195b2:	699b      	ldr	r3, [r3, #24]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d109      	bne.n	80195cc <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80195b8:	697b      	ldr	r3, [r7, #20]
 80195ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	43db      	mvns	r3, r3
 80195c2:	401a      	ands	r2, r3
 80195c4:	697b      	ldr	r3, [r7, #20]
 80195c6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80195ca:	e007      	b.n	80195dc <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80195cc:	697b      	ldr	r3, [r7, #20]
 80195ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80195d2:	68fb      	ldr	r3, [r7, #12]
 80195d4:	431a      	orrs	r2, r3
 80195d6:	697b      	ldr	r3, [r7, #20]
 80195d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80195dc:	683b      	ldr	r3, [r7, #0]
 80195de:	691b      	ldr	r3, [r3, #16]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d109      	bne.n	80195f8 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80195ea:	68fb      	ldr	r3, [r7, #12]
 80195ec:	43db      	mvns	r3, r3
 80195ee:	401a      	ands	r2, r3
 80195f0:	697b      	ldr	r3, [r7, #20]
 80195f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80195f6:	e007      	b.n	8019608 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80195f8:	697b      	ldr	r3, [r7, #20]
 80195fa:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	431a      	orrs	r2, r3
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8019608:	683b      	ldr	r3, [r7, #0]
 801960a:	6a1b      	ldr	r3, [r3, #32]
 801960c:	2b01      	cmp	r3, #1
 801960e:	d107      	bne.n	8019620 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8019610:	697b      	ldr	r3, [r7, #20]
 8019612:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8019616:	68fb      	ldr	r3, [r7, #12]
 8019618:	431a      	orrs	r2, r3
 801961a:	697b      	ldr	r3, [r7, #20]
 801961c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8019620:	697b      	ldr	r3, [r7, #20]
 8019622:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8019626:	f023 0201 	bic.w	r2, r3, #1
 801962a:	697b      	ldr	r3, [r7, #20]
 801962c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8019630:	2300      	movs	r3, #0
 8019632:	e006      	b.n	8019642 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019638:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801963c:	687b      	ldr	r3, [r7, #4]
 801963e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019640:	2301      	movs	r3, #1
  }
}
 8019642:	4618      	mov	r0, r3
 8019644:	371c      	adds	r7, #28
 8019646:	46bd      	mov	sp, r7
 8019648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801964c:	4770      	bx	lr
 801964e:	bf00      	nop
 8019650:	40003400 	.word	0x40003400
 8019654:	40006400 	.word	0x40006400

08019658 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b084      	sub	sp, #16
 801965c:	af00      	add	r7, sp, #0
 801965e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019666:	b2db      	uxtb	r3, r3
 8019668:	2b01      	cmp	r3, #1
 801966a:	d12e      	bne.n	80196ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	2202      	movs	r2, #2
 8019670:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8019674:	687b      	ldr	r3, [r7, #4]
 8019676:	681b      	ldr	r3, [r3, #0]
 8019678:	681a      	ldr	r2, [r3, #0]
 801967a:	687b      	ldr	r3, [r7, #4]
 801967c:	681b      	ldr	r3, [r3, #0]
 801967e:	f022 0201 	bic.w	r2, r2, #1
 8019682:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019684:	f7ff fd86 	bl	8019194 <HAL_GetTick>
 8019688:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801968a:	e012      	b.n	80196b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801968c:	f7ff fd82 	bl	8019194 <HAL_GetTick>
 8019690:	4602      	mov	r2, r0
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	1ad3      	subs	r3, r2, r3
 8019696:	2b0a      	cmp	r3, #10
 8019698:	d90b      	bls.n	80196b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801969a:	687b      	ldr	r3, [r7, #4]
 801969c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801969e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80196a6:	687b      	ldr	r3, [r7, #4]
 80196a8:	2205      	movs	r2, #5
 80196aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80196ae:	2301      	movs	r3, #1
 80196b0:	e012      	b.n	80196d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80196b2:	687b      	ldr	r3, [r7, #4]
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	f003 0301 	and.w	r3, r3, #1
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d1e5      	bne.n	801968c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	2200      	movs	r2, #0
 80196c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80196c6:	2300      	movs	r3, #0
 80196c8:	e006      	b.n	80196d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80196d6:	2301      	movs	r3, #1
  }
}
 80196d8:	4618      	mov	r0, r3
 80196da:	3710      	adds	r7, #16
 80196dc:	46bd      	mov	sp, r7
 80196de:	bd80      	pop	{r7, pc}

080196e0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80196e0:	b480      	push	{r7}
 80196e2:	b087      	sub	sp, #28
 80196e4:	af00      	add	r7, sp, #0
 80196e6:	60f8      	str	r0, [r7, #12]
 80196e8:	60b9      	str	r1, [r7, #8]
 80196ea:	607a      	str	r2, [r7, #4]
 80196ec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80196ee:	68fb      	ldr	r3, [r7, #12]
 80196f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80196f4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80196f6:	7dfb      	ldrb	r3, [r7, #23]
 80196f8:	2b01      	cmp	r3, #1
 80196fa:	d003      	beq.n	8019704 <HAL_CAN_GetRxMessage+0x24>
 80196fc:	7dfb      	ldrb	r3, [r7, #23]
 80196fe:	2b02      	cmp	r3, #2
 8019700:	f040 80f3 	bne.w	80198ea <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d10e      	bne.n	8019728 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 801970a:	68fb      	ldr	r3, [r7, #12]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	68db      	ldr	r3, [r3, #12]
 8019710:	f003 0303 	and.w	r3, r3, #3
 8019714:	2b00      	cmp	r3, #0
 8019716:	d116      	bne.n	8019746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019718:	68fb      	ldr	r3, [r7, #12]
 801971a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801971c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8019720:	68fb      	ldr	r3, [r7, #12]
 8019722:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8019724:	2301      	movs	r3, #1
 8019726:	e0e7      	b.n	80198f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	691b      	ldr	r3, [r3, #16]
 801972e:	f003 0303 	and.w	r3, r3, #3
 8019732:	2b00      	cmp	r3, #0
 8019734:	d107      	bne.n	8019746 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8019736:	68fb      	ldr	r3, [r7, #12]
 8019738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801973a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801973e:	68fb      	ldr	r3, [r7, #12]
 8019740:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8019742:	2301      	movs	r3, #1
 8019744:	e0d8      	b.n	80198f8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8019746:	68fb      	ldr	r3, [r7, #12]
 8019748:	681a      	ldr	r2, [r3, #0]
 801974a:	68bb      	ldr	r3, [r7, #8]
 801974c:	331b      	adds	r3, #27
 801974e:	011b      	lsls	r3, r3, #4
 8019750:	4413      	add	r3, r2
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	f003 0204 	and.w	r2, r3, #4
 8019758:	687b      	ldr	r3, [r7, #4]
 801975a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	689b      	ldr	r3, [r3, #8]
 8019760:	2b00      	cmp	r3, #0
 8019762:	d10c      	bne.n	801977e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8019764:	68fb      	ldr	r3, [r7, #12]
 8019766:	681a      	ldr	r2, [r3, #0]
 8019768:	68bb      	ldr	r3, [r7, #8]
 801976a:	331b      	adds	r3, #27
 801976c:	011b      	lsls	r3, r3, #4
 801976e:	4413      	add	r3, r2
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	0d5b      	lsrs	r3, r3, #21
 8019774:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	601a      	str	r2, [r3, #0]
 801977c:	e00b      	b.n	8019796 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 801977e:	68fb      	ldr	r3, [r7, #12]
 8019780:	681a      	ldr	r2, [r3, #0]
 8019782:	68bb      	ldr	r3, [r7, #8]
 8019784:	331b      	adds	r3, #27
 8019786:	011b      	lsls	r3, r3, #4
 8019788:	4413      	add	r3, r2
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	08db      	lsrs	r3, r3, #3
 801978e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8019796:	68fb      	ldr	r3, [r7, #12]
 8019798:	681a      	ldr	r2, [r3, #0]
 801979a:	68bb      	ldr	r3, [r7, #8]
 801979c:	331b      	adds	r3, #27
 801979e:	011b      	lsls	r3, r3, #4
 80197a0:	4413      	add	r3, r2
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	f003 0202 	and.w	r2, r3, #2
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80197ac:	68fb      	ldr	r3, [r7, #12]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	68bb      	ldr	r3, [r7, #8]
 80197b2:	331b      	adds	r3, #27
 80197b4:	011b      	lsls	r3, r3, #4
 80197b6:	4413      	add	r3, r2
 80197b8:	3304      	adds	r3, #4
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	f003 020f 	and.w	r2, r3, #15
 80197c0:	687b      	ldr	r3, [r7, #4]
 80197c2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80197c4:	68fb      	ldr	r3, [r7, #12]
 80197c6:	681a      	ldr	r2, [r3, #0]
 80197c8:	68bb      	ldr	r3, [r7, #8]
 80197ca:	331b      	adds	r3, #27
 80197cc:	011b      	lsls	r3, r3, #4
 80197ce:	4413      	add	r3, r2
 80197d0:	3304      	adds	r3, #4
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	0a1b      	lsrs	r3, r3, #8
 80197d6:	b2da      	uxtb	r2, r3
 80197d8:	687b      	ldr	r3, [r7, #4]
 80197da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80197dc:	68fb      	ldr	r3, [r7, #12]
 80197de:	681a      	ldr	r2, [r3, #0]
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	331b      	adds	r3, #27
 80197e4:	011b      	lsls	r3, r3, #4
 80197e6:	4413      	add	r3, r2
 80197e8:	3304      	adds	r3, #4
 80197ea:	681b      	ldr	r3, [r3, #0]
 80197ec:	0c1b      	lsrs	r3, r3, #16
 80197ee:	b29a      	uxth	r2, r3
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80197f4:	68fb      	ldr	r3, [r7, #12]
 80197f6:	681a      	ldr	r2, [r3, #0]
 80197f8:	68bb      	ldr	r3, [r7, #8]
 80197fa:	011b      	lsls	r3, r3, #4
 80197fc:	4413      	add	r3, r2
 80197fe:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	b2da      	uxtb	r2, r3
 8019806:	683b      	ldr	r3, [r7, #0]
 8019808:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	681a      	ldr	r2, [r3, #0]
 801980e:	68bb      	ldr	r3, [r7, #8]
 8019810:	011b      	lsls	r3, r3, #4
 8019812:	4413      	add	r3, r2
 8019814:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	0a1a      	lsrs	r2, r3, #8
 801981c:	683b      	ldr	r3, [r7, #0]
 801981e:	3301      	adds	r3, #1
 8019820:	b2d2      	uxtb	r2, r2
 8019822:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	681a      	ldr	r2, [r3, #0]
 8019828:	68bb      	ldr	r3, [r7, #8]
 801982a:	011b      	lsls	r3, r3, #4
 801982c:	4413      	add	r3, r2
 801982e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	0c1a      	lsrs	r2, r3, #16
 8019836:	683b      	ldr	r3, [r7, #0]
 8019838:	3302      	adds	r3, #2
 801983a:	b2d2      	uxtb	r2, r2
 801983c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 801983e:	68fb      	ldr	r3, [r7, #12]
 8019840:	681a      	ldr	r2, [r3, #0]
 8019842:	68bb      	ldr	r3, [r7, #8]
 8019844:	011b      	lsls	r3, r3, #4
 8019846:	4413      	add	r3, r2
 8019848:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801984c:	681b      	ldr	r3, [r3, #0]
 801984e:	0e1a      	lsrs	r2, r3, #24
 8019850:	683b      	ldr	r3, [r7, #0]
 8019852:	3303      	adds	r3, #3
 8019854:	b2d2      	uxtb	r2, r2
 8019856:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	681a      	ldr	r2, [r3, #0]
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	011b      	lsls	r3, r3, #4
 8019860:	4413      	add	r3, r2
 8019862:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019866:	681a      	ldr	r2, [r3, #0]
 8019868:	683b      	ldr	r3, [r7, #0]
 801986a:	3304      	adds	r3, #4
 801986c:	b2d2      	uxtb	r2, r2
 801986e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8019870:	68fb      	ldr	r3, [r7, #12]
 8019872:	681a      	ldr	r2, [r3, #0]
 8019874:	68bb      	ldr	r3, [r7, #8]
 8019876:	011b      	lsls	r3, r3, #4
 8019878:	4413      	add	r3, r2
 801987a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801987e:	681b      	ldr	r3, [r3, #0]
 8019880:	0a1a      	lsrs	r2, r3, #8
 8019882:	683b      	ldr	r3, [r7, #0]
 8019884:	3305      	adds	r3, #5
 8019886:	b2d2      	uxtb	r2, r2
 8019888:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 801988a:	68fb      	ldr	r3, [r7, #12]
 801988c:	681a      	ldr	r2, [r3, #0]
 801988e:	68bb      	ldr	r3, [r7, #8]
 8019890:	011b      	lsls	r3, r3, #4
 8019892:	4413      	add	r3, r2
 8019894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8019898:	681b      	ldr	r3, [r3, #0]
 801989a:	0c1a      	lsrs	r2, r3, #16
 801989c:	683b      	ldr	r3, [r7, #0]
 801989e:	3306      	adds	r3, #6
 80198a0:	b2d2      	uxtb	r2, r2
 80198a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	681a      	ldr	r2, [r3, #0]
 80198a8:	68bb      	ldr	r3, [r7, #8]
 80198aa:	011b      	lsls	r3, r3, #4
 80198ac:	4413      	add	r3, r2
 80198ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	0e1a      	lsrs	r2, r3, #24
 80198b6:	683b      	ldr	r3, [r7, #0]
 80198b8:	3307      	adds	r3, #7
 80198ba:	b2d2      	uxtb	r2, r2
 80198bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80198be:	68bb      	ldr	r3, [r7, #8]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d108      	bne.n	80198d6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	681b      	ldr	r3, [r3, #0]
 80198c8:	68da      	ldr	r2, [r3, #12]
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	f042 0220 	orr.w	r2, r2, #32
 80198d2:	60da      	str	r2, [r3, #12]
 80198d4:	e007      	b.n	80198e6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80198d6:	68fb      	ldr	r3, [r7, #12]
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	691a      	ldr	r2, [r3, #16]
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	681b      	ldr	r3, [r3, #0]
 80198e0:	f042 0220 	orr.w	r2, r2, #32
 80198e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80198e6:	2300      	movs	r3, #0
 80198e8:	e006      	b.n	80198f8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ee:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80198f2:	68fb      	ldr	r3, [r7, #12]
 80198f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80198f6:	2301      	movs	r3, #1
  }
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	371c      	adds	r7, #28
 80198fc:	46bd      	mov	sp, r7
 80198fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019902:	4770      	bx	lr

08019904 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8019904:	b480      	push	{r7}
 8019906:	b085      	sub	sp, #20
 8019908:	af00      	add	r7, sp, #0
 801990a:	6078      	str	r0, [r7, #4]
 801990c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f893 3020 	ldrb.w	r3, [r3, #32]
 8019914:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8019916:	7bfb      	ldrb	r3, [r7, #15]
 8019918:	2b01      	cmp	r3, #1
 801991a:	d002      	beq.n	8019922 <HAL_CAN_ActivateNotification+0x1e>
 801991c:	7bfb      	ldrb	r3, [r7, #15]
 801991e:	2b02      	cmp	r3, #2
 8019920:	d109      	bne.n	8019936 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8019922:	687b      	ldr	r3, [r7, #4]
 8019924:	681b      	ldr	r3, [r3, #0]
 8019926:	6959      	ldr	r1, [r3, #20]
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	683a      	ldr	r2, [r7, #0]
 801992e:	430a      	orrs	r2, r1
 8019930:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8019932:	2300      	movs	r3, #0
 8019934:	e006      	b.n	8019944 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8019942:	2301      	movs	r3, #1
  }
}
 8019944:	4618      	mov	r0, r3
 8019946:	3714      	adds	r7, #20
 8019948:	46bd      	mov	sp, r7
 801994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801994e:	4770      	bx	lr

08019950 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8019950:	b580      	push	{r7, lr}
 8019952:	b08a      	sub	sp, #40	; 0x28
 8019954:	af00      	add	r7, sp, #0
 8019956:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8019958:	2300      	movs	r3, #0
 801995a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	695b      	ldr	r3, [r3, #20]
 8019962:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	685b      	ldr	r3, [r3, #4]
 801996a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	689b      	ldr	r3, [r3, #8]
 8019972:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	68db      	ldr	r3, [r3, #12]
 801997a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	691b      	ldr	r3, [r3, #16]
 8019982:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	681b      	ldr	r3, [r3, #0]
 8019988:	699b      	ldr	r3, [r3, #24]
 801998a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 801998c:	6a3b      	ldr	r3, [r7, #32]
 801998e:	f003 0301 	and.w	r3, r3, #1
 8019992:	2b00      	cmp	r3, #0
 8019994:	f000 8083 	beq.w	8019a9e <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8019998:	69bb      	ldr	r3, [r7, #24]
 801999a:	f003 0301 	and.w	r3, r3, #1
 801999e:	2b00      	cmp	r3, #0
 80199a0:	d025      	beq.n	80199ee <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	681b      	ldr	r3, [r3, #0]
 80199a6:	2201      	movs	r2, #1
 80199a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80199aa:	69bb      	ldr	r3, [r7, #24]
 80199ac:	f003 0302 	and.w	r3, r3, #2
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d004      	beq.n	80199be <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199b8:	6878      	ldr	r0, [r7, #4]
 80199ba:	4798      	blx	r3
 80199bc:	e017      	b.n	80199ee <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	f003 0304 	and.w	r3, r3, #4
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d004      	beq.n	80199d2 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80199c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80199ce:	627b      	str	r3, [r7, #36]	; 0x24
 80199d0:	e00d      	b.n	80199ee <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80199d2:	69bb      	ldr	r3, [r7, #24]
 80199d4:	f003 0308 	and.w	r3, r3, #8
 80199d8:	2b00      	cmp	r3, #0
 80199da:	d004      	beq.n	80199e6 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80199dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80199e2:	627b      	str	r3, [r7, #36]	; 0x24
 80199e4:	e003      	b.n	80199ee <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 80199e6:	687b      	ldr	r3, [r7, #4]
 80199e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80199ea:	6878      	ldr	r0, [r7, #4]
 80199ec:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80199ee:	69bb      	ldr	r3, [r7, #24]
 80199f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d026      	beq.n	8019a46 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8019a00:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8019a02:	69bb      	ldr	r3, [r7, #24]
 8019a04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019a08:	2b00      	cmp	r3, #0
 8019a0a:	d004      	beq.n	8019a16 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a10:	6878      	ldr	r0, [r7, #4]
 8019a12:	4798      	blx	r3
 8019a14:	e017      	b.n	8019a46 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8019a16:	69bb      	ldr	r3, [r7, #24]
 8019a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d004      	beq.n	8019a2a <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8019a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a22:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019a26:	627b      	str	r3, [r7, #36]	; 0x24
 8019a28:	e00d      	b.n	8019a46 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8019a2a:	69bb      	ldr	r3, [r7, #24]
 8019a2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019a30:	2b00      	cmp	r3, #0
 8019a32:	d004      	beq.n	8019a3e <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8019a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8019a3c:	e003      	b.n	8019a46 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8019a3e:	687b      	ldr	r3, [r7, #4]
 8019a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a42:	6878      	ldr	r0, [r7, #4]
 8019a44:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8019a46:	69bb      	ldr	r3, [r7, #24]
 8019a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d026      	beq.n	8019a9e <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8019a50:	687b      	ldr	r3, [r7, #4]
 8019a52:	681b      	ldr	r3, [r3, #0]
 8019a54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8019a58:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8019a5a:	69bb      	ldr	r3, [r7, #24]
 8019a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019a60:	2b00      	cmp	r3, #0
 8019a62:	d004      	beq.n	8019a6e <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a68:	6878      	ldr	r0, [r7, #4]
 8019a6a:	4798      	blx	r3
 8019a6c:	e017      	b.n	8019a9e <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8019a6e:	69bb      	ldr	r3, [r7, #24]
 8019a70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d004      	beq.n	8019a82 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8019a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8019a80:	e00d      	b.n	8019a9e <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8019a82:	69bb      	ldr	r3, [r7, #24]
 8019a84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d004      	beq.n	8019a96 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8019a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019a92:	627b      	str	r3, [r7, #36]	; 0x24
 8019a94:	e003      	b.n	8019a9e <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019a9a:	6878      	ldr	r0, [r7, #4]
 8019a9c:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8019a9e:	6a3b      	ldr	r3, [r7, #32]
 8019aa0:	f003 0308 	and.w	r3, r3, #8
 8019aa4:	2b00      	cmp	r3, #0
 8019aa6:	d00c      	beq.n	8019ac2 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8019aa8:	697b      	ldr	r3, [r7, #20]
 8019aaa:	f003 0310 	and.w	r3, r3, #16
 8019aae:	2b00      	cmp	r3, #0
 8019ab0:	d007      	beq.n	8019ac2 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8019ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ab4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8019ab8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	2210      	movs	r2, #16
 8019ac0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8019ac2:	6a3b      	ldr	r3, [r7, #32]
 8019ac4:	f003 0304 	and.w	r3, r3, #4
 8019ac8:	2b00      	cmp	r3, #0
 8019aca:	d00c      	beq.n	8019ae6 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8019acc:	697b      	ldr	r3, [r7, #20]
 8019ace:	f003 0308 	and.w	r3, r3, #8
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d007      	beq.n	8019ae6 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2208      	movs	r2, #8
 8019adc:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ae2:	6878      	ldr	r0, [r7, #4]
 8019ae4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8019ae6:	6a3b      	ldr	r3, [r7, #32]
 8019ae8:	f003 0302 	and.w	r3, r3, #2
 8019aec:	2b00      	cmp	r3, #0
 8019aee:	d00a      	beq.n	8019b06 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	68db      	ldr	r3, [r3, #12]
 8019af6:	f003 0303 	and.w	r3, r3, #3
 8019afa:	2b00      	cmp	r3, #0
 8019afc:	d003      	beq.n	8019b06 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b02:	6878      	ldr	r0, [r7, #4]
 8019b04:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8019b06:	6a3b      	ldr	r3, [r7, #32]
 8019b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d00c      	beq.n	8019b2a <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	f003 0310 	and.w	r3, r3, #16
 8019b16:	2b00      	cmp	r3, #0
 8019b18:	d007      	beq.n	8019b2a <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8019b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8019b20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	681b      	ldr	r3, [r3, #0]
 8019b26:	2210      	movs	r2, #16
 8019b28:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8019b2a:	6a3b      	ldr	r3, [r7, #32]
 8019b2c:	f003 0320 	and.w	r3, r3, #32
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	d00c      	beq.n	8019b4e <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8019b34:	693b      	ldr	r3, [r7, #16]
 8019b36:	f003 0308 	and.w	r3, r3, #8
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d007      	beq.n	8019b4e <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	2208      	movs	r2, #8
 8019b44:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b4a:	6878      	ldr	r0, [r7, #4]
 8019b4c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8019b4e:	6a3b      	ldr	r3, [r7, #32]
 8019b50:	f003 0310 	and.w	r3, r3, #16
 8019b54:	2b00      	cmp	r3, #0
 8019b56:	d00a      	beq.n	8019b6e <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	691b      	ldr	r3, [r3, #16]
 8019b5e:	f003 0303 	and.w	r3, r3, #3
 8019b62:	2b00      	cmp	r3, #0
 8019b64:	d003      	beq.n	8019b6e <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8019b6e:	6a3b      	ldr	r3, [r7, #32]
 8019b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d00c      	beq.n	8019b92 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8019b78:	69fb      	ldr	r3, [r7, #28]
 8019b7a:	f003 0310 	and.w	r3, r3, #16
 8019b7e:	2b00      	cmp	r3, #0
 8019b80:	d007      	beq.n	8019b92 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	681b      	ldr	r3, [r3, #0]
 8019b86:	2210      	movs	r2, #16
 8019b88:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b8e:	6878      	ldr	r0, [r7, #4]
 8019b90:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8019b92:	6a3b      	ldr	r3, [r7, #32]
 8019b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019b98:	2b00      	cmp	r3, #0
 8019b9a:	d00c      	beq.n	8019bb6 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8019b9c:	69fb      	ldr	r3, [r7, #28]
 8019b9e:	f003 0308 	and.w	r3, r3, #8
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d007      	beq.n	8019bb6 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8019ba6:	687b      	ldr	r3, [r7, #4]
 8019ba8:	681b      	ldr	r3, [r3, #0]
 8019baa:	2208      	movs	r2, #8
 8019bac:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8019bae:	687b      	ldr	r3, [r7, #4]
 8019bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019bb2:	6878      	ldr	r0, [r7, #4]
 8019bb4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8019bb6:	6a3b      	ldr	r3, [r7, #32]
 8019bb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d07b      	beq.n	8019cb8 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8019bc0:	69fb      	ldr	r3, [r7, #28]
 8019bc2:	f003 0304 	and.w	r3, r3, #4
 8019bc6:	2b00      	cmp	r3, #0
 8019bc8:	d072      	beq.n	8019cb0 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8019bca:	6a3b      	ldr	r3, [r7, #32]
 8019bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d008      	beq.n	8019be6 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d003      	beq.n	8019be6 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8019bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be0:	f043 0301 	orr.w	r3, r3, #1
 8019be4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8019be6:	6a3b      	ldr	r3, [r7, #32]
 8019be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d008      	beq.n	8019c02 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d003      	beq.n	8019c02 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8019bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bfc:	f043 0302 	orr.w	r3, r3, #2
 8019c00:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8019c02:	6a3b      	ldr	r3, [r7, #32]
 8019c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d008      	beq.n	8019c1e <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8019c0c:	68fb      	ldr	r3, [r7, #12]
 8019c0e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d003      	beq.n	8019c1e <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	f043 0304 	orr.w	r3, r3, #4
 8019c1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8019c1e:	6a3b      	ldr	r3, [r7, #32]
 8019c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d043      	beq.n	8019cb0 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8019c2e:	2b00      	cmp	r3, #0
 8019c30:	d03e      	beq.n	8019cb0 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8019c32:	68fb      	ldr	r3, [r7, #12]
 8019c34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8019c38:	2b60      	cmp	r3, #96	; 0x60
 8019c3a:	d02b      	beq.n	8019c94 <HAL_CAN_IRQHandler+0x344>
 8019c3c:	2b60      	cmp	r3, #96	; 0x60
 8019c3e:	d82e      	bhi.n	8019c9e <HAL_CAN_IRQHandler+0x34e>
 8019c40:	2b50      	cmp	r3, #80	; 0x50
 8019c42:	d022      	beq.n	8019c8a <HAL_CAN_IRQHandler+0x33a>
 8019c44:	2b50      	cmp	r3, #80	; 0x50
 8019c46:	d82a      	bhi.n	8019c9e <HAL_CAN_IRQHandler+0x34e>
 8019c48:	2b40      	cmp	r3, #64	; 0x40
 8019c4a:	d019      	beq.n	8019c80 <HAL_CAN_IRQHandler+0x330>
 8019c4c:	2b40      	cmp	r3, #64	; 0x40
 8019c4e:	d826      	bhi.n	8019c9e <HAL_CAN_IRQHandler+0x34e>
 8019c50:	2b30      	cmp	r3, #48	; 0x30
 8019c52:	d010      	beq.n	8019c76 <HAL_CAN_IRQHandler+0x326>
 8019c54:	2b30      	cmp	r3, #48	; 0x30
 8019c56:	d822      	bhi.n	8019c9e <HAL_CAN_IRQHandler+0x34e>
 8019c58:	2b10      	cmp	r3, #16
 8019c5a:	d002      	beq.n	8019c62 <HAL_CAN_IRQHandler+0x312>
 8019c5c:	2b20      	cmp	r3, #32
 8019c5e:	d005      	beq.n	8019c6c <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8019c60:	e01d      	b.n	8019c9e <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8019c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c64:	f043 0308 	orr.w	r3, r3, #8
 8019c68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c6a:	e019      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8019c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6e:	f043 0310 	orr.w	r3, r3, #16
 8019c72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c74:	e014      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8019c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c78:	f043 0320 	orr.w	r3, r3, #32
 8019c7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c7e:	e00f      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8019c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c88:	e00a      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8019c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c92:	e005      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8019c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019c9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8019c9c:	e000      	b.n	8019ca0 <HAL_CAN_IRQHandler+0x350>
            break;
 8019c9e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	699a      	ldr	r2, [r3, #24]
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8019cae:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8019cb0:	687b      	ldr	r3, [r7, #4]
 8019cb2:	681b      	ldr	r3, [r3, #0]
 8019cb4:	2204      	movs	r2, #4
 8019cb6:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8019cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d009      	beq.n	8019cd2 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019cc4:	431a      	orrs	r2, r3
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019cce:	6878      	ldr	r0, [r7, #4]
 8019cd0:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8019cd2:	bf00      	nop
 8019cd4:	3728      	adds	r7, #40	; 0x28
 8019cd6:	46bd      	mov	sp, r7
 8019cd8:	bd80      	pop	{r7, pc}

08019cda <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8019cda:	b480      	push	{r7}
 8019cdc:	b083      	sub	sp, #12
 8019cde:	af00      	add	r7, sp, #0
 8019ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8019ce2:	bf00      	nop
 8019ce4:	370c      	adds	r7, #12
 8019ce6:	46bd      	mov	sp, r7
 8019ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cec:	4770      	bx	lr

08019cee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8019cee:	b480      	push	{r7}
 8019cf0:	b083      	sub	sp, #12
 8019cf2:	af00      	add	r7, sp, #0
 8019cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8019cf6:	bf00      	nop
 8019cf8:	370c      	adds	r7, #12
 8019cfa:	46bd      	mov	sp, r7
 8019cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d00:	4770      	bx	lr

08019d02 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8019d02:	b480      	push	{r7}
 8019d04:	b083      	sub	sp, #12
 8019d06:	af00      	add	r7, sp, #0
 8019d08:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8019d0a:	bf00      	nop
 8019d0c:	370c      	adds	r7, #12
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d14:	4770      	bx	lr

08019d16 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8019d16:	b480      	push	{r7}
 8019d18:	b083      	sub	sp, #12
 8019d1a:	af00      	add	r7, sp, #0
 8019d1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8019d1e:	bf00      	nop
 8019d20:	370c      	adds	r7, #12
 8019d22:	46bd      	mov	sp, r7
 8019d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d28:	4770      	bx	lr

08019d2a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8019d2a:	b480      	push	{r7}
 8019d2c:	b083      	sub	sp, #12
 8019d2e:	af00      	add	r7, sp, #0
 8019d30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8019d32:	bf00      	nop
 8019d34:	370c      	adds	r7, #12
 8019d36:	46bd      	mov	sp, r7
 8019d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d3c:	4770      	bx	lr

08019d3e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8019d3e:	b480      	push	{r7}
 8019d40:	b083      	sub	sp, #12
 8019d42:	af00      	add	r7, sp, #0
 8019d44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8019d46:	bf00      	nop
 8019d48:	370c      	adds	r7, #12
 8019d4a:	46bd      	mov	sp, r7
 8019d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d50:	4770      	bx	lr

08019d52 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8019d52:	b480      	push	{r7}
 8019d54:	b083      	sub	sp, #12
 8019d56:	af00      	add	r7, sp, #0
 8019d58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8019d5a:	bf00      	nop
 8019d5c:	370c      	adds	r7, #12
 8019d5e:	46bd      	mov	sp, r7
 8019d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d64:	4770      	bx	lr

08019d66 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8019d66:	b480      	push	{r7}
 8019d68:	b083      	sub	sp, #12
 8019d6a:	af00      	add	r7, sp, #0
 8019d6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8019d6e:	bf00      	nop
 8019d70:	370c      	adds	r7, #12
 8019d72:	46bd      	mov	sp, r7
 8019d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d78:	4770      	bx	lr

08019d7a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8019d7a:	b480      	push	{r7}
 8019d7c:	b083      	sub	sp, #12
 8019d7e:	af00      	add	r7, sp, #0
 8019d80:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8019d82:	bf00      	nop
 8019d84:	370c      	adds	r7, #12
 8019d86:	46bd      	mov	sp, r7
 8019d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d8c:	4770      	bx	lr

08019d8e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8019d8e:	b480      	push	{r7}
 8019d90:	b083      	sub	sp, #12
 8019d92:	af00      	add	r7, sp, #0
 8019d94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8019d96:	bf00      	nop
 8019d98:	370c      	adds	r7, #12
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da0:	4770      	bx	lr

08019da2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8019da2:	b480      	push	{r7}
 8019da4:	b083      	sub	sp, #12
 8019da6:	af00      	add	r7, sp, #0
 8019da8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8019daa:	bf00      	nop
 8019dac:	370c      	adds	r7, #12
 8019dae:	46bd      	mov	sp, r7
 8019db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db4:	4770      	bx	lr
	...

08019db8 <__NVIC_SetPriorityGrouping>:
{
 8019db8:	b480      	push	{r7}
 8019dba:	b085      	sub	sp, #20
 8019dbc:	af00      	add	r7, sp, #0
 8019dbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	f003 0307 	and.w	r3, r3, #7
 8019dc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019dc8:	4b0b      	ldr	r3, [pc, #44]	; (8019df8 <__NVIC_SetPriorityGrouping+0x40>)
 8019dca:	68db      	ldr	r3, [r3, #12]
 8019dcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019dce:	68ba      	ldr	r2, [r7, #8]
 8019dd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8019dd4:	4013      	ands	r3, r2
 8019dd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019dd8:	68fb      	ldr	r3, [r7, #12]
 8019dda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019ddc:	68bb      	ldr	r3, [r7, #8]
 8019dde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019de0:	4b06      	ldr	r3, [pc, #24]	; (8019dfc <__NVIC_SetPriorityGrouping+0x44>)
 8019de2:	4313      	orrs	r3, r2
 8019de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8019de6:	4a04      	ldr	r2, [pc, #16]	; (8019df8 <__NVIC_SetPriorityGrouping+0x40>)
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	60d3      	str	r3, [r2, #12]
}
 8019dec:	bf00      	nop
 8019dee:	3714      	adds	r7, #20
 8019df0:	46bd      	mov	sp, r7
 8019df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df6:	4770      	bx	lr
 8019df8:	e000ed00 	.word	0xe000ed00
 8019dfc:	05fa0000 	.word	0x05fa0000

08019e00 <__NVIC_GetPriorityGrouping>:
{
 8019e00:	b480      	push	{r7}
 8019e02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8019e04:	4b04      	ldr	r3, [pc, #16]	; (8019e18 <__NVIC_GetPriorityGrouping+0x18>)
 8019e06:	68db      	ldr	r3, [r3, #12]
 8019e08:	0a1b      	lsrs	r3, r3, #8
 8019e0a:	f003 0307 	and.w	r3, r3, #7
}
 8019e0e:	4618      	mov	r0, r3
 8019e10:	46bd      	mov	sp, r7
 8019e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e16:	4770      	bx	lr
 8019e18:	e000ed00 	.word	0xe000ed00

08019e1c <__NVIC_EnableIRQ>:
{
 8019e1c:	b480      	push	{r7}
 8019e1e:	b083      	sub	sp, #12
 8019e20:	af00      	add	r7, sp, #0
 8019e22:	4603      	mov	r3, r0
 8019e24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	db0b      	blt.n	8019e46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8019e2e:	79fb      	ldrb	r3, [r7, #7]
 8019e30:	f003 021f 	and.w	r2, r3, #31
 8019e34:	4907      	ldr	r1, [pc, #28]	; (8019e54 <__NVIC_EnableIRQ+0x38>)
 8019e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e3a:	095b      	lsrs	r3, r3, #5
 8019e3c:	2001      	movs	r0, #1
 8019e3e:	fa00 f202 	lsl.w	r2, r0, r2
 8019e42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019e46:	bf00      	nop
 8019e48:	370c      	adds	r7, #12
 8019e4a:	46bd      	mov	sp, r7
 8019e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e50:	4770      	bx	lr
 8019e52:	bf00      	nop
 8019e54:	e000e100 	.word	0xe000e100

08019e58 <__NVIC_SetPriority>:
{
 8019e58:	b480      	push	{r7}
 8019e5a:	b083      	sub	sp, #12
 8019e5c:	af00      	add	r7, sp, #0
 8019e5e:	4603      	mov	r3, r0
 8019e60:	6039      	str	r1, [r7, #0]
 8019e62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	db0a      	blt.n	8019e82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	b2da      	uxtb	r2, r3
 8019e70:	490c      	ldr	r1, [pc, #48]	; (8019ea4 <__NVIC_SetPriority+0x4c>)
 8019e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019e76:	0112      	lsls	r2, r2, #4
 8019e78:	b2d2      	uxtb	r2, r2
 8019e7a:	440b      	add	r3, r1
 8019e7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8019e80:	e00a      	b.n	8019e98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019e82:	683b      	ldr	r3, [r7, #0]
 8019e84:	b2da      	uxtb	r2, r3
 8019e86:	4908      	ldr	r1, [pc, #32]	; (8019ea8 <__NVIC_SetPriority+0x50>)
 8019e88:	79fb      	ldrb	r3, [r7, #7]
 8019e8a:	f003 030f 	and.w	r3, r3, #15
 8019e8e:	3b04      	subs	r3, #4
 8019e90:	0112      	lsls	r2, r2, #4
 8019e92:	b2d2      	uxtb	r2, r2
 8019e94:	440b      	add	r3, r1
 8019e96:	761a      	strb	r2, [r3, #24]
}
 8019e98:	bf00      	nop
 8019e9a:	370c      	adds	r7, #12
 8019e9c:	46bd      	mov	sp, r7
 8019e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ea2:	4770      	bx	lr
 8019ea4:	e000e100 	.word	0xe000e100
 8019ea8:	e000ed00 	.word	0xe000ed00

08019eac <NVIC_EncodePriority>:
{
 8019eac:	b480      	push	{r7}
 8019eae:	b089      	sub	sp, #36	; 0x24
 8019eb0:	af00      	add	r7, sp, #0
 8019eb2:	60f8      	str	r0, [r7, #12]
 8019eb4:	60b9      	str	r1, [r7, #8]
 8019eb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	f003 0307 	and.w	r3, r3, #7
 8019ebe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019ec0:	69fb      	ldr	r3, [r7, #28]
 8019ec2:	f1c3 0307 	rsb	r3, r3, #7
 8019ec6:	2b04      	cmp	r3, #4
 8019ec8:	bf28      	it	cs
 8019eca:	2304      	movcs	r3, #4
 8019ecc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019ece:	69fb      	ldr	r3, [r7, #28]
 8019ed0:	3304      	adds	r3, #4
 8019ed2:	2b06      	cmp	r3, #6
 8019ed4:	d902      	bls.n	8019edc <NVIC_EncodePriority+0x30>
 8019ed6:	69fb      	ldr	r3, [r7, #28]
 8019ed8:	3b03      	subs	r3, #3
 8019eda:	e000      	b.n	8019ede <NVIC_EncodePriority+0x32>
 8019edc:	2300      	movs	r3, #0
 8019ede:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8019ee4:	69bb      	ldr	r3, [r7, #24]
 8019ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8019eea:	43da      	mvns	r2, r3
 8019eec:	68bb      	ldr	r3, [r7, #8]
 8019eee:	401a      	ands	r2, r3
 8019ef0:	697b      	ldr	r3, [r7, #20]
 8019ef2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8019ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8019ef8:	697b      	ldr	r3, [r7, #20]
 8019efa:	fa01 f303 	lsl.w	r3, r1, r3
 8019efe:	43d9      	mvns	r1, r3
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019f04:	4313      	orrs	r3, r2
}
 8019f06:	4618      	mov	r0, r3
 8019f08:	3724      	adds	r7, #36	; 0x24
 8019f0a:	46bd      	mov	sp, r7
 8019f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f10:	4770      	bx	lr
	...

08019f14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8019f14:	b580      	push	{r7, lr}
 8019f16:	b082      	sub	sp, #8
 8019f18:	af00      	add	r7, sp, #0
 8019f1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	3b01      	subs	r3, #1
 8019f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8019f24:	d301      	bcc.n	8019f2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019f26:	2301      	movs	r3, #1
 8019f28:	e00f      	b.n	8019f4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8019f2a:	4a0a      	ldr	r2, [pc, #40]	; (8019f54 <SysTick_Config+0x40>)
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	3b01      	subs	r3, #1
 8019f30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019f32:	210f      	movs	r1, #15
 8019f34:	f04f 30ff 	mov.w	r0, #4294967295
 8019f38:	f7ff ff8e 	bl	8019e58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8019f3c:	4b05      	ldr	r3, [pc, #20]	; (8019f54 <SysTick_Config+0x40>)
 8019f3e:	2200      	movs	r2, #0
 8019f40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019f42:	4b04      	ldr	r3, [pc, #16]	; (8019f54 <SysTick_Config+0x40>)
 8019f44:	2207      	movs	r2, #7
 8019f46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019f48:	2300      	movs	r3, #0
}
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	3708      	adds	r7, #8
 8019f4e:	46bd      	mov	sp, r7
 8019f50:	bd80      	pop	{r7, pc}
 8019f52:	bf00      	nop
 8019f54:	e000e010 	.word	0xe000e010

08019f58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b082      	sub	sp, #8
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019f60:	6878      	ldr	r0, [r7, #4]
 8019f62:	f7ff ff29 	bl	8019db8 <__NVIC_SetPriorityGrouping>
}
 8019f66:	bf00      	nop
 8019f68:	3708      	adds	r7, #8
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}

08019f6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8019f6e:	b580      	push	{r7, lr}
 8019f70:	b086      	sub	sp, #24
 8019f72:	af00      	add	r7, sp, #0
 8019f74:	4603      	mov	r3, r0
 8019f76:	60b9      	str	r1, [r7, #8]
 8019f78:	607a      	str	r2, [r7, #4]
 8019f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8019f7c:	2300      	movs	r3, #0
 8019f7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8019f80:	f7ff ff3e 	bl	8019e00 <__NVIC_GetPriorityGrouping>
 8019f84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019f86:	687a      	ldr	r2, [r7, #4]
 8019f88:	68b9      	ldr	r1, [r7, #8]
 8019f8a:	6978      	ldr	r0, [r7, #20]
 8019f8c:	f7ff ff8e 	bl	8019eac <NVIC_EncodePriority>
 8019f90:	4602      	mov	r2, r0
 8019f92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019f96:	4611      	mov	r1, r2
 8019f98:	4618      	mov	r0, r3
 8019f9a:	f7ff ff5d 	bl	8019e58 <__NVIC_SetPriority>
}
 8019f9e:	bf00      	nop
 8019fa0:	3718      	adds	r7, #24
 8019fa2:	46bd      	mov	sp, r7
 8019fa4:	bd80      	pop	{r7, pc}

08019fa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019fa6:	b580      	push	{r7, lr}
 8019fa8:	b082      	sub	sp, #8
 8019faa:	af00      	add	r7, sp, #0
 8019fac:	4603      	mov	r3, r0
 8019fae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019fb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	f7ff ff31 	bl	8019e1c <__NVIC_EnableIRQ>
}
 8019fba:	bf00      	nop
 8019fbc:	3708      	adds	r7, #8
 8019fbe:	46bd      	mov	sp, r7
 8019fc0:	bd80      	pop	{r7, pc}

08019fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019fc2:	b580      	push	{r7, lr}
 8019fc4:	b082      	sub	sp, #8
 8019fc6:	af00      	add	r7, sp, #0
 8019fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8019fca:	6878      	ldr	r0, [r7, #4]
 8019fcc:	f7ff ffa2 	bl	8019f14 <SysTick_Config>
 8019fd0:	4603      	mov	r3, r0
}
 8019fd2:	4618      	mov	r0, r3
 8019fd4:	3708      	adds	r7, #8
 8019fd6:	46bd      	mov	sp, r7
 8019fd8:	bd80      	pop	{r7, pc}
	...

08019fdc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019fdc:	b480      	push	{r7}
 8019fde:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019fe0:	f3bf 8f5f 	dmb	sy
}
 8019fe4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8019fe6:	4b07      	ldr	r3, [pc, #28]	; (801a004 <HAL_MPU_Disable+0x28>)
 8019fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fea:	4a06      	ldr	r2, [pc, #24]	; (801a004 <HAL_MPU_Disable+0x28>)
 8019fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019ff0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019ff2:	4b05      	ldr	r3, [pc, #20]	; (801a008 <HAL_MPU_Disable+0x2c>)
 8019ff4:	2200      	movs	r2, #0
 8019ff6:	605a      	str	r2, [r3, #4]
}
 8019ff8:	bf00      	nop
 8019ffa:	46bd      	mov	sp, r7
 8019ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a000:	4770      	bx	lr
 801a002:	bf00      	nop
 801a004:	e000ed00 	.word	0xe000ed00
 801a008:	e000ed90 	.word	0xe000ed90

0801a00c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 801a00c:	b480      	push	{r7}
 801a00e:	b083      	sub	sp, #12
 801a010:	af00      	add	r7, sp, #0
 801a012:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801a014:	4a0b      	ldr	r2, [pc, #44]	; (801a044 <HAL_MPU_Enable+0x38>)
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	f043 0301 	orr.w	r3, r3, #1
 801a01c:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801a01e:	4b0a      	ldr	r3, [pc, #40]	; (801a048 <HAL_MPU_Enable+0x3c>)
 801a020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a022:	4a09      	ldr	r2, [pc, #36]	; (801a048 <HAL_MPU_Enable+0x3c>)
 801a024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801a028:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 801a02a:	f3bf 8f4f 	dsb	sy
}
 801a02e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801a030:	f3bf 8f6f 	isb	sy
}
 801a034:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 801a036:	bf00      	nop
 801a038:	370c      	adds	r7, #12
 801a03a:	46bd      	mov	sp, r7
 801a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a040:	4770      	bx	lr
 801a042:	bf00      	nop
 801a044:	e000ed90 	.word	0xe000ed90
 801a048:	e000ed00 	.word	0xe000ed00

0801a04c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 801a04c:	b480      	push	{r7}
 801a04e:	b083      	sub	sp, #12
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	785a      	ldrb	r2, [r3, #1]
 801a058:	4b1d      	ldr	r3, [pc, #116]	; (801a0d0 <HAL_MPU_ConfigRegion+0x84>)
 801a05a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	781b      	ldrb	r3, [r3, #0]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d029      	beq.n	801a0b8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 801a064:	4a1a      	ldr	r2, [pc, #104]	; (801a0d0 <HAL_MPU_ConfigRegion+0x84>)
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	685b      	ldr	r3, [r3, #4]
 801a06a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	7b1b      	ldrb	r3, [r3, #12]
 801a070:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	7adb      	ldrb	r3, [r3, #11]
 801a076:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a078:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a07a:	687b      	ldr	r3, [r7, #4]
 801a07c:	7a9b      	ldrb	r3, [r3, #10]
 801a07e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801a080:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	7b5b      	ldrb	r3, [r3, #13]
 801a086:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801a088:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	7b9b      	ldrb	r3, [r3, #14]
 801a08e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801a090:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	7bdb      	ldrb	r3, [r3, #15]
 801a096:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801a098:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	7a5b      	ldrb	r3, [r3, #9]
 801a09e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801a0a0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a0a2:	687b      	ldr	r3, [r7, #4]
 801a0a4:	7a1b      	ldrb	r3, [r3, #8]
 801a0a6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801a0a8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801a0aa:	687a      	ldr	r2, [r7, #4]
 801a0ac:	7812      	ldrb	r2, [r2, #0]
 801a0ae:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a0b0:	4a07      	ldr	r2, [pc, #28]	; (801a0d0 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801a0b2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801a0b4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801a0b6:	e005      	b.n	801a0c4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 801a0b8:	4b05      	ldr	r3, [pc, #20]	; (801a0d0 <HAL_MPU_ConfigRegion+0x84>)
 801a0ba:	2200      	movs	r2, #0
 801a0bc:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 801a0be:	4b04      	ldr	r3, [pc, #16]	; (801a0d0 <HAL_MPU_ConfigRegion+0x84>)
 801a0c0:	2200      	movs	r2, #0
 801a0c2:	611a      	str	r2, [r3, #16]
}
 801a0c4:	bf00      	nop
 801a0c6:	370c      	adds	r7, #12
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0ce:	4770      	bx	lr
 801a0d0:	e000ed90 	.word	0xe000ed90

0801a0d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b084      	sub	sp, #16
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a0e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801a0e2:	f7ff f857 	bl	8019194 <HAL_GetTick>
 801a0e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a0ee:	b2db      	uxtb	r3, r3
 801a0f0:	2b02      	cmp	r3, #2
 801a0f2:	d008      	beq.n	801a106 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	2280      	movs	r2, #128	; 0x80
 801a0f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a0fa:	687b      	ldr	r3, [r7, #4]
 801a0fc:	2200      	movs	r2, #0
 801a0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801a102:	2301      	movs	r3, #1
 801a104:	e052      	b.n	801a1ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	681b      	ldr	r3, [r3, #0]
 801a10a:	681a      	ldr	r2, [r3, #0]
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	681b      	ldr	r3, [r3, #0]
 801a110:	f022 0216 	bic.w	r2, r2, #22
 801a114:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801a116:	687b      	ldr	r3, [r7, #4]
 801a118:	681b      	ldr	r3, [r3, #0]
 801a11a:	695a      	ldr	r2, [r3, #20]
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a124:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801a126:	687b      	ldr	r3, [r7, #4]
 801a128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a12a:	2b00      	cmp	r3, #0
 801a12c:	d103      	bne.n	801a136 <HAL_DMA_Abort+0x62>
 801a12e:	687b      	ldr	r3, [r7, #4]
 801a130:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a132:	2b00      	cmp	r3, #0
 801a134:	d007      	beq.n	801a146 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	681b      	ldr	r3, [r3, #0]
 801a13a:	681a      	ldr	r2, [r3, #0]
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	f022 0208 	bic.w	r2, r2, #8
 801a144:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	f022 0201 	bic.w	r2, r2, #1
 801a154:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a156:	e013      	b.n	801a180 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 801a158:	f7ff f81c 	bl	8019194 <HAL_GetTick>
 801a15c:	4602      	mov	r2, r0
 801a15e:	68bb      	ldr	r3, [r7, #8]
 801a160:	1ad3      	subs	r3, r2, r3
 801a162:	2b05      	cmp	r3, #5
 801a164:	d90c      	bls.n	801a180 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2220      	movs	r2, #32
 801a16a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	2203      	movs	r2, #3
 801a170:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	2200      	movs	r2, #0
 801a178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 801a17c:	2303      	movs	r3, #3
 801a17e:	e015      	b.n	801a1ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801a180:	687b      	ldr	r3, [r7, #4]
 801a182:	681b      	ldr	r3, [r3, #0]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	f003 0301 	and.w	r3, r3, #1
 801a18a:	2b00      	cmp	r3, #0
 801a18c:	d1e4      	bne.n	801a158 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a192:	223f      	movs	r2, #63	; 0x3f
 801a194:	409a      	lsls	r2, r3
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 801a19a:	687b      	ldr	r3, [r7, #4]
 801a19c:	2201      	movs	r2, #1
 801a19e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 801a1aa:	2300      	movs	r3, #0
}
 801a1ac:	4618      	mov	r0, r3
 801a1ae:	3710      	adds	r7, #16
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}

0801a1b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 801a1b4:	b480      	push	{r7}
 801a1b6:	b083      	sub	sp, #12
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801a1c2:	b2db      	uxtb	r3, r3
 801a1c4:	2b02      	cmp	r3, #2
 801a1c6:	d004      	beq.n	801a1d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	2280      	movs	r2, #128	; 0x80
 801a1cc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801a1ce:	2301      	movs	r3, #1
 801a1d0:	e00c      	b.n	801a1ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	2205      	movs	r2, #5
 801a1d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 801a1da:	687b      	ldr	r3, [r7, #4]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	681a      	ldr	r2, [r3, #0]
 801a1e0:	687b      	ldr	r3, [r7, #4]
 801a1e2:	681b      	ldr	r3, [r3, #0]
 801a1e4:	f022 0201 	bic.w	r2, r2, #1
 801a1e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 801a1ea:	2300      	movs	r3, #0
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	370c      	adds	r7, #12
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1f6:	4770      	bx	lr

0801a1f8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 801a1f8:	b580      	push	{r7, lr}
 801a1fa:	b084      	sub	sp, #16
 801a1fc:	af00      	add	r7, sp, #0
 801a1fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	2b00      	cmp	r3, #0
 801a204:	d101      	bne.n	801a20a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 801a206:	2301      	movs	r3, #1
 801a208:	e06a      	b.n	801a2e0 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a210:	2b00      	cmp	r3, #0
 801a212:	d106      	bne.n	801a222 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	2223      	movs	r2, #35	; 0x23
 801a218:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 801a21c:	6878      	ldr	r0, [r7, #4]
 801a21e:	f006 fbaf 	bl	8020980 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801a222:	4b31      	ldr	r3, [pc, #196]	; (801a2e8 <HAL_ETH_Init+0xf0>)
 801a224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a226:	4a30      	ldr	r2, [pc, #192]	; (801a2e8 <HAL_ETH_Init+0xf0>)
 801a228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a22c:	6453      	str	r3, [r2, #68]	; 0x44
 801a22e:	4b2e      	ldr	r3, [pc, #184]	; (801a2e8 <HAL_ETH_Init+0xf0>)
 801a230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a236:	60bb      	str	r3, [r7, #8]
 801a238:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 801a23a:	4b2c      	ldr	r3, [pc, #176]	; (801a2ec <HAL_ETH_Init+0xf4>)
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	4a2b      	ldr	r2, [pc, #172]	; (801a2ec <HAL_ETH_Init+0xf4>)
 801a240:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801a244:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 801a246:	4b29      	ldr	r3, [pc, #164]	; (801a2ec <HAL_ETH_Init+0xf4>)
 801a248:	685a      	ldr	r2, [r3, #4]
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	689b      	ldr	r3, [r3, #8]
 801a24e:	4927      	ldr	r1, [pc, #156]	; (801a2ec <HAL_ETH_Init+0xf4>)
 801a250:	4313      	orrs	r3, r2
 801a252:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 801a254:	4b25      	ldr	r3, [pc, #148]	; (801a2ec <HAL_ETH_Init+0xf4>)
 801a256:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	687a      	ldr	r2, [r7, #4]
 801a264:	6812      	ldr	r2, [r2, #0]
 801a266:	f043 0301 	orr.w	r3, r3, #1
 801a26a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a26e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801a270:	f7fe ff90 	bl	8019194 <HAL_GetTick>
 801a274:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801a276:	e011      	b.n	801a29c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 801a278:	f7fe ff8c 	bl	8019194 <HAL_GetTick>
 801a27c:	4602      	mov	r2, r0
 801a27e:	68fb      	ldr	r3, [r7, #12]
 801a280:	1ad3      	subs	r3, r2, r3
 801a282:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801a286:	d909      	bls.n	801a29c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801a288:	687b      	ldr	r3, [r7, #4]
 801a28a:	2204      	movs	r2, #4
 801a28c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	22e0      	movs	r2, #224	; 0xe0
 801a294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 801a298:	2301      	movs	r3, #1
 801a29a:	e021      	b.n	801a2e0 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	f003 0301 	and.w	r3, r3, #1
 801a2aa:	2b00      	cmp	r3, #0
 801a2ac:	d1e4      	bne.n	801a278 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801a2ae:	6878      	ldr	r0, [r7, #4]
 801a2b0:	f000 fee4 	bl	801b07c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 801a2b4:	6878      	ldr	r0, [r7, #4]
 801a2b6:	f000 ff8b 	bl	801b1d0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 801a2ba:	6878      	ldr	r0, [r7, #4]
 801a2bc:	f000 ffe1 	bl	801b282 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	685b      	ldr	r3, [r3, #4]
 801a2c4:	461a      	mov	r2, r3
 801a2c6:	2100      	movs	r1, #0
 801a2c8:	6878      	ldr	r0, [r7, #4]
 801a2ca:	f000 ff49 	bl	801b160 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	2200      	movs	r2, #0
 801a2d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2210      	movs	r2, #16
 801a2da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801a2de:	2300      	movs	r3, #0
}
 801a2e0:	4618      	mov	r0, r3
 801a2e2:	3710      	adds	r7, #16
 801a2e4:	46bd      	mov	sp, r7
 801a2e6:	bd80      	pop	{r7, pc}
 801a2e8:	40023800 	.word	0x40023800
 801a2ec:	40013800 	.word	0x40013800

0801a2f0 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 801a2f0:	b580      	push	{r7, lr}
 801a2f2:	b084      	sub	sp, #16
 801a2f4:	af00      	add	r7, sp, #0
 801a2f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a2fe:	2b10      	cmp	r3, #16
 801a300:	d150      	bne.n	801a3a4 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	2223      	movs	r2, #35	; 0x23
 801a306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 801a30a:	687b      	ldr	r3, [r7, #4]
 801a30c:	2204      	movs	r2, #4
 801a30e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 801a310:	6878      	ldr	r0, [r7, #4]
 801a312:	f000 f9fd 	bl	801a710 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	681b      	ldr	r3, [r3, #0]
 801a31a:	681a      	ldr	r2, [r3, #0]
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	f042 0208 	orr.w	r2, r2, #8
 801a324:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	681b      	ldr	r3, [r3, #0]
 801a32c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a32e:	2001      	movs	r0, #1
 801a330:	f7fe ff3c 	bl	80191ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a334:	687b      	ldr	r3, [r7, #4]
 801a336:	681b      	ldr	r3, [r3, #0]
 801a338:	68fa      	ldr	r2, [r7, #12]
 801a33a:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801a33c:	687b      	ldr	r3, [r7, #4]
 801a33e:	681b      	ldr	r3, [r3, #0]
 801a340:	681a      	ldr	r2, [r3, #0]
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	681b      	ldr	r3, [r3, #0]
 801a346:	f042 0204 	orr.w	r2, r2, #4
 801a34a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	681b      	ldr	r3, [r3, #0]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a354:	2001      	movs	r0, #1
 801a356:	f7fe ff29 	bl	80191ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	681b      	ldr	r3, [r3, #0]
 801a35e:	68fa      	ldr	r2, [r7, #12]
 801a360:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801a362:	6878      	ldr	r0, [r7, #4]
 801a364:	f000 fd2a 	bl	801adbc <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	681b      	ldr	r3, [r3, #0]
 801a36c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a370:	699b      	ldr	r3, [r3, #24]
 801a372:	687a      	ldr	r2, [r7, #4]
 801a374:	6812      	ldr	r2, [r2, #0]
 801a376:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a37a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a37e:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a388:	699b      	ldr	r3, [r3, #24]
 801a38a:	687a      	ldr	r2, [r7, #4]
 801a38c:	6812      	ldr	r2, [r2, #0]
 801a38e:	f043 0302 	orr.w	r3, r3, #2
 801a392:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a396:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	2223      	movs	r2, #35	; 0x23
 801a39c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	e000      	b.n	801a3a6 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 801a3a4:	2301      	movs	r3, #1
  }
}
 801a3a6:	4618      	mov	r0, r3
 801a3a8:	3710      	adds	r7, #16
 801a3aa:	46bd      	mov	sp, r7
 801a3ac:	bd80      	pop	{r7, pc}

0801a3ae <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801a3ae:	b580      	push	{r7, lr}
 801a3b0:	b084      	sub	sp, #16
 801a3b2:	af00      	add	r7, sp, #0
 801a3b4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a3bc:	2b23      	cmp	r3, #35	; 0x23
 801a3be:	d14a      	bne.n	801a456 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2223      	movs	r2, #35	; 0x23
 801a3c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3d0:	699b      	ldr	r3, [r3, #24]
 801a3d2:	687a      	ldr	r2, [r7, #4]
 801a3d4:	6812      	ldr	r2, [r2, #0]
 801a3d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801a3da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a3de:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a3e8:	699b      	ldr	r3, [r3, #24]
 801a3ea:	687a      	ldr	r2, [r7, #4]
 801a3ec:	6812      	ldr	r2, [r2, #0]
 801a3ee:	f023 0302 	bic.w	r3, r3, #2
 801a3f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a3f6:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	681a      	ldr	r2, [r3, #0]
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	f022 0204 	bic.w	r2, r2, #4
 801a406:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a410:	2001      	movs	r0, #1
 801a412:	f7fe fecb 	bl	80191ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a416:	687b      	ldr	r3, [r7, #4]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	68fa      	ldr	r2, [r7, #12]
 801a41c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801a41e:	6878      	ldr	r0, [r7, #4]
 801a420:	f000 fccc 	bl	801adbc <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	681a      	ldr	r2, [r3, #0]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	681b      	ldr	r3, [r3, #0]
 801a42e:	f022 0208 	bic.w	r2, r2, #8
 801a432:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	681b      	ldr	r3, [r3, #0]
 801a43a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801a43c:	2001      	movs	r0, #1
 801a43e:	f7fe feb5 	bl	80191ac <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	68fa      	ldr	r2, [r7, #12]
 801a448:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2210      	movs	r2, #16
 801a44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801a452:	2300      	movs	r3, #0
 801a454:	e000      	b.n	801a458 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 801a456:	2301      	movs	r3, #1
  }
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3710      	adds	r7, #16
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}

0801a460 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801a460:	b580      	push	{r7, lr}
 801a462:	b086      	sub	sp, #24
 801a464:	af00      	add	r7, sp, #0
 801a466:	60f8      	str	r0, [r7, #12]
 801a468:	60b9      	str	r1, [r7, #8]
 801a46a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d109      	bne.n	801a486 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a478:	f043 0201 	orr.w	r2, r3, #1
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801a482:	2301      	movs	r3, #1
 801a484:	e07c      	b.n	801a580 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 801a486:	68fb      	ldr	r3, [r7, #12]
 801a488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a48c:	2b23      	cmp	r3, #35	; 0x23
 801a48e:	d176      	bne.n	801a57e <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801a490:	2200      	movs	r2, #0
 801a492:	68b9      	ldr	r1, [r7, #8]
 801a494:	68f8      	ldr	r0, [r7, #12]
 801a496:	f000 ff61 	bl	801b35c <ETH_Prepare_Tx_Descriptors>
 801a49a:	4603      	mov	r3, r0
 801a49c:	2b00      	cmp	r3, #0
 801a49e:	d009      	beq.n	801a4b4 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a4a6:	f043 0202 	orr.w	r2, r3, #2
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801a4b0:	2301      	movs	r3, #1
 801a4b2:	e065      	b.n	801a580 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 801a4b4:	f3bf 8f4f 	dsb	sy
}
 801a4b8:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801a4be:	68fb      	ldr	r3, [r7, #12]
 801a4c0:	3206      	adds	r2, #6
 801a4c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a4c6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4cc:	1c5a      	adds	r2, r3, #1
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	629a      	str	r2, [r3, #40]	; 0x28
 801a4d2:	68fb      	ldr	r3, [r7, #12]
 801a4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4d6:	2b03      	cmp	r3, #3
 801a4d8:	d904      	bls.n	801a4e4 <HAL_ETH_Transmit+0x84>
 801a4da:	68fb      	ldr	r3, [r7, #12]
 801a4dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a4de:	1f1a      	subs	r2, r3, #4
 801a4e0:	68fb      	ldr	r3, [r7, #12]
 801a4e2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 801a4e4:	68fb      	ldr	r3, [r7, #12]
 801a4e6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 801a4e8:	68fb      	ldr	r3, [r7, #12]
 801a4ea:	681a      	ldr	r2, [r3, #0]
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	3106      	adds	r1, #6
 801a4f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801a4f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a4f8:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 801a4fa:	f7fe fe4b 	bl	8019194 <HAL_GetTick>
 801a4fe:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801a500:	e037      	b.n	801a572 <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a50a:	695b      	ldr	r3, [r3, #20]
 801a50c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a510:	2b00      	cmp	r3, #0
 801a512:	d011      	beq.n	801a538 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a51a:	f043 0208 	orr.w	r2, r3, #8
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	681b      	ldr	r3, [r3, #0]
 801a528:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a52c:	695a      	ldr	r2, [r3, #20]
 801a52e:	68fb      	ldr	r3, [r7, #12]
 801a530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 801a534:	2301      	movs	r3, #1
 801a536:	e023      	b.n	801a580 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801a538:	687b      	ldr	r3, [r7, #4]
 801a53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a53e:	d018      	beq.n	801a572 <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801a540:	f7fe fe28 	bl	8019194 <HAL_GetTick>
 801a544:	4602      	mov	r2, r0
 801a546:	693b      	ldr	r3, [r7, #16]
 801a548:	1ad3      	subs	r3, r2, r3
 801a54a:	687a      	ldr	r2, [r7, #4]
 801a54c:	429a      	cmp	r2, r3
 801a54e:	d302      	bcc.n	801a556 <HAL_ETH_Transmit+0xf6>
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d10d      	bne.n	801a572 <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 801a556:	68fb      	ldr	r3, [r7, #12]
 801a558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a55c:	f043 0204 	orr.w	r2, r3, #4
 801a560:	68fb      	ldr	r3, [r7, #12]
 801a562:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 801a566:	697b      	ldr	r3, [r7, #20]
 801a568:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 801a56c:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801a56e:	2301      	movs	r3, #1
 801a570:	e006      	b.n	801a580 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801a572:	697b      	ldr	r3, [r7, #20]
 801a574:	681b      	ldr	r3, [r3, #0]
 801a576:	2b00      	cmp	r3, #0
 801a578:	dbc3      	blt.n	801a502 <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 801a57a:	2300      	movs	r3, #0
 801a57c:	e000      	b.n	801a580 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801a57e:	2301      	movs	r3, #1
  }
}
 801a580:	4618      	mov	r0, r3
 801a582:	3718      	adds	r7, #24
 801a584:	46bd      	mov	sp, r7
 801a586:	bd80      	pop	{r7, pc}

0801a588 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 801a588:	b580      	push	{r7, lr}
 801a58a:	b088      	sub	sp, #32
 801a58c:	af00      	add	r7, sp, #0
 801a58e:	6078      	str	r0, [r7, #4]
 801a590:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801a592:	2300      	movs	r3, #0
 801a594:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 801a596:	2300      	movs	r3, #0
 801a598:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 801a59a:	683b      	ldr	r3, [r7, #0]
 801a59c:	2b00      	cmp	r3, #0
 801a59e:	d109      	bne.n	801a5b4 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801a5a0:	687b      	ldr	r3, [r7, #4]
 801a5a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a5a6:	f043 0201 	orr.w	r2, r3, #1
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801a5b0:	2301      	movs	r3, #1
 801a5b2:	e0a8      	b.n	801a706 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 801a5b4:	687b      	ldr	r3, [r7, #4]
 801a5b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a5ba:	2b23      	cmp	r3, #35	; 0x23
 801a5bc:	d001      	beq.n	801a5c2 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 801a5be:	2301      	movs	r3, #1
 801a5c0:	e0a1      	b.n	801a706 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a5c6:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	69fa      	ldr	r2, [r7, #28]
 801a5cc:	3212      	adds	r2, #18
 801a5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a5d2:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a5d8:	f1c3 0304 	rsb	r3, r3, #4
 801a5dc:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801a5de:	e06a      	b.n	801a6b6 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 801a5e0:	69bb      	ldr	r3, [r7, #24]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d007      	beq.n	801a5fc <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 801a5ec:	69bb      	ldr	r3, [r7, #24]
 801a5ee:	699a      	ldr	r2, [r3, #24]
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 801a5f4:	69bb      	ldr	r3, [r7, #24]
 801a5f6:	69da      	ldr	r2, [r3, #28]
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 801a5fc:	69bb      	ldr	r3, [r7, #24]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a604:	2b00      	cmp	r3, #0
 801a606:	d103      	bne.n	801a610 <HAL_ETH_ReadData+0x88>
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801a60c:	2b00      	cmp	r3, #0
 801a60e:	d040      	beq.n	801a692 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 801a610:	69bb      	ldr	r3, [r7, #24]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d005      	beq.n	801a628 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 801a61c:	687b      	ldr	r3, [r7, #4]
 801a61e:	2200      	movs	r2, #0
 801a620:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	2200      	movs	r2, #0
 801a626:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	695b      	ldr	r3, [r3, #20]
 801a62c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801a62e:	69bb      	ldr	r3, [r7, #24]
 801a630:	681b      	ldr	r3, [r3, #0]
 801a632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801a636:	2b00      	cmp	r3, #0
 801a638:	d00c      	beq.n	801a654 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 801a63a:	69bb      	ldr	r3, [r7, #24]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	0c1b      	lsrs	r3, r3, #16
 801a640:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801a644:	3b04      	subs	r3, #4
 801a646:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 801a648:	69bb      	ldr	r3, [r7, #24]
 801a64a:	681a      	ldr	r2, [r3, #0]
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801a650:	2301      	movs	r3, #1
 801a652:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 801a654:	69bb      	ldr	r3, [r7, #24]
 801a656:	689a      	ldr	r2, [r3, #8]
 801a658:	69bb      	ldr	r3, [r7, #24]
 801a65a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801a65c:	687b      	ldr	r3, [r7, #4]
 801a65e:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 801a668:	69bb      	ldr	r3, [r7, #24]
 801a66a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 801a66c:	461a      	mov	r2, r3
 801a66e:	693b      	ldr	r3, [r7, #16]
 801a670:	b29b      	uxth	r3, r3
 801a672:	f006 fb4f 	bl	8020d14 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a67a:	1c5a      	adds	r2, r3, #1
 801a67c:	687b      	ldr	r3, [r7, #4]
 801a67e:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801a684:	693b      	ldr	r3, [r7, #16]
 801a686:	441a      	add	r2, r3
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 801a68c:	69bb      	ldr	r3, [r7, #24]
 801a68e:	2200      	movs	r2, #0
 801a690:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801a692:	69fb      	ldr	r3, [r7, #28]
 801a694:	3301      	adds	r3, #1
 801a696:	61fb      	str	r3, [r7, #28]
 801a698:	69fb      	ldr	r3, [r7, #28]
 801a69a:	2b03      	cmp	r3, #3
 801a69c:	d902      	bls.n	801a6a4 <HAL_ETH_ReadData+0x11c>
 801a69e:	69fb      	ldr	r3, [r7, #28]
 801a6a0:	3b04      	subs	r3, #4
 801a6a2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	69fa      	ldr	r2, [r7, #28]
 801a6a8:	3212      	adds	r2, #18
 801a6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a6ae:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801a6b0:	697b      	ldr	r3, [r7, #20]
 801a6b2:	3301      	adds	r3, #1
 801a6b4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 801a6b6:	69bb      	ldr	r3, [r7, #24]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	db06      	blt.n	801a6cc <HAL_ETH_ReadData+0x144>
 801a6be:	697a      	ldr	r2, [r7, #20]
 801a6c0:	68bb      	ldr	r3, [r7, #8]
 801a6c2:	429a      	cmp	r2, r3
 801a6c4:	d202      	bcs.n	801a6cc <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 801a6c6:	7bfb      	ldrb	r3, [r7, #15]
 801a6c8:	2b00      	cmp	r3, #0
 801a6ca:	d089      	beq.n	801a5e0 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a6d0:	697b      	ldr	r3, [r7, #20]
 801a6d2:	441a      	add	r2, r3
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 801a6d8:	687b      	ldr	r3, [r7, #4]
 801a6da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a6dc:	2b00      	cmp	r3, #0
 801a6de:	d002      	beq.n	801a6e6 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 801a6e0:	6878      	ldr	r0, [r7, #4]
 801a6e2:	f000 f815 	bl	801a710 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	69fa      	ldr	r2, [r7, #28]
 801a6ea:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 801a6ec:	7bfb      	ldrb	r3, [r7, #15]
 801a6ee:	2b01      	cmp	r3, #1
 801a6f0:	d108      	bne.n	801a704 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a6f6:	683b      	ldr	r3, [r7, #0]
 801a6f8:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	2200      	movs	r2, #0
 801a6fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801a700:	2300      	movs	r3, #0
 801a702:	e000      	b.n	801a706 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 801a704:	2301      	movs	r3, #1
}
 801a706:	4618      	mov	r0, r3
 801a708:	3720      	adds	r7, #32
 801a70a:	46bd      	mov	sp, r7
 801a70c:	bd80      	pop	{r7, pc}
	...

0801a710 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 801a710:	b580      	push	{r7, lr}
 801a712:	b088      	sub	sp, #32
 801a714:	af00      	add	r7, sp, #0
 801a716:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 801a718:	2300      	movs	r3, #0
 801a71a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 801a71c:	2301      	movs	r3, #1
 801a71e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a724:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a726:	687b      	ldr	r3, [r7, #4]
 801a728:	69fa      	ldr	r2, [r7, #28]
 801a72a:	3212      	adds	r2, #18
 801a72c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a730:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a736:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 801a738:	e040      	b.n	801a7bc <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 801a73a:	697b      	ldr	r3, [r7, #20]
 801a73c:	6a1b      	ldr	r3, [r3, #32]
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d112      	bne.n	801a768 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 801a742:	f107 030c 	add.w	r3, r7, #12
 801a746:	4618      	mov	r0, r3
 801a748:	f006 fab4 	bl	8020cb4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 801a74c:	68fb      	ldr	r3, [r7, #12]
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d102      	bne.n	801a758 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 801a752:	2300      	movs	r3, #0
 801a754:	74fb      	strb	r3, [r7, #19]
 801a756:	e007      	b.n	801a768 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	461a      	mov	r2, r3
 801a75c:	697b      	ldr	r3, [r7, #20]
 801a75e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	461a      	mov	r2, r3
 801a764:	697b      	ldr	r3, [r7, #20]
 801a766:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 801a768:	7cfb      	ldrb	r3, [r7, #19]
 801a76a:	2b00      	cmp	r3, #0
 801a76c:	d026      	beq.n	801a7bc <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a772:	2b00      	cmp	r3, #0
 801a774:	d103      	bne.n	801a77e <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801a776:	697b      	ldr	r3, [r7, #20]
 801a778:	4a1e      	ldr	r2, [pc, #120]	; (801a7f4 <ETH_UpdateDescriptor+0xe4>)
 801a77a:	605a      	str	r2, [r3, #4]
 801a77c:	e003      	b.n	801a786 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 801a77e:	697b      	ldr	r3, [r7, #20]
 801a780:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801a784:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 801a786:	f3bf 8f5f 	dmb	sy
}
 801a78a:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 801a78c:	697b      	ldr	r3, [r7, #20]
 801a78e:	681b      	ldr	r3, [r3, #0]
 801a790:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a794:	697b      	ldr	r3, [r7, #20]
 801a796:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 801a798:	69fb      	ldr	r3, [r7, #28]
 801a79a:	3301      	adds	r3, #1
 801a79c:	61fb      	str	r3, [r7, #28]
 801a79e:	69fb      	ldr	r3, [r7, #28]
 801a7a0:	2b03      	cmp	r3, #3
 801a7a2:	d902      	bls.n	801a7aa <ETH_UpdateDescriptor+0x9a>
 801a7a4:	69fb      	ldr	r3, [r7, #28]
 801a7a6:	3b04      	subs	r3, #4
 801a7a8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	69fa      	ldr	r2, [r7, #28]
 801a7ae:	3212      	adds	r2, #18
 801a7b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a7b4:	617b      	str	r3, [r7, #20]
      desccount--;
 801a7b6:	69bb      	ldr	r3, [r7, #24]
 801a7b8:	3b01      	subs	r3, #1
 801a7ba:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 801a7bc:	69bb      	ldr	r3, [r7, #24]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d002      	beq.n	801a7c8 <ETH_UpdateDescriptor+0xb8>
 801a7c2:	7cfb      	ldrb	r3, [r7, #19]
 801a7c4:	2b00      	cmp	r3, #0
 801a7c6:	d1b8      	bne.n	801a73a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a7cc:	69ba      	ldr	r2, [r7, #24]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	d00c      	beq.n	801a7ec <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a7da:	461a      	mov	r2, r3
 801a7dc:	2300      	movs	r3, #0
 801a7de:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 801a7e0:	687b      	ldr	r3, [r7, #4]
 801a7e2:	69fa      	ldr	r2, [r7, #28]
 801a7e4:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	69ba      	ldr	r2, [r7, #24]
 801a7ea:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 801a7ec:	bf00      	nop
 801a7ee:	3720      	adds	r7, #32
 801a7f0:	46bd      	mov	sp, r7
 801a7f2:	bd80      	pop	{r7, pc}
 801a7f4:	800045f8 	.word	0x800045f8

0801a7f8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 801a7f8:	b580      	push	{r7, lr}
 801a7fa:	b082      	sub	sp, #8
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 801a800:	687b      	ldr	r3, [r7, #4]
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a808:	695b      	ldr	r3, [r3, #20]
 801a80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a80e:	2b40      	cmp	r3, #64	; 0x40
 801a810:	d112      	bne.n	801a838 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a81a:	69db      	ldr	r3, [r3, #28]
 801a81c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a820:	2b40      	cmp	r3, #64	; 0x40
 801a822:	d109      	bne.n	801a838 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a82c:	461a      	mov	r2, r3
 801a82e:	4b50      	ldr	r3, [pc, #320]	; (801a970 <HAL_ETH_IRQHandler+0x178>)
 801a830:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	f000 f8ac 	bl	801a990 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a840:	695b      	ldr	r3, [r3, #20]
 801a842:	f003 0301 	and.w	r3, r3, #1
 801a846:	2b01      	cmp	r3, #1
 801a848:	d113      	bne.n	801a872 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a852:	69db      	ldr	r3, [r3, #28]
 801a854:	f003 0301 	and.w	r3, r3, #1
 801a858:	2b01      	cmp	r3, #1
 801a85a:	d10a      	bne.n	801a872 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	681b      	ldr	r3, [r3, #0]
 801a860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a864:	461a      	mov	r2, r3
 801a866:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 801a86a:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 801a86c:	6878      	ldr	r0, [r7, #4]
 801a86e:	f000 f885 	bl	801a97c <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	681b      	ldr	r3, [r3, #0]
 801a876:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a87a:	695b      	ldr	r3, [r3, #20]
 801a87c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a884:	d14c      	bne.n	801a920 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	681b      	ldr	r3, [r3, #0]
 801a88a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a88e:	69db      	ldr	r3, [r3, #28]
 801a890:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801a894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a898:	d142      	bne.n	801a920 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a8a0:	f043 0208 	orr.w	r2, r3, #8
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8b2:	695b      	ldr	r3, [r3, #20]
 801a8b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a8b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a8bc:	d11a      	bne.n	801a8f4 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8c6:	695a      	ldr	r2, [r3, #20]
 801a8c8:	4b2a      	ldr	r3, [pc, #168]	; (801a974 <HAL_ETH_IRQHandler+0x17c>)
 801a8ca:	4013      	ands	r3, r2
 801a8cc:	687a      	ldr	r2, [r7, #4]
 801a8ce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8da:	69db      	ldr	r3, [r3, #28]
 801a8dc:	687a      	ldr	r2, [r7, #4]
 801a8de:	6812      	ldr	r2, [r2, #0]
 801a8e0:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801a8e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801a8e8:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	22e0      	movs	r2, #224	; 0xe0
 801a8ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801a8f2:	e012      	b.n	801a91a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a8fc:	695a      	ldr	r2, [r3, #20]
 801a8fe:	f248 6380 	movw	r3, #34432	; 0x8680
 801a902:	4013      	ands	r3, r2
 801a904:	687a      	ldr	r2, [r7, #4]
 801a906:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	681b      	ldr	r3, [r3, #0]
 801a90e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801a912:	461a      	mov	r2, r3
 801a914:	f248 6380 	movw	r3, #34432	; 0x8680
 801a918:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 801a91a:	6878      	ldr	r0, [r7, #4]
 801a91c:	f000 f842 	bl	801a9a4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 801a920:	687b      	ldr	r3, [r7, #4]
 801a922:	681b      	ldr	r3, [r3, #0]
 801a924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a926:	f003 0308 	and.w	r3, r3, #8
 801a92a:	2b08      	cmp	r3, #8
 801a92c:	d10e      	bne.n	801a94c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	681b      	ldr	r3, [r3, #0]
 801a932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a934:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 801a93e:	6878      	ldr	r0, [r7, #4]
 801a940:	f000 f83a 	bl	801a9b8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	2200      	movs	r2, #0
 801a948:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 801a94c:	4b0a      	ldr	r3, [pc, #40]	; (801a978 <HAL_ETH_IRQHandler+0x180>)
 801a94e:	695b      	ldr	r3, [r3, #20]
 801a950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801a954:	2b00      	cmp	r3, #0
 801a956:	d006      	beq.n	801a966 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 801a958:	4b07      	ldr	r3, [pc, #28]	; (801a978 <HAL_ETH_IRQHandler+0x180>)
 801a95a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a95e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 801a960:	6878      	ldr	r0, [r7, #4]
 801a962:	f000 f833 	bl	801a9cc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 801a966:	bf00      	nop
 801a968:	3708      	adds	r7, #8
 801a96a:	46bd      	mov	sp, r7
 801a96c:	bd80      	pop	{r7, pc}
 801a96e:	bf00      	nop
 801a970:	00010040 	.word	0x00010040
 801a974:	007e2000 	.word	0x007e2000
 801a978:	40013c00 	.word	0x40013c00

0801a97c <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 801a97c:	b480      	push	{r7}
 801a97e:	b083      	sub	sp, #12
 801a980:	af00      	add	r7, sp, #0
 801a982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 801a984:	bf00      	nop
 801a986:	370c      	adds	r7, #12
 801a988:	46bd      	mov	sp, r7
 801a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a98e:	4770      	bx	lr

0801a990 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 801a990:	b480      	push	{r7}
 801a992:	b083      	sub	sp, #12
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 801a998:	bf00      	nop
 801a99a:	370c      	adds	r7, #12
 801a99c:	46bd      	mov	sp, r7
 801a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9a2:	4770      	bx	lr

0801a9a4 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801a9a4:	b480      	push	{r7}
 801a9a6:	b083      	sub	sp, #12
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 801a9ac:	bf00      	nop
 801a9ae:	370c      	adds	r7, #12
 801a9b0:	46bd      	mov	sp, r7
 801a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9b6:	4770      	bx	lr

0801a9b8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 801a9b8:	b480      	push	{r7}
 801a9ba:	b083      	sub	sp, #12
 801a9bc:	af00      	add	r7, sp, #0
 801a9be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 801a9c0:	bf00      	nop
 801a9c2:	370c      	adds	r7, #12
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9ca:	4770      	bx	lr

0801a9cc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 801a9cc:	b480      	push	{r7}
 801a9ce:	b083      	sub	sp, #12
 801a9d0:	af00      	add	r7, sp, #0
 801a9d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801a9d4:	bf00      	nop
 801a9d6:	370c      	adds	r7, #12
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9de:	4770      	bx	lr

0801a9e0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 801a9e0:	b580      	push	{r7, lr}
 801a9e2:	b086      	sub	sp, #24
 801a9e4:	af00      	add	r7, sp, #0
 801a9e6:	60f8      	str	r0, [r7, #12]
 801a9e8:	60b9      	str	r1, [r7, #8]
 801a9ea:	607a      	str	r2, [r7, #4]
 801a9ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	691b      	ldr	r3, [r3, #16]
 801a9f4:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801a9f6:	697b      	ldr	r3, [r7, #20]
 801a9f8:	f003 031c 	and.w	r3, r3, #28
 801a9fc:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 801a9fe:	68bb      	ldr	r3, [r7, #8]
 801aa00:	02db      	lsls	r3, r3, #11
 801aa02:	b29b      	uxth	r3, r3
 801aa04:	697a      	ldr	r2, [r7, #20]
 801aa06:	4313      	orrs	r3, r2
 801aa08:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	019b      	lsls	r3, r3, #6
 801aa0e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801aa12:	697a      	ldr	r2, [r7, #20]
 801aa14:	4313      	orrs	r3, r2
 801aa16:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 801aa18:	697b      	ldr	r3, [r7, #20]
 801aa1a:	f023 0302 	bic.w	r3, r3, #2
 801aa1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 801aa20:	697b      	ldr	r3, [r7, #20]
 801aa22:	f043 0301 	orr.w	r3, r3, #1
 801aa26:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801aa28:	68fb      	ldr	r3, [r7, #12]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	697a      	ldr	r2, [r7, #20]
 801aa2e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 801aa30:	f7fe fbb0 	bl	8019194 <HAL_GetTick>
 801aa34:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aa36:	e00d      	b.n	801aa54 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 801aa38:	f7fe fbac 	bl	8019194 <HAL_GetTick>
 801aa3c:	4602      	mov	r2, r0
 801aa3e:	693b      	ldr	r3, [r7, #16]
 801aa40:	1ad3      	subs	r3, r2, r3
 801aa42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aa46:	d301      	bcc.n	801aa4c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 801aa48:	2301      	movs	r3, #1
 801aa4a:	e010      	b.n	801aa6e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801aa4c:	68fb      	ldr	r3, [r7, #12]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	691b      	ldr	r3, [r3, #16]
 801aa52:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aa54:	697b      	ldr	r3, [r7, #20]
 801aa56:	f003 0301 	and.w	r3, r3, #1
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d1ec      	bne.n	801aa38 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	681b      	ldr	r3, [r3, #0]
 801aa62:	695b      	ldr	r3, [r3, #20]
 801aa64:	b29b      	uxth	r3, r3
 801aa66:	461a      	mov	r2, r3
 801aa68:	683b      	ldr	r3, [r7, #0]
 801aa6a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 801aa6c:	2300      	movs	r3, #0
}
 801aa6e:	4618      	mov	r0, r3
 801aa70:	3718      	adds	r7, #24
 801aa72:	46bd      	mov	sp, r7
 801aa74:	bd80      	pop	{r7, pc}

0801aa76 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 801aa76:	b580      	push	{r7, lr}
 801aa78:	b086      	sub	sp, #24
 801aa7a:	af00      	add	r7, sp, #0
 801aa7c:	60f8      	str	r0, [r7, #12]
 801aa7e:	60b9      	str	r1, [r7, #8]
 801aa80:	607a      	str	r2, [r7, #4]
 801aa82:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 801aa84:	68fb      	ldr	r3, [r7, #12]
 801aa86:	681b      	ldr	r3, [r3, #0]
 801aa88:	691b      	ldr	r3, [r3, #16]
 801aa8a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801aa8c:	697b      	ldr	r3, [r7, #20]
 801aa8e:	f003 031c 	and.w	r3, r3, #28
 801aa92:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801aa94:	68bb      	ldr	r3, [r7, #8]
 801aa96:	02db      	lsls	r3, r3, #11
 801aa98:	b29b      	uxth	r3, r3
 801aa9a:	697a      	ldr	r2, [r7, #20]
 801aa9c:	4313      	orrs	r3, r2
 801aa9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	019b      	lsls	r3, r3, #6
 801aaa4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801aaa8:	697a      	ldr	r2, [r7, #20]
 801aaaa:	4313      	orrs	r3, r2
 801aaac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 801aaae:	697b      	ldr	r3, [r7, #20]
 801aab0:	f043 0302 	orr.w	r3, r3, #2
 801aab4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	f043 0301 	orr.w	r3, r3, #1
 801aabc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 801aabe:	683b      	ldr	r3, [r7, #0]
 801aac0:	b29a      	uxth	r2, r3
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 801aac8:	68fb      	ldr	r3, [r7, #12]
 801aaca:	681b      	ldr	r3, [r3, #0]
 801aacc:	697a      	ldr	r2, [r7, #20]
 801aace:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 801aad0:	f7fe fb60 	bl	8019194 <HAL_GetTick>
 801aad4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aad6:	e00d      	b.n	801aaf4 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 801aad8:	f7fe fb5c 	bl	8019194 <HAL_GetTick>
 801aadc:	4602      	mov	r2, r0
 801aade:	693b      	ldr	r3, [r7, #16]
 801aae0:	1ad3      	subs	r3, r2, r3
 801aae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801aae6:	d301      	bcc.n	801aaec <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 801aae8:	2301      	movs	r3, #1
 801aaea:	e009      	b.n	801ab00 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 801aaec:	68fb      	ldr	r3, [r7, #12]
 801aaee:	681b      	ldr	r3, [r3, #0]
 801aaf0:	691b      	ldr	r3, [r3, #16]
 801aaf2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801aaf4:	697b      	ldr	r3, [r7, #20]
 801aaf6:	f003 0301 	and.w	r3, r3, #1
 801aafa:	2b00      	cmp	r3, #0
 801aafc:	d1ec      	bne.n	801aad8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 801aafe:	2300      	movs	r3, #0
}
 801ab00:	4618      	mov	r0, r3
 801ab02:	3718      	adds	r7, #24
 801ab04:	46bd      	mov	sp, r7
 801ab06:	bd80      	pop	{r7, pc}

0801ab08 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 801ab08:	b480      	push	{r7}
 801ab0a:	b083      	sub	sp, #12
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	6078      	str	r0, [r7, #4]
 801ab10:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801ab12:	683b      	ldr	r3, [r7, #0]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d101      	bne.n	801ab1c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 801ab18:	2301      	movs	r3, #1
 801ab1a:	e0d9      	b.n	801acd0 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	f003 0310 	and.w	r3, r3, #16
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	bf14      	ite	ne
 801ab2a:	2301      	movne	r3, #1
 801ab2c:	2300      	moveq	r3, #0
 801ab2e:	b2db      	uxtb	r3, r3
 801ab30:	461a      	mov	r2, r3
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	681b      	ldr	r3, [r3, #0]
 801ab3e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 801ab42:	683b      	ldr	r3, [r7, #0]
 801ab44:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 801ab46:	687b      	ldr	r3, [r7, #4]
 801ab48:	681b      	ldr	r3, [r3, #0]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	bf0c      	ite	eq
 801ab54:	2301      	moveq	r3, #1
 801ab56:	2300      	movne	r3, #0
 801ab58:	b2db      	uxtb	r3, r3
 801ab5a:	461a      	mov	r2, r3
 801ab5c:	683b      	ldr	r3, [r7, #0]
 801ab5e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801ab62:	687b      	ldr	r3, [r7, #4]
 801ab64:	681b      	ldr	r3, [r3, #0]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 801ab6c:	2b00      	cmp	r3, #0
 801ab6e:	bf14      	ite	ne
 801ab70:	2301      	movne	r3, #1
 801ab72:	2300      	moveq	r3, #0
 801ab74:	b2db      	uxtb	r3, r3
 801ab76:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 801ab78:	683b      	ldr	r3, [r7, #0]
 801ab7a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	bf0c      	ite	eq
 801ab8a:	2301      	moveq	r3, #1
 801ab8c:	2300      	movne	r3, #0
 801ab8e:	b2db      	uxtb	r3, r3
 801ab90:	461a      	mov	r2, r3
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	681b      	ldr	r3, [r3, #0]
 801ab9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801aba0:	2b00      	cmp	r3, #0
 801aba2:	bf14      	ite	ne
 801aba4:	2301      	movne	r3, #1
 801aba6:	2300      	moveq	r3, #0
 801aba8:	b2db      	uxtb	r3, r3
 801abaa:	461a      	mov	r2, r3
 801abac:	683b      	ldr	r3, [r7, #0]
 801abae:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	681b      	ldr	r3, [r3, #0]
 801abb6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 801abba:	683b      	ldr	r3, [r7, #0]
 801abbc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	681b      	ldr	r3, [r3, #0]
 801abc4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 801abc8:	683b      	ldr	r3, [r7, #0]
 801abca:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	bf0c      	ite	eq
 801abda:	2301      	moveq	r3, #1
 801abdc:	2300      	movne	r3, #0
 801abde:	b2db      	uxtb	r3, r3
 801abe0:	461a      	mov	r2, r3
 801abe2:	683b      	ldr	r3, [r7, #0]
 801abe4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	681b      	ldr	r3, [r3, #0]
 801abec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801abf0:	2b00      	cmp	r3, #0
 801abf2:	bf0c      	ite	eq
 801abf4:	2301      	moveq	r3, #1
 801abf6:	2300      	movne	r3, #0
 801abf8:	b2db      	uxtb	r3, r3
 801abfa:	461a      	mov	r2, r3
 801abfc:	683b      	ldr	r3, [r7, #0]
 801abfe:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac0a:	2b00      	cmp	r3, #0
 801ac0c:	bf14      	ite	ne
 801ac0e:	2301      	movne	r3, #1
 801ac10:	2300      	moveq	r3, #0
 801ac12:	b2db      	uxtb	r3, r3
 801ac14:	461a      	mov	r2, r3
 801ac16:	683b      	ldr	r3, [r7, #0]
 801ac18:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	681b      	ldr	r3, [r3, #0]
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801ac24:	683b      	ldr	r3, [r7, #0]
 801ac26:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	681b      	ldr	r3, [r3, #0]
 801ac2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	bf14      	ite	ne
 801ac36:	2301      	movne	r3, #1
 801ac38:	2300      	moveq	r3, #0
 801ac3a:	b2db      	uxtb	r3, r3
 801ac3c:	461a      	mov	r2, r3
 801ac3e:	683b      	ldr	r3, [r7, #0]
 801ac40:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	699b      	ldr	r3, [r3, #24]
 801ac48:	f003 0302 	and.w	r3, r3, #2
 801ac4c:	2b00      	cmp	r3, #0
 801ac4e:	bf14      	ite	ne
 801ac50:	2301      	movne	r3, #1
 801ac52:	2300      	moveq	r3, #0
 801ac54:	b2db      	uxtb	r3, r3
 801ac56:	461a      	mov	r2, r3
 801ac58:	683b      	ldr	r3, [r7, #0]
 801ac5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	699b      	ldr	r3, [r3, #24]
 801ac64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ac68:	2b00      	cmp	r3, #0
 801ac6a:	bf0c      	ite	eq
 801ac6c:	2301      	moveq	r3, #1
 801ac6e:	2300      	movne	r3, #0
 801ac70:	b2db      	uxtb	r3, r3
 801ac72:	461a      	mov	r2, r3
 801ac74:	683b      	ldr	r3, [r7, #0]
 801ac76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	699b      	ldr	r3, [r3, #24]
 801ac80:	f003 0230 	and.w	r2, r3, #48	; 0x30
 801ac84:	683b      	ldr	r3, [r7, #0]
 801ac86:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 801ac88:	687b      	ldr	r3, [r7, #4]
 801ac8a:	681b      	ldr	r3, [r3, #0]
 801ac8c:	699b      	ldr	r3, [r3, #24]
 801ac8e:	0c1b      	lsrs	r3, r3, #16
 801ac90:	b29a      	uxth	r2, r3
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	699b      	ldr	r3, [r3, #24]
 801ac9c:	f003 0304 	and.w	r3, r3, #4
 801aca0:	2b00      	cmp	r3, #0
 801aca2:	bf14      	ite	ne
 801aca4:	2301      	movne	r3, #1
 801aca6:	2300      	moveq	r3, #0
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	461a      	mov	r2, r3
 801acac:	683b      	ldr	r3, [r7, #0]
 801acae:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	699b      	ldr	r3, [r3, #24]
 801acb8:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	bf14      	ite	ne
 801acc0:	2301      	movne	r3, #1
 801acc2:	2300      	moveq	r3, #0
 801acc4:	b2db      	uxtb	r3, r3
 801acc6:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801acc8:	683b      	ldr	r3, [r7, #0]
 801acca:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 801acce:	2300      	movs	r3, #0
}
 801acd0:	4618      	mov	r0, r3
 801acd2:	370c      	adds	r7, #12
 801acd4:	46bd      	mov	sp, r7
 801acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acda:	4770      	bx	lr

0801acdc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801acdc:	b580      	push	{r7, lr}
 801acde:	b082      	sub	sp, #8
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]
 801ace4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801ace6:	683b      	ldr	r3, [r7, #0]
 801ace8:	2b00      	cmp	r3, #0
 801acea:	d101      	bne.n	801acf0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 801acec:	2301      	movs	r3, #1
 801acee:	e00b      	b.n	801ad08 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801acf6:	2b10      	cmp	r3, #16
 801acf8:	d105      	bne.n	801ad06 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 801acfa:	6839      	ldr	r1, [r7, #0]
 801acfc:	6878      	ldr	r0, [r7, #4]
 801acfe:	f000 f883 	bl	801ae08 <ETH_SetMACConfig>

    return HAL_OK;
 801ad02:	2300      	movs	r3, #0
 801ad04:	e000      	b.n	801ad08 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801ad06:	2301      	movs	r3, #1
  }
}
 801ad08:	4618      	mov	r0, r3
 801ad0a:	3708      	adds	r7, #8
 801ad0c:	46bd      	mov	sp, r7
 801ad0e:	bd80      	pop	{r7, pc}

0801ad10 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 801ad10:	b580      	push	{r7, lr}
 801ad12:	b084      	sub	sp, #16
 801ad14:	af00      	add	r7, sp, #0
 801ad16:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 801ad18:	687b      	ldr	r3, [r7, #4]
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	691b      	ldr	r3, [r3, #16]
 801ad1e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	f023 031c 	bic.w	r3, r3, #28
 801ad26:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 801ad28:	f002 f916 	bl	801cf58 <HAL_RCC_GetHCLKFreq>
 801ad2c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801ad2e:	68bb      	ldr	r3, [r7, #8]
 801ad30:	4a1d      	ldr	r2, [pc, #116]	; (801ada8 <HAL_ETH_SetMDIOClockRange+0x98>)
 801ad32:	4293      	cmp	r3, r2
 801ad34:	d908      	bls.n	801ad48 <HAL_ETH_SetMDIOClockRange+0x38>
 801ad36:	68bb      	ldr	r3, [r7, #8]
 801ad38:	4a1c      	ldr	r2, [pc, #112]	; (801adac <HAL_ETH_SetMDIOClockRange+0x9c>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d804      	bhi.n	801ad48 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801ad3e:	68fb      	ldr	r3, [r7, #12]
 801ad40:	f043 0308 	orr.w	r3, r3, #8
 801ad44:	60fb      	str	r3, [r7, #12]
 801ad46:	e027      	b.n	801ad98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 801ad48:	68bb      	ldr	r3, [r7, #8]
 801ad4a:	4a18      	ldr	r2, [pc, #96]	; (801adac <HAL_ETH_SetMDIOClockRange+0x9c>)
 801ad4c:	4293      	cmp	r3, r2
 801ad4e:	d908      	bls.n	801ad62 <HAL_ETH_SetMDIOClockRange+0x52>
 801ad50:	68bb      	ldr	r3, [r7, #8]
 801ad52:	4a17      	ldr	r2, [pc, #92]	; (801adb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801ad54:	4293      	cmp	r3, r2
 801ad56:	d204      	bcs.n	801ad62 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 801ad58:	68fb      	ldr	r3, [r7, #12]
 801ad5a:	f043 030c 	orr.w	r3, r3, #12
 801ad5e:	60fb      	str	r3, [r7, #12]
 801ad60:	e01a      	b.n	801ad98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801ad62:	68bb      	ldr	r3, [r7, #8]
 801ad64:	4a12      	ldr	r2, [pc, #72]	; (801adb0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 801ad66:	4293      	cmp	r3, r2
 801ad68:	d303      	bcc.n	801ad72 <HAL_ETH_SetMDIOClockRange+0x62>
 801ad6a:	68bb      	ldr	r3, [r7, #8]
 801ad6c:	4a11      	ldr	r2, [pc, #68]	; (801adb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801ad6e:	4293      	cmp	r3, r2
 801ad70:	d911      	bls.n	801ad96 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801ad72:	68bb      	ldr	r3, [r7, #8]
 801ad74:	4a0f      	ldr	r2, [pc, #60]	; (801adb4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801ad76:	4293      	cmp	r3, r2
 801ad78:	d908      	bls.n	801ad8c <HAL_ETH_SetMDIOClockRange+0x7c>
 801ad7a:	68bb      	ldr	r3, [r7, #8]
 801ad7c:	4a0e      	ldr	r2, [pc, #56]	; (801adb8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801ad7e:	4293      	cmp	r3, r2
 801ad80:	d804      	bhi.n	801ad8c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801ad82:	68fb      	ldr	r3, [r7, #12]
 801ad84:	f043 0304 	orr.w	r3, r3, #4
 801ad88:	60fb      	str	r3, [r7, #12]
 801ad8a:	e005      	b.n	801ad98 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 801ad8c:	68fb      	ldr	r3, [r7, #12]
 801ad8e:	f043 0310 	orr.w	r3, r3, #16
 801ad92:	60fb      	str	r3, [r7, #12]
 801ad94:	e000      	b.n	801ad98 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801ad96:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	68fa      	ldr	r2, [r7, #12]
 801ad9e:	611a      	str	r2, [r3, #16]
}
 801ada0:	bf00      	nop
 801ada2:	3710      	adds	r7, #16
 801ada4:	46bd      	mov	sp, r7
 801ada6:	bd80      	pop	{r7, pc}
 801ada8:	01312cff 	.word	0x01312cff
 801adac:	02160ebf 	.word	0x02160ebf
 801adb0:	03938700 	.word	0x03938700
 801adb4:	05f5e0ff 	.word	0x05f5e0ff
 801adb8:	08f0d17f 	.word	0x08f0d17f

0801adbc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b084      	sub	sp, #16
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801adc4:	2300      	movs	r3, #0
 801adc6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	681b      	ldr	r3, [r3, #0]
 801adcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801add0:	699b      	ldr	r3, [r3, #24]
 801add2:	687a      	ldr	r2, [r7, #4]
 801add4:	6812      	ldr	r2, [r2, #0]
 801add6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801adda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801adde:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	681b      	ldr	r3, [r3, #0]
 801ade4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801ade8:	699b      	ldr	r3, [r3, #24]
 801adea:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801adec:	2001      	movs	r0, #1
 801adee:	f7fe f9dd 	bl	80191ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681a      	ldr	r2, [r3, #0]
 801adf6:	68fb      	ldr	r3, [r7, #12]
 801adf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801adfc:	6193      	str	r3, [r2, #24]
}
 801adfe:	bf00      	nop
 801ae00:	3710      	adds	r7, #16
 801ae02:	46bd      	mov	sp, r7
 801ae04:	bd80      	pop	{r7, pc}
	...

0801ae08 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 801ae08:	b580      	push	{r7, lr}
 801ae0a:	b084      	sub	sp, #16
 801ae0c:	af00      	add	r7, sp, #0
 801ae0e:	6078      	str	r0, [r7, #4]
 801ae10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 801ae1a:	68fa      	ldr	r2, [r7, #12]
 801ae1c:	4b51      	ldr	r3, [pc, #324]	; (801af64 <ETH_SetMACConfig+0x15c>)
 801ae1e:	4013      	ands	r3, r2
 801ae20:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801ae22:	683b      	ldr	r3, [r7, #0]
 801ae24:	7c1b      	ldrb	r3, [r3, #16]
 801ae26:	2b00      	cmp	r3, #0
 801ae28:	d102      	bne.n	801ae30 <ETH_SetMACConfig+0x28>
 801ae2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801ae2e:	e000      	b.n	801ae32 <ETH_SetMACConfig+0x2a>
 801ae30:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801ae32:	683b      	ldr	r3, [r7, #0]
 801ae34:	7c5b      	ldrb	r3, [r3, #17]
 801ae36:	2b00      	cmp	r3, #0
 801ae38:	d102      	bne.n	801ae40 <ETH_SetMACConfig+0x38>
 801ae3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801ae3e:	e000      	b.n	801ae42 <ETH_SetMACConfig+0x3a>
 801ae40:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801ae42:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 801ae44:	683b      	ldr	r3, [r7, #0]
 801ae46:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801ae48:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801ae4a:	683b      	ldr	r3, [r7, #0]
 801ae4c:	7fdb      	ldrb	r3, [r3, #31]
 801ae4e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801ae50:	431a      	orrs	r2, r3
                        macconf->Speed |
 801ae52:	683b      	ldr	r3, [r7, #0]
 801ae54:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 801ae56:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801ae58:	683a      	ldr	r2, [r7, #0]
 801ae5a:	7f92      	ldrb	r2, [r2, #30]
 801ae5c:	2a00      	cmp	r2, #0
 801ae5e:	d102      	bne.n	801ae66 <ETH_SetMACConfig+0x5e>
 801ae60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801ae64:	e000      	b.n	801ae68 <ETH_SetMACConfig+0x60>
 801ae66:	2200      	movs	r2, #0
                        macconf->Speed |
 801ae68:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801ae6a:	683b      	ldr	r3, [r7, #0]
 801ae6c:	7f1b      	ldrb	r3, [r3, #28]
 801ae6e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801ae70:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801ae72:	683b      	ldr	r3, [r7, #0]
 801ae74:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 801ae76:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801ae78:	683b      	ldr	r3, [r7, #0]
 801ae7a:	791b      	ldrb	r3, [r3, #4]
 801ae7c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801ae7e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801ae80:	683a      	ldr	r2, [r7, #0]
 801ae82:	f892 2020 	ldrb.w	r2, [r2, #32]
 801ae86:	2a00      	cmp	r2, #0
 801ae88:	d102      	bne.n	801ae90 <ETH_SetMACConfig+0x88>
 801ae8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801ae8e:	e000      	b.n	801ae92 <ETH_SetMACConfig+0x8a>
 801ae90:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801ae92:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801ae94:	683b      	ldr	r3, [r7, #0]
 801ae96:	7bdb      	ldrb	r3, [r3, #15]
 801ae98:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801ae9a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 801ae9c:	683b      	ldr	r3, [r7, #0]
 801ae9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801aea0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801aea2:	683b      	ldr	r3, [r7, #0]
 801aea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aea8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801aeaa:	4313      	orrs	r3, r2
 801aeac:	68fa      	ldr	r2, [r7, #12]
 801aeae:	4313      	orrs	r3, r2
 801aeb0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	68fa      	ldr	r2, [r7, #12]
 801aeb8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	681b      	ldr	r3, [r3, #0]
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801aec2:	2001      	movs	r0, #1
 801aec4:	f7fe f972 	bl	80191ac <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 801aec8:	687b      	ldr	r3, [r7, #4]
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	68fa      	ldr	r2, [r7, #12]
 801aece:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	681b      	ldr	r3, [r3, #0]
 801aed4:	699b      	ldr	r3, [r3, #24]
 801aed6:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 801aed8:	68fa      	ldr	r2, [r7, #12]
 801aeda:	f64f 7341 	movw	r3, #65345	; 0xff41
 801aede:	4013      	ands	r3, r2
 801aee0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801aee2:	683b      	ldr	r3, [r7, #0]
 801aee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801aee6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801aee8:	683a      	ldr	r2, [r7, #0]
 801aeea:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 801aeee:	2a00      	cmp	r2, #0
 801aef0:	d101      	bne.n	801aef6 <ETH_SetMACConfig+0xee>
 801aef2:	2280      	movs	r2, #128	; 0x80
 801aef4:	e000      	b.n	801aef8 <ETH_SetMACConfig+0xf0>
 801aef6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801aef8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 801aefa:	683b      	ldr	r3, [r7, #0]
 801aefc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 801aefe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801af00:	683a      	ldr	r2, [r7, #0]
 801af02:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801af06:	2a01      	cmp	r2, #1
 801af08:	d101      	bne.n	801af0e <ETH_SetMACConfig+0x106>
 801af0a:	2208      	movs	r2, #8
 801af0c:	e000      	b.n	801af10 <ETH_SetMACConfig+0x108>
 801af0e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 801af10:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801af12:	683a      	ldr	r2, [r7, #0]
 801af14:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 801af18:	2a01      	cmp	r2, #1
 801af1a:	d101      	bne.n	801af20 <ETH_SetMACConfig+0x118>
 801af1c:	2204      	movs	r2, #4
 801af1e:	e000      	b.n	801af22 <ETH_SetMACConfig+0x11a>
 801af20:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801af22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801af24:	683a      	ldr	r2, [r7, #0]
 801af26:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 801af2a:	2a01      	cmp	r2, #1
 801af2c:	d101      	bne.n	801af32 <ETH_SetMACConfig+0x12a>
 801af2e:	2202      	movs	r2, #2
 801af30:	e000      	b.n	801af34 <ETH_SetMACConfig+0x12c>
 801af32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801af34:	4313      	orrs	r3, r2
 801af36:	68fa      	ldr	r2, [r7, #12]
 801af38:	4313      	orrs	r3, r2
 801af3a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	68fa      	ldr	r2, [r7, #12]
 801af42:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 801af44:	687b      	ldr	r3, [r7, #4]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	699b      	ldr	r3, [r3, #24]
 801af4a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801af4c:	2001      	movs	r0, #1
 801af4e:	f7fe f92d 	bl	80191ac <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	681b      	ldr	r3, [r3, #0]
 801af56:	68fa      	ldr	r2, [r7, #12]
 801af58:	619a      	str	r2, [r3, #24]
}
 801af5a:	bf00      	nop
 801af5c:	3710      	adds	r7, #16
 801af5e:	46bd      	mov	sp, r7
 801af60:	bd80      	pop	{r7, pc}
 801af62:	bf00      	nop
 801af64:	ff20810f 	.word	0xff20810f

0801af68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 801af68:	b580      	push	{r7, lr}
 801af6a:	b084      	sub	sp, #16
 801af6c:	af00      	add	r7, sp, #0
 801af6e:	6078      	str	r0, [r7, #4]
 801af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	681b      	ldr	r3, [r3, #0]
 801af76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801af7a:	699b      	ldr	r3, [r3, #24]
 801af7c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801af7e:	68fa      	ldr	r2, [r7, #12]
 801af80:	4b3d      	ldr	r3, [pc, #244]	; (801b078 <ETH_SetDMAConfig+0x110>)
 801af82:	4013      	ands	r3, r2
 801af84:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801af86:	683b      	ldr	r3, [r7, #0]
 801af88:	7b1b      	ldrb	r3, [r3, #12]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d102      	bne.n	801af94 <ETH_SetDMAConfig+0x2c>
 801af8e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801af92:	e000      	b.n	801af96 <ETH_SetDMAConfig+0x2e>
 801af94:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	7b5b      	ldrb	r3, [r3, #13]
 801af9a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801af9c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801af9e:	683a      	ldr	r2, [r7, #0]
 801afa0:	7f52      	ldrb	r2, [r2, #29]
 801afa2:	2a00      	cmp	r2, #0
 801afa4:	d102      	bne.n	801afac <ETH_SetDMAConfig+0x44>
 801afa6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801afaa:	e000      	b.n	801afae <ETH_SetDMAConfig+0x46>
 801afac:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801afae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801afb0:	683b      	ldr	r3, [r7, #0]
 801afb2:	7b9b      	ldrb	r3, [r3, #14]
 801afb4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801afb6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 801afb8:	683b      	ldr	r3, [r7, #0]
 801afba:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801afbc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801afbe:	683b      	ldr	r3, [r7, #0]
 801afc0:	7f1b      	ldrb	r3, [r3, #28]
 801afc2:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801afc4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	7f9b      	ldrb	r3, [r3, #30]
 801afca:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 801afcc:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 801afce:	683b      	ldr	r3, [r7, #0]
 801afd0:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801afd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801afd4:	683b      	ldr	r3, [r7, #0]
 801afd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 801afda:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 801afdc:	4313      	orrs	r3, r2
 801afde:	68fa      	ldr	r2, [r7, #12]
 801afe0:	4313      	orrs	r3, r2
 801afe2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	681b      	ldr	r3, [r3, #0]
 801afe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801afec:	461a      	mov	r2, r3
 801afee:	68fb      	ldr	r3, [r7, #12]
 801aff0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801aff2:	687b      	ldr	r3, [r7, #4]
 801aff4:	681b      	ldr	r3, [r3, #0]
 801aff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801affa:	699b      	ldr	r3, [r3, #24]
 801affc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801affe:	2001      	movs	r0, #1
 801b000:	f7fe f8d4 	bl	80191ac <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b00c:	461a      	mov	r2, r3
 801b00e:	68fb      	ldr	r3, [r7, #12]
 801b010:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b012:	683b      	ldr	r3, [r7, #0]
 801b014:	791b      	ldrb	r3, [r3, #4]
 801b016:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 801b018:	683b      	ldr	r3, [r7, #0]
 801b01a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b01c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801b01e:	683b      	ldr	r3, [r7, #0]
 801b020:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801b022:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801b028:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801b02a:	683b      	ldr	r3, [r7, #0]
 801b02c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801b030:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801b032:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801b034:	683b      	ldr	r3, [r7, #0]
 801b036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b038:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 801b03a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 801b03c:	683b      	ldr	r3, [r7, #0]
 801b03e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801b040:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801b042:	687a      	ldr	r2, [r7, #4]
 801b044:	6812      	ldr	r2, [r2, #0]
 801b046:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801b04a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801b04e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	681b      	ldr	r3, [r3, #0]
 801b054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801b05c:	2001      	movs	r0, #1
 801b05e:	f7fe f8a5 	bl	80191ac <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801b062:	687b      	ldr	r3, [r7, #4]
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b06a:	461a      	mov	r2, r3
 801b06c:	68fb      	ldr	r3, [r7, #12]
 801b06e:	6013      	str	r3, [r2, #0]
}
 801b070:	bf00      	nop
 801b072:	3710      	adds	r7, #16
 801b074:	46bd      	mov	sp, r7
 801b076:	bd80      	pop	{r7, pc}
 801b078:	f8de3f23 	.word	0xf8de3f23

0801b07c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 801b07c:	b580      	push	{r7, lr}
 801b07e:	b0a6      	sub	sp, #152	; 0x98
 801b080:	af00      	add	r7, sp, #0
 801b082:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 801b084:	2301      	movs	r3, #1
 801b086:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 801b08a:	2301      	movs	r3, #1
 801b08c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801b090:	2300      	movs	r3, #0
 801b092:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801b094:	2300      	movs	r3, #0
 801b096:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 801b09a:	2301      	movs	r3, #1
 801b09c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801b0a6:	2301      	movs	r3, #1
 801b0a8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 801b0ac:	2300      	movs	r3, #0
 801b0ae:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801b0b2:	2300      	movs	r3, #0
 801b0b4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 801b0bc:	2300      	movs	r3, #0
 801b0be:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801b0c2:	2300      	movs	r3, #0
 801b0c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801b0c6:	2300      	movs	r3, #0
 801b0c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 801b0cc:	2300      	movs	r3, #0
 801b0ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801b0d2:	2300      	movs	r3, #0
 801b0d4:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 801b0d8:	2300      	movs	r3, #0
 801b0da:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 801b0de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801b0e2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801b0e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801b0e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 801b0ea:	2300      	movs	r3, #0
 801b0ec:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 801b0f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b0f4:	4619      	mov	r1, r3
 801b0f6:	6878      	ldr	r0, [r7, #4]
 801b0f8:	f7ff fe86 	bl	801ae08 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 801b0fc:	2301      	movs	r3, #1
 801b0fe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 801b100:	2301      	movs	r3, #1
 801b102:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801b104:	2301      	movs	r3, #1
 801b106:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 801b10a:	2301      	movs	r3, #1
 801b10c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 801b10e:	2300      	movs	r3, #0
 801b110:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801b112:	2300      	movs	r3, #0
 801b114:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 801b118:	2300      	movs	r3, #0
 801b11a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801b11e:	2300      	movs	r3, #0
 801b120:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801b122:	2301      	movs	r3, #1
 801b124:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 801b128:	2301      	movs	r3, #1
 801b12a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 801b12c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801b130:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801b132:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801b136:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 801b138:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801b13c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801b13e:	2301      	movs	r3, #1
 801b140:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 801b144:	2300      	movs	r3, #0
 801b146:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 801b148:	2300      	movs	r3, #0
 801b14a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 801b14c:	f107 0308 	add.w	r3, r7, #8
 801b150:	4619      	mov	r1, r3
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f7ff ff08 	bl	801af68 <ETH_SetDMAConfig>
}
 801b158:	bf00      	nop
 801b15a:	3798      	adds	r7, #152	; 0x98
 801b15c:	46bd      	mov	sp, r7
 801b15e:	bd80      	pop	{r7, pc}

0801b160 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801b160:	b480      	push	{r7}
 801b162:	b087      	sub	sp, #28
 801b164:	af00      	add	r7, sp, #0
 801b166:	60f8      	str	r0, [r7, #12]
 801b168:	60b9      	str	r1, [r7, #8]
 801b16a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 801b16c:	687b      	ldr	r3, [r7, #4]
 801b16e:	3305      	adds	r3, #5
 801b170:	781b      	ldrb	r3, [r3, #0]
 801b172:	021b      	lsls	r3, r3, #8
 801b174:	687a      	ldr	r2, [r7, #4]
 801b176:	3204      	adds	r2, #4
 801b178:	7812      	ldrb	r2, [r2, #0]
 801b17a:	4313      	orrs	r3, r2
 801b17c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801b17e:	68ba      	ldr	r2, [r7, #8]
 801b180:	4b11      	ldr	r3, [pc, #68]	; (801b1c8 <ETH_MACAddressConfig+0x68>)
 801b182:	4413      	add	r3, r2
 801b184:	461a      	mov	r2, r3
 801b186:	697b      	ldr	r3, [r7, #20]
 801b188:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	3303      	adds	r3, #3
 801b18e:	781b      	ldrb	r3, [r3, #0]
 801b190:	061a      	lsls	r2, r3, #24
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	3302      	adds	r3, #2
 801b196:	781b      	ldrb	r3, [r3, #0]
 801b198:	041b      	lsls	r3, r3, #16
 801b19a:	431a      	orrs	r2, r3
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	3301      	adds	r3, #1
 801b1a0:	781b      	ldrb	r3, [r3, #0]
 801b1a2:	021b      	lsls	r3, r3, #8
 801b1a4:	4313      	orrs	r3, r2
 801b1a6:	687a      	ldr	r2, [r7, #4]
 801b1a8:	7812      	ldrb	r2, [r2, #0]
 801b1aa:	4313      	orrs	r3, r2
 801b1ac:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801b1ae:	68ba      	ldr	r2, [r7, #8]
 801b1b0:	4b06      	ldr	r3, [pc, #24]	; (801b1cc <ETH_MACAddressConfig+0x6c>)
 801b1b2:	4413      	add	r3, r2
 801b1b4:	461a      	mov	r2, r3
 801b1b6:	697b      	ldr	r3, [r7, #20]
 801b1b8:	6013      	str	r3, [r2, #0]
}
 801b1ba:	bf00      	nop
 801b1bc:	371c      	adds	r7, #28
 801b1be:	46bd      	mov	sp, r7
 801b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c4:	4770      	bx	lr
 801b1c6:	bf00      	nop
 801b1c8:	40028040 	.word	0x40028040
 801b1cc:	40028044 	.word	0x40028044

0801b1d0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 801b1d0:	b480      	push	{r7}
 801b1d2:	b085      	sub	sp, #20
 801b1d4:	af00      	add	r7, sp, #0
 801b1d6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801b1d8:	2300      	movs	r3, #0
 801b1da:	60fb      	str	r3, [r7, #12]
 801b1dc:	e03e      	b.n	801b25c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	68d9      	ldr	r1, [r3, #12]
 801b1e2:	68fa      	ldr	r2, [r7, #12]
 801b1e4:	4613      	mov	r3, r2
 801b1e6:	009b      	lsls	r3, r3, #2
 801b1e8:	4413      	add	r3, r2
 801b1ea:	00db      	lsls	r3, r3, #3
 801b1ec:	440b      	add	r3, r1
 801b1ee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 801b1f0:	68bb      	ldr	r3, [r7, #8]
 801b1f2:	2200      	movs	r2, #0
 801b1f4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 801b1fc:	68bb      	ldr	r3, [r7, #8]
 801b1fe:	2200      	movs	r2, #0
 801b200:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 801b202:	68bb      	ldr	r3, [r7, #8]
 801b204:	2200      	movs	r2, #0
 801b206:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 801b208:	68b9      	ldr	r1, [r7, #8]
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	68fa      	ldr	r2, [r7, #12]
 801b20e:	3206      	adds	r2, #6
 801b210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 801b214:	68bb      	ldr	r3, [r7, #8]
 801b216:	681b      	ldr	r3, [r3, #0]
 801b218:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801b21c:	68bb      	ldr	r3, [r7, #8]
 801b21e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801b220:	68fb      	ldr	r3, [r7, #12]
 801b222:	2b02      	cmp	r3, #2
 801b224:	d80c      	bhi.n	801b240 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 801b226:	687b      	ldr	r3, [r7, #4]
 801b228:	68d9      	ldr	r1, [r3, #12]
 801b22a:	68fb      	ldr	r3, [r7, #12]
 801b22c:	1c5a      	adds	r2, r3, #1
 801b22e:	4613      	mov	r3, r2
 801b230:	009b      	lsls	r3, r3, #2
 801b232:	4413      	add	r3, r2
 801b234:	00db      	lsls	r3, r3, #3
 801b236:	440b      	add	r3, r1
 801b238:	461a      	mov	r2, r3
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	60da      	str	r2, [r3, #12]
 801b23e:	e004      	b.n	801b24a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	68db      	ldr	r3, [r3, #12]
 801b244:	461a      	mov	r2, r3
 801b246:	68bb      	ldr	r3, [r7, #8]
 801b248:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 801b24a:	68bb      	ldr	r3, [r7, #8]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801b252:	68bb      	ldr	r3, [r7, #8]
 801b254:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	3301      	adds	r3, #1
 801b25a:	60fb      	str	r3, [r7, #12]
 801b25c:	68fb      	ldr	r3, [r7, #12]
 801b25e:	2b03      	cmp	r3, #3
 801b260:	d9bd      	bls.n	801b1de <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	2200      	movs	r2, #0
 801b266:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 801b268:	687b      	ldr	r3, [r7, #4]
 801b26a:	68da      	ldr	r2, [r3, #12]
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b274:	611a      	str	r2, [r3, #16]
}
 801b276:	bf00      	nop
 801b278:	3714      	adds	r7, #20
 801b27a:	46bd      	mov	sp, r7
 801b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b280:	4770      	bx	lr

0801b282 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801b282:	b480      	push	{r7}
 801b284:	b085      	sub	sp, #20
 801b286:	af00      	add	r7, sp, #0
 801b288:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801b28a:	2300      	movs	r3, #0
 801b28c:	60fb      	str	r3, [r7, #12]
 801b28e:	e046      	b.n	801b31e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801b290:	687b      	ldr	r3, [r7, #4]
 801b292:	6919      	ldr	r1, [r3, #16]
 801b294:	68fa      	ldr	r2, [r7, #12]
 801b296:	4613      	mov	r3, r2
 801b298:	009b      	lsls	r3, r3, #2
 801b29a:	4413      	add	r3, r2
 801b29c:	00db      	lsls	r3, r3, #3
 801b29e:	440b      	add	r3, r1
 801b2a0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801b2a2:	68bb      	ldr	r3, [r7, #8]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 801b2a8:	68bb      	ldr	r3, [r7, #8]
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801b2ae:	68bb      	ldr	r3, [r7, #8]
 801b2b0:	2200      	movs	r2, #0
 801b2b2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 801b2b4:	68bb      	ldr	r3, [r7, #8]
 801b2b6:	2200      	movs	r2, #0
 801b2b8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 801b2ba:	68bb      	ldr	r3, [r7, #8]
 801b2bc:	2200      	movs	r2, #0
 801b2be:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 801b2c0:	68bb      	ldr	r3, [r7, #8]
 801b2c2:	2200      	movs	r2, #0
 801b2c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 801b2c6:	68bb      	ldr	r3, [r7, #8]
 801b2c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b2cc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 801b2ce:	68bb      	ldr	r3, [r7, #8]
 801b2d0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 801b2d4:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 801b2d6:	68bb      	ldr	r3, [r7, #8]
 801b2d8:	685b      	ldr	r3, [r3, #4]
 801b2da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b2de:	68bb      	ldr	r3, [r7, #8]
 801b2e0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 801b2e2:	68b9      	ldr	r1, [r7, #8]
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	68fa      	ldr	r2, [r7, #12]
 801b2e8:	3212      	adds	r2, #18
 801b2ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 801b2ee:	68fb      	ldr	r3, [r7, #12]
 801b2f0:	2b02      	cmp	r3, #2
 801b2f2:	d80c      	bhi.n	801b30e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 801b2f4:	687b      	ldr	r3, [r7, #4]
 801b2f6:	6919      	ldr	r1, [r3, #16]
 801b2f8:	68fb      	ldr	r3, [r7, #12]
 801b2fa:	1c5a      	adds	r2, r3, #1
 801b2fc:	4613      	mov	r3, r2
 801b2fe:	009b      	lsls	r3, r3, #2
 801b300:	4413      	add	r3, r2
 801b302:	00db      	lsls	r3, r3, #3
 801b304:	440b      	add	r3, r1
 801b306:	461a      	mov	r2, r3
 801b308:	68bb      	ldr	r3, [r7, #8]
 801b30a:	60da      	str	r2, [r3, #12]
 801b30c:	e004      	b.n	801b318 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 801b30e:	687b      	ldr	r3, [r7, #4]
 801b310:	691b      	ldr	r3, [r3, #16]
 801b312:	461a      	mov	r2, r3
 801b314:	68bb      	ldr	r3, [r7, #8]
 801b316:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	3301      	adds	r3, #1
 801b31c:	60fb      	str	r3, [r7, #12]
 801b31e:	68fb      	ldr	r3, [r7, #12]
 801b320:	2b03      	cmp	r3, #3
 801b322:	d9b5      	bls.n	801b290 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	2200      	movs	r2, #0
 801b328:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	2200      	movs	r2, #0
 801b32e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801b330:	687b      	ldr	r3, [r7, #4]
 801b332:	2200      	movs	r2, #0
 801b334:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 801b336:	687b      	ldr	r3, [r7, #4]
 801b338:	2200      	movs	r2, #0
 801b33a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	2200      	movs	r2, #0
 801b340:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	691a      	ldr	r2, [r3, #16]
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681b      	ldr	r3, [r3, #0]
 801b34a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b34e:	60da      	str	r2, [r3, #12]
}
 801b350:	bf00      	nop
 801b352:	3714      	adds	r7, #20
 801b354:	46bd      	mov	sp, r7
 801b356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b35a:	4770      	bx	lr

0801b35c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 801b35c:	b480      	push	{r7}
 801b35e:	b08d      	sub	sp, #52	; 0x34
 801b360:	af00      	add	r7, sp, #0
 801b362:	60f8      	str	r0, [r7, #12]
 801b364:	60b9      	str	r1, [r7, #8]
 801b366:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 801b368:	68fb      	ldr	r3, [r7, #12]
 801b36a:	3318      	adds	r3, #24
 801b36c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801b36e:	697b      	ldr	r3, [r7, #20]
 801b370:	691b      	ldr	r3, [r3, #16]
 801b372:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 801b374:	697b      	ldr	r3, [r7, #20]
 801b376:	691b      	ldr	r3, [r3, #16]
 801b378:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 801b37a:	2300      	movs	r3, #0
 801b37c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b37e:	697b      	ldr	r3, [r7, #20]
 801b380:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b386:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 801b388:	68bb      	ldr	r3, [r7, #8]
 801b38a:	689b      	ldr	r3, [r3, #8]
 801b38c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801b38e:	2300      	movs	r3, #0
 801b390:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801b392:	6a3b      	ldr	r3, [r7, #32]
 801b394:	681b      	ldr	r3, [r3, #0]
 801b396:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b39a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b39e:	d007      	beq.n	801b3b0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801b3a0:	697a      	ldr	r2, [r7, #20]
 801b3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b3a4:	3304      	adds	r3, #4
 801b3a6:	009b      	lsls	r3, r3, #2
 801b3a8:	4413      	add	r3, r2
 801b3aa:	685b      	ldr	r3, [r3, #4]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d001      	beq.n	801b3b4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801b3b0:	2302      	movs	r3, #2
 801b3b2:	e0ff      	b.n	801b5b4 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 801b3b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3b6:	3301      	adds	r3, #1
 801b3b8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801b3ba:	69fb      	ldr	r3, [r7, #28]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	461a      	mov	r2, r3
 801b3c0:	6a3b      	ldr	r3, [r7, #32]
 801b3c2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801b3c4:	6a3b      	ldr	r3, [r7, #32]
 801b3c6:	685a      	ldr	r2, [r3, #4]
 801b3c8:	4b7d      	ldr	r3, [pc, #500]	; (801b5c0 <ETH_Prepare_Tx_Descriptors+0x264>)
 801b3ca:	4013      	ands	r3, r2
 801b3cc:	69fa      	ldr	r2, [r7, #28]
 801b3ce:	6852      	ldr	r2, [r2, #4]
 801b3d0:	431a      	orrs	r2, r3
 801b3d2:	6a3b      	ldr	r3, [r7, #32]
 801b3d4:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 801b3d6:	68bb      	ldr	r3, [r7, #8]
 801b3d8:	681b      	ldr	r3, [r3, #0]
 801b3da:	f003 0301 	and.w	r3, r3, #1
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d008      	beq.n	801b3f4 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 801b3e2:	6a3b      	ldr	r3, [r7, #32]
 801b3e4:	681b      	ldr	r3, [r3, #0]
 801b3e6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801b3ea:	68bb      	ldr	r3, [r7, #8]
 801b3ec:	695b      	ldr	r3, [r3, #20]
 801b3ee:	431a      	orrs	r2, r3
 801b3f0:	6a3b      	ldr	r3, [r7, #32]
 801b3f2:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 801b3f4:	68bb      	ldr	r3, [r7, #8]
 801b3f6:	681b      	ldr	r3, [r3, #0]
 801b3f8:	f003 0320 	and.w	r3, r3, #32
 801b3fc:	2b00      	cmp	r3, #0
 801b3fe:	d008      	beq.n	801b412 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 801b400:	6a3b      	ldr	r3, [r7, #32]
 801b402:	681b      	ldr	r3, [r3, #0]
 801b404:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 801b408:	68bb      	ldr	r3, [r7, #8]
 801b40a:	691b      	ldr	r3, [r3, #16]
 801b40c:	431a      	orrs	r2, r3
 801b40e:	6a3b      	ldr	r3, [r7, #32]
 801b410:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 801b412:	68bb      	ldr	r3, [r7, #8]
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	f003 0304 	and.w	r3, r3, #4
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d005      	beq.n	801b42a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801b41e:	6a3b      	ldr	r3, [r7, #32]
 801b420:	681b      	ldr	r3, [r3, #0]
 801b422:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801b426:	6a3b      	ldr	r3, [r7, #32]
 801b428:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801b42a:	6a3b      	ldr	r3, [r7, #32]
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801b432:	6a3b      	ldr	r3, [r7, #32]
 801b434:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 801b436:	f3bf 8f5f 	dmb	sy
}
 801b43a:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801b43c:	6a3b      	ldr	r3, [r7, #32]
 801b43e:	681b      	ldr	r3, [r3, #0]
 801b440:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b444:	6a3b      	ldr	r3, [r7, #32]
 801b446:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 801b448:	e082      	b.n	801b550 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801b44a:	6a3b      	ldr	r3, [r7, #32]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801b452:	6a3b      	ldr	r3, [r7, #32]
 801b454:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 801b456:	687b      	ldr	r3, [r7, #4]
 801b458:	2b00      	cmp	r3, #0
 801b45a:	d006      	beq.n	801b46a <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b45c:	6a3b      	ldr	r3, [r7, #32]
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b464:	6a3b      	ldr	r3, [r7, #32]
 801b466:	601a      	str	r2, [r3, #0]
 801b468:	e005      	b.n	801b476 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b46a:	6a3b      	ldr	r3, [r7, #32]
 801b46c:	681b      	ldr	r3, [r3, #0]
 801b46e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801b472:	6a3b      	ldr	r3, [r7, #32]
 801b474:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 801b476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b478:	3301      	adds	r3, #1
 801b47a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b47e:	2b03      	cmp	r3, #3
 801b480:	d902      	bls.n	801b488 <ETH_Prepare_Tx_Descriptors+0x12c>
 801b482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b484:	3b04      	subs	r3, #4
 801b486:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b488:	697b      	ldr	r3, [r7, #20]
 801b48a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b490:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801b492:	6a3b      	ldr	r3, [r7, #32]
 801b494:	681b      	ldr	r3, [r3, #0]
 801b496:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801b49a:	6a3b      	ldr	r3, [r7, #32]
 801b49c:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801b49e:	6a3b      	ldr	r3, [r7, #32]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b4a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b4aa:	d007      	beq.n	801b4bc <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801b4ac:	697a      	ldr	r2, [r7, #20]
 801b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4b0:	3304      	adds	r3, #4
 801b4b2:	009b      	lsls	r3, r3, #2
 801b4b4:	4413      	add	r3, r2
 801b4b6:	685b      	ldr	r3, [r3, #4]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d029      	beq.n	801b510 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 801b4bc:	693b      	ldr	r3, [r7, #16]
 801b4be:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b4c0:	697b      	ldr	r3, [r7, #20]
 801b4c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4c8:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	62bb      	str	r3, [r7, #40]	; 0x28
 801b4ce:	e019      	b.n	801b504 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 801b4d0:	f3bf 8f5f 	dmb	sy
}
 801b4d4:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801b4d6:	6a3b      	ldr	r3, [r7, #32]
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801b4de:	6a3b      	ldr	r3, [r7, #32]
 801b4e0:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 801b4e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4e4:	3301      	adds	r3, #1
 801b4e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4ea:	2b03      	cmp	r3, #3
 801b4ec:	d902      	bls.n	801b4f4 <ETH_Prepare_Tx_Descriptors+0x198>
 801b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4f0:	3b04      	subs	r3, #4
 801b4f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801b4f4:	697b      	ldr	r3, [r7, #20]
 801b4f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b4fc:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 801b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b500:	3301      	adds	r3, #1
 801b502:	62bb      	str	r3, [r7, #40]	; 0x28
 801b504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b508:	429a      	cmp	r2, r3
 801b50a:	d3e1      	bcc.n	801b4d0 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 801b50c:	2302      	movs	r3, #2
 801b50e:	e051      	b.n	801b5b4 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 801b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b512:	3301      	adds	r3, #1
 801b514:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 801b516:	69fb      	ldr	r3, [r7, #28]
 801b518:	689b      	ldr	r3, [r3, #8]
 801b51a:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 801b51c:	69fb      	ldr	r3, [r7, #28]
 801b51e:	681b      	ldr	r3, [r3, #0]
 801b520:	461a      	mov	r2, r3
 801b522:	6a3b      	ldr	r3, [r7, #32]
 801b524:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 801b526:	6a3b      	ldr	r3, [r7, #32]
 801b528:	685a      	ldr	r2, [r3, #4]
 801b52a:	4b25      	ldr	r3, [pc, #148]	; (801b5c0 <ETH_Prepare_Tx_Descriptors+0x264>)
 801b52c:	4013      	ands	r3, r2
 801b52e:	69fa      	ldr	r2, [r7, #28]
 801b530:	6852      	ldr	r2, [r2, #4]
 801b532:	431a      	orrs	r2, r3
 801b534:	6a3b      	ldr	r3, [r7, #32]
 801b536:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 801b538:	69bb      	ldr	r3, [r7, #24]
 801b53a:	3301      	adds	r3, #1
 801b53c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801b53e:	f3bf 8f5f 	dmb	sy
}
 801b542:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 801b544:	6a3b      	ldr	r3, [r7, #32]
 801b546:	681b      	ldr	r3, [r3, #0]
 801b548:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801b54c:	6a3b      	ldr	r3, [r7, #32]
 801b54e:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801b550:	69fb      	ldr	r3, [r7, #28]
 801b552:	689b      	ldr	r3, [r3, #8]
 801b554:	2b00      	cmp	r3, #0
 801b556:	f47f af78 	bne.w	801b44a <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 801b55a:	687b      	ldr	r3, [r7, #4]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d006      	beq.n	801b56e <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b560:	6a3b      	ldr	r3, [r7, #32]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b568:	6a3b      	ldr	r3, [r7, #32]
 801b56a:	601a      	str	r2, [r3, #0]
 801b56c:	e005      	b.n	801b57a <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801b56e:	6a3b      	ldr	r3, [r7, #32]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801b576:	6a3b      	ldr	r3, [r7, #32]
 801b578:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 801b57a:	6a3b      	ldr	r3, [r7, #32]
 801b57c:	681b      	ldr	r3, [r3, #0]
 801b57e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b582:	6a3b      	ldr	r3, [r7, #32]
 801b584:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 801b586:	697b      	ldr	r3, [r7, #20]
 801b588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801b58a:	6979      	ldr	r1, [r7, #20]
 801b58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b58e:	3304      	adds	r3, #4
 801b590:	009b      	lsls	r3, r3, #2
 801b592:	440b      	add	r3, r1
 801b594:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 801b596:	697b      	ldr	r3, [r7, #20]
 801b598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b59a:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b59c:	b672      	cpsid	i
}
 801b59e:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801b5a0:	697b      	ldr	r3, [r7, #20]
 801b5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b5a4:	69bb      	ldr	r3, [r7, #24]
 801b5a6:	4413      	add	r3, r2
 801b5a8:	1c5a      	adds	r2, r3, #1
 801b5aa:	697b      	ldr	r3, [r7, #20]
 801b5ac:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801b5ae:	b662      	cpsie	i
}
 801b5b0:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801b5b2:	2300      	movs	r3, #0
}
 801b5b4:	4618      	mov	r0, r3
 801b5b6:	3734      	adds	r7, #52	; 0x34
 801b5b8:	46bd      	mov	sp, r7
 801b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5be:	4770      	bx	lr
 801b5c0:	ffffe000 	.word	0xffffe000

0801b5c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b5c4:	b480      	push	{r7}
 801b5c6:	b089      	sub	sp, #36	; 0x24
 801b5c8:	af00      	add	r7, sp, #0
 801b5ca:	6078      	str	r0, [r7, #4]
 801b5cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 801b5d2:	2300      	movs	r3, #0
 801b5d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 801b5d6:	2300      	movs	r3, #0
 801b5d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 801b5de:	2300      	movs	r3, #0
 801b5e0:	61fb      	str	r3, [r7, #28]
 801b5e2:	e175      	b.n	801b8d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 801b5e4:	2201      	movs	r2, #1
 801b5e6:	69fb      	ldr	r3, [r7, #28]
 801b5e8:	fa02 f303 	lsl.w	r3, r2, r3
 801b5ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 801b5ee:	683b      	ldr	r3, [r7, #0]
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	697a      	ldr	r2, [r7, #20]
 801b5f4:	4013      	ands	r3, r2
 801b5f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 801b5f8:	693a      	ldr	r2, [r7, #16]
 801b5fa:	697b      	ldr	r3, [r7, #20]
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	f040 8164 	bne.w	801b8ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b602:	683b      	ldr	r3, [r7, #0]
 801b604:	685b      	ldr	r3, [r3, #4]
 801b606:	f003 0303 	and.w	r3, r3, #3
 801b60a:	2b01      	cmp	r3, #1
 801b60c:	d005      	beq.n	801b61a <HAL_GPIO_Init+0x56>
 801b60e:	683b      	ldr	r3, [r7, #0]
 801b610:	685b      	ldr	r3, [r3, #4]
 801b612:	f003 0303 	and.w	r3, r3, #3
 801b616:	2b02      	cmp	r3, #2
 801b618:	d130      	bne.n	801b67c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	689b      	ldr	r3, [r3, #8]
 801b61e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801b620:	69fb      	ldr	r3, [r7, #28]
 801b622:	005b      	lsls	r3, r3, #1
 801b624:	2203      	movs	r2, #3
 801b626:	fa02 f303 	lsl.w	r3, r2, r3
 801b62a:	43db      	mvns	r3, r3
 801b62c:	69ba      	ldr	r2, [r7, #24]
 801b62e:	4013      	ands	r3, r2
 801b630:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	68da      	ldr	r2, [r3, #12]
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	005b      	lsls	r3, r3, #1
 801b63a:	fa02 f303 	lsl.w	r3, r2, r3
 801b63e:	69ba      	ldr	r2, [r7, #24]
 801b640:	4313      	orrs	r3, r2
 801b642:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b644:	687b      	ldr	r3, [r7, #4]
 801b646:	69ba      	ldr	r2, [r7, #24]
 801b648:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	685b      	ldr	r3, [r3, #4]
 801b64e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801b650:	2201      	movs	r2, #1
 801b652:	69fb      	ldr	r3, [r7, #28]
 801b654:	fa02 f303 	lsl.w	r3, r2, r3
 801b658:	43db      	mvns	r3, r3
 801b65a:	69ba      	ldr	r2, [r7, #24]
 801b65c:	4013      	ands	r3, r2
 801b65e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b660:	683b      	ldr	r3, [r7, #0]
 801b662:	685b      	ldr	r3, [r3, #4]
 801b664:	091b      	lsrs	r3, r3, #4
 801b666:	f003 0201 	and.w	r2, r3, #1
 801b66a:	69fb      	ldr	r3, [r7, #28]
 801b66c:	fa02 f303 	lsl.w	r3, r2, r3
 801b670:	69ba      	ldr	r2, [r7, #24]
 801b672:	4313      	orrs	r3, r2
 801b674:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b676:	687b      	ldr	r3, [r7, #4]
 801b678:	69ba      	ldr	r2, [r7, #24]
 801b67a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b67c:	683b      	ldr	r3, [r7, #0]
 801b67e:	685b      	ldr	r3, [r3, #4]
 801b680:	f003 0303 	and.w	r3, r3, #3
 801b684:	2b03      	cmp	r3, #3
 801b686:	d017      	beq.n	801b6b8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	68db      	ldr	r3, [r3, #12]
 801b68c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801b68e:	69fb      	ldr	r3, [r7, #28]
 801b690:	005b      	lsls	r3, r3, #1
 801b692:	2203      	movs	r2, #3
 801b694:	fa02 f303 	lsl.w	r3, r2, r3
 801b698:	43db      	mvns	r3, r3
 801b69a:	69ba      	ldr	r2, [r7, #24]
 801b69c:	4013      	ands	r3, r2
 801b69e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801b6a0:	683b      	ldr	r3, [r7, #0]
 801b6a2:	689a      	ldr	r2, [r3, #8]
 801b6a4:	69fb      	ldr	r3, [r7, #28]
 801b6a6:	005b      	lsls	r3, r3, #1
 801b6a8:	fa02 f303 	lsl.w	r3, r2, r3
 801b6ac:	69ba      	ldr	r2, [r7, #24]
 801b6ae:	4313      	orrs	r3, r2
 801b6b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	69ba      	ldr	r2, [r7, #24]
 801b6b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b6b8:	683b      	ldr	r3, [r7, #0]
 801b6ba:	685b      	ldr	r3, [r3, #4]
 801b6bc:	f003 0303 	and.w	r3, r3, #3
 801b6c0:	2b02      	cmp	r3, #2
 801b6c2:	d123      	bne.n	801b70c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 801b6c4:	69fb      	ldr	r3, [r7, #28]
 801b6c6:	08da      	lsrs	r2, r3, #3
 801b6c8:	687b      	ldr	r3, [r7, #4]
 801b6ca:	3208      	adds	r2, #8
 801b6cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b6d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 801b6d2:	69fb      	ldr	r3, [r7, #28]
 801b6d4:	f003 0307 	and.w	r3, r3, #7
 801b6d8:	009b      	lsls	r3, r3, #2
 801b6da:	220f      	movs	r2, #15
 801b6dc:	fa02 f303 	lsl.w	r3, r2, r3
 801b6e0:	43db      	mvns	r3, r3
 801b6e2:	69ba      	ldr	r2, [r7, #24]
 801b6e4:	4013      	ands	r3, r2
 801b6e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 801b6e8:	683b      	ldr	r3, [r7, #0]
 801b6ea:	691a      	ldr	r2, [r3, #16]
 801b6ec:	69fb      	ldr	r3, [r7, #28]
 801b6ee:	f003 0307 	and.w	r3, r3, #7
 801b6f2:	009b      	lsls	r3, r3, #2
 801b6f4:	fa02 f303 	lsl.w	r3, r2, r3
 801b6f8:	69ba      	ldr	r2, [r7, #24]
 801b6fa:	4313      	orrs	r3, r2
 801b6fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 801b6fe:	69fb      	ldr	r3, [r7, #28]
 801b700:	08da      	lsrs	r2, r3, #3
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	3208      	adds	r2, #8
 801b706:	69b9      	ldr	r1, [r7, #24]
 801b708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	681b      	ldr	r3, [r3, #0]
 801b710:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 801b712:	69fb      	ldr	r3, [r7, #28]
 801b714:	005b      	lsls	r3, r3, #1
 801b716:	2203      	movs	r2, #3
 801b718:	fa02 f303 	lsl.w	r3, r2, r3
 801b71c:	43db      	mvns	r3, r3
 801b71e:	69ba      	ldr	r2, [r7, #24]
 801b720:	4013      	ands	r3, r2
 801b722:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 801b724:	683b      	ldr	r3, [r7, #0]
 801b726:	685b      	ldr	r3, [r3, #4]
 801b728:	f003 0203 	and.w	r2, r3, #3
 801b72c:	69fb      	ldr	r3, [r7, #28]
 801b72e:	005b      	lsls	r3, r3, #1
 801b730:	fa02 f303 	lsl.w	r3, r2, r3
 801b734:	69ba      	ldr	r2, [r7, #24]
 801b736:	4313      	orrs	r3, r2
 801b738:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	69ba      	ldr	r2, [r7, #24]
 801b73e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 801b740:	683b      	ldr	r3, [r7, #0]
 801b742:	685b      	ldr	r3, [r3, #4]
 801b744:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801b748:	2b00      	cmp	r3, #0
 801b74a:	f000 80be 	beq.w	801b8ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b74e:	4b66      	ldr	r3, [pc, #408]	; (801b8e8 <HAL_GPIO_Init+0x324>)
 801b750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b752:	4a65      	ldr	r2, [pc, #404]	; (801b8e8 <HAL_GPIO_Init+0x324>)
 801b754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801b758:	6453      	str	r3, [r2, #68]	; 0x44
 801b75a:	4b63      	ldr	r3, [pc, #396]	; (801b8e8 <HAL_GPIO_Init+0x324>)
 801b75c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b75e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801b762:	60fb      	str	r3, [r7, #12]
 801b764:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 801b766:	4a61      	ldr	r2, [pc, #388]	; (801b8ec <HAL_GPIO_Init+0x328>)
 801b768:	69fb      	ldr	r3, [r7, #28]
 801b76a:	089b      	lsrs	r3, r3, #2
 801b76c:	3302      	adds	r3, #2
 801b76e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b772:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 801b774:	69fb      	ldr	r3, [r7, #28]
 801b776:	f003 0303 	and.w	r3, r3, #3
 801b77a:	009b      	lsls	r3, r3, #2
 801b77c:	220f      	movs	r2, #15
 801b77e:	fa02 f303 	lsl.w	r3, r2, r3
 801b782:	43db      	mvns	r3, r3
 801b784:	69ba      	ldr	r2, [r7, #24]
 801b786:	4013      	ands	r3, r2
 801b788:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 801b78a:	687b      	ldr	r3, [r7, #4]
 801b78c:	4a58      	ldr	r2, [pc, #352]	; (801b8f0 <HAL_GPIO_Init+0x32c>)
 801b78e:	4293      	cmp	r3, r2
 801b790:	d037      	beq.n	801b802 <HAL_GPIO_Init+0x23e>
 801b792:	687b      	ldr	r3, [r7, #4]
 801b794:	4a57      	ldr	r2, [pc, #348]	; (801b8f4 <HAL_GPIO_Init+0x330>)
 801b796:	4293      	cmp	r3, r2
 801b798:	d031      	beq.n	801b7fe <HAL_GPIO_Init+0x23a>
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	4a56      	ldr	r2, [pc, #344]	; (801b8f8 <HAL_GPIO_Init+0x334>)
 801b79e:	4293      	cmp	r3, r2
 801b7a0:	d02b      	beq.n	801b7fa <HAL_GPIO_Init+0x236>
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	4a55      	ldr	r2, [pc, #340]	; (801b8fc <HAL_GPIO_Init+0x338>)
 801b7a6:	4293      	cmp	r3, r2
 801b7a8:	d025      	beq.n	801b7f6 <HAL_GPIO_Init+0x232>
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	4a54      	ldr	r2, [pc, #336]	; (801b900 <HAL_GPIO_Init+0x33c>)
 801b7ae:	4293      	cmp	r3, r2
 801b7b0:	d01f      	beq.n	801b7f2 <HAL_GPIO_Init+0x22e>
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	4a53      	ldr	r2, [pc, #332]	; (801b904 <HAL_GPIO_Init+0x340>)
 801b7b6:	4293      	cmp	r3, r2
 801b7b8:	d019      	beq.n	801b7ee <HAL_GPIO_Init+0x22a>
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	4a52      	ldr	r2, [pc, #328]	; (801b908 <HAL_GPIO_Init+0x344>)
 801b7be:	4293      	cmp	r3, r2
 801b7c0:	d013      	beq.n	801b7ea <HAL_GPIO_Init+0x226>
 801b7c2:	687b      	ldr	r3, [r7, #4]
 801b7c4:	4a51      	ldr	r2, [pc, #324]	; (801b90c <HAL_GPIO_Init+0x348>)
 801b7c6:	4293      	cmp	r3, r2
 801b7c8:	d00d      	beq.n	801b7e6 <HAL_GPIO_Init+0x222>
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	4a50      	ldr	r2, [pc, #320]	; (801b910 <HAL_GPIO_Init+0x34c>)
 801b7ce:	4293      	cmp	r3, r2
 801b7d0:	d007      	beq.n	801b7e2 <HAL_GPIO_Init+0x21e>
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	4a4f      	ldr	r2, [pc, #316]	; (801b914 <HAL_GPIO_Init+0x350>)
 801b7d6:	4293      	cmp	r3, r2
 801b7d8:	d101      	bne.n	801b7de <HAL_GPIO_Init+0x21a>
 801b7da:	2309      	movs	r3, #9
 801b7dc:	e012      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7de:	230a      	movs	r3, #10
 801b7e0:	e010      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7e2:	2308      	movs	r3, #8
 801b7e4:	e00e      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7e6:	2307      	movs	r3, #7
 801b7e8:	e00c      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7ea:	2306      	movs	r3, #6
 801b7ec:	e00a      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7ee:	2305      	movs	r3, #5
 801b7f0:	e008      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7f2:	2304      	movs	r3, #4
 801b7f4:	e006      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7f6:	2303      	movs	r3, #3
 801b7f8:	e004      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7fa:	2302      	movs	r3, #2
 801b7fc:	e002      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b7fe:	2301      	movs	r3, #1
 801b800:	e000      	b.n	801b804 <HAL_GPIO_Init+0x240>
 801b802:	2300      	movs	r3, #0
 801b804:	69fa      	ldr	r2, [r7, #28]
 801b806:	f002 0203 	and.w	r2, r2, #3
 801b80a:	0092      	lsls	r2, r2, #2
 801b80c:	4093      	lsls	r3, r2
 801b80e:	69ba      	ldr	r2, [r7, #24]
 801b810:	4313      	orrs	r3, r2
 801b812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801b814:	4935      	ldr	r1, [pc, #212]	; (801b8ec <HAL_GPIO_Init+0x328>)
 801b816:	69fb      	ldr	r3, [r7, #28]
 801b818:	089b      	lsrs	r3, r3, #2
 801b81a:	3302      	adds	r3, #2
 801b81c:	69ba      	ldr	r2, [r7, #24]
 801b81e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801b822:	4b3d      	ldr	r3, [pc, #244]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b824:	689b      	ldr	r3, [r3, #8]
 801b826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b828:	693b      	ldr	r3, [r7, #16]
 801b82a:	43db      	mvns	r3, r3
 801b82c:	69ba      	ldr	r2, [r7, #24]
 801b82e:	4013      	ands	r3, r2
 801b830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 801b832:	683b      	ldr	r3, [r7, #0]
 801b834:	685b      	ldr	r3, [r3, #4]
 801b836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d003      	beq.n	801b846 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 801b83e:	69ba      	ldr	r2, [r7, #24]
 801b840:	693b      	ldr	r3, [r7, #16]
 801b842:	4313      	orrs	r3, r2
 801b844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 801b846:	4a34      	ldr	r2, [pc, #208]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b848:	69bb      	ldr	r3, [r7, #24]
 801b84a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 801b84c:	4b32      	ldr	r3, [pc, #200]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b84e:	68db      	ldr	r3, [r3, #12]
 801b850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b852:	693b      	ldr	r3, [r7, #16]
 801b854:	43db      	mvns	r3, r3
 801b856:	69ba      	ldr	r2, [r7, #24]
 801b858:	4013      	ands	r3, r2
 801b85a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 801b85c:	683b      	ldr	r3, [r7, #0]
 801b85e:	685b      	ldr	r3, [r3, #4]
 801b860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801b864:	2b00      	cmp	r3, #0
 801b866:	d003      	beq.n	801b870 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 801b868:	69ba      	ldr	r2, [r7, #24]
 801b86a:	693b      	ldr	r3, [r7, #16]
 801b86c:	4313      	orrs	r3, r2
 801b86e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 801b870:	4a29      	ldr	r2, [pc, #164]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b872:	69bb      	ldr	r3, [r7, #24]
 801b874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 801b876:	4b28      	ldr	r3, [pc, #160]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b878:	685b      	ldr	r3, [r3, #4]
 801b87a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b87c:	693b      	ldr	r3, [r7, #16]
 801b87e:	43db      	mvns	r3, r3
 801b880:	69ba      	ldr	r2, [r7, #24]
 801b882:	4013      	ands	r3, r2
 801b884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 801b886:	683b      	ldr	r3, [r7, #0]
 801b888:	685b      	ldr	r3, [r3, #4]
 801b88a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d003      	beq.n	801b89a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801b892:	69ba      	ldr	r2, [r7, #24]
 801b894:	693b      	ldr	r3, [r7, #16]
 801b896:	4313      	orrs	r3, r2
 801b898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 801b89a:	4a1f      	ldr	r2, [pc, #124]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b89c:	69bb      	ldr	r3, [r7, #24]
 801b89e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 801b8a0:	4b1d      	ldr	r3, [pc, #116]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801b8a6:	693b      	ldr	r3, [r7, #16]
 801b8a8:	43db      	mvns	r3, r3
 801b8aa:	69ba      	ldr	r2, [r7, #24]
 801b8ac:	4013      	ands	r3, r2
 801b8ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 801b8b0:	683b      	ldr	r3, [r7, #0]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801b8b8:	2b00      	cmp	r3, #0
 801b8ba:	d003      	beq.n	801b8c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 801b8bc:	69ba      	ldr	r2, [r7, #24]
 801b8be:	693b      	ldr	r3, [r7, #16]
 801b8c0:	4313      	orrs	r3, r2
 801b8c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801b8c4:	4a14      	ldr	r2, [pc, #80]	; (801b918 <HAL_GPIO_Init+0x354>)
 801b8c6:	69bb      	ldr	r3, [r7, #24]
 801b8c8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 801b8ca:	69fb      	ldr	r3, [r7, #28]
 801b8cc:	3301      	adds	r3, #1
 801b8ce:	61fb      	str	r3, [r7, #28]
 801b8d0:	69fb      	ldr	r3, [r7, #28]
 801b8d2:	2b0f      	cmp	r3, #15
 801b8d4:	f67f ae86 	bls.w	801b5e4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 801b8d8:	bf00      	nop
 801b8da:	bf00      	nop
 801b8dc:	3724      	adds	r7, #36	; 0x24
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8e4:	4770      	bx	lr
 801b8e6:	bf00      	nop
 801b8e8:	40023800 	.word	0x40023800
 801b8ec:	40013800 	.word	0x40013800
 801b8f0:	40020000 	.word	0x40020000
 801b8f4:	40020400 	.word	0x40020400
 801b8f8:	40020800 	.word	0x40020800
 801b8fc:	40020c00 	.word	0x40020c00
 801b900:	40021000 	.word	0x40021000
 801b904:	40021400 	.word	0x40021400
 801b908:	40021800 	.word	0x40021800
 801b90c:	40021c00 	.word	0x40021c00
 801b910:	40022000 	.word	0x40022000
 801b914:	40022400 	.word	0x40022400
 801b918:	40013c00 	.word	0x40013c00

0801b91c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801b91c:	b480      	push	{r7}
 801b91e:	b085      	sub	sp, #20
 801b920:	af00      	add	r7, sp, #0
 801b922:	6078      	str	r0, [r7, #4]
 801b924:	460b      	mov	r3, r1
 801b926:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	691a      	ldr	r2, [r3, #16]
 801b92c:	887b      	ldrh	r3, [r7, #2]
 801b92e:	4013      	ands	r3, r2
 801b930:	2b00      	cmp	r3, #0
 801b932:	d002      	beq.n	801b93a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801b934:	2301      	movs	r3, #1
 801b936:	73fb      	strb	r3, [r7, #15]
 801b938:	e001      	b.n	801b93e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801b93a:	2300      	movs	r3, #0
 801b93c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801b93e:	7bfb      	ldrb	r3, [r7, #15]
}
 801b940:	4618      	mov	r0, r3
 801b942:	3714      	adds	r7, #20
 801b944:	46bd      	mov	sp, r7
 801b946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b94a:	4770      	bx	lr

0801b94c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801b94c:	b480      	push	{r7}
 801b94e:	b083      	sub	sp, #12
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
 801b954:	460b      	mov	r3, r1
 801b956:	807b      	strh	r3, [r7, #2]
 801b958:	4613      	mov	r3, r2
 801b95a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 801b95c:	787b      	ldrb	r3, [r7, #1]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d003      	beq.n	801b96a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801b962:	887a      	ldrh	r2, [r7, #2]
 801b964:	687b      	ldr	r3, [r7, #4]
 801b966:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 801b968:	e003      	b.n	801b972 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 801b96a:	887b      	ldrh	r3, [r7, #2]
 801b96c:	041a      	lsls	r2, r3, #16
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	619a      	str	r2, [r3, #24]
}
 801b972:	bf00      	nop
 801b974:	370c      	adds	r7, #12
 801b976:	46bd      	mov	sp, r7
 801b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b97c:	4770      	bx	lr

0801b97e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 801b97e:	b480      	push	{r7}
 801b980:	b085      	sub	sp, #20
 801b982:	af00      	add	r7, sp, #0
 801b984:	6078      	str	r0, [r7, #4]
 801b986:	460b      	mov	r3, r1
 801b988:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	695b      	ldr	r3, [r3, #20]
 801b98e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801b990:	887a      	ldrh	r2, [r7, #2]
 801b992:	68fb      	ldr	r3, [r7, #12]
 801b994:	4013      	ands	r3, r2
 801b996:	041a      	lsls	r2, r3, #16
 801b998:	68fb      	ldr	r3, [r7, #12]
 801b99a:	43d9      	mvns	r1, r3
 801b99c:	887b      	ldrh	r3, [r7, #2]
 801b99e:	400b      	ands	r3, r1
 801b9a0:	431a      	orrs	r2, r3
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	619a      	str	r2, [r3, #24]
}
 801b9a6:	bf00      	nop
 801b9a8:	3714      	adds	r7, #20
 801b9aa:	46bd      	mov	sp, r7
 801b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9b0:	4770      	bx	lr
	...

0801b9b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801b9b4:	b580      	push	{r7, lr}
 801b9b6:	b082      	sub	sp, #8
 801b9b8:	af00      	add	r7, sp, #0
 801b9ba:	4603      	mov	r3, r0
 801b9bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 801b9be:	4b08      	ldr	r3, [pc, #32]	; (801b9e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b9c0:	695a      	ldr	r2, [r3, #20]
 801b9c2:	88fb      	ldrh	r3, [r7, #6]
 801b9c4:	4013      	ands	r3, r2
 801b9c6:	2b00      	cmp	r3, #0
 801b9c8:	d006      	beq.n	801b9d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801b9ca:	4a05      	ldr	r2, [pc, #20]	; (801b9e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 801b9cc:	88fb      	ldrh	r3, [r7, #6]
 801b9ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 801b9d0:	88fb      	ldrh	r3, [r7, #6]
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f000 f806 	bl	801b9e4 <HAL_GPIO_EXTI_Callback>
  }
}
 801b9d8:	bf00      	nop
 801b9da:	3708      	adds	r7, #8
 801b9dc:	46bd      	mov	sp, r7
 801b9de:	bd80      	pop	{r7, pc}
 801b9e0:	40013c00 	.word	0x40013c00

0801b9e4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801b9e4:	b480      	push	{r7}
 801b9e6:	b083      	sub	sp, #12
 801b9e8:	af00      	add	r7, sp, #0
 801b9ea:	4603      	mov	r3, r0
 801b9ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 801b9ee:	bf00      	nop
 801b9f0:	370c      	adds	r7, #12
 801b9f2:	46bd      	mov	sp, r7
 801b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9f8:	4770      	bx	lr
	...

0801b9fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801b9fc:	b580      	push	{r7, lr}
 801b9fe:	b082      	sub	sp, #8
 801ba00:	af00      	add	r7, sp, #0
 801ba02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ba04:	687b      	ldr	r3, [r7, #4]
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	d101      	bne.n	801ba0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ba0a:	2301      	movs	r3, #1
 801ba0c:	e07f      	b.n	801bb0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ba0e:	687b      	ldr	r3, [r7, #4]
 801ba10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ba14:	b2db      	uxtb	r3, r3
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d106      	bne.n	801ba28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ba1a:	687b      	ldr	r3, [r7, #4]
 801ba1c:	2200      	movs	r2, #0
 801ba1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801ba22:	6878      	ldr	r0, [r7, #4]
 801ba24:	f7fa f974 	bl	8015d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	2224      	movs	r2, #36	; 0x24
 801ba2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	681b      	ldr	r3, [r3, #0]
 801ba34:	681a      	ldr	r2, [r3, #0]
 801ba36:	687b      	ldr	r3, [r7, #4]
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	f022 0201 	bic.w	r2, r2, #1
 801ba3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	685a      	ldr	r2, [r3, #4]
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	681b      	ldr	r3, [r3, #0]
 801ba48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 801ba4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801ba4e:	687b      	ldr	r3, [r7, #4]
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	689a      	ldr	r2, [r3, #8]
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	681b      	ldr	r3, [r3, #0]
 801ba58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801ba5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	68db      	ldr	r3, [r3, #12]
 801ba62:	2b01      	cmp	r3, #1
 801ba64:	d107      	bne.n	801ba76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	689a      	ldr	r2, [r3, #8]
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	681b      	ldr	r3, [r3, #0]
 801ba6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ba72:	609a      	str	r2, [r3, #8]
 801ba74:	e006      	b.n	801ba84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801ba76:	687b      	ldr	r3, [r7, #4]
 801ba78:	689a      	ldr	r2, [r3, #8]
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 801ba82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801ba84:	687b      	ldr	r3, [r7, #4]
 801ba86:	68db      	ldr	r3, [r3, #12]
 801ba88:	2b02      	cmp	r3, #2
 801ba8a:	d104      	bne.n	801ba96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 801ba8c:	687b      	ldr	r3, [r7, #4]
 801ba8e:	681b      	ldr	r3, [r3, #0]
 801ba90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ba94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801ba96:	687b      	ldr	r3, [r7, #4]
 801ba98:	681b      	ldr	r3, [r3, #0]
 801ba9a:	6859      	ldr	r1, [r3, #4]
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	681a      	ldr	r2, [r3, #0]
 801baa0:	4b1d      	ldr	r3, [pc, #116]	; (801bb18 <HAL_I2C_Init+0x11c>)
 801baa2:	430b      	orrs	r3, r1
 801baa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	68da      	ldr	r2, [r3, #12]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	681b      	ldr	r3, [r3, #0]
 801bab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801bab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	691a      	ldr	r2, [r3, #16]
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	695b      	ldr	r3, [r3, #20]
 801babe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801bac2:	687b      	ldr	r3, [r7, #4]
 801bac4:	699b      	ldr	r3, [r3, #24]
 801bac6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	430a      	orrs	r2, r1
 801bace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	69d9      	ldr	r1, [r3, #28]
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	6a1a      	ldr	r2, [r3, #32]
 801bad8:	687b      	ldr	r3, [r7, #4]
 801bada:	681b      	ldr	r3, [r3, #0]
 801badc:	430a      	orrs	r2, r1
 801bade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bae0:	687b      	ldr	r3, [r7, #4]
 801bae2:	681b      	ldr	r3, [r3, #0]
 801bae4:	681a      	ldr	r2, [r3, #0]
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	681b      	ldr	r3, [r3, #0]
 801baea:	f042 0201 	orr.w	r2, r2, #1
 801baee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	2200      	movs	r2, #0
 801baf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	2220      	movs	r2, #32
 801bafa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	2200      	movs	r2, #0
 801bb02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	2200      	movs	r2, #0
 801bb08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 801bb0c:	2300      	movs	r3, #0
}
 801bb0e:	4618      	mov	r0, r3
 801bb10:	3708      	adds	r7, #8
 801bb12:	46bd      	mov	sp, r7
 801bb14:	bd80      	pop	{r7, pc}
 801bb16:	bf00      	nop
 801bb18:	02008000 	.word	0x02008000

0801bb1c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b088      	sub	sp, #32
 801bb20:	af02      	add	r7, sp, #8
 801bb22:	60f8      	str	r0, [r7, #12]
 801bb24:	4608      	mov	r0, r1
 801bb26:	4611      	mov	r1, r2
 801bb28:	461a      	mov	r2, r3
 801bb2a:	4603      	mov	r3, r0
 801bb2c:	817b      	strh	r3, [r7, #10]
 801bb2e:	460b      	mov	r3, r1
 801bb30:	813b      	strh	r3, [r7, #8]
 801bb32:	4613      	mov	r3, r2
 801bb34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bb3c:	b2db      	uxtb	r3, r3
 801bb3e:	2b20      	cmp	r3, #32
 801bb40:	f040 80f9 	bne.w	801bd36 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 801bb44:	6a3b      	ldr	r3, [r7, #32]
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d002      	beq.n	801bb50 <HAL_I2C_Mem_Write+0x34>
 801bb4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bb4c:	2b00      	cmp	r3, #0
 801bb4e:	d105      	bne.n	801bb5c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801bb50:	68fb      	ldr	r3, [r7, #12]
 801bb52:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bb56:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801bb58:	2301      	movs	r3, #1
 801bb5a:	e0ed      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bb62:	2b01      	cmp	r3, #1
 801bb64:	d101      	bne.n	801bb6a <HAL_I2C_Mem_Write+0x4e>
 801bb66:	2302      	movs	r3, #2
 801bb68:	e0e6      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
 801bb6a:	68fb      	ldr	r3, [r7, #12]
 801bb6c:	2201      	movs	r2, #1
 801bb6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801bb72:	f7fd fb0f 	bl	8019194 <HAL_GetTick>
 801bb76:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801bb78:	697b      	ldr	r3, [r7, #20]
 801bb7a:	9300      	str	r3, [sp, #0]
 801bb7c:	2319      	movs	r3, #25
 801bb7e:	2201      	movs	r2, #1
 801bb80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bb84:	68f8      	ldr	r0, [r7, #12]
 801bb86:	f000 fac3 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801bb8a:	4603      	mov	r3, r0
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d001      	beq.n	801bb94 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 801bb90:	2301      	movs	r3, #1
 801bb92:	e0d1      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801bb94:	68fb      	ldr	r3, [r7, #12]
 801bb96:	2221      	movs	r2, #33	; 0x21
 801bb98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	2240      	movs	r2, #64	; 0x40
 801bba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bba4:	68fb      	ldr	r3, [r7, #12]
 801bba6:	2200      	movs	r2, #0
 801bba8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801bbaa:	68fb      	ldr	r3, [r7, #12]
 801bbac:	6a3a      	ldr	r2, [r7, #32]
 801bbae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801bbb0:	68fb      	ldr	r3, [r7, #12]
 801bbb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bbb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801bbb6:	68fb      	ldr	r3, [r7, #12]
 801bbb8:	2200      	movs	r2, #0
 801bbba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801bbbc:	88f8      	ldrh	r0, [r7, #6]
 801bbbe:	893a      	ldrh	r2, [r7, #8]
 801bbc0:	8979      	ldrh	r1, [r7, #10]
 801bbc2:	697b      	ldr	r3, [r7, #20]
 801bbc4:	9301      	str	r3, [sp, #4]
 801bbc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bbc8:	9300      	str	r3, [sp, #0]
 801bbca:	4603      	mov	r3, r0
 801bbcc:	68f8      	ldr	r0, [r7, #12]
 801bbce:	f000 f9d3 	bl	801bf78 <I2C_RequestMemoryWrite>
 801bbd2:	4603      	mov	r3, r0
 801bbd4:	2b00      	cmp	r3, #0
 801bbd6:	d005      	beq.n	801bbe4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801bbd8:	68fb      	ldr	r3, [r7, #12]
 801bbda:	2200      	movs	r2, #0
 801bbdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801bbe0:	2301      	movs	r3, #1
 801bbe2:	e0a9      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801bbe4:	68fb      	ldr	r3, [r7, #12]
 801bbe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bbe8:	b29b      	uxth	r3, r3
 801bbea:	2bff      	cmp	r3, #255	; 0xff
 801bbec:	d90e      	bls.n	801bc0c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801bbee:	68fb      	ldr	r3, [r7, #12]
 801bbf0:	22ff      	movs	r2, #255	; 0xff
 801bbf2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bbf8:	b2da      	uxtb	r2, r3
 801bbfa:	8979      	ldrh	r1, [r7, #10]
 801bbfc:	2300      	movs	r3, #0
 801bbfe:	9300      	str	r3, [sp, #0]
 801bc00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801bc04:	68f8      	ldr	r0, [r7, #12]
 801bc06:	f000 fc1f 	bl	801c448 <I2C_TransferConfig>
 801bc0a:	e00f      	b.n	801bc2c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bc10:	b29a      	uxth	r2, r3
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801bc16:	68fb      	ldr	r3, [r7, #12]
 801bc18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc1a:	b2da      	uxtb	r2, r3
 801bc1c:	8979      	ldrh	r1, [r7, #10]
 801bc1e:	2300      	movs	r3, #0
 801bc20:	9300      	str	r3, [sp, #0]
 801bc22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bc26:	68f8      	ldr	r0, [r7, #12]
 801bc28:	f000 fc0e 	bl	801c448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801bc2c:	697a      	ldr	r2, [r7, #20]
 801bc2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bc30:	68f8      	ldr	r0, [r7, #12]
 801bc32:	f000 faad 	bl	801c190 <I2C_WaitOnTXISFlagUntilTimeout>
 801bc36:	4603      	mov	r3, r0
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d001      	beq.n	801bc40 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 801bc3c:	2301      	movs	r3, #1
 801bc3e:	e07b      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 801bc40:	68fb      	ldr	r3, [r7, #12]
 801bc42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc44:	781a      	ldrb	r2, [r3, #0]
 801bc46:	68fb      	ldr	r3, [r7, #12]
 801bc48:	681b      	ldr	r3, [r3, #0]
 801bc4a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801bc4c:	68fb      	ldr	r3, [r7, #12]
 801bc4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc50:	1c5a      	adds	r2, r3, #1
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 801bc56:	68fb      	ldr	r3, [r7, #12]
 801bc58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bc5a:	b29b      	uxth	r3, r3
 801bc5c:	3b01      	subs	r3, #1
 801bc5e:	b29a      	uxth	r2, r3
 801bc60:	68fb      	ldr	r3, [r7, #12]
 801bc62:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc68:	3b01      	subs	r3, #1
 801bc6a:	b29a      	uxth	r2, r3
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801bc70:	68fb      	ldr	r3, [r7, #12]
 801bc72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bc74:	b29b      	uxth	r3, r3
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d034      	beq.n	801bce4 <HAL_I2C_Mem_Write+0x1c8>
 801bc7a:	68fb      	ldr	r3, [r7, #12]
 801bc7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bc7e:	2b00      	cmp	r3, #0
 801bc80:	d130      	bne.n	801bce4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801bc82:	697b      	ldr	r3, [r7, #20]
 801bc84:	9300      	str	r3, [sp, #0]
 801bc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc88:	2200      	movs	r2, #0
 801bc8a:	2180      	movs	r1, #128	; 0x80
 801bc8c:	68f8      	ldr	r0, [r7, #12]
 801bc8e:	f000 fa3f 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801bc92:	4603      	mov	r3, r0
 801bc94:	2b00      	cmp	r3, #0
 801bc96:	d001      	beq.n	801bc9c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 801bc98:	2301      	movs	r3, #1
 801bc9a:	e04d      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801bc9c:	68fb      	ldr	r3, [r7, #12]
 801bc9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bca0:	b29b      	uxth	r3, r3
 801bca2:	2bff      	cmp	r3, #255	; 0xff
 801bca4:	d90e      	bls.n	801bcc4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801bca6:	68fb      	ldr	r3, [r7, #12]
 801bca8:	22ff      	movs	r2, #255	; 0xff
 801bcaa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801bcac:	68fb      	ldr	r3, [r7, #12]
 801bcae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bcb0:	b2da      	uxtb	r2, r3
 801bcb2:	8979      	ldrh	r1, [r7, #10]
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	9300      	str	r3, [sp, #0]
 801bcb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801bcbc:	68f8      	ldr	r0, [r7, #12]
 801bcbe:	f000 fbc3 	bl	801c448 <I2C_TransferConfig>
 801bcc2:	e00f      	b.n	801bce4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801bcc4:	68fb      	ldr	r3, [r7, #12]
 801bcc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bcc8:	b29a      	uxth	r2, r3
 801bcca:	68fb      	ldr	r3, [r7, #12]
 801bccc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801bcce:	68fb      	ldr	r3, [r7, #12]
 801bcd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bcd2:	b2da      	uxtb	r2, r3
 801bcd4:	8979      	ldrh	r1, [r7, #10]
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	9300      	str	r3, [sp, #0]
 801bcda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bcde:	68f8      	ldr	r0, [r7, #12]
 801bce0:	f000 fbb2 	bl	801c448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801bce4:	68fb      	ldr	r3, [r7, #12]
 801bce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bce8:	b29b      	uxth	r3, r3
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d19e      	bne.n	801bc2c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801bcee:	697a      	ldr	r2, [r7, #20]
 801bcf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	f000 fa8c 	bl	801c210 <I2C_WaitOnSTOPFlagUntilTimeout>
 801bcf8:	4603      	mov	r3, r0
 801bcfa:	2b00      	cmp	r3, #0
 801bcfc:	d001      	beq.n	801bd02 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 801bcfe:	2301      	movs	r3, #1
 801bd00:	e01a      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801bd02:	68fb      	ldr	r3, [r7, #12]
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	2220      	movs	r2, #32
 801bd08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	681b      	ldr	r3, [r3, #0]
 801bd0e:	6859      	ldr	r1, [r3, #4]
 801bd10:	68fb      	ldr	r3, [r7, #12]
 801bd12:	681a      	ldr	r2, [r3, #0]
 801bd14:	4b0a      	ldr	r3, [pc, #40]	; (801bd40 <HAL_I2C_Mem_Write+0x224>)
 801bd16:	400b      	ands	r3, r1
 801bd18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801bd1a:	68fb      	ldr	r3, [r7, #12]
 801bd1c:	2220      	movs	r2, #32
 801bd1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801bd22:	68fb      	ldr	r3, [r7, #12]
 801bd24:	2200      	movs	r2, #0
 801bd26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bd2a:	68fb      	ldr	r3, [r7, #12]
 801bd2c:	2200      	movs	r2, #0
 801bd2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801bd32:	2300      	movs	r3, #0
 801bd34:	e000      	b.n	801bd38 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 801bd36:	2302      	movs	r3, #2
  }
}
 801bd38:	4618      	mov	r0, r3
 801bd3a:	3718      	adds	r7, #24
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	fe00e800 	.word	0xfe00e800

0801bd44 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801bd44:	b580      	push	{r7, lr}
 801bd46:	b088      	sub	sp, #32
 801bd48:	af02      	add	r7, sp, #8
 801bd4a:	60f8      	str	r0, [r7, #12]
 801bd4c:	4608      	mov	r0, r1
 801bd4e:	4611      	mov	r1, r2
 801bd50:	461a      	mov	r2, r3
 801bd52:	4603      	mov	r3, r0
 801bd54:	817b      	strh	r3, [r7, #10]
 801bd56:	460b      	mov	r3, r1
 801bd58:	813b      	strh	r3, [r7, #8]
 801bd5a:	4613      	mov	r3, r2
 801bd5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bd5e:	68fb      	ldr	r3, [r7, #12]
 801bd60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801bd64:	b2db      	uxtb	r3, r3
 801bd66:	2b20      	cmp	r3, #32
 801bd68:	f040 80fd 	bne.w	801bf66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 801bd6c:	6a3b      	ldr	r3, [r7, #32]
 801bd6e:	2b00      	cmp	r3, #0
 801bd70:	d002      	beq.n	801bd78 <HAL_I2C_Mem_Read+0x34>
 801bd72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d105      	bne.n	801bd84 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 801bd78:	68fb      	ldr	r3, [r7, #12]
 801bd7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801bd7e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801bd80:	2301      	movs	r3, #1
 801bd82:	e0f1      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bd84:	68fb      	ldr	r3, [r7, #12]
 801bd86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801bd8a:	2b01      	cmp	r3, #1
 801bd8c:	d101      	bne.n	801bd92 <HAL_I2C_Mem_Read+0x4e>
 801bd8e:	2302      	movs	r3, #2
 801bd90:	e0ea      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
 801bd92:	68fb      	ldr	r3, [r7, #12]
 801bd94:	2201      	movs	r2, #1
 801bd96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801bd9a:	f7fd f9fb 	bl	8019194 <HAL_GetTick>
 801bd9e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801bda0:	697b      	ldr	r3, [r7, #20]
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	2319      	movs	r3, #25
 801bda6:	2201      	movs	r2, #1
 801bda8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801bdac:	68f8      	ldr	r0, [r7, #12]
 801bdae:	f000 f9af 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	2b00      	cmp	r3, #0
 801bdb6:	d001      	beq.n	801bdbc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 801bdb8:	2301      	movs	r3, #1
 801bdba:	e0d5      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	2222      	movs	r2, #34	; 0x22
 801bdc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801bdc4:	68fb      	ldr	r3, [r7, #12]
 801bdc6:	2240      	movs	r2, #64	; 0x40
 801bdc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bdcc:	68fb      	ldr	r3, [r7, #12]
 801bdce:	2200      	movs	r2, #0
 801bdd0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	6a3a      	ldr	r2, [r7, #32]
 801bdd6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	2200      	movs	r2, #0
 801bde2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801bde4:	88f8      	ldrh	r0, [r7, #6]
 801bde6:	893a      	ldrh	r2, [r7, #8]
 801bde8:	8979      	ldrh	r1, [r7, #10]
 801bdea:	697b      	ldr	r3, [r7, #20]
 801bdec:	9301      	str	r3, [sp, #4]
 801bdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf0:	9300      	str	r3, [sp, #0]
 801bdf2:	4603      	mov	r3, r0
 801bdf4:	68f8      	ldr	r0, [r7, #12]
 801bdf6:	f000 f913 	bl	801c020 <I2C_RequestMemoryRead>
 801bdfa:	4603      	mov	r3, r0
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d005      	beq.n	801be0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801be00:	68fb      	ldr	r3, [r7, #12]
 801be02:	2200      	movs	r2, #0
 801be04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 801be08:	2301      	movs	r3, #1
 801be0a:	e0ad      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801be10:	b29b      	uxth	r3, r3
 801be12:	2bff      	cmp	r3, #255	; 0xff
 801be14:	d90e      	bls.n	801be34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	22ff      	movs	r2, #255	; 0xff
 801be1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be20:	b2da      	uxtb	r2, r3
 801be22:	8979      	ldrh	r1, [r7, #10]
 801be24:	4b52      	ldr	r3, [pc, #328]	; (801bf70 <HAL_I2C_Mem_Read+0x22c>)
 801be26:	9300      	str	r3, [sp, #0]
 801be28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801be2c:	68f8      	ldr	r0, [r7, #12]
 801be2e:	f000 fb0b 	bl	801c448 <I2C_TransferConfig>
 801be32:	e00f      	b.n	801be54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 801be34:	68fb      	ldr	r3, [r7, #12]
 801be36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801be38:	b29a      	uxth	r2, r3
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801be3e:	68fb      	ldr	r3, [r7, #12]
 801be40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be42:	b2da      	uxtb	r2, r3
 801be44:	8979      	ldrh	r1, [r7, #10]
 801be46:	4b4a      	ldr	r3, [pc, #296]	; (801bf70 <HAL_I2C_Mem_Read+0x22c>)
 801be48:	9300      	str	r3, [sp, #0]
 801be4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801be4e:	68f8      	ldr	r0, [r7, #12]
 801be50:	f000 fafa 	bl	801c448 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801be54:	697b      	ldr	r3, [r7, #20]
 801be56:	9300      	str	r3, [sp, #0]
 801be58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be5a:	2200      	movs	r2, #0
 801be5c:	2104      	movs	r1, #4
 801be5e:	68f8      	ldr	r0, [r7, #12]
 801be60:	f000 f956 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801be64:	4603      	mov	r3, r0
 801be66:	2b00      	cmp	r3, #0
 801be68:	d001      	beq.n	801be6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 801be6a:	2301      	movs	r3, #1
 801be6c:	e07c      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801be6e:	68fb      	ldr	r3, [r7, #12]
 801be70:	681b      	ldr	r3, [r3, #0]
 801be72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be74:	68fb      	ldr	r3, [r7, #12]
 801be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be78:	b2d2      	uxtb	r2, r2
 801be7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 801be7c:	68fb      	ldr	r3, [r7, #12]
 801be7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be80:	1c5a      	adds	r2, r3, #1
 801be82:	68fb      	ldr	r3, [r7, #12]
 801be84:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 801be86:	68fb      	ldr	r3, [r7, #12]
 801be88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801be8a:	3b01      	subs	r3, #1
 801be8c:	b29a      	uxth	r2, r3
 801be8e:	68fb      	ldr	r3, [r7, #12]
 801be90:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801be92:	68fb      	ldr	r3, [r7, #12]
 801be94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801be96:	b29b      	uxth	r3, r3
 801be98:	3b01      	subs	r3, #1
 801be9a:	b29a      	uxth	r2, r3
 801be9c:	68fb      	ldr	r3, [r7, #12]
 801be9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bea4:	b29b      	uxth	r3, r3
 801bea6:	2b00      	cmp	r3, #0
 801bea8:	d034      	beq.n	801bf14 <HAL_I2C_Mem_Read+0x1d0>
 801beaa:	68fb      	ldr	r3, [r7, #12]
 801beac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801beae:	2b00      	cmp	r3, #0
 801beb0:	d130      	bne.n	801bf14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801beb2:	697b      	ldr	r3, [r7, #20]
 801beb4:	9300      	str	r3, [sp, #0]
 801beb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801beb8:	2200      	movs	r2, #0
 801beba:	2180      	movs	r1, #128	; 0x80
 801bebc:	68f8      	ldr	r0, [r7, #12]
 801bebe:	f000 f927 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801bec2:	4603      	mov	r3, r0
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d001      	beq.n	801becc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 801bec8:	2301      	movs	r3, #1
 801beca:	e04d      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bed0:	b29b      	uxth	r3, r3
 801bed2:	2bff      	cmp	r3, #255	; 0xff
 801bed4:	d90e      	bls.n	801bef4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801bed6:	68fb      	ldr	r3, [r7, #12]
 801bed8:	22ff      	movs	r2, #255	; 0xff
 801beda:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bee0:	b2da      	uxtb	r2, r3
 801bee2:	8979      	ldrh	r1, [r7, #10]
 801bee4:	2300      	movs	r3, #0
 801bee6:	9300      	str	r3, [sp, #0]
 801bee8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801beec:	68f8      	ldr	r0, [r7, #12]
 801beee:	f000 faab 	bl	801c448 <I2C_TransferConfig>
 801bef2:	e00f      	b.n	801bf14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801bef4:	68fb      	ldr	r3, [r7, #12]
 801bef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bef8:	b29a      	uxth	r2, r3
 801befa:	68fb      	ldr	r3, [r7, #12]
 801befc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801befe:	68fb      	ldr	r3, [r7, #12]
 801bf00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801bf02:	b2da      	uxtb	r2, r3
 801bf04:	8979      	ldrh	r1, [r7, #10]
 801bf06:	2300      	movs	r3, #0
 801bf08:	9300      	str	r3, [sp, #0]
 801bf0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801bf0e:	68f8      	ldr	r0, [r7, #12]
 801bf10:	f000 fa9a 	bl	801c448 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801bf18:	b29b      	uxth	r3, r3
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d19a      	bne.n	801be54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801bf1e:	697a      	ldr	r2, [r7, #20]
 801bf20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bf22:	68f8      	ldr	r0, [r7, #12]
 801bf24:	f000 f974 	bl	801c210 <I2C_WaitOnSTOPFlagUntilTimeout>
 801bf28:	4603      	mov	r3, r0
 801bf2a:	2b00      	cmp	r3, #0
 801bf2c:	d001      	beq.n	801bf32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801bf2e:	2301      	movs	r3, #1
 801bf30:	e01a      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801bf32:	68fb      	ldr	r3, [r7, #12]
 801bf34:	681b      	ldr	r3, [r3, #0]
 801bf36:	2220      	movs	r2, #32
 801bf38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801bf3a:	68fb      	ldr	r3, [r7, #12]
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	6859      	ldr	r1, [r3, #4]
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	681a      	ldr	r2, [r3, #0]
 801bf44:	4b0b      	ldr	r3, [pc, #44]	; (801bf74 <HAL_I2C_Mem_Read+0x230>)
 801bf46:	400b      	ands	r3, r1
 801bf48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	2220      	movs	r2, #32
 801bf4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801bf52:	68fb      	ldr	r3, [r7, #12]
 801bf54:	2200      	movs	r2, #0
 801bf56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bf5a:	68fb      	ldr	r3, [r7, #12]
 801bf5c:	2200      	movs	r2, #0
 801bf5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801bf62:	2300      	movs	r3, #0
 801bf64:	e000      	b.n	801bf68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801bf66:	2302      	movs	r3, #2
  }
}
 801bf68:	4618      	mov	r0, r3
 801bf6a:	3718      	adds	r7, #24
 801bf6c:	46bd      	mov	sp, r7
 801bf6e:	bd80      	pop	{r7, pc}
 801bf70:	80002400 	.word	0x80002400
 801bf74:	fe00e800 	.word	0xfe00e800

0801bf78 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 801bf78:	b580      	push	{r7, lr}
 801bf7a:	b086      	sub	sp, #24
 801bf7c:	af02      	add	r7, sp, #8
 801bf7e:	60f8      	str	r0, [r7, #12]
 801bf80:	4608      	mov	r0, r1
 801bf82:	4611      	mov	r1, r2
 801bf84:	461a      	mov	r2, r3
 801bf86:	4603      	mov	r3, r0
 801bf88:	817b      	strh	r3, [r7, #10]
 801bf8a:	460b      	mov	r3, r1
 801bf8c:	813b      	strh	r3, [r7, #8]
 801bf8e:	4613      	mov	r3, r2
 801bf90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801bf92:	88fb      	ldrh	r3, [r7, #6]
 801bf94:	b2da      	uxtb	r2, r3
 801bf96:	8979      	ldrh	r1, [r7, #10]
 801bf98:	4b20      	ldr	r3, [pc, #128]	; (801c01c <I2C_RequestMemoryWrite+0xa4>)
 801bf9a:	9300      	str	r3, [sp, #0]
 801bf9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801bfa0:	68f8      	ldr	r0, [r7, #12]
 801bfa2:	f000 fa51 	bl	801c448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bfa6:	69fa      	ldr	r2, [r7, #28]
 801bfa8:	69b9      	ldr	r1, [r7, #24]
 801bfaa:	68f8      	ldr	r0, [r7, #12]
 801bfac:	f000 f8f0 	bl	801c190 <I2C_WaitOnTXISFlagUntilTimeout>
 801bfb0:	4603      	mov	r3, r0
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	d001      	beq.n	801bfba <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801bfb6:	2301      	movs	r3, #1
 801bfb8:	e02c      	b.n	801c014 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801bfba:	88fb      	ldrh	r3, [r7, #6]
 801bfbc:	2b01      	cmp	r3, #1
 801bfbe:	d105      	bne.n	801bfcc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801bfc0:	893b      	ldrh	r3, [r7, #8]
 801bfc2:	b2da      	uxtb	r2, r3
 801bfc4:	68fb      	ldr	r3, [r7, #12]
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	629a      	str	r2, [r3, #40]	; 0x28
 801bfca:	e015      	b.n	801bff8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801bfcc:	893b      	ldrh	r3, [r7, #8]
 801bfce:	0a1b      	lsrs	r3, r3, #8
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	b2da      	uxtb	r2, r3
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	681b      	ldr	r3, [r3, #0]
 801bfd8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801bfda:	69fa      	ldr	r2, [r7, #28]
 801bfdc:	69b9      	ldr	r1, [r7, #24]
 801bfde:	68f8      	ldr	r0, [r7, #12]
 801bfe0:	f000 f8d6 	bl	801c190 <I2C_WaitOnTXISFlagUntilTimeout>
 801bfe4:	4603      	mov	r3, r0
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d001      	beq.n	801bfee <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 801bfea:	2301      	movs	r3, #1
 801bfec:	e012      	b.n	801c014 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801bfee:	893b      	ldrh	r3, [r7, #8]
 801bff0:	b2da      	uxtb	r2, r3
 801bff2:	68fb      	ldr	r3, [r7, #12]
 801bff4:	681b      	ldr	r3, [r3, #0]
 801bff6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 801bff8:	69fb      	ldr	r3, [r7, #28]
 801bffa:	9300      	str	r3, [sp, #0]
 801bffc:	69bb      	ldr	r3, [r7, #24]
 801bffe:	2200      	movs	r2, #0
 801c000:	2180      	movs	r1, #128	; 0x80
 801c002:	68f8      	ldr	r0, [r7, #12]
 801c004:	f000 f884 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801c008:	4603      	mov	r3, r0
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d001      	beq.n	801c012 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 801c00e:	2301      	movs	r3, #1
 801c010:	e000      	b.n	801c014 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801c012:	2300      	movs	r3, #0
}
 801c014:	4618      	mov	r0, r3
 801c016:	3710      	adds	r7, #16
 801c018:	46bd      	mov	sp, r7
 801c01a:	bd80      	pop	{r7, pc}
 801c01c:	80002000 	.word	0x80002000

0801c020 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801c020:	b580      	push	{r7, lr}
 801c022:	b086      	sub	sp, #24
 801c024:	af02      	add	r7, sp, #8
 801c026:	60f8      	str	r0, [r7, #12]
 801c028:	4608      	mov	r0, r1
 801c02a:	4611      	mov	r1, r2
 801c02c:	461a      	mov	r2, r3
 801c02e:	4603      	mov	r3, r0
 801c030:	817b      	strh	r3, [r7, #10]
 801c032:	460b      	mov	r3, r1
 801c034:	813b      	strh	r3, [r7, #8]
 801c036:	4613      	mov	r3, r2
 801c038:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 801c03a:	88fb      	ldrh	r3, [r7, #6]
 801c03c:	b2da      	uxtb	r2, r3
 801c03e:	8979      	ldrh	r1, [r7, #10]
 801c040:	4b20      	ldr	r3, [pc, #128]	; (801c0c4 <I2C_RequestMemoryRead+0xa4>)
 801c042:	9300      	str	r3, [sp, #0]
 801c044:	2300      	movs	r3, #0
 801c046:	68f8      	ldr	r0, [r7, #12]
 801c048:	f000 f9fe 	bl	801c448 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c04c:	69fa      	ldr	r2, [r7, #28]
 801c04e:	69b9      	ldr	r1, [r7, #24]
 801c050:	68f8      	ldr	r0, [r7, #12]
 801c052:	f000 f89d 	bl	801c190 <I2C_WaitOnTXISFlagUntilTimeout>
 801c056:	4603      	mov	r3, r0
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d001      	beq.n	801c060 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 801c05c:	2301      	movs	r3, #1
 801c05e:	e02c      	b.n	801c0ba <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801c060:	88fb      	ldrh	r3, [r7, #6]
 801c062:	2b01      	cmp	r3, #1
 801c064:	d105      	bne.n	801c072 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c066:	893b      	ldrh	r3, [r7, #8]
 801c068:	b2da      	uxtb	r2, r3
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	629a      	str	r2, [r3, #40]	; 0x28
 801c070:	e015      	b.n	801c09e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801c072:	893b      	ldrh	r3, [r7, #8]
 801c074:	0a1b      	lsrs	r3, r3, #8
 801c076:	b29b      	uxth	r3, r3
 801c078:	b2da      	uxtb	r2, r3
 801c07a:	68fb      	ldr	r3, [r7, #12]
 801c07c:	681b      	ldr	r3, [r3, #0]
 801c07e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801c080:	69fa      	ldr	r2, [r7, #28]
 801c082:	69b9      	ldr	r1, [r7, #24]
 801c084:	68f8      	ldr	r0, [r7, #12]
 801c086:	f000 f883 	bl	801c190 <I2C_WaitOnTXISFlagUntilTimeout>
 801c08a:	4603      	mov	r3, r0
 801c08c:	2b00      	cmp	r3, #0
 801c08e:	d001      	beq.n	801c094 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801c090:	2301      	movs	r3, #1
 801c092:	e012      	b.n	801c0ba <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801c094:	893b      	ldrh	r3, [r7, #8]
 801c096:	b2da      	uxtb	r2, r3
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	681b      	ldr	r3, [r3, #0]
 801c09c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801c09e:	69fb      	ldr	r3, [r7, #28]
 801c0a0:	9300      	str	r3, [sp, #0]
 801c0a2:	69bb      	ldr	r3, [r7, #24]
 801c0a4:	2200      	movs	r2, #0
 801c0a6:	2140      	movs	r1, #64	; 0x40
 801c0a8:	68f8      	ldr	r0, [r7, #12]
 801c0aa:	f000 f831 	bl	801c110 <I2C_WaitOnFlagUntilTimeout>
 801c0ae:	4603      	mov	r3, r0
 801c0b0:	2b00      	cmp	r3, #0
 801c0b2:	d001      	beq.n	801c0b8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801c0b4:	2301      	movs	r3, #1
 801c0b6:	e000      	b.n	801c0ba <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 801c0b8:	2300      	movs	r3, #0
}
 801c0ba:	4618      	mov	r0, r3
 801c0bc:	3710      	adds	r7, #16
 801c0be:	46bd      	mov	sp, r7
 801c0c0:	bd80      	pop	{r7, pc}
 801c0c2:	bf00      	nop
 801c0c4:	80002000 	.word	0x80002000

0801c0c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 801c0c8:	b480      	push	{r7}
 801c0ca:	b083      	sub	sp, #12
 801c0cc:	af00      	add	r7, sp, #0
 801c0ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	681b      	ldr	r3, [r3, #0]
 801c0d4:	699b      	ldr	r3, [r3, #24]
 801c0d6:	f003 0302 	and.w	r3, r3, #2
 801c0da:	2b02      	cmp	r3, #2
 801c0dc:	d103      	bne.n	801c0e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	681b      	ldr	r3, [r3, #0]
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	681b      	ldr	r3, [r3, #0]
 801c0ea:	699b      	ldr	r3, [r3, #24]
 801c0ec:	f003 0301 	and.w	r3, r3, #1
 801c0f0:	2b01      	cmp	r3, #1
 801c0f2:	d007      	beq.n	801c104 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801c0f4:	687b      	ldr	r3, [r7, #4]
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	699a      	ldr	r2, [r3, #24]
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	f042 0201 	orr.w	r2, r2, #1
 801c102:	619a      	str	r2, [r3, #24]
  }
}
 801c104:	bf00      	nop
 801c106:	370c      	adds	r7, #12
 801c108:	46bd      	mov	sp, r7
 801c10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c10e:	4770      	bx	lr

0801c110 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b084      	sub	sp, #16
 801c114:	af00      	add	r7, sp, #0
 801c116:	60f8      	str	r0, [r7, #12]
 801c118:	60b9      	str	r1, [r7, #8]
 801c11a:	603b      	str	r3, [r7, #0]
 801c11c:	4613      	mov	r3, r2
 801c11e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c120:	e022      	b.n	801c168 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c122:	683b      	ldr	r3, [r7, #0]
 801c124:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c128:	d01e      	beq.n	801c168 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c12a:	f7fd f833 	bl	8019194 <HAL_GetTick>
 801c12e:	4602      	mov	r2, r0
 801c130:	69bb      	ldr	r3, [r7, #24]
 801c132:	1ad3      	subs	r3, r2, r3
 801c134:	683a      	ldr	r2, [r7, #0]
 801c136:	429a      	cmp	r2, r3
 801c138:	d302      	bcc.n	801c140 <I2C_WaitOnFlagUntilTimeout+0x30>
 801c13a:	683b      	ldr	r3, [r7, #0]
 801c13c:	2b00      	cmp	r3, #0
 801c13e:	d113      	bne.n	801c168 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c140:	68fb      	ldr	r3, [r7, #12]
 801c142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c144:	f043 0220 	orr.w	r2, r3, #32
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c14c:	68fb      	ldr	r3, [r7, #12]
 801c14e:	2220      	movs	r2, #32
 801c150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	2200      	movs	r2, #0
 801c158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c15c:	68fb      	ldr	r3, [r7, #12]
 801c15e:	2200      	movs	r2, #0
 801c160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 801c164:	2301      	movs	r3, #1
 801c166:	e00f      	b.n	801c188 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	681b      	ldr	r3, [r3, #0]
 801c16c:	699a      	ldr	r2, [r3, #24]
 801c16e:	68bb      	ldr	r3, [r7, #8]
 801c170:	4013      	ands	r3, r2
 801c172:	68ba      	ldr	r2, [r7, #8]
 801c174:	429a      	cmp	r2, r3
 801c176:	bf0c      	ite	eq
 801c178:	2301      	moveq	r3, #1
 801c17a:	2300      	movne	r3, #0
 801c17c:	b2db      	uxtb	r3, r3
 801c17e:	461a      	mov	r2, r3
 801c180:	79fb      	ldrb	r3, [r7, #7]
 801c182:	429a      	cmp	r2, r3
 801c184:	d0cd      	beq.n	801c122 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 801c186:	2300      	movs	r3, #0
}
 801c188:	4618      	mov	r0, r3
 801c18a:	3710      	adds	r7, #16
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd80      	pop	{r7, pc}

0801c190 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b084      	sub	sp, #16
 801c194:	af00      	add	r7, sp, #0
 801c196:	60f8      	str	r0, [r7, #12]
 801c198:	60b9      	str	r1, [r7, #8]
 801c19a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c19c:	e02c      	b.n	801c1f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801c19e:	687a      	ldr	r2, [r7, #4]
 801c1a0:	68b9      	ldr	r1, [r7, #8]
 801c1a2:	68f8      	ldr	r0, [r7, #12]
 801c1a4:	f000 f870 	bl	801c288 <I2C_IsErrorOccurred>
 801c1a8:	4603      	mov	r3, r0
 801c1aa:	2b00      	cmp	r3, #0
 801c1ac:	d001      	beq.n	801c1b2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801c1ae:	2301      	movs	r3, #1
 801c1b0:	e02a      	b.n	801c208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c1b2:	68bb      	ldr	r3, [r7, #8]
 801c1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1b8:	d01e      	beq.n	801c1f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c1ba:	f7fc ffeb 	bl	8019194 <HAL_GetTick>
 801c1be:	4602      	mov	r2, r0
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	1ad3      	subs	r3, r2, r3
 801c1c4:	68ba      	ldr	r2, [r7, #8]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d302      	bcc.n	801c1d0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 801c1ca:	68bb      	ldr	r3, [r7, #8]
 801c1cc:	2b00      	cmp	r3, #0
 801c1ce:	d113      	bne.n	801c1f8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1d4:	f043 0220 	orr.w	r2, r3, #32
 801c1d8:	68fb      	ldr	r3, [r7, #12]
 801c1da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801c1dc:	68fb      	ldr	r3, [r7, #12]
 801c1de:	2220      	movs	r2, #32
 801c1e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 801c1e4:	68fb      	ldr	r3, [r7, #12]
 801c1e6:	2200      	movs	r2, #0
 801c1e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801c1ec:	68fb      	ldr	r3, [r7, #12]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 801c1f4:	2301      	movs	r3, #1
 801c1f6:	e007      	b.n	801c208 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 801c1f8:	68fb      	ldr	r3, [r7, #12]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	699b      	ldr	r3, [r3, #24]
 801c1fe:	f003 0302 	and.w	r3, r3, #2
 801c202:	2b02      	cmp	r3, #2
 801c204:	d1cb      	bne.n	801c19e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 801c206:	2300      	movs	r3, #0
}
 801c208:	4618      	mov	r0, r3
 801c20a:	3710      	adds	r7, #16
 801c20c:	46bd      	mov	sp, r7
 801c20e:	bd80      	pop	{r7, pc}

0801c210 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801c210:	b580      	push	{r7, lr}
 801c212:	b084      	sub	sp, #16
 801c214:	af00      	add	r7, sp, #0
 801c216:	60f8      	str	r0, [r7, #12]
 801c218:	60b9      	str	r1, [r7, #8]
 801c21a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c21c:	e028      	b.n	801c270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801c21e:	687a      	ldr	r2, [r7, #4]
 801c220:	68b9      	ldr	r1, [r7, #8]
 801c222:	68f8      	ldr	r0, [r7, #12]
 801c224:	f000 f830 	bl	801c288 <I2C_IsErrorOccurred>
 801c228:	4603      	mov	r3, r0
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d001      	beq.n	801c232 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801c22e:	2301      	movs	r3, #1
 801c230:	e026      	b.n	801c280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c232:	f7fc ffaf 	bl	8019194 <HAL_GetTick>
 801c236:	4602      	mov	r2, r0
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	1ad3      	subs	r3, r2, r3
 801c23c:	68ba      	ldr	r2, [r7, #8]
 801c23e:	429a      	cmp	r2, r3
 801c240:	d302      	bcc.n	801c248 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801c242:	68bb      	ldr	r3, [r7, #8]
 801c244:	2b00      	cmp	r3, #0
 801c246:	d113      	bne.n	801c270 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801c248:	68fb      	ldr	r3, [r7, #12]
 801c24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c24c:	f043 0220 	orr.w	r2, r3, #32
 801c250:	68fb      	ldr	r3, [r7, #12]
 801c252:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 801c254:	68fb      	ldr	r3, [r7, #12]
 801c256:	2220      	movs	r2, #32
 801c258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 801c25c:	68fb      	ldr	r3, [r7, #12]
 801c25e:	2200      	movs	r2, #0
 801c260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	2200      	movs	r2, #0
 801c268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 801c26c:	2301      	movs	r3, #1
 801c26e:	e007      	b.n	801c280 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c270:	68fb      	ldr	r3, [r7, #12]
 801c272:	681b      	ldr	r3, [r3, #0]
 801c274:	699b      	ldr	r3, [r3, #24]
 801c276:	f003 0320 	and.w	r3, r3, #32
 801c27a:	2b20      	cmp	r3, #32
 801c27c:	d1cf      	bne.n	801c21e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801c27e:	2300      	movs	r3, #0
}
 801c280:	4618      	mov	r0, r3
 801c282:	3710      	adds	r7, #16
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 801c288:	b580      	push	{r7, lr}
 801c28a:	b08a      	sub	sp, #40	; 0x28
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	60f8      	str	r0, [r7, #12]
 801c290:	60b9      	str	r1, [r7, #8]
 801c292:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801c294:	2300      	movs	r3, #0
 801c296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 801c29a:	68fb      	ldr	r3, [r7, #12]
 801c29c:	681b      	ldr	r3, [r3, #0]
 801c29e:	699b      	ldr	r3, [r3, #24]
 801c2a0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801c2a2:	2300      	movs	r3, #0
 801c2a4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 801c2a6:	687b      	ldr	r3, [r7, #4]
 801c2a8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 801c2aa:	69bb      	ldr	r3, [r7, #24]
 801c2ac:	f003 0310 	and.w	r3, r3, #16
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d068      	beq.n	801c386 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	681b      	ldr	r3, [r3, #0]
 801c2b8:	2210      	movs	r2, #16
 801c2ba:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801c2bc:	e049      	b.n	801c352 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801c2be:	68bb      	ldr	r3, [r7, #8]
 801c2c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2c4:	d045      	beq.n	801c352 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801c2c6:	f7fc ff65 	bl	8019194 <HAL_GetTick>
 801c2ca:	4602      	mov	r2, r0
 801c2cc:	69fb      	ldr	r3, [r7, #28]
 801c2ce:	1ad3      	subs	r3, r2, r3
 801c2d0:	68ba      	ldr	r2, [r7, #8]
 801c2d2:	429a      	cmp	r2, r3
 801c2d4:	d302      	bcc.n	801c2dc <I2C_IsErrorOccurred+0x54>
 801c2d6:	68bb      	ldr	r3, [r7, #8]
 801c2d8:	2b00      	cmp	r3, #0
 801c2da:	d13a      	bne.n	801c352 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 801c2dc:	68fb      	ldr	r3, [r7, #12]
 801c2de:	681b      	ldr	r3, [r3, #0]
 801c2e0:	685b      	ldr	r3, [r3, #4]
 801c2e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801c2e6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 801c2e8:	68fb      	ldr	r3, [r7, #12]
 801c2ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c2ee:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801c2f0:	68fb      	ldr	r3, [r7, #12]
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	699b      	ldr	r3, [r3, #24]
 801c2f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801c2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c2fe:	d121      	bne.n	801c344 <I2C_IsErrorOccurred+0xbc>
 801c300:	697b      	ldr	r3, [r7, #20]
 801c302:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c306:	d01d      	beq.n	801c344 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 801c308:	7cfb      	ldrb	r3, [r7, #19]
 801c30a:	2b20      	cmp	r3, #32
 801c30c:	d01a      	beq.n	801c344 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801c30e:	68fb      	ldr	r3, [r7, #12]
 801c310:	681b      	ldr	r3, [r3, #0]
 801c312:	685a      	ldr	r2, [r3, #4]
 801c314:	68fb      	ldr	r3, [r7, #12]
 801c316:	681b      	ldr	r3, [r3, #0]
 801c318:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801c31c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801c31e:	f7fc ff39 	bl	8019194 <HAL_GetTick>
 801c322:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c324:	e00e      	b.n	801c344 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 801c326:	f7fc ff35 	bl	8019194 <HAL_GetTick>
 801c32a:	4602      	mov	r2, r0
 801c32c:	69fb      	ldr	r3, [r7, #28]
 801c32e:	1ad3      	subs	r3, r2, r3
 801c330:	2b19      	cmp	r3, #25
 801c332:	d907      	bls.n	801c344 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 801c334:	6a3b      	ldr	r3, [r7, #32]
 801c336:	f043 0320 	orr.w	r3, r3, #32
 801c33a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 801c33c:	2301      	movs	r3, #1
 801c33e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801c342:	e006      	b.n	801c352 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801c344:	68fb      	ldr	r3, [r7, #12]
 801c346:	681b      	ldr	r3, [r3, #0]
 801c348:	699b      	ldr	r3, [r3, #24]
 801c34a:	f003 0320 	and.w	r3, r3, #32
 801c34e:	2b20      	cmp	r3, #32
 801c350:	d1e9      	bne.n	801c326 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801c352:	68fb      	ldr	r3, [r7, #12]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	699b      	ldr	r3, [r3, #24]
 801c358:	f003 0320 	and.w	r3, r3, #32
 801c35c:	2b20      	cmp	r3, #32
 801c35e:	d003      	beq.n	801c368 <I2C_IsErrorOccurred+0xe0>
 801c360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c364:	2b00      	cmp	r3, #0
 801c366:	d0aa      	beq.n	801c2be <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 801c368:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c36c:	2b00      	cmp	r3, #0
 801c36e:	d103      	bne.n	801c378 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801c370:	68fb      	ldr	r3, [r7, #12]
 801c372:	681b      	ldr	r3, [r3, #0]
 801c374:	2220      	movs	r2, #32
 801c376:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 801c378:	6a3b      	ldr	r3, [r7, #32]
 801c37a:	f043 0304 	orr.w	r3, r3, #4
 801c37e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801c380:	2301      	movs	r3, #1
 801c382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 801c386:	68fb      	ldr	r3, [r7, #12]
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	699b      	ldr	r3, [r3, #24]
 801c38c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801c38e:	69bb      	ldr	r3, [r7, #24]
 801c390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c394:	2b00      	cmp	r3, #0
 801c396:	d00b      	beq.n	801c3b0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 801c398:	6a3b      	ldr	r3, [r7, #32]
 801c39a:	f043 0301 	orr.w	r3, r3, #1
 801c39e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801c3a0:	68fb      	ldr	r3, [r7, #12]
 801c3a2:	681b      	ldr	r3, [r3, #0]
 801c3a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 801c3a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c3aa:	2301      	movs	r3, #1
 801c3ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801c3b0:	69bb      	ldr	r3, [r7, #24]
 801c3b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d00b      	beq.n	801c3d2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 801c3ba:	6a3b      	ldr	r3, [r7, #32]
 801c3bc:	f043 0308 	orr.w	r3, r3, #8
 801c3c0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	681b      	ldr	r3, [r3, #0]
 801c3c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801c3ca:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c3cc:	2301      	movs	r3, #1
 801c3ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 801c3d2:	69bb      	ldr	r3, [r7, #24]
 801c3d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801c3d8:	2b00      	cmp	r3, #0
 801c3da:	d00b      	beq.n	801c3f4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 801c3dc:	6a3b      	ldr	r3, [r7, #32]
 801c3de:	f043 0302 	orr.w	r3, r3, #2
 801c3e2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 801c3e4:	68fb      	ldr	r3, [r7, #12]
 801c3e6:	681b      	ldr	r3, [r3, #0]
 801c3e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c3ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 801c3ee:	2301      	movs	r3, #1
 801c3f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 801c3f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d01c      	beq.n	801c436 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 801c3fc:	68f8      	ldr	r0, [r7, #12]
 801c3fe:	f7ff fe63 	bl	801c0c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	6859      	ldr	r1, [r3, #4]
 801c408:	68fb      	ldr	r3, [r7, #12]
 801c40a:	681a      	ldr	r2, [r3, #0]
 801c40c:	4b0d      	ldr	r3, [pc, #52]	; (801c444 <I2C_IsErrorOccurred+0x1bc>)
 801c40e:	400b      	ands	r3, r1
 801c410:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 801c412:	68fb      	ldr	r3, [r7, #12]
 801c414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c416:	6a3b      	ldr	r3, [r7, #32]
 801c418:	431a      	orrs	r2, r3
 801c41a:	68fb      	ldr	r3, [r7, #12]
 801c41c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801c41e:	68fb      	ldr	r3, [r7, #12]
 801c420:	2220      	movs	r2, #32
 801c422:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	2200      	movs	r2, #0
 801c42a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c42e:	68fb      	ldr	r3, [r7, #12]
 801c430:	2200      	movs	r2, #0
 801c432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 801c436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	3728      	adds	r7, #40	; 0x28
 801c43e:	46bd      	mov	sp, r7
 801c440:	bd80      	pop	{r7, pc}
 801c442:	bf00      	nop
 801c444:	fe00e800 	.word	0xfe00e800

0801c448 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 801c448:	b480      	push	{r7}
 801c44a:	b087      	sub	sp, #28
 801c44c:	af00      	add	r7, sp, #0
 801c44e:	60f8      	str	r0, [r7, #12]
 801c450:	607b      	str	r3, [r7, #4]
 801c452:	460b      	mov	r3, r1
 801c454:	817b      	strh	r3, [r7, #10]
 801c456:	4613      	mov	r3, r2
 801c458:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c45a:	897b      	ldrh	r3, [r7, #10]
 801c45c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801c460:	7a7b      	ldrb	r3, [r7, #9]
 801c462:	041b      	lsls	r3, r3, #16
 801c464:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c468:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801c46e:	6a3b      	ldr	r3, [r7, #32]
 801c470:	4313      	orrs	r3, r2
 801c472:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c476:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 801c478:	68fb      	ldr	r3, [r7, #12]
 801c47a:	681b      	ldr	r3, [r3, #0]
 801c47c:	685a      	ldr	r2, [r3, #4]
 801c47e:	6a3b      	ldr	r3, [r7, #32]
 801c480:	0d5b      	lsrs	r3, r3, #21
 801c482:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 801c486:	4b08      	ldr	r3, [pc, #32]	; (801c4a8 <I2C_TransferConfig+0x60>)
 801c488:	430b      	orrs	r3, r1
 801c48a:	43db      	mvns	r3, r3
 801c48c:	ea02 0103 	and.w	r1, r2, r3
 801c490:	68fb      	ldr	r3, [r7, #12]
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	697a      	ldr	r2, [r7, #20]
 801c496:	430a      	orrs	r2, r1
 801c498:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 801c49a:	bf00      	nop
 801c49c:	371c      	adds	r7, #28
 801c49e:	46bd      	mov	sp, r7
 801c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4a4:	4770      	bx	lr
 801c4a6:	bf00      	nop
 801c4a8:	03ff63ff 	.word	0x03ff63ff

0801c4ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801c4ac:	b480      	push	{r7}
 801c4ae:	b083      	sub	sp, #12
 801c4b0:	af00      	add	r7, sp, #0
 801c4b2:	6078      	str	r0, [r7, #4]
 801c4b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c4b6:	687b      	ldr	r3, [r7, #4]
 801c4b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c4bc:	b2db      	uxtb	r3, r3
 801c4be:	2b20      	cmp	r3, #32
 801c4c0:	d138      	bne.n	801c534 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c4c2:	687b      	ldr	r3, [r7, #4]
 801c4c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c4c8:	2b01      	cmp	r3, #1
 801c4ca:	d101      	bne.n	801c4d0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801c4cc:	2302      	movs	r3, #2
 801c4ce:	e032      	b.n	801c536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801c4d0:	687b      	ldr	r3, [r7, #4]
 801c4d2:	2201      	movs	r2, #1
 801c4d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2224      	movs	r2, #36	; 0x24
 801c4dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c4e0:	687b      	ldr	r3, [r7, #4]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	681a      	ldr	r2, [r3, #0]
 801c4e6:	687b      	ldr	r3, [r7, #4]
 801c4e8:	681b      	ldr	r3, [r3, #0]
 801c4ea:	f022 0201 	bic.w	r2, r2, #1
 801c4ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	681a      	ldr	r2, [r3, #0]
 801c4f6:	687b      	ldr	r3, [r7, #4]
 801c4f8:	681b      	ldr	r3, [r3, #0]
 801c4fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801c4fe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	681b      	ldr	r3, [r3, #0]
 801c504:	6819      	ldr	r1, [r3, #0]
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	681b      	ldr	r3, [r3, #0]
 801c50a:	683a      	ldr	r2, [r7, #0]
 801c50c:	430a      	orrs	r2, r1
 801c50e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c510:	687b      	ldr	r3, [r7, #4]
 801c512:	681b      	ldr	r3, [r3, #0]
 801c514:	681a      	ldr	r2, [r3, #0]
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	f042 0201 	orr.w	r2, r2, #1
 801c51e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c520:	687b      	ldr	r3, [r7, #4]
 801c522:	2220      	movs	r2, #32
 801c524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	2200      	movs	r2, #0
 801c52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c530:	2300      	movs	r3, #0
 801c532:	e000      	b.n	801c536 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801c534:	2302      	movs	r3, #2
  }
}
 801c536:	4618      	mov	r0, r3
 801c538:	370c      	adds	r7, #12
 801c53a:	46bd      	mov	sp, r7
 801c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c540:	4770      	bx	lr

0801c542 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801c542:	b480      	push	{r7}
 801c544:	b085      	sub	sp, #20
 801c546:	af00      	add	r7, sp, #0
 801c548:	6078      	str	r0, [r7, #4]
 801c54a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801c54c:	687b      	ldr	r3, [r7, #4]
 801c54e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801c552:	b2db      	uxtb	r3, r3
 801c554:	2b20      	cmp	r3, #32
 801c556:	d139      	bne.n	801c5cc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801c558:	687b      	ldr	r3, [r7, #4]
 801c55a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801c55e:	2b01      	cmp	r3, #1
 801c560:	d101      	bne.n	801c566 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801c562:	2302      	movs	r3, #2
 801c564:	e033      	b.n	801c5ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	2201      	movs	r2, #1
 801c56a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	2224      	movs	r2, #36	; 0x24
 801c572:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801c576:	687b      	ldr	r3, [r7, #4]
 801c578:	681b      	ldr	r3, [r3, #0]
 801c57a:	681a      	ldr	r2, [r3, #0]
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	681b      	ldr	r3, [r3, #0]
 801c580:	f022 0201 	bic.w	r2, r2, #1
 801c584:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	681b      	ldr	r3, [r3, #0]
 801c58a:	681b      	ldr	r3, [r3, #0]
 801c58c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801c58e:	68fb      	ldr	r3, [r7, #12]
 801c590:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 801c594:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801c596:	683b      	ldr	r3, [r7, #0]
 801c598:	021b      	lsls	r3, r3, #8
 801c59a:	68fa      	ldr	r2, [r7, #12]
 801c59c:	4313      	orrs	r3, r2
 801c59e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801c5a0:	687b      	ldr	r3, [r7, #4]
 801c5a2:	681b      	ldr	r3, [r3, #0]
 801c5a4:	68fa      	ldr	r2, [r7, #12]
 801c5a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	681b      	ldr	r3, [r3, #0]
 801c5ac:	681a      	ldr	r2, [r3, #0]
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	681b      	ldr	r3, [r3, #0]
 801c5b2:	f042 0201 	orr.w	r2, r2, #1
 801c5b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	2220      	movs	r2, #32
 801c5bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801c5c0:	687b      	ldr	r3, [r7, #4]
 801c5c2:	2200      	movs	r2, #0
 801c5c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801c5c8:	2300      	movs	r3, #0
 801c5ca:	e000      	b.n	801c5ce <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801c5cc:	2302      	movs	r3, #2
  }
}
 801c5ce:	4618      	mov	r0, r3
 801c5d0:	3714      	adds	r7, #20
 801c5d2:	46bd      	mov	sp, r7
 801c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5d8:	4770      	bx	lr

0801c5da <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 801c5da:	b580      	push	{r7, lr}
 801c5dc:	b084      	sub	sp, #16
 801c5de:	af00      	add	r7, sp, #0
 801c5e0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 801c5e2:	687b      	ldr	r3, [r7, #4]
 801c5e4:	2b00      	cmp	r3, #0
 801c5e6:	d101      	bne.n	801c5ec <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 801c5e8:	2301      	movs	r3, #1
 801c5ea:	e041      	b.n	801c670 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	681b      	ldr	r3, [r3, #0]
 801c5f0:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 801c5f4:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	f245 5255 	movw	r2, #21845	; 0x5555
 801c5fe:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 801c600:	687b      	ldr	r3, [r7, #4]
 801c602:	681b      	ldr	r3, [r3, #0]
 801c604:	687a      	ldr	r2, [r7, #4]
 801c606:	6852      	ldr	r2, [r2, #4]
 801c608:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 801c60a:	687b      	ldr	r3, [r7, #4]
 801c60c:	681b      	ldr	r3, [r3, #0]
 801c60e:	687a      	ldr	r2, [r7, #4]
 801c610:	6892      	ldr	r2, [r2, #8]
 801c612:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 801c614:	f7fc fdbe 	bl	8019194 <HAL_GetTick>
 801c618:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c61a:	e00f      	b.n	801c63c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 801c61c:	f7fc fdba 	bl	8019194 <HAL_GetTick>
 801c620:	4602      	mov	r2, r0
 801c622:	68fb      	ldr	r3, [r7, #12]
 801c624:	1ad3      	subs	r3, r2, r3
 801c626:	2b31      	cmp	r3, #49	; 0x31
 801c628:	d908      	bls.n	801c63c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	681b      	ldr	r3, [r3, #0]
 801c62e:	68db      	ldr	r3, [r3, #12]
 801c630:	f003 0307 	and.w	r3, r3, #7
 801c634:	2b00      	cmp	r3, #0
 801c636:	d001      	beq.n	801c63c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 801c638:	2303      	movs	r3, #3
 801c63a:	e019      	b.n	801c670 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 801c63c:	687b      	ldr	r3, [r7, #4]
 801c63e:	681b      	ldr	r3, [r3, #0]
 801c640:	68db      	ldr	r3, [r3, #12]
 801c642:	f003 0307 	and.w	r3, r3, #7
 801c646:	2b00      	cmp	r3, #0
 801c648:	d1e8      	bne.n	801c61c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	681b      	ldr	r3, [r3, #0]
 801c64e:	691a      	ldr	r2, [r3, #16]
 801c650:	687b      	ldr	r3, [r7, #4]
 801c652:	68db      	ldr	r3, [r3, #12]
 801c654:	429a      	cmp	r2, r3
 801c656:	d005      	beq.n	801c664 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 801c658:	687b      	ldr	r3, [r7, #4]
 801c65a:	681b      	ldr	r3, [r3, #0]
 801c65c:	687a      	ldr	r2, [r7, #4]
 801c65e:	68d2      	ldr	r2, [r2, #12]
 801c660:	611a      	str	r2, [r3, #16]
 801c662:	e004      	b.n	801c66e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801c664:	687b      	ldr	r3, [r7, #4]
 801c666:	681b      	ldr	r3, [r3, #0]
 801c668:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801c66c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801c66e:	2300      	movs	r3, #0
}
 801c670:	4618      	mov	r0, r3
 801c672:	3710      	adds	r7, #16
 801c674:	46bd      	mov	sp, r7
 801c676:	bd80      	pop	{r7, pc}

0801c678 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 801c678:	b480      	push	{r7}
 801c67a:	b083      	sub	sp, #12
 801c67c:	af00      	add	r7, sp, #0
 801c67e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801c680:	687b      	ldr	r3, [r7, #4]
 801c682:	681b      	ldr	r3, [r3, #0]
 801c684:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 801c688:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 801c68a:	2300      	movs	r3, #0
}
 801c68c:	4618      	mov	r0, r3
 801c68e:	370c      	adds	r7, #12
 801c690:	46bd      	mov	sp, r7
 801c692:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c696:	4770      	bx	lr

0801c698 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801c698:	b580      	push	{r7, lr}
 801c69a:	b086      	sub	sp, #24
 801c69c:	af00      	add	r7, sp, #0
 801c69e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801c6a0:	2300      	movs	r3, #0
 801c6a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	2b00      	cmp	r3, #0
 801c6a8:	d101      	bne.n	801c6ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 801c6aa:	2301      	movs	r3, #1
 801c6ac:	e29b      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	f003 0301 	and.w	r3, r3, #1
 801c6b6:	2b00      	cmp	r3, #0
 801c6b8:	f000 8087 	beq.w	801c7ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801c6bc:	4b96      	ldr	r3, [pc, #600]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c6be:	689b      	ldr	r3, [r3, #8]
 801c6c0:	f003 030c 	and.w	r3, r3, #12
 801c6c4:	2b04      	cmp	r3, #4
 801c6c6:	d00c      	beq.n	801c6e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801c6c8:	4b93      	ldr	r3, [pc, #588]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c6ca:	689b      	ldr	r3, [r3, #8]
 801c6cc:	f003 030c 	and.w	r3, r3, #12
 801c6d0:	2b08      	cmp	r3, #8
 801c6d2:	d112      	bne.n	801c6fa <HAL_RCC_OscConfig+0x62>
 801c6d4:	4b90      	ldr	r3, [pc, #576]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c6d6:	685b      	ldr	r3, [r3, #4]
 801c6d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c6dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801c6e0:	d10b      	bne.n	801c6fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c6e2:	4b8d      	ldr	r3, [pc, #564]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c6e4:	681b      	ldr	r3, [r3, #0]
 801c6e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	d06c      	beq.n	801c7c8 <HAL_RCC_OscConfig+0x130>
 801c6ee:	687b      	ldr	r3, [r7, #4]
 801c6f0:	685b      	ldr	r3, [r3, #4]
 801c6f2:	2b00      	cmp	r3, #0
 801c6f4:	d168      	bne.n	801c7c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801c6f6:	2301      	movs	r3, #1
 801c6f8:	e275      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	685b      	ldr	r3, [r3, #4]
 801c6fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c702:	d106      	bne.n	801c712 <HAL_RCC_OscConfig+0x7a>
 801c704:	4b84      	ldr	r3, [pc, #528]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c706:	681b      	ldr	r3, [r3, #0]
 801c708:	4a83      	ldr	r2, [pc, #524]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c70a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c70e:	6013      	str	r3, [r2, #0]
 801c710:	e02e      	b.n	801c770 <HAL_RCC_OscConfig+0xd8>
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	685b      	ldr	r3, [r3, #4]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d10c      	bne.n	801c734 <HAL_RCC_OscConfig+0x9c>
 801c71a:	4b7f      	ldr	r3, [pc, #508]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c71c:	681b      	ldr	r3, [r3, #0]
 801c71e:	4a7e      	ldr	r2, [pc, #504]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c720:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c724:	6013      	str	r3, [r2, #0]
 801c726:	4b7c      	ldr	r3, [pc, #496]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c728:	681b      	ldr	r3, [r3, #0]
 801c72a:	4a7b      	ldr	r2, [pc, #492]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c72c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c730:	6013      	str	r3, [r2, #0]
 801c732:	e01d      	b.n	801c770 <HAL_RCC_OscConfig+0xd8>
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	685b      	ldr	r3, [r3, #4]
 801c738:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c73c:	d10c      	bne.n	801c758 <HAL_RCC_OscConfig+0xc0>
 801c73e:	4b76      	ldr	r3, [pc, #472]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c740:	681b      	ldr	r3, [r3, #0]
 801c742:	4a75      	ldr	r2, [pc, #468]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c744:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801c748:	6013      	str	r3, [r2, #0]
 801c74a:	4b73      	ldr	r3, [pc, #460]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c74c:	681b      	ldr	r3, [r3, #0]
 801c74e:	4a72      	ldr	r2, [pc, #456]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c754:	6013      	str	r3, [r2, #0]
 801c756:	e00b      	b.n	801c770 <HAL_RCC_OscConfig+0xd8>
 801c758:	4b6f      	ldr	r3, [pc, #444]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c75a:	681b      	ldr	r3, [r3, #0]
 801c75c:	4a6e      	ldr	r2, [pc, #440]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c75e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c762:	6013      	str	r3, [r2, #0]
 801c764:	4b6c      	ldr	r3, [pc, #432]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c766:	681b      	ldr	r3, [r3, #0]
 801c768:	4a6b      	ldr	r2, [pc, #428]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c76a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801c76e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	685b      	ldr	r3, [r3, #4]
 801c774:	2b00      	cmp	r3, #0
 801c776:	d013      	beq.n	801c7a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c778:	f7fc fd0c 	bl	8019194 <HAL_GetTick>
 801c77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c77e:	e008      	b.n	801c792 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c780:	f7fc fd08 	bl	8019194 <HAL_GetTick>
 801c784:	4602      	mov	r2, r0
 801c786:	693b      	ldr	r3, [r7, #16]
 801c788:	1ad3      	subs	r3, r2, r3
 801c78a:	2b64      	cmp	r3, #100	; 0x64
 801c78c:	d901      	bls.n	801c792 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801c78e:	2303      	movs	r3, #3
 801c790:	e229      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801c792:	4b61      	ldr	r3, [pc, #388]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c794:	681b      	ldr	r3, [r3, #0]
 801c796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c79a:	2b00      	cmp	r3, #0
 801c79c:	d0f0      	beq.n	801c780 <HAL_RCC_OscConfig+0xe8>
 801c79e:	e014      	b.n	801c7ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c7a0:	f7fc fcf8 	bl	8019194 <HAL_GetTick>
 801c7a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c7a6:	e008      	b.n	801c7ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801c7a8:	f7fc fcf4 	bl	8019194 <HAL_GetTick>
 801c7ac:	4602      	mov	r2, r0
 801c7ae:	693b      	ldr	r3, [r7, #16]
 801c7b0:	1ad3      	subs	r3, r2, r3
 801c7b2:	2b64      	cmp	r3, #100	; 0x64
 801c7b4:	d901      	bls.n	801c7ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801c7b6:	2303      	movs	r3, #3
 801c7b8:	e215      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801c7ba:	4b57      	ldr	r3, [pc, #348]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c7bc:	681b      	ldr	r3, [r3, #0]
 801c7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801c7c2:	2b00      	cmp	r3, #0
 801c7c4:	d1f0      	bne.n	801c7a8 <HAL_RCC_OscConfig+0x110>
 801c7c6:	e000      	b.n	801c7ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801c7c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	681b      	ldr	r3, [r3, #0]
 801c7ce:	f003 0302 	and.w	r3, r3, #2
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d069      	beq.n	801c8aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801c7d6:	4b50      	ldr	r3, [pc, #320]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c7d8:	689b      	ldr	r3, [r3, #8]
 801c7da:	f003 030c 	and.w	r3, r3, #12
 801c7de:	2b00      	cmp	r3, #0
 801c7e0:	d00b      	beq.n	801c7fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801c7e2:	4b4d      	ldr	r3, [pc, #308]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c7e4:	689b      	ldr	r3, [r3, #8]
 801c7e6:	f003 030c 	and.w	r3, r3, #12
 801c7ea:	2b08      	cmp	r3, #8
 801c7ec:	d11c      	bne.n	801c828 <HAL_RCC_OscConfig+0x190>
 801c7ee:	4b4a      	ldr	r3, [pc, #296]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c7f0:	685b      	ldr	r3, [r3, #4]
 801c7f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c7f6:	2b00      	cmp	r3, #0
 801c7f8:	d116      	bne.n	801c828 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c7fa:	4b47      	ldr	r3, [pc, #284]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f003 0302 	and.w	r3, r3, #2
 801c802:	2b00      	cmp	r3, #0
 801c804:	d005      	beq.n	801c812 <HAL_RCC_OscConfig+0x17a>
 801c806:	687b      	ldr	r3, [r7, #4]
 801c808:	68db      	ldr	r3, [r3, #12]
 801c80a:	2b01      	cmp	r3, #1
 801c80c:	d001      	beq.n	801c812 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801c80e:	2301      	movs	r3, #1
 801c810:	e1e9      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c812:	4b41      	ldr	r3, [pc, #260]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c814:	681b      	ldr	r3, [r3, #0]
 801c816:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	691b      	ldr	r3, [r3, #16]
 801c81e:	00db      	lsls	r3, r3, #3
 801c820:	493d      	ldr	r1, [pc, #244]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c822:	4313      	orrs	r3, r2
 801c824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801c826:	e040      	b.n	801c8aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	68db      	ldr	r3, [r3, #12]
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d023      	beq.n	801c878 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801c830:	4b39      	ldr	r3, [pc, #228]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c832:	681b      	ldr	r3, [r3, #0]
 801c834:	4a38      	ldr	r2, [pc, #224]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c836:	f043 0301 	orr.w	r3, r3, #1
 801c83a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c83c:	f7fc fcaa 	bl	8019194 <HAL_GetTick>
 801c840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c842:	e008      	b.n	801c856 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c844:	f7fc fca6 	bl	8019194 <HAL_GetTick>
 801c848:	4602      	mov	r2, r0
 801c84a:	693b      	ldr	r3, [r7, #16]
 801c84c:	1ad3      	subs	r3, r2, r3
 801c84e:	2b02      	cmp	r3, #2
 801c850:	d901      	bls.n	801c856 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 801c852:	2303      	movs	r3, #3
 801c854:	e1c7      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801c856:	4b30      	ldr	r3, [pc, #192]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c858:	681b      	ldr	r3, [r3, #0]
 801c85a:	f003 0302 	and.w	r3, r3, #2
 801c85e:	2b00      	cmp	r3, #0
 801c860:	d0f0      	beq.n	801c844 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801c862:	4b2d      	ldr	r3, [pc, #180]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c864:	681b      	ldr	r3, [r3, #0]
 801c866:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	691b      	ldr	r3, [r3, #16]
 801c86e:	00db      	lsls	r3, r3, #3
 801c870:	4929      	ldr	r1, [pc, #164]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c872:	4313      	orrs	r3, r2
 801c874:	600b      	str	r3, [r1, #0]
 801c876:	e018      	b.n	801c8aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801c878:	4b27      	ldr	r3, [pc, #156]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c87a:	681b      	ldr	r3, [r3, #0]
 801c87c:	4a26      	ldr	r2, [pc, #152]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c87e:	f023 0301 	bic.w	r3, r3, #1
 801c882:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c884:	f7fc fc86 	bl	8019194 <HAL_GetTick>
 801c888:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c88a:	e008      	b.n	801c89e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801c88c:	f7fc fc82 	bl	8019194 <HAL_GetTick>
 801c890:	4602      	mov	r2, r0
 801c892:	693b      	ldr	r3, [r7, #16]
 801c894:	1ad3      	subs	r3, r2, r3
 801c896:	2b02      	cmp	r3, #2
 801c898:	d901      	bls.n	801c89e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 801c89a:	2303      	movs	r3, #3
 801c89c:	e1a3      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801c89e:	4b1e      	ldr	r3, [pc, #120]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8a0:	681b      	ldr	r3, [r3, #0]
 801c8a2:	f003 0302 	and.w	r3, r3, #2
 801c8a6:	2b00      	cmp	r3, #0
 801c8a8:	d1f0      	bne.n	801c88c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	681b      	ldr	r3, [r3, #0]
 801c8ae:	f003 0308 	and.w	r3, r3, #8
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	d038      	beq.n	801c928 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	695b      	ldr	r3, [r3, #20]
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d019      	beq.n	801c8f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c8be:	4b16      	ldr	r3, [pc, #88]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c8c2:	4a15      	ldr	r2, [pc, #84]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8c4:	f043 0301 	orr.w	r3, r3, #1
 801c8c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c8ca:	f7fc fc63 	bl	8019194 <HAL_GetTick>
 801c8ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c8d0:	e008      	b.n	801c8e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c8d2:	f7fc fc5f 	bl	8019194 <HAL_GetTick>
 801c8d6:	4602      	mov	r2, r0
 801c8d8:	693b      	ldr	r3, [r7, #16]
 801c8da:	1ad3      	subs	r3, r2, r3
 801c8dc:	2b02      	cmp	r3, #2
 801c8de:	d901      	bls.n	801c8e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801c8e0:	2303      	movs	r3, #3
 801c8e2:	e180      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801c8e4:	4b0c      	ldr	r3, [pc, #48]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c8e8:	f003 0302 	and.w	r3, r3, #2
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d0f0      	beq.n	801c8d2 <HAL_RCC_OscConfig+0x23a>
 801c8f0:	e01a      	b.n	801c928 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c8f2:	4b09      	ldr	r3, [pc, #36]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c8f6:	4a08      	ldr	r2, [pc, #32]	; (801c918 <HAL_RCC_OscConfig+0x280>)
 801c8f8:	f023 0301 	bic.w	r3, r3, #1
 801c8fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c8fe:	f7fc fc49 	bl	8019194 <HAL_GetTick>
 801c902:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c904:	e00a      	b.n	801c91c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c906:	f7fc fc45 	bl	8019194 <HAL_GetTick>
 801c90a:	4602      	mov	r2, r0
 801c90c:	693b      	ldr	r3, [r7, #16]
 801c90e:	1ad3      	subs	r3, r2, r3
 801c910:	2b02      	cmp	r3, #2
 801c912:	d903      	bls.n	801c91c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801c914:	2303      	movs	r3, #3
 801c916:	e166      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
 801c918:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801c91c:	4b92      	ldr	r3, [pc, #584]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c91e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c920:	f003 0302 	and.w	r3, r3, #2
 801c924:	2b00      	cmp	r3, #0
 801c926:	d1ee      	bne.n	801c906 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	681b      	ldr	r3, [r3, #0]
 801c92c:	f003 0304 	and.w	r3, r3, #4
 801c930:	2b00      	cmp	r3, #0
 801c932:	f000 80a4 	beq.w	801ca7e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 801c936:	4b8c      	ldr	r3, [pc, #560]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c93a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d10d      	bne.n	801c95e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801c942:	4b89      	ldr	r3, [pc, #548]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c946:	4a88      	ldr	r2, [pc, #544]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c94c:	6413      	str	r3, [r2, #64]	; 0x40
 801c94e:	4b86      	ldr	r3, [pc, #536]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801c956:	60bb      	str	r3, [r7, #8]
 801c958:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801c95a:	2301      	movs	r3, #1
 801c95c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c95e:	4b83      	ldr	r3, [pc, #524]	; (801cb6c <HAL_RCC_OscConfig+0x4d4>)
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c966:	2b00      	cmp	r3, #0
 801c968:	d118      	bne.n	801c99c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 801c96a:	4b80      	ldr	r3, [pc, #512]	; (801cb6c <HAL_RCC_OscConfig+0x4d4>)
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	4a7f      	ldr	r2, [pc, #508]	; (801cb6c <HAL_RCC_OscConfig+0x4d4>)
 801c970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c974:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 801c976:	f7fc fc0d 	bl	8019194 <HAL_GetTick>
 801c97a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c97c:	e008      	b.n	801c990 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c97e:	f7fc fc09 	bl	8019194 <HAL_GetTick>
 801c982:	4602      	mov	r2, r0
 801c984:	693b      	ldr	r3, [r7, #16]
 801c986:	1ad3      	subs	r3, r2, r3
 801c988:	2b64      	cmp	r3, #100	; 0x64
 801c98a:	d901      	bls.n	801c990 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 801c98c:	2303      	movs	r3, #3
 801c98e:	e12a      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 801c990:	4b76      	ldr	r3, [pc, #472]	; (801cb6c <HAL_RCC_OscConfig+0x4d4>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c998:	2b00      	cmp	r3, #0
 801c99a:	d0f0      	beq.n	801c97e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c99c:	687b      	ldr	r3, [r7, #4]
 801c99e:	689b      	ldr	r3, [r3, #8]
 801c9a0:	2b01      	cmp	r3, #1
 801c9a2:	d106      	bne.n	801c9b2 <HAL_RCC_OscConfig+0x31a>
 801c9a4:	4b70      	ldr	r3, [pc, #448]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9a8:	4a6f      	ldr	r2, [pc, #444]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9aa:	f043 0301 	orr.w	r3, r3, #1
 801c9ae:	6713      	str	r3, [r2, #112]	; 0x70
 801c9b0:	e02d      	b.n	801ca0e <HAL_RCC_OscConfig+0x376>
 801c9b2:	687b      	ldr	r3, [r7, #4]
 801c9b4:	689b      	ldr	r3, [r3, #8]
 801c9b6:	2b00      	cmp	r3, #0
 801c9b8:	d10c      	bne.n	801c9d4 <HAL_RCC_OscConfig+0x33c>
 801c9ba:	4b6b      	ldr	r3, [pc, #428]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9be:	4a6a      	ldr	r2, [pc, #424]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9c0:	f023 0301 	bic.w	r3, r3, #1
 801c9c4:	6713      	str	r3, [r2, #112]	; 0x70
 801c9c6:	4b68      	ldr	r3, [pc, #416]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9ca:	4a67      	ldr	r2, [pc, #412]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9cc:	f023 0304 	bic.w	r3, r3, #4
 801c9d0:	6713      	str	r3, [r2, #112]	; 0x70
 801c9d2:	e01c      	b.n	801ca0e <HAL_RCC_OscConfig+0x376>
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	689b      	ldr	r3, [r3, #8]
 801c9d8:	2b05      	cmp	r3, #5
 801c9da:	d10c      	bne.n	801c9f6 <HAL_RCC_OscConfig+0x35e>
 801c9dc:	4b62      	ldr	r3, [pc, #392]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9e0:	4a61      	ldr	r2, [pc, #388]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9e2:	f043 0304 	orr.w	r3, r3, #4
 801c9e6:	6713      	str	r3, [r2, #112]	; 0x70
 801c9e8:	4b5f      	ldr	r3, [pc, #380]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9ec:	4a5e      	ldr	r2, [pc, #376]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9ee:	f043 0301 	orr.w	r3, r3, #1
 801c9f2:	6713      	str	r3, [r2, #112]	; 0x70
 801c9f4:	e00b      	b.n	801ca0e <HAL_RCC_OscConfig+0x376>
 801c9f6:	4b5c      	ldr	r3, [pc, #368]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c9fa:	4a5b      	ldr	r2, [pc, #364]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801c9fc:	f023 0301 	bic.w	r3, r3, #1
 801ca00:	6713      	str	r3, [r2, #112]	; 0x70
 801ca02:	4b59      	ldr	r3, [pc, #356]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca06:	4a58      	ldr	r2, [pc, #352]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca08:	f023 0304 	bic.w	r3, r3, #4
 801ca0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801ca0e:	687b      	ldr	r3, [r7, #4]
 801ca10:	689b      	ldr	r3, [r3, #8]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d015      	beq.n	801ca42 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca16:	f7fc fbbd 	bl	8019194 <HAL_GetTick>
 801ca1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801ca1c:	e00a      	b.n	801ca34 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ca1e:	f7fc fbb9 	bl	8019194 <HAL_GetTick>
 801ca22:	4602      	mov	r2, r0
 801ca24:	693b      	ldr	r3, [r7, #16]
 801ca26:	1ad3      	subs	r3, r2, r3
 801ca28:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca2c:	4293      	cmp	r3, r2
 801ca2e:	d901      	bls.n	801ca34 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 801ca30:	2303      	movs	r3, #3
 801ca32:	e0d8      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801ca34:	4b4c      	ldr	r3, [pc, #304]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca38:	f003 0302 	and.w	r3, r3, #2
 801ca3c:	2b00      	cmp	r3, #0
 801ca3e:	d0ee      	beq.n	801ca1e <HAL_RCC_OscConfig+0x386>
 801ca40:	e014      	b.n	801ca6c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ca42:	f7fc fba7 	bl	8019194 <HAL_GetTick>
 801ca46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801ca48:	e00a      	b.n	801ca60 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ca4a:	f7fc fba3 	bl	8019194 <HAL_GetTick>
 801ca4e:	4602      	mov	r2, r0
 801ca50:	693b      	ldr	r3, [r7, #16]
 801ca52:	1ad3      	subs	r3, r2, r3
 801ca54:	f241 3288 	movw	r2, #5000	; 0x1388
 801ca58:	4293      	cmp	r3, r2
 801ca5a:	d901      	bls.n	801ca60 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 801ca5c:	2303      	movs	r3, #3
 801ca5e:	e0c2      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801ca60:	4b41      	ldr	r3, [pc, #260]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ca64:	f003 0302 	and.w	r3, r3, #2
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d1ee      	bne.n	801ca4a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801ca6c:	7dfb      	ldrb	r3, [r7, #23]
 801ca6e:	2b01      	cmp	r3, #1
 801ca70:	d105      	bne.n	801ca7e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801ca72:	4b3d      	ldr	r3, [pc, #244]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ca76:	4a3c      	ldr	r2, [pc, #240]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801ca7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801ca7e:	687b      	ldr	r3, [r7, #4]
 801ca80:	699b      	ldr	r3, [r3, #24]
 801ca82:	2b00      	cmp	r3, #0
 801ca84:	f000 80ae 	beq.w	801cbe4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 801ca88:	4b37      	ldr	r3, [pc, #220]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca8a:	689b      	ldr	r3, [r3, #8]
 801ca8c:	f003 030c 	and.w	r3, r3, #12
 801ca90:	2b08      	cmp	r3, #8
 801ca92:	d06d      	beq.n	801cb70 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	699b      	ldr	r3, [r3, #24]
 801ca98:	2b02      	cmp	r3, #2
 801ca9a:	d14b      	bne.n	801cb34 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801ca9c:	4b32      	ldr	r3, [pc, #200]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801ca9e:	681b      	ldr	r3, [r3, #0]
 801caa0:	4a31      	ldr	r2, [pc, #196]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801caa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801caa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801caa8:	f7fc fb74 	bl	8019194 <HAL_GetTick>
 801caac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801caae:	e008      	b.n	801cac2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cab0:	f7fc fb70 	bl	8019194 <HAL_GetTick>
 801cab4:	4602      	mov	r2, r0
 801cab6:	693b      	ldr	r3, [r7, #16]
 801cab8:	1ad3      	subs	r3, r2, r3
 801caba:	2b02      	cmp	r3, #2
 801cabc:	d901      	bls.n	801cac2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 801cabe:	2303      	movs	r3, #3
 801cac0:	e091      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cac2:	4b29      	ldr	r3, [pc, #164]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cac4:	681b      	ldr	r3, [r3, #0]
 801cac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d1f0      	bne.n	801cab0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	69da      	ldr	r2, [r3, #28]
 801cad2:	687b      	ldr	r3, [r7, #4]
 801cad4:	6a1b      	ldr	r3, [r3, #32]
 801cad6:	431a      	orrs	r2, r3
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cadc:	019b      	lsls	r3, r3, #6
 801cade:	431a      	orrs	r2, r3
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cae4:	085b      	lsrs	r3, r3, #1
 801cae6:	3b01      	subs	r3, #1
 801cae8:	041b      	lsls	r3, r3, #16
 801caea:	431a      	orrs	r2, r3
 801caec:	687b      	ldr	r3, [r7, #4]
 801caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801caf0:	061b      	lsls	r3, r3, #24
 801caf2:	431a      	orrs	r2, r3
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801caf8:	071b      	lsls	r3, r3, #28
 801cafa:	491b      	ldr	r1, [pc, #108]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cafc:	4313      	orrs	r3, r2
 801cafe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801cb00:	4b19      	ldr	r3, [pc, #100]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb02:	681b      	ldr	r3, [r3, #0]
 801cb04:	4a18      	ldr	r2, [pc, #96]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801cb0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb0c:	f7fc fb42 	bl	8019194 <HAL_GetTick>
 801cb10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801cb12:	e008      	b.n	801cb26 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb14:	f7fc fb3e 	bl	8019194 <HAL_GetTick>
 801cb18:	4602      	mov	r2, r0
 801cb1a:	693b      	ldr	r3, [r7, #16]
 801cb1c:	1ad3      	subs	r3, r2, r3
 801cb1e:	2b02      	cmp	r3, #2
 801cb20:	d901      	bls.n	801cb26 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801cb22:	2303      	movs	r3, #3
 801cb24:	e05f      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801cb26:	4b10      	ldr	r3, [pc, #64]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d0f0      	beq.n	801cb14 <HAL_RCC_OscConfig+0x47c>
 801cb32:	e057      	b.n	801cbe4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801cb34:	4b0c      	ldr	r3, [pc, #48]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb36:	681b      	ldr	r3, [r3, #0]
 801cb38:	4a0b      	ldr	r2, [pc, #44]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801cb3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801cb40:	f7fc fb28 	bl	8019194 <HAL_GetTick>
 801cb44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cb46:	e008      	b.n	801cb5a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801cb48:	f7fc fb24 	bl	8019194 <HAL_GetTick>
 801cb4c:	4602      	mov	r2, r0
 801cb4e:	693b      	ldr	r3, [r7, #16]
 801cb50:	1ad3      	subs	r3, r2, r3
 801cb52:	2b02      	cmp	r3, #2
 801cb54:	d901      	bls.n	801cb5a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 801cb56:	2303      	movs	r3, #3
 801cb58:	e045      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801cb5a:	4b03      	ldr	r3, [pc, #12]	; (801cb68 <HAL_RCC_OscConfig+0x4d0>)
 801cb5c:	681b      	ldr	r3, [r3, #0]
 801cb5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cb62:	2b00      	cmp	r3, #0
 801cb64:	d1f0      	bne.n	801cb48 <HAL_RCC_OscConfig+0x4b0>
 801cb66:	e03d      	b.n	801cbe4 <HAL_RCC_OscConfig+0x54c>
 801cb68:	40023800 	.word	0x40023800
 801cb6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 801cb70:	4b1f      	ldr	r3, [pc, #124]	; (801cbf0 <HAL_RCC_OscConfig+0x558>)
 801cb72:	685b      	ldr	r3, [r3, #4]
 801cb74:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cb76:	687b      	ldr	r3, [r7, #4]
 801cb78:	699b      	ldr	r3, [r3, #24]
 801cb7a:	2b01      	cmp	r3, #1
 801cb7c:	d030      	beq.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cb7e:	68fb      	ldr	r3, [r7, #12]
 801cb80:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801cb88:	429a      	cmp	r2, r3
 801cb8a:	d129      	bne.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801cb8c:	68fb      	ldr	r3, [r7, #12]
 801cb8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801cb92:	687b      	ldr	r3, [r7, #4]
 801cb94:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801cb96:	429a      	cmp	r2, r3
 801cb98:	d122      	bne.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801cb9a:	68fa      	ldr	r2, [r7, #12]
 801cb9c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 801cba0:	4013      	ands	r3, r2
 801cba2:	687a      	ldr	r2, [r7, #4]
 801cba4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801cba6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	d119      	bne.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801cbac:	68fb      	ldr	r3, [r7, #12]
 801cbae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801cbb2:	687b      	ldr	r3, [r7, #4]
 801cbb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cbb6:	085b      	lsrs	r3, r3, #1
 801cbb8:	3b01      	subs	r3, #1
 801cbba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	d10f      	bne.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801cbc0:	68fb      	ldr	r3, [r7, #12]
 801cbc2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801cbc6:	687b      	ldr	r3, [r7, #4]
 801cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801cbcc:	429a      	cmp	r2, r3
 801cbce:	d107      	bne.n	801cbe0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801cbd0:	68fb      	ldr	r3, [r7, #12]
 801cbd2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801cbd6:	687b      	ldr	r3, [r7, #4]
 801cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cbda:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801cbdc:	429a      	cmp	r2, r3
 801cbde:	d001      	beq.n	801cbe4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 801cbe0:	2301      	movs	r3, #1
 801cbe2:	e000      	b.n	801cbe6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801cbe4:	2300      	movs	r3, #0
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3718      	adds	r7, #24
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
 801cbee:	bf00      	nop
 801cbf0:	40023800 	.word	0x40023800

0801cbf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	b084      	sub	sp, #16
 801cbf8:	af00      	add	r7, sp, #0
 801cbfa:	6078      	str	r0, [r7, #4]
 801cbfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 801cbfe:	2300      	movs	r3, #0
 801cc00:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d101      	bne.n	801cc0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801cc08:	2301      	movs	r3, #1
 801cc0a:	e0d0      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801cc0c:	4b6a      	ldr	r3, [pc, #424]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cc0e:	681b      	ldr	r3, [r3, #0]
 801cc10:	f003 030f 	and.w	r3, r3, #15
 801cc14:	683a      	ldr	r2, [r7, #0]
 801cc16:	429a      	cmp	r2, r3
 801cc18:	d910      	bls.n	801cc3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cc1a:	4b67      	ldr	r3, [pc, #412]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cc1c:	681b      	ldr	r3, [r3, #0]
 801cc1e:	f023 020f 	bic.w	r2, r3, #15
 801cc22:	4965      	ldr	r1, [pc, #404]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	4313      	orrs	r3, r2
 801cc28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cc2a:	4b63      	ldr	r3, [pc, #396]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cc2c:	681b      	ldr	r3, [r3, #0]
 801cc2e:	f003 030f 	and.w	r3, r3, #15
 801cc32:	683a      	ldr	r2, [r7, #0]
 801cc34:	429a      	cmp	r2, r3
 801cc36:	d001      	beq.n	801cc3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 801cc38:	2301      	movs	r3, #1
 801cc3a:	e0b8      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801cc3c:	687b      	ldr	r3, [r7, #4]
 801cc3e:	681b      	ldr	r3, [r3, #0]
 801cc40:	f003 0302 	and.w	r3, r3, #2
 801cc44:	2b00      	cmp	r3, #0
 801cc46:	d020      	beq.n	801cc8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cc48:	687b      	ldr	r3, [r7, #4]
 801cc4a:	681b      	ldr	r3, [r3, #0]
 801cc4c:	f003 0304 	and.w	r3, r3, #4
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	d005      	beq.n	801cc60 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801cc54:	4b59      	ldr	r3, [pc, #356]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc56:	689b      	ldr	r3, [r3, #8]
 801cc58:	4a58      	ldr	r2, [pc, #352]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801cc5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cc60:	687b      	ldr	r3, [r7, #4]
 801cc62:	681b      	ldr	r3, [r3, #0]
 801cc64:	f003 0308 	and.w	r3, r3, #8
 801cc68:	2b00      	cmp	r3, #0
 801cc6a:	d005      	beq.n	801cc78 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801cc6c:	4b53      	ldr	r3, [pc, #332]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc6e:	689b      	ldr	r3, [r3, #8]
 801cc70:	4a52      	ldr	r2, [pc, #328]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 801cc76:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801cc78:	4b50      	ldr	r3, [pc, #320]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc7a:	689b      	ldr	r3, [r3, #8]
 801cc7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	689b      	ldr	r3, [r3, #8]
 801cc84:	494d      	ldr	r1, [pc, #308]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cc86:	4313      	orrs	r3, r2
 801cc88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	f003 0301 	and.w	r3, r3, #1
 801cc92:	2b00      	cmp	r3, #0
 801cc94:	d040      	beq.n	801cd18 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	685b      	ldr	r3, [r3, #4]
 801cc9a:	2b01      	cmp	r3, #1
 801cc9c:	d107      	bne.n	801ccae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801cc9e:	4b47      	ldr	r3, [pc, #284]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d115      	bne.n	801ccd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801ccaa:	2301      	movs	r3, #1
 801ccac:	e07f      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ccae:	687b      	ldr	r3, [r7, #4]
 801ccb0:	685b      	ldr	r3, [r3, #4]
 801ccb2:	2b02      	cmp	r3, #2
 801ccb4:	d107      	bne.n	801ccc6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801ccb6:	4b41      	ldr	r3, [pc, #260]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801ccb8:	681b      	ldr	r3, [r3, #0]
 801ccba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801ccbe:	2b00      	cmp	r3, #0
 801ccc0:	d109      	bne.n	801ccd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801ccc2:	2301      	movs	r3, #1
 801ccc4:	e073      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801ccc6:	4b3d      	ldr	r3, [pc, #244]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801ccc8:	681b      	ldr	r3, [r3, #0]
 801ccca:	f003 0302 	and.w	r3, r3, #2
 801ccce:	2b00      	cmp	r3, #0
 801ccd0:	d101      	bne.n	801ccd6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801ccd2:	2301      	movs	r3, #1
 801ccd4:	e06b      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801ccd6:	4b39      	ldr	r3, [pc, #228]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801ccd8:	689b      	ldr	r3, [r3, #8]
 801ccda:	f023 0203 	bic.w	r2, r3, #3
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	685b      	ldr	r3, [r3, #4]
 801cce2:	4936      	ldr	r1, [pc, #216]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cce4:	4313      	orrs	r3, r2
 801cce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801cce8:	f7fc fa54 	bl	8019194 <HAL_GetTick>
 801ccec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801ccee:	e00a      	b.n	801cd06 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801ccf0:	f7fc fa50 	bl	8019194 <HAL_GetTick>
 801ccf4:	4602      	mov	r2, r0
 801ccf6:	68fb      	ldr	r3, [r7, #12]
 801ccf8:	1ad3      	subs	r3, r2, r3
 801ccfa:	f241 3288 	movw	r2, #5000	; 0x1388
 801ccfe:	4293      	cmp	r3, r2
 801cd00:	d901      	bls.n	801cd06 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801cd02:	2303      	movs	r3, #3
 801cd04:	e053      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801cd06:	4b2d      	ldr	r3, [pc, #180]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd08:	689b      	ldr	r3, [r3, #8]
 801cd0a:	f003 020c 	and.w	r2, r3, #12
 801cd0e:	687b      	ldr	r3, [r7, #4]
 801cd10:	685b      	ldr	r3, [r3, #4]
 801cd12:	009b      	lsls	r3, r3, #2
 801cd14:	429a      	cmp	r2, r3
 801cd16:	d1eb      	bne.n	801ccf0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801cd18:	4b27      	ldr	r3, [pc, #156]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cd1a:	681b      	ldr	r3, [r3, #0]
 801cd1c:	f003 030f 	and.w	r3, r3, #15
 801cd20:	683a      	ldr	r2, [r7, #0]
 801cd22:	429a      	cmp	r2, r3
 801cd24:	d210      	bcs.n	801cd48 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801cd26:	4b24      	ldr	r3, [pc, #144]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cd28:	681b      	ldr	r3, [r3, #0]
 801cd2a:	f023 020f 	bic.w	r2, r3, #15
 801cd2e:	4922      	ldr	r1, [pc, #136]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cd30:	683b      	ldr	r3, [r7, #0]
 801cd32:	4313      	orrs	r3, r2
 801cd34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801cd36:	4b20      	ldr	r3, [pc, #128]	; (801cdb8 <HAL_RCC_ClockConfig+0x1c4>)
 801cd38:	681b      	ldr	r3, [r3, #0]
 801cd3a:	f003 030f 	and.w	r3, r3, #15
 801cd3e:	683a      	ldr	r2, [r7, #0]
 801cd40:	429a      	cmp	r2, r3
 801cd42:	d001      	beq.n	801cd48 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 801cd44:	2301      	movs	r3, #1
 801cd46:	e032      	b.n	801cdae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801cd48:	687b      	ldr	r3, [r7, #4]
 801cd4a:	681b      	ldr	r3, [r3, #0]
 801cd4c:	f003 0304 	and.w	r3, r3, #4
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	d008      	beq.n	801cd66 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801cd54:	4b19      	ldr	r3, [pc, #100]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd56:	689b      	ldr	r3, [r3, #8]
 801cd58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	68db      	ldr	r3, [r3, #12]
 801cd60:	4916      	ldr	r1, [pc, #88]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd62:	4313      	orrs	r3, r2
 801cd64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801cd66:	687b      	ldr	r3, [r7, #4]
 801cd68:	681b      	ldr	r3, [r3, #0]
 801cd6a:	f003 0308 	and.w	r3, r3, #8
 801cd6e:	2b00      	cmp	r3, #0
 801cd70:	d009      	beq.n	801cd86 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801cd72:	4b12      	ldr	r3, [pc, #72]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd74:	689b      	ldr	r3, [r3, #8]
 801cd76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	691b      	ldr	r3, [r3, #16]
 801cd7e:	00db      	lsls	r3, r3, #3
 801cd80:	490e      	ldr	r1, [pc, #56]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd82:	4313      	orrs	r3, r2
 801cd84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 801cd86:	f000 f821 	bl	801cdcc <HAL_RCC_GetSysClockFreq>
 801cd8a:	4602      	mov	r2, r0
 801cd8c:	4b0b      	ldr	r3, [pc, #44]	; (801cdbc <HAL_RCC_ClockConfig+0x1c8>)
 801cd8e:	689b      	ldr	r3, [r3, #8]
 801cd90:	091b      	lsrs	r3, r3, #4
 801cd92:	f003 030f 	and.w	r3, r3, #15
 801cd96:	490a      	ldr	r1, [pc, #40]	; (801cdc0 <HAL_RCC_ClockConfig+0x1cc>)
 801cd98:	5ccb      	ldrb	r3, [r1, r3]
 801cd9a:	fa22 f303 	lsr.w	r3, r2, r3
 801cd9e:	4a09      	ldr	r2, [pc, #36]	; (801cdc4 <HAL_RCC_ClockConfig+0x1d0>)
 801cda0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801cda2:	4b09      	ldr	r3, [pc, #36]	; (801cdc8 <HAL_RCC_ClockConfig+0x1d4>)
 801cda4:	681b      	ldr	r3, [r3, #0]
 801cda6:	4618      	mov	r0, r3
 801cda8:	f7fc f9b0 	bl	801910c <HAL_InitTick>

  return HAL_OK;
 801cdac:	2300      	movs	r3, #0
}
 801cdae:	4618      	mov	r0, r3
 801cdb0:	3710      	adds	r7, #16
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bd80      	pop	{r7, pc}
 801cdb6:	bf00      	nop
 801cdb8:	40023c00 	.word	0x40023c00
 801cdbc:	40023800 	.word	0x40023800
 801cdc0:	0802d15c 	.word	0x0802d15c
 801cdc4:	2000031c 	.word	0x2000031c
 801cdc8:	20000320 	.word	0x20000320

0801cdcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801cdcc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801cdd0:	b090      	sub	sp, #64	; 0x40
 801cdd2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	637b      	str	r3, [r7, #52]	; 0x34
 801cdd8:	2300      	movs	r3, #0
 801cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cddc:	2300      	movs	r3, #0
 801cdde:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 801cde0:	2300      	movs	r3, #0
 801cde2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801cde4:	4b59      	ldr	r3, [pc, #356]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801cde6:	689b      	ldr	r3, [r3, #8]
 801cde8:	f003 030c 	and.w	r3, r3, #12
 801cdec:	2b08      	cmp	r3, #8
 801cdee:	d00d      	beq.n	801ce0c <HAL_RCC_GetSysClockFreq+0x40>
 801cdf0:	2b08      	cmp	r3, #8
 801cdf2:	f200 80a1 	bhi.w	801cf38 <HAL_RCC_GetSysClockFreq+0x16c>
 801cdf6:	2b00      	cmp	r3, #0
 801cdf8:	d002      	beq.n	801ce00 <HAL_RCC_GetSysClockFreq+0x34>
 801cdfa:	2b04      	cmp	r3, #4
 801cdfc:	d003      	beq.n	801ce06 <HAL_RCC_GetSysClockFreq+0x3a>
 801cdfe:	e09b      	b.n	801cf38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 801ce00:	4b53      	ldr	r3, [pc, #332]	; (801cf50 <HAL_RCC_GetSysClockFreq+0x184>)
 801ce02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801ce04:	e09b      	b.n	801cf3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801ce06:	4b53      	ldr	r3, [pc, #332]	; (801cf54 <HAL_RCC_GetSysClockFreq+0x188>)
 801ce08:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801ce0a:	e098      	b.n	801cf3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 801ce0c:	4b4f      	ldr	r3, [pc, #316]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801ce0e:	685b      	ldr	r3, [r3, #4]
 801ce10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ce14:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801ce16:	4b4d      	ldr	r3, [pc, #308]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801ce18:	685b      	ldr	r3, [r3, #4]
 801ce1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ce1e:	2b00      	cmp	r3, #0
 801ce20:	d028      	beq.n	801ce74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ce22:	4b4a      	ldr	r3, [pc, #296]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801ce24:	685b      	ldr	r3, [r3, #4]
 801ce26:	099b      	lsrs	r3, r3, #6
 801ce28:	2200      	movs	r2, #0
 801ce2a:	623b      	str	r3, [r7, #32]
 801ce2c:	627a      	str	r2, [r7, #36]	; 0x24
 801ce2e:	6a3b      	ldr	r3, [r7, #32]
 801ce30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 801ce34:	2100      	movs	r1, #0
 801ce36:	4b47      	ldr	r3, [pc, #284]	; (801cf54 <HAL_RCC_GetSysClockFreq+0x188>)
 801ce38:	fb03 f201 	mul.w	r2, r3, r1
 801ce3c:	2300      	movs	r3, #0
 801ce3e:	fb00 f303 	mul.w	r3, r0, r3
 801ce42:	4413      	add	r3, r2
 801ce44:	4a43      	ldr	r2, [pc, #268]	; (801cf54 <HAL_RCC_GetSysClockFreq+0x188>)
 801ce46:	fba0 1202 	umull	r1, r2, r0, r2
 801ce4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801ce4c:	460a      	mov	r2, r1
 801ce4e:	62ba      	str	r2, [r7, #40]	; 0x28
 801ce50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ce52:	4413      	add	r3, r2
 801ce54:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ce58:	2200      	movs	r2, #0
 801ce5a:	61bb      	str	r3, [r7, #24]
 801ce5c:	61fa      	str	r2, [r7, #28]
 801ce5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801ce62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 801ce66:	f7e3 fa53 	bl	8000310 <__aeabi_uldivmod>
 801ce6a:	4602      	mov	r2, r0
 801ce6c:	460b      	mov	r3, r1
 801ce6e:	4613      	mov	r3, r2
 801ce70:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ce72:	e053      	b.n	801cf1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801ce74:	4b35      	ldr	r3, [pc, #212]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801ce76:	685b      	ldr	r3, [r3, #4]
 801ce78:	099b      	lsrs	r3, r3, #6
 801ce7a:	2200      	movs	r2, #0
 801ce7c:	613b      	str	r3, [r7, #16]
 801ce7e:	617a      	str	r2, [r7, #20]
 801ce80:	693b      	ldr	r3, [r7, #16]
 801ce82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 801ce86:	f04f 0b00 	mov.w	fp, #0
 801ce8a:	4652      	mov	r2, sl
 801ce8c:	465b      	mov	r3, fp
 801ce8e:	f04f 0000 	mov.w	r0, #0
 801ce92:	f04f 0100 	mov.w	r1, #0
 801ce96:	0159      	lsls	r1, r3, #5
 801ce98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801ce9c:	0150      	lsls	r0, r2, #5
 801ce9e:	4602      	mov	r2, r0
 801cea0:	460b      	mov	r3, r1
 801cea2:	ebb2 080a 	subs.w	r8, r2, sl
 801cea6:	eb63 090b 	sbc.w	r9, r3, fp
 801ceaa:	f04f 0200 	mov.w	r2, #0
 801ceae:	f04f 0300 	mov.w	r3, #0
 801ceb2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801ceb6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 801ceba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 801cebe:	ebb2 0408 	subs.w	r4, r2, r8
 801cec2:	eb63 0509 	sbc.w	r5, r3, r9
 801cec6:	f04f 0200 	mov.w	r2, #0
 801ceca:	f04f 0300 	mov.w	r3, #0
 801cece:	00eb      	lsls	r3, r5, #3
 801ced0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801ced4:	00e2      	lsls	r2, r4, #3
 801ced6:	4614      	mov	r4, r2
 801ced8:	461d      	mov	r5, r3
 801ceda:	eb14 030a 	adds.w	r3, r4, sl
 801cede:	603b      	str	r3, [r7, #0]
 801cee0:	eb45 030b 	adc.w	r3, r5, fp
 801cee4:	607b      	str	r3, [r7, #4]
 801cee6:	f04f 0200 	mov.w	r2, #0
 801ceea:	f04f 0300 	mov.w	r3, #0
 801ceee:	e9d7 4500 	ldrd	r4, r5, [r7]
 801cef2:	4629      	mov	r1, r5
 801cef4:	028b      	lsls	r3, r1, #10
 801cef6:	4621      	mov	r1, r4
 801cef8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 801cefc:	4621      	mov	r1, r4
 801cefe:	028a      	lsls	r2, r1, #10
 801cf00:	4610      	mov	r0, r2
 801cf02:	4619      	mov	r1, r3
 801cf04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801cf06:	2200      	movs	r2, #0
 801cf08:	60bb      	str	r3, [r7, #8]
 801cf0a:	60fa      	str	r2, [r7, #12]
 801cf0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801cf10:	f7e3 f9fe 	bl	8000310 <__aeabi_uldivmod>
 801cf14:	4602      	mov	r2, r0
 801cf16:	460b      	mov	r3, r1
 801cf18:	4613      	mov	r3, r2
 801cf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 801cf1c:	4b0b      	ldr	r3, [pc, #44]	; (801cf4c <HAL_RCC_GetSysClockFreq+0x180>)
 801cf1e:	685b      	ldr	r3, [r3, #4]
 801cf20:	0c1b      	lsrs	r3, r3, #16
 801cf22:	f003 0303 	and.w	r3, r3, #3
 801cf26:	3301      	adds	r3, #1
 801cf28:	005b      	lsls	r3, r3, #1
 801cf2a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 801cf2c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801cf2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cf30:	fbb2 f3f3 	udiv	r3, r2, r3
 801cf34:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801cf36:	e002      	b.n	801cf3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 801cf38:	4b05      	ldr	r3, [pc, #20]	; (801cf50 <HAL_RCC_GetSysClockFreq+0x184>)
 801cf3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801cf3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 801cf3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801cf40:	4618      	mov	r0, r3
 801cf42:	3740      	adds	r7, #64	; 0x40
 801cf44:	46bd      	mov	sp, r7
 801cf46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cf4a:	bf00      	nop
 801cf4c:	40023800 	.word	0x40023800
 801cf50:	00f42400 	.word	0x00f42400
 801cf54:	00b71b00 	.word	0x00b71b00

0801cf58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cf58:	b480      	push	{r7}
 801cf5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801cf5c:	4b03      	ldr	r3, [pc, #12]	; (801cf6c <HAL_RCC_GetHCLKFreq+0x14>)
 801cf5e:	681b      	ldr	r3, [r3, #0]
}
 801cf60:	4618      	mov	r0, r3
 801cf62:	46bd      	mov	sp, r7
 801cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf68:	4770      	bx	lr
 801cf6a:	bf00      	nop
 801cf6c:	2000031c 	.word	0x2000031c

0801cf70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cf70:	b580      	push	{r7, lr}
 801cf72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 801cf74:	f7ff fff0 	bl	801cf58 <HAL_RCC_GetHCLKFreq>
 801cf78:	4602      	mov	r2, r0
 801cf7a:	4b05      	ldr	r3, [pc, #20]	; (801cf90 <HAL_RCC_GetPCLK1Freq+0x20>)
 801cf7c:	689b      	ldr	r3, [r3, #8]
 801cf7e:	0a9b      	lsrs	r3, r3, #10
 801cf80:	f003 0307 	and.w	r3, r3, #7
 801cf84:	4903      	ldr	r1, [pc, #12]	; (801cf94 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cf86:	5ccb      	ldrb	r3, [r1, r3]
 801cf88:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cf8c:	4618      	mov	r0, r3
 801cf8e:	bd80      	pop	{r7, pc}
 801cf90:	40023800 	.word	0x40023800
 801cf94:	0802d16c 	.word	0x0802d16c

0801cf98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801cf98:	b580      	push	{r7, lr}
 801cf9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 801cf9c:	f7ff ffdc 	bl	801cf58 <HAL_RCC_GetHCLKFreq>
 801cfa0:	4602      	mov	r2, r0
 801cfa2:	4b05      	ldr	r3, [pc, #20]	; (801cfb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 801cfa4:	689b      	ldr	r3, [r3, #8]
 801cfa6:	0b5b      	lsrs	r3, r3, #13
 801cfa8:	f003 0307 	and.w	r3, r3, #7
 801cfac:	4903      	ldr	r1, [pc, #12]	; (801cfbc <HAL_RCC_GetPCLK2Freq+0x24>)
 801cfae:	5ccb      	ldrb	r3, [r1, r3]
 801cfb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	bd80      	pop	{r7, pc}
 801cfb8:	40023800 	.word	0x40023800
 801cfbc:	0802d16c 	.word	0x0802d16c

0801cfc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b088      	sub	sp, #32
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 801cfc8:	2300      	movs	r3, #0
 801cfca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 801cfcc:	2300      	movs	r3, #0
 801cfce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 801cfd0:	2300      	movs	r3, #0
 801cfd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801cfd4:	2300      	movs	r3, #0
 801cfd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 801cfd8:	2300      	movs	r3, #0
 801cfda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 801cfdc:	687b      	ldr	r3, [r7, #4]
 801cfde:	681b      	ldr	r3, [r3, #0]
 801cfe0:	f003 0301 	and.w	r3, r3, #1
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d012      	beq.n	801d00e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 801cfe8:	4b69      	ldr	r3, [pc, #420]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cfea:	689b      	ldr	r3, [r3, #8]
 801cfec:	4a68      	ldr	r2, [pc, #416]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cfee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801cff2:	6093      	str	r3, [r2, #8]
 801cff4:	4b66      	ldr	r3, [pc, #408]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cff6:	689a      	ldr	r2, [r3, #8]
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cffc:	4964      	ldr	r1, [pc, #400]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801cffe:	4313      	orrs	r3, r2
 801d000:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801d002:	687b      	ldr	r3, [r7, #4]
 801d004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d006:	2b00      	cmp	r3, #0
 801d008:	d101      	bne.n	801d00e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 801d00a:	2301      	movs	r3, #1
 801d00c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 801d00e:	687b      	ldr	r3, [r7, #4]
 801d010:	681b      	ldr	r3, [r3, #0]
 801d012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d016:	2b00      	cmp	r3, #0
 801d018:	d017      	beq.n	801d04a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801d01a:	4b5d      	ldr	r3, [pc, #372]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d01c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d020:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d024:	687b      	ldr	r3, [r7, #4]
 801d026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d028:	4959      	ldr	r1, [pc, #356]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d02a:	4313      	orrs	r3, r2
 801d02c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d034:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d038:	d101      	bne.n	801d03e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 801d03a:	2301      	movs	r3, #1
 801d03c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801d03e:	687b      	ldr	r3, [r7, #4]
 801d040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d042:	2b00      	cmp	r3, #0
 801d044:	d101      	bne.n	801d04a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 801d046:	2301      	movs	r3, #1
 801d048:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	681b      	ldr	r3, [r3, #0]
 801d04e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801d052:	2b00      	cmp	r3, #0
 801d054:	d017      	beq.n	801d086 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 801d056:	4b4e      	ldr	r3, [pc, #312]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d05c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d064:	494a      	ldr	r1, [pc, #296]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d066:	4313      	orrs	r3, r2
 801d068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d070:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d074:	d101      	bne.n	801d07a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 801d076:	2301      	movs	r3, #1
 801d078:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 801d07a:	687b      	ldr	r3, [r7, #4]
 801d07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d07e:	2b00      	cmp	r3, #0
 801d080:	d101      	bne.n	801d086 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801d082:	2301      	movs	r3, #1
 801d084:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d086:	687b      	ldr	r3, [r7, #4]
 801d088:	681b      	ldr	r3, [r3, #0]
 801d08a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d08e:	2b00      	cmp	r3, #0
 801d090:	d001      	beq.n	801d096 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801d092:	2301      	movs	r3, #1
 801d094:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	681b      	ldr	r3, [r3, #0]
 801d09a:	f003 0320 	and.w	r3, r3, #32
 801d09e:	2b00      	cmp	r3, #0
 801d0a0:	f000 808b 	beq.w	801d1ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801d0a4:	4b3a      	ldr	r3, [pc, #232]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0a8:	4a39      	ldr	r2, [pc, #228]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d0aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d0ae:	6413      	str	r3, [r2, #64]	; 0x40
 801d0b0:	4b37      	ldr	r3, [pc, #220]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d0b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d0b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d0b8:	60bb      	str	r3, [r7, #8]
 801d0ba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801d0bc:	4b35      	ldr	r3, [pc, #212]	; (801d194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d0be:	681b      	ldr	r3, [r3, #0]
 801d0c0:	4a34      	ldr	r2, [pc, #208]	; (801d194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d0c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801d0c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d0c8:	f7fc f864 	bl	8019194 <HAL_GetTick>
 801d0cc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d0ce:	e008      	b.n	801d0e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d0d0:	f7fc f860 	bl	8019194 <HAL_GetTick>
 801d0d4:	4602      	mov	r2, r0
 801d0d6:	697b      	ldr	r3, [r7, #20]
 801d0d8:	1ad3      	subs	r3, r2, r3
 801d0da:	2b64      	cmp	r3, #100	; 0x64
 801d0dc:	d901      	bls.n	801d0e2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 801d0de:	2303      	movs	r3, #3
 801d0e0:	e38f      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801d0e2:	4b2c      	ldr	r3, [pc, #176]	; (801d194 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801d0e4:	681b      	ldr	r3, [r3, #0]
 801d0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d0f0      	beq.n	801d0d0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 801d0ee:	4b28      	ldr	r3, [pc, #160]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d0f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d0f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d0f6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 801d0f8:	693b      	ldr	r3, [r7, #16]
 801d0fa:	2b00      	cmp	r3, #0
 801d0fc:	d035      	beq.n	801d16a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d106:	693a      	ldr	r2, [r7, #16]
 801d108:	429a      	cmp	r2, r3
 801d10a:	d02e      	beq.n	801d16a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d10c:	4b20      	ldr	r3, [pc, #128]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d10e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d110:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801d114:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801d116:	4b1e      	ldr	r3, [pc, #120]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d11a:	4a1d      	ldr	r2, [pc, #116]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d11c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801d120:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801d122:	4b1b      	ldr	r3, [pc, #108]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d126:	4a1a      	ldr	r2, [pc, #104]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801d12c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801d12e:	4a18      	ldr	r2, [pc, #96]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d130:	693b      	ldr	r3, [r7, #16]
 801d132:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 801d134:	4b16      	ldr	r3, [pc, #88]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d138:	f003 0301 	and.w	r3, r3, #1
 801d13c:	2b01      	cmp	r3, #1
 801d13e:	d114      	bne.n	801d16a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d140:	f7fc f828 	bl	8019194 <HAL_GetTick>
 801d144:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d146:	e00a      	b.n	801d15e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801d148:	f7fc f824 	bl	8019194 <HAL_GetTick>
 801d14c:	4602      	mov	r2, r0
 801d14e:	697b      	ldr	r3, [r7, #20]
 801d150:	1ad3      	subs	r3, r2, r3
 801d152:	f241 3288 	movw	r2, #5000	; 0x1388
 801d156:	4293      	cmp	r3, r2
 801d158:	d901      	bls.n	801d15e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 801d15a:	2303      	movs	r3, #3
 801d15c:	e351      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801d15e:	4b0c      	ldr	r3, [pc, #48]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d162:	f003 0302 	and.w	r3, r3, #2
 801d166:	2b00      	cmp	r3, #0
 801d168:	d0ee      	beq.n	801d148 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d16e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801d172:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801d176:	d111      	bne.n	801d19c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 801d178:	4b05      	ldr	r3, [pc, #20]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d17a:	689b      	ldr	r3, [r3, #8]
 801d17c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	6b19      	ldr	r1, [r3, #48]	; 0x30
 801d184:	4b04      	ldr	r3, [pc, #16]	; (801d198 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 801d186:	400b      	ands	r3, r1
 801d188:	4901      	ldr	r1, [pc, #4]	; (801d190 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801d18a:	4313      	orrs	r3, r2
 801d18c:	608b      	str	r3, [r1, #8]
 801d18e:	e00b      	b.n	801d1a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801d190:	40023800 	.word	0x40023800
 801d194:	40007000 	.word	0x40007000
 801d198:	0ffffcff 	.word	0x0ffffcff
 801d19c:	4bac      	ldr	r3, [pc, #688]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d19e:	689b      	ldr	r3, [r3, #8]
 801d1a0:	4aab      	ldr	r2, [pc, #684]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 801d1a6:	6093      	str	r3, [r2, #8]
 801d1a8:	4ba9      	ldr	r3, [pc, #676]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801d1ac:	687b      	ldr	r3, [r7, #4]
 801d1ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d1b4:	49a6      	ldr	r1, [pc, #664]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1b6:	4313      	orrs	r3, r2
 801d1b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 801d1ba:	687b      	ldr	r3, [r7, #4]
 801d1bc:	681b      	ldr	r3, [r3, #0]
 801d1be:	f003 0310 	and.w	r3, r3, #16
 801d1c2:	2b00      	cmp	r3, #0
 801d1c4:	d010      	beq.n	801d1e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d1c6:	4ba2      	ldr	r3, [pc, #648]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d1cc:	4aa0      	ldr	r2, [pc, #640]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801d1d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 801d1d6:	4b9e      	ldr	r3, [pc, #632]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d1e0:	499b      	ldr	r1, [pc, #620]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1e2:	4313      	orrs	r3, r2
 801d1e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	681b      	ldr	r3, [r3, #0]
 801d1ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d00a      	beq.n	801d20a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 801d1f4:	4b96      	ldr	r3, [pc, #600]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d1f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d1fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d1fe:	687b      	ldr	r3, [r7, #4]
 801d200:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d202:	4993      	ldr	r1, [pc, #588]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d204:	4313      	orrs	r3, r2
 801d206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 801d20a:	687b      	ldr	r3, [r7, #4]
 801d20c:	681b      	ldr	r3, [r3, #0]
 801d20e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801d212:	2b00      	cmp	r3, #0
 801d214:	d00a      	beq.n	801d22c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801d216:	4b8e      	ldr	r3, [pc, #568]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d21c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801d220:	687b      	ldr	r3, [r7, #4]
 801d222:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d224:	498a      	ldr	r1, [pc, #552]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d226:	4313      	orrs	r3, r2
 801d228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 801d22c:	687b      	ldr	r3, [r7, #4]
 801d22e:	681b      	ldr	r3, [r3, #0]
 801d230:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d234:	2b00      	cmp	r3, #0
 801d236:	d00a      	beq.n	801d24e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801d238:	4b85      	ldr	r3, [pc, #532]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d23a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d23e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801d242:	687b      	ldr	r3, [r7, #4]
 801d244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d246:	4982      	ldr	r1, [pc, #520]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d248:	4313      	orrs	r3, r2
 801d24a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d256:	2b00      	cmp	r3, #0
 801d258:	d00a      	beq.n	801d270 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d25a:	4b7d      	ldr	r3, [pc, #500]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d25c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d260:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801d264:	687b      	ldr	r3, [r7, #4]
 801d266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d268:	4979      	ldr	r1, [pc, #484]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d26a:	4313      	orrs	r3, r2
 801d26c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801d270:	687b      	ldr	r3, [r7, #4]
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d278:	2b00      	cmp	r3, #0
 801d27a:	d00a      	beq.n	801d292 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 801d27c:	4b74      	ldr	r3, [pc, #464]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d282:	f023 0203 	bic.w	r2, r3, #3
 801d286:	687b      	ldr	r3, [r7, #4]
 801d288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d28a:	4971      	ldr	r1, [pc, #452]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d28c:	4313      	orrs	r3, r2
 801d28e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801d292:	687b      	ldr	r3, [r7, #4]
 801d294:	681b      	ldr	r3, [r3, #0]
 801d296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d00a      	beq.n	801d2b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801d29e:	4b6c      	ldr	r3, [pc, #432]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2a4:	f023 020c 	bic.w	r2, r3, #12
 801d2a8:	687b      	ldr	r3, [r7, #4]
 801d2aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801d2ac:	4968      	ldr	r1, [pc, #416]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2ae:	4313      	orrs	r3, r2
 801d2b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 801d2b4:	687b      	ldr	r3, [r7, #4]
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	d00a      	beq.n	801d2d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 801d2c0:	4b63      	ldr	r3, [pc, #396]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 801d2ca:	687b      	ldr	r3, [r7, #4]
 801d2cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2ce:	4960      	ldr	r1, [pc, #384]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2d0:	4313      	orrs	r3, r2
 801d2d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 801d2d6:	687b      	ldr	r3, [r7, #4]
 801d2d8:	681b      	ldr	r3, [r3, #0]
 801d2da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d00a      	beq.n	801d2f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801d2e2:	4b5b      	ldr	r3, [pc, #364]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d2e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d2f0:	4957      	ldr	r1, [pc, #348]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d2f2:	4313      	orrs	r3, r2
 801d2f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 801d2f8:	687b      	ldr	r3, [r7, #4]
 801d2fa:	681b      	ldr	r3, [r3, #0]
 801d2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801d300:	2b00      	cmp	r3, #0
 801d302:	d00a      	beq.n	801d31a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801d304:	4b52      	ldr	r3, [pc, #328]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d30a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801d30e:	687b      	ldr	r3, [r7, #4]
 801d310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d312:	494f      	ldr	r1, [pc, #316]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d314:	4313      	orrs	r3, r2
 801d316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801d322:	2b00      	cmp	r3, #0
 801d324:	d00a      	beq.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 801d326:	4b4a      	ldr	r3, [pc, #296]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d32c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801d330:	687b      	ldr	r3, [r7, #4]
 801d332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d334:	4946      	ldr	r1, [pc, #280]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d336:	4313      	orrs	r3, r2
 801d338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	681b      	ldr	r3, [r3, #0]
 801d340:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801d344:	2b00      	cmp	r3, #0
 801d346:	d00a      	beq.n	801d35e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 801d348:	4b41      	ldr	r3, [pc, #260]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d34e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d356:	493e      	ldr	r1, [pc, #248]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d358:	4313      	orrs	r3, r2
 801d35a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	681b      	ldr	r3, [r3, #0]
 801d362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d366:	2b00      	cmp	r3, #0
 801d368:	d00a      	beq.n	801d380 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 801d36a:	4b39      	ldr	r3, [pc, #228]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d36c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d370:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801d374:	687b      	ldr	r3, [r7, #4]
 801d376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d378:	4935      	ldr	r1, [pc, #212]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d37a:	4313      	orrs	r3, r2
 801d37c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d380:	687b      	ldr	r3, [r7, #4]
 801d382:	681b      	ldr	r3, [r3, #0]
 801d384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801d388:	2b00      	cmp	r3, #0
 801d38a:	d00a      	beq.n	801d3a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d38c:	4b30      	ldr	r3, [pc, #192]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d38e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d392:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801d396:	687b      	ldr	r3, [r7, #4]
 801d398:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d39a:	492d      	ldr	r1, [pc, #180]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d39c:	4313      	orrs	r3, r2
 801d39e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	681b      	ldr	r3, [r3, #0]
 801d3a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d011      	beq.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801d3ae:	4b28      	ldr	r3, [pc, #160]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d3b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d3b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 801d3b8:	687b      	ldr	r3, [r7, #4]
 801d3ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3bc:	4924      	ldr	r1, [pc, #144]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d3be:	4313      	orrs	r3, r2
 801d3c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 801d3c4:	687b      	ldr	r3, [r7, #4]
 801d3c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d3c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d3cc:	d101      	bne.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 801d3ce:	2301      	movs	r3, #1
 801d3d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	681b      	ldr	r3, [r3, #0]
 801d3d6:	f003 0308 	and.w	r3, r3, #8
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d001      	beq.n	801d3e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 801d3de:	2301      	movs	r3, #1
 801d3e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d3e2:	687b      	ldr	r3, [r7, #4]
 801d3e4:	681b      	ldr	r3, [r3, #0]
 801d3e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d00a      	beq.n	801d404 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d3ee:	4b18      	ldr	r3, [pc, #96]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d3f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801d3f8:	687b      	ldr	r3, [r7, #4]
 801d3fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3fc:	4914      	ldr	r1, [pc, #80]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d3fe:	4313      	orrs	r3, r2
 801d400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 801d404:	687b      	ldr	r3, [r7, #4]
 801d406:	681b      	ldr	r3, [r3, #0]
 801d408:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801d40c:	2b00      	cmp	r3, #0
 801d40e:	d00b      	beq.n	801d428 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801d410:	4b0f      	ldr	r3, [pc, #60]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d416:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 801d41a:	687b      	ldr	r3, [r7, #4]
 801d41c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801d420:	490b      	ldr	r1, [pc, #44]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d422:	4313      	orrs	r3, r2
 801d424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 801d428:	687b      	ldr	r3, [r7, #4]
 801d42a:	681b      	ldr	r3, [r3, #0]
 801d42c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d430:	2b00      	cmp	r3, #0
 801d432:	d00f      	beq.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 801d434:	4b06      	ldr	r3, [pc, #24]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801d43a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d444:	4902      	ldr	r1, [pc, #8]	; (801d450 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801d446:	4313      	orrs	r3, r2
 801d448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 801d44c:	e002      	b.n	801d454 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801d44e:	bf00      	nop
 801d450:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	681b      	ldr	r3, [r3, #0]
 801d458:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d00b      	beq.n	801d478 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d460:	4b8a      	ldr	r3, [pc, #552]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d466:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801d46a:	687b      	ldr	r3, [r7, #4]
 801d46c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d470:	4986      	ldr	r1, [pc, #536]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d472:	4313      	orrs	r3, r2
 801d474:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 801d478:	687b      	ldr	r3, [r7, #4]
 801d47a:	681b      	ldr	r3, [r3, #0]
 801d47c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801d480:	2b00      	cmp	r3, #0
 801d482:	d00b      	beq.n	801d49c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 801d484:	4b81      	ldr	r3, [pc, #516]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d486:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d48a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801d48e:	687b      	ldr	r3, [r7, #4]
 801d490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d494:	497d      	ldr	r1, [pc, #500]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d496:	4313      	orrs	r3, r2
 801d498:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 801d49c:	69fb      	ldr	r3, [r7, #28]
 801d49e:	2b01      	cmp	r3, #1
 801d4a0:	d006      	beq.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801d4a2:	687b      	ldr	r3, [r7, #4]
 801d4a4:	681b      	ldr	r3, [r3, #0]
 801d4a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	f000 80d6 	beq.w	801d65c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801d4b0:	4b76      	ldr	r3, [pc, #472]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d4b2:	681b      	ldr	r3, [r3, #0]
 801d4b4:	4a75      	ldr	r2, [pc, #468]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d4b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801d4ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d4bc:	f7fb fe6a 	bl	8019194 <HAL_GetTick>
 801d4c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d4c2:	e008      	b.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d4c4:	f7fb fe66 	bl	8019194 <HAL_GetTick>
 801d4c8:	4602      	mov	r2, r0
 801d4ca:	697b      	ldr	r3, [r7, #20]
 801d4cc:	1ad3      	subs	r3, r2, r3
 801d4ce:	2b64      	cmp	r3, #100	; 0x64
 801d4d0:	d901      	bls.n	801d4d6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d4d2:	2303      	movs	r3, #3
 801d4d4:	e195      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 801d4d6:	4b6d      	ldr	r3, [pc, #436]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d4d8:	681b      	ldr	r3, [r3, #0]
 801d4da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d4de:	2b00      	cmp	r3, #0
 801d4e0:	d1f0      	bne.n	801d4c4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 801d4e2:	687b      	ldr	r3, [r7, #4]
 801d4e4:	681b      	ldr	r3, [r3, #0]
 801d4e6:	f003 0301 	and.w	r3, r3, #1
 801d4ea:	2b00      	cmp	r3, #0
 801d4ec:	d021      	beq.n	801d532 <HAL_RCCEx_PeriphCLKConfig+0x572>
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d4f2:	2b00      	cmp	r3, #0
 801d4f4:	d11d      	bne.n	801d532 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d4f6:	4b65      	ldr	r3, [pc, #404]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d4f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d4fc:	0c1b      	lsrs	r3, r3, #16
 801d4fe:	f003 0303 	and.w	r3, r3, #3
 801d502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d504:	4b61      	ldr	r3, [pc, #388]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d50a:	0e1b      	lsrs	r3, r3, #24
 801d50c:	f003 030f 	and.w	r3, r3, #15
 801d510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	685b      	ldr	r3, [r3, #4]
 801d516:	019a      	lsls	r2, r3, #6
 801d518:	693b      	ldr	r3, [r7, #16]
 801d51a:	041b      	lsls	r3, r3, #16
 801d51c:	431a      	orrs	r2, r3
 801d51e:	68fb      	ldr	r3, [r7, #12]
 801d520:	061b      	lsls	r3, r3, #24
 801d522:	431a      	orrs	r2, r3
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	689b      	ldr	r3, [r3, #8]
 801d528:	071b      	lsls	r3, r3, #28
 801d52a:	4958      	ldr	r1, [pc, #352]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d52c:	4313      	orrs	r3, r2
 801d52e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	681b      	ldr	r3, [r3, #0]
 801d536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d53a:	2b00      	cmp	r3, #0
 801d53c:	d004      	beq.n	801d548 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d542:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801d546:	d00a      	beq.n	801d55e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	681b      	ldr	r3, [r3, #0]
 801d54c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801d550:	2b00      	cmp	r3, #0
 801d552:	d02e      	beq.n	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d55c:	d129      	bne.n	801d5b2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801d55e:	4b4b      	ldr	r3, [pc, #300]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d564:	0c1b      	lsrs	r3, r3, #16
 801d566:	f003 0303 	and.w	r3, r3, #3
 801d56a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d56c:	4b47      	ldr	r3, [pc, #284]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d56e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d572:	0f1b      	lsrs	r3, r3, #28
 801d574:	f003 0307 	and.w	r3, r3, #7
 801d578:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 801d57a:	687b      	ldr	r3, [r7, #4]
 801d57c:	685b      	ldr	r3, [r3, #4]
 801d57e:	019a      	lsls	r2, r3, #6
 801d580:	693b      	ldr	r3, [r7, #16]
 801d582:	041b      	lsls	r3, r3, #16
 801d584:	431a      	orrs	r2, r3
 801d586:	687b      	ldr	r3, [r7, #4]
 801d588:	68db      	ldr	r3, [r3, #12]
 801d58a:	061b      	lsls	r3, r3, #24
 801d58c:	431a      	orrs	r2, r3
 801d58e:	68fb      	ldr	r3, [r7, #12]
 801d590:	071b      	lsls	r3, r3, #28
 801d592:	493e      	ldr	r1, [pc, #248]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d594:	4313      	orrs	r3, r2
 801d596:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 801d59a:	4b3c      	ldr	r3, [pc, #240]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d59c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d5a0:	f023 021f 	bic.w	r2, r3, #31
 801d5a4:	687b      	ldr	r3, [r7, #4]
 801d5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d5a8:	3b01      	subs	r3, #1
 801d5aa:	4938      	ldr	r1, [pc, #224]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d5ac:	4313      	orrs	r3, r2
 801d5ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801d5b2:	687b      	ldr	r3, [r7, #4]
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d01d      	beq.n	801d5fa <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 801d5be:	4b33      	ldr	r3, [pc, #204]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d5c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d5c4:	0e1b      	lsrs	r3, r3, #24
 801d5c6:	f003 030f 	and.w	r3, r3, #15
 801d5ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 801d5cc:	4b2f      	ldr	r3, [pc, #188]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d5ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801d5d2:	0f1b      	lsrs	r3, r3, #28
 801d5d4:	f003 0307 	and.w	r3, r3, #7
 801d5d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 801d5da:	687b      	ldr	r3, [r7, #4]
 801d5dc:	685b      	ldr	r3, [r3, #4]
 801d5de:	019a      	lsls	r2, r3, #6
 801d5e0:	687b      	ldr	r3, [r7, #4]
 801d5e2:	691b      	ldr	r3, [r3, #16]
 801d5e4:	041b      	lsls	r3, r3, #16
 801d5e6:	431a      	orrs	r2, r3
 801d5e8:	693b      	ldr	r3, [r7, #16]
 801d5ea:	061b      	lsls	r3, r3, #24
 801d5ec:	431a      	orrs	r2, r3
 801d5ee:	68fb      	ldr	r3, [r7, #12]
 801d5f0:	071b      	lsls	r3, r3, #28
 801d5f2:	4926      	ldr	r1, [pc, #152]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d5f4:	4313      	orrs	r3, r2
 801d5f6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 801d5fa:	687b      	ldr	r3, [r7, #4]
 801d5fc:	681b      	ldr	r3, [r3, #0]
 801d5fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d602:	2b00      	cmp	r3, #0
 801d604:	d011      	beq.n	801d62a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 801d606:	687b      	ldr	r3, [r7, #4]
 801d608:	685b      	ldr	r3, [r3, #4]
 801d60a:	019a      	lsls	r2, r3, #6
 801d60c:	687b      	ldr	r3, [r7, #4]
 801d60e:	691b      	ldr	r3, [r3, #16]
 801d610:	041b      	lsls	r3, r3, #16
 801d612:	431a      	orrs	r2, r3
 801d614:	687b      	ldr	r3, [r7, #4]
 801d616:	68db      	ldr	r3, [r3, #12]
 801d618:	061b      	lsls	r3, r3, #24
 801d61a:	431a      	orrs	r2, r3
 801d61c:	687b      	ldr	r3, [r7, #4]
 801d61e:	689b      	ldr	r3, [r3, #8]
 801d620:	071b      	lsls	r3, r3, #28
 801d622:	491a      	ldr	r1, [pc, #104]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d624:	4313      	orrs	r3, r2
 801d626:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 801d62a:	4b18      	ldr	r3, [pc, #96]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d62c:	681b      	ldr	r3, [r3, #0]
 801d62e:	4a17      	ldr	r2, [pc, #92]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d630:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d636:	f7fb fdad 	bl	8019194 <HAL_GetTick>
 801d63a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d63c:	e008      	b.n	801d650 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801d63e:	f7fb fda9 	bl	8019194 <HAL_GetTick>
 801d642:	4602      	mov	r2, r0
 801d644:	697b      	ldr	r3, [r7, #20]
 801d646:	1ad3      	subs	r3, r2, r3
 801d648:	2b64      	cmp	r3, #100	; 0x64
 801d64a:	d901      	bls.n	801d650 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d64c:	2303      	movs	r3, #3
 801d64e:	e0d8      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801d650:	4b0e      	ldr	r3, [pc, #56]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d652:	681b      	ldr	r3, [r3, #0]
 801d654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d658:	2b00      	cmp	r3, #0
 801d65a:	d0f0      	beq.n	801d63e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 801d65c:	69bb      	ldr	r3, [r7, #24]
 801d65e:	2b01      	cmp	r3, #1
 801d660:	f040 80ce 	bne.w	801d800 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 801d664:	4b09      	ldr	r3, [pc, #36]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d666:	681b      	ldr	r3, [r3, #0]
 801d668:	4a08      	ldr	r2, [pc, #32]	; (801d68c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801d66a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801d66e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d670:	f7fb fd90 	bl	8019194 <HAL_GetTick>
 801d674:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d676:	e00b      	b.n	801d690 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d678:	f7fb fd8c 	bl	8019194 <HAL_GetTick>
 801d67c:	4602      	mov	r2, r0
 801d67e:	697b      	ldr	r3, [r7, #20]
 801d680:	1ad3      	subs	r3, r2, r3
 801d682:	2b64      	cmp	r3, #100	; 0x64
 801d684:	d904      	bls.n	801d690 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d686:	2303      	movs	r3, #3
 801d688:	e0bb      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
 801d68a:	bf00      	nop
 801d68c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801d690:	4b5e      	ldr	r3, [pc, #376]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d69c:	d0ec      	beq.n	801d678 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	681b      	ldr	r3, [r3, #0]
 801d6a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d003      	beq.n	801d6b2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 801d6aa:	687b      	ldr	r3, [r7, #4]
 801d6ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d6ae:	2b00      	cmp	r3, #0
 801d6b0:	d009      	beq.n	801d6c6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801d6b2:	687b      	ldr	r3, [r7, #4]
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801d6ba:	2b00      	cmp	r3, #0
 801d6bc:	d02e      	beq.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801d6be:	687b      	ldr	r3, [r7, #4]
 801d6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801d6c2:	2b00      	cmp	r3, #0
 801d6c4:	d12a      	bne.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d6c6:	4b51      	ldr	r3, [pc, #324]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d6c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d6cc:	0c1b      	lsrs	r3, r3, #16
 801d6ce:	f003 0303 	and.w	r3, r3, #3
 801d6d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d6d4:	4b4d      	ldr	r3, [pc, #308]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d6da:	0f1b      	lsrs	r3, r3, #28
 801d6dc:	f003 0307 	and.w	r3, r3, #7
 801d6e0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 801d6e2:	687b      	ldr	r3, [r7, #4]
 801d6e4:	695b      	ldr	r3, [r3, #20]
 801d6e6:	019a      	lsls	r2, r3, #6
 801d6e8:	693b      	ldr	r3, [r7, #16]
 801d6ea:	041b      	lsls	r3, r3, #16
 801d6ec:	431a      	orrs	r2, r3
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	699b      	ldr	r3, [r3, #24]
 801d6f2:	061b      	lsls	r3, r3, #24
 801d6f4:	431a      	orrs	r2, r3
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	071b      	lsls	r3, r3, #28
 801d6fa:	4944      	ldr	r1, [pc, #272]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d6fc:	4313      	orrs	r3, r2
 801d6fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 801d702:	4b42      	ldr	r3, [pc, #264]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d704:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d708:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 801d70c:	687b      	ldr	r3, [r7, #4]
 801d70e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d710:	3b01      	subs	r3, #1
 801d712:	021b      	lsls	r3, r3, #8
 801d714:	493d      	ldr	r1, [pc, #244]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d716:	4313      	orrs	r3, r2
 801d718:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	681b      	ldr	r3, [r3, #0]
 801d720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801d724:	2b00      	cmp	r3, #0
 801d726:	d022      	beq.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 801d728:	687b      	ldr	r3, [r7, #4]
 801d72a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801d72c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d730:	d11d      	bne.n	801d76e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d732:	4b36      	ldr	r3, [pc, #216]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d734:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d738:	0e1b      	lsrs	r3, r3, #24
 801d73a:	f003 030f 	and.w	r3, r3, #15
 801d73e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 801d740:	4b32      	ldr	r3, [pc, #200]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d742:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d746:	0f1b      	lsrs	r3, r3, #28
 801d748:	f003 0307 	and.w	r3, r3, #7
 801d74c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 801d74e:	687b      	ldr	r3, [r7, #4]
 801d750:	695b      	ldr	r3, [r3, #20]
 801d752:	019a      	lsls	r2, r3, #6
 801d754:	687b      	ldr	r3, [r7, #4]
 801d756:	6a1b      	ldr	r3, [r3, #32]
 801d758:	041b      	lsls	r3, r3, #16
 801d75a:	431a      	orrs	r2, r3
 801d75c:	693b      	ldr	r3, [r7, #16]
 801d75e:	061b      	lsls	r3, r3, #24
 801d760:	431a      	orrs	r2, r3
 801d762:	68fb      	ldr	r3, [r7, #12]
 801d764:	071b      	lsls	r3, r3, #28
 801d766:	4929      	ldr	r1, [pc, #164]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d768:	4313      	orrs	r3, r2
 801d76a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 801d76e:	687b      	ldr	r3, [r7, #4]
 801d770:	681b      	ldr	r3, [r3, #0]
 801d772:	f003 0308 	and.w	r3, r3, #8
 801d776:	2b00      	cmp	r3, #0
 801d778:	d028      	beq.n	801d7cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 801d77a:	4b24      	ldr	r3, [pc, #144]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d77c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d780:	0e1b      	lsrs	r3, r3, #24
 801d782:	f003 030f 	and.w	r3, r3, #15
 801d786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801d788:	4b20      	ldr	r3, [pc, #128]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d78a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d78e:	0c1b      	lsrs	r3, r3, #16
 801d790:	f003 0303 	and.w	r3, r3, #3
 801d794:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801d796:	687b      	ldr	r3, [r7, #4]
 801d798:	695b      	ldr	r3, [r3, #20]
 801d79a:	019a      	lsls	r2, r3, #6
 801d79c:	68fb      	ldr	r3, [r7, #12]
 801d79e:	041b      	lsls	r3, r3, #16
 801d7a0:	431a      	orrs	r2, r3
 801d7a2:	693b      	ldr	r3, [r7, #16]
 801d7a4:	061b      	lsls	r3, r3, #24
 801d7a6:	431a      	orrs	r2, r3
 801d7a8:	687b      	ldr	r3, [r7, #4]
 801d7aa:	69db      	ldr	r3, [r3, #28]
 801d7ac:	071b      	lsls	r3, r3, #28
 801d7ae:	4917      	ldr	r1, [pc, #92]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7b0:	4313      	orrs	r3, r2
 801d7b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801d7b6:	4b15      	ldr	r3, [pc, #84]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d7bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801d7c0:	687b      	ldr	r3, [r7, #4]
 801d7c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d7c4:	4911      	ldr	r1, [pc, #68]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7c6:	4313      	orrs	r3, r2
 801d7c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801d7cc:	4b0f      	ldr	r3, [pc, #60]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	4a0e      	ldr	r2, [pc, #56]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801d7d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801d7d8:	f7fb fcdc 	bl	8019194 <HAL_GetTick>
 801d7dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d7de:	e008      	b.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801d7e0:	f7fb fcd8 	bl	8019194 <HAL_GetTick>
 801d7e4:	4602      	mov	r2, r0
 801d7e6:	697b      	ldr	r3, [r7, #20]
 801d7e8:	1ad3      	subs	r3, r2, r3
 801d7ea:	2b64      	cmp	r3, #100	; 0x64
 801d7ec:	d901      	bls.n	801d7f2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801d7ee:	2303      	movs	r3, #3
 801d7f0:	e007      	b.n	801d802 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801d7f2:	4b06      	ldr	r3, [pc, #24]	; (801d80c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801d7f4:	681b      	ldr	r3, [r3, #0]
 801d7f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7fe:	d1ef      	bne.n	801d7e0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801d800:	2300      	movs	r3, #0
}
 801d802:	4618      	mov	r0, r3
 801d804:	3720      	adds	r7, #32
 801d806:	46bd      	mov	sp, r7
 801d808:	bd80      	pop	{r7, pc}
 801d80a:	bf00      	nop
 801d80c:	40023800 	.word	0x40023800

0801d810 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801d810:	b580      	push	{r7, lr}
 801d812:	b082      	sub	sp, #8
 801d814:	af00      	add	r7, sp, #0
 801d816:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	2b00      	cmp	r3, #0
 801d81c:	d101      	bne.n	801d822 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801d81e:	2301      	movs	r3, #1
 801d820:	e01c      	b.n	801d85c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801d822:	687b      	ldr	r3, [r7, #4]
 801d824:	795b      	ldrb	r3, [r3, #5]
 801d826:	b2db      	uxtb	r3, r3
 801d828:	2b00      	cmp	r3, #0
 801d82a:	d105      	bne.n	801d838 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801d82c:	687b      	ldr	r3, [r7, #4]
 801d82e:	2200      	movs	r2, #0
 801d830:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801d832:	6878      	ldr	r0, [r7, #4]
 801d834:	f7f9 fece 	bl	80175d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801d838:	687b      	ldr	r3, [r7, #4]
 801d83a:	2202      	movs	r2, #2
 801d83c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801d83e:	687b      	ldr	r3, [r7, #4]
 801d840:	681b      	ldr	r3, [r3, #0]
 801d842:	681a      	ldr	r2, [r3, #0]
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	f042 0204 	orr.w	r2, r2, #4
 801d84c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801d84e:	687b      	ldr	r3, [r7, #4]
 801d850:	2201      	movs	r2, #1
 801d852:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801d854:	687b      	ldr	r3, [r7, #4]
 801d856:	2200      	movs	r2, #0
 801d858:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801d85a:	2300      	movs	r3, #0
}
 801d85c:	4618      	mov	r0, r3
 801d85e:	3708      	adds	r7, #8
 801d860:	46bd      	mov	sp, r7
 801d862:	bd80      	pop	{r7, pc}

0801d864 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b084      	sub	sp, #16
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
 801d86c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801d86e:	2300      	movs	r3, #0
 801d870:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801d872:	687b      	ldr	r3, [r7, #4]
 801d874:	791b      	ldrb	r3, [r3, #4]
 801d876:	2b01      	cmp	r3, #1
 801d878:	d101      	bne.n	801d87e <HAL_RNG_GenerateRandomNumber+0x1a>
 801d87a:	2302      	movs	r3, #2
 801d87c:	e044      	b.n	801d908 <HAL_RNG_GenerateRandomNumber+0xa4>
 801d87e:	687b      	ldr	r3, [r7, #4]
 801d880:	2201      	movs	r2, #1
 801d882:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801d884:	687b      	ldr	r3, [r7, #4]
 801d886:	795b      	ldrb	r3, [r3, #5]
 801d888:	b2db      	uxtb	r3, r3
 801d88a:	2b01      	cmp	r3, #1
 801d88c:	d133      	bne.n	801d8f6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	2202      	movs	r2, #2
 801d892:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801d894:	f7fb fc7e 	bl	8019194 <HAL_GetTick>
 801d898:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d89a:	e018      	b.n	801d8ce <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801d89c:	f7fb fc7a 	bl	8019194 <HAL_GetTick>
 801d8a0:	4602      	mov	r2, r0
 801d8a2:	68bb      	ldr	r3, [r7, #8]
 801d8a4:	1ad3      	subs	r3, r2, r3
 801d8a6:	2b02      	cmp	r3, #2
 801d8a8:	d911      	bls.n	801d8ce <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d8aa:	687b      	ldr	r3, [r7, #4]
 801d8ac:	681b      	ldr	r3, [r3, #0]
 801d8ae:	685b      	ldr	r3, [r3, #4]
 801d8b0:	f003 0301 	and.w	r3, r3, #1
 801d8b4:	2b01      	cmp	r3, #1
 801d8b6:	d00a      	beq.n	801d8ce <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801d8b8:	687b      	ldr	r3, [r7, #4]
 801d8ba:	2201      	movs	r2, #1
 801d8bc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801d8be:	687b      	ldr	r3, [r7, #4]
 801d8c0:	2202      	movs	r2, #2
 801d8c2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801d8c4:	687b      	ldr	r3, [r7, #4]
 801d8c6:	2200      	movs	r2, #0
 801d8c8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801d8ca:	2301      	movs	r3, #1
 801d8cc:	e01c      	b.n	801d908 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	681b      	ldr	r3, [r3, #0]
 801d8d2:	685b      	ldr	r3, [r3, #4]
 801d8d4:	f003 0301 	and.w	r3, r3, #1
 801d8d8:	2b01      	cmp	r3, #1
 801d8da:	d1df      	bne.n	801d89c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801d8dc:	687b      	ldr	r3, [r7, #4]
 801d8de:	681b      	ldr	r3, [r3, #0]
 801d8e0:	689a      	ldr	r2, [r3, #8]
 801d8e2:	687b      	ldr	r3, [r7, #4]
 801d8e4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801d8e6:	687b      	ldr	r3, [r7, #4]
 801d8e8:	68da      	ldr	r2, [r3, #12]
 801d8ea:	683b      	ldr	r3, [r7, #0]
 801d8ec:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	2201      	movs	r2, #1
 801d8f2:	715a      	strb	r2, [r3, #5]
 801d8f4:	e004      	b.n	801d900 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801d8f6:	687b      	ldr	r3, [r7, #4]
 801d8f8:	2204      	movs	r2, #4
 801d8fa:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801d8fc:	2301      	movs	r3, #1
 801d8fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2200      	movs	r2, #0
 801d904:	711a      	strb	r2, [r3, #4]

  return status;
 801d906:	7bfb      	ldrb	r3, [r7, #15]
}
 801d908:	4618      	mov	r0, r3
 801d90a:	3710      	adds	r7, #16
 801d90c:	46bd      	mov	sp, r7
 801d90e:	bd80      	pop	{r7, pc}

0801d910 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801d910:	b580      	push	{r7, lr}
 801d912:	b082      	sub	sp, #8
 801d914:	af00      	add	r7, sp, #0
 801d916:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801d918:	687b      	ldr	r3, [r7, #4]
 801d91a:	330c      	adds	r3, #12
 801d91c:	4619      	mov	r1, r3
 801d91e:	6878      	ldr	r0, [r7, #4]
 801d920:	f7ff ffa0 	bl	801d864 <HAL_RNG_GenerateRandomNumber>
 801d924:	4603      	mov	r3, r0
 801d926:	2b00      	cmp	r3, #0
 801d928:	d102      	bne.n	801d930 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	68db      	ldr	r3, [r3, #12]
 801d92e:	e000      	b.n	801d932 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801d930:	2300      	movs	r3, #0
  }
}
 801d932:	4618      	mov	r0, r3
 801d934:	3708      	adds	r7, #8
 801d936:	46bd      	mov	sp, r7
 801d938:	bd80      	pop	{r7, pc}

0801d93a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801d93a:	b580      	push	{r7, lr}
 801d93c:	b084      	sub	sp, #16
 801d93e:	af00      	add	r7, sp, #0
 801d940:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	2b00      	cmp	r3, #0
 801d946:	d101      	bne.n	801d94c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801d948:	2301      	movs	r3, #1
 801d94a:	e09d      	b.n	801da88 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d950:	2b00      	cmp	r3, #0
 801d952:	d108      	bne.n	801d966 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801d954:	687b      	ldr	r3, [r7, #4]
 801d956:	685b      	ldr	r3, [r3, #4]
 801d958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801d95c:	d009      	beq.n	801d972 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801d95e:	687b      	ldr	r3, [r7, #4]
 801d960:	2200      	movs	r2, #0
 801d962:	61da      	str	r2, [r3, #28]
 801d964:	e005      	b.n	801d972 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801d966:	687b      	ldr	r3, [r7, #4]
 801d968:	2200      	movs	r2, #0
 801d96a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801d96c:	687b      	ldr	r3, [r7, #4]
 801d96e:	2200      	movs	r2, #0
 801d970:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d972:	687b      	ldr	r3, [r7, #4]
 801d974:	2200      	movs	r2, #0
 801d976:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801d978:	687b      	ldr	r3, [r7, #4]
 801d97a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801d97e:	b2db      	uxtb	r3, r3
 801d980:	2b00      	cmp	r3, #0
 801d982:	d106      	bne.n	801d992 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801d984:	687b      	ldr	r3, [r7, #4]
 801d986:	2200      	movs	r2, #0
 801d988:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801d98c:	6878      	ldr	r0, [r7, #4]
 801d98e:	f7f9 fea9 	bl	80176e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801d992:	687b      	ldr	r3, [r7, #4]
 801d994:	2202      	movs	r2, #2
 801d996:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801d99a:	687b      	ldr	r3, [r7, #4]
 801d99c:	681b      	ldr	r3, [r3, #0]
 801d99e:	681a      	ldr	r2, [r3, #0]
 801d9a0:	687b      	ldr	r3, [r7, #4]
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801d9a8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	68db      	ldr	r3, [r3, #12]
 801d9ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d9b2:	d902      	bls.n	801d9ba <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801d9b4:	2300      	movs	r3, #0
 801d9b6:	60fb      	str	r3, [r7, #12]
 801d9b8:	e002      	b.n	801d9c0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801d9ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801d9be:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801d9c0:	687b      	ldr	r3, [r7, #4]
 801d9c2:	68db      	ldr	r3, [r3, #12]
 801d9c4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801d9c8:	d007      	beq.n	801d9da <HAL_SPI_Init+0xa0>
 801d9ca:	687b      	ldr	r3, [r7, #4]
 801d9cc:	68db      	ldr	r3, [r3, #12]
 801d9ce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801d9d2:	d002      	beq.n	801d9da <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801d9d4:	687b      	ldr	r3, [r7, #4]
 801d9d6:	2200      	movs	r2, #0
 801d9d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	685b      	ldr	r3, [r3, #4]
 801d9de:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	689b      	ldr	r3, [r3, #8]
 801d9e6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801d9ea:	431a      	orrs	r2, r3
 801d9ec:	687b      	ldr	r3, [r7, #4]
 801d9ee:	691b      	ldr	r3, [r3, #16]
 801d9f0:	f003 0302 	and.w	r3, r3, #2
 801d9f4:	431a      	orrs	r2, r3
 801d9f6:	687b      	ldr	r3, [r7, #4]
 801d9f8:	695b      	ldr	r3, [r3, #20]
 801d9fa:	f003 0301 	and.w	r3, r3, #1
 801d9fe:	431a      	orrs	r2, r3
 801da00:	687b      	ldr	r3, [r7, #4]
 801da02:	699b      	ldr	r3, [r3, #24]
 801da04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801da08:	431a      	orrs	r2, r3
 801da0a:	687b      	ldr	r3, [r7, #4]
 801da0c:	69db      	ldr	r3, [r3, #28]
 801da0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801da12:	431a      	orrs	r2, r3
 801da14:	687b      	ldr	r3, [r7, #4]
 801da16:	6a1b      	ldr	r3, [r3, #32]
 801da18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801da1c:	ea42 0103 	orr.w	r1, r2, r3
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da24:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801da28:	687b      	ldr	r3, [r7, #4]
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	430a      	orrs	r2, r1
 801da2e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801da30:	687b      	ldr	r3, [r7, #4]
 801da32:	699b      	ldr	r3, [r3, #24]
 801da34:	0c1b      	lsrs	r3, r3, #16
 801da36:	f003 0204 	and.w	r2, r3, #4
 801da3a:	687b      	ldr	r3, [r7, #4]
 801da3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801da3e:	f003 0310 	and.w	r3, r3, #16
 801da42:	431a      	orrs	r2, r3
 801da44:	687b      	ldr	r3, [r7, #4]
 801da46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801da48:	f003 0308 	and.w	r3, r3, #8
 801da4c:	431a      	orrs	r2, r3
 801da4e:	687b      	ldr	r3, [r7, #4]
 801da50:	68db      	ldr	r3, [r3, #12]
 801da52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801da56:	ea42 0103 	orr.w	r1, r2, r3
 801da5a:	68fb      	ldr	r3, [r7, #12]
 801da5c:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	430a      	orrs	r2, r1
 801da66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	681b      	ldr	r3, [r3, #0]
 801da6c:	69da      	ldr	r2, [r3, #28]
 801da6e:	687b      	ldr	r3, [r7, #4]
 801da70:	681b      	ldr	r3, [r3, #0]
 801da72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801da76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2200      	movs	r2, #0
 801da7c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801da7e:	687b      	ldr	r3, [r7, #4]
 801da80:	2201      	movs	r2, #1
 801da82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801da86:	2300      	movs	r3, #0
}
 801da88:	4618      	mov	r0, r3
 801da8a:	3710      	adds	r7, #16
 801da8c:	46bd      	mov	sp, r7
 801da8e:	bd80      	pop	{r7, pc}

0801da90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801da90:	b580      	push	{r7, lr}
 801da92:	b088      	sub	sp, #32
 801da94:	af00      	add	r7, sp, #0
 801da96:	60f8      	str	r0, [r7, #12]
 801da98:	60b9      	str	r1, [r7, #8]
 801da9a:	603b      	str	r3, [r7, #0]
 801da9c:	4613      	mov	r3, r2
 801da9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801daa0:	2300      	movs	r3, #0
 801daa2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801daaa:	2b01      	cmp	r3, #1
 801daac:	d101      	bne.n	801dab2 <HAL_SPI_Transmit+0x22>
 801daae:	2302      	movs	r3, #2
 801dab0:	e158      	b.n	801dd64 <HAL_SPI_Transmit+0x2d4>
 801dab2:	68fb      	ldr	r3, [r7, #12]
 801dab4:	2201      	movs	r2, #1
 801dab6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801daba:	f7fb fb6b 	bl	8019194 <HAL_GetTick>
 801dabe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801dac0:	88fb      	ldrh	r3, [r7, #6]
 801dac2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801dac4:	68fb      	ldr	r3, [r7, #12]
 801dac6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801daca:	b2db      	uxtb	r3, r3
 801dacc:	2b01      	cmp	r3, #1
 801dace:	d002      	beq.n	801dad6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801dad0:	2302      	movs	r3, #2
 801dad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dad4:	e13d      	b.n	801dd52 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801dad6:	68bb      	ldr	r3, [r7, #8]
 801dad8:	2b00      	cmp	r3, #0
 801dada:	d002      	beq.n	801dae2 <HAL_SPI_Transmit+0x52>
 801dadc:	88fb      	ldrh	r3, [r7, #6]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d102      	bne.n	801dae8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801dae2:	2301      	movs	r3, #1
 801dae4:	77fb      	strb	r3, [r7, #31]
    goto error;
 801dae6:	e134      	b.n	801dd52 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801dae8:	68fb      	ldr	r3, [r7, #12]
 801daea:	2203      	movs	r2, #3
 801daec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801daf0:	68fb      	ldr	r3, [r7, #12]
 801daf2:	2200      	movs	r2, #0
 801daf4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801daf6:	68fb      	ldr	r3, [r7, #12]
 801daf8:	68ba      	ldr	r2, [r7, #8]
 801dafa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	88fa      	ldrh	r2, [r7, #6]
 801db00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	88fa      	ldrh	r2, [r7, #6]
 801db06:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801db08:	68fb      	ldr	r3, [r7, #12]
 801db0a:	2200      	movs	r2, #0
 801db0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801db0e:	68fb      	ldr	r3, [r7, #12]
 801db10:	2200      	movs	r2, #0
 801db12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	2200      	movs	r2, #0
 801db1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	2200      	movs	r2, #0
 801db22:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801db24:	68fb      	ldr	r3, [r7, #12]
 801db26:	2200      	movs	r2, #0
 801db28:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801db2a:	68fb      	ldr	r3, [r7, #12]
 801db2c:	689b      	ldr	r3, [r3, #8]
 801db2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801db32:	d10f      	bne.n	801db54 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801db34:	68fb      	ldr	r3, [r7, #12]
 801db36:	681b      	ldr	r3, [r3, #0]
 801db38:	681a      	ldr	r2, [r3, #0]
 801db3a:	68fb      	ldr	r3, [r7, #12]
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801db42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801db44:	68fb      	ldr	r3, [r7, #12]
 801db46:	681b      	ldr	r3, [r3, #0]
 801db48:	681a      	ldr	r2, [r3, #0]
 801db4a:	68fb      	ldr	r3, [r7, #12]
 801db4c:	681b      	ldr	r3, [r3, #0]
 801db4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801db52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801db54:	68fb      	ldr	r3, [r7, #12]
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	681b      	ldr	r3, [r3, #0]
 801db5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801db5e:	2b40      	cmp	r3, #64	; 0x40
 801db60:	d007      	beq.n	801db72 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801db62:	68fb      	ldr	r3, [r7, #12]
 801db64:	681b      	ldr	r3, [r3, #0]
 801db66:	681a      	ldr	r2, [r3, #0]
 801db68:	68fb      	ldr	r3, [r7, #12]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801db70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	68db      	ldr	r3, [r3, #12]
 801db76:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801db7a:	d94b      	bls.n	801dc14 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801db7c:	68fb      	ldr	r3, [r7, #12]
 801db7e:	685b      	ldr	r3, [r3, #4]
 801db80:	2b00      	cmp	r3, #0
 801db82:	d002      	beq.n	801db8a <HAL_SPI_Transmit+0xfa>
 801db84:	8afb      	ldrh	r3, [r7, #22]
 801db86:	2b01      	cmp	r3, #1
 801db88:	d13e      	bne.n	801dc08 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db8e:	881a      	ldrh	r2, [r3, #0]
 801db90:	68fb      	ldr	r3, [r7, #12]
 801db92:	681b      	ldr	r3, [r3, #0]
 801db94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801db96:	68fb      	ldr	r3, [r7, #12]
 801db98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db9a:	1c9a      	adds	r2, r3, #2
 801db9c:	68fb      	ldr	r3, [r7, #12]
 801db9e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801dba0:	68fb      	ldr	r3, [r7, #12]
 801dba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dba4:	b29b      	uxth	r3, r3
 801dba6:	3b01      	subs	r3, #1
 801dba8:	b29a      	uxth	r2, r3
 801dbaa:	68fb      	ldr	r3, [r7, #12]
 801dbac:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801dbae:	e02b      	b.n	801dc08 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	681b      	ldr	r3, [r3, #0]
 801dbb4:	689b      	ldr	r3, [r3, #8]
 801dbb6:	f003 0302 	and.w	r3, r3, #2
 801dbba:	2b02      	cmp	r3, #2
 801dbbc:	d112      	bne.n	801dbe4 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dbbe:	68fb      	ldr	r3, [r7, #12]
 801dbc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbc2:	881a      	ldrh	r2, [r3, #0]
 801dbc4:	68fb      	ldr	r3, [r7, #12]
 801dbc6:	681b      	ldr	r3, [r3, #0]
 801dbc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dbca:	68fb      	ldr	r3, [r7, #12]
 801dbcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbce:	1c9a      	adds	r2, r3, #2
 801dbd0:	68fb      	ldr	r3, [r7, #12]
 801dbd2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dbd4:	68fb      	ldr	r3, [r7, #12]
 801dbd6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dbd8:	b29b      	uxth	r3, r3
 801dbda:	3b01      	subs	r3, #1
 801dbdc:	b29a      	uxth	r2, r3
 801dbde:	68fb      	ldr	r3, [r7, #12]
 801dbe0:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dbe2:	e011      	b.n	801dc08 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801dbe4:	f7fb fad6 	bl	8019194 <HAL_GetTick>
 801dbe8:	4602      	mov	r2, r0
 801dbea:	69bb      	ldr	r3, [r7, #24]
 801dbec:	1ad3      	subs	r3, r2, r3
 801dbee:	683a      	ldr	r2, [r7, #0]
 801dbf0:	429a      	cmp	r2, r3
 801dbf2:	d803      	bhi.n	801dbfc <HAL_SPI_Transmit+0x16c>
 801dbf4:	683b      	ldr	r3, [r7, #0]
 801dbf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dbfa:	d102      	bne.n	801dc02 <HAL_SPI_Transmit+0x172>
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	2b00      	cmp	r3, #0
 801dc00:	d102      	bne.n	801dc08 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801dc02:	2303      	movs	r3, #3
 801dc04:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dc06:	e0a4      	b.n	801dd52 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc0c:	b29b      	uxth	r3, r3
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d1ce      	bne.n	801dbb0 <HAL_SPI_Transmit+0x120>
 801dc12:	e07c      	b.n	801dd0e <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801dc14:	68fb      	ldr	r3, [r7, #12]
 801dc16:	685b      	ldr	r3, [r3, #4]
 801dc18:	2b00      	cmp	r3, #0
 801dc1a:	d002      	beq.n	801dc22 <HAL_SPI_Transmit+0x192>
 801dc1c:	8afb      	ldrh	r3, [r7, #22]
 801dc1e:	2b01      	cmp	r3, #1
 801dc20:	d170      	bne.n	801dd04 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801dc22:	68fb      	ldr	r3, [r7, #12]
 801dc24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc26:	b29b      	uxth	r3, r3
 801dc28:	2b01      	cmp	r3, #1
 801dc2a:	d912      	bls.n	801dc52 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dc2c:	68fb      	ldr	r3, [r7, #12]
 801dc2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc30:	881a      	ldrh	r2, [r3, #0]
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	681b      	ldr	r3, [r3, #0]
 801dc36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801dc38:	68fb      	ldr	r3, [r7, #12]
 801dc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc3c:	1c9a      	adds	r2, r3, #2
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801dc42:	68fb      	ldr	r3, [r7, #12]
 801dc44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc46:	b29b      	uxth	r3, r3
 801dc48:	3b02      	subs	r3, #2
 801dc4a:	b29a      	uxth	r2, r3
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dc50:	e058      	b.n	801dd04 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801dc52:	68fb      	ldr	r3, [r7, #12]
 801dc54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	681b      	ldr	r3, [r3, #0]
 801dc5a:	330c      	adds	r3, #12
 801dc5c:	7812      	ldrb	r2, [r2, #0]
 801dc5e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801dc60:	68fb      	ldr	r3, [r7, #12]
 801dc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc64:	1c5a      	adds	r2, r3, #1
 801dc66:	68fb      	ldr	r3, [r7, #12]
 801dc68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc6e:	b29b      	uxth	r3, r3
 801dc70:	3b01      	subs	r3, #1
 801dc72:	b29a      	uxth	r2, r3
 801dc74:	68fb      	ldr	r3, [r7, #12]
 801dc76:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801dc78:	e044      	b.n	801dd04 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801dc7a:	68fb      	ldr	r3, [r7, #12]
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	689b      	ldr	r3, [r3, #8]
 801dc80:	f003 0302 	and.w	r3, r3, #2
 801dc84:	2b02      	cmp	r3, #2
 801dc86:	d12b      	bne.n	801dce0 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801dc88:	68fb      	ldr	r3, [r7, #12]
 801dc8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dc8c:	b29b      	uxth	r3, r3
 801dc8e:	2b01      	cmp	r3, #1
 801dc90:	d912      	bls.n	801dcb8 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801dc92:	68fb      	ldr	r3, [r7, #12]
 801dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc96:	881a      	ldrh	r2, [r3, #0]
 801dc98:	68fb      	ldr	r3, [r7, #12]
 801dc9a:	681b      	ldr	r3, [r3, #0]
 801dc9c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca2:	1c9a      	adds	r2, r3, #2
 801dca4:	68fb      	ldr	r3, [r7, #12]
 801dca6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801dca8:	68fb      	ldr	r3, [r7, #12]
 801dcaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcac:	b29b      	uxth	r3, r3
 801dcae:	3b02      	subs	r3, #2
 801dcb0:	b29a      	uxth	r2, r3
 801dcb2:	68fb      	ldr	r3, [r7, #12]
 801dcb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dcb6:	e025      	b.n	801dd04 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801dcb8:	68fb      	ldr	r3, [r7, #12]
 801dcba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801dcbc:	68fb      	ldr	r3, [r7, #12]
 801dcbe:	681b      	ldr	r3, [r3, #0]
 801dcc0:	330c      	adds	r3, #12
 801dcc2:	7812      	ldrb	r2, [r2, #0]
 801dcc4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801dcc6:	68fb      	ldr	r3, [r7, #12]
 801dcc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcca:	1c5a      	adds	r2, r3, #1
 801dccc:	68fb      	ldr	r3, [r7, #12]
 801dcce:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801dcd0:	68fb      	ldr	r3, [r7, #12]
 801dcd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dcd4:	b29b      	uxth	r3, r3
 801dcd6:	3b01      	subs	r3, #1
 801dcd8:	b29a      	uxth	r2, r3
 801dcda:	68fb      	ldr	r3, [r7, #12]
 801dcdc:	87da      	strh	r2, [r3, #62]	; 0x3e
 801dcde:	e011      	b.n	801dd04 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801dce0:	f7fb fa58 	bl	8019194 <HAL_GetTick>
 801dce4:	4602      	mov	r2, r0
 801dce6:	69bb      	ldr	r3, [r7, #24]
 801dce8:	1ad3      	subs	r3, r2, r3
 801dcea:	683a      	ldr	r2, [r7, #0]
 801dcec:	429a      	cmp	r2, r3
 801dcee:	d803      	bhi.n	801dcf8 <HAL_SPI_Transmit+0x268>
 801dcf0:	683b      	ldr	r3, [r7, #0]
 801dcf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801dcf6:	d102      	bne.n	801dcfe <HAL_SPI_Transmit+0x26e>
 801dcf8:	683b      	ldr	r3, [r7, #0]
 801dcfa:	2b00      	cmp	r3, #0
 801dcfc:	d102      	bne.n	801dd04 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801dcfe:	2303      	movs	r3, #3
 801dd00:	77fb      	strb	r3, [r7, #31]
          goto error;
 801dd02:	e026      	b.n	801dd52 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801dd04:	68fb      	ldr	r3, [r7, #12]
 801dd06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801dd08:	b29b      	uxth	r3, r3
 801dd0a:	2b00      	cmp	r3, #0
 801dd0c:	d1b5      	bne.n	801dc7a <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801dd0e:	69ba      	ldr	r2, [r7, #24]
 801dd10:	6839      	ldr	r1, [r7, #0]
 801dd12:	68f8      	ldr	r0, [r7, #12]
 801dd14:	f000 fd08 	bl	801e728 <SPI_EndRxTxTransaction>
 801dd18:	4603      	mov	r3, r0
 801dd1a:	2b00      	cmp	r3, #0
 801dd1c:	d002      	beq.n	801dd24 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801dd1e:	68fb      	ldr	r3, [r7, #12]
 801dd20:	2220      	movs	r2, #32
 801dd22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801dd24:	68fb      	ldr	r3, [r7, #12]
 801dd26:	689b      	ldr	r3, [r3, #8]
 801dd28:	2b00      	cmp	r3, #0
 801dd2a:	d10a      	bne.n	801dd42 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	613b      	str	r3, [r7, #16]
 801dd30:	68fb      	ldr	r3, [r7, #12]
 801dd32:	681b      	ldr	r3, [r3, #0]
 801dd34:	68db      	ldr	r3, [r3, #12]
 801dd36:	613b      	str	r3, [r7, #16]
 801dd38:	68fb      	ldr	r3, [r7, #12]
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	689b      	ldr	r3, [r3, #8]
 801dd3e:	613b      	str	r3, [r7, #16]
 801dd40:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d002      	beq.n	801dd50 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801dd4a:	2301      	movs	r3, #1
 801dd4c:	77fb      	strb	r3, [r7, #31]
 801dd4e:	e000      	b.n	801dd52 <HAL_SPI_Transmit+0x2c2>
  }

error:
 801dd50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dd52:	68fb      	ldr	r3, [r7, #12]
 801dd54:	2201      	movs	r2, #1
 801dd56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801dd5a:	68fb      	ldr	r3, [r7, #12]
 801dd5c:	2200      	movs	r2, #0
 801dd5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801dd62:	7ffb      	ldrb	r3, [r7, #31]
}
 801dd64:	4618      	mov	r0, r3
 801dd66:	3720      	adds	r7, #32
 801dd68:	46bd      	mov	sp, r7
 801dd6a:	bd80      	pop	{r7, pc}

0801dd6c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801dd6c:	b580      	push	{r7, lr}
 801dd6e:	b088      	sub	sp, #32
 801dd70:	af02      	add	r7, sp, #8
 801dd72:	60f8      	str	r0, [r7, #12]
 801dd74:	60b9      	str	r1, [r7, #8]
 801dd76:	603b      	str	r3, [r7, #0]
 801dd78:	4613      	mov	r3, r2
 801dd7a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801dd7c:	2300      	movs	r3, #0
 801dd7e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801dd80:	68fb      	ldr	r3, [r7, #12]
 801dd82:	685b      	ldr	r3, [r3, #4]
 801dd84:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801dd88:	d112      	bne.n	801ddb0 <HAL_SPI_Receive+0x44>
 801dd8a:	68fb      	ldr	r3, [r7, #12]
 801dd8c:	689b      	ldr	r3, [r3, #8]
 801dd8e:	2b00      	cmp	r3, #0
 801dd90:	d10e      	bne.n	801ddb0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801dd92:	68fb      	ldr	r3, [r7, #12]
 801dd94:	2204      	movs	r2, #4
 801dd96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801dd9a:	88fa      	ldrh	r2, [r7, #6]
 801dd9c:	683b      	ldr	r3, [r7, #0]
 801dd9e:	9300      	str	r3, [sp, #0]
 801dda0:	4613      	mov	r3, r2
 801dda2:	68ba      	ldr	r2, [r7, #8]
 801dda4:	68b9      	ldr	r1, [r7, #8]
 801dda6:	68f8      	ldr	r0, [r7, #12]
 801dda8:	f000 f910 	bl	801dfcc <HAL_SPI_TransmitReceive>
 801ddac:	4603      	mov	r3, r0
 801ddae:	e109      	b.n	801dfc4 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801ddb0:	68fb      	ldr	r3, [r7, #12]
 801ddb2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801ddb6:	2b01      	cmp	r3, #1
 801ddb8:	d101      	bne.n	801ddbe <HAL_SPI_Receive+0x52>
 801ddba:	2302      	movs	r3, #2
 801ddbc:	e102      	b.n	801dfc4 <HAL_SPI_Receive+0x258>
 801ddbe:	68fb      	ldr	r3, [r7, #12]
 801ddc0:	2201      	movs	r2, #1
 801ddc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801ddc6:	f7fb f9e5 	bl	8019194 <HAL_GetTick>
 801ddca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801ddcc:	68fb      	ldr	r3, [r7, #12]
 801ddce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801ddd2:	b2db      	uxtb	r3, r3
 801ddd4:	2b01      	cmp	r3, #1
 801ddd6:	d002      	beq.n	801ddde <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801ddd8:	2302      	movs	r3, #2
 801ddda:	75fb      	strb	r3, [r7, #23]
    goto error;
 801dddc:	e0e9      	b.n	801dfb2 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801ddde:	68bb      	ldr	r3, [r7, #8]
 801dde0:	2b00      	cmp	r3, #0
 801dde2:	d002      	beq.n	801ddea <HAL_SPI_Receive+0x7e>
 801dde4:	88fb      	ldrh	r3, [r7, #6]
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	d102      	bne.n	801ddf0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801ddea:	2301      	movs	r3, #1
 801ddec:	75fb      	strb	r3, [r7, #23]
    goto error;
 801ddee:	e0e0      	b.n	801dfb2 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801ddf0:	68fb      	ldr	r3, [r7, #12]
 801ddf2:	2204      	movs	r2, #4
 801ddf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801ddf8:	68fb      	ldr	r3, [r7, #12]
 801ddfa:	2200      	movs	r2, #0
 801ddfc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801ddfe:	68fb      	ldr	r3, [r7, #12]
 801de00:	68ba      	ldr	r2, [r7, #8]
 801de02:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801de04:	68fb      	ldr	r3, [r7, #12]
 801de06:	88fa      	ldrh	r2, [r7, #6]
 801de08:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801de0c:	68fb      	ldr	r3, [r7, #12]
 801de0e:	88fa      	ldrh	r2, [r7, #6]
 801de10:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	2200      	movs	r2, #0
 801de18:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801de1a:	68fb      	ldr	r3, [r7, #12]
 801de1c:	2200      	movs	r2, #0
 801de1e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801de20:	68fb      	ldr	r3, [r7, #12]
 801de22:	2200      	movs	r2, #0
 801de24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801de26:	68fb      	ldr	r3, [r7, #12]
 801de28:	2200      	movs	r2, #0
 801de2a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801de2c:	68fb      	ldr	r3, [r7, #12]
 801de2e:	2200      	movs	r2, #0
 801de30:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801de32:	68fb      	ldr	r3, [r7, #12]
 801de34:	68db      	ldr	r3, [r3, #12]
 801de36:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801de3a:	d908      	bls.n	801de4e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801de3c:	68fb      	ldr	r3, [r7, #12]
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	685a      	ldr	r2, [r3, #4]
 801de42:	68fb      	ldr	r3, [r7, #12]
 801de44:	681b      	ldr	r3, [r3, #0]
 801de46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801de4a:	605a      	str	r2, [r3, #4]
 801de4c:	e007      	b.n	801de5e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801de4e:	68fb      	ldr	r3, [r7, #12]
 801de50:	681b      	ldr	r3, [r3, #0]
 801de52:	685a      	ldr	r2, [r3, #4]
 801de54:	68fb      	ldr	r3, [r7, #12]
 801de56:	681b      	ldr	r3, [r3, #0]
 801de58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801de5c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801de5e:	68fb      	ldr	r3, [r7, #12]
 801de60:	689b      	ldr	r3, [r3, #8]
 801de62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801de66:	d10f      	bne.n	801de88 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	681b      	ldr	r3, [r3, #0]
 801de6c:	681a      	ldr	r2, [r3, #0]
 801de6e:	68fb      	ldr	r3, [r7, #12]
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801de76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801de78:	68fb      	ldr	r3, [r7, #12]
 801de7a:	681b      	ldr	r3, [r3, #0]
 801de7c:	681a      	ldr	r2, [r3, #0]
 801de7e:	68fb      	ldr	r3, [r7, #12]
 801de80:	681b      	ldr	r3, [r3, #0]
 801de82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801de86:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801de88:	68fb      	ldr	r3, [r7, #12]
 801de8a:	681b      	ldr	r3, [r3, #0]
 801de8c:	681b      	ldr	r3, [r3, #0]
 801de8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801de92:	2b40      	cmp	r3, #64	; 0x40
 801de94:	d007      	beq.n	801dea6 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801de96:	68fb      	ldr	r3, [r7, #12]
 801de98:	681b      	ldr	r3, [r3, #0]
 801de9a:	681a      	ldr	r2, [r3, #0]
 801de9c:	68fb      	ldr	r3, [r7, #12]
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801dea4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801dea6:	68fb      	ldr	r3, [r7, #12]
 801dea8:	68db      	ldr	r3, [r3, #12]
 801deaa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801deae:	d867      	bhi.n	801df80 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801deb0:	e030      	b.n	801df14 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801deb2:	68fb      	ldr	r3, [r7, #12]
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	689b      	ldr	r3, [r3, #8]
 801deb8:	f003 0301 	and.w	r3, r3, #1
 801debc:	2b01      	cmp	r3, #1
 801debe:	d117      	bne.n	801def0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801dec0:	68fb      	ldr	r3, [r7, #12]
 801dec2:	681b      	ldr	r3, [r3, #0]
 801dec4:	f103 020c 	add.w	r2, r3, #12
 801dec8:	68fb      	ldr	r3, [r7, #12]
 801deca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801decc:	7812      	ldrb	r2, [r2, #0]
 801dece:	b2d2      	uxtb	r2, r2
 801ded0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801ded2:	68fb      	ldr	r3, [r7, #12]
 801ded4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ded6:	1c5a      	adds	r2, r3, #1
 801ded8:	68fb      	ldr	r3, [r7, #12]
 801deda:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801dedc:	68fb      	ldr	r3, [r7, #12]
 801dede:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801dee2:	b29b      	uxth	r3, r3
 801dee4:	3b01      	subs	r3, #1
 801dee6:	b29a      	uxth	r2, r3
 801dee8:	68fb      	ldr	r3, [r7, #12]
 801deea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801deee:	e011      	b.n	801df14 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801def0:	f7fb f950 	bl	8019194 <HAL_GetTick>
 801def4:	4602      	mov	r2, r0
 801def6:	693b      	ldr	r3, [r7, #16]
 801def8:	1ad3      	subs	r3, r2, r3
 801defa:	683a      	ldr	r2, [r7, #0]
 801defc:	429a      	cmp	r2, r3
 801defe:	d803      	bhi.n	801df08 <HAL_SPI_Receive+0x19c>
 801df00:	683b      	ldr	r3, [r7, #0]
 801df02:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df06:	d102      	bne.n	801df0e <HAL_SPI_Receive+0x1a2>
 801df08:	683b      	ldr	r3, [r7, #0]
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d102      	bne.n	801df14 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801df0e:	2303      	movs	r3, #3
 801df10:	75fb      	strb	r3, [r7, #23]
          goto error;
 801df12:	e04e      	b.n	801dfb2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801df1a:	b29b      	uxth	r3, r3
 801df1c:	2b00      	cmp	r3, #0
 801df1e:	d1c8      	bne.n	801deb2 <HAL_SPI_Receive+0x146>
 801df20:	e034      	b.n	801df8c <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801df22:	68fb      	ldr	r3, [r7, #12]
 801df24:	681b      	ldr	r3, [r3, #0]
 801df26:	689b      	ldr	r3, [r3, #8]
 801df28:	f003 0301 	and.w	r3, r3, #1
 801df2c:	2b01      	cmp	r3, #1
 801df2e:	d115      	bne.n	801df5c <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	681b      	ldr	r3, [r3, #0]
 801df34:	68da      	ldr	r2, [r3, #12]
 801df36:	68fb      	ldr	r3, [r7, #12]
 801df38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df3a:	b292      	uxth	r2, r2
 801df3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801df3e:	68fb      	ldr	r3, [r7, #12]
 801df40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df42:	1c9a      	adds	r2, r3, #2
 801df44:	68fb      	ldr	r3, [r7, #12]
 801df46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801df48:	68fb      	ldr	r3, [r7, #12]
 801df4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801df4e:	b29b      	uxth	r3, r3
 801df50:	3b01      	subs	r3, #1
 801df52:	b29a      	uxth	r2, r3
 801df54:	68fb      	ldr	r3, [r7, #12]
 801df56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801df5a:	e011      	b.n	801df80 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801df5c:	f7fb f91a 	bl	8019194 <HAL_GetTick>
 801df60:	4602      	mov	r2, r0
 801df62:	693b      	ldr	r3, [r7, #16]
 801df64:	1ad3      	subs	r3, r2, r3
 801df66:	683a      	ldr	r2, [r7, #0]
 801df68:	429a      	cmp	r2, r3
 801df6a:	d803      	bhi.n	801df74 <HAL_SPI_Receive+0x208>
 801df6c:	683b      	ldr	r3, [r7, #0]
 801df6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801df72:	d102      	bne.n	801df7a <HAL_SPI_Receive+0x20e>
 801df74:	683b      	ldr	r3, [r7, #0]
 801df76:	2b00      	cmp	r3, #0
 801df78:	d102      	bne.n	801df80 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801df7a:	2303      	movs	r3, #3
 801df7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 801df7e:	e018      	b.n	801dfb2 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801df80:	68fb      	ldr	r3, [r7, #12]
 801df82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801df86:	b29b      	uxth	r3, r3
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d1ca      	bne.n	801df22 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801df8c:	693a      	ldr	r2, [r7, #16]
 801df8e:	6839      	ldr	r1, [r7, #0]
 801df90:	68f8      	ldr	r0, [r7, #12]
 801df92:	f000 fb4d 	bl	801e630 <SPI_EndRxTransaction>
 801df96:	4603      	mov	r3, r0
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d002      	beq.n	801dfa2 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801df9c:	68fb      	ldr	r3, [r7, #12]
 801df9e:	2220      	movs	r2, #32
 801dfa0:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801dfa2:	68fb      	ldr	r3, [r7, #12]
 801dfa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dfa6:	2b00      	cmp	r3, #0
 801dfa8:	d002      	beq.n	801dfb0 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801dfaa:	2301      	movs	r3, #1
 801dfac:	75fb      	strb	r3, [r7, #23]
 801dfae:	e000      	b.n	801dfb2 <HAL_SPI_Receive+0x246>
  }

error :
 801dfb0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801dfb2:	68fb      	ldr	r3, [r7, #12]
 801dfb4:	2201      	movs	r2, #1
 801dfb6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801dfba:	68fb      	ldr	r3, [r7, #12]
 801dfbc:	2200      	movs	r2, #0
 801dfbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801dfc2:	7dfb      	ldrb	r3, [r7, #23]
}
 801dfc4:	4618      	mov	r0, r3
 801dfc6:	3718      	adds	r7, #24
 801dfc8:	46bd      	mov	sp, r7
 801dfca:	bd80      	pop	{r7, pc}

0801dfcc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801dfcc:	b580      	push	{r7, lr}
 801dfce:	b08a      	sub	sp, #40	; 0x28
 801dfd0:	af00      	add	r7, sp, #0
 801dfd2:	60f8      	str	r0, [r7, #12]
 801dfd4:	60b9      	str	r1, [r7, #8]
 801dfd6:	607a      	str	r2, [r7, #4]
 801dfd8:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801dfda:	2301      	movs	r3, #1
 801dfdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801dfde:	2300      	movs	r3, #0
 801dfe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801dfe4:	68fb      	ldr	r3, [r7, #12]
 801dfe6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801dfea:	2b01      	cmp	r3, #1
 801dfec:	d101      	bne.n	801dff2 <HAL_SPI_TransmitReceive+0x26>
 801dfee:	2302      	movs	r3, #2
 801dff0:	e1fb      	b.n	801e3ea <HAL_SPI_TransmitReceive+0x41e>
 801dff2:	68fb      	ldr	r3, [r7, #12]
 801dff4:	2201      	movs	r2, #1
 801dff6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801dffa:	f7fb f8cb 	bl	8019194 <HAL_GetTick>
 801dffe:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e006:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801e008:	68fb      	ldr	r3, [r7, #12]
 801e00a:	685b      	ldr	r3, [r3, #4]
 801e00c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801e00e:	887b      	ldrh	r3, [r7, #2]
 801e010:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801e012:	887b      	ldrh	r3, [r7, #2]
 801e014:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801e016:	7efb      	ldrb	r3, [r7, #27]
 801e018:	2b01      	cmp	r3, #1
 801e01a:	d00e      	beq.n	801e03a <HAL_SPI_TransmitReceive+0x6e>
 801e01c:	697b      	ldr	r3, [r7, #20]
 801e01e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e022:	d106      	bne.n	801e032 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801e024:	68fb      	ldr	r3, [r7, #12]
 801e026:	689b      	ldr	r3, [r3, #8]
 801e028:	2b00      	cmp	r3, #0
 801e02a:	d102      	bne.n	801e032 <HAL_SPI_TransmitReceive+0x66>
 801e02c:	7efb      	ldrb	r3, [r7, #27]
 801e02e:	2b04      	cmp	r3, #4
 801e030:	d003      	beq.n	801e03a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801e032:	2302      	movs	r3, #2
 801e034:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e038:	e1cd      	b.n	801e3d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801e03a:	68bb      	ldr	r3, [r7, #8]
 801e03c:	2b00      	cmp	r3, #0
 801e03e:	d005      	beq.n	801e04c <HAL_SPI_TransmitReceive+0x80>
 801e040:	687b      	ldr	r3, [r7, #4]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d002      	beq.n	801e04c <HAL_SPI_TransmitReceive+0x80>
 801e046:	887b      	ldrh	r3, [r7, #2]
 801e048:	2b00      	cmp	r3, #0
 801e04a:	d103      	bne.n	801e054 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801e04c:	2301      	movs	r3, #1
 801e04e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801e052:	e1c0      	b.n	801e3d6 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e054:	68fb      	ldr	r3, [r7, #12]
 801e056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801e05a:	b2db      	uxtb	r3, r3
 801e05c:	2b04      	cmp	r3, #4
 801e05e:	d003      	beq.n	801e068 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801e060:	68fb      	ldr	r3, [r7, #12]
 801e062:	2205      	movs	r2, #5
 801e064:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801e068:	68fb      	ldr	r3, [r7, #12]
 801e06a:	2200      	movs	r2, #0
 801e06c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801e06e:	68fb      	ldr	r3, [r7, #12]
 801e070:	687a      	ldr	r2, [r7, #4]
 801e072:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801e074:	68fb      	ldr	r3, [r7, #12]
 801e076:	887a      	ldrh	r2, [r7, #2]
 801e078:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801e07c:	68fb      	ldr	r3, [r7, #12]
 801e07e:	887a      	ldrh	r2, [r7, #2]
 801e080:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801e084:	68fb      	ldr	r3, [r7, #12]
 801e086:	68ba      	ldr	r2, [r7, #8]
 801e088:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801e08a:	68fb      	ldr	r3, [r7, #12]
 801e08c:	887a      	ldrh	r2, [r7, #2]
 801e08e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801e090:	68fb      	ldr	r3, [r7, #12]
 801e092:	887a      	ldrh	r2, [r7, #2]
 801e094:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801e096:	68fb      	ldr	r3, [r7, #12]
 801e098:	2200      	movs	r2, #0
 801e09a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801e09c:	68fb      	ldr	r3, [r7, #12]
 801e09e:	2200      	movs	r2, #0
 801e0a0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801e0a2:	68fb      	ldr	r3, [r7, #12]
 801e0a4:	68db      	ldr	r3, [r3, #12]
 801e0a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e0aa:	d802      	bhi.n	801e0b2 <HAL_SPI_TransmitReceive+0xe6>
 801e0ac:	8a3b      	ldrh	r3, [r7, #16]
 801e0ae:	2b01      	cmp	r3, #1
 801e0b0:	d908      	bls.n	801e0c4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e0b2:	68fb      	ldr	r3, [r7, #12]
 801e0b4:	681b      	ldr	r3, [r3, #0]
 801e0b6:	685a      	ldr	r2, [r3, #4]
 801e0b8:	68fb      	ldr	r3, [r7, #12]
 801e0ba:	681b      	ldr	r3, [r3, #0]
 801e0bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801e0c0:	605a      	str	r2, [r3, #4]
 801e0c2:	e007      	b.n	801e0d4 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e0c4:	68fb      	ldr	r3, [r7, #12]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	685a      	ldr	r2, [r3, #4]
 801e0ca:	68fb      	ldr	r3, [r7, #12]
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e0d2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801e0d4:	68fb      	ldr	r3, [r7, #12]
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	681b      	ldr	r3, [r3, #0]
 801e0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801e0de:	2b40      	cmp	r3, #64	; 0x40
 801e0e0:	d007      	beq.n	801e0f2 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801e0e2:	68fb      	ldr	r3, [r7, #12]
 801e0e4:	681b      	ldr	r3, [r3, #0]
 801e0e6:	681a      	ldr	r2, [r3, #0]
 801e0e8:	68fb      	ldr	r3, [r7, #12]
 801e0ea:	681b      	ldr	r3, [r3, #0]
 801e0ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801e0f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e0f2:	68fb      	ldr	r3, [r7, #12]
 801e0f4:	68db      	ldr	r3, [r3, #12]
 801e0f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801e0fa:	d97c      	bls.n	801e1f6 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e0fc:	68fb      	ldr	r3, [r7, #12]
 801e0fe:	685b      	ldr	r3, [r3, #4]
 801e100:	2b00      	cmp	r3, #0
 801e102:	d002      	beq.n	801e10a <HAL_SPI_TransmitReceive+0x13e>
 801e104:	8a7b      	ldrh	r3, [r7, #18]
 801e106:	2b01      	cmp	r3, #1
 801e108:	d169      	bne.n	801e1de <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e10e:	881a      	ldrh	r2, [r3, #0]
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	681b      	ldr	r3, [r3, #0]
 801e114:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e11a:	1c9a      	adds	r2, r3, #2
 801e11c:	68fb      	ldr	r3, [r7, #12]
 801e11e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801e120:	68fb      	ldr	r3, [r7, #12]
 801e122:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e124:	b29b      	uxth	r3, r3
 801e126:	3b01      	subs	r3, #1
 801e128:	b29a      	uxth	r2, r3
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e12e:	e056      	b.n	801e1de <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	681b      	ldr	r3, [r3, #0]
 801e134:	689b      	ldr	r3, [r3, #8]
 801e136:	f003 0302 	and.w	r3, r3, #2
 801e13a:	2b02      	cmp	r3, #2
 801e13c:	d11b      	bne.n	801e176 <HAL_SPI_TransmitReceive+0x1aa>
 801e13e:	68fb      	ldr	r3, [r7, #12]
 801e140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e142:	b29b      	uxth	r3, r3
 801e144:	2b00      	cmp	r3, #0
 801e146:	d016      	beq.n	801e176 <HAL_SPI_TransmitReceive+0x1aa>
 801e148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e14a:	2b01      	cmp	r3, #1
 801e14c:	d113      	bne.n	801e176 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e14e:	68fb      	ldr	r3, [r7, #12]
 801e150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e152:	881a      	ldrh	r2, [r3, #0]
 801e154:	68fb      	ldr	r3, [r7, #12]
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e15a:	68fb      	ldr	r3, [r7, #12]
 801e15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e15e:	1c9a      	adds	r2, r3, #2
 801e160:	68fb      	ldr	r3, [r7, #12]
 801e162:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e164:	68fb      	ldr	r3, [r7, #12]
 801e166:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e168:	b29b      	uxth	r3, r3
 801e16a:	3b01      	subs	r3, #1
 801e16c:	b29a      	uxth	r2, r3
 801e16e:	68fb      	ldr	r3, [r7, #12]
 801e170:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e172:	2300      	movs	r3, #0
 801e174:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e176:	68fb      	ldr	r3, [r7, #12]
 801e178:	681b      	ldr	r3, [r3, #0]
 801e17a:	689b      	ldr	r3, [r3, #8]
 801e17c:	f003 0301 	and.w	r3, r3, #1
 801e180:	2b01      	cmp	r3, #1
 801e182:	d11c      	bne.n	801e1be <HAL_SPI_TransmitReceive+0x1f2>
 801e184:	68fb      	ldr	r3, [r7, #12]
 801e186:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e18a:	b29b      	uxth	r3, r3
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d016      	beq.n	801e1be <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e190:	68fb      	ldr	r3, [r7, #12]
 801e192:	681b      	ldr	r3, [r3, #0]
 801e194:	68da      	ldr	r2, [r3, #12]
 801e196:	68fb      	ldr	r3, [r7, #12]
 801e198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e19a:	b292      	uxth	r2, r2
 801e19c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801e19e:	68fb      	ldr	r3, [r7, #12]
 801e1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e1a2:	1c9a      	adds	r2, r3, #2
 801e1a4:	68fb      	ldr	r3, [r7, #12]
 801e1a6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801e1a8:	68fb      	ldr	r3, [r7, #12]
 801e1aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e1ae:	b29b      	uxth	r3, r3
 801e1b0:	3b01      	subs	r3, #1
 801e1b2:	b29a      	uxth	r2, r3
 801e1b4:	68fb      	ldr	r3, [r7, #12]
 801e1b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e1ba:	2301      	movs	r3, #1
 801e1bc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801e1be:	f7fa ffe9 	bl	8019194 <HAL_GetTick>
 801e1c2:	4602      	mov	r2, r0
 801e1c4:	69fb      	ldr	r3, [r7, #28]
 801e1c6:	1ad3      	subs	r3, r2, r3
 801e1c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e1ca:	429a      	cmp	r2, r3
 801e1cc:	d807      	bhi.n	801e1de <HAL_SPI_TransmitReceive+0x212>
 801e1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e1d4:	d003      	beq.n	801e1de <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801e1d6:	2303      	movs	r3, #3
 801e1d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e1dc:	e0fb      	b.n	801e3d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e1e2:	b29b      	uxth	r3, r3
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d1a3      	bne.n	801e130 <HAL_SPI_TransmitReceive+0x164>
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e1ee:	b29b      	uxth	r3, r3
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d19d      	bne.n	801e130 <HAL_SPI_TransmitReceive+0x164>
 801e1f4:	e0df      	b.n	801e3b6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	685b      	ldr	r3, [r3, #4]
 801e1fa:	2b00      	cmp	r3, #0
 801e1fc:	d003      	beq.n	801e206 <HAL_SPI_TransmitReceive+0x23a>
 801e1fe:	8a7b      	ldrh	r3, [r7, #18]
 801e200:	2b01      	cmp	r3, #1
 801e202:	f040 80cb 	bne.w	801e39c <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e20a:	b29b      	uxth	r3, r3
 801e20c:	2b01      	cmp	r3, #1
 801e20e:	d912      	bls.n	801e236 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e210:	68fb      	ldr	r3, [r7, #12]
 801e212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e214:	881a      	ldrh	r2, [r3, #0]
 801e216:	68fb      	ldr	r3, [r7, #12]
 801e218:	681b      	ldr	r3, [r3, #0]
 801e21a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801e21c:	68fb      	ldr	r3, [r7, #12]
 801e21e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e220:	1c9a      	adds	r2, r3, #2
 801e222:	68fb      	ldr	r3, [r7, #12]
 801e224:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801e226:	68fb      	ldr	r3, [r7, #12]
 801e228:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e22a:	b29b      	uxth	r3, r3
 801e22c:	3b02      	subs	r3, #2
 801e22e:	b29a      	uxth	r2, r3
 801e230:	68fb      	ldr	r3, [r7, #12]
 801e232:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e234:	e0b2      	b.n	801e39c <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e236:	68fb      	ldr	r3, [r7, #12]
 801e238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	681b      	ldr	r3, [r3, #0]
 801e23e:	330c      	adds	r3, #12
 801e240:	7812      	ldrb	r2, [r2, #0]
 801e242:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e248:	1c5a      	adds	r2, r3, #1
 801e24a:	68fb      	ldr	r3, [r7, #12]
 801e24c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801e24e:	68fb      	ldr	r3, [r7, #12]
 801e250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e252:	b29b      	uxth	r3, r3
 801e254:	3b01      	subs	r3, #1
 801e256:	b29a      	uxth	r2, r3
 801e258:	68fb      	ldr	r3, [r7, #12]
 801e25a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e25c:	e09e      	b.n	801e39c <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801e25e:	68fb      	ldr	r3, [r7, #12]
 801e260:	681b      	ldr	r3, [r3, #0]
 801e262:	689b      	ldr	r3, [r3, #8]
 801e264:	f003 0302 	and.w	r3, r3, #2
 801e268:	2b02      	cmp	r3, #2
 801e26a:	d134      	bne.n	801e2d6 <HAL_SPI_TransmitReceive+0x30a>
 801e26c:	68fb      	ldr	r3, [r7, #12]
 801e26e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e270:	b29b      	uxth	r3, r3
 801e272:	2b00      	cmp	r3, #0
 801e274:	d02f      	beq.n	801e2d6 <HAL_SPI_TransmitReceive+0x30a>
 801e276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e278:	2b01      	cmp	r3, #1
 801e27a:	d12c      	bne.n	801e2d6 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801e27c:	68fb      	ldr	r3, [r7, #12]
 801e27e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e280:	b29b      	uxth	r3, r3
 801e282:	2b01      	cmp	r3, #1
 801e284:	d912      	bls.n	801e2ac <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801e286:	68fb      	ldr	r3, [r7, #12]
 801e288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e28a:	881a      	ldrh	r2, [r3, #0]
 801e28c:	68fb      	ldr	r3, [r7, #12]
 801e28e:	681b      	ldr	r3, [r3, #0]
 801e290:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801e292:	68fb      	ldr	r3, [r7, #12]
 801e294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e296:	1c9a      	adds	r2, r3, #2
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801e29c:	68fb      	ldr	r3, [r7, #12]
 801e29e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e2a0:	b29b      	uxth	r3, r3
 801e2a2:	3b02      	subs	r3, #2
 801e2a4:	b29a      	uxth	r2, r3
 801e2a6:	68fb      	ldr	r3, [r7, #12]
 801e2a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 801e2aa:	e012      	b.n	801e2d2 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801e2ac:	68fb      	ldr	r3, [r7, #12]
 801e2ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801e2b0:	68fb      	ldr	r3, [r7, #12]
 801e2b2:	681b      	ldr	r3, [r3, #0]
 801e2b4:	330c      	adds	r3, #12
 801e2b6:	7812      	ldrb	r2, [r2, #0]
 801e2b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801e2ba:	68fb      	ldr	r3, [r7, #12]
 801e2bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e2be:	1c5a      	adds	r2, r3, #1
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801e2c4:	68fb      	ldr	r3, [r7, #12]
 801e2c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e2c8:	b29b      	uxth	r3, r3
 801e2ca:	3b01      	subs	r3, #1
 801e2cc:	b29a      	uxth	r2, r3
 801e2ce:	68fb      	ldr	r3, [r7, #12]
 801e2d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801e2d2:	2300      	movs	r3, #0
 801e2d4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801e2d6:	68fb      	ldr	r3, [r7, #12]
 801e2d8:	681b      	ldr	r3, [r3, #0]
 801e2da:	689b      	ldr	r3, [r3, #8]
 801e2dc:	f003 0301 	and.w	r3, r3, #1
 801e2e0:	2b01      	cmp	r3, #1
 801e2e2:	d148      	bne.n	801e376 <HAL_SPI_TransmitReceive+0x3aa>
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2ea:	b29b      	uxth	r3, r3
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d042      	beq.n	801e376 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801e2f0:	68fb      	ldr	r3, [r7, #12]
 801e2f2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e2f6:	b29b      	uxth	r3, r3
 801e2f8:	2b01      	cmp	r3, #1
 801e2fa:	d923      	bls.n	801e344 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801e2fc:	68fb      	ldr	r3, [r7, #12]
 801e2fe:	681b      	ldr	r3, [r3, #0]
 801e300:	68da      	ldr	r2, [r3, #12]
 801e302:	68fb      	ldr	r3, [r7, #12]
 801e304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e306:	b292      	uxth	r2, r2
 801e308:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e30a:	68fb      	ldr	r3, [r7, #12]
 801e30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e30e:	1c9a      	adds	r2, r3, #2
 801e310:	68fb      	ldr	r3, [r7, #12]
 801e312:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801e314:	68fb      	ldr	r3, [r7, #12]
 801e316:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e31a:	b29b      	uxth	r3, r3
 801e31c:	3b02      	subs	r3, #2
 801e31e:	b29a      	uxth	r2, r3
 801e320:	68fb      	ldr	r3, [r7, #12]
 801e322:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801e326:	68fb      	ldr	r3, [r7, #12]
 801e328:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e32c:	b29b      	uxth	r3, r3
 801e32e:	2b01      	cmp	r3, #1
 801e330:	d81f      	bhi.n	801e372 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801e332:	68fb      	ldr	r3, [r7, #12]
 801e334:	681b      	ldr	r3, [r3, #0]
 801e336:	685a      	ldr	r2, [r3, #4]
 801e338:	68fb      	ldr	r3, [r7, #12]
 801e33a:	681b      	ldr	r3, [r3, #0]
 801e33c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801e340:	605a      	str	r2, [r3, #4]
 801e342:	e016      	b.n	801e372 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801e344:	68fb      	ldr	r3, [r7, #12]
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	f103 020c 	add.w	r2, r3, #12
 801e34c:	68fb      	ldr	r3, [r7, #12]
 801e34e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e350:	7812      	ldrb	r2, [r2, #0]
 801e352:	b2d2      	uxtb	r2, r2
 801e354:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801e356:	68fb      	ldr	r3, [r7, #12]
 801e358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801e35a:	1c5a      	adds	r2, r3, #1
 801e35c:	68fb      	ldr	r3, [r7, #12]
 801e35e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801e360:	68fb      	ldr	r3, [r7, #12]
 801e362:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e366:	b29b      	uxth	r3, r3
 801e368:	3b01      	subs	r3, #1
 801e36a:	b29a      	uxth	r2, r3
 801e36c:	68fb      	ldr	r3, [r7, #12]
 801e36e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801e372:	2301      	movs	r3, #1
 801e374:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801e376:	f7fa ff0d 	bl	8019194 <HAL_GetTick>
 801e37a:	4602      	mov	r2, r0
 801e37c:	69fb      	ldr	r3, [r7, #28]
 801e37e:	1ad3      	subs	r3, r2, r3
 801e380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e382:	429a      	cmp	r2, r3
 801e384:	d803      	bhi.n	801e38e <HAL_SPI_TransmitReceive+0x3c2>
 801e386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e388:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e38c:	d102      	bne.n	801e394 <HAL_SPI_TransmitReceive+0x3c8>
 801e38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e390:	2b00      	cmp	r3, #0
 801e392:	d103      	bne.n	801e39c <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801e394:	2303      	movs	r3, #3
 801e396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801e39a:	e01c      	b.n	801e3d6 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801e39c:	68fb      	ldr	r3, [r7, #12]
 801e39e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801e3a0:	b29b      	uxth	r3, r3
 801e3a2:	2b00      	cmp	r3, #0
 801e3a4:	f47f af5b 	bne.w	801e25e <HAL_SPI_TransmitReceive+0x292>
 801e3a8:	68fb      	ldr	r3, [r7, #12]
 801e3aa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801e3ae:	b29b      	uxth	r3, r3
 801e3b0:	2b00      	cmp	r3, #0
 801e3b2:	f47f af54 	bne.w	801e25e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801e3b6:	69fa      	ldr	r2, [r7, #28]
 801e3b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e3ba:	68f8      	ldr	r0, [r7, #12]
 801e3bc:	f000 f9b4 	bl	801e728 <SPI_EndRxTxTransaction>
 801e3c0:	4603      	mov	r3, r0
 801e3c2:	2b00      	cmp	r3, #0
 801e3c4:	d006      	beq.n	801e3d4 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801e3c6:	2301      	movs	r3, #1
 801e3c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801e3cc:	68fb      	ldr	r3, [r7, #12]
 801e3ce:	2220      	movs	r2, #32
 801e3d0:	661a      	str	r2, [r3, #96]	; 0x60
 801e3d2:	e000      	b.n	801e3d6 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801e3d4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801e3d6:	68fb      	ldr	r3, [r7, #12]
 801e3d8:	2201      	movs	r2, #1
 801e3da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801e3de:	68fb      	ldr	r3, [r7, #12]
 801e3e0:	2200      	movs	r2, #0
 801e3e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801e3e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801e3ea:	4618      	mov	r0, r3
 801e3ec:	3728      	adds	r7, #40	; 0x28
 801e3ee:	46bd      	mov	sp, r7
 801e3f0:	bd80      	pop	{r7, pc}
	...

0801e3f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e3f4:	b580      	push	{r7, lr}
 801e3f6:	b088      	sub	sp, #32
 801e3f8:	af00      	add	r7, sp, #0
 801e3fa:	60f8      	str	r0, [r7, #12]
 801e3fc:	60b9      	str	r1, [r7, #8]
 801e3fe:	603b      	str	r3, [r7, #0]
 801e400:	4613      	mov	r3, r2
 801e402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801e404:	f7fa fec6 	bl	8019194 <HAL_GetTick>
 801e408:	4602      	mov	r2, r0
 801e40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e40c:	1a9b      	subs	r3, r3, r2
 801e40e:	683a      	ldr	r2, [r7, #0]
 801e410:	4413      	add	r3, r2
 801e412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801e414:	f7fa febe 	bl	8019194 <HAL_GetTick>
 801e418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801e41a:	4b39      	ldr	r3, [pc, #228]	; (801e500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801e41c:	681b      	ldr	r3, [r3, #0]
 801e41e:	015b      	lsls	r3, r3, #5
 801e420:	0d1b      	lsrs	r3, r3, #20
 801e422:	69fa      	ldr	r2, [r7, #28]
 801e424:	fb02 f303 	mul.w	r3, r2, r3
 801e428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e42a:	e054      	b.n	801e4d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801e42c:	683b      	ldr	r3, [r7, #0]
 801e42e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e432:	d050      	beq.n	801e4d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e434:	f7fa feae 	bl	8019194 <HAL_GetTick>
 801e438:	4602      	mov	r2, r0
 801e43a:	69bb      	ldr	r3, [r7, #24]
 801e43c:	1ad3      	subs	r3, r2, r3
 801e43e:	69fa      	ldr	r2, [r7, #28]
 801e440:	429a      	cmp	r2, r3
 801e442:	d902      	bls.n	801e44a <SPI_WaitFlagStateUntilTimeout+0x56>
 801e444:	69fb      	ldr	r3, [r7, #28]
 801e446:	2b00      	cmp	r3, #0
 801e448:	d13d      	bne.n	801e4c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e44a:	68fb      	ldr	r3, [r7, #12]
 801e44c:	681b      	ldr	r3, [r3, #0]
 801e44e:	685a      	ldr	r2, [r3, #4]
 801e450:	68fb      	ldr	r3, [r7, #12]
 801e452:	681b      	ldr	r3, [r3, #0]
 801e454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e45a:	68fb      	ldr	r3, [r7, #12]
 801e45c:	685b      	ldr	r3, [r3, #4]
 801e45e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e462:	d111      	bne.n	801e488 <SPI_WaitFlagStateUntilTimeout+0x94>
 801e464:	68fb      	ldr	r3, [r7, #12]
 801e466:	689b      	ldr	r3, [r3, #8]
 801e468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e46c:	d004      	beq.n	801e478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e46e:	68fb      	ldr	r3, [r7, #12]
 801e470:	689b      	ldr	r3, [r3, #8]
 801e472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e476:	d107      	bne.n	801e488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e478:	68fb      	ldr	r3, [r7, #12]
 801e47a:	681b      	ldr	r3, [r3, #0]
 801e47c:	681a      	ldr	r2, [r3, #0]
 801e47e:	68fb      	ldr	r3, [r7, #12]
 801e480:	681b      	ldr	r3, [r3, #0]
 801e482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e488:	68fb      	ldr	r3, [r7, #12]
 801e48a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e490:	d10f      	bne.n	801e4b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	681b      	ldr	r3, [r3, #0]
 801e496:	681a      	ldr	r2, [r3, #0]
 801e498:	68fb      	ldr	r3, [r7, #12]
 801e49a:	681b      	ldr	r3, [r3, #0]
 801e49c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e4a0:	601a      	str	r2, [r3, #0]
 801e4a2:	68fb      	ldr	r3, [r7, #12]
 801e4a4:	681b      	ldr	r3, [r3, #0]
 801e4a6:	681a      	ldr	r2, [r3, #0]
 801e4a8:	68fb      	ldr	r3, [r7, #12]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e4b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e4b2:	68fb      	ldr	r3, [r7, #12]
 801e4b4:	2201      	movs	r2, #1
 801e4b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	2200      	movs	r2, #0
 801e4be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e4c2:	2303      	movs	r3, #3
 801e4c4:	e017      	b.n	801e4f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e4c6:	697b      	ldr	r3, [r7, #20]
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d101      	bne.n	801e4d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801e4cc:	2300      	movs	r3, #0
 801e4ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801e4d0:	697b      	ldr	r3, [r7, #20]
 801e4d2:	3b01      	subs	r3, #1
 801e4d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801e4d6:	68fb      	ldr	r3, [r7, #12]
 801e4d8:	681b      	ldr	r3, [r3, #0]
 801e4da:	689a      	ldr	r2, [r3, #8]
 801e4dc:	68bb      	ldr	r3, [r7, #8]
 801e4de:	4013      	ands	r3, r2
 801e4e0:	68ba      	ldr	r2, [r7, #8]
 801e4e2:	429a      	cmp	r2, r3
 801e4e4:	bf0c      	ite	eq
 801e4e6:	2301      	moveq	r3, #1
 801e4e8:	2300      	movne	r3, #0
 801e4ea:	b2db      	uxtb	r3, r3
 801e4ec:	461a      	mov	r2, r3
 801e4ee:	79fb      	ldrb	r3, [r7, #7]
 801e4f0:	429a      	cmp	r2, r3
 801e4f2:	d19b      	bne.n	801e42c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801e4f4:	2300      	movs	r3, #0
}
 801e4f6:	4618      	mov	r0, r3
 801e4f8:	3720      	adds	r7, #32
 801e4fa:	46bd      	mov	sp, r7
 801e4fc:	bd80      	pop	{r7, pc}
 801e4fe:	bf00      	nop
 801e500:	2000031c 	.word	0x2000031c

0801e504 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801e504:	b580      	push	{r7, lr}
 801e506:	b08a      	sub	sp, #40	; 0x28
 801e508:	af00      	add	r7, sp, #0
 801e50a:	60f8      	str	r0, [r7, #12]
 801e50c:	60b9      	str	r1, [r7, #8]
 801e50e:	607a      	str	r2, [r7, #4]
 801e510:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801e512:	2300      	movs	r3, #0
 801e514:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801e516:	f7fa fe3d 	bl	8019194 <HAL_GetTick>
 801e51a:	4602      	mov	r2, r0
 801e51c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801e51e:	1a9b      	subs	r3, r3, r2
 801e520:	683a      	ldr	r2, [r7, #0]
 801e522:	4413      	add	r3, r2
 801e524:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801e526:	f7fa fe35 	bl	8019194 <HAL_GetTick>
 801e52a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801e52c:	68fb      	ldr	r3, [r7, #12]
 801e52e:	681b      	ldr	r3, [r3, #0]
 801e530:	330c      	adds	r3, #12
 801e532:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801e534:	4b3d      	ldr	r3, [pc, #244]	; (801e62c <SPI_WaitFifoStateUntilTimeout+0x128>)
 801e536:	681a      	ldr	r2, [r3, #0]
 801e538:	4613      	mov	r3, r2
 801e53a:	009b      	lsls	r3, r3, #2
 801e53c:	4413      	add	r3, r2
 801e53e:	00da      	lsls	r2, r3, #3
 801e540:	1ad3      	subs	r3, r2, r3
 801e542:	0d1b      	lsrs	r3, r3, #20
 801e544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e546:	fb02 f303 	mul.w	r3, r2, r3
 801e54a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801e54c:	e060      	b.n	801e610 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801e54e:	68bb      	ldr	r3, [r7, #8]
 801e550:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801e554:	d107      	bne.n	801e566 <SPI_WaitFifoStateUntilTimeout+0x62>
 801e556:	687b      	ldr	r3, [r7, #4]
 801e558:	2b00      	cmp	r3, #0
 801e55a:	d104      	bne.n	801e566 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801e55c:	69fb      	ldr	r3, [r7, #28]
 801e55e:	781b      	ldrb	r3, [r3, #0]
 801e560:	b2db      	uxtb	r3, r3
 801e562:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801e564:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801e566:	683b      	ldr	r3, [r7, #0]
 801e568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801e56c:	d050      	beq.n	801e610 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801e56e:	f7fa fe11 	bl	8019194 <HAL_GetTick>
 801e572:	4602      	mov	r2, r0
 801e574:	6a3b      	ldr	r3, [r7, #32]
 801e576:	1ad3      	subs	r3, r2, r3
 801e578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e57a:	429a      	cmp	r2, r3
 801e57c:	d902      	bls.n	801e584 <SPI_WaitFifoStateUntilTimeout+0x80>
 801e57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e580:	2b00      	cmp	r3, #0
 801e582:	d13d      	bne.n	801e600 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801e584:	68fb      	ldr	r3, [r7, #12]
 801e586:	681b      	ldr	r3, [r3, #0]
 801e588:	685a      	ldr	r2, [r3, #4]
 801e58a:	68fb      	ldr	r3, [r7, #12]
 801e58c:	681b      	ldr	r3, [r3, #0]
 801e58e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801e592:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e594:	68fb      	ldr	r3, [r7, #12]
 801e596:	685b      	ldr	r3, [r3, #4]
 801e598:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e59c:	d111      	bne.n	801e5c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 801e59e:	68fb      	ldr	r3, [r7, #12]
 801e5a0:	689b      	ldr	r3, [r3, #8]
 801e5a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e5a6:	d004      	beq.n	801e5b2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e5a8:	68fb      	ldr	r3, [r7, #12]
 801e5aa:	689b      	ldr	r3, [r3, #8]
 801e5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e5b0:	d107      	bne.n	801e5c2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	681a      	ldr	r2, [r3, #0]
 801e5b8:	68fb      	ldr	r3, [r7, #12]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e5c0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801e5c2:	68fb      	ldr	r3, [r7, #12]
 801e5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801e5ca:	d10f      	bne.n	801e5ec <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	681a      	ldr	r2, [r3, #0]
 801e5d2:	68fb      	ldr	r3, [r7, #12]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801e5da:	601a      	str	r2, [r3, #0]
 801e5dc:	68fb      	ldr	r3, [r7, #12]
 801e5de:	681b      	ldr	r3, [r3, #0]
 801e5e0:	681a      	ldr	r2, [r3, #0]
 801e5e2:	68fb      	ldr	r3, [r7, #12]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801e5ea:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801e5ec:	68fb      	ldr	r3, [r7, #12]
 801e5ee:	2201      	movs	r2, #1
 801e5f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801e5f4:	68fb      	ldr	r3, [r7, #12]
 801e5f6:	2200      	movs	r2, #0
 801e5f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801e5fc:	2303      	movs	r3, #3
 801e5fe:	e010      	b.n	801e622 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801e600:	69bb      	ldr	r3, [r7, #24]
 801e602:	2b00      	cmp	r3, #0
 801e604:	d101      	bne.n	801e60a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801e606:	2300      	movs	r3, #0
 801e608:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801e60a:	69bb      	ldr	r3, [r7, #24]
 801e60c:	3b01      	subs	r3, #1
 801e60e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	689a      	ldr	r2, [r3, #8]
 801e616:	68bb      	ldr	r3, [r7, #8]
 801e618:	4013      	ands	r3, r2
 801e61a:	687a      	ldr	r2, [r7, #4]
 801e61c:	429a      	cmp	r2, r3
 801e61e:	d196      	bne.n	801e54e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801e620:	2300      	movs	r3, #0
}
 801e622:	4618      	mov	r0, r3
 801e624:	3728      	adds	r7, #40	; 0x28
 801e626:	46bd      	mov	sp, r7
 801e628:	bd80      	pop	{r7, pc}
 801e62a:	bf00      	nop
 801e62c:	2000031c 	.word	0x2000031c

0801e630 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801e630:	b580      	push	{r7, lr}
 801e632:	b088      	sub	sp, #32
 801e634:	af02      	add	r7, sp, #8
 801e636:	60f8      	str	r0, [r7, #12]
 801e638:	60b9      	str	r1, [r7, #8]
 801e63a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e63c:	68fb      	ldr	r3, [r7, #12]
 801e63e:	685b      	ldr	r3, [r3, #4]
 801e640:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e644:	d111      	bne.n	801e66a <SPI_EndRxTransaction+0x3a>
 801e646:	68fb      	ldr	r3, [r7, #12]
 801e648:	689b      	ldr	r3, [r3, #8]
 801e64a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e64e:	d004      	beq.n	801e65a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e650:	68fb      	ldr	r3, [r7, #12]
 801e652:	689b      	ldr	r3, [r3, #8]
 801e654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e658:	d107      	bne.n	801e66a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801e65a:	68fb      	ldr	r3, [r7, #12]
 801e65c:	681b      	ldr	r3, [r3, #0]
 801e65e:	681a      	ldr	r2, [r3, #0]
 801e660:	68fb      	ldr	r3, [r7, #12]
 801e662:	681b      	ldr	r3, [r3, #0]
 801e664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801e668:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e66a:	68fb      	ldr	r3, [r7, #12]
 801e66c:	685b      	ldr	r3, [r3, #4]
 801e66e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e672:	d112      	bne.n	801e69a <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e674:	687b      	ldr	r3, [r7, #4]
 801e676:	9300      	str	r3, [sp, #0]
 801e678:	68bb      	ldr	r3, [r7, #8]
 801e67a:	2200      	movs	r2, #0
 801e67c:	2180      	movs	r1, #128	; 0x80
 801e67e:	68f8      	ldr	r0, [r7, #12]
 801e680:	f7ff feb8 	bl	801e3f4 <SPI_WaitFlagStateUntilTimeout>
 801e684:	4603      	mov	r3, r0
 801e686:	2b00      	cmp	r3, #0
 801e688:	d021      	beq.n	801e6ce <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e68a:	68fb      	ldr	r3, [r7, #12]
 801e68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e68e:	f043 0220 	orr.w	r2, r3, #32
 801e692:	68fb      	ldr	r3, [r7, #12]
 801e694:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e696:	2303      	movs	r3, #3
 801e698:	e03d      	b.n	801e716 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801e69a:	4b21      	ldr	r3, [pc, #132]	; (801e720 <SPI_EndRxTransaction+0xf0>)
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	4a21      	ldr	r2, [pc, #132]	; (801e724 <SPI_EndRxTransaction+0xf4>)
 801e6a0:	fba2 2303 	umull	r2, r3, r2, r3
 801e6a4:	0d5b      	lsrs	r3, r3, #21
 801e6a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e6aa:	fb02 f303 	mul.w	r3, r2, r3
 801e6ae:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801e6b0:	697b      	ldr	r3, [r7, #20]
 801e6b2:	2b00      	cmp	r3, #0
 801e6b4:	d00a      	beq.n	801e6cc <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801e6b6:	697b      	ldr	r3, [r7, #20]
 801e6b8:	3b01      	subs	r3, #1
 801e6ba:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801e6bc:	68fb      	ldr	r3, [r7, #12]
 801e6be:	681b      	ldr	r3, [r3, #0]
 801e6c0:	689b      	ldr	r3, [r3, #8]
 801e6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6c6:	2b80      	cmp	r3, #128	; 0x80
 801e6c8:	d0f2      	beq.n	801e6b0 <SPI_EndRxTransaction+0x80>
 801e6ca:	e000      	b.n	801e6ce <SPI_EndRxTransaction+0x9e>
        break;
 801e6cc:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801e6ce:	68fb      	ldr	r3, [r7, #12]
 801e6d0:	685b      	ldr	r3, [r3, #4]
 801e6d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e6d6:	d11d      	bne.n	801e714 <SPI_EndRxTransaction+0xe4>
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	689b      	ldr	r3, [r3, #8]
 801e6dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801e6e0:	d004      	beq.n	801e6ec <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801e6e2:	68fb      	ldr	r3, [r7, #12]
 801e6e4:	689b      	ldr	r3, [r3, #8]
 801e6e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801e6ea:	d113      	bne.n	801e714 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e6ec:	687b      	ldr	r3, [r7, #4]
 801e6ee:	9300      	str	r3, [sp, #0]
 801e6f0:	68bb      	ldr	r3, [r7, #8]
 801e6f2:	2200      	movs	r2, #0
 801e6f4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e6f8:	68f8      	ldr	r0, [r7, #12]
 801e6fa:	f7ff ff03 	bl	801e504 <SPI_WaitFifoStateUntilTimeout>
 801e6fe:	4603      	mov	r3, r0
 801e700:	2b00      	cmp	r3, #0
 801e702:	d007      	beq.n	801e714 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e704:	68fb      	ldr	r3, [r7, #12]
 801e706:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e708:	f043 0220 	orr.w	r2, r3, #32
 801e70c:	68fb      	ldr	r3, [r7, #12]
 801e70e:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e710:	2303      	movs	r3, #3
 801e712:	e000      	b.n	801e716 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801e714:	2300      	movs	r3, #0
}
 801e716:	4618      	mov	r0, r3
 801e718:	3718      	adds	r7, #24
 801e71a:	46bd      	mov	sp, r7
 801e71c:	bd80      	pop	{r7, pc}
 801e71e:	bf00      	nop
 801e720:	2000031c 	.word	0x2000031c
 801e724:	165e9f81 	.word	0x165e9f81

0801e728 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801e728:	b580      	push	{r7, lr}
 801e72a:	b088      	sub	sp, #32
 801e72c:	af02      	add	r7, sp, #8
 801e72e:	60f8      	str	r0, [r7, #12]
 801e730:	60b9      	str	r1, [r7, #8]
 801e732:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e734:	687b      	ldr	r3, [r7, #4]
 801e736:	9300      	str	r3, [sp, #0]
 801e738:	68bb      	ldr	r3, [r7, #8]
 801e73a:	2200      	movs	r2, #0
 801e73c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801e740:	68f8      	ldr	r0, [r7, #12]
 801e742:	f7ff fedf 	bl	801e504 <SPI_WaitFifoStateUntilTimeout>
 801e746:	4603      	mov	r3, r0
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d007      	beq.n	801e75c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e74c:	68fb      	ldr	r3, [r7, #12]
 801e74e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e750:	f043 0220 	orr.w	r2, r3, #32
 801e754:	68fb      	ldr	r3, [r7, #12]
 801e756:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e758:	2303      	movs	r3, #3
 801e75a:	e046      	b.n	801e7ea <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801e75c:	4b25      	ldr	r3, [pc, #148]	; (801e7f4 <SPI_EndRxTxTransaction+0xcc>)
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	4a25      	ldr	r2, [pc, #148]	; (801e7f8 <SPI_EndRxTxTransaction+0xd0>)
 801e762:	fba2 2303 	umull	r2, r3, r2, r3
 801e766:	0d5b      	lsrs	r3, r3, #21
 801e768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801e76c:	fb02 f303 	mul.w	r3, r2, r3
 801e770:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	685b      	ldr	r3, [r3, #4]
 801e776:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801e77a:	d112      	bne.n	801e7a2 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	9300      	str	r3, [sp, #0]
 801e780:	68bb      	ldr	r3, [r7, #8]
 801e782:	2200      	movs	r2, #0
 801e784:	2180      	movs	r1, #128	; 0x80
 801e786:	68f8      	ldr	r0, [r7, #12]
 801e788:	f7ff fe34 	bl	801e3f4 <SPI_WaitFlagStateUntilTimeout>
 801e78c:	4603      	mov	r3, r0
 801e78e:	2b00      	cmp	r3, #0
 801e790:	d016      	beq.n	801e7c0 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e792:	68fb      	ldr	r3, [r7, #12]
 801e794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e796:	f043 0220 	orr.w	r2, r3, #32
 801e79a:	68fb      	ldr	r3, [r7, #12]
 801e79c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801e79e:	2303      	movs	r3, #3
 801e7a0:	e023      	b.n	801e7ea <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801e7a2:	697b      	ldr	r3, [r7, #20]
 801e7a4:	2b00      	cmp	r3, #0
 801e7a6:	d00a      	beq.n	801e7be <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801e7a8:	697b      	ldr	r3, [r7, #20]
 801e7aa:	3b01      	subs	r3, #1
 801e7ac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	689b      	ldr	r3, [r3, #8]
 801e7b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e7b8:	2b80      	cmp	r3, #128	; 0x80
 801e7ba:	d0f2      	beq.n	801e7a2 <SPI_EndRxTxTransaction+0x7a>
 801e7bc:	e000      	b.n	801e7c0 <SPI_EndRxTxTransaction+0x98>
        break;
 801e7be:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801e7c0:	687b      	ldr	r3, [r7, #4]
 801e7c2:	9300      	str	r3, [sp, #0]
 801e7c4:	68bb      	ldr	r3, [r7, #8]
 801e7c6:	2200      	movs	r2, #0
 801e7c8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801e7cc:	68f8      	ldr	r0, [r7, #12]
 801e7ce:	f7ff fe99 	bl	801e504 <SPI_WaitFifoStateUntilTimeout>
 801e7d2:	4603      	mov	r3, r0
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	d007      	beq.n	801e7e8 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801e7dc:	f043 0220 	orr.w	r2, r3, #32
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801e7e4:	2303      	movs	r3, #3
 801e7e6:	e000      	b.n	801e7ea <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801e7e8:	2300      	movs	r3, #0
}
 801e7ea:	4618      	mov	r0, r3
 801e7ec:	3718      	adds	r7, #24
 801e7ee:	46bd      	mov	sp, r7
 801e7f0:	bd80      	pop	{r7, pc}
 801e7f2:	bf00      	nop
 801e7f4:	2000031c 	.word	0x2000031c
 801e7f8:	165e9f81 	.word	0x165e9f81

0801e7fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801e7fc:	b580      	push	{r7, lr}
 801e7fe:	b082      	sub	sp, #8
 801e800:	af00      	add	r7, sp, #0
 801e802:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	681b      	ldr	r3, [r3, #0]
 801e808:	691b      	ldr	r3, [r3, #16]
 801e80a:	f003 0302 	and.w	r3, r3, #2
 801e80e:	2b02      	cmp	r3, #2
 801e810:	d128      	bne.n	801e864 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801e812:	687b      	ldr	r3, [r7, #4]
 801e814:	681b      	ldr	r3, [r3, #0]
 801e816:	68db      	ldr	r3, [r3, #12]
 801e818:	f003 0302 	and.w	r3, r3, #2
 801e81c:	2b02      	cmp	r3, #2
 801e81e:	d121      	bne.n	801e864 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	f06f 0202 	mvn.w	r2, #2
 801e828:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801e82a:	687b      	ldr	r3, [r7, #4]
 801e82c:	2201      	movs	r2, #1
 801e82e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801e830:	687b      	ldr	r3, [r7, #4]
 801e832:	681b      	ldr	r3, [r3, #0]
 801e834:	699b      	ldr	r3, [r3, #24]
 801e836:	f003 0303 	and.w	r3, r3, #3
 801e83a:	2b00      	cmp	r3, #0
 801e83c:	d005      	beq.n	801e84a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e844:	6878      	ldr	r0, [r7, #4]
 801e846:	4798      	blx	r3
 801e848:	e009      	b.n	801e85e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e850:	6878      	ldr	r0, [r7, #4]
 801e852:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e85a:	6878      	ldr	r0, [r7, #4]
 801e85c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e85e:	687b      	ldr	r3, [r7, #4]
 801e860:	2200      	movs	r2, #0
 801e862:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801e864:	687b      	ldr	r3, [r7, #4]
 801e866:	681b      	ldr	r3, [r3, #0]
 801e868:	691b      	ldr	r3, [r3, #16]
 801e86a:	f003 0304 	and.w	r3, r3, #4
 801e86e:	2b04      	cmp	r3, #4
 801e870:	d128      	bne.n	801e8c4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801e872:	687b      	ldr	r3, [r7, #4]
 801e874:	681b      	ldr	r3, [r3, #0]
 801e876:	68db      	ldr	r3, [r3, #12]
 801e878:	f003 0304 	and.w	r3, r3, #4
 801e87c:	2b04      	cmp	r3, #4
 801e87e:	d121      	bne.n	801e8c4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	f06f 0204 	mvn.w	r2, #4
 801e888:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	2202      	movs	r2, #2
 801e88e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	699b      	ldr	r3, [r3, #24]
 801e896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e89a:	2b00      	cmp	r3, #0
 801e89c:	d005      	beq.n	801e8aa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e89e:	687b      	ldr	r3, [r7, #4]
 801e8a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e8a4:	6878      	ldr	r0, [r7, #4]
 801e8a6:	4798      	blx	r3
 801e8a8:	e009      	b.n	801e8be <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e8b0:	6878      	ldr	r0, [r7, #4]
 801e8b2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e8b4:	687b      	ldr	r3, [r7, #4]
 801e8b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e8ba:	6878      	ldr	r0, [r7, #4]
 801e8bc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e8be:	687b      	ldr	r3, [r7, #4]
 801e8c0:	2200      	movs	r2, #0
 801e8c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801e8c4:	687b      	ldr	r3, [r7, #4]
 801e8c6:	681b      	ldr	r3, [r3, #0]
 801e8c8:	691b      	ldr	r3, [r3, #16]
 801e8ca:	f003 0308 	and.w	r3, r3, #8
 801e8ce:	2b08      	cmp	r3, #8
 801e8d0:	d128      	bne.n	801e924 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	681b      	ldr	r3, [r3, #0]
 801e8d6:	68db      	ldr	r3, [r3, #12]
 801e8d8:	f003 0308 	and.w	r3, r3, #8
 801e8dc:	2b08      	cmp	r3, #8
 801e8de:	d121      	bne.n	801e924 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801e8e0:	687b      	ldr	r3, [r7, #4]
 801e8e2:	681b      	ldr	r3, [r3, #0]
 801e8e4:	f06f 0208 	mvn.w	r2, #8
 801e8e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	2204      	movs	r2, #4
 801e8ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	681b      	ldr	r3, [r3, #0]
 801e8f4:	69db      	ldr	r3, [r3, #28]
 801e8f6:	f003 0303 	and.w	r3, r3, #3
 801e8fa:	2b00      	cmp	r3, #0
 801e8fc:	d005      	beq.n	801e90a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e8fe:	687b      	ldr	r3, [r7, #4]
 801e900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e904:	6878      	ldr	r0, [r7, #4]
 801e906:	4798      	blx	r3
 801e908:	e009      	b.n	801e91e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e910:	6878      	ldr	r0, [r7, #4]
 801e912:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e91a:	6878      	ldr	r0, [r7, #4]
 801e91c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e91e:	687b      	ldr	r3, [r7, #4]
 801e920:	2200      	movs	r2, #0
 801e922:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	691b      	ldr	r3, [r3, #16]
 801e92a:	f003 0310 	and.w	r3, r3, #16
 801e92e:	2b10      	cmp	r3, #16
 801e930:	d128      	bne.n	801e984 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	681b      	ldr	r3, [r3, #0]
 801e936:	68db      	ldr	r3, [r3, #12]
 801e938:	f003 0310 	and.w	r3, r3, #16
 801e93c:	2b10      	cmp	r3, #16
 801e93e:	d121      	bne.n	801e984 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801e940:	687b      	ldr	r3, [r7, #4]
 801e942:	681b      	ldr	r3, [r3, #0]
 801e944:	f06f 0210 	mvn.w	r2, #16
 801e948:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	2208      	movs	r2, #8
 801e94e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	69db      	ldr	r3, [r3, #28]
 801e956:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801e95a:	2b00      	cmp	r3, #0
 801e95c:	d005      	beq.n	801e96a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801e964:	6878      	ldr	r0, [r7, #4]
 801e966:	4798      	blx	r3
 801e968:	e009      	b.n	801e97e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801e970:	6878      	ldr	r0, [r7, #4]
 801e972:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801e974:	687b      	ldr	r3, [r7, #4]
 801e976:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801e97a:	6878      	ldr	r0, [r7, #4]
 801e97c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	2200      	movs	r2, #0
 801e982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	681b      	ldr	r3, [r3, #0]
 801e988:	691b      	ldr	r3, [r3, #16]
 801e98a:	f003 0301 	and.w	r3, r3, #1
 801e98e:	2b01      	cmp	r3, #1
 801e990:	d110      	bne.n	801e9b4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	68db      	ldr	r3, [r3, #12]
 801e998:	f003 0301 	and.w	r3, r3, #1
 801e99c:	2b01      	cmp	r3, #1
 801e99e:	d109      	bne.n	801e9b4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	f06f 0201 	mvn.w	r2, #1
 801e9a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e9b0:	6878      	ldr	r0, [r7, #4]
 801e9b2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	681b      	ldr	r3, [r3, #0]
 801e9b8:	691b      	ldr	r3, [r3, #16]
 801e9ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e9be:	2b80      	cmp	r3, #128	; 0x80
 801e9c0:	d110      	bne.n	801e9e4 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	681b      	ldr	r3, [r3, #0]
 801e9c6:	68db      	ldr	r3, [r3, #12]
 801e9c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e9cc:	2b80      	cmp	r3, #128	; 0x80
 801e9ce:	d109      	bne.n	801e9e4 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801e9d0:	687b      	ldr	r3, [r7, #4]
 801e9d2:	681b      	ldr	r3, [r3, #0]
 801e9d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801e9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801e9da:	687b      	ldr	r3, [r7, #4]
 801e9dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801e9e0:	6878      	ldr	r0, [r7, #4]
 801e9e2:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	691b      	ldr	r3, [r3, #16]
 801e9ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801e9ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801e9f2:	d110      	bne.n	801ea16 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	681b      	ldr	r3, [r3, #0]
 801e9f8:	68db      	ldr	r3, [r3, #12]
 801e9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e9fe:	2b80      	cmp	r3, #128	; 0x80
 801ea00:	d109      	bne.n	801ea16 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801ea02:	687b      	ldr	r3, [r7, #4]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801ea0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801ea12:	6878      	ldr	r0, [r7, #4]
 801ea14:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	681b      	ldr	r3, [r3, #0]
 801ea1a:	691b      	ldr	r3, [r3, #16]
 801ea1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ea20:	2b40      	cmp	r3, #64	; 0x40
 801ea22:	d110      	bne.n	801ea46 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	68db      	ldr	r3, [r3, #12]
 801ea2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ea2e:	2b40      	cmp	r3, #64	; 0x40
 801ea30:	d109      	bne.n	801ea46 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ea3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ea42:	6878      	ldr	r0, [r7, #4]
 801ea44:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ea46:	687b      	ldr	r3, [r7, #4]
 801ea48:	681b      	ldr	r3, [r3, #0]
 801ea4a:	691b      	ldr	r3, [r3, #16]
 801ea4c:	f003 0320 	and.w	r3, r3, #32
 801ea50:	2b20      	cmp	r3, #32
 801ea52:	d110      	bne.n	801ea76 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	68db      	ldr	r3, [r3, #12]
 801ea5a:	f003 0320 	and.w	r3, r3, #32
 801ea5e:	2b20      	cmp	r3, #32
 801ea60:	d109      	bne.n	801ea76 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ea62:	687b      	ldr	r3, [r7, #4]
 801ea64:	681b      	ldr	r3, [r3, #0]
 801ea66:	f06f 0220 	mvn.w	r2, #32
 801ea6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ea72:	6878      	ldr	r0, [r7, #4]
 801ea74:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ea76:	bf00      	nop
 801ea78:	3708      	adds	r7, #8
 801ea7a:	46bd      	mov	sp, r7
 801ea7c:	bd80      	pop	{r7, pc}
	...

0801ea80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ea80:	b580      	push	{r7, lr}
 801ea82:	b082      	sub	sp, #8
 801ea84:	af00      	add	r7, sp, #0
 801ea86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ea88:	687b      	ldr	r3, [r7, #4]
 801ea8a:	2b00      	cmp	r3, #0
 801ea8c:	d101      	bne.n	801ea92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ea8e:	2301      	movs	r3, #1
 801ea90:	e04e      	b.n	801eb30 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ea92:	687b      	ldr	r3, [r7, #4]
 801ea94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d114      	bne.n	801eac4 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801eaa2:	6878      	ldr	r0, [r7, #4]
 801eaa4:	f000 fc1c 	bl	801f2e0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801eaae:	2b00      	cmp	r3, #0
 801eab0:	d103      	bne.n	801eaba <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801eab2:	687b      	ldr	r3, [r7, #4]
 801eab4:	4a20      	ldr	r2, [pc, #128]	; (801eb38 <HAL_UART_Init+0xb8>)
 801eab6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801eaba:	687b      	ldr	r3, [r7, #4]
 801eabc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801eac0:	6878      	ldr	r0, [r7, #4]
 801eac2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801eac4:	687b      	ldr	r3, [r7, #4]
 801eac6:	2224      	movs	r2, #36	; 0x24
 801eac8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	681b      	ldr	r3, [r3, #0]
 801eace:	681a      	ldr	r2, [r3, #0]
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	681b      	ldr	r3, [r3, #0]
 801ead4:	f022 0201 	bic.w	r2, r2, #1
 801ead8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801eada:	6878      	ldr	r0, [r7, #4]
 801eadc:	f000 fc46 	bl	801f36c <UART_SetConfig>
 801eae0:	4603      	mov	r3, r0
 801eae2:	2b01      	cmp	r3, #1
 801eae4:	d101      	bne.n	801eaea <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801eae6:	2301      	movs	r3, #1
 801eae8:	e022      	b.n	801eb30 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801eaee:	2b00      	cmp	r3, #0
 801eaf0:	d002      	beq.n	801eaf8 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801eaf2:	6878      	ldr	r0, [r7, #4]
 801eaf4:	f000 fe9e 	bl	801f834 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	681b      	ldr	r3, [r3, #0]
 801eafc:	685a      	ldr	r2, [r3, #4]
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	681b      	ldr	r3, [r3, #0]
 801eb02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801eb06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	689a      	ldr	r2, [r3, #8]
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801eb16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	681a      	ldr	r2, [r3, #0]
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	f042 0201 	orr.w	r2, r2, #1
 801eb26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801eb28:	6878      	ldr	r0, [r7, #4]
 801eb2a:	f000 ff25 	bl	801f978 <UART_CheckIdleState>
 801eb2e:	4603      	mov	r3, r0
}
 801eb30:	4618      	mov	r0, r3
 801eb32:	3708      	adds	r7, #8
 801eb34:	46bd      	mov	sp, r7
 801eb36:	bd80      	pop	{r7, pc}
 801eb38:	08018569 	.word	0x08018569

0801eb3c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801eb3c:	b580      	push	{r7, lr}
 801eb3e:	b08a      	sub	sp, #40	; 0x28
 801eb40:	af02      	add	r7, sp, #8
 801eb42:	60f8      	str	r0, [r7, #12]
 801eb44:	60b9      	str	r1, [r7, #8]
 801eb46:	603b      	str	r3, [r7, #0]
 801eb48:	4613      	mov	r3, r2
 801eb4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801eb50:	2b20      	cmp	r3, #32
 801eb52:	d171      	bne.n	801ec38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801eb54:	68bb      	ldr	r3, [r7, #8]
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	d002      	beq.n	801eb60 <HAL_UART_Transmit+0x24>
 801eb5a:	88fb      	ldrh	r3, [r7, #6]
 801eb5c:	2b00      	cmp	r3, #0
 801eb5e:	d101      	bne.n	801eb64 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801eb60:	2301      	movs	r3, #1
 801eb62:	e06a      	b.n	801ec3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	2200      	movs	r2, #0
 801eb68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801eb6c:	68fb      	ldr	r3, [r7, #12]
 801eb6e:	2221      	movs	r2, #33	; 0x21
 801eb70:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801eb72:	f7fa fb0f 	bl	8019194 <HAL_GetTick>
 801eb76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801eb78:	68fb      	ldr	r3, [r7, #12]
 801eb7a:	88fa      	ldrh	r2, [r7, #6]
 801eb7c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	88fa      	ldrh	r2, [r7, #6]
 801eb84:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	689b      	ldr	r3, [r3, #8]
 801eb8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801eb90:	d108      	bne.n	801eba4 <HAL_UART_Transmit+0x68>
 801eb92:	68fb      	ldr	r3, [r7, #12]
 801eb94:	691b      	ldr	r3, [r3, #16]
 801eb96:	2b00      	cmp	r3, #0
 801eb98:	d104      	bne.n	801eba4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801eb9a:	2300      	movs	r3, #0
 801eb9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801eb9e:	68bb      	ldr	r3, [r7, #8]
 801eba0:	61bb      	str	r3, [r7, #24]
 801eba2:	e003      	b.n	801ebac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801eba4:	68bb      	ldr	r3, [r7, #8]
 801eba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801eba8:	2300      	movs	r3, #0
 801ebaa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ebac:	e02c      	b.n	801ec08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	9300      	str	r3, [sp, #0]
 801ebb2:	697b      	ldr	r3, [r7, #20]
 801ebb4:	2200      	movs	r2, #0
 801ebb6:	2180      	movs	r1, #128	; 0x80
 801ebb8:	68f8      	ldr	r0, [r7, #12]
 801ebba:	f000 ff2a 	bl	801fa12 <UART_WaitOnFlagUntilTimeout>
 801ebbe:	4603      	mov	r3, r0
 801ebc0:	2b00      	cmp	r3, #0
 801ebc2:	d001      	beq.n	801ebc8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801ebc4:	2303      	movs	r3, #3
 801ebc6:	e038      	b.n	801ec3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801ebc8:	69fb      	ldr	r3, [r7, #28]
 801ebca:	2b00      	cmp	r3, #0
 801ebcc:	d10b      	bne.n	801ebe6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801ebce:	69bb      	ldr	r3, [r7, #24]
 801ebd0:	881b      	ldrh	r3, [r3, #0]
 801ebd2:	461a      	mov	r2, r3
 801ebd4:	68fb      	ldr	r3, [r7, #12]
 801ebd6:	681b      	ldr	r3, [r3, #0]
 801ebd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801ebdc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801ebde:	69bb      	ldr	r3, [r7, #24]
 801ebe0:	3302      	adds	r3, #2
 801ebe2:	61bb      	str	r3, [r7, #24]
 801ebe4:	e007      	b.n	801ebf6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801ebe6:	69fb      	ldr	r3, [r7, #28]
 801ebe8:	781a      	ldrb	r2, [r3, #0]
 801ebea:	68fb      	ldr	r3, [r7, #12]
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801ebf0:	69fb      	ldr	r3, [r7, #28]
 801ebf2:	3301      	adds	r3, #1
 801ebf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801ebf6:	68fb      	ldr	r3, [r7, #12]
 801ebf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801ebfc:	b29b      	uxth	r3, r3
 801ebfe:	3b01      	subs	r3, #1
 801ec00:	b29a      	uxth	r2, r3
 801ec02:	68fb      	ldr	r3, [r7, #12]
 801ec04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801ec08:	68fb      	ldr	r3, [r7, #12]
 801ec0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801ec0e:	b29b      	uxth	r3, r3
 801ec10:	2b00      	cmp	r3, #0
 801ec12:	d1cc      	bne.n	801ebae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801ec14:	683b      	ldr	r3, [r7, #0]
 801ec16:	9300      	str	r3, [sp, #0]
 801ec18:	697b      	ldr	r3, [r7, #20]
 801ec1a:	2200      	movs	r2, #0
 801ec1c:	2140      	movs	r1, #64	; 0x40
 801ec1e:	68f8      	ldr	r0, [r7, #12]
 801ec20:	f000 fef7 	bl	801fa12 <UART_WaitOnFlagUntilTimeout>
 801ec24:	4603      	mov	r3, r0
 801ec26:	2b00      	cmp	r3, #0
 801ec28:	d001      	beq.n	801ec2e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801ec2a:	2303      	movs	r3, #3
 801ec2c:	e005      	b.n	801ec3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801ec2e:	68fb      	ldr	r3, [r7, #12]
 801ec30:	2220      	movs	r2, #32
 801ec32:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801ec34:	2300      	movs	r3, #0
 801ec36:	e000      	b.n	801ec3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801ec38:	2302      	movs	r3, #2
  }
}
 801ec3a:	4618      	mov	r0, r3
 801ec3c:	3720      	adds	r7, #32
 801ec3e:	46bd      	mov	sp, r7
 801ec40:	bd80      	pop	{r7, pc}
	...

0801ec44 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801ec44:	b580      	push	{r7, lr}
 801ec46:	b0ba      	sub	sp, #232	; 0xe8
 801ec48:	af00      	add	r7, sp, #0
 801ec4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	681b      	ldr	r3, [r3, #0]
 801ec50:	69db      	ldr	r3, [r3, #28]
 801ec52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801ec56:	687b      	ldr	r3, [r7, #4]
 801ec58:	681b      	ldr	r3, [r3, #0]
 801ec5a:	681b      	ldr	r3, [r3, #0]
 801ec5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801ec60:	687b      	ldr	r3, [r7, #4]
 801ec62:	681b      	ldr	r3, [r3, #0]
 801ec64:	689b      	ldr	r3, [r3, #8]
 801ec66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801ec6a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801ec6e:	f640 030f 	movw	r3, #2063	; 0x80f
 801ec72:	4013      	ands	r3, r2
 801ec74:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801ec78:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ec7c:	2b00      	cmp	r3, #0
 801ec7e:	d115      	bne.n	801ecac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801ec80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ec84:	f003 0320 	and.w	r3, r3, #32
 801ec88:	2b00      	cmp	r3, #0
 801ec8a:	d00f      	beq.n	801ecac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ec8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ec90:	f003 0320 	and.w	r3, r3, #32
 801ec94:	2b00      	cmp	r3, #0
 801ec96:	d009      	beq.n	801ecac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801ec98:	687b      	ldr	r3, [r7, #4]
 801ec9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	f000 82b8 	beq.w	801f212 <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801eca2:	687b      	ldr	r3, [r7, #4]
 801eca4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801eca6:	6878      	ldr	r0, [r7, #4]
 801eca8:	4798      	blx	r3
      }
      return;
 801ecaa:	e2b2      	b.n	801f212 <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801ecac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801ecb0:	2b00      	cmp	r3, #0
 801ecb2:	f000 811d 	beq.w	801eef0 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801ecb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ecba:	f003 0301 	and.w	r3, r3, #1
 801ecbe:	2b00      	cmp	r3, #0
 801ecc0:	d106      	bne.n	801ecd0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801ecc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801ecc6:	4b88      	ldr	r3, [pc, #544]	; (801eee8 <HAL_UART_IRQHandler+0x2a4>)
 801ecc8:	4013      	ands	r3, r2
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	f000 8110 	beq.w	801eef0 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ecd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ecd4:	f003 0301 	and.w	r3, r3, #1
 801ecd8:	2b00      	cmp	r3, #0
 801ecda:	d011      	beq.n	801ed00 <HAL_UART_IRQHandler+0xbc>
 801ecdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ece0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ece4:	2b00      	cmp	r3, #0
 801ece6:	d00b      	beq.n	801ed00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	681b      	ldr	r3, [r3, #0]
 801ecec:	2201      	movs	r2, #1
 801ecee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ecf6:	f043 0201 	orr.w	r2, r3, #1
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ed00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ed04:	f003 0302 	and.w	r3, r3, #2
 801ed08:	2b00      	cmp	r3, #0
 801ed0a:	d011      	beq.n	801ed30 <HAL_UART_IRQHandler+0xec>
 801ed0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ed10:	f003 0301 	and.w	r3, r3, #1
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d00b      	beq.n	801ed30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ed18:	687b      	ldr	r3, [r7, #4]
 801ed1a:	681b      	ldr	r3, [r3, #0]
 801ed1c:	2202      	movs	r2, #2
 801ed1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ed26:	f043 0204 	orr.w	r2, r3, #4
 801ed2a:	687b      	ldr	r3, [r7, #4]
 801ed2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ed30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ed34:	f003 0304 	and.w	r3, r3, #4
 801ed38:	2b00      	cmp	r3, #0
 801ed3a:	d011      	beq.n	801ed60 <HAL_UART_IRQHandler+0x11c>
 801ed3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ed40:	f003 0301 	and.w	r3, r3, #1
 801ed44:	2b00      	cmp	r3, #0
 801ed46:	d00b      	beq.n	801ed60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	681b      	ldr	r3, [r3, #0]
 801ed4c:	2204      	movs	r2, #4
 801ed4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801ed50:	687b      	ldr	r3, [r7, #4]
 801ed52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ed56:	f043 0202 	orr.w	r2, r3, #2
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801ed60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ed64:	f003 0308 	and.w	r3, r3, #8
 801ed68:	2b00      	cmp	r3, #0
 801ed6a:	d017      	beq.n	801ed9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801ed6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ed70:	f003 0320 	and.w	r3, r3, #32
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d105      	bne.n	801ed84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801ed78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ed7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801ed80:	2b00      	cmp	r3, #0
 801ed82:	d00b      	beq.n	801ed9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	2208      	movs	r2, #8
 801ed8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ed92:	f043 0208 	orr.w	r2, r3, #8
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801ed9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801eda0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801eda4:	2b00      	cmp	r3, #0
 801eda6:	d012      	beq.n	801edce <HAL_UART_IRQHandler+0x18a>
 801eda8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801edac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d00c      	beq.n	801edce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801edbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801edbe:	687b      	ldr	r3, [r7, #4]
 801edc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801edc4:	f043 0220 	orr.w	r2, r3, #32
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	f000 821e 	beq.w	801f216 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801edda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801edde:	f003 0320 	and.w	r3, r3, #32
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d00d      	beq.n	801ee02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801ede6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801edea:	f003 0320 	and.w	r3, r3, #32
 801edee:	2b00      	cmp	r3, #0
 801edf0:	d007      	beq.n	801ee02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d003      	beq.n	801ee02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801edfa:	687b      	ldr	r3, [r7, #4]
 801edfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801edfe:	6878      	ldr	r0, [r7, #4]
 801ee00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ee08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	681b      	ldr	r3, [r3, #0]
 801ee10:	689b      	ldr	r3, [r3, #8]
 801ee12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ee16:	2b40      	cmp	r3, #64	; 0x40
 801ee18:	d005      	beq.n	801ee26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801ee1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801ee1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d053      	beq.n	801eece <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801ee26:	6878      	ldr	r0, [r7, #4]
 801ee28:	f000 ff80 	bl	801fd2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	689b      	ldr	r3, [r3, #8]
 801ee32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ee36:	2b40      	cmp	r3, #64	; 0x40
 801ee38:	d143      	bne.n	801eec2 <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	681b      	ldr	r3, [r3, #0]
 801ee3e:	3308      	adds	r3, #8
 801ee40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ee44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801ee48:	e853 3f00 	ldrex	r3, [r3]
 801ee4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801ee50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801ee54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801ee58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	681b      	ldr	r3, [r3, #0]
 801ee60:	3308      	adds	r3, #8
 801ee62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801ee66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801ee6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ee6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801ee72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801ee76:	e841 2300 	strex	r3, r2, [r1]
 801ee7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801ee7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801ee82:	2b00      	cmp	r3, #0
 801ee84:	d1d9      	bne.n	801ee3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801ee86:	687b      	ldr	r3, [r7, #4]
 801ee88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee8a:	2b00      	cmp	r3, #0
 801ee8c:	d013      	beq.n	801eeb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee92:	4a16      	ldr	r2, [pc, #88]	; (801eeec <HAL_UART_IRQHandler+0x2a8>)
 801ee94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ee9a:	4618      	mov	r0, r3
 801ee9c:	f7fb f98a 	bl	801a1b4 <HAL_DMA_Abort_IT>
 801eea0:	4603      	mov	r3, r0
 801eea2:	2b00      	cmp	r3, #0
 801eea4:	d01d      	beq.n	801eee2 <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801eeaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801eeac:	687a      	ldr	r2, [r7, #4]
 801eeae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801eeb0:	4610      	mov	r0, r2
 801eeb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801eeb4:	e015      	b.n	801eee2 <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801eebc:	6878      	ldr	r0, [r7, #4]
 801eebe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801eec0:	e00f      	b.n	801eee2 <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801eec2:	687b      	ldr	r3, [r7, #4]
 801eec4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801eec8:	6878      	ldr	r0, [r7, #4]
 801eeca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801eecc:	e009      	b.n	801eee2 <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801eed4:	6878      	ldr	r0, [r7, #4]
 801eed6:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	2200      	movs	r2, #0
 801eedc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801eee0:	e199      	b.n	801f216 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801eee2:	bf00      	nop
    return;
 801eee4:	e197      	b.n	801f216 <HAL_UART_IRQHandler+0x5d2>
 801eee6:	bf00      	nop
 801eee8:	04000120 	.word	0x04000120
 801eeec:	0801fdf5 	.word	0x0801fdf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801eef4:	2b01      	cmp	r3, #1
 801eef6:	f040 8150 	bne.w	801f19a <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801eefa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801eefe:	f003 0310 	and.w	r3, r3, #16
 801ef02:	2b00      	cmp	r3, #0
 801ef04:	f000 8149 	beq.w	801f19a <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801ef08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ef0c:	f003 0310 	and.w	r3, r3, #16
 801ef10:	2b00      	cmp	r3, #0
 801ef12:	f000 8142 	beq.w	801f19a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	681b      	ldr	r3, [r3, #0]
 801ef1a:	2210      	movs	r2, #16
 801ef1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	689b      	ldr	r3, [r3, #8]
 801ef24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ef28:	2b40      	cmp	r3, #64	; 0x40
 801ef2a:	f040 80b8 	bne.w	801f09e <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801ef2e:	687b      	ldr	r3, [r7, #4]
 801ef30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ef32:	681b      	ldr	r3, [r3, #0]
 801ef34:	685b      	ldr	r3, [r3, #4]
 801ef36:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801ef3a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801ef3e:	2b00      	cmp	r3, #0
 801ef40:	f000 816b 	beq.w	801f21a <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801ef44:	687b      	ldr	r3, [r7, #4]
 801ef46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801ef4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ef4e:	429a      	cmp	r2, r3
 801ef50:	f080 8163 	bcs.w	801f21a <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801ef5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801ef62:	69db      	ldr	r3, [r3, #28]
 801ef64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ef68:	f000 8086 	beq.w	801f078 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ef6c:	687b      	ldr	r3, [r7, #4]
 801ef6e:	681b      	ldr	r3, [r3, #0]
 801ef70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ef74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801ef78:	e853 3f00 	ldrex	r3, [r3]
 801ef7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801ef80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801ef84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ef88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801ef8c:	687b      	ldr	r3, [r7, #4]
 801ef8e:	681b      	ldr	r3, [r3, #0]
 801ef90:	461a      	mov	r2, r3
 801ef92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801ef96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ef9a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ef9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801efa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801efa6:	e841 2300 	strex	r3, r2, [r1]
 801efaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801efae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d1da      	bne.n	801ef6c <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	681b      	ldr	r3, [r3, #0]
 801efba:	3308      	adds	r3, #8
 801efbc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801efbe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801efc0:	e853 3f00 	ldrex	r3, [r3]
 801efc4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801efc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801efc8:	f023 0301 	bic.w	r3, r3, #1
 801efcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	3308      	adds	r3, #8
 801efd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801efda:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801efde:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801efe0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801efe2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801efe6:	e841 2300 	strex	r3, r2, [r1]
 801efea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801efec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801efee:	2b00      	cmp	r3, #0
 801eff0:	d1e1      	bne.n	801efb6 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801eff2:	687b      	ldr	r3, [r7, #4]
 801eff4:	681b      	ldr	r3, [r3, #0]
 801eff6:	3308      	adds	r3, #8
 801eff8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801effa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801effc:	e853 3f00 	ldrex	r3, [r3]
 801f000:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801f002:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801f004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801f008:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	3308      	adds	r3, #8
 801f012:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801f016:	66fa      	str	r2, [r7, #108]	; 0x6c
 801f018:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f01a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801f01c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801f01e:	e841 2300 	strex	r3, r2, [r1]
 801f022:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801f024:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801f026:	2b00      	cmp	r3, #0
 801f028:	d1e3      	bne.n	801eff2 <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	2220      	movs	r2, #32
 801f02e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f032:	687b      	ldr	r3, [r7, #4]
 801f034:	2200      	movs	r2, #0
 801f036:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f03e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801f040:	e853 3f00 	ldrex	r3, [r3]
 801f044:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801f046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801f048:	f023 0310 	bic.w	r3, r3, #16
 801f04c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801f050:	687b      	ldr	r3, [r7, #4]
 801f052:	681b      	ldr	r3, [r3, #0]
 801f054:	461a      	mov	r2, r3
 801f056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801f05a:	65bb      	str	r3, [r7, #88]	; 0x58
 801f05c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f05e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801f060:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801f062:	e841 2300 	strex	r3, r2, [r1]
 801f066:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801f068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801f06a:	2b00      	cmp	r3, #0
 801f06c:	d1e4      	bne.n	801f038 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801f072:	4618      	mov	r0, r3
 801f074:	f7fb f82e 	bl	801a0d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	2202      	movs	r2, #2
 801f07c:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f084:	687a      	ldr	r2, [r7, #4]
 801f086:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801f08a:	687a      	ldr	r2, [r7, #4]
 801f08c:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801f090:	b292      	uxth	r2, r2
 801f092:	1a8a      	subs	r2, r1, r2
 801f094:	b292      	uxth	r2, r2
 801f096:	4611      	mov	r1, r2
 801f098:	6878      	ldr	r0, [r7, #4]
 801f09a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801f09c:	e0bd      	b.n	801f21a <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f0aa:	b29b      	uxth	r3, r3
 801f0ac:	1ad3      	subs	r3, r2, r3
 801f0ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801f0b2:	687b      	ldr	r3, [r7, #4]
 801f0b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801f0b8:	b29b      	uxth	r3, r3
 801f0ba:	2b00      	cmp	r3, #0
 801f0bc:	f000 80af 	beq.w	801f21e <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801f0c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	f000 80aa 	beq.w	801f21e <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	681b      	ldr	r3, [r3, #0]
 801f0ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801f0d2:	e853 3f00 	ldrex	r3, [r3]
 801f0d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801f0d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801f0da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801f0de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	461a      	mov	r2, r3
 801f0e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801f0ec:	647b      	str	r3, [r7, #68]	; 0x44
 801f0ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f0f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801f0f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801f0f4:	e841 2300 	strex	r3, r2, [r1]
 801f0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801f0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801f0fc:	2b00      	cmp	r3, #0
 801f0fe:	d1e4      	bne.n	801f0ca <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	3308      	adds	r3, #8
 801f106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f10a:	e853 3f00 	ldrex	r3, [r3]
 801f10e:	623b      	str	r3, [r7, #32]
   return(result);
 801f110:	6a3b      	ldr	r3, [r7, #32]
 801f112:	f023 0301 	bic.w	r3, r3, #1
 801f116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	3308      	adds	r3, #8
 801f120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801f124:	633a      	str	r2, [r7, #48]	; 0x30
 801f126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f12a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801f12c:	e841 2300 	strex	r3, r2, [r1]
 801f130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f134:	2b00      	cmp	r3, #0
 801f136:	d1e3      	bne.n	801f100 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801f138:	687b      	ldr	r3, [r7, #4]
 801f13a:	2220      	movs	r2, #32
 801f13c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	2200      	movs	r2, #0
 801f144:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	2200      	movs	r2, #0
 801f14a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801f14c:	687b      	ldr	r3, [r7, #4]
 801f14e:	681b      	ldr	r3, [r3, #0]
 801f150:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801f152:	693b      	ldr	r3, [r7, #16]
 801f154:	e853 3f00 	ldrex	r3, [r3]
 801f158:	60fb      	str	r3, [r7, #12]
   return(result);
 801f15a:	68fb      	ldr	r3, [r7, #12]
 801f15c:	f023 0310 	bic.w	r3, r3, #16
 801f160:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	461a      	mov	r2, r3
 801f16a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801f16e:	61fb      	str	r3, [r7, #28]
 801f170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801f172:	69b9      	ldr	r1, [r7, #24]
 801f174:	69fa      	ldr	r2, [r7, #28]
 801f176:	e841 2300 	strex	r3, r2, [r1]
 801f17a:	617b      	str	r3, [r7, #20]
   return(result);
 801f17c:	697b      	ldr	r3, [r7, #20]
 801f17e:	2b00      	cmp	r3, #0
 801f180:	d1e4      	bne.n	801f14c <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2202      	movs	r2, #2
 801f186:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801f188:	687b      	ldr	r3, [r7, #4]
 801f18a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801f18e:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801f192:	4611      	mov	r1, r2
 801f194:	6878      	ldr	r0, [r7, #4]
 801f196:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801f198:	e041      	b.n	801f21e <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801f19a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f19e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801f1a2:	2b00      	cmp	r3, #0
 801f1a4:	d010      	beq.n	801f1c8 <HAL_UART_IRQHandler+0x584>
 801f1a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801f1aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801f1ae:	2b00      	cmp	r3, #0
 801f1b0:	d00a      	beq.n	801f1c8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801f1ba:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801f1bc:	687b      	ldr	r3, [r7, #4]
 801f1be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801f1c2:	6878      	ldr	r0, [r7, #4]
 801f1c4:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801f1c6:	e02d      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801f1c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f1cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1d0:	2b00      	cmp	r3, #0
 801f1d2:	d00e      	beq.n	801f1f2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801f1d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	d008      	beq.n	801f1f2 <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1e4:	2b00      	cmp	r3, #0
 801f1e6:	d01c      	beq.n	801f222 <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801f1e8:	687b      	ldr	r3, [r7, #4]
 801f1ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1ec:	6878      	ldr	r0, [r7, #4]
 801f1ee:	4798      	blx	r3
    }
    return;
 801f1f0:	e017      	b.n	801f222 <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801f1f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801f1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f1fa:	2b00      	cmp	r3, #0
 801f1fc:	d012      	beq.n	801f224 <HAL_UART_IRQHandler+0x5e0>
 801f1fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801f202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f206:	2b00      	cmp	r3, #0
 801f208:	d00c      	beq.n	801f224 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801f20a:	6878      	ldr	r0, [r7, #4]
 801f20c:	f000 fe0a 	bl	801fe24 <UART_EndTransmit_IT>
    return;
 801f210:	e008      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
      return;
 801f212:	bf00      	nop
 801f214:	e006      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
    return;
 801f216:	bf00      	nop
 801f218:	e004      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
      return;
 801f21a:	bf00      	nop
 801f21c:	e002      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
      return;
 801f21e:	bf00      	nop
 801f220:	e000      	b.n	801f224 <HAL_UART_IRQHandler+0x5e0>
    return;
 801f222:	bf00      	nop
  }

}
 801f224:	37e8      	adds	r7, #232	; 0xe8
 801f226:	46bd      	mov	sp, r7
 801f228:	bd80      	pop	{r7, pc}
 801f22a:	bf00      	nop

0801f22c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801f22c:	b480      	push	{r7}
 801f22e:	b083      	sub	sp, #12
 801f230:	af00      	add	r7, sp, #0
 801f232:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801f234:	bf00      	nop
 801f236:	370c      	adds	r7, #12
 801f238:	46bd      	mov	sp, r7
 801f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f23e:	4770      	bx	lr

0801f240 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801f240:	b480      	push	{r7}
 801f242:	b083      	sub	sp, #12
 801f244:	af00      	add	r7, sp, #0
 801f246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801f248:	bf00      	nop
 801f24a:	370c      	adds	r7, #12
 801f24c:	46bd      	mov	sp, r7
 801f24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f252:	4770      	bx	lr

0801f254 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801f254:	b480      	push	{r7}
 801f256:	b083      	sub	sp, #12
 801f258:	af00      	add	r7, sp, #0
 801f25a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801f25c:	bf00      	nop
 801f25e:	370c      	adds	r7, #12
 801f260:	46bd      	mov	sp, r7
 801f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f266:	4770      	bx	lr

0801f268 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801f268:	b480      	push	{r7}
 801f26a:	b083      	sub	sp, #12
 801f26c:	af00      	add	r7, sp, #0
 801f26e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801f270:	bf00      	nop
 801f272:	370c      	adds	r7, #12
 801f274:	46bd      	mov	sp, r7
 801f276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f27a:	4770      	bx	lr

0801f27c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801f27c:	b480      	push	{r7}
 801f27e:	b083      	sub	sp, #12
 801f280:	af00      	add	r7, sp, #0
 801f282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801f284:	bf00      	nop
 801f286:	370c      	adds	r7, #12
 801f288:	46bd      	mov	sp, r7
 801f28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f28e:	4770      	bx	lr

0801f290 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801f290:	b480      	push	{r7}
 801f292:	b083      	sub	sp, #12
 801f294:	af00      	add	r7, sp, #0
 801f296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801f298:	bf00      	nop
 801f29a:	370c      	adds	r7, #12
 801f29c:	46bd      	mov	sp, r7
 801f29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2a2:	4770      	bx	lr

0801f2a4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801f2a4:	b480      	push	{r7}
 801f2a6:	b083      	sub	sp, #12
 801f2a8:	af00      	add	r7, sp, #0
 801f2aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801f2ac:	bf00      	nop
 801f2ae:	370c      	adds	r7, #12
 801f2b0:	46bd      	mov	sp, r7
 801f2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b6:	4770      	bx	lr

0801f2b8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801f2b8:	b480      	push	{r7}
 801f2ba:	b083      	sub	sp, #12
 801f2bc:	af00      	add	r7, sp, #0
 801f2be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801f2c0:	bf00      	nop
 801f2c2:	370c      	adds	r7, #12
 801f2c4:	46bd      	mov	sp, r7
 801f2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ca:	4770      	bx	lr

0801f2cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801f2cc:	b480      	push	{r7}
 801f2ce:	b083      	sub	sp, #12
 801f2d0:	af00      	add	r7, sp, #0
 801f2d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801f2d4:	bf00      	nop
 801f2d6:	370c      	adds	r7, #12
 801f2d8:	46bd      	mov	sp, r7
 801f2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2de:	4770      	bx	lr

0801f2e0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801f2e0:	b480      	push	{r7}
 801f2e2:	b083      	sub	sp, #12
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	4a16      	ldr	r2, [pc, #88]	; (801f344 <UART_InitCallbacksToDefault+0x64>)
 801f2ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801f2f0:	687b      	ldr	r3, [r7, #4]
 801f2f2:	4a15      	ldr	r2, [pc, #84]	; (801f348 <UART_InitCallbacksToDefault+0x68>)
 801f2f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	4a14      	ldr	r2, [pc, #80]	; (801f34c <UART_InitCallbacksToDefault+0x6c>)
 801f2fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	4a13      	ldr	r2, [pc, #76]	; (801f350 <UART_InitCallbacksToDefault+0x70>)
 801f304:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	4a12      	ldr	r2, [pc, #72]	; (801f354 <UART_InitCallbacksToDefault+0x74>)
 801f30c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801f310:	687b      	ldr	r3, [r7, #4]
 801f312:	4a11      	ldr	r2, [pc, #68]	; (801f358 <UART_InitCallbacksToDefault+0x78>)
 801f314:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801f318:	687b      	ldr	r3, [r7, #4]
 801f31a:	4a10      	ldr	r2, [pc, #64]	; (801f35c <UART_InitCallbacksToDefault+0x7c>)
 801f31c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	4a0f      	ldr	r2, [pc, #60]	; (801f360 <UART_InitCallbacksToDefault+0x80>)
 801f324:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801f328:	687b      	ldr	r3, [r7, #4]
 801f32a:	4a0e      	ldr	r2, [pc, #56]	; (801f364 <UART_InitCallbacksToDefault+0x84>)
 801f32c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801f330:	687b      	ldr	r3, [r7, #4]
 801f332:	4a0d      	ldr	r2, [pc, #52]	; (801f368 <UART_InitCallbacksToDefault+0x88>)
 801f334:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801f338:	bf00      	nop
 801f33a:	370c      	adds	r7, #12
 801f33c:	46bd      	mov	sp, r7
 801f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f342:	4770      	bx	lr
 801f344:	0801f241 	.word	0x0801f241
 801f348:	0801f22d 	.word	0x0801f22d
 801f34c:	0801f269 	.word	0x0801f269
 801f350:	0801f255 	.word	0x0801f255
 801f354:	0801f27d 	.word	0x0801f27d
 801f358:	0801f291 	.word	0x0801f291
 801f35c:	0801f2a5 	.word	0x0801f2a5
 801f360:	0801f2b9 	.word	0x0801f2b9
 801f364:	0801f2cd 	.word	0x0801f2cd
 801f368:	080188cd 	.word	0x080188cd

0801f36c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f36c:	b580      	push	{r7, lr}
 801f36e:	b088      	sub	sp, #32
 801f370:	af00      	add	r7, sp, #0
 801f372:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f374:	2300      	movs	r3, #0
 801f376:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f378:	687b      	ldr	r3, [r7, #4]
 801f37a:	689a      	ldr	r2, [r3, #8]
 801f37c:	687b      	ldr	r3, [r7, #4]
 801f37e:	691b      	ldr	r3, [r3, #16]
 801f380:	431a      	orrs	r2, r3
 801f382:	687b      	ldr	r3, [r7, #4]
 801f384:	695b      	ldr	r3, [r3, #20]
 801f386:	431a      	orrs	r2, r3
 801f388:	687b      	ldr	r3, [r7, #4]
 801f38a:	69db      	ldr	r3, [r3, #28]
 801f38c:	4313      	orrs	r3, r2
 801f38e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f390:	687b      	ldr	r3, [r7, #4]
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	681a      	ldr	r2, [r3, #0]
 801f396:	4ba6      	ldr	r3, [pc, #664]	; (801f630 <UART_SetConfig+0x2c4>)
 801f398:	4013      	ands	r3, r2
 801f39a:	687a      	ldr	r2, [r7, #4]
 801f39c:	6812      	ldr	r2, [r2, #0]
 801f39e:	6979      	ldr	r1, [r7, #20]
 801f3a0:	430b      	orrs	r3, r1
 801f3a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f3a4:	687b      	ldr	r3, [r7, #4]
 801f3a6:	681b      	ldr	r3, [r3, #0]
 801f3a8:	685b      	ldr	r3, [r3, #4]
 801f3aa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801f3ae:	687b      	ldr	r3, [r7, #4]
 801f3b0:	68da      	ldr	r2, [r3, #12]
 801f3b2:	687b      	ldr	r3, [r7, #4]
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	430a      	orrs	r2, r1
 801f3b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f3ba:	687b      	ldr	r3, [r7, #4]
 801f3bc:	699b      	ldr	r3, [r3, #24]
 801f3be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801f3c0:	687b      	ldr	r3, [r7, #4]
 801f3c2:	6a1b      	ldr	r3, [r3, #32]
 801f3c4:	697a      	ldr	r2, [r7, #20]
 801f3c6:	4313      	orrs	r3, r2
 801f3c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f3ca:	687b      	ldr	r3, [r7, #4]
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	689b      	ldr	r3, [r3, #8]
 801f3d0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801f3d4:	687b      	ldr	r3, [r7, #4]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	697a      	ldr	r2, [r7, #20]
 801f3da:	430a      	orrs	r2, r1
 801f3dc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	4a94      	ldr	r2, [pc, #592]	; (801f634 <UART_SetConfig+0x2c8>)
 801f3e4:	4293      	cmp	r3, r2
 801f3e6:	d120      	bne.n	801f42a <UART_SetConfig+0xbe>
 801f3e8:	4b93      	ldr	r3, [pc, #588]	; (801f638 <UART_SetConfig+0x2cc>)
 801f3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f3ee:	f003 0303 	and.w	r3, r3, #3
 801f3f2:	2b03      	cmp	r3, #3
 801f3f4:	d816      	bhi.n	801f424 <UART_SetConfig+0xb8>
 801f3f6:	a201      	add	r2, pc, #4	; (adr r2, 801f3fc <UART_SetConfig+0x90>)
 801f3f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3fc:	0801f40d 	.word	0x0801f40d
 801f400:	0801f419 	.word	0x0801f419
 801f404:	0801f413 	.word	0x0801f413
 801f408:	0801f41f 	.word	0x0801f41f
 801f40c:	2301      	movs	r3, #1
 801f40e:	77fb      	strb	r3, [r7, #31]
 801f410:	e150      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f412:	2302      	movs	r3, #2
 801f414:	77fb      	strb	r3, [r7, #31]
 801f416:	e14d      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f418:	2304      	movs	r3, #4
 801f41a:	77fb      	strb	r3, [r7, #31]
 801f41c:	e14a      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f41e:	2308      	movs	r3, #8
 801f420:	77fb      	strb	r3, [r7, #31]
 801f422:	e147      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f424:	2310      	movs	r3, #16
 801f426:	77fb      	strb	r3, [r7, #31]
 801f428:	e144      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f42a:	687b      	ldr	r3, [r7, #4]
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	4a83      	ldr	r2, [pc, #524]	; (801f63c <UART_SetConfig+0x2d0>)
 801f430:	4293      	cmp	r3, r2
 801f432:	d132      	bne.n	801f49a <UART_SetConfig+0x12e>
 801f434:	4b80      	ldr	r3, [pc, #512]	; (801f638 <UART_SetConfig+0x2cc>)
 801f436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f43a:	f003 030c 	and.w	r3, r3, #12
 801f43e:	2b0c      	cmp	r3, #12
 801f440:	d828      	bhi.n	801f494 <UART_SetConfig+0x128>
 801f442:	a201      	add	r2, pc, #4	; (adr r2, 801f448 <UART_SetConfig+0xdc>)
 801f444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f448:	0801f47d 	.word	0x0801f47d
 801f44c:	0801f495 	.word	0x0801f495
 801f450:	0801f495 	.word	0x0801f495
 801f454:	0801f495 	.word	0x0801f495
 801f458:	0801f489 	.word	0x0801f489
 801f45c:	0801f495 	.word	0x0801f495
 801f460:	0801f495 	.word	0x0801f495
 801f464:	0801f495 	.word	0x0801f495
 801f468:	0801f483 	.word	0x0801f483
 801f46c:	0801f495 	.word	0x0801f495
 801f470:	0801f495 	.word	0x0801f495
 801f474:	0801f495 	.word	0x0801f495
 801f478:	0801f48f 	.word	0x0801f48f
 801f47c:	2300      	movs	r3, #0
 801f47e:	77fb      	strb	r3, [r7, #31]
 801f480:	e118      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f482:	2302      	movs	r3, #2
 801f484:	77fb      	strb	r3, [r7, #31]
 801f486:	e115      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f488:	2304      	movs	r3, #4
 801f48a:	77fb      	strb	r3, [r7, #31]
 801f48c:	e112      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f48e:	2308      	movs	r3, #8
 801f490:	77fb      	strb	r3, [r7, #31]
 801f492:	e10f      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f494:	2310      	movs	r3, #16
 801f496:	77fb      	strb	r3, [r7, #31]
 801f498:	e10c      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	681b      	ldr	r3, [r3, #0]
 801f49e:	4a68      	ldr	r2, [pc, #416]	; (801f640 <UART_SetConfig+0x2d4>)
 801f4a0:	4293      	cmp	r3, r2
 801f4a2:	d120      	bne.n	801f4e6 <UART_SetConfig+0x17a>
 801f4a4:	4b64      	ldr	r3, [pc, #400]	; (801f638 <UART_SetConfig+0x2cc>)
 801f4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f4aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801f4ae:	2b30      	cmp	r3, #48	; 0x30
 801f4b0:	d013      	beq.n	801f4da <UART_SetConfig+0x16e>
 801f4b2:	2b30      	cmp	r3, #48	; 0x30
 801f4b4:	d814      	bhi.n	801f4e0 <UART_SetConfig+0x174>
 801f4b6:	2b20      	cmp	r3, #32
 801f4b8:	d009      	beq.n	801f4ce <UART_SetConfig+0x162>
 801f4ba:	2b20      	cmp	r3, #32
 801f4bc:	d810      	bhi.n	801f4e0 <UART_SetConfig+0x174>
 801f4be:	2b00      	cmp	r3, #0
 801f4c0:	d002      	beq.n	801f4c8 <UART_SetConfig+0x15c>
 801f4c2:	2b10      	cmp	r3, #16
 801f4c4:	d006      	beq.n	801f4d4 <UART_SetConfig+0x168>
 801f4c6:	e00b      	b.n	801f4e0 <UART_SetConfig+0x174>
 801f4c8:	2300      	movs	r3, #0
 801f4ca:	77fb      	strb	r3, [r7, #31]
 801f4cc:	e0f2      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f4ce:	2302      	movs	r3, #2
 801f4d0:	77fb      	strb	r3, [r7, #31]
 801f4d2:	e0ef      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f4d4:	2304      	movs	r3, #4
 801f4d6:	77fb      	strb	r3, [r7, #31]
 801f4d8:	e0ec      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f4da:	2308      	movs	r3, #8
 801f4dc:	77fb      	strb	r3, [r7, #31]
 801f4de:	e0e9      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f4e0:	2310      	movs	r3, #16
 801f4e2:	77fb      	strb	r3, [r7, #31]
 801f4e4:	e0e6      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f4e6:	687b      	ldr	r3, [r7, #4]
 801f4e8:	681b      	ldr	r3, [r3, #0]
 801f4ea:	4a56      	ldr	r2, [pc, #344]	; (801f644 <UART_SetConfig+0x2d8>)
 801f4ec:	4293      	cmp	r3, r2
 801f4ee:	d120      	bne.n	801f532 <UART_SetConfig+0x1c6>
 801f4f0:	4b51      	ldr	r3, [pc, #324]	; (801f638 <UART_SetConfig+0x2cc>)
 801f4f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f4f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801f4fa:	2bc0      	cmp	r3, #192	; 0xc0
 801f4fc:	d013      	beq.n	801f526 <UART_SetConfig+0x1ba>
 801f4fe:	2bc0      	cmp	r3, #192	; 0xc0
 801f500:	d814      	bhi.n	801f52c <UART_SetConfig+0x1c0>
 801f502:	2b80      	cmp	r3, #128	; 0x80
 801f504:	d009      	beq.n	801f51a <UART_SetConfig+0x1ae>
 801f506:	2b80      	cmp	r3, #128	; 0x80
 801f508:	d810      	bhi.n	801f52c <UART_SetConfig+0x1c0>
 801f50a:	2b00      	cmp	r3, #0
 801f50c:	d002      	beq.n	801f514 <UART_SetConfig+0x1a8>
 801f50e:	2b40      	cmp	r3, #64	; 0x40
 801f510:	d006      	beq.n	801f520 <UART_SetConfig+0x1b4>
 801f512:	e00b      	b.n	801f52c <UART_SetConfig+0x1c0>
 801f514:	2300      	movs	r3, #0
 801f516:	77fb      	strb	r3, [r7, #31]
 801f518:	e0cc      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f51a:	2302      	movs	r3, #2
 801f51c:	77fb      	strb	r3, [r7, #31]
 801f51e:	e0c9      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f520:	2304      	movs	r3, #4
 801f522:	77fb      	strb	r3, [r7, #31]
 801f524:	e0c6      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f526:	2308      	movs	r3, #8
 801f528:	77fb      	strb	r3, [r7, #31]
 801f52a:	e0c3      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f52c:	2310      	movs	r3, #16
 801f52e:	77fb      	strb	r3, [r7, #31]
 801f530:	e0c0      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f532:	687b      	ldr	r3, [r7, #4]
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	4a44      	ldr	r2, [pc, #272]	; (801f648 <UART_SetConfig+0x2dc>)
 801f538:	4293      	cmp	r3, r2
 801f53a:	d125      	bne.n	801f588 <UART_SetConfig+0x21c>
 801f53c:	4b3e      	ldr	r3, [pc, #248]	; (801f638 <UART_SetConfig+0x2cc>)
 801f53e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f546:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f54a:	d017      	beq.n	801f57c <UART_SetConfig+0x210>
 801f54c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801f550:	d817      	bhi.n	801f582 <UART_SetConfig+0x216>
 801f552:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f556:	d00b      	beq.n	801f570 <UART_SetConfig+0x204>
 801f558:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801f55c:	d811      	bhi.n	801f582 <UART_SetConfig+0x216>
 801f55e:	2b00      	cmp	r3, #0
 801f560:	d003      	beq.n	801f56a <UART_SetConfig+0x1fe>
 801f562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f566:	d006      	beq.n	801f576 <UART_SetConfig+0x20a>
 801f568:	e00b      	b.n	801f582 <UART_SetConfig+0x216>
 801f56a:	2300      	movs	r3, #0
 801f56c:	77fb      	strb	r3, [r7, #31]
 801f56e:	e0a1      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f570:	2302      	movs	r3, #2
 801f572:	77fb      	strb	r3, [r7, #31]
 801f574:	e09e      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f576:	2304      	movs	r3, #4
 801f578:	77fb      	strb	r3, [r7, #31]
 801f57a:	e09b      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f57c:	2308      	movs	r3, #8
 801f57e:	77fb      	strb	r3, [r7, #31]
 801f580:	e098      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f582:	2310      	movs	r3, #16
 801f584:	77fb      	strb	r3, [r7, #31]
 801f586:	e095      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f588:	687b      	ldr	r3, [r7, #4]
 801f58a:	681b      	ldr	r3, [r3, #0]
 801f58c:	4a2f      	ldr	r2, [pc, #188]	; (801f64c <UART_SetConfig+0x2e0>)
 801f58e:	4293      	cmp	r3, r2
 801f590:	d125      	bne.n	801f5de <UART_SetConfig+0x272>
 801f592:	4b29      	ldr	r3, [pc, #164]	; (801f638 <UART_SetConfig+0x2cc>)
 801f594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f598:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801f59c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f5a0:	d017      	beq.n	801f5d2 <UART_SetConfig+0x266>
 801f5a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801f5a6:	d817      	bhi.n	801f5d8 <UART_SetConfig+0x26c>
 801f5a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f5ac:	d00b      	beq.n	801f5c6 <UART_SetConfig+0x25a>
 801f5ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801f5b2:	d811      	bhi.n	801f5d8 <UART_SetConfig+0x26c>
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d003      	beq.n	801f5c0 <UART_SetConfig+0x254>
 801f5b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f5bc:	d006      	beq.n	801f5cc <UART_SetConfig+0x260>
 801f5be:	e00b      	b.n	801f5d8 <UART_SetConfig+0x26c>
 801f5c0:	2301      	movs	r3, #1
 801f5c2:	77fb      	strb	r3, [r7, #31]
 801f5c4:	e076      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f5c6:	2302      	movs	r3, #2
 801f5c8:	77fb      	strb	r3, [r7, #31]
 801f5ca:	e073      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f5cc:	2304      	movs	r3, #4
 801f5ce:	77fb      	strb	r3, [r7, #31]
 801f5d0:	e070      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f5d2:	2308      	movs	r3, #8
 801f5d4:	77fb      	strb	r3, [r7, #31]
 801f5d6:	e06d      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f5d8:	2310      	movs	r3, #16
 801f5da:	77fb      	strb	r3, [r7, #31]
 801f5dc:	e06a      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	681b      	ldr	r3, [r3, #0]
 801f5e2:	4a1b      	ldr	r2, [pc, #108]	; (801f650 <UART_SetConfig+0x2e4>)
 801f5e4:	4293      	cmp	r3, r2
 801f5e6:	d138      	bne.n	801f65a <UART_SetConfig+0x2ee>
 801f5e8:	4b13      	ldr	r3, [pc, #76]	; (801f638 <UART_SetConfig+0x2cc>)
 801f5ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f5ee:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801f5f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f5f6:	d017      	beq.n	801f628 <UART_SetConfig+0x2bc>
 801f5f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801f5fc:	d82a      	bhi.n	801f654 <UART_SetConfig+0x2e8>
 801f5fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f602:	d00b      	beq.n	801f61c <UART_SetConfig+0x2b0>
 801f604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f608:	d824      	bhi.n	801f654 <UART_SetConfig+0x2e8>
 801f60a:	2b00      	cmp	r3, #0
 801f60c:	d003      	beq.n	801f616 <UART_SetConfig+0x2aa>
 801f60e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f612:	d006      	beq.n	801f622 <UART_SetConfig+0x2b6>
 801f614:	e01e      	b.n	801f654 <UART_SetConfig+0x2e8>
 801f616:	2300      	movs	r3, #0
 801f618:	77fb      	strb	r3, [r7, #31]
 801f61a:	e04b      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f61c:	2302      	movs	r3, #2
 801f61e:	77fb      	strb	r3, [r7, #31]
 801f620:	e048      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f622:	2304      	movs	r3, #4
 801f624:	77fb      	strb	r3, [r7, #31]
 801f626:	e045      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f628:	2308      	movs	r3, #8
 801f62a:	77fb      	strb	r3, [r7, #31]
 801f62c:	e042      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f62e:	bf00      	nop
 801f630:	efff69f3 	.word	0xefff69f3
 801f634:	40011000 	.word	0x40011000
 801f638:	40023800 	.word	0x40023800
 801f63c:	40004400 	.word	0x40004400
 801f640:	40004800 	.word	0x40004800
 801f644:	40004c00 	.word	0x40004c00
 801f648:	40005000 	.word	0x40005000
 801f64c:	40011400 	.word	0x40011400
 801f650:	40007800 	.word	0x40007800
 801f654:	2310      	movs	r3, #16
 801f656:	77fb      	strb	r3, [r7, #31]
 801f658:	e02c      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	681b      	ldr	r3, [r3, #0]
 801f65e:	4a72      	ldr	r2, [pc, #456]	; (801f828 <UART_SetConfig+0x4bc>)
 801f660:	4293      	cmp	r3, r2
 801f662:	d125      	bne.n	801f6b0 <UART_SetConfig+0x344>
 801f664:	4b71      	ldr	r3, [pc, #452]	; (801f82c <UART_SetConfig+0x4c0>)
 801f666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801f66a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801f66e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f672:	d017      	beq.n	801f6a4 <UART_SetConfig+0x338>
 801f674:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801f678:	d817      	bhi.n	801f6aa <UART_SetConfig+0x33e>
 801f67a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f67e:	d00b      	beq.n	801f698 <UART_SetConfig+0x32c>
 801f680:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f684:	d811      	bhi.n	801f6aa <UART_SetConfig+0x33e>
 801f686:	2b00      	cmp	r3, #0
 801f688:	d003      	beq.n	801f692 <UART_SetConfig+0x326>
 801f68a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f68e:	d006      	beq.n	801f69e <UART_SetConfig+0x332>
 801f690:	e00b      	b.n	801f6aa <UART_SetConfig+0x33e>
 801f692:	2300      	movs	r3, #0
 801f694:	77fb      	strb	r3, [r7, #31]
 801f696:	e00d      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f698:	2302      	movs	r3, #2
 801f69a:	77fb      	strb	r3, [r7, #31]
 801f69c:	e00a      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f69e:	2304      	movs	r3, #4
 801f6a0:	77fb      	strb	r3, [r7, #31]
 801f6a2:	e007      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f6a4:	2308      	movs	r3, #8
 801f6a6:	77fb      	strb	r3, [r7, #31]
 801f6a8:	e004      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f6aa:	2310      	movs	r3, #16
 801f6ac:	77fb      	strb	r3, [r7, #31]
 801f6ae:	e001      	b.n	801f6b4 <UART_SetConfig+0x348>
 801f6b0:	2310      	movs	r3, #16
 801f6b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	69db      	ldr	r3, [r3, #28]
 801f6b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801f6bc:	d15b      	bne.n	801f776 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801f6be:	7ffb      	ldrb	r3, [r7, #31]
 801f6c0:	2b08      	cmp	r3, #8
 801f6c2:	d828      	bhi.n	801f716 <UART_SetConfig+0x3aa>
 801f6c4:	a201      	add	r2, pc, #4	; (adr r2, 801f6cc <UART_SetConfig+0x360>)
 801f6c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6ca:	bf00      	nop
 801f6cc:	0801f6f1 	.word	0x0801f6f1
 801f6d0:	0801f6f9 	.word	0x0801f6f9
 801f6d4:	0801f701 	.word	0x0801f701
 801f6d8:	0801f717 	.word	0x0801f717
 801f6dc:	0801f707 	.word	0x0801f707
 801f6e0:	0801f717 	.word	0x0801f717
 801f6e4:	0801f717 	.word	0x0801f717
 801f6e8:	0801f717 	.word	0x0801f717
 801f6ec:	0801f70f 	.word	0x0801f70f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f6f0:	f7fd fc3e 	bl	801cf70 <HAL_RCC_GetPCLK1Freq>
 801f6f4:	61b8      	str	r0, [r7, #24]
        break;
 801f6f6:	e013      	b.n	801f720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f6f8:	f7fd fc4e 	bl	801cf98 <HAL_RCC_GetPCLK2Freq>
 801f6fc:	61b8      	str	r0, [r7, #24]
        break;
 801f6fe:	e00f      	b.n	801f720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f700:	4b4b      	ldr	r3, [pc, #300]	; (801f830 <UART_SetConfig+0x4c4>)
 801f702:	61bb      	str	r3, [r7, #24]
        break;
 801f704:	e00c      	b.n	801f720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f706:	f7fd fb61 	bl	801cdcc <HAL_RCC_GetSysClockFreq>
 801f70a:	61b8      	str	r0, [r7, #24]
        break;
 801f70c:	e008      	b.n	801f720 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f70e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f712:	61bb      	str	r3, [r7, #24]
        break;
 801f714:	e004      	b.n	801f720 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801f716:	2300      	movs	r3, #0
 801f718:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801f71a:	2301      	movs	r3, #1
 801f71c:	77bb      	strb	r3, [r7, #30]
        break;
 801f71e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801f720:	69bb      	ldr	r3, [r7, #24]
 801f722:	2b00      	cmp	r3, #0
 801f724:	d074      	beq.n	801f810 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801f726:	69bb      	ldr	r3, [r7, #24]
 801f728:	005a      	lsls	r2, r3, #1
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	685b      	ldr	r3, [r3, #4]
 801f72e:	085b      	lsrs	r3, r3, #1
 801f730:	441a      	add	r2, r3
 801f732:	687b      	ldr	r3, [r7, #4]
 801f734:	685b      	ldr	r3, [r3, #4]
 801f736:	fbb2 f3f3 	udiv	r3, r2, r3
 801f73a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f73c:	693b      	ldr	r3, [r7, #16]
 801f73e:	2b0f      	cmp	r3, #15
 801f740:	d916      	bls.n	801f770 <UART_SetConfig+0x404>
 801f742:	693b      	ldr	r3, [r7, #16]
 801f744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f748:	d212      	bcs.n	801f770 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801f74a:	693b      	ldr	r3, [r7, #16]
 801f74c:	b29b      	uxth	r3, r3
 801f74e:	f023 030f 	bic.w	r3, r3, #15
 801f752:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801f754:	693b      	ldr	r3, [r7, #16]
 801f756:	085b      	lsrs	r3, r3, #1
 801f758:	b29b      	uxth	r3, r3
 801f75a:	f003 0307 	and.w	r3, r3, #7
 801f75e:	b29a      	uxth	r2, r3
 801f760:	89fb      	ldrh	r3, [r7, #14]
 801f762:	4313      	orrs	r3, r2
 801f764:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801f766:	687b      	ldr	r3, [r7, #4]
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	89fa      	ldrh	r2, [r7, #14]
 801f76c:	60da      	str	r2, [r3, #12]
 801f76e:	e04f      	b.n	801f810 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801f770:	2301      	movs	r3, #1
 801f772:	77bb      	strb	r3, [r7, #30]
 801f774:	e04c      	b.n	801f810 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801f776:	7ffb      	ldrb	r3, [r7, #31]
 801f778:	2b08      	cmp	r3, #8
 801f77a:	d828      	bhi.n	801f7ce <UART_SetConfig+0x462>
 801f77c:	a201      	add	r2, pc, #4	; (adr r2, 801f784 <UART_SetConfig+0x418>)
 801f77e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f782:	bf00      	nop
 801f784:	0801f7a9 	.word	0x0801f7a9
 801f788:	0801f7b1 	.word	0x0801f7b1
 801f78c:	0801f7b9 	.word	0x0801f7b9
 801f790:	0801f7cf 	.word	0x0801f7cf
 801f794:	0801f7bf 	.word	0x0801f7bf
 801f798:	0801f7cf 	.word	0x0801f7cf
 801f79c:	0801f7cf 	.word	0x0801f7cf
 801f7a0:	0801f7cf 	.word	0x0801f7cf
 801f7a4:	0801f7c7 	.word	0x0801f7c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801f7a8:	f7fd fbe2 	bl	801cf70 <HAL_RCC_GetPCLK1Freq>
 801f7ac:	61b8      	str	r0, [r7, #24]
        break;
 801f7ae:	e013      	b.n	801f7d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801f7b0:	f7fd fbf2 	bl	801cf98 <HAL_RCC_GetPCLK2Freq>
 801f7b4:	61b8      	str	r0, [r7, #24]
        break;
 801f7b6:	e00f      	b.n	801f7d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801f7b8:	4b1d      	ldr	r3, [pc, #116]	; (801f830 <UART_SetConfig+0x4c4>)
 801f7ba:	61bb      	str	r3, [r7, #24]
        break;
 801f7bc:	e00c      	b.n	801f7d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801f7be:	f7fd fb05 	bl	801cdcc <HAL_RCC_GetSysClockFreq>
 801f7c2:	61b8      	str	r0, [r7, #24]
        break;
 801f7c4:	e008      	b.n	801f7d8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f7c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801f7ca:	61bb      	str	r3, [r7, #24]
        break;
 801f7cc:	e004      	b.n	801f7d8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801f7ce:	2300      	movs	r3, #0
 801f7d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801f7d2:	2301      	movs	r3, #1
 801f7d4:	77bb      	strb	r3, [r7, #30]
        break;
 801f7d6:	bf00      	nop
    }

    if (pclk != 0U)
 801f7d8:	69bb      	ldr	r3, [r7, #24]
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	d018      	beq.n	801f810 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801f7de:	687b      	ldr	r3, [r7, #4]
 801f7e0:	685b      	ldr	r3, [r3, #4]
 801f7e2:	085a      	lsrs	r2, r3, #1
 801f7e4:	69bb      	ldr	r3, [r7, #24]
 801f7e6:	441a      	add	r2, r3
 801f7e8:	687b      	ldr	r3, [r7, #4]
 801f7ea:	685b      	ldr	r3, [r3, #4]
 801f7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801f7f0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801f7f2:	693b      	ldr	r3, [r7, #16]
 801f7f4:	2b0f      	cmp	r3, #15
 801f7f6:	d909      	bls.n	801f80c <UART_SetConfig+0x4a0>
 801f7f8:	693b      	ldr	r3, [r7, #16]
 801f7fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f7fe:	d205      	bcs.n	801f80c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801f800:	693b      	ldr	r3, [r7, #16]
 801f802:	b29a      	uxth	r2, r3
 801f804:	687b      	ldr	r3, [r7, #4]
 801f806:	681b      	ldr	r3, [r3, #0]
 801f808:	60da      	str	r2, [r3, #12]
 801f80a:	e001      	b.n	801f810 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801f80c:	2301      	movs	r3, #1
 801f80e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801f810:	687b      	ldr	r3, [r7, #4]
 801f812:	2200      	movs	r2, #0
 801f814:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	2200      	movs	r2, #0
 801f81a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801f81c:	7fbb      	ldrb	r3, [r7, #30]
}
 801f81e:	4618      	mov	r0, r3
 801f820:	3720      	adds	r7, #32
 801f822:	46bd      	mov	sp, r7
 801f824:	bd80      	pop	{r7, pc}
 801f826:	bf00      	nop
 801f828:	40007c00 	.word	0x40007c00
 801f82c:	40023800 	.word	0x40023800
 801f830:	00f42400 	.word	0x00f42400

0801f834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801f834:	b480      	push	{r7}
 801f836:	b083      	sub	sp, #12
 801f838:	af00      	add	r7, sp, #0
 801f83a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801f83c:	687b      	ldr	r3, [r7, #4]
 801f83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f840:	f003 0301 	and.w	r3, r3, #1
 801f844:	2b00      	cmp	r3, #0
 801f846:	d00a      	beq.n	801f85e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801f848:	687b      	ldr	r3, [r7, #4]
 801f84a:	681b      	ldr	r3, [r3, #0]
 801f84c:	685b      	ldr	r3, [r3, #4]
 801f84e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801f852:	687b      	ldr	r3, [r7, #4]
 801f854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801f856:	687b      	ldr	r3, [r7, #4]
 801f858:	681b      	ldr	r3, [r3, #0]
 801f85a:	430a      	orrs	r2, r1
 801f85c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801f85e:	687b      	ldr	r3, [r7, #4]
 801f860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f862:	f003 0302 	and.w	r3, r3, #2
 801f866:	2b00      	cmp	r3, #0
 801f868:	d00a      	beq.n	801f880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801f86a:	687b      	ldr	r3, [r7, #4]
 801f86c:	681b      	ldr	r3, [r3, #0]
 801f86e:	685b      	ldr	r3, [r3, #4]
 801f870:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801f874:	687b      	ldr	r3, [r7, #4]
 801f876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	681b      	ldr	r3, [r3, #0]
 801f87c:	430a      	orrs	r2, r1
 801f87e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f884:	f003 0304 	and.w	r3, r3, #4
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d00a      	beq.n	801f8a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	681b      	ldr	r3, [r3, #0]
 801f890:	685b      	ldr	r3, [r3, #4]
 801f892:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	681b      	ldr	r3, [r3, #0]
 801f89e:	430a      	orrs	r2, r1
 801f8a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8a6:	f003 0308 	and.w	r3, r3, #8
 801f8aa:	2b00      	cmp	r3, #0
 801f8ac:	d00a      	beq.n	801f8c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801f8ae:	687b      	ldr	r3, [r7, #4]
 801f8b0:	681b      	ldr	r3, [r3, #0]
 801f8b2:	685b      	ldr	r3, [r3, #4]
 801f8b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801f8b8:	687b      	ldr	r3, [r7, #4]
 801f8ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801f8bc:	687b      	ldr	r3, [r7, #4]
 801f8be:	681b      	ldr	r3, [r3, #0]
 801f8c0:	430a      	orrs	r2, r1
 801f8c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801f8c4:	687b      	ldr	r3, [r7, #4]
 801f8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8c8:	f003 0310 	and.w	r3, r3, #16
 801f8cc:	2b00      	cmp	r3, #0
 801f8ce:	d00a      	beq.n	801f8e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801f8d0:	687b      	ldr	r3, [r7, #4]
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	689b      	ldr	r3, [r3, #8]
 801f8d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801f8da:	687b      	ldr	r3, [r7, #4]
 801f8dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	681b      	ldr	r3, [r3, #0]
 801f8e2:	430a      	orrs	r2, r1
 801f8e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f8ea:	f003 0320 	and.w	r3, r3, #32
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	d00a      	beq.n	801f908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801f8f2:	687b      	ldr	r3, [r7, #4]
 801f8f4:	681b      	ldr	r3, [r3, #0]
 801f8f6:	689b      	ldr	r3, [r3, #8]
 801f8f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801f8fc:	687b      	ldr	r3, [r7, #4]
 801f8fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	430a      	orrs	r2, r1
 801f906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801f908:	687b      	ldr	r3, [r7, #4]
 801f90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f90c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f910:	2b00      	cmp	r3, #0
 801f912:	d01a      	beq.n	801f94a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801f914:	687b      	ldr	r3, [r7, #4]
 801f916:	681b      	ldr	r3, [r3, #0]
 801f918:	685b      	ldr	r3, [r3, #4]
 801f91a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801f91e:	687b      	ldr	r3, [r7, #4]
 801f920:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	430a      	orrs	r2, r1
 801f928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801f92a:	687b      	ldr	r3, [r7, #4]
 801f92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f932:	d10a      	bne.n	801f94a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801f934:	687b      	ldr	r3, [r7, #4]
 801f936:	681b      	ldr	r3, [r3, #0]
 801f938:	685b      	ldr	r3, [r3, #4]
 801f93a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801f942:	687b      	ldr	r3, [r7, #4]
 801f944:	681b      	ldr	r3, [r3, #0]
 801f946:	430a      	orrs	r2, r1
 801f948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801f94a:	687b      	ldr	r3, [r7, #4]
 801f94c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f952:	2b00      	cmp	r3, #0
 801f954:	d00a      	beq.n	801f96c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801f956:	687b      	ldr	r3, [r7, #4]
 801f958:	681b      	ldr	r3, [r3, #0]
 801f95a:	685b      	ldr	r3, [r3, #4]
 801f95c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	430a      	orrs	r2, r1
 801f96a:	605a      	str	r2, [r3, #4]
  }
}
 801f96c:	bf00      	nop
 801f96e:	370c      	adds	r7, #12
 801f970:	46bd      	mov	sp, r7
 801f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f976:	4770      	bx	lr

0801f978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801f978:	b580      	push	{r7, lr}
 801f97a:	b086      	sub	sp, #24
 801f97c:	af02      	add	r7, sp, #8
 801f97e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	2200      	movs	r2, #0
 801f984:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801f988:	f7f9 fc04 	bl	8019194 <HAL_GetTick>
 801f98c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	681b      	ldr	r3, [r3, #0]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	f003 0308 	and.w	r3, r3, #8
 801f998:	2b08      	cmp	r3, #8
 801f99a:	d10e      	bne.n	801f9ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f99c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f9a0:	9300      	str	r3, [sp, #0]
 801f9a2:	68fb      	ldr	r3, [r7, #12]
 801f9a4:	2200      	movs	r2, #0
 801f9a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801f9aa:	6878      	ldr	r0, [r7, #4]
 801f9ac:	f000 f831 	bl	801fa12 <UART_WaitOnFlagUntilTimeout>
 801f9b0:	4603      	mov	r3, r0
 801f9b2:	2b00      	cmp	r3, #0
 801f9b4:	d001      	beq.n	801f9ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f9b6:	2303      	movs	r3, #3
 801f9b8:	e027      	b.n	801fa0a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801f9ba:	687b      	ldr	r3, [r7, #4]
 801f9bc:	681b      	ldr	r3, [r3, #0]
 801f9be:	681b      	ldr	r3, [r3, #0]
 801f9c0:	f003 0304 	and.w	r3, r3, #4
 801f9c4:	2b04      	cmp	r3, #4
 801f9c6:	d10e      	bne.n	801f9e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801f9c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801f9cc:	9300      	str	r3, [sp, #0]
 801f9ce:	68fb      	ldr	r3, [r7, #12]
 801f9d0:	2200      	movs	r2, #0
 801f9d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801f9d6:	6878      	ldr	r0, [r7, #4]
 801f9d8:	f000 f81b 	bl	801fa12 <UART_WaitOnFlagUntilTimeout>
 801f9dc:	4603      	mov	r3, r0
 801f9de:	2b00      	cmp	r3, #0
 801f9e0:	d001      	beq.n	801f9e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801f9e2:	2303      	movs	r3, #3
 801f9e4:	e011      	b.n	801fa0a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	2220      	movs	r2, #32
 801f9ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	2220      	movs	r2, #32
 801f9f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	2200      	movs	r2, #0
 801f9f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801f9fa:	687b      	ldr	r3, [r7, #4]
 801f9fc:	2200      	movs	r2, #0
 801f9fe:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801fa00:	687b      	ldr	r3, [r7, #4]
 801fa02:	2200      	movs	r2, #0
 801fa04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801fa08:	2300      	movs	r3, #0
}
 801fa0a:	4618      	mov	r0, r3
 801fa0c:	3710      	adds	r7, #16
 801fa0e:	46bd      	mov	sp, r7
 801fa10:	bd80      	pop	{r7, pc}

0801fa12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801fa12:	b580      	push	{r7, lr}
 801fa14:	b09c      	sub	sp, #112	; 0x70
 801fa16:	af00      	add	r7, sp, #0
 801fa18:	60f8      	str	r0, [r7, #12]
 801fa1a:	60b9      	str	r1, [r7, #8]
 801fa1c:	603b      	str	r3, [r7, #0]
 801fa1e:	4613      	mov	r3, r2
 801fa20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fa22:	e0a7      	b.n	801fb74 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801fa24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fa26:	f1b3 3fff 	cmp.w	r3, #4294967295
 801fa2a:	f000 80a3 	beq.w	801fb74 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801fa2e:	f7f9 fbb1 	bl	8019194 <HAL_GetTick>
 801fa32:	4602      	mov	r2, r0
 801fa34:	683b      	ldr	r3, [r7, #0]
 801fa36:	1ad3      	subs	r3, r2, r3
 801fa38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801fa3a:	429a      	cmp	r2, r3
 801fa3c:	d302      	bcc.n	801fa44 <UART_WaitOnFlagUntilTimeout+0x32>
 801fa3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801fa40:	2b00      	cmp	r3, #0
 801fa42:	d13f      	bne.n	801fac4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801fa44:	68fb      	ldr	r3, [r7, #12]
 801fa46:	681b      	ldr	r3, [r3, #0]
 801fa48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fa4c:	e853 3f00 	ldrex	r3, [r3]
 801fa50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801fa52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fa54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fa58:	667b      	str	r3, [r7, #100]	; 0x64
 801fa5a:	68fb      	ldr	r3, [r7, #12]
 801fa5c:	681b      	ldr	r3, [r3, #0]
 801fa5e:	461a      	mov	r2, r3
 801fa60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801fa62:	65fb      	str	r3, [r7, #92]	; 0x5c
 801fa64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801fa68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801fa6a:	e841 2300 	strex	r3, r2, [r1]
 801fa6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801fa70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	d1e6      	bne.n	801fa44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fa76:	68fb      	ldr	r3, [r7, #12]
 801fa78:	681b      	ldr	r3, [r3, #0]
 801fa7a:	3308      	adds	r3, #8
 801fa7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fa7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fa80:	e853 3f00 	ldrex	r3, [r3]
 801fa84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fa86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fa88:	f023 0301 	bic.w	r3, r3, #1
 801fa8c:	663b      	str	r3, [r7, #96]	; 0x60
 801fa8e:	68fb      	ldr	r3, [r7, #12]
 801fa90:	681b      	ldr	r3, [r3, #0]
 801fa92:	3308      	adds	r3, #8
 801fa94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801fa96:	64ba      	str	r2, [r7, #72]	; 0x48
 801fa98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fa9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fa9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fa9e:	e841 2300 	strex	r3, r2, [r1]
 801faa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801faa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801faa6:	2b00      	cmp	r3, #0
 801faa8:	d1e5      	bne.n	801fa76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801faaa:	68fb      	ldr	r3, [r7, #12]
 801faac:	2220      	movs	r2, #32
 801faae:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801fab0:	68fb      	ldr	r3, [r7, #12]
 801fab2:	2220      	movs	r2, #32
 801fab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801fab8:	68fb      	ldr	r3, [r7, #12]
 801faba:	2200      	movs	r2, #0
 801fabc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801fac0:	2303      	movs	r3, #3
 801fac2:	e068      	b.n	801fb96 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801fac4:	68fb      	ldr	r3, [r7, #12]
 801fac6:	681b      	ldr	r3, [r3, #0]
 801fac8:	681b      	ldr	r3, [r3, #0]
 801faca:	f003 0304 	and.w	r3, r3, #4
 801face:	2b00      	cmp	r3, #0
 801fad0:	d050      	beq.n	801fb74 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801fad2:	68fb      	ldr	r3, [r7, #12]
 801fad4:	681b      	ldr	r3, [r3, #0]
 801fad6:	69db      	ldr	r3, [r3, #28]
 801fad8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801fadc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801fae0:	d148      	bne.n	801fb74 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801fae2:	68fb      	ldr	r3, [r7, #12]
 801fae4:	681b      	ldr	r3, [r3, #0]
 801fae6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801faea:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801faec:	68fb      	ldr	r3, [r7, #12]
 801faee:	681b      	ldr	r3, [r3, #0]
 801faf0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801faf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801faf4:	e853 3f00 	ldrex	r3, [r3]
 801faf8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fafc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801fb00:	66fb      	str	r3, [r7, #108]	; 0x6c
 801fb02:	68fb      	ldr	r3, [r7, #12]
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	461a      	mov	r2, r3
 801fb08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801fb0a:	637b      	str	r3, [r7, #52]	; 0x34
 801fb0c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fb10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fb12:	e841 2300 	strex	r3, r2, [r1]
 801fb16:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fb18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb1a:	2b00      	cmp	r3, #0
 801fb1c:	d1e6      	bne.n	801faec <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fb1e:	68fb      	ldr	r3, [r7, #12]
 801fb20:	681b      	ldr	r3, [r3, #0]
 801fb22:	3308      	adds	r3, #8
 801fb24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fb26:	697b      	ldr	r3, [r7, #20]
 801fb28:	e853 3f00 	ldrex	r3, [r3]
 801fb2c:	613b      	str	r3, [r7, #16]
   return(result);
 801fb2e:	693b      	ldr	r3, [r7, #16]
 801fb30:	f023 0301 	bic.w	r3, r3, #1
 801fb34:	66bb      	str	r3, [r7, #104]	; 0x68
 801fb36:	68fb      	ldr	r3, [r7, #12]
 801fb38:	681b      	ldr	r3, [r3, #0]
 801fb3a:	3308      	adds	r3, #8
 801fb3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801fb3e:	623a      	str	r2, [r7, #32]
 801fb40:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fb42:	69f9      	ldr	r1, [r7, #28]
 801fb44:	6a3a      	ldr	r2, [r7, #32]
 801fb46:	e841 2300 	strex	r3, r2, [r1]
 801fb4a:	61bb      	str	r3, [r7, #24]
   return(result);
 801fb4c:	69bb      	ldr	r3, [r7, #24]
 801fb4e:	2b00      	cmp	r3, #0
 801fb50:	d1e5      	bne.n	801fb1e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801fb52:	68fb      	ldr	r3, [r7, #12]
 801fb54:	2220      	movs	r2, #32
 801fb56:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801fb58:	68fb      	ldr	r3, [r7, #12]
 801fb5a:	2220      	movs	r2, #32
 801fb5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801fb60:	68fb      	ldr	r3, [r7, #12]
 801fb62:	2220      	movs	r2, #32
 801fb64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fb68:	68fb      	ldr	r3, [r7, #12]
 801fb6a:	2200      	movs	r2, #0
 801fb6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801fb70:	2303      	movs	r3, #3
 801fb72:	e010      	b.n	801fb96 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801fb74:	68fb      	ldr	r3, [r7, #12]
 801fb76:	681b      	ldr	r3, [r3, #0]
 801fb78:	69da      	ldr	r2, [r3, #28]
 801fb7a:	68bb      	ldr	r3, [r7, #8]
 801fb7c:	4013      	ands	r3, r2
 801fb7e:	68ba      	ldr	r2, [r7, #8]
 801fb80:	429a      	cmp	r2, r3
 801fb82:	bf0c      	ite	eq
 801fb84:	2301      	moveq	r3, #1
 801fb86:	2300      	movne	r3, #0
 801fb88:	b2db      	uxtb	r3, r3
 801fb8a:	461a      	mov	r2, r3
 801fb8c:	79fb      	ldrb	r3, [r7, #7]
 801fb8e:	429a      	cmp	r2, r3
 801fb90:	f43f af48 	beq.w	801fa24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801fb94:	2300      	movs	r3, #0
}
 801fb96:	4618      	mov	r0, r3
 801fb98:	3770      	adds	r7, #112	; 0x70
 801fb9a:	46bd      	mov	sp, r7
 801fb9c:	bd80      	pop	{r7, pc}
	...

0801fba0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801fba0:	b480      	push	{r7}
 801fba2:	b097      	sub	sp, #92	; 0x5c
 801fba4:	af00      	add	r7, sp, #0
 801fba6:	60f8      	str	r0, [r7, #12]
 801fba8:	60b9      	str	r1, [r7, #8]
 801fbaa:	4613      	mov	r3, r2
 801fbac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801fbae:	68fb      	ldr	r3, [r7, #12]
 801fbb0:	68ba      	ldr	r2, [r7, #8]
 801fbb2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	88fa      	ldrh	r2, [r7, #6]
 801fbb8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801fbbc:	68fb      	ldr	r3, [r7, #12]
 801fbbe:	88fa      	ldrh	r2, [r7, #6]
 801fbc0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801fbc4:	68fb      	ldr	r3, [r7, #12]
 801fbc6:	2200      	movs	r2, #0
 801fbc8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801fbca:	68fb      	ldr	r3, [r7, #12]
 801fbcc:	689b      	ldr	r3, [r3, #8]
 801fbce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fbd2:	d10e      	bne.n	801fbf2 <UART_Start_Receive_IT+0x52>
 801fbd4:	68fb      	ldr	r3, [r7, #12]
 801fbd6:	691b      	ldr	r3, [r3, #16]
 801fbd8:	2b00      	cmp	r3, #0
 801fbda:	d105      	bne.n	801fbe8 <UART_Start_Receive_IT+0x48>
 801fbdc:	68fb      	ldr	r3, [r7, #12]
 801fbde:	f240 12ff 	movw	r2, #511	; 0x1ff
 801fbe2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fbe6:	e02d      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fbe8:	68fb      	ldr	r3, [r7, #12]
 801fbea:	22ff      	movs	r2, #255	; 0xff
 801fbec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fbf0:	e028      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fbf2:	68fb      	ldr	r3, [r7, #12]
 801fbf4:	689b      	ldr	r3, [r3, #8]
 801fbf6:	2b00      	cmp	r3, #0
 801fbf8:	d10d      	bne.n	801fc16 <UART_Start_Receive_IT+0x76>
 801fbfa:	68fb      	ldr	r3, [r7, #12]
 801fbfc:	691b      	ldr	r3, [r3, #16]
 801fbfe:	2b00      	cmp	r3, #0
 801fc00:	d104      	bne.n	801fc0c <UART_Start_Receive_IT+0x6c>
 801fc02:	68fb      	ldr	r3, [r7, #12]
 801fc04:	22ff      	movs	r2, #255	; 0xff
 801fc06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fc0a:	e01b      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	227f      	movs	r2, #127	; 0x7f
 801fc10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fc14:	e016      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fc16:	68fb      	ldr	r3, [r7, #12]
 801fc18:	689b      	ldr	r3, [r3, #8]
 801fc1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801fc1e:	d10d      	bne.n	801fc3c <UART_Start_Receive_IT+0x9c>
 801fc20:	68fb      	ldr	r3, [r7, #12]
 801fc22:	691b      	ldr	r3, [r3, #16]
 801fc24:	2b00      	cmp	r3, #0
 801fc26:	d104      	bne.n	801fc32 <UART_Start_Receive_IT+0x92>
 801fc28:	68fb      	ldr	r3, [r7, #12]
 801fc2a:	227f      	movs	r2, #127	; 0x7f
 801fc2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fc30:	e008      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fc32:	68fb      	ldr	r3, [r7, #12]
 801fc34:	223f      	movs	r2, #63	; 0x3f
 801fc36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801fc3a:	e003      	b.n	801fc44 <UART_Start_Receive_IT+0xa4>
 801fc3c:	68fb      	ldr	r3, [r7, #12]
 801fc3e:	2200      	movs	r2, #0
 801fc40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fc44:	68fb      	ldr	r3, [r7, #12]
 801fc46:	2200      	movs	r2, #0
 801fc48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801fc4c:	68fb      	ldr	r3, [r7, #12]
 801fc4e:	2222      	movs	r2, #34	; 0x22
 801fc50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	681b      	ldr	r3, [r3, #0]
 801fc58:	3308      	adds	r3, #8
 801fc5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fc5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801fc5e:	e853 3f00 	ldrex	r3, [r3]
 801fc62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fc64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fc66:	f043 0301 	orr.w	r3, r3, #1
 801fc6a:	657b      	str	r3, [r7, #84]	; 0x54
 801fc6c:	68fb      	ldr	r3, [r7, #12]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	3308      	adds	r3, #8
 801fc72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801fc74:	64ba      	str	r2, [r7, #72]	; 0x48
 801fc76:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fc78:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801fc7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fc7c:	e841 2300 	strex	r3, r2, [r1]
 801fc80:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801fc82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801fc84:	2b00      	cmp	r3, #0
 801fc86:	d1e5      	bne.n	801fc54 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801fc88:	68fb      	ldr	r3, [r7, #12]
 801fc8a:	689b      	ldr	r3, [r3, #8]
 801fc8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801fc90:	d107      	bne.n	801fca2 <UART_Start_Receive_IT+0x102>
 801fc92:	68fb      	ldr	r3, [r7, #12]
 801fc94:	691b      	ldr	r3, [r3, #16]
 801fc96:	2b00      	cmp	r3, #0
 801fc98:	d103      	bne.n	801fca2 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	4a21      	ldr	r2, [pc, #132]	; (801fd24 <UART_Start_Receive_IT+0x184>)
 801fc9e:	669a      	str	r2, [r3, #104]	; 0x68
 801fca0:	e002      	b.n	801fca8 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801fca2:	68fb      	ldr	r3, [r7, #12]
 801fca4:	4a20      	ldr	r2, [pc, #128]	; (801fd28 <UART_Start_Receive_IT+0x188>)
 801fca6:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801fca8:	68fb      	ldr	r3, [r7, #12]
 801fcaa:	691b      	ldr	r3, [r3, #16]
 801fcac:	2b00      	cmp	r3, #0
 801fcae:	d019      	beq.n	801fce4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801fcb0:	68fb      	ldr	r3, [r7, #12]
 801fcb2:	681b      	ldr	r3, [r3, #0]
 801fcb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fcb8:	e853 3f00 	ldrex	r3, [r3]
 801fcbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fcbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcc0:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801fcc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 801fcc6:	68fb      	ldr	r3, [r7, #12]
 801fcc8:	681b      	ldr	r3, [r3, #0]
 801fcca:	461a      	mov	r2, r3
 801fccc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fcce:	637b      	str	r3, [r7, #52]	; 0x34
 801fcd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fcd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801fcd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801fcd6:	e841 2300 	strex	r3, r2, [r1]
 801fcda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801fcdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fcde:	2b00      	cmp	r3, #0
 801fce0:	d1e6      	bne.n	801fcb0 <UART_Start_Receive_IT+0x110>
 801fce2:	e018      	b.n	801fd16 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801fce4:	68fb      	ldr	r3, [r7, #12]
 801fce6:	681b      	ldr	r3, [r3, #0]
 801fce8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fcea:	697b      	ldr	r3, [r7, #20]
 801fcec:	e853 3f00 	ldrex	r3, [r3]
 801fcf0:	613b      	str	r3, [r7, #16]
   return(result);
 801fcf2:	693b      	ldr	r3, [r7, #16]
 801fcf4:	f043 0320 	orr.w	r3, r3, #32
 801fcf8:	653b      	str	r3, [r7, #80]	; 0x50
 801fcfa:	68fb      	ldr	r3, [r7, #12]
 801fcfc:	681b      	ldr	r3, [r3, #0]
 801fcfe:	461a      	mov	r2, r3
 801fd00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801fd02:	623b      	str	r3, [r7, #32]
 801fd04:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd06:	69f9      	ldr	r1, [r7, #28]
 801fd08:	6a3a      	ldr	r2, [r7, #32]
 801fd0a:	e841 2300 	strex	r3, r2, [r1]
 801fd0e:	61bb      	str	r3, [r7, #24]
   return(result);
 801fd10:	69bb      	ldr	r3, [r7, #24]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d1e6      	bne.n	801fce4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801fd16:	2300      	movs	r3, #0
}
 801fd18:	4618      	mov	r0, r3
 801fd1a:	375c      	adds	r7, #92	; 0x5c
 801fd1c:	46bd      	mov	sp, r7
 801fd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd22:	4770      	bx	lr
 801fd24:	0801ffeb 	.word	0x0801ffeb
 801fd28:	0801fe7d 	.word	0x0801fe7d

0801fd2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801fd2c:	b480      	push	{r7}
 801fd2e:	b095      	sub	sp, #84	; 0x54
 801fd30:	af00      	add	r7, sp, #0
 801fd32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	681b      	ldr	r3, [r3, #0]
 801fd38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fd3c:	e853 3f00 	ldrex	r3, [r3]
 801fd40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801fd44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801fd48:	64fb      	str	r3, [r7, #76]	; 0x4c
 801fd4a:	687b      	ldr	r3, [r7, #4]
 801fd4c:	681b      	ldr	r3, [r3, #0]
 801fd4e:	461a      	mov	r2, r3
 801fd50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801fd52:	643b      	str	r3, [r7, #64]	; 0x40
 801fd54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801fd58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801fd5a:	e841 2300 	strex	r3, r2, [r1]
 801fd5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d1e6      	bne.n	801fd34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	3308      	adds	r3, #8
 801fd6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fd6e:	6a3b      	ldr	r3, [r7, #32]
 801fd70:	e853 3f00 	ldrex	r3, [r3]
 801fd74:	61fb      	str	r3, [r7, #28]
   return(result);
 801fd76:	69fb      	ldr	r3, [r7, #28]
 801fd78:	f023 0301 	bic.w	r3, r3, #1
 801fd7c:	64bb      	str	r3, [r7, #72]	; 0x48
 801fd7e:	687b      	ldr	r3, [r7, #4]
 801fd80:	681b      	ldr	r3, [r3, #0]
 801fd82:	3308      	adds	r3, #8
 801fd84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801fd86:	62fa      	str	r2, [r7, #44]	; 0x2c
 801fd88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fd8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801fd8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801fd8e:	e841 2300 	strex	r3, r2, [r1]
 801fd92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801fd94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d1e5      	bne.n	801fd66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801fd9a:	687b      	ldr	r3, [r7, #4]
 801fd9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801fd9e:	2b01      	cmp	r3, #1
 801fda0:	d118      	bne.n	801fdd4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fda8:	68fb      	ldr	r3, [r7, #12]
 801fdaa:	e853 3f00 	ldrex	r3, [r3]
 801fdae:	60bb      	str	r3, [r7, #8]
   return(result);
 801fdb0:	68bb      	ldr	r3, [r7, #8]
 801fdb2:	f023 0310 	bic.w	r3, r3, #16
 801fdb6:	647b      	str	r3, [r7, #68]	; 0x44
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	461a      	mov	r2, r3
 801fdbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801fdc0:	61bb      	str	r3, [r7, #24]
 801fdc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fdc4:	6979      	ldr	r1, [r7, #20]
 801fdc6:	69ba      	ldr	r2, [r7, #24]
 801fdc8:	e841 2300 	strex	r3, r2, [r1]
 801fdcc:	613b      	str	r3, [r7, #16]
   return(result);
 801fdce:	693b      	ldr	r3, [r7, #16]
 801fdd0:	2b00      	cmp	r3, #0
 801fdd2:	d1e6      	bne.n	801fda2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801fdd4:	687b      	ldr	r3, [r7, #4]
 801fdd6:	2220      	movs	r2, #32
 801fdd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801fddc:	687b      	ldr	r3, [r7, #4]
 801fdde:	2200      	movs	r2, #0
 801fde0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	2200      	movs	r2, #0
 801fde6:	669a      	str	r2, [r3, #104]	; 0x68
}
 801fde8:	bf00      	nop
 801fdea:	3754      	adds	r7, #84	; 0x54
 801fdec:	46bd      	mov	sp, r7
 801fdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdf2:	4770      	bx	lr

0801fdf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	b084      	sub	sp, #16
 801fdf8:	af00      	add	r7, sp, #0
 801fdfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801fdfc:	687b      	ldr	r3, [r7, #4]
 801fdfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801fe00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	2200      	movs	r2, #0
 801fe06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801fe0a:	68fb      	ldr	r3, [r7, #12]
 801fe0c:	2200      	movs	r2, #0
 801fe0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801fe12:	68fb      	ldr	r3, [r7, #12]
 801fe14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801fe18:	68f8      	ldr	r0, [r7, #12]
 801fe1a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801fe1c:	bf00      	nop
 801fe1e:	3710      	adds	r7, #16
 801fe20:	46bd      	mov	sp, r7
 801fe22:	bd80      	pop	{r7, pc}

0801fe24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801fe24:	b580      	push	{r7, lr}
 801fe26:	b088      	sub	sp, #32
 801fe28:	af00      	add	r7, sp, #0
 801fe2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	681b      	ldr	r3, [r3, #0]
 801fe30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe32:	68fb      	ldr	r3, [r7, #12]
 801fe34:	e853 3f00 	ldrex	r3, [r3]
 801fe38:	60bb      	str	r3, [r7, #8]
   return(result);
 801fe3a:	68bb      	ldr	r3, [r7, #8]
 801fe3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fe40:	61fb      	str	r3, [r7, #28]
 801fe42:	687b      	ldr	r3, [r7, #4]
 801fe44:	681b      	ldr	r3, [r3, #0]
 801fe46:	461a      	mov	r2, r3
 801fe48:	69fb      	ldr	r3, [r7, #28]
 801fe4a:	61bb      	str	r3, [r7, #24]
 801fe4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe4e:	6979      	ldr	r1, [r7, #20]
 801fe50:	69ba      	ldr	r2, [r7, #24]
 801fe52:	e841 2300 	strex	r3, r2, [r1]
 801fe56:	613b      	str	r3, [r7, #16]
   return(result);
 801fe58:	693b      	ldr	r3, [r7, #16]
 801fe5a:	2b00      	cmp	r3, #0
 801fe5c:	d1e6      	bne.n	801fe2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	2220      	movs	r2, #32
 801fe62:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801fe64:	687b      	ldr	r3, [r7, #4]
 801fe66:	2200      	movs	r2, #0
 801fe68:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801fe70:	6878      	ldr	r0, [r7, #4]
 801fe72:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801fe74:	bf00      	nop
 801fe76:	3720      	adds	r7, #32
 801fe78:	46bd      	mov	sp, r7
 801fe7a:	bd80      	pop	{r7, pc}

0801fe7c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801fe7c:	b580      	push	{r7, lr}
 801fe7e:	b096      	sub	sp, #88	; 0x58
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fe8a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801fe8e:	687b      	ldr	r3, [r7, #4]
 801fe90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801fe94:	2b22      	cmp	r3, #34	; 0x22
 801fe96:	f040 809c 	bne.w	801ffd2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801fe9a:	687b      	ldr	r3, [r7, #4]
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801fea0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801fea4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801fea8:	b2d9      	uxtb	r1, r3
 801feaa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801feae:	b2da      	uxtb	r2, r3
 801feb0:	687b      	ldr	r3, [r7, #4]
 801feb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801feb4:	400a      	ands	r2, r1
 801feb6:	b2d2      	uxtb	r2, r2
 801feb8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801feba:	687b      	ldr	r3, [r7, #4]
 801febc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801febe:	1c5a      	adds	r2, r3, #1
 801fec0:	687b      	ldr	r3, [r7, #4]
 801fec2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801feca:	b29b      	uxth	r3, r3
 801fecc:	3b01      	subs	r3, #1
 801fece:	b29a      	uxth	r2, r3
 801fed0:	687b      	ldr	r3, [r7, #4]
 801fed2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801fedc:	b29b      	uxth	r3, r3
 801fede:	2b00      	cmp	r3, #0
 801fee0:	d17f      	bne.n	801ffe2 <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801fee2:	687b      	ldr	r3, [r7, #4]
 801fee4:	681b      	ldr	r3, [r3, #0]
 801fee6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801feea:	e853 3f00 	ldrex	r3, [r3]
 801feee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801fef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801fef2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801fef6:	653b      	str	r3, [r7, #80]	; 0x50
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	681b      	ldr	r3, [r3, #0]
 801fefc:	461a      	mov	r2, r3
 801fefe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ff00:	647b      	str	r3, [r7, #68]	; 0x44
 801ff02:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff04:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801ff06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ff08:	e841 2300 	strex	r3, r2, [r1]
 801ff0c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801ff0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ff10:	2b00      	cmp	r3, #0
 801ff12:	d1e6      	bne.n	801fee2 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	681b      	ldr	r3, [r3, #0]
 801ff18:	3308      	adds	r3, #8
 801ff1a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ff1e:	e853 3f00 	ldrex	r3, [r3]
 801ff22:	623b      	str	r3, [r7, #32]
   return(result);
 801ff24:	6a3b      	ldr	r3, [r7, #32]
 801ff26:	f023 0301 	bic.w	r3, r3, #1
 801ff2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	681b      	ldr	r3, [r3, #0]
 801ff30:	3308      	adds	r3, #8
 801ff32:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801ff34:	633a      	str	r2, [r7, #48]	; 0x30
 801ff36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ff3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ff3c:	e841 2300 	strex	r3, r2, [r1]
 801ff40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801ff42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ff44:	2b00      	cmp	r3, #0
 801ff46:	d1e5      	bne.n	801ff14 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801ff48:	687b      	ldr	r3, [r7, #4]
 801ff4a:	2220      	movs	r2, #32
 801ff4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801ff50:	687b      	ldr	r3, [r7, #4]
 801ff52:	2200      	movs	r2, #0
 801ff54:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	2200      	movs	r2, #0
 801ff5a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ff5c:	687b      	ldr	r3, [r7, #4]
 801ff5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ff60:	2b01      	cmp	r3, #1
 801ff62:	d130      	bne.n	801ffc6 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff64:	687b      	ldr	r3, [r7, #4]
 801ff66:	2200      	movs	r2, #0
 801ff68:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ff6a:	687b      	ldr	r3, [r7, #4]
 801ff6c:	681b      	ldr	r3, [r3, #0]
 801ff6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff70:	693b      	ldr	r3, [r7, #16]
 801ff72:	e853 3f00 	ldrex	r3, [r3]
 801ff76:	60fb      	str	r3, [r7, #12]
   return(result);
 801ff78:	68fb      	ldr	r3, [r7, #12]
 801ff7a:	f023 0310 	bic.w	r3, r3, #16
 801ff7e:	64bb      	str	r3, [r7, #72]	; 0x48
 801ff80:	687b      	ldr	r3, [r7, #4]
 801ff82:	681b      	ldr	r3, [r3, #0]
 801ff84:	461a      	mov	r2, r3
 801ff86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ff88:	61fb      	str	r3, [r7, #28]
 801ff8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff8c:	69b9      	ldr	r1, [r7, #24]
 801ff8e:	69fa      	ldr	r2, [r7, #28]
 801ff90:	e841 2300 	strex	r3, r2, [r1]
 801ff94:	617b      	str	r3, [r7, #20]
   return(result);
 801ff96:	697b      	ldr	r3, [r7, #20]
 801ff98:	2b00      	cmp	r3, #0
 801ff9a:	d1e6      	bne.n	801ff6a <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801ff9c:	687b      	ldr	r3, [r7, #4]
 801ff9e:	681b      	ldr	r3, [r3, #0]
 801ffa0:	69db      	ldr	r3, [r3, #28]
 801ffa2:	f003 0310 	and.w	r3, r3, #16
 801ffa6:	2b10      	cmp	r3, #16
 801ffa8:	d103      	bne.n	801ffb2 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ffaa:	687b      	ldr	r3, [r7, #4]
 801ffac:	681b      	ldr	r3, [r3, #0]
 801ffae:	2210      	movs	r2, #16
 801ffb0:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801ffb2:	687b      	ldr	r3, [r7, #4]
 801ffb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ffb8:	687a      	ldr	r2, [r7, #4]
 801ffba:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801ffbe:	4611      	mov	r1, r2
 801ffc0:	6878      	ldr	r0, [r7, #4]
 801ffc2:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ffc4:	e00d      	b.n	801ffe2 <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801ffc6:	687b      	ldr	r3, [r7, #4]
 801ffc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ffcc:	6878      	ldr	r0, [r7, #4]
 801ffce:	4798      	blx	r3
}
 801ffd0:	e007      	b.n	801ffe2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	699a      	ldr	r2, [r3, #24]
 801ffd8:	687b      	ldr	r3, [r7, #4]
 801ffda:	681b      	ldr	r3, [r3, #0]
 801ffdc:	f042 0208 	orr.w	r2, r2, #8
 801ffe0:	619a      	str	r2, [r3, #24]
}
 801ffe2:	bf00      	nop
 801ffe4:	3758      	adds	r7, #88	; 0x58
 801ffe6:	46bd      	mov	sp, r7
 801ffe8:	bd80      	pop	{r7, pc}

0801ffea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801ffea:	b580      	push	{r7, lr}
 801ffec:	b096      	sub	sp, #88	; 0x58
 801ffee:	af00      	add	r7, sp, #0
 801fff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801fff2:	687b      	ldr	r3, [r7, #4]
 801fff4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801fff8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801fffc:	687b      	ldr	r3, [r7, #4]
 801fffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8020002:	2b22      	cmp	r3, #34	; 0x22
 8020004:	f040 809c 	bne.w	8020140 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	681b      	ldr	r3, [r3, #0]
 802000c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802000e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020016:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8020018:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 802001c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8020020:	4013      	ands	r3, r2
 8020022:	b29a      	uxth	r2, r3
 8020024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8020026:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 802002c:	1c9a      	adds	r2, r3, #2
 802002e:	687b      	ldr	r3, [r7, #4]
 8020030:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8020032:	687b      	ldr	r3, [r7, #4]
 8020034:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8020038:	b29b      	uxth	r3, r3
 802003a:	3b01      	subs	r3, #1
 802003c:	b29a      	uxth	r2, r3
 802003e:	687b      	ldr	r3, [r7, #4]
 8020040:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8020044:	687b      	ldr	r3, [r7, #4]
 8020046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 802004a:	b29b      	uxth	r3, r3
 802004c:	2b00      	cmp	r3, #0
 802004e:	d17f      	bne.n	8020150 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	681b      	ldr	r3, [r3, #0]
 8020054:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8020058:	e853 3f00 	ldrex	r3, [r3]
 802005c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 802005e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020060:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8020064:	64fb      	str	r3, [r7, #76]	; 0x4c
 8020066:	687b      	ldr	r3, [r7, #4]
 8020068:	681b      	ldr	r3, [r3, #0]
 802006a:	461a      	mov	r2, r3
 802006c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 802006e:	643b      	str	r3, [r7, #64]	; 0x40
 8020070:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020072:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8020074:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8020076:	e841 2300 	strex	r3, r2, [r1]
 802007a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 802007c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802007e:	2b00      	cmp	r3, #0
 8020080:	d1e6      	bne.n	8020050 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	3308      	adds	r3, #8
 8020088:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802008a:	6a3b      	ldr	r3, [r7, #32]
 802008c:	e853 3f00 	ldrex	r3, [r3]
 8020090:	61fb      	str	r3, [r7, #28]
   return(result);
 8020092:	69fb      	ldr	r3, [r7, #28]
 8020094:	f023 0301 	bic.w	r3, r3, #1
 8020098:	64bb      	str	r3, [r7, #72]	; 0x48
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	681b      	ldr	r3, [r3, #0]
 802009e:	3308      	adds	r3, #8
 80200a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80200a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80200a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80200a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80200a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80200aa:	e841 2300 	strex	r3, r2, [r1]
 80200ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80200b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80200b2:	2b00      	cmp	r3, #0
 80200b4:	d1e5      	bne.n	8020082 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80200b6:	687b      	ldr	r3, [r7, #4]
 80200b8:	2220      	movs	r2, #32
 80200ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80200be:	687b      	ldr	r3, [r7, #4]
 80200c0:	2200      	movs	r2, #0
 80200c2:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80200c4:	687b      	ldr	r3, [r7, #4]
 80200c6:	2200      	movs	r2, #0
 80200c8:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80200ca:	687b      	ldr	r3, [r7, #4]
 80200cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80200ce:	2b01      	cmp	r3, #1
 80200d0:	d130      	bne.n	8020134 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80200d2:	687b      	ldr	r3, [r7, #4]
 80200d4:	2200      	movs	r2, #0
 80200d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80200d8:	687b      	ldr	r3, [r7, #4]
 80200da:	681b      	ldr	r3, [r3, #0]
 80200dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80200de:	68fb      	ldr	r3, [r7, #12]
 80200e0:	e853 3f00 	ldrex	r3, [r3]
 80200e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80200e6:	68bb      	ldr	r3, [r7, #8]
 80200e8:	f023 0310 	bic.w	r3, r3, #16
 80200ec:	647b      	str	r3, [r7, #68]	; 0x44
 80200ee:	687b      	ldr	r3, [r7, #4]
 80200f0:	681b      	ldr	r3, [r3, #0]
 80200f2:	461a      	mov	r2, r3
 80200f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80200f6:	61bb      	str	r3, [r7, #24]
 80200f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80200fa:	6979      	ldr	r1, [r7, #20]
 80200fc:	69ba      	ldr	r2, [r7, #24]
 80200fe:	e841 2300 	strex	r3, r2, [r1]
 8020102:	613b      	str	r3, [r7, #16]
   return(result);
 8020104:	693b      	ldr	r3, [r7, #16]
 8020106:	2b00      	cmp	r3, #0
 8020108:	d1e6      	bne.n	80200d8 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 802010a:	687b      	ldr	r3, [r7, #4]
 802010c:	681b      	ldr	r3, [r3, #0]
 802010e:	69db      	ldr	r3, [r3, #28]
 8020110:	f003 0310 	and.w	r3, r3, #16
 8020114:	2b10      	cmp	r3, #16
 8020116:	d103      	bne.n	8020120 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8020118:	687b      	ldr	r3, [r7, #4]
 802011a:	681b      	ldr	r3, [r3, #0]
 802011c:	2210      	movs	r2, #16
 802011e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8020126:	687a      	ldr	r2, [r7, #4]
 8020128:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 802012c:	4611      	mov	r1, r2
 802012e:	6878      	ldr	r0, [r7, #4]
 8020130:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8020132:	e00d      	b.n	8020150 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 802013a:	6878      	ldr	r0, [r7, #4]
 802013c:	4798      	blx	r3
}
 802013e:	e007      	b.n	8020150 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8020140:	687b      	ldr	r3, [r7, #4]
 8020142:	681b      	ldr	r3, [r3, #0]
 8020144:	699a      	ldr	r2, [r3, #24]
 8020146:	687b      	ldr	r3, [r7, #4]
 8020148:	681b      	ldr	r3, [r3, #0]
 802014a:	f042 0208 	orr.w	r2, r2, #8
 802014e:	619a      	str	r2, [r3, #24]
}
 8020150:	bf00      	nop
 8020152:	3758      	adds	r7, #88	; 0x58
 8020154:	46bd      	mov	sp, r7
 8020156:	bd80      	pop	{r7, pc}

08020158 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8020158:	b580      	push	{r7, lr}
 802015a:	b08c      	sub	sp, #48	; 0x30
 802015c:	af00      	add	r7, sp, #0
 802015e:	60f8      	str	r0, [r7, #12]
 8020160:	60b9      	str	r1, [r7, #8]
 8020162:	4613      	mov	r3, r2
 8020164:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8020166:	68fb      	ldr	r3, [r7, #12]
 8020168:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 802016c:	2b20      	cmp	r3, #32
 802016e:	d142      	bne.n	80201f6 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8020170:	68bb      	ldr	r3, [r7, #8]
 8020172:	2b00      	cmp	r3, #0
 8020174:	d002      	beq.n	802017c <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 8020176:	88fb      	ldrh	r3, [r7, #6]
 8020178:	2b00      	cmp	r3, #0
 802017a:	d101      	bne.n	8020180 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 802017c:	2301      	movs	r3, #1
 802017e:	e03b      	b.n	80201f8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8020180:	68fb      	ldr	r3, [r7, #12]
 8020182:	2201      	movs	r2, #1
 8020184:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020186:	68fb      	ldr	r3, [r7, #12]
 8020188:	2200      	movs	r2, #0
 802018a:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 802018c:	88fb      	ldrh	r3, [r7, #6]
 802018e:	461a      	mov	r2, r3
 8020190:	68b9      	ldr	r1, [r7, #8]
 8020192:	68f8      	ldr	r0, [r7, #12]
 8020194:	f7ff fd04 	bl	801fba0 <UART_Start_Receive_IT>
 8020198:	4603      	mov	r3, r0
 802019a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 802019e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80201a2:	2b00      	cmp	r3, #0
 80201a4:	d124      	bne.n	80201f0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80201a6:	68fb      	ldr	r3, [r7, #12]
 80201a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80201aa:	2b01      	cmp	r3, #1
 80201ac:	d11d      	bne.n	80201ea <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	681b      	ldr	r3, [r3, #0]
 80201b2:	2210      	movs	r2, #16
 80201b4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80201b6:	68fb      	ldr	r3, [r7, #12]
 80201b8:	681b      	ldr	r3, [r3, #0]
 80201ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80201bc:	69bb      	ldr	r3, [r7, #24]
 80201be:	e853 3f00 	ldrex	r3, [r3]
 80201c2:	617b      	str	r3, [r7, #20]
   return(result);
 80201c4:	697b      	ldr	r3, [r7, #20]
 80201c6:	f043 0310 	orr.w	r3, r3, #16
 80201ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80201cc:	68fb      	ldr	r3, [r7, #12]
 80201ce:	681b      	ldr	r3, [r3, #0]
 80201d0:	461a      	mov	r2, r3
 80201d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80201d4:	627b      	str	r3, [r7, #36]	; 0x24
 80201d6:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80201d8:	6a39      	ldr	r1, [r7, #32]
 80201da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80201dc:	e841 2300 	strex	r3, r2, [r1]
 80201e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80201e2:	69fb      	ldr	r3, [r7, #28]
 80201e4:	2b00      	cmp	r3, #0
 80201e6:	d1e6      	bne.n	80201b6 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 80201e8:	e002      	b.n	80201f0 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80201ea:	2301      	movs	r3, #1
 80201ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 80201f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80201f4:	e000      	b.n	80201f8 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80201f6:	2302      	movs	r3, #2
  }
}
 80201f8:	4618      	mov	r0, r3
 80201fa:	3730      	adds	r7, #48	; 0x30
 80201fc:	46bd      	mov	sp, r7
 80201fe:	bd80      	pop	{r7, pc}

08020200 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8020200:	b580      	push	{r7, lr}
 8020202:	b084      	sub	sp, #16
 8020204:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8020206:	4b2f      	ldr	r3, [pc, #188]	; (80202c4 <MX_LWIP_Init+0xc4>)
 8020208:	22c0      	movs	r2, #192	; 0xc0
 802020a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 802020c:	4b2d      	ldr	r3, [pc, #180]	; (80202c4 <MX_LWIP_Init+0xc4>)
 802020e:	22a8      	movs	r2, #168	; 0xa8
 8020210:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 8020212:	4b2c      	ldr	r3, [pc, #176]	; (80202c4 <MX_LWIP_Init+0xc4>)
 8020214:	220c      	movs	r2, #12
 8020216:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 8020218:	4b2a      	ldr	r3, [pc, #168]	; (80202c4 <MX_LWIP_Init+0xc4>)
 802021a:	2264      	movs	r2, #100	; 0x64
 802021c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 802021e:	4b2a      	ldr	r3, [pc, #168]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020220:	22ff      	movs	r2, #255	; 0xff
 8020222:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8020224:	4b28      	ldr	r3, [pc, #160]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020226:	22ff      	movs	r2, #255	; 0xff
 8020228:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 802022a:	4b27      	ldr	r3, [pc, #156]	; (80202c8 <MX_LWIP_Init+0xc8>)
 802022c:	22ff      	movs	r2, #255	; 0xff
 802022e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8020230:	4b25      	ldr	r3, [pc, #148]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020232:	2200      	movs	r2, #0
 8020234:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8020236:	4b25      	ldr	r3, [pc, #148]	; (80202cc <MX_LWIP_Init+0xcc>)
 8020238:	22c0      	movs	r2, #192	; 0xc0
 802023a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 802023c:	4b23      	ldr	r3, [pc, #140]	; (80202cc <MX_LWIP_Init+0xcc>)
 802023e:	22a8      	movs	r2, #168	; 0xa8
 8020240:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 8020242:	4b22      	ldr	r3, [pc, #136]	; (80202cc <MX_LWIP_Init+0xcc>)
 8020244:	220c      	movs	r2, #12
 8020246:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8020248:	4b20      	ldr	r3, [pc, #128]	; (80202cc <MX_LWIP_Init+0xcc>)
 802024a:	2201      	movs	r2, #1
 802024c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 802024e:	4b20      	ldr	r3, [pc, #128]	; (80202d0 <MX_LWIP_Init+0xd0>)
 8020250:	781b      	ldrb	r3, [r3, #0]
 8020252:	2b01      	cmp	r3, #1
 8020254:	d002      	beq.n	802025c <MX_LWIP_Init+0x5c>
 8020256:	2b02      	cmp	r3, #2
 8020258:	d03c      	beq.n	80202d4 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 802025a:	e162      	b.n	8020522 <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 802025c:	4b1c      	ldr	r3, [pc, #112]	; (80202d0 <MX_LWIP_Init+0xd0>)
 802025e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 8020262:	4b18      	ldr	r3, [pc, #96]	; (80202c4 <MX_LWIP_Init+0xc4>)
 8020264:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 8020266:	4b1a      	ldr	r3, [pc, #104]	; (80202d0 <MX_LWIP_Init+0xd0>)
 8020268:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 802026c:	4b15      	ldr	r3, [pc, #84]	; (80202c4 <MX_LWIP_Init+0xc4>)
 802026e:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 8020270:	4b17      	ldr	r3, [pc, #92]	; (80202d0 <MX_LWIP_Init+0xd0>)
 8020272:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8020276:	4b13      	ldr	r3, [pc, #76]	; (80202c4 <MX_LWIP_Init+0xc4>)
 8020278:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 802027a:	4b15      	ldr	r3, [pc, #84]	; (80202d0 <MX_LWIP_Init+0xd0>)
 802027c:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 8020280:	4b10      	ldr	r3, [pc, #64]	; (80202c4 <MX_LWIP_Init+0xc4>)
 8020282:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 8020284:	4b10      	ldr	r3, [pc, #64]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020286:	22ff      	movs	r2, #255	; 0xff
 8020288:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 802028a:	4b0f      	ldr	r3, [pc, #60]	; (80202c8 <MX_LWIP_Init+0xc8>)
 802028c:	22ff      	movs	r2, #255	; 0xff
 802028e:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020290:	4b0d      	ldr	r3, [pc, #52]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020292:	22ff      	movs	r2, #255	; 0xff
 8020294:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 8020296:	4b0c      	ldr	r3, [pc, #48]	; (80202c8 <MX_LWIP_Init+0xc8>)
 8020298:	2200      	movs	r2, #0
 802029a:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 802029c:	4b0c      	ldr	r3, [pc, #48]	; (80202d0 <MX_LWIP_Init+0xd0>)
 802029e:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 80202a2:	4b0a      	ldr	r3, [pc, #40]	; (80202cc <MX_LWIP_Init+0xcc>)
 80202a4:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 80202a6:	4b0a      	ldr	r3, [pc, #40]	; (80202d0 <MX_LWIP_Init+0xd0>)
 80202a8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80202ac:	4b07      	ldr	r3, [pc, #28]	; (80202cc <MX_LWIP_Init+0xcc>)
 80202ae:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 80202b0:	4b07      	ldr	r3, [pc, #28]	; (80202d0 <MX_LWIP_Init+0xd0>)
 80202b2:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 80202b6:	4b05      	ldr	r3, [pc, #20]	; (80202cc <MX_LWIP_Init+0xcc>)
 80202b8:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 80202ba:	4b04      	ldr	r3, [pc, #16]	; (80202cc <MX_LWIP_Init+0xcc>)
 80202bc:	2201      	movs	r2, #1
 80202be:	70da      	strb	r2, [r3, #3]
		break;
 80202c0:	e03b      	b.n	802033a <MX_LWIP_Init+0x13a>
 80202c2:	bf00      	nop
 80202c4:	2000dd2c 	.word	0x2000dd2c
 80202c8:	2000dd30 	.word	0x2000dd30
 80202cc:	2000dd34 	.word	0x2000dd34
 80202d0:	20000504 	.word	0x20000504
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 80202d4:	4b94      	ldr	r3, [pc, #592]	; (8020528 <MX_LWIP_Init+0x328>)
 80202d6:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 80202da:	4b94      	ldr	r3, [pc, #592]	; (802052c <MX_LWIP_Init+0x32c>)
 80202dc:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 80202de:	4b92      	ldr	r3, [pc, #584]	; (8020528 <MX_LWIP_Init+0x328>)
 80202e0:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 80202e4:	4b91      	ldr	r3, [pc, #580]	; (802052c <MX_LWIP_Init+0x32c>)
 80202e6:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 80202e8:	4b8f      	ldr	r3, [pc, #572]	; (8020528 <MX_LWIP_Init+0x328>)
 80202ea:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 80202ee:	4b8f      	ldr	r3, [pc, #572]	; (802052c <MX_LWIP_Init+0x32c>)
 80202f0:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 80202f2:	4b8d      	ldr	r3, [pc, #564]	; (8020528 <MX_LWIP_Init+0x328>)
 80202f4:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 80202f8:	4b8c      	ldr	r3, [pc, #560]	; (802052c <MX_LWIP_Init+0x32c>)
 80202fa:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 80202fc:	4b8c      	ldr	r3, [pc, #560]	; (8020530 <MX_LWIP_Init+0x330>)
 80202fe:	22ff      	movs	r2, #255	; 0xff
 8020300:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 8020302:	4b8b      	ldr	r3, [pc, #556]	; (8020530 <MX_LWIP_Init+0x330>)
 8020304:	22ff      	movs	r2, #255	; 0xff
 8020306:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 8020308:	4b89      	ldr	r3, [pc, #548]	; (8020530 <MX_LWIP_Init+0x330>)
 802030a:	22ff      	movs	r2, #255	; 0xff
 802030c:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 802030e:	4b88      	ldr	r3, [pc, #544]	; (8020530 <MX_LWIP_Init+0x330>)
 8020310:	2200      	movs	r2, #0
 8020312:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 8020314:	4b84      	ldr	r3, [pc, #528]	; (8020528 <MX_LWIP_Init+0x328>)
 8020316:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 802031a:	4b86      	ldr	r3, [pc, #536]	; (8020534 <MX_LWIP_Init+0x334>)
 802031c:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 802031e:	4b82      	ldr	r3, [pc, #520]	; (8020528 <MX_LWIP_Init+0x328>)
 8020320:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 8020324:	4b83      	ldr	r3, [pc, #524]	; (8020534 <MX_LWIP_Init+0x334>)
 8020326:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 8020328:	4b7f      	ldr	r3, [pc, #508]	; (8020528 <MX_LWIP_Init+0x328>)
 802032a:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 802032e:	4b81      	ldr	r3, [pc, #516]	; (8020534 <MX_LWIP_Init+0x334>)
 8020330:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 8020332:	4b80      	ldr	r3, [pc, #512]	; (8020534 <MX_LWIP_Init+0x334>)
 8020334:	2201      	movs	r2, #1
 8020336:	70da      	strb	r2, [r3, #3]
		break;
 8020338:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 802033a:	f000 fd42 	bl	8020dc2 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 802033e:	4b7b      	ldr	r3, [pc, #492]	; (802052c <MX_LWIP_Init+0x32c>)
 8020340:	781b      	ldrb	r3, [r3, #0]
 8020342:	061a      	lsls	r2, r3, #24
 8020344:	4b79      	ldr	r3, [pc, #484]	; (802052c <MX_LWIP_Init+0x32c>)
 8020346:	785b      	ldrb	r3, [r3, #1]
 8020348:	041b      	lsls	r3, r3, #16
 802034a:	431a      	orrs	r2, r3
 802034c:	4b77      	ldr	r3, [pc, #476]	; (802052c <MX_LWIP_Init+0x32c>)
 802034e:	789b      	ldrb	r3, [r3, #2]
 8020350:	021b      	lsls	r3, r3, #8
 8020352:	4313      	orrs	r3, r2
 8020354:	4a75      	ldr	r2, [pc, #468]	; (802052c <MX_LWIP_Init+0x32c>)
 8020356:	78d2      	ldrb	r2, [r2, #3]
 8020358:	4313      	orrs	r3, r2
 802035a:	061a      	lsls	r2, r3, #24
 802035c:	4b73      	ldr	r3, [pc, #460]	; (802052c <MX_LWIP_Init+0x32c>)
 802035e:	781b      	ldrb	r3, [r3, #0]
 8020360:	0619      	lsls	r1, r3, #24
 8020362:	4b72      	ldr	r3, [pc, #456]	; (802052c <MX_LWIP_Init+0x32c>)
 8020364:	785b      	ldrb	r3, [r3, #1]
 8020366:	041b      	lsls	r3, r3, #16
 8020368:	4319      	orrs	r1, r3
 802036a:	4b70      	ldr	r3, [pc, #448]	; (802052c <MX_LWIP_Init+0x32c>)
 802036c:	789b      	ldrb	r3, [r3, #2]
 802036e:	021b      	lsls	r3, r3, #8
 8020370:	430b      	orrs	r3, r1
 8020372:	496e      	ldr	r1, [pc, #440]	; (802052c <MX_LWIP_Init+0x32c>)
 8020374:	78c9      	ldrb	r1, [r1, #3]
 8020376:	430b      	orrs	r3, r1
 8020378:	021b      	lsls	r3, r3, #8
 802037a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 802037e:	431a      	orrs	r2, r3
 8020380:	4b6a      	ldr	r3, [pc, #424]	; (802052c <MX_LWIP_Init+0x32c>)
 8020382:	781b      	ldrb	r3, [r3, #0]
 8020384:	0619      	lsls	r1, r3, #24
 8020386:	4b69      	ldr	r3, [pc, #420]	; (802052c <MX_LWIP_Init+0x32c>)
 8020388:	785b      	ldrb	r3, [r3, #1]
 802038a:	041b      	lsls	r3, r3, #16
 802038c:	4319      	orrs	r1, r3
 802038e:	4b67      	ldr	r3, [pc, #412]	; (802052c <MX_LWIP_Init+0x32c>)
 8020390:	789b      	ldrb	r3, [r3, #2]
 8020392:	021b      	lsls	r3, r3, #8
 8020394:	430b      	orrs	r3, r1
 8020396:	4965      	ldr	r1, [pc, #404]	; (802052c <MX_LWIP_Init+0x32c>)
 8020398:	78c9      	ldrb	r1, [r1, #3]
 802039a:	430b      	orrs	r3, r1
 802039c:	0a1b      	lsrs	r3, r3, #8
 802039e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80203a2:	431a      	orrs	r2, r3
 80203a4:	4b61      	ldr	r3, [pc, #388]	; (802052c <MX_LWIP_Init+0x32c>)
 80203a6:	781b      	ldrb	r3, [r3, #0]
 80203a8:	0619      	lsls	r1, r3, #24
 80203aa:	4b60      	ldr	r3, [pc, #384]	; (802052c <MX_LWIP_Init+0x32c>)
 80203ac:	785b      	ldrb	r3, [r3, #1]
 80203ae:	041b      	lsls	r3, r3, #16
 80203b0:	4319      	orrs	r1, r3
 80203b2:	4b5e      	ldr	r3, [pc, #376]	; (802052c <MX_LWIP_Init+0x32c>)
 80203b4:	789b      	ldrb	r3, [r3, #2]
 80203b6:	021b      	lsls	r3, r3, #8
 80203b8:	430b      	orrs	r3, r1
 80203ba:	495c      	ldr	r1, [pc, #368]	; (802052c <MX_LWIP_Init+0x32c>)
 80203bc:	78c9      	ldrb	r1, [r1, #3]
 80203be:	430b      	orrs	r3, r1
 80203c0:	0e1b      	lsrs	r3, r3, #24
 80203c2:	4313      	orrs	r3, r2
 80203c4:	4a5c      	ldr	r2, [pc, #368]	; (8020538 <MX_LWIP_Init+0x338>)
 80203c6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80203c8:	4b59      	ldr	r3, [pc, #356]	; (8020530 <MX_LWIP_Init+0x330>)
 80203ca:	781b      	ldrb	r3, [r3, #0]
 80203cc:	061a      	lsls	r2, r3, #24
 80203ce:	4b58      	ldr	r3, [pc, #352]	; (8020530 <MX_LWIP_Init+0x330>)
 80203d0:	785b      	ldrb	r3, [r3, #1]
 80203d2:	041b      	lsls	r3, r3, #16
 80203d4:	431a      	orrs	r2, r3
 80203d6:	4b56      	ldr	r3, [pc, #344]	; (8020530 <MX_LWIP_Init+0x330>)
 80203d8:	789b      	ldrb	r3, [r3, #2]
 80203da:	021b      	lsls	r3, r3, #8
 80203dc:	4313      	orrs	r3, r2
 80203de:	4a54      	ldr	r2, [pc, #336]	; (8020530 <MX_LWIP_Init+0x330>)
 80203e0:	78d2      	ldrb	r2, [r2, #3]
 80203e2:	4313      	orrs	r3, r2
 80203e4:	061a      	lsls	r2, r3, #24
 80203e6:	4b52      	ldr	r3, [pc, #328]	; (8020530 <MX_LWIP_Init+0x330>)
 80203e8:	781b      	ldrb	r3, [r3, #0]
 80203ea:	0619      	lsls	r1, r3, #24
 80203ec:	4b50      	ldr	r3, [pc, #320]	; (8020530 <MX_LWIP_Init+0x330>)
 80203ee:	785b      	ldrb	r3, [r3, #1]
 80203f0:	041b      	lsls	r3, r3, #16
 80203f2:	4319      	orrs	r1, r3
 80203f4:	4b4e      	ldr	r3, [pc, #312]	; (8020530 <MX_LWIP_Init+0x330>)
 80203f6:	789b      	ldrb	r3, [r3, #2]
 80203f8:	021b      	lsls	r3, r3, #8
 80203fa:	430b      	orrs	r3, r1
 80203fc:	494c      	ldr	r1, [pc, #304]	; (8020530 <MX_LWIP_Init+0x330>)
 80203fe:	78c9      	ldrb	r1, [r1, #3]
 8020400:	430b      	orrs	r3, r1
 8020402:	021b      	lsls	r3, r3, #8
 8020404:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020408:	431a      	orrs	r2, r3
 802040a:	4b49      	ldr	r3, [pc, #292]	; (8020530 <MX_LWIP_Init+0x330>)
 802040c:	781b      	ldrb	r3, [r3, #0]
 802040e:	0619      	lsls	r1, r3, #24
 8020410:	4b47      	ldr	r3, [pc, #284]	; (8020530 <MX_LWIP_Init+0x330>)
 8020412:	785b      	ldrb	r3, [r3, #1]
 8020414:	041b      	lsls	r3, r3, #16
 8020416:	4319      	orrs	r1, r3
 8020418:	4b45      	ldr	r3, [pc, #276]	; (8020530 <MX_LWIP_Init+0x330>)
 802041a:	789b      	ldrb	r3, [r3, #2]
 802041c:	021b      	lsls	r3, r3, #8
 802041e:	430b      	orrs	r3, r1
 8020420:	4943      	ldr	r1, [pc, #268]	; (8020530 <MX_LWIP_Init+0x330>)
 8020422:	78c9      	ldrb	r1, [r1, #3]
 8020424:	430b      	orrs	r3, r1
 8020426:	0a1b      	lsrs	r3, r3, #8
 8020428:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802042c:	431a      	orrs	r2, r3
 802042e:	4b40      	ldr	r3, [pc, #256]	; (8020530 <MX_LWIP_Init+0x330>)
 8020430:	781b      	ldrb	r3, [r3, #0]
 8020432:	0619      	lsls	r1, r3, #24
 8020434:	4b3e      	ldr	r3, [pc, #248]	; (8020530 <MX_LWIP_Init+0x330>)
 8020436:	785b      	ldrb	r3, [r3, #1]
 8020438:	041b      	lsls	r3, r3, #16
 802043a:	4319      	orrs	r1, r3
 802043c:	4b3c      	ldr	r3, [pc, #240]	; (8020530 <MX_LWIP_Init+0x330>)
 802043e:	789b      	ldrb	r3, [r3, #2]
 8020440:	021b      	lsls	r3, r3, #8
 8020442:	430b      	orrs	r3, r1
 8020444:	493a      	ldr	r1, [pc, #232]	; (8020530 <MX_LWIP_Init+0x330>)
 8020446:	78c9      	ldrb	r1, [r1, #3]
 8020448:	430b      	orrs	r3, r1
 802044a:	0e1b      	lsrs	r3, r3, #24
 802044c:	4313      	orrs	r3, r2
 802044e:	4a3b      	ldr	r2, [pc, #236]	; (802053c <MX_LWIP_Init+0x33c>)
 8020450:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8020452:	4b38      	ldr	r3, [pc, #224]	; (8020534 <MX_LWIP_Init+0x334>)
 8020454:	781b      	ldrb	r3, [r3, #0]
 8020456:	061a      	lsls	r2, r3, #24
 8020458:	4b36      	ldr	r3, [pc, #216]	; (8020534 <MX_LWIP_Init+0x334>)
 802045a:	785b      	ldrb	r3, [r3, #1]
 802045c:	041b      	lsls	r3, r3, #16
 802045e:	431a      	orrs	r2, r3
 8020460:	4b34      	ldr	r3, [pc, #208]	; (8020534 <MX_LWIP_Init+0x334>)
 8020462:	789b      	ldrb	r3, [r3, #2]
 8020464:	021b      	lsls	r3, r3, #8
 8020466:	4313      	orrs	r3, r2
 8020468:	4a32      	ldr	r2, [pc, #200]	; (8020534 <MX_LWIP_Init+0x334>)
 802046a:	78d2      	ldrb	r2, [r2, #3]
 802046c:	4313      	orrs	r3, r2
 802046e:	061a      	lsls	r2, r3, #24
 8020470:	4b30      	ldr	r3, [pc, #192]	; (8020534 <MX_LWIP_Init+0x334>)
 8020472:	781b      	ldrb	r3, [r3, #0]
 8020474:	0619      	lsls	r1, r3, #24
 8020476:	4b2f      	ldr	r3, [pc, #188]	; (8020534 <MX_LWIP_Init+0x334>)
 8020478:	785b      	ldrb	r3, [r3, #1]
 802047a:	041b      	lsls	r3, r3, #16
 802047c:	4319      	orrs	r1, r3
 802047e:	4b2d      	ldr	r3, [pc, #180]	; (8020534 <MX_LWIP_Init+0x334>)
 8020480:	789b      	ldrb	r3, [r3, #2]
 8020482:	021b      	lsls	r3, r3, #8
 8020484:	430b      	orrs	r3, r1
 8020486:	492b      	ldr	r1, [pc, #172]	; (8020534 <MX_LWIP_Init+0x334>)
 8020488:	78c9      	ldrb	r1, [r1, #3]
 802048a:	430b      	orrs	r3, r1
 802048c:	021b      	lsls	r3, r3, #8
 802048e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8020492:	431a      	orrs	r2, r3
 8020494:	4b27      	ldr	r3, [pc, #156]	; (8020534 <MX_LWIP_Init+0x334>)
 8020496:	781b      	ldrb	r3, [r3, #0]
 8020498:	0619      	lsls	r1, r3, #24
 802049a:	4b26      	ldr	r3, [pc, #152]	; (8020534 <MX_LWIP_Init+0x334>)
 802049c:	785b      	ldrb	r3, [r3, #1]
 802049e:	041b      	lsls	r3, r3, #16
 80204a0:	4319      	orrs	r1, r3
 80204a2:	4b24      	ldr	r3, [pc, #144]	; (8020534 <MX_LWIP_Init+0x334>)
 80204a4:	789b      	ldrb	r3, [r3, #2]
 80204a6:	021b      	lsls	r3, r3, #8
 80204a8:	430b      	orrs	r3, r1
 80204aa:	4922      	ldr	r1, [pc, #136]	; (8020534 <MX_LWIP_Init+0x334>)
 80204ac:	78c9      	ldrb	r1, [r1, #3]
 80204ae:	430b      	orrs	r3, r1
 80204b0:	0a1b      	lsrs	r3, r3, #8
 80204b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80204b6:	431a      	orrs	r2, r3
 80204b8:	4b1e      	ldr	r3, [pc, #120]	; (8020534 <MX_LWIP_Init+0x334>)
 80204ba:	781b      	ldrb	r3, [r3, #0]
 80204bc:	0619      	lsls	r1, r3, #24
 80204be:	4b1d      	ldr	r3, [pc, #116]	; (8020534 <MX_LWIP_Init+0x334>)
 80204c0:	785b      	ldrb	r3, [r3, #1]
 80204c2:	041b      	lsls	r3, r3, #16
 80204c4:	4319      	orrs	r1, r3
 80204c6:	4b1b      	ldr	r3, [pc, #108]	; (8020534 <MX_LWIP_Init+0x334>)
 80204c8:	789b      	ldrb	r3, [r3, #2]
 80204ca:	021b      	lsls	r3, r3, #8
 80204cc:	430b      	orrs	r3, r1
 80204ce:	4919      	ldr	r1, [pc, #100]	; (8020534 <MX_LWIP_Init+0x334>)
 80204d0:	78c9      	ldrb	r1, [r1, #3]
 80204d2:	430b      	orrs	r3, r1
 80204d4:	0e1b      	lsrs	r3, r3, #24
 80204d6:	4313      	orrs	r3, r2
 80204d8:	4a19      	ldr	r2, [pc, #100]	; (8020540 <MX_LWIP_Init+0x340>)
 80204da:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80204dc:	4b19      	ldr	r3, [pc, #100]	; (8020544 <MX_LWIP_Init+0x344>)
 80204de:	9302      	str	r3, [sp, #8]
 80204e0:	4b19      	ldr	r3, [pc, #100]	; (8020548 <MX_LWIP_Init+0x348>)
 80204e2:	9301      	str	r3, [sp, #4]
 80204e4:	2300      	movs	r3, #0
 80204e6:	9300      	str	r3, [sp, #0]
 80204e8:	4b15      	ldr	r3, [pc, #84]	; (8020540 <MX_LWIP_Init+0x340>)
 80204ea:	4a14      	ldr	r2, [pc, #80]	; (802053c <MX_LWIP_Init+0x33c>)
 80204ec:	4912      	ldr	r1, [pc, #72]	; (8020538 <MX_LWIP_Init+0x338>)
 80204ee:	4817      	ldr	r0, [pc, #92]	; (802054c <MX_LWIP_Init+0x34c>)
 80204f0:	f001 f998 	bl	8021824 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80204f4:	4815      	ldr	r0, [pc, #84]	; (802054c <MX_LWIP_Init+0x34c>)
 80204f6:	f001 fb49 	bl	8021b8c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80204fa:	4b14      	ldr	r3, [pc, #80]	; (802054c <MX_LWIP_Init+0x34c>)
 80204fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020500:	089b      	lsrs	r3, r3, #2
 8020502:	f003 0301 	and.w	r3, r3, #1
 8020506:	b2db      	uxtb	r3, r3
 8020508:	2b00      	cmp	r3, #0
 802050a:	d003      	beq.n	8020514 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 802050c:	480f      	ldr	r0, [pc, #60]	; (802054c <MX_LWIP_Init+0x34c>)
 802050e:	f001 fb4d 	bl	8021bac <netif_set_up>
 8020512:	e002      	b.n	802051a <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8020514:	480d      	ldr	r0, [pc, #52]	; (802054c <MX_LWIP_Init+0x34c>)
 8020516:	f001 fbb5 	bl	8021c84 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 802051a:	490d      	ldr	r1, [pc, #52]	; (8020550 <MX_LWIP_Init+0x350>)
 802051c:	480b      	ldr	r0, [pc, #44]	; (802054c <MX_LWIP_Init+0x34c>)
 802051e:	f001 fc47 	bl	8021db0 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8020522:	46bd      	mov	sp, r7
 8020524:	bd80      	pop	{r7, pc}
 8020526:	bf00      	nop
 8020528:	20000504 	.word	0x20000504
 802052c:	2000dd2c 	.word	0x2000dd2c
 8020530:	2000dd30 	.word	0x2000dd30
 8020534:	2000dd34 	.word	0x2000dd34
 8020538:	2000dd20 	.word	0x2000dd20
 802053c:	2000dd24 	.word	0x2000dd24
 8020540:	2000dd28 	.word	0x2000dd28
 8020544:	08025b6d 	.word	0x08025b6d
 8020548:	080208e1 	.word	0x080208e1
 802054c:	2000dce0 	.word	0x2000dce0
 8020550:	080205a5 	.word	0x080205a5

08020554 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8020554:	b580      	push	{r7, lr}
 8020556:	b082      	sub	sp, #8
 8020558:	af00      	add	r7, sp, #0
 802055a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 802055c:	f7f8 fe1a 	bl	8019194 <HAL_GetTick>
 8020560:	4602      	mov	r2, r0
 8020562:	4b08      	ldr	r3, [pc, #32]	; (8020584 <Ethernet_Link_Periodic_Handle+0x30>)
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	1ad3      	subs	r3, r2, r3
 8020568:	2b63      	cmp	r3, #99	; 0x63
 802056a:	d907      	bls.n	802057c <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 802056c:	f7f8 fe12 	bl	8019194 <HAL_GetTick>
 8020570:	4603      	mov	r3, r0
 8020572:	4a04      	ldr	r2, [pc, #16]	; (8020584 <Ethernet_Link_Periodic_Handle+0x30>)
 8020574:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 8020576:	6878      	ldr	r0, [r7, #4]
 8020578:	f000 fb10 	bl	8020b9c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 802057c:	bf00      	nop
 802057e:	3708      	adds	r7, #8
 8020580:	46bd      	mov	sp, r7
 8020582:	bd80      	pop	{r7, pc}
 8020584:	2000dcdc 	.word	0x2000dcdc

08020588 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 8020588:	b580      	push	{r7, lr}
 802058a:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 802058c:	4804      	ldr	r0, [pc, #16]	; (80205a0 <MX_LWIP_Process+0x18>)
 802058e:	f000 f987 	bl	80208a0 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 8020592:	f002 fb83 	bl	8022c9c <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 8020596:	4802      	ldr	r0, [pc, #8]	; (80205a0 <MX_LWIP_Process+0x18>)
 8020598:	f7ff ffdc 	bl	8020554 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 802059c:	bf00      	nop
 802059e:	bd80      	pop	{r7, pc}
 80205a0:	2000dce0 	.word	0x2000dce0

080205a4 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80205a4:	b480      	push	{r7}
 80205a6:	b083      	sub	sp, #12
 80205a8:	af00      	add	r7, sp, #0
 80205aa:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80205ac:	bf00      	nop
 80205ae:	370c      	adds	r7, #12
 80205b0:	46bd      	mov	sp, r7
 80205b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205b6:	4770      	bx	lr

080205b8 <SCB_InvalidateDCache_by_Addr>:
{
 80205b8:	b480      	push	{r7}
 80205ba:	b087      	sub	sp, #28
 80205bc:	af00      	add	r7, sp, #0
 80205be:	6078      	str	r0, [r7, #4]
 80205c0:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 80205c2:	683b      	ldr	r3, [r7, #0]
 80205c4:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 80205c6:	687b      	ldr	r3, [r7, #4]
 80205c8:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 80205ca:	2320      	movs	r3, #32
 80205cc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80205ce:	f3bf 8f4f 	dsb	sy
}
 80205d2:	bf00      	nop
    while (op_size > 0) {
 80205d4:	e00b      	b.n	80205ee <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80205d6:	4a0d      	ldr	r2, [pc, #52]	; (802060c <SCB_InvalidateDCache_by_Addr+0x54>)
 80205d8:	693b      	ldr	r3, [r7, #16]
 80205da:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80205de:	68fb      	ldr	r3, [r7, #12]
 80205e0:	693a      	ldr	r2, [r7, #16]
 80205e2:	4413      	add	r3, r2
 80205e4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80205e6:	697a      	ldr	r2, [r7, #20]
 80205e8:	68fb      	ldr	r3, [r7, #12]
 80205ea:	1ad3      	subs	r3, r2, r3
 80205ec:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80205ee:	697b      	ldr	r3, [r7, #20]
 80205f0:	2b00      	cmp	r3, #0
 80205f2:	dcf0      	bgt.n	80205d6 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80205f4:	f3bf 8f4f 	dsb	sy
}
 80205f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80205fa:	f3bf 8f6f 	isb	sy
}
 80205fe:	bf00      	nop
}
 8020600:	bf00      	nop
 8020602:	371c      	adds	r7, #28
 8020604:	46bd      	mov	sp, r7
 8020606:	f85d 7b04 	ldr.w	r7, [sp], #4
 802060a:	4770      	bx	lr
 802060c:	e000ed00 	.word	0xe000ed00

08020610 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8020610:	b580      	push	{r7, lr}
 8020612:	b084      	sub	sp, #16
 8020614:	af00      	add	r7, sp, #0
 8020616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8020618:	2300      	movs	r3, #0
 802061a:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 802061c:	4b47      	ldr	r3, [pc, #284]	; (802073c <low_level_init+0x12c>)
 802061e:	4a48      	ldr	r2, [pc, #288]	; (8020740 <low_level_init+0x130>)
 8020620:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8020622:	2300      	movs	r3, #0
 8020624:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8020626:	2380      	movs	r3, #128	; 0x80
 8020628:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 802062a:	23e1      	movs	r3, #225	; 0xe1
 802062c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 802062e:	2300      	movs	r3, #0
 8020630:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8020632:	2300      	movs	r3, #0
 8020634:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8020636:	2300      	movs	r3, #0
 8020638:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 802063a:	4a40      	ldr	r2, [pc, #256]	; (802073c <low_level_init+0x12c>)
 802063c:	f107 0308 	add.w	r3, r7, #8
 8020640:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8020642:	4b3e      	ldr	r3, [pc, #248]	; (802073c <low_level_init+0x12c>)
 8020644:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8020648:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 802064a:	4b3c      	ldr	r3, [pc, #240]	; (802073c <low_level_init+0x12c>)
 802064c:	4a3d      	ldr	r2, [pc, #244]	; (8020744 <low_level_init+0x134>)
 802064e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8020650:	4b3a      	ldr	r3, [pc, #232]	; (802073c <low_level_init+0x12c>)
 8020652:	4a3d      	ldr	r2, [pc, #244]	; (8020748 <low_level_init+0x138>)
 8020654:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8020656:	4b39      	ldr	r3, [pc, #228]	; (802073c <low_level_init+0x12c>)
 8020658:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 802065c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 802065e:	4b3b      	ldr	r3, [pc, #236]	; (802074c <low_level_init+0x13c>)
 8020660:	781b      	ldrb	r3, [r3, #0]
 8020662:	2b01      	cmp	r3, #1
 8020664:	d002      	beq.n	802066c <low_level_init+0x5c>
 8020666:	2b02      	cmp	r3, #2
 8020668:	d004      	beq.n	8020674 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 802066a:	e063      	b.n	8020734 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 802066c:	4b33      	ldr	r3, [pc, #204]	; (802073c <low_level_init+0x12c>)
 802066e:	4a38      	ldr	r2, [pc, #224]	; (8020750 <low_level_init+0x140>)
 8020670:	605a      	str	r2, [r3, #4]
		break;
 8020672:	e003      	b.n	802067c <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 8020674:	4b31      	ldr	r3, [pc, #196]	; (802073c <low_level_init+0x12c>)
 8020676:	4a37      	ldr	r2, [pc, #220]	; (8020754 <low_level_init+0x144>)
 8020678:	605a      	str	r2, [r3, #4]
		break;
 802067a:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 802067c:	482f      	ldr	r0, [pc, #188]	; (802073c <low_level_init+0x12c>)
 802067e:	f7f9 fdbb 	bl	801a1f8 <HAL_ETH_Init>
 8020682:	4603      	mov	r3, r0
 8020684:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8020686:	2238      	movs	r2, #56	; 0x38
 8020688:	2100      	movs	r1, #0
 802068a:	4833      	ldr	r0, [pc, #204]	; (8020758 <low_level_init+0x148>)
 802068c:	f005 fbb0 	bl	8025df0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8020690:	4b31      	ldr	r3, [pc, #196]	; (8020758 <low_level_init+0x148>)
 8020692:	2221      	movs	r2, #33	; 0x21
 8020694:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8020696:	4b30      	ldr	r3, [pc, #192]	; (8020758 <low_level_init+0x148>)
 8020698:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 802069c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 802069e:	4b2e      	ldr	r3, [pc, #184]	; (8020758 <low_level_init+0x148>)
 80206a0:	2200      	movs	r2, #0
 80206a2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80206a4:	482d      	ldr	r0, [pc, #180]	; (802075c <low_level_init+0x14c>)
 80206a6:	f000 ff3d 	bl	8021524 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	2206      	movs	r2, #6
 80206ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80206b2:	4b22      	ldr	r3, [pc, #136]	; (802073c <low_level_init+0x12c>)
 80206b4:	685b      	ldr	r3, [r3, #4]
 80206b6:	781a      	ldrb	r2, [r3, #0]
 80206b8:	687b      	ldr	r3, [r7, #4]
 80206ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80206be:	4b1f      	ldr	r3, [pc, #124]	; (802073c <low_level_init+0x12c>)
 80206c0:	685b      	ldr	r3, [r3, #4]
 80206c2:	785a      	ldrb	r2, [r3, #1]
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80206ca:	4b1c      	ldr	r3, [pc, #112]	; (802073c <low_level_init+0x12c>)
 80206cc:	685b      	ldr	r3, [r3, #4]
 80206ce:	789a      	ldrb	r2, [r3, #2]
 80206d0:	687b      	ldr	r3, [r7, #4]
 80206d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80206d6:	4b19      	ldr	r3, [pc, #100]	; (802073c <low_level_init+0x12c>)
 80206d8:	685b      	ldr	r3, [r3, #4]
 80206da:	78da      	ldrb	r2, [r3, #3]
 80206dc:	687b      	ldr	r3, [r7, #4]
 80206de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80206e2:	4b16      	ldr	r3, [pc, #88]	; (802073c <low_level_init+0x12c>)
 80206e4:	685b      	ldr	r3, [r3, #4]
 80206e6:	791a      	ldrb	r2, [r3, #4]
 80206e8:	687b      	ldr	r3, [r7, #4]
 80206ea:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80206ee:	4b13      	ldr	r3, [pc, #76]	; (802073c <low_level_init+0x12c>)
 80206f0:	685b      	ldr	r3, [r3, #4]
 80206f2:	795a      	ldrb	r2, [r3, #5]
 80206f4:	687b      	ldr	r3, [r7, #4]
 80206f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8020700:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020708:	f043 030a 	orr.w	r3, r3, #10
 802070c:	b2da      	uxtb	r2, r3
 802070e:	687b      	ldr	r3, [r7, #4]
 8020710:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8020714:	4912      	ldr	r1, [pc, #72]	; (8020760 <low_level_init+0x150>)
 8020716:	4813      	ldr	r0, [pc, #76]	; (8020764 <low_level_init+0x154>)
 8020718:	f7f8 fb7b 	bl	8018e12 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 802071c:	4811      	ldr	r0, [pc, #68]	; (8020764 <low_level_init+0x154>)
 802071e:	f7f8 fbaa 	bl	8018e76 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 8020722:	7bfb      	ldrb	r3, [r7, #15]
 8020724:	2b00      	cmp	r3, #0
 8020726:	d103      	bne.n	8020730 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 8020728:	6878      	ldr	r0, [r7, #4]
 802072a:	f000 fa37 	bl	8020b9c <ethernet_link_check_state>
 802072e:	e001      	b.n	8020734 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 8020730:	f7f6 ff36 	bl	80175a0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8020734:	3710      	adds	r7, #16
 8020736:	46bd      	mov	sp, r7
 8020738:	bd80      	pop	{r7, pc}
 802073a:	bf00      	nop
 802073c:	20012634 	.word	0x20012634
 8020740:	40028000 	.word	0x40028000
 8020744:	20000444 	.word	0x20000444
 8020748:	200003a4 	.word	0x200003a4
 802074c:	20000504 	.word	0x20000504
 8020750:	20000543 	.word	0x20000543
 8020754:	200007b1 	.word	0x200007b1
 8020758:	200126e4 	.word	0x200126e4
 802075c:	0802d174 	.word	0x0802d174
 8020760:	20000328 	.word	0x20000328
 8020764:	2001271c 	.word	0x2001271c

08020768 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8020768:	b580      	push	{r7, lr}
 802076a:	b092      	sub	sp, #72	; 0x48
 802076c:	af00      	add	r7, sp, #0
 802076e:	6078      	str	r0, [r7, #4]
 8020770:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8020772:	2300      	movs	r3, #0
 8020774:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8020776:	2300      	movs	r3, #0
 8020778:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 802077a:	2300      	movs	r3, #0
 802077c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8020780:	f107 030c 	add.w	r3, r7, #12
 8020784:	2230      	movs	r2, #48	; 0x30
 8020786:	2100      	movs	r1, #0
 8020788:	4618      	mov	r0, r3
 802078a:	f005 fb31 	bl	8025df0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 802078e:	f107 030c 	add.w	r3, r7, #12
 8020792:	2230      	movs	r2, #48	; 0x30
 8020794:	2100      	movs	r1, #0
 8020796:	4618      	mov	r0, r3
 8020798:	f005 fb2a 	bl	8025df0 <memset>

  for(q = p; q != NULL; q = q->next)
 802079c:	683b      	ldr	r3, [r7, #0]
 802079e:	643b      	str	r3, [r7, #64]	; 0x40
 80207a0:	e045      	b.n	802082e <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80207a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80207a4:	2b03      	cmp	r3, #3
 80207a6:	d902      	bls.n	80207ae <low_level_output+0x46>
      return ERR_IF;
 80207a8:	f06f 030b 	mvn.w	r3, #11
 80207ac:	e055      	b.n	802085a <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80207ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207b0:	6859      	ldr	r1, [r3, #4]
 80207b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80207b4:	4613      	mov	r3, r2
 80207b6:	005b      	lsls	r3, r3, #1
 80207b8:	4413      	add	r3, r2
 80207ba:	009b      	lsls	r3, r3, #2
 80207bc:	3348      	adds	r3, #72	; 0x48
 80207be:	443b      	add	r3, r7
 80207c0:	3b3c      	subs	r3, #60	; 0x3c
 80207c2:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80207c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80207c6:	895b      	ldrh	r3, [r3, #10]
 80207c8:	4619      	mov	r1, r3
 80207ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80207cc:	4613      	mov	r3, r2
 80207ce:	005b      	lsls	r3, r3, #1
 80207d0:	4413      	add	r3, r2
 80207d2:	009b      	lsls	r3, r3, #2
 80207d4:	3348      	adds	r3, #72	; 0x48
 80207d6:	443b      	add	r3, r7
 80207d8:	3b38      	subs	r3, #56	; 0x38
 80207da:	6019      	str	r1, [r3, #0]

    if(i>0)
 80207dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80207de:	2b00      	cmp	r3, #0
 80207e0:	d011      	beq.n	8020806 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80207e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80207e4:	1e5a      	subs	r2, r3, #1
 80207e6:	f107 000c 	add.w	r0, r7, #12
 80207ea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80207ec:	460b      	mov	r3, r1
 80207ee:	005b      	lsls	r3, r3, #1
 80207f0:	440b      	add	r3, r1
 80207f2:	009b      	lsls	r3, r3, #2
 80207f4:	18c1      	adds	r1, r0, r3
 80207f6:	4613      	mov	r3, r2
 80207f8:	005b      	lsls	r3, r3, #1
 80207fa:	4413      	add	r3, r2
 80207fc:	009b      	lsls	r3, r3, #2
 80207fe:	3348      	adds	r3, #72	; 0x48
 8020800:	443b      	add	r3, r7
 8020802:	3b34      	subs	r3, #52	; 0x34
 8020804:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8020806:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020808:	681b      	ldr	r3, [r3, #0]
 802080a:	2b00      	cmp	r3, #0
 802080c:	d109      	bne.n	8020822 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 802080e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8020810:	4613      	mov	r3, r2
 8020812:	005b      	lsls	r3, r3, #1
 8020814:	4413      	add	r3, r2
 8020816:	009b      	lsls	r3, r3, #2
 8020818:	3348      	adds	r3, #72	; 0x48
 802081a:	443b      	add	r3, r7
 802081c:	3b34      	subs	r3, #52	; 0x34
 802081e:	2200      	movs	r2, #0
 8020820:	601a      	str	r2, [r3, #0]
    }

    i++;
 8020822:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8020824:	3301      	adds	r3, #1
 8020826:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8020828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 802082a:	681b      	ldr	r3, [r3, #0]
 802082c:	643b      	str	r3, [r7, #64]	; 0x40
 802082e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8020830:	2b00      	cmp	r3, #0
 8020832:	d1b6      	bne.n	80207a2 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8020834:	683b      	ldr	r3, [r7, #0]
 8020836:	891b      	ldrh	r3, [r3, #8]
 8020838:	461a      	mov	r2, r3
 802083a:	4b0a      	ldr	r3, [pc, #40]	; (8020864 <low_level_output+0xfc>)
 802083c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 802083e:	4a09      	ldr	r2, [pc, #36]	; (8020864 <low_level_output+0xfc>)
 8020840:	f107 030c 	add.w	r3, r7, #12
 8020844:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8020846:	4a07      	ldr	r2, [pc, #28]	; (8020864 <low_level_output+0xfc>)
 8020848:	683b      	ldr	r3, [r7, #0]
 802084a:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 802084c:	2214      	movs	r2, #20
 802084e:	4905      	ldr	r1, [pc, #20]	; (8020864 <low_level_output+0xfc>)
 8020850:	4805      	ldr	r0, [pc, #20]	; (8020868 <low_level_output+0x100>)
 8020852:	f7f9 fe05 	bl	801a460 <HAL_ETH_Transmit>

  return errval;
 8020856:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 802085a:	4618      	mov	r0, r3
 802085c:	3748      	adds	r7, #72	; 0x48
 802085e:	46bd      	mov	sp, r7
 8020860:	bd80      	pop	{r7, pc}
 8020862:	bf00      	nop
 8020864:	200126e4 	.word	0x200126e4
 8020868:	20012634 	.word	0x20012634

0802086c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 802086c:	b580      	push	{r7, lr}
 802086e:	b084      	sub	sp, #16
 8020870:	af00      	add	r7, sp, #0
 8020872:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8020874:	2300      	movs	r3, #0
 8020876:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8020878:	4b07      	ldr	r3, [pc, #28]	; (8020898 <low_level_input+0x2c>)
 802087a:	781b      	ldrb	r3, [r3, #0]
 802087c:	2b00      	cmp	r3, #0
 802087e:	d105      	bne.n	802088c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8020880:	f107 030c 	add.w	r3, r7, #12
 8020884:	4619      	mov	r1, r3
 8020886:	4805      	ldr	r0, [pc, #20]	; (802089c <low_level_input+0x30>)
 8020888:	f7f9 fe7e 	bl	801a588 <HAL_ETH_ReadData>
  }

  return p;
 802088c:	68fb      	ldr	r3, [r7, #12]
}
 802088e:	4618      	mov	r0, r3
 8020890:	3710      	adds	r7, #16
 8020892:	46bd      	mov	sp, r7
 8020894:	bd80      	pop	{r7, pc}
 8020896:	bf00      	nop
 8020898:	20012630 	.word	0x20012630
 802089c:	20012634 	.word	0x20012634

080208a0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80208a0:	b580      	push	{r7, lr}
 80208a2:	b084      	sub	sp, #16
 80208a4:	af00      	add	r7, sp, #0
 80208a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80208a8:	2300      	movs	r3, #0
 80208aa:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 80208ac:	6878      	ldr	r0, [r7, #4]
 80208ae:	f7ff ffdd 	bl	802086c <low_level_input>
 80208b2:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 80208b4:	68fb      	ldr	r3, [r7, #12]
 80208b6:	2b00      	cmp	r3, #0
 80208b8:	d00a      	beq.n	80208d0 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	691b      	ldr	r3, [r3, #16]
 80208be:	6879      	ldr	r1, [r7, #4]
 80208c0:	68f8      	ldr	r0, [r7, #12]
 80208c2:	4798      	blx	r3
 80208c4:	4603      	mov	r3, r0
 80208c6:	2b00      	cmp	r3, #0
 80208c8:	d002      	beq.n	80208d0 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 80208ca:	68f8      	ldr	r0, [r7, #12]
 80208cc:	f001 fe40 	bl	8022550 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80208d0:	68fb      	ldr	r3, [r7, #12]
 80208d2:	2b00      	cmp	r3, #0
 80208d4:	d1ea      	bne.n	80208ac <ethernetif_input+0xc>
}
 80208d6:	bf00      	nop
 80208d8:	bf00      	nop
 80208da:	3710      	adds	r7, #16
 80208dc:	46bd      	mov	sp, r7
 80208de:	bd80      	pop	{r7, pc}

080208e0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80208e0:	b580      	push	{r7, lr}
 80208e2:	b082      	sub	sp, #8
 80208e4:	af00      	add	r7, sp, #0
 80208e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80208e8:	687b      	ldr	r3, [r7, #4]
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d106      	bne.n	80208fc <ethernetif_init+0x1c>
 80208ee:	4b0e      	ldr	r3, [pc, #56]	; (8020928 <ethernetif_init+0x48>)
 80208f0:	f240 1287 	movw	r2, #391	; 0x187
 80208f4:	490d      	ldr	r1, [pc, #52]	; (802092c <ethernetif_init+0x4c>)
 80208f6:	480e      	ldr	r0, [pc, #56]	; (8020930 <ethernetif_init+0x50>)
 80208f8:	f005 fb62 	bl	8025fc0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	2273      	movs	r2, #115	; 0x73
 8020900:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8020904:	687b      	ldr	r3, [r7, #4]
 8020906:	2274      	movs	r2, #116	; 0x74
 8020908:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 802090c:	687b      	ldr	r3, [r7, #4]
 802090e:	4a09      	ldr	r2, [pc, #36]	; (8020934 <ethernetif_init+0x54>)
 8020910:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8020912:	687b      	ldr	r3, [r7, #4]
 8020914:	4a08      	ldr	r2, [pc, #32]	; (8020938 <ethernetif_init+0x58>)
 8020916:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8020918:	6878      	ldr	r0, [r7, #4]
 802091a:	f7ff fe79 	bl	8020610 <low_level_init>

  return ERR_OK;
 802091e:	2300      	movs	r3, #0
}
 8020920:	4618      	mov	r0, r3
 8020922:	3708      	adds	r7, #8
 8020924:	46bd      	mov	sp, r7
 8020926:	bd80      	pop	{r7, pc}
 8020928:	0802b6cc 	.word	0x0802b6cc
 802092c:	0802b6e8 	.word	0x0802b6e8
 8020930:	0802b6f8 	.word	0x0802b6f8
 8020934:	08023efd 	.word	0x08023efd
 8020938:	08020769 	.word	0x08020769

0802093c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 802093c:	b580      	push	{r7, lr}
 802093e:	b084      	sub	sp, #16
 8020940:	af00      	add	r7, sp, #0
 8020942:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8020948:	68f9      	ldr	r1, [r7, #12]
 802094a:	4807      	ldr	r0, [pc, #28]	; (8020968 <pbuf_free_custom+0x2c>)
 802094c:	f000 fecc 	bl	80216e8 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8020950:	4b06      	ldr	r3, [pc, #24]	; (802096c <pbuf_free_custom+0x30>)
 8020952:	781b      	ldrb	r3, [r3, #0]
 8020954:	2b01      	cmp	r3, #1
 8020956:	d102      	bne.n	802095e <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8020958:	4b04      	ldr	r3, [pc, #16]	; (802096c <pbuf_free_custom+0x30>)
 802095a:	2200      	movs	r2, #0
 802095c:	701a      	strb	r2, [r3, #0]
  }
}
 802095e:	bf00      	nop
 8020960:	3710      	adds	r7, #16
 8020962:	46bd      	mov	sp, r7
 8020964:	bd80      	pop	{r7, pc}
 8020966:	bf00      	nop
 8020968:	0802d174 	.word	0x0802d174
 802096c:	20012630 	.word	0x20012630

08020970 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 8020970:	b580      	push	{r7, lr}
 8020972:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8020974:	f7f8 fc0e 	bl	8019194 <HAL_GetTick>
 8020978:	4603      	mov	r3, r0
}
 802097a:	4618      	mov	r0, r3
 802097c:	bd80      	pop	{r7, pc}
	...

08020980 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8020980:	b580      	push	{r7, lr}
 8020982:	b08e      	sub	sp, #56	; 0x38
 8020984:	af00      	add	r7, sp, #0
 8020986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8020988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 802098c:	2200      	movs	r2, #0
 802098e:	601a      	str	r2, [r3, #0]
 8020990:	605a      	str	r2, [r3, #4]
 8020992:	609a      	str	r2, [r3, #8]
 8020994:	60da      	str	r2, [r3, #12]
 8020996:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8020998:	687b      	ldr	r3, [r7, #4]
 802099a:	681b      	ldr	r3, [r3, #0]
 802099c:	4a52      	ldr	r2, [pc, #328]	; (8020ae8 <HAL_ETH_MspInit+0x168>)
 802099e:	4293      	cmp	r3, r2
 80209a0:	f040 809e 	bne.w	8020ae0 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80209a4:	4b51      	ldr	r3, [pc, #324]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209a8:	4a50      	ldr	r2, [pc, #320]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80209ae:	6313      	str	r3, [r2, #48]	; 0x30
 80209b0:	4b4e      	ldr	r3, [pc, #312]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80209b8:	623b      	str	r3, [r7, #32]
 80209ba:	6a3b      	ldr	r3, [r7, #32]
 80209bc:	4b4b      	ldr	r3, [pc, #300]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209c0:	4a4a      	ldr	r2, [pc, #296]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80209c6:	6313      	str	r3, [r2, #48]	; 0x30
 80209c8:	4b48      	ldr	r3, [pc, #288]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80209d0:	61fb      	str	r3, [r7, #28]
 80209d2:	69fb      	ldr	r3, [r7, #28]
 80209d4:	4b45      	ldr	r3, [pc, #276]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209d8:	4a44      	ldr	r2, [pc, #272]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80209de:	6313      	str	r3, [r2, #48]	; 0x30
 80209e0:	4b42      	ldr	r3, [pc, #264]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80209e8:	61bb      	str	r3, [r7, #24]
 80209ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80209ec:	4b3f      	ldr	r3, [pc, #252]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209f0:	4a3e      	ldr	r2, [pc, #248]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209f2:	f043 0304 	orr.w	r3, r3, #4
 80209f6:	6313      	str	r3, [r2, #48]	; 0x30
 80209f8:	4b3c      	ldr	r3, [pc, #240]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 80209fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80209fc:	f003 0304 	and.w	r3, r3, #4
 8020a00:	617b      	str	r3, [r7, #20]
 8020a02:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8020a04:	4b39      	ldr	r3, [pc, #228]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a08:	4a38      	ldr	r2, [pc, #224]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a0a:	f043 0301 	orr.w	r3, r3, #1
 8020a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8020a10:	4b36      	ldr	r3, [pc, #216]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a14:	f003 0301 	and.w	r3, r3, #1
 8020a18:	613b      	str	r3, [r7, #16]
 8020a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8020a1c:	4b33      	ldr	r3, [pc, #204]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a20:	4a32      	ldr	r2, [pc, #200]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a22:	f043 0302 	orr.w	r3, r3, #2
 8020a26:	6313      	str	r3, [r2, #48]	; 0x30
 8020a28:	4b30      	ldr	r3, [pc, #192]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a2c:	f003 0302 	and.w	r3, r3, #2
 8020a30:	60fb      	str	r3, [r7, #12]
 8020a32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8020a34:	4b2d      	ldr	r3, [pc, #180]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a38:	4a2c      	ldr	r2, [pc, #176]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8020a40:	4b2a      	ldr	r3, [pc, #168]	; (8020aec <HAL_ETH_MspInit+0x16c>)
 8020a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020a48:	60bb      	str	r3, [r7, #8]
 8020a4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 8020a4c:	2332      	movs	r3, #50	; 0x32
 8020a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a50:	2302      	movs	r3, #2
 8020a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a54:	2300      	movs	r3, #0
 8020a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a58:	2303      	movs	r3, #3
 8020a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a5c:	230b      	movs	r3, #11
 8020a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8020a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a64:	4619      	mov	r1, r3
 8020a66:	4822      	ldr	r0, [pc, #136]	; (8020af0 <HAL_ETH_MspInit+0x170>)
 8020a68:	f7fa fdac 	bl	801b5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 8020a6c:	2386      	movs	r3, #134	; 0x86
 8020a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a70:	2302      	movs	r3, #2
 8020a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a74:	2300      	movs	r3, #0
 8020a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a78:	2303      	movs	r3, #3
 8020a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a7c:	230b      	movs	r3, #11
 8020a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8020a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020a84:	4619      	mov	r1, r3
 8020a86:	481b      	ldr	r0, [pc, #108]	; (8020af4 <HAL_ETH_MspInit+0x174>)
 8020a88:	f7fa fd9c 	bl	801b5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 8020a8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020a92:	2302      	movs	r3, #2
 8020a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020a96:	2300      	movs	r3, #0
 8020a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020a9a:	2303      	movs	r3, #3
 8020a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020a9e:	230b      	movs	r3, #11
 8020aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 8020aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020aa6:	4619      	mov	r1, r3
 8020aa8:	4813      	ldr	r0, [pc, #76]	; (8020af8 <HAL_ETH_MspInit+0x178>)
 8020aaa:	f7fa fd8b 	bl	801b5c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 8020aae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8020ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8020ab4:	2302      	movs	r3, #2
 8020ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8020ab8:	2300      	movs	r3, #0
 8020aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8020abc:	2303      	movs	r3, #3
 8020abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8020ac0:	230b      	movs	r3, #11
 8020ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8020ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8020ac8:	4619      	mov	r1, r3
 8020aca:	480c      	ldr	r0, [pc, #48]	; (8020afc <HAL_ETH_MspInit+0x17c>)
 8020acc:	f7fa fd7a 	bl	801b5c4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 8020ad0:	2200      	movs	r2, #0
 8020ad2:	2101      	movs	r1, #1
 8020ad4:	203d      	movs	r0, #61	; 0x3d
 8020ad6:	f7f9 fa4a 	bl	8019f6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8020ada:	203d      	movs	r0, #61	; 0x3d
 8020adc:	f7f9 fa63 	bl	8019fa6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8020ae0:	bf00      	nop
 8020ae2:	3738      	adds	r7, #56	; 0x38
 8020ae4:	46bd      	mov	sp, r7
 8020ae6:	bd80      	pop	{r7, pc}
 8020ae8:	40028000 	.word	0x40028000
 8020aec:	40023800 	.word	0x40023800
 8020af0:	40020800 	.word	0x40020800
 8020af4:	40020000 	.word	0x40020000
 8020af8:	40020400 	.word	0x40020400
 8020afc:	40021800 	.word	0x40021800

08020b00 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8020b00:	b580      	push	{r7, lr}
 8020b02:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8020b04:	4802      	ldr	r0, [pc, #8]	; (8020b10 <ETH_PHY_IO_Init+0x10>)
 8020b06:	f7fa f903 	bl	801ad10 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8020b0a:	2300      	movs	r3, #0
}
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	bd80      	pop	{r7, pc}
 8020b10:	20012634 	.word	0x20012634

08020b14 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8020b14:	b480      	push	{r7}
 8020b16:	af00      	add	r7, sp, #0
  return 0;
 8020b18:	2300      	movs	r3, #0
}
 8020b1a:	4618      	mov	r0, r3
 8020b1c:	46bd      	mov	sp, r7
 8020b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020b22:	4770      	bx	lr

08020b24 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8020b24:	b580      	push	{r7, lr}
 8020b26:	b084      	sub	sp, #16
 8020b28:	af00      	add	r7, sp, #0
 8020b2a:	60f8      	str	r0, [r7, #12]
 8020b2c:	60b9      	str	r1, [r7, #8]
 8020b2e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8020b30:	687b      	ldr	r3, [r7, #4]
 8020b32:	68ba      	ldr	r2, [r7, #8]
 8020b34:	68f9      	ldr	r1, [r7, #12]
 8020b36:	4807      	ldr	r0, [pc, #28]	; (8020b54 <ETH_PHY_IO_ReadReg+0x30>)
 8020b38:	f7f9 ff52 	bl	801a9e0 <HAL_ETH_ReadPHYRegister>
 8020b3c:	4603      	mov	r3, r0
 8020b3e:	2b00      	cmp	r3, #0
 8020b40:	d002      	beq.n	8020b48 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8020b42:	f04f 33ff 	mov.w	r3, #4294967295
 8020b46:	e000      	b.n	8020b4a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8020b48:	2300      	movs	r3, #0
}
 8020b4a:	4618      	mov	r0, r3
 8020b4c:	3710      	adds	r7, #16
 8020b4e:	46bd      	mov	sp, r7
 8020b50:	bd80      	pop	{r7, pc}
 8020b52:	bf00      	nop
 8020b54:	20012634 	.word	0x20012634

08020b58 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8020b58:	b580      	push	{r7, lr}
 8020b5a:	b084      	sub	sp, #16
 8020b5c:	af00      	add	r7, sp, #0
 8020b5e:	60f8      	str	r0, [r7, #12]
 8020b60:	60b9      	str	r1, [r7, #8]
 8020b62:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8020b64:	687b      	ldr	r3, [r7, #4]
 8020b66:	68ba      	ldr	r2, [r7, #8]
 8020b68:	68f9      	ldr	r1, [r7, #12]
 8020b6a:	4807      	ldr	r0, [pc, #28]	; (8020b88 <ETH_PHY_IO_WriteReg+0x30>)
 8020b6c:	f7f9 ff83 	bl	801aa76 <HAL_ETH_WritePHYRegister>
 8020b70:	4603      	mov	r3, r0
 8020b72:	2b00      	cmp	r3, #0
 8020b74:	d002      	beq.n	8020b7c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8020b76:	f04f 33ff 	mov.w	r3, #4294967295
 8020b7a:	e000      	b.n	8020b7e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8020b7c:	2300      	movs	r3, #0
}
 8020b7e:	4618      	mov	r0, r3
 8020b80:	3710      	adds	r7, #16
 8020b82:	46bd      	mov	sp, r7
 8020b84:	bd80      	pop	{r7, pc}
 8020b86:	bf00      	nop
 8020b88:	20012634 	.word	0x20012634

08020b8c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8020b8c:	b580      	push	{r7, lr}
 8020b8e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8020b90:	f7f8 fb00 	bl	8019194 <HAL_GetTick>
 8020b94:	4603      	mov	r3, r0
}
 8020b96:	4618      	mov	r0, r3
 8020b98:	bd80      	pop	{r7, pc}
	...

08020b9c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8020b9c:	b580      	push	{r7, lr}
 8020b9e:	b0a0      	sub	sp, #128	; 0x80
 8020ba0:	af00      	add	r7, sp, #0
 8020ba2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8020ba4:	f107 030c 	add.w	r3, r7, #12
 8020ba8:	2264      	movs	r2, #100	; 0x64
 8020baa:	2100      	movs	r1, #0
 8020bac:	4618      	mov	r0, r3
 8020bae:	f005 f91f 	bl	8025df0 <memset>
  int32_t PHYLinkState = 0;
 8020bb2:	2300      	movs	r3, #0
 8020bb4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8020bb6:	2300      	movs	r3, #0
 8020bb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8020bba:	2300      	movs	r3, #0
 8020bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8020bbe:	2300      	movs	r3, #0
 8020bc0:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8020bc2:	483a      	ldr	r0, [pc, #232]	; (8020cac <ethernet_link_check_state+0x110>)
 8020bc4:	f7f8 f9ff 	bl	8018fc6 <DP83848_GetLinkState>
 8020bc8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020bd0:	089b      	lsrs	r3, r3, #2
 8020bd2:	f003 0301 	and.w	r3, r3, #1
 8020bd6:	b2db      	uxtb	r3, r3
 8020bd8:	2b00      	cmp	r3, #0
 8020bda:	d00c      	beq.n	8020bf6 <ethernet_link_check_state+0x5a>
 8020bdc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020bde:	2b01      	cmp	r3, #1
 8020be0:	dc09      	bgt.n	8020bf6 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8020be2:	4833      	ldr	r0, [pc, #204]	; (8020cb0 <ethernet_link_check_state+0x114>)
 8020be4:	f7f9 fbe3 	bl	801a3ae <HAL_ETH_Stop>
    netif_set_down(netif);
 8020be8:	6878      	ldr	r0, [r7, #4]
 8020bea:	f001 f84b 	bl	8021c84 <netif_set_down>
    netif_set_link_down(netif);
 8020bee:	6878      	ldr	r0, [r7, #4]
 8020bf0:	f001 f8ae 	bl	8021d50 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8020bf4:	e055      	b.n	8020ca2 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020bfc:	f003 0304 	and.w	r3, r3, #4
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d14e      	bne.n	8020ca2 <ethernet_link_check_state+0x106>
 8020c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020c06:	2b01      	cmp	r3, #1
 8020c08:	dd4b      	ble.n	8020ca2 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8020c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8020c0c:	3b02      	subs	r3, #2
 8020c0e:	2b03      	cmp	r3, #3
 8020c10:	d82a      	bhi.n	8020c68 <ethernet_link_check_state+0xcc>
 8020c12:	a201      	add	r2, pc, #4	; (adr r2, 8020c18 <ethernet_link_check_state+0x7c>)
 8020c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8020c18:	08020c29 	.word	0x08020c29
 8020c1c:	08020c3b 	.word	0x08020c3b
 8020c20:	08020c4b 	.word	0x08020c4b
 8020c24:	08020c5b 	.word	0x08020c5b
      duplex = ETH_FULLDUPLEX_MODE;
 8020c28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c2c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8020c2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020c32:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8020c34:	2301      	movs	r3, #1
 8020c36:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020c38:	e017      	b.n	8020c6a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8020c3a:	2300      	movs	r3, #0
 8020c3c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8020c3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8020c42:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8020c44:	2301      	movs	r3, #1
 8020c46:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020c48:	e00f      	b.n	8020c6a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8020c4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020c4e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8020c50:	2300      	movs	r3, #0
 8020c52:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8020c54:	2301      	movs	r3, #1
 8020c56:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020c58:	e007      	b.n	8020c6a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8020c5e:	2300      	movs	r3, #0
 8020c60:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8020c62:	2301      	movs	r3, #1
 8020c64:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8020c66:	e000      	b.n	8020c6a <ethernet_link_check_state+0xce>
      break;
 8020c68:	bf00      	nop
    if(linkchanged)
 8020c6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8020c6c:	2b00      	cmp	r3, #0
 8020c6e:	d018      	beq.n	8020ca2 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8020c70:	f107 030c 	add.w	r3, r7, #12
 8020c74:	4619      	mov	r1, r3
 8020c76:	480e      	ldr	r0, [pc, #56]	; (8020cb0 <ethernet_link_check_state+0x114>)
 8020c78:	f7f9 ff46 	bl	801ab08 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8020c7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8020c7e:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 8020c80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8020c82:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8020c84:	f107 030c 	add.w	r3, r7, #12
 8020c88:	4619      	mov	r1, r3
 8020c8a:	4809      	ldr	r0, [pc, #36]	; (8020cb0 <ethernet_link_check_state+0x114>)
 8020c8c:	f7fa f826 	bl	801acdc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8020c90:	4807      	ldr	r0, [pc, #28]	; (8020cb0 <ethernet_link_check_state+0x114>)
 8020c92:	f7f9 fb2d 	bl	801a2f0 <HAL_ETH_Start>
      netif_set_up(netif);
 8020c96:	6878      	ldr	r0, [r7, #4]
 8020c98:	f000 ff88 	bl	8021bac <netif_set_up>
      netif_set_link_up(netif);
 8020c9c:	6878      	ldr	r0, [r7, #4]
 8020c9e:	f001 f823 	bl	8021ce8 <netif_set_link_up>
}
 8020ca2:	bf00      	nop
 8020ca4:	3780      	adds	r7, #128	; 0x80
 8020ca6:	46bd      	mov	sp, r7
 8020ca8:	bd80      	pop	{r7, pc}
 8020caa:	bf00      	nop
 8020cac:	2001271c 	.word	0x2001271c
 8020cb0:	20012634 	.word	0x20012634

08020cb4 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8020cb4:	b580      	push	{r7, lr}
 8020cb6:	b086      	sub	sp, #24
 8020cb8:	af02      	add	r7, sp, #8
 8020cba:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8020cbc:	4812      	ldr	r0, [pc, #72]	; (8020d08 <HAL_ETH_RxAllocateCallback+0x54>)
 8020cbe:	f000 fca5 	bl	802160c <memp_malloc_pool>
 8020cc2:	60f8      	str	r0, [r7, #12]
	if (p)
 8020cc4:	68fb      	ldr	r3, [r7, #12]
 8020cc6:	2b00      	cmp	r3, #0
 8020cc8:	d014      	beq.n	8020cf4 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8020cca:	68fb      	ldr	r3, [r7, #12]
 8020ccc:	f103 0214 	add.w	r2, r3, #20
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 8020cd4:	68fb      	ldr	r3, [r7, #12]
 8020cd6:	4a0d      	ldr	r2, [pc, #52]	; (8020d0c <HAL_ETH_RxAllocateCallback+0x58>)
 8020cd8:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8020cda:	687b      	ldr	r3, [r7, #4]
 8020cdc:	681b      	ldr	r3, [r3, #0]
 8020cde:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8020ce2:	9201      	str	r2, [sp, #4]
 8020ce4:	9300      	str	r3, [sp, #0]
 8020ce6:	68fb      	ldr	r3, [r7, #12]
 8020ce8:	2241      	movs	r2, #65	; 0x41
 8020cea:	2100      	movs	r1, #0
 8020cec:	2000      	movs	r0, #0
 8020cee:	f001 fa75 	bl	80221dc <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8020cf2:	e005      	b.n	8020d00 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 8020cf4:	4b06      	ldr	r3, [pc, #24]	; (8020d10 <HAL_ETH_RxAllocateCallback+0x5c>)
 8020cf6:	2201      	movs	r2, #1
 8020cf8:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 8020cfa:	687b      	ldr	r3, [r7, #4]
 8020cfc:	2200      	movs	r2, #0
 8020cfe:	601a      	str	r2, [r3, #0]
}
 8020d00:	bf00      	nop
 8020d02:	3710      	adds	r7, #16
 8020d04:	46bd      	mov	sp, r7
 8020d06:	bd80      	pop	{r7, pc}
 8020d08:	0802d174 	.word	0x0802d174
 8020d0c:	0802093d 	.word	0x0802093d
 8020d10:	20012630 	.word	0x20012630

08020d14 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8020d14:	b580      	push	{r7, lr}
 8020d16:	b088      	sub	sp, #32
 8020d18:	af00      	add	r7, sp, #0
 8020d1a:	60f8      	str	r0, [r7, #12]
 8020d1c:	60b9      	str	r1, [r7, #8]
 8020d1e:	607a      	str	r2, [r7, #4]
 8020d20:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 8020d22:	68fb      	ldr	r3, [r7, #12]
 8020d24:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8020d26:	68bb      	ldr	r3, [r7, #8]
 8020d28:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 8020d2a:	2300      	movs	r3, #0
 8020d2c:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8020d2e:	687b      	ldr	r3, [r7, #4]
 8020d30:	3b14      	subs	r3, #20
 8020d32:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 8020d34:	69fb      	ldr	r3, [r7, #28]
 8020d36:	2200      	movs	r2, #0
 8020d38:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 8020d3a:	69fb      	ldr	r3, [r7, #28]
 8020d3c:	2200      	movs	r2, #0
 8020d3e:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 8020d40:	69fb      	ldr	r3, [r7, #28]
 8020d42:	887a      	ldrh	r2, [r7, #2]
 8020d44:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 8020d46:	69bb      	ldr	r3, [r7, #24]
 8020d48:	681b      	ldr	r3, [r3, #0]
 8020d4a:	2b00      	cmp	r3, #0
 8020d4c:	d103      	bne.n	8020d56 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 8020d4e:	69bb      	ldr	r3, [r7, #24]
 8020d50:	69fa      	ldr	r2, [r7, #28]
 8020d52:	601a      	str	r2, [r3, #0]
 8020d54:	e003      	b.n	8020d5e <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 8020d56:	697b      	ldr	r3, [r7, #20]
 8020d58:	681b      	ldr	r3, [r3, #0]
 8020d5a:	69fa      	ldr	r2, [r7, #28]
 8020d5c:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 8020d5e:	697b      	ldr	r3, [r7, #20]
 8020d60:	69fa      	ldr	r2, [r7, #28]
 8020d62:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 8020d64:	69bb      	ldr	r3, [r7, #24]
 8020d66:	681b      	ldr	r3, [r3, #0]
 8020d68:	61fb      	str	r3, [r7, #28]
 8020d6a:	e009      	b.n	8020d80 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 8020d6c:	69fb      	ldr	r3, [r7, #28]
 8020d6e:	891a      	ldrh	r2, [r3, #8]
 8020d70:	887b      	ldrh	r3, [r7, #2]
 8020d72:	4413      	add	r3, r2
 8020d74:	b29a      	uxth	r2, r3
 8020d76:	69fb      	ldr	r3, [r7, #28]
 8020d78:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 8020d7a:	69fb      	ldr	r3, [r7, #28]
 8020d7c:	681b      	ldr	r3, [r3, #0]
 8020d7e:	61fb      	str	r3, [r7, #28]
 8020d80:	69fb      	ldr	r3, [r7, #28]
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	d1f2      	bne.n	8020d6c <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8020d86:	887b      	ldrh	r3, [r7, #2]
 8020d88:	4619      	mov	r1, r3
 8020d8a:	6878      	ldr	r0, [r7, #4]
 8020d8c:	f7ff fc14 	bl	80205b8 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8020d90:	bf00      	nop
 8020d92:	3720      	adds	r7, #32
 8020d94:	46bd      	mov	sp, r7
 8020d96:	bd80      	pop	{r7, pc}

08020d98 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8020d98:	b480      	push	{r7}
 8020d9a:	b083      	sub	sp, #12
 8020d9c:	af00      	add	r7, sp, #0
 8020d9e:	4603      	mov	r3, r0
 8020da0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8020da2:	88fb      	ldrh	r3, [r7, #6]
 8020da4:	021b      	lsls	r3, r3, #8
 8020da6:	b21a      	sxth	r2, r3
 8020da8:	88fb      	ldrh	r3, [r7, #6]
 8020daa:	0a1b      	lsrs	r3, r3, #8
 8020dac:	b29b      	uxth	r3, r3
 8020dae:	b21b      	sxth	r3, r3
 8020db0:	4313      	orrs	r3, r2
 8020db2:	b21b      	sxth	r3, r3
 8020db4:	b29b      	uxth	r3, r3
}
 8020db6:	4618      	mov	r0, r3
 8020db8:	370c      	adds	r7, #12
 8020dba:	46bd      	mov	sp, r7
 8020dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020dc0:	4770      	bx	lr

08020dc2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8020dc2:	b580      	push	{r7, lr}
 8020dc4:	b082      	sub	sp, #8
 8020dc6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8020dc8:	2300      	movs	r3, #0
 8020dca:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8020dcc:	f000 f8d2 	bl	8020f74 <mem_init>
  memp_init();
 8020dd0:	f000 fbd8 	bl	8021584 <memp_init>
  pbuf_init();
  netif_init();
 8020dd4:	f000 fcfc 	bl	80217d0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8020dd8:	f001 ff9a 	bl	8022d10 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8020ddc:	f001 ff16 	bl	8022c0c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8020de0:	bf00      	nop
 8020de2:	3708      	adds	r7, #8
 8020de4:	46bd      	mov	sp, r7
 8020de6:	bd80      	pop	{r7, pc}

08020de8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8020de8:	b480      	push	{r7}
 8020dea:	b083      	sub	sp, #12
 8020dec:	af00      	add	r7, sp, #0
 8020dee:	4603      	mov	r3, r0
 8020df0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8020df2:	4b05      	ldr	r3, [pc, #20]	; (8020e08 <ptr_to_mem+0x20>)
 8020df4:	681a      	ldr	r2, [r3, #0]
 8020df6:	88fb      	ldrh	r3, [r7, #6]
 8020df8:	4413      	add	r3, r2
}
 8020dfa:	4618      	mov	r0, r3
 8020dfc:	370c      	adds	r7, #12
 8020dfe:	46bd      	mov	sp, r7
 8020e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e04:	4770      	bx	lr
 8020e06:	bf00      	nop
 8020e08:	20012da8 	.word	0x20012da8

08020e0c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8020e0c:	b480      	push	{r7}
 8020e0e:	b083      	sub	sp, #12
 8020e10:	af00      	add	r7, sp, #0
 8020e12:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8020e14:	4b05      	ldr	r3, [pc, #20]	; (8020e2c <mem_to_ptr+0x20>)
 8020e16:	681b      	ldr	r3, [r3, #0]
 8020e18:	687a      	ldr	r2, [r7, #4]
 8020e1a:	1ad3      	subs	r3, r2, r3
 8020e1c:	b29b      	uxth	r3, r3
}
 8020e1e:	4618      	mov	r0, r3
 8020e20:	370c      	adds	r7, #12
 8020e22:	46bd      	mov	sp, r7
 8020e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020e28:	4770      	bx	lr
 8020e2a:	bf00      	nop
 8020e2c:	20012da8 	.word	0x20012da8

08020e30 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8020e30:	b590      	push	{r4, r7, lr}
 8020e32:	b085      	sub	sp, #20
 8020e34:	af00      	add	r7, sp, #0
 8020e36:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8020e38:	4b45      	ldr	r3, [pc, #276]	; (8020f50 <plug_holes+0x120>)
 8020e3a:	681b      	ldr	r3, [r3, #0]
 8020e3c:	687a      	ldr	r2, [r7, #4]
 8020e3e:	429a      	cmp	r2, r3
 8020e40:	d206      	bcs.n	8020e50 <plug_holes+0x20>
 8020e42:	4b44      	ldr	r3, [pc, #272]	; (8020f54 <plug_holes+0x124>)
 8020e44:	f240 12df 	movw	r2, #479	; 0x1df
 8020e48:	4943      	ldr	r1, [pc, #268]	; (8020f58 <plug_holes+0x128>)
 8020e4a:	4844      	ldr	r0, [pc, #272]	; (8020f5c <plug_holes+0x12c>)
 8020e4c:	f005 f8b8 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8020e50:	4b43      	ldr	r3, [pc, #268]	; (8020f60 <plug_holes+0x130>)
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	687a      	ldr	r2, [r7, #4]
 8020e56:	429a      	cmp	r2, r3
 8020e58:	d306      	bcc.n	8020e68 <plug_holes+0x38>
 8020e5a:	4b3e      	ldr	r3, [pc, #248]	; (8020f54 <plug_holes+0x124>)
 8020e5c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8020e60:	4940      	ldr	r1, [pc, #256]	; (8020f64 <plug_holes+0x134>)
 8020e62:	483e      	ldr	r0, [pc, #248]	; (8020f5c <plug_holes+0x12c>)
 8020e64:	f005 f8ac 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8020e68:	687b      	ldr	r3, [r7, #4]
 8020e6a:	791b      	ldrb	r3, [r3, #4]
 8020e6c:	2b00      	cmp	r3, #0
 8020e6e:	d006      	beq.n	8020e7e <plug_holes+0x4e>
 8020e70:	4b38      	ldr	r3, [pc, #224]	; (8020f54 <plug_holes+0x124>)
 8020e72:	f240 12e1 	movw	r2, #481	; 0x1e1
 8020e76:	493c      	ldr	r1, [pc, #240]	; (8020f68 <plug_holes+0x138>)
 8020e78:	4838      	ldr	r0, [pc, #224]	; (8020f5c <plug_holes+0x12c>)
 8020e7a:	f005 f8a1 	bl	8025fc0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	881b      	ldrh	r3, [r3, #0]
 8020e82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020e86:	d906      	bls.n	8020e96 <plug_holes+0x66>
 8020e88:	4b32      	ldr	r3, [pc, #200]	; (8020f54 <plug_holes+0x124>)
 8020e8a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8020e8e:	4937      	ldr	r1, [pc, #220]	; (8020f6c <plug_holes+0x13c>)
 8020e90:	4832      	ldr	r0, [pc, #200]	; (8020f5c <plug_holes+0x12c>)
 8020e92:	f005 f895 	bl	8025fc0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8020e96:	687b      	ldr	r3, [r7, #4]
 8020e98:	881b      	ldrh	r3, [r3, #0]
 8020e9a:	4618      	mov	r0, r3
 8020e9c:	f7ff ffa4 	bl	8020de8 <ptr_to_mem>
 8020ea0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8020ea2:	687a      	ldr	r2, [r7, #4]
 8020ea4:	68fb      	ldr	r3, [r7, #12]
 8020ea6:	429a      	cmp	r2, r3
 8020ea8:	d024      	beq.n	8020ef4 <plug_holes+0xc4>
 8020eaa:	68fb      	ldr	r3, [r7, #12]
 8020eac:	791b      	ldrb	r3, [r3, #4]
 8020eae:	2b00      	cmp	r3, #0
 8020eb0:	d120      	bne.n	8020ef4 <plug_holes+0xc4>
 8020eb2:	4b2b      	ldr	r3, [pc, #172]	; (8020f60 <plug_holes+0x130>)
 8020eb4:	681b      	ldr	r3, [r3, #0]
 8020eb6:	68fa      	ldr	r2, [r7, #12]
 8020eb8:	429a      	cmp	r2, r3
 8020eba:	d01b      	beq.n	8020ef4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8020ebc:	4b2c      	ldr	r3, [pc, #176]	; (8020f70 <plug_holes+0x140>)
 8020ebe:	681b      	ldr	r3, [r3, #0]
 8020ec0:	68fa      	ldr	r2, [r7, #12]
 8020ec2:	429a      	cmp	r2, r3
 8020ec4:	d102      	bne.n	8020ecc <plug_holes+0x9c>
      lfree = mem;
 8020ec6:	4a2a      	ldr	r2, [pc, #168]	; (8020f70 <plug_holes+0x140>)
 8020ec8:	687b      	ldr	r3, [r7, #4]
 8020eca:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8020ecc:	68fb      	ldr	r3, [r7, #12]
 8020ece:	881a      	ldrh	r2, [r3, #0]
 8020ed0:	687b      	ldr	r3, [r7, #4]
 8020ed2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8020ed4:	68fb      	ldr	r3, [r7, #12]
 8020ed6:	881b      	ldrh	r3, [r3, #0]
 8020ed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020edc:	d00a      	beq.n	8020ef4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	881b      	ldrh	r3, [r3, #0]
 8020ee2:	4618      	mov	r0, r3
 8020ee4:	f7ff ff80 	bl	8020de8 <ptr_to_mem>
 8020ee8:	4604      	mov	r4, r0
 8020eea:	6878      	ldr	r0, [r7, #4]
 8020eec:	f7ff ff8e 	bl	8020e0c <mem_to_ptr>
 8020ef0:	4603      	mov	r3, r0
 8020ef2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8020ef4:	687b      	ldr	r3, [r7, #4]
 8020ef6:	885b      	ldrh	r3, [r3, #2]
 8020ef8:	4618      	mov	r0, r3
 8020efa:	f7ff ff75 	bl	8020de8 <ptr_to_mem>
 8020efe:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8020f00:	68ba      	ldr	r2, [r7, #8]
 8020f02:	687b      	ldr	r3, [r7, #4]
 8020f04:	429a      	cmp	r2, r3
 8020f06:	d01f      	beq.n	8020f48 <plug_holes+0x118>
 8020f08:	68bb      	ldr	r3, [r7, #8]
 8020f0a:	791b      	ldrb	r3, [r3, #4]
 8020f0c:	2b00      	cmp	r3, #0
 8020f0e:	d11b      	bne.n	8020f48 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8020f10:	4b17      	ldr	r3, [pc, #92]	; (8020f70 <plug_holes+0x140>)
 8020f12:	681b      	ldr	r3, [r3, #0]
 8020f14:	687a      	ldr	r2, [r7, #4]
 8020f16:	429a      	cmp	r2, r3
 8020f18:	d102      	bne.n	8020f20 <plug_holes+0xf0>
      lfree = pmem;
 8020f1a:	4a15      	ldr	r2, [pc, #84]	; (8020f70 <plug_holes+0x140>)
 8020f1c:	68bb      	ldr	r3, [r7, #8]
 8020f1e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	881a      	ldrh	r2, [r3, #0]
 8020f24:	68bb      	ldr	r3, [r7, #8]
 8020f26:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8020f28:	687b      	ldr	r3, [r7, #4]
 8020f2a:	881b      	ldrh	r3, [r3, #0]
 8020f2c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8020f30:	d00a      	beq.n	8020f48 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8020f32:	687b      	ldr	r3, [r7, #4]
 8020f34:	881b      	ldrh	r3, [r3, #0]
 8020f36:	4618      	mov	r0, r3
 8020f38:	f7ff ff56 	bl	8020de8 <ptr_to_mem>
 8020f3c:	4604      	mov	r4, r0
 8020f3e:	68b8      	ldr	r0, [r7, #8]
 8020f40:	f7ff ff64 	bl	8020e0c <mem_to_ptr>
 8020f44:	4603      	mov	r3, r0
 8020f46:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8020f48:	bf00      	nop
 8020f4a:	3714      	adds	r7, #20
 8020f4c:	46bd      	mov	sp, r7
 8020f4e:	bd90      	pop	{r4, r7, pc}
 8020f50:	20012da8 	.word	0x20012da8
 8020f54:	0802b720 	.word	0x0802b720
 8020f58:	0802b750 	.word	0x0802b750
 8020f5c:	0802b768 	.word	0x0802b768
 8020f60:	20012dac 	.word	0x20012dac
 8020f64:	0802b790 	.word	0x0802b790
 8020f68:	0802b7ac 	.word	0x0802b7ac
 8020f6c:	0802b7c8 	.word	0x0802b7c8
 8020f70:	20012db0 	.word	0x20012db0

08020f74 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8020f74:	b580      	push	{r7, lr}
 8020f76:	b082      	sub	sp, #8
 8020f78:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8020f7a:	4b18      	ldr	r3, [pc, #96]	; (8020fdc <mem_init+0x68>)
 8020f7c:	3303      	adds	r3, #3
 8020f7e:	f023 0303 	bic.w	r3, r3, #3
 8020f82:	461a      	mov	r2, r3
 8020f84:	4b16      	ldr	r3, [pc, #88]	; (8020fe0 <mem_init+0x6c>)
 8020f86:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8020f88:	4b15      	ldr	r3, [pc, #84]	; (8020fe0 <mem_init+0x6c>)
 8020f8a:	681b      	ldr	r3, [r3, #0]
 8020f8c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8020f8e:	687b      	ldr	r3, [r7, #4]
 8020f90:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020f94:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8020f96:	687b      	ldr	r3, [r7, #4]
 8020f98:	2200      	movs	r2, #0
 8020f9a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8020f9c:	687b      	ldr	r3, [r7, #4]
 8020f9e:	2200      	movs	r2, #0
 8020fa0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8020fa2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8020fa6:	f7ff ff1f 	bl	8020de8 <ptr_to_mem>
 8020faa:	4603      	mov	r3, r0
 8020fac:	4a0d      	ldr	r2, [pc, #52]	; (8020fe4 <mem_init+0x70>)
 8020fae:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8020fb0:	4b0c      	ldr	r3, [pc, #48]	; (8020fe4 <mem_init+0x70>)
 8020fb2:	681b      	ldr	r3, [r3, #0]
 8020fb4:	2201      	movs	r2, #1
 8020fb6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8020fb8:	4b0a      	ldr	r3, [pc, #40]	; (8020fe4 <mem_init+0x70>)
 8020fba:	681b      	ldr	r3, [r3, #0]
 8020fbc:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020fc0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8020fc2:	4b08      	ldr	r3, [pc, #32]	; (8020fe4 <mem_init+0x70>)
 8020fc4:	681b      	ldr	r3, [r3, #0]
 8020fc6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8020fca:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8020fcc:	4b04      	ldr	r3, [pc, #16]	; (8020fe0 <mem_init+0x6c>)
 8020fce:	681b      	ldr	r3, [r3, #0]
 8020fd0:	4a05      	ldr	r2, [pc, #20]	; (8020fe8 <mem_init+0x74>)
 8020fd2:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8020fd4:	bf00      	nop
 8020fd6:	3708      	adds	r7, #8
 8020fd8:	46bd      	mov	sp, r7
 8020fda:	bd80      	pop	{r7, pc}
 8020fdc:	20012754 	.word	0x20012754
 8020fe0:	20012da8 	.word	0x20012da8
 8020fe4:	20012dac 	.word	0x20012dac
 8020fe8:	20012db0 	.word	0x20012db0

08020fec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8020fec:	b580      	push	{r7, lr}
 8020fee:	b086      	sub	sp, #24
 8020ff0:	af00      	add	r7, sp, #0
 8020ff2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8020ff4:	6878      	ldr	r0, [r7, #4]
 8020ff6:	f7ff ff09 	bl	8020e0c <mem_to_ptr>
 8020ffa:	4603      	mov	r3, r0
 8020ffc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8020ffe:	687b      	ldr	r3, [r7, #4]
 8021000:	881b      	ldrh	r3, [r3, #0]
 8021002:	4618      	mov	r0, r3
 8021004:	f7ff fef0 	bl	8020de8 <ptr_to_mem>
 8021008:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 802100a:	687b      	ldr	r3, [r7, #4]
 802100c:	885b      	ldrh	r3, [r3, #2]
 802100e:	4618      	mov	r0, r3
 8021010:	f7ff feea 	bl	8020de8 <ptr_to_mem>
 8021014:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8021016:	687b      	ldr	r3, [r7, #4]
 8021018:	881b      	ldrh	r3, [r3, #0]
 802101a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 802101e:	d818      	bhi.n	8021052 <mem_link_valid+0x66>
 8021020:	687b      	ldr	r3, [r7, #4]
 8021022:	885b      	ldrh	r3, [r3, #2]
 8021024:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021028:	d813      	bhi.n	8021052 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 802102e:	8afa      	ldrh	r2, [r7, #22]
 8021030:	429a      	cmp	r2, r3
 8021032:	d004      	beq.n	802103e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021034:	68fb      	ldr	r3, [r7, #12]
 8021036:	881b      	ldrh	r3, [r3, #0]
 8021038:	8afa      	ldrh	r2, [r7, #22]
 802103a:	429a      	cmp	r2, r3
 802103c:	d109      	bne.n	8021052 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 802103e:	4b08      	ldr	r3, [pc, #32]	; (8021060 <mem_link_valid+0x74>)
 8021040:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8021042:	693a      	ldr	r2, [r7, #16]
 8021044:	429a      	cmp	r2, r3
 8021046:	d006      	beq.n	8021056 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8021048:	693b      	ldr	r3, [r7, #16]
 802104a:	885b      	ldrh	r3, [r3, #2]
 802104c:	8afa      	ldrh	r2, [r7, #22]
 802104e:	429a      	cmp	r2, r3
 8021050:	d001      	beq.n	8021056 <mem_link_valid+0x6a>
    return 0;
 8021052:	2300      	movs	r3, #0
 8021054:	e000      	b.n	8021058 <mem_link_valid+0x6c>
  }
  return 1;
 8021056:	2301      	movs	r3, #1
}
 8021058:	4618      	mov	r0, r3
 802105a:	3718      	adds	r7, #24
 802105c:	46bd      	mov	sp, r7
 802105e:	bd80      	pop	{r7, pc}
 8021060:	20012dac 	.word	0x20012dac

08021064 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8021064:	b580      	push	{r7, lr}
 8021066:	b084      	sub	sp, #16
 8021068:	af00      	add	r7, sp, #0
 802106a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 802106c:	687b      	ldr	r3, [r7, #4]
 802106e:	2b00      	cmp	r3, #0
 8021070:	d04c      	beq.n	802110c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8021072:	687b      	ldr	r3, [r7, #4]
 8021074:	f003 0303 	and.w	r3, r3, #3
 8021078:	2b00      	cmp	r3, #0
 802107a:	d007      	beq.n	802108c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 802107c:	4b25      	ldr	r3, [pc, #148]	; (8021114 <mem_free+0xb0>)
 802107e:	f240 2273 	movw	r2, #627	; 0x273
 8021082:	4925      	ldr	r1, [pc, #148]	; (8021118 <mem_free+0xb4>)
 8021084:	4825      	ldr	r0, [pc, #148]	; (802111c <mem_free+0xb8>)
 8021086:	f004 ff9b 	bl	8025fc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 802108a:	e040      	b.n	802110e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 802108c:	687b      	ldr	r3, [r7, #4]
 802108e:	3b08      	subs	r3, #8
 8021090:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8021092:	4b23      	ldr	r3, [pc, #140]	; (8021120 <mem_free+0xbc>)
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	68fa      	ldr	r2, [r7, #12]
 8021098:	429a      	cmp	r2, r3
 802109a:	d306      	bcc.n	80210aa <mem_free+0x46>
 802109c:	687b      	ldr	r3, [r7, #4]
 802109e:	f103 020c 	add.w	r2, r3, #12
 80210a2:	4b20      	ldr	r3, [pc, #128]	; (8021124 <mem_free+0xc0>)
 80210a4:	681b      	ldr	r3, [r3, #0]
 80210a6:	429a      	cmp	r2, r3
 80210a8:	d907      	bls.n	80210ba <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80210aa:	4b1a      	ldr	r3, [pc, #104]	; (8021114 <mem_free+0xb0>)
 80210ac:	f240 227f 	movw	r2, #639	; 0x27f
 80210b0:	491d      	ldr	r1, [pc, #116]	; (8021128 <mem_free+0xc4>)
 80210b2:	481a      	ldr	r0, [pc, #104]	; (802111c <mem_free+0xb8>)
 80210b4:	f004 ff84 	bl	8025fc0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80210b8:	e029      	b.n	802110e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80210ba:	68fb      	ldr	r3, [r7, #12]
 80210bc:	791b      	ldrb	r3, [r3, #4]
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d107      	bne.n	80210d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80210c2:	4b14      	ldr	r3, [pc, #80]	; (8021114 <mem_free+0xb0>)
 80210c4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80210c8:	4918      	ldr	r1, [pc, #96]	; (802112c <mem_free+0xc8>)
 80210ca:	4814      	ldr	r0, [pc, #80]	; (802111c <mem_free+0xb8>)
 80210cc:	f004 ff78 	bl	8025fc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80210d0:	e01d      	b.n	802110e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 80210d2:	68f8      	ldr	r0, [r7, #12]
 80210d4:	f7ff ff8a 	bl	8020fec <mem_link_valid>
 80210d8:	4603      	mov	r3, r0
 80210da:	2b00      	cmp	r3, #0
 80210dc:	d107      	bne.n	80210ee <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80210de:	4b0d      	ldr	r3, [pc, #52]	; (8021114 <mem_free+0xb0>)
 80210e0:	f240 2295 	movw	r2, #661	; 0x295
 80210e4:	4912      	ldr	r1, [pc, #72]	; (8021130 <mem_free+0xcc>)
 80210e6:	480d      	ldr	r0, [pc, #52]	; (802111c <mem_free+0xb8>)
 80210e8:	f004 ff6a 	bl	8025fc0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80210ec:	e00f      	b.n	802110e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 80210ee:	68fb      	ldr	r3, [r7, #12]
 80210f0:	2200      	movs	r2, #0
 80210f2:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80210f4:	4b0f      	ldr	r3, [pc, #60]	; (8021134 <mem_free+0xd0>)
 80210f6:	681b      	ldr	r3, [r3, #0]
 80210f8:	68fa      	ldr	r2, [r7, #12]
 80210fa:	429a      	cmp	r2, r3
 80210fc:	d202      	bcs.n	8021104 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80210fe:	4a0d      	ldr	r2, [pc, #52]	; (8021134 <mem_free+0xd0>)
 8021100:	68fb      	ldr	r3, [r7, #12]
 8021102:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8021104:	68f8      	ldr	r0, [r7, #12]
 8021106:	f7ff fe93 	bl	8020e30 <plug_holes>
 802110a:	e000      	b.n	802110e <mem_free+0xaa>
    return;
 802110c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 802110e:	3710      	adds	r7, #16
 8021110:	46bd      	mov	sp, r7
 8021112:	bd80      	pop	{r7, pc}
 8021114:	0802b720 	.word	0x0802b720
 8021118:	0802b7f4 	.word	0x0802b7f4
 802111c:	0802b768 	.word	0x0802b768
 8021120:	20012da8 	.word	0x20012da8
 8021124:	20012dac 	.word	0x20012dac
 8021128:	0802b818 	.word	0x0802b818
 802112c:	0802b834 	.word	0x0802b834
 8021130:	0802b85c 	.word	0x0802b85c
 8021134:	20012db0 	.word	0x20012db0

08021138 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8021138:	b580      	push	{r7, lr}
 802113a:	b088      	sub	sp, #32
 802113c:	af00      	add	r7, sp, #0
 802113e:	6078      	str	r0, [r7, #4]
 8021140:	460b      	mov	r3, r1
 8021142:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8021144:	887b      	ldrh	r3, [r7, #2]
 8021146:	3303      	adds	r3, #3
 8021148:	b29b      	uxth	r3, r3
 802114a:	f023 0303 	bic.w	r3, r3, #3
 802114e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8021150:	8bfb      	ldrh	r3, [r7, #30]
 8021152:	2b0b      	cmp	r3, #11
 8021154:	d801      	bhi.n	802115a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8021156:	230c      	movs	r3, #12
 8021158:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 802115a:	8bfb      	ldrh	r3, [r7, #30]
 802115c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021160:	d803      	bhi.n	802116a <mem_trim+0x32>
 8021162:	8bfa      	ldrh	r2, [r7, #30]
 8021164:	887b      	ldrh	r3, [r7, #2]
 8021166:	429a      	cmp	r2, r3
 8021168:	d201      	bcs.n	802116e <mem_trim+0x36>
    return NULL;
 802116a:	2300      	movs	r3, #0
 802116c:	e0cc      	b.n	8021308 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 802116e:	4b68      	ldr	r3, [pc, #416]	; (8021310 <mem_trim+0x1d8>)
 8021170:	681b      	ldr	r3, [r3, #0]
 8021172:	687a      	ldr	r2, [r7, #4]
 8021174:	429a      	cmp	r2, r3
 8021176:	d304      	bcc.n	8021182 <mem_trim+0x4a>
 8021178:	4b66      	ldr	r3, [pc, #408]	; (8021314 <mem_trim+0x1dc>)
 802117a:	681b      	ldr	r3, [r3, #0]
 802117c:	687a      	ldr	r2, [r7, #4]
 802117e:	429a      	cmp	r2, r3
 8021180:	d306      	bcc.n	8021190 <mem_trim+0x58>
 8021182:	4b65      	ldr	r3, [pc, #404]	; (8021318 <mem_trim+0x1e0>)
 8021184:	f240 22d1 	movw	r2, #721	; 0x2d1
 8021188:	4964      	ldr	r1, [pc, #400]	; (802131c <mem_trim+0x1e4>)
 802118a:	4865      	ldr	r0, [pc, #404]	; (8021320 <mem_trim+0x1e8>)
 802118c:	f004 ff18 	bl	8025fc0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8021190:	4b5f      	ldr	r3, [pc, #380]	; (8021310 <mem_trim+0x1d8>)
 8021192:	681b      	ldr	r3, [r3, #0]
 8021194:	687a      	ldr	r2, [r7, #4]
 8021196:	429a      	cmp	r2, r3
 8021198:	d304      	bcc.n	80211a4 <mem_trim+0x6c>
 802119a:	4b5e      	ldr	r3, [pc, #376]	; (8021314 <mem_trim+0x1dc>)
 802119c:	681b      	ldr	r3, [r3, #0]
 802119e:	687a      	ldr	r2, [r7, #4]
 80211a0:	429a      	cmp	r2, r3
 80211a2:	d301      	bcc.n	80211a8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80211a4:	687b      	ldr	r3, [r7, #4]
 80211a6:	e0af      	b.n	8021308 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80211a8:	687b      	ldr	r3, [r7, #4]
 80211aa:	3b08      	subs	r3, #8
 80211ac:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80211ae:	69b8      	ldr	r0, [r7, #24]
 80211b0:	f7ff fe2c 	bl	8020e0c <mem_to_ptr>
 80211b4:	4603      	mov	r3, r0
 80211b6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80211b8:	69bb      	ldr	r3, [r7, #24]
 80211ba:	881a      	ldrh	r2, [r3, #0]
 80211bc:	8afb      	ldrh	r3, [r7, #22]
 80211be:	1ad3      	subs	r3, r2, r3
 80211c0:	b29b      	uxth	r3, r3
 80211c2:	3b08      	subs	r3, #8
 80211c4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80211c6:	8bfa      	ldrh	r2, [r7, #30]
 80211c8:	8abb      	ldrh	r3, [r7, #20]
 80211ca:	429a      	cmp	r2, r3
 80211cc:	d906      	bls.n	80211dc <mem_trim+0xa4>
 80211ce:	4b52      	ldr	r3, [pc, #328]	; (8021318 <mem_trim+0x1e0>)
 80211d0:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80211d4:	4953      	ldr	r1, [pc, #332]	; (8021324 <mem_trim+0x1ec>)
 80211d6:	4852      	ldr	r0, [pc, #328]	; (8021320 <mem_trim+0x1e8>)
 80211d8:	f004 fef2 	bl	8025fc0 <iprintf>
  if (newsize > size) {
 80211dc:	8bfa      	ldrh	r2, [r7, #30]
 80211de:	8abb      	ldrh	r3, [r7, #20]
 80211e0:	429a      	cmp	r2, r3
 80211e2:	d901      	bls.n	80211e8 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 80211e4:	2300      	movs	r3, #0
 80211e6:	e08f      	b.n	8021308 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 80211e8:	8bfa      	ldrh	r2, [r7, #30]
 80211ea:	8abb      	ldrh	r3, [r7, #20]
 80211ec:	429a      	cmp	r2, r3
 80211ee:	d101      	bne.n	80211f4 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 80211f0:	687b      	ldr	r3, [r7, #4]
 80211f2:	e089      	b.n	8021308 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 80211f4:	69bb      	ldr	r3, [r7, #24]
 80211f6:	881b      	ldrh	r3, [r3, #0]
 80211f8:	4618      	mov	r0, r3
 80211fa:	f7ff fdf5 	bl	8020de8 <ptr_to_mem>
 80211fe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8021200:	693b      	ldr	r3, [r7, #16]
 8021202:	791b      	ldrb	r3, [r3, #4]
 8021204:	2b00      	cmp	r3, #0
 8021206:	d13f      	bne.n	8021288 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8021208:	69bb      	ldr	r3, [r7, #24]
 802120a:	881b      	ldrh	r3, [r3, #0]
 802120c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021210:	d106      	bne.n	8021220 <mem_trim+0xe8>
 8021212:	4b41      	ldr	r3, [pc, #260]	; (8021318 <mem_trim+0x1e0>)
 8021214:	f240 22f5 	movw	r2, #757	; 0x2f5
 8021218:	4943      	ldr	r1, [pc, #268]	; (8021328 <mem_trim+0x1f0>)
 802121a:	4841      	ldr	r0, [pc, #260]	; (8021320 <mem_trim+0x1e8>)
 802121c:	f004 fed0 	bl	8025fc0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8021220:	693b      	ldr	r3, [r7, #16]
 8021222:	881b      	ldrh	r3, [r3, #0]
 8021224:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021226:	8afa      	ldrh	r2, [r7, #22]
 8021228:	8bfb      	ldrh	r3, [r7, #30]
 802122a:	4413      	add	r3, r2
 802122c:	b29b      	uxth	r3, r3
 802122e:	3308      	adds	r3, #8
 8021230:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8021232:	4b3e      	ldr	r3, [pc, #248]	; (802132c <mem_trim+0x1f4>)
 8021234:	681b      	ldr	r3, [r3, #0]
 8021236:	693a      	ldr	r2, [r7, #16]
 8021238:	429a      	cmp	r2, r3
 802123a:	d106      	bne.n	802124a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 802123c:	89fb      	ldrh	r3, [r7, #14]
 802123e:	4618      	mov	r0, r3
 8021240:	f7ff fdd2 	bl	8020de8 <ptr_to_mem>
 8021244:	4603      	mov	r3, r0
 8021246:	4a39      	ldr	r2, [pc, #228]	; (802132c <mem_trim+0x1f4>)
 8021248:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 802124a:	89fb      	ldrh	r3, [r7, #14]
 802124c:	4618      	mov	r0, r3
 802124e:	f7ff fdcb 	bl	8020de8 <ptr_to_mem>
 8021252:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8021254:	693b      	ldr	r3, [r7, #16]
 8021256:	2200      	movs	r2, #0
 8021258:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 802125a:	693b      	ldr	r3, [r7, #16]
 802125c:	89ba      	ldrh	r2, [r7, #12]
 802125e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8021260:	693b      	ldr	r3, [r7, #16]
 8021262:	8afa      	ldrh	r2, [r7, #22]
 8021264:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8021266:	69bb      	ldr	r3, [r7, #24]
 8021268:	89fa      	ldrh	r2, [r7, #14]
 802126a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 802126c:	693b      	ldr	r3, [r7, #16]
 802126e:	881b      	ldrh	r3, [r3, #0]
 8021270:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021274:	d047      	beq.n	8021306 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8021276:	693b      	ldr	r3, [r7, #16]
 8021278:	881b      	ldrh	r3, [r3, #0]
 802127a:	4618      	mov	r0, r3
 802127c:	f7ff fdb4 	bl	8020de8 <ptr_to_mem>
 8021280:	4602      	mov	r2, r0
 8021282:	89fb      	ldrh	r3, [r7, #14]
 8021284:	8053      	strh	r3, [r2, #2]
 8021286:	e03e      	b.n	8021306 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8021288:	8bfb      	ldrh	r3, [r7, #30]
 802128a:	f103 0214 	add.w	r2, r3, #20
 802128e:	8abb      	ldrh	r3, [r7, #20]
 8021290:	429a      	cmp	r2, r3
 8021292:	d838      	bhi.n	8021306 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8021294:	8afa      	ldrh	r2, [r7, #22]
 8021296:	8bfb      	ldrh	r3, [r7, #30]
 8021298:	4413      	add	r3, r2
 802129a:	b29b      	uxth	r3, r3
 802129c:	3308      	adds	r3, #8
 802129e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80212a0:	69bb      	ldr	r3, [r7, #24]
 80212a2:	881b      	ldrh	r3, [r3, #0]
 80212a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80212a8:	d106      	bne.n	80212b8 <mem_trim+0x180>
 80212aa:	4b1b      	ldr	r3, [pc, #108]	; (8021318 <mem_trim+0x1e0>)
 80212ac:	f240 3216 	movw	r2, #790	; 0x316
 80212b0:	491d      	ldr	r1, [pc, #116]	; (8021328 <mem_trim+0x1f0>)
 80212b2:	481b      	ldr	r0, [pc, #108]	; (8021320 <mem_trim+0x1e8>)
 80212b4:	f004 fe84 	bl	8025fc0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80212b8:	89fb      	ldrh	r3, [r7, #14]
 80212ba:	4618      	mov	r0, r3
 80212bc:	f7ff fd94 	bl	8020de8 <ptr_to_mem>
 80212c0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80212c2:	4b1a      	ldr	r3, [pc, #104]	; (802132c <mem_trim+0x1f4>)
 80212c4:	681b      	ldr	r3, [r3, #0]
 80212c6:	693a      	ldr	r2, [r7, #16]
 80212c8:	429a      	cmp	r2, r3
 80212ca:	d202      	bcs.n	80212d2 <mem_trim+0x19a>
      lfree = mem2;
 80212cc:	4a17      	ldr	r2, [pc, #92]	; (802132c <mem_trim+0x1f4>)
 80212ce:	693b      	ldr	r3, [r7, #16]
 80212d0:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80212d2:	693b      	ldr	r3, [r7, #16]
 80212d4:	2200      	movs	r2, #0
 80212d6:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80212d8:	69bb      	ldr	r3, [r7, #24]
 80212da:	881a      	ldrh	r2, [r3, #0]
 80212dc:	693b      	ldr	r3, [r7, #16]
 80212de:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80212e0:	693b      	ldr	r3, [r7, #16]
 80212e2:	8afa      	ldrh	r2, [r7, #22]
 80212e4:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80212e6:	69bb      	ldr	r3, [r7, #24]
 80212e8:	89fa      	ldrh	r2, [r7, #14]
 80212ea:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80212ec:	693b      	ldr	r3, [r7, #16]
 80212ee:	881b      	ldrh	r3, [r3, #0]
 80212f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80212f4:	d007      	beq.n	8021306 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80212f6:	693b      	ldr	r3, [r7, #16]
 80212f8:	881b      	ldrh	r3, [r3, #0]
 80212fa:	4618      	mov	r0, r3
 80212fc:	f7ff fd74 	bl	8020de8 <ptr_to_mem>
 8021300:	4602      	mov	r2, r0
 8021302:	89fb      	ldrh	r3, [r7, #14]
 8021304:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8021306:	687b      	ldr	r3, [r7, #4]
}
 8021308:	4618      	mov	r0, r3
 802130a:	3720      	adds	r7, #32
 802130c:	46bd      	mov	sp, r7
 802130e:	bd80      	pop	{r7, pc}
 8021310:	20012da8 	.word	0x20012da8
 8021314:	20012dac 	.word	0x20012dac
 8021318:	0802b720 	.word	0x0802b720
 802131c:	0802b890 	.word	0x0802b890
 8021320:	0802b768 	.word	0x0802b768
 8021324:	0802b8a8 	.word	0x0802b8a8
 8021328:	0802b8c8 	.word	0x0802b8c8
 802132c:	20012db0 	.word	0x20012db0

08021330 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8021330:	b580      	push	{r7, lr}
 8021332:	b088      	sub	sp, #32
 8021334:	af00      	add	r7, sp, #0
 8021336:	4603      	mov	r3, r0
 8021338:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 802133a:	88fb      	ldrh	r3, [r7, #6]
 802133c:	2b00      	cmp	r3, #0
 802133e:	d101      	bne.n	8021344 <mem_malloc+0x14>
    return NULL;
 8021340:	2300      	movs	r3, #0
 8021342:	e0d9      	b.n	80214f8 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8021344:	88fb      	ldrh	r3, [r7, #6]
 8021346:	3303      	adds	r3, #3
 8021348:	b29b      	uxth	r3, r3
 802134a:	f023 0303 	bic.w	r3, r3, #3
 802134e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8021350:	8bbb      	ldrh	r3, [r7, #28]
 8021352:	2b0b      	cmp	r3, #11
 8021354:	d801      	bhi.n	802135a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8021356:	230c      	movs	r3, #12
 8021358:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 802135a:	8bbb      	ldrh	r3, [r7, #28]
 802135c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021360:	d803      	bhi.n	802136a <mem_malloc+0x3a>
 8021362:	8bba      	ldrh	r2, [r7, #28]
 8021364:	88fb      	ldrh	r3, [r7, #6]
 8021366:	429a      	cmp	r2, r3
 8021368:	d201      	bcs.n	802136e <mem_malloc+0x3e>
    return NULL;
 802136a:	2300      	movs	r3, #0
 802136c:	e0c4      	b.n	80214f8 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 802136e:	4b64      	ldr	r3, [pc, #400]	; (8021500 <mem_malloc+0x1d0>)
 8021370:	681b      	ldr	r3, [r3, #0]
 8021372:	4618      	mov	r0, r3
 8021374:	f7ff fd4a 	bl	8020e0c <mem_to_ptr>
 8021378:	4603      	mov	r3, r0
 802137a:	83fb      	strh	r3, [r7, #30]
 802137c:	e0b4      	b.n	80214e8 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 802137e:	8bfb      	ldrh	r3, [r7, #30]
 8021380:	4618      	mov	r0, r3
 8021382:	f7ff fd31 	bl	8020de8 <ptr_to_mem>
 8021386:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8021388:	697b      	ldr	r3, [r7, #20]
 802138a:	791b      	ldrb	r3, [r3, #4]
 802138c:	2b00      	cmp	r3, #0
 802138e:	f040 80a4 	bne.w	80214da <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8021392:	697b      	ldr	r3, [r7, #20]
 8021394:	881b      	ldrh	r3, [r3, #0]
 8021396:	461a      	mov	r2, r3
 8021398:	8bfb      	ldrh	r3, [r7, #30]
 802139a:	1ad3      	subs	r3, r2, r3
 802139c:	f1a3 0208 	sub.w	r2, r3, #8
 80213a0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80213a2:	429a      	cmp	r2, r3
 80213a4:	f0c0 8099 	bcc.w	80214da <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80213a8:	697b      	ldr	r3, [r7, #20]
 80213aa:	881b      	ldrh	r3, [r3, #0]
 80213ac:	461a      	mov	r2, r3
 80213ae:	8bfb      	ldrh	r3, [r7, #30]
 80213b0:	1ad3      	subs	r3, r2, r3
 80213b2:	f1a3 0208 	sub.w	r2, r3, #8
 80213b6:	8bbb      	ldrh	r3, [r7, #28]
 80213b8:	3314      	adds	r3, #20
 80213ba:	429a      	cmp	r2, r3
 80213bc:	d333      	bcc.n	8021426 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80213be:	8bfa      	ldrh	r2, [r7, #30]
 80213c0:	8bbb      	ldrh	r3, [r7, #28]
 80213c2:	4413      	add	r3, r2
 80213c4:	b29b      	uxth	r3, r3
 80213c6:	3308      	adds	r3, #8
 80213c8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80213ca:	8a7b      	ldrh	r3, [r7, #18]
 80213cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80213d0:	d106      	bne.n	80213e0 <mem_malloc+0xb0>
 80213d2:	4b4c      	ldr	r3, [pc, #304]	; (8021504 <mem_malloc+0x1d4>)
 80213d4:	f240 3287 	movw	r2, #903	; 0x387
 80213d8:	494b      	ldr	r1, [pc, #300]	; (8021508 <mem_malloc+0x1d8>)
 80213da:	484c      	ldr	r0, [pc, #304]	; (802150c <mem_malloc+0x1dc>)
 80213dc:	f004 fdf0 	bl	8025fc0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80213e0:	8a7b      	ldrh	r3, [r7, #18]
 80213e2:	4618      	mov	r0, r3
 80213e4:	f7ff fd00 	bl	8020de8 <ptr_to_mem>
 80213e8:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80213ea:	68fb      	ldr	r3, [r7, #12]
 80213ec:	2200      	movs	r2, #0
 80213ee:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80213f0:	697b      	ldr	r3, [r7, #20]
 80213f2:	881a      	ldrh	r2, [r3, #0]
 80213f4:	68fb      	ldr	r3, [r7, #12]
 80213f6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80213f8:	68fb      	ldr	r3, [r7, #12]
 80213fa:	8bfa      	ldrh	r2, [r7, #30]
 80213fc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80213fe:	697b      	ldr	r3, [r7, #20]
 8021400:	8a7a      	ldrh	r2, [r7, #18]
 8021402:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8021404:	697b      	ldr	r3, [r7, #20]
 8021406:	2201      	movs	r2, #1
 8021408:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 802140a:	68fb      	ldr	r3, [r7, #12]
 802140c:	881b      	ldrh	r3, [r3, #0]
 802140e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8021412:	d00b      	beq.n	802142c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8021414:	68fb      	ldr	r3, [r7, #12]
 8021416:	881b      	ldrh	r3, [r3, #0]
 8021418:	4618      	mov	r0, r3
 802141a:	f7ff fce5 	bl	8020de8 <ptr_to_mem>
 802141e:	4602      	mov	r2, r0
 8021420:	8a7b      	ldrh	r3, [r7, #18]
 8021422:	8053      	strh	r3, [r2, #2]
 8021424:	e002      	b.n	802142c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8021426:	697b      	ldr	r3, [r7, #20]
 8021428:	2201      	movs	r2, #1
 802142a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 802142c:	4b34      	ldr	r3, [pc, #208]	; (8021500 <mem_malloc+0x1d0>)
 802142e:	681b      	ldr	r3, [r3, #0]
 8021430:	697a      	ldr	r2, [r7, #20]
 8021432:	429a      	cmp	r2, r3
 8021434:	d127      	bne.n	8021486 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8021436:	4b32      	ldr	r3, [pc, #200]	; (8021500 <mem_malloc+0x1d0>)
 8021438:	681b      	ldr	r3, [r3, #0]
 802143a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 802143c:	e005      	b.n	802144a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 802143e:	69bb      	ldr	r3, [r7, #24]
 8021440:	881b      	ldrh	r3, [r3, #0]
 8021442:	4618      	mov	r0, r3
 8021444:	f7ff fcd0 	bl	8020de8 <ptr_to_mem>
 8021448:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 802144a:	69bb      	ldr	r3, [r7, #24]
 802144c:	791b      	ldrb	r3, [r3, #4]
 802144e:	2b00      	cmp	r3, #0
 8021450:	d004      	beq.n	802145c <mem_malloc+0x12c>
 8021452:	4b2f      	ldr	r3, [pc, #188]	; (8021510 <mem_malloc+0x1e0>)
 8021454:	681b      	ldr	r3, [r3, #0]
 8021456:	69ba      	ldr	r2, [r7, #24]
 8021458:	429a      	cmp	r2, r3
 802145a:	d1f0      	bne.n	802143e <mem_malloc+0x10e>
          }
          lfree = cur;
 802145c:	4a28      	ldr	r2, [pc, #160]	; (8021500 <mem_malloc+0x1d0>)
 802145e:	69bb      	ldr	r3, [r7, #24]
 8021460:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8021462:	4b27      	ldr	r3, [pc, #156]	; (8021500 <mem_malloc+0x1d0>)
 8021464:	681a      	ldr	r2, [r3, #0]
 8021466:	4b2a      	ldr	r3, [pc, #168]	; (8021510 <mem_malloc+0x1e0>)
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	429a      	cmp	r2, r3
 802146c:	d00b      	beq.n	8021486 <mem_malloc+0x156>
 802146e:	4b24      	ldr	r3, [pc, #144]	; (8021500 <mem_malloc+0x1d0>)
 8021470:	681b      	ldr	r3, [r3, #0]
 8021472:	791b      	ldrb	r3, [r3, #4]
 8021474:	2b00      	cmp	r3, #0
 8021476:	d006      	beq.n	8021486 <mem_malloc+0x156>
 8021478:	4b22      	ldr	r3, [pc, #136]	; (8021504 <mem_malloc+0x1d4>)
 802147a:	f240 32b5 	movw	r2, #949	; 0x3b5
 802147e:	4925      	ldr	r1, [pc, #148]	; (8021514 <mem_malloc+0x1e4>)
 8021480:	4822      	ldr	r0, [pc, #136]	; (802150c <mem_malloc+0x1dc>)
 8021482:	f004 fd9d 	bl	8025fc0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8021486:	8bba      	ldrh	r2, [r7, #28]
 8021488:	697b      	ldr	r3, [r7, #20]
 802148a:	4413      	add	r3, r2
 802148c:	3308      	adds	r3, #8
 802148e:	4a20      	ldr	r2, [pc, #128]	; (8021510 <mem_malloc+0x1e0>)
 8021490:	6812      	ldr	r2, [r2, #0]
 8021492:	4293      	cmp	r3, r2
 8021494:	d906      	bls.n	80214a4 <mem_malloc+0x174>
 8021496:	4b1b      	ldr	r3, [pc, #108]	; (8021504 <mem_malloc+0x1d4>)
 8021498:	f240 32b9 	movw	r2, #953	; 0x3b9
 802149c:	491e      	ldr	r1, [pc, #120]	; (8021518 <mem_malloc+0x1e8>)
 802149e:	481b      	ldr	r0, [pc, #108]	; (802150c <mem_malloc+0x1dc>)
 80214a0:	f004 fd8e 	bl	8025fc0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80214a4:	697b      	ldr	r3, [r7, #20]
 80214a6:	f003 0303 	and.w	r3, r3, #3
 80214aa:	2b00      	cmp	r3, #0
 80214ac:	d006      	beq.n	80214bc <mem_malloc+0x18c>
 80214ae:	4b15      	ldr	r3, [pc, #84]	; (8021504 <mem_malloc+0x1d4>)
 80214b0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80214b4:	4919      	ldr	r1, [pc, #100]	; (802151c <mem_malloc+0x1ec>)
 80214b6:	4815      	ldr	r0, [pc, #84]	; (802150c <mem_malloc+0x1dc>)
 80214b8:	f004 fd82 	bl	8025fc0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80214bc:	697b      	ldr	r3, [r7, #20]
 80214be:	f003 0303 	and.w	r3, r3, #3
 80214c2:	2b00      	cmp	r3, #0
 80214c4:	d006      	beq.n	80214d4 <mem_malloc+0x1a4>
 80214c6:	4b0f      	ldr	r3, [pc, #60]	; (8021504 <mem_malloc+0x1d4>)
 80214c8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80214cc:	4914      	ldr	r1, [pc, #80]	; (8021520 <mem_malloc+0x1f0>)
 80214ce:	480f      	ldr	r0, [pc, #60]	; (802150c <mem_malloc+0x1dc>)
 80214d0:	f004 fd76 	bl	8025fc0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80214d4:	697b      	ldr	r3, [r7, #20]
 80214d6:	3308      	adds	r3, #8
 80214d8:	e00e      	b.n	80214f8 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 80214da:	8bfb      	ldrh	r3, [r7, #30]
 80214dc:	4618      	mov	r0, r3
 80214de:	f7ff fc83 	bl	8020de8 <ptr_to_mem>
 80214e2:	4603      	mov	r3, r0
 80214e4:	881b      	ldrh	r3, [r3, #0]
 80214e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80214e8:	8bfa      	ldrh	r2, [r7, #30]
 80214ea:	8bbb      	ldrh	r3, [r7, #28]
 80214ec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80214f0:	429a      	cmp	r2, r3
 80214f2:	f4ff af44 	bcc.w	802137e <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80214f6:	2300      	movs	r3, #0
}
 80214f8:	4618      	mov	r0, r3
 80214fa:	3720      	adds	r7, #32
 80214fc:	46bd      	mov	sp, r7
 80214fe:	bd80      	pop	{r7, pc}
 8021500:	20012db0 	.word	0x20012db0
 8021504:	0802b720 	.word	0x0802b720
 8021508:	0802b8c8 	.word	0x0802b8c8
 802150c:	0802b768 	.word	0x0802b768
 8021510:	20012dac 	.word	0x20012dac
 8021514:	0802b8dc 	.word	0x0802b8dc
 8021518:	0802b8f8 	.word	0x0802b8f8
 802151c:	0802b928 	.word	0x0802b928
 8021520:	0802b958 	.word	0x0802b958

08021524 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8021524:	b480      	push	{r7}
 8021526:	b085      	sub	sp, #20
 8021528:	af00      	add	r7, sp, #0
 802152a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 802152c:	687b      	ldr	r3, [r7, #4]
 802152e:	689b      	ldr	r3, [r3, #8]
 8021530:	2200      	movs	r2, #0
 8021532:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8021534:	687b      	ldr	r3, [r7, #4]
 8021536:	685b      	ldr	r3, [r3, #4]
 8021538:	3303      	adds	r3, #3
 802153a:	f023 0303 	bic.w	r3, r3, #3
 802153e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8021540:	2300      	movs	r3, #0
 8021542:	60fb      	str	r3, [r7, #12]
 8021544:	e011      	b.n	802156a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8021546:	687b      	ldr	r3, [r7, #4]
 8021548:	689b      	ldr	r3, [r3, #8]
 802154a:	681a      	ldr	r2, [r3, #0]
 802154c:	68bb      	ldr	r3, [r7, #8]
 802154e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8021550:	687b      	ldr	r3, [r7, #4]
 8021552:	689b      	ldr	r3, [r3, #8]
 8021554:	68ba      	ldr	r2, [r7, #8]
 8021556:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	881b      	ldrh	r3, [r3, #0]
 802155c:	461a      	mov	r2, r3
 802155e:	68bb      	ldr	r3, [r7, #8]
 8021560:	4413      	add	r3, r2
 8021562:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8021564:	68fb      	ldr	r3, [r7, #12]
 8021566:	3301      	adds	r3, #1
 8021568:	60fb      	str	r3, [r7, #12]
 802156a:	687b      	ldr	r3, [r7, #4]
 802156c:	885b      	ldrh	r3, [r3, #2]
 802156e:	461a      	mov	r2, r3
 8021570:	68fb      	ldr	r3, [r7, #12]
 8021572:	4293      	cmp	r3, r2
 8021574:	dbe7      	blt.n	8021546 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8021576:	bf00      	nop
 8021578:	bf00      	nop
 802157a:	3714      	adds	r7, #20
 802157c:	46bd      	mov	sp, r7
 802157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021582:	4770      	bx	lr

08021584 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8021584:	b580      	push	{r7, lr}
 8021586:	b082      	sub	sp, #8
 8021588:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802158a:	2300      	movs	r3, #0
 802158c:	80fb      	strh	r3, [r7, #6]
 802158e:	e009      	b.n	80215a4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8021590:	88fb      	ldrh	r3, [r7, #6]
 8021592:	4a08      	ldr	r2, [pc, #32]	; (80215b4 <memp_init+0x30>)
 8021594:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021598:	4618      	mov	r0, r3
 802159a:	f7ff ffc3 	bl	8021524 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 802159e:	88fb      	ldrh	r3, [r7, #6]
 80215a0:	3301      	adds	r3, #1
 80215a2:	80fb      	strh	r3, [r7, #6]
 80215a4:	88fb      	ldrh	r3, [r7, #6]
 80215a6:	2b05      	cmp	r3, #5
 80215a8:	d9f2      	bls.n	8021590 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80215aa:	bf00      	nop
 80215ac:	bf00      	nop
 80215ae:	3708      	adds	r7, #8
 80215b0:	46bd      	mov	sp, r7
 80215b2:	bd80      	pop	{r7, pc}
 80215b4:	0802d1c8 	.word	0x0802d1c8

080215b8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80215b8:	b580      	push	{r7, lr}
 80215ba:	b084      	sub	sp, #16
 80215bc:	af00      	add	r7, sp, #0
 80215be:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80215c0:	687b      	ldr	r3, [r7, #4]
 80215c2:	689b      	ldr	r3, [r3, #8]
 80215c4:	681b      	ldr	r3, [r3, #0]
 80215c6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80215c8:	68fb      	ldr	r3, [r7, #12]
 80215ca:	2b00      	cmp	r3, #0
 80215cc:	d012      	beq.n	80215f4 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	689b      	ldr	r3, [r3, #8]
 80215d2:	68fa      	ldr	r2, [r7, #12]
 80215d4:	6812      	ldr	r2, [r2, #0]
 80215d6:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80215d8:	68fb      	ldr	r3, [r7, #12]
 80215da:	f003 0303 	and.w	r3, r3, #3
 80215de:	2b00      	cmp	r3, #0
 80215e0:	d006      	beq.n	80215f0 <do_memp_malloc_pool+0x38>
 80215e2:	4b07      	ldr	r3, [pc, #28]	; (8021600 <do_memp_malloc_pool+0x48>)
 80215e4:	f44f 728c 	mov.w	r2, #280	; 0x118
 80215e8:	4906      	ldr	r1, [pc, #24]	; (8021604 <do_memp_malloc_pool+0x4c>)
 80215ea:	4807      	ldr	r0, [pc, #28]	; (8021608 <do_memp_malloc_pool+0x50>)
 80215ec:	f004 fce8 	bl	8025fc0 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80215f0:	68fb      	ldr	r3, [r7, #12]
 80215f2:	e000      	b.n	80215f6 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80215f4:	2300      	movs	r3, #0
}
 80215f6:	4618      	mov	r0, r3
 80215f8:	3710      	adds	r7, #16
 80215fa:	46bd      	mov	sp, r7
 80215fc:	bd80      	pop	{r7, pc}
 80215fe:	bf00      	nop
 8021600:	0802b97c 	.word	0x0802b97c
 8021604:	0802b9ac 	.word	0x0802b9ac
 8021608:	0802b9d0 	.word	0x0802b9d0

0802160c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 802160c:	b580      	push	{r7, lr}
 802160e:	b082      	sub	sp, #8
 8021610:	af00      	add	r7, sp, #0
 8021612:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8021614:	687b      	ldr	r3, [r7, #4]
 8021616:	2b00      	cmp	r3, #0
 8021618:	d106      	bne.n	8021628 <memp_malloc_pool+0x1c>
 802161a:	4b0a      	ldr	r3, [pc, #40]	; (8021644 <memp_malloc_pool+0x38>)
 802161c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8021620:	4909      	ldr	r1, [pc, #36]	; (8021648 <memp_malloc_pool+0x3c>)
 8021622:	480a      	ldr	r0, [pc, #40]	; (802164c <memp_malloc_pool+0x40>)
 8021624:	f004 fccc 	bl	8025fc0 <iprintf>
  if (desc == NULL) {
 8021628:	687b      	ldr	r3, [r7, #4]
 802162a:	2b00      	cmp	r3, #0
 802162c:	d101      	bne.n	8021632 <memp_malloc_pool+0x26>
    return NULL;
 802162e:	2300      	movs	r3, #0
 8021630:	e003      	b.n	802163a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8021632:	6878      	ldr	r0, [r7, #4]
 8021634:	f7ff ffc0 	bl	80215b8 <do_memp_malloc_pool>
 8021638:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 802163a:	4618      	mov	r0, r3
 802163c:	3708      	adds	r7, #8
 802163e:	46bd      	mov	sp, r7
 8021640:	bd80      	pop	{r7, pc}
 8021642:	bf00      	nop
 8021644:	0802b97c 	.word	0x0802b97c
 8021648:	0802b9f8 	.word	0x0802b9f8
 802164c:	0802b9d0 	.word	0x0802b9d0

08021650 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8021650:	b580      	push	{r7, lr}
 8021652:	b084      	sub	sp, #16
 8021654:	af00      	add	r7, sp, #0
 8021656:	4603      	mov	r3, r0
 8021658:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 802165a:	79fb      	ldrb	r3, [r7, #7]
 802165c:	2b05      	cmp	r3, #5
 802165e:	d908      	bls.n	8021672 <memp_malloc+0x22>
 8021660:	4b0a      	ldr	r3, [pc, #40]	; (802168c <memp_malloc+0x3c>)
 8021662:	f240 1257 	movw	r2, #343	; 0x157
 8021666:	490a      	ldr	r1, [pc, #40]	; (8021690 <memp_malloc+0x40>)
 8021668:	480a      	ldr	r0, [pc, #40]	; (8021694 <memp_malloc+0x44>)
 802166a:	f004 fca9 	bl	8025fc0 <iprintf>
 802166e:	2300      	movs	r3, #0
 8021670:	e008      	b.n	8021684 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8021672:	79fb      	ldrb	r3, [r7, #7]
 8021674:	4a08      	ldr	r2, [pc, #32]	; (8021698 <memp_malloc+0x48>)
 8021676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802167a:	4618      	mov	r0, r3
 802167c:	f7ff ff9c 	bl	80215b8 <do_memp_malloc_pool>
 8021680:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8021682:	68fb      	ldr	r3, [r7, #12]
}
 8021684:	4618      	mov	r0, r3
 8021686:	3710      	adds	r7, #16
 8021688:	46bd      	mov	sp, r7
 802168a:	bd80      	pop	{r7, pc}
 802168c:	0802b97c 	.word	0x0802b97c
 8021690:	0802ba0c 	.word	0x0802ba0c
 8021694:	0802b9d0 	.word	0x0802b9d0
 8021698:	0802d1c8 	.word	0x0802d1c8

0802169c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 802169c:	b580      	push	{r7, lr}
 802169e:	b084      	sub	sp, #16
 80216a0:	af00      	add	r7, sp, #0
 80216a2:	6078      	str	r0, [r7, #4]
 80216a4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80216a6:	683b      	ldr	r3, [r7, #0]
 80216a8:	f003 0303 	and.w	r3, r3, #3
 80216ac:	2b00      	cmp	r3, #0
 80216ae:	d006      	beq.n	80216be <do_memp_free_pool+0x22>
 80216b0:	4b0a      	ldr	r3, [pc, #40]	; (80216dc <do_memp_free_pool+0x40>)
 80216b2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80216b6:	490a      	ldr	r1, [pc, #40]	; (80216e0 <do_memp_free_pool+0x44>)
 80216b8:	480a      	ldr	r0, [pc, #40]	; (80216e4 <do_memp_free_pool+0x48>)
 80216ba:	f004 fc81 	bl	8025fc0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80216be:	683b      	ldr	r3, [r7, #0]
 80216c0:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80216c2:	687b      	ldr	r3, [r7, #4]
 80216c4:	689b      	ldr	r3, [r3, #8]
 80216c6:	681a      	ldr	r2, [r3, #0]
 80216c8:	68fb      	ldr	r3, [r7, #12]
 80216ca:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80216cc:	687b      	ldr	r3, [r7, #4]
 80216ce:	689b      	ldr	r3, [r3, #8]
 80216d0:	68fa      	ldr	r2, [r7, #12]
 80216d2:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80216d4:	bf00      	nop
 80216d6:	3710      	adds	r7, #16
 80216d8:	46bd      	mov	sp, r7
 80216da:	bd80      	pop	{r7, pc}
 80216dc:	0802b97c 	.word	0x0802b97c
 80216e0:	0802ba2c 	.word	0x0802ba2c
 80216e4:	0802b9d0 	.word	0x0802b9d0

080216e8 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b082      	sub	sp, #8
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
 80216f0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	2b00      	cmp	r3, #0
 80216f6:	d106      	bne.n	8021706 <memp_free_pool+0x1e>
 80216f8:	4b0a      	ldr	r3, [pc, #40]	; (8021724 <memp_free_pool+0x3c>)
 80216fa:	f240 1295 	movw	r2, #405	; 0x195
 80216fe:	490a      	ldr	r1, [pc, #40]	; (8021728 <memp_free_pool+0x40>)
 8021700:	480a      	ldr	r0, [pc, #40]	; (802172c <memp_free_pool+0x44>)
 8021702:	f004 fc5d 	bl	8025fc0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8021706:	687b      	ldr	r3, [r7, #4]
 8021708:	2b00      	cmp	r3, #0
 802170a:	d007      	beq.n	802171c <memp_free_pool+0x34>
 802170c:	683b      	ldr	r3, [r7, #0]
 802170e:	2b00      	cmp	r3, #0
 8021710:	d004      	beq.n	802171c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8021712:	6839      	ldr	r1, [r7, #0]
 8021714:	6878      	ldr	r0, [r7, #4]
 8021716:	f7ff ffc1 	bl	802169c <do_memp_free_pool>
 802171a:	e000      	b.n	802171e <memp_free_pool+0x36>
    return;
 802171c:	bf00      	nop
}
 802171e:	3708      	adds	r7, #8
 8021720:	46bd      	mov	sp, r7
 8021722:	bd80      	pop	{r7, pc}
 8021724:	0802b97c 	.word	0x0802b97c
 8021728:	0802b9f8 	.word	0x0802b9f8
 802172c:	0802b9d0 	.word	0x0802b9d0

08021730 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8021730:	b580      	push	{r7, lr}
 8021732:	b082      	sub	sp, #8
 8021734:	af00      	add	r7, sp, #0
 8021736:	4603      	mov	r3, r0
 8021738:	6039      	str	r1, [r7, #0]
 802173a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 802173c:	79fb      	ldrb	r3, [r7, #7]
 802173e:	2b05      	cmp	r3, #5
 8021740:	d907      	bls.n	8021752 <memp_free+0x22>
 8021742:	4b0c      	ldr	r3, [pc, #48]	; (8021774 <memp_free+0x44>)
 8021744:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8021748:	490b      	ldr	r1, [pc, #44]	; (8021778 <memp_free+0x48>)
 802174a:	480c      	ldr	r0, [pc, #48]	; (802177c <memp_free+0x4c>)
 802174c:	f004 fc38 	bl	8025fc0 <iprintf>
 8021750:	e00c      	b.n	802176c <memp_free+0x3c>

  if (mem == NULL) {
 8021752:	683b      	ldr	r3, [r7, #0]
 8021754:	2b00      	cmp	r3, #0
 8021756:	d008      	beq.n	802176a <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8021758:	79fb      	ldrb	r3, [r7, #7]
 802175a:	4a09      	ldr	r2, [pc, #36]	; (8021780 <memp_free+0x50>)
 802175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8021760:	6839      	ldr	r1, [r7, #0]
 8021762:	4618      	mov	r0, r3
 8021764:	f7ff ff9a 	bl	802169c <do_memp_free_pool>
 8021768:	e000      	b.n	802176c <memp_free+0x3c>
    return;
 802176a:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 802176c:	3708      	adds	r7, #8
 802176e:	46bd      	mov	sp, r7
 8021770:	bd80      	pop	{r7, pc}
 8021772:	bf00      	nop
 8021774:	0802b97c 	.word	0x0802b97c
 8021778:	0802ba4c 	.word	0x0802ba4c
 802177c:	0802b9d0 	.word	0x0802b9d0
 8021780:	0802d1c8 	.word	0x0802d1c8

08021784 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 8021784:	b580      	push	{r7, lr}
 8021786:	b082      	sub	sp, #8
 8021788:	af00      	add	r7, sp, #0
 802178a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 802178c:	687b      	ldr	r3, [r7, #4]
 802178e:	2b00      	cmp	r3, #0
 8021790:	d105      	bne.n	802179e <netif_loopif_init+0x1a>
 8021792:	4b0b      	ldr	r3, [pc, #44]	; (80217c0 <netif_loopif_init+0x3c>)
 8021794:	2299      	movs	r2, #153	; 0x99
 8021796:	490b      	ldr	r1, [pc, #44]	; (80217c4 <netif_loopif_init+0x40>)
 8021798:	480b      	ldr	r0, [pc, #44]	; (80217c8 <netif_loopif_init+0x44>)
 802179a:	f004 fc11 	bl	8025fc0 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 802179e:	687b      	ldr	r3, [r7, #4]
 80217a0:	226c      	movs	r2, #108	; 0x6c
 80217a2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 80217a6:	687b      	ldr	r3, [r7, #4]
 80217a8:	226f      	movs	r2, #111	; 0x6f
 80217aa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 80217ae:	687b      	ldr	r3, [r7, #4]
 80217b0:	4a06      	ldr	r2, [pc, #24]	; (80217cc <netif_loopif_init+0x48>)
 80217b2:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 80217b4:	2300      	movs	r3, #0
}
 80217b6:	4618      	mov	r0, r3
 80217b8:	3708      	adds	r7, #8
 80217ba:	46bd      	mov	sp, r7
 80217bc:	bd80      	pop	{r7, pc}
 80217be:	bf00      	nop
 80217c0:	0802ba68 	.word	0x0802ba68
 80217c4:	0802ba9c 	.word	0x0802ba9c
 80217c8:	0802bac0 	.word	0x0802bac0
 80217cc:	08021eb1 	.word	0x08021eb1

080217d0 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80217d0:	b580      	push	{r7, lr}
 80217d2:	b088      	sub	sp, #32
 80217d4:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 80217d6:	4b0f      	ldr	r3, [pc, #60]	; (8021814 <netif_init+0x44>)
 80217d8:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 80217da:	4b0e      	ldr	r3, [pc, #56]	; (8021814 <netif_init+0x44>)
 80217dc:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 80217de:	23ff      	movs	r3, #255	; 0xff
 80217e0:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 80217e2:	1d3b      	adds	r3, r7, #4
 80217e4:	f107 0208 	add.w	r2, r7, #8
 80217e8:	f107 010c 	add.w	r1, r7, #12
 80217ec:	480a      	ldr	r0, [pc, #40]	; (8021818 <netif_init+0x48>)
 80217ee:	9002      	str	r0, [sp, #8]
 80217f0:	480a      	ldr	r0, [pc, #40]	; (802181c <netif_init+0x4c>)
 80217f2:	9001      	str	r0, [sp, #4]
 80217f4:	2000      	movs	r0, #0
 80217f6:	9000      	str	r0, [sp, #0]
 80217f8:	4809      	ldr	r0, [pc, #36]	; (8021820 <netif_init+0x50>)
 80217fa:	f000 f813 	bl	8021824 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 80217fe:	4808      	ldr	r0, [pc, #32]	; (8021820 <netif_init+0x50>)
 8021800:	f000 fa72 	bl	8021ce8 <netif_set_link_up>
  netif_set_up(&loop_netif);
 8021804:	4806      	ldr	r0, [pc, #24]	; (8021820 <netif_init+0x50>)
 8021806:	f000 f9d1 	bl	8021bac <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 802180a:	bf00      	nop
 802180c:	3710      	adds	r7, #16
 802180e:	46bd      	mov	sp, r7
 8021810:	bd80      	pop	{r7, pc}
 8021812:	bf00      	nop
 8021814:	0100007f 	.word	0x0100007f
 8021818:	0802494d 	.word	0x0802494d
 802181c:	08021785 	.word	0x08021785
 8021820:	20015d58 	.word	0x20015d58

08021824 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8021824:	b580      	push	{r7, lr}
 8021826:	b086      	sub	sp, #24
 8021828:	af00      	add	r7, sp, #0
 802182a:	60f8      	str	r0, [r7, #12]
 802182c:	60b9      	str	r1, [r7, #8]
 802182e:	607a      	str	r2, [r7, #4]
 8021830:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8021832:	68fb      	ldr	r3, [r7, #12]
 8021834:	2b00      	cmp	r3, #0
 8021836:	d108      	bne.n	802184a <netif_add+0x26>
 8021838:	4b5a      	ldr	r3, [pc, #360]	; (80219a4 <netif_add+0x180>)
 802183a:	f240 1227 	movw	r2, #295	; 0x127
 802183e:	495a      	ldr	r1, [pc, #360]	; (80219a8 <netif_add+0x184>)
 8021840:	485a      	ldr	r0, [pc, #360]	; (80219ac <netif_add+0x188>)
 8021842:	f004 fbbd 	bl	8025fc0 <iprintf>
 8021846:	2300      	movs	r3, #0
 8021848:	e0a8      	b.n	802199c <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 802184a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802184c:	2b00      	cmp	r3, #0
 802184e:	d108      	bne.n	8021862 <netif_add+0x3e>
 8021850:	4b54      	ldr	r3, [pc, #336]	; (80219a4 <netif_add+0x180>)
 8021852:	f44f 7294 	mov.w	r2, #296	; 0x128
 8021856:	4956      	ldr	r1, [pc, #344]	; (80219b0 <netif_add+0x18c>)
 8021858:	4854      	ldr	r0, [pc, #336]	; (80219ac <netif_add+0x188>)
 802185a:	f004 fbb1 	bl	8025fc0 <iprintf>
 802185e:	2300      	movs	r3, #0
 8021860:	e09c      	b.n	802199c <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8021862:	68bb      	ldr	r3, [r7, #8]
 8021864:	2b00      	cmp	r3, #0
 8021866:	d101      	bne.n	802186c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8021868:	4b52      	ldr	r3, [pc, #328]	; (80219b4 <netif_add+0x190>)
 802186a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 802186c:	687b      	ldr	r3, [r7, #4]
 802186e:	2b00      	cmp	r3, #0
 8021870:	d101      	bne.n	8021876 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8021872:	4b50      	ldr	r3, [pc, #320]	; (80219b4 <netif_add+0x190>)
 8021874:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8021876:	683b      	ldr	r3, [r7, #0]
 8021878:	2b00      	cmp	r3, #0
 802187a:	d101      	bne.n	8021880 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 802187c:	4b4d      	ldr	r3, [pc, #308]	; (80219b4 <netif_add+0x190>)
 802187e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8021880:	68fb      	ldr	r3, [r7, #12]
 8021882:	2200      	movs	r2, #0
 8021884:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8021886:	68fb      	ldr	r3, [r7, #12]
 8021888:	2200      	movs	r2, #0
 802188a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 802188c:	68fb      	ldr	r3, [r7, #12]
 802188e:	2200      	movs	r2, #0
 8021890:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8021892:	68fb      	ldr	r3, [r7, #12]
 8021894:	4a48      	ldr	r2, [pc, #288]	; (80219b8 <netif_add+0x194>)
 8021896:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8021898:	68fb      	ldr	r3, [r7, #12]
 802189a:	2200      	movs	r2, #0
 802189c:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 802189e:	68fb      	ldr	r3, [r7, #12]
 80218a0:	2200      	movs	r2, #0
 80218a2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80218a6:	68fb      	ldr	r3, [r7, #12]
 80218a8:	2200      	movs	r2, #0
 80218aa:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 80218ac:	68fb      	ldr	r3, [r7, #12]
 80218ae:	2200      	movs	r2, #0
 80218b0:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 80218b2:	68fb      	ldr	r3, [r7, #12]
 80218b4:	2200      	movs	r2, #0
 80218b6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80218b8:	68fb      	ldr	r3, [r7, #12]
 80218ba:	6a3a      	ldr	r2, [r7, #32]
 80218bc:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 80218be:	4b3f      	ldr	r3, [pc, #252]	; (80219bc <netif_add+0x198>)
 80218c0:	781a      	ldrb	r2, [r3, #0]
 80218c2:	68fb      	ldr	r3, [r7, #12]
 80218c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80218c8:	68fb      	ldr	r3, [r7, #12]
 80218ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80218cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80218ce:	683b      	ldr	r3, [r7, #0]
 80218d0:	687a      	ldr	r2, [r7, #4]
 80218d2:	68b9      	ldr	r1, [r7, #8]
 80218d4:	68f8      	ldr	r0, [r7, #12]
 80218d6:	f000 f90f 	bl	8021af8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80218da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80218dc:	68f8      	ldr	r0, [r7, #12]
 80218de:	4798      	blx	r3
 80218e0:	4603      	mov	r3, r0
 80218e2:	2b00      	cmp	r3, #0
 80218e4:	d001      	beq.n	80218ea <netif_add+0xc6>
    return NULL;
 80218e6:	2300      	movs	r3, #0
 80218e8:	e058      	b.n	802199c <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80218ea:	68fb      	ldr	r3, [r7, #12]
 80218ec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80218f0:	2bff      	cmp	r3, #255	; 0xff
 80218f2:	d103      	bne.n	80218fc <netif_add+0xd8>
        netif->num = 0;
 80218f4:	68fb      	ldr	r3, [r7, #12]
 80218f6:	2200      	movs	r2, #0
 80218f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 80218fc:	2300      	movs	r3, #0
 80218fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8021900:	4b2f      	ldr	r3, [pc, #188]	; (80219c0 <netif_add+0x19c>)
 8021902:	681b      	ldr	r3, [r3, #0]
 8021904:	617b      	str	r3, [r7, #20]
 8021906:	e02b      	b.n	8021960 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8021908:	697a      	ldr	r2, [r7, #20]
 802190a:	68fb      	ldr	r3, [r7, #12]
 802190c:	429a      	cmp	r2, r3
 802190e:	d106      	bne.n	802191e <netif_add+0xfa>
 8021910:	4b24      	ldr	r3, [pc, #144]	; (80219a4 <netif_add+0x180>)
 8021912:	f240 128b 	movw	r2, #395	; 0x18b
 8021916:	492b      	ldr	r1, [pc, #172]	; (80219c4 <netif_add+0x1a0>)
 8021918:	4824      	ldr	r0, [pc, #144]	; (80219ac <netif_add+0x188>)
 802191a:	f004 fb51 	bl	8025fc0 <iprintf>
        num_netifs++;
 802191e:	693b      	ldr	r3, [r7, #16]
 8021920:	3301      	adds	r3, #1
 8021922:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8021924:	693b      	ldr	r3, [r7, #16]
 8021926:	2bff      	cmp	r3, #255	; 0xff
 8021928:	dd06      	ble.n	8021938 <netif_add+0x114>
 802192a:	4b1e      	ldr	r3, [pc, #120]	; (80219a4 <netif_add+0x180>)
 802192c:	f240 128d 	movw	r2, #397	; 0x18d
 8021930:	4925      	ldr	r1, [pc, #148]	; (80219c8 <netif_add+0x1a4>)
 8021932:	481e      	ldr	r0, [pc, #120]	; (80219ac <netif_add+0x188>)
 8021934:	f004 fb44 	bl	8025fc0 <iprintf>
        if (netif2->num == netif->num) {
 8021938:	697b      	ldr	r3, [r7, #20]
 802193a:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 802193e:	68fb      	ldr	r3, [r7, #12]
 8021940:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021944:	429a      	cmp	r2, r3
 8021946:	d108      	bne.n	802195a <netif_add+0x136>
          netif->num++;
 8021948:	68fb      	ldr	r3, [r7, #12]
 802194a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 802194e:	3301      	adds	r3, #1
 8021950:	b2da      	uxtb	r2, r3
 8021952:	68fb      	ldr	r3, [r7, #12]
 8021954:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8021958:	e005      	b.n	8021966 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 802195a:	697b      	ldr	r3, [r7, #20]
 802195c:	681b      	ldr	r3, [r3, #0]
 802195e:	617b      	str	r3, [r7, #20]
 8021960:	697b      	ldr	r3, [r7, #20]
 8021962:	2b00      	cmp	r3, #0
 8021964:	d1d0      	bne.n	8021908 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 8021966:	697b      	ldr	r3, [r7, #20]
 8021968:	2b00      	cmp	r3, #0
 802196a:	d1be      	bne.n	80218ea <netif_add+0xc6>
  }
  if (netif->num == 254) {
 802196c:	68fb      	ldr	r3, [r7, #12]
 802196e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021972:	2bfe      	cmp	r3, #254	; 0xfe
 8021974:	d103      	bne.n	802197e <netif_add+0x15a>
    netif_num = 0;
 8021976:	4b11      	ldr	r3, [pc, #68]	; (80219bc <netif_add+0x198>)
 8021978:	2200      	movs	r2, #0
 802197a:	701a      	strb	r2, [r3, #0]
 802197c:	e006      	b.n	802198c <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 802197e:	68fb      	ldr	r3, [r7, #12]
 8021980:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021984:	3301      	adds	r3, #1
 8021986:	b2da      	uxtb	r2, r3
 8021988:	4b0c      	ldr	r3, [pc, #48]	; (80219bc <netif_add+0x198>)
 802198a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 802198c:	4b0c      	ldr	r3, [pc, #48]	; (80219c0 <netif_add+0x19c>)
 802198e:	681a      	ldr	r2, [r3, #0]
 8021990:	68fb      	ldr	r3, [r7, #12]
 8021992:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8021994:	4a0a      	ldr	r2, [pc, #40]	; (80219c0 <netif_add+0x19c>)
 8021996:	68fb      	ldr	r3, [r7, #12]
 8021998:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 802199a:	68fb      	ldr	r3, [r7, #12]
}
 802199c:	4618      	mov	r0, r3
 802199e:	3718      	adds	r7, #24
 80219a0:	46bd      	mov	sp, r7
 80219a2:	bd80      	pop	{r7, pc}
 80219a4:	0802ba68 	.word	0x0802ba68
 80219a8:	0802bb20 	.word	0x0802bb20
 80219ac:	0802bac0 	.word	0x0802bac0
 80219b0:	0802bb3c 	.word	0x0802bb3c
 80219b4:	0802d1f0 	.word	0x0802d1f0
 80219b8:	08021ecf 	.word	0x08021ecf
 80219bc:	20015d54 	.word	0x20015d54
 80219c0:	20015d4c 	.word	0x20015d4c
 80219c4:	0802bb60 	.word	0x0802bb60
 80219c8:	0802bb74 	.word	0x0802bb74

080219cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80219cc:	b580      	push	{r7, lr}
 80219ce:	b082      	sub	sp, #8
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6078      	str	r0, [r7, #4]
 80219d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80219d6:	6839      	ldr	r1, [r7, #0]
 80219d8:	6878      	ldr	r0, [r7, #4]
 80219da:	f001 fe13 	bl	8023604 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80219de:	bf00      	nop
 80219e0:	3708      	adds	r7, #8
 80219e2:	46bd      	mov	sp, r7
 80219e4:	bd80      	pop	{r7, pc}
	...

080219e8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80219e8:	b580      	push	{r7, lr}
 80219ea:	b086      	sub	sp, #24
 80219ec:	af00      	add	r7, sp, #0
 80219ee:	60f8      	str	r0, [r7, #12]
 80219f0:	60b9      	str	r1, [r7, #8]
 80219f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80219f4:	68bb      	ldr	r3, [r7, #8]
 80219f6:	2b00      	cmp	r3, #0
 80219f8:	d106      	bne.n	8021a08 <netif_do_set_ipaddr+0x20>
 80219fa:	4b1d      	ldr	r3, [pc, #116]	; (8021a70 <netif_do_set_ipaddr+0x88>)
 80219fc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8021a00:	491c      	ldr	r1, [pc, #112]	; (8021a74 <netif_do_set_ipaddr+0x8c>)
 8021a02:	481d      	ldr	r0, [pc, #116]	; (8021a78 <netif_do_set_ipaddr+0x90>)
 8021a04:	f004 fadc 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8021a08:	687b      	ldr	r3, [r7, #4]
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d106      	bne.n	8021a1c <netif_do_set_ipaddr+0x34>
 8021a0e:	4b18      	ldr	r3, [pc, #96]	; (8021a70 <netif_do_set_ipaddr+0x88>)
 8021a10:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8021a14:	4917      	ldr	r1, [pc, #92]	; (8021a74 <netif_do_set_ipaddr+0x8c>)
 8021a16:	4818      	ldr	r0, [pc, #96]	; (8021a78 <netif_do_set_ipaddr+0x90>)
 8021a18:	f004 fad2 	bl	8025fc0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8021a1c:	68bb      	ldr	r3, [r7, #8]
 8021a1e:	681a      	ldr	r2, [r3, #0]
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	3304      	adds	r3, #4
 8021a24:	681b      	ldr	r3, [r3, #0]
 8021a26:	429a      	cmp	r2, r3
 8021a28:	d01c      	beq.n	8021a64 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8021a2a:	68bb      	ldr	r3, [r7, #8]
 8021a2c:	681b      	ldr	r3, [r3, #0]
 8021a2e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8021a30:	68fb      	ldr	r3, [r7, #12]
 8021a32:	3304      	adds	r3, #4
 8021a34:	681a      	ldr	r2, [r3, #0]
 8021a36:	687b      	ldr	r3, [r7, #4]
 8021a38:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8021a3a:	f107 0314 	add.w	r3, r7, #20
 8021a3e:	4619      	mov	r1, r3
 8021a40:	6878      	ldr	r0, [r7, #4]
 8021a42:	f7ff ffc3 	bl	80219cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8021a46:	68bb      	ldr	r3, [r7, #8]
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d002      	beq.n	8021a52 <netif_do_set_ipaddr+0x6a>
 8021a4c:	68bb      	ldr	r3, [r7, #8]
 8021a4e:	681b      	ldr	r3, [r3, #0]
 8021a50:	e000      	b.n	8021a54 <netif_do_set_ipaddr+0x6c>
 8021a52:	2300      	movs	r3, #0
 8021a54:	68fa      	ldr	r2, [r7, #12]
 8021a56:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8021a58:	2101      	movs	r1, #1
 8021a5a:	68f8      	ldr	r0, [r7, #12]
 8021a5c:	f000 f8d2 	bl	8021c04 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8021a60:	2301      	movs	r3, #1
 8021a62:	e000      	b.n	8021a66 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8021a64:	2300      	movs	r3, #0
}
 8021a66:	4618      	mov	r0, r3
 8021a68:	3718      	adds	r7, #24
 8021a6a:	46bd      	mov	sp, r7
 8021a6c:	bd80      	pop	{r7, pc}
 8021a6e:	bf00      	nop
 8021a70:	0802ba68 	.word	0x0802ba68
 8021a74:	0802bba4 	.word	0x0802bba4
 8021a78:	0802bac0 	.word	0x0802bac0

08021a7c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8021a7c:	b480      	push	{r7}
 8021a7e:	b085      	sub	sp, #20
 8021a80:	af00      	add	r7, sp, #0
 8021a82:	60f8      	str	r0, [r7, #12]
 8021a84:	60b9      	str	r1, [r7, #8]
 8021a86:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8021a88:	68bb      	ldr	r3, [r7, #8]
 8021a8a:	681a      	ldr	r2, [r3, #0]
 8021a8c:	68fb      	ldr	r3, [r7, #12]
 8021a8e:	3308      	adds	r3, #8
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	429a      	cmp	r2, r3
 8021a94:	d00a      	beq.n	8021aac <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8021a96:	68bb      	ldr	r3, [r7, #8]
 8021a98:	2b00      	cmp	r3, #0
 8021a9a:	d002      	beq.n	8021aa2 <netif_do_set_netmask+0x26>
 8021a9c:	68bb      	ldr	r3, [r7, #8]
 8021a9e:	681b      	ldr	r3, [r3, #0]
 8021aa0:	e000      	b.n	8021aa4 <netif_do_set_netmask+0x28>
 8021aa2:	2300      	movs	r3, #0
 8021aa4:	68fa      	ldr	r2, [r7, #12]
 8021aa6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8021aa8:	2301      	movs	r3, #1
 8021aaa:	e000      	b.n	8021aae <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8021aac:	2300      	movs	r3, #0
}
 8021aae:	4618      	mov	r0, r3
 8021ab0:	3714      	adds	r7, #20
 8021ab2:	46bd      	mov	sp, r7
 8021ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ab8:	4770      	bx	lr

08021aba <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8021aba:	b480      	push	{r7}
 8021abc:	b085      	sub	sp, #20
 8021abe:	af00      	add	r7, sp, #0
 8021ac0:	60f8      	str	r0, [r7, #12]
 8021ac2:	60b9      	str	r1, [r7, #8]
 8021ac4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8021ac6:	68bb      	ldr	r3, [r7, #8]
 8021ac8:	681a      	ldr	r2, [r3, #0]
 8021aca:	68fb      	ldr	r3, [r7, #12]
 8021acc:	330c      	adds	r3, #12
 8021ace:	681b      	ldr	r3, [r3, #0]
 8021ad0:	429a      	cmp	r2, r3
 8021ad2:	d00a      	beq.n	8021aea <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8021ad4:	68bb      	ldr	r3, [r7, #8]
 8021ad6:	2b00      	cmp	r3, #0
 8021ad8:	d002      	beq.n	8021ae0 <netif_do_set_gw+0x26>
 8021ada:	68bb      	ldr	r3, [r7, #8]
 8021adc:	681b      	ldr	r3, [r3, #0]
 8021ade:	e000      	b.n	8021ae2 <netif_do_set_gw+0x28>
 8021ae0:	2300      	movs	r3, #0
 8021ae2:	68fa      	ldr	r2, [r7, #12]
 8021ae4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8021ae6:	2301      	movs	r3, #1
 8021ae8:	e000      	b.n	8021aec <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8021aea:	2300      	movs	r3, #0
}
 8021aec:	4618      	mov	r0, r3
 8021aee:	3714      	adds	r7, #20
 8021af0:	46bd      	mov	sp, r7
 8021af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021af6:	4770      	bx	lr

08021af8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8021af8:	b580      	push	{r7, lr}
 8021afa:	b088      	sub	sp, #32
 8021afc:	af00      	add	r7, sp, #0
 8021afe:	60f8      	str	r0, [r7, #12]
 8021b00:	60b9      	str	r1, [r7, #8]
 8021b02:	607a      	str	r2, [r7, #4]
 8021b04:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8021b06:	2300      	movs	r3, #0
 8021b08:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8021b0a:	2300      	movs	r3, #0
 8021b0c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8021b0e:	68bb      	ldr	r3, [r7, #8]
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	d101      	bne.n	8021b18 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8021b14:	4b1c      	ldr	r3, [pc, #112]	; (8021b88 <netif_set_addr+0x90>)
 8021b16:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8021b18:	687b      	ldr	r3, [r7, #4]
 8021b1a:	2b00      	cmp	r3, #0
 8021b1c:	d101      	bne.n	8021b22 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8021b1e:	4b1a      	ldr	r3, [pc, #104]	; (8021b88 <netif_set_addr+0x90>)
 8021b20:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8021b22:	683b      	ldr	r3, [r7, #0]
 8021b24:	2b00      	cmp	r3, #0
 8021b26:	d101      	bne.n	8021b2c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8021b28:	4b17      	ldr	r3, [pc, #92]	; (8021b88 <netif_set_addr+0x90>)
 8021b2a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8021b2c:	68bb      	ldr	r3, [r7, #8]
 8021b2e:	2b00      	cmp	r3, #0
 8021b30:	d003      	beq.n	8021b3a <netif_set_addr+0x42>
 8021b32:	68bb      	ldr	r3, [r7, #8]
 8021b34:	681b      	ldr	r3, [r3, #0]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d101      	bne.n	8021b3e <netif_set_addr+0x46>
 8021b3a:	2301      	movs	r3, #1
 8021b3c:	e000      	b.n	8021b40 <netif_set_addr+0x48>
 8021b3e:	2300      	movs	r3, #0
 8021b40:	617b      	str	r3, [r7, #20]
  if (remove) {
 8021b42:	697b      	ldr	r3, [r7, #20]
 8021b44:	2b00      	cmp	r3, #0
 8021b46:	d006      	beq.n	8021b56 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8021b48:	f107 0310 	add.w	r3, r7, #16
 8021b4c:	461a      	mov	r2, r3
 8021b4e:	68b9      	ldr	r1, [r7, #8]
 8021b50:	68f8      	ldr	r0, [r7, #12]
 8021b52:	f7ff ff49 	bl	80219e8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8021b56:	69fa      	ldr	r2, [r7, #28]
 8021b58:	6879      	ldr	r1, [r7, #4]
 8021b5a:	68f8      	ldr	r0, [r7, #12]
 8021b5c:	f7ff ff8e 	bl	8021a7c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8021b60:	69ba      	ldr	r2, [r7, #24]
 8021b62:	6839      	ldr	r1, [r7, #0]
 8021b64:	68f8      	ldr	r0, [r7, #12]
 8021b66:	f7ff ffa8 	bl	8021aba <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8021b6a:	697b      	ldr	r3, [r7, #20]
 8021b6c:	2b00      	cmp	r3, #0
 8021b6e:	d106      	bne.n	8021b7e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8021b70:	f107 0310 	add.w	r3, r7, #16
 8021b74:	461a      	mov	r2, r3
 8021b76:	68b9      	ldr	r1, [r7, #8]
 8021b78:	68f8      	ldr	r0, [r7, #12]
 8021b7a:	f7ff ff35 	bl	80219e8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8021b7e:	bf00      	nop
 8021b80:	3720      	adds	r7, #32
 8021b82:	46bd      	mov	sp, r7
 8021b84:	bd80      	pop	{r7, pc}
 8021b86:	bf00      	nop
 8021b88:	0802d1f0 	.word	0x0802d1f0

08021b8c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8021b8c:	b480      	push	{r7}
 8021b8e:	b083      	sub	sp, #12
 8021b90:	af00      	add	r7, sp, #0
 8021b92:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8021b94:	4a04      	ldr	r2, [pc, #16]	; (8021ba8 <netif_set_default+0x1c>)
 8021b96:	687b      	ldr	r3, [r7, #4]
 8021b98:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8021b9a:	bf00      	nop
 8021b9c:	370c      	adds	r7, #12
 8021b9e:	46bd      	mov	sp, r7
 8021ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ba4:	4770      	bx	lr
 8021ba6:	bf00      	nop
 8021ba8:	20015d50 	.word	0x20015d50

08021bac <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8021bac:	b580      	push	{r7, lr}
 8021bae:	b082      	sub	sp, #8
 8021bb0:	af00      	add	r7, sp, #0
 8021bb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8021bb4:	687b      	ldr	r3, [r7, #4]
 8021bb6:	2b00      	cmp	r3, #0
 8021bb8:	d107      	bne.n	8021bca <netif_set_up+0x1e>
 8021bba:	4b0f      	ldr	r3, [pc, #60]	; (8021bf8 <netif_set_up+0x4c>)
 8021bbc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8021bc0:	490e      	ldr	r1, [pc, #56]	; (8021bfc <netif_set_up+0x50>)
 8021bc2:	480f      	ldr	r0, [pc, #60]	; (8021c00 <netif_set_up+0x54>)
 8021bc4:	f004 f9fc 	bl	8025fc0 <iprintf>
 8021bc8:	e013      	b.n	8021bf2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8021bca:	687b      	ldr	r3, [r7, #4]
 8021bcc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021bd0:	f003 0301 	and.w	r3, r3, #1
 8021bd4:	2b00      	cmp	r3, #0
 8021bd6:	d10c      	bne.n	8021bf2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8021bd8:	687b      	ldr	r3, [r7, #4]
 8021bda:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021bde:	f043 0301 	orr.w	r3, r3, #1
 8021be2:	b2da      	uxtb	r2, r3
 8021be4:	687b      	ldr	r3, [r7, #4]
 8021be6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8021bea:	2103      	movs	r1, #3
 8021bec:	6878      	ldr	r0, [r7, #4]
 8021bee:	f000 f809 	bl	8021c04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8021bf2:	3708      	adds	r7, #8
 8021bf4:	46bd      	mov	sp, r7
 8021bf6:	bd80      	pop	{r7, pc}
 8021bf8:	0802ba68 	.word	0x0802ba68
 8021bfc:	0802bc14 	.word	0x0802bc14
 8021c00:	0802bac0 	.word	0x0802bac0

08021c04 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8021c04:	b580      	push	{r7, lr}
 8021c06:	b082      	sub	sp, #8
 8021c08:	af00      	add	r7, sp, #0
 8021c0a:	6078      	str	r0, [r7, #4]
 8021c0c:	460b      	mov	r3, r1
 8021c0e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8021c10:	687b      	ldr	r3, [r7, #4]
 8021c12:	2b00      	cmp	r3, #0
 8021c14:	d106      	bne.n	8021c24 <netif_issue_reports+0x20>
 8021c16:	4b18      	ldr	r3, [pc, #96]	; (8021c78 <netif_issue_reports+0x74>)
 8021c18:	f240 326d 	movw	r2, #877	; 0x36d
 8021c1c:	4917      	ldr	r1, [pc, #92]	; (8021c7c <netif_issue_reports+0x78>)
 8021c1e:	4818      	ldr	r0, [pc, #96]	; (8021c80 <netif_issue_reports+0x7c>)
 8021c20:	f004 f9ce 	bl	8025fc0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8021c24:	687b      	ldr	r3, [r7, #4]
 8021c26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021c2a:	f003 0304 	and.w	r3, r3, #4
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d01e      	beq.n	8021c70 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8021c32:	687b      	ldr	r3, [r7, #4]
 8021c34:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021c38:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8021c3c:	2b00      	cmp	r3, #0
 8021c3e:	d017      	beq.n	8021c70 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8021c40:	78fb      	ldrb	r3, [r7, #3]
 8021c42:	f003 0301 	and.w	r3, r3, #1
 8021c46:	2b00      	cmp	r3, #0
 8021c48:	d013      	beq.n	8021c72 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021c4a:	687b      	ldr	r3, [r7, #4]
 8021c4c:	3304      	adds	r3, #4
 8021c4e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8021c50:	2b00      	cmp	r3, #0
 8021c52:	d00e      	beq.n	8021c72 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021c5a:	f003 0308 	and.w	r3, r3, #8
 8021c5e:	2b00      	cmp	r3, #0
 8021c60:	d007      	beq.n	8021c72 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8021c62:	687b      	ldr	r3, [r7, #4]
 8021c64:	3304      	adds	r3, #4
 8021c66:	4619      	mov	r1, r3
 8021c68:	6878      	ldr	r0, [r7, #4]
 8021c6a:	f002 fc35 	bl	80244d8 <etharp_request>
 8021c6e:	e000      	b.n	8021c72 <netif_issue_reports+0x6e>
    return;
 8021c70:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8021c72:	3708      	adds	r7, #8
 8021c74:	46bd      	mov	sp, r7
 8021c76:	bd80      	pop	{r7, pc}
 8021c78:	0802ba68 	.word	0x0802ba68
 8021c7c:	0802bc30 	.word	0x0802bc30
 8021c80:	0802bac0 	.word	0x0802bac0

08021c84 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8021c84:	b580      	push	{r7, lr}
 8021c86:	b082      	sub	sp, #8
 8021c88:	af00      	add	r7, sp, #0
 8021c8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8021c8c:	687b      	ldr	r3, [r7, #4]
 8021c8e:	2b00      	cmp	r3, #0
 8021c90:	d107      	bne.n	8021ca2 <netif_set_down+0x1e>
 8021c92:	4b12      	ldr	r3, [pc, #72]	; (8021cdc <netif_set_down+0x58>)
 8021c94:	f240 329b 	movw	r2, #923	; 0x39b
 8021c98:	4911      	ldr	r1, [pc, #68]	; (8021ce0 <netif_set_down+0x5c>)
 8021c9a:	4812      	ldr	r0, [pc, #72]	; (8021ce4 <netif_set_down+0x60>)
 8021c9c:	f004 f990 	bl	8025fc0 <iprintf>
 8021ca0:	e019      	b.n	8021cd6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8021ca2:	687b      	ldr	r3, [r7, #4]
 8021ca4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021ca8:	f003 0301 	and.w	r3, r3, #1
 8021cac:	2b00      	cmp	r3, #0
 8021cae:	d012      	beq.n	8021cd6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8021cb0:	687b      	ldr	r3, [r7, #4]
 8021cb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021cb6:	f023 0301 	bic.w	r3, r3, #1
 8021cba:	b2da      	uxtb	r2, r3
 8021cbc:	687b      	ldr	r3, [r7, #4]
 8021cbe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8021cc2:	687b      	ldr	r3, [r7, #4]
 8021cc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021cc8:	f003 0308 	and.w	r3, r3, #8
 8021ccc:	2b00      	cmp	r3, #0
 8021cce:	d002      	beq.n	8021cd6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8021cd0:	6878      	ldr	r0, [r7, #4]
 8021cd2:	f001 ffbf 	bl	8023c54 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8021cd6:	3708      	adds	r7, #8
 8021cd8:	46bd      	mov	sp, r7
 8021cda:	bd80      	pop	{r7, pc}
 8021cdc:	0802ba68 	.word	0x0802ba68
 8021ce0:	0802bc54 	.word	0x0802bc54
 8021ce4:	0802bac0 	.word	0x0802bac0

08021ce8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8021ce8:	b580      	push	{r7, lr}
 8021cea:	b082      	sub	sp, #8
 8021cec:	af00      	add	r7, sp, #0
 8021cee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8021cf0:	687b      	ldr	r3, [r7, #4]
 8021cf2:	2b00      	cmp	r3, #0
 8021cf4:	d107      	bne.n	8021d06 <netif_set_link_up+0x1e>
 8021cf6:	4b13      	ldr	r3, [pc, #76]	; (8021d44 <netif_set_link_up+0x5c>)
 8021cf8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8021cfc:	4912      	ldr	r1, [pc, #72]	; (8021d48 <netif_set_link_up+0x60>)
 8021cfe:	4813      	ldr	r0, [pc, #76]	; (8021d4c <netif_set_link_up+0x64>)
 8021d00:	f004 f95e 	bl	8025fc0 <iprintf>
 8021d04:	e01b      	b.n	8021d3e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8021d06:	687b      	ldr	r3, [r7, #4]
 8021d08:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021d0c:	f003 0304 	and.w	r3, r3, #4
 8021d10:	2b00      	cmp	r3, #0
 8021d12:	d114      	bne.n	8021d3e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8021d14:	687b      	ldr	r3, [r7, #4]
 8021d16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021d1a:	f043 0304 	orr.w	r3, r3, #4
 8021d1e:	b2da      	uxtb	r2, r3
 8021d20:	687b      	ldr	r3, [r7, #4]
 8021d22:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8021d26:	2103      	movs	r1, #3
 8021d28:	6878      	ldr	r0, [r7, #4]
 8021d2a:	f7ff ff6b 	bl	8021c04 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8021d2e:	687b      	ldr	r3, [r7, #4]
 8021d30:	69db      	ldr	r3, [r3, #28]
 8021d32:	2b00      	cmp	r3, #0
 8021d34:	d003      	beq.n	8021d3e <netif_set_link_up+0x56>
 8021d36:	687b      	ldr	r3, [r7, #4]
 8021d38:	69db      	ldr	r3, [r3, #28]
 8021d3a:	6878      	ldr	r0, [r7, #4]
 8021d3c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8021d3e:	3708      	adds	r7, #8
 8021d40:	46bd      	mov	sp, r7
 8021d42:	bd80      	pop	{r7, pc}
 8021d44:	0802ba68 	.word	0x0802ba68
 8021d48:	0802bc74 	.word	0x0802bc74
 8021d4c:	0802bac0 	.word	0x0802bac0

08021d50 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8021d50:	b580      	push	{r7, lr}
 8021d52:	b082      	sub	sp, #8
 8021d54:	af00      	add	r7, sp, #0
 8021d56:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8021d58:	687b      	ldr	r3, [r7, #4]
 8021d5a:	2b00      	cmp	r3, #0
 8021d5c:	d107      	bne.n	8021d6e <netif_set_link_down+0x1e>
 8021d5e:	4b11      	ldr	r3, [pc, #68]	; (8021da4 <netif_set_link_down+0x54>)
 8021d60:	f240 4206 	movw	r2, #1030	; 0x406
 8021d64:	4910      	ldr	r1, [pc, #64]	; (8021da8 <netif_set_link_down+0x58>)
 8021d66:	4811      	ldr	r0, [pc, #68]	; (8021dac <netif_set_link_down+0x5c>)
 8021d68:	f004 f92a 	bl	8025fc0 <iprintf>
 8021d6c:	e017      	b.n	8021d9e <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8021d6e:	687b      	ldr	r3, [r7, #4]
 8021d70:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021d74:	f003 0304 	and.w	r3, r3, #4
 8021d78:	2b00      	cmp	r3, #0
 8021d7a:	d010      	beq.n	8021d9e <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8021d7c:	687b      	ldr	r3, [r7, #4]
 8021d7e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021d82:	f023 0304 	bic.w	r3, r3, #4
 8021d86:	b2da      	uxtb	r2, r3
 8021d88:	687b      	ldr	r3, [r7, #4]
 8021d8a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	69db      	ldr	r3, [r3, #28]
 8021d92:	2b00      	cmp	r3, #0
 8021d94:	d003      	beq.n	8021d9e <netif_set_link_down+0x4e>
 8021d96:	687b      	ldr	r3, [r7, #4]
 8021d98:	69db      	ldr	r3, [r3, #28]
 8021d9a:	6878      	ldr	r0, [r7, #4]
 8021d9c:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8021d9e:	3708      	adds	r7, #8
 8021da0:	46bd      	mov	sp, r7
 8021da2:	bd80      	pop	{r7, pc}
 8021da4:	0802ba68 	.word	0x0802ba68
 8021da8:	0802bc98 	.word	0x0802bc98
 8021dac:	0802bac0 	.word	0x0802bac0

08021db0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8021db0:	b480      	push	{r7}
 8021db2:	b083      	sub	sp, #12
 8021db4:	af00      	add	r7, sp, #0
 8021db6:	6078      	str	r0, [r7, #4]
 8021db8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8021dba:	687b      	ldr	r3, [r7, #4]
 8021dbc:	2b00      	cmp	r3, #0
 8021dbe:	d002      	beq.n	8021dc6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8021dc0:	687b      	ldr	r3, [r7, #4]
 8021dc2:	683a      	ldr	r2, [r7, #0]
 8021dc4:	61da      	str	r2, [r3, #28]
  }
}
 8021dc6:	bf00      	nop
 8021dc8:	370c      	adds	r7, #12
 8021dca:	46bd      	mov	sp, r7
 8021dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dd0:	4770      	bx	lr
	...

08021dd4 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 8021dd4:	b580      	push	{r7, lr}
 8021dd6:	b086      	sub	sp, #24
 8021dd8:	af00      	add	r7, sp, #0
 8021dda:	6078      	str	r0, [r7, #4]
 8021ddc:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 8021dde:	687b      	ldr	r3, [r7, #4]
 8021de0:	2b00      	cmp	r3, #0
 8021de2:	d106      	bne.n	8021df2 <netif_loop_output+0x1e>
 8021de4:	4b2d      	ldr	r3, [pc, #180]	; (8021e9c <netif_loop_output+0xc8>)
 8021de6:	f240 424b 	movw	r2, #1099	; 0x44b
 8021dea:	492d      	ldr	r1, [pc, #180]	; (8021ea0 <netif_loop_output+0xcc>)
 8021dec:	482d      	ldr	r0, [pc, #180]	; (8021ea4 <netif_loop_output+0xd0>)
 8021dee:	f004 f8e7 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 8021df2:	683b      	ldr	r3, [r7, #0]
 8021df4:	2b00      	cmp	r3, #0
 8021df6:	d106      	bne.n	8021e06 <netif_loop_output+0x32>
 8021df8:	4b28      	ldr	r3, [pc, #160]	; (8021e9c <netif_loop_output+0xc8>)
 8021dfa:	f240 424c 	movw	r2, #1100	; 0x44c
 8021dfe:	492a      	ldr	r1, [pc, #168]	; (8021ea8 <netif_loop_output+0xd4>)
 8021e00:	4828      	ldr	r0, [pc, #160]	; (8021ea4 <netif_loop_output+0xd0>)
 8021e02:	f004 f8dd 	bl	8025fc0 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8021e06:	683b      	ldr	r3, [r7, #0]
 8021e08:	891b      	ldrh	r3, [r3, #8]
 8021e0a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021e0e:	4619      	mov	r1, r3
 8021e10:	200e      	movs	r0, #14
 8021e12:	f000 f8bb 	bl	8021f8c <pbuf_alloc>
 8021e16:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 8021e18:	693b      	ldr	r3, [r7, #16]
 8021e1a:	2b00      	cmp	r3, #0
 8021e1c:	d102      	bne.n	8021e24 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 8021e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8021e22:	e037      	b.n	8021e94 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 8021e24:	6839      	ldr	r1, [r7, #0]
 8021e26:	6938      	ldr	r0, [r7, #16]
 8021e28:	f000 fcba 	bl	80227a0 <pbuf_copy>
 8021e2c:	4603      	mov	r3, r0
 8021e2e:	73fb      	strb	r3, [r7, #15]
 8021e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021e34:	2b00      	cmp	r3, #0
 8021e36:	d005      	beq.n	8021e44 <netif_loop_output+0x70>
    pbuf_free(r);
 8021e38:	6938      	ldr	r0, [r7, #16]
 8021e3a:	f000 fb89 	bl	8022550 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 8021e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021e42:	e027      	b.n	8021e94 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 8021e44:	693b      	ldr	r3, [r7, #16]
 8021e46:	617b      	str	r3, [r7, #20]
 8021e48:	e002      	b.n	8021e50 <netif_loop_output+0x7c>
 8021e4a:	697b      	ldr	r3, [r7, #20]
 8021e4c:	681b      	ldr	r3, [r3, #0]
 8021e4e:	617b      	str	r3, [r7, #20]
 8021e50:	697b      	ldr	r3, [r7, #20]
 8021e52:	681b      	ldr	r3, [r3, #0]
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d1f8      	bne.n	8021e4a <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 8021e58:	687b      	ldr	r3, [r7, #4]
 8021e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021e5c:	2b00      	cmp	r3, #0
 8021e5e:	d012      	beq.n	8021e86 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 8021e60:	687b      	ldr	r3, [r7, #4]
 8021e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021e64:	2b00      	cmp	r3, #0
 8021e66:	d106      	bne.n	8021e76 <netif_loop_output+0xa2>
 8021e68:	4b0c      	ldr	r3, [pc, #48]	; (8021e9c <netif_loop_output+0xc8>)
 8021e6a:	f240 4277 	movw	r2, #1143	; 0x477
 8021e6e:	490f      	ldr	r1, [pc, #60]	; (8021eac <netif_loop_output+0xd8>)
 8021e70:	480c      	ldr	r0, [pc, #48]	; (8021ea4 <netif_loop_output+0xd0>)
 8021e72:	f004 f8a5 	bl	8025fc0 <iprintf>
    netif->loop_last->next = r;
 8021e76:	687b      	ldr	r3, [r7, #4]
 8021e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8021e7a:	693a      	ldr	r2, [r7, #16]
 8021e7c:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 8021e7e:	687b      	ldr	r3, [r7, #4]
 8021e80:	697a      	ldr	r2, [r7, #20]
 8021e82:	63da      	str	r2, [r3, #60]	; 0x3c
 8021e84:	e005      	b.n	8021e92 <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 8021e86:	687b      	ldr	r3, [r7, #4]
 8021e88:	693a      	ldr	r2, [r7, #16]
 8021e8a:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 8021e8c:	687b      	ldr	r3, [r7, #4]
 8021e8e:	697a      	ldr	r2, [r7, #20]
 8021e90:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 8021e92:	2300      	movs	r3, #0
}
 8021e94:	4618      	mov	r0, r3
 8021e96:	3718      	adds	r7, #24
 8021e98:	46bd      	mov	sp, r7
 8021e9a:	bd80      	pop	{r7, pc}
 8021e9c:	0802ba68 	.word	0x0802ba68
 8021ea0:	0802bcbc 	.word	0x0802bcbc
 8021ea4:	0802bac0 	.word	0x0802bac0
 8021ea8:	0802bce0 	.word	0x0802bce0
 8021eac:	0802bd00 	.word	0x0802bd00

08021eb0 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b084      	sub	sp, #16
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	60f8      	str	r0, [r7, #12]
 8021eb8:	60b9      	str	r1, [r7, #8]
 8021eba:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 8021ebc:	68b9      	ldr	r1, [r7, #8]
 8021ebe:	68f8      	ldr	r0, [r7, #12]
 8021ec0:	f7ff ff88 	bl	8021dd4 <netif_loop_output>
 8021ec4:	4603      	mov	r3, r0
}
 8021ec6:	4618      	mov	r0, r3
 8021ec8:	3710      	adds	r7, #16
 8021eca:	46bd      	mov	sp, r7
 8021ecc:	bd80      	pop	{r7, pc}

08021ece <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8021ece:	b480      	push	{r7}
 8021ed0:	b085      	sub	sp, #20
 8021ed2:	af00      	add	r7, sp, #0
 8021ed4:	60f8      	str	r0, [r7, #12]
 8021ed6:	60b9      	str	r1, [r7, #8]
 8021ed8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8021eda:	f06f 030b 	mvn.w	r3, #11
}
 8021ede:	4618      	mov	r0, r3
 8021ee0:	3714      	adds	r7, #20
 8021ee2:	46bd      	mov	sp, r7
 8021ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ee8:	4770      	bx	lr
	...

08021eec <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8021eec:	b480      	push	{r7}
 8021eee:	b085      	sub	sp, #20
 8021ef0:	af00      	add	r7, sp, #0
 8021ef2:	4603      	mov	r3, r0
 8021ef4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8021ef6:	79fb      	ldrb	r3, [r7, #7]
 8021ef8:	2b00      	cmp	r3, #0
 8021efa:	d013      	beq.n	8021f24 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8021efc:	4b0d      	ldr	r3, [pc, #52]	; (8021f34 <netif_get_by_index+0x48>)
 8021efe:	681b      	ldr	r3, [r3, #0]
 8021f00:	60fb      	str	r3, [r7, #12]
 8021f02:	e00c      	b.n	8021f1e <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8021f04:	68fb      	ldr	r3, [r7, #12]
 8021f06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021f0a:	3301      	adds	r3, #1
 8021f0c:	b2db      	uxtb	r3, r3
 8021f0e:	79fa      	ldrb	r2, [r7, #7]
 8021f10:	429a      	cmp	r2, r3
 8021f12:	d101      	bne.n	8021f18 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8021f14:	68fb      	ldr	r3, [r7, #12]
 8021f16:	e006      	b.n	8021f26 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8021f18:	68fb      	ldr	r3, [r7, #12]
 8021f1a:	681b      	ldr	r3, [r3, #0]
 8021f1c:	60fb      	str	r3, [r7, #12]
 8021f1e:	68fb      	ldr	r3, [r7, #12]
 8021f20:	2b00      	cmp	r3, #0
 8021f22:	d1ef      	bne.n	8021f04 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8021f24:	2300      	movs	r3, #0
}
 8021f26:	4618      	mov	r0, r3
 8021f28:	3714      	adds	r7, #20
 8021f2a:	46bd      	mov	sp, r7
 8021f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f30:	4770      	bx	lr
 8021f32:	bf00      	nop
 8021f34:	20015d4c 	.word	0x20015d4c

08021f38 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8021f38:	b480      	push	{r7}
 8021f3a:	b085      	sub	sp, #20
 8021f3c:	af00      	add	r7, sp, #0
 8021f3e:	60f8      	str	r0, [r7, #12]
 8021f40:	60b9      	str	r1, [r7, #8]
 8021f42:	4611      	mov	r1, r2
 8021f44:	461a      	mov	r2, r3
 8021f46:	460b      	mov	r3, r1
 8021f48:	80fb      	strh	r3, [r7, #6]
 8021f4a:	4613      	mov	r3, r2
 8021f4c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8021f4e:	68fb      	ldr	r3, [r7, #12]
 8021f50:	2200      	movs	r2, #0
 8021f52:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8021f54:	68fb      	ldr	r3, [r7, #12]
 8021f56:	68ba      	ldr	r2, [r7, #8]
 8021f58:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8021f5a:	68fb      	ldr	r3, [r7, #12]
 8021f5c:	88fa      	ldrh	r2, [r7, #6]
 8021f5e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8021f60:	68fb      	ldr	r3, [r7, #12]
 8021f62:	88ba      	ldrh	r2, [r7, #4]
 8021f64:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8021f66:	8b3b      	ldrh	r3, [r7, #24]
 8021f68:	b2da      	uxtb	r2, r3
 8021f6a:	68fb      	ldr	r3, [r7, #12]
 8021f6c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8021f6e:	68fb      	ldr	r3, [r7, #12]
 8021f70:	7f3a      	ldrb	r2, [r7, #28]
 8021f72:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8021f74:	68fb      	ldr	r3, [r7, #12]
 8021f76:	2201      	movs	r2, #1
 8021f78:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8021f7a:	68fb      	ldr	r3, [r7, #12]
 8021f7c:	2200      	movs	r2, #0
 8021f7e:	73da      	strb	r2, [r3, #15]
}
 8021f80:	bf00      	nop
 8021f82:	3714      	adds	r7, #20
 8021f84:	46bd      	mov	sp, r7
 8021f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021f8a:	4770      	bx	lr

08021f8c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8021f8c:	b580      	push	{r7, lr}
 8021f8e:	b08c      	sub	sp, #48	; 0x30
 8021f90:	af02      	add	r7, sp, #8
 8021f92:	4603      	mov	r3, r0
 8021f94:	71fb      	strb	r3, [r7, #7]
 8021f96:	460b      	mov	r3, r1
 8021f98:	80bb      	strh	r3, [r7, #4]
 8021f9a:	4613      	mov	r3, r2
 8021f9c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8021f9e:	79fb      	ldrb	r3, [r7, #7]
 8021fa0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8021fa2:	887b      	ldrh	r3, [r7, #2]
 8021fa4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8021fa8:	d07d      	beq.n	80220a6 <pbuf_alloc+0x11a>
 8021faa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8021fae:	f300 80c6 	bgt.w	802213e <pbuf_alloc+0x1b2>
 8021fb2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8021fb6:	d010      	beq.n	8021fda <pbuf_alloc+0x4e>
 8021fb8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8021fbc:	f300 80bf 	bgt.w	802213e <pbuf_alloc+0x1b2>
 8021fc0:	2b01      	cmp	r3, #1
 8021fc2:	d002      	beq.n	8021fca <pbuf_alloc+0x3e>
 8021fc4:	2b41      	cmp	r3, #65	; 0x41
 8021fc6:	f040 80ba 	bne.w	802213e <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8021fca:	887a      	ldrh	r2, [r7, #2]
 8021fcc:	88bb      	ldrh	r3, [r7, #4]
 8021fce:	4619      	mov	r1, r3
 8021fd0:	2000      	movs	r0, #0
 8021fd2:	f000 f8cf 	bl	8022174 <pbuf_alloc_reference>
 8021fd6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8021fd8:	e0bb      	b.n	8022152 <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8021fda:	2300      	movs	r3, #0
 8021fdc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8021fde:	2300      	movs	r3, #0
 8021fe0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8021fe2:	88bb      	ldrh	r3, [r7, #4]
 8021fe4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8021fe6:	2005      	movs	r0, #5
 8021fe8:	f7ff fb32 	bl	8021650 <memp_malloc>
 8021fec:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8021fee:	693b      	ldr	r3, [r7, #16]
 8021ff0:	2b00      	cmp	r3, #0
 8021ff2:	d107      	bne.n	8022004 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8021ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ff6:	2b00      	cmp	r3, #0
 8021ff8:	d002      	beq.n	8022000 <pbuf_alloc+0x74>
            pbuf_free(p);
 8021ffa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021ffc:	f000 faa8 	bl	8022550 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8022000:	2300      	movs	r3, #0
 8022002:	e0a7      	b.n	8022154 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8022004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022006:	3303      	adds	r3, #3
 8022008:	b29b      	uxth	r3, r3
 802200a:	f023 0303 	bic.w	r3, r3, #3
 802200e:	b29b      	uxth	r3, r3
 8022010:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8022014:	b29b      	uxth	r3, r3
 8022016:	8b7a      	ldrh	r2, [r7, #26]
 8022018:	4293      	cmp	r3, r2
 802201a:	bf28      	it	cs
 802201c:	4613      	movcs	r3, r2
 802201e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8022020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022022:	3310      	adds	r3, #16
 8022024:	693a      	ldr	r2, [r7, #16]
 8022026:	4413      	add	r3, r2
 8022028:	3303      	adds	r3, #3
 802202a:	f023 0303 	bic.w	r3, r3, #3
 802202e:	4618      	mov	r0, r3
 8022030:	89f9      	ldrh	r1, [r7, #14]
 8022032:	8b7a      	ldrh	r2, [r7, #26]
 8022034:	2300      	movs	r3, #0
 8022036:	9301      	str	r3, [sp, #4]
 8022038:	887b      	ldrh	r3, [r7, #2]
 802203a:	9300      	str	r3, [sp, #0]
 802203c:	460b      	mov	r3, r1
 802203e:	4601      	mov	r1, r0
 8022040:	6938      	ldr	r0, [r7, #16]
 8022042:	f7ff ff79 	bl	8021f38 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8022046:	693b      	ldr	r3, [r7, #16]
 8022048:	685b      	ldr	r3, [r3, #4]
 802204a:	f003 0303 	and.w	r3, r3, #3
 802204e:	2b00      	cmp	r3, #0
 8022050:	d006      	beq.n	8022060 <pbuf_alloc+0xd4>
 8022052:	4b42      	ldr	r3, [pc, #264]	; (802215c <pbuf_alloc+0x1d0>)
 8022054:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022058:	4941      	ldr	r1, [pc, #260]	; (8022160 <pbuf_alloc+0x1d4>)
 802205a:	4842      	ldr	r0, [pc, #264]	; (8022164 <pbuf_alloc+0x1d8>)
 802205c:	f003 ffb0 	bl	8025fc0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8022060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8022062:	3303      	adds	r3, #3
 8022064:	f023 0303 	bic.w	r3, r3, #3
 8022068:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 802206c:	d106      	bne.n	802207c <pbuf_alloc+0xf0>
 802206e:	4b3b      	ldr	r3, [pc, #236]	; (802215c <pbuf_alloc+0x1d0>)
 8022070:	f44f 7281 	mov.w	r2, #258	; 0x102
 8022074:	493c      	ldr	r1, [pc, #240]	; (8022168 <pbuf_alloc+0x1dc>)
 8022076:	483b      	ldr	r0, [pc, #236]	; (8022164 <pbuf_alloc+0x1d8>)
 8022078:	f003 ffa2 	bl	8025fc0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 802207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802207e:	2b00      	cmp	r3, #0
 8022080:	d102      	bne.n	8022088 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8022082:	693b      	ldr	r3, [r7, #16]
 8022084:	627b      	str	r3, [r7, #36]	; 0x24
 8022086:	e002      	b.n	802208e <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8022088:	69fb      	ldr	r3, [r7, #28]
 802208a:	693a      	ldr	r2, [r7, #16]
 802208c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 802208e:	693b      	ldr	r3, [r7, #16]
 8022090:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8022092:	8b7a      	ldrh	r2, [r7, #26]
 8022094:	89fb      	ldrh	r3, [r7, #14]
 8022096:	1ad3      	subs	r3, r2, r3
 8022098:	837b      	strh	r3, [r7, #26]
        offset = 0;
 802209a:	2300      	movs	r3, #0
 802209c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 802209e:	8b7b      	ldrh	r3, [r7, #26]
 80220a0:	2b00      	cmp	r3, #0
 80220a2:	d1a0      	bne.n	8021fe6 <pbuf_alloc+0x5a>
      break;
 80220a4:	e055      	b.n	8022152 <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80220a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80220a8:	3303      	adds	r3, #3
 80220aa:	b29b      	uxth	r3, r3
 80220ac:	f023 0303 	bic.w	r3, r3, #3
 80220b0:	b29a      	uxth	r2, r3
 80220b2:	88bb      	ldrh	r3, [r7, #4]
 80220b4:	3303      	adds	r3, #3
 80220b6:	b29b      	uxth	r3, r3
 80220b8:	f023 0303 	bic.w	r3, r3, #3
 80220bc:	b29b      	uxth	r3, r3
 80220be:	4413      	add	r3, r2
 80220c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80220c2:	8b3b      	ldrh	r3, [r7, #24]
 80220c4:	3310      	adds	r3, #16
 80220c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80220c8:	8b3a      	ldrh	r2, [r7, #24]
 80220ca:	88bb      	ldrh	r3, [r7, #4]
 80220cc:	3303      	adds	r3, #3
 80220ce:	f023 0303 	bic.w	r3, r3, #3
 80220d2:	429a      	cmp	r2, r3
 80220d4:	d306      	bcc.n	80220e4 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80220d6:	8afa      	ldrh	r2, [r7, #22]
 80220d8:	88bb      	ldrh	r3, [r7, #4]
 80220da:	3303      	adds	r3, #3
 80220dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80220e0:	429a      	cmp	r2, r3
 80220e2:	d201      	bcs.n	80220e8 <pbuf_alloc+0x15c>
        return NULL;
 80220e4:	2300      	movs	r3, #0
 80220e6:	e035      	b.n	8022154 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80220e8:	8afb      	ldrh	r3, [r7, #22]
 80220ea:	4618      	mov	r0, r3
 80220ec:	f7ff f920 	bl	8021330 <mem_malloc>
 80220f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80220f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d101      	bne.n	80220fc <pbuf_alloc+0x170>
        return NULL;
 80220f8:	2300      	movs	r3, #0
 80220fa:	e02b      	b.n	8022154 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80220fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80220fe:	3310      	adds	r3, #16
 8022100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8022102:	4413      	add	r3, r2
 8022104:	3303      	adds	r3, #3
 8022106:	f023 0303 	bic.w	r3, r3, #3
 802210a:	4618      	mov	r0, r3
 802210c:	88b9      	ldrh	r1, [r7, #4]
 802210e:	88ba      	ldrh	r2, [r7, #4]
 8022110:	2300      	movs	r3, #0
 8022112:	9301      	str	r3, [sp, #4]
 8022114:	887b      	ldrh	r3, [r7, #2]
 8022116:	9300      	str	r3, [sp, #0]
 8022118:	460b      	mov	r3, r1
 802211a:	4601      	mov	r1, r0
 802211c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802211e:	f7ff ff0b 	bl	8021f38 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8022122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022124:	685b      	ldr	r3, [r3, #4]
 8022126:	f003 0303 	and.w	r3, r3, #3
 802212a:	2b00      	cmp	r3, #0
 802212c:	d010      	beq.n	8022150 <pbuf_alloc+0x1c4>
 802212e:	4b0b      	ldr	r3, [pc, #44]	; (802215c <pbuf_alloc+0x1d0>)
 8022130:	f44f 7291 	mov.w	r2, #290	; 0x122
 8022134:	490d      	ldr	r1, [pc, #52]	; (802216c <pbuf_alloc+0x1e0>)
 8022136:	480b      	ldr	r0, [pc, #44]	; (8022164 <pbuf_alloc+0x1d8>)
 8022138:	f003 ff42 	bl	8025fc0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 802213c:	e008      	b.n	8022150 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 802213e:	4b07      	ldr	r3, [pc, #28]	; (802215c <pbuf_alloc+0x1d0>)
 8022140:	f240 1227 	movw	r2, #295	; 0x127
 8022144:	490a      	ldr	r1, [pc, #40]	; (8022170 <pbuf_alloc+0x1e4>)
 8022146:	4807      	ldr	r0, [pc, #28]	; (8022164 <pbuf_alloc+0x1d8>)
 8022148:	f003 ff3a 	bl	8025fc0 <iprintf>
      return NULL;
 802214c:	2300      	movs	r3, #0
 802214e:	e001      	b.n	8022154 <pbuf_alloc+0x1c8>
      break;
 8022150:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8022152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8022154:	4618      	mov	r0, r3
 8022156:	3728      	adds	r7, #40	; 0x28
 8022158:	46bd      	mov	sp, r7
 802215a:	bd80      	pop	{r7, pc}
 802215c:	0802bda0 	.word	0x0802bda0
 8022160:	0802bdd0 	.word	0x0802bdd0
 8022164:	0802be00 	.word	0x0802be00
 8022168:	0802be28 	.word	0x0802be28
 802216c:	0802be5c 	.word	0x0802be5c
 8022170:	0802be88 	.word	0x0802be88

08022174 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8022174:	b580      	push	{r7, lr}
 8022176:	b086      	sub	sp, #24
 8022178:	af02      	add	r7, sp, #8
 802217a:	6078      	str	r0, [r7, #4]
 802217c:	460b      	mov	r3, r1
 802217e:	807b      	strh	r3, [r7, #2]
 8022180:	4613      	mov	r3, r2
 8022182:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8022184:	883b      	ldrh	r3, [r7, #0]
 8022186:	2b41      	cmp	r3, #65	; 0x41
 8022188:	d009      	beq.n	802219e <pbuf_alloc_reference+0x2a>
 802218a:	883b      	ldrh	r3, [r7, #0]
 802218c:	2b01      	cmp	r3, #1
 802218e:	d006      	beq.n	802219e <pbuf_alloc_reference+0x2a>
 8022190:	4b0f      	ldr	r3, [pc, #60]	; (80221d0 <pbuf_alloc_reference+0x5c>)
 8022192:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8022196:	490f      	ldr	r1, [pc, #60]	; (80221d4 <pbuf_alloc_reference+0x60>)
 8022198:	480f      	ldr	r0, [pc, #60]	; (80221d8 <pbuf_alloc_reference+0x64>)
 802219a:	f003 ff11 	bl	8025fc0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 802219e:	2004      	movs	r0, #4
 80221a0:	f7ff fa56 	bl	8021650 <memp_malloc>
 80221a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80221a6:	68fb      	ldr	r3, [r7, #12]
 80221a8:	2b00      	cmp	r3, #0
 80221aa:	d101      	bne.n	80221b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80221ac:	2300      	movs	r3, #0
 80221ae:	e00b      	b.n	80221c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80221b0:	8879      	ldrh	r1, [r7, #2]
 80221b2:	887a      	ldrh	r2, [r7, #2]
 80221b4:	2300      	movs	r3, #0
 80221b6:	9301      	str	r3, [sp, #4]
 80221b8:	883b      	ldrh	r3, [r7, #0]
 80221ba:	9300      	str	r3, [sp, #0]
 80221bc:	460b      	mov	r3, r1
 80221be:	6879      	ldr	r1, [r7, #4]
 80221c0:	68f8      	ldr	r0, [r7, #12]
 80221c2:	f7ff feb9 	bl	8021f38 <pbuf_init_alloced_pbuf>
  return p;
 80221c6:	68fb      	ldr	r3, [r7, #12]
}
 80221c8:	4618      	mov	r0, r3
 80221ca:	3710      	adds	r7, #16
 80221cc:	46bd      	mov	sp, r7
 80221ce:	bd80      	pop	{r7, pc}
 80221d0:	0802bda0 	.word	0x0802bda0
 80221d4:	0802bea4 	.word	0x0802bea4
 80221d8:	0802be00 	.word	0x0802be00

080221dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80221dc:	b580      	push	{r7, lr}
 80221de:	b088      	sub	sp, #32
 80221e0:	af02      	add	r7, sp, #8
 80221e2:	607b      	str	r3, [r7, #4]
 80221e4:	4603      	mov	r3, r0
 80221e6:	73fb      	strb	r3, [r7, #15]
 80221e8:	460b      	mov	r3, r1
 80221ea:	81bb      	strh	r3, [r7, #12]
 80221ec:	4613      	mov	r3, r2
 80221ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80221f0:	7bfb      	ldrb	r3, [r7, #15]
 80221f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80221f4:	8a7b      	ldrh	r3, [r7, #18]
 80221f6:	3303      	adds	r3, #3
 80221f8:	f023 0203 	bic.w	r2, r3, #3
 80221fc:	89bb      	ldrh	r3, [r7, #12]
 80221fe:	441a      	add	r2, r3
 8022200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022202:	429a      	cmp	r2, r3
 8022204:	d901      	bls.n	802220a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8022206:	2300      	movs	r3, #0
 8022208:	e018      	b.n	802223c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 802220a:	6a3b      	ldr	r3, [r7, #32]
 802220c:	2b00      	cmp	r3, #0
 802220e:	d007      	beq.n	8022220 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8022210:	8a7b      	ldrh	r3, [r7, #18]
 8022212:	3303      	adds	r3, #3
 8022214:	f023 0303 	bic.w	r3, r3, #3
 8022218:	6a3a      	ldr	r2, [r7, #32]
 802221a:	4413      	add	r3, r2
 802221c:	617b      	str	r3, [r7, #20]
 802221e:	e001      	b.n	8022224 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8022220:	2300      	movs	r3, #0
 8022222:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8022224:	6878      	ldr	r0, [r7, #4]
 8022226:	89b9      	ldrh	r1, [r7, #12]
 8022228:	89ba      	ldrh	r2, [r7, #12]
 802222a:	2302      	movs	r3, #2
 802222c:	9301      	str	r3, [sp, #4]
 802222e:	897b      	ldrh	r3, [r7, #10]
 8022230:	9300      	str	r3, [sp, #0]
 8022232:	460b      	mov	r3, r1
 8022234:	6979      	ldr	r1, [r7, #20]
 8022236:	f7ff fe7f 	bl	8021f38 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 802223a:	687b      	ldr	r3, [r7, #4]
}
 802223c:	4618      	mov	r0, r3
 802223e:	3718      	adds	r7, #24
 8022240:	46bd      	mov	sp, r7
 8022242:	bd80      	pop	{r7, pc}

08022244 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8022244:	b580      	push	{r7, lr}
 8022246:	b084      	sub	sp, #16
 8022248:	af00      	add	r7, sp, #0
 802224a:	6078      	str	r0, [r7, #4]
 802224c:	460b      	mov	r3, r1
 802224e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8022250:	687b      	ldr	r3, [r7, #4]
 8022252:	2b00      	cmp	r3, #0
 8022254:	d106      	bne.n	8022264 <pbuf_realloc+0x20>
 8022256:	4b3a      	ldr	r3, [pc, #232]	; (8022340 <pbuf_realloc+0xfc>)
 8022258:	f44f 72cc 	mov.w	r2, #408	; 0x198
 802225c:	4939      	ldr	r1, [pc, #228]	; (8022344 <pbuf_realloc+0x100>)
 802225e:	483a      	ldr	r0, [pc, #232]	; (8022348 <pbuf_realloc+0x104>)
 8022260:	f003 feae 	bl	8025fc0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8022264:	687b      	ldr	r3, [r7, #4]
 8022266:	891b      	ldrh	r3, [r3, #8]
 8022268:	887a      	ldrh	r2, [r7, #2]
 802226a:	429a      	cmp	r2, r3
 802226c:	d263      	bcs.n	8022336 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 802226e:	687b      	ldr	r3, [r7, #4]
 8022270:	891a      	ldrh	r2, [r3, #8]
 8022272:	887b      	ldrh	r3, [r7, #2]
 8022274:	1ad3      	subs	r3, r2, r3
 8022276:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8022278:	887b      	ldrh	r3, [r7, #2]
 802227a:	817b      	strh	r3, [r7, #10]
  q = p;
 802227c:	687b      	ldr	r3, [r7, #4]
 802227e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8022280:	e018      	b.n	80222b4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8022282:	68fb      	ldr	r3, [r7, #12]
 8022284:	895b      	ldrh	r3, [r3, #10]
 8022286:	897a      	ldrh	r2, [r7, #10]
 8022288:	1ad3      	subs	r3, r2, r3
 802228a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 802228c:	68fb      	ldr	r3, [r7, #12]
 802228e:	891a      	ldrh	r2, [r3, #8]
 8022290:	893b      	ldrh	r3, [r7, #8]
 8022292:	1ad3      	subs	r3, r2, r3
 8022294:	b29a      	uxth	r2, r3
 8022296:	68fb      	ldr	r3, [r7, #12]
 8022298:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 802229a:	68fb      	ldr	r3, [r7, #12]
 802229c:	681b      	ldr	r3, [r3, #0]
 802229e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	2b00      	cmp	r3, #0
 80222a4:	d106      	bne.n	80222b4 <pbuf_realloc+0x70>
 80222a6:	4b26      	ldr	r3, [pc, #152]	; (8022340 <pbuf_realloc+0xfc>)
 80222a8:	f240 12af 	movw	r2, #431	; 0x1af
 80222ac:	4927      	ldr	r1, [pc, #156]	; (802234c <pbuf_realloc+0x108>)
 80222ae:	4826      	ldr	r0, [pc, #152]	; (8022348 <pbuf_realloc+0x104>)
 80222b0:	f003 fe86 	bl	8025fc0 <iprintf>
  while (rem_len > q->len) {
 80222b4:	68fb      	ldr	r3, [r7, #12]
 80222b6:	895b      	ldrh	r3, [r3, #10]
 80222b8:	897a      	ldrh	r2, [r7, #10]
 80222ba:	429a      	cmp	r2, r3
 80222bc:	d8e1      	bhi.n	8022282 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80222be:	68fb      	ldr	r3, [r7, #12]
 80222c0:	7b1b      	ldrb	r3, [r3, #12]
 80222c2:	f003 030f 	and.w	r3, r3, #15
 80222c6:	2b00      	cmp	r3, #0
 80222c8:	d121      	bne.n	802230e <pbuf_realloc+0xca>
 80222ca:	68fb      	ldr	r3, [r7, #12]
 80222cc:	895b      	ldrh	r3, [r3, #10]
 80222ce:	897a      	ldrh	r2, [r7, #10]
 80222d0:	429a      	cmp	r2, r3
 80222d2:	d01c      	beq.n	802230e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80222d4:	68fb      	ldr	r3, [r7, #12]
 80222d6:	7b5b      	ldrb	r3, [r3, #13]
 80222d8:	f003 0302 	and.w	r3, r3, #2
 80222dc:	2b00      	cmp	r3, #0
 80222de:	d116      	bne.n	802230e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80222e0:	68fb      	ldr	r3, [r7, #12]
 80222e2:	685a      	ldr	r2, [r3, #4]
 80222e4:	68fb      	ldr	r3, [r7, #12]
 80222e6:	1ad3      	subs	r3, r2, r3
 80222e8:	b29a      	uxth	r2, r3
 80222ea:	897b      	ldrh	r3, [r7, #10]
 80222ec:	4413      	add	r3, r2
 80222ee:	b29b      	uxth	r3, r3
 80222f0:	4619      	mov	r1, r3
 80222f2:	68f8      	ldr	r0, [r7, #12]
 80222f4:	f7fe ff20 	bl	8021138 <mem_trim>
 80222f8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80222fa:	68fb      	ldr	r3, [r7, #12]
 80222fc:	2b00      	cmp	r3, #0
 80222fe:	d106      	bne.n	802230e <pbuf_realloc+0xca>
 8022300:	4b0f      	ldr	r3, [pc, #60]	; (8022340 <pbuf_realloc+0xfc>)
 8022302:	f240 12bd 	movw	r2, #445	; 0x1bd
 8022306:	4912      	ldr	r1, [pc, #72]	; (8022350 <pbuf_realloc+0x10c>)
 8022308:	480f      	ldr	r0, [pc, #60]	; (8022348 <pbuf_realloc+0x104>)
 802230a:	f003 fe59 	bl	8025fc0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 802230e:	68fb      	ldr	r3, [r7, #12]
 8022310:	897a      	ldrh	r2, [r7, #10]
 8022312:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8022314:	68fb      	ldr	r3, [r7, #12]
 8022316:	895a      	ldrh	r2, [r3, #10]
 8022318:	68fb      	ldr	r3, [r7, #12]
 802231a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 802231c:	68fb      	ldr	r3, [r7, #12]
 802231e:	681b      	ldr	r3, [r3, #0]
 8022320:	2b00      	cmp	r3, #0
 8022322:	d004      	beq.n	802232e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8022324:	68fb      	ldr	r3, [r7, #12]
 8022326:	681b      	ldr	r3, [r3, #0]
 8022328:	4618      	mov	r0, r3
 802232a:	f000 f911 	bl	8022550 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 802232e:	68fb      	ldr	r3, [r7, #12]
 8022330:	2200      	movs	r2, #0
 8022332:	601a      	str	r2, [r3, #0]
 8022334:	e000      	b.n	8022338 <pbuf_realloc+0xf4>
    return;
 8022336:	bf00      	nop

}
 8022338:	3710      	adds	r7, #16
 802233a:	46bd      	mov	sp, r7
 802233c:	bd80      	pop	{r7, pc}
 802233e:	bf00      	nop
 8022340:	0802bda0 	.word	0x0802bda0
 8022344:	0802beb8 	.word	0x0802beb8
 8022348:	0802be00 	.word	0x0802be00
 802234c:	0802bed0 	.word	0x0802bed0
 8022350:	0802bee8 	.word	0x0802bee8

08022354 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8022354:	b580      	push	{r7, lr}
 8022356:	b086      	sub	sp, #24
 8022358:	af00      	add	r7, sp, #0
 802235a:	60f8      	str	r0, [r7, #12]
 802235c:	60b9      	str	r1, [r7, #8]
 802235e:	4613      	mov	r3, r2
 8022360:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8022362:	68fb      	ldr	r3, [r7, #12]
 8022364:	2b00      	cmp	r3, #0
 8022366:	d106      	bne.n	8022376 <pbuf_add_header_impl+0x22>
 8022368:	4b2b      	ldr	r3, [pc, #172]	; (8022418 <pbuf_add_header_impl+0xc4>)
 802236a:	f240 12df 	movw	r2, #479	; 0x1df
 802236e:	492b      	ldr	r1, [pc, #172]	; (802241c <pbuf_add_header_impl+0xc8>)
 8022370:	482b      	ldr	r0, [pc, #172]	; (8022420 <pbuf_add_header_impl+0xcc>)
 8022372:	f003 fe25 	bl	8025fc0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8022376:	68fb      	ldr	r3, [r7, #12]
 8022378:	2b00      	cmp	r3, #0
 802237a:	d003      	beq.n	8022384 <pbuf_add_header_impl+0x30>
 802237c:	68bb      	ldr	r3, [r7, #8]
 802237e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8022382:	d301      	bcc.n	8022388 <pbuf_add_header_impl+0x34>
    return 1;
 8022384:	2301      	movs	r3, #1
 8022386:	e043      	b.n	8022410 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8022388:	68bb      	ldr	r3, [r7, #8]
 802238a:	2b00      	cmp	r3, #0
 802238c:	d101      	bne.n	8022392 <pbuf_add_header_impl+0x3e>
    return 0;
 802238e:	2300      	movs	r3, #0
 8022390:	e03e      	b.n	8022410 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8022392:	68bb      	ldr	r3, [r7, #8]
 8022394:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8022396:	68fb      	ldr	r3, [r7, #12]
 8022398:	891a      	ldrh	r2, [r3, #8]
 802239a:	8a7b      	ldrh	r3, [r7, #18]
 802239c:	4413      	add	r3, r2
 802239e:	b29b      	uxth	r3, r3
 80223a0:	8a7a      	ldrh	r2, [r7, #18]
 80223a2:	429a      	cmp	r2, r3
 80223a4:	d901      	bls.n	80223aa <pbuf_add_header_impl+0x56>
    return 1;
 80223a6:	2301      	movs	r3, #1
 80223a8:	e032      	b.n	8022410 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80223aa:	68fb      	ldr	r3, [r7, #12]
 80223ac:	7b1b      	ldrb	r3, [r3, #12]
 80223ae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80223b0:	8a3b      	ldrh	r3, [r7, #16]
 80223b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80223b6:	2b00      	cmp	r3, #0
 80223b8:	d00c      	beq.n	80223d4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80223ba:	68fb      	ldr	r3, [r7, #12]
 80223bc:	685a      	ldr	r2, [r3, #4]
 80223be:	68bb      	ldr	r3, [r7, #8]
 80223c0:	425b      	negs	r3, r3
 80223c2:	4413      	add	r3, r2
 80223c4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80223c6:	68fb      	ldr	r3, [r7, #12]
 80223c8:	3310      	adds	r3, #16
 80223ca:	697a      	ldr	r2, [r7, #20]
 80223cc:	429a      	cmp	r2, r3
 80223ce:	d20d      	bcs.n	80223ec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80223d0:	2301      	movs	r3, #1
 80223d2:	e01d      	b.n	8022410 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80223d4:	79fb      	ldrb	r3, [r7, #7]
 80223d6:	2b00      	cmp	r3, #0
 80223d8:	d006      	beq.n	80223e8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80223da:	68fb      	ldr	r3, [r7, #12]
 80223dc:	685a      	ldr	r2, [r3, #4]
 80223de:	68bb      	ldr	r3, [r7, #8]
 80223e0:	425b      	negs	r3, r3
 80223e2:	4413      	add	r3, r2
 80223e4:	617b      	str	r3, [r7, #20]
 80223e6:	e001      	b.n	80223ec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80223e8:	2301      	movs	r3, #1
 80223ea:	e011      	b.n	8022410 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80223ec:	68fb      	ldr	r3, [r7, #12]
 80223ee:	697a      	ldr	r2, [r7, #20]
 80223f0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80223f2:	68fb      	ldr	r3, [r7, #12]
 80223f4:	895a      	ldrh	r2, [r3, #10]
 80223f6:	8a7b      	ldrh	r3, [r7, #18]
 80223f8:	4413      	add	r3, r2
 80223fa:	b29a      	uxth	r2, r3
 80223fc:	68fb      	ldr	r3, [r7, #12]
 80223fe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8022400:	68fb      	ldr	r3, [r7, #12]
 8022402:	891a      	ldrh	r2, [r3, #8]
 8022404:	8a7b      	ldrh	r3, [r7, #18]
 8022406:	4413      	add	r3, r2
 8022408:	b29a      	uxth	r2, r3
 802240a:	68fb      	ldr	r3, [r7, #12]
 802240c:	811a      	strh	r2, [r3, #8]


  return 0;
 802240e:	2300      	movs	r3, #0
}
 8022410:	4618      	mov	r0, r3
 8022412:	3718      	adds	r7, #24
 8022414:	46bd      	mov	sp, r7
 8022416:	bd80      	pop	{r7, pc}
 8022418:	0802bda0 	.word	0x0802bda0
 802241c:	0802bf04 	.word	0x0802bf04
 8022420:	0802be00 	.word	0x0802be00

08022424 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8022424:	b580      	push	{r7, lr}
 8022426:	b082      	sub	sp, #8
 8022428:	af00      	add	r7, sp, #0
 802242a:	6078      	str	r0, [r7, #4]
 802242c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 802242e:	2200      	movs	r2, #0
 8022430:	6839      	ldr	r1, [r7, #0]
 8022432:	6878      	ldr	r0, [r7, #4]
 8022434:	f7ff ff8e 	bl	8022354 <pbuf_add_header_impl>
 8022438:	4603      	mov	r3, r0
}
 802243a:	4618      	mov	r0, r3
 802243c:	3708      	adds	r7, #8
 802243e:	46bd      	mov	sp, r7
 8022440:	bd80      	pop	{r7, pc}
	...

08022444 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8022444:	b580      	push	{r7, lr}
 8022446:	b084      	sub	sp, #16
 8022448:	af00      	add	r7, sp, #0
 802244a:	6078      	str	r0, [r7, #4]
 802244c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 802244e:	687b      	ldr	r3, [r7, #4]
 8022450:	2b00      	cmp	r3, #0
 8022452:	d106      	bne.n	8022462 <pbuf_remove_header+0x1e>
 8022454:	4b20      	ldr	r3, [pc, #128]	; (80224d8 <pbuf_remove_header+0x94>)
 8022456:	f240 224b 	movw	r2, #587	; 0x24b
 802245a:	4920      	ldr	r1, [pc, #128]	; (80224dc <pbuf_remove_header+0x98>)
 802245c:	4820      	ldr	r0, [pc, #128]	; (80224e0 <pbuf_remove_header+0x9c>)
 802245e:	f003 fdaf 	bl	8025fc0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8022462:	687b      	ldr	r3, [r7, #4]
 8022464:	2b00      	cmp	r3, #0
 8022466:	d003      	beq.n	8022470 <pbuf_remove_header+0x2c>
 8022468:	683b      	ldr	r3, [r7, #0]
 802246a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802246e:	d301      	bcc.n	8022474 <pbuf_remove_header+0x30>
    return 1;
 8022470:	2301      	movs	r3, #1
 8022472:	e02c      	b.n	80224ce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8022474:	683b      	ldr	r3, [r7, #0]
 8022476:	2b00      	cmp	r3, #0
 8022478:	d101      	bne.n	802247e <pbuf_remove_header+0x3a>
    return 0;
 802247a:	2300      	movs	r3, #0
 802247c:	e027      	b.n	80224ce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 802247e:	683b      	ldr	r3, [r7, #0]
 8022480:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8022482:	687b      	ldr	r3, [r7, #4]
 8022484:	895b      	ldrh	r3, [r3, #10]
 8022486:	89fa      	ldrh	r2, [r7, #14]
 8022488:	429a      	cmp	r2, r3
 802248a:	d908      	bls.n	802249e <pbuf_remove_header+0x5a>
 802248c:	4b12      	ldr	r3, [pc, #72]	; (80224d8 <pbuf_remove_header+0x94>)
 802248e:	f240 2255 	movw	r2, #597	; 0x255
 8022492:	4914      	ldr	r1, [pc, #80]	; (80224e4 <pbuf_remove_header+0xa0>)
 8022494:	4812      	ldr	r0, [pc, #72]	; (80224e0 <pbuf_remove_header+0x9c>)
 8022496:	f003 fd93 	bl	8025fc0 <iprintf>
 802249a:	2301      	movs	r3, #1
 802249c:	e017      	b.n	80224ce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 802249e:	687b      	ldr	r3, [r7, #4]
 80224a0:	685b      	ldr	r3, [r3, #4]
 80224a2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80224a4:	687b      	ldr	r3, [r7, #4]
 80224a6:	685a      	ldr	r2, [r3, #4]
 80224a8:	683b      	ldr	r3, [r7, #0]
 80224aa:	441a      	add	r2, r3
 80224ac:	687b      	ldr	r3, [r7, #4]
 80224ae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80224b0:	687b      	ldr	r3, [r7, #4]
 80224b2:	895a      	ldrh	r2, [r3, #10]
 80224b4:	89fb      	ldrh	r3, [r7, #14]
 80224b6:	1ad3      	subs	r3, r2, r3
 80224b8:	b29a      	uxth	r2, r3
 80224ba:	687b      	ldr	r3, [r7, #4]
 80224bc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80224be:	687b      	ldr	r3, [r7, #4]
 80224c0:	891a      	ldrh	r2, [r3, #8]
 80224c2:	89fb      	ldrh	r3, [r7, #14]
 80224c4:	1ad3      	subs	r3, r2, r3
 80224c6:	b29a      	uxth	r2, r3
 80224c8:	687b      	ldr	r3, [r7, #4]
 80224ca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80224cc:	2300      	movs	r3, #0
}
 80224ce:	4618      	mov	r0, r3
 80224d0:	3710      	adds	r7, #16
 80224d2:	46bd      	mov	sp, r7
 80224d4:	bd80      	pop	{r7, pc}
 80224d6:	bf00      	nop
 80224d8:	0802bda0 	.word	0x0802bda0
 80224dc:	0802bf04 	.word	0x0802bf04
 80224e0:	0802be00 	.word	0x0802be00
 80224e4:	0802bf10 	.word	0x0802bf10

080224e8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80224e8:	b580      	push	{r7, lr}
 80224ea:	b082      	sub	sp, #8
 80224ec:	af00      	add	r7, sp, #0
 80224ee:	6078      	str	r0, [r7, #4]
 80224f0:	460b      	mov	r3, r1
 80224f2:	807b      	strh	r3, [r7, #2]
 80224f4:	4613      	mov	r3, r2
 80224f6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80224f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80224fc:	2b00      	cmp	r3, #0
 80224fe:	da08      	bge.n	8022512 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8022500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022504:	425b      	negs	r3, r3
 8022506:	4619      	mov	r1, r3
 8022508:	6878      	ldr	r0, [r7, #4]
 802250a:	f7ff ff9b 	bl	8022444 <pbuf_remove_header>
 802250e:	4603      	mov	r3, r0
 8022510:	e007      	b.n	8022522 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8022512:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8022516:	787a      	ldrb	r2, [r7, #1]
 8022518:	4619      	mov	r1, r3
 802251a:	6878      	ldr	r0, [r7, #4]
 802251c:	f7ff ff1a 	bl	8022354 <pbuf_add_header_impl>
 8022520:	4603      	mov	r3, r0
  }
}
 8022522:	4618      	mov	r0, r3
 8022524:	3708      	adds	r7, #8
 8022526:	46bd      	mov	sp, r7
 8022528:	bd80      	pop	{r7, pc}

0802252a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 802252a:	b580      	push	{r7, lr}
 802252c:	b082      	sub	sp, #8
 802252e:	af00      	add	r7, sp, #0
 8022530:	6078      	str	r0, [r7, #4]
 8022532:	460b      	mov	r3, r1
 8022534:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8022536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 802253a:	2201      	movs	r2, #1
 802253c:	4619      	mov	r1, r3
 802253e:	6878      	ldr	r0, [r7, #4]
 8022540:	f7ff ffd2 	bl	80224e8 <pbuf_header_impl>
 8022544:	4603      	mov	r3, r0
}
 8022546:	4618      	mov	r0, r3
 8022548:	3708      	adds	r7, #8
 802254a:	46bd      	mov	sp, r7
 802254c:	bd80      	pop	{r7, pc}
	...

08022550 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8022550:	b580      	push	{r7, lr}
 8022552:	b086      	sub	sp, #24
 8022554:	af00      	add	r7, sp, #0
 8022556:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8022558:	687b      	ldr	r3, [r7, #4]
 802255a:	2b00      	cmp	r3, #0
 802255c:	d10b      	bne.n	8022576 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 802255e:	687b      	ldr	r3, [r7, #4]
 8022560:	2b00      	cmp	r3, #0
 8022562:	d106      	bne.n	8022572 <pbuf_free+0x22>
 8022564:	4b38      	ldr	r3, [pc, #224]	; (8022648 <pbuf_free+0xf8>)
 8022566:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 802256a:	4938      	ldr	r1, [pc, #224]	; (802264c <pbuf_free+0xfc>)
 802256c:	4838      	ldr	r0, [pc, #224]	; (8022650 <pbuf_free+0x100>)
 802256e:	f003 fd27 	bl	8025fc0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8022572:	2300      	movs	r3, #0
 8022574:	e063      	b.n	802263e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8022576:	2300      	movs	r3, #0
 8022578:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 802257a:	e05c      	b.n	8022636 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 802257c:	687b      	ldr	r3, [r7, #4]
 802257e:	7b9b      	ldrb	r3, [r3, #14]
 8022580:	2b00      	cmp	r3, #0
 8022582:	d106      	bne.n	8022592 <pbuf_free+0x42>
 8022584:	4b30      	ldr	r3, [pc, #192]	; (8022648 <pbuf_free+0xf8>)
 8022586:	f240 22f1 	movw	r2, #753	; 0x2f1
 802258a:	4932      	ldr	r1, [pc, #200]	; (8022654 <pbuf_free+0x104>)
 802258c:	4830      	ldr	r0, [pc, #192]	; (8022650 <pbuf_free+0x100>)
 802258e:	f003 fd17 	bl	8025fc0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8022592:	687b      	ldr	r3, [r7, #4]
 8022594:	7b9b      	ldrb	r3, [r3, #14]
 8022596:	3b01      	subs	r3, #1
 8022598:	b2da      	uxtb	r2, r3
 802259a:	687b      	ldr	r3, [r7, #4]
 802259c:	739a      	strb	r2, [r3, #14]
 802259e:	687b      	ldr	r3, [r7, #4]
 80225a0:	7b9b      	ldrb	r3, [r3, #14]
 80225a2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80225a4:	7dbb      	ldrb	r3, [r7, #22]
 80225a6:	2b00      	cmp	r3, #0
 80225a8:	d143      	bne.n	8022632 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80225aa:	687b      	ldr	r3, [r7, #4]
 80225ac:	681b      	ldr	r3, [r3, #0]
 80225ae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80225b0:	687b      	ldr	r3, [r7, #4]
 80225b2:	7b1b      	ldrb	r3, [r3, #12]
 80225b4:	f003 030f 	and.w	r3, r3, #15
 80225b8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80225ba:	687b      	ldr	r3, [r7, #4]
 80225bc:	7b5b      	ldrb	r3, [r3, #13]
 80225be:	f003 0302 	and.w	r3, r3, #2
 80225c2:	2b00      	cmp	r3, #0
 80225c4:	d011      	beq.n	80225ea <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80225c6:	687b      	ldr	r3, [r7, #4]
 80225c8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80225ca:	68bb      	ldr	r3, [r7, #8]
 80225cc:	691b      	ldr	r3, [r3, #16]
 80225ce:	2b00      	cmp	r3, #0
 80225d0:	d106      	bne.n	80225e0 <pbuf_free+0x90>
 80225d2:	4b1d      	ldr	r3, [pc, #116]	; (8022648 <pbuf_free+0xf8>)
 80225d4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80225d8:	491f      	ldr	r1, [pc, #124]	; (8022658 <pbuf_free+0x108>)
 80225da:	481d      	ldr	r0, [pc, #116]	; (8022650 <pbuf_free+0x100>)
 80225dc:	f003 fcf0 	bl	8025fc0 <iprintf>
        pc->custom_free_function(p);
 80225e0:	68bb      	ldr	r3, [r7, #8]
 80225e2:	691b      	ldr	r3, [r3, #16]
 80225e4:	6878      	ldr	r0, [r7, #4]
 80225e6:	4798      	blx	r3
 80225e8:	e01d      	b.n	8022626 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80225ea:	7bfb      	ldrb	r3, [r7, #15]
 80225ec:	2b02      	cmp	r3, #2
 80225ee:	d104      	bne.n	80225fa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80225f0:	6879      	ldr	r1, [r7, #4]
 80225f2:	2005      	movs	r0, #5
 80225f4:	f7ff f89c 	bl	8021730 <memp_free>
 80225f8:	e015      	b.n	8022626 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80225fa:	7bfb      	ldrb	r3, [r7, #15]
 80225fc:	2b01      	cmp	r3, #1
 80225fe:	d104      	bne.n	802260a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8022600:	6879      	ldr	r1, [r7, #4]
 8022602:	2004      	movs	r0, #4
 8022604:	f7ff f894 	bl	8021730 <memp_free>
 8022608:	e00d      	b.n	8022626 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 802260a:	7bfb      	ldrb	r3, [r7, #15]
 802260c:	2b00      	cmp	r3, #0
 802260e:	d103      	bne.n	8022618 <pbuf_free+0xc8>
          mem_free(p);
 8022610:	6878      	ldr	r0, [r7, #4]
 8022612:	f7fe fd27 	bl	8021064 <mem_free>
 8022616:	e006      	b.n	8022626 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8022618:	4b0b      	ldr	r3, [pc, #44]	; (8022648 <pbuf_free+0xf8>)
 802261a:	f240 320f 	movw	r2, #783	; 0x30f
 802261e:	490f      	ldr	r1, [pc, #60]	; (802265c <pbuf_free+0x10c>)
 8022620:	480b      	ldr	r0, [pc, #44]	; (8022650 <pbuf_free+0x100>)
 8022622:	f003 fccd 	bl	8025fc0 <iprintf>
        }
      }
      count++;
 8022626:	7dfb      	ldrb	r3, [r7, #23]
 8022628:	3301      	adds	r3, #1
 802262a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 802262c:	693b      	ldr	r3, [r7, #16]
 802262e:	607b      	str	r3, [r7, #4]
 8022630:	e001      	b.n	8022636 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8022632:	2300      	movs	r3, #0
 8022634:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8022636:	687b      	ldr	r3, [r7, #4]
 8022638:	2b00      	cmp	r3, #0
 802263a:	d19f      	bne.n	802257c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 802263c:	7dfb      	ldrb	r3, [r7, #23]
}
 802263e:	4618      	mov	r0, r3
 8022640:	3718      	adds	r7, #24
 8022642:	46bd      	mov	sp, r7
 8022644:	bd80      	pop	{r7, pc}
 8022646:	bf00      	nop
 8022648:	0802bda0 	.word	0x0802bda0
 802264c:	0802bf04 	.word	0x0802bf04
 8022650:	0802be00 	.word	0x0802be00
 8022654:	0802bf30 	.word	0x0802bf30
 8022658:	0802bf48 	.word	0x0802bf48
 802265c:	0802bf6c 	.word	0x0802bf6c

08022660 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8022660:	b480      	push	{r7}
 8022662:	b085      	sub	sp, #20
 8022664:	af00      	add	r7, sp, #0
 8022666:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8022668:	2300      	movs	r3, #0
 802266a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 802266c:	e005      	b.n	802267a <pbuf_clen+0x1a>
    ++len;
 802266e:	89fb      	ldrh	r3, [r7, #14]
 8022670:	3301      	adds	r3, #1
 8022672:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8022674:	687b      	ldr	r3, [r7, #4]
 8022676:	681b      	ldr	r3, [r3, #0]
 8022678:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 802267a:	687b      	ldr	r3, [r7, #4]
 802267c:	2b00      	cmp	r3, #0
 802267e:	d1f6      	bne.n	802266e <pbuf_clen+0xe>
  }
  return len;
 8022680:	89fb      	ldrh	r3, [r7, #14]
}
 8022682:	4618      	mov	r0, r3
 8022684:	3714      	adds	r7, #20
 8022686:	46bd      	mov	sp, r7
 8022688:	f85d 7b04 	ldr.w	r7, [sp], #4
 802268c:	4770      	bx	lr
	...

08022690 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8022690:	b580      	push	{r7, lr}
 8022692:	b082      	sub	sp, #8
 8022694:	af00      	add	r7, sp, #0
 8022696:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8022698:	687b      	ldr	r3, [r7, #4]
 802269a:	2b00      	cmp	r3, #0
 802269c:	d010      	beq.n	80226c0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 802269e:	687b      	ldr	r3, [r7, #4]
 80226a0:	7b9b      	ldrb	r3, [r3, #14]
 80226a2:	3301      	adds	r3, #1
 80226a4:	b2da      	uxtb	r2, r3
 80226a6:	687b      	ldr	r3, [r7, #4]
 80226a8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80226aa:	687b      	ldr	r3, [r7, #4]
 80226ac:	7b9b      	ldrb	r3, [r3, #14]
 80226ae:	2b00      	cmp	r3, #0
 80226b0:	d106      	bne.n	80226c0 <pbuf_ref+0x30>
 80226b2:	4b05      	ldr	r3, [pc, #20]	; (80226c8 <pbuf_ref+0x38>)
 80226b4:	f240 3242 	movw	r2, #834	; 0x342
 80226b8:	4904      	ldr	r1, [pc, #16]	; (80226cc <pbuf_ref+0x3c>)
 80226ba:	4805      	ldr	r0, [pc, #20]	; (80226d0 <pbuf_ref+0x40>)
 80226bc:	f003 fc80 	bl	8025fc0 <iprintf>
  }
}
 80226c0:	bf00      	nop
 80226c2:	3708      	adds	r7, #8
 80226c4:	46bd      	mov	sp, r7
 80226c6:	bd80      	pop	{r7, pc}
 80226c8:	0802bda0 	.word	0x0802bda0
 80226cc:	0802bf80 	.word	0x0802bf80
 80226d0:	0802be00 	.word	0x0802be00

080226d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80226d4:	b580      	push	{r7, lr}
 80226d6:	b084      	sub	sp, #16
 80226d8:	af00      	add	r7, sp, #0
 80226da:	6078      	str	r0, [r7, #4]
 80226dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80226de:	687b      	ldr	r3, [r7, #4]
 80226e0:	2b00      	cmp	r3, #0
 80226e2:	d002      	beq.n	80226ea <pbuf_cat+0x16>
 80226e4:	683b      	ldr	r3, [r7, #0]
 80226e6:	2b00      	cmp	r3, #0
 80226e8:	d107      	bne.n	80226fa <pbuf_cat+0x26>
 80226ea:	4b20      	ldr	r3, [pc, #128]	; (802276c <pbuf_cat+0x98>)
 80226ec:	f240 3259 	movw	r2, #857	; 0x359
 80226f0:	491f      	ldr	r1, [pc, #124]	; (8022770 <pbuf_cat+0x9c>)
 80226f2:	4820      	ldr	r0, [pc, #128]	; (8022774 <pbuf_cat+0xa0>)
 80226f4:	f003 fc64 	bl	8025fc0 <iprintf>
 80226f8:	e034      	b.n	8022764 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80226fa:	687b      	ldr	r3, [r7, #4]
 80226fc:	60fb      	str	r3, [r7, #12]
 80226fe:	e00a      	b.n	8022716 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8022700:	68fb      	ldr	r3, [r7, #12]
 8022702:	891a      	ldrh	r2, [r3, #8]
 8022704:	683b      	ldr	r3, [r7, #0]
 8022706:	891b      	ldrh	r3, [r3, #8]
 8022708:	4413      	add	r3, r2
 802270a:	b29a      	uxth	r2, r3
 802270c:	68fb      	ldr	r3, [r7, #12]
 802270e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8022710:	68fb      	ldr	r3, [r7, #12]
 8022712:	681b      	ldr	r3, [r3, #0]
 8022714:	60fb      	str	r3, [r7, #12]
 8022716:	68fb      	ldr	r3, [r7, #12]
 8022718:	681b      	ldr	r3, [r3, #0]
 802271a:	2b00      	cmp	r3, #0
 802271c:	d1f0      	bne.n	8022700 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 802271e:	68fb      	ldr	r3, [r7, #12]
 8022720:	891a      	ldrh	r2, [r3, #8]
 8022722:	68fb      	ldr	r3, [r7, #12]
 8022724:	895b      	ldrh	r3, [r3, #10]
 8022726:	429a      	cmp	r2, r3
 8022728:	d006      	beq.n	8022738 <pbuf_cat+0x64>
 802272a:	4b10      	ldr	r3, [pc, #64]	; (802276c <pbuf_cat+0x98>)
 802272c:	f240 3262 	movw	r2, #866	; 0x362
 8022730:	4911      	ldr	r1, [pc, #68]	; (8022778 <pbuf_cat+0xa4>)
 8022732:	4810      	ldr	r0, [pc, #64]	; (8022774 <pbuf_cat+0xa0>)
 8022734:	f003 fc44 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8022738:	68fb      	ldr	r3, [r7, #12]
 802273a:	681b      	ldr	r3, [r3, #0]
 802273c:	2b00      	cmp	r3, #0
 802273e:	d006      	beq.n	802274e <pbuf_cat+0x7a>
 8022740:	4b0a      	ldr	r3, [pc, #40]	; (802276c <pbuf_cat+0x98>)
 8022742:	f240 3263 	movw	r2, #867	; 0x363
 8022746:	490d      	ldr	r1, [pc, #52]	; (802277c <pbuf_cat+0xa8>)
 8022748:	480a      	ldr	r0, [pc, #40]	; (8022774 <pbuf_cat+0xa0>)
 802274a:	f003 fc39 	bl	8025fc0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 802274e:	68fb      	ldr	r3, [r7, #12]
 8022750:	891a      	ldrh	r2, [r3, #8]
 8022752:	683b      	ldr	r3, [r7, #0]
 8022754:	891b      	ldrh	r3, [r3, #8]
 8022756:	4413      	add	r3, r2
 8022758:	b29a      	uxth	r2, r3
 802275a:	68fb      	ldr	r3, [r7, #12]
 802275c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 802275e:	68fb      	ldr	r3, [r7, #12]
 8022760:	683a      	ldr	r2, [r7, #0]
 8022762:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8022764:	3710      	adds	r7, #16
 8022766:	46bd      	mov	sp, r7
 8022768:	bd80      	pop	{r7, pc}
 802276a:	bf00      	nop
 802276c:	0802bda0 	.word	0x0802bda0
 8022770:	0802bf94 	.word	0x0802bf94
 8022774:	0802be00 	.word	0x0802be00
 8022778:	0802bfcc 	.word	0x0802bfcc
 802277c:	0802bffc 	.word	0x0802bffc

08022780 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8022780:	b580      	push	{r7, lr}
 8022782:	b082      	sub	sp, #8
 8022784:	af00      	add	r7, sp, #0
 8022786:	6078      	str	r0, [r7, #4]
 8022788:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 802278a:	6839      	ldr	r1, [r7, #0]
 802278c:	6878      	ldr	r0, [r7, #4]
 802278e:	f7ff ffa1 	bl	80226d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8022792:	6838      	ldr	r0, [r7, #0]
 8022794:	f7ff ff7c 	bl	8022690 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8022798:	bf00      	nop
 802279a:	3708      	adds	r7, #8
 802279c:	46bd      	mov	sp, r7
 802279e:	bd80      	pop	{r7, pc}

080227a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80227a0:	b580      	push	{r7, lr}
 80227a2:	b086      	sub	sp, #24
 80227a4:	af00      	add	r7, sp, #0
 80227a6:	6078      	str	r0, [r7, #4]
 80227a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80227aa:	2300      	movs	r3, #0
 80227ac:	617b      	str	r3, [r7, #20]
 80227ae:	2300      	movs	r3, #0
 80227b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	2b00      	cmp	r3, #0
 80227b6:	d008      	beq.n	80227ca <pbuf_copy+0x2a>
 80227b8:	683b      	ldr	r3, [r7, #0]
 80227ba:	2b00      	cmp	r3, #0
 80227bc:	d005      	beq.n	80227ca <pbuf_copy+0x2a>
 80227be:	687b      	ldr	r3, [r7, #4]
 80227c0:	891a      	ldrh	r2, [r3, #8]
 80227c2:	683b      	ldr	r3, [r7, #0]
 80227c4:	891b      	ldrh	r3, [r3, #8]
 80227c6:	429a      	cmp	r2, r3
 80227c8:	d209      	bcs.n	80227de <pbuf_copy+0x3e>
 80227ca:	4b57      	ldr	r3, [pc, #348]	; (8022928 <pbuf_copy+0x188>)
 80227cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 80227d0:	4956      	ldr	r1, [pc, #344]	; (802292c <pbuf_copy+0x18c>)
 80227d2:	4857      	ldr	r0, [pc, #348]	; (8022930 <pbuf_copy+0x190>)
 80227d4:	f003 fbf4 	bl	8025fc0 <iprintf>
 80227d8:	f06f 030f 	mvn.w	r3, #15
 80227dc:	e09f      	b.n	802291e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80227de:	687b      	ldr	r3, [r7, #4]
 80227e0:	895b      	ldrh	r3, [r3, #10]
 80227e2:	461a      	mov	r2, r3
 80227e4:	697b      	ldr	r3, [r7, #20]
 80227e6:	1ad2      	subs	r2, r2, r3
 80227e8:	683b      	ldr	r3, [r7, #0]
 80227ea:	895b      	ldrh	r3, [r3, #10]
 80227ec:	4619      	mov	r1, r3
 80227ee:	693b      	ldr	r3, [r7, #16]
 80227f0:	1acb      	subs	r3, r1, r3
 80227f2:	429a      	cmp	r2, r3
 80227f4:	d306      	bcc.n	8022804 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80227f6:	683b      	ldr	r3, [r7, #0]
 80227f8:	895b      	ldrh	r3, [r3, #10]
 80227fa:	461a      	mov	r2, r3
 80227fc:	693b      	ldr	r3, [r7, #16]
 80227fe:	1ad3      	subs	r3, r2, r3
 8022800:	60fb      	str	r3, [r7, #12]
 8022802:	e005      	b.n	8022810 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8022804:	687b      	ldr	r3, [r7, #4]
 8022806:	895b      	ldrh	r3, [r3, #10]
 8022808:	461a      	mov	r2, r3
 802280a:	697b      	ldr	r3, [r7, #20]
 802280c:	1ad3      	subs	r3, r2, r3
 802280e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8022810:	687b      	ldr	r3, [r7, #4]
 8022812:	685a      	ldr	r2, [r3, #4]
 8022814:	697b      	ldr	r3, [r7, #20]
 8022816:	18d0      	adds	r0, r2, r3
 8022818:	683b      	ldr	r3, [r7, #0]
 802281a:	685a      	ldr	r2, [r3, #4]
 802281c:	693b      	ldr	r3, [r7, #16]
 802281e:	4413      	add	r3, r2
 8022820:	68fa      	ldr	r2, [r7, #12]
 8022822:	4619      	mov	r1, r3
 8022824:	f003 fabc 	bl	8025da0 <memcpy>
    offset_to += len;
 8022828:	697a      	ldr	r2, [r7, #20]
 802282a:	68fb      	ldr	r3, [r7, #12]
 802282c:	4413      	add	r3, r2
 802282e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8022830:	693a      	ldr	r2, [r7, #16]
 8022832:	68fb      	ldr	r3, [r7, #12]
 8022834:	4413      	add	r3, r2
 8022836:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8022838:	687b      	ldr	r3, [r7, #4]
 802283a:	895b      	ldrh	r3, [r3, #10]
 802283c:	461a      	mov	r2, r3
 802283e:	697b      	ldr	r3, [r7, #20]
 8022840:	4293      	cmp	r3, r2
 8022842:	d906      	bls.n	8022852 <pbuf_copy+0xb2>
 8022844:	4b38      	ldr	r3, [pc, #224]	; (8022928 <pbuf_copy+0x188>)
 8022846:	f240 32d9 	movw	r2, #985	; 0x3d9
 802284a:	493a      	ldr	r1, [pc, #232]	; (8022934 <pbuf_copy+0x194>)
 802284c:	4838      	ldr	r0, [pc, #224]	; (8022930 <pbuf_copy+0x190>)
 802284e:	f003 fbb7 	bl	8025fc0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8022852:	683b      	ldr	r3, [r7, #0]
 8022854:	895b      	ldrh	r3, [r3, #10]
 8022856:	461a      	mov	r2, r3
 8022858:	693b      	ldr	r3, [r7, #16]
 802285a:	4293      	cmp	r3, r2
 802285c:	d906      	bls.n	802286c <pbuf_copy+0xcc>
 802285e:	4b32      	ldr	r3, [pc, #200]	; (8022928 <pbuf_copy+0x188>)
 8022860:	f240 32da 	movw	r2, #986	; 0x3da
 8022864:	4934      	ldr	r1, [pc, #208]	; (8022938 <pbuf_copy+0x198>)
 8022866:	4832      	ldr	r0, [pc, #200]	; (8022930 <pbuf_copy+0x190>)
 8022868:	f003 fbaa 	bl	8025fc0 <iprintf>
    if (offset_from >= p_from->len) {
 802286c:	683b      	ldr	r3, [r7, #0]
 802286e:	895b      	ldrh	r3, [r3, #10]
 8022870:	461a      	mov	r2, r3
 8022872:	693b      	ldr	r3, [r7, #16]
 8022874:	4293      	cmp	r3, r2
 8022876:	d304      	bcc.n	8022882 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8022878:	2300      	movs	r3, #0
 802287a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 802287c:	683b      	ldr	r3, [r7, #0]
 802287e:	681b      	ldr	r3, [r3, #0]
 8022880:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8022882:	687b      	ldr	r3, [r7, #4]
 8022884:	895b      	ldrh	r3, [r3, #10]
 8022886:	461a      	mov	r2, r3
 8022888:	697b      	ldr	r3, [r7, #20]
 802288a:	4293      	cmp	r3, r2
 802288c:	d114      	bne.n	80228b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 802288e:	2300      	movs	r3, #0
 8022890:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8022892:	687b      	ldr	r3, [r7, #4]
 8022894:	681b      	ldr	r3, [r3, #0]
 8022896:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8022898:	687b      	ldr	r3, [r7, #4]
 802289a:	2b00      	cmp	r3, #0
 802289c:	d10c      	bne.n	80228b8 <pbuf_copy+0x118>
 802289e:	683b      	ldr	r3, [r7, #0]
 80228a0:	2b00      	cmp	r3, #0
 80228a2:	d009      	beq.n	80228b8 <pbuf_copy+0x118>
 80228a4:	4b20      	ldr	r3, [pc, #128]	; (8022928 <pbuf_copy+0x188>)
 80228a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80228aa:	4924      	ldr	r1, [pc, #144]	; (802293c <pbuf_copy+0x19c>)
 80228ac:	4820      	ldr	r0, [pc, #128]	; (8022930 <pbuf_copy+0x190>)
 80228ae:	f003 fb87 	bl	8025fc0 <iprintf>
 80228b2:	f06f 030f 	mvn.w	r3, #15
 80228b6:	e032      	b.n	802291e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80228b8:	683b      	ldr	r3, [r7, #0]
 80228ba:	2b00      	cmp	r3, #0
 80228bc:	d013      	beq.n	80228e6 <pbuf_copy+0x146>
 80228be:	683b      	ldr	r3, [r7, #0]
 80228c0:	895a      	ldrh	r2, [r3, #10]
 80228c2:	683b      	ldr	r3, [r7, #0]
 80228c4:	891b      	ldrh	r3, [r3, #8]
 80228c6:	429a      	cmp	r2, r3
 80228c8:	d10d      	bne.n	80228e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80228ca:	683b      	ldr	r3, [r7, #0]
 80228cc:	681b      	ldr	r3, [r3, #0]
 80228ce:	2b00      	cmp	r3, #0
 80228d0:	d009      	beq.n	80228e6 <pbuf_copy+0x146>
 80228d2:	4b15      	ldr	r3, [pc, #84]	; (8022928 <pbuf_copy+0x188>)
 80228d4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80228d8:	4919      	ldr	r1, [pc, #100]	; (8022940 <pbuf_copy+0x1a0>)
 80228da:	4815      	ldr	r0, [pc, #84]	; (8022930 <pbuf_copy+0x190>)
 80228dc:	f003 fb70 	bl	8025fc0 <iprintf>
 80228e0:	f06f 0305 	mvn.w	r3, #5
 80228e4:	e01b      	b.n	802291e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80228e6:	687b      	ldr	r3, [r7, #4]
 80228e8:	2b00      	cmp	r3, #0
 80228ea:	d013      	beq.n	8022914 <pbuf_copy+0x174>
 80228ec:	687b      	ldr	r3, [r7, #4]
 80228ee:	895a      	ldrh	r2, [r3, #10]
 80228f0:	687b      	ldr	r3, [r7, #4]
 80228f2:	891b      	ldrh	r3, [r3, #8]
 80228f4:	429a      	cmp	r2, r3
 80228f6:	d10d      	bne.n	8022914 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80228f8:	687b      	ldr	r3, [r7, #4]
 80228fa:	681b      	ldr	r3, [r3, #0]
 80228fc:	2b00      	cmp	r3, #0
 80228fe:	d009      	beq.n	8022914 <pbuf_copy+0x174>
 8022900:	4b09      	ldr	r3, [pc, #36]	; (8022928 <pbuf_copy+0x188>)
 8022902:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8022906:	490e      	ldr	r1, [pc, #56]	; (8022940 <pbuf_copy+0x1a0>)
 8022908:	4809      	ldr	r0, [pc, #36]	; (8022930 <pbuf_copy+0x190>)
 802290a:	f003 fb59 	bl	8025fc0 <iprintf>
 802290e:	f06f 0305 	mvn.w	r3, #5
 8022912:	e004      	b.n	802291e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8022914:	683b      	ldr	r3, [r7, #0]
 8022916:	2b00      	cmp	r3, #0
 8022918:	f47f af61 	bne.w	80227de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 802291c:	2300      	movs	r3, #0
}
 802291e:	4618      	mov	r0, r3
 8022920:	3718      	adds	r7, #24
 8022922:	46bd      	mov	sp, r7
 8022924:	bd80      	pop	{r7, pc}
 8022926:	bf00      	nop
 8022928:	0802bda0 	.word	0x0802bda0
 802292c:	0802c048 	.word	0x0802c048
 8022930:	0802be00 	.word	0x0802be00
 8022934:	0802c078 	.word	0x0802c078
 8022938:	0802c090 	.word	0x0802c090
 802293c:	0802c0ac 	.word	0x0802c0ac
 8022940:	0802c0bc 	.word	0x0802c0bc

08022944 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8022944:	b580      	push	{r7, lr}
 8022946:	b088      	sub	sp, #32
 8022948:	af00      	add	r7, sp, #0
 802294a:	60f8      	str	r0, [r7, #12]
 802294c:	60b9      	str	r1, [r7, #8]
 802294e:	4613      	mov	r3, r2
 8022950:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8022952:	88fb      	ldrh	r3, [r7, #6]
 8022954:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8022956:	2300      	movs	r3, #0
 8022958:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 802295a:	68fb      	ldr	r3, [r7, #12]
 802295c:	2b00      	cmp	r3, #0
 802295e:	d109      	bne.n	8022974 <pbuf_take+0x30>
 8022960:	4b3a      	ldr	r3, [pc, #232]	; (8022a4c <pbuf_take+0x108>)
 8022962:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8022966:	493a      	ldr	r1, [pc, #232]	; (8022a50 <pbuf_take+0x10c>)
 8022968:	483a      	ldr	r0, [pc, #232]	; (8022a54 <pbuf_take+0x110>)
 802296a:	f003 fb29 	bl	8025fc0 <iprintf>
 802296e:	f06f 030f 	mvn.w	r3, #15
 8022972:	e067      	b.n	8022a44 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8022974:	68bb      	ldr	r3, [r7, #8]
 8022976:	2b00      	cmp	r3, #0
 8022978:	d109      	bne.n	802298e <pbuf_take+0x4a>
 802297a:	4b34      	ldr	r3, [pc, #208]	; (8022a4c <pbuf_take+0x108>)
 802297c:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8022980:	4935      	ldr	r1, [pc, #212]	; (8022a58 <pbuf_take+0x114>)
 8022982:	4834      	ldr	r0, [pc, #208]	; (8022a54 <pbuf_take+0x110>)
 8022984:	f003 fb1c 	bl	8025fc0 <iprintf>
 8022988:	f06f 030f 	mvn.w	r3, #15
 802298c:	e05a      	b.n	8022a44 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 802298e:	68fb      	ldr	r3, [r7, #12]
 8022990:	891b      	ldrh	r3, [r3, #8]
 8022992:	88fa      	ldrh	r2, [r7, #6]
 8022994:	429a      	cmp	r2, r3
 8022996:	d909      	bls.n	80229ac <pbuf_take+0x68>
 8022998:	4b2c      	ldr	r3, [pc, #176]	; (8022a4c <pbuf_take+0x108>)
 802299a:	f240 42b5 	movw	r2, #1205	; 0x4b5
 802299e:	492f      	ldr	r1, [pc, #188]	; (8022a5c <pbuf_take+0x118>)
 80229a0:	482c      	ldr	r0, [pc, #176]	; (8022a54 <pbuf_take+0x110>)
 80229a2:	f003 fb0d 	bl	8025fc0 <iprintf>
 80229a6:	f04f 33ff 	mov.w	r3, #4294967295
 80229aa:	e04b      	b.n	8022a44 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80229ac:	68fb      	ldr	r3, [r7, #12]
 80229ae:	2b00      	cmp	r3, #0
 80229b0:	d007      	beq.n	80229c2 <pbuf_take+0x7e>
 80229b2:	68bb      	ldr	r3, [r7, #8]
 80229b4:	2b00      	cmp	r3, #0
 80229b6:	d004      	beq.n	80229c2 <pbuf_take+0x7e>
 80229b8:	68fb      	ldr	r3, [r7, #12]
 80229ba:	891b      	ldrh	r3, [r3, #8]
 80229bc:	88fa      	ldrh	r2, [r7, #6]
 80229be:	429a      	cmp	r2, r3
 80229c0:	d902      	bls.n	80229c8 <pbuf_take+0x84>
    return ERR_ARG;
 80229c2:	f06f 030f 	mvn.w	r3, #15
 80229c6:	e03d      	b.n	8022a44 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80229c8:	68fb      	ldr	r3, [r7, #12]
 80229ca:	61fb      	str	r3, [r7, #28]
 80229cc:	e028      	b.n	8022a20 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80229ce:	69fb      	ldr	r3, [r7, #28]
 80229d0:	2b00      	cmp	r3, #0
 80229d2:	d106      	bne.n	80229e2 <pbuf_take+0x9e>
 80229d4:	4b1d      	ldr	r3, [pc, #116]	; (8022a4c <pbuf_take+0x108>)
 80229d6:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80229da:	4921      	ldr	r1, [pc, #132]	; (8022a60 <pbuf_take+0x11c>)
 80229dc:	481d      	ldr	r0, [pc, #116]	; (8022a54 <pbuf_take+0x110>)
 80229de:	f003 faef 	bl	8025fc0 <iprintf>
    buf_copy_len = total_copy_len;
 80229e2:	697b      	ldr	r3, [r7, #20]
 80229e4:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80229e6:	69fb      	ldr	r3, [r7, #28]
 80229e8:	895b      	ldrh	r3, [r3, #10]
 80229ea:	461a      	mov	r2, r3
 80229ec:	69bb      	ldr	r3, [r7, #24]
 80229ee:	4293      	cmp	r3, r2
 80229f0:	d902      	bls.n	80229f8 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80229f2:	69fb      	ldr	r3, [r7, #28]
 80229f4:	895b      	ldrh	r3, [r3, #10]
 80229f6:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80229f8:	69fb      	ldr	r3, [r7, #28]
 80229fa:	6858      	ldr	r0, [r3, #4]
 80229fc:	68ba      	ldr	r2, [r7, #8]
 80229fe:	693b      	ldr	r3, [r7, #16]
 8022a00:	4413      	add	r3, r2
 8022a02:	69ba      	ldr	r2, [r7, #24]
 8022a04:	4619      	mov	r1, r3
 8022a06:	f003 f9cb 	bl	8025da0 <memcpy>
    total_copy_len -= buf_copy_len;
 8022a0a:	697a      	ldr	r2, [r7, #20]
 8022a0c:	69bb      	ldr	r3, [r7, #24]
 8022a0e:	1ad3      	subs	r3, r2, r3
 8022a10:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8022a12:	693a      	ldr	r2, [r7, #16]
 8022a14:	69bb      	ldr	r3, [r7, #24]
 8022a16:	4413      	add	r3, r2
 8022a18:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8022a1a:	69fb      	ldr	r3, [r7, #28]
 8022a1c:	681b      	ldr	r3, [r3, #0]
 8022a1e:	61fb      	str	r3, [r7, #28]
 8022a20:	697b      	ldr	r3, [r7, #20]
 8022a22:	2b00      	cmp	r3, #0
 8022a24:	d1d3      	bne.n	80229ce <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8022a26:	697b      	ldr	r3, [r7, #20]
 8022a28:	2b00      	cmp	r3, #0
 8022a2a:	d103      	bne.n	8022a34 <pbuf_take+0xf0>
 8022a2c:	88fb      	ldrh	r3, [r7, #6]
 8022a2e:	693a      	ldr	r2, [r7, #16]
 8022a30:	429a      	cmp	r2, r3
 8022a32:	d006      	beq.n	8022a42 <pbuf_take+0xfe>
 8022a34:	4b05      	ldr	r3, [pc, #20]	; (8022a4c <pbuf_take+0x108>)
 8022a36:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8022a3a:	490a      	ldr	r1, [pc, #40]	; (8022a64 <pbuf_take+0x120>)
 8022a3c:	4805      	ldr	r0, [pc, #20]	; (8022a54 <pbuf_take+0x110>)
 8022a3e:	f003 fabf 	bl	8025fc0 <iprintf>
  return ERR_OK;
 8022a42:	2300      	movs	r3, #0
}
 8022a44:	4618      	mov	r0, r3
 8022a46:	3720      	adds	r7, #32
 8022a48:	46bd      	mov	sp, r7
 8022a4a:	bd80      	pop	{r7, pc}
 8022a4c:	0802bda0 	.word	0x0802bda0
 8022a50:	0802c178 	.word	0x0802c178
 8022a54:	0802be00 	.word	0x0802be00
 8022a58:	0802c190 	.word	0x0802c190
 8022a5c:	0802c1ac 	.word	0x0802c1ac
 8022a60:	0802c1cc 	.word	0x0802c1cc
 8022a64:	0802c1e4 	.word	0x0802c1e4

08022a68 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8022a68:	b580      	push	{r7, lr}
 8022a6a:	b084      	sub	sp, #16
 8022a6c:	af00      	add	r7, sp, #0
 8022a6e:	4603      	mov	r3, r0
 8022a70:	603a      	str	r2, [r7, #0]
 8022a72:	71fb      	strb	r3, [r7, #7]
 8022a74:	460b      	mov	r3, r1
 8022a76:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8022a78:	683b      	ldr	r3, [r7, #0]
 8022a7a:	8919      	ldrh	r1, [r3, #8]
 8022a7c:	88ba      	ldrh	r2, [r7, #4]
 8022a7e:	79fb      	ldrb	r3, [r7, #7]
 8022a80:	4618      	mov	r0, r3
 8022a82:	f7ff fa83 	bl	8021f8c <pbuf_alloc>
 8022a86:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8022a88:	68fb      	ldr	r3, [r7, #12]
 8022a8a:	2b00      	cmp	r3, #0
 8022a8c:	d101      	bne.n	8022a92 <pbuf_clone+0x2a>
    return NULL;
 8022a8e:	2300      	movs	r3, #0
 8022a90:	e011      	b.n	8022ab6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8022a92:	6839      	ldr	r1, [r7, #0]
 8022a94:	68f8      	ldr	r0, [r7, #12]
 8022a96:	f7ff fe83 	bl	80227a0 <pbuf_copy>
 8022a9a:	4603      	mov	r3, r0
 8022a9c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8022a9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8022aa2:	2b00      	cmp	r3, #0
 8022aa4:	d006      	beq.n	8022ab4 <pbuf_clone+0x4c>
 8022aa6:	4b06      	ldr	r3, [pc, #24]	; (8022ac0 <pbuf_clone+0x58>)
 8022aa8:	f240 5224 	movw	r2, #1316	; 0x524
 8022aac:	4905      	ldr	r1, [pc, #20]	; (8022ac4 <pbuf_clone+0x5c>)
 8022aae:	4806      	ldr	r0, [pc, #24]	; (8022ac8 <pbuf_clone+0x60>)
 8022ab0:	f003 fa86 	bl	8025fc0 <iprintf>
  return q;
 8022ab4:	68fb      	ldr	r3, [r7, #12]
}
 8022ab6:	4618      	mov	r0, r3
 8022ab8:	3710      	adds	r7, #16
 8022aba:	46bd      	mov	sp, r7
 8022abc:	bd80      	pop	{r7, pc}
 8022abe:	bf00      	nop
 8022ac0:	0802bda0 	.word	0x0802bda0
 8022ac4:	0802c214 	.word	0x0802c214
 8022ac8:	0802be00 	.word	0x0802be00

08022acc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8022acc:	b580      	push	{r7, lr}
 8022ace:	b086      	sub	sp, #24
 8022ad0:	af00      	add	r7, sp, #0
 8022ad2:	60f8      	str	r0, [r7, #12]
 8022ad4:	60b9      	str	r1, [r7, #8]
 8022ad6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8022ad8:	2003      	movs	r0, #3
 8022ada:	f7fe fdb9 	bl	8021650 <memp_malloc>
 8022ade:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8022ae0:	693b      	ldr	r3, [r7, #16]
 8022ae2:	2b00      	cmp	r3, #0
 8022ae4:	d109      	bne.n	8022afa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8022ae6:	693b      	ldr	r3, [r7, #16]
 8022ae8:	2b00      	cmp	r3, #0
 8022aea:	d151      	bne.n	8022b90 <sys_timeout_abs+0xc4>
 8022aec:	4b2a      	ldr	r3, [pc, #168]	; (8022b98 <sys_timeout_abs+0xcc>)
 8022aee:	22be      	movs	r2, #190	; 0xbe
 8022af0:	492a      	ldr	r1, [pc, #168]	; (8022b9c <sys_timeout_abs+0xd0>)
 8022af2:	482b      	ldr	r0, [pc, #172]	; (8022ba0 <sys_timeout_abs+0xd4>)
 8022af4:	f003 fa64 	bl	8025fc0 <iprintf>
    return;
 8022af8:	e04a      	b.n	8022b90 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8022afa:	693b      	ldr	r3, [r7, #16]
 8022afc:	2200      	movs	r2, #0
 8022afe:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8022b00:	693b      	ldr	r3, [r7, #16]
 8022b02:	68ba      	ldr	r2, [r7, #8]
 8022b04:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8022b06:	693b      	ldr	r3, [r7, #16]
 8022b08:	687a      	ldr	r2, [r7, #4]
 8022b0a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8022b0c:	693b      	ldr	r3, [r7, #16]
 8022b0e:	68fa      	ldr	r2, [r7, #12]
 8022b10:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8022b12:	4b24      	ldr	r3, [pc, #144]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b14:	681b      	ldr	r3, [r3, #0]
 8022b16:	2b00      	cmp	r3, #0
 8022b18:	d103      	bne.n	8022b22 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8022b1a:	4a22      	ldr	r2, [pc, #136]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b1c:	693b      	ldr	r3, [r7, #16]
 8022b1e:	6013      	str	r3, [r2, #0]
    return;
 8022b20:	e037      	b.n	8022b92 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8022b22:	693b      	ldr	r3, [r7, #16]
 8022b24:	685a      	ldr	r2, [r3, #4]
 8022b26:	4b1f      	ldr	r3, [pc, #124]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b28:	681b      	ldr	r3, [r3, #0]
 8022b2a:	685b      	ldr	r3, [r3, #4]
 8022b2c:	1ad3      	subs	r3, r2, r3
 8022b2e:	0fdb      	lsrs	r3, r3, #31
 8022b30:	f003 0301 	and.w	r3, r3, #1
 8022b34:	b2db      	uxtb	r3, r3
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d007      	beq.n	8022b4a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8022b3a:	4b1a      	ldr	r3, [pc, #104]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b3c:	681a      	ldr	r2, [r3, #0]
 8022b3e:	693b      	ldr	r3, [r7, #16]
 8022b40:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8022b42:	4a18      	ldr	r2, [pc, #96]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b44:	693b      	ldr	r3, [r7, #16]
 8022b46:	6013      	str	r3, [r2, #0]
 8022b48:	e023      	b.n	8022b92 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8022b4a:	4b16      	ldr	r3, [pc, #88]	; (8022ba4 <sys_timeout_abs+0xd8>)
 8022b4c:	681b      	ldr	r3, [r3, #0]
 8022b4e:	617b      	str	r3, [r7, #20]
 8022b50:	e01a      	b.n	8022b88 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8022b52:	697b      	ldr	r3, [r7, #20]
 8022b54:	681b      	ldr	r3, [r3, #0]
 8022b56:	2b00      	cmp	r3, #0
 8022b58:	d00b      	beq.n	8022b72 <sys_timeout_abs+0xa6>
 8022b5a:	693b      	ldr	r3, [r7, #16]
 8022b5c:	685a      	ldr	r2, [r3, #4]
 8022b5e:	697b      	ldr	r3, [r7, #20]
 8022b60:	681b      	ldr	r3, [r3, #0]
 8022b62:	685b      	ldr	r3, [r3, #4]
 8022b64:	1ad3      	subs	r3, r2, r3
 8022b66:	0fdb      	lsrs	r3, r3, #31
 8022b68:	f003 0301 	and.w	r3, r3, #1
 8022b6c:	b2db      	uxtb	r3, r3
 8022b6e:	2b00      	cmp	r3, #0
 8022b70:	d007      	beq.n	8022b82 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8022b72:	697b      	ldr	r3, [r7, #20]
 8022b74:	681a      	ldr	r2, [r3, #0]
 8022b76:	693b      	ldr	r3, [r7, #16]
 8022b78:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8022b7a:	697b      	ldr	r3, [r7, #20]
 8022b7c:	693a      	ldr	r2, [r7, #16]
 8022b7e:	601a      	str	r2, [r3, #0]
        break;
 8022b80:	e007      	b.n	8022b92 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8022b82:	697b      	ldr	r3, [r7, #20]
 8022b84:	681b      	ldr	r3, [r3, #0]
 8022b86:	617b      	str	r3, [r7, #20]
 8022b88:	697b      	ldr	r3, [r7, #20]
 8022b8a:	2b00      	cmp	r3, #0
 8022b8c:	d1e1      	bne.n	8022b52 <sys_timeout_abs+0x86>
 8022b8e:	e000      	b.n	8022b92 <sys_timeout_abs+0xc6>
    return;
 8022b90:	bf00      	nop
      }
    }
  }
}
 8022b92:	3718      	adds	r7, #24
 8022b94:	46bd      	mov	sp, r7
 8022b96:	bd80      	pop	{r7, pc}
 8022b98:	0802c228 	.word	0x0802c228
 8022b9c:	0802c25c 	.word	0x0802c25c
 8022ba0:	0802c29c 	.word	0x0802c29c
 8022ba4:	20015d98 	.word	0x20015d98

08022ba8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8022ba8:	b580      	push	{r7, lr}
 8022baa:	b086      	sub	sp, #24
 8022bac:	af00      	add	r7, sp, #0
 8022bae:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8022bb0:	687b      	ldr	r3, [r7, #4]
 8022bb2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8022bb4:	697b      	ldr	r3, [r7, #20]
 8022bb6:	685b      	ldr	r3, [r3, #4]
 8022bb8:	4798      	blx	r3

  now = sys_now();
 8022bba:	f7fd fed9 	bl	8020970 <sys_now>
 8022bbe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8022bc0:	697b      	ldr	r3, [r7, #20]
 8022bc2:	681a      	ldr	r2, [r3, #0]
 8022bc4:	4b0f      	ldr	r3, [pc, #60]	; (8022c04 <lwip_cyclic_timer+0x5c>)
 8022bc6:	681b      	ldr	r3, [r3, #0]
 8022bc8:	4413      	add	r3, r2
 8022bca:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8022bcc:	68fa      	ldr	r2, [r7, #12]
 8022bce:	693b      	ldr	r3, [r7, #16]
 8022bd0:	1ad3      	subs	r3, r2, r3
 8022bd2:	0fdb      	lsrs	r3, r3, #31
 8022bd4:	f003 0301 	and.w	r3, r3, #1
 8022bd8:	b2db      	uxtb	r3, r3
 8022bda:	2b00      	cmp	r3, #0
 8022bdc:	d009      	beq.n	8022bf2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8022bde:	697b      	ldr	r3, [r7, #20]
 8022be0:	681a      	ldr	r2, [r3, #0]
 8022be2:	693b      	ldr	r3, [r7, #16]
 8022be4:	4413      	add	r3, r2
 8022be6:	687a      	ldr	r2, [r7, #4]
 8022be8:	4907      	ldr	r1, [pc, #28]	; (8022c08 <lwip_cyclic_timer+0x60>)
 8022bea:	4618      	mov	r0, r3
 8022bec:	f7ff ff6e 	bl	8022acc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8022bf0:	e004      	b.n	8022bfc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8022bf2:	687a      	ldr	r2, [r7, #4]
 8022bf4:	4904      	ldr	r1, [pc, #16]	; (8022c08 <lwip_cyclic_timer+0x60>)
 8022bf6:	68f8      	ldr	r0, [r7, #12]
 8022bf8:	f7ff ff68 	bl	8022acc <sys_timeout_abs>
}
 8022bfc:	bf00      	nop
 8022bfe:	3718      	adds	r7, #24
 8022c00:	46bd      	mov	sp, r7
 8022c02:	bd80      	pop	{r7, pc}
 8022c04:	20015d9c 	.word	0x20015d9c
 8022c08:	08022ba9 	.word	0x08022ba9

08022c0c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8022c0c:	b580      	push	{r7, lr}
 8022c0e:	b082      	sub	sp, #8
 8022c10:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022c12:	2300      	movs	r3, #0
 8022c14:	607b      	str	r3, [r7, #4]
 8022c16:	e00e      	b.n	8022c36 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8022c18:	4a0b      	ldr	r2, [pc, #44]	; (8022c48 <sys_timeouts_init+0x3c>)
 8022c1a:	687b      	ldr	r3, [r7, #4]
 8022c1c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8022c20:	687b      	ldr	r3, [r7, #4]
 8022c22:	00db      	lsls	r3, r3, #3
 8022c24:	4a08      	ldr	r2, [pc, #32]	; (8022c48 <sys_timeouts_init+0x3c>)
 8022c26:	4413      	add	r3, r2
 8022c28:	461a      	mov	r2, r3
 8022c2a:	4908      	ldr	r1, [pc, #32]	; (8022c4c <sys_timeouts_init+0x40>)
 8022c2c:	f000 f810 	bl	8022c50 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	3301      	adds	r3, #1
 8022c34:	607b      	str	r3, [r7, #4]
 8022c36:	687b      	ldr	r3, [r7, #4]
 8022c38:	2b01      	cmp	r3, #1
 8022c3a:	d9ed      	bls.n	8022c18 <sys_timeouts_init+0xc>
  }
}
 8022c3c:	bf00      	nop
 8022c3e:	bf00      	nop
 8022c40:	3708      	adds	r7, #8
 8022c42:	46bd      	mov	sp, r7
 8022c44:	bd80      	pop	{r7, pc}
 8022c46:	bf00      	nop
 8022c48:	0802d1e0 	.word	0x0802d1e0
 8022c4c:	08022ba9 	.word	0x08022ba9

08022c50 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8022c50:	b580      	push	{r7, lr}
 8022c52:	b086      	sub	sp, #24
 8022c54:	af00      	add	r7, sp, #0
 8022c56:	60f8      	str	r0, [r7, #12]
 8022c58:	60b9      	str	r1, [r7, #8]
 8022c5a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8022c5c:	68fb      	ldr	r3, [r7, #12]
 8022c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8022c62:	d306      	bcc.n	8022c72 <sys_timeout+0x22>
 8022c64:	4b0a      	ldr	r3, [pc, #40]	; (8022c90 <sys_timeout+0x40>)
 8022c66:	f240 1229 	movw	r2, #297	; 0x129
 8022c6a:	490a      	ldr	r1, [pc, #40]	; (8022c94 <sys_timeout+0x44>)
 8022c6c:	480a      	ldr	r0, [pc, #40]	; (8022c98 <sys_timeout+0x48>)
 8022c6e:	f003 f9a7 	bl	8025fc0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8022c72:	f7fd fe7d 	bl	8020970 <sys_now>
 8022c76:	4602      	mov	r2, r0
 8022c78:	68fb      	ldr	r3, [r7, #12]
 8022c7a:	4413      	add	r3, r2
 8022c7c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8022c7e:	687a      	ldr	r2, [r7, #4]
 8022c80:	68b9      	ldr	r1, [r7, #8]
 8022c82:	6978      	ldr	r0, [r7, #20]
 8022c84:	f7ff ff22 	bl	8022acc <sys_timeout_abs>
#endif
}
 8022c88:	bf00      	nop
 8022c8a:	3718      	adds	r7, #24
 8022c8c:	46bd      	mov	sp, r7
 8022c8e:	bd80      	pop	{r7, pc}
 8022c90:	0802c228 	.word	0x0802c228
 8022c94:	0802c2c4 	.word	0x0802c2c4
 8022c98:	0802c29c 	.word	0x0802c29c

08022c9c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8022c9c:	b580      	push	{r7, lr}
 8022c9e:	b084      	sub	sp, #16
 8022ca0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8022ca2:	f7fd fe65 	bl	8020970 <sys_now>
 8022ca6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8022ca8:	4b17      	ldr	r3, [pc, #92]	; (8022d08 <sys_check_timeouts+0x6c>)
 8022caa:	681b      	ldr	r3, [r3, #0]
 8022cac:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8022cae:	68bb      	ldr	r3, [r7, #8]
 8022cb0:	2b00      	cmp	r3, #0
 8022cb2:	d022      	beq.n	8022cfa <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8022cb4:	68bb      	ldr	r3, [r7, #8]
 8022cb6:	685b      	ldr	r3, [r3, #4]
 8022cb8:	68fa      	ldr	r2, [r7, #12]
 8022cba:	1ad3      	subs	r3, r2, r3
 8022cbc:	0fdb      	lsrs	r3, r3, #31
 8022cbe:	f003 0301 	and.w	r3, r3, #1
 8022cc2:	b2db      	uxtb	r3, r3
 8022cc4:	2b00      	cmp	r3, #0
 8022cc6:	d11a      	bne.n	8022cfe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8022cc8:	68bb      	ldr	r3, [r7, #8]
 8022cca:	681b      	ldr	r3, [r3, #0]
 8022ccc:	4a0e      	ldr	r2, [pc, #56]	; (8022d08 <sys_check_timeouts+0x6c>)
 8022cce:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8022cd0:	68bb      	ldr	r3, [r7, #8]
 8022cd2:	689b      	ldr	r3, [r3, #8]
 8022cd4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8022cd6:	68bb      	ldr	r3, [r7, #8]
 8022cd8:	68db      	ldr	r3, [r3, #12]
 8022cda:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8022cdc:	68bb      	ldr	r3, [r7, #8]
 8022cde:	685b      	ldr	r3, [r3, #4]
 8022ce0:	4a0a      	ldr	r2, [pc, #40]	; (8022d0c <sys_check_timeouts+0x70>)
 8022ce2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8022ce4:	68b9      	ldr	r1, [r7, #8]
 8022ce6:	2003      	movs	r0, #3
 8022ce8:	f7fe fd22 	bl	8021730 <memp_free>
    if (handler != NULL) {
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d0da      	beq.n	8022ca8 <sys_check_timeouts+0xc>
      handler(arg);
 8022cf2:	687b      	ldr	r3, [r7, #4]
 8022cf4:	6838      	ldr	r0, [r7, #0]
 8022cf6:	4798      	blx	r3
  do {
 8022cf8:	e7d6      	b.n	8022ca8 <sys_check_timeouts+0xc>
      return;
 8022cfa:	bf00      	nop
 8022cfc:	e000      	b.n	8022d00 <sys_check_timeouts+0x64>
      return;
 8022cfe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8022d00:	3710      	adds	r7, #16
 8022d02:	46bd      	mov	sp, r7
 8022d04:	bd80      	pop	{r7, pc}
 8022d06:	bf00      	nop
 8022d08:	20015d98 	.word	0x20015d98
 8022d0c:	20015d9c 	.word	0x20015d9c

08022d10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8022d10:	b580      	push	{r7, lr}
 8022d12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8022d14:	f003 f9f8 	bl	8026108 <rand>
 8022d18:	4603      	mov	r3, r0
 8022d1a:	b29b      	uxth	r3, r3
 8022d1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8022d20:	b29b      	uxth	r3, r3
 8022d22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8022d26:	b29a      	uxth	r2, r3
 8022d28:	4b01      	ldr	r3, [pc, #4]	; (8022d30 <udp_init+0x20>)
 8022d2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8022d2c:	bf00      	nop
 8022d2e:	bd80      	pop	{r7, pc}
 8022d30:	2000033c 	.word	0x2000033c

08022d34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8022d34:	b480      	push	{r7}
 8022d36:	b083      	sub	sp, #12
 8022d38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8022d3a:	2300      	movs	r3, #0
 8022d3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8022d3e:	4b17      	ldr	r3, [pc, #92]	; (8022d9c <udp_new_port+0x68>)
 8022d40:	881b      	ldrh	r3, [r3, #0]
 8022d42:	1c5a      	adds	r2, r3, #1
 8022d44:	b291      	uxth	r1, r2
 8022d46:	4a15      	ldr	r2, [pc, #84]	; (8022d9c <udp_new_port+0x68>)
 8022d48:	8011      	strh	r1, [r2, #0]
 8022d4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8022d4e:	4293      	cmp	r3, r2
 8022d50:	d103      	bne.n	8022d5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8022d52:	4b12      	ldr	r3, [pc, #72]	; (8022d9c <udp_new_port+0x68>)
 8022d54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8022d58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022d5a:	4b11      	ldr	r3, [pc, #68]	; (8022da0 <udp_new_port+0x6c>)
 8022d5c:	681b      	ldr	r3, [r3, #0]
 8022d5e:	603b      	str	r3, [r7, #0]
 8022d60:	e011      	b.n	8022d86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8022d62:	683b      	ldr	r3, [r7, #0]
 8022d64:	8a5a      	ldrh	r2, [r3, #18]
 8022d66:	4b0d      	ldr	r3, [pc, #52]	; (8022d9c <udp_new_port+0x68>)
 8022d68:	881b      	ldrh	r3, [r3, #0]
 8022d6a:	429a      	cmp	r2, r3
 8022d6c:	d108      	bne.n	8022d80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8022d6e:	88fb      	ldrh	r3, [r7, #6]
 8022d70:	3301      	adds	r3, #1
 8022d72:	80fb      	strh	r3, [r7, #6]
 8022d74:	88fb      	ldrh	r3, [r7, #6]
 8022d76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8022d7a:	d3e0      	bcc.n	8022d3e <udp_new_port+0xa>
        return 0;
 8022d7c:	2300      	movs	r3, #0
 8022d7e:	e007      	b.n	8022d90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022d80:	683b      	ldr	r3, [r7, #0]
 8022d82:	68db      	ldr	r3, [r3, #12]
 8022d84:	603b      	str	r3, [r7, #0]
 8022d86:	683b      	ldr	r3, [r7, #0]
 8022d88:	2b00      	cmp	r3, #0
 8022d8a:	d1ea      	bne.n	8022d62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8022d8c:	4b03      	ldr	r3, [pc, #12]	; (8022d9c <udp_new_port+0x68>)
 8022d8e:	881b      	ldrh	r3, [r3, #0]
}
 8022d90:	4618      	mov	r0, r3
 8022d92:	370c      	adds	r7, #12
 8022d94:	46bd      	mov	sp, r7
 8022d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022d9a:	4770      	bx	lr
 8022d9c:	2000033c 	.word	0x2000033c
 8022da0:	20015da0 	.word	0x20015da0

08022da4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8022da4:	b580      	push	{r7, lr}
 8022da6:	b084      	sub	sp, #16
 8022da8:	af00      	add	r7, sp, #0
 8022daa:	60f8      	str	r0, [r7, #12]
 8022dac:	60b9      	str	r1, [r7, #8]
 8022dae:	4613      	mov	r3, r2
 8022db0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8022db2:	68fb      	ldr	r3, [r7, #12]
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	d105      	bne.n	8022dc4 <udp_input_local_match+0x20>
 8022db8:	4b27      	ldr	r3, [pc, #156]	; (8022e58 <udp_input_local_match+0xb4>)
 8022dba:	2287      	movs	r2, #135	; 0x87
 8022dbc:	4927      	ldr	r1, [pc, #156]	; (8022e5c <udp_input_local_match+0xb8>)
 8022dbe:	4828      	ldr	r0, [pc, #160]	; (8022e60 <udp_input_local_match+0xbc>)
 8022dc0:	f003 f8fe 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8022dc4:	68bb      	ldr	r3, [r7, #8]
 8022dc6:	2b00      	cmp	r3, #0
 8022dc8:	d105      	bne.n	8022dd6 <udp_input_local_match+0x32>
 8022dca:	4b23      	ldr	r3, [pc, #140]	; (8022e58 <udp_input_local_match+0xb4>)
 8022dcc:	2288      	movs	r2, #136	; 0x88
 8022dce:	4925      	ldr	r1, [pc, #148]	; (8022e64 <udp_input_local_match+0xc0>)
 8022dd0:	4823      	ldr	r0, [pc, #140]	; (8022e60 <udp_input_local_match+0xbc>)
 8022dd2:	f003 f8f5 	bl	8025fc0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022dd6:	68fb      	ldr	r3, [r7, #12]
 8022dd8:	7a1b      	ldrb	r3, [r3, #8]
 8022dda:	2b00      	cmp	r3, #0
 8022ddc:	d00b      	beq.n	8022df6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8022dde:	68fb      	ldr	r3, [r7, #12]
 8022de0:	7a1a      	ldrb	r2, [r3, #8]
 8022de2:	4b21      	ldr	r3, [pc, #132]	; (8022e68 <udp_input_local_match+0xc4>)
 8022de4:	685b      	ldr	r3, [r3, #4]
 8022de6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022dea:	3301      	adds	r3, #1
 8022dec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8022dee:	429a      	cmp	r2, r3
 8022df0:	d001      	beq.n	8022df6 <udp_input_local_match+0x52>
    return 0;
 8022df2:	2300      	movs	r3, #0
 8022df4:	e02b      	b.n	8022e4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8022df6:	79fb      	ldrb	r3, [r7, #7]
 8022df8:	2b00      	cmp	r3, #0
 8022dfa:	d018      	beq.n	8022e2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022dfc:	68fb      	ldr	r3, [r7, #12]
 8022dfe:	2b00      	cmp	r3, #0
 8022e00:	d013      	beq.n	8022e2a <udp_input_local_match+0x86>
 8022e02:	68fb      	ldr	r3, [r7, #12]
 8022e04:	681b      	ldr	r3, [r3, #0]
 8022e06:	2b00      	cmp	r3, #0
 8022e08:	d00f      	beq.n	8022e2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8022e0a:	4b17      	ldr	r3, [pc, #92]	; (8022e68 <udp_input_local_match+0xc4>)
 8022e0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8022e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022e12:	d00a      	beq.n	8022e2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8022e14:	68fb      	ldr	r3, [r7, #12]
 8022e16:	681a      	ldr	r2, [r3, #0]
 8022e18:	4b13      	ldr	r3, [pc, #76]	; (8022e68 <udp_input_local_match+0xc4>)
 8022e1a:	695b      	ldr	r3, [r3, #20]
 8022e1c:	405a      	eors	r2, r3
 8022e1e:	68bb      	ldr	r3, [r7, #8]
 8022e20:	3308      	adds	r3, #8
 8022e22:	681b      	ldr	r3, [r3, #0]
 8022e24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8022e26:	2b00      	cmp	r3, #0
 8022e28:	d110      	bne.n	8022e4c <udp_input_local_match+0xa8>
          return 1;
 8022e2a:	2301      	movs	r3, #1
 8022e2c:	e00f      	b.n	8022e4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8022e2e:	68fb      	ldr	r3, [r7, #12]
 8022e30:	2b00      	cmp	r3, #0
 8022e32:	d009      	beq.n	8022e48 <udp_input_local_match+0xa4>
 8022e34:	68fb      	ldr	r3, [r7, #12]
 8022e36:	681b      	ldr	r3, [r3, #0]
 8022e38:	2b00      	cmp	r3, #0
 8022e3a:	d005      	beq.n	8022e48 <udp_input_local_match+0xa4>
 8022e3c:	68fb      	ldr	r3, [r7, #12]
 8022e3e:	681a      	ldr	r2, [r3, #0]
 8022e40:	4b09      	ldr	r3, [pc, #36]	; (8022e68 <udp_input_local_match+0xc4>)
 8022e42:	695b      	ldr	r3, [r3, #20]
 8022e44:	429a      	cmp	r2, r3
 8022e46:	d101      	bne.n	8022e4c <udp_input_local_match+0xa8>
        return 1;
 8022e48:	2301      	movs	r3, #1
 8022e4a:	e000      	b.n	8022e4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8022e4c:	2300      	movs	r3, #0
}
 8022e4e:	4618      	mov	r0, r3
 8022e50:	3710      	adds	r7, #16
 8022e52:	46bd      	mov	sp, r7
 8022e54:	bd80      	pop	{r7, pc}
 8022e56:	bf00      	nop
 8022e58:	0802c310 	.word	0x0802c310
 8022e5c:	0802c340 	.word	0x0802c340
 8022e60:	0802c364 	.word	0x0802c364
 8022e64:	0802c38c 	.word	0x0802c38c
 8022e68:	2001273c 	.word	0x2001273c

08022e6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8022e6c:	b590      	push	{r4, r7, lr}
 8022e6e:	b08d      	sub	sp, #52	; 0x34
 8022e70:	af02      	add	r7, sp, #8
 8022e72:	6078      	str	r0, [r7, #4]
 8022e74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8022e76:	2300      	movs	r3, #0
 8022e78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8022e7a:	687b      	ldr	r3, [r7, #4]
 8022e7c:	2b00      	cmp	r3, #0
 8022e7e:	d105      	bne.n	8022e8c <udp_input+0x20>
 8022e80:	4b7c      	ldr	r3, [pc, #496]	; (8023074 <udp_input+0x208>)
 8022e82:	22cf      	movs	r2, #207	; 0xcf
 8022e84:	497c      	ldr	r1, [pc, #496]	; (8023078 <udp_input+0x20c>)
 8022e86:	487d      	ldr	r0, [pc, #500]	; (802307c <udp_input+0x210>)
 8022e88:	f003 f89a 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8022e8c:	683b      	ldr	r3, [r7, #0]
 8022e8e:	2b00      	cmp	r3, #0
 8022e90:	d105      	bne.n	8022e9e <udp_input+0x32>
 8022e92:	4b78      	ldr	r3, [pc, #480]	; (8023074 <udp_input+0x208>)
 8022e94:	22d0      	movs	r2, #208	; 0xd0
 8022e96:	497a      	ldr	r1, [pc, #488]	; (8023080 <udp_input+0x214>)
 8022e98:	4878      	ldr	r0, [pc, #480]	; (802307c <udp_input+0x210>)
 8022e9a:	f003 f891 	bl	8025fc0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8022e9e:	687b      	ldr	r3, [r7, #4]
 8022ea0:	895b      	ldrh	r3, [r3, #10]
 8022ea2:	2b07      	cmp	r3, #7
 8022ea4:	d803      	bhi.n	8022eae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8022ea6:	6878      	ldr	r0, [r7, #4]
 8022ea8:	f7ff fb52 	bl	8022550 <pbuf_free>
    goto end;
 8022eac:	e0de      	b.n	802306c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8022eae:	687b      	ldr	r3, [r7, #4]
 8022eb0:	685b      	ldr	r3, [r3, #4]
 8022eb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8022eb4:	4b73      	ldr	r3, [pc, #460]	; (8023084 <udp_input+0x218>)
 8022eb6:	695b      	ldr	r3, [r3, #20]
 8022eb8:	4a72      	ldr	r2, [pc, #456]	; (8023084 <udp_input+0x218>)
 8022eba:	6812      	ldr	r2, [r2, #0]
 8022ebc:	4611      	mov	r1, r2
 8022ebe:	4618      	mov	r0, r3
 8022ec0:	f001 ff44 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8022ec4:	4603      	mov	r3, r0
 8022ec6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8022ec8:	697b      	ldr	r3, [r7, #20]
 8022eca:	881b      	ldrh	r3, [r3, #0]
 8022ecc:	b29b      	uxth	r3, r3
 8022ece:	4618      	mov	r0, r3
 8022ed0:	f7fd ff62 	bl	8020d98 <lwip_htons>
 8022ed4:	4603      	mov	r3, r0
 8022ed6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8022ed8:	697b      	ldr	r3, [r7, #20]
 8022eda:	885b      	ldrh	r3, [r3, #2]
 8022edc:	b29b      	uxth	r3, r3
 8022ede:	4618      	mov	r0, r3
 8022ee0:	f7fd ff5a 	bl	8020d98 <lwip_htons>
 8022ee4:	4603      	mov	r3, r0
 8022ee6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8022ee8:	2300      	movs	r3, #0
 8022eea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8022eec:	2300      	movs	r3, #0
 8022eee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8022ef0:	2300      	movs	r3, #0
 8022ef2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022ef4:	4b64      	ldr	r3, [pc, #400]	; (8023088 <udp_input+0x21c>)
 8022ef6:	681b      	ldr	r3, [r3, #0]
 8022ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8022efa:	e054      	b.n	8022fa6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8022efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022efe:	8a5b      	ldrh	r3, [r3, #18]
 8022f00:	89fa      	ldrh	r2, [r7, #14]
 8022f02:	429a      	cmp	r2, r3
 8022f04:	d14a      	bne.n	8022f9c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8022f06:	7cfb      	ldrb	r3, [r7, #19]
 8022f08:	461a      	mov	r2, r3
 8022f0a:	6839      	ldr	r1, [r7, #0]
 8022f0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022f0e:	f7ff ff49 	bl	8022da4 <udp_input_local_match>
 8022f12:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8022f14:	2b00      	cmp	r3, #0
 8022f16:	d041      	beq.n	8022f9c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8022f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f1a:	7c1b      	ldrb	r3, [r3, #16]
 8022f1c:	f003 0304 	and.w	r3, r3, #4
 8022f20:	2b00      	cmp	r3, #0
 8022f22:	d11d      	bne.n	8022f60 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8022f24:	69fb      	ldr	r3, [r7, #28]
 8022f26:	2b00      	cmp	r3, #0
 8022f28:	d102      	bne.n	8022f30 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8022f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f2c:	61fb      	str	r3, [r7, #28]
 8022f2e:	e017      	b.n	8022f60 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8022f30:	7cfb      	ldrb	r3, [r7, #19]
 8022f32:	2b00      	cmp	r3, #0
 8022f34:	d014      	beq.n	8022f60 <udp_input+0xf4>
 8022f36:	4b53      	ldr	r3, [pc, #332]	; (8023084 <udp_input+0x218>)
 8022f38:	695b      	ldr	r3, [r3, #20]
 8022f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022f3e:	d10f      	bne.n	8022f60 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8022f40:	69fb      	ldr	r3, [r7, #28]
 8022f42:	681a      	ldr	r2, [r3, #0]
 8022f44:	683b      	ldr	r3, [r7, #0]
 8022f46:	3304      	adds	r3, #4
 8022f48:	681b      	ldr	r3, [r3, #0]
 8022f4a:	429a      	cmp	r2, r3
 8022f4c:	d008      	beq.n	8022f60 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8022f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f50:	681a      	ldr	r2, [r3, #0]
 8022f52:	683b      	ldr	r3, [r7, #0]
 8022f54:	3304      	adds	r3, #4
 8022f56:	681b      	ldr	r3, [r3, #0]
 8022f58:	429a      	cmp	r2, r3
 8022f5a:	d101      	bne.n	8022f60 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8022f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f5e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8022f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f62:	8a9b      	ldrh	r3, [r3, #20]
 8022f64:	8a3a      	ldrh	r2, [r7, #16]
 8022f66:	429a      	cmp	r2, r3
 8022f68:	d118      	bne.n	8022f9c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f6c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8022f6e:	2b00      	cmp	r3, #0
 8022f70:	d005      	beq.n	8022f7e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8022f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f74:	685a      	ldr	r2, [r3, #4]
 8022f76:	4b43      	ldr	r3, [pc, #268]	; (8023084 <udp_input+0x218>)
 8022f78:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8022f7a:	429a      	cmp	r2, r3
 8022f7c:	d10e      	bne.n	8022f9c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8022f7e:	6a3b      	ldr	r3, [r7, #32]
 8022f80:	2b00      	cmp	r3, #0
 8022f82:	d014      	beq.n	8022fae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8022f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f86:	68da      	ldr	r2, [r3, #12]
 8022f88:	6a3b      	ldr	r3, [r7, #32]
 8022f8a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8022f8c:	4b3e      	ldr	r3, [pc, #248]	; (8023088 <udp_input+0x21c>)
 8022f8e:	681a      	ldr	r2, [r3, #0]
 8022f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f92:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8022f94:	4a3c      	ldr	r2, [pc, #240]	; (8023088 <udp_input+0x21c>)
 8022f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f98:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8022f9a:	e008      	b.n	8022fae <udp_input+0x142>
      }
    }

    prev = pcb;
 8022f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022f9e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8022fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fa2:	68db      	ldr	r3, [r3, #12]
 8022fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8022fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fa8:	2b00      	cmp	r3, #0
 8022faa:	d1a7      	bne.n	8022efc <udp_input+0x90>
 8022fac:	e000      	b.n	8022fb0 <udp_input+0x144>
        break;
 8022fae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8022fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fb2:	2b00      	cmp	r3, #0
 8022fb4:	d101      	bne.n	8022fba <udp_input+0x14e>
    pcb = uncon_pcb;
 8022fb6:	69fb      	ldr	r3, [r7, #28]
 8022fb8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8022fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022fbc:	2b00      	cmp	r3, #0
 8022fbe:	d002      	beq.n	8022fc6 <udp_input+0x15a>
    for_us = 1;
 8022fc0:	2301      	movs	r3, #1
 8022fc2:	76fb      	strb	r3, [r7, #27]
 8022fc4:	e00a      	b.n	8022fdc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8022fc6:	683b      	ldr	r3, [r7, #0]
 8022fc8:	3304      	adds	r3, #4
 8022fca:	681a      	ldr	r2, [r3, #0]
 8022fcc:	4b2d      	ldr	r3, [pc, #180]	; (8023084 <udp_input+0x218>)
 8022fce:	695b      	ldr	r3, [r3, #20]
 8022fd0:	429a      	cmp	r2, r3
 8022fd2:	bf0c      	ite	eq
 8022fd4:	2301      	moveq	r3, #1
 8022fd6:	2300      	movne	r3, #0
 8022fd8:	b2db      	uxtb	r3, r3
 8022fda:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8022fdc:	7efb      	ldrb	r3, [r7, #27]
 8022fde:	2b00      	cmp	r3, #0
 8022fe0:	d041      	beq.n	8023066 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8022fe2:	2108      	movs	r1, #8
 8022fe4:	6878      	ldr	r0, [r7, #4]
 8022fe6:	f7ff fa2d 	bl	8022444 <pbuf_remove_header>
 8022fea:	4603      	mov	r3, r0
 8022fec:	2b00      	cmp	r3, #0
 8022fee:	d00a      	beq.n	8023006 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8022ff0:	4b20      	ldr	r3, [pc, #128]	; (8023074 <udp_input+0x208>)
 8022ff2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8022ff6:	4925      	ldr	r1, [pc, #148]	; (802308c <udp_input+0x220>)
 8022ff8:	4820      	ldr	r0, [pc, #128]	; (802307c <udp_input+0x210>)
 8022ffa:	f002 ffe1 	bl	8025fc0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8022ffe:	6878      	ldr	r0, [r7, #4]
 8023000:	f7ff faa6 	bl	8022550 <pbuf_free>
      goto end;
 8023004:	e032      	b.n	802306c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8023006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023008:	2b00      	cmp	r3, #0
 802300a:	d012      	beq.n	8023032 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 802300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802300e:	699b      	ldr	r3, [r3, #24]
 8023010:	2b00      	cmp	r3, #0
 8023012:	d00a      	beq.n	802302a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8023014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023016:	699c      	ldr	r4, [r3, #24]
 8023018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802301a:	69d8      	ldr	r0, [r3, #28]
 802301c:	8a3b      	ldrh	r3, [r7, #16]
 802301e:	9300      	str	r3, [sp, #0]
 8023020:	4b1b      	ldr	r3, [pc, #108]	; (8023090 <udp_input+0x224>)
 8023022:	687a      	ldr	r2, [r7, #4]
 8023024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8023026:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8023028:	e021      	b.n	802306e <udp_input+0x202>
        pbuf_free(p);
 802302a:	6878      	ldr	r0, [r7, #4]
 802302c:	f7ff fa90 	bl	8022550 <pbuf_free>
        goto end;
 8023030:	e01c      	b.n	802306c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8023032:	7cfb      	ldrb	r3, [r7, #19]
 8023034:	2b00      	cmp	r3, #0
 8023036:	d112      	bne.n	802305e <udp_input+0x1f2>
 8023038:	4b12      	ldr	r3, [pc, #72]	; (8023084 <udp_input+0x218>)
 802303a:	695b      	ldr	r3, [r3, #20]
 802303c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023040:	2be0      	cmp	r3, #224	; 0xe0
 8023042:	d00c      	beq.n	802305e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8023044:	4b0f      	ldr	r3, [pc, #60]	; (8023084 <udp_input+0x218>)
 8023046:	899b      	ldrh	r3, [r3, #12]
 8023048:	3308      	adds	r3, #8
 802304a:	b29b      	uxth	r3, r3
 802304c:	b21b      	sxth	r3, r3
 802304e:	4619      	mov	r1, r3
 8023050:	6878      	ldr	r0, [r7, #4]
 8023052:	f7ff fa6a 	bl	802252a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8023056:	2103      	movs	r1, #3
 8023058:	6878      	ldr	r0, [r7, #4]
 802305a:	f001 fb53 	bl	8024704 <icmp_dest_unreach>
      pbuf_free(p);
 802305e:	6878      	ldr	r0, [r7, #4]
 8023060:	f7ff fa76 	bl	8022550 <pbuf_free>
  return;
 8023064:	e003      	b.n	802306e <udp_input+0x202>
    pbuf_free(p);
 8023066:	6878      	ldr	r0, [r7, #4]
 8023068:	f7ff fa72 	bl	8022550 <pbuf_free>
  return;
 802306c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 802306e:	372c      	adds	r7, #44	; 0x2c
 8023070:	46bd      	mov	sp, r7
 8023072:	bd90      	pop	{r4, r7, pc}
 8023074:	0802c310 	.word	0x0802c310
 8023078:	0802c3b4 	.word	0x0802c3b4
 802307c:	0802c364 	.word	0x0802c364
 8023080:	0802c3cc 	.word	0x0802c3cc
 8023084:	2001273c 	.word	0x2001273c
 8023088:	20015da0 	.word	0x20015da0
 802308c:	0802c3e8 	.word	0x0802c3e8
 8023090:	2001274c 	.word	0x2001274c

08023094 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8023094:	b580      	push	{r7, lr}
 8023096:	b088      	sub	sp, #32
 8023098:	af02      	add	r7, sp, #8
 802309a:	60f8      	str	r0, [r7, #12]
 802309c:	60b9      	str	r1, [r7, #8]
 802309e:	607a      	str	r2, [r7, #4]
 80230a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80230a2:	68fb      	ldr	r3, [r7, #12]
 80230a4:	2b00      	cmp	r3, #0
 80230a6:	d109      	bne.n	80230bc <udp_sendto+0x28>
 80230a8:	4b23      	ldr	r3, [pc, #140]	; (8023138 <udp_sendto+0xa4>)
 80230aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80230ae:	4923      	ldr	r1, [pc, #140]	; (802313c <udp_sendto+0xa8>)
 80230b0:	4823      	ldr	r0, [pc, #140]	; (8023140 <udp_sendto+0xac>)
 80230b2:	f002 ff85 	bl	8025fc0 <iprintf>
 80230b6:	f06f 030f 	mvn.w	r3, #15
 80230ba:	e038      	b.n	802312e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80230bc:	68bb      	ldr	r3, [r7, #8]
 80230be:	2b00      	cmp	r3, #0
 80230c0:	d109      	bne.n	80230d6 <udp_sendto+0x42>
 80230c2:	4b1d      	ldr	r3, [pc, #116]	; (8023138 <udp_sendto+0xa4>)
 80230c4:	f240 2219 	movw	r2, #537	; 0x219
 80230c8:	491e      	ldr	r1, [pc, #120]	; (8023144 <udp_sendto+0xb0>)
 80230ca:	481d      	ldr	r0, [pc, #116]	; (8023140 <udp_sendto+0xac>)
 80230cc:	f002 ff78 	bl	8025fc0 <iprintf>
 80230d0:	f06f 030f 	mvn.w	r3, #15
 80230d4:	e02b      	b.n	802312e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80230d6:	687b      	ldr	r3, [r7, #4]
 80230d8:	2b00      	cmp	r3, #0
 80230da:	d109      	bne.n	80230f0 <udp_sendto+0x5c>
 80230dc:	4b16      	ldr	r3, [pc, #88]	; (8023138 <udp_sendto+0xa4>)
 80230de:	f240 221a 	movw	r2, #538	; 0x21a
 80230e2:	4919      	ldr	r1, [pc, #100]	; (8023148 <udp_sendto+0xb4>)
 80230e4:	4816      	ldr	r0, [pc, #88]	; (8023140 <udp_sendto+0xac>)
 80230e6:	f002 ff6b 	bl	8025fc0 <iprintf>
 80230ea:	f06f 030f 	mvn.w	r3, #15
 80230ee:	e01e      	b.n	802312e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80230f0:	68fb      	ldr	r3, [r7, #12]
 80230f2:	7a1b      	ldrb	r3, [r3, #8]
 80230f4:	2b00      	cmp	r3, #0
 80230f6:	d006      	beq.n	8023106 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80230f8:	68fb      	ldr	r3, [r7, #12]
 80230fa:	7a1b      	ldrb	r3, [r3, #8]
 80230fc:	4618      	mov	r0, r3
 80230fe:	f7fe fef5 	bl	8021eec <netif_get_by_index>
 8023102:	6178      	str	r0, [r7, #20]
 8023104:	e003      	b.n	802310e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8023106:	6878      	ldr	r0, [r7, #4]
 8023108:	f001 fb86 	bl	8024818 <ip4_route>
 802310c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 802310e:	697b      	ldr	r3, [r7, #20]
 8023110:	2b00      	cmp	r3, #0
 8023112:	d102      	bne.n	802311a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8023114:	f06f 0303 	mvn.w	r3, #3
 8023118:	e009      	b.n	802312e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 802311a:	887a      	ldrh	r2, [r7, #2]
 802311c:	697b      	ldr	r3, [r7, #20]
 802311e:	9300      	str	r3, [sp, #0]
 8023120:	4613      	mov	r3, r2
 8023122:	687a      	ldr	r2, [r7, #4]
 8023124:	68b9      	ldr	r1, [r7, #8]
 8023126:	68f8      	ldr	r0, [r7, #12]
 8023128:	f000 f810 	bl	802314c <udp_sendto_if>
 802312c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 802312e:	4618      	mov	r0, r3
 8023130:	3718      	adds	r7, #24
 8023132:	46bd      	mov	sp, r7
 8023134:	bd80      	pop	{r7, pc}
 8023136:	bf00      	nop
 8023138:	0802c310 	.word	0x0802c310
 802313c:	0802c434 	.word	0x0802c434
 8023140:	0802c364 	.word	0x0802c364
 8023144:	0802c44c 	.word	0x0802c44c
 8023148:	0802c468 	.word	0x0802c468

0802314c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 802314c:	b580      	push	{r7, lr}
 802314e:	b088      	sub	sp, #32
 8023150:	af02      	add	r7, sp, #8
 8023152:	60f8      	str	r0, [r7, #12]
 8023154:	60b9      	str	r1, [r7, #8]
 8023156:	607a      	str	r2, [r7, #4]
 8023158:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 802315a:	68fb      	ldr	r3, [r7, #12]
 802315c:	2b00      	cmp	r3, #0
 802315e:	d109      	bne.n	8023174 <udp_sendto_if+0x28>
 8023160:	4b2e      	ldr	r3, [pc, #184]	; (802321c <udp_sendto_if+0xd0>)
 8023162:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023166:	492e      	ldr	r1, [pc, #184]	; (8023220 <udp_sendto_if+0xd4>)
 8023168:	482e      	ldr	r0, [pc, #184]	; (8023224 <udp_sendto_if+0xd8>)
 802316a:	f002 ff29 	bl	8025fc0 <iprintf>
 802316e:	f06f 030f 	mvn.w	r3, #15
 8023172:	e04f      	b.n	8023214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8023174:	68bb      	ldr	r3, [r7, #8]
 8023176:	2b00      	cmp	r3, #0
 8023178:	d109      	bne.n	802318e <udp_sendto_if+0x42>
 802317a:	4b28      	ldr	r3, [pc, #160]	; (802321c <udp_sendto_if+0xd0>)
 802317c:	f240 2281 	movw	r2, #641	; 0x281
 8023180:	4929      	ldr	r1, [pc, #164]	; (8023228 <udp_sendto_if+0xdc>)
 8023182:	4828      	ldr	r0, [pc, #160]	; (8023224 <udp_sendto_if+0xd8>)
 8023184:	f002 ff1c 	bl	8025fc0 <iprintf>
 8023188:	f06f 030f 	mvn.w	r3, #15
 802318c:	e042      	b.n	8023214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 802318e:	687b      	ldr	r3, [r7, #4]
 8023190:	2b00      	cmp	r3, #0
 8023192:	d109      	bne.n	80231a8 <udp_sendto_if+0x5c>
 8023194:	4b21      	ldr	r3, [pc, #132]	; (802321c <udp_sendto_if+0xd0>)
 8023196:	f240 2282 	movw	r2, #642	; 0x282
 802319a:	4924      	ldr	r1, [pc, #144]	; (802322c <udp_sendto_if+0xe0>)
 802319c:	4821      	ldr	r0, [pc, #132]	; (8023224 <udp_sendto_if+0xd8>)
 802319e:	f002 ff0f 	bl	8025fc0 <iprintf>
 80231a2:	f06f 030f 	mvn.w	r3, #15
 80231a6:	e035      	b.n	8023214 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80231a8:	6a3b      	ldr	r3, [r7, #32]
 80231aa:	2b00      	cmp	r3, #0
 80231ac:	d109      	bne.n	80231c2 <udp_sendto_if+0x76>
 80231ae:	4b1b      	ldr	r3, [pc, #108]	; (802321c <udp_sendto_if+0xd0>)
 80231b0:	f240 2283 	movw	r2, #643	; 0x283
 80231b4:	491e      	ldr	r1, [pc, #120]	; (8023230 <udp_sendto_if+0xe4>)
 80231b6:	481b      	ldr	r0, [pc, #108]	; (8023224 <udp_sendto_if+0xd8>)
 80231b8:	f002 ff02 	bl	8025fc0 <iprintf>
 80231bc:	f06f 030f 	mvn.w	r3, #15
 80231c0:	e028      	b.n	8023214 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80231c2:	68fb      	ldr	r3, [r7, #12]
 80231c4:	2b00      	cmp	r3, #0
 80231c6:	d009      	beq.n	80231dc <udp_sendto_if+0x90>
 80231c8:	68fb      	ldr	r3, [r7, #12]
 80231ca:	681b      	ldr	r3, [r3, #0]
 80231cc:	2b00      	cmp	r3, #0
 80231ce:	d005      	beq.n	80231dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80231d0:	68fb      	ldr	r3, [r7, #12]
 80231d2:	681b      	ldr	r3, [r3, #0]
 80231d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80231d8:	2be0      	cmp	r3, #224	; 0xe0
 80231da:	d103      	bne.n	80231e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80231dc:	6a3b      	ldr	r3, [r7, #32]
 80231de:	3304      	adds	r3, #4
 80231e0:	617b      	str	r3, [r7, #20]
 80231e2:	e00b      	b.n	80231fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80231e4:	68fb      	ldr	r3, [r7, #12]
 80231e6:	681a      	ldr	r2, [r3, #0]
 80231e8:	6a3b      	ldr	r3, [r7, #32]
 80231ea:	3304      	adds	r3, #4
 80231ec:	681b      	ldr	r3, [r3, #0]
 80231ee:	429a      	cmp	r2, r3
 80231f0:	d002      	beq.n	80231f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80231f2:	f06f 0303 	mvn.w	r3, #3
 80231f6:	e00d      	b.n	8023214 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80231f8:	68fb      	ldr	r3, [r7, #12]
 80231fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80231fc:	887a      	ldrh	r2, [r7, #2]
 80231fe:	697b      	ldr	r3, [r7, #20]
 8023200:	9301      	str	r3, [sp, #4]
 8023202:	6a3b      	ldr	r3, [r7, #32]
 8023204:	9300      	str	r3, [sp, #0]
 8023206:	4613      	mov	r3, r2
 8023208:	687a      	ldr	r2, [r7, #4]
 802320a:	68b9      	ldr	r1, [r7, #8]
 802320c:	68f8      	ldr	r0, [r7, #12]
 802320e:	f000 f811 	bl	8023234 <udp_sendto_if_src>
 8023212:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8023214:	4618      	mov	r0, r3
 8023216:	3718      	adds	r7, #24
 8023218:	46bd      	mov	sp, r7
 802321a:	bd80      	pop	{r7, pc}
 802321c:	0802c310 	.word	0x0802c310
 8023220:	0802c484 	.word	0x0802c484
 8023224:	0802c364 	.word	0x0802c364
 8023228:	0802c4a0 	.word	0x0802c4a0
 802322c:	0802c4bc 	.word	0x0802c4bc
 8023230:	0802c4dc 	.word	0x0802c4dc

08023234 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8023234:	b580      	push	{r7, lr}
 8023236:	b08c      	sub	sp, #48	; 0x30
 8023238:	af04      	add	r7, sp, #16
 802323a:	60f8      	str	r0, [r7, #12]
 802323c:	60b9      	str	r1, [r7, #8]
 802323e:	607a      	str	r2, [r7, #4]
 8023240:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8023242:	68fb      	ldr	r3, [r7, #12]
 8023244:	2b00      	cmp	r3, #0
 8023246:	d109      	bne.n	802325c <udp_sendto_if_src+0x28>
 8023248:	4b65      	ldr	r3, [pc, #404]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 802324a:	f240 22d1 	movw	r2, #721	; 0x2d1
 802324e:	4965      	ldr	r1, [pc, #404]	; (80233e4 <udp_sendto_if_src+0x1b0>)
 8023250:	4865      	ldr	r0, [pc, #404]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 8023252:	f002 feb5 	bl	8025fc0 <iprintf>
 8023256:	f06f 030f 	mvn.w	r3, #15
 802325a:	e0bc      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 802325c:	68bb      	ldr	r3, [r7, #8]
 802325e:	2b00      	cmp	r3, #0
 8023260:	d109      	bne.n	8023276 <udp_sendto_if_src+0x42>
 8023262:	4b5f      	ldr	r3, [pc, #380]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 8023264:	f240 22d2 	movw	r2, #722	; 0x2d2
 8023268:	4960      	ldr	r1, [pc, #384]	; (80233ec <udp_sendto_if_src+0x1b8>)
 802326a:	485f      	ldr	r0, [pc, #380]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 802326c:	f002 fea8 	bl	8025fc0 <iprintf>
 8023270:	f06f 030f 	mvn.w	r3, #15
 8023274:	e0af      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8023276:	687b      	ldr	r3, [r7, #4]
 8023278:	2b00      	cmp	r3, #0
 802327a:	d109      	bne.n	8023290 <udp_sendto_if_src+0x5c>
 802327c:	4b58      	ldr	r3, [pc, #352]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 802327e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8023282:	495b      	ldr	r1, [pc, #364]	; (80233f0 <udp_sendto_if_src+0x1bc>)
 8023284:	4858      	ldr	r0, [pc, #352]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 8023286:	f002 fe9b 	bl	8025fc0 <iprintf>
 802328a:	f06f 030f 	mvn.w	r3, #15
 802328e:	e0a2      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8023290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023292:	2b00      	cmp	r3, #0
 8023294:	d109      	bne.n	80232aa <udp_sendto_if_src+0x76>
 8023296:	4b52      	ldr	r3, [pc, #328]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 8023298:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 802329c:	4955      	ldr	r1, [pc, #340]	; (80233f4 <udp_sendto_if_src+0x1c0>)
 802329e:	4852      	ldr	r0, [pc, #328]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 80232a0:	f002 fe8e 	bl	8025fc0 <iprintf>
 80232a4:	f06f 030f 	mvn.w	r3, #15
 80232a8:	e095      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80232aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80232ac:	2b00      	cmp	r3, #0
 80232ae:	d109      	bne.n	80232c4 <udp_sendto_if_src+0x90>
 80232b0:	4b4b      	ldr	r3, [pc, #300]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 80232b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 80232b6:	4950      	ldr	r1, [pc, #320]	; (80233f8 <udp_sendto_if_src+0x1c4>)
 80232b8:	484b      	ldr	r0, [pc, #300]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 80232ba:	f002 fe81 	bl	8025fc0 <iprintf>
 80232be:	f06f 030f 	mvn.w	r3, #15
 80232c2:	e088      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80232c4:	68fb      	ldr	r3, [r7, #12]
 80232c6:	8a5b      	ldrh	r3, [r3, #18]
 80232c8:	2b00      	cmp	r3, #0
 80232ca:	d10f      	bne.n	80232ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80232cc:	68f9      	ldr	r1, [r7, #12]
 80232ce:	68fb      	ldr	r3, [r7, #12]
 80232d0:	8a5b      	ldrh	r3, [r3, #18]
 80232d2:	461a      	mov	r2, r3
 80232d4:	68f8      	ldr	r0, [r7, #12]
 80232d6:	f000 f893 	bl	8023400 <udp_bind>
 80232da:	4603      	mov	r3, r0
 80232dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80232de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80232e2:	2b00      	cmp	r3, #0
 80232e4:	d002      	beq.n	80232ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80232e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80232ea:	e074      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80232ec:	68bb      	ldr	r3, [r7, #8]
 80232ee:	891b      	ldrh	r3, [r3, #8]
 80232f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80232f4:	4293      	cmp	r3, r2
 80232f6:	d902      	bls.n	80232fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80232f8:	f04f 33ff 	mov.w	r3, #4294967295
 80232fc:	e06b      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80232fe:	2108      	movs	r1, #8
 8023300:	68b8      	ldr	r0, [r7, #8]
 8023302:	f7ff f88f 	bl	8022424 <pbuf_add_header>
 8023306:	4603      	mov	r3, r0
 8023308:	2b00      	cmp	r3, #0
 802330a:	d015      	beq.n	8023338 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 802330c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023310:	2108      	movs	r1, #8
 8023312:	2022      	movs	r0, #34	; 0x22
 8023314:	f7fe fe3a 	bl	8021f8c <pbuf_alloc>
 8023318:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 802331a:	69fb      	ldr	r3, [r7, #28]
 802331c:	2b00      	cmp	r3, #0
 802331e:	d102      	bne.n	8023326 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8023320:	f04f 33ff 	mov.w	r3, #4294967295
 8023324:	e057      	b.n	80233d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8023326:	68bb      	ldr	r3, [r7, #8]
 8023328:	891b      	ldrh	r3, [r3, #8]
 802332a:	2b00      	cmp	r3, #0
 802332c:	d006      	beq.n	802333c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 802332e:	68b9      	ldr	r1, [r7, #8]
 8023330:	69f8      	ldr	r0, [r7, #28]
 8023332:	f7ff fa25 	bl	8022780 <pbuf_chain>
 8023336:	e001      	b.n	802333c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8023338:	68bb      	ldr	r3, [r7, #8]
 802333a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 802333c:	69fb      	ldr	r3, [r7, #28]
 802333e:	895b      	ldrh	r3, [r3, #10]
 8023340:	2b07      	cmp	r3, #7
 8023342:	d806      	bhi.n	8023352 <udp_sendto_if_src+0x11e>
 8023344:	4b26      	ldr	r3, [pc, #152]	; (80233e0 <udp_sendto_if_src+0x1ac>)
 8023346:	f240 320d 	movw	r2, #781	; 0x30d
 802334a:	492c      	ldr	r1, [pc, #176]	; (80233fc <udp_sendto_if_src+0x1c8>)
 802334c:	4826      	ldr	r0, [pc, #152]	; (80233e8 <udp_sendto_if_src+0x1b4>)
 802334e:	f002 fe37 	bl	8025fc0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8023352:	69fb      	ldr	r3, [r7, #28]
 8023354:	685b      	ldr	r3, [r3, #4]
 8023356:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8023358:	68fb      	ldr	r3, [r7, #12]
 802335a:	8a5b      	ldrh	r3, [r3, #18]
 802335c:	4618      	mov	r0, r3
 802335e:	f7fd fd1b 	bl	8020d98 <lwip_htons>
 8023362:	4603      	mov	r3, r0
 8023364:	461a      	mov	r2, r3
 8023366:	697b      	ldr	r3, [r7, #20]
 8023368:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 802336a:	887b      	ldrh	r3, [r7, #2]
 802336c:	4618      	mov	r0, r3
 802336e:	f7fd fd13 	bl	8020d98 <lwip_htons>
 8023372:	4603      	mov	r3, r0
 8023374:	461a      	mov	r2, r3
 8023376:	697b      	ldr	r3, [r7, #20]
 8023378:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 802337a:	697b      	ldr	r3, [r7, #20]
 802337c:	2200      	movs	r2, #0
 802337e:	719a      	strb	r2, [r3, #6]
 8023380:	2200      	movs	r2, #0
 8023382:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8023384:	69fb      	ldr	r3, [r7, #28]
 8023386:	891b      	ldrh	r3, [r3, #8]
 8023388:	4618      	mov	r0, r3
 802338a:	f7fd fd05 	bl	8020d98 <lwip_htons>
 802338e:	4603      	mov	r3, r0
 8023390:	461a      	mov	r2, r3
 8023392:	697b      	ldr	r3, [r7, #20]
 8023394:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8023396:	2311      	movs	r3, #17
 8023398:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 802339a:	68fb      	ldr	r3, [r7, #12]
 802339c:	7adb      	ldrb	r3, [r3, #11]
 802339e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80233a0:	68fb      	ldr	r3, [r7, #12]
 80233a2:	7a9b      	ldrb	r3, [r3, #10]
 80233a4:	7cb9      	ldrb	r1, [r7, #18]
 80233a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80233a8:	9202      	str	r2, [sp, #8]
 80233aa:	7cfa      	ldrb	r2, [r7, #19]
 80233ac:	9201      	str	r2, [sp, #4]
 80233ae:	9300      	str	r3, [sp, #0]
 80233b0:	460b      	mov	r3, r1
 80233b2:	687a      	ldr	r2, [r7, #4]
 80233b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80233b6:	69f8      	ldr	r0, [r7, #28]
 80233b8:	f001 fc0c 	bl	8024bd4 <ip4_output_if_src>
 80233bc:	4603      	mov	r3, r0
 80233be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80233c0:	69fa      	ldr	r2, [r7, #28]
 80233c2:	68bb      	ldr	r3, [r7, #8]
 80233c4:	429a      	cmp	r2, r3
 80233c6:	d004      	beq.n	80233d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80233c8:	69f8      	ldr	r0, [r7, #28]
 80233ca:	f7ff f8c1 	bl	8022550 <pbuf_free>
    q = NULL;
 80233ce:	2300      	movs	r3, #0
 80233d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80233d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80233d6:	4618      	mov	r0, r3
 80233d8:	3720      	adds	r7, #32
 80233da:	46bd      	mov	sp, r7
 80233dc:	bd80      	pop	{r7, pc}
 80233de:	bf00      	nop
 80233e0:	0802c310 	.word	0x0802c310
 80233e4:	0802c4fc 	.word	0x0802c4fc
 80233e8:	0802c364 	.word	0x0802c364
 80233ec:	0802c51c 	.word	0x0802c51c
 80233f0:	0802c53c 	.word	0x0802c53c
 80233f4:	0802c560 	.word	0x0802c560
 80233f8:	0802c584 	.word	0x0802c584
 80233fc:	0802c5a8 	.word	0x0802c5a8

08023400 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8023400:	b580      	push	{r7, lr}
 8023402:	b086      	sub	sp, #24
 8023404:	af00      	add	r7, sp, #0
 8023406:	60f8      	str	r0, [r7, #12]
 8023408:	60b9      	str	r1, [r7, #8]
 802340a:	4613      	mov	r3, r2
 802340c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802340e:	68bb      	ldr	r3, [r7, #8]
 8023410:	2b00      	cmp	r3, #0
 8023412:	d101      	bne.n	8023418 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8023414:	4b39      	ldr	r3, [pc, #228]	; (80234fc <udp_bind+0xfc>)
 8023416:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8023418:	68fb      	ldr	r3, [r7, #12]
 802341a:	2b00      	cmp	r3, #0
 802341c:	d109      	bne.n	8023432 <udp_bind+0x32>
 802341e:	4b38      	ldr	r3, [pc, #224]	; (8023500 <udp_bind+0x100>)
 8023420:	f240 32b7 	movw	r2, #951	; 0x3b7
 8023424:	4937      	ldr	r1, [pc, #220]	; (8023504 <udp_bind+0x104>)
 8023426:	4838      	ldr	r0, [pc, #224]	; (8023508 <udp_bind+0x108>)
 8023428:	f002 fdca 	bl	8025fc0 <iprintf>
 802342c:	f06f 030f 	mvn.w	r3, #15
 8023430:	e060      	b.n	80234f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8023432:	2300      	movs	r3, #0
 8023434:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023436:	4b35      	ldr	r3, [pc, #212]	; (802350c <udp_bind+0x10c>)
 8023438:	681b      	ldr	r3, [r3, #0]
 802343a:	617b      	str	r3, [r7, #20]
 802343c:	e009      	b.n	8023452 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 802343e:	68fa      	ldr	r2, [r7, #12]
 8023440:	697b      	ldr	r3, [r7, #20]
 8023442:	429a      	cmp	r2, r3
 8023444:	d102      	bne.n	802344c <udp_bind+0x4c>
      rebind = 1;
 8023446:	2301      	movs	r3, #1
 8023448:	74fb      	strb	r3, [r7, #19]
      break;
 802344a:	e005      	b.n	8023458 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802344c:	697b      	ldr	r3, [r7, #20]
 802344e:	68db      	ldr	r3, [r3, #12]
 8023450:	617b      	str	r3, [r7, #20]
 8023452:	697b      	ldr	r3, [r7, #20]
 8023454:	2b00      	cmp	r3, #0
 8023456:	d1f2      	bne.n	802343e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8023458:	88fb      	ldrh	r3, [r7, #6]
 802345a:	2b00      	cmp	r3, #0
 802345c:	d109      	bne.n	8023472 <udp_bind+0x72>
    port = udp_new_port();
 802345e:	f7ff fc69 	bl	8022d34 <udp_new_port>
 8023462:	4603      	mov	r3, r0
 8023464:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8023466:	88fb      	ldrh	r3, [r7, #6]
 8023468:	2b00      	cmp	r3, #0
 802346a:	d12c      	bne.n	80234c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 802346c:	f06f 0307 	mvn.w	r3, #7
 8023470:	e040      	b.n	80234f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8023472:	4b26      	ldr	r3, [pc, #152]	; (802350c <udp_bind+0x10c>)
 8023474:	681b      	ldr	r3, [r3, #0]
 8023476:	617b      	str	r3, [r7, #20]
 8023478:	e022      	b.n	80234c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 802347a:	68fa      	ldr	r2, [r7, #12]
 802347c:	697b      	ldr	r3, [r7, #20]
 802347e:	429a      	cmp	r2, r3
 8023480:	d01b      	beq.n	80234ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8023482:	697b      	ldr	r3, [r7, #20]
 8023484:	8a5b      	ldrh	r3, [r3, #18]
 8023486:	88fa      	ldrh	r2, [r7, #6]
 8023488:	429a      	cmp	r2, r3
 802348a:	d116      	bne.n	80234ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 802348c:	697b      	ldr	r3, [r7, #20]
 802348e:	681a      	ldr	r2, [r3, #0]
 8023490:	68bb      	ldr	r3, [r7, #8]
 8023492:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8023494:	429a      	cmp	r2, r3
 8023496:	d00d      	beq.n	80234b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8023498:	68bb      	ldr	r3, [r7, #8]
 802349a:	2b00      	cmp	r3, #0
 802349c:	d00a      	beq.n	80234b4 <udp_bind+0xb4>
 802349e:	68bb      	ldr	r3, [r7, #8]
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	2b00      	cmp	r3, #0
 80234a4:	d006      	beq.n	80234b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80234a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80234a8:	2b00      	cmp	r3, #0
 80234aa:	d003      	beq.n	80234b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80234ac:	697b      	ldr	r3, [r7, #20]
 80234ae:	681b      	ldr	r3, [r3, #0]
 80234b0:	2b00      	cmp	r3, #0
 80234b2:	d102      	bne.n	80234ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80234b4:	f06f 0307 	mvn.w	r3, #7
 80234b8:	e01c      	b.n	80234f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80234ba:	697b      	ldr	r3, [r7, #20]
 80234bc:	68db      	ldr	r3, [r3, #12]
 80234be:	617b      	str	r3, [r7, #20]
 80234c0:	697b      	ldr	r3, [r7, #20]
 80234c2:	2b00      	cmp	r3, #0
 80234c4:	d1d9      	bne.n	802347a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80234c6:	68bb      	ldr	r3, [r7, #8]
 80234c8:	2b00      	cmp	r3, #0
 80234ca:	d002      	beq.n	80234d2 <udp_bind+0xd2>
 80234cc:	68bb      	ldr	r3, [r7, #8]
 80234ce:	681b      	ldr	r3, [r3, #0]
 80234d0:	e000      	b.n	80234d4 <udp_bind+0xd4>
 80234d2:	2300      	movs	r3, #0
 80234d4:	68fa      	ldr	r2, [r7, #12]
 80234d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80234d8:	68fb      	ldr	r3, [r7, #12]
 80234da:	88fa      	ldrh	r2, [r7, #6]
 80234dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80234de:	7cfb      	ldrb	r3, [r7, #19]
 80234e0:	2b00      	cmp	r3, #0
 80234e2:	d106      	bne.n	80234f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80234e4:	4b09      	ldr	r3, [pc, #36]	; (802350c <udp_bind+0x10c>)
 80234e6:	681a      	ldr	r2, [r3, #0]
 80234e8:	68fb      	ldr	r3, [r7, #12]
 80234ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80234ec:	4a07      	ldr	r2, [pc, #28]	; (802350c <udp_bind+0x10c>)
 80234ee:	68fb      	ldr	r3, [r7, #12]
 80234f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80234f2:	2300      	movs	r3, #0
}
 80234f4:	4618      	mov	r0, r3
 80234f6:	3718      	adds	r7, #24
 80234f8:	46bd      	mov	sp, r7
 80234fa:	bd80      	pop	{r7, pc}
 80234fc:	0802d1f0 	.word	0x0802d1f0
 8023500:	0802c310 	.word	0x0802c310
 8023504:	0802c5d8 	.word	0x0802c5d8
 8023508:	0802c364 	.word	0x0802c364
 802350c:	20015da0 	.word	0x20015da0

08023510 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8023510:	b580      	push	{r7, lr}
 8023512:	b084      	sub	sp, #16
 8023514:	af00      	add	r7, sp, #0
 8023516:	60f8      	str	r0, [r7, #12]
 8023518:	60b9      	str	r1, [r7, #8]
 802351a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 802351c:	68fb      	ldr	r3, [r7, #12]
 802351e:	2b00      	cmp	r3, #0
 8023520:	d107      	bne.n	8023532 <udp_recv+0x22>
 8023522:	4b08      	ldr	r3, [pc, #32]	; (8023544 <udp_recv+0x34>)
 8023524:	f240 428a 	movw	r2, #1162	; 0x48a
 8023528:	4907      	ldr	r1, [pc, #28]	; (8023548 <udp_recv+0x38>)
 802352a:	4808      	ldr	r0, [pc, #32]	; (802354c <udp_recv+0x3c>)
 802352c:	f002 fd48 	bl	8025fc0 <iprintf>
 8023530:	e005      	b.n	802353e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8023532:	68fb      	ldr	r3, [r7, #12]
 8023534:	68ba      	ldr	r2, [r7, #8]
 8023536:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8023538:	68fb      	ldr	r3, [r7, #12]
 802353a:	687a      	ldr	r2, [r7, #4]
 802353c:	61da      	str	r2, [r3, #28]
}
 802353e:	3710      	adds	r7, #16
 8023540:	46bd      	mov	sp, r7
 8023542:	bd80      	pop	{r7, pc}
 8023544:	0802c310 	.word	0x0802c310
 8023548:	0802c644 	.word	0x0802c644
 802354c:	0802c364 	.word	0x0802c364

08023550 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8023550:	b580      	push	{r7, lr}
 8023552:	b084      	sub	sp, #16
 8023554:	af00      	add	r7, sp, #0
 8023556:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8023558:	687b      	ldr	r3, [r7, #4]
 802355a:	2b00      	cmp	r3, #0
 802355c:	d107      	bne.n	802356e <udp_remove+0x1e>
 802355e:	4b19      	ldr	r3, [pc, #100]	; (80235c4 <udp_remove+0x74>)
 8023560:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8023564:	4918      	ldr	r1, [pc, #96]	; (80235c8 <udp_remove+0x78>)
 8023566:	4819      	ldr	r0, [pc, #100]	; (80235cc <udp_remove+0x7c>)
 8023568:	f002 fd2a 	bl	8025fc0 <iprintf>
 802356c:	e026      	b.n	80235bc <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 802356e:	4b18      	ldr	r3, [pc, #96]	; (80235d0 <udp_remove+0x80>)
 8023570:	681b      	ldr	r3, [r3, #0]
 8023572:	687a      	ldr	r2, [r7, #4]
 8023574:	429a      	cmp	r2, r3
 8023576:	d105      	bne.n	8023584 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8023578:	4b15      	ldr	r3, [pc, #84]	; (80235d0 <udp_remove+0x80>)
 802357a:	681b      	ldr	r3, [r3, #0]
 802357c:	68db      	ldr	r3, [r3, #12]
 802357e:	4a14      	ldr	r2, [pc, #80]	; (80235d0 <udp_remove+0x80>)
 8023580:	6013      	str	r3, [r2, #0]
 8023582:	e017      	b.n	80235b4 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8023584:	4b12      	ldr	r3, [pc, #72]	; (80235d0 <udp_remove+0x80>)
 8023586:	681b      	ldr	r3, [r3, #0]
 8023588:	60fb      	str	r3, [r7, #12]
 802358a:	e010      	b.n	80235ae <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 802358c:	68fb      	ldr	r3, [r7, #12]
 802358e:	68db      	ldr	r3, [r3, #12]
 8023590:	2b00      	cmp	r3, #0
 8023592:	d009      	beq.n	80235a8 <udp_remove+0x58>
 8023594:	68fb      	ldr	r3, [r7, #12]
 8023596:	68db      	ldr	r3, [r3, #12]
 8023598:	687a      	ldr	r2, [r7, #4]
 802359a:	429a      	cmp	r2, r3
 802359c:	d104      	bne.n	80235a8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 802359e:	687b      	ldr	r3, [r7, #4]
 80235a0:	68da      	ldr	r2, [r3, #12]
 80235a2:	68fb      	ldr	r3, [r7, #12]
 80235a4:	60da      	str	r2, [r3, #12]
        break;
 80235a6:	e005      	b.n	80235b4 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80235a8:	68fb      	ldr	r3, [r7, #12]
 80235aa:	68db      	ldr	r3, [r3, #12]
 80235ac:	60fb      	str	r3, [r7, #12]
 80235ae:	68fb      	ldr	r3, [r7, #12]
 80235b0:	2b00      	cmp	r3, #0
 80235b2:	d1eb      	bne.n	802358c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80235b4:	6879      	ldr	r1, [r7, #4]
 80235b6:	2000      	movs	r0, #0
 80235b8:	f7fe f8ba 	bl	8021730 <memp_free>
}
 80235bc:	3710      	adds	r7, #16
 80235be:	46bd      	mov	sp, r7
 80235c0:	bd80      	pop	{r7, pc}
 80235c2:	bf00      	nop
 80235c4:	0802c310 	.word	0x0802c310
 80235c8:	0802c65c 	.word	0x0802c65c
 80235cc:	0802c364 	.word	0x0802c364
 80235d0:	20015da0 	.word	0x20015da0

080235d4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80235d4:	b580      	push	{r7, lr}
 80235d6:	b082      	sub	sp, #8
 80235d8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80235da:	2000      	movs	r0, #0
 80235dc:	f7fe f838 	bl	8021650 <memp_malloc>
 80235e0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80235e2:	687b      	ldr	r3, [r7, #4]
 80235e4:	2b00      	cmp	r3, #0
 80235e6:	d007      	beq.n	80235f8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80235e8:	2220      	movs	r2, #32
 80235ea:	2100      	movs	r1, #0
 80235ec:	6878      	ldr	r0, [r7, #4]
 80235ee:	f002 fbff 	bl	8025df0 <memset>
    pcb->ttl = UDP_TTL;
 80235f2:	687b      	ldr	r3, [r7, #4]
 80235f4:	22ff      	movs	r2, #255	; 0xff
 80235f6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80235f8:	687b      	ldr	r3, [r7, #4]
}
 80235fa:	4618      	mov	r0, r3
 80235fc:	3708      	adds	r7, #8
 80235fe:	46bd      	mov	sp, r7
 8023600:	bd80      	pop	{r7, pc}
	...

08023604 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8023604:	b480      	push	{r7}
 8023606:	b085      	sub	sp, #20
 8023608:	af00      	add	r7, sp, #0
 802360a:	6078      	str	r0, [r7, #4]
 802360c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 802360e:	687b      	ldr	r3, [r7, #4]
 8023610:	2b00      	cmp	r3, #0
 8023612:	d01e      	beq.n	8023652 <udp_netif_ip_addr_changed+0x4e>
 8023614:	687b      	ldr	r3, [r7, #4]
 8023616:	681b      	ldr	r3, [r3, #0]
 8023618:	2b00      	cmp	r3, #0
 802361a:	d01a      	beq.n	8023652 <udp_netif_ip_addr_changed+0x4e>
 802361c:	683b      	ldr	r3, [r7, #0]
 802361e:	2b00      	cmp	r3, #0
 8023620:	d017      	beq.n	8023652 <udp_netif_ip_addr_changed+0x4e>
 8023622:	683b      	ldr	r3, [r7, #0]
 8023624:	681b      	ldr	r3, [r3, #0]
 8023626:	2b00      	cmp	r3, #0
 8023628:	d013      	beq.n	8023652 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802362a:	4b0d      	ldr	r3, [pc, #52]	; (8023660 <udp_netif_ip_addr_changed+0x5c>)
 802362c:	681b      	ldr	r3, [r3, #0]
 802362e:	60fb      	str	r3, [r7, #12]
 8023630:	e00c      	b.n	802364c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8023632:	68fb      	ldr	r3, [r7, #12]
 8023634:	681a      	ldr	r2, [r3, #0]
 8023636:	687b      	ldr	r3, [r7, #4]
 8023638:	681b      	ldr	r3, [r3, #0]
 802363a:	429a      	cmp	r2, r3
 802363c:	d103      	bne.n	8023646 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802363e:	683b      	ldr	r3, [r7, #0]
 8023640:	681a      	ldr	r2, [r3, #0]
 8023642:	68fb      	ldr	r3, [r7, #12]
 8023644:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8023646:	68fb      	ldr	r3, [r7, #12]
 8023648:	68db      	ldr	r3, [r3, #12]
 802364a:	60fb      	str	r3, [r7, #12]
 802364c:	68fb      	ldr	r3, [r7, #12]
 802364e:	2b00      	cmp	r3, #0
 8023650:	d1ef      	bne.n	8023632 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8023652:	bf00      	nop
 8023654:	3714      	adds	r7, #20
 8023656:	46bd      	mov	sp, r7
 8023658:	f85d 7b04 	ldr.w	r7, [sp], #4
 802365c:	4770      	bx	lr
 802365e:	bf00      	nop
 8023660:	20015da0 	.word	0x20015da0

08023664 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8023664:	b580      	push	{r7, lr}
 8023666:	b082      	sub	sp, #8
 8023668:	af00      	add	r7, sp, #0
 802366a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802366c:	4915      	ldr	r1, [pc, #84]	; (80236c4 <etharp_free_entry+0x60>)
 802366e:	687a      	ldr	r2, [r7, #4]
 8023670:	4613      	mov	r3, r2
 8023672:	005b      	lsls	r3, r3, #1
 8023674:	4413      	add	r3, r2
 8023676:	00db      	lsls	r3, r3, #3
 8023678:	440b      	add	r3, r1
 802367a:	681b      	ldr	r3, [r3, #0]
 802367c:	2b00      	cmp	r3, #0
 802367e:	d013      	beq.n	80236a8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8023680:	4910      	ldr	r1, [pc, #64]	; (80236c4 <etharp_free_entry+0x60>)
 8023682:	687a      	ldr	r2, [r7, #4]
 8023684:	4613      	mov	r3, r2
 8023686:	005b      	lsls	r3, r3, #1
 8023688:	4413      	add	r3, r2
 802368a:	00db      	lsls	r3, r3, #3
 802368c:	440b      	add	r3, r1
 802368e:	681b      	ldr	r3, [r3, #0]
 8023690:	4618      	mov	r0, r3
 8023692:	f7fe ff5d 	bl	8022550 <pbuf_free>
    arp_table[i].q = NULL;
 8023696:	490b      	ldr	r1, [pc, #44]	; (80236c4 <etharp_free_entry+0x60>)
 8023698:	687a      	ldr	r2, [r7, #4]
 802369a:	4613      	mov	r3, r2
 802369c:	005b      	lsls	r3, r3, #1
 802369e:	4413      	add	r3, r2
 80236a0:	00db      	lsls	r3, r3, #3
 80236a2:	440b      	add	r3, r1
 80236a4:	2200      	movs	r2, #0
 80236a6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80236a8:	4906      	ldr	r1, [pc, #24]	; (80236c4 <etharp_free_entry+0x60>)
 80236aa:	687a      	ldr	r2, [r7, #4]
 80236ac:	4613      	mov	r3, r2
 80236ae:	005b      	lsls	r3, r3, #1
 80236b0:	4413      	add	r3, r2
 80236b2:	00db      	lsls	r3, r3, #3
 80236b4:	440b      	add	r3, r1
 80236b6:	3314      	adds	r3, #20
 80236b8:	2200      	movs	r2, #0
 80236ba:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80236bc:	bf00      	nop
 80236be:	3708      	adds	r7, #8
 80236c0:	46bd      	mov	sp, r7
 80236c2:	bd80      	pop	{r7, pc}
 80236c4:	20015da4 	.word	0x20015da4

080236c8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80236c8:	b580      	push	{r7, lr}
 80236ca:	b082      	sub	sp, #8
 80236cc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80236ce:	2300      	movs	r3, #0
 80236d0:	607b      	str	r3, [r7, #4]
 80236d2:	e096      	b.n	8023802 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80236d4:	494f      	ldr	r1, [pc, #316]	; (8023814 <etharp_tmr+0x14c>)
 80236d6:	687a      	ldr	r2, [r7, #4]
 80236d8:	4613      	mov	r3, r2
 80236da:	005b      	lsls	r3, r3, #1
 80236dc:	4413      	add	r3, r2
 80236de:	00db      	lsls	r3, r3, #3
 80236e0:	440b      	add	r3, r1
 80236e2:	3314      	adds	r3, #20
 80236e4:	781b      	ldrb	r3, [r3, #0]
 80236e6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80236e8:	78fb      	ldrb	r3, [r7, #3]
 80236ea:	2b00      	cmp	r3, #0
 80236ec:	f000 8086 	beq.w	80237fc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80236f0:	4948      	ldr	r1, [pc, #288]	; (8023814 <etharp_tmr+0x14c>)
 80236f2:	687a      	ldr	r2, [r7, #4]
 80236f4:	4613      	mov	r3, r2
 80236f6:	005b      	lsls	r3, r3, #1
 80236f8:	4413      	add	r3, r2
 80236fa:	00db      	lsls	r3, r3, #3
 80236fc:	440b      	add	r3, r1
 80236fe:	3312      	adds	r3, #18
 8023700:	881b      	ldrh	r3, [r3, #0]
 8023702:	3301      	adds	r3, #1
 8023704:	b298      	uxth	r0, r3
 8023706:	4943      	ldr	r1, [pc, #268]	; (8023814 <etharp_tmr+0x14c>)
 8023708:	687a      	ldr	r2, [r7, #4]
 802370a:	4613      	mov	r3, r2
 802370c:	005b      	lsls	r3, r3, #1
 802370e:	4413      	add	r3, r2
 8023710:	00db      	lsls	r3, r3, #3
 8023712:	440b      	add	r3, r1
 8023714:	3312      	adds	r3, #18
 8023716:	4602      	mov	r2, r0
 8023718:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802371a:	493e      	ldr	r1, [pc, #248]	; (8023814 <etharp_tmr+0x14c>)
 802371c:	687a      	ldr	r2, [r7, #4]
 802371e:	4613      	mov	r3, r2
 8023720:	005b      	lsls	r3, r3, #1
 8023722:	4413      	add	r3, r2
 8023724:	00db      	lsls	r3, r3, #3
 8023726:	440b      	add	r3, r1
 8023728:	3312      	adds	r3, #18
 802372a:	881b      	ldrh	r3, [r3, #0]
 802372c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8023730:	d215      	bcs.n	802375e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8023732:	4938      	ldr	r1, [pc, #224]	; (8023814 <etharp_tmr+0x14c>)
 8023734:	687a      	ldr	r2, [r7, #4]
 8023736:	4613      	mov	r3, r2
 8023738:	005b      	lsls	r3, r3, #1
 802373a:	4413      	add	r3, r2
 802373c:	00db      	lsls	r3, r3, #3
 802373e:	440b      	add	r3, r1
 8023740:	3314      	adds	r3, #20
 8023742:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8023744:	2b01      	cmp	r3, #1
 8023746:	d10e      	bne.n	8023766 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8023748:	4932      	ldr	r1, [pc, #200]	; (8023814 <etharp_tmr+0x14c>)
 802374a:	687a      	ldr	r2, [r7, #4]
 802374c:	4613      	mov	r3, r2
 802374e:	005b      	lsls	r3, r3, #1
 8023750:	4413      	add	r3, r2
 8023752:	00db      	lsls	r3, r3, #3
 8023754:	440b      	add	r3, r1
 8023756:	3312      	adds	r3, #18
 8023758:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802375a:	2b04      	cmp	r3, #4
 802375c:	d903      	bls.n	8023766 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802375e:	6878      	ldr	r0, [r7, #4]
 8023760:	f7ff ff80 	bl	8023664 <etharp_free_entry>
 8023764:	e04a      	b.n	80237fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8023766:	492b      	ldr	r1, [pc, #172]	; (8023814 <etharp_tmr+0x14c>)
 8023768:	687a      	ldr	r2, [r7, #4]
 802376a:	4613      	mov	r3, r2
 802376c:	005b      	lsls	r3, r3, #1
 802376e:	4413      	add	r3, r2
 8023770:	00db      	lsls	r3, r3, #3
 8023772:	440b      	add	r3, r1
 8023774:	3314      	adds	r3, #20
 8023776:	781b      	ldrb	r3, [r3, #0]
 8023778:	2b03      	cmp	r3, #3
 802377a:	d10a      	bne.n	8023792 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802377c:	4925      	ldr	r1, [pc, #148]	; (8023814 <etharp_tmr+0x14c>)
 802377e:	687a      	ldr	r2, [r7, #4]
 8023780:	4613      	mov	r3, r2
 8023782:	005b      	lsls	r3, r3, #1
 8023784:	4413      	add	r3, r2
 8023786:	00db      	lsls	r3, r3, #3
 8023788:	440b      	add	r3, r1
 802378a:	3314      	adds	r3, #20
 802378c:	2204      	movs	r2, #4
 802378e:	701a      	strb	r2, [r3, #0]
 8023790:	e034      	b.n	80237fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8023792:	4920      	ldr	r1, [pc, #128]	; (8023814 <etharp_tmr+0x14c>)
 8023794:	687a      	ldr	r2, [r7, #4]
 8023796:	4613      	mov	r3, r2
 8023798:	005b      	lsls	r3, r3, #1
 802379a:	4413      	add	r3, r2
 802379c:	00db      	lsls	r3, r3, #3
 802379e:	440b      	add	r3, r1
 80237a0:	3314      	adds	r3, #20
 80237a2:	781b      	ldrb	r3, [r3, #0]
 80237a4:	2b04      	cmp	r3, #4
 80237a6:	d10a      	bne.n	80237be <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80237a8:	491a      	ldr	r1, [pc, #104]	; (8023814 <etharp_tmr+0x14c>)
 80237aa:	687a      	ldr	r2, [r7, #4]
 80237ac:	4613      	mov	r3, r2
 80237ae:	005b      	lsls	r3, r3, #1
 80237b0:	4413      	add	r3, r2
 80237b2:	00db      	lsls	r3, r3, #3
 80237b4:	440b      	add	r3, r1
 80237b6:	3314      	adds	r3, #20
 80237b8:	2202      	movs	r2, #2
 80237ba:	701a      	strb	r2, [r3, #0]
 80237bc:	e01e      	b.n	80237fc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80237be:	4915      	ldr	r1, [pc, #84]	; (8023814 <etharp_tmr+0x14c>)
 80237c0:	687a      	ldr	r2, [r7, #4]
 80237c2:	4613      	mov	r3, r2
 80237c4:	005b      	lsls	r3, r3, #1
 80237c6:	4413      	add	r3, r2
 80237c8:	00db      	lsls	r3, r3, #3
 80237ca:	440b      	add	r3, r1
 80237cc:	3314      	adds	r3, #20
 80237ce:	781b      	ldrb	r3, [r3, #0]
 80237d0:	2b01      	cmp	r3, #1
 80237d2:	d113      	bne.n	80237fc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80237d4:	490f      	ldr	r1, [pc, #60]	; (8023814 <etharp_tmr+0x14c>)
 80237d6:	687a      	ldr	r2, [r7, #4]
 80237d8:	4613      	mov	r3, r2
 80237da:	005b      	lsls	r3, r3, #1
 80237dc:	4413      	add	r3, r2
 80237de:	00db      	lsls	r3, r3, #3
 80237e0:	440b      	add	r3, r1
 80237e2:	3308      	adds	r3, #8
 80237e4:	6818      	ldr	r0, [r3, #0]
 80237e6:	687a      	ldr	r2, [r7, #4]
 80237e8:	4613      	mov	r3, r2
 80237ea:	005b      	lsls	r3, r3, #1
 80237ec:	4413      	add	r3, r2
 80237ee:	00db      	lsls	r3, r3, #3
 80237f0:	4a08      	ldr	r2, [pc, #32]	; (8023814 <etharp_tmr+0x14c>)
 80237f2:	4413      	add	r3, r2
 80237f4:	3304      	adds	r3, #4
 80237f6:	4619      	mov	r1, r3
 80237f8:	f000 fe6e 	bl	80244d8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80237fc:	687b      	ldr	r3, [r7, #4]
 80237fe:	3301      	adds	r3, #1
 8023800:	607b      	str	r3, [r7, #4]
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	2b31      	cmp	r3, #49	; 0x31
 8023806:	f77f af65 	ble.w	80236d4 <etharp_tmr+0xc>
      }
    }
  }
}
 802380a:	bf00      	nop
 802380c:	bf00      	nop
 802380e:	3708      	adds	r7, #8
 8023810:	46bd      	mov	sp, r7
 8023812:	bd80      	pop	{r7, pc}
 8023814:	20015da4 	.word	0x20015da4

08023818 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8023818:	b580      	push	{r7, lr}
 802381a:	b08a      	sub	sp, #40	; 0x28
 802381c:	af00      	add	r7, sp, #0
 802381e:	60f8      	str	r0, [r7, #12]
 8023820:	460b      	mov	r3, r1
 8023822:	607a      	str	r2, [r7, #4]
 8023824:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8023826:	2332      	movs	r3, #50	; 0x32
 8023828:	84fb      	strh	r3, [r7, #38]	; 0x26
 802382a:	2332      	movs	r3, #50	; 0x32
 802382c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802382e:	2332      	movs	r3, #50	; 0x32
 8023830:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8023832:	2300      	movs	r3, #0
 8023834:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8023836:	2332      	movs	r3, #50	; 0x32
 8023838:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802383a:	2300      	movs	r3, #0
 802383c:	83bb      	strh	r3, [r7, #28]
 802383e:	2300      	movs	r3, #0
 8023840:	837b      	strh	r3, [r7, #26]
 8023842:	2300      	movs	r3, #0
 8023844:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023846:	2300      	movs	r3, #0
 8023848:	843b      	strh	r3, [r7, #32]
 802384a:	e0ae      	b.n	80239aa <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802384c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023850:	49a6      	ldr	r1, [pc, #664]	; (8023aec <etharp_find_entry+0x2d4>)
 8023852:	4613      	mov	r3, r2
 8023854:	005b      	lsls	r3, r3, #1
 8023856:	4413      	add	r3, r2
 8023858:	00db      	lsls	r3, r3, #3
 802385a:	440b      	add	r3, r1
 802385c:	3314      	adds	r3, #20
 802385e:	781b      	ldrb	r3, [r3, #0]
 8023860:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8023862:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8023866:	2b32      	cmp	r3, #50	; 0x32
 8023868:	d105      	bne.n	8023876 <etharp_find_entry+0x5e>
 802386a:	7dfb      	ldrb	r3, [r7, #23]
 802386c:	2b00      	cmp	r3, #0
 802386e:	d102      	bne.n	8023876 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8023870:	8c3b      	ldrh	r3, [r7, #32]
 8023872:	847b      	strh	r3, [r7, #34]	; 0x22
 8023874:	e095      	b.n	80239a2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8023876:	7dfb      	ldrb	r3, [r7, #23]
 8023878:	2b00      	cmp	r3, #0
 802387a:	f000 8092 	beq.w	80239a2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802387e:	7dfb      	ldrb	r3, [r7, #23]
 8023880:	2b01      	cmp	r3, #1
 8023882:	d009      	beq.n	8023898 <etharp_find_entry+0x80>
 8023884:	7dfb      	ldrb	r3, [r7, #23]
 8023886:	2b01      	cmp	r3, #1
 8023888:	d806      	bhi.n	8023898 <etharp_find_entry+0x80>
 802388a:	4b99      	ldr	r3, [pc, #612]	; (8023af0 <etharp_find_entry+0x2d8>)
 802388c:	f240 1223 	movw	r2, #291	; 0x123
 8023890:	4998      	ldr	r1, [pc, #608]	; (8023af4 <etharp_find_entry+0x2dc>)
 8023892:	4899      	ldr	r0, [pc, #612]	; (8023af8 <etharp_find_entry+0x2e0>)
 8023894:	f002 fb94 	bl	8025fc0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8023898:	68fb      	ldr	r3, [r7, #12]
 802389a:	2b00      	cmp	r3, #0
 802389c:	d020      	beq.n	80238e0 <etharp_find_entry+0xc8>
 802389e:	68fb      	ldr	r3, [r7, #12]
 80238a0:	6819      	ldr	r1, [r3, #0]
 80238a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80238a6:	4891      	ldr	r0, [pc, #580]	; (8023aec <etharp_find_entry+0x2d4>)
 80238a8:	4613      	mov	r3, r2
 80238aa:	005b      	lsls	r3, r3, #1
 80238ac:	4413      	add	r3, r2
 80238ae:	00db      	lsls	r3, r3, #3
 80238b0:	4403      	add	r3, r0
 80238b2:	3304      	adds	r3, #4
 80238b4:	681b      	ldr	r3, [r3, #0]
 80238b6:	4299      	cmp	r1, r3
 80238b8:	d112      	bne.n	80238e0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80238ba:	687b      	ldr	r3, [r7, #4]
 80238bc:	2b00      	cmp	r3, #0
 80238be:	d00c      	beq.n	80238da <etharp_find_entry+0xc2>
 80238c0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80238c4:	4989      	ldr	r1, [pc, #548]	; (8023aec <etharp_find_entry+0x2d4>)
 80238c6:	4613      	mov	r3, r2
 80238c8:	005b      	lsls	r3, r3, #1
 80238ca:	4413      	add	r3, r2
 80238cc:	00db      	lsls	r3, r3, #3
 80238ce:	440b      	add	r3, r1
 80238d0:	3308      	adds	r3, #8
 80238d2:	681b      	ldr	r3, [r3, #0]
 80238d4:	687a      	ldr	r2, [r7, #4]
 80238d6:	429a      	cmp	r2, r3
 80238d8:	d102      	bne.n	80238e0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80238da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80238de:	e100      	b.n	8023ae2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80238e0:	7dfb      	ldrb	r3, [r7, #23]
 80238e2:	2b01      	cmp	r3, #1
 80238e4:	d140      	bne.n	8023968 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80238e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80238ea:	4980      	ldr	r1, [pc, #512]	; (8023aec <etharp_find_entry+0x2d4>)
 80238ec:	4613      	mov	r3, r2
 80238ee:	005b      	lsls	r3, r3, #1
 80238f0:	4413      	add	r3, r2
 80238f2:	00db      	lsls	r3, r3, #3
 80238f4:	440b      	add	r3, r1
 80238f6:	681b      	ldr	r3, [r3, #0]
 80238f8:	2b00      	cmp	r3, #0
 80238fa:	d01a      	beq.n	8023932 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80238fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023900:	497a      	ldr	r1, [pc, #488]	; (8023aec <etharp_find_entry+0x2d4>)
 8023902:	4613      	mov	r3, r2
 8023904:	005b      	lsls	r3, r3, #1
 8023906:	4413      	add	r3, r2
 8023908:	00db      	lsls	r3, r3, #3
 802390a:	440b      	add	r3, r1
 802390c:	3312      	adds	r3, #18
 802390e:	881b      	ldrh	r3, [r3, #0]
 8023910:	8bba      	ldrh	r2, [r7, #28]
 8023912:	429a      	cmp	r2, r3
 8023914:	d845      	bhi.n	80239a2 <etharp_find_entry+0x18a>
            old_queue = i;
 8023916:	8c3b      	ldrh	r3, [r7, #32]
 8023918:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802391a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802391e:	4973      	ldr	r1, [pc, #460]	; (8023aec <etharp_find_entry+0x2d4>)
 8023920:	4613      	mov	r3, r2
 8023922:	005b      	lsls	r3, r3, #1
 8023924:	4413      	add	r3, r2
 8023926:	00db      	lsls	r3, r3, #3
 8023928:	440b      	add	r3, r1
 802392a:	3312      	adds	r3, #18
 802392c:	881b      	ldrh	r3, [r3, #0]
 802392e:	83bb      	strh	r3, [r7, #28]
 8023930:	e037      	b.n	80239a2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8023932:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023936:	496d      	ldr	r1, [pc, #436]	; (8023aec <etharp_find_entry+0x2d4>)
 8023938:	4613      	mov	r3, r2
 802393a:	005b      	lsls	r3, r3, #1
 802393c:	4413      	add	r3, r2
 802393e:	00db      	lsls	r3, r3, #3
 8023940:	440b      	add	r3, r1
 8023942:	3312      	adds	r3, #18
 8023944:	881b      	ldrh	r3, [r3, #0]
 8023946:	8b7a      	ldrh	r2, [r7, #26]
 8023948:	429a      	cmp	r2, r3
 802394a:	d82a      	bhi.n	80239a2 <etharp_find_entry+0x18a>
            old_pending = i;
 802394c:	8c3b      	ldrh	r3, [r7, #32]
 802394e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8023950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023954:	4965      	ldr	r1, [pc, #404]	; (8023aec <etharp_find_entry+0x2d4>)
 8023956:	4613      	mov	r3, r2
 8023958:	005b      	lsls	r3, r3, #1
 802395a:	4413      	add	r3, r2
 802395c:	00db      	lsls	r3, r3, #3
 802395e:	440b      	add	r3, r1
 8023960:	3312      	adds	r3, #18
 8023962:	881b      	ldrh	r3, [r3, #0]
 8023964:	837b      	strh	r3, [r7, #26]
 8023966:	e01c      	b.n	80239a2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8023968:	7dfb      	ldrb	r3, [r7, #23]
 802396a:	2b01      	cmp	r3, #1
 802396c:	d919      	bls.n	80239a2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802396e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023972:	495e      	ldr	r1, [pc, #376]	; (8023aec <etharp_find_entry+0x2d4>)
 8023974:	4613      	mov	r3, r2
 8023976:	005b      	lsls	r3, r3, #1
 8023978:	4413      	add	r3, r2
 802397a:	00db      	lsls	r3, r3, #3
 802397c:	440b      	add	r3, r1
 802397e:	3312      	adds	r3, #18
 8023980:	881b      	ldrh	r3, [r3, #0]
 8023982:	8b3a      	ldrh	r2, [r7, #24]
 8023984:	429a      	cmp	r2, r3
 8023986:	d80c      	bhi.n	80239a2 <etharp_find_entry+0x18a>
            old_stable = i;
 8023988:	8c3b      	ldrh	r3, [r7, #32]
 802398a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 802398c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023990:	4956      	ldr	r1, [pc, #344]	; (8023aec <etharp_find_entry+0x2d4>)
 8023992:	4613      	mov	r3, r2
 8023994:	005b      	lsls	r3, r3, #1
 8023996:	4413      	add	r3, r2
 8023998:	00db      	lsls	r3, r3, #3
 802399a:	440b      	add	r3, r1
 802399c:	3312      	adds	r3, #18
 802399e:	881b      	ldrh	r3, [r3, #0]
 80239a0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80239a2:	8c3b      	ldrh	r3, [r7, #32]
 80239a4:	3301      	adds	r3, #1
 80239a6:	b29b      	uxth	r3, r3
 80239a8:	843b      	strh	r3, [r7, #32]
 80239aa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80239ae:	2b31      	cmp	r3, #49	; 0x31
 80239b0:	f77f af4c 	ble.w	802384c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80239b4:	7afb      	ldrb	r3, [r7, #11]
 80239b6:	f003 0302 	and.w	r3, r3, #2
 80239ba:	2b00      	cmp	r3, #0
 80239bc:	d108      	bne.n	80239d0 <etharp_find_entry+0x1b8>
 80239be:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80239c2:	2b32      	cmp	r3, #50	; 0x32
 80239c4:	d107      	bne.n	80239d6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80239c6:	7afb      	ldrb	r3, [r7, #11]
 80239c8:	f003 0301 	and.w	r3, r3, #1
 80239cc:	2b00      	cmp	r3, #0
 80239ce:	d102      	bne.n	80239d6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80239d0:	f04f 33ff 	mov.w	r3, #4294967295
 80239d4:	e085      	b.n	8023ae2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80239d6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80239da:	2b31      	cmp	r3, #49	; 0x31
 80239dc:	dc02      	bgt.n	80239e4 <etharp_find_entry+0x1cc>
    i = empty;
 80239de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80239e0:	843b      	strh	r3, [r7, #32]
 80239e2:	e039      	b.n	8023a58 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80239e4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80239e8:	2b31      	cmp	r3, #49	; 0x31
 80239ea:	dc14      	bgt.n	8023a16 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80239ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80239ee:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80239f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80239f4:	493d      	ldr	r1, [pc, #244]	; (8023aec <etharp_find_entry+0x2d4>)
 80239f6:	4613      	mov	r3, r2
 80239f8:	005b      	lsls	r3, r3, #1
 80239fa:	4413      	add	r3, r2
 80239fc:	00db      	lsls	r3, r3, #3
 80239fe:	440b      	add	r3, r1
 8023a00:	681b      	ldr	r3, [r3, #0]
 8023a02:	2b00      	cmp	r3, #0
 8023a04:	d018      	beq.n	8023a38 <etharp_find_entry+0x220>
 8023a06:	4b3a      	ldr	r3, [pc, #232]	; (8023af0 <etharp_find_entry+0x2d8>)
 8023a08:	f240 126d 	movw	r2, #365	; 0x16d
 8023a0c:	493b      	ldr	r1, [pc, #236]	; (8023afc <etharp_find_entry+0x2e4>)
 8023a0e:	483a      	ldr	r0, [pc, #232]	; (8023af8 <etharp_find_entry+0x2e0>)
 8023a10:	f002 fad6 	bl	8025fc0 <iprintf>
 8023a14:	e010      	b.n	8023a38 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8023a16:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8023a1a:	2b31      	cmp	r3, #49	; 0x31
 8023a1c:	dc02      	bgt.n	8023a24 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8023a1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8023a20:	843b      	strh	r3, [r7, #32]
 8023a22:	e009      	b.n	8023a38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8023a24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8023a28:	2b31      	cmp	r3, #49	; 0x31
 8023a2a:	dc02      	bgt.n	8023a32 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8023a2c:	8bfb      	ldrh	r3, [r7, #30]
 8023a2e:	843b      	strh	r3, [r7, #32]
 8023a30:	e002      	b.n	8023a38 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8023a32:	f04f 33ff 	mov.w	r3, #4294967295
 8023a36:	e054      	b.n	8023ae2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023a38:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023a3c:	2b31      	cmp	r3, #49	; 0x31
 8023a3e:	dd06      	ble.n	8023a4e <etharp_find_entry+0x236>
 8023a40:	4b2b      	ldr	r3, [pc, #172]	; (8023af0 <etharp_find_entry+0x2d8>)
 8023a42:	f240 127f 	movw	r2, #383	; 0x17f
 8023a46:	492e      	ldr	r1, [pc, #184]	; (8023b00 <etharp_find_entry+0x2e8>)
 8023a48:	482b      	ldr	r0, [pc, #172]	; (8023af8 <etharp_find_entry+0x2e0>)
 8023a4a:	f002 fab9 	bl	8025fc0 <iprintf>
    etharp_free_entry(i);
 8023a4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023a52:	4618      	mov	r0, r3
 8023a54:	f7ff fe06 	bl	8023664 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8023a58:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8023a5c:	2b31      	cmp	r3, #49	; 0x31
 8023a5e:	dd06      	ble.n	8023a6e <etharp_find_entry+0x256>
 8023a60:	4b23      	ldr	r3, [pc, #140]	; (8023af0 <etharp_find_entry+0x2d8>)
 8023a62:	f240 1283 	movw	r2, #387	; 0x183
 8023a66:	4926      	ldr	r1, [pc, #152]	; (8023b00 <etharp_find_entry+0x2e8>)
 8023a68:	4823      	ldr	r0, [pc, #140]	; (8023af8 <etharp_find_entry+0x2e0>)
 8023a6a:	f002 faa9 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8023a6e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023a72:	491e      	ldr	r1, [pc, #120]	; (8023aec <etharp_find_entry+0x2d4>)
 8023a74:	4613      	mov	r3, r2
 8023a76:	005b      	lsls	r3, r3, #1
 8023a78:	4413      	add	r3, r2
 8023a7a:	00db      	lsls	r3, r3, #3
 8023a7c:	440b      	add	r3, r1
 8023a7e:	3314      	adds	r3, #20
 8023a80:	781b      	ldrb	r3, [r3, #0]
 8023a82:	2b00      	cmp	r3, #0
 8023a84:	d006      	beq.n	8023a94 <etharp_find_entry+0x27c>
 8023a86:	4b1a      	ldr	r3, [pc, #104]	; (8023af0 <etharp_find_entry+0x2d8>)
 8023a88:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8023a8c:	491d      	ldr	r1, [pc, #116]	; (8023b04 <etharp_find_entry+0x2ec>)
 8023a8e:	481a      	ldr	r0, [pc, #104]	; (8023af8 <etharp_find_entry+0x2e0>)
 8023a90:	f002 fa96 	bl	8025fc0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8023a94:	68fb      	ldr	r3, [r7, #12]
 8023a96:	2b00      	cmp	r3, #0
 8023a98:	d00b      	beq.n	8023ab2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8023a9a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023a9e:	68fb      	ldr	r3, [r7, #12]
 8023aa0:	6819      	ldr	r1, [r3, #0]
 8023aa2:	4812      	ldr	r0, [pc, #72]	; (8023aec <etharp_find_entry+0x2d4>)
 8023aa4:	4613      	mov	r3, r2
 8023aa6:	005b      	lsls	r3, r3, #1
 8023aa8:	4413      	add	r3, r2
 8023aaa:	00db      	lsls	r3, r3, #3
 8023aac:	4403      	add	r3, r0
 8023aae:	3304      	adds	r3, #4
 8023ab0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8023ab2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023ab6:	490d      	ldr	r1, [pc, #52]	; (8023aec <etharp_find_entry+0x2d4>)
 8023ab8:	4613      	mov	r3, r2
 8023aba:	005b      	lsls	r3, r3, #1
 8023abc:	4413      	add	r3, r2
 8023abe:	00db      	lsls	r3, r3, #3
 8023ac0:	440b      	add	r3, r1
 8023ac2:	3312      	adds	r3, #18
 8023ac4:	2200      	movs	r2, #0
 8023ac6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8023ac8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023acc:	4907      	ldr	r1, [pc, #28]	; (8023aec <etharp_find_entry+0x2d4>)
 8023ace:	4613      	mov	r3, r2
 8023ad0:	005b      	lsls	r3, r3, #1
 8023ad2:	4413      	add	r3, r2
 8023ad4:	00db      	lsls	r3, r3, #3
 8023ad6:	440b      	add	r3, r1
 8023ad8:	3308      	adds	r3, #8
 8023ada:	687a      	ldr	r2, [r7, #4]
 8023adc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8023ade:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8023ae2:	4618      	mov	r0, r3
 8023ae4:	3728      	adds	r7, #40	; 0x28
 8023ae6:	46bd      	mov	sp, r7
 8023ae8:	bd80      	pop	{r7, pc}
 8023aea:	bf00      	nop
 8023aec:	20015da4 	.word	0x20015da4
 8023af0:	0802c674 	.word	0x0802c674
 8023af4:	0802c6ac 	.word	0x0802c6ac
 8023af8:	0802c6ec 	.word	0x0802c6ec
 8023afc:	0802c714 	.word	0x0802c714
 8023b00:	0802c72c 	.word	0x0802c72c
 8023b04:	0802c740 	.word	0x0802c740

08023b08 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8023b08:	b580      	push	{r7, lr}
 8023b0a:	b088      	sub	sp, #32
 8023b0c:	af02      	add	r7, sp, #8
 8023b0e:	60f8      	str	r0, [r7, #12]
 8023b10:	60b9      	str	r1, [r7, #8]
 8023b12:	607a      	str	r2, [r7, #4]
 8023b14:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8023b16:	68fb      	ldr	r3, [r7, #12]
 8023b18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8023b1c:	2b06      	cmp	r3, #6
 8023b1e:	d006      	beq.n	8023b2e <etharp_update_arp_entry+0x26>
 8023b20:	4b48      	ldr	r3, [pc, #288]	; (8023c44 <etharp_update_arp_entry+0x13c>)
 8023b22:	f240 12a9 	movw	r2, #425	; 0x1a9
 8023b26:	4948      	ldr	r1, [pc, #288]	; (8023c48 <etharp_update_arp_entry+0x140>)
 8023b28:	4848      	ldr	r0, [pc, #288]	; (8023c4c <etharp_update_arp_entry+0x144>)
 8023b2a:	f002 fa49 	bl	8025fc0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8023b2e:	68bb      	ldr	r3, [r7, #8]
 8023b30:	2b00      	cmp	r3, #0
 8023b32:	d012      	beq.n	8023b5a <etharp_update_arp_entry+0x52>
 8023b34:	68bb      	ldr	r3, [r7, #8]
 8023b36:	681b      	ldr	r3, [r3, #0]
 8023b38:	2b00      	cmp	r3, #0
 8023b3a:	d00e      	beq.n	8023b5a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023b3c:	68bb      	ldr	r3, [r7, #8]
 8023b3e:	681b      	ldr	r3, [r3, #0]
 8023b40:	68f9      	ldr	r1, [r7, #12]
 8023b42:	4618      	mov	r0, r3
 8023b44:	f001 f902 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8023b48:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8023b4a:	2b00      	cmp	r3, #0
 8023b4c:	d105      	bne.n	8023b5a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8023b4e:	68bb      	ldr	r3, [r7, #8]
 8023b50:	681b      	ldr	r3, [r3, #0]
 8023b52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8023b56:	2be0      	cmp	r3, #224	; 0xe0
 8023b58:	d102      	bne.n	8023b60 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8023b5a:	f06f 030f 	mvn.w	r3, #15
 8023b5e:	e06c      	b.n	8023c3a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8023b60:	78fb      	ldrb	r3, [r7, #3]
 8023b62:	68fa      	ldr	r2, [r7, #12]
 8023b64:	4619      	mov	r1, r3
 8023b66:	68b8      	ldr	r0, [r7, #8]
 8023b68:	f7ff fe56 	bl	8023818 <etharp_find_entry>
 8023b6c:	4603      	mov	r3, r0
 8023b6e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8023b70:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023b74:	2b00      	cmp	r3, #0
 8023b76:	da02      	bge.n	8023b7e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8023b78:	8afb      	ldrh	r3, [r7, #22]
 8023b7a:	b25b      	sxtb	r3, r3
 8023b7c:	e05d      	b.n	8023c3a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8023b7e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023b82:	4933      	ldr	r1, [pc, #204]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023b84:	4613      	mov	r3, r2
 8023b86:	005b      	lsls	r3, r3, #1
 8023b88:	4413      	add	r3, r2
 8023b8a:	00db      	lsls	r3, r3, #3
 8023b8c:	440b      	add	r3, r1
 8023b8e:	3314      	adds	r3, #20
 8023b90:	2202      	movs	r2, #2
 8023b92:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8023b94:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023b98:	492d      	ldr	r1, [pc, #180]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023b9a:	4613      	mov	r3, r2
 8023b9c:	005b      	lsls	r3, r3, #1
 8023b9e:	4413      	add	r3, r2
 8023ba0:	00db      	lsls	r3, r3, #3
 8023ba2:	440b      	add	r3, r1
 8023ba4:	3308      	adds	r3, #8
 8023ba6:	68fa      	ldr	r2, [r7, #12]
 8023ba8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8023baa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023bae:	4613      	mov	r3, r2
 8023bb0:	005b      	lsls	r3, r3, #1
 8023bb2:	4413      	add	r3, r2
 8023bb4:	00db      	lsls	r3, r3, #3
 8023bb6:	3308      	adds	r3, #8
 8023bb8:	4a25      	ldr	r2, [pc, #148]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023bba:	4413      	add	r3, r2
 8023bbc:	3304      	adds	r3, #4
 8023bbe:	2206      	movs	r2, #6
 8023bc0:	6879      	ldr	r1, [r7, #4]
 8023bc2:	4618      	mov	r0, r3
 8023bc4:	f002 f8ec 	bl	8025da0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8023bc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023bcc:	4920      	ldr	r1, [pc, #128]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023bce:	4613      	mov	r3, r2
 8023bd0:	005b      	lsls	r3, r3, #1
 8023bd2:	4413      	add	r3, r2
 8023bd4:	00db      	lsls	r3, r3, #3
 8023bd6:	440b      	add	r3, r1
 8023bd8:	3312      	adds	r3, #18
 8023bda:	2200      	movs	r2, #0
 8023bdc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8023bde:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023be2:	491b      	ldr	r1, [pc, #108]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023be4:	4613      	mov	r3, r2
 8023be6:	005b      	lsls	r3, r3, #1
 8023be8:	4413      	add	r3, r2
 8023bea:	00db      	lsls	r3, r3, #3
 8023bec:	440b      	add	r3, r1
 8023bee:	681b      	ldr	r3, [r3, #0]
 8023bf0:	2b00      	cmp	r3, #0
 8023bf2:	d021      	beq.n	8023c38 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8023bf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023bf8:	4915      	ldr	r1, [pc, #84]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023bfa:	4613      	mov	r3, r2
 8023bfc:	005b      	lsls	r3, r3, #1
 8023bfe:	4413      	add	r3, r2
 8023c00:	00db      	lsls	r3, r3, #3
 8023c02:	440b      	add	r3, r1
 8023c04:	681b      	ldr	r3, [r3, #0]
 8023c06:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8023c08:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8023c0c:	4910      	ldr	r1, [pc, #64]	; (8023c50 <etharp_update_arp_entry+0x148>)
 8023c0e:	4613      	mov	r3, r2
 8023c10:	005b      	lsls	r3, r3, #1
 8023c12:	4413      	add	r3, r2
 8023c14:	00db      	lsls	r3, r3, #3
 8023c16:	440b      	add	r3, r1
 8023c18:	2200      	movs	r2, #0
 8023c1a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8023c1c:	68fb      	ldr	r3, [r7, #12]
 8023c1e:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8023c22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8023c26:	9300      	str	r3, [sp, #0]
 8023c28:	687b      	ldr	r3, [r7, #4]
 8023c2a:	6939      	ldr	r1, [r7, #16]
 8023c2c:	68f8      	ldr	r0, [r7, #12]
 8023c2e:	f002 f82b 	bl	8025c88 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8023c32:	6938      	ldr	r0, [r7, #16]
 8023c34:	f7fe fc8c 	bl	8022550 <pbuf_free>
  }
  return ERR_OK;
 8023c38:	2300      	movs	r3, #0
}
 8023c3a:	4618      	mov	r0, r3
 8023c3c:	3718      	adds	r7, #24
 8023c3e:	46bd      	mov	sp, r7
 8023c40:	bd80      	pop	{r7, pc}
 8023c42:	bf00      	nop
 8023c44:	0802c674 	.word	0x0802c674
 8023c48:	0802c76c 	.word	0x0802c76c
 8023c4c:	0802c6ec 	.word	0x0802c6ec
 8023c50:	20015da4 	.word	0x20015da4

08023c54 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8023c54:	b580      	push	{r7, lr}
 8023c56:	b084      	sub	sp, #16
 8023c58:	af00      	add	r7, sp, #0
 8023c5a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023c5c:	2300      	movs	r3, #0
 8023c5e:	60fb      	str	r3, [r7, #12]
 8023c60:	e01e      	b.n	8023ca0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8023c62:	4913      	ldr	r1, [pc, #76]	; (8023cb0 <etharp_cleanup_netif+0x5c>)
 8023c64:	68fa      	ldr	r2, [r7, #12]
 8023c66:	4613      	mov	r3, r2
 8023c68:	005b      	lsls	r3, r3, #1
 8023c6a:	4413      	add	r3, r2
 8023c6c:	00db      	lsls	r3, r3, #3
 8023c6e:	440b      	add	r3, r1
 8023c70:	3314      	adds	r3, #20
 8023c72:	781b      	ldrb	r3, [r3, #0]
 8023c74:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8023c76:	7afb      	ldrb	r3, [r7, #11]
 8023c78:	2b00      	cmp	r3, #0
 8023c7a:	d00e      	beq.n	8023c9a <etharp_cleanup_netif+0x46>
 8023c7c:	490c      	ldr	r1, [pc, #48]	; (8023cb0 <etharp_cleanup_netif+0x5c>)
 8023c7e:	68fa      	ldr	r2, [r7, #12]
 8023c80:	4613      	mov	r3, r2
 8023c82:	005b      	lsls	r3, r3, #1
 8023c84:	4413      	add	r3, r2
 8023c86:	00db      	lsls	r3, r3, #3
 8023c88:	440b      	add	r3, r1
 8023c8a:	3308      	adds	r3, #8
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	687a      	ldr	r2, [r7, #4]
 8023c90:	429a      	cmp	r2, r3
 8023c92:	d102      	bne.n	8023c9a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8023c94:	68f8      	ldr	r0, [r7, #12]
 8023c96:	f7ff fce5 	bl	8023664 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8023c9a:	68fb      	ldr	r3, [r7, #12]
 8023c9c:	3301      	adds	r3, #1
 8023c9e:	60fb      	str	r3, [r7, #12]
 8023ca0:	68fb      	ldr	r3, [r7, #12]
 8023ca2:	2b31      	cmp	r3, #49	; 0x31
 8023ca4:	dddd      	ble.n	8023c62 <etharp_cleanup_netif+0xe>
    }
  }
}
 8023ca6:	bf00      	nop
 8023ca8:	bf00      	nop
 8023caa:	3710      	adds	r7, #16
 8023cac:	46bd      	mov	sp, r7
 8023cae:	bd80      	pop	{r7, pc}
 8023cb0:	20015da4 	.word	0x20015da4

08023cb4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8023cb4:	b5b0      	push	{r4, r5, r7, lr}
 8023cb6:	b08a      	sub	sp, #40	; 0x28
 8023cb8:	af04      	add	r7, sp, #16
 8023cba:	6078      	str	r0, [r7, #4]
 8023cbc:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8023cbe:	683b      	ldr	r3, [r7, #0]
 8023cc0:	2b00      	cmp	r3, #0
 8023cc2:	d107      	bne.n	8023cd4 <etharp_input+0x20>
 8023cc4:	4b3d      	ldr	r3, [pc, #244]	; (8023dbc <etharp_input+0x108>)
 8023cc6:	f240 228a 	movw	r2, #650	; 0x28a
 8023cca:	493d      	ldr	r1, [pc, #244]	; (8023dc0 <etharp_input+0x10c>)
 8023ccc:	483d      	ldr	r0, [pc, #244]	; (8023dc4 <etharp_input+0x110>)
 8023cce:	f002 f977 	bl	8025fc0 <iprintf>
 8023cd2:	e06f      	b.n	8023db4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8023cd4:	687b      	ldr	r3, [r7, #4]
 8023cd6:	685b      	ldr	r3, [r3, #4]
 8023cd8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023cda:	693b      	ldr	r3, [r7, #16]
 8023cdc:	881b      	ldrh	r3, [r3, #0]
 8023cde:	b29b      	uxth	r3, r3
 8023ce0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023ce4:	d10c      	bne.n	8023d00 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023ce6:	693b      	ldr	r3, [r7, #16]
 8023ce8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8023cea:	2b06      	cmp	r3, #6
 8023cec:	d108      	bne.n	8023d00 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023cee:	693b      	ldr	r3, [r7, #16]
 8023cf0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8023cf2:	2b04      	cmp	r3, #4
 8023cf4:	d104      	bne.n	8023d00 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8023cf6:	693b      	ldr	r3, [r7, #16]
 8023cf8:	885b      	ldrh	r3, [r3, #2]
 8023cfa:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8023cfc:	2b08      	cmp	r3, #8
 8023cfe:	d003      	beq.n	8023d08 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8023d00:	6878      	ldr	r0, [r7, #4]
 8023d02:	f7fe fc25 	bl	8022550 <pbuf_free>
    return;
 8023d06:	e055      	b.n	8023db4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8023d08:	693b      	ldr	r3, [r7, #16]
 8023d0a:	330e      	adds	r3, #14
 8023d0c:	681b      	ldr	r3, [r3, #0]
 8023d0e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8023d10:	693b      	ldr	r3, [r7, #16]
 8023d12:	3318      	adds	r3, #24
 8023d14:	681b      	ldr	r3, [r3, #0]
 8023d16:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8023d18:	683b      	ldr	r3, [r7, #0]
 8023d1a:	3304      	adds	r3, #4
 8023d1c:	681b      	ldr	r3, [r3, #0]
 8023d1e:	2b00      	cmp	r3, #0
 8023d20:	d102      	bne.n	8023d28 <etharp_input+0x74>
    for_us = 0;
 8023d22:	2300      	movs	r3, #0
 8023d24:	75fb      	strb	r3, [r7, #23]
 8023d26:	e009      	b.n	8023d3c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8023d28:	68ba      	ldr	r2, [r7, #8]
 8023d2a:	683b      	ldr	r3, [r7, #0]
 8023d2c:	3304      	adds	r3, #4
 8023d2e:	681b      	ldr	r3, [r3, #0]
 8023d30:	429a      	cmp	r2, r3
 8023d32:	bf0c      	ite	eq
 8023d34:	2301      	moveq	r3, #1
 8023d36:	2300      	movne	r3, #0
 8023d38:	b2db      	uxtb	r3, r3
 8023d3a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8023d3c:	693b      	ldr	r3, [r7, #16]
 8023d3e:	f103 0208 	add.w	r2, r3, #8
 8023d42:	7dfb      	ldrb	r3, [r7, #23]
 8023d44:	2b00      	cmp	r3, #0
 8023d46:	d001      	beq.n	8023d4c <etharp_input+0x98>
 8023d48:	2301      	movs	r3, #1
 8023d4a:	e000      	b.n	8023d4e <etharp_input+0x9a>
 8023d4c:	2302      	movs	r3, #2
 8023d4e:	f107 010c 	add.w	r1, r7, #12
 8023d52:	6838      	ldr	r0, [r7, #0]
 8023d54:	f7ff fed8 	bl	8023b08 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8023d58:	693b      	ldr	r3, [r7, #16]
 8023d5a:	88db      	ldrh	r3, [r3, #6]
 8023d5c:	b29b      	uxth	r3, r3
 8023d5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023d62:	d003      	beq.n	8023d6c <etharp_input+0xb8>
 8023d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023d68:	d01e      	beq.n	8023da8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8023d6a:	e020      	b.n	8023dae <etharp_input+0xfa>
      if (for_us) {
 8023d6c:	7dfb      	ldrb	r3, [r7, #23]
 8023d6e:	2b00      	cmp	r3, #0
 8023d70:	d01c      	beq.n	8023dac <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8023d72:	683b      	ldr	r3, [r7, #0]
 8023d74:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8023d78:	693b      	ldr	r3, [r7, #16]
 8023d7a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8023d7e:	683b      	ldr	r3, [r7, #0]
 8023d80:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8023d84:	683b      	ldr	r3, [r7, #0]
 8023d86:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8023d88:	693a      	ldr	r2, [r7, #16]
 8023d8a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8023d8c:	2102      	movs	r1, #2
 8023d8e:	9103      	str	r1, [sp, #12]
 8023d90:	f107 010c 	add.w	r1, r7, #12
 8023d94:	9102      	str	r1, [sp, #8]
 8023d96:	9201      	str	r2, [sp, #4]
 8023d98:	9300      	str	r3, [sp, #0]
 8023d9a:	462b      	mov	r3, r5
 8023d9c:	4622      	mov	r2, r4
 8023d9e:	4601      	mov	r1, r0
 8023da0:	6838      	ldr	r0, [r7, #0]
 8023da2:	f000 faeb 	bl	802437c <etharp_raw>
      break;
 8023da6:	e001      	b.n	8023dac <etharp_input+0xf8>
      break;
 8023da8:	bf00      	nop
 8023daa:	e000      	b.n	8023dae <etharp_input+0xfa>
      break;
 8023dac:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8023dae:	6878      	ldr	r0, [r7, #4]
 8023db0:	f7fe fbce 	bl	8022550 <pbuf_free>
}
 8023db4:	3718      	adds	r7, #24
 8023db6:	46bd      	mov	sp, r7
 8023db8:	bdb0      	pop	{r4, r5, r7, pc}
 8023dba:	bf00      	nop
 8023dbc:	0802c674 	.word	0x0802c674
 8023dc0:	0802c7c4 	.word	0x0802c7c4
 8023dc4:	0802c6ec 	.word	0x0802c6ec

08023dc8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8023dc8:	b580      	push	{r7, lr}
 8023dca:	b086      	sub	sp, #24
 8023dcc:	af02      	add	r7, sp, #8
 8023dce:	60f8      	str	r0, [r7, #12]
 8023dd0:	60b9      	str	r1, [r7, #8]
 8023dd2:	4613      	mov	r3, r2
 8023dd4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8023dd6:	79fa      	ldrb	r2, [r7, #7]
 8023dd8:	4944      	ldr	r1, [pc, #272]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023dda:	4613      	mov	r3, r2
 8023ddc:	005b      	lsls	r3, r3, #1
 8023dde:	4413      	add	r3, r2
 8023de0:	00db      	lsls	r3, r3, #3
 8023de2:	440b      	add	r3, r1
 8023de4:	3314      	adds	r3, #20
 8023de6:	781b      	ldrb	r3, [r3, #0]
 8023de8:	2b01      	cmp	r3, #1
 8023dea:	d806      	bhi.n	8023dfa <etharp_output_to_arp_index+0x32>
 8023dec:	4b40      	ldr	r3, [pc, #256]	; (8023ef0 <etharp_output_to_arp_index+0x128>)
 8023dee:	f240 22ee 	movw	r2, #750	; 0x2ee
 8023df2:	4940      	ldr	r1, [pc, #256]	; (8023ef4 <etharp_output_to_arp_index+0x12c>)
 8023df4:	4840      	ldr	r0, [pc, #256]	; (8023ef8 <etharp_output_to_arp_index+0x130>)
 8023df6:	f002 f8e3 	bl	8025fc0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8023dfa:	79fa      	ldrb	r2, [r7, #7]
 8023dfc:	493b      	ldr	r1, [pc, #236]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023dfe:	4613      	mov	r3, r2
 8023e00:	005b      	lsls	r3, r3, #1
 8023e02:	4413      	add	r3, r2
 8023e04:	00db      	lsls	r3, r3, #3
 8023e06:	440b      	add	r3, r1
 8023e08:	3314      	adds	r3, #20
 8023e0a:	781b      	ldrb	r3, [r3, #0]
 8023e0c:	2b02      	cmp	r3, #2
 8023e0e:	d153      	bne.n	8023eb8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8023e10:	79fa      	ldrb	r2, [r7, #7]
 8023e12:	4936      	ldr	r1, [pc, #216]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e14:	4613      	mov	r3, r2
 8023e16:	005b      	lsls	r3, r3, #1
 8023e18:	4413      	add	r3, r2
 8023e1a:	00db      	lsls	r3, r3, #3
 8023e1c:	440b      	add	r3, r1
 8023e1e:	3312      	adds	r3, #18
 8023e20:	881b      	ldrh	r3, [r3, #0]
 8023e22:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8023e26:	d919      	bls.n	8023e5c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8023e28:	79fa      	ldrb	r2, [r7, #7]
 8023e2a:	4613      	mov	r3, r2
 8023e2c:	005b      	lsls	r3, r3, #1
 8023e2e:	4413      	add	r3, r2
 8023e30:	00db      	lsls	r3, r3, #3
 8023e32:	4a2e      	ldr	r2, [pc, #184]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e34:	4413      	add	r3, r2
 8023e36:	3304      	adds	r3, #4
 8023e38:	4619      	mov	r1, r3
 8023e3a:	68f8      	ldr	r0, [r7, #12]
 8023e3c:	f000 fb4c 	bl	80244d8 <etharp_request>
 8023e40:	4603      	mov	r3, r0
 8023e42:	2b00      	cmp	r3, #0
 8023e44:	d138      	bne.n	8023eb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023e46:	79fa      	ldrb	r2, [r7, #7]
 8023e48:	4928      	ldr	r1, [pc, #160]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e4a:	4613      	mov	r3, r2
 8023e4c:	005b      	lsls	r3, r3, #1
 8023e4e:	4413      	add	r3, r2
 8023e50:	00db      	lsls	r3, r3, #3
 8023e52:	440b      	add	r3, r1
 8023e54:	3314      	adds	r3, #20
 8023e56:	2203      	movs	r2, #3
 8023e58:	701a      	strb	r2, [r3, #0]
 8023e5a:	e02d      	b.n	8023eb8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8023e5c:	79fa      	ldrb	r2, [r7, #7]
 8023e5e:	4923      	ldr	r1, [pc, #140]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e60:	4613      	mov	r3, r2
 8023e62:	005b      	lsls	r3, r3, #1
 8023e64:	4413      	add	r3, r2
 8023e66:	00db      	lsls	r3, r3, #3
 8023e68:	440b      	add	r3, r1
 8023e6a:	3312      	adds	r3, #18
 8023e6c:	881b      	ldrh	r3, [r3, #0]
 8023e6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8023e72:	d321      	bcc.n	8023eb8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8023e74:	79fa      	ldrb	r2, [r7, #7]
 8023e76:	4613      	mov	r3, r2
 8023e78:	005b      	lsls	r3, r3, #1
 8023e7a:	4413      	add	r3, r2
 8023e7c:	00db      	lsls	r3, r3, #3
 8023e7e:	4a1b      	ldr	r2, [pc, #108]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e80:	4413      	add	r3, r2
 8023e82:	1d19      	adds	r1, r3, #4
 8023e84:	79fa      	ldrb	r2, [r7, #7]
 8023e86:	4613      	mov	r3, r2
 8023e88:	005b      	lsls	r3, r3, #1
 8023e8a:	4413      	add	r3, r2
 8023e8c:	00db      	lsls	r3, r3, #3
 8023e8e:	3308      	adds	r3, #8
 8023e90:	4a16      	ldr	r2, [pc, #88]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023e92:	4413      	add	r3, r2
 8023e94:	3304      	adds	r3, #4
 8023e96:	461a      	mov	r2, r3
 8023e98:	68f8      	ldr	r0, [r7, #12]
 8023e9a:	f000 fafb 	bl	8024494 <etharp_request_dst>
 8023e9e:	4603      	mov	r3, r0
 8023ea0:	2b00      	cmp	r3, #0
 8023ea2:	d109      	bne.n	8023eb8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8023ea4:	79fa      	ldrb	r2, [r7, #7]
 8023ea6:	4911      	ldr	r1, [pc, #68]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023ea8:	4613      	mov	r3, r2
 8023eaa:	005b      	lsls	r3, r3, #1
 8023eac:	4413      	add	r3, r2
 8023eae:	00db      	lsls	r3, r3, #3
 8023eb0:	440b      	add	r3, r1
 8023eb2:	3314      	adds	r3, #20
 8023eb4:	2203      	movs	r2, #3
 8023eb6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8023eb8:	68fb      	ldr	r3, [r7, #12]
 8023eba:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8023ebe:	79fa      	ldrb	r2, [r7, #7]
 8023ec0:	4613      	mov	r3, r2
 8023ec2:	005b      	lsls	r3, r3, #1
 8023ec4:	4413      	add	r3, r2
 8023ec6:	00db      	lsls	r3, r3, #3
 8023ec8:	3308      	adds	r3, #8
 8023eca:	4a08      	ldr	r2, [pc, #32]	; (8023eec <etharp_output_to_arp_index+0x124>)
 8023ecc:	4413      	add	r3, r2
 8023ece:	3304      	adds	r3, #4
 8023ed0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8023ed4:	9200      	str	r2, [sp, #0]
 8023ed6:	460a      	mov	r2, r1
 8023ed8:	68b9      	ldr	r1, [r7, #8]
 8023eda:	68f8      	ldr	r0, [r7, #12]
 8023edc:	f001 fed4 	bl	8025c88 <ethernet_output>
 8023ee0:	4603      	mov	r3, r0
}
 8023ee2:	4618      	mov	r0, r3
 8023ee4:	3710      	adds	r7, #16
 8023ee6:	46bd      	mov	sp, r7
 8023ee8:	bd80      	pop	{r7, pc}
 8023eea:	bf00      	nop
 8023eec:	20015da4 	.word	0x20015da4
 8023ef0:	0802c674 	.word	0x0802c674
 8023ef4:	0802c7e4 	.word	0x0802c7e4
 8023ef8:	0802c6ec 	.word	0x0802c6ec

08023efc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8023efc:	b580      	push	{r7, lr}
 8023efe:	b08a      	sub	sp, #40	; 0x28
 8023f00:	af02      	add	r7, sp, #8
 8023f02:	60f8      	str	r0, [r7, #12]
 8023f04:	60b9      	str	r1, [r7, #8]
 8023f06:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8023f08:	687b      	ldr	r3, [r7, #4]
 8023f0a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8023f0c:	68fb      	ldr	r3, [r7, #12]
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d106      	bne.n	8023f20 <etharp_output+0x24>
 8023f12:	4b73      	ldr	r3, [pc, #460]	; (80240e0 <etharp_output+0x1e4>)
 8023f14:	f240 321e 	movw	r2, #798	; 0x31e
 8023f18:	4972      	ldr	r1, [pc, #456]	; (80240e4 <etharp_output+0x1e8>)
 8023f1a:	4873      	ldr	r0, [pc, #460]	; (80240e8 <etharp_output+0x1ec>)
 8023f1c:	f002 f850 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8023f20:	68bb      	ldr	r3, [r7, #8]
 8023f22:	2b00      	cmp	r3, #0
 8023f24:	d106      	bne.n	8023f34 <etharp_output+0x38>
 8023f26:	4b6e      	ldr	r3, [pc, #440]	; (80240e0 <etharp_output+0x1e4>)
 8023f28:	f240 321f 	movw	r2, #799	; 0x31f
 8023f2c:	496f      	ldr	r1, [pc, #444]	; (80240ec <etharp_output+0x1f0>)
 8023f2e:	486e      	ldr	r0, [pc, #440]	; (80240e8 <etharp_output+0x1ec>)
 8023f30:	f002 f846 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8023f34:	687b      	ldr	r3, [r7, #4]
 8023f36:	2b00      	cmp	r3, #0
 8023f38:	d106      	bne.n	8023f48 <etharp_output+0x4c>
 8023f3a:	4b69      	ldr	r3, [pc, #420]	; (80240e0 <etharp_output+0x1e4>)
 8023f3c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8023f40:	496b      	ldr	r1, [pc, #428]	; (80240f0 <etharp_output+0x1f4>)
 8023f42:	4869      	ldr	r0, [pc, #420]	; (80240e8 <etharp_output+0x1ec>)
 8023f44:	f002 f83c 	bl	8025fc0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8023f48:	687b      	ldr	r3, [r7, #4]
 8023f4a:	681b      	ldr	r3, [r3, #0]
 8023f4c:	68f9      	ldr	r1, [r7, #12]
 8023f4e:	4618      	mov	r0, r3
 8023f50:	f000 fefc 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8023f54:	4603      	mov	r3, r0
 8023f56:	2b00      	cmp	r3, #0
 8023f58:	d002      	beq.n	8023f60 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8023f5a:	4b66      	ldr	r3, [pc, #408]	; (80240f4 <etharp_output+0x1f8>)
 8023f5c:	61fb      	str	r3, [r7, #28]
 8023f5e:	e0af      	b.n	80240c0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8023f60:	687b      	ldr	r3, [r7, #4]
 8023f62:	681b      	ldr	r3, [r3, #0]
 8023f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8023f68:	2be0      	cmp	r3, #224	; 0xe0
 8023f6a:	d118      	bne.n	8023f9e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8023f6c:	2301      	movs	r3, #1
 8023f6e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8023f70:	2300      	movs	r3, #0
 8023f72:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8023f74:	235e      	movs	r3, #94	; 0x5e
 8023f76:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8023f78:	687b      	ldr	r3, [r7, #4]
 8023f7a:	3301      	adds	r3, #1
 8023f7c:	781b      	ldrb	r3, [r3, #0]
 8023f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8023f82:	b2db      	uxtb	r3, r3
 8023f84:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8023f86:	687b      	ldr	r3, [r7, #4]
 8023f88:	3302      	adds	r3, #2
 8023f8a:	781b      	ldrb	r3, [r3, #0]
 8023f8c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8023f8e:	687b      	ldr	r3, [r7, #4]
 8023f90:	3303      	adds	r3, #3
 8023f92:	781b      	ldrb	r3, [r3, #0]
 8023f94:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8023f96:	f107 0310 	add.w	r3, r7, #16
 8023f9a:	61fb      	str	r3, [r7, #28]
 8023f9c:	e090      	b.n	80240c0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023f9e:	687b      	ldr	r3, [r7, #4]
 8023fa0:	681a      	ldr	r2, [r3, #0]
 8023fa2:	68fb      	ldr	r3, [r7, #12]
 8023fa4:	3304      	adds	r3, #4
 8023fa6:	681b      	ldr	r3, [r3, #0]
 8023fa8:	405a      	eors	r2, r3
 8023faa:	68fb      	ldr	r3, [r7, #12]
 8023fac:	3308      	adds	r3, #8
 8023fae:	681b      	ldr	r3, [r3, #0]
 8023fb0:	4013      	ands	r3, r2
 8023fb2:	2b00      	cmp	r3, #0
 8023fb4:	d012      	beq.n	8023fdc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8023fb6:	687b      	ldr	r3, [r7, #4]
 8023fb8:	681b      	ldr	r3, [r3, #0]
 8023fba:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8023fbc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8023fc0:	4293      	cmp	r3, r2
 8023fc2:	d00b      	beq.n	8023fdc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8023fc4:	68fb      	ldr	r3, [r7, #12]
 8023fc6:	330c      	adds	r3, #12
 8023fc8:	681b      	ldr	r3, [r3, #0]
 8023fca:	2b00      	cmp	r3, #0
 8023fcc:	d003      	beq.n	8023fd6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8023fce:	68fb      	ldr	r3, [r7, #12]
 8023fd0:	330c      	adds	r3, #12
 8023fd2:	61bb      	str	r3, [r7, #24]
 8023fd4:	e002      	b.n	8023fdc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8023fd6:	f06f 0303 	mvn.w	r3, #3
 8023fda:	e07d      	b.n	80240d8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8023fdc:	4b46      	ldr	r3, [pc, #280]	; (80240f8 <etharp_output+0x1fc>)
 8023fde:	781b      	ldrb	r3, [r3, #0]
 8023fe0:	4619      	mov	r1, r3
 8023fe2:	4a46      	ldr	r2, [pc, #280]	; (80240fc <etharp_output+0x200>)
 8023fe4:	460b      	mov	r3, r1
 8023fe6:	005b      	lsls	r3, r3, #1
 8023fe8:	440b      	add	r3, r1
 8023fea:	00db      	lsls	r3, r3, #3
 8023fec:	4413      	add	r3, r2
 8023fee:	3314      	adds	r3, #20
 8023ff0:	781b      	ldrb	r3, [r3, #0]
 8023ff2:	2b01      	cmp	r3, #1
 8023ff4:	d925      	bls.n	8024042 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8023ff6:	4b40      	ldr	r3, [pc, #256]	; (80240f8 <etharp_output+0x1fc>)
 8023ff8:	781b      	ldrb	r3, [r3, #0]
 8023ffa:	4619      	mov	r1, r3
 8023ffc:	4a3f      	ldr	r2, [pc, #252]	; (80240fc <etharp_output+0x200>)
 8023ffe:	460b      	mov	r3, r1
 8024000:	005b      	lsls	r3, r3, #1
 8024002:	440b      	add	r3, r1
 8024004:	00db      	lsls	r3, r3, #3
 8024006:	4413      	add	r3, r2
 8024008:	3308      	adds	r3, #8
 802400a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802400c:	68fa      	ldr	r2, [r7, #12]
 802400e:	429a      	cmp	r2, r3
 8024010:	d117      	bne.n	8024042 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8024012:	69bb      	ldr	r3, [r7, #24]
 8024014:	681a      	ldr	r2, [r3, #0]
 8024016:	4b38      	ldr	r3, [pc, #224]	; (80240f8 <etharp_output+0x1fc>)
 8024018:	781b      	ldrb	r3, [r3, #0]
 802401a:	4618      	mov	r0, r3
 802401c:	4937      	ldr	r1, [pc, #220]	; (80240fc <etharp_output+0x200>)
 802401e:	4603      	mov	r3, r0
 8024020:	005b      	lsls	r3, r3, #1
 8024022:	4403      	add	r3, r0
 8024024:	00db      	lsls	r3, r3, #3
 8024026:	440b      	add	r3, r1
 8024028:	3304      	adds	r3, #4
 802402a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 802402c:	429a      	cmp	r2, r3
 802402e:	d108      	bne.n	8024042 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8024030:	4b31      	ldr	r3, [pc, #196]	; (80240f8 <etharp_output+0x1fc>)
 8024032:	781b      	ldrb	r3, [r3, #0]
 8024034:	461a      	mov	r2, r3
 8024036:	68b9      	ldr	r1, [r7, #8]
 8024038:	68f8      	ldr	r0, [r7, #12]
 802403a:	f7ff fec5 	bl	8023dc8 <etharp_output_to_arp_index>
 802403e:	4603      	mov	r3, r0
 8024040:	e04a      	b.n	80240d8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8024042:	2300      	movs	r3, #0
 8024044:	75fb      	strb	r3, [r7, #23]
 8024046:	e031      	b.n	80240ac <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024048:	7dfa      	ldrb	r2, [r7, #23]
 802404a:	492c      	ldr	r1, [pc, #176]	; (80240fc <etharp_output+0x200>)
 802404c:	4613      	mov	r3, r2
 802404e:	005b      	lsls	r3, r3, #1
 8024050:	4413      	add	r3, r2
 8024052:	00db      	lsls	r3, r3, #3
 8024054:	440b      	add	r3, r1
 8024056:	3314      	adds	r3, #20
 8024058:	781b      	ldrb	r3, [r3, #0]
 802405a:	2b01      	cmp	r3, #1
 802405c:	d923      	bls.n	80240a6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802405e:	7dfa      	ldrb	r2, [r7, #23]
 8024060:	4926      	ldr	r1, [pc, #152]	; (80240fc <etharp_output+0x200>)
 8024062:	4613      	mov	r3, r2
 8024064:	005b      	lsls	r3, r3, #1
 8024066:	4413      	add	r3, r2
 8024068:	00db      	lsls	r3, r3, #3
 802406a:	440b      	add	r3, r1
 802406c:	3308      	adds	r3, #8
 802406e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8024070:	68fa      	ldr	r2, [r7, #12]
 8024072:	429a      	cmp	r2, r3
 8024074:	d117      	bne.n	80240a6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8024076:	69bb      	ldr	r3, [r7, #24]
 8024078:	6819      	ldr	r1, [r3, #0]
 802407a:	7dfa      	ldrb	r2, [r7, #23]
 802407c:	481f      	ldr	r0, [pc, #124]	; (80240fc <etharp_output+0x200>)
 802407e:	4613      	mov	r3, r2
 8024080:	005b      	lsls	r3, r3, #1
 8024082:	4413      	add	r3, r2
 8024084:	00db      	lsls	r3, r3, #3
 8024086:	4403      	add	r3, r0
 8024088:	3304      	adds	r3, #4
 802408a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 802408c:	4299      	cmp	r1, r3
 802408e:	d10a      	bne.n	80240a6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8024090:	4a19      	ldr	r2, [pc, #100]	; (80240f8 <etharp_output+0x1fc>)
 8024092:	7dfb      	ldrb	r3, [r7, #23]
 8024094:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8024096:	7dfb      	ldrb	r3, [r7, #23]
 8024098:	461a      	mov	r2, r3
 802409a:	68b9      	ldr	r1, [r7, #8]
 802409c:	68f8      	ldr	r0, [r7, #12]
 802409e:	f7ff fe93 	bl	8023dc8 <etharp_output_to_arp_index>
 80240a2:	4603      	mov	r3, r0
 80240a4:	e018      	b.n	80240d8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80240a6:	7dfb      	ldrb	r3, [r7, #23]
 80240a8:	3301      	adds	r3, #1
 80240aa:	75fb      	strb	r3, [r7, #23]
 80240ac:	7dfb      	ldrb	r3, [r7, #23]
 80240ae:	2b31      	cmp	r3, #49	; 0x31
 80240b0:	d9ca      	bls.n	8024048 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80240b2:	68ba      	ldr	r2, [r7, #8]
 80240b4:	69b9      	ldr	r1, [r7, #24]
 80240b6:	68f8      	ldr	r0, [r7, #12]
 80240b8:	f000 f822 	bl	8024100 <etharp_query>
 80240bc:	4603      	mov	r3, r0
 80240be:	e00b      	b.n	80240d8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80240c0:	68fb      	ldr	r3, [r7, #12]
 80240c2:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80240c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80240ca:	9300      	str	r3, [sp, #0]
 80240cc:	69fb      	ldr	r3, [r7, #28]
 80240ce:	68b9      	ldr	r1, [r7, #8]
 80240d0:	68f8      	ldr	r0, [r7, #12]
 80240d2:	f001 fdd9 	bl	8025c88 <ethernet_output>
 80240d6:	4603      	mov	r3, r0
}
 80240d8:	4618      	mov	r0, r3
 80240da:	3720      	adds	r7, #32
 80240dc:	46bd      	mov	sp, r7
 80240de:	bd80      	pop	{r7, pc}
 80240e0:	0802c674 	.word	0x0802c674
 80240e4:	0802c7c4 	.word	0x0802c7c4
 80240e8:	0802c6ec 	.word	0x0802c6ec
 80240ec:	0802c814 	.word	0x0802c814
 80240f0:	0802c7b4 	.word	0x0802c7b4
 80240f4:	0802d1f4 	.word	0x0802d1f4
 80240f8:	20016254 	.word	0x20016254
 80240fc:	20015da4 	.word	0x20015da4

08024100 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8024100:	b580      	push	{r7, lr}
 8024102:	b08c      	sub	sp, #48	; 0x30
 8024104:	af02      	add	r7, sp, #8
 8024106:	60f8      	str	r0, [r7, #12]
 8024108:	60b9      	str	r1, [r7, #8]
 802410a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 802410c:	68fb      	ldr	r3, [r7, #12]
 802410e:	332a      	adds	r3, #42	; 0x2a
 8024110:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8024112:	23ff      	movs	r3, #255	; 0xff
 8024114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8024118:	2300      	movs	r3, #0
 802411a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802411c:	68bb      	ldr	r3, [r7, #8]
 802411e:	681b      	ldr	r3, [r3, #0]
 8024120:	68f9      	ldr	r1, [r7, #12]
 8024122:	4618      	mov	r0, r3
 8024124:	f000 fe12 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8024128:	4603      	mov	r3, r0
 802412a:	2b00      	cmp	r3, #0
 802412c:	d10c      	bne.n	8024148 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802412e:	68bb      	ldr	r3, [r7, #8]
 8024130:	681b      	ldr	r3, [r3, #0]
 8024132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8024136:	2be0      	cmp	r3, #224	; 0xe0
 8024138:	d006      	beq.n	8024148 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802413a:	68bb      	ldr	r3, [r7, #8]
 802413c:	2b00      	cmp	r3, #0
 802413e:	d003      	beq.n	8024148 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8024140:	68bb      	ldr	r3, [r7, #8]
 8024142:	681b      	ldr	r3, [r3, #0]
 8024144:	2b00      	cmp	r3, #0
 8024146:	d102      	bne.n	802414e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8024148:	f06f 030f 	mvn.w	r3, #15
 802414c:	e101      	b.n	8024352 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802414e:	68fa      	ldr	r2, [r7, #12]
 8024150:	2101      	movs	r1, #1
 8024152:	68b8      	ldr	r0, [r7, #8]
 8024154:	f7ff fb60 	bl	8023818 <etharp_find_entry>
 8024158:	4603      	mov	r3, r0
 802415a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 802415c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8024160:	2b00      	cmp	r3, #0
 8024162:	da02      	bge.n	802416a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8024164:	8a7b      	ldrh	r3, [r7, #18]
 8024166:	b25b      	sxtb	r3, r3
 8024168:	e0f3      	b.n	8024352 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802416a:	8a7b      	ldrh	r3, [r7, #18]
 802416c:	2b7e      	cmp	r3, #126	; 0x7e
 802416e:	d906      	bls.n	802417e <etharp_query+0x7e>
 8024170:	4b7a      	ldr	r3, [pc, #488]	; (802435c <etharp_query+0x25c>)
 8024172:	f240 32c1 	movw	r2, #961	; 0x3c1
 8024176:	497a      	ldr	r1, [pc, #488]	; (8024360 <etharp_query+0x260>)
 8024178:	487a      	ldr	r0, [pc, #488]	; (8024364 <etharp_query+0x264>)
 802417a:	f001 ff21 	bl	8025fc0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 802417e:	8a7b      	ldrh	r3, [r7, #18]
 8024180:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8024182:	7c7a      	ldrb	r2, [r7, #17]
 8024184:	4978      	ldr	r1, [pc, #480]	; (8024368 <etharp_query+0x268>)
 8024186:	4613      	mov	r3, r2
 8024188:	005b      	lsls	r3, r3, #1
 802418a:	4413      	add	r3, r2
 802418c:	00db      	lsls	r3, r3, #3
 802418e:	440b      	add	r3, r1
 8024190:	3314      	adds	r3, #20
 8024192:	781b      	ldrb	r3, [r3, #0]
 8024194:	2b00      	cmp	r3, #0
 8024196:	d115      	bne.n	80241c4 <etharp_query+0xc4>
    is_new_entry = 1;
 8024198:	2301      	movs	r3, #1
 802419a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 802419c:	7c7a      	ldrb	r2, [r7, #17]
 802419e:	4972      	ldr	r1, [pc, #456]	; (8024368 <etharp_query+0x268>)
 80241a0:	4613      	mov	r3, r2
 80241a2:	005b      	lsls	r3, r3, #1
 80241a4:	4413      	add	r3, r2
 80241a6:	00db      	lsls	r3, r3, #3
 80241a8:	440b      	add	r3, r1
 80241aa:	3314      	adds	r3, #20
 80241ac:	2201      	movs	r2, #1
 80241ae:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80241b0:	7c7a      	ldrb	r2, [r7, #17]
 80241b2:	496d      	ldr	r1, [pc, #436]	; (8024368 <etharp_query+0x268>)
 80241b4:	4613      	mov	r3, r2
 80241b6:	005b      	lsls	r3, r3, #1
 80241b8:	4413      	add	r3, r2
 80241ba:	00db      	lsls	r3, r3, #3
 80241bc:	440b      	add	r3, r1
 80241be:	3308      	adds	r3, #8
 80241c0:	68fa      	ldr	r2, [r7, #12]
 80241c2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80241c4:	7c7a      	ldrb	r2, [r7, #17]
 80241c6:	4968      	ldr	r1, [pc, #416]	; (8024368 <etharp_query+0x268>)
 80241c8:	4613      	mov	r3, r2
 80241ca:	005b      	lsls	r3, r3, #1
 80241cc:	4413      	add	r3, r2
 80241ce:	00db      	lsls	r3, r3, #3
 80241d0:	440b      	add	r3, r1
 80241d2:	3314      	adds	r3, #20
 80241d4:	781b      	ldrb	r3, [r3, #0]
 80241d6:	2b01      	cmp	r3, #1
 80241d8:	d011      	beq.n	80241fe <etharp_query+0xfe>
 80241da:	7c7a      	ldrb	r2, [r7, #17]
 80241dc:	4962      	ldr	r1, [pc, #392]	; (8024368 <etharp_query+0x268>)
 80241de:	4613      	mov	r3, r2
 80241e0:	005b      	lsls	r3, r3, #1
 80241e2:	4413      	add	r3, r2
 80241e4:	00db      	lsls	r3, r3, #3
 80241e6:	440b      	add	r3, r1
 80241e8:	3314      	adds	r3, #20
 80241ea:	781b      	ldrb	r3, [r3, #0]
 80241ec:	2b01      	cmp	r3, #1
 80241ee:	d806      	bhi.n	80241fe <etharp_query+0xfe>
 80241f0:	4b5a      	ldr	r3, [pc, #360]	; (802435c <etharp_query+0x25c>)
 80241f2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80241f6:	495d      	ldr	r1, [pc, #372]	; (802436c <etharp_query+0x26c>)
 80241f8:	485a      	ldr	r0, [pc, #360]	; (8024364 <etharp_query+0x264>)
 80241fa:	f001 fee1 	bl	8025fc0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80241fe:	6a3b      	ldr	r3, [r7, #32]
 8024200:	2b00      	cmp	r3, #0
 8024202:	d102      	bne.n	802420a <etharp_query+0x10a>
 8024204:	687b      	ldr	r3, [r7, #4]
 8024206:	2b00      	cmp	r3, #0
 8024208:	d10c      	bne.n	8024224 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 802420a:	68b9      	ldr	r1, [r7, #8]
 802420c:	68f8      	ldr	r0, [r7, #12]
 802420e:	f000 f963 	bl	80244d8 <etharp_request>
 8024212:	4603      	mov	r3, r0
 8024214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8024218:	687b      	ldr	r3, [r7, #4]
 802421a:	2b00      	cmp	r3, #0
 802421c:	d102      	bne.n	8024224 <etharp_query+0x124>
      return result;
 802421e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8024222:	e096      	b.n	8024352 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8024224:	687b      	ldr	r3, [r7, #4]
 8024226:	2b00      	cmp	r3, #0
 8024228:	d106      	bne.n	8024238 <etharp_query+0x138>
 802422a:	4b4c      	ldr	r3, [pc, #304]	; (802435c <etharp_query+0x25c>)
 802422c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8024230:	494f      	ldr	r1, [pc, #316]	; (8024370 <etharp_query+0x270>)
 8024232:	484c      	ldr	r0, [pc, #304]	; (8024364 <etharp_query+0x264>)
 8024234:	f001 fec4 	bl	8025fc0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8024238:	7c7a      	ldrb	r2, [r7, #17]
 802423a:	494b      	ldr	r1, [pc, #300]	; (8024368 <etharp_query+0x268>)
 802423c:	4613      	mov	r3, r2
 802423e:	005b      	lsls	r3, r3, #1
 8024240:	4413      	add	r3, r2
 8024242:	00db      	lsls	r3, r3, #3
 8024244:	440b      	add	r3, r1
 8024246:	3314      	adds	r3, #20
 8024248:	781b      	ldrb	r3, [r3, #0]
 802424a:	2b01      	cmp	r3, #1
 802424c:	d917      	bls.n	802427e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802424e:	4a49      	ldr	r2, [pc, #292]	; (8024374 <etharp_query+0x274>)
 8024250:	7c7b      	ldrb	r3, [r7, #17]
 8024252:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8024254:	7c7a      	ldrb	r2, [r7, #17]
 8024256:	4613      	mov	r3, r2
 8024258:	005b      	lsls	r3, r3, #1
 802425a:	4413      	add	r3, r2
 802425c:	00db      	lsls	r3, r3, #3
 802425e:	3308      	adds	r3, #8
 8024260:	4a41      	ldr	r2, [pc, #260]	; (8024368 <etharp_query+0x268>)
 8024262:	4413      	add	r3, r2
 8024264:	3304      	adds	r3, #4
 8024266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802426a:	9200      	str	r2, [sp, #0]
 802426c:	697a      	ldr	r2, [r7, #20]
 802426e:	6879      	ldr	r1, [r7, #4]
 8024270:	68f8      	ldr	r0, [r7, #12]
 8024272:	f001 fd09 	bl	8025c88 <ethernet_output>
 8024276:	4603      	mov	r3, r0
 8024278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802427c:	e067      	b.n	802434e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802427e:	7c7a      	ldrb	r2, [r7, #17]
 8024280:	4939      	ldr	r1, [pc, #228]	; (8024368 <etharp_query+0x268>)
 8024282:	4613      	mov	r3, r2
 8024284:	005b      	lsls	r3, r3, #1
 8024286:	4413      	add	r3, r2
 8024288:	00db      	lsls	r3, r3, #3
 802428a:	440b      	add	r3, r1
 802428c:	3314      	adds	r3, #20
 802428e:	781b      	ldrb	r3, [r3, #0]
 8024290:	2b01      	cmp	r3, #1
 8024292:	d15c      	bne.n	802434e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8024294:	2300      	movs	r3, #0
 8024296:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802429c:	e01c      	b.n	80242d8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802429e:	69fb      	ldr	r3, [r7, #28]
 80242a0:	895a      	ldrh	r2, [r3, #10]
 80242a2:	69fb      	ldr	r3, [r7, #28]
 80242a4:	891b      	ldrh	r3, [r3, #8]
 80242a6:	429a      	cmp	r2, r3
 80242a8:	d10a      	bne.n	80242c0 <etharp_query+0x1c0>
 80242aa:	69fb      	ldr	r3, [r7, #28]
 80242ac:	681b      	ldr	r3, [r3, #0]
 80242ae:	2b00      	cmp	r3, #0
 80242b0:	d006      	beq.n	80242c0 <etharp_query+0x1c0>
 80242b2:	4b2a      	ldr	r3, [pc, #168]	; (802435c <etharp_query+0x25c>)
 80242b4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80242b8:	492f      	ldr	r1, [pc, #188]	; (8024378 <etharp_query+0x278>)
 80242ba:	482a      	ldr	r0, [pc, #168]	; (8024364 <etharp_query+0x264>)
 80242bc:	f001 fe80 	bl	8025fc0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80242c0:	69fb      	ldr	r3, [r7, #28]
 80242c2:	7b1b      	ldrb	r3, [r3, #12]
 80242c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80242c8:	2b00      	cmp	r3, #0
 80242ca:	d002      	beq.n	80242d2 <etharp_query+0x1d2>
        copy_needed = 1;
 80242cc:	2301      	movs	r3, #1
 80242ce:	61bb      	str	r3, [r7, #24]
        break;
 80242d0:	e005      	b.n	80242de <etharp_query+0x1de>
      }
      p = p->next;
 80242d2:	69fb      	ldr	r3, [r7, #28]
 80242d4:	681b      	ldr	r3, [r3, #0]
 80242d6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80242d8:	69fb      	ldr	r3, [r7, #28]
 80242da:	2b00      	cmp	r3, #0
 80242dc:	d1df      	bne.n	802429e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80242de:	69bb      	ldr	r3, [r7, #24]
 80242e0:	2b00      	cmp	r3, #0
 80242e2:	d007      	beq.n	80242f4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80242e4:	687a      	ldr	r2, [r7, #4]
 80242e6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80242ea:	200e      	movs	r0, #14
 80242ec:	f7fe fbbc 	bl	8022a68 <pbuf_clone>
 80242f0:	61f8      	str	r0, [r7, #28]
 80242f2:	e004      	b.n	80242fe <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80242f4:	687b      	ldr	r3, [r7, #4]
 80242f6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80242f8:	69f8      	ldr	r0, [r7, #28]
 80242fa:	f7fe f9c9 	bl	8022690 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80242fe:	69fb      	ldr	r3, [r7, #28]
 8024300:	2b00      	cmp	r3, #0
 8024302:	d021      	beq.n	8024348 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8024304:	7c7a      	ldrb	r2, [r7, #17]
 8024306:	4918      	ldr	r1, [pc, #96]	; (8024368 <etharp_query+0x268>)
 8024308:	4613      	mov	r3, r2
 802430a:	005b      	lsls	r3, r3, #1
 802430c:	4413      	add	r3, r2
 802430e:	00db      	lsls	r3, r3, #3
 8024310:	440b      	add	r3, r1
 8024312:	681b      	ldr	r3, [r3, #0]
 8024314:	2b00      	cmp	r3, #0
 8024316:	d00a      	beq.n	802432e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8024318:	7c7a      	ldrb	r2, [r7, #17]
 802431a:	4913      	ldr	r1, [pc, #76]	; (8024368 <etharp_query+0x268>)
 802431c:	4613      	mov	r3, r2
 802431e:	005b      	lsls	r3, r3, #1
 8024320:	4413      	add	r3, r2
 8024322:	00db      	lsls	r3, r3, #3
 8024324:	440b      	add	r3, r1
 8024326:	681b      	ldr	r3, [r3, #0]
 8024328:	4618      	mov	r0, r3
 802432a:	f7fe f911 	bl	8022550 <pbuf_free>
      }
      arp_table[i].q = p;
 802432e:	7c7a      	ldrb	r2, [r7, #17]
 8024330:	490d      	ldr	r1, [pc, #52]	; (8024368 <etharp_query+0x268>)
 8024332:	4613      	mov	r3, r2
 8024334:	005b      	lsls	r3, r3, #1
 8024336:	4413      	add	r3, r2
 8024338:	00db      	lsls	r3, r3, #3
 802433a:	440b      	add	r3, r1
 802433c:	69fa      	ldr	r2, [r7, #28]
 802433e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8024340:	2300      	movs	r3, #0
 8024342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024346:	e002      	b.n	802434e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8024348:	23ff      	movs	r3, #255	; 0xff
 802434a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802434e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8024352:	4618      	mov	r0, r3
 8024354:	3728      	adds	r7, #40	; 0x28
 8024356:	46bd      	mov	sp, r7
 8024358:	bd80      	pop	{r7, pc}
 802435a:	bf00      	nop
 802435c:	0802c674 	.word	0x0802c674
 8024360:	0802c820 	.word	0x0802c820
 8024364:	0802c6ec 	.word	0x0802c6ec
 8024368:	20015da4 	.word	0x20015da4
 802436c:	0802c830 	.word	0x0802c830
 8024370:	0802c814 	.word	0x0802c814
 8024374:	20016254 	.word	0x20016254
 8024378:	0802c858 	.word	0x0802c858

0802437c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802437c:	b580      	push	{r7, lr}
 802437e:	b08a      	sub	sp, #40	; 0x28
 8024380:	af02      	add	r7, sp, #8
 8024382:	60f8      	str	r0, [r7, #12]
 8024384:	60b9      	str	r1, [r7, #8]
 8024386:	607a      	str	r2, [r7, #4]
 8024388:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802438a:	2300      	movs	r3, #0
 802438c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802438e:	68fb      	ldr	r3, [r7, #12]
 8024390:	2b00      	cmp	r3, #0
 8024392:	d106      	bne.n	80243a2 <etharp_raw+0x26>
 8024394:	4b3a      	ldr	r3, [pc, #232]	; (8024480 <etharp_raw+0x104>)
 8024396:	f240 4257 	movw	r2, #1111	; 0x457
 802439a:	493a      	ldr	r1, [pc, #232]	; (8024484 <etharp_raw+0x108>)
 802439c:	483a      	ldr	r0, [pc, #232]	; (8024488 <etharp_raw+0x10c>)
 802439e:	f001 fe0f 	bl	8025fc0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80243a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80243a6:	211c      	movs	r1, #28
 80243a8:	200e      	movs	r0, #14
 80243aa:	f7fd fdef 	bl	8021f8c <pbuf_alloc>
 80243ae:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80243b0:	69bb      	ldr	r3, [r7, #24]
 80243b2:	2b00      	cmp	r3, #0
 80243b4:	d102      	bne.n	80243bc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80243b6:	f04f 33ff 	mov.w	r3, #4294967295
 80243ba:	e05d      	b.n	8024478 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80243bc:	69bb      	ldr	r3, [r7, #24]
 80243be:	895b      	ldrh	r3, [r3, #10]
 80243c0:	2b1b      	cmp	r3, #27
 80243c2:	d806      	bhi.n	80243d2 <etharp_raw+0x56>
 80243c4:	4b2e      	ldr	r3, [pc, #184]	; (8024480 <etharp_raw+0x104>)
 80243c6:	f240 4262 	movw	r2, #1122	; 0x462
 80243ca:	4930      	ldr	r1, [pc, #192]	; (802448c <etharp_raw+0x110>)
 80243cc:	482e      	ldr	r0, [pc, #184]	; (8024488 <etharp_raw+0x10c>)
 80243ce:	f001 fdf7 	bl	8025fc0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80243d2:	69bb      	ldr	r3, [r7, #24]
 80243d4:	685b      	ldr	r3, [r3, #4]
 80243d6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80243d8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80243da:	4618      	mov	r0, r3
 80243dc:	f7fc fcdc 	bl	8020d98 <lwip_htons>
 80243e0:	4603      	mov	r3, r0
 80243e2:	461a      	mov	r2, r3
 80243e4:	697b      	ldr	r3, [r7, #20]
 80243e6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80243e8:	68fb      	ldr	r3, [r7, #12]
 80243ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80243ee:	2b06      	cmp	r3, #6
 80243f0:	d006      	beq.n	8024400 <etharp_raw+0x84>
 80243f2:	4b23      	ldr	r3, [pc, #140]	; (8024480 <etharp_raw+0x104>)
 80243f4:	f240 4269 	movw	r2, #1129	; 0x469
 80243f8:	4925      	ldr	r1, [pc, #148]	; (8024490 <etharp_raw+0x114>)
 80243fa:	4823      	ldr	r0, [pc, #140]	; (8024488 <etharp_raw+0x10c>)
 80243fc:	f001 fde0 	bl	8025fc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8024400:	697b      	ldr	r3, [r7, #20]
 8024402:	3308      	adds	r3, #8
 8024404:	2206      	movs	r2, #6
 8024406:	6839      	ldr	r1, [r7, #0]
 8024408:	4618      	mov	r0, r3
 802440a:	f001 fcc9 	bl	8025da0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 802440e:	697b      	ldr	r3, [r7, #20]
 8024410:	3312      	adds	r3, #18
 8024412:	2206      	movs	r2, #6
 8024414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8024416:	4618      	mov	r0, r3
 8024418:	f001 fcc2 	bl	8025da0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802441c:	697b      	ldr	r3, [r7, #20]
 802441e:	330e      	adds	r3, #14
 8024420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8024422:	6812      	ldr	r2, [r2, #0]
 8024424:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8024426:	697b      	ldr	r3, [r7, #20]
 8024428:	3318      	adds	r3, #24
 802442a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802442c:	6812      	ldr	r2, [r2, #0]
 802442e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8024430:	697b      	ldr	r3, [r7, #20]
 8024432:	2200      	movs	r2, #0
 8024434:	701a      	strb	r2, [r3, #0]
 8024436:	2200      	movs	r2, #0
 8024438:	f042 0201 	orr.w	r2, r2, #1
 802443c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802443e:	697b      	ldr	r3, [r7, #20]
 8024440:	2200      	movs	r2, #0
 8024442:	f042 0208 	orr.w	r2, r2, #8
 8024446:	709a      	strb	r2, [r3, #2]
 8024448:	2200      	movs	r2, #0
 802444a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802444c:	697b      	ldr	r3, [r7, #20]
 802444e:	2206      	movs	r2, #6
 8024450:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8024452:	697b      	ldr	r3, [r7, #20]
 8024454:	2204      	movs	r2, #4
 8024456:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8024458:	f640 0306 	movw	r3, #2054	; 0x806
 802445c:	9300      	str	r3, [sp, #0]
 802445e:	687b      	ldr	r3, [r7, #4]
 8024460:	68ba      	ldr	r2, [r7, #8]
 8024462:	69b9      	ldr	r1, [r7, #24]
 8024464:	68f8      	ldr	r0, [r7, #12]
 8024466:	f001 fc0f 	bl	8025c88 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802446a:	69b8      	ldr	r0, [r7, #24]
 802446c:	f7fe f870 	bl	8022550 <pbuf_free>
  p = NULL;
 8024470:	2300      	movs	r3, #0
 8024472:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8024474:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8024478:	4618      	mov	r0, r3
 802447a:	3720      	adds	r7, #32
 802447c:	46bd      	mov	sp, r7
 802447e:	bd80      	pop	{r7, pc}
 8024480:	0802c674 	.word	0x0802c674
 8024484:	0802c7c4 	.word	0x0802c7c4
 8024488:	0802c6ec 	.word	0x0802c6ec
 802448c:	0802c874 	.word	0x0802c874
 8024490:	0802c8a8 	.word	0x0802c8a8

08024494 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8024494:	b580      	push	{r7, lr}
 8024496:	b088      	sub	sp, #32
 8024498:	af04      	add	r7, sp, #16
 802449a:	60f8      	str	r0, [r7, #12]
 802449c:	60b9      	str	r1, [r7, #8]
 802449e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80244a0:	68fb      	ldr	r3, [r7, #12]
 80244a2:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80244a6:	68fb      	ldr	r3, [r7, #12]
 80244a8:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80244ac:	68fb      	ldr	r3, [r7, #12]
 80244ae:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80244b0:	2201      	movs	r2, #1
 80244b2:	9203      	str	r2, [sp, #12]
 80244b4:	68ba      	ldr	r2, [r7, #8]
 80244b6:	9202      	str	r2, [sp, #8]
 80244b8:	4a06      	ldr	r2, [pc, #24]	; (80244d4 <etharp_request_dst+0x40>)
 80244ba:	9201      	str	r2, [sp, #4]
 80244bc:	9300      	str	r3, [sp, #0]
 80244be:	4603      	mov	r3, r0
 80244c0:	687a      	ldr	r2, [r7, #4]
 80244c2:	68f8      	ldr	r0, [r7, #12]
 80244c4:	f7ff ff5a 	bl	802437c <etharp_raw>
 80244c8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80244ca:	4618      	mov	r0, r3
 80244cc:	3710      	adds	r7, #16
 80244ce:	46bd      	mov	sp, r7
 80244d0:	bd80      	pop	{r7, pc}
 80244d2:	bf00      	nop
 80244d4:	0802d1fc 	.word	0x0802d1fc

080244d8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80244d8:	b580      	push	{r7, lr}
 80244da:	b082      	sub	sp, #8
 80244dc:	af00      	add	r7, sp, #0
 80244de:	6078      	str	r0, [r7, #4]
 80244e0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80244e2:	4a05      	ldr	r2, [pc, #20]	; (80244f8 <etharp_request+0x20>)
 80244e4:	6839      	ldr	r1, [r7, #0]
 80244e6:	6878      	ldr	r0, [r7, #4]
 80244e8:	f7ff ffd4 	bl	8024494 <etharp_request_dst>
 80244ec:	4603      	mov	r3, r0
}
 80244ee:	4618      	mov	r0, r3
 80244f0:	3708      	adds	r7, #8
 80244f2:	46bd      	mov	sp, r7
 80244f4:	bd80      	pop	{r7, pc}
 80244f6:	bf00      	nop
 80244f8:	0802d1f4 	.word	0x0802d1f4

080244fc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80244fc:	b580      	push	{r7, lr}
 80244fe:	b08e      	sub	sp, #56	; 0x38
 8024500:	af04      	add	r7, sp, #16
 8024502:	6078      	str	r0, [r7, #4]
 8024504:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8024506:	4b79      	ldr	r3, [pc, #484]	; (80246ec <icmp_input+0x1f0>)
 8024508:	689b      	ldr	r3, [r3, #8]
 802450a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 802450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802450e:	781b      	ldrb	r3, [r3, #0]
 8024510:	f003 030f 	and.w	r3, r3, #15
 8024514:	b2db      	uxtb	r3, r3
 8024516:	009b      	lsls	r3, r3, #2
 8024518:	b2db      	uxtb	r3, r3
 802451a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802451c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802451e:	2b13      	cmp	r3, #19
 8024520:	f240 80cd 	bls.w	80246be <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8024524:	687b      	ldr	r3, [r7, #4]
 8024526:	895b      	ldrh	r3, [r3, #10]
 8024528:	2b03      	cmp	r3, #3
 802452a:	f240 80ca 	bls.w	80246c2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802452e:	687b      	ldr	r3, [r7, #4]
 8024530:	685b      	ldr	r3, [r3, #4]
 8024532:	781b      	ldrb	r3, [r3, #0]
 8024534:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8024538:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802453c:	2b00      	cmp	r3, #0
 802453e:	f000 80b7 	beq.w	80246b0 <icmp_input+0x1b4>
 8024542:	2b08      	cmp	r3, #8
 8024544:	f040 80b7 	bne.w	80246b6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8024548:	4b69      	ldr	r3, [pc, #420]	; (80246f0 <icmp_input+0x1f4>)
 802454a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802454c:	4b67      	ldr	r3, [pc, #412]	; (80246ec <icmp_input+0x1f0>)
 802454e:	695b      	ldr	r3, [r3, #20]
 8024550:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024554:	2be0      	cmp	r3, #224	; 0xe0
 8024556:	f000 80bb 	beq.w	80246d0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802455a:	4b64      	ldr	r3, [pc, #400]	; (80246ec <icmp_input+0x1f0>)
 802455c:	695b      	ldr	r3, [r3, #20]
 802455e:	4a63      	ldr	r2, [pc, #396]	; (80246ec <icmp_input+0x1f0>)
 8024560:	6812      	ldr	r2, [r2, #0]
 8024562:	4611      	mov	r1, r2
 8024564:	4618      	mov	r0, r3
 8024566:	f000 fbf1 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 802456a:	4603      	mov	r3, r0
 802456c:	2b00      	cmp	r3, #0
 802456e:	f040 80b1 	bne.w	80246d4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8024572:	687b      	ldr	r3, [r7, #4]
 8024574:	891b      	ldrh	r3, [r3, #8]
 8024576:	2b07      	cmp	r3, #7
 8024578:	f240 80a5 	bls.w	80246c6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802457c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802457e:	330e      	adds	r3, #14
 8024580:	4619      	mov	r1, r3
 8024582:	6878      	ldr	r0, [r7, #4]
 8024584:	f7fd ff4e 	bl	8022424 <pbuf_add_header>
 8024588:	4603      	mov	r3, r0
 802458a:	2b00      	cmp	r3, #0
 802458c:	d04b      	beq.n	8024626 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802458e:	687b      	ldr	r3, [r7, #4]
 8024590:	891a      	ldrh	r2, [r3, #8]
 8024592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024594:	4413      	add	r3, r2
 8024596:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8024598:	687b      	ldr	r3, [r7, #4]
 802459a:	891b      	ldrh	r3, [r3, #8]
 802459c:	8b7a      	ldrh	r2, [r7, #26]
 802459e:	429a      	cmp	r2, r3
 80245a0:	f0c0 809a 	bcc.w	80246d8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80245a4:	8b7b      	ldrh	r3, [r7, #26]
 80245a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80245aa:	4619      	mov	r1, r3
 80245ac:	200e      	movs	r0, #14
 80245ae:	f7fd fced 	bl	8021f8c <pbuf_alloc>
 80245b2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80245b4:	697b      	ldr	r3, [r7, #20]
 80245b6:	2b00      	cmp	r3, #0
 80245b8:	f000 8090 	beq.w	80246dc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80245bc:	697b      	ldr	r3, [r7, #20]
 80245be:	895b      	ldrh	r3, [r3, #10]
 80245c0:	461a      	mov	r2, r3
 80245c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80245c4:	3308      	adds	r3, #8
 80245c6:	429a      	cmp	r2, r3
 80245c8:	d203      	bcs.n	80245d2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80245ca:	6978      	ldr	r0, [r7, #20]
 80245cc:	f7fd ffc0 	bl	8022550 <pbuf_free>
          goto icmperr;
 80245d0:	e085      	b.n	80246de <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80245d2:	697b      	ldr	r3, [r7, #20]
 80245d4:	685b      	ldr	r3, [r3, #4]
 80245d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80245d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80245da:	4618      	mov	r0, r3
 80245dc:	f001 fbe0 	bl	8025da0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80245e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80245e2:	4619      	mov	r1, r3
 80245e4:	6978      	ldr	r0, [r7, #20]
 80245e6:	f7fd ff2d 	bl	8022444 <pbuf_remove_header>
 80245ea:	4603      	mov	r3, r0
 80245ec:	2b00      	cmp	r3, #0
 80245ee:	d009      	beq.n	8024604 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80245f0:	4b40      	ldr	r3, [pc, #256]	; (80246f4 <icmp_input+0x1f8>)
 80245f2:	22b6      	movs	r2, #182	; 0xb6
 80245f4:	4940      	ldr	r1, [pc, #256]	; (80246f8 <icmp_input+0x1fc>)
 80245f6:	4841      	ldr	r0, [pc, #260]	; (80246fc <icmp_input+0x200>)
 80245f8:	f001 fce2 	bl	8025fc0 <iprintf>
          pbuf_free(r);
 80245fc:	6978      	ldr	r0, [r7, #20]
 80245fe:	f7fd ffa7 	bl	8022550 <pbuf_free>
          goto icmperr;
 8024602:	e06c      	b.n	80246de <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8024604:	6879      	ldr	r1, [r7, #4]
 8024606:	6978      	ldr	r0, [r7, #20]
 8024608:	f7fe f8ca 	bl	80227a0 <pbuf_copy>
 802460c:	4603      	mov	r3, r0
 802460e:	2b00      	cmp	r3, #0
 8024610:	d003      	beq.n	802461a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8024612:	6978      	ldr	r0, [r7, #20]
 8024614:	f7fd ff9c 	bl	8022550 <pbuf_free>
          goto icmperr;
 8024618:	e061      	b.n	80246de <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802461a:	6878      	ldr	r0, [r7, #4]
 802461c:	f7fd ff98 	bl	8022550 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8024620:	697b      	ldr	r3, [r7, #20]
 8024622:	607b      	str	r3, [r7, #4]
 8024624:	e00f      	b.n	8024646 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8024626:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8024628:	330e      	adds	r3, #14
 802462a:	4619      	mov	r1, r3
 802462c:	6878      	ldr	r0, [r7, #4]
 802462e:	f7fd ff09 	bl	8022444 <pbuf_remove_header>
 8024632:	4603      	mov	r3, r0
 8024634:	2b00      	cmp	r3, #0
 8024636:	d006      	beq.n	8024646 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8024638:	4b2e      	ldr	r3, [pc, #184]	; (80246f4 <icmp_input+0x1f8>)
 802463a:	22c7      	movs	r2, #199	; 0xc7
 802463c:	4930      	ldr	r1, [pc, #192]	; (8024700 <icmp_input+0x204>)
 802463e:	482f      	ldr	r0, [pc, #188]	; (80246fc <icmp_input+0x200>)
 8024640:	f001 fcbe 	bl	8025fc0 <iprintf>
          goto icmperr;
 8024644:	e04b      	b.n	80246de <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8024646:	687b      	ldr	r3, [r7, #4]
 8024648:	685b      	ldr	r3, [r3, #4]
 802464a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 802464c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802464e:	4619      	mov	r1, r3
 8024650:	6878      	ldr	r0, [r7, #4]
 8024652:	f7fd fee7 	bl	8022424 <pbuf_add_header>
 8024656:	4603      	mov	r3, r0
 8024658:	2b00      	cmp	r3, #0
 802465a:	d12b      	bne.n	80246b4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802465c:	687b      	ldr	r3, [r7, #4]
 802465e:	685b      	ldr	r3, [r3, #4]
 8024660:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8024662:	69fb      	ldr	r3, [r7, #28]
 8024664:	681a      	ldr	r2, [r3, #0]
 8024666:	68fb      	ldr	r3, [r7, #12]
 8024668:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802466a:	4b20      	ldr	r3, [pc, #128]	; (80246ec <icmp_input+0x1f0>)
 802466c:	691a      	ldr	r2, [r3, #16]
 802466e:	68fb      	ldr	r3, [r7, #12]
 8024670:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8024672:	693b      	ldr	r3, [r7, #16]
 8024674:	2200      	movs	r2, #0
 8024676:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8024678:	693b      	ldr	r3, [r7, #16]
 802467a:	2200      	movs	r2, #0
 802467c:	709a      	strb	r2, [r3, #2]
 802467e:	2200      	movs	r2, #0
 8024680:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8024682:	68fb      	ldr	r3, [r7, #12]
 8024684:	22ff      	movs	r2, #255	; 0xff
 8024686:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8024688:	68fb      	ldr	r3, [r7, #12]
 802468a:	2200      	movs	r2, #0
 802468c:	729a      	strb	r2, [r3, #10]
 802468e:	2200      	movs	r2, #0
 8024690:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8024692:	683b      	ldr	r3, [r7, #0]
 8024694:	9302      	str	r3, [sp, #8]
 8024696:	2301      	movs	r3, #1
 8024698:	9301      	str	r3, [sp, #4]
 802469a:	2300      	movs	r3, #0
 802469c:	9300      	str	r3, [sp, #0]
 802469e:	23ff      	movs	r3, #255	; 0xff
 80246a0:	2200      	movs	r2, #0
 80246a2:	69f9      	ldr	r1, [r7, #28]
 80246a4:	6878      	ldr	r0, [r7, #4]
 80246a6:	f000 fa6b 	bl	8024b80 <ip4_output_if>
 80246aa:	4603      	mov	r3, r0
 80246ac:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80246ae:	e001      	b.n	80246b4 <icmp_input+0x1b8>
      break;
 80246b0:	bf00      	nop
 80246b2:	e000      	b.n	80246b6 <icmp_input+0x1ba>
      break;
 80246b4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80246b6:	6878      	ldr	r0, [r7, #4]
 80246b8:	f7fd ff4a 	bl	8022550 <pbuf_free>
  return;
 80246bc:	e013      	b.n	80246e6 <icmp_input+0x1ea>
    goto lenerr;
 80246be:	bf00      	nop
 80246c0:	e002      	b.n	80246c8 <icmp_input+0x1cc>
    goto lenerr;
 80246c2:	bf00      	nop
 80246c4:	e000      	b.n	80246c8 <icmp_input+0x1cc>
        goto lenerr;
 80246c6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80246c8:	6878      	ldr	r0, [r7, #4]
 80246ca:	f7fd ff41 	bl	8022550 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80246ce:	e00a      	b.n	80246e6 <icmp_input+0x1ea>
        goto icmperr;
 80246d0:	bf00      	nop
 80246d2:	e004      	b.n	80246de <icmp_input+0x1e2>
        goto icmperr;
 80246d4:	bf00      	nop
 80246d6:	e002      	b.n	80246de <icmp_input+0x1e2>
          goto icmperr;
 80246d8:	bf00      	nop
 80246da:	e000      	b.n	80246de <icmp_input+0x1e2>
          goto icmperr;
 80246dc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80246de:	6878      	ldr	r0, [r7, #4]
 80246e0:	f7fd ff36 	bl	8022550 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80246e4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80246e6:	3728      	adds	r7, #40	; 0x28
 80246e8:	46bd      	mov	sp, r7
 80246ea:	bd80      	pop	{r7, pc}
 80246ec:	2001273c 	.word	0x2001273c
 80246f0:	20012750 	.word	0x20012750
 80246f4:	0802c8ec 	.word	0x0802c8ec
 80246f8:	0802c924 	.word	0x0802c924
 80246fc:	0802c95c 	.word	0x0802c95c
 8024700:	0802c984 	.word	0x0802c984

08024704 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8024704:	b580      	push	{r7, lr}
 8024706:	b082      	sub	sp, #8
 8024708:	af00      	add	r7, sp, #0
 802470a:	6078      	str	r0, [r7, #4]
 802470c:	460b      	mov	r3, r1
 802470e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8024710:	78fb      	ldrb	r3, [r7, #3]
 8024712:	461a      	mov	r2, r3
 8024714:	2103      	movs	r1, #3
 8024716:	6878      	ldr	r0, [r7, #4]
 8024718:	f000 f814 	bl	8024744 <icmp_send_response>
}
 802471c:	bf00      	nop
 802471e:	3708      	adds	r7, #8
 8024720:	46bd      	mov	sp, r7
 8024722:	bd80      	pop	{r7, pc}

08024724 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8024724:	b580      	push	{r7, lr}
 8024726:	b082      	sub	sp, #8
 8024728:	af00      	add	r7, sp, #0
 802472a:	6078      	str	r0, [r7, #4]
 802472c:	460b      	mov	r3, r1
 802472e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8024730:	78fb      	ldrb	r3, [r7, #3]
 8024732:	461a      	mov	r2, r3
 8024734:	210b      	movs	r1, #11
 8024736:	6878      	ldr	r0, [r7, #4]
 8024738:	f000 f804 	bl	8024744 <icmp_send_response>
}
 802473c:	bf00      	nop
 802473e:	3708      	adds	r7, #8
 8024740:	46bd      	mov	sp, r7
 8024742:	bd80      	pop	{r7, pc}

08024744 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8024744:	b580      	push	{r7, lr}
 8024746:	b08c      	sub	sp, #48	; 0x30
 8024748:	af04      	add	r7, sp, #16
 802474a:	6078      	str	r0, [r7, #4]
 802474c:	460b      	mov	r3, r1
 802474e:	70fb      	strb	r3, [r7, #3]
 8024750:	4613      	mov	r3, r2
 8024752:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8024754:	f44f 7220 	mov.w	r2, #640	; 0x280
 8024758:	2124      	movs	r1, #36	; 0x24
 802475a:	2022      	movs	r0, #34	; 0x22
 802475c:	f7fd fc16 	bl	8021f8c <pbuf_alloc>
 8024760:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8024762:	69fb      	ldr	r3, [r7, #28]
 8024764:	2b00      	cmp	r3, #0
 8024766:	d04c      	beq.n	8024802 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8024768:	69fb      	ldr	r3, [r7, #28]
 802476a:	895b      	ldrh	r3, [r3, #10]
 802476c:	2b23      	cmp	r3, #35	; 0x23
 802476e:	d806      	bhi.n	802477e <icmp_send_response+0x3a>
 8024770:	4b26      	ldr	r3, [pc, #152]	; (802480c <icmp_send_response+0xc8>)
 8024772:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8024776:	4926      	ldr	r1, [pc, #152]	; (8024810 <icmp_send_response+0xcc>)
 8024778:	4826      	ldr	r0, [pc, #152]	; (8024814 <icmp_send_response+0xd0>)
 802477a:	f001 fc21 	bl	8025fc0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802477e:	687b      	ldr	r3, [r7, #4]
 8024780:	685b      	ldr	r3, [r3, #4]
 8024782:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8024784:	69fb      	ldr	r3, [r7, #28]
 8024786:	685b      	ldr	r3, [r3, #4]
 8024788:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802478a:	697b      	ldr	r3, [r7, #20]
 802478c:	78fa      	ldrb	r2, [r7, #3]
 802478e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8024790:	697b      	ldr	r3, [r7, #20]
 8024792:	78ba      	ldrb	r2, [r7, #2]
 8024794:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8024796:	697b      	ldr	r3, [r7, #20]
 8024798:	2200      	movs	r2, #0
 802479a:	711a      	strb	r2, [r3, #4]
 802479c:	2200      	movs	r2, #0
 802479e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80247a0:	697b      	ldr	r3, [r7, #20]
 80247a2:	2200      	movs	r2, #0
 80247a4:	719a      	strb	r2, [r3, #6]
 80247a6:	2200      	movs	r2, #0
 80247a8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80247aa:	69fb      	ldr	r3, [r7, #28]
 80247ac:	685b      	ldr	r3, [r3, #4]
 80247ae:	f103 0008 	add.w	r0, r3, #8
 80247b2:	687b      	ldr	r3, [r7, #4]
 80247b4:	685b      	ldr	r3, [r3, #4]
 80247b6:	221c      	movs	r2, #28
 80247b8:	4619      	mov	r1, r3
 80247ba:	f001 faf1 	bl	8025da0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80247be:	69bb      	ldr	r3, [r7, #24]
 80247c0:	68db      	ldr	r3, [r3, #12]
 80247c2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80247c4:	f107 030c 	add.w	r3, r7, #12
 80247c8:	4618      	mov	r0, r3
 80247ca:	f000 f825 	bl	8024818 <ip4_route>
 80247ce:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80247d0:	693b      	ldr	r3, [r7, #16]
 80247d2:	2b00      	cmp	r3, #0
 80247d4:	d011      	beq.n	80247fa <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80247d6:	697b      	ldr	r3, [r7, #20]
 80247d8:	2200      	movs	r2, #0
 80247da:	709a      	strb	r2, [r3, #2]
 80247dc:	2200      	movs	r2, #0
 80247de:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80247e0:	f107 020c 	add.w	r2, r7, #12
 80247e4:	693b      	ldr	r3, [r7, #16]
 80247e6:	9302      	str	r3, [sp, #8]
 80247e8:	2301      	movs	r3, #1
 80247ea:	9301      	str	r3, [sp, #4]
 80247ec:	2300      	movs	r3, #0
 80247ee:	9300      	str	r3, [sp, #0]
 80247f0:	23ff      	movs	r3, #255	; 0xff
 80247f2:	2100      	movs	r1, #0
 80247f4:	69f8      	ldr	r0, [r7, #28]
 80247f6:	f000 f9c3 	bl	8024b80 <ip4_output_if>
  }
  pbuf_free(q);
 80247fa:	69f8      	ldr	r0, [r7, #28]
 80247fc:	f7fd fea8 	bl	8022550 <pbuf_free>
 8024800:	e000      	b.n	8024804 <icmp_send_response+0xc0>
    return;
 8024802:	bf00      	nop
}
 8024804:	3720      	adds	r7, #32
 8024806:	46bd      	mov	sp, r7
 8024808:	bd80      	pop	{r7, pc}
 802480a:	bf00      	nop
 802480c:	0802c8ec 	.word	0x0802c8ec
 8024810:	0802c9b8 	.word	0x0802c9b8
 8024814:	0802c95c 	.word	0x0802c95c

08024818 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8024818:	b480      	push	{r7}
 802481a:	b085      	sub	sp, #20
 802481c:	af00      	add	r7, sp, #0
 802481e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8024820:	4b33      	ldr	r3, [pc, #204]	; (80248f0 <ip4_route+0xd8>)
 8024822:	681b      	ldr	r3, [r3, #0]
 8024824:	60fb      	str	r3, [r7, #12]
 8024826:	e036      	b.n	8024896 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8024828:	68fb      	ldr	r3, [r7, #12]
 802482a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802482e:	f003 0301 	and.w	r3, r3, #1
 8024832:	b2db      	uxtb	r3, r3
 8024834:	2b00      	cmp	r3, #0
 8024836:	d02b      	beq.n	8024890 <ip4_route+0x78>
 8024838:	68fb      	ldr	r3, [r7, #12]
 802483a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802483e:	089b      	lsrs	r3, r3, #2
 8024840:	f003 0301 	and.w	r3, r3, #1
 8024844:	b2db      	uxtb	r3, r3
 8024846:	2b00      	cmp	r3, #0
 8024848:	d022      	beq.n	8024890 <ip4_route+0x78>
 802484a:	68fb      	ldr	r3, [r7, #12]
 802484c:	3304      	adds	r3, #4
 802484e:	681b      	ldr	r3, [r3, #0]
 8024850:	2b00      	cmp	r3, #0
 8024852:	d01d      	beq.n	8024890 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8024854:	687b      	ldr	r3, [r7, #4]
 8024856:	681a      	ldr	r2, [r3, #0]
 8024858:	68fb      	ldr	r3, [r7, #12]
 802485a:	3304      	adds	r3, #4
 802485c:	681b      	ldr	r3, [r3, #0]
 802485e:	405a      	eors	r2, r3
 8024860:	68fb      	ldr	r3, [r7, #12]
 8024862:	3308      	adds	r3, #8
 8024864:	681b      	ldr	r3, [r3, #0]
 8024866:	4013      	ands	r3, r2
 8024868:	2b00      	cmp	r3, #0
 802486a:	d101      	bne.n	8024870 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802486c:	68fb      	ldr	r3, [r7, #12]
 802486e:	e038      	b.n	80248e2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8024870:	68fb      	ldr	r3, [r7, #12]
 8024872:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024876:	f003 0302 	and.w	r3, r3, #2
 802487a:	2b00      	cmp	r3, #0
 802487c:	d108      	bne.n	8024890 <ip4_route+0x78>
 802487e:	687b      	ldr	r3, [r7, #4]
 8024880:	681a      	ldr	r2, [r3, #0]
 8024882:	68fb      	ldr	r3, [r7, #12]
 8024884:	330c      	adds	r3, #12
 8024886:	681b      	ldr	r3, [r3, #0]
 8024888:	429a      	cmp	r2, r3
 802488a:	d101      	bne.n	8024890 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802488c:	68fb      	ldr	r3, [r7, #12]
 802488e:	e028      	b.n	80248e2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8024890:	68fb      	ldr	r3, [r7, #12]
 8024892:	681b      	ldr	r3, [r3, #0]
 8024894:	60fb      	str	r3, [r7, #12]
 8024896:	68fb      	ldr	r3, [r7, #12]
 8024898:	2b00      	cmp	r3, #0
 802489a:	d1c5      	bne.n	8024828 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802489c:	4b15      	ldr	r3, [pc, #84]	; (80248f4 <ip4_route+0xdc>)
 802489e:	681b      	ldr	r3, [r3, #0]
 80248a0:	2b00      	cmp	r3, #0
 80248a2:	d01a      	beq.n	80248da <ip4_route+0xc2>
 80248a4:	4b13      	ldr	r3, [pc, #76]	; (80248f4 <ip4_route+0xdc>)
 80248a6:	681b      	ldr	r3, [r3, #0]
 80248a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80248ac:	f003 0301 	and.w	r3, r3, #1
 80248b0:	2b00      	cmp	r3, #0
 80248b2:	d012      	beq.n	80248da <ip4_route+0xc2>
 80248b4:	4b0f      	ldr	r3, [pc, #60]	; (80248f4 <ip4_route+0xdc>)
 80248b6:	681b      	ldr	r3, [r3, #0]
 80248b8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80248bc:	f003 0304 	and.w	r3, r3, #4
 80248c0:	2b00      	cmp	r3, #0
 80248c2:	d00a      	beq.n	80248da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80248c4:	4b0b      	ldr	r3, [pc, #44]	; (80248f4 <ip4_route+0xdc>)
 80248c6:	681b      	ldr	r3, [r3, #0]
 80248c8:	3304      	adds	r3, #4
 80248ca:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80248cc:	2b00      	cmp	r3, #0
 80248ce:	d004      	beq.n	80248da <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80248d0:	687b      	ldr	r3, [r7, #4]
 80248d2:	681b      	ldr	r3, [r3, #0]
 80248d4:	b2db      	uxtb	r3, r3
 80248d6:	2b7f      	cmp	r3, #127	; 0x7f
 80248d8:	d101      	bne.n	80248de <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80248da:	2300      	movs	r3, #0
 80248dc:	e001      	b.n	80248e2 <ip4_route+0xca>
  }

  return netif_default;
 80248de:	4b05      	ldr	r3, [pc, #20]	; (80248f4 <ip4_route+0xdc>)
 80248e0:	681b      	ldr	r3, [r3, #0]
}
 80248e2:	4618      	mov	r0, r3
 80248e4:	3714      	adds	r7, #20
 80248e6:	46bd      	mov	sp, r7
 80248e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80248ec:	4770      	bx	lr
 80248ee:	bf00      	nop
 80248f0:	20015d4c 	.word	0x20015d4c
 80248f4:	20015d50 	.word	0x20015d50

080248f8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80248f8:	b580      	push	{r7, lr}
 80248fa:	b082      	sub	sp, #8
 80248fc:	af00      	add	r7, sp, #0
 80248fe:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8024900:	687b      	ldr	r3, [r7, #4]
 8024902:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024906:	f003 0301 	and.w	r3, r3, #1
 802490a:	b2db      	uxtb	r3, r3
 802490c:	2b00      	cmp	r3, #0
 802490e:	d016      	beq.n	802493e <ip4_input_accept+0x46>
 8024910:	687b      	ldr	r3, [r7, #4]
 8024912:	3304      	adds	r3, #4
 8024914:	681b      	ldr	r3, [r3, #0]
 8024916:	2b00      	cmp	r3, #0
 8024918:	d011      	beq.n	802493e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802491a:	4b0b      	ldr	r3, [pc, #44]	; (8024948 <ip4_input_accept+0x50>)
 802491c:	695a      	ldr	r2, [r3, #20]
 802491e:	687b      	ldr	r3, [r7, #4]
 8024920:	3304      	adds	r3, #4
 8024922:	681b      	ldr	r3, [r3, #0]
 8024924:	429a      	cmp	r2, r3
 8024926:	d008      	beq.n	802493a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8024928:	4b07      	ldr	r3, [pc, #28]	; (8024948 <ip4_input_accept+0x50>)
 802492a:	695b      	ldr	r3, [r3, #20]
 802492c:	6879      	ldr	r1, [r7, #4]
 802492e:	4618      	mov	r0, r3
 8024930:	f000 fa0c 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8024934:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8024936:	2b00      	cmp	r3, #0
 8024938:	d001      	beq.n	802493e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802493a:	2301      	movs	r3, #1
 802493c:	e000      	b.n	8024940 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802493e:	2300      	movs	r3, #0
}
 8024940:	4618      	mov	r0, r3
 8024942:	3708      	adds	r7, #8
 8024944:	46bd      	mov	sp, r7
 8024946:	bd80      	pop	{r7, pc}
 8024948:	2001273c 	.word	0x2001273c

0802494c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802494c:	b580      	push	{r7, lr}
 802494e:	b086      	sub	sp, #24
 8024950:	af00      	add	r7, sp, #0
 8024952:	6078      	str	r0, [r7, #4]
 8024954:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8024956:	687b      	ldr	r3, [r7, #4]
 8024958:	685b      	ldr	r3, [r3, #4]
 802495a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802495c:	697b      	ldr	r3, [r7, #20]
 802495e:	781b      	ldrb	r3, [r3, #0]
 8024960:	091b      	lsrs	r3, r3, #4
 8024962:	b2db      	uxtb	r3, r3
 8024964:	2b04      	cmp	r3, #4
 8024966:	d004      	beq.n	8024972 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8024968:	6878      	ldr	r0, [r7, #4]
 802496a:	f7fd fdf1 	bl	8022550 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802496e:	2300      	movs	r3, #0
 8024970:	e0fd      	b.n	8024b6e <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8024972:	697b      	ldr	r3, [r7, #20]
 8024974:	781b      	ldrb	r3, [r3, #0]
 8024976:	f003 030f 	and.w	r3, r3, #15
 802497a:	b2db      	uxtb	r3, r3
 802497c:	009b      	lsls	r3, r3, #2
 802497e:	b2db      	uxtb	r3, r3
 8024980:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8024982:	697b      	ldr	r3, [r7, #20]
 8024984:	885b      	ldrh	r3, [r3, #2]
 8024986:	b29b      	uxth	r3, r3
 8024988:	4618      	mov	r0, r3
 802498a:	f7fc fa05 	bl	8020d98 <lwip_htons>
 802498e:	4603      	mov	r3, r0
 8024990:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8024992:	687b      	ldr	r3, [r7, #4]
 8024994:	891b      	ldrh	r3, [r3, #8]
 8024996:	89ba      	ldrh	r2, [r7, #12]
 8024998:	429a      	cmp	r2, r3
 802499a:	d204      	bcs.n	80249a6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 802499c:	89bb      	ldrh	r3, [r7, #12]
 802499e:	4619      	mov	r1, r3
 80249a0:	6878      	ldr	r0, [r7, #4]
 80249a2:	f7fd fc4f 	bl	8022244 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80249a6:	687b      	ldr	r3, [r7, #4]
 80249a8:	895b      	ldrh	r3, [r3, #10]
 80249aa:	89fa      	ldrh	r2, [r7, #14]
 80249ac:	429a      	cmp	r2, r3
 80249ae:	d807      	bhi.n	80249c0 <ip4_input+0x74>
 80249b0:	687b      	ldr	r3, [r7, #4]
 80249b2:	891b      	ldrh	r3, [r3, #8]
 80249b4:	89ba      	ldrh	r2, [r7, #12]
 80249b6:	429a      	cmp	r2, r3
 80249b8:	d802      	bhi.n	80249c0 <ip4_input+0x74>
 80249ba:	89fb      	ldrh	r3, [r7, #14]
 80249bc:	2b13      	cmp	r3, #19
 80249be:	d804      	bhi.n	80249ca <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80249c0:	6878      	ldr	r0, [r7, #4]
 80249c2:	f7fd fdc5 	bl	8022550 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80249c6:	2300      	movs	r3, #0
 80249c8:	e0d1      	b.n	8024b6e <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80249ca:	697b      	ldr	r3, [r7, #20]
 80249cc:	691b      	ldr	r3, [r3, #16]
 80249ce:	4a6a      	ldr	r2, [pc, #424]	; (8024b78 <ip4_input+0x22c>)
 80249d0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80249d2:	697b      	ldr	r3, [r7, #20]
 80249d4:	68db      	ldr	r3, [r3, #12]
 80249d6:	4a68      	ldr	r2, [pc, #416]	; (8024b78 <ip4_input+0x22c>)
 80249d8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80249da:	4b67      	ldr	r3, [pc, #412]	; (8024b78 <ip4_input+0x22c>)
 80249dc:	695b      	ldr	r3, [r3, #20]
 80249de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80249e2:	2be0      	cmp	r3, #224	; 0xe0
 80249e4:	d112      	bne.n	8024a0c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80249e6:	683b      	ldr	r3, [r7, #0]
 80249e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80249ec:	f003 0301 	and.w	r3, r3, #1
 80249f0:	b2db      	uxtb	r3, r3
 80249f2:	2b00      	cmp	r3, #0
 80249f4:	d007      	beq.n	8024a06 <ip4_input+0xba>
 80249f6:	683b      	ldr	r3, [r7, #0]
 80249f8:	3304      	adds	r3, #4
 80249fa:	681b      	ldr	r3, [r3, #0]
 80249fc:	2b00      	cmp	r3, #0
 80249fe:	d002      	beq.n	8024a06 <ip4_input+0xba>
      netif = inp;
 8024a00:	683b      	ldr	r3, [r7, #0]
 8024a02:	613b      	str	r3, [r7, #16]
 8024a04:	e02a      	b.n	8024a5c <ip4_input+0x110>
    } else {
      netif = NULL;
 8024a06:	2300      	movs	r3, #0
 8024a08:	613b      	str	r3, [r7, #16]
 8024a0a:	e027      	b.n	8024a5c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8024a0c:	6838      	ldr	r0, [r7, #0]
 8024a0e:	f7ff ff73 	bl	80248f8 <ip4_input_accept>
 8024a12:	4603      	mov	r3, r0
 8024a14:	2b00      	cmp	r3, #0
 8024a16:	d002      	beq.n	8024a1e <ip4_input+0xd2>
      netif = inp;
 8024a18:	683b      	ldr	r3, [r7, #0]
 8024a1a:	613b      	str	r3, [r7, #16]
 8024a1c:	e01e      	b.n	8024a5c <ip4_input+0x110>
    } else {
      netif = NULL;
 8024a1e:	2300      	movs	r3, #0
 8024a20:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8024a22:	4b55      	ldr	r3, [pc, #340]	; (8024b78 <ip4_input+0x22c>)
 8024a24:	695b      	ldr	r3, [r3, #20]
 8024a26:	b2db      	uxtb	r3, r3
 8024a28:	2b7f      	cmp	r3, #127	; 0x7f
 8024a2a:	d017      	beq.n	8024a5c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8024a2c:	4b53      	ldr	r3, [pc, #332]	; (8024b7c <ip4_input+0x230>)
 8024a2e:	681b      	ldr	r3, [r3, #0]
 8024a30:	613b      	str	r3, [r7, #16]
 8024a32:	e00e      	b.n	8024a52 <ip4_input+0x106>
          if (netif == inp) {
 8024a34:	693a      	ldr	r2, [r7, #16]
 8024a36:	683b      	ldr	r3, [r7, #0]
 8024a38:	429a      	cmp	r2, r3
 8024a3a:	d006      	beq.n	8024a4a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8024a3c:	6938      	ldr	r0, [r7, #16]
 8024a3e:	f7ff ff5b 	bl	80248f8 <ip4_input_accept>
 8024a42:	4603      	mov	r3, r0
 8024a44:	2b00      	cmp	r3, #0
 8024a46:	d108      	bne.n	8024a5a <ip4_input+0x10e>
 8024a48:	e000      	b.n	8024a4c <ip4_input+0x100>
            continue;
 8024a4a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8024a4c:	693b      	ldr	r3, [r7, #16]
 8024a4e:	681b      	ldr	r3, [r3, #0]
 8024a50:	613b      	str	r3, [r7, #16]
 8024a52:	693b      	ldr	r3, [r7, #16]
 8024a54:	2b00      	cmp	r3, #0
 8024a56:	d1ed      	bne.n	8024a34 <ip4_input+0xe8>
 8024a58:	e000      	b.n	8024a5c <ip4_input+0x110>
            break;
 8024a5a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024a5c:	4b46      	ldr	r3, [pc, #280]	; (8024b78 <ip4_input+0x22c>)
 8024a5e:	691b      	ldr	r3, [r3, #16]
 8024a60:	6839      	ldr	r1, [r7, #0]
 8024a62:	4618      	mov	r0, r3
 8024a64:	f000 f972 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8024a68:	4603      	mov	r3, r0
 8024a6a:	2b00      	cmp	r3, #0
 8024a6c:	d105      	bne.n	8024a7a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8024a6e:	4b42      	ldr	r3, [pc, #264]	; (8024b78 <ip4_input+0x22c>)
 8024a70:	691b      	ldr	r3, [r3, #16]
 8024a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8024a76:	2be0      	cmp	r3, #224	; 0xe0
 8024a78:	d104      	bne.n	8024a84 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8024a7a:	6878      	ldr	r0, [r7, #4]
 8024a7c:	f7fd fd68 	bl	8022550 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8024a80:	2300      	movs	r3, #0
 8024a82:	e074      	b.n	8024b6e <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8024a84:	693b      	ldr	r3, [r7, #16]
 8024a86:	2b00      	cmp	r3, #0
 8024a88:	d104      	bne.n	8024a94 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8024a8a:	6878      	ldr	r0, [r7, #4]
 8024a8c:	f7fd fd60 	bl	8022550 <pbuf_free>
    return ERR_OK;
 8024a90:	2300      	movs	r3, #0
 8024a92:	e06c      	b.n	8024b6e <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8024a94:	697b      	ldr	r3, [r7, #20]
 8024a96:	88db      	ldrh	r3, [r3, #6]
 8024a98:	b29b      	uxth	r3, r3
 8024a9a:	461a      	mov	r2, r3
 8024a9c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8024aa0:	4013      	ands	r3, r2
 8024aa2:	2b00      	cmp	r3, #0
 8024aa4:	d00b      	beq.n	8024abe <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8024aa6:	6878      	ldr	r0, [r7, #4]
 8024aa8:	f000 fd26 	bl	80254f8 <ip4_reass>
 8024aac:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8024aae:	687b      	ldr	r3, [r7, #4]
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	d101      	bne.n	8024ab8 <ip4_input+0x16c>
      return ERR_OK;
 8024ab4:	2300      	movs	r3, #0
 8024ab6:	e05a      	b.n	8024b6e <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8024ab8:	687b      	ldr	r3, [r7, #4]
 8024aba:	685b      	ldr	r3, [r3, #4]
 8024abc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8024abe:	4a2e      	ldr	r2, [pc, #184]	; (8024b78 <ip4_input+0x22c>)
 8024ac0:	693b      	ldr	r3, [r7, #16]
 8024ac2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8024ac4:	4a2c      	ldr	r2, [pc, #176]	; (8024b78 <ip4_input+0x22c>)
 8024ac6:	683b      	ldr	r3, [r7, #0]
 8024ac8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8024aca:	4a2b      	ldr	r2, [pc, #172]	; (8024b78 <ip4_input+0x22c>)
 8024acc:	697b      	ldr	r3, [r7, #20]
 8024ace:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8024ad0:	697b      	ldr	r3, [r7, #20]
 8024ad2:	781b      	ldrb	r3, [r3, #0]
 8024ad4:	f003 030f 	and.w	r3, r3, #15
 8024ad8:	b2db      	uxtb	r3, r3
 8024ada:	009b      	lsls	r3, r3, #2
 8024adc:	b2db      	uxtb	r3, r3
 8024ade:	b29a      	uxth	r2, r3
 8024ae0:	4b25      	ldr	r3, [pc, #148]	; (8024b78 <ip4_input+0x22c>)
 8024ae2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8024ae4:	89fb      	ldrh	r3, [r7, #14]
 8024ae6:	4619      	mov	r1, r3
 8024ae8:	6878      	ldr	r0, [r7, #4]
 8024aea:	f7fd fcab 	bl	8022444 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8024aee:	697b      	ldr	r3, [r7, #20]
 8024af0:	7a5b      	ldrb	r3, [r3, #9]
 8024af2:	2b01      	cmp	r3, #1
 8024af4:	d006      	beq.n	8024b04 <ip4_input+0x1b8>
 8024af6:	2b11      	cmp	r3, #17
 8024af8:	d109      	bne.n	8024b0e <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8024afa:	6839      	ldr	r1, [r7, #0]
 8024afc:	6878      	ldr	r0, [r7, #4]
 8024afe:	f7fe f9b5 	bl	8022e6c <udp_input>
        break;
 8024b02:	e021      	b.n	8024b48 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8024b04:	6839      	ldr	r1, [r7, #0]
 8024b06:	6878      	ldr	r0, [r7, #4]
 8024b08:	f7ff fcf8 	bl	80244fc <icmp_input>
        break;
 8024b0c:	e01c      	b.n	8024b48 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024b0e:	4b1a      	ldr	r3, [pc, #104]	; (8024b78 <ip4_input+0x22c>)
 8024b10:	695b      	ldr	r3, [r3, #20]
 8024b12:	6939      	ldr	r1, [r7, #16]
 8024b14:	4618      	mov	r0, r3
 8024b16:	f000 f919 	bl	8024d4c <ip4_addr_isbroadcast_u32>
 8024b1a:	4603      	mov	r3, r0
 8024b1c:	2b00      	cmp	r3, #0
 8024b1e:	d10f      	bne.n	8024b40 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8024b20:	4b15      	ldr	r3, [pc, #84]	; (8024b78 <ip4_input+0x22c>)
 8024b22:	695b      	ldr	r3, [r3, #20]
 8024b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8024b28:	2be0      	cmp	r3, #224	; 0xe0
 8024b2a:	d009      	beq.n	8024b40 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8024b2c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8024b30:	4619      	mov	r1, r3
 8024b32:	6878      	ldr	r0, [r7, #4]
 8024b34:	f7fd fcf9 	bl	802252a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8024b38:	2102      	movs	r1, #2
 8024b3a:	6878      	ldr	r0, [r7, #4]
 8024b3c:	f7ff fde2 	bl	8024704 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8024b40:	6878      	ldr	r0, [r7, #4]
 8024b42:	f7fd fd05 	bl	8022550 <pbuf_free>
        break;
 8024b46:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8024b48:	4b0b      	ldr	r3, [pc, #44]	; (8024b78 <ip4_input+0x22c>)
 8024b4a:	2200      	movs	r2, #0
 8024b4c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8024b4e:	4b0a      	ldr	r3, [pc, #40]	; (8024b78 <ip4_input+0x22c>)
 8024b50:	2200      	movs	r2, #0
 8024b52:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8024b54:	4b08      	ldr	r3, [pc, #32]	; (8024b78 <ip4_input+0x22c>)
 8024b56:	2200      	movs	r2, #0
 8024b58:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8024b5a:	4b07      	ldr	r3, [pc, #28]	; (8024b78 <ip4_input+0x22c>)
 8024b5c:	2200      	movs	r2, #0
 8024b5e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8024b60:	4b05      	ldr	r3, [pc, #20]	; (8024b78 <ip4_input+0x22c>)
 8024b62:	2200      	movs	r2, #0
 8024b64:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8024b66:	4b04      	ldr	r3, [pc, #16]	; (8024b78 <ip4_input+0x22c>)
 8024b68:	2200      	movs	r2, #0
 8024b6a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8024b6c:	2300      	movs	r3, #0
}
 8024b6e:	4618      	mov	r0, r3
 8024b70:	3718      	adds	r7, #24
 8024b72:	46bd      	mov	sp, r7
 8024b74:	bd80      	pop	{r7, pc}
 8024b76:	bf00      	nop
 8024b78:	2001273c 	.word	0x2001273c
 8024b7c:	20015d4c 	.word	0x20015d4c

08024b80 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8024b80:	b580      	push	{r7, lr}
 8024b82:	b08a      	sub	sp, #40	; 0x28
 8024b84:	af04      	add	r7, sp, #16
 8024b86:	60f8      	str	r0, [r7, #12]
 8024b88:	60b9      	str	r1, [r7, #8]
 8024b8a:	607a      	str	r2, [r7, #4]
 8024b8c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8024b8e:	68bb      	ldr	r3, [r7, #8]
 8024b90:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8024b92:	687b      	ldr	r3, [r7, #4]
 8024b94:	2b00      	cmp	r3, #0
 8024b96:	d009      	beq.n	8024bac <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8024b98:	68bb      	ldr	r3, [r7, #8]
 8024b9a:	2b00      	cmp	r3, #0
 8024b9c:	d003      	beq.n	8024ba6 <ip4_output_if+0x26>
 8024b9e:	68bb      	ldr	r3, [r7, #8]
 8024ba0:	681b      	ldr	r3, [r3, #0]
 8024ba2:	2b00      	cmp	r3, #0
 8024ba4:	d102      	bne.n	8024bac <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8024ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ba8:	3304      	adds	r3, #4
 8024baa:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8024bac:	78fa      	ldrb	r2, [r7, #3]
 8024bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024bb0:	9302      	str	r3, [sp, #8]
 8024bb2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8024bb6:	9301      	str	r3, [sp, #4]
 8024bb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8024bbc:	9300      	str	r3, [sp, #0]
 8024bbe:	4613      	mov	r3, r2
 8024bc0:	687a      	ldr	r2, [r7, #4]
 8024bc2:	6979      	ldr	r1, [r7, #20]
 8024bc4:	68f8      	ldr	r0, [r7, #12]
 8024bc6:	f000 f805 	bl	8024bd4 <ip4_output_if_src>
 8024bca:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8024bcc:	4618      	mov	r0, r3
 8024bce:	3718      	adds	r7, #24
 8024bd0:	46bd      	mov	sp, r7
 8024bd2:	bd80      	pop	{r7, pc}

08024bd4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8024bd4:	b580      	push	{r7, lr}
 8024bd6:	b088      	sub	sp, #32
 8024bd8:	af00      	add	r7, sp, #0
 8024bda:	60f8      	str	r0, [r7, #12]
 8024bdc:	60b9      	str	r1, [r7, #8]
 8024bde:	607a      	str	r2, [r7, #4]
 8024be0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8024be2:	68fb      	ldr	r3, [r7, #12]
 8024be4:	7b9b      	ldrb	r3, [r3, #14]
 8024be6:	2b01      	cmp	r3, #1
 8024be8:	d006      	beq.n	8024bf8 <ip4_output_if_src+0x24>
 8024bea:	4b52      	ldr	r3, [pc, #328]	; (8024d34 <ip4_output_if_src+0x160>)
 8024bec:	f44f 7255 	mov.w	r2, #852	; 0x354
 8024bf0:	4951      	ldr	r1, [pc, #324]	; (8024d38 <ip4_output_if_src+0x164>)
 8024bf2:	4852      	ldr	r0, [pc, #328]	; (8024d3c <ip4_output_if_src+0x168>)
 8024bf4:	f001 f9e4 	bl	8025fc0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8024bf8:	687b      	ldr	r3, [r7, #4]
 8024bfa:	2b00      	cmp	r3, #0
 8024bfc:	d060      	beq.n	8024cc0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8024bfe:	2314      	movs	r3, #20
 8024c00:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8024c02:	2114      	movs	r1, #20
 8024c04:	68f8      	ldr	r0, [r7, #12]
 8024c06:	f7fd fc0d 	bl	8022424 <pbuf_add_header>
 8024c0a:	4603      	mov	r3, r0
 8024c0c:	2b00      	cmp	r3, #0
 8024c0e:	d002      	beq.n	8024c16 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024c10:	f06f 0301 	mvn.w	r3, #1
 8024c14:	e089      	b.n	8024d2a <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8024c16:	68fb      	ldr	r3, [r7, #12]
 8024c18:	685b      	ldr	r3, [r3, #4]
 8024c1a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8024c1c:	68fb      	ldr	r3, [r7, #12]
 8024c1e:	895b      	ldrh	r3, [r3, #10]
 8024c20:	2b13      	cmp	r3, #19
 8024c22:	d806      	bhi.n	8024c32 <ip4_output_if_src+0x5e>
 8024c24:	4b43      	ldr	r3, [pc, #268]	; (8024d34 <ip4_output_if_src+0x160>)
 8024c26:	f44f 7262 	mov.w	r2, #904	; 0x388
 8024c2a:	4945      	ldr	r1, [pc, #276]	; (8024d40 <ip4_output_if_src+0x16c>)
 8024c2c:	4843      	ldr	r0, [pc, #268]	; (8024d3c <ip4_output_if_src+0x168>)
 8024c2e:	f001 f9c7 	bl	8025fc0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8024c32:	69fb      	ldr	r3, [r7, #28]
 8024c34:	78fa      	ldrb	r2, [r7, #3]
 8024c36:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8024c38:	69fb      	ldr	r3, [r7, #28]
 8024c3a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8024c3e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8024c40:	687b      	ldr	r3, [r7, #4]
 8024c42:	681a      	ldr	r2, [r3, #0]
 8024c44:	69fb      	ldr	r3, [r7, #28]
 8024c46:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8024c48:	8b7b      	ldrh	r3, [r7, #26]
 8024c4a:	089b      	lsrs	r3, r3, #2
 8024c4c:	b29b      	uxth	r3, r3
 8024c4e:	b2db      	uxtb	r3, r3
 8024c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024c54:	b2da      	uxtb	r2, r3
 8024c56:	69fb      	ldr	r3, [r7, #28]
 8024c58:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8024c5a:	69fb      	ldr	r3, [r7, #28]
 8024c5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8024c60:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8024c62:	68fb      	ldr	r3, [r7, #12]
 8024c64:	891b      	ldrh	r3, [r3, #8]
 8024c66:	4618      	mov	r0, r3
 8024c68:	f7fc f896 	bl	8020d98 <lwip_htons>
 8024c6c:	4603      	mov	r3, r0
 8024c6e:	461a      	mov	r2, r3
 8024c70:	69fb      	ldr	r3, [r7, #28]
 8024c72:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8024c74:	69fb      	ldr	r3, [r7, #28]
 8024c76:	2200      	movs	r2, #0
 8024c78:	719a      	strb	r2, [r3, #6]
 8024c7a:	2200      	movs	r2, #0
 8024c7c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8024c7e:	4b31      	ldr	r3, [pc, #196]	; (8024d44 <ip4_output_if_src+0x170>)
 8024c80:	881b      	ldrh	r3, [r3, #0]
 8024c82:	4618      	mov	r0, r3
 8024c84:	f7fc f888 	bl	8020d98 <lwip_htons>
 8024c88:	4603      	mov	r3, r0
 8024c8a:	461a      	mov	r2, r3
 8024c8c:	69fb      	ldr	r3, [r7, #28]
 8024c8e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8024c90:	4b2c      	ldr	r3, [pc, #176]	; (8024d44 <ip4_output_if_src+0x170>)
 8024c92:	881b      	ldrh	r3, [r3, #0]
 8024c94:	3301      	adds	r3, #1
 8024c96:	b29a      	uxth	r2, r3
 8024c98:	4b2a      	ldr	r3, [pc, #168]	; (8024d44 <ip4_output_if_src+0x170>)
 8024c9a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8024c9c:	68bb      	ldr	r3, [r7, #8]
 8024c9e:	2b00      	cmp	r3, #0
 8024ca0:	d104      	bne.n	8024cac <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8024ca2:	4b29      	ldr	r3, [pc, #164]	; (8024d48 <ip4_output_if_src+0x174>)
 8024ca4:	681a      	ldr	r2, [r3, #0]
 8024ca6:	69fb      	ldr	r3, [r7, #28]
 8024ca8:	60da      	str	r2, [r3, #12]
 8024caa:	e003      	b.n	8024cb4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8024cac:	68bb      	ldr	r3, [r7, #8]
 8024cae:	681a      	ldr	r2, [r3, #0]
 8024cb0:	69fb      	ldr	r3, [r7, #28]
 8024cb2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8024cb4:	69fb      	ldr	r3, [r7, #28]
 8024cb6:	2200      	movs	r2, #0
 8024cb8:	729a      	strb	r2, [r3, #10]
 8024cba:	2200      	movs	r2, #0
 8024cbc:	72da      	strb	r2, [r3, #11]
 8024cbe:	e00f      	b.n	8024ce0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8024cc0:	68fb      	ldr	r3, [r7, #12]
 8024cc2:	895b      	ldrh	r3, [r3, #10]
 8024cc4:	2b13      	cmp	r3, #19
 8024cc6:	d802      	bhi.n	8024cce <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8024cc8:	f06f 0301 	mvn.w	r3, #1
 8024ccc:	e02d      	b.n	8024d2a <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8024cce:	68fb      	ldr	r3, [r7, #12]
 8024cd0:	685b      	ldr	r3, [r3, #4]
 8024cd2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8024cd4:	69fb      	ldr	r3, [r7, #28]
 8024cd6:	691b      	ldr	r3, [r3, #16]
 8024cd8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8024cda:	f107 0314 	add.w	r3, r7, #20
 8024cde:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8024ce0:	687b      	ldr	r3, [r7, #4]
 8024ce2:	681a      	ldr	r2, [r3, #0]
 8024ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024ce6:	3304      	adds	r3, #4
 8024ce8:	681b      	ldr	r3, [r3, #0]
 8024cea:	429a      	cmp	r2, r3
 8024cec:	d105      	bne.n	8024cfa <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8024cee:	68f9      	ldr	r1, [r7, #12]
 8024cf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024cf2:	f7fd f86f 	bl	8021dd4 <netif_loop_output>
 8024cf6:	4603      	mov	r3, r0
 8024cf8:	e017      	b.n	8024d2a <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8024cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024cfe:	2b00      	cmp	r3, #0
 8024d00:	d00c      	beq.n	8024d1c <ip4_output_if_src+0x148>
 8024d02:	68fb      	ldr	r3, [r7, #12]
 8024d04:	891a      	ldrh	r2, [r3, #8]
 8024d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024d08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8024d0a:	429a      	cmp	r2, r3
 8024d0c:	d906      	bls.n	8024d1c <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8024d0e:	687a      	ldr	r2, [r7, #4]
 8024d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8024d12:	68f8      	ldr	r0, [r7, #12]
 8024d14:	f000 fde4 	bl	80258e0 <ip4_frag>
 8024d18:	4603      	mov	r3, r0
 8024d1a:	e006      	b.n	8024d2a <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8024d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8024d1e:	695b      	ldr	r3, [r3, #20]
 8024d20:	687a      	ldr	r2, [r7, #4]
 8024d22:	68f9      	ldr	r1, [r7, #12]
 8024d24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8024d26:	4798      	blx	r3
 8024d28:	4603      	mov	r3, r0
}
 8024d2a:	4618      	mov	r0, r3
 8024d2c:	3720      	adds	r7, #32
 8024d2e:	46bd      	mov	sp, r7
 8024d30:	bd80      	pop	{r7, pc}
 8024d32:	bf00      	nop
 8024d34:	0802c9e4 	.word	0x0802c9e4
 8024d38:	0802ca18 	.word	0x0802ca18
 8024d3c:	0802ca24 	.word	0x0802ca24
 8024d40:	0802ca4c 	.word	0x0802ca4c
 8024d44:	20016256 	.word	0x20016256
 8024d48:	0802d1f0 	.word	0x0802d1f0

08024d4c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8024d4c:	b480      	push	{r7}
 8024d4e:	b085      	sub	sp, #20
 8024d50:	af00      	add	r7, sp, #0
 8024d52:	6078      	str	r0, [r7, #4]
 8024d54:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8024d56:	687b      	ldr	r3, [r7, #4]
 8024d58:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8024d5a:	687b      	ldr	r3, [r7, #4]
 8024d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8024d60:	d002      	beq.n	8024d68 <ip4_addr_isbroadcast_u32+0x1c>
 8024d62:	687b      	ldr	r3, [r7, #4]
 8024d64:	2b00      	cmp	r3, #0
 8024d66:	d101      	bne.n	8024d6c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8024d68:	2301      	movs	r3, #1
 8024d6a:	e02a      	b.n	8024dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8024d6c:	683b      	ldr	r3, [r7, #0]
 8024d6e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8024d72:	f003 0302 	and.w	r3, r3, #2
 8024d76:	2b00      	cmp	r3, #0
 8024d78:	d101      	bne.n	8024d7e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8024d7a:	2300      	movs	r3, #0
 8024d7c:	e021      	b.n	8024dc2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8024d7e:	683b      	ldr	r3, [r7, #0]
 8024d80:	3304      	adds	r3, #4
 8024d82:	681b      	ldr	r3, [r3, #0]
 8024d84:	687a      	ldr	r2, [r7, #4]
 8024d86:	429a      	cmp	r2, r3
 8024d88:	d101      	bne.n	8024d8e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8024d8a:	2300      	movs	r3, #0
 8024d8c:	e019      	b.n	8024dc2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8024d8e:	68fa      	ldr	r2, [r7, #12]
 8024d90:	683b      	ldr	r3, [r7, #0]
 8024d92:	3304      	adds	r3, #4
 8024d94:	681b      	ldr	r3, [r3, #0]
 8024d96:	405a      	eors	r2, r3
 8024d98:	683b      	ldr	r3, [r7, #0]
 8024d9a:	3308      	adds	r3, #8
 8024d9c:	681b      	ldr	r3, [r3, #0]
 8024d9e:	4013      	ands	r3, r2
 8024da0:	2b00      	cmp	r3, #0
 8024da2:	d10d      	bne.n	8024dc0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024da4:	683b      	ldr	r3, [r7, #0]
 8024da6:	3308      	adds	r3, #8
 8024da8:	681b      	ldr	r3, [r3, #0]
 8024daa:	43da      	mvns	r2, r3
 8024dac:	687b      	ldr	r3, [r7, #4]
 8024dae:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8024db0:	683b      	ldr	r3, [r7, #0]
 8024db2:	3308      	adds	r3, #8
 8024db4:	681b      	ldr	r3, [r3, #0]
 8024db6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8024db8:	429a      	cmp	r2, r3
 8024dba:	d101      	bne.n	8024dc0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8024dbc:	2301      	movs	r3, #1
 8024dbe:	e000      	b.n	8024dc2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8024dc0:	2300      	movs	r3, #0
  }
}
 8024dc2:	4618      	mov	r0, r3
 8024dc4:	3714      	adds	r7, #20
 8024dc6:	46bd      	mov	sp, r7
 8024dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024dcc:	4770      	bx	lr
	...

08024dd0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8024dd0:	b580      	push	{r7, lr}
 8024dd2:	b082      	sub	sp, #8
 8024dd4:	af00      	add	r7, sp, #0
 8024dd6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8024dd8:	2210      	movs	r2, #16
 8024dda:	4904      	ldr	r1, [pc, #16]	; (8024dec <ip4addr_ntoa+0x1c>)
 8024ddc:	6878      	ldr	r0, [r7, #4]
 8024dde:	f000 f807 	bl	8024df0 <ip4addr_ntoa_r>
 8024de2:	4603      	mov	r3, r0
}
 8024de4:	4618      	mov	r0, r3
 8024de6:	3708      	adds	r7, #8
 8024de8:	46bd      	mov	sp, r7
 8024dea:	bd80      	pop	{r7, pc}
 8024dec:	20016258 	.word	0x20016258

08024df0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8024df0:	b480      	push	{r7}
 8024df2:	b08d      	sub	sp, #52	; 0x34
 8024df4:	af00      	add	r7, sp, #0
 8024df6:	60f8      	str	r0, [r7, #12]
 8024df8:	60b9      	str	r1, [r7, #8]
 8024dfa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8024dfc:	2300      	movs	r3, #0
 8024dfe:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8024e00:	68fb      	ldr	r3, [r7, #12]
 8024e02:	681b      	ldr	r3, [r3, #0]
 8024e04:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8024e06:	68bb      	ldr	r3, [r7, #8]
 8024e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8024e0a:	f107 0318 	add.w	r3, r7, #24
 8024e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8024e10:	2300      	movs	r3, #0
 8024e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024e16:	e058      	b.n	8024eca <ip4addr_ntoa_r+0xda>
    i = 0;
 8024e18:	2300      	movs	r3, #0
 8024e1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8024e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e20:	781a      	ldrb	r2, [r3, #0]
 8024e22:	4b32      	ldr	r3, [pc, #200]	; (8024eec <ip4addr_ntoa_r+0xfc>)
 8024e24:	fba3 1302 	umull	r1, r3, r3, r2
 8024e28:	08d9      	lsrs	r1, r3, #3
 8024e2a:	460b      	mov	r3, r1
 8024e2c:	009b      	lsls	r3, r3, #2
 8024e2e:	440b      	add	r3, r1
 8024e30:	005b      	lsls	r3, r3, #1
 8024e32:	1ad3      	subs	r3, r2, r3
 8024e34:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8024e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e38:	781b      	ldrb	r3, [r3, #0]
 8024e3a:	4a2c      	ldr	r2, [pc, #176]	; (8024eec <ip4addr_ntoa_r+0xfc>)
 8024e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8024e40:	08db      	lsrs	r3, r3, #3
 8024e42:	b2da      	uxtb	r2, r3
 8024e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e46:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8024e48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8024e4c:	1c5a      	adds	r2, r3, #1
 8024e4e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8024e52:	4619      	mov	r1, r3
 8024e54:	7ffb      	ldrb	r3, [r7, #31]
 8024e56:	3330      	adds	r3, #48	; 0x30
 8024e58:	b2da      	uxtb	r2, r3
 8024e5a:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8024e5e:	443b      	add	r3, r7
 8024e60:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8024e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024e66:	781b      	ldrb	r3, [r3, #0]
 8024e68:	2b00      	cmp	r3, #0
 8024e6a:	d1d8      	bne.n	8024e1e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8024e6c:	e011      	b.n	8024e92 <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8024e6e:	6a3b      	ldr	r3, [r7, #32]
 8024e70:	1c5a      	adds	r2, r3, #1
 8024e72:	623a      	str	r2, [r7, #32]
 8024e74:	687a      	ldr	r2, [r7, #4]
 8024e76:	429a      	cmp	r2, r3
 8024e78:	dc01      	bgt.n	8024e7e <ip4addr_ntoa_r+0x8e>
        return NULL;
 8024e7a:	2300      	movs	r3, #0
 8024e7c:	e030      	b.n	8024ee0 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 8024e7e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8024e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024e84:	1c59      	adds	r1, r3, #1
 8024e86:	62f9      	str	r1, [r7, #44]	; 0x2c
 8024e88:	3230      	adds	r2, #48	; 0x30
 8024e8a:	443a      	add	r2, r7
 8024e8c:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8024e90:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8024e92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8024e96:	1e5a      	subs	r2, r3, #1
 8024e98:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8024e9c:	2b00      	cmp	r3, #0
 8024e9e:	d1e6      	bne.n	8024e6e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8024ea0:	6a3b      	ldr	r3, [r7, #32]
 8024ea2:	1c5a      	adds	r2, r3, #1
 8024ea4:	623a      	str	r2, [r7, #32]
 8024ea6:	687a      	ldr	r2, [r7, #4]
 8024ea8:	429a      	cmp	r2, r3
 8024eaa:	dc01      	bgt.n	8024eb0 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8024eac:	2300      	movs	r3, #0
 8024eae:	e017      	b.n	8024ee0 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8024eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eb2:	1c5a      	adds	r2, r3, #1
 8024eb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024eb6:	222e      	movs	r2, #46	; 0x2e
 8024eb8:	701a      	strb	r2, [r3, #0]
    ap++;
 8024eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8024ebc:	3301      	adds	r3, #1
 8024ebe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8024ec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024ec4:	3301      	adds	r3, #1
 8024ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8024eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8024ece:	2b03      	cmp	r3, #3
 8024ed0:	d9a2      	bls.n	8024e18 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8024ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024ed4:	3b01      	subs	r3, #1
 8024ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024eda:	2200      	movs	r2, #0
 8024edc:	701a      	strb	r2, [r3, #0]
  return buf;
 8024ede:	68bb      	ldr	r3, [r7, #8]
}
 8024ee0:	4618      	mov	r0, r3
 8024ee2:	3734      	adds	r7, #52	; 0x34
 8024ee4:	46bd      	mov	sp, r7
 8024ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024eea:	4770      	bx	lr
 8024eec:	cccccccd 	.word	0xcccccccd

08024ef0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8024ef0:	b580      	push	{r7, lr}
 8024ef2:	b084      	sub	sp, #16
 8024ef4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8024ef6:	2300      	movs	r3, #0
 8024ef8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8024efa:	4b12      	ldr	r3, [pc, #72]	; (8024f44 <ip_reass_tmr+0x54>)
 8024efc:	681b      	ldr	r3, [r3, #0]
 8024efe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8024f00:	e018      	b.n	8024f34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8024f02:	68fb      	ldr	r3, [r7, #12]
 8024f04:	7fdb      	ldrb	r3, [r3, #31]
 8024f06:	2b00      	cmp	r3, #0
 8024f08:	d00b      	beq.n	8024f22 <ip_reass_tmr+0x32>
      r->timer--;
 8024f0a:	68fb      	ldr	r3, [r7, #12]
 8024f0c:	7fdb      	ldrb	r3, [r3, #31]
 8024f0e:	3b01      	subs	r3, #1
 8024f10:	b2da      	uxtb	r2, r3
 8024f12:	68fb      	ldr	r3, [r7, #12]
 8024f14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8024f16:	68fb      	ldr	r3, [r7, #12]
 8024f18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8024f1a:	68fb      	ldr	r3, [r7, #12]
 8024f1c:	681b      	ldr	r3, [r3, #0]
 8024f1e:	60fb      	str	r3, [r7, #12]
 8024f20:	e008      	b.n	8024f34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8024f22:	68fb      	ldr	r3, [r7, #12]
 8024f24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8024f26:	68fb      	ldr	r3, [r7, #12]
 8024f28:	681b      	ldr	r3, [r3, #0]
 8024f2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8024f2c:	68b9      	ldr	r1, [r7, #8]
 8024f2e:	6878      	ldr	r0, [r7, #4]
 8024f30:	f000 f80a 	bl	8024f48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8024f34:	68fb      	ldr	r3, [r7, #12]
 8024f36:	2b00      	cmp	r3, #0
 8024f38:	d1e3      	bne.n	8024f02 <ip_reass_tmr+0x12>
    }
  }
}
 8024f3a:	bf00      	nop
 8024f3c:	bf00      	nop
 8024f3e:	3710      	adds	r7, #16
 8024f40:	46bd      	mov	sp, r7
 8024f42:	bd80      	pop	{r7, pc}
 8024f44:	20016268 	.word	0x20016268

08024f48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8024f48:	b580      	push	{r7, lr}
 8024f4a:	b088      	sub	sp, #32
 8024f4c:	af00      	add	r7, sp, #0
 8024f4e:	6078      	str	r0, [r7, #4]
 8024f50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8024f52:	2300      	movs	r3, #0
 8024f54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8024f56:	683a      	ldr	r2, [r7, #0]
 8024f58:	687b      	ldr	r3, [r7, #4]
 8024f5a:	429a      	cmp	r2, r3
 8024f5c:	d105      	bne.n	8024f6a <ip_reass_free_complete_datagram+0x22>
 8024f5e:	4b45      	ldr	r3, [pc, #276]	; (8025074 <ip_reass_free_complete_datagram+0x12c>)
 8024f60:	22ab      	movs	r2, #171	; 0xab
 8024f62:	4945      	ldr	r1, [pc, #276]	; (8025078 <ip_reass_free_complete_datagram+0x130>)
 8024f64:	4845      	ldr	r0, [pc, #276]	; (802507c <ip_reass_free_complete_datagram+0x134>)
 8024f66:	f001 f82b 	bl	8025fc0 <iprintf>
  if (prev != NULL) {
 8024f6a:	683b      	ldr	r3, [r7, #0]
 8024f6c:	2b00      	cmp	r3, #0
 8024f6e:	d00a      	beq.n	8024f86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8024f70:	683b      	ldr	r3, [r7, #0]
 8024f72:	681b      	ldr	r3, [r3, #0]
 8024f74:	687a      	ldr	r2, [r7, #4]
 8024f76:	429a      	cmp	r2, r3
 8024f78:	d005      	beq.n	8024f86 <ip_reass_free_complete_datagram+0x3e>
 8024f7a:	4b3e      	ldr	r3, [pc, #248]	; (8025074 <ip_reass_free_complete_datagram+0x12c>)
 8024f7c:	22ad      	movs	r2, #173	; 0xad
 8024f7e:	4940      	ldr	r1, [pc, #256]	; (8025080 <ip_reass_free_complete_datagram+0x138>)
 8024f80:	483e      	ldr	r0, [pc, #248]	; (802507c <ip_reass_free_complete_datagram+0x134>)
 8024f82:	f001 f81d 	bl	8025fc0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8024f86:	687b      	ldr	r3, [r7, #4]
 8024f88:	685b      	ldr	r3, [r3, #4]
 8024f8a:	685b      	ldr	r3, [r3, #4]
 8024f8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8024f8e:	697b      	ldr	r3, [r7, #20]
 8024f90:	889b      	ldrh	r3, [r3, #4]
 8024f92:	b29b      	uxth	r3, r3
 8024f94:	2b00      	cmp	r3, #0
 8024f96:	d12a      	bne.n	8024fee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8024f98:	687b      	ldr	r3, [r7, #4]
 8024f9a:	685b      	ldr	r3, [r3, #4]
 8024f9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8024f9e:	697b      	ldr	r3, [r7, #20]
 8024fa0:	681a      	ldr	r2, [r3, #0]
 8024fa2:	687b      	ldr	r3, [r7, #4]
 8024fa4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8024fa6:	69bb      	ldr	r3, [r7, #24]
 8024fa8:	6858      	ldr	r0, [r3, #4]
 8024faa:	687b      	ldr	r3, [r7, #4]
 8024fac:	3308      	adds	r3, #8
 8024fae:	2214      	movs	r2, #20
 8024fb0:	4619      	mov	r1, r3
 8024fb2:	f000 fef5 	bl	8025da0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8024fb6:	2101      	movs	r1, #1
 8024fb8:	69b8      	ldr	r0, [r7, #24]
 8024fba:	f7ff fbb3 	bl	8024724 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8024fbe:	69b8      	ldr	r0, [r7, #24]
 8024fc0:	f7fd fb4e 	bl	8022660 <pbuf_clen>
 8024fc4:	4603      	mov	r3, r0
 8024fc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8024fc8:	8bfa      	ldrh	r2, [r7, #30]
 8024fca:	8a7b      	ldrh	r3, [r7, #18]
 8024fcc:	4413      	add	r3, r2
 8024fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8024fd2:	db05      	blt.n	8024fe0 <ip_reass_free_complete_datagram+0x98>
 8024fd4:	4b27      	ldr	r3, [pc, #156]	; (8025074 <ip_reass_free_complete_datagram+0x12c>)
 8024fd6:	22bc      	movs	r2, #188	; 0xbc
 8024fd8:	492a      	ldr	r1, [pc, #168]	; (8025084 <ip_reass_free_complete_datagram+0x13c>)
 8024fda:	4828      	ldr	r0, [pc, #160]	; (802507c <ip_reass_free_complete_datagram+0x134>)
 8024fdc:	f000 fff0 	bl	8025fc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8024fe0:	8bfa      	ldrh	r2, [r7, #30]
 8024fe2:	8a7b      	ldrh	r3, [r7, #18]
 8024fe4:	4413      	add	r3, r2
 8024fe6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8024fe8:	69b8      	ldr	r0, [r7, #24]
 8024fea:	f7fd fab1 	bl	8022550 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8024fee:	687b      	ldr	r3, [r7, #4]
 8024ff0:	685b      	ldr	r3, [r3, #4]
 8024ff2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8024ff4:	e01f      	b.n	8025036 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8024ff6:	69bb      	ldr	r3, [r7, #24]
 8024ff8:	685b      	ldr	r3, [r3, #4]
 8024ffa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8024ffc:	69bb      	ldr	r3, [r7, #24]
 8024ffe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8025000:	697b      	ldr	r3, [r7, #20]
 8025002:	681b      	ldr	r3, [r3, #0]
 8025004:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8025006:	68f8      	ldr	r0, [r7, #12]
 8025008:	f7fd fb2a 	bl	8022660 <pbuf_clen>
 802500c:	4603      	mov	r3, r0
 802500e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8025010:	8bfa      	ldrh	r2, [r7, #30]
 8025012:	8a7b      	ldrh	r3, [r7, #18]
 8025014:	4413      	add	r3, r2
 8025016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802501a:	db05      	blt.n	8025028 <ip_reass_free_complete_datagram+0xe0>
 802501c:	4b15      	ldr	r3, [pc, #84]	; (8025074 <ip_reass_free_complete_datagram+0x12c>)
 802501e:	22cc      	movs	r2, #204	; 0xcc
 8025020:	4918      	ldr	r1, [pc, #96]	; (8025084 <ip_reass_free_complete_datagram+0x13c>)
 8025022:	4816      	ldr	r0, [pc, #88]	; (802507c <ip_reass_free_complete_datagram+0x134>)
 8025024:	f000 ffcc 	bl	8025fc0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8025028:	8bfa      	ldrh	r2, [r7, #30]
 802502a:	8a7b      	ldrh	r3, [r7, #18]
 802502c:	4413      	add	r3, r2
 802502e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8025030:	68f8      	ldr	r0, [r7, #12]
 8025032:	f7fd fa8d 	bl	8022550 <pbuf_free>
  while (p != NULL) {
 8025036:	69bb      	ldr	r3, [r7, #24]
 8025038:	2b00      	cmp	r3, #0
 802503a:	d1dc      	bne.n	8024ff6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 802503c:	6839      	ldr	r1, [r7, #0]
 802503e:	6878      	ldr	r0, [r7, #4]
 8025040:	f000 f8c2 	bl	80251c8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8025044:	4b10      	ldr	r3, [pc, #64]	; (8025088 <ip_reass_free_complete_datagram+0x140>)
 8025046:	881b      	ldrh	r3, [r3, #0]
 8025048:	8bfa      	ldrh	r2, [r7, #30]
 802504a:	429a      	cmp	r2, r3
 802504c:	d905      	bls.n	802505a <ip_reass_free_complete_datagram+0x112>
 802504e:	4b09      	ldr	r3, [pc, #36]	; (8025074 <ip_reass_free_complete_datagram+0x12c>)
 8025050:	22d2      	movs	r2, #210	; 0xd2
 8025052:	490e      	ldr	r1, [pc, #56]	; (802508c <ip_reass_free_complete_datagram+0x144>)
 8025054:	4809      	ldr	r0, [pc, #36]	; (802507c <ip_reass_free_complete_datagram+0x134>)
 8025056:	f000 ffb3 	bl	8025fc0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 802505a:	4b0b      	ldr	r3, [pc, #44]	; (8025088 <ip_reass_free_complete_datagram+0x140>)
 802505c:	881a      	ldrh	r2, [r3, #0]
 802505e:	8bfb      	ldrh	r3, [r7, #30]
 8025060:	1ad3      	subs	r3, r2, r3
 8025062:	b29a      	uxth	r2, r3
 8025064:	4b08      	ldr	r3, [pc, #32]	; (8025088 <ip_reass_free_complete_datagram+0x140>)
 8025066:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8025068:	8bfb      	ldrh	r3, [r7, #30]
}
 802506a:	4618      	mov	r0, r3
 802506c:	3720      	adds	r7, #32
 802506e:	46bd      	mov	sp, r7
 8025070:	bd80      	pop	{r7, pc}
 8025072:	bf00      	nop
 8025074:	0802ca7c 	.word	0x0802ca7c
 8025078:	0802cab8 	.word	0x0802cab8
 802507c:	0802cac4 	.word	0x0802cac4
 8025080:	0802caec 	.word	0x0802caec
 8025084:	0802cb00 	.word	0x0802cb00
 8025088:	2001626c 	.word	0x2001626c
 802508c:	0802cb20 	.word	0x0802cb20

08025090 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8025090:	b580      	push	{r7, lr}
 8025092:	b08a      	sub	sp, #40	; 0x28
 8025094:	af00      	add	r7, sp, #0
 8025096:	6078      	str	r0, [r7, #4]
 8025098:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 802509a:	2300      	movs	r3, #0
 802509c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802509e:	2300      	movs	r3, #0
 80250a0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80250a2:	2300      	movs	r3, #0
 80250a4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80250a6:	2300      	movs	r3, #0
 80250a8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80250aa:	2300      	movs	r3, #0
 80250ac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80250ae:	4b28      	ldr	r3, [pc, #160]	; (8025150 <ip_reass_remove_oldest_datagram+0xc0>)
 80250b0:	681b      	ldr	r3, [r3, #0]
 80250b2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80250b4:	e030      	b.n	8025118 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80250b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250b8:	695a      	ldr	r2, [r3, #20]
 80250ba:	687b      	ldr	r3, [r7, #4]
 80250bc:	68db      	ldr	r3, [r3, #12]
 80250be:	429a      	cmp	r2, r3
 80250c0:	d10c      	bne.n	80250dc <ip_reass_remove_oldest_datagram+0x4c>
 80250c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250c4:	699a      	ldr	r2, [r3, #24]
 80250c6:	687b      	ldr	r3, [r7, #4]
 80250c8:	691b      	ldr	r3, [r3, #16]
 80250ca:	429a      	cmp	r2, r3
 80250cc:	d106      	bne.n	80250dc <ip_reass_remove_oldest_datagram+0x4c>
 80250ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250d0:	899a      	ldrh	r2, [r3, #12]
 80250d2:	687b      	ldr	r3, [r7, #4]
 80250d4:	889b      	ldrh	r3, [r3, #4]
 80250d6:	b29b      	uxth	r3, r3
 80250d8:	429a      	cmp	r2, r3
 80250da:	d014      	beq.n	8025106 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80250dc:	693b      	ldr	r3, [r7, #16]
 80250de:	3301      	adds	r3, #1
 80250e0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80250e2:	6a3b      	ldr	r3, [r7, #32]
 80250e4:	2b00      	cmp	r3, #0
 80250e6:	d104      	bne.n	80250f2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80250e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250ea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80250ec:	69fb      	ldr	r3, [r7, #28]
 80250ee:	61bb      	str	r3, [r7, #24]
 80250f0:	e009      	b.n	8025106 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80250f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80250f4:	7fda      	ldrb	r2, [r3, #31]
 80250f6:	6a3b      	ldr	r3, [r7, #32]
 80250f8:	7fdb      	ldrb	r3, [r3, #31]
 80250fa:	429a      	cmp	r2, r3
 80250fc:	d803      	bhi.n	8025106 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80250fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025100:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8025102:	69fb      	ldr	r3, [r7, #28]
 8025104:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8025106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025108:	681b      	ldr	r3, [r3, #0]
 802510a:	2b00      	cmp	r3, #0
 802510c:	d001      	beq.n	8025112 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 802510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025110:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8025112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025114:	681b      	ldr	r3, [r3, #0]
 8025116:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8025118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802511a:	2b00      	cmp	r3, #0
 802511c:	d1cb      	bne.n	80250b6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802511e:	6a3b      	ldr	r3, [r7, #32]
 8025120:	2b00      	cmp	r3, #0
 8025122:	d008      	beq.n	8025136 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8025124:	69b9      	ldr	r1, [r7, #24]
 8025126:	6a38      	ldr	r0, [r7, #32]
 8025128:	f7ff ff0e 	bl	8024f48 <ip_reass_free_complete_datagram>
 802512c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802512e:	697a      	ldr	r2, [r7, #20]
 8025130:	68fb      	ldr	r3, [r7, #12]
 8025132:	4413      	add	r3, r2
 8025134:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8025136:	697a      	ldr	r2, [r7, #20]
 8025138:	683b      	ldr	r3, [r7, #0]
 802513a:	429a      	cmp	r2, r3
 802513c:	da02      	bge.n	8025144 <ip_reass_remove_oldest_datagram+0xb4>
 802513e:	693b      	ldr	r3, [r7, #16]
 8025140:	2b01      	cmp	r3, #1
 8025142:	dcac      	bgt.n	802509e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8025144:	697b      	ldr	r3, [r7, #20]
}
 8025146:	4618      	mov	r0, r3
 8025148:	3728      	adds	r7, #40	; 0x28
 802514a:	46bd      	mov	sp, r7
 802514c:	bd80      	pop	{r7, pc}
 802514e:	bf00      	nop
 8025150:	20016268 	.word	0x20016268

08025154 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8025154:	b580      	push	{r7, lr}
 8025156:	b084      	sub	sp, #16
 8025158:	af00      	add	r7, sp, #0
 802515a:	6078      	str	r0, [r7, #4]
 802515c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802515e:	2001      	movs	r0, #1
 8025160:	f7fc fa76 	bl	8021650 <memp_malloc>
 8025164:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8025166:	68fb      	ldr	r3, [r7, #12]
 8025168:	2b00      	cmp	r3, #0
 802516a:	d110      	bne.n	802518e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802516c:	6839      	ldr	r1, [r7, #0]
 802516e:	6878      	ldr	r0, [r7, #4]
 8025170:	f7ff ff8e 	bl	8025090 <ip_reass_remove_oldest_datagram>
 8025174:	4602      	mov	r2, r0
 8025176:	683b      	ldr	r3, [r7, #0]
 8025178:	4293      	cmp	r3, r2
 802517a:	dc03      	bgt.n	8025184 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802517c:	2001      	movs	r0, #1
 802517e:	f7fc fa67 	bl	8021650 <memp_malloc>
 8025182:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8025184:	68fb      	ldr	r3, [r7, #12]
 8025186:	2b00      	cmp	r3, #0
 8025188:	d101      	bne.n	802518e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 802518a:	2300      	movs	r3, #0
 802518c:	e016      	b.n	80251bc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802518e:	2220      	movs	r2, #32
 8025190:	2100      	movs	r1, #0
 8025192:	68f8      	ldr	r0, [r7, #12]
 8025194:	f000 fe2c 	bl	8025df0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8025198:	68fb      	ldr	r3, [r7, #12]
 802519a:	220f      	movs	r2, #15
 802519c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802519e:	4b09      	ldr	r3, [pc, #36]	; (80251c4 <ip_reass_enqueue_new_datagram+0x70>)
 80251a0:	681a      	ldr	r2, [r3, #0]
 80251a2:	68fb      	ldr	r3, [r7, #12]
 80251a4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80251a6:	4a07      	ldr	r2, [pc, #28]	; (80251c4 <ip_reass_enqueue_new_datagram+0x70>)
 80251a8:	68fb      	ldr	r3, [r7, #12]
 80251aa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80251ac:	68fb      	ldr	r3, [r7, #12]
 80251ae:	3308      	adds	r3, #8
 80251b0:	2214      	movs	r2, #20
 80251b2:	6879      	ldr	r1, [r7, #4]
 80251b4:	4618      	mov	r0, r3
 80251b6:	f000 fdf3 	bl	8025da0 <memcpy>
  return ipr;
 80251ba:	68fb      	ldr	r3, [r7, #12]
}
 80251bc:	4618      	mov	r0, r3
 80251be:	3710      	adds	r7, #16
 80251c0:	46bd      	mov	sp, r7
 80251c2:	bd80      	pop	{r7, pc}
 80251c4:	20016268 	.word	0x20016268

080251c8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80251c8:	b580      	push	{r7, lr}
 80251ca:	b082      	sub	sp, #8
 80251cc:	af00      	add	r7, sp, #0
 80251ce:	6078      	str	r0, [r7, #4]
 80251d0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80251d2:	4b10      	ldr	r3, [pc, #64]	; (8025214 <ip_reass_dequeue_datagram+0x4c>)
 80251d4:	681b      	ldr	r3, [r3, #0]
 80251d6:	687a      	ldr	r2, [r7, #4]
 80251d8:	429a      	cmp	r2, r3
 80251da:	d104      	bne.n	80251e6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80251dc:	687b      	ldr	r3, [r7, #4]
 80251de:	681b      	ldr	r3, [r3, #0]
 80251e0:	4a0c      	ldr	r2, [pc, #48]	; (8025214 <ip_reass_dequeue_datagram+0x4c>)
 80251e2:	6013      	str	r3, [r2, #0]
 80251e4:	e00d      	b.n	8025202 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80251e6:	683b      	ldr	r3, [r7, #0]
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	d106      	bne.n	80251fa <ip_reass_dequeue_datagram+0x32>
 80251ec:	4b0a      	ldr	r3, [pc, #40]	; (8025218 <ip_reass_dequeue_datagram+0x50>)
 80251ee:	f240 1245 	movw	r2, #325	; 0x145
 80251f2:	490a      	ldr	r1, [pc, #40]	; (802521c <ip_reass_dequeue_datagram+0x54>)
 80251f4:	480a      	ldr	r0, [pc, #40]	; (8025220 <ip_reass_dequeue_datagram+0x58>)
 80251f6:	f000 fee3 	bl	8025fc0 <iprintf>
    prev->next = ipr->next;
 80251fa:	687b      	ldr	r3, [r7, #4]
 80251fc:	681a      	ldr	r2, [r3, #0]
 80251fe:	683b      	ldr	r3, [r7, #0]
 8025200:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8025202:	6879      	ldr	r1, [r7, #4]
 8025204:	2001      	movs	r0, #1
 8025206:	f7fc fa93 	bl	8021730 <memp_free>
}
 802520a:	bf00      	nop
 802520c:	3708      	adds	r7, #8
 802520e:	46bd      	mov	sp, r7
 8025210:	bd80      	pop	{r7, pc}
 8025212:	bf00      	nop
 8025214:	20016268 	.word	0x20016268
 8025218:	0802ca7c 	.word	0x0802ca7c
 802521c:	0802cb44 	.word	0x0802cb44
 8025220:	0802cac4 	.word	0x0802cac4

08025224 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8025224:	b580      	push	{r7, lr}
 8025226:	b08c      	sub	sp, #48	; 0x30
 8025228:	af00      	add	r7, sp, #0
 802522a:	60f8      	str	r0, [r7, #12]
 802522c:	60b9      	str	r1, [r7, #8]
 802522e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8025230:	2300      	movs	r3, #0
 8025232:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8025234:	2301      	movs	r3, #1
 8025236:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8025238:	68bb      	ldr	r3, [r7, #8]
 802523a:	685b      	ldr	r3, [r3, #4]
 802523c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802523e:	69fb      	ldr	r3, [r7, #28]
 8025240:	885b      	ldrh	r3, [r3, #2]
 8025242:	b29b      	uxth	r3, r3
 8025244:	4618      	mov	r0, r3
 8025246:	f7fb fda7 	bl	8020d98 <lwip_htons>
 802524a:	4603      	mov	r3, r0
 802524c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802524e:	69fb      	ldr	r3, [r7, #28]
 8025250:	781b      	ldrb	r3, [r3, #0]
 8025252:	f003 030f 	and.w	r3, r3, #15
 8025256:	b2db      	uxtb	r3, r3
 8025258:	009b      	lsls	r3, r3, #2
 802525a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 802525c:	7e7b      	ldrb	r3, [r7, #25]
 802525e:	b29b      	uxth	r3, r3
 8025260:	8b7a      	ldrh	r2, [r7, #26]
 8025262:	429a      	cmp	r2, r3
 8025264:	d202      	bcs.n	802526c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025266:	f04f 33ff 	mov.w	r3, #4294967295
 802526a:	e135      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 802526c:	7e7b      	ldrb	r3, [r7, #25]
 802526e:	b29b      	uxth	r3, r3
 8025270:	8b7a      	ldrh	r2, [r7, #26]
 8025272:	1ad3      	subs	r3, r2, r3
 8025274:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8025276:	69fb      	ldr	r3, [r7, #28]
 8025278:	88db      	ldrh	r3, [r3, #6]
 802527a:	b29b      	uxth	r3, r3
 802527c:	4618      	mov	r0, r3
 802527e:	f7fb fd8b 	bl	8020d98 <lwip_htons>
 8025282:	4603      	mov	r3, r0
 8025284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025288:	b29b      	uxth	r3, r3
 802528a:	00db      	lsls	r3, r3, #3
 802528c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802528e:	68bb      	ldr	r3, [r7, #8]
 8025290:	685b      	ldr	r3, [r3, #4]
 8025292:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8025294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025296:	2200      	movs	r2, #0
 8025298:	701a      	strb	r2, [r3, #0]
 802529a:	2200      	movs	r2, #0
 802529c:	705a      	strb	r2, [r3, #1]
 802529e:	2200      	movs	r2, #0
 80252a0:	709a      	strb	r2, [r3, #2]
 80252a2:	2200      	movs	r2, #0
 80252a4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80252a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252a8:	8afa      	ldrh	r2, [r7, #22]
 80252aa:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80252ac:	8afa      	ldrh	r2, [r7, #22]
 80252ae:	8b7b      	ldrh	r3, [r7, #26]
 80252b0:	4413      	add	r3, r2
 80252b2:	b29a      	uxth	r2, r3
 80252b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252b6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80252b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ba:	88db      	ldrh	r3, [r3, #6]
 80252bc:	b29b      	uxth	r3, r3
 80252be:	8afa      	ldrh	r2, [r7, #22]
 80252c0:	429a      	cmp	r2, r3
 80252c2:	d902      	bls.n	80252ca <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80252c4:	f04f 33ff 	mov.w	r3, #4294967295
 80252c8:	e106      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80252ca:	68fb      	ldr	r3, [r7, #12]
 80252cc:	685b      	ldr	r3, [r3, #4]
 80252ce:	627b      	str	r3, [r7, #36]	; 0x24
 80252d0:	e068      	b.n	80253a4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80252d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80252d4:	685b      	ldr	r3, [r3, #4]
 80252d6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80252d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252da:	889b      	ldrh	r3, [r3, #4]
 80252dc:	b29a      	uxth	r2, r3
 80252de:	693b      	ldr	r3, [r7, #16]
 80252e0:	889b      	ldrh	r3, [r3, #4]
 80252e2:	b29b      	uxth	r3, r3
 80252e4:	429a      	cmp	r2, r3
 80252e6:	d235      	bcs.n	8025354 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80252e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80252ec:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80252ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80252f0:	2b00      	cmp	r3, #0
 80252f2:	d020      	beq.n	8025336 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80252f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80252f6:	889b      	ldrh	r3, [r3, #4]
 80252f8:	b29a      	uxth	r2, r3
 80252fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80252fc:	88db      	ldrh	r3, [r3, #6]
 80252fe:	b29b      	uxth	r3, r3
 8025300:	429a      	cmp	r2, r3
 8025302:	d307      	bcc.n	8025314 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8025304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025306:	88db      	ldrh	r3, [r3, #6]
 8025308:	b29a      	uxth	r2, r3
 802530a:	693b      	ldr	r3, [r7, #16]
 802530c:	889b      	ldrh	r3, [r3, #4]
 802530e:	b29b      	uxth	r3, r3
 8025310:	429a      	cmp	r2, r3
 8025312:	d902      	bls.n	802531a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025314:	f04f 33ff 	mov.w	r3, #4294967295
 8025318:	e0de      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 802531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802531c:	68ba      	ldr	r2, [r7, #8]
 802531e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8025320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025322:	88db      	ldrh	r3, [r3, #6]
 8025324:	b29a      	uxth	r2, r3
 8025326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025328:	889b      	ldrh	r3, [r3, #4]
 802532a:	b29b      	uxth	r3, r3
 802532c:	429a      	cmp	r2, r3
 802532e:	d03d      	beq.n	80253ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025330:	2300      	movs	r3, #0
 8025332:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8025334:	e03a      	b.n	80253ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8025336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025338:	88db      	ldrh	r3, [r3, #6]
 802533a:	b29a      	uxth	r2, r3
 802533c:	693b      	ldr	r3, [r7, #16]
 802533e:	889b      	ldrh	r3, [r3, #4]
 8025340:	b29b      	uxth	r3, r3
 8025342:	429a      	cmp	r2, r3
 8025344:	d902      	bls.n	802534c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025346:	f04f 33ff 	mov.w	r3, #4294967295
 802534a:	e0c5      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 802534c:	68fb      	ldr	r3, [r7, #12]
 802534e:	68ba      	ldr	r2, [r7, #8]
 8025350:	605a      	str	r2, [r3, #4]
      break;
 8025352:	e02b      	b.n	80253ac <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8025354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025356:	889b      	ldrh	r3, [r3, #4]
 8025358:	b29a      	uxth	r2, r3
 802535a:	693b      	ldr	r3, [r7, #16]
 802535c:	889b      	ldrh	r3, [r3, #4]
 802535e:	b29b      	uxth	r3, r3
 8025360:	429a      	cmp	r2, r3
 8025362:	d102      	bne.n	802536a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8025364:	f04f 33ff 	mov.w	r3, #4294967295
 8025368:	e0b6      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 802536a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802536c:	889b      	ldrh	r3, [r3, #4]
 802536e:	b29a      	uxth	r2, r3
 8025370:	693b      	ldr	r3, [r7, #16]
 8025372:	88db      	ldrh	r3, [r3, #6]
 8025374:	b29b      	uxth	r3, r3
 8025376:	429a      	cmp	r2, r3
 8025378:	d202      	bcs.n	8025380 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802537a:	f04f 33ff 	mov.w	r3, #4294967295
 802537e:	e0ab      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8025380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025382:	2b00      	cmp	r3, #0
 8025384:	d009      	beq.n	802539a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8025386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025388:	88db      	ldrh	r3, [r3, #6]
 802538a:	b29a      	uxth	r2, r3
 802538c:	693b      	ldr	r3, [r7, #16]
 802538e:	889b      	ldrh	r3, [r3, #4]
 8025390:	b29b      	uxth	r3, r3
 8025392:	429a      	cmp	r2, r3
 8025394:	d001      	beq.n	802539a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8025396:	2300      	movs	r3, #0
 8025398:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 802539a:	693b      	ldr	r3, [r7, #16]
 802539c:	681b      	ldr	r3, [r3, #0]
 802539e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80253a0:	693b      	ldr	r3, [r7, #16]
 80253a2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80253a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253a6:	2b00      	cmp	r3, #0
 80253a8:	d193      	bne.n	80252d2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80253aa:	e000      	b.n	80253ae <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80253ac:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80253ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80253b0:	2b00      	cmp	r3, #0
 80253b2:	d12d      	bne.n	8025410 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80253b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80253b6:	2b00      	cmp	r3, #0
 80253b8:	d01c      	beq.n	80253f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80253ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80253bc:	88db      	ldrh	r3, [r3, #6]
 80253be:	b29a      	uxth	r2, r3
 80253c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253c2:	889b      	ldrh	r3, [r3, #4]
 80253c4:	b29b      	uxth	r3, r3
 80253c6:	429a      	cmp	r2, r3
 80253c8:	d906      	bls.n	80253d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80253ca:	4b45      	ldr	r3, [pc, #276]	; (80254e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80253cc:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80253d0:	4944      	ldr	r1, [pc, #272]	; (80254e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80253d2:	4845      	ldr	r0, [pc, #276]	; (80254e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80253d4:	f000 fdf4 	bl	8025fc0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80253d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80253da:	68ba      	ldr	r2, [r7, #8]
 80253dc:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80253de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80253e0:	88db      	ldrh	r3, [r3, #6]
 80253e2:	b29a      	uxth	r2, r3
 80253e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80253e6:	889b      	ldrh	r3, [r3, #4]
 80253e8:	b29b      	uxth	r3, r3
 80253ea:	429a      	cmp	r2, r3
 80253ec:	d010      	beq.n	8025410 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80253ee:	2300      	movs	r3, #0
 80253f0:	623b      	str	r3, [r7, #32]
 80253f2:	e00d      	b.n	8025410 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80253f4:	68fb      	ldr	r3, [r7, #12]
 80253f6:	685b      	ldr	r3, [r3, #4]
 80253f8:	2b00      	cmp	r3, #0
 80253fa:	d006      	beq.n	802540a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80253fc:	4b38      	ldr	r3, [pc, #224]	; (80254e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80253fe:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8025402:	493a      	ldr	r1, [pc, #232]	; (80254ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8025404:	4838      	ldr	r0, [pc, #224]	; (80254e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025406:	f000 fddb 	bl	8025fc0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 802540a:	68fb      	ldr	r3, [r7, #12]
 802540c:	68ba      	ldr	r2, [r7, #8]
 802540e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8025410:	687b      	ldr	r3, [r7, #4]
 8025412:	2b00      	cmp	r3, #0
 8025414:	d105      	bne.n	8025422 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8025416:	68fb      	ldr	r3, [r7, #12]
 8025418:	7f9b      	ldrb	r3, [r3, #30]
 802541a:	f003 0301 	and.w	r3, r3, #1
 802541e:	2b00      	cmp	r3, #0
 8025420:	d059      	beq.n	80254d6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8025422:	6a3b      	ldr	r3, [r7, #32]
 8025424:	2b00      	cmp	r3, #0
 8025426:	d04f      	beq.n	80254c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8025428:	68fb      	ldr	r3, [r7, #12]
 802542a:	685b      	ldr	r3, [r3, #4]
 802542c:	2b00      	cmp	r3, #0
 802542e:	d006      	beq.n	802543e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8025430:	68fb      	ldr	r3, [r7, #12]
 8025432:	685b      	ldr	r3, [r3, #4]
 8025434:	685b      	ldr	r3, [r3, #4]
 8025436:	889b      	ldrh	r3, [r3, #4]
 8025438:	b29b      	uxth	r3, r3
 802543a:	2b00      	cmp	r3, #0
 802543c:	d002      	beq.n	8025444 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802543e:	2300      	movs	r3, #0
 8025440:	623b      	str	r3, [r7, #32]
 8025442:	e041      	b.n	80254c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8025444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025446:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8025448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802544a:	681b      	ldr	r3, [r3, #0]
 802544c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802544e:	e012      	b.n	8025476 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8025450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025452:	685b      	ldr	r3, [r3, #4]
 8025454:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8025456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025458:	88db      	ldrh	r3, [r3, #6]
 802545a:	b29a      	uxth	r2, r3
 802545c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802545e:	889b      	ldrh	r3, [r3, #4]
 8025460:	b29b      	uxth	r3, r3
 8025462:	429a      	cmp	r2, r3
 8025464:	d002      	beq.n	802546c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8025466:	2300      	movs	r3, #0
 8025468:	623b      	str	r3, [r7, #32]
            break;
 802546a:	e007      	b.n	802547c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 802546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802546e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8025470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025472:	681b      	ldr	r3, [r3, #0]
 8025474:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8025476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025478:	2b00      	cmp	r3, #0
 802547a:	d1e9      	bne.n	8025450 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 802547c:	6a3b      	ldr	r3, [r7, #32]
 802547e:	2b00      	cmp	r3, #0
 8025480:	d022      	beq.n	80254c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8025482:	68fb      	ldr	r3, [r7, #12]
 8025484:	685b      	ldr	r3, [r3, #4]
 8025486:	2b00      	cmp	r3, #0
 8025488:	d106      	bne.n	8025498 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 802548a:	4b15      	ldr	r3, [pc, #84]	; (80254e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802548c:	f240 12df 	movw	r2, #479	; 0x1df
 8025490:	4917      	ldr	r1, [pc, #92]	; (80254f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8025492:	4815      	ldr	r0, [pc, #84]	; (80254e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8025494:	f000 fd94 	bl	8025fc0 <iprintf>
          LWIP_ASSERT("sanity check",
 8025498:	68fb      	ldr	r3, [r7, #12]
 802549a:	685b      	ldr	r3, [r3, #4]
 802549c:	685b      	ldr	r3, [r3, #4]
 802549e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80254a0:	429a      	cmp	r2, r3
 80254a2:	d106      	bne.n	80254b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80254a4:	4b0e      	ldr	r3, [pc, #56]	; (80254e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80254a6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80254aa:	4911      	ldr	r1, [pc, #68]	; (80254f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80254ac:	480e      	ldr	r0, [pc, #56]	; (80254e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80254ae:	f000 fd87 	bl	8025fc0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80254b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80254b4:	681b      	ldr	r3, [r3, #0]
 80254b6:	2b00      	cmp	r3, #0
 80254b8:	d006      	beq.n	80254c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80254ba:	4b09      	ldr	r3, [pc, #36]	; (80254e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80254bc:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80254c0:	490c      	ldr	r1, [pc, #48]	; (80254f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80254c2:	4809      	ldr	r0, [pc, #36]	; (80254e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80254c4:	f000 fd7c 	bl	8025fc0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80254c8:	6a3b      	ldr	r3, [r7, #32]
 80254ca:	2b00      	cmp	r3, #0
 80254cc:	bf14      	ite	ne
 80254ce:	2301      	movne	r3, #1
 80254d0:	2300      	moveq	r3, #0
 80254d2:	b2db      	uxtb	r3, r3
 80254d4:	e000      	b.n	80254d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80254d6:	2300      	movs	r3, #0
}
 80254d8:	4618      	mov	r0, r3
 80254da:	3730      	adds	r7, #48	; 0x30
 80254dc:	46bd      	mov	sp, r7
 80254de:	bd80      	pop	{r7, pc}
 80254e0:	0802ca7c 	.word	0x0802ca7c
 80254e4:	0802cb60 	.word	0x0802cb60
 80254e8:	0802cac4 	.word	0x0802cac4
 80254ec:	0802cb80 	.word	0x0802cb80
 80254f0:	0802cbb8 	.word	0x0802cbb8
 80254f4:	0802cbc8 	.word	0x0802cbc8

080254f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80254f8:	b580      	push	{r7, lr}
 80254fa:	b08e      	sub	sp, #56	; 0x38
 80254fc:	af00      	add	r7, sp, #0
 80254fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8025500:	687b      	ldr	r3, [r7, #4]
 8025502:	685b      	ldr	r3, [r3, #4]
 8025504:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8025506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025508:	781b      	ldrb	r3, [r3, #0]
 802550a:	f003 030f 	and.w	r3, r3, #15
 802550e:	b2db      	uxtb	r3, r3
 8025510:	009b      	lsls	r3, r3, #2
 8025512:	b2db      	uxtb	r3, r3
 8025514:	2b14      	cmp	r3, #20
 8025516:	f040 8171 	bne.w	80257fc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 802551a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802551c:	88db      	ldrh	r3, [r3, #6]
 802551e:	b29b      	uxth	r3, r3
 8025520:	4618      	mov	r0, r3
 8025522:	f7fb fc39 	bl	8020d98 <lwip_htons>
 8025526:	4603      	mov	r3, r0
 8025528:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802552c:	b29b      	uxth	r3, r3
 802552e:	00db      	lsls	r3, r3, #3
 8025530:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8025532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025534:	885b      	ldrh	r3, [r3, #2]
 8025536:	b29b      	uxth	r3, r3
 8025538:	4618      	mov	r0, r3
 802553a:	f7fb fc2d 	bl	8020d98 <lwip_htons>
 802553e:	4603      	mov	r3, r0
 8025540:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8025542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025544:	781b      	ldrb	r3, [r3, #0]
 8025546:	f003 030f 	and.w	r3, r3, #15
 802554a:	b2db      	uxtb	r3, r3
 802554c:	009b      	lsls	r3, r3, #2
 802554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8025552:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025556:	b29b      	uxth	r3, r3
 8025558:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 802555a:	429a      	cmp	r2, r3
 802555c:	f0c0 8150 	bcc.w	8025800 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8025560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8025564:	b29b      	uxth	r3, r3
 8025566:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8025568:	1ad3      	subs	r3, r2, r3
 802556a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 802556c:	6878      	ldr	r0, [r7, #4]
 802556e:	f7fd f877 	bl	8022660 <pbuf_clen>
 8025572:	4603      	mov	r3, r0
 8025574:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8025576:	4b8c      	ldr	r3, [pc, #560]	; (80257a8 <ip4_reass+0x2b0>)
 8025578:	881b      	ldrh	r3, [r3, #0]
 802557a:	461a      	mov	r2, r3
 802557c:	8c3b      	ldrh	r3, [r7, #32]
 802557e:	4413      	add	r3, r2
 8025580:	2b0a      	cmp	r3, #10
 8025582:	dd10      	ble.n	80255a6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8025584:	8c3b      	ldrh	r3, [r7, #32]
 8025586:	4619      	mov	r1, r3
 8025588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 802558a:	f7ff fd81 	bl	8025090 <ip_reass_remove_oldest_datagram>
 802558e:	4603      	mov	r3, r0
 8025590:	2b00      	cmp	r3, #0
 8025592:	f000 8137 	beq.w	8025804 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8025596:	4b84      	ldr	r3, [pc, #528]	; (80257a8 <ip4_reass+0x2b0>)
 8025598:	881b      	ldrh	r3, [r3, #0]
 802559a:	461a      	mov	r2, r3
 802559c:	8c3b      	ldrh	r3, [r7, #32]
 802559e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80255a0:	2b0a      	cmp	r3, #10
 80255a2:	f300 812f 	bgt.w	8025804 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80255a6:	4b81      	ldr	r3, [pc, #516]	; (80257ac <ip4_reass+0x2b4>)
 80255a8:	681b      	ldr	r3, [r3, #0]
 80255aa:	633b      	str	r3, [r7, #48]	; 0x30
 80255ac:	e015      	b.n	80255da <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80255ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255b0:	695a      	ldr	r2, [r3, #20]
 80255b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255b4:	68db      	ldr	r3, [r3, #12]
 80255b6:	429a      	cmp	r2, r3
 80255b8:	d10c      	bne.n	80255d4 <ip4_reass+0xdc>
 80255ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255bc:	699a      	ldr	r2, [r3, #24]
 80255be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255c0:	691b      	ldr	r3, [r3, #16]
 80255c2:	429a      	cmp	r2, r3
 80255c4:	d106      	bne.n	80255d4 <ip4_reass+0xdc>
 80255c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255c8:	899a      	ldrh	r2, [r3, #12]
 80255ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80255cc:	889b      	ldrh	r3, [r3, #4]
 80255ce:	b29b      	uxth	r3, r3
 80255d0:	429a      	cmp	r2, r3
 80255d2:	d006      	beq.n	80255e2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80255d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255d6:	681b      	ldr	r3, [r3, #0]
 80255d8:	633b      	str	r3, [r7, #48]	; 0x30
 80255da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255dc:	2b00      	cmp	r3, #0
 80255de:	d1e6      	bne.n	80255ae <ip4_reass+0xb6>
 80255e0:	e000      	b.n	80255e4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80255e2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80255e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255e6:	2b00      	cmp	r3, #0
 80255e8:	d109      	bne.n	80255fe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80255ea:	8c3b      	ldrh	r3, [r7, #32]
 80255ec:	4619      	mov	r1, r3
 80255ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80255f0:	f7ff fdb0 	bl	8025154 <ip_reass_enqueue_new_datagram>
 80255f4:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80255f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80255f8:	2b00      	cmp	r3, #0
 80255fa:	d11c      	bne.n	8025636 <ip4_reass+0x13e>
      goto nullreturn;
 80255fc:	e105      	b.n	802580a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80255fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025600:	88db      	ldrh	r3, [r3, #6]
 8025602:	b29b      	uxth	r3, r3
 8025604:	4618      	mov	r0, r3
 8025606:	f7fb fbc7 	bl	8020d98 <lwip_htons>
 802560a:	4603      	mov	r3, r0
 802560c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025610:	2b00      	cmp	r3, #0
 8025612:	d110      	bne.n	8025636 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8025614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025616:	89db      	ldrh	r3, [r3, #14]
 8025618:	4618      	mov	r0, r3
 802561a:	f7fb fbbd 	bl	8020d98 <lwip_htons>
 802561e:	4603      	mov	r3, r0
 8025620:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8025624:	2b00      	cmp	r3, #0
 8025626:	d006      	beq.n	8025636 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8025628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802562a:	3308      	adds	r3, #8
 802562c:	2214      	movs	r2, #20
 802562e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8025630:	4618      	mov	r0, r3
 8025632:	f000 fbb5 	bl	8025da0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8025636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025638:	88db      	ldrh	r3, [r3, #6]
 802563a:	b29b      	uxth	r3, r3
 802563c:	f003 0320 	and.w	r3, r3, #32
 8025640:	2b00      	cmp	r3, #0
 8025642:	bf0c      	ite	eq
 8025644:	2301      	moveq	r3, #1
 8025646:	2300      	movne	r3, #0
 8025648:	b2db      	uxtb	r3, r3
 802564a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 802564c:	69fb      	ldr	r3, [r7, #28]
 802564e:	2b00      	cmp	r3, #0
 8025650:	d00e      	beq.n	8025670 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8025652:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8025654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8025656:	4413      	add	r3, r2
 8025658:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 802565a:	8b7a      	ldrh	r2, [r7, #26]
 802565c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802565e:	429a      	cmp	r2, r3
 8025660:	f0c0 80a0 	bcc.w	80257a4 <ip4_reass+0x2ac>
 8025664:	8b7b      	ldrh	r3, [r7, #26]
 8025666:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802566a:	4293      	cmp	r3, r2
 802566c:	f200 809a 	bhi.w	80257a4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8025670:	69fa      	ldr	r2, [r7, #28]
 8025672:	6879      	ldr	r1, [r7, #4]
 8025674:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025676:	f7ff fdd5 	bl	8025224 <ip_reass_chain_frag_into_datagram_and_validate>
 802567a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 802567c:	697b      	ldr	r3, [r7, #20]
 802567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8025682:	f000 809b 	beq.w	80257bc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8025686:	4b48      	ldr	r3, [pc, #288]	; (80257a8 <ip4_reass+0x2b0>)
 8025688:	881a      	ldrh	r2, [r3, #0]
 802568a:	8c3b      	ldrh	r3, [r7, #32]
 802568c:	4413      	add	r3, r2
 802568e:	b29a      	uxth	r2, r3
 8025690:	4b45      	ldr	r3, [pc, #276]	; (80257a8 <ip4_reass+0x2b0>)
 8025692:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8025694:	69fb      	ldr	r3, [r7, #28]
 8025696:	2b00      	cmp	r3, #0
 8025698:	d00d      	beq.n	80256b6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 802569a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802569c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802569e:	4413      	add	r3, r2
 80256a0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80256a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256a4:	8a7a      	ldrh	r2, [r7, #18]
 80256a6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80256a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256aa:	7f9b      	ldrb	r3, [r3, #30]
 80256ac:	f043 0301 	orr.w	r3, r3, #1
 80256b0:	b2da      	uxtb	r2, r3
 80256b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256b4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80256b6:	697b      	ldr	r3, [r7, #20]
 80256b8:	2b01      	cmp	r3, #1
 80256ba:	d171      	bne.n	80257a0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80256bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256be:	8b9b      	ldrh	r3, [r3, #28]
 80256c0:	3314      	adds	r3, #20
 80256c2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80256c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256c6:	685b      	ldr	r3, [r3, #4]
 80256c8:	685b      	ldr	r3, [r3, #4]
 80256ca:	681b      	ldr	r3, [r3, #0]
 80256cc:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80256ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256d0:	685b      	ldr	r3, [r3, #4]
 80256d2:	685b      	ldr	r3, [r3, #4]
 80256d4:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80256d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80256d8:	3308      	adds	r3, #8
 80256da:	2214      	movs	r2, #20
 80256dc:	4619      	mov	r1, r3
 80256de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80256e0:	f000 fb5e 	bl	8025da0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80256e4:	8a3b      	ldrh	r3, [r7, #16]
 80256e6:	4618      	mov	r0, r3
 80256e8:	f7fb fb56 	bl	8020d98 <lwip_htons>
 80256ec:	4603      	mov	r3, r0
 80256ee:	461a      	mov	r2, r3
 80256f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80256f2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80256f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80256f6:	2200      	movs	r2, #0
 80256f8:	719a      	strb	r2, [r3, #6]
 80256fa:	2200      	movs	r2, #0
 80256fc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80256fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8025700:	2200      	movs	r2, #0
 8025702:	729a      	strb	r2, [r3, #10]
 8025704:	2200      	movs	r2, #0
 8025706:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8025708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802570a:	685b      	ldr	r3, [r3, #4]
 802570c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 802570e:	e00d      	b.n	802572c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8025710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8025712:	685b      	ldr	r3, [r3, #4]
 8025714:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8025716:	2114      	movs	r1, #20
 8025718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 802571a:	f7fc fe93 	bl	8022444 <pbuf_remove_header>
      pbuf_cat(p, r);
 802571e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8025720:	6878      	ldr	r0, [r7, #4]
 8025722:	f7fc ffd7 	bl	80226d4 <pbuf_cat>
      r = iprh->next_pbuf;
 8025726:	68fb      	ldr	r3, [r7, #12]
 8025728:	681b      	ldr	r3, [r3, #0]
 802572a:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 802572c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802572e:	2b00      	cmp	r3, #0
 8025730:	d1ee      	bne.n	8025710 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8025732:	4b1e      	ldr	r3, [pc, #120]	; (80257ac <ip4_reass+0x2b4>)
 8025734:	681b      	ldr	r3, [r3, #0]
 8025736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025738:	429a      	cmp	r2, r3
 802573a:	d102      	bne.n	8025742 <ip4_reass+0x24a>
      ipr_prev = NULL;
 802573c:	2300      	movs	r3, #0
 802573e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025740:	e010      	b.n	8025764 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025742:	4b1a      	ldr	r3, [pc, #104]	; (80257ac <ip4_reass+0x2b4>)
 8025744:	681b      	ldr	r3, [r3, #0]
 8025746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8025748:	e007      	b.n	802575a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 802574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802574c:	681b      	ldr	r3, [r3, #0]
 802574e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8025750:	429a      	cmp	r2, r3
 8025752:	d006      	beq.n	8025762 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8025754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025756:	681b      	ldr	r3, [r3, #0]
 8025758:	62fb      	str	r3, [r7, #44]	; 0x2c
 802575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802575c:	2b00      	cmp	r3, #0
 802575e:	d1f4      	bne.n	802574a <ip4_reass+0x252>
 8025760:	e000      	b.n	8025764 <ip4_reass+0x26c>
          break;
 8025762:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8025764:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8025766:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8025768:	f7ff fd2e 	bl	80251c8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 802576c:	6878      	ldr	r0, [r7, #4]
 802576e:	f7fc ff77 	bl	8022660 <pbuf_clen>
 8025772:	4603      	mov	r3, r0
 8025774:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8025776:	4b0c      	ldr	r3, [pc, #48]	; (80257a8 <ip4_reass+0x2b0>)
 8025778:	881b      	ldrh	r3, [r3, #0]
 802577a:	8c3a      	ldrh	r2, [r7, #32]
 802577c:	429a      	cmp	r2, r3
 802577e:	d906      	bls.n	802578e <ip4_reass+0x296>
 8025780:	4b0b      	ldr	r3, [pc, #44]	; (80257b0 <ip4_reass+0x2b8>)
 8025782:	f240 229b 	movw	r2, #667	; 0x29b
 8025786:	490b      	ldr	r1, [pc, #44]	; (80257b4 <ip4_reass+0x2bc>)
 8025788:	480b      	ldr	r0, [pc, #44]	; (80257b8 <ip4_reass+0x2c0>)
 802578a:	f000 fc19 	bl	8025fc0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802578e:	4b06      	ldr	r3, [pc, #24]	; (80257a8 <ip4_reass+0x2b0>)
 8025790:	881a      	ldrh	r2, [r3, #0]
 8025792:	8c3b      	ldrh	r3, [r7, #32]
 8025794:	1ad3      	subs	r3, r2, r3
 8025796:	b29a      	uxth	r2, r3
 8025798:	4b03      	ldr	r3, [pc, #12]	; (80257a8 <ip4_reass+0x2b0>)
 802579a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 802579c:	687b      	ldr	r3, [r7, #4]
 802579e:	e038      	b.n	8025812 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80257a0:	2300      	movs	r3, #0
 80257a2:	e036      	b.n	8025812 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80257a4:	bf00      	nop
 80257a6:	e00a      	b.n	80257be <ip4_reass+0x2c6>
 80257a8:	2001626c 	.word	0x2001626c
 80257ac:	20016268 	.word	0x20016268
 80257b0:	0802ca7c 	.word	0x0802ca7c
 80257b4:	0802cbec 	.word	0x0802cbec
 80257b8:	0802cac4 	.word	0x0802cac4
    goto nullreturn_ipr;
 80257bc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80257be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257c0:	2b00      	cmp	r3, #0
 80257c2:	d106      	bne.n	80257d2 <ip4_reass+0x2da>
 80257c4:	4b15      	ldr	r3, [pc, #84]	; (802581c <ip4_reass+0x324>)
 80257c6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80257ca:	4915      	ldr	r1, [pc, #84]	; (8025820 <ip4_reass+0x328>)
 80257cc:	4815      	ldr	r0, [pc, #84]	; (8025824 <ip4_reass+0x32c>)
 80257ce:	f000 fbf7 	bl	8025fc0 <iprintf>
  if (ipr->p == NULL) {
 80257d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80257d4:	685b      	ldr	r3, [r3, #4]
 80257d6:	2b00      	cmp	r3, #0
 80257d8:	d116      	bne.n	8025808 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80257da:	4b13      	ldr	r3, [pc, #76]	; (8025828 <ip4_reass+0x330>)
 80257dc:	681b      	ldr	r3, [r3, #0]
 80257de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80257e0:	429a      	cmp	r2, r3
 80257e2:	d006      	beq.n	80257f2 <ip4_reass+0x2fa>
 80257e4:	4b0d      	ldr	r3, [pc, #52]	; (802581c <ip4_reass+0x324>)
 80257e6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80257ea:	4910      	ldr	r1, [pc, #64]	; (802582c <ip4_reass+0x334>)
 80257ec:	480d      	ldr	r0, [pc, #52]	; (8025824 <ip4_reass+0x32c>)
 80257ee:	f000 fbe7 	bl	8025fc0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80257f2:	2100      	movs	r1, #0
 80257f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80257f6:	f7ff fce7 	bl	80251c8 <ip_reass_dequeue_datagram>
 80257fa:	e006      	b.n	802580a <ip4_reass+0x312>
    goto nullreturn;
 80257fc:	bf00      	nop
 80257fe:	e004      	b.n	802580a <ip4_reass+0x312>
    goto nullreturn;
 8025800:	bf00      	nop
 8025802:	e002      	b.n	802580a <ip4_reass+0x312>
      goto nullreturn;
 8025804:	bf00      	nop
 8025806:	e000      	b.n	802580a <ip4_reass+0x312>
  }

nullreturn:
 8025808:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 802580a:	6878      	ldr	r0, [r7, #4]
 802580c:	f7fc fea0 	bl	8022550 <pbuf_free>
  return NULL;
 8025810:	2300      	movs	r3, #0
}
 8025812:	4618      	mov	r0, r3
 8025814:	3738      	adds	r7, #56	; 0x38
 8025816:	46bd      	mov	sp, r7
 8025818:	bd80      	pop	{r7, pc}
 802581a:	bf00      	nop
 802581c:	0802ca7c 	.word	0x0802ca7c
 8025820:	0802cc08 	.word	0x0802cc08
 8025824:	0802cac4 	.word	0x0802cac4
 8025828:	20016268 	.word	0x20016268
 802582c:	0802cc14 	.word	0x0802cc14

08025830 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8025830:	b580      	push	{r7, lr}
 8025832:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8025834:	2002      	movs	r0, #2
 8025836:	f7fb ff0b 	bl	8021650 <memp_malloc>
 802583a:	4603      	mov	r3, r0
}
 802583c:	4618      	mov	r0, r3
 802583e:	bd80      	pop	{r7, pc}

08025840 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8025840:	b580      	push	{r7, lr}
 8025842:	b082      	sub	sp, #8
 8025844:	af00      	add	r7, sp, #0
 8025846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8025848:	687b      	ldr	r3, [r7, #4]
 802584a:	2b00      	cmp	r3, #0
 802584c:	d106      	bne.n	802585c <ip_frag_free_pbuf_custom_ref+0x1c>
 802584e:	4b07      	ldr	r3, [pc, #28]	; (802586c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8025850:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8025854:	4906      	ldr	r1, [pc, #24]	; (8025870 <ip_frag_free_pbuf_custom_ref+0x30>)
 8025856:	4807      	ldr	r0, [pc, #28]	; (8025874 <ip_frag_free_pbuf_custom_ref+0x34>)
 8025858:	f000 fbb2 	bl	8025fc0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 802585c:	6879      	ldr	r1, [r7, #4]
 802585e:	2002      	movs	r0, #2
 8025860:	f7fb ff66 	bl	8021730 <memp_free>
}
 8025864:	bf00      	nop
 8025866:	3708      	adds	r7, #8
 8025868:	46bd      	mov	sp, r7
 802586a:	bd80      	pop	{r7, pc}
 802586c:	0802ca7c 	.word	0x0802ca7c
 8025870:	0802cc34 	.word	0x0802cc34
 8025874:	0802cac4 	.word	0x0802cac4

08025878 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8025878:	b580      	push	{r7, lr}
 802587a:	b084      	sub	sp, #16
 802587c:	af00      	add	r7, sp, #0
 802587e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8025880:	687b      	ldr	r3, [r7, #4]
 8025882:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8025884:	68fb      	ldr	r3, [r7, #12]
 8025886:	2b00      	cmp	r3, #0
 8025888:	d106      	bne.n	8025898 <ipfrag_free_pbuf_custom+0x20>
 802588a:	4b11      	ldr	r3, [pc, #68]	; (80258d0 <ipfrag_free_pbuf_custom+0x58>)
 802588c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8025890:	4910      	ldr	r1, [pc, #64]	; (80258d4 <ipfrag_free_pbuf_custom+0x5c>)
 8025892:	4811      	ldr	r0, [pc, #68]	; (80258d8 <ipfrag_free_pbuf_custom+0x60>)
 8025894:	f000 fb94 	bl	8025fc0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8025898:	68fa      	ldr	r2, [r7, #12]
 802589a:	687b      	ldr	r3, [r7, #4]
 802589c:	429a      	cmp	r2, r3
 802589e:	d006      	beq.n	80258ae <ipfrag_free_pbuf_custom+0x36>
 80258a0:	4b0b      	ldr	r3, [pc, #44]	; (80258d0 <ipfrag_free_pbuf_custom+0x58>)
 80258a2:	f240 22cf 	movw	r2, #719	; 0x2cf
 80258a6:	490d      	ldr	r1, [pc, #52]	; (80258dc <ipfrag_free_pbuf_custom+0x64>)
 80258a8:	480b      	ldr	r0, [pc, #44]	; (80258d8 <ipfrag_free_pbuf_custom+0x60>)
 80258aa:	f000 fb89 	bl	8025fc0 <iprintf>
  if (pcr->original != NULL) {
 80258ae:	68fb      	ldr	r3, [r7, #12]
 80258b0:	695b      	ldr	r3, [r3, #20]
 80258b2:	2b00      	cmp	r3, #0
 80258b4:	d004      	beq.n	80258c0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80258b6:	68fb      	ldr	r3, [r7, #12]
 80258b8:	695b      	ldr	r3, [r3, #20]
 80258ba:	4618      	mov	r0, r3
 80258bc:	f7fc fe48 	bl	8022550 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80258c0:	68f8      	ldr	r0, [r7, #12]
 80258c2:	f7ff ffbd 	bl	8025840 <ip_frag_free_pbuf_custom_ref>
}
 80258c6:	bf00      	nop
 80258c8:	3710      	adds	r7, #16
 80258ca:	46bd      	mov	sp, r7
 80258cc:	bd80      	pop	{r7, pc}
 80258ce:	bf00      	nop
 80258d0:	0802ca7c 	.word	0x0802ca7c
 80258d4:	0802cc40 	.word	0x0802cc40
 80258d8:	0802cac4 	.word	0x0802cac4
 80258dc:	0802cc4c 	.word	0x0802cc4c

080258e0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80258e0:	b580      	push	{r7, lr}
 80258e2:	b094      	sub	sp, #80	; 0x50
 80258e4:	af02      	add	r7, sp, #8
 80258e6:	60f8      	str	r0, [r7, #12]
 80258e8:	60b9      	str	r1, [r7, #8]
 80258ea:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80258ec:	2300      	movs	r3, #0
 80258ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80258f2:	68bb      	ldr	r3, [r7, #8]
 80258f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80258f6:	3b14      	subs	r3, #20
 80258f8:	2b00      	cmp	r3, #0
 80258fa:	da00      	bge.n	80258fe <ip4_frag+0x1e>
 80258fc:	3307      	adds	r3, #7
 80258fe:	10db      	asrs	r3, r3, #3
 8025900:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8025902:	2314      	movs	r3, #20
 8025904:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8025906:	68fb      	ldr	r3, [r7, #12]
 8025908:	685b      	ldr	r3, [r3, #4]
 802590a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 802590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 802590e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8025910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025912:	781b      	ldrb	r3, [r3, #0]
 8025914:	f003 030f 	and.w	r3, r3, #15
 8025918:	b2db      	uxtb	r3, r3
 802591a:	009b      	lsls	r3, r3, #2
 802591c:	b2db      	uxtb	r3, r3
 802591e:	2b14      	cmp	r3, #20
 8025920:	d002      	beq.n	8025928 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8025922:	f06f 0305 	mvn.w	r3, #5
 8025926:	e110      	b.n	8025b4a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8025928:	68fb      	ldr	r3, [r7, #12]
 802592a:	895b      	ldrh	r3, [r3, #10]
 802592c:	2b13      	cmp	r3, #19
 802592e:	d809      	bhi.n	8025944 <ip4_frag+0x64>
 8025930:	4b88      	ldr	r3, [pc, #544]	; (8025b54 <ip4_frag+0x274>)
 8025932:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8025936:	4988      	ldr	r1, [pc, #544]	; (8025b58 <ip4_frag+0x278>)
 8025938:	4888      	ldr	r0, [pc, #544]	; (8025b5c <ip4_frag+0x27c>)
 802593a:	f000 fb41 	bl	8025fc0 <iprintf>
 802593e:	f06f 0305 	mvn.w	r3, #5
 8025942:	e102      	b.n	8025b4a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8025944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025946:	88db      	ldrh	r3, [r3, #6]
 8025948:	b29b      	uxth	r3, r3
 802594a:	4618      	mov	r0, r3
 802594c:	f7fb fa24 	bl	8020d98 <lwip_htons>
 8025950:	4603      	mov	r3, r0
 8025952:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8025954:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025956:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802595a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 802595e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025960:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8025964:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8025966:	68fb      	ldr	r3, [r7, #12]
 8025968:	891b      	ldrh	r3, [r3, #8]
 802596a:	3b14      	subs	r3, #20
 802596c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8025970:	e0e1      	b.n	8025b36 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8025972:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025974:	00db      	lsls	r3, r3, #3
 8025976:	b29b      	uxth	r3, r3
 8025978:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802597c:	4293      	cmp	r3, r2
 802597e:	bf28      	it	cs
 8025980:	4613      	movcs	r3, r2
 8025982:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8025984:	f44f 7220 	mov.w	r2, #640	; 0x280
 8025988:	2114      	movs	r1, #20
 802598a:	200e      	movs	r0, #14
 802598c:	f7fc fafe 	bl	8021f8c <pbuf_alloc>
 8025990:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8025992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8025994:	2b00      	cmp	r3, #0
 8025996:	f000 80d5 	beq.w	8025b44 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802599a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802599c:	895b      	ldrh	r3, [r3, #10]
 802599e:	2b13      	cmp	r3, #19
 80259a0:	d806      	bhi.n	80259b0 <ip4_frag+0xd0>
 80259a2:	4b6c      	ldr	r3, [pc, #432]	; (8025b54 <ip4_frag+0x274>)
 80259a4:	f44f 7249 	mov.w	r2, #804	; 0x324
 80259a8:	496d      	ldr	r1, [pc, #436]	; (8025b60 <ip4_frag+0x280>)
 80259aa:	486c      	ldr	r0, [pc, #432]	; (8025b5c <ip4_frag+0x27c>)
 80259ac:	f000 fb08 	bl	8025fc0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80259b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259b2:	685b      	ldr	r3, [r3, #4]
 80259b4:	2214      	movs	r2, #20
 80259b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80259b8:	4618      	mov	r0, r3
 80259ba:	f000 f9f1 	bl	8025da0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80259be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80259c0:	685b      	ldr	r3, [r3, #4]
 80259c2:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80259c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80259c6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80259ca:	e064      	b.n	8025a96 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80259cc:	68fb      	ldr	r3, [r7, #12]
 80259ce:	895a      	ldrh	r2, [r3, #10]
 80259d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80259d2:	1ad3      	subs	r3, r2, r3
 80259d4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80259d6:	68fb      	ldr	r3, [r7, #12]
 80259d8:	895b      	ldrh	r3, [r3, #10]
 80259da:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80259dc:	429a      	cmp	r2, r3
 80259de:	d906      	bls.n	80259ee <ip4_frag+0x10e>
 80259e0:	4b5c      	ldr	r3, [pc, #368]	; (8025b54 <ip4_frag+0x274>)
 80259e2:	f240 322d 	movw	r2, #813	; 0x32d
 80259e6:	495f      	ldr	r1, [pc, #380]	; (8025b64 <ip4_frag+0x284>)
 80259e8:	485c      	ldr	r0, [pc, #368]	; (8025b5c <ip4_frag+0x27c>)
 80259ea:	f000 fae9 	bl	8025fc0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80259ee:	8bfa      	ldrh	r2, [r7, #30]
 80259f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80259f4:	4293      	cmp	r3, r2
 80259f6:	bf28      	it	cs
 80259f8:	4613      	movcs	r3, r2
 80259fa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80259fe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025a02:	2b00      	cmp	r3, #0
 8025a04:	d105      	bne.n	8025a12 <ip4_frag+0x132>
        poff = 0;
 8025a06:	2300      	movs	r3, #0
 8025a08:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025a0a:	68fb      	ldr	r3, [r7, #12]
 8025a0c:	681b      	ldr	r3, [r3, #0]
 8025a0e:	60fb      	str	r3, [r7, #12]
        continue;
 8025a10:	e041      	b.n	8025a96 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8025a12:	f7ff ff0d 	bl	8025830 <ip_frag_alloc_pbuf_custom_ref>
 8025a16:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8025a18:	69bb      	ldr	r3, [r7, #24]
 8025a1a:	2b00      	cmp	r3, #0
 8025a1c:	d103      	bne.n	8025a26 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8025a1e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a20:	f7fc fd96 	bl	8022550 <pbuf_free>
        goto memerr;
 8025a24:	e08f      	b.n	8025b46 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025a26:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8025a28:	68fb      	ldr	r3, [r7, #12]
 8025a2a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8025a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8025a2e:	4413      	add	r3, r2
 8025a30:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8025a34:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8025a38:	9201      	str	r2, [sp, #4]
 8025a3a:	9300      	str	r3, [sp, #0]
 8025a3c:	4603      	mov	r3, r0
 8025a3e:	2241      	movs	r2, #65	; 0x41
 8025a40:	2000      	movs	r0, #0
 8025a42:	f7fc fbcb 	bl	80221dc <pbuf_alloced_custom>
 8025a46:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8025a48:	697b      	ldr	r3, [r7, #20]
 8025a4a:	2b00      	cmp	r3, #0
 8025a4c:	d106      	bne.n	8025a5c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8025a4e:	69b8      	ldr	r0, [r7, #24]
 8025a50:	f7ff fef6 	bl	8025840 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8025a54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a56:	f7fc fd7b 	bl	8022550 <pbuf_free>
        goto memerr;
 8025a5a:	e074      	b.n	8025b46 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8025a5c:	68f8      	ldr	r0, [r7, #12]
 8025a5e:	f7fc fe17 	bl	8022690 <pbuf_ref>
      pcr->original = p;
 8025a62:	69bb      	ldr	r3, [r7, #24]
 8025a64:	68fa      	ldr	r2, [r7, #12]
 8025a66:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8025a68:	69bb      	ldr	r3, [r7, #24]
 8025a6a:	4a3f      	ldr	r2, [pc, #252]	; (8025b68 <ip4_frag+0x288>)
 8025a6c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8025a6e:	6979      	ldr	r1, [r7, #20]
 8025a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025a72:	f7fc fe2f 	bl	80226d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8025a76:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8025a7a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025a7e:	1ad3      	subs	r3, r2, r3
 8025a80:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8025a84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025a88:	2b00      	cmp	r3, #0
 8025a8a:	d004      	beq.n	8025a96 <ip4_frag+0x1b6>
        poff = 0;
 8025a8c:	2300      	movs	r3, #0
 8025a8e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8025a90:	68fb      	ldr	r3, [r7, #12]
 8025a92:	681b      	ldr	r3, [r3, #0]
 8025a94:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8025a96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8025a9a:	2b00      	cmp	r3, #0
 8025a9c:	d196      	bne.n	80259cc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8025a9e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8025aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8025aa4:	4413      	add	r3, r2
 8025aa6:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8025aa8:	68bb      	ldr	r3, [r7, #8]
 8025aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8025aac:	f1a3 0213 	sub.w	r2, r3, #19
 8025ab0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025ab4:	429a      	cmp	r2, r3
 8025ab6:	bfcc      	ite	gt
 8025ab8:	2301      	movgt	r3, #1
 8025aba:	2300      	movle	r3, #0
 8025abc:	b2db      	uxtb	r3, r3
 8025abe:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8025ac0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8025ac4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8025ac8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8025aca:	6a3b      	ldr	r3, [r7, #32]
 8025acc:	2b00      	cmp	r3, #0
 8025ace:	d002      	beq.n	8025ad6 <ip4_frag+0x1f6>
 8025ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8025ad2:	2b00      	cmp	r3, #0
 8025ad4:	d003      	beq.n	8025ade <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8025ad6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8025adc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8025ade:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8025ae0:	4618      	mov	r0, r3
 8025ae2:	f7fb f959 	bl	8020d98 <lwip_htons>
 8025ae6:	4603      	mov	r3, r0
 8025ae8:	461a      	mov	r2, r3
 8025aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025aec:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8025aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025af0:	3314      	adds	r3, #20
 8025af2:	b29b      	uxth	r3, r3
 8025af4:	4618      	mov	r0, r3
 8025af6:	f7fb f94f 	bl	8020d98 <lwip_htons>
 8025afa:	4603      	mov	r3, r0
 8025afc:	461a      	mov	r2, r3
 8025afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b00:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8025b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8025b04:	2200      	movs	r2, #0
 8025b06:	729a      	strb	r2, [r3, #10]
 8025b08:	2200      	movs	r2, #0
 8025b0a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8025b0c:	68bb      	ldr	r3, [r7, #8]
 8025b0e:	695b      	ldr	r3, [r3, #20]
 8025b10:	687a      	ldr	r2, [r7, #4]
 8025b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8025b14:	68b8      	ldr	r0, [r7, #8]
 8025b16:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8025b18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8025b1a:	f7fc fd19 	bl	8022550 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8025b1e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8025b22:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8025b24:	1ad3      	subs	r3, r2, r3
 8025b26:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8025b2a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8025b2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8025b30:	4413      	add	r3, r2
 8025b32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8025b36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8025b3a:	2b00      	cmp	r3, #0
 8025b3c:	f47f af19 	bne.w	8025972 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8025b40:	2300      	movs	r3, #0
 8025b42:	e002      	b.n	8025b4a <ip4_frag+0x26a>
      goto memerr;
 8025b44:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8025b46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8025b4a:	4618      	mov	r0, r3
 8025b4c:	3748      	adds	r7, #72	; 0x48
 8025b4e:	46bd      	mov	sp, r7
 8025b50:	bd80      	pop	{r7, pc}
 8025b52:	bf00      	nop
 8025b54:	0802ca7c 	.word	0x0802ca7c
 8025b58:	0802cc58 	.word	0x0802cc58
 8025b5c:	0802cac4 	.word	0x0802cac4
 8025b60:	0802cc74 	.word	0x0802cc74
 8025b64:	0802cc94 	.word	0x0802cc94
 8025b68:	08025879 	.word	0x08025879

08025b6c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8025b6c:	b580      	push	{r7, lr}
 8025b6e:	b086      	sub	sp, #24
 8025b70:	af00      	add	r7, sp, #0
 8025b72:	6078      	str	r0, [r7, #4]
 8025b74:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8025b76:	230e      	movs	r3, #14
 8025b78:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8025b7a:	687b      	ldr	r3, [r7, #4]
 8025b7c:	895b      	ldrh	r3, [r3, #10]
 8025b7e:	2b0e      	cmp	r3, #14
 8025b80:	d96e      	bls.n	8025c60 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8025b82:	687b      	ldr	r3, [r7, #4]
 8025b84:	7bdb      	ldrb	r3, [r3, #15]
 8025b86:	2b00      	cmp	r3, #0
 8025b88:	d106      	bne.n	8025b98 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8025b8a:	683b      	ldr	r3, [r7, #0]
 8025b8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8025b90:	3301      	adds	r3, #1
 8025b92:	b2da      	uxtb	r2, r3
 8025b94:	687b      	ldr	r3, [r7, #4]
 8025b96:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8025b98:	687b      	ldr	r3, [r7, #4]
 8025b9a:	685b      	ldr	r3, [r3, #4]
 8025b9c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8025b9e:	693b      	ldr	r3, [r7, #16]
 8025ba0:	7b1a      	ldrb	r2, [r3, #12]
 8025ba2:	7b5b      	ldrb	r3, [r3, #13]
 8025ba4:	021b      	lsls	r3, r3, #8
 8025ba6:	4313      	orrs	r3, r2
 8025ba8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8025baa:	693b      	ldr	r3, [r7, #16]
 8025bac:	781b      	ldrb	r3, [r3, #0]
 8025bae:	f003 0301 	and.w	r3, r3, #1
 8025bb2:	2b00      	cmp	r3, #0
 8025bb4:	d023      	beq.n	8025bfe <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8025bb6:	693b      	ldr	r3, [r7, #16]
 8025bb8:	781b      	ldrb	r3, [r3, #0]
 8025bba:	2b01      	cmp	r3, #1
 8025bbc:	d10f      	bne.n	8025bde <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025bbe:	693b      	ldr	r3, [r7, #16]
 8025bc0:	785b      	ldrb	r3, [r3, #1]
 8025bc2:	2b00      	cmp	r3, #0
 8025bc4:	d11b      	bne.n	8025bfe <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8025bc6:	693b      	ldr	r3, [r7, #16]
 8025bc8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8025bca:	2b5e      	cmp	r3, #94	; 0x5e
 8025bcc:	d117      	bne.n	8025bfe <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8025bce:	687b      	ldr	r3, [r7, #4]
 8025bd0:	7b5b      	ldrb	r3, [r3, #13]
 8025bd2:	f043 0310 	orr.w	r3, r3, #16
 8025bd6:	b2da      	uxtb	r2, r3
 8025bd8:	687b      	ldr	r3, [r7, #4]
 8025bda:	735a      	strb	r2, [r3, #13]
 8025bdc:	e00f      	b.n	8025bfe <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8025bde:	693b      	ldr	r3, [r7, #16]
 8025be0:	2206      	movs	r2, #6
 8025be2:	4928      	ldr	r1, [pc, #160]	; (8025c84 <ethernet_input+0x118>)
 8025be4:	4618      	mov	r0, r3
 8025be6:	f000 f8cb 	bl	8025d80 <memcmp>
 8025bea:	4603      	mov	r3, r0
 8025bec:	2b00      	cmp	r3, #0
 8025bee:	d106      	bne.n	8025bfe <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8025bf0:	687b      	ldr	r3, [r7, #4]
 8025bf2:	7b5b      	ldrb	r3, [r3, #13]
 8025bf4:	f043 0308 	orr.w	r3, r3, #8
 8025bf8:	b2da      	uxtb	r2, r3
 8025bfa:	687b      	ldr	r3, [r7, #4]
 8025bfc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8025bfe:	89fb      	ldrh	r3, [r7, #14]
 8025c00:	2b08      	cmp	r3, #8
 8025c02:	d003      	beq.n	8025c0c <ethernet_input+0xa0>
 8025c04:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8025c08:	d014      	beq.n	8025c34 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8025c0a:	e032      	b.n	8025c72 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025c0c:	683b      	ldr	r3, [r7, #0]
 8025c0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025c12:	f003 0308 	and.w	r3, r3, #8
 8025c16:	2b00      	cmp	r3, #0
 8025c18:	d024      	beq.n	8025c64 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025c1a:	8afb      	ldrh	r3, [r7, #22]
 8025c1c:	4619      	mov	r1, r3
 8025c1e:	6878      	ldr	r0, [r7, #4]
 8025c20:	f7fc fc10 	bl	8022444 <pbuf_remove_header>
 8025c24:	4603      	mov	r3, r0
 8025c26:	2b00      	cmp	r3, #0
 8025c28:	d11e      	bne.n	8025c68 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8025c2a:	6839      	ldr	r1, [r7, #0]
 8025c2c:	6878      	ldr	r0, [r7, #4]
 8025c2e:	f7fe fe8d 	bl	802494c <ip4_input>
      break;
 8025c32:	e013      	b.n	8025c5c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8025c34:	683b      	ldr	r3, [r7, #0]
 8025c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8025c3a:	f003 0308 	and.w	r3, r3, #8
 8025c3e:	2b00      	cmp	r3, #0
 8025c40:	d014      	beq.n	8025c6c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8025c42:	8afb      	ldrh	r3, [r7, #22]
 8025c44:	4619      	mov	r1, r3
 8025c46:	6878      	ldr	r0, [r7, #4]
 8025c48:	f7fc fbfc 	bl	8022444 <pbuf_remove_header>
 8025c4c:	4603      	mov	r3, r0
 8025c4e:	2b00      	cmp	r3, #0
 8025c50:	d10e      	bne.n	8025c70 <ethernet_input+0x104>
        etharp_input(p, netif);
 8025c52:	6839      	ldr	r1, [r7, #0]
 8025c54:	6878      	ldr	r0, [r7, #4]
 8025c56:	f7fe f82d 	bl	8023cb4 <etharp_input>
      break;
 8025c5a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8025c5c:	2300      	movs	r3, #0
 8025c5e:	e00c      	b.n	8025c7a <ethernet_input+0x10e>
    goto free_and_return;
 8025c60:	bf00      	nop
 8025c62:	e006      	b.n	8025c72 <ethernet_input+0x106>
        goto free_and_return;
 8025c64:	bf00      	nop
 8025c66:	e004      	b.n	8025c72 <ethernet_input+0x106>
        goto free_and_return;
 8025c68:	bf00      	nop
 8025c6a:	e002      	b.n	8025c72 <ethernet_input+0x106>
        goto free_and_return;
 8025c6c:	bf00      	nop
 8025c6e:	e000      	b.n	8025c72 <ethernet_input+0x106>
        goto free_and_return;
 8025c70:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8025c72:	6878      	ldr	r0, [r7, #4]
 8025c74:	f7fc fc6c 	bl	8022550 <pbuf_free>
  return ERR_OK;
 8025c78:	2300      	movs	r3, #0
}
 8025c7a:	4618      	mov	r0, r3
 8025c7c:	3718      	adds	r7, #24
 8025c7e:	46bd      	mov	sp, r7
 8025c80:	bd80      	pop	{r7, pc}
 8025c82:	bf00      	nop
 8025c84:	0802d1f4 	.word	0x0802d1f4

08025c88 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8025c88:	b580      	push	{r7, lr}
 8025c8a:	b086      	sub	sp, #24
 8025c8c:	af00      	add	r7, sp, #0
 8025c8e:	60f8      	str	r0, [r7, #12]
 8025c90:	60b9      	str	r1, [r7, #8]
 8025c92:	607a      	str	r2, [r7, #4]
 8025c94:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8025c96:	8c3b      	ldrh	r3, [r7, #32]
 8025c98:	4618      	mov	r0, r3
 8025c9a:	f7fb f87d 	bl	8020d98 <lwip_htons>
 8025c9e:	4603      	mov	r3, r0
 8025ca0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8025ca2:	210e      	movs	r1, #14
 8025ca4:	68b8      	ldr	r0, [r7, #8]
 8025ca6:	f7fc fbbd 	bl	8022424 <pbuf_add_header>
 8025caa:	4603      	mov	r3, r0
 8025cac:	2b00      	cmp	r3, #0
 8025cae:	d125      	bne.n	8025cfc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8025cb0:	68bb      	ldr	r3, [r7, #8]
 8025cb2:	685b      	ldr	r3, [r3, #4]
 8025cb4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8025cb6:	693b      	ldr	r3, [r7, #16]
 8025cb8:	8afa      	ldrh	r2, [r7, #22]
 8025cba:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8025cbc:	693b      	ldr	r3, [r7, #16]
 8025cbe:	2206      	movs	r2, #6
 8025cc0:	6839      	ldr	r1, [r7, #0]
 8025cc2:	4618      	mov	r0, r3
 8025cc4:	f000 f86c 	bl	8025da0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8025cc8:	693b      	ldr	r3, [r7, #16]
 8025cca:	3306      	adds	r3, #6
 8025ccc:	2206      	movs	r2, #6
 8025cce:	6879      	ldr	r1, [r7, #4]
 8025cd0:	4618      	mov	r0, r3
 8025cd2:	f000 f865 	bl	8025da0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8025cd6:	68fb      	ldr	r3, [r7, #12]
 8025cd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8025cdc:	2b06      	cmp	r3, #6
 8025cde:	d006      	beq.n	8025cee <ethernet_output+0x66>
 8025ce0:	4b0a      	ldr	r3, [pc, #40]	; (8025d0c <ethernet_output+0x84>)
 8025ce2:	f44f 7299 	mov.w	r2, #306	; 0x132
 8025ce6:	490a      	ldr	r1, [pc, #40]	; (8025d10 <ethernet_output+0x88>)
 8025ce8:	480a      	ldr	r0, [pc, #40]	; (8025d14 <ethernet_output+0x8c>)
 8025cea:	f000 f969 	bl	8025fc0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8025cee:	68fb      	ldr	r3, [r7, #12]
 8025cf0:	699b      	ldr	r3, [r3, #24]
 8025cf2:	68b9      	ldr	r1, [r7, #8]
 8025cf4:	68f8      	ldr	r0, [r7, #12]
 8025cf6:	4798      	blx	r3
 8025cf8:	4603      	mov	r3, r0
 8025cfa:	e002      	b.n	8025d02 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8025cfc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8025cfe:	f06f 0301 	mvn.w	r3, #1
}
 8025d02:	4618      	mov	r0, r3
 8025d04:	3718      	adds	r7, #24
 8025d06:	46bd      	mov	sp, r7
 8025d08:	bd80      	pop	{r7, pc}
 8025d0a:	bf00      	nop
 8025d0c:	0802cca4 	.word	0x0802cca4
 8025d10:	0802ccdc 	.word	0x0802ccdc
 8025d14:	0802cd10 	.word	0x0802cd10

08025d18 <__libc_init_array>:
 8025d18:	b570      	push	{r4, r5, r6, lr}
 8025d1a:	4d0d      	ldr	r5, [pc, #52]	; (8025d50 <__libc_init_array+0x38>)
 8025d1c:	4c0d      	ldr	r4, [pc, #52]	; (8025d54 <__libc_init_array+0x3c>)
 8025d1e:	1b64      	subs	r4, r4, r5
 8025d20:	10a4      	asrs	r4, r4, #2
 8025d22:	2600      	movs	r6, #0
 8025d24:	42a6      	cmp	r6, r4
 8025d26:	d109      	bne.n	8025d3c <__libc_init_array+0x24>
 8025d28:	4d0b      	ldr	r5, [pc, #44]	; (8025d58 <__libc_init_array+0x40>)
 8025d2a:	4c0c      	ldr	r4, [pc, #48]	; (8025d5c <__libc_init_array+0x44>)
 8025d2c:	f001 fbfe 	bl	802752c <_init>
 8025d30:	1b64      	subs	r4, r4, r5
 8025d32:	10a4      	asrs	r4, r4, #2
 8025d34:	2600      	movs	r6, #0
 8025d36:	42a6      	cmp	r6, r4
 8025d38:	d105      	bne.n	8025d46 <__libc_init_array+0x2e>
 8025d3a:	bd70      	pop	{r4, r5, r6, pc}
 8025d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8025d40:	4798      	blx	r3
 8025d42:	3601      	adds	r6, #1
 8025d44:	e7ee      	b.n	8025d24 <__libc_init_array+0xc>
 8025d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8025d4a:	4798      	blx	r3
 8025d4c:	3601      	adds	r6, #1
 8025d4e:	e7f2      	b.n	8025d36 <__libc_init_array+0x1e>
 8025d50:	0802d354 	.word	0x0802d354
 8025d54:	0802d354 	.word	0x0802d354
 8025d58:	0802d354 	.word	0x0802d354
 8025d5c:	0802d358 	.word	0x0802d358

08025d60 <malloc>:
 8025d60:	4b02      	ldr	r3, [pc, #8]	; (8025d6c <malloc+0xc>)
 8025d62:	4601      	mov	r1, r0
 8025d64:	6818      	ldr	r0, [r3, #0]
 8025d66:	f000 b8b7 	b.w	8025ed8 <_malloc_r>
 8025d6a:	bf00      	nop
 8025d6c:	20000340 	.word	0x20000340

08025d70 <free>:
 8025d70:	4b02      	ldr	r3, [pc, #8]	; (8025d7c <free+0xc>)
 8025d72:	4601      	mov	r1, r0
 8025d74:	6818      	ldr	r0, [r3, #0]
 8025d76:	f000 b843 	b.w	8025e00 <_free_r>
 8025d7a:	bf00      	nop
 8025d7c:	20000340 	.word	0x20000340

08025d80 <memcmp>:
 8025d80:	b510      	push	{r4, lr}
 8025d82:	3901      	subs	r1, #1
 8025d84:	4402      	add	r2, r0
 8025d86:	4290      	cmp	r0, r2
 8025d88:	d101      	bne.n	8025d8e <memcmp+0xe>
 8025d8a:	2000      	movs	r0, #0
 8025d8c:	e005      	b.n	8025d9a <memcmp+0x1a>
 8025d8e:	7803      	ldrb	r3, [r0, #0]
 8025d90:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8025d94:	42a3      	cmp	r3, r4
 8025d96:	d001      	beq.n	8025d9c <memcmp+0x1c>
 8025d98:	1b18      	subs	r0, r3, r4
 8025d9a:	bd10      	pop	{r4, pc}
 8025d9c:	3001      	adds	r0, #1
 8025d9e:	e7f2      	b.n	8025d86 <memcmp+0x6>

08025da0 <memcpy>:
 8025da0:	440a      	add	r2, r1
 8025da2:	4291      	cmp	r1, r2
 8025da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8025da8:	d100      	bne.n	8025dac <memcpy+0xc>
 8025daa:	4770      	bx	lr
 8025dac:	b510      	push	{r4, lr}
 8025dae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8025db2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8025db6:	4291      	cmp	r1, r2
 8025db8:	d1f9      	bne.n	8025dae <memcpy+0xe>
 8025dba:	bd10      	pop	{r4, pc}

08025dbc <memmove>:
 8025dbc:	4288      	cmp	r0, r1
 8025dbe:	b510      	push	{r4, lr}
 8025dc0:	eb01 0402 	add.w	r4, r1, r2
 8025dc4:	d902      	bls.n	8025dcc <memmove+0x10>
 8025dc6:	4284      	cmp	r4, r0
 8025dc8:	4623      	mov	r3, r4
 8025dca:	d807      	bhi.n	8025ddc <memmove+0x20>
 8025dcc:	1e43      	subs	r3, r0, #1
 8025dce:	42a1      	cmp	r1, r4
 8025dd0:	d008      	beq.n	8025de4 <memmove+0x28>
 8025dd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025dd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8025dda:	e7f8      	b.n	8025dce <memmove+0x12>
 8025ddc:	4402      	add	r2, r0
 8025dde:	4601      	mov	r1, r0
 8025de0:	428a      	cmp	r2, r1
 8025de2:	d100      	bne.n	8025de6 <memmove+0x2a>
 8025de4:	bd10      	pop	{r4, pc}
 8025de6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8025dea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8025dee:	e7f7      	b.n	8025de0 <memmove+0x24>

08025df0 <memset>:
 8025df0:	4402      	add	r2, r0
 8025df2:	4603      	mov	r3, r0
 8025df4:	4293      	cmp	r3, r2
 8025df6:	d100      	bne.n	8025dfa <memset+0xa>
 8025df8:	4770      	bx	lr
 8025dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8025dfe:	e7f9      	b.n	8025df4 <memset+0x4>

08025e00 <_free_r>:
 8025e00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8025e02:	2900      	cmp	r1, #0
 8025e04:	d044      	beq.n	8025e90 <_free_r+0x90>
 8025e06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025e0a:	9001      	str	r0, [sp, #4]
 8025e0c:	2b00      	cmp	r3, #0
 8025e0e:	f1a1 0404 	sub.w	r4, r1, #4
 8025e12:	bfb8      	it	lt
 8025e14:	18e4      	addlt	r4, r4, r3
 8025e16:	f000 fdbb 	bl	8026990 <__malloc_lock>
 8025e1a:	4a1e      	ldr	r2, [pc, #120]	; (8025e94 <_free_r+0x94>)
 8025e1c:	9801      	ldr	r0, [sp, #4]
 8025e1e:	6813      	ldr	r3, [r2, #0]
 8025e20:	b933      	cbnz	r3, 8025e30 <_free_r+0x30>
 8025e22:	6063      	str	r3, [r4, #4]
 8025e24:	6014      	str	r4, [r2, #0]
 8025e26:	b003      	add	sp, #12
 8025e28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8025e2c:	f000 bdb6 	b.w	802699c <__malloc_unlock>
 8025e30:	42a3      	cmp	r3, r4
 8025e32:	d908      	bls.n	8025e46 <_free_r+0x46>
 8025e34:	6825      	ldr	r5, [r4, #0]
 8025e36:	1961      	adds	r1, r4, r5
 8025e38:	428b      	cmp	r3, r1
 8025e3a:	bf01      	itttt	eq
 8025e3c:	6819      	ldreq	r1, [r3, #0]
 8025e3e:	685b      	ldreq	r3, [r3, #4]
 8025e40:	1949      	addeq	r1, r1, r5
 8025e42:	6021      	streq	r1, [r4, #0]
 8025e44:	e7ed      	b.n	8025e22 <_free_r+0x22>
 8025e46:	461a      	mov	r2, r3
 8025e48:	685b      	ldr	r3, [r3, #4]
 8025e4a:	b10b      	cbz	r3, 8025e50 <_free_r+0x50>
 8025e4c:	42a3      	cmp	r3, r4
 8025e4e:	d9fa      	bls.n	8025e46 <_free_r+0x46>
 8025e50:	6811      	ldr	r1, [r2, #0]
 8025e52:	1855      	adds	r5, r2, r1
 8025e54:	42a5      	cmp	r5, r4
 8025e56:	d10b      	bne.n	8025e70 <_free_r+0x70>
 8025e58:	6824      	ldr	r4, [r4, #0]
 8025e5a:	4421      	add	r1, r4
 8025e5c:	1854      	adds	r4, r2, r1
 8025e5e:	42a3      	cmp	r3, r4
 8025e60:	6011      	str	r1, [r2, #0]
 8025e62:	d1e0      	bne.n	8025e26 <_free_r+0x26>
 8025e64:	681c      	ldr	r4, [r3, #0]
 8025e66:	685b      	ldr	r3, [r3, #4]
 8025e68:	6053      	str	r3, [r2, #4]
 8025e6a:	4421      	add	r1, r4
 8025e6c:	6011      	str	r1, [r2, #0]
 8025e6e:	e7da      	b.n	8025e26 <_free_r+0x26>
 8025e70:	d902      	bls.n	8025e78 <_free_r+0x78>
 8025e72:	230c      	movs	r3, #12
 8025e74:	6003      	str	r3, [r0, #0]
 8025e76:	e7d6      	b.n	8025e26 <_free_r+0x26>
 8025e78:	6825      	ldr	r5, [r4, #0]
 8025e7a:	1961      	adds	r1, r4, r5
 8025e7c:	428b      	cmp	r3, r1
 8025e7e:	bf04      	itt	eq
 8025e80:	6819      	ldreq	r1, [r3, #0]
 8025e82:	685b      	ldreq	r3, [r3, #4]
 8025e84:	6063      	str	r3, [r4, #4]
 8025e86:	bf04      	itt	eq
 8025e88:	1949      	addeq	r1, r1, r5
 8025e8a:	6021      	streq	r1, [r4, #0]
 8025e8c:	6054      	str	r4, [r2, #4]
 8025e8e:	e7ca      	b.n	8025e26 <_free_r+0x26>
 8025e90:	b003      	add	sp, #12
 8025e92:	bd30      	pop	{r4, r5, pc}
 8025e94:	20016270 	.word	0x20016270

08025e98 <sbrk_aligned>:
 8025e98:	b570      	push	{r4, r5, r6, lr}
 8025e9a:	4e0e      	ldr	r6, [pc, #56]	; (8025ed4 <sbrk_aligned+0x3c>)
 8025e9c:	460c      	mov	r4, r1
 8025e9e:	6831      	ldr	r1, [r6, #0]
 8025ea0:	4605      	mov	r5, r0
 8025ea2:	b911      	cbnz	r1, 8025eaa <sbrk_aligned+0x12>
 8025ea4:	f000 f96e 	bl	8026184 <_sbrk_r>
 8025ea8:	6030      	str	r0, [r6, #0]
 8025eaa:	4621      	mov	r1, r4
 8025eac:	4628      	mov	r0, r5
 8025eae:	f000 f969 	bl	8026184 <_sbrk_r>
 8025eb2:	1c43      	adds	r3, r0, #1
 8025eb4:	d00a      	beq.n	8025ecc <sbrk_aligned+0x34>
 8025eb6:	1cc4      	adds	r4, r0, #3
 8025eb8:	f024 0403 	bic.w	r4, r4, #3
 8025ebc:	42a0      	cmp	r0, r4
 8025ebe:	d007      	beq.n	8025ed0 <sbrk_aligned+0x38>
 8025ec0:	1a21      	subs	r1, r4, r0
 8025ec2:	4628      	mov	r0, r5
 8025ec4:	f000 f95e 	bl	8026184 <_sbrk_r>
 8025ec8:	3001      	adds	r0, #1
 8025eca:	d101      	bne.n	8025ed0 <sbrk_aligned+0x38>
 8025ecc:	f04f 34ff 	mov.w	r4, #4294967295
 8025ed0:	4620      	mov	r0, r4
 8025ed2:	bd70      	pop	{r4, r5, r6, pc}
 8025ed4:	20016274 	.word	0x20016274

08025ed8 <_malloc_r>:
 8025ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025edc:	1ccd      	adds	r5, r1, #3
 8025ede:	f025 0503 	bic.w	r5, r5, #3
 8025ee2:	3508      	adds	r5, #8
 8025ee4:	2d0c      	cmp	r5, #12
 8025ee6:	bf38      	it	cc
 8025ee8:	250c      	movcc	r5, #12
 8025eea:	2d00      	cmp	r5, #0
 8025eec:	4607      	mov	r7, r0
 8025eee:	db01      	blt.n	8025ef4 <_malloc_r+0x1c>
 8025ef0:	42a9      	cmp	r1, r5
 8025ef2:	d905      	bls.n	8025f00 <_malloc_r+0x28>
 8025ef4:	230c      	movs	r3, #12
 8025ef6:	603b      	str	r3, [r7, #0]
 8025ef8:	2600      	movs	r6, #0
 8025efa:	4630      	mov	r0, r6
 8025efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025f00:	4e2e      	ldr	r6, [pc, #184]	; (8025fbc <_malloc_r+0xe4>)
 8025f02:	f000 fd45 	bl	8026990 <__malloc_lock>
 8025f06:	6833      	ldr	r3, [r6, #0]
 8025f08:	461c      	mov	r4, r3
 8025f0a:	bb34      	cbnz	r4, 8025f5a <_malloc_r+0x82>
 8025f0c:	4629      	mov	r1, r5
 8025f0e:	4638      	mov	r0, r7
 8025f10:	f7ff ffc2 	bl	8025e98 <sbrk_aligned>
 8025f14:	1c43      	adds	r3, r0, #1
 8025f16:	4604      	mov	r4, r0
 8025f18:	d14d      	bne.n	8025fb6 <_malloc_r+0xde>
 8025f1a:	6834      	ldr	r4, [r6, #0]
 8025f1c:	4626      	mov	r6, r4
 8025f1e:	2e00      	cmp	r6, #0
 8025f20:	d140      	bne.n	8025fa4 <_malloc_r+0xcc>
 8025f22:	6823      	ldr	r3, [r4, #0]
 8025f24:	4631      	mov	r1, r6
 8025f26:	4638      	mov	r0, r7
 8025f28:	eb04 0803 	add.w	r8, r4, r3
 8025f2c:	f000 f92a 	bl	8026184 <_sbrk_r>
 8025f30:	4580      	cmp	r8, r0
 8025f32:	d13a      	bne.n	8025faa <_malloc_r+0xd2>
 8025f34:	6821      	ldr	r1, [r4, #0]
 8025f36:	3503      	adds	r5, #3
 8025f38:	1a6d      	subs	r5, r5, r1
 8025f3a:	f025 0503 	bic.w	r5, r5, #3
 8025f3e:	3508      	adds	r5, #8
 8025f40:	2d0c      	cmp	r5, #12
 8025f42:	bf38      	it	cc
 8025f44:	250c      	movcc	r5, #12
 8025f46:	4629      	mov	r1, r5
 8025f48:	4638      	mov	r0, r7
 8025f4a:	f7ff ffa5 	bl	8025e98 <sbrk_aligned>
 8025f4e:	3001      	adds	r0, #1
 8025f50:	d02b      	beq.n	8025faa <_malloc_r+0xd2>
 8025f52:	6823      	ldr	r3, [r4, #0]
 8025f54:	442b      	add	r3, r5
 8025f56:	6023      	str	r3, [r4, #0]
 8025f58:	e00e      	b.n	8025f78 <_malloc_r+0xa0>
 8025f5a:	6822      	ldr	r2, [r4, #0]
 8025f5c:	1b52      	subs	r2, r2, r5
 8025f5e:	d41e      	bmi.n	8025f9e <_malloc_r+0xc6>
 8025f60:	2a0b      	cmp	r2, #11
 8025f62:	d916      	bls.n	8025f92 <_malloc_r+0xba>
 8025f64:	1961      	adds	r1, r4, r5
 8025f66:	42a3      	cmp	r3, r4
 8025f68:	6025      	str	r5, [r4, #0]
 8025f6a:	bf18      	it	ne
 8025f6c:	6059      	strne	r1, [r3, #4]
 8025f6e:	6863      	ldr	r3, [r4, #4]
 8025f70:	bf08      	it	eq
 8025f72:	6031      	streq	r1, [r6, #0]
 8025f74:	5162      	str	r2, [r4, r5]
 8025f76:	604b      	str	r3, [r1, #4]
 8025f78:	4638      	mov	r0, r7
 8025f7a:	f104 060b 	add.w	r6, r4, #11
 8025f7e:	f000 fd0d 	bl	802699c <__malloc_unlock>
 8025f82:	f026 0607 	bic.w	r6, r6, #7
 8025f86:	1d23      	adds	r3, r4, #4
 8025f88:	1af2      	subs	r2, r6, r3
 8025f8a:	d0b6      	beq.n	8025efa <_malloc_r+0x22>
 8025f8c:	1b9b      	subs	r3, r3, r6
 8025f8e:	50a3      	str	r3, [r4, r2]
 8025f90:	e7b3      	b.n	8025efa <_malloc_r+0x22>
 8025f92:	6862      	ldr	r2, [r4, #4]
 8025f94:	42a3      	cmp	r3, r4
 8025f96:	bf0c      	ite	eq
 8025f98:	6032      	streq	r2, [r6, #0]
 8025f9a:	605a      	strne	r2, [r3, #4]
 8025f9c:	e7ec      	b.n	8025f78 <_malloc_r+0xa0>
 8025f9e:	4623      	mov	r3, r4
 8025fa0:	6864      	ldr	r4, [r4, #4]
 8025fa2:	e7b2      	b.n	8025f0a <_malloc_r+0x32>
 8025fa4:	4634      	mov	r4, r6
 8025fa6:	6876      	ldr	r6, [r6, #4]
 8025fa8:	e7b9      	b.n	8025f1e <_malloc_r+0x46>
 8025faa:	230c      	movs	r3, #12
 8025fac:	603b      	str	r3, [r7, #0]
 8025fae:	4638      	mov	r0, r7
 8025fb0:	f000 fcf4 	bl	802699c <__malloc_unlock>
 8025fb4:	e7a1      	b.n	8025efa <_malloc_r+0x22>
 8025fb6:	6025      	str	r5, [r4, #0]
 8025fb8:	e7de      	b.n	8025f78 <_malloc_r+0xa0>
 8025fba:	bf00      	nop
 8025fbc:	20016270 	.word	0x20016270

08025fc0 <iprintf>:
 8025fc0:	b40f      	push	{r0, r1, r2, r3}
 8025fc2:	4b0a      	ldr	r3, [pc, #40]	; (8025fec <iprintf+0x2c>)
 8025fc4:	b513      	push	{r0, r1, r4, lr}
 8025fc6:	681c      	ldr	r4, [r3, #0]
 8025fc8:	b124      	cbz	r4, 8025fd4 <iprintf+0x14>
 8025fca:	69a3      	ldr	r3, [r4, #24]
 8025fcc:	b913      	cbnz	r3, 8025fd4 <iprintf+0x14>
 8025fce:	4620      	mov	r0, r4
 8025fd0:	f000 fbc6 	bl	8026760 <__sinit>
 8025fd4:	ab05      	add	r3, sp, #20
 8025fd6:	9a04      	ldr	r2, [sp, #16]
 8025fd8:	68a1      	ldr	r1, [r4, #8]
 8025fda:	9301      	str	r3, [sp, #4]
 8025fdc:	4620      	mov	r0, r4
 8025fde:	f000 fe69 	bl	8026cb4 <_vfiprintf_r>
 8025fe2:	b002      	add	sp, #8
 8025fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025fe8:	b004      	add	sp, #16
 8025fea:	4770      	bx	lr
 8025fec:	20000340 	.word	0x20000340

08025ff0 <putchar>:
 8025ff0:	4b09      	ldr	r3, [pc, #36]	; (8026018 <putchar+0x28>)
 8025ff2:	b513      	push	{r0, r1, r4, lr}
 8025ff4:	681c      	ldr	r4, [r3, #0]
 8025ff6:	4601      	mov	r1, r0
 8025ff8:	b134      	cbz	r4, 8026008 <putchar+0x18>
 8025ffa:	69a3      	ldr	r3, [r4, #24]
 8025ffc:	b923      	cbnz	r3, 8026008 <putchar+0x18>
 8025ffe:	9001      	str	r0, [sp, #4]
 8026000:	4620      	mov	r0, r4
 8026002:	f000 fbad 	bl	8026760 <__sinit>
 8026006:	9901      	ldr	r1, [sp, #4]
 8026008:	68a2      	ldr	r2, [r4, #8]
 802600a:	4620      	mov	r0, r4
 802600c:	b002      	add	sp, #8
 802600e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026012:	f001 b913 	b.w	802723c <_putc_r>
 8026016:	bf00      	nop
 8026018:	20000340 	.word	0x20000340

0802601c <_puts_r>:
 802601c:	b570      	push	{r4, r5, r6, lr}
 802601e:	460e      	mov	r6, r1
 8026020:	4605      	mov	r5, r0
 8026022:	b118      	cbz	r0, 802602c <_puts_r+0x10>
 8026024:	6983      	ldr	r3, [r0, #24]
 8026026:	b90b      	cbnz	r3, 802602c <_puts_r+0x10>
 8026028:	f000 fb9a 	bl	8026760 <__sinit>
 802602c:	69ab      	ldr	r3, [r5, #24]
 802602e:	68ac      	ldr	r4, [r5, #8]
 8026030:	b913      	cbnz	r3, 8026038 <_puts_r+0x1c>
 8026032:	4628      	mov	r0, r5
 8026034:	f000 fb94 	bl	8026760 <__sinit>
 8026038:	4b2c      	ldr	r3, [pc, #176]	; (80260ec <_puts_r+0xd0>)
 802603a:	429c      	cmp	r4, r3
 802603c:	d120      	bne.n	8026080 <_puts_r+0x64>
 802603e:	686c      	ldr	r4, [r5, #4]
 8026040:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026042:	07db      	lsls	r3, r3, #31
 8026044:	d405      	bmi.n	8026052 <_puts_r+0x36>
 8026046:	89a3      	ldrh	r3, [r4, #12]
 8026048:	0598      	lsls	r0, r3, #22
 802604a:	d402      	bmi.n	8026052 <_puts_r+0x36>
 802604c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802604e:	f000 fc37 	bl	80268c0 <__retarget_lock_acquire_recursive>
 8026052:	89a3      	ldrh	r3, [r4, #12]
 8026054:	0719      	lsls	r1, r3, #28
 8026056:	d51d      	bpl.n	8026094 <_puts_r+0x78>
 8026058:	6923      	ldr	r3, [r4, #16]
 802605a:	b1db      	cbz	r3, 8026094 <_puts_r+0x78>
 802605c:	3e01      	subs	r6, #1
 802605e:	68a3      	ldr	r3, [r4, #8]
 8026060:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8026064:	3b01      	subs	r3, #1
 8026066:	60a3      	str	r3, [r4, #8]
 8026068:	bb39      	cbnz	r1, 80260ba <_puts_r+0x9e>
 802606a:	2b00      	cmp	r3, #0
 802606c:	da38      	bge.n	80260e0 <_puts_r+0xc4>
 802606e:	4622      	mov	r2, r4
 8026070:	210a      	movs	r1, #10
 8026072:	4628      	mov	r0, r5
 8026074:	f000 f97c 	bl	8026370 <__swbuf_r>
 8026078:	3001      	adds	r0, #1
 802607a:	d011      	beq.n	80260a0 <_puts_r+0x84>
 802607c:	250a      	movs	r5, #10
 802607e:	e011      	b.n	80260a4 <_puts_r+0x88>
 8026080:	4b1b      	ldr	r3, [pc, #108]	; (80260f0 <_puts_r+0xd4>)
 8026082:	429c      	cmp	r4, r3
 8026084:	d101      	bne.n	802608a <_puts_r+0x6e>
 8026086:	68ac      	ldr	r4, [r5, #8]
 8026088:	e7da      	b.n	8026040 <_puts_r+0x24>
 802608a:	4b1a      	ldr	r3, [pc, #104]	; (80260f4 <_puts_r+0xd8>)
 802608c:	429c      	cmp	r4, r3
 802608e:	bf08      	it	eq
 8026090:	68ec      	ldreq	r4, [r5, #12]
 8026092:	e7d5      	b.n	8026040 <_puts_r+0x24>
 8026094:	4621      	mov	r1, r4
 8026096:	4628      	mov	r0, r5
 8026098:	f000 f9bc 	bl	8026414 <__swsetup_r>
 802609c:	2800      	cmp	r0, #0
 802609e:	d0dd      	beq.n	802605c <_puts_r+0x40>
 80260a0:	f04f 35ff 	mov.w	r5, #4294967295
 80260a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80260a6:	07da      	lsls	r2, r3, #31
 80260a8:	d405      	bmi.n	80260b6 <_puts_r+0x9a>
 80260aa:	89a3      	ldrh	r3, [r4, #12]
 80260ac:	059b      	lsls	r3, r3, #22
 80260ae:	d402      	bmi.n	80260b6 <_puts_r+0x9a>
 80260b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80260b2:	f000 fc06 	bl	80268c2 <__retarget_lock_release_recursive>
 80260b6:	4628      	mov	r0, r5
 80260b8:	bd70      	pop	{r4, r5, r6, pc}
 80260ba:	2b00      	cmp	r3, #0
 80260bc:	da04      	bge.n	80260c8 <_puts_r+0xac>
 80260be:	69a2      	ldr	r2, [r4, #24]
 80260c0:	429a      	cmp	r2, r3
 80260c2:	dc06      	bgt.n	80260d2 <_puts_r+0xb6>
 80260c4:	290a      	cmp	r1, #10
 80260c6:	d004      	beq.n	80260d2 <_puts_r+0xb6>
 80260c8:	6823      	ldr	r3, [r4, #0]
 80260ca:	1c5a      	adds	r2, r3, #1
 80260cc:	6022      	str	r2, [r4, #0]
 80260ce:	7019      	strb	r1, [r3, #0]
 80260d0:	e7c5      	b.n	802605e <_puts_r+0x42>
 80260d2:	4622      	mov	r2, r4
 80260d4:	4628      	mov	r0, r5
 80260d6:	f000 f94b 	bl	8026370 <__swbuf_r>
 80260da:	3001      	adds	r0, #1
 80260dc:	d1bf      	bne.n	802605e <_puts_r+0x42>
 80260de:	e7df      	b.n	80260a0 <_puts_r+0x84>
 80260e0:	6823      	ldr	r3, [r4, #0]
 80260e2:	250a      	movs	r5, #10
 80260e4:	1c5a      	adds	r2, r3, #1
 80260e6:	6022      	str	r2, [r4, #0]
 80260e8:	701d      	strb	r5, [r3, #0]
 80260ea:	e7db      	b.n	80260a4 <_puts_r+0x88>
 80260ec:	0802d2d8 	.word	0x0802d2d8
 80260f0:	0802d2f8 	.word	0x0802d2f8
 80260f4:	0802d2b8 	.word	0x0802d2b8

080260f8 <puts>:
 80260f8:	4b02      	ldr	r3, [pc, #8]	; (8026104 <puts+0xc>)
 80260fa:	4601      	mov	r1, r0
 80260fc:	6818      	ldr	r0, [r3, #0]
 80260fe:	f7ff bf8d 	b.w	802601c <_puts_r>
 8026102:	bf00      	nop
 8026104:	20000340 	.word	0x20000340

08026108 <rand>:
 8026108:	4b16      	ldr	r3, [pc, #88]	; (8026164 <rand+0x5c>)
 802610a:	b510      	push	{r4, lr}
 802610c:	681c      	ldr	r4, [r3, #0]
 802610e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8026110:	b9b3      	cbnz	r3, 8026140 <rand+0x38>
 8026112:	2018      	movs	r0, #24
 8026114:	f7ff fe24 	bl	8025d60 <malloc>
 8026118:	63a0      	str	r0, [r4, #56]	; 0x38
 802611a:	b928      	cbnz	r0, 8026128 <rand+0x20>
 802611c:	4602      	mov	r2, r0
 802611e:	4b12      	ldr	r3, [pc, #72]	; (8026168 <rand+0x60>)
 8026120:	4812      	ldr	r0, [pc, #72]	; (802616c <rand+0x64>)
 8026122:	214e      	movs	r1, #78	; 0x4e
 8026124:	f000 f9e4 	bl	80264f0 <__assert_func>
 8026128:	4a11      	ldr	r2, [pc, #68]	; (8026170 <rand+0x68>)
 802612a:	4b12      	ldr	r3, [pc, #72]	; (8026174 <rand+0x6c>)
 802612c:	e9c0 2300 	strd	r2, r3, [r0]
 8026130:	4b11      	ldr	r3, [pc, #68]	; (8026178 <rand+0x70>)
 8026132:	6083      	str	r3, [r0, #8]
 8026134:	230b      	movs	r3, #11
 8026136:	8183      	strh	r3, [r0, #12]
 8026138:	2201      	movs	r2, #1
 802613a:	2300      	movs	r3, #0
 802613c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8026140:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8026142:	4a0e      	ldr	r2, [pc, #56]	; (802617c <rand+0x74>)
 8026144:	6920      	ldr	r0, [r4, #16]
 8026146:	6963      	ldr	r3, [r4, #20]
 8026148:	490d      	ldr	r1, [pc, #52]	; (8026180 <rand+0x78>)
 802614a:	4342      	muls	r2, r0
 802614c:	fb01 2203 	mla	r2, r1, r3, r2
 8026150:	fba0 0101 	umull	r0, r1, r0, r1
 8026154:	1c43      	adds	r3, r0, #1
 8026156:	eb42 0001 	adc.w	r0, r2, r1
 802615a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802615e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8026162:	bd10      	pop	{r4, pc}
 8026164:	20000340 	.word	0x20000340
 8026168:	0802d208 	.word	0x0802d208
 802616c:	0802d21f 	.word	0x0802d21f
 8026170:	abcd330e 	.word	0xabcd330e
 8026174:	e66d1234 	.word	0xe66d1234
 8026178:	0005deec 	.word	0x0005deec
 802617c:	5851f42d 	.word	0x5851f42d
 8026180:	4c957f2d 	.word	0x4c957f2d

08026184 <_sbrk_r>:
 8026184:	b538      	push	{r3, r4, r5, lr}
 8026186:	4d06      	ldr	r5, [pc, #24]	; (80261a0 <_sbrk_r+0x1c>)
 8026188:	2300      	movs	r3, #0
 802618a:	4604      	mov	r4, r0
 802618c:	4608      	mov	r0, r1
 802618e:	602b      	str	r3, [r5, #0]
 8026190:	f7f2 f934 	bl	80183fc <_sbrk>
 8026194:	1c43      	adds	r3, r0, #1
 8026196:	d102      	bne.n	802619e <_sbrk_r+0x1a>
 8026198:	682b      	ldr	r3, [r5, #0]
 802619a:	b103      	cbz	r3, 802619e <_sbrk_r+0x1a>
 802619c:	6023      	str	r3, [r4, #0]
 802619e:	bd38      	pop	{r3, r4, r5, pc}
 80261a0:	20016278 	.word	0x20016278

080261a4 <setvbuf>:
 80261a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80261a8:	461d      	mov	r5, r3
 80261aa:	4b5d      	ldr	r3, [pc, #372]	; (8026320 <setvbuf+0x17c>)
 80261ac:	681f      	ldr	r7, [r3, #0]
 80261ae:	4604      	mov	r4, r0
 80261b0:	460e      	mov	r6, r1
 80261b2:	4690      	mov	r8, r2
 80261b4:	b127      	cbz	r7, 80261c0 <setvbuf+0x1c>
 80261b6:	69bb      	ldr	r3, [r7, #24]
 80261b8:	b913      	cbnz	r3, 80261c0 <setvbuf+0x1c>
 80261ba:	4638      	mov	r0, r7
 80261bc:	f000 fad0 	bl	8026760 <__sinit>
 80261c0:	4b58      	ldr	r3, [pc, #352]	; (8026324 <setvbuf+0x180>)
 80261c2:	429c      	cmp	r4, r3
 80261c4:	d167      	bne.n	8026296 <setvbuf+0xf2>
 80261c6:	687c      	ldr	r4, [r7, #4]
 80261c8:	f1b8 0f02 	cmp.w	r8, #2
 80261cc:	d006      	beq.n	80261dc <setvbuf+0x38>
 80261ce:	f1b8 0f01 	cmp.w	r8, #1
 80261d2:	f200 809f 	bhi.w	8026314 <setvbuf+0x170>
 80261d6:	2d00      	cmp	r5, #0
 80261d8:	f2c0 809c 	blt.w	8026314 <setvbuf+0x170>
 80261dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80261de:	07db      	lsls	r3, r3, #31
 80261e0:	d405      	bmi.n	80261ee <setvbuf+0x4a>
 80261e2:	89a3      	ldrh	r3, [r4, #12]
 80261e4:	0598      	lsls	r0, r3, #22
 80261e6:	d402      	bmi.n	80261ee <setvbuf+0x4a>
 80261e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80261ea:	f000 fb69 	bl	80268c0 <__retarget_lock_acquire_recursive>
 80261ee:	4621      	mov	r1, r4
 80261f0:	4638      	mov	r0, r7
 80261f2:	f000 fa21 	bl	8026638 <_fflush_r>
 80261f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80261f8:	b141      	cbz	r1, 802620c <setvbuf+0x68>
 80261fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80261fe:	4299      	cmp	r1, r3
 8026200:	d002      	beq.n	8026208 <setvbuf+0x64>
 8026202:	4638      	mov	r0, r7
 8026204:	f7ff fdfc 	bl	8025e00 <_free_r>
 8026208:	2300      	movs	r3, #0
 802620a:	6363      	str	r3, [r4, #52]	; 0x34
 802620c:	2300      	movs	r3, #0
 802620e:	61a3      	str	r3, [r4, #24]
 8026210:	6063      	str	r3, [r4, #4]
 8026212:	89a3      	ldrh	r3, [r4, #12]
 8026214:	0619      	lsls	r1, r3, #24
 8026216:	d503      	bpl.n	8026220 <setvbuf+0x7c>
 8026218:	6921      	ldr	r1, [r4, #16]
 802621a:	4638      	mov	r0, r7
 802621c:	f7ff fdf0 	bl	8025e00 <_free_r>
 8026220:	89a3      	ldrh	r3, [r4, #12]
 8026222:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8026226:	f023 0303 	bic.w	r3, r3, #3
 802622a:	f1b8 0f02 	cmp.w	r8, #2
 802622e:	81a3      	strh	r3, [r4, #12]
 8026230:	d06c      	beq.n	802630c <setvbuf+0x168>
 8026232:	ab01      	add	r3, sp, #4
 8026234:	466a      	mov	r2, sp
 8026236:	4621      	mov	r1, r4
 8026238:	4638      	mov	r0, r7
 802623a:	f000 fb43 	bl	80268c4 <__swhatbuf_r>
 802623e:	89a3      	ldrh	r3, [r4, #12]
 8026240:	4318      	orrs	r0, r3
 8026242:	81a0      	strh	r0, [r4, #12]
 8026244:	2d00      	cmp	r5, #0
 8026246:	d130      	bne.n	80262aa <setvbuf+0x106>
 8026248:	9d00      	ldr	r5, [sp, #0]
 802624a:	4628      	mov	r0, r5
 802624c:	f7ff fd88 	bl	8025d60 <malloc>
 8026250:	4606      	mov	r6, r0
 8026252:	2800      	cmp	r0, #0
 8026254:	d155      	bne.n	8026302 <setvbuf+0x15e>
 8026256:	f8dd 9000 	ldr.w	r9, [sp]
 802625a:	45a9      	cmp	r9, r5
 802625c:	d14a      	bne.n	80262f4 <setvbuf+0x150>
 802625e:	f04f 35ff 	mov.w	r5, #4294967295
 8026262:	2200      	movs	r2, #0
 8026264:	60a2      	str	r2, [r4, #8]
 8026266:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802626a:	6022      	str	r2, [r4, #0]
 802626c:	6122      	str	r2, [r4, #16]
 802626e:	2201      	movs	r2, #1
 8026270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026274:	6162      	str	r2, [r4, #20]
 8026276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026278:	f043 0302 	orr.w	r3, r3, #2
 802627c:	07d2      	lsls	r2, r2, #31
 802627e:	81a3      	strh	r3, [r4, #12]
 8026280:	d405      	bmi.n	802628e <setvbuf+0xea>
 8026282:	f413 7f00 	tst.w	r3, #512	; 0x200
 8026286:	d102      	bne.n	802628e <setvbuf+0xea>
 8026288:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802628a:	f000 fb1a 	bl	80268c2 <__retarget_lock_release_recursive>
 802628e:	4628      	mov	r0, r5
 8026290:	b003      	add	sp, #12
 8026292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026296:	4b24      	ldr	r3, [pc, #144]	; (8026328 <setvbuf+0x184>)
 8026298:	429c      	cmp	r4, r3
 802629a:	d101      	bne.n	80262a0 <setvbuf+0xfc>
 802629c:	68bc      	ldr	r4, [r7, #8]
 802629e:	e793      	b.n	80261c8 <setvbuf+0x24>
 80262a0:	4b22      	ldr	r3, [pc, #136]	; (802632c <setvbuf+0x188>)
 80262a2:	429c      	cmp	r4, r3
 80262a4:	bf08      	it	eq
 80262a6:	68fc      	ldreq	r4, [r7, #12]
 80262a8:	e78e      	b.n	80261c8 <setvbuf+0x24>
 80262aa:	2e00      	cmp	r6, #0
 80262ac:	d0cd      	beq.n	802624a <setvbuf+0xa6>
 80262ae:	69bb      	ldr	r3, [r7, #24]
 80262b0:	b913      	cbnz	r3, 80262b8 <setvbuf+0x114>
 80262b2:	4638      	mov	r0, r7
 80262b4:	f000 fa54 	bl	8026760 <__sinit>
 80262b8:	f1b8 0f01 	cmp.w	r8, #1
 80262bc:	bf08      	it	eq
 80262be:	89a3      	ldrheq	r3, [r4, #12]
 80262c0:	6026      	str	r6, [r4, #0]
 80262c2:	bf04      	itt	eq
 80262c4:	f043 0301 	orreq.w	r3, r3, #1
 80262c8:	81a3      	strheq	r3, [r4, #12]
 80262ca:	89a2      	ldrh	r2, [r4, #12]
 80262cc:	f012 0308 	ands.w	r3, r2, #8
 80262d0:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80262d4:	d01c      	beq.n	8026310 <setvbuf+0x16c>
 80262d6:	07d3      	lsls	r3, r2, #31
 80262d8:	bf41      	itttt	mi
 80262da:	2300      	movmi	r3, #0
 80262dc:	426d      	negmi	r5, r5
 80262de:	60a3      	strmi	r3, [r4, #8]
 80262e0:	61a5      	strmi	r5, [r4, #24]
 80262e2:	bf58      	it	pl
 80262e4:	60a5      	strpl	r5, [r4, #8]
 80262e6:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80262e8:	f015 0501 	ands.w	r5, r5, #1
 80262ec:	d115      	bne.n	802631a <setvbuf+0x176>
 80262ee:	f412 7f00 	tst.w	r2, #512	; 0x200
 80262f2:	e7c8      	b.n	8026286 <setvbuf+0xe2>
 80262f4:	4648      	mov	r0, r9
 80262f6:	f7ff fd33 	bl	8025d60 <malloc>
 80262fa:	4606      	mov	r6, r0
 80262fc:	2800      	cmp	r0, #0
 80262fe:	d0ae      	beq.n	802625e <setvbuf+0xba>
 8026300:	464d      	mov	r5, r9
 8026302:	89a3      	ldrh	r3, [r4, #12]
 8026304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026308:	81a3      	strh	r3, [r4, #12]
 802630a:	e7d0      	b.n	80262ae <setvbuf+0x10a>
 802630c:	2500      	movs	r5, #0
 802630e:	e7a8      	b.n	8026262 <setvbuf+0xbe>
 8026310:	60a3      	str	r3, [r4, #8]
 8026312:	e7e8      	b.n	80262e6 <setvbuf+0x142>
 8026314:	f04f 35ff 	mov.w	r5, #4294967295
 8026318:	e7b9      	b.n	802628e <setvbuf+0xea>
 802631a:	2500      	movs	r5, #0
 802631c:	e7b7      	b.n	802628e <setvbuf+0xea>
 802631e:	bf00      	nop
 8026320:	20000340 	.word	0x20000340
 8026324:	0802d2d8 	.word	0x0802d2d8
 8026328:	0802d2f8 	.word	0x0802d2f8
 802632c:	0802d2b8 	.word	0x0802d2b8

08026330 <siprintf>:
 8026330:	b40e      	push	{r1, r2, r3}
 8026332:	b500      	push	{lr}
 8026334:	b09c      	sub	sp, #112	; 0x70
 8026336:	ab1d      	add	r3, sp, #116	; 0x74
 8026338:	9002      	str	r0, [sp, #8]
 802633a:	9006      	str	r0, [sp, #24]
 802633c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8026340:	4809      	ldr	r0, [pc, #36]	; (8026368 <siprintf+0x38>)
 8026342:	9107      	str	r1, [sp, #28]
 8026344:	9104      	str	r1, [sp, #16]
 8026346:	4909      	ldr	r1, [pc, #36]	; (802636c <siprintf+0x3c>)
 8026348:	f853 2b04 	ldr.w	r2, [r3], #4
 802634c:	9105      	str	r1, [sp, #20]
 802634e:	6800      	ldr	r0, [r0, #0]
 8026350:	9301      	str	r3, [sp, #4]
 8026352:	a902      	add	r1, sp, #8
 8026354:	f000 fb84 	bl	8026a60 <_svfiprintf_r>
 8026358:	9b02      	ldr	r3, [sp, #8]
 802635a:	2200      	movs	r2, #0
 802635c:	701a      	strb	r2, [r3, #0]
 802635e:	b01c      	add	sp, #112	; 0x70
 8026360:	f85d eb04 	ldr.w	lr, [sp], #4
 8026364:	b003      	add	sp, #12
 8026366:	4770      	bx	lr
 8026368:	20000340 	.word	0x20000340
 802636c:	ffff0208 	.word	0xffff0208

08026370 <__swbuf_r>:
 8026370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026372:	460e      	mov	r6, r1
 8026374:	4614      	mov	r4, r2
 8026376:	4605      	mov	r5, r0
 8026378:	b118      	cbz	r0, 8026382 <__swbuf_r+0x12>
 802637a:	6983      	ldr	r3, [r0, #24]
 802637c:	b90b      	cbnz	r3, 8026382 <__swbuf_r+0x12>
 802637e:	f000 f9ef 	bl	8026760 <__sinit>
 8026382:	4b21      	ldr	r3, [pc, #132]	; (8026408 <__swbuf_r+0x98>)
 8026384:	429c      	cmp	r4, r3
 8026386:	d12b      	bne.n	80263e0 <__swbuf_r+0x70>
 8026388:	686c      	ldr	r4, [r5, #4]
 802638a:	69a3      	ldr	r3, [r4, #24]
 802638c:	60a3      	str	r3, [r4, #8]
 802638e:	89a3      	ldrh	r3, [r4, #12]
 8026390:	071a      	lsls	r2, r3, #28
 8026392:	d52f      	bpl.n	80263f4 <__swbuf_r+0x84>
 8026394:	6923      	ldr	r3, [r4, #16]
 8026396:	b36b      	cbz	r3, 80263f4 <__swbuf_r+0x84>
 8026398:	6923      	ldr	r3, [r4, #16]
 802639a:	6820      	ldr	r0, [r4, #0]
 802639c:	1ac0      	subs	r0, r0, r3
 802639e:	6963      	ldr	r3, [r4, #20]
 80263a0:	b2f6      	uxtb	r6, r6
 80263a2:	4283      	cmp	r3, r0
 80263a4:	4637      	mov	r7, r6
 80263a6:	dc04      	bgt.n	80263b2 <__swbuf_r+0x42>
 80263a8:	4621      	mov	r1, r4
 80263aa:	4628      	mov	r0, r5
 80263ac:	f000 f944 	bl	8026638 <_fflush_r>
 80263b0:	bb30      	cbnz	r0, 8026400 <__swbuf_r+0x90>
 80263b2:	68a3      	ldr	r3, [r4, #8]
 80263b4:	3b01      	subs	r3, #1
 80263b6:	60a3      	str	r3, [r4, #8]
 80263b8:	6823      	ldr	r3, [r4, #0]
 80263ba:	1c5a      	adds	r2, r3, #1
 80263bc:	6022      	str	r2, [r4, #0]
 80263be:	701e      	strb	r6, [r3, #0]
 80263c0:	6963      	ldr	r3, [r4, #20]
 80263c2:	3001      	adds	r0, #1
 80263c4:	4283      	cmp	r3, r0
 80263c6:	d004      	beq.n	80263d2 <__swbuf_r+0x62>
 80263c8:	89a3      	ldrh	r3, [r4, #12]
 80263ca:	07db      	lsls	r3, r3, #31
 80263cc:	d506      	bpl.n	80263dc <__swbuf_r+0x6c>
 80263ce:	2e0a      	cmp	r6, #10
 80263d0:	d104      	bne.n	80263dc <__swbuf_r+0x6c>
 80263d2:	4621      	mov	r1, r4
 80263d4:	4628      	mov	r0, r5
 80263d6:	f000 f92f 	bl	8026638 <_fflush_r>
 80263da:	b988      	cbnz	r0, 8026400 <__swbuf_r+0x90>
 80263dc:	4638      	mov	r0, r7
 80263de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263e0:	4b0a      	ldr	r3, [pc, #40]	; (802640c <__swbuf_r+0x9c>)
 80263e2:	429c      	cmp	r4, r3
 80263e4:	d101      	bne.n	80263ea <__swbuf_r+0x7a>
 80263e6:	68ac      	ldr	r4, [r5, #8]
 80263e8:	e7cf      	b.n	802638a <__swbuf_r+0x1a>
 80263ea:	4b09      	ldr	r3, [pc, #36]	; (8026410 <__swbuf_r+0xa0>)
 80263ec:	429c      	cmp	r4, r3
 80263ee:	bf08      	it	eq
 80263f0:	68ec      	ldreq	r4, [r5, #12]
 80263f2:	e7ca      	b.n	802638a <__swbuf_r+0x1a>
 80263f4:	4621      	mov	r1, r4
 80263f6:	4628      	mov	r0, r5
 80263f8:	f000 f80c 	bl	8026414 <__swsetup_r>
 80263fc:	2800      	cmp	r0, #0
 80263fe:	d0cb      	beq.n	8026398 <__swbuf_r+0x28>
 8026400:	f04f 37ff 	mov.w	r7, #4294967295
 8026404:	e7ea      	b.n	80263dc <__swbuf_r+0x6c>
 8026406:	bf00      	nop
 8026408:	0802d2d8 	.word	0x0802d2d8
 802640c:	0802d2f8 	.word	0x0802d2f8
 8026410:	0802d2b8 	.word	0x0802d2b8

08026414 <__swsetup_r>:
 8026414:	4b32      	ldr	r3, [pc, #200]	; (80264e0 <__swsetup_r+0xcc>)
 8026416:	b570      	push	{r4, r5, r6, lr}
 8026418:	681d      	ldr	r5, [r3, #0]
 802641a:	4606      	mov	r6, r0
 802641c:	460c      	mov	r4, r1
 802641e:	b125      	cbz	r5, 802642a <__swsetup_r+0x16>
 8026420:	69ab      	ldr	r3, [r5, #24]
 8026422:	b913      	cbnz	r3, 802642a <__swsetup_r+0x16>
 8026424:	4628      	mov	r0, r5
 8026426:	f000 f99b 	bl	8026760 <__sinit>
 802642a:	4b2e      	ldr	r3, [pc, #184]	; (80264e4 <__swsetup_r+0xd0>)
 802642c:	429c      	cmp	r4, r3
 802642e:	d10f      	bne.n	8026450 <__swsetup_r+0x3c>
 8026430:	686c      	ldr	r4, [r5, #4]
 8026432:	89a3      	ldrh	r3, [r4, #12]
 8026434:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8026438:	0719      	lsls	r1, r3, #28
 802643a:	d42c      	bmi.n	8026496 <__swsetup_r+0x82>
 802643c:	06dd      	lsls	r5, r3, #27
 802643e:	d411      	bmi.n	8026464 <__swsetup_r+0x50>
 8026440:	2309      	movs	r3, #9
 8026442:	6033      	str	r3, [r6, #0]
 8026444:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8026448:	81a3      	strh	r3, [r4, #12]
 802644a:	f04f 30ff 	mov.w	r0, #4294967295
 802644e:	e03e      	b.n	80264ce <__swsetup_r+0xba>
 8026450:	4b25      	ldr	r3, [pc, #148]	; (80264e8 <__swsetup_r+0xd4>)
 8026452:	429c      	cmp	r4, r3
 8026454:	d101      	bne.n	802645a <__swsetup_r+0x46>
 8026456:	68ac      	ldr	r4, [r5, #8]
 8026458:	e7eb      	b.n	8026432 <__swsetup_r+0x1e>
 802645a:	4b24      	ldr	r3, [pc, #144]	; (80264ec <__swsetup_r+0xd8>)
 802645c:	429c      	cmp	r4, r3
 802645e:	bf08      	it	eq
 8026460:	68ec      	ldreq	r4, [r5, #12]
 8026462:	e7e6      	b.n	8026432 <__swsetup_r+0x1e>
 8026464:	0758      	lsls	r0, r3, #29
 8026466:	d512      	bpl.n	802648e <__swsetup_r+0x7a>
 8026468:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802646a:	b141      	cbz	r1, 802647e <__swsetup_r+0x6a>
 802646c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026470:	4299      	cmp	r1, r3
 8026472:	d002      	beq.n	802647a <__swsetup_r+0x66>
 8026474:	4630      	mov	r0, r6
 8026476:	f7ff fcc3 	bl	8025e00 <_free_r>
 802647a:	2300      	movs	r3, #0
 802647c:	6363      	str	r3, [r4, #52]	; 0x34
 802647e:	89a3      	ldrh	r3, [r4, #12]
 8026480:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8026484:	81a3      	strh	r3, [r4, #12]
 8026486:	2300      	movs	r3, #0
 8026488:	6063      	str	r3, [r4, #4]
 802648a:	6923      	ldr	r3, [r4, #16]
 802648c:	6023      	str	r3, [r4, #0]
 802648e:	89a3      	ldrh	r3, [r4, #12]
 8026490:	f043 0308 	orr.w	r3, r3, #8
 8026494:	81a3      	strh	r3, [r4, #12]
 8026496:	6923      	ldr	r3, [r4, #16]
 8026498:	b94b      	cbnz	r3, 80264ae <__swsetup_r+0x9a>
 802649a:	89a3      	ldrh	r3, [r4, #12]
 802649c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80264a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80264a4:	d003      	beq.n	80264ae <__swsetup_r+0x9a>
 80264a6:	4621      	mov	r1, r4
 80264a8:	4630      	mov	r0, r6
 80264aa:	f000 fa31 	bl	8026910 <__smakebuf_r>
 80264ae:	89a0      	ldrh	r0, [r4, #12]
 80264b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80264b4:	f010 0301 	ands.w	r3, r0, #1
 80264b8:	d00a      	beq.n	80264d0 <__swsetup_r+0xbc>
 80264ba:	2300      	movs	r3, #0
 80264bc:	60a3      	str	r3, [r4, #8]
 80264be:	6963      	ldr	r3, [r4, #20]
 80264c0:	425b      	negs	r3, r3
 80264c2:	61a3      	str	r3, [r4, #24]
 80264c4:	6923      	ldr	r3, [r4, #16]
 80264c6:	b943      	cbnz	r3, 80264da <__swsetup_r+0xc6>
 80264c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80264cc:	d1ba      	bne.n	8026444 <__swsetup_r+0x30>
 80264ce:	bd70      	pop	{r4, r5, r6, pc}
 80264d0:	0781      	lsls	r1, r0, #30
 80264d2:	bf58      	it	pl
 80264d4:	6963      	ldrpl	r3, [r4, #20]
 80264d6:	60a3      	str	r3, [r4, #8]
 80264d8:	e7f4      	b.n	80264c4 <__swsetup_r+0xb0>
 80264da:	2000      	movs	r0, #0
 80264dc:	e7f7      	b.n	80264ce <__swsetup_r+0xba>
 80264de:	bf00      	nop
 80264e0:	20000340 	.word	0x20000340
 80264e4:	0802d2d8 	.word	0x0802d2d8
 80264e8:	0802d2f8 	.word	0x0802d2f8
 80264ec:	0802d2b8 	.word	0x0802d2b8

080264f0 <__assert_func>:
 80264f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80264f2:	4614      	mov	r4, r2
 80264f4:	461a      	mov	r2, r3
 80264f6:	4b09      	ldr	r3, [pc, #36]	; (802651c <__assert_func+0x2c>)
 80264f8:	681b      	ldr	r3, [r3, #0]
 80264fa:	4605      	mov	r5, r0
 80264fc:	68d8      	ldr	r0, [r3, #12]
 80264fe:	b14c      	cbz	r4, 8026514 <__assert_func+0x24>
 8026500:	4b07      	ldr	r3, [pc, #28]	; (8026520 <__assert_func+0x30>)
 8026502:	9100      	str	r1, [sp, #0]
 8026504:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026508:	4906      	ldr	r1, [pc, #24]	; (8026524 <__assert_func+0x34>)
 802650a:	462b      	mov	r3, r5
 802650c:	f000 f9a6 	bl	802685c <fiprintf>
 8026510:	f000 ff32 	bl	8027378 <abort>
 8026514:	4b04      	ldr	r3, [pc, #16]	; (8026528 <__assert_func+0x38>)
 8026516:	461c      	mov	r4, r3
 8026518:	e7f3      	b.n	8026502 <__assert_func+0x12>
 802651a:	bf00      	nop
 802651c:	20000340 	.word	0x20000340
 8026520:	0802d27a 	.word	0x0802d27a
 8026524:	0802d287 	.word	0x0802d287
 8026528:	0802d2b5 	.word	0x0802d2b5

0802652c <__sflush_r>:
 802652c:	898a      	ldrh	r2, [r1, #12]
 802652e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026532:	4605      	mov	r5, r0
 8026534:	0710      	lsls	r0, r2, #28
 8026536:	460c      	mov	r4, r1
 8026538:	d458      	bmi.n	80265ec <__sflush_r+0xc0>
 802653a:	684b      	ldr	r3, [r1, #4]
 802653c:	2b00      	cmp	r3, #0
 802653e:	dc05      	bgt.n	802654c <__sflush_r+0x20>
 8026540:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026542:	2b00      	cmp	r3, #0
 8026544:	dc02      	bgt.n	802654c <__sflush_r+0x20>
 8026546:	2000      	movs	r0, #0
 8026548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802654c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802654e:	2e00      	cmp	r6, #0
 8026550:	d0f9      	beq.n	8026546 <__sflush_r+0x1a>
 8026552:	2300      	movs	r3, #0
 8026554:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026558:	682f      	ldr	r7, [r5, #0]
 802655a:	602b      	str	r3, [r5, #0]
 802655c:	d032      	beq.n	80265c4 <__sflush_r+0x98>
 802655e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026560:	89a3      	ldrh	r3, [r4, #12]
 8026562:	075a      	lsls	r2, r3, #29
 8026564:	d505      	bpl.n	8026572 <__sflush_r+0x46>
 8026566:	6863      	ldr	r3, [r4, #4]
 8026568:	1ac0      	subs	r0, r0, r3
 802656a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802656c:	b10b      	cbz	r3, 8026572 <__sflush_r+0x46>
 802656e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026570:	1ac0      	subs	r0, r0, r3
 8026572:	2300      	movs	r3, #0
 8026574:	4602      	mov	r2, r0
 8026576:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026578:	6a21      	ldr	r1, [r4, #32]
 802657a:	4628      	mov	r0, r5
 802657c:	47b0      	blx	r6
 802657e:	1c43      	adds	r3, r0, #1
 8026580:	89a3      	ldrh	r3, [r4, #12]
 8026582:	d106      	bne.n	8026592 <__sflush_r+0x66>
 8026584:	6829      	ldr	r1, [r5, #0]
 8026586:	291d      	cmp	r1, #29
 8026588:	d82c      	bhi.n	80265e4 <__sflush_r+0xb8>
 802658a:	4a2a      	ldr	r2, [pc, #168]	; (8026634 <__sflush_r+0x108>)
 802658c:	40ca      	lsrs	r2, r1
 802658e:	07d6      	lsls	r6, r2, #31
 8026590:	d528      	bpl.n	80265e4 <__sflush_r+0xb8>
 8026592:	2200      	movs	r2, #0
 8026594:	6062      	str	r2, [r4, #4]
 8026596:	04d9      	lsls	r1, r3, #19
 8026598:	6922      	ldr	r2, [r4, #16]
 802659a:	6022      	str	r2, [r4, #0]
 802659c:	d504      	bpl.n	80265a8 <__sflush_r+0x7c>
 802659e:	1c42      	adds	r2, r0, #1
 80265a0:	d101      	bne.n	80265a6 <__sflush_r+0x7a>
 80265a2:	682b      	ldr	r3, [r5, #0]
 80265a4:	b903      	cbnz	r3, 80265a8 <__sflush_r+0x7c>
 80265a6:	6560      	str	r0, [r4, #84]	; 0x54
 80265a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80265aa:	602f      	str	r7, [r5, #0]
 80265ac:	2900      	cmp	r1, #0
 80265ae:	d0ca      	beq.n	8026546 <__sflush_r+0x1a>
 80265b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80265b4:	4299      	cmp	r1, r3
 80265b6:	d002      	beq.n	80265be <__sflush_r+0x92>
 80265b8:	4628      	mov	r0, r5
 80265ba:	f7ff fc21 	bl	8025e00 <_free_r>
 80265be:	2000      	movs	r0, #0
 80265c0:	6360      	str	r0, [r4, #52]	; 0x34
 80265c2:	e7c1      	b.n	8026548 <__sflush_r+0x1c>
 80265c4:	6a21      	ldr	r1, [r4, #32]
 80265c6:	2301      	movs	r3, #1
 80265c8:	4628      	mov	r0, r5
 80265ca:	47b0      	blx	r6
 80265cc:	1c41      	adds	r1, r0, #1
 80265ce:	d1c7      	bne.n	8026560 <__sflush_r+0x34>
 80265d0:	682b      	ldr	r3, [r5, #0]
 80265d2:	2b00      	cmp	r3, #0
 80265d4:	d0c4      	beq.n	8026560 <__sflush_r+0x34>
 80265d6:	2b1d      	cmp	r3, #29
 80265d8:	d001      	beq.n	80265de <__sflush_r+0xb2>
 80265da:	2b16      	cmp	r3, #22
 80265dc:	d101      	bne.n	80265e2 <__sflush_r+0xb6>
 80265de:	602f      	str	r7, [r5, #0]
 80265e0:	e7b1      	b.n	8026546 <__sflush_r+0x1a>
 80265e2:	89a3      	ldrh	r3, [r4, #12]
 80265e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80265e8:	81a3      	strh	r3, [r4, #12]
 80265ea:	e7ad      	b.n	8026548 <__sflush_r+0x1c>
 80265ec:	690f      	ldr	r7, [r1, #16]
 80265ee:	2f00      	cmp	r7, #0
 80265f0:	d0a9      	beq.n	8026546 <__sflush_r+0x1a>
 80265f2:	0793      	lsls	r3, r2, #30
 80265f4:	680e      	ldr	r6, [r1, #0]
 80265f6:	bf08      	it	eq
 80265f8:	694b      	ldreq	r3, [r1, #20]
 80265fa:	600f      	str	r7, [r1, #0]
 80265fc:	bf18      	it	ne
 80265fe:	2300      	movne	r3, #0
 8026600:	eba6 0807 	sub.w	r8, r6, r7
 8026604:	608b      	str	r3, [r1, #8]
 8026606:	f1b8 0f00 	cmp.w	r8, #0
 802660a:	dd9c      	ble.n	8026546 <__sflush_r+0x1a>
 802660c:	6a21      	ldr	r1, [r4, #32]
 802660e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026610:	4643      	mov	r3, r8
 8026612:	463a      	mov	r2, r7
 8026614:	4628      	mov	r0, r5
 8026616:	47b0      	blx	r6
 8026618:	2800      	cmp	r0, #0
 802661a:	dc06      	bgt.n	802662a <__sflush_r+0xfe>
 802661c:	89a3      	ldrh	r3, [r4, #12]
 802661e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026622:	81a3      	strh	r3, [r4, #12]
 8026624:	f04f 30ff 	mov.w	r0, #4294967295
 8026628:	e78e      	b.n	8026548 <__sflush_r+0x1c>
 802662a:	4407      	add	r7, r0
 802662c:	eba8 0800 	sub.w	r8, r8, r0
 8026630:	e7e9      	b.n	8026606 <__sflush_r+0xda>
 8026632:	bf00      	nop
 8026634:	20400001 	.word	0x20400001

08026638 <_fflush_r>:
 8026638:	b538      	push	{r3, r4, r5, lr}
 802663a:	690b      	ldr	r3, [r1, #16]
 802663c:	4605      	mov	r5, r0
 802663e:	460c      	mov	r4, r1
 8026640:	b913      	cbnz	r3, 8026648 <_fflush_r+0x10>
 8026642:	2500      	movs	r5, #0
 8026644:	4628      	mov	r0, r5
 8026646:	bd38      	pop	{r3, r4, r5, pc}
 8026648:	b118      	cbz	r0, 8026652 <_fflush_r+0x1a>
 802664a:	6983      	ldr	r3, [r0, #24]
 802664c:	b90b      	cbnz	r3, 8026652 <_fflush_r+0x1a>
 802664e:	f000 f887 	bl	8026760 <__sinit>
 8026652:	4b14      	ldr	r3, [pc, #80]	; (80266a4 <_fflush_r+0x6c>)
 8026654:	429c      	cmp	r4, r3
 8026656:	d11b      	bne.n	8026690 <_fflush_r+0x58>
 8026658:	686c      	ldr	r4, [r5, #4]
 802665a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802665e:	2b00      	cmp	r3, #0
 8026660:	d0ef      	beq.n	8026642 <_fflush_r+0xa>
 8026662:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026664:	07d0      	lsls	r0, r2, #31
 8026666:	d404      	bmi.n	8026672 <_fflush_r+0x3a>
 8026668:	0599      	lsls	r1, r3, #22
 802666a:	d402      	bmi.n	8026672 <_fflush_r+0x3a>
 802666c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802666e:	f000 f927 	bl	80268c0 <__retarget_lock_acquire_recursive>
 8026672:	4628      	mov	r0, r5
 8026674:	4621      	mov	r1, r4
 8026676:	f7ff ff59 	bl	802652c <__sflush_r>
 802667a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802667c:	07da      	lsls	r2, r3, #31
 802667e:	4605      	mov	r5, r0
 8026680:	d4e0      	bmi.n	8026644 <_fflush_r+0xc>
 8026682:	89a3      	ldrh	r3, [r4, #12]
 8026684:	059b      	lsls	r3, r3, #22
 8026686:	d4dd      	bmi.n	8026644 <_fflush_r+0xc>
 8026688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802668a:	f000 f91a 	bl	80268c2 <__retarget_lock_release_recursive>
 802668e:	e7d9      	b.n	8026644 <_fflush_r+0xc>
 8026690:	4b05      	ldr	r3, [pc, #20]	; (80266a8 <_fflush_r+0x70>)
 8026692:	429c      	cmp	r4, r3
 8026694:	d101      	bne.n	802669a <_fflush_r+0x62>
 8026696:	68ac      	ldr	r4, [r5, #8]
 8026698:	e7df      	b.n	802665a <_fflush_r+0x22>
 802669a:	4b04      	ldr	r3, [pc, #16]	; (80266ac <_fflush_r+0x74>)
 802669c:	429c      	cmp	r4, r3
 802669e:	bf08      	it	eq
 80266a0:	68ec      	ldreq	r4, [r5, #12]
 80266a2:	e7da      	b.n	802665a <_fflush_r+0x22>
 80266a4:	0802d2d8 	.word	0x0802d2d8
 80266a8:	0802d2f8 	.word	0x0802d2f8
 80266ac:	0802d2b8 	.word	0x0802d2b8

080266b0 <std>:
 80266b0:	2300      	movs	r3, #0
 80266b2:	b510      	push	{r4, lr}
 80266b4:	4604      	mov	r4, r0
 80266b6:	e9c0 3300 	strd	r3, r3, [r0]
 80266ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80266be:	6083      	str	r3, [r0, #8]
 80266c0:	8181      	strh	r1, [r0, #12]
 80266c2:	6643      	str	r3, [r0, #100]	; 0x64
 80266c4:	81c2      	strh	r2, [r0, #14]
 80266c6:	6183      	str	r3, [r0, #24]
 80266c8:	4619      	mov	r1, r3
 80266ca:	2208      	movs	r2, #8
 80266cc:	305c      	adds	r0, #92	; 0x5c
 80266ce:	f7ff fb8f 	bl	8025df0 <memset>
 80266d2:	4b05      	ldr	r3, [pc, #20]	; (80266e8 <std+0x38>)
 80266d4:	6263      	str	r3, [r4, #36]	; 0x24
 80266d6:	4b05      	ldr	r3, [pc, #20]	; (80266ec <std+0x3c>)
 80266d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80266da:	4b05      	ldr	r3, [pc, #20]	; (80266f0 <std+0x40>)
 80266dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80266de:	4b05      	ldr	r3, [pc, #20]	; (80266f4 <std+0x44>)
 80266e0:	6224      	str	r4, [r4, #32]
 80266e2:	6323      	str	r3, [r4, #48]	; 0x30
 80266e4:	bd10      	pop	{r4, pc}
 80266e6:	bf00      	nop
 80266e8:	080272cd 	.word	0x080272cd
 80266ec:	080272ef 	.word	0x080272ef
 80266f0:	08027327 	.word	0x08027327
 80266f4:	0802734b 	.word	0x0802734b

080266f8 <_cleanup_r>:
 80266f8:	4901      	ldr	r1, [pc, #4]	; (8026700 <_cleanup_r+0x8>)
 80266fa:	f000 b8c1 	b.w	8026880 <_fwalk_reent>
 80266fe:	bf00      	nop
 8026700:	08026639 	.word	0x08026639

08026704 <__sfmoreglue>:
 8026704:	b570      	push	{r4, r5, r6, lr}
 8026706:	2268      	movs	r2, #104	; 0x68
 8026708:	1e4d      	subs	r5, r1, #1
 802670a:	4355      	muls	r5, r2
 802670c:	460e      	mov	r6, r1
 802670e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026712:	f7ff fbe1 	bl	8025ed8 <_malloc_r>
 8026716:	4604      	mov	r4, r0
 8026718:	b140      	cbz	r0, 802672c <__sfmoreglue+0x28>
 802671a:	2100      	movs	r1, #0
 802671c:	e9c0 1600 	strd	r1, r6, [r0]
 8026720:	300c      	adds	r0, #12
 8026722:	60a0      	str	r0, [r4, #8]
 8026724:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026728:	f7ff fb62 	bl	8025df0 <memset>
 802672c:	4620      	mov	r0, r4
 802672e:	bd70      	pop	{r4, r5, r6, pc}

08026730 <__sfp_lock_acquire>:
 8026730:	4801      	ldr	r0, [pc, #4]	; (8026738 <__sfp_lock_acquire+0x8>)
 8026732:	f000 b8c5 	b.w	80268c0 <__retarget_lock_acquire_recursive>
 8026736:	bf00      	nop
 8026738:	2001627d 	.word	0x2001627d

0802673c <__sfp_lock_release>:
 802673c:	4801      	ldr	r0, [pc, #4]	; (8026744 <__sfp_lock_release+0x8>)
 802673e:	f000 b8c0 	b.w	80268c2 <__retarget_lock_release_recursive>
 8026742:	bf00      	nop
 8026744:	2001627d 	.word	0x2001627d

08026748 <__sinit_lock_acquire>:
 8026748:	4801      	ldr	r0, [pc, #4]	; (8026750 <__sinit_lock_acquire+0x8>)
 802674a:	f000 b8b9 	b.w	80268c0 <__retarget_lock_acquire_recursive>
 802674e:	bf00      	nop
 8026750:	2001627e 	.word	0x2001627e

08026754 <__sinit_lock_release>:
 8026754:	4801      	ldr	r0, [pc, #4]	; (802675c <__sinit_lock_release+0x8>)
 8026756:	f000 b8b4 	b.w	80268c2 <__retarget_lock_release_recursive>
 802675a:	bf00      	nop
 802675c:	2001627e 	.word	0x2001627e

08026760 <__sinit>:
 8026760:	b510      	push	{r4, lr}
 8026762:	4604      	mov	r4, r0
 8026764:	f7ff fff0 	bl	8026748 <__sinit_lock_acquire>
 8026768:	69a3      	ldr	r3, [r4, #24]
 802676a:	b11b      	cbz	r3, 8026774 <__sinit+0x14>
 802676c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026770:	f7ff bff0 	b.w	8026754 <__sinit_lock_release>
 8026774:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026778:	6523      	str	r3, [r4, #80]	; 0x50
 802677a:	4b13      	ldr	r3, [pc, #76]	; (80267c8 <__sinit+0x68>)
 802677c:	4a13      	ldr	r2, [pc, #76]	; (80267cc <__sinit+0x6c>)
 802677e:	681b      	ldr	r3, [r3, #0]
 8026780:	62a2      	str	r2, [r4, #40]	; 0x28
 8026782:	42a3      	cmp	r3, r4
 8026784:	bf04      	itt	eq
 8026786:	2301      	moveq	r3, #1
 8026788:	61a3      	streq	r3, [r4, #24]
 802678a:	4620      	mov	r0, r4
 802678c:	f000 f820 	bl	80267d0 <__sfp>
 8026790:	6060      	str	r0, [r4, #4]
 8026792:	4620      	mov	r0, r4
 8026794:	f000 f81c 	bl	80267d0 <__sfp>
 8026798:	60a0      	str	r0, [r4, #8]
 802679a:	4620      	mov	r0, r4
 802679c:	f000 f818 	bl	80267d0 <__sfp>
 80267a0:	2200      	movs	r2, #0
 80267a2:	60e0      	str	r0, [r4, #12]
 80267a4:	2104      	movs	r1, #4
 80267a6:	6860      	ldr	r0, [r4, #4]
 80267a8:	f7ff ff82 	bl	80266b0 <std>
 80267ac:	68a0      	ldr	r0, [r4, #8]
 80267ae:	2201      	movs	r2, #1
 80267b0:	2109      	movs	r1, #9
 80267b2:	f7ff ff7d 	bl	80266b0 <std>
 80267b6:	68e0      	ldr	r0, [r4, #12]
 80267b8:	2202      	movs	r2, #2
 80267ba:	2112      	movs	r1, #18
 80267bc:	f7ff ff78 	bl	80266b0 <std>
 80267c0:	2301      	movs	r3, #1
 80267c2:	61a3      	str	r3, [r4, #24]
 80267c4:	e7d2      	b.n	802676c <__sinit+0xc>
 80267c6:	bf00      	nop
 80267c8:	0802d204 	.word	0x0802d204
 80267cc:	080266f9 	.word	0x080266f9

080267d0 <__sfp>:
 80267d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80267d2:	4607      	mov	r7, r0
 80267d4:	f7ff ffac 	bl	8026730 <__sfp_lock_acquire>
 80267d8:	4b1e      	ldr	r3, [pc, #120]	; (8026854 <__sfp+0x84>)
 80267da:	681e      	ldr	r6, [r3, #0]
 80267dc:	69b3      	ldr	r3, [r6, #24]
 80267de:	b913      	cbnz	r3, 80267e6 <__sfp+0x16>
 80267e0:	4630      	mov	r0, r6
 80267e2:	f7ff ffbd 	bl	8026760 <__sinit>
 80267e6:	3648      	adds	r6, #72	; 0x48
 80267e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80267ec:	3b01      	subs	r3, #1
 80267ee:	d503      	bpl.n	80267f8 <__sfp+0x28>
 80267f0:	6833      	ldr	r3, [r6, #0]
 80267f2:	b30b      	cbz	r3, 8026838 <__sfp+0x68>
 80267f4:	6836      	ldr	r6, [r6, #0]
 80267f6:	e7f7      	b.n	80267e8 <__sfp+0x18>
 80267f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80267fc:	b9d5      	cbnz	r5, 8026834 <__sfp+0x64>
 80267fe:	4b16      	ldr	r3, [pc, #88]	; (8026858 <__sfp+0x88>)
 8026800:	60e3      	str	r3, [r4, #12]
 8026802:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026806:	6665      	str	r5, [r4, #100]	; 0x64
 8026808:	f000 f859 	bl	80268be <__retarget_lock_init_recursive>
 802680c:	f7ff ff96 	bl	802673c <__sfp_lock_release>
 8026810:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026814:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026818:	6025      	str	r5, [r4, #0]
 802681a:	61a5      	str	r5, [r4, #24]
 802681c:	2208      	movs	r2, #8
 802681e:	4629      	mov	r1, r5
 8026820:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026824:	f7ff fae4 	bl	8025df0 <memset>
 8026828:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 802682c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026830:	4620      	mov	r0, r4
 8026832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026834:	3468      	adds	r4, #104	; 0x68
 8026836:	e7d9      	b.n	80267ec <__sfp+0x1c>
 8026838:	2104      	movs	r1, #4
 802683a:	4638      	mov	r0, r7
 802683c:	f7ff ff62 	bl	8026704 <__sfmoreglue>
 8026840:	4604      	mov	r4, r0
 8026842:	6030      	str	r0, [r6, #0]
 8026844:	2800      	cmp	r0, #0
 8026846:	d1d5      	bne.n	80267f4 <__sfp+0x24>
 8026848:	f7ff ff78 	bl	802673c <__sfp_lock_release>
 802684c:	230c      	movs	r3, #12
 802684e:	603b      	str	r3, [r7, #0]
 8026850:	e7ee      	b.n	8026830 <__sfp+0x60>
 8026852:	bf00      	nop
 8026854:	0802d204 	.word	0x0802d204
 8026858:	ffff0001 	.word	0xffff0001

0802685c <fiprintf>:
 802685c:	b40e      	push	{r1, r2, r3}
 802685e:	b503      	push	{r0, r1, lr}
 8026860:	4601      	mov	r1, r0
 8026862:	ab03      	add	r3, sp, #12
 8026864:	4805      	ldr	r0, [pc, #20]	; (802687c <fiprintf+0x20>)
 8026866:	f853 2b04 	ldr.w	r2, [r3], #4
 802686a:	6800      	ldr	r0, [r0, #0]
 802686c:	9301      	str	r3, [sp, #4]
 802686e:	f000 fa21 	bl	8026cb4 <_vfiprintf_r>
 8026872:	b002      	add	sp, #8
 8026874:	f85d eb04 	ldr.w	lr, [sp], #4
 8026878:	b003      	add	sp, #12
 802687a:	4770      	bx	lr
 802687c:	20000340 	.word	0x20000340

08026880 <_fwalk_reent>:
 8026880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026884:	4606      	mov	r6, r0
 8026886:	4688      	mov	r8, r1
 8026888:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802688c:	2700      	movs	r7, #0
 802688e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026892:	f1b9 0901 	subs.w	r9, r9, #1
 8026896:	d505      	bpl.n	80268a4 <_fwalk_reent+0x24>
 8026898:	6824      	ldr	r4, [r4, #0]
 802689a:	2c00      	cmp	r4, #0
 802689c:	d1f7      	bne.n	802688e <_fwalk_reent+0xe>
 802689e:	4638      	mov	r0, r7
 80268a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80268a4:	89ab      	ldrh	r3, [r5, #12]
 80268a6:	2b01      	cmp	r3, #1
 80268a8:	d907      	bls.n	80268ba <_fwalk_reent+0x3a>
 80268aa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80268ae:	3301      	adds	r3, #1
 80268b0:	d003      	beq.n	80268ba <_fwalk_reent+0x3a>
 80268b2:	4629      	mov	r1, r5
 80268b4:	4630      	mov	r0, r6
 80268b6:	47c0      	blx	r8
 80268b8:	4307      	orrs	r7, r0
 80268ba:	3568      	adds	r5, #104	; 0x68
 80268bc:	e7e9      	b.n	8026892 <_fwalk_reent+0x12>

080268be <__retarget_lock_init_recursive>:
 80268be:	4770      	bx	lr

080268c0 <__retarget_lock_acquire_recursive>:
 80268c0:	4770      	bx	lr

080268c2 <__retarget_lock_release_recursive>:
 80268c2:	4770      	bx	lr

080268c4 <__swhatbuf_r>:
 80268c4:	b570      	push	{r4, r5, r6, lr}
 80268c6:	460e      	mov	r6, r1
 80268c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80268cc:	2900      	cmp	r1, #0
 80268ce:	b096      	sub	sp, #88	; 0x58
 80268d0:	4614      	mov	r4, r2
 80268d2:	461d      	mov	r5, r3
 80268d4:	da08      	bge.n	80268e8 <__swhatbuf_r+0x24>
 80268d6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80268da:	2200      	movs	r2, #0
 80268dc:	602a      	str	r2, [r5, #0]
 80268de:	061a      	lsls	r2, r3, #24
 80268e0:	d410      	bmi.n	8026904 <__swhatbuf_r+0x40>
 80268e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80268e6:	e00e      	b.n	8026906 <__swhatbuf_r+0x42>
 80268e8:	466a      	mov	r2, sp
 80268ea:	f000 fd5d 	bl	80273a8 <_fstat_r>
 80268ee:	2800      	cmp	r0, #0
 80268f0:	dbf1      	blt.n	80268d6 <__swhatbuf_r+0x12>
 80268f2:	9a01      	ldr	r2, [sp, #4]
 80268f4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80268f8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80268fc:	425a      	negs	r2, r3
 80268fe:	415a      	adcs	r2, r3
 8026900:	602a      	str	r2, [r5, #0]
 8026902:	e7ee      	b.n	80268e2 <__swhatbuf_r+0x1e>
 8026904:	2340      	movs	r3, #64	; 0x40
 8026906:	2000      	movs	r0, #0
 8026908:	6023      	str	r3, [r4, #0]
 802690a:	b016      	add	sp, #88	; 0x58
 802690c:	bd70      	pop	{r4, r5, r6, pc}
	...

08026910 <__smakebuf_r>:
 8026910:	898b      	ldrh	r3, [r1, #12]
 8026912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026914:	079d      	lsls	r5, r3, #30
 8026916:	4606      	mov	r6, r0
 8026918:	460c      	mov	r4, r1
 802691a:	d507      	bpl.n	802692c <__smakebuf_r+0x1c>
 802691c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026920:	6023      	str	r3, [r4, #0]
 8026922:	6123      	str	r3, [r4, #16]
 8026924:	2301      	movs	r3, #1
 8026926:	6163      	str	r3, [r4, #20]
 8026928:	b002      	add	sp, #8
 802692a:	bd70      	pop	{r4, r5, r6, pc}
 802692c:	ab01      	add	r3, sp, #4
 802692e:	466a      	mov	r2, sp
 8026930:	f7ff ffc8 	bl	80268c4 <__swhatbuf_r>
 8026934:	9900      	ldr	r1, [sp, #0]
 8026936:	4605      	mov	r5, r0
 8026938:	4630      	mov	r0, r6
 802693a:	f7ff facd 	bl	8025ed8 <_malloc_r>
 802693e:	b948      	cbnz	r0, 8026954 <__smakebuf_r+0x44>
 8026940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026944:	059a      	lsls	r2, r3, #22
 8026946:	d4ef      	bmi.n	8026928 <__smakebuf_r+0x18>
 8026948:	f023 0303 	bic.w	r3, r3, #3
 802694c:	f043 0302 	orr.w	r3, r3, #2
 8026950:	81a3      	strh	r3, [r4, #12]
 8026952:	e7e3      	b.n	802691c <__smakebuf_r+0xc>
 8026954:	4b0d      	ldr	r3, [pc, #52]	; (802698c <__smakebuf_r+0x7c>)
 8026956:	62b3      	str	r3, [r6, #40]	; 0x28
 8026958:	89a3      	ldrh	r3, [r4, #12]
 802695a:	6020      	str	r0, [r4, #0]
 802695c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026960:	81a3      	strh	r3, [r4, #12]
 8026962:	9b00      	ldr	r3, [sp, #0]
 8026964:	6163      	str	r3, [r4, #20]
 8026966:	9b01      	ldr	r3, [sp, #4]
 8026968:	6120      	str	r0, [r4, #16]
 802696a:	b15b      	cbz	r3, 8026984 <__smakebuf_r+0x74>
 802696c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026970:	4630      	mov	r0, r6
 8026972:	f000 fd2b 	bl	80273cc <_isatty_r>
 8026976:	b128      	cbz	r0, 8026984 <__smakebuf_r+0x74>
 8026978:	89a3      	ldrh	r3, [r4, #12]
 802697a:	f023 0303 	bic.w	r3, r3, #3
 802697e:	f043 0301 	orr.w	r3, r3, #1
 8026982:	81a3      	strh	r3, [r4, #12]
 8026984:	89a0      	ldrh	r0, [r4, #12]
 8026986:	4305      	orrs	r5, r0
 8026988:	81a5      	strh	r5, [r4, #12]
 802698a:	e7cd      	b.n	8026928 <__smakebuf_r+0x18>
 802698c:	080266f9 	.word	0x080266f9

08026990 <__malloc_lock>:
 8026990:	4801      	ldr	r0, [pc, #4]	; (8026998 <__malloc_lock+0x8>)
 8026992:	f7ff bf95 	b.w	80268c0 <__retarget_lock_acquire_recursive>
 8026996:	bf00      	nop
 8026998:	2001627c 	.word	0x2001627c

0802699c <__malloc_unlock>:
 802699c:	4801      	ldr	r0, [pc, #4]	; (80269a4 <__malloc_unlock+0x8>)
 802699e:	f7ff bf90 	b.w	80268c2 <__retarget_lock_release_recursive>
 80269a2:	bf00      	nop
 80269a4:	2001627c 	.word	0x2001627c

080269a8 <__ssputs_r>:
 80269a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80269ac:	688e      	ldr	r6, [r1, #8]
 80269ae:	429e      	cmp	r6, r3
 80269b0:	4682      	mov	sl, r0
 80269b2:	460c      	mov	r4, r1
 80269b4:	4690      	mov	r8, r2
 80269b6:	461f      	mov	r7, r3
 80269b8:	d838      	bhi.n	8026a2c <__ssputs_r+0x84>
 80269ba:	898a      	ldrh	r2, [r1, #12]
 80269bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80269c0:	d032      	beq.n	8026a28 <__ssputs_r+0x80>
 80269c2:	6825      	ldr	r5, [r4, #0]
 80269c4:	6909      	ldr	r1, [r1, #16]
 80269c6:	eba5 0901 	sub.w	r9, r5, r1
 80269ca:	6965      	ldr	r5, [r4, #20]
 80269cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80269d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80269d4:	3301      	adds	r3, #1
 80269d6:	444b      	add	r3, r9
 80269d8:	106d      	asrs	r5, r5, #1
 80269da:	429d      	cmp	r5, r3
 80269dc:	bf38      	it	cc
 80269de:	461d      	movcc	r5, r3
 80269e0:	0553      	lsls	r3, r2, #21
 80269e2:	d531      	bpl.n	8026a48 <__ssputs_r+0xa0>
 80269e4:	4629      	mov	r1, r5
 80269e6:	f7ff fa77 	bl	8025ed8 <_malloc_r>
 80269ea:	4606      	mov	r6, r0
 80269ec:	b950      	cbnz	r0, 8026a04 <__ssputs_r+0x5c>
 80269ee:	230c      	movs	r3, #12
 80269f0:	f8ca 3000 	str.w	r3, [sl]
 80269f4:	89a3      	ldrh	r3, [r4, #12]
 80269f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80269fa:	81a3      	strh	r3, [r4, #12]
 80269fc:	f04f 30ff 	mov.w	r0, #4294967295
 8026a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026a04:	6921      	ldr	r1, [r4, #16]
 8026a06:	464a      	mov	r2, r9
 8026a08:	f7ff f9ca 	bl	8025da0 <memcpy>
 8026a0c:	89a3      	ldrh	r3, [r4, #12]
 8026a0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026a12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026a16:	81a3      	strh	r3, [r4, #12]
 8026a18:	6126      	str	r6, [r4, #16]
 8026a1a:	6165      	str	r5, [r4, #20]
 8026a1c:	444e      	add	r6, r9
 8026a1e:	eba5 0509 	sub.w	r5, r5, r9
 8026a22:	6026      	str	r6, [r4, #0]
 8026a24:	60a5      	str	r5, [r4, #8]
 8026a26:	463e      	mov	r6, r7
 8026a28:	42be      	cmp	r6, r7
 8026a2a:	d900      	bls.n	8026a2e <__ssputs_r+0x86>
 8026a2c:	463e      	mov	r6, r7
 8026a2e:	6820      	ldr	r0, [r4, #0]
 8026a30:	4632      	mov	r2, r6
 8026a32:	4641      	mov	r1, r8
 8026a34:	f7ff f9c2 	bl	8025dbc <memmove>
 8026a38:	68a3      	ldr	r3, [r4, #8]
 8026a3a:	1b9b      	subs	r3, r3, r6
 8026a3c:	60a3      	str	r3, [r4, #8]
 8026a3e:	6823      	ldr	r3, [r4, #0]
 8026a40:	4433      	add	r3, r6
 8026a42:	6023      	str	r3, [r4, #0]
 8026a44:	2000      	movs	r0, #0
 8026a46:	e7db      	b.n	8026a00 <__ssputs_r+0x58>
 8026a48:	462a      	mov	r2, r5
 8026a4a:	f000 fce1 	bl	8027410 <_realloc_r>
 8026a4e:	4606      	mov	r6, r0
 8026a50:	2800      	cmp	r0, #0
 8026a52:	d1e1      	bne.n	8026a18 <__ssputs_r+0x70>
 8026a54:	6921      	ldr	r1, [r4, #16]
 8026a56:	4650      	mov	r0, sl
 8026a58:	f7ff f9d2 	bl	8025e00 <_free_r>
 8026a5c:	e7c7      	b.n	80269ee <__ssputs_r+0x46>
	...

08026a60 <_svfiprintf_r>:
 8026a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a64:	4698      	mov	r8, r3
 8026a66:	898b      	ldrh	r3, [r1, #12]
 8026a68:	061b      	lsls	r3, r3, #24
 8026a6a:	b09d      	sub	sp, #116	; 0x74
 8026a6c:	4607      	mov	r7, r0
 8026a6e:	460d      	mov	r5, r1
 8026a70:	4614      	mov	r4, r2
 8026a72:	d50e      	bpl.n	8026a92 <_svfiprintf_r+0x32>
 8026a74:	690b      	ldr	r3, [r1, #16]
 8026a76:	b963      	cbnz	r3, 8026a92 <_svfiprintf_r+0x32>
 8026a78:	2140      	movs	r1, #64	; 0x40
 8026a7a:	f7ff fa2d 	bl	8025ed8 <_malloc_r>
 8026a7e:	6028      	str	r0, [r5, #0]
 8026a80:	6128      	str	r0, [r5, #16]
 8026a82:	b920      	cbnz	r0, 8026a8e <_svfiprintf_r+0x2e>
 8026a84:	230c      	movs	r3, #12
 8026a86:	603b      	str	r3, [r7, #0]
 8026a88:	f04f 30ff 	mov.w	r0, #4294967295
 8026a8c:	e0d1      	b.n	8026c32 <_svfiprintf_r+0x1d2>
 8026a8e:	2340      	movs	r3, #64	; 0x40
 8026a90:	616b      	str	r3, [r5, #20]
 8026a92:	2300      	movs	r3, #0
 8026a94:	9309      	str	r3, [sp, #36]	; 0x24
 8026a96:	2320      	movs	r3, #32
 8026a98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8026aa0:	2330      	movs	r3, #48	; 0x30
 8026aa2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8026c4c <_svfiprintf_r+0x1ec>
 8026aa6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026aaa:	f04f 0901 	mov.w	r9, #1
 8026aae:	4623      	mov	r3, r4
 8026ab0:	469a      	mov	sl, r3
 8026ab2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026ab6:	b10a      	cbz	r2, 8026abc <_svfiprintf_r+0x5c>
 8026ab8:	2a25      	cmp	r2, #37	; 0x25
 8026aba:	d1f9      	bne.n	8026ab0 <_svfiprintf_r+0x50>
 8026abc:	ebba 0b04 	subs.w	fp, sl, r4
 8026ac0:	d00b      	beq.n	8026ada <_svfiprintf_r+0x7a>
 8026ac2:	465b      	mov	r3, fp
 8026ac4:	4622      	mov	r2, r4
 8026ac6:	4629      	mov	r1, r5
 8026ac8:	4638      	mov	r0, r7
 8026aca:	f7ff ff6d 	bl	80269a8 <__ssputs_r>
 8026ace:	3001      	adds	r0, #1
 8026ad0:	f000 80aa 	beq.w	8026c28 <_svfiprintf_r+0x1c8>
 8026ad4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026ad6:	445a      	add	r2, fp
 8026ad8:	9209      	str	r2, [sp, #36]	; 0x24
 8026ada:	f89a 3000 	ldrb.w	r3, [sl]
 8026ade:	2b00      	cmp	r3, #0
 8026ae0:	f000 80a2 	beq.w	8026c28 <_svfiprintf_r+0x1c8>
 8026ae4:	2300      	movs	r3, #0
 8026ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8026aea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026aee:	f10a 0a01 	add.w	sl, sl, #1
 8026af2:	9304      	str	r3, [sp, #16]
 8026af4:	9307      	str	r3, [sp, #28]
 8026af6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026afa:	931a      	str	r3, [sp, #104]	; 0x68
 8026afc:	4654      	mov	r4, sl
 8026afe:	2205      	movs	r2, #5
 8026b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b04:	4851      	ldr	r0, [pc, #324]	; (8026c4c <_svfiprintf_r+0x1ec>)
 8026b06:	f7d9 fbb3 	bl	8000270 <memchr>
 8026b0a:	9a04      	ldr	r2, [sp, #16]
 8026b0c:	b9d8      	cbnz	r0, 8026b46 <_svfiprintf_r+0xe6>
 8026b0e:	06d0      	lsls	r0, r2, #27
 8026b10:	bf44      	itt	mi
 8026b12:	2320      	movmi	r3, #32
 8026b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026b18:	0711      	lsls	r1, r2, #28
 8026b1a:	bf44      	itt	mi
 8026b1c:	232b      	movmi	r3, #43	; 0x2b
 8026b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026b22:	f89a 3000 	ldrb.w	r3, [sl]
 8026b26:	2b2a      	cmp	r3, #42	; 0x2a
 8026b28:	d015      	beq.n	8026b56 <_svfiprintf_r+0xf6>
 8026b2a:	9a07      	ldr	r2, [sp, #28]
 8026b2c:	4654      	mov	r4, sl
 8026b2e:	2000      	movs	r0, #0
 8026b30:	f04f 0c0a 	mov.w	ip, #10
 8026b34:	4621      	mov	r1, r4
 8026b36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026b3a:	3b30      	subs	r3, #48	; 0x30
 8026b3c:	2b09      	cmp	r3, #9
 8026b3e:	d94e      	bls.n	8026bde <_svfiprintf_r+0x17e>
 8026b40:	b1b0      	cbz	r0, 8026b70 <_svfiprintf_r+0x110>
 8026b42:	9207      	str	r2, [sp, #28]
 8026b44:	e014      	b.n	8026b70 <_svfiprintf_r+0x110>
 8026b46:	eba0 0308 	sub.w	r3, r0, r8
 8026b4a:	fa09 f303 	lsl.w	r3, r9, r3
 8026b4e:	4313      	orrs	r3, r2
 8026b50:	9304      	str	r3, [sp, #16]
 8026b52:	46a2      	mov	sl, r4
 8026b54:	e7d2      	b.n	8026afc <_svfiprintf_r+0x9c>
 8026b56:	9b03      	ldr	r3, [sp, #12]
 8026b58:	1d19      	adds	r1, r3, #4
 8026b5a:	681b      	ldr	r3, [r3, #0]
 8026b5c:	9103      	str	r1, [sp, #12]
 8026b5e:	2b00      	cmp	r3, #0
 8026b60:	bfbb      	ittet	lt
 8026b62:	425b      	neglt	r3, r3
 8026b64:	f042 0202 	orrlt.w	r2, r2, #2
 8026b68:	9307      	strge	r3, [sp, #28]
 8026b6a:	9307      	strlt	r3, [sp, #28]
 8026b6c:	bfb8      	it	lt
 8026b6e:	9204      	strlt	r2, [sp, #16]
 8026b70:	7823      	ldrb	r3, [r4, #0]
 8026b72:	2b2e      	cmp	r3, #46	; 0x2e
 8026b74:	d10c      	bne.n	8026b90 <_svfiprintf_r+0x130>
 8026b76:	7863      	ldrb	r3, [r4, #1]
 8026b78:	2b2a      	cmp	r3, #42	; 0x2a
 8026b7a:	d135      	bne.n	8026be8 <_svfiprintf_r+0x188>
 8026b7c:	9b03      	ldr	r3, [sp, #12]
 8026b7e:	1d1a      	adds	r2, r3, #4
 8026b80:	681b      	ldr	r3, [r3, #0]
 8026b82:	9203      	str	r2, [sp, #12]
 8026b84:	2b00      	cmp	r3, #0
 8026b86:	bfb8      	it	lt
 8026b88:	f04f 33ff 	movlt.w	r3, #4294967295
 8026b8c:	3402      	adds	r4, #2
 8026b8e:	9305      	str	r3, [sp, #20]
 8026b90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8026c5c <_svfiprintf_r+0x1fc>
 8026b94:	7821      	ldrb	r1, [r4, #0]
 8026b96:	2203      	movs	r2, #3
 8026b98:	4650      	mov	r0, sl
 8026b9a:	f7d9 fb69 	bl	8000270 <memchr>
 8026b9e:	b140      	cbz	r0, 8026bb2 <_svfiprintf_r+0x152>
 8026ba0:	2340      	movs	r3, #64	; 0x40
 8026ba2:	eba0 000a 	sub.w	r0, r0, sl
 8026ba6:	fa03 f000 	lsl.w	r0, r3, r0
 8026baa:	9b04      	ldr	r3, [sp, #16]
 8026bac:	4303      	orrs	r3, r0
 8026bae:	3401      	adds	r4, #1
 8026bb0:	9304      	str	r3, [sp, #16]
 8026bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026bb6:	4826      	ldr	r0, [pc, #152]	; (8026c50 <_svfiprintf_r+0x1f0>)
 8026bb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026bbc:	2206      	movs	r2, #6
 8026bbe:	f7d9 fb57 	bl	8000270 <memchr>
 8026bc2:	2800      	cmp	r0, #0
 8026bc4:	d038      	beq.n	8026c38 <_svfiprintf_r+0x1d8>
 8026bc6:	4b23      	ldr	r3, [pc, #140]	; (8026c54 <_svfiprintf_r+0x1f4>)
 8026bc8:	bb1b      	cbnz	r3, 8026c12 <_svfiprintf_r+0x1b2>
 8026bca:	9b03      	ldr	r3, [sp, #12]
 8026bcc:	3307      	adds	r3, #7
 8026bce:	f023 0307 	bic.w	r3, r3, #7
 8026bd2:	3308      	adds	r3, #8
 8026bd4:	9303      	str	r3, [sp, #12]
 8026bd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026bd8:	4433      	add	r3, r6
 8026bda:	9309      	str	r3, [sp, #36]	; 0x24
 8026bdc:	e767      	b.n	8026aae <_svfiprintf_r+0x4e>
 8026bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8026be2:	460c      	mov	r4, r1
 8026be4:	2001      	movs	r0, #1
 8026be6:	e7a5      	b.n	8026b34 <_svfiprintf_r+0xd4>
 8026be8:	2300      	movs	r3, #0
 8026bea:	3401      	adds	r4, #1
 8026bec:	9305      	str	r3, [sp, #20]
 8026bee:	4619      	mov	r1, r3
 8026bf0:	f04f 0c0a 	mov.w	ip, #10
 8026bf4:	4620      	mov	r0, r4
 8026bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026bfa:	3a30      	subs	r2, #48	; 0x30
 8026bfc:	2a09      	cmp	r2, #9
 8026bfe:	d903      	bls.n	8026c08 <_svfiprintf_r+0x1a8>
 8026c00:	2b00      	cmp	r3, #0
 8026c02:	d0c5      	beq.n	8026b90 <_svfiprintf_r+0x130>
 8026c04:	9105      	str	r1, [sp, #20]
 8026c06:	e7c3      	b.n	8026b90 <_svfiprintf_r+0x130>
 8026c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8026c0c:	4604      	mov	r4, r0
 8026c0e:	2301      	movs	r3, #1
 8026c10:	e7f0      	b.n	8026bf4 <_svfiprintf_r+0x194>
 8026c12:	ab03      	add	r3, sp, #12
 8026c14:	9300      	str	r3, [sp, #0]
 8026c16:	462a      	mov	r2, r5
 8026c18:	4b0f      	ldr	r3, [pc, #60]	; (8026c58 <_svfiprintf_r+0x1f8>)
 8026c1a:	a904      	add	r1, sp, #16
 8026c1c:	4638      	mov	r0, r7
 8026c1e:	f3af 8000 	nop.w
 8026c22:	1c42      	adds	r2, r0, #1
 8026c24:	4606      	mov	r6, r0
 8026c26:	d1d6      	bne.n	8026bd6 <_svfiprintf_r+0x176>
 8026c28:	89ab      	ldrh	r3, [r5, #12]
 8026c2a:	065b      	lsls	r3, r3, #25
 8026c2c:	f53f af2c 	bmi.w	8026a88 <_svfiprintf_r+0x28>
 8026c30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026c32:	b01d      	add	sp, #116	; 0x74
 8026c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026c38:	ab03      	add	r3, sp, #12
 8026c3a:	9300      	str	r3, [sp, #0]
 8026c3c:	462a      	mov	r2, r5
 8026c3e:	4b06      	ldr	r3, [pc, #24]	; (8026c58 <_svfiprintf_r+0x1f8>)
 8026c40:	a904      	add	r1, sp, #16
 8026c42:	4638      	mov	r0, r7
 8026c44:	f000 f9d4 	bl	8026ff0 <_printf_i>
 8026c48:	e7eb      	b.n	8026c22 <_svfiprintf_r+0x1c2>
 8026c4a:	bf00      	nop
 8026c4c:	0802d318 	.word	0x0802d318
 8026c50:	0802d322 	.word	0x0802d322
 8026c54:	00000000 	.word	0x00000000
 8026c58:	080269a9 	.word	0x080269a9
 8026c5c:	0802d31e 	.word	0x0802d31e

08026c60 <__sfputc_r>:
 8026c60:	6893      	ldr	r3, [r2, #8]
 8026c62:	3b01      	subs	r3, #1
 8026c64:	2b00      	cmp	r3, #0
 8026c66:	b410      	push	{r4}
 8026c68:	6093      	str	r3, [r2, #8]
 8026c6a:	da08      	bge.n	8026c7e <__sfputc_r+0x1e>
 8026c6c:	6994      	ldr	r4, [r2, #24]
 8026c6e:	42a3      	cmp	r3, r4
 8026c70:	db01      	blt.n	8026c76 <__sfputc_r+0x16>
 8026c72:	290a      	cmp	r1, #10
 8026c74:	d103      	bne.n	8026c7e <__sfputc_r+0x1e>
 8026c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c7a:	f7ff bb79 	b.w	8026370 <__swbuf_r>
 8026c7e:	6813      	ldr	r3, [r2, #0]
 8026c80:	1c58      	adds	r0, r3, #1
 8026c82:	6010      	str	r0, [r2, #0]
 8026c84:	7019      	strb	r1, [r3, #0]
 8026c86:	4608      	mov	r0, r1
 8026c88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026c8c:	4770      	bx	lr

08026c8e <__sfputs_r>:
 8026c8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026c90:	4606      	mov	r6, r0
 8026c92:	460f      	mov	r7, r1
 8026c94:	4614      	mov	r4, r2
 8026c96:	18d5      	adds	r5, r2, r3
 8026c98:	42ac      	cmp	r4, r5
 8026c9a:	d101      	bne.n	8026ca0 <__sfputs_r+0x12>
 8026c9c:	2000      	movs	r0, #0
 8026c9e:	e007      	b.n	8026cb0 <__sfputs_r+0x22>
 8026ca0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026ca4:	463a      	mov	r2, r7
 8026ca6:	4630      	mov	r0, r6
 8026ca8:	f7ff ffda 	bl	8026c60 <__sfputc_r>
 8026cac:	1c43      	adds	r3, r0, #1
 8026cae:	d1f3      	bne.n	8026c98 <__sfputs_r+0xa>
 8026cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026cb4 <_vfiprintf_r>:
 8026cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026cb8:	460d      	mov	r5, r1
 8026cba:	b09d      	sub	sp, #116	; 0x74
 8026cbc:	4614      	mov	r4, r2
 8026cbe:	4698      	mov	r8, r3
 8026cc0:	4606      	mov	r6, r0
 8026cc2:	b118      	cbz	r0, 8026ccc <_vfiprintf_r+0x18>
 8026cc4:	6983      	ldr	r3, [r0, #24]
 8026cc6:	b90b      	cbnz	r3, 8026ccc <_vfiprintf_r+0x18>
 8026cc8:	f7ff fd4a 	bl	8026760 <__sinit>
 8026ccc:	4b89      	ldr	r3, [pc, #548]	; (8026ef4 <_vfiprintf_r+0x240>)
 8026cce:	429d      	cmp	r5, r3
 8026cd0:	d11b      	bne.n	8026d0a <_vfiprintf_r+0x56>
 8026cd2:	6875      	ldr	r5, [r6, #4]
 8026cd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026cd6:	07d9      	lsls	r1, r3, #31
 8026cd8:	d405      	bmi.n	8026ce6 <_vfiprintf_r+0x32>
 8026cda:	89ab      	ldrh	r3, [r5, #12]
 8026cdc:	059a      	lsls	r2, r3, #22
 8026cde:	d402      	bmi.n	8026ce6 <_vfiprintf_r+0x32>
 8026ce0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026ce2:	f7ff fded 	bl	80268c0 <__retarget_lock_acquire_recursive>
 8026ce6:	89ab      	ldrh	r3, [r5, #12]
 8026ce8:	071b      	lsls	r3, r3, #28
 8026cea:	d501      	bpl.n	8026cf0 <_vfiprintf_r+0x3c>
 8026cec:	692b      	ldr	r3, [r5, #16]
 8026cee:	b9eb      	cbnz	r3, 8026d2c <_vfiprintf_r+0x78>
 8026cf0:	4629      	mov	r1, r5
 8026cf2:	4630      	mov	r0, r6
 8026cf4:	f7ff fb8e 	bl	8026414 <__swsetup_r>
 8026cf8:	b1c0      	cbz	r0, 8026d2c <_vfiprintf_r+0x78>
 8026cfa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026cfc:	07dc      	lsls	r4, r3, #31
 8026cfe:	d50e      	bpl.n	8026d1e <_vfiprintf_r+0x6a>
 8026d00:	f04f 30ff 	mov.w	r0, #4294967295
 8026d04:	b01d      	add	sp, #116	; 0x74
 8026d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026d0a:	4b7b      	ldr	r3, [pc, #492]	; (8026ef8 <_vfiprintf_r+0x244>)
 8026d0c:	429d      	cmp	r5, r3
 8026d0e:	d101      	bne.n	8026d14 <_vfiprintf_r+0x60>
 8026d10:	68b5      	ldr	r5, [r6, #8]
 8026d12:	e7df      	b.n	8026cd4 <_vfiprintf_r+0x20>
 8026d14:	4b79      	ldr	r3, [pc, #484]	; (8026efc <_vfiprintf_r+0x248>)
 8026d16:	429d      	cmp	r5, r3
 8026d18:	bf08      	it	eq
 8026d1a:	68f5      	ldreq	r5, [r6, #12]
 8026d1c:	e7da      	b.n	8026cd4 <_vfiprintf_r+0x20>
 8026d1e:	89ab      	ldrh	r3, [r5, #12]
 8026d20:	0598      	lsls	r0, r3, #22
 8026d22:	d4ed      	bmi.n	8026d00 <_vfiprintf_r+0x4c>
 8026d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026d26:	f7ff fdcc 	bl	80268c2 <__retarget_lock_release_recursive>
 8026d2a:	e7e9      	b.n	8026d00 <_vfiprintf_r+0x4c>
 8026d2c:	2300      	movs	r3, #0
 8026d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8026d30:	2320      	movs	r3, #32
 8026d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8026d3a:	2330      	movs	r3, #48	; 0x30
 8026d3c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026f00 <_vfiprintf_r+0x24c>
 8026d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026d44:	f04f 0901 	mov.w	r9, #1
 8026d48:	4623      	mov	r3, r4
 8026d4a:	469a      	mov	sl, r3
 8026d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026d50:	b10a      	cbz	r2, 8026d56 <_vfiprintf_r+0xa2>
 8026d52:	2a25      	cmp	r2, #37	; 0x25
 8026d54:	d1f9      	bne.n	8026d4a <_vfiprintf_r+0x96>
 8026d56:	ebba 0b04 	subs.w	fp, sl, r4
 8026d5a:	d00b      	beq.n	8026d74 <_vfiprintf_r+0xc0>
 8026d5c:	465b      	mov	r3, fp
 8026d5e:	4622      	mov	r2, r4
 8026d60:	4629      	mov	r1, r5
 8026d62:	4630      	mov	r0, r6
 8026d64:	f7ff ff93 	bl	8026c8e <__sfputs_r>
 8026d68:	3001      	adds	r0, #1
 8026d6a:	f000 80aa 	beq.w	8026ec2 <_vfiprintf_r+0x20e>
 8026d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026d70:	445a      	add	r2, fp
 8026d72:	9209      	str	r2, [sp, #36]	; 0x24
 8026d74:	f89a 3000 	ldrb.w	r3, [sl]
 8026d78:	2b00      	cmp	r3, #0
 8026d7a:	f000 80a2 	beq.w	8026ec2 <_vfiprintf_r+0x20e>
 8026d7e:	2300      	movs	r3, #0
 8026d80:	f04f 32ff 	mov.w	r2, #4294967295
 8026d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026d88:	f10a 0a01 	add.w	sl, sl, #1
 8026d8c:	9304      	str	r3, [sp, #16]
 8026d8e:	9307      	str	r3, [sp, #28]
 8026d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026d94:	931a      	str	r3, [sp, #104]	; 0x68
 8026d96:	4654      	mov	r4, sl
 8026d98:	2205      	movs	r2, #5
 8026d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026d9e:	4858      	ldr	r0, [pc, #352]	; (8026f00 <_vfiprintf_r+0x24c>)
 8026da0:	f7d9 fa66 	bl	8000270 <memchr>
 8026da4:	9a04      	ldr	r2, [sp, #16]
 8026da6:	b9d8      	cbnz	r0, 8026de0 <_vfiprintf_r+0x12c>
 8026da8:	06d1      	lsls	r1, r2, #27
 8026daa:	bf44      	itt	mi
 8026dac:	2320      	movmi	r3, #32
 8026dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026db2:	0713      	lsls	r3, r2, #28
 8026db4:	bf44      	itt	mi
 8026db6:	232b      	movmi	r3, #43	; 0x2b
 8026db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8026dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8026dc2:	d015      	beq.n	8026df0 <_vfiprintf_r+0x13c>
 8026dc4:	9a07      	ldr	r2, [sp, #28]
 8026dc6:	4654      	mov	r4, sl
 8026dc8:	2000      	movs	r0, #0
 8026dca:	f04f 0c0a 	mov.w	ip, #10
 8026dce:	4621      	mov	r1, r4
 8026dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026dd4:	3b30      	subs	r3, #48	; 0x30
 8026dd6:	2b09      	cmp	r3, #9
 8026dd8:	d94e      	bls.n	8026e78 <_vfiprintf_r+0x1c4>
 8026dda:	b1b0      	cbz	r0, 8026e0a <_vfiprintf_r+0x156>
 8026ddc:	9207      	str	r2, [sp, #28]
 8026dde:	e014      	b.n	8026e0a <_vfiprintf_r+0x156>
 8026de0:	eba0 0308 	sub.w	r3, r0, r8
 8026de4:	fa09 f303 	lsl.w	r3, r9, r3
 8026de8:	4313      	orrs	r3, r2
 8026dea:	9304      	str	r3, [sp, #16]
 8026dec:	46a2      	mov	sl, r4
 8026dee:	e7d2      	b.n	8026d96 <_vfiprintf_r+0xe2>
 8026df0:	9b03      	ldr	r3, [sp, #12]
 8026df2:	1d19      	adds	r1, r3, #4
 8026df4:	681b      	ldr	r3, [r3, #0]
 8026df6:	9103      	str	r1, [sp, #12]
 8026df8:	2b00      	cmp	r3, #0
 8026dfa:	bfbb      	ittet	lt
 8026dfc:	425b      	neglt	r3, r3
 8026dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8026e02:	9307      	strge	r3, [sp, #28]
 8026e04:	9307      	strlt	r3, [sp, #28]
 8026e06:	bfb8      	it	lt
 8026e08:	9204      	strlt	r2, [sp, #16]
 8026e0a:	7823      	ldrb	r3, [r4, #0]
 8026e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8026e0e:	d10c      	bne.n	8026e2a <_vfiprintf_r+0x176>
 8026e10:	7863      	ldrb	r3, [r4, #1]
 8026e12:	2b2a      	cmp	r3, #42	; 0x2a
 8026e14:	d135      	bne.n	8026e82 <_vfiprintf_r+0x1ce>
 8026e16:	9b03      	ldr	r3, [sp, #12]
 8026e18:	1d1a      	adds	r2, r3, #4
 8026e1a:	681b      	ldr	r3, [r3, #0]
 8026e1c:	9203      	str	r2, [sp, #12]
 8026e1e:	2b00      	cmp	r3, #0
 8026e20:	bfb8      	it	lt
 8026e22:	f04f 33ff 	movlt.w	r3, #4294967295
 8026e26:	3402      	adds	r4, #2
 8026e28:	9305      	str	r3, [sp, #20]
 8026e2a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026f10 <_vfiprintf_r+0x25c>
 8026e2e:	7821      	ldrb	r1, [r4, #0]
 8026e30:	2203      	movs	r2, #3
 8026e32:	4650      	mov	r0, sl
 8026e34:	f7d9 fa1c 	bl	8000270 <memchr>
 8026e38:	b140      	cbz	r0, 8026e4c <_vfiprintf_r+0x198>
 8026e3a:	2340      	movs	r3, #64	; 0x40
 8026e3c:	eba0 000a 	sub.w	r0, r0, sl
 8026e40:	fa03 f000 	lsl.w	r0, r3, r0
 8026e44:	9b04      	ldr	r3, [sp, #16]
 8026e46:	4303      	orrs	r3, r0
 8026e48:	3401      	adds	r4, #1
 8026e4a:	9304      	str	r3, [sp, #16]
 8026e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026e50:	482c      	ldr	r0, [pc, #176]	; (8026f04 <_vfiprintf_r+0x250>)
 8026e52:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026e56:	2206      	movs	r2, #6
 8026e58:	f7d9 fa0a 	bl	8000270 <memchr>
 8026e5c:	2800      	cmp	r0, #0
 8026e5e:	d03f      	beq.n	8026ee0 <_vfiprintf_r+0x22c>
 8026e60:	4b29      	ldr	r3, [pc, #164]	; (8026f08 <_vfiprintf_r+0x254>)
 8026e62:	bb1b      	cbnz	r3, 8026eac <_vfiprintf_r+0x1f8>
 8026e64:	9b03      	ldr	r3, [sp, #12]
 8026e66:	3307      	adds	r3, #7
 8026e68:	f023 0307 	bic.w	r3, r3, #7
 8026e6c:	3308      	adds	r3, #8
 8026e6e:	9303      	str	r3, [sp, #12]
 8026e70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026e72:	443b      	add	r3, r7
 8026e74:	9309      	str	r3, [sp, #36]	; 0x24
 8026e76:	e767      	b.n	8026d48 <_vfiprintf_r+0x94>
 8026e78:	fb0c 3202 	mla	r2, ip, r2, r3
 8026e7c:	460c      	mov	r4, r1
 8026e7e:	2001      	movs	r0, #1
 8026e80:	e7a5      	b.n	8026dce <_vfiprintf_r+0x11a>
 8026e82:	2300      	movs	r3, #0
 8026e84:	3401      	adds	r4, #1
 8026e86:	9305      	str	r3, [sp, #20]
 8026e88:	4619      	mov	r1, r3
 8026e8a:	f04f 0c0a 	mov.w	ip, #10
 8026e8e:	4620      	mov	r0, r4
 8026e90:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026e94:	3a30      	subs	r2, #48	; 0x30
 8026e96:	2a09      	cmp	r2, #9
 8026e98:	d903      	bls.n	8026ea2 <_vfiprintf_r+0x1ee>
 8026e9a:	2b00      	cmp	r3, #0
 8026e9c:	d0c5      	beq.n	8026e2a <_vfiprintf_r+0x176>
 8026e9e:	9105      	str	r1, [sp, #20]
 8026ea0:	e7c3      	b.n	8026e2a <_vfiprintf_r+0x176>
 8026ea2:	fb0c 2101 	mla	r1, ip, r1, r2
 8026ea6:	4604      	mov	r4, r0
 8026ea8:	2301      	movs	r3, #1
 8026eaa:	e7f0      	b.n	8026e8e <_vfiprintf_r+0x1da>
 8026eac:	ab03      	add	r3, sp, #12
 8026eae:	9300      	str	r3, [sp, #0]
 8026eb0:	462a      	mov	r2, r5
 8026eb2:	4b16      	ldr	r3, [pc, #88]	; (8026f0c <_vfiprintf_r+0x258>)
 8026eb4:	a904      	add	r1, sp, #16
 8026eb6:	4630      	mov	r0, r6
 8026eb8:	f3af 8000 	nop.w
 8026ebc:	4607      	mov	r7, r0
 8026ebe:	1c78      	adds	r0, r7, #1
 8026ec0:	d1d6      	bne.n	8026e70 <_vfiprintf_r+0x1bc>
 8026ec2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ec4:	07d9      	lsls	r1, r3, #31
 8026ec6:	d405      	bmi.n	8026ed4 <_vfiprintf_r+0x220>
 8026ec8:	89ab      	ldrh	r3, [r5, #12]
 8026eca:	059a      	lsls	r2, r3, #22
 8026ecc:	d402      	bmi.n	8026ed4 <_vfiprintf_r+0x220>
 8026ece:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026ed0:	f7ff fcf7 	bl	80268c2 <__retarget_lock_release_recursive>
 8026ed4:	89ab      	ldrh	r3, [r5, #12]
 8026ed6:	065b      	lsls	r3, r3, #25
 8026ed8:	f53f af12 	bmi.w	8026d00 <_vfiprintf_r+0x4c>
 8026edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026ede:	e711      	b.n	8026d04 <_vfiprintf_r+0x50>
 8026ee0:	ab03      	add	r3, sp, #12
 8026ee2:	9300      	str	r3, [sp, #0]
 8026ee4:	462a      	mov	r2, r5
 8026ee6:	4b09      	ldr	r3, [pc, #36]	; (8026f0c <_vfiprintf_r+0x258>)
 8026ee8:	a904      	add	r1, sp, #16
 8026eea:	4630      	mov	r0, r6
 8026eec:	f000 f880 	bl	8026ff0 <_printf_i>
 8026ef0:	e7e4      	b.n	8026ebc <_vfiprintf_r+0x208>
 8026ef2:	bf00      	nop
 8026ef4:	0802d2d8 	.word	0x0802d2d8
 8026ef8:	0802d2f8 	.word	0x0802d2f8
 8026efc:	0802d2b8 	.word	0x0802d2b8
 8026f00:	0802d318 	.word	0x0802d318
 8026f04:	0802d322 	.word	0x0802d322
 8026f08:	00000000 	.word	0x00000000
 8026f0c:	08026c8f 	.word	0x08026c8f
 8026f10:	0802d31e 	.word	0x0802d31e

08026f14 <_printf_common>:
 8026f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026f18:	4616      	mov	r6, r2
 8026f1a:	4699      	mov	r9, r3
 8026f1c:	688a      	ldr	r2, [r1, #8]
 8026f1e:	690b      	ldr	r3, [r1, #16]
 8026f20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8026f24:	4293      	cmp	r3, r2
 8026f26:	bfb8      	it	lt
 8026f28:	4613      	movlt	r3, r2
 8026f2a:	6033      	str	r3, [r6, #0]
 8026f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8026f30:	4607      	mov	r7, r0
 8026f32:	460c      	mov	r4, r1
 8026f34:	b10a      	cbz	r2, 8026f3a <_printf_common+0x26>
 8026f36:	3301      	adds	r3, #1
 8026f38:	6033      	str	r3, [r6, #0]
 8026f3a:	6823      	ldr	r3, [r4, #0]
 8026f3c:	0699      	lsls	r1, r3, #26
 8026f3e:	bf42      	ittt	mi
 8026f40:	6833      	ldrmi	r3, [r6, #0]
 8026f42:	3302      	addmi	r3, #2
 8026f44:	6033      	strmi	r3, [r6, #0]
 8026f46:	6825      	ldr	r5, [r4, #0]
 8026f48:	f015 0506 	ands.w	r5, r5, #6
 8026f4c:	d106      	bne.n	8026f5c <_printf_common+0x48>
 8026f4e:	f104 0a19 	add.w	sl, r4, #25
 8026f52:	68e3      	ldr	r3, [r4, #12]
 8026f54:	6832      	ldr	r2, [r6, #0]
 8026f56:	1a9b      	subs	r3, r3, r2
 8026f58:	42ab      	cmp	r3, r5
 8026f5a:	dc26      	bgt.n	8026faa <_printf_common+0x96>
 8026f5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8026f60:	1e13      	subs	r3, r2, #0
 8026f62:	6822      	ldr	r2, [r4, #0]
 8026f64:	bf18      	it	ne
 8026f66:	2301      	movne	r3, #1
 8026f68:	0692      	lsls	r2, r2, #26
 8026f6a:	d42b      	bmi.n	8026fc4 <_printf_common+0xb0>
 8026f6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8026f70:	4649      	mov	r1, r9
 8026f72:	4638      	mov	r0, r7
 8026f74:	47c0      	blx	r8
 8026f76:	3001      	adds	r0, #1
 8026f78:	d01e      	beq.n	8026fb8 <_printf_common+0xa4>
 8026f7a:	6823      	ldr	r3, [r4, #0]
 8026f7c:	68e5      	ldr	r5, [r4, #12]
 8026f7e:	6832      	ldr	r2, [r6, #0]
 8026f80:	f003 0306 	and.w	r3, r3, #6
 8026f84:	2b04      	cmp	r3, #4
 8026f86:	bf08      	it	eq
 8026f88:	1aad      	subeq	r5, r5, r2
 8026f8a:	68a3      	ldr	r3, [r4, #8]
 8026f8c:	6922      	ldr	r2, [r4, #16]
 8026f8e:	bf0c      	ite	eq
 8026f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8026f94:	2500      	movne	r5, #0
 8026f96:	4293      	cmp	r3, r2
 8026f98:	bfc4      	itt	gt
 8026f9a:	1a9b      	subgt	r3, r3, r2
 8026f9c:	18ed      	addgt	r5, r5, r3
 8026f9e:	2600      	movs	r6, #0
 8026fa0:	341a      	adds	r4, #26
 8026fa2:	42b5      	cmp	r5, r6
 8026fa4:	d11a      	bne.n	8026fdc <_printf_common+0xc8>
 8026fa6:	2000      	movs	r0, #0
 8026fa8:	e008      	b.n	8026fbc <_printf_common+0xa8>
 8026faa:	2301      	movs	r3, #1
 8026fac:	4652      	mov	r2, sl
 8026fae:	4649      	mov	r1, r9
 8026fb0:	4638      	mov	r0, r7
 8026fb2:	47c0      	blx	r8
 8026fb4:	3001      	adds	r0, #1
 8026fb6:	d103      	bne.n	8026fc0 <_printf_common+0xac>
 8026fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8026fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026fc0:	3501      	adds	r5, #1
 8026fc2:	e7c6      	b.n	8026f52 <_printf_common+0x3e>
 8026fc4:	18e1      	adds	r1, r4, r3
 8026fc6:	1c5a      	adds	r2, r3, #1
 8026fc8:	2030      	movs	r0, #48	; 0x30
 8026fca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8026fce:	4422      	add	r2, r4
 8026fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8026fd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8026fd8:	3302      	adds	r3, #2
 8026fda:	e7c7      	b.n	8026f6c <_printf_common+0x58>
 8026fdc:	2301      	movs	r3, #1
 8026fde:	4622      	mov	r2, r4
 8026fe0:	4649      	mov	r1, r9
 8026fe2:	4638      	mov	r0, r7
 8026fe4:	47c0      	blx	r8
 8026fe6:	3001      	adds	r0, #1
 8026fe8:	d0e6      	beq.n	8026fb8 <_printf_common+0xa4>
 8026fea:	3601      	adds	r6, #1
 8026fec:	e7d9      	b.n	8026fa2 <_printf_common+0x8e>
	...

08026ff0 <_printf_i>:
 8026ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8026ff4:	7e0f      	ldrb	r7, [r1, #24]
 8026ff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8026ff8:	2f78      	cmp	r7, #120	; 0x78
 8026ffa:	4691      	mov	r9, r2
 8026ffc:	4680      	mov	r8, r0
 8026ffe:	460c      	mov	r4, r1
 8027000:	469a      	mov	sl, r3
 8027002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8027006:	d807      	bhi.n	8027018 <_printf_i+0x28>
 8027008:	2f62      	cmp	r7, #98	; 0x62
 802700a:	d80a      	bhi.n	8027022 <_printf_i+0x32>
 802700c:	2f00      	cmp	r7, #0
 802700e:	f000 80d8 	beq.w	80271c2 <_printf_i+0x1d2>
 8027012:	2f58      	cmp	r7, #88	; 0x58
 8027014:	f000 80a3 	beq.w	802715e <_printf_i+0x16e>
 8027018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802701c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8027020:	e03a      	b.n	8027098 <_printf_i+0xa8>
 8027022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8027026:	2b15      	cmp	r3, #21
 8027028:	d8f6      	bhi.n	8027018 <_printf_i+0x28>
 802702a:	a101      	add	r1, pc, #4	; (adr r1, 8027030 <_printf_i+0x40>)
 802702c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8027030:	08027089 	.word	0x08027089
 8027034:	0802709d 	.word	0x0802709d
 8027038:	08027019 	.word	0x08027019
 802703c:	08027019 	.word	0x08027019
 8027040:	08027019 	.word	0x08027019
 8027044:	08027019 	.word	0x08027019
 8027048:	0802709d 	.word	0x0802709d
 802704c:	08027019 	.word	0x08027019
 8027050:	08027019 	.word	0x08027019
 8027054:	08027019 	.word	0x08027019
 8027058:	08027019 	.word	0x08027019
 802705c:	080271a9 	.word	0x080271a9
 8027060:	080270cd 	.word	0x080270cd
 8027064:	0802718b 	.word	0x0802718b
 8027068:	08027019 	.word	0x08027019
 802706c:	08027019 	.word	0x08027019
 8027070:	080271cb 	.word	0x080271cb
 8027074:	08027019 	.word	0x08027019
 8027078:	080270cd 	.word	0x080270cd
 802707c:	08027019 	.word	0x08027019
 8027080:	08027019 	.word	0x08027019
 8027084:	08027193 	.word	0x08027193
 8027088:	682b      	ldr	r3, [r5, #0]
 802708a:	1d1a      	adds	r2, r3, #4
 802708c:	681b      	ldr	r3, [r3, #0]
 802708e:	602a      	str	r2, [r5, #0]
 8027090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8027094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8027098:	2301      	movs	r3, #1
 802709a:	e0a3      	b.n	80271e4 <_printf_i+0x1f4>
 802709c:	6820      	ldr	r0, [r4, #0]
 802709e:	6829      	ldr	r1, [r5, #0]
 80270a0:	0606      	lsls	r6, r0, #24
 80270a2:	f101 0304 	add.w	r3, r1, #4
 80270a6:	d50a      	bpl.n	80270be <_printf_i+0xce>
 80270a8:	680e      	ldr	r6, [r1, #0]
 80270aa:	602b      	str	r3, [r5, #0]
 80270ac:	2e00      	cmp	r6, #0
 80270ae:	da03      	bge.n	80270b8 <_printf_i+0xc8>
 80270b0:	232d      	movs	r3, #45	; 0x2d
 80270b2:	4276      	negs	r6, r6
 80270b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80270b8:	485e      	ldr	r0, [pc, #376]	; (8027234 <_printf_i+0x244>)
 80270ba:	230a      	movs	r3, #10
 80270bc:	e019      	b.n	80270f2 <_printf_i+0x102>
 80270be:	680e      	ldr	r6, [r1, #0]
 80270c0:	602b      	str	r3, [r5, #0]
 80270c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80270c6:	bf18      	it	ne
 80270c8:	b236      	sxthne	r6, r6
 80270ca:	e7ef      	b.n	80270ac <_printf_i+0xbc>
 80270cc:	682b      	ldr	r3, [r5, #0]
 80270ce:	6820      	ldr	r0, [r4, #0]
 80270d0:	1d19      	adds	r1, r3, #4
 80270d2:	6029      	str	r1, [r5, #0]
 80270d4:	0601      	lsls	r1, r0, #24
 80270d6:	d501      	bpl.n	80270dc <_printf_i+0xec>
 80270d8:	681e      	ldr	r6, [r3, #0]
 80270da:	e002      	b.n	80270e2 <_printf_i+0xf2>
 80270dc:	0646      	lsls	r6, r0, #25
 80270de:	d5fb      	bpl.n	80270d8 <_printf_i+0xe8>
 80270e0:	881e      	ldrh	r6, [r3, #0]
 80270e2:	4854      	ldr	r0, [pc, #336]	; (8027234 <_printf_i+0x244>)
 80270e4:	2f6f      	cmp	r7, #111	; 0x6f
 80270e6:	bf0c      	ite	eq
 80270e8:	2308      	moveq	r3, #8
 80270ea:	230a      	movne	r3, #10
 80270ec:	2100      	movs	r1, #0
 80270ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80270f2:	6865      	ldr	r5, [r4, #4]
 80270f4:	60a5      	str	r5, [r4, #8]
 80270f6:	2d00      	cmp	r5, #0
 80270f8:	bfa2      	ittt	ge
 80270fa:	6821      	ldrge	r1, [r4, #0]
 80270fc:	f021 0104 	bicge.w	r1, r1, #4
 8027100:	6021      	strge	r1, [r4, #0]
 8027102:	b90e      	cbnz	r6, 8027108 <_printf_i+0x118>
 8027104:	2d00      	cmp	r5, #0
 8027106:	d04d      	beq.n	80271a4 <_printf_i+0x1b4>
 8027108:	4615      	mov	r5, r2
 802710a:	fbb6 f1f3 	udiv	r1, r6, r3
 802710e:	fb03 6711 	mls	r7, r3, r1, r6
 8027112:	5dc7      	ldrb	r7, [r0, r7]
 8027114:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8027118:	4637      	mov	r7, r6
 802711a:	42bb      	cmp	r3, r7
 802711c:	460e      	mov	r6, r1
 802711e:	d9f4      	bls.n	802710a <_printf_i+0x11a>
 8027120:	2b08      	cmp	r3, #8
 8027122:	d10b      	bne.n	802713c <_printf_i+0x14c>
 8027124:	6823      	ldr	r3, [r4, #0]
 8027126:	07de      	lsls	r6, r3, #31
 8027128:	d508      	bpl.n	802713c <_printf_i+0x14c>
 802712a:	6923      	ldr	r3, [r4, #16]
 802712c:	6861      	ldr	r1, [r4, #4]
 802712e:	4299      	cmp	r1, r3
 8027130:	bfde      	ittt	le
 8027132:	2330      	movle	r3, #48	; 0x30
 8027134:	f805 3c01 	strble.w	r3, [r5, #-1]
 8027138:	f105 35ff 	addle.w	r5, r5, #4294967295
 802713c:	1b52      	subs	r2, r2, r5
 802713e:	6122      	str	r2, [r4, #16]
 8027140:	f8cd a000 	str.w	sl, [sp]
 8027144:	464b      	mov	r3, r9
 8027146:	aa03      	add	r2, sp, #12
 8027148:	4621      	mov	r1, r4
 802714a:	4640      	mov	r0, r8
 802714c:	f7ff fee2 	bl	8026f14 <_printf_common>
 8027150:	3001      	adds	r0, #1
 8027152:	d14c      	bne.n	80271ee <_printf_i+0x1fe>
 8027154:	f04f 30ff 	mov.w	r0, #4294967295
 8027158:	b004      	add	sp, #16
 802715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802715e:	4835      	ldr	r0, [pc, #212]	; (8027234 <_printf_i+0x244>)
 8027160:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8027164:	6829      	ldr	r1, [r5, #0]
 8027166:	6823      	ldr	r3, [r4, #0]
 8027168:	f851 6b04 	ldr.w	r6, [r1], #4
 802716c:	6029      	str	r1, [r5, #0]
 802716e:	061d      	lsls	r5, r3, #24
 8027170:	d514      	bpl.n	802719c <_printf_i+0x1ac>
 8027172:	07df      	lsls	r7, r3, #31
 8027174:	bf44      	itt	mi
 8027176:	f043 0320 	orrmi.w	r3, r3, #32
 802717a:	6023      	strmi	r3, [r4, #0]
 802717c:	b91e      	cbnz	r6, 8027186 <_printf_i+0x196>
 802717e:	6823      	ldr	r3, [r4, #0]
 8027180:	f023 0320 	bic.w	r3, r3, #32
 8027184:	6023      	str	r3, [r4, #0]
 8027186:	2310      	movs	r3, #16
 8027188:	e7b0      	b.n	80270ec <_printf_i+0xfc>
 802718a:	6823      	ldr	r3, [r4, #0]
 802718c:	f043 0320 	orr.w	r3, r3, #32
 8027190:	6023      	str	r3, [r4, #0]
 8027192:	2378      	movs	r3, #120	; 0x78
 8027194:	4828      	ldr	r0, [pc, #160]	; (8027238 <_printf_i+0x248>)
 8027196:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802719a:	e7e3      	b.n	8027164 <_printf_i+0x174>
 802719c:	0659      	lsls	r1, r3, #25
 802719e:	bf48      	it	mi
 80271a0:	b2b6      	uxthmi	r6, r6
 80271a2:	e7e6      	b.n	8027172 <_printf_i+0x182>
 80271a4:	4615      	mov	r5, r2
 80271a6:	e7bb      	b.n	8027120 <_printf_i+0x130>
 80271a8:	682b      	ldr	r3, [r5, #0]
 80271aa:	6826      	ldr	r6, [r4, #0]
 80271ac:	6961      	ldr	r1, [r4, #20]
 80271ae:	1d18      	adds	r0, r3, #4
 80271b0:	6028      	str	r0, [r5, #0]
 80271b2:	0635      	lsls	r5, r6, #24
 80271b4:	681b      	ldr	r3, [r3, #0]
 80271b6:	d501      	bpl.n	80271bc <_printf_i+0x1cc>
 80271b8:	6019      	str	r1, [r3, #0]
 80271ba:	e002      	b.n	80271c2 <_printf_i+0x1d2>
 80271bc:	0670      	lsls	r0, r6, #25
 80271be:	d5fb      	bpl.n	80271b8 <_printf_i+0x1c8>
 80271c0:	8019      	strh	r1, [r3, #0]
 80271c2:	2300      	movs	r3, #0
 80271c4:	6123      	str	r3, [r4, #16]
 80271c6:	4615      	mov	r5, r2
 80271c8:	e7ba      	b.n	8027140 <_printf_i+0x150>
 80271ca:	682b      	ldr	r3, [r5, #0]
 80271cc:	1d1a      	adds	r2, r3, #4
 80271ce:	602a      	str	r2, [r5, #0]
 80271d0:	681d      	ldr	r5, [r3, #0]
 80271d2:	6862      	ldr	r2, [r4, #4]
 80271d4:	2100      	movs	r1, #0
 80271d6:	4628      	mov	r0, r5
 80271d8:	f7d9 f84a 	bl	8000270 <memchr>
 80271dc:	b108      	cbz	r0, 80271e2 <_printf_i+0x1f2>
 80271de:	1b40      	subs	r0, r0, r5
 80271e0:	6060      	str	r0, [r4, #4]
 80271e2:	6863      	ldr	r3, [r4, #4]
 80271e4:	6123      	str	r3, [r4, #16]
 80271e6:	2300      	movs	r3, #0
 80271e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80271ec:	e7a8      	b.n	8027140 <_printf_i+0x150>
 80271ee:	6923      	ldr	r3, [r4, #16]
 80271f0:	462a      	mov	r2, r5
 80271f2:	4649      	mov	r1, r9
 80271f4:	4640      	mov	r0, r8
 80271f6:	47d0      	blx	sl
 80271f8:	3001      	adds	r0, #1
 80271fa:	d0ab      	beq.n	8027154 <_printf_i+0x164>
 80271fc:	6823      	ldr	r3, [r4, #0]
 80271fe:	079b      	lsls	r3, r3, #30
 8027200:	d413      	bmi.n	802722a <_printf_i+0x23a>
 8027202:	68e0      	ldr	r0, [r4, #12]
 8027204:	9b03      	ldr	r3, [sp, #12]
 8027206:	4298      	cmp	r0, r3
 8027208:	bfb8      	it	lt
 802720a:	4618      	movlt	r0, r3
 802720c:	e7a4      	b.n	8027158 <_printf_i+0x168>
 802720e:	2301      	movs	r3, #1
 8027210:	4632      	mov	r2, r6
 8027212:	4649      	mov	r1, r9
 8027214:	4640      	mov	r0, r8
 8027216:	47d0      	blx	sl
 8027218:	3001      	adds	r0, #1
 802721a:	d09b      	beq.n	8027154 <_printf_i+0x164>
 802721c:	3501      	adds	r5, #1
 802721e:	68e3      	ldr	r3, [r4, #12]
 8027220:	9903      	ldr	r1, [sp, #12]
 8027222:	1a5b      	subs	r3, r3, r1
 8027224:	42ab      	cmp	r3, r5
 8027226:	dcf2      	bgt.n	802720e <_printf_i+0x21e>
 8027228:	e7eb      	b.n	8027202 <_printf_i+0x212>
 802722a:	2500      	movs	r5, #0
 802722c:	f104 0619 	add.w	r6, r4, #25
 8027230:	e7f5      	b.n	802721e <_printf_i+0x22e>
 8027232:	bf00      	nop
 8027234:	0802d329 	.word	0x0802d329
 8027238:	0802d33a 	.word	0x0802d33a

0802723c <_putc_r>:
 802723c:	b570      	push	{r4, r5, r6, lr}
 802723e:	460d      	mov	r5, r1
 8027240:	4614      	mov	r4, r2
 8027242:	4606      	mov	r6, r0
 8027244:	b118      	cbz	r0, 802724e <_putc_r+0x12>
 8027246:	6983      	ldr	r3, [r0, #24]
 8027248:	b90b      	cbnz	r3, 802724e <_putc_r+0x12>
 802724a:	f7ff fa89 	bl	8026760 <__sinit>
 802724e:	4b1c      	ldr	r3, [pc, #112]	; (80272c0 <_putc_r+0x84>)
 8027250:	429c      	cmp	r4, r3
 8027252:	d124      	bne.n	802729e <_putc_r+0x62>
 8027254:	6874      	ldr	r4, [r6, #4]
 8027256:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027258:	07d8      	lsls	r0, r3, #31
 802725a:	d405      	bmi.n	8027268 <_putc_r+0x2c>
 802725c:	89a3      	ldrh	r3, [r4, #12]
 802725e:	0599      	lsls	r1, r3, #22
 8027260:	d402      	bmi.n	8027268 <_putc_r+0x2c>
 8027262:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027264:	f7ff fb2c 	bl	80268c0 <__retarget_lock_acquire_recursive>
 8027268:	68a3      	ldr	r3, [r4, #8]
 802726a:	3b01      	subs	r3, #1
 802726c:	2b00      	cmp	r3, #0
 802726e:	60a3      	str	r3, [r4, #8]
 8027270:	da05      	bge.n	802727e <_putc_r+0x42>
 8027272:	69a2      	ldr	r2, [r4, #24]
 8027274:	4293      	cmp	r3, r2
 8027276:	db1c      	blt.n	80272b2 <_putc_r+0x76>
 8027278:	b2eb      	uxtb	r3, r5
 802727a:	2b0a      	cmp	r3, #10
 802727c:	d019      	beq.n	80272b2 <_putc_r+0x76>
 802727e:	6823      	ldr	r3, [r4, #0]
 8027280:	1c5a      	adds	r2, r3, #1
 8027282:	6022      	str	r2, [r4, #0]
 8027284:	701d      	strb	r5, [r3, #0]
 8027286:	b2ed      	uxtb	r5, r5
 8027288:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802728a:	07da      	lsls	r2, r3, #31
 802728c:	d405      	bmi.n	802729a <_putc_r+0x5e>
 802728e:	89a3      	ldrh	r3, [r4, #12]
 8027290:	059b      	lsls	r3, r3, #22
 8027292:	d402      	bmi.n	802729a <_putc_r+0x5e>
 8027294:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027296:	f7ff fb14 	bl	80268c2 <__retarget_lock_release_recursive>
 802729a:	4628      	mov	r0, r5
 802729c:	bd70      	pop	{r4, r5, r6, pc}
 802729e:	4b09      	ldr	r3, [pc, #36]	; (80272c4 <_putc_r+0x88>)
 80272a0:	429c      	cmp	r4, r3
 80272a2:	d101      	bne.n	80272a8 <_putc_r+0x6c>
 80272a4:	68b4      	ldr	r4, [r6, #8]
 80272a6:	e7d6      	b.n	8027256 <_putc_r+0x1a>
 80272a8:	4b07      	ldr	r3, [pc, #28]	; (80272c8 <_putc_r+0x8c>)
 80272aa:	429c      	cmp	r4, r3
 80272ac:	bf08      	it	eq
 80272ae:	68f4      	ldreq	r4, [r6, #12]
 80272b0:	e7d1      	b.n	8027256 <_putc_r+0x1a>
 80272b2:	4629      	mov	r1, r5
 80272b4:	4622      	mov	r2, r4
 80272b6:	4630      	mov	r0, r6
 80272b8:	f7ff f85a 	bl	8026370 <__swbuf_r>
 80272bc:	4605      	mov	r5, r0
 80272be:	e7e3      	b.n	8027288 <_putc_r+0x4c>
 80272c0:	0802d2d8 	.word	0x0802d2d8
 80272c4:	0802d2f8 	.word	0x0802d2f8
 80272c8:	0802d2b8 	.word	0x0802d2b8

080272cc <__sread>:
 80272cc:	b510      	push	{r4, lr}
 80272ce:	460c      	mov	r4, r1
 80272d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80272d4:	f000 f8cc 	bl	8027470 <_read_r>
 80272d8:	2800      	cmp	r0, #0
 80272da:	bfab      	itete	ge
 80272dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80272de:	89a3      	ldrhlt	r3, [r4, #12]
 80272e0:	181b      	addge	r3, r3, r0
 80272e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80272e6:	bfac      	ite	ge
 80272e8:	6563      	strge	r3, [r4, #84]	; 0x54
 80272ea:	81a3      	strhlt	r3, [r4, #12]
 80272ec:	bd10      	pop	{r4, pc}

080272ee <__swrite>:
 80272ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80272f2:	461f      	mov	r7, r3
 80272f4:	898b      	ldrh	r3, [r1, #12]
 80272f6:	05db      	lsls	r3, r3, #23
 80272f8:	4605      	mov	r5, r0
 80272fa:	460c      	mov	r4, r1
 80272fc:	4616      	mov	r6, r2
 80272fe:	d505      	bpl.n	802730c <__swrite+0x1e>
 8027300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027304:	2302      	movs	r3, #2
 8027306:	2200      	movs	r2, #0
 8027308:	f000 f870 	bl	80273ec <_lseek_r>
 802730c:	89a3      	ldrh	r3, [r4, #12]
 802730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027312:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027316:	81a3      	strh	r3, [r4, #12]
 8027318:	4632      	mov	r2, r6
 802731a:	463b      	mov	r3, r7
 802731c:	4628      	mov	r0, r5
 802731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027322:	f000 b817 	b.w	8027354 <_write_r>

08027326 <__sseek>:
 8027326:	b510      	push	{r4, lr}
 8027328:	460c      	mov	r4, r1
 802732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802732e:	f000 f85d 	bl	80273ec <_lseek_r>
 8027332:	1c43      	adds	r3, r0, #1
 8027334:	89a3      	ldrh	r3, [r4, #12]
 8027336:	bf15      	itete	ne
 8027338:	6560      	strne	r0, [r4, #84]	; 0x54
 802733a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802733e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027342:	81a3      	strheq	r3, [r4, #12]
 8027344:	bf18      	it	ne
 8027346:	81a3      	strhne	r3, [r4, #12]
 8027348:	bd10      	pop	{r4, pc}

0802734a <__sclose>:
 802734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802734e:	f000 b81b 	b.w	8027388 <_close_r>
	...

08027354 <_write_r>:
 8027354:	b538      	push	{r3, r4, r5, lr}
 8027356:	4d07      	ldr	r5, [pc, #28]	; (8027374 <_write_r+0x20>)
 8027358:	4604      	mov	r4, r0
 802735a:	4608      	mov	r0, r1
 802735c:	4611      	mov	r1, r2
 802735e:	2200      	movs	r2, #0
 8027360:	602a      	str	r2, [r5, #0]
 8027362:	461a      	mov	r2, r3
 8027364:	f7f0 fff9 	bl	801835a <_write>
 8027368:	1c43      	adds	r3, r0, #1
 802736a:	d102      	bne.n	8027372 <_write_r+0x1e>
 802736c:	682b      	ldr	r3, [r5, #0]
 802736e:	b103      	cbz	r3, 8027372 <_write_r+0x1e>
 8027370:	6023      	str	r3, [r4, #0]
 8027372:	bd38      	pop	{r3, r4, r5, pc}
 8027374:	20016278 	.word	0x20016278

08027378 <abort>:
 8027378:	b508      	push	{r3, lr}
 802737a:	2006      	movs	r0, #6
 802737c:	f000 f8b2 	bl	80274e4 <raise>
 8027380:	2001      	movs	r0, #1
 8027382:	f7f0 ffc3 	bl	801830c <_exit>
	...

08027388 <_close_r>:
 8027388:	b538      	push	{r3, r4, r5, lr}
 802738a:	4d06      	ldr	r5, [pc, #24]	; (80273a4 <_close_r+0x1c>)
 802738c:	2300      	movs	r3, #0
 802738e:	4604      	mov	r4, r0
 8027390:	4608      	mov	r0, r1
 8027392:	602b      	str	r3, [r5, #0]
 8027394:	f7f0 fffd 	bl	8018392 <_close>
 8027398:	1c43      	adds	r3, r0, #1
 802739a:	d102      	bne.n	80273a2 <_close_r+0x1a>
 802739c:	682b      	ldr	r3, [r5, #0]
 802739e:	b103      	cbz	r3, 80273a2 <_close_r+0x1a>
 80273a0:	6023      	str	r3, [r4, #0]
 80273a2:	bd38      	pop	{r3, r4, r5, pc}
 80273a4:	20016278 	.word	0x20016278

080273a8 <_fstat_r>:
 80273a8:	b538      	push	{r3, r4, r5, lr}
 80273aa:	4d07      	ldr	r5, [pc, #28]	; (80273c8 <_fstat_r+0x20>)
 80273ac:	2300      	movs	r3, #0
 80273ae:	4604      	mov	r4, r0
 80273b0:	4608      	mov	r0, r1
 80273b2:	4611      	mov	r1, r2
 80273b4:	602b      	str	r3, [r5, #0]
 80273b6:	f7f0 fff8 	bl	80183aa <_fstat>
 80273ba:	1c43      	adds	r3, r0, #1
 80273bc:	d102      	bne.n	80273c4 <_fstat_r+0x1c>
 80273be:	682b      	ldr	r3, [r5, #0]
 80273c0:	b103      	cbz	r3, 80273c4 <_fstat_r+0x1c>
 80273c2:	6023      	str	r3, [r4, #0]
 80273c4:	bd38      	pop	{r3, r4, r5, pc}
 80273c6:	bf00      	nop
 80273c8:	20016278 	.word	0x20016278

080273cc <_isatty_r>:
 80273cc:	b538      	push	{r3, r4, r5, lr}
 80273ce:	4d06      	ldr	r5, [pc, #24]	; (80273e8 <_isatty_r+0x1c>)
 80273d0:	2300      	movs	r3, #0
 80273d2:	4604      	mov	r4, r0
 80273d4:	4608      	mov	r0, r1
 80273d6:	602b      	str	r3, [r5, #0]
 80273d8:	f7f0 fff7 	bl	80183ca <_isatty>
 80273dc:	1c43      	adds	r3, r0, #1
 80273de:	d102      	bne.n	80273e6 <_isatty_r+0x1a>
 80273e0:	682b      	ldr	r3, [r5, #0]
 80273e2:	b103      	cbz	r3, 80273e6 <_isatty_r+0x1a>
 80273e4:	6023      	str	r3, [r4, #0]
 80273e6:	bd38      	pop	{r3, r4, r5, pc}
 80273e8:	20016278 	.word	0x20016278

080273ec <_lseek_r>:
 80273ec:	b538      	push	{r3, r4, r5, lr}
 80273ee:	4d07      	ldr	r5, [pc, #28]	; (802740c <_lseek_r+0x20>)
 80273f0:	4604      	mov	r4, r0
 80273f2:	4608      	mov	r0, r1
 80273f4:	4611      	mov	r1, r2
 80273f6:	2200      	movs	r2, #0
 80273f8:	602a      	str	r2, [r5, #0]
 80273fa:	461a      	mov	r2, r3
 80273fc:	f7f0 fff0 	bl	80183e0 <_lseek>
 8027400:	1c43      	adds	r3, r0, #1
 8027402:	d102      	bne.n	802740a <_lseek_r+0x1e>
 8027404:	682b      	ldr	r3, [r5, #0]
 8027406:	b103      	cbz	r3, 802740a <_lseek_r+0x1e>
 8027408:	6023      	str	r3, [r4, #0]
 802740a:	bd38      	pop	{r3, r4, r5, pc}
 802740c:	20016278 	.word	0x20016278

08027410 <_realloc_r>:
 8027410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027414:	4680      	mov	r8, r0
 8027416:	4614      	mov	r4, r2
 8027418:	460e      	mov	r6, r1
 802741a:	b921      	cbnz	r1, 8027426 <_realloc_r+0x16>
 802741c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027420:	4611      	mov	r1, r2
 8027422:	f7fe bd59 	b.w	8025ed8 <_malloc_r>
 8027426:	b92a      	cbnz	r2, 8027434 <_realloc_r+0x24>
 8027428:	f7fe fcea 	bl	8025e00 <_free_r>
 802742c:	4625      	mov	r5, r4
 802742e:	4628      	mov	r0, r5
 8027430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027434:	f000 f872 	bl	802751c <_malloc_usable_size_r>
 8027438:	4284      	cmp	r4, r0
 802743a:	4607      	mov	r7, r0
 802743c:	d802      	bhi.n	8027444 <_realloc_r+0x34>
 802743e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8027442:	d812      	bhi.n	802746a <_realloc_r+0x5a>
 8027444:	4621      	mov	r1, r4
 8027446:	4640      	mov	r0, r8
 8027448:	f7fe fd46 	bl	8025ed8 <_malloc_r>
 802744c:	4605      	mov	r5, r0
 802744e:	2800      	cmp	r0, #0
 8027450:	d0ed      	beq.n	802742e <_realloc_r+0x1e>
 8027452:	42bc      	cmp	r4, r7
 8027454:	4622      	mov	r2, r4
 8027456:	4631      	mov	r1, r6
 8027458:	bf28      	it	cs
 802745a:	463a      	movcs	r2, r7
 802745c:	f7fe fca0 	bl	8025da0 <memcpy>
 8027460:	4631      	mov	r1, r6
 8027462:	4640      	mov	r0, r8
 8027464:	f7fe fccc 	bl	8025e00 <_free_r>
 8027468:	e7e1      	b.n	802742e <_realloc_r+0x1e>
 802746a:	4635      	mov	r5, r6
 802746c:	e7df      	b.n	802742e <_realloc_r+0x1e>
	...

08027470 <_read_r>:
 8027470:	b538      	push	{r3, r4, r5, lr}
 8027472:	4d07      	ldr	r5, [pc, #28]	; (8027490 <_read_r+0x20>)
 8027474:	4604      	mov	r4, r0
 8027476:	4608      	mov	r0, r1
 8027478:	4611      	mov	r1, r2
 802747a:	2200      	movs	r2, #0
 802747c:	602a      	str	r2, [r5, #0]
 802747e:	461a      	mov	r2, r3
 8027480:	f7f0 ff4e 	bl	8018320 <_read>
 8027484:	1c43      	adds	r3, r0, #1
 8027486:	d102      	bne.n	802748e <_read_r+0x1e>
 8027488:	682b      	ldr	r3, [r5, #0]
 802748a:	b103      	cbz	r3, 802748e <_read_r+0x1e>
 802748c:	6023      	str	r3, [r4, #0]
 802748e:	bd38      	pop	{r3, r4, r5, pc}
 8027490:	20016278 	.word	0x20016278

08027494 <_raise_r>:
 8027494:	291f      	cmp	r1, #31
 8027496:	b538      	push	{r3, r4, r5, lr}
 8027498:	4604      	mov	r4, r0
 802749a:	460d      	mov	r5, r1
 802749c:	d904      	bls.n	80274a8 <_raise_r+0x14>
 802749e:	2316      	movs	r3, #22
 80274a0:	6003      	str	r3, [r0, #0]
 80274a2:	f04f 30ff 	mov.w	r0, #4294967295
 80274a6:	bd38      	pop	{r3, r4, r5, pc}
 80274a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80274aa:	b112      	cbz	r2, 80274b2 <_raise_r+0x1e>
 80274ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80274b0:	b94b      	cbnz	r3, 80274c6 <_raise_r+0x32>
 80274b2:	4620      	mov	r0, r4
 80274b4:	f000 f830 	bl	8027518 <_getpid_r>
 80274b8:	462a      	mov	r2, r5
 80274ba:	4601      	mov	r1, r0
 80274bc:	4620      	mov	r0, r4
 80274be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80274c2:	f000 b817 	b.w	80274f4 <_kill_r>
 80274c6:	2b01      	cmp	r3, #1
 80274c8:	d00a      	beq.n	80274e0 <_raise_r+0x4c>
 80274ca:	1c59      	adds	r1, r3, #1
 80274cc:	d103      	bne.n	80274d6 <_raise_r+0x42>
 80274ce:	2316      	movs	r3, #22
 80274d0:	6003      	str	r3, [r0, #0]
 80274d2:	2001      	movs	r0, #1
 80274d4:	e7e7      	b.n	80274a6 <_raise_r+0x12>
 80274d6:	2400      	movs	r4, #0
 80274d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80274dc:	4628      	mov	r0, r5
 80274de:	4798      	blx	r3
 80274e0:	2000      	movs	r0, #0
 80274e2:	e7e0      	b.n	80274a6 <_raise_r+0x12>

080274e4 <raise>:
 80274e4:	4b02      	ldr	r3, [pc, #8]	; (80274f0 <raise+0xc>)
 80274e6:	4601      	mov	r1, r0
 80274e8:	6818      	ldr	r0, [r3, #0]
 80274ea:	f7ff bfd3 	b.w	8027494 <_raise_r>
 80274ee:	bf00      	nop
 80274f0:	20000340 	.word	0x20000340

080274f4 <_kill_r>:
 80274f4:	b538      	push	{r3, r4, r5, lr}
 80274f6:	4d07      	ldr	r5, [pc, #28]	; (8027514 <_kill_r+0x20>)
 80274f8:	2300      	movs	r3, #0
 80274fa:	4604      	mov	r4, r0
 80274fc:	4608      	mov	r0, r1
 80274fe:	4611      	mov	r1, r2
 8027500:	602b      	str	r3, [r5, #0]
 8027502:	f7f0 fef1 	bl	80182e8 <_kill>
 8027506:	1c43      	adds	r3, r0, #1
 8027508:	d102      	bne.n	8027510 <_kill_r+0x1c>
 802750a:	682b      	ldr	r3, [r5, #0]
 802750c:	b103      	cbz	r3, 8027510 <_kill_r+0x1c>
 802750e:	6023      	str	r3, [r4, #0]
 8027510:	bd38      	pop	{r3, r4, r5, pc}
 8027512:	bf00      	nop
 8027514:	20016278 	.word	0x20016278

08027518 <_getpid_r>:
 8027518:	f7f0 bede 	b.w	80182d8 <_getpid>

0802751c <_malloc_usable_size_r>:
 802751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027520:	1f18      	subs	r0, r3, #4
 8027522:	2b00      	cmp	r3, #0
 8027524:	bfbc      	itt	lt
 8027526:	580b      	ldrlt	r3, [r1, r0]
 8027528:	18c0      	addlt	r0, r0, r3
 802752a:	4770      	bx	lr

0802752c <_init>:
 802752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802752e:	bf00      	nop
 8027530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027532:	bc08      	pop	{r3}
 8027534:	469e      	mov	lr, r3
 8027536:	4770      	bx	lr

08027538 <_fini>:
 8027538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802753a:	bf00      	nop
 802753c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802753e:	bc08      	pop	{r3}
 8027540:	469e      	mov	lr, r3
 8027542:	4770      	bx	lr
